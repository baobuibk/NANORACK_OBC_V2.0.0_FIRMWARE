
04_obc_v111_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .dma_buffer   000004a8  24000000  24000000  00028000  2**3
                  ALLOC
  1 .fs_buffer    00014280  240004a8  240004a8  00028000  2**2
                  ALLOC
  2 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00022ecc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00003528  0802316c  0802316c  0002416c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08026694  08026694  00027a48  2**0
                  CONTENTS, READONLY
  6 .ARM          00000008  08026694  08026694  00027694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0802669c  0802669c  00027a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0802669c  0802669c  0002769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  080266a0  080266a0  000276a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         00000320  24014728  080266a4  00027728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00045fb8  24014a48  080269c4  00027a48  2**2
                  ALLOC
 12 ._user_heap_stack 00000a00  2405aa00  080269c4  00028a00  2**0
                  ALLOC
 13 .dmesg_buffer 00018000  20000000  20000000  00028000  2**0
                  ALLOC
 14 .custom_data  00032000  30000000  30000000  00028000  2**0
                  ALLOC
 15 .shared_mem   00000000  3800f800  3800f800  00027a48  2**0
                  CONTENTS
 16 .ARM.attributes 0000002e  00000000  00000000  00027a48  2**0
                  CONTENTS, READONLY
 17 .debug_info   0003b8e9  00000000  00000000  00027a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000943d  00000000  00000000  0006335f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003688  00000000  00000000  0006c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000029be  00000000  00000000  0006fe28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0004e825  00000000  00000000  000727e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004e196  00000000  00000000  000c100b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001c6a41  00000000  00000000  0010f1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  002d5be2  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000f260  00000000  00000000  002d5c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000068  00000000  00000000  002e4e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24014a48 	.word	0x24014a48
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023154 	.word	0x08023154

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24014a4c 	.word	0x24014a4c
 80002dc:	08023154 	.word	0x08023154

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <Mgmt_HardwareSystemPreparing>:
#include "shared_reg.h"

SystemStatus_t Mgmt_GetSystemStatus(void);

Std_ReturnType Mgmt_HardwareSystemPreparing(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	Std_ReturnType ret = E_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	71fb      	strb	r3, [r7, #7]
	system_status.init_state = INIT_STATE_STEP_PREPARING;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <Mgmt_HardwareSystemPreparing+0x7c>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]

	RV3129_Driver_Init(I2C_RTC);
 80006ec:	481b      	ldr	r0, [pc, #108]	@ (800075c <Mgmt_HardwareSystemPreparing+0x80>)
 80006ee:	f008 f8e9 	bl	80088c4 <RV3129_Driver_Init>
	FRAM_SPI_Driver_Init(SPI_MEM, FRAM_CS_Port, FRAM_CS);
 80006f2:	2210      	movs	r2, #16
 80006f4:	491a      	ldr	r1, [pc, #104]	@ (8000760 <Mgmt_HardwareSystemPreparing+0x84>)
 80006f6:	481b      	ldr	r0, [pc, #108]	@ (8000764 <Mgmt_HardwareSystemPreparing+0x88>)
 80006f8:	f008 fa3c 	bl	8008b74 <FRAM_SPI_Driver_Init>
	ret = UART_DMA_Driver_Init();
 80006fc:	f001 fe34 	bl	8002368 <UART_DMA_Driver_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	71fb      	strb	r3, [r7, #7]

    Watchdog_Device_Init();
 8000704:	f008 f9d6 	bl	8008ab4 <Watchdog_Device_Init>

	Utils_SoftTime_Init();
 8000708:	f009 fd5c 	bl	800a1c4 <Utils_SoftTime_Init>

	SharedREG_Init(DIR_M7_TO_M4);
 800070c:	2000      	movs	r0, #0
 800070e:	f001 fbcd 	bl	8001eac <SharedREG_Init>

	Sys_Debugcast(E_OK,	LOG_NOTICE , 	"OBC OS Preparing!");
 8000712:	4a15      	ldr	r2, [pc, #84]	@ (8000768 <Mgmt_HardwareSystemPreparing+0x8c>)
 8000714:	2102      	movs	r1, #2
 8000716:	2000      	movs	r0, #0
 8000718:	f007 fe08 	bl	800832c <Sys_Debugcast>
	Sys_Debugcast(E_OK,	LOG_INFOR ,  	"OBC OS Preparing!");
 800071c:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <Mgmt_HardwareSystemPreparing+0x8c>)
 800071e:	2100      	movs	r1, #0
 8000720:	2000      	movs	r0, #0
 8000722:	f007 fe03 	bl	800832c <Sys_Debugcast>
	Sys_Debugcast(E_OK,	LOG_DEBUG, 		"OBC OS Preparing!");
 8000726:	4a10      	ldr	r2, [pc, #64]	@ (8000768 <Mgmt_HardwareSystemPreparing+0x8c>)
 8000728:	2101      	movs	r1, #1
 800072a:	2000      	movs	r0, #0
 800072c:	f007 fdfe 	bl	800832c <Sys_Debugcast>
	Sys_Debugcast(E_OK, LOG_WARN, 		"OBC OS Preparing!");
 8000730:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <Mgmt_HardwareSystemPreparing+0x8c>)
 8000732:	2103      	movs	r1, #3
 8000734:	2000      	movs	r0, #0
 8000736:	f007 fdf9 	bl	800832c <Sys_Debugcast>
	Sys_Debugcast(E_OK, LOG_ERROR, 		"OBC OS Preparing!");
 800073a:	4a0b      	ldr	r2, [pc, #44]	@ (8000768 <Mgmt_HardwareSystemPreparing+0x8c>)
 800073c:	2104      	movs	r1, #4
 800073e:	2000      	movs	r0, #0
 8000740:	f007 fdf4 	bl	800832c <Sys_Debugcast>
	Sys_Debugcast(E_OK, LOG_FATAL, 		"OBC OS Preparing!");
 8000744:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <Mgmt_HardwareSystemPreparing+0x8c>)
 8000746:	2105      	movs	r1, #5
 8000748:	2000      	movs	r0, #0
 800074a:	f007 fdef 	bl	800832c <Sys_Debugcast>
	return ret;
 800074e:	79fb      	ldrb	r3, [r7, #7]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	24014a64 	.word	0x24014a64
 800075c:	40005800 	.word	0x40005800
 8000760:	58021000 	.word	0x58021000
 8000764:	40013400 	.word	0x40013400
 8000768:	0802316c 	.word	0x0802316c

0800076c <Mgmt_SystemStart>:

void Mgmt_SystemStart(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	Sys_Debugcast(E_OK,	LOG_NOTICE , 	"OBC OS Starting!");
 8000770:	4a04      	ldr	r2, [pc, #16]	@ (8000784 <Mgmt_SystemStart+0x18>)
 8000772:	2102      	movs	r1, #2
 8000774:	2000      	movs	r0, #0
 8000776:	f007 fdd9 	bl	800832c <Sys_Debugcast>

	OBC_RTOS_Start();
 800077a:	f000 f8ed 	bl	8000958 <OBC_RTOS_Start>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	08023180 	.word	0x08023180

08000788 <Mgmt_SystemInitStepZero>:

/*************************************************
 *                   RTOS Control                *
 *************************************************/
Std_ReturnType Mgmt_SystemInitStepZero(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
	Std_ReturnType ret = E_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	71fb      	strb	r3, [r7, #7]
	system_status.init_state = INIT_STATE_STEP_ZERO;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <Mgmt_SystemInitStepZero+0x50>)
 8000794:	2202      	movs	r2, #2
 8000796:	701a      	strb	r2, [r3, #0]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step Zero: Pending...");
 8000798:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <Mgmt_SystemInitStepZero+0x54>)
 800079a:	2100      	movs	r1, #0
 800079c:	2000      	movs	r0, #0
 800079e:	f007 fdc5 	bl	800832c <Sys_Debugcast>

	ret = Utils_SoftTime_Sync();
 80007a2:	f009 fee5 	bl	800a570 <Utils_SoftTime_Sync>
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	if(Utils_SoftTime_Sync() == E_OK){
 80007aa:	f009 fee1 	bl	800a570 <Utils_SoftTime_Sync>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d105      	bne.n	80007c0 <Mgmt_SystemInitStepZero+0x38>
		Sys_Boardcast(E_OK,	LOG_NOTICE, "[Sync Time!]");
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <Mgmt_SystemInitStepZero+0x58>)
 80007b6:	2102      	movs	r1, #2
 80007b8:	2000      	movs	r0, #0
 80007ba:	f007 fca9 	bl	8008110 <Sys_Boardcast>
 80007be:	e005      	b.n	80007cc <Mgmt_SystemInitStepZero+0x44>
	}else{
		system_status.last_error = ret;
 80007c0:	4a05      	ldr	r2, [pc, #20]	@ (80007d8 <Mgmt_SystemInitStepZero+0x50>)
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 80007c6:	4b04      	ldr	r3, [pc, #16]	@ (80007d8 <Mgmt_SystemInitStepZero+0x50>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 80007cc:	79fb      	ldrb	r3, [r7, #7]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	24014a64 	.word	0x24014a64
 80007dc:	08023194 	.word	0x08023194
 80007e0:	080231ac 	.word	0x080231ac

080007e4 <Mgmt_SystemInitStepOne>:

Std_ReturnType Mgmt_SystemInitStepOne(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	system_status.init_state = INIT_STATE_STEP_ONE;
 80007ea:	4b20      	ldr	r3, [pc, #128]	@ (800086c <Mgmt_SystemInitStepOne+0x88>)
 80007ec:	2203      	movs	r2, #3
 80007ee:	701a      	strb	r2, [r3, #0]
	Std_ReturnType ret = E_ERROR;
 80007f0:	2301      	movs	r3, #1
 80007f2:	71fb      	strb	r3, [r7, #7]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step One: Pending...");
 80007f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000870 <Mgmt_SystemInitStepOne+0x8c>)
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f007 fd97 	bl	800832c <Sys_Debugcast>

	ret = SystemCLI_Init();
 80007fe:	f004 fc73 	bl	80050e8 <SystemCLI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00b      	beq.n	8000824 <Mgmt_SystemInitStepOne+0x40>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[CLI-Interface Init Fail]");
 800080c:	4a19      	ldr	r2, [pc, #100]	@ (8000874 <Mgmt_SystemInitStepOne+0x90>)
 800080e:	2104      	movs	r1, #4
 8000810:	2001      	movs	r0, #1
 8000812:	f007 fc7d 	bl	8008110 <Sys_Boardcast>
		system_status.last_error = ret;
 8000816:	4a15      	ldr	r2, [pc, #84]	@ (800086c <Mgmt_SystemInitStepOne+0x88>)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <Mgmt_SystemInitStepOne+0x88>)
 800081e:	2207      	movs	r2, #7
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e004      	b.n	800082e <Mgmt_SystemInitStepOne+0x4a>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[CLI-Interface Init Done]");
 8000824:	4a14      	ldr	r2, [pc, #80]	@ (8000878 <Mgmt_SystemInitStepOne+0x94>)
 8000826:	2102      	movs	r1, #2
 8000828:	2000      	movs	r0, #0
 800082a:	f007 fc71 	bl	8008110 <Sys_Boardcast>
	}

	ret = Link_SDFS_Driver();
 800082e:	f006 feab 	bl	8007588 <Link_SDFS_Driver>
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00b      	beq.n	8000854 <Mgmt_SystemInitStepOne+0x70>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[Link FATFS Fail]");
 800083c:	4a0f      	ldr	r2, [pc, #60]	@ (800087c <Mgmt_SystemInitStepOne+0x98>)
 800083e:	2104      	movs	r1, #4
 8000840:	2001      	movs	r0, #1
 8000842:	f007 fc65 	bl	8008110 <Sys_Boardcast>
		system_status.last_error = ret;
 8000846:	4a09      	ldr	r2, [pc, #36]	@ (800086c <Mgmt_SystemInitStepOne+0x88>)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <Mgmt_SystemInitStepOne+0x88>)
 800084e:	2207      	movs	r2, #7
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	e004      	b.n	800085e <Mgmt_SystemInitStepOne+0x7a>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[Link FATFS Success]");
 8000854:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <Mgmt_SystemInitStepOne+0x9c>)
 8000856:	2102      	movs	r1, #2
 8000858:	2000      	movs	r0, #0
 800085a:	f007 fc59 	bl	8008110 <Sys_Boardcast>
	}

	SysLogQueue_Init();
 800085e:	f007 ff03 	bl	8008668 <SysLogQueue_Init>

	return ret;
 8000862:	79fb      	ldrb	r3, [r7, #7]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24014a64 	.word	0x24014a64
 8000870:	080231bc 	.word	0x080231bc
 8000874:	080231d4 	.word	0x080231d4
 8000878:	080231f0 	.word	0x080231f0
 800087c:	0802320c 	.word	0x0802320c
 8000880:	08023220 	.word	0x08023220

08000884 <Mgmt_SystemInitStepTwo>:

Std_ReturnType Mgmt_SystemInitStepTwo(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
	system_status.init_state = INIT_STATE_STEP_TWO;
 800088a:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <Mgmt_SystemInitStepTwo+0x8c>)
 800088c:	2204      	movs	r2, #4
 800088e:	701a      	strb	r2, [r3, #0]
	Std_ReturnType ret = E_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	71fb      	strb	r3, [r7, #7]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step Two: Pending...");
 8000894:	4a1f      	ldr	r2, [pc, #124]	@ (8000914 <Mgmt_SystemInitStepTwo+0x90>)
 8000896:	2100      	movs	r1, #0
 8000898:	2000      	movs	r0, #0
 800089a:	f007 fd47 	bl	800832c <Sys_Debugcast>

	ret = SPI_SlaveDevice_Init();
 800089e:	f009 f80d 	bl	80098bc <SPI_SlaveDevice_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00b      	beq.n	80008c4 <Mgmt_SystemInitStepTwo+0x40>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[SPI Device Init Fail]");
 80008ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000918 <Mgmt_SystemInitStepTwo+0x94>)
 80008ae:	2104      	movs	r1, #4
 80008b0:	2001      	movs	r0, #1
 80008b2:	f007 fc2d 	bl	8008110 <Sys_Boardcast>
		system_status.last_error = ret;
 80008b6:	4a16      	ldr	r2, [pc, #88]	@ (8000910 <Mgmt_SystemInitStepTwo+0x8c>)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <Mgmt_SystemInitStepTwo+0x8c>)
 80008be:	2207      	movs	r2, #7
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	e004      	b.n	80008ce <Mgmt_SystemInitStepTwo+0x4a>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[SPI Device Init Done]");
 80008c4:	4a15      	ldr	r2, [pc, #84]	@ (800091c <Mgmt_SystemInitStepTwo+0x98>)
 80008c6:	2102      	movs	r1, #2
 80008c8:	2000      	movs	r0, #0
 80008ca:	f007 fc21 	bl	8008110 <Sys_Boardcast>
	}

	ret = SPI_MasterDevice_Init(SPI6, SPI6_EXP_CS_GPIO_Port, SPI6_EXP_CS_Pin);
 80008ce:	2210      	movs	r2, #16
 80008d0:	4913      	ldr	r1, [pc, #76]	@ (8000920 <Mgmt_SystemInitStepTwo+0x9c>)
 80008d2:	4814      	ldr	r0, [pc, #80]	@ (8000924 <Mgmt_SystemInitStepTwo+0xa0>)
 80008d4:	f008 fcb8 	bl	8009248 <SPI_MasterDevice_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00b      	beq.n	80008fa <Mgmt_SystemInitStepTwo+0x76>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[SPI Master Init Fail]");
 80008e2:	4a11      	ldr	r2, [pc, #68]	@ (8000928 <Mgmt_SystemInitStepTwo+0xa4>)
 80008e4:	2104      	movs	r1, #4
 80008e6:	2001      	movs	r0, #1
 80008e8:	f007 fc12 	bl	8008110 <Sys_Boardcast>
		system_status.last_error = ret;
 80008ec:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <Mgmt_SystemInitStepTwo+0x8c>)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 80008f2:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <Mgmt_SystemInitStepTwo+0x8c>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e004      	b.n	8000904 <Mgmt_SystemInitStepTwo+0x80>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[SPI Master Init Done]");
 80008fa:	4a0c      	ldr	r2, [pc, #48]	@ (800092c <Mgmt_SystemInitStepTwo+0xa8>)
 80008fc:	2102      	movs	r1, #2
 80008fe:	2000      	movs	r0, #0
 8000900:	f007 fc06 	bl	8008110 <Sys_Boardcast>
	}

	return ret;
 8000904:	79fb      	ldrb	r3, [r7, #7]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	24014a64 	.word	0x24014a64
 8000914:	08023238 	.word	0x08023238
 8000918:	08023250 	.word	0x08023250
 800091c:	08023268 	.word	0x08023268
 8000920:	58020000 	.word	0x58020000
 8000924:	58001400 	.word	0x58001400
 8000928:	08023280 	.word	0x08023280
 800092c:	08023298 	.word	0x08023298

08000930 <Mgmt_SystemInitFinal>:

Std_ReturnType Mgmt_SystemInitFinal(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	system_status.init_state = INIT_STATE_FINAL;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <Mgmt_SystemInitFinal+0x20>)
 8000936:	2205      	movs	r2, #5
 8000938:	701a      	strb	r2, [r3, #0]
	system_status.init_state = INIT_STATE_COMPLETED;
 800093a:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <Mgmt_SystemInitFinal+0x20>)
 800093c:	2206      	movs	r2, #6
 800093e:	701a      	strb	r2, [r3, #0]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step Final: Pending...");
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <Mgmt_SystemInitFinal+0x24>)
 8000942:	2100      	movs	r1, #0
 8000944:	2000      	movs	r0, #0
 8000946:	f007 fcf1 	bl	800832c <Sys_Debugcast>
	return E_OK;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24014a64 	.word	0x24014a64
 8000954:	080232b0 	.word	0x080232b0

08000958 <OBC_RTOS_Start>:
#include "SysLog/syslog.h"
#include "stdio.h"

/*--------------------Star RTOS--------------*/
void OBC_RTOS_Start(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	OBC_RootGrowUp();
 800095c:	f000 f9e6 	bl	8000d2c <OBC_RootGrowUp>
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <vApplicationStackOverflowHook>:

/*--------------------RTOS Task List--------------*/

/* Hook prototypes */
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0c2      	sub	sp, #264	@ 0x108
 8000968:	af00      	add	r7, sp, #0
 800096a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800096e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000972:	6018      	str	r0, [r3, #0]
 8000974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800097c:	6019      	str	r1, [r3, #0]
    char buffer[256];
    snprintf(buffer, sizeof(buffer), "Stack Overflow -> Task %s", pcTaskName);
 800097e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000986:	f107 0008 	add.w	r0, r7, #8
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <vApplicationStackOverflowHook+0x4c>)
 800098e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000992:	f021 fab7 	bl	8021f04 <sniprintf>
	SYSLOG_FATAL_POLL(buffer);
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	2201      	movs	r2, #1
 800099c:	4619      	mov	r1, r3
 800099e:	2005      	movs	r0, #5
 80009a0:	f007 fd68 	bl	8008474 <syslog_log>
}
 80009a4:	bf00      	nop
 80009a6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	080232c8 	.word	0x080232c8

080009b4 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0c0      	sub	sp, #256	@ 0x100
 80009b8:	af00      	add	r7, sp, #0
    char buffer[256];
    snprintf(buffer, sizeof(buffer), "Malloc Hook Overflow");
 80009ba:	463b      	mov	r3, r7
 80009bc:	4a08      	ldr	r2, [pc, #32]	@ (80009e0 <vApplicationMallocFailedHook+0x2c>)
 80009be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c2:	4618      	mov	r0, r3
 80009c4:	f021 fa9e 	bl	8021f04 <sniprintf>
	SYSLOG_FATAL_POLL(buffer);
 80009c8:	463b      	mov	r3, r7
 80009ca:	2201      	movs	r2, #1
 80009cc:	4619      	mov	r1, r3
 80009ce:	2005      	movs	r0, #5
 80009d0:	f007 fd50 	bl	8008474 <syslog_log>
}
 80009d4:	bf00      	nop
 80009d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	080232e4 	.word	0x080232e4

080009e4 <LL_GPIO_IsOutputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(const GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->ODR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	695a      	ldr	r2, [r3, #20]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	4013      	ands	r3, r2
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d101      	bne.n	8000a00 <LL_GPIO_IsOutputPinSet+0x1c>
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <LL_GPIO_IsOutputPinSet+0x1e>
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	619a      	str	r2, [r3, #24]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	041a      	lsls	r2, r3, #16
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	619a      	str	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <toCM4_Init>:
#include "utils.h"
#include "main.h"
#include "board.h"
#include "gpio_state.h"

void toCM4_Init(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	GPIO_SetHigh(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000a4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a50:	4806      	ldr	r0, [pc, #24]	@ (8000a6c <toCM4_Init+0x24>)
 8000a52:	f7ff ffdc 	bl	8000a0e <LL_GPIO_SetOutputPin>
	GPIO_SetHigh(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000a56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a5a:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <toCM4_Init+0x24>)
 8000a5c:	f7ff ffd7 	bl	8000a0e <LL_GPIO_SetOutputPin>
    toCM4_SetState(TOCM4_IDLE);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f805 	bl	8000a70 <toCM4_SetState>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	58021400 	.word	0x58021400

08000a70 <toCM4_SetState>:

void toCM4_SetState(toCM4_State_t state) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b03      	cmp	r3, #3
 8000a7e:	d837      	bhi.n	8000af0 <toCM4_SetState+0x80>
 8000a80:	a201      	add	r2, pc, #4	@ (adr r2, 8000a88 <toCM4_SetState+0x18>)
 8000a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a86:	bf00      	nop
 8000a88:	08000a99 	.word	0x08000a99
 8000a8c:	08000aaf 	.word	0x08000aaf
 8000a90:	08000ac5 	.word	0x08000ac5
 8000a94:	08000adb 	.word	0x08000adb
        case TOCM4_ERROR:
            GPIO_SetLow(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000a98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a9c:	481c      	ldr	r0, [pc, #112]	@ (8000b10 <toCM4_SetState+0xa0>)
 8000a9e:	f7ff ffc4 	bl	8000a2a <LL_GPIO_ResetOutputPin>
            GPIO_SetLow(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000aa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa6:	481a      	ldr	r0, [pc, #104]	@ (8000b10 <toCM4_SetState+0xa0>)
 8000aa8:	f7ff ffbf 	bl	8000a2a <LL_GPIO_ResetOutputPin>
            break;
 8000aac:	e02b      	b.n	8000b06 <toCM4_SetState+0x96>
        case TOCM4_READYSEND:
            GPIO_SetLow(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000aae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ab2:	4817      	ldr	r0, [pc, #92]	@ (8000b10 <toCM4_SetState+0xa0>)
 8000ab4:	f7ff ffb9 	bl	8000a2a <LL_GPIO_ResetOutputPin>
            GPIO_SetHigh(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000ab8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000abc:	4814      	ldr	r0, [pc, #80]	@ (8000b10 <toCM4_SetState+0xa0>)
 8000abe:	f7ff ffa6 	bl	8000a0e <LL_GPIO_SetOutputPin>
            break;
 8000ac2:	e020      	b.n	8000b06 <toCM4_SetState+0x96>
        case TOCM4_BUSY:
            GPIO_SetHigh(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000ac4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ac8:	4811      	ldr	r0, [pc, #68]	@ (8000b10 <toCM4_SetState+0xa0>)
 8000aca:	f7ff ffa0 	bl	8000a0e <LL_GPIO_SetOutputPin>
            GPIO_SetLow(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000ace:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ad2:	480f      	ldr	r0, [pc, #60]	@ (8000b10 <toCM4_SetState+0xa0>)
 8000ad4:	f7ff ffa9 	bl	8000a2a <LL_GPIO_ResetOutputPin>
            break;
 8000ad8:	e015      	b.n	8000b06 <toCM4_SetState+0x96>
        case TOCM4_IDLE:
            GPIO_SetHigh(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000ada:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ade:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <toCM4_SetState+0xa0>)
 8000ae0:	f7ff ff95 	bl	8000a0e <LL_GPIO_SetOutputPin>
            GPIO_SetHigh(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000ae4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae8:	4809      	ldr	r0, [pc, #36]	@ (8000b10 <toCM4_SetState+0xa0>)
 8000aea:	f7ff ff90 	bl	8000a0e <LL_GPIO_SetOutputPin>
            break;
 8000aee:	e00a      	b.n	8000b06 <toCM4_SetState+0x96>
        default:
            GPIO_SetLow(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000af0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000af4:	4806      	ldr	r0, [pc, #24]	@ (8000b10 <toCM4_SetState+0xa0>)
 8000af6:	f7ff ff98 	bl	8000a2a <LL_GPIO_ResetOutputPin>
            GPIO_SetLow(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000afa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000afe:	4804      	ldr	r0, [pc, #16]	@ (8000b10 <toCM4_SetState+0xa0>)
 8000b00:	f7ff ff93 	bl	8000a2a <LL_GPIO_ResetOutputPin>
            break;
 8000b04:	bf00      	nop
    }
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	58021400 	.word	0x58021400

08000b14 <toCM4_GetState>:

toCM4_State_t toCM4_GetState(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
    uint8_t busy_state = GPIO_IsOutHigh(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000b1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b1e:	4819      	ldr	r0, [pc, #100]	@ (8000b84 <toCM4_GetState+0x70>)
 8000b20:	f7ff ff60 	bl	80009e4 <LL_GPIO_IsOutputPinSet>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf14      	ite	ne
 8000b2a:	2301      	movne	r3, #1
 8000b2c:	2300      	moveq	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	71fb      	strb	r3, [r7, #7]
    uint8_t readysend_state = GPIO_IsOutHigh(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000b32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b36:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <toCM4_GetState+0x70>)
 8000b38:	f7ff ff54 	bl	80009e4 <LL_GPIO_IsOutputPinSet>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	bf14      	ite	ne
 8000b42:	2301      	movne	r3, #1
 8000b44:	2300      	moveq	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	71bb      	strb	r3, [r7, #6]

    if (busy_state == 0 && readysend_state == 0) {
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d104      	bne.n	8000b5a <toCM4_GetState+0x46>
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <toCM4_GetState+0x46>
        return TOCM4_ERROR;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e010      	b.n	8000b7c <toCM4_GetState+0x68>
    } else if (busy_state == 0 && readysend_state == 1) {
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d104      	bne.n	8000b6a <toCM4_GetState+0x56>
 8000b60:	79bb      	ldrb	r3, [r7, #6]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d101      	bne.n	8000b6a <toCM4_GetState+0x56>
        return TOCM4_READYSEND;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e008      	b.n	8000b7c <toCM4_GetState+0x68>
    } else if (busy_state == 1 && readysend_state == 0) {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d104      	bne.n	8000b7a <toCM4_GetState+0x66>
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <toCM4_GetState+0x66>
        return TOCM4_BUSY;
 8000b76:	2302      	movs	r3, #2
 8000b78:	e000      	b.n	8000b7c <toCM4_GetState+0x68>
    } else { // busy_state == 1 && readysend_state == 1
        return TOCM4_IDLE;
 8000b7a:	2303      	movs	r3, #3
    }
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	58021400 	.word	0x58021400

08000b88 <ForwardMode_Set>:
#include <stdio.h>

static ForwardMode_t currentMode = FORWARD_MODE_NORMAL;
static uint8_t backslashCount = 0;

void ForwardMode_Set(ForwardMode_t mode) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
    currentMode = mode;
 8000b92:	4a06      	ldr	r2, [pc, #24]	@ (8000bac <ForwardMode_Set+0x24>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	7013      	strb	r3, [r2, #0]
    backslashCount = 0;
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <ForwardMode_Set+0x28>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	24014a67 	.word	0x24014a67
 8000bb0:	24014a68 	.word	0x24014a68

08000bb4 <ForwardMode_Get>:

ForwardMode_t ForwardMode_Get(void) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
    return currentMode;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <ForwardMode_Get+0x14>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	24014a67 	.word	0x24014a67

08000bcc <ForwardMode_ProcessReceivedByte>:

_Bool ForwardMode_ProcessReceivedByte(uint8_t byte) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
    if ((char)byte == '\\') {
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b5c      	cmp	r3, #92	@ 0x5c
 8000bda:	d106      	bne.n	8000bea <ForwardMode_ProcessReceivedByte+0x1e>
        backslashCount++;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <ForwardMode_ProcessReceivedByte+0x4c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <ForwardMode_ProcessReceivedByte+0x4c>)
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	e002      	b.n	8000bf0 <ForwardMode_ProcessReceivedByte+0x24>
    } else {
        backslashCount = 0;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <ForwardMode_ProcessReceivedByte+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
    }
    if (backslashCount >= 10) {
 8000bf0:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <ForwardMode_ProcessReceivedByte+0x4c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	d907      	bls.n	8000c08 <ForwardMode_ProcessReceivedByte+0x3c>
        currentMode = FORWARD_MODE_NORMAL;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <ForwardMode_ProcessReceivedByte+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
        backslashCount = 0;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <ForwardMode_ProcessReceivedByte+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
        return true;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e000      	b.n	8000c0a <ForwardMode_ProcessReceivedByte+0x3e>
    }
    return false;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	24014a68 	.word	0x24014a68
 8000c1c:	24014a67 	.word	0x24014a67

08000c20 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c30:	2b40      	cmp	r3, #64	@ 0x40
 8000c32:	d101      	bne.n	8000c38 <LL_USART_IsActiveFlag_TC+0x18>
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <LL_USART_IsActiveFlag_TC+0x1a>
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c56:	2b80      	cmp	r3, #128	@ 0x80
 8000c58:	d101      	bne.n	8000c5e <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e000      	b.n	8000c60 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000c78:	78fa      	ldrb	r2, [r7, #3]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <LL_GPIO_SetOutputPin>:
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	619a      	str	r2, [r3, #24]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <LL_GPIO_ResetOutputPin>:
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	041a      	lsls	r2, r3, #16
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <writeChar_auth_USB>:
/*************************************************
 *                    Header                     *
 *************************************************/
ShieldInstance_t auth_usb;

static void writeChar_auth_USB(char c) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    uint8_t c_to_send = c;
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	73fb      	strb	r3, [r7, #15]
    UART_Driver_Write(UART_USB, c_to_send);
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <writeChar_auth_USB+0x20>)
 8000cd8:	f001 fcfc 	bl	80026d4 <UART_Driver_Write>
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40011000 	.word	0x40011000

08000ce8 <OBC_RootTask>:
 *               	Root Task	                 *
 *************************************************/
void OBC_RootTask(void *pvParameters);

void OBC_RootTask(void *pvParameters)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	Sys_Debugcast(E_OK, LOG_NOTICE, "Root task started");
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8000d20 <OBC_RootTask+0x38>)
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f007 fb19 	bl	800832c <Sys_Debugcast>
    if (OBC_AppInit() != E_OK)
 8000cfa:	f000 f843 	bl	8000d84 <OBC_AppInit>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d007      	beq.n	8000d14 <OBC_RootTask+0x2c>
    {
        Sys_Boardcast(E_ERROR, LOG_ERROR, "!!! Application Initialization Failed");
 8000d04:	4a07      	ldr	r2, [pc, #28]	@ (8000d24 <OBC_RootTask+0x3c>)
 8000d06:	2104      	movs	r1, #4
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f007 fa01 	bl	8008110 <Sys_Boardcast>
        system_status.program_state = PROGRAM_STATE_ERROR;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <OBC_RootTask+0x40>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	705a      	strb	r2, [r3, #1]
    }

    vTaskDelete(NULL);
 8000d14:	2000      	movs	r0, #0
 8000d16:	f010 ff77 	bl	8011c08 <vTaskDelete>
    while(1){
 8000d1a:	bf00      	nop
 8000d1c:	e7fd      	b.n	8000d1a <OBC_RootTask+0x32>
 8000d1e:	bf00      	nop
 8000d20:	080232fc 	.word	0x080232fc
 8000d24:	08023310 	.word	0x08023310
 8000d28:	24014a6c 	.word	0x24014a6c

08000d2c <OBC_RootGrowUp>:
    	// Should not go here
    }
}

void OBC_RootGrowUp(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af04      	add	r7, sp, #16
    TaskHandle_t task_handle = xTaskCreateStatic(
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <OBC_RootGrowUp+0x44>)
 8000d34:	9302      	str	r3, [sp, #8]
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <OBC_RootGrowUp+0x48>)
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000d44:	490c      	ldr	r1, [pc, #48]	@ (8000d78 <OBC_RootGrowUp+0x4c>)
 8000d46:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <OBC_RootGrowUp+0x50>)
 8000d48:	f010 fdab 	bl	80118a2 <xTaskCreateStatic>
 8000d4c:	6078      	str	r0, [r7, #4]
        ROOT_PRIORITY,
        root_stack,
        &root_tcb
    );

    if (task_handle == NULL)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d106      	bne.n	8000d62 <OBC_RootGrowUp+0x36>
    {
        Sys_Boardcast(E_ERROR, LOG_FATAL, "Cannot Start Root-Task!!!");
 8000d54:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <OBC_RootGrowUp+0x54>)
 8000d56:	2105      	movs	r1, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f007 f9d9 	bl	8008110 <Sys_Boardcast>
        while (1);
 8000d5e:	bf00      	nop
 8000d60:	e7fd      	b.n	8000d5e <OBC_RootGrowUp+0x32>
    }

    vTaskStartScheduler();
 8000d62:	f011 f8f7 	bl	8011f54 <vTaskStartScheduler>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	24015ecc 	.word	0x24015ecc
 8000d74:	24014acc 	.word	0x24014acc
 8000d78:	08023338 	.word	0x08023338
 8000d7c:	08000ce9 	.word	0x08000ce9
 8000d80:	08023348 	.word	0x08023348

08000d84 <OBC_AppInit>:
/*************************************************
 *               	TASK INIT	                 *
 *************************************************/

Std_ReturnType OBC_AppInit(void)
{
 8000d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d86:	b0cf      	sub	sp, #316	@ 0x13c
 8000d88:	af06      	add	r7, sp, #24

	Std_ReturnType ret = E_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	ret = Mgmt_SystemInitStepZero();
 8000d90:	f7ff fcfa 	bl	8000788 <Mgmt_SystemInitStepZero>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8000d9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d005      	beq.n	8000dae <OBC_AppInit+0x2a>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Step Zero Failed!!!");
 8000da2:	4ac9      	ldr	r2, [pc, #804]	@ (80010c8 <OBC_AppInit+0x344>)
 8000da4:	2105      	movs	r1, #5
 8000da6:	2001      	movs	r0, #1
 8000da8:	f007 f9b2 	bl	8008110 <Sys_Boardcast>
 8000dac:	e004      	b.n	8000db8 <OBC_AppInit+0x34>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step Zero: PASS!");
 8000dae:	4ac7      	ldr	r2, [pc, #796]	@ (80010cc <OBC_AppInit+0x348>)
 8000db0:	2100      	movs	r1, #0
 8000db2:	2000      	movs	r0, #0
 8000db4:	f007 f9ac 	bl	8008110 <Sys_Boardcast>
	}

	ret = Mgmt_SystemInitStepOne();
 8000db8:	f7ff fd14 	bl	80007e4 <Mgmt_SystemInitStepOne>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8000dc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <OBC_AppInit+0x52>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Step One Failed!!!");
 8000dca:	4ac1      	ldr	r2, [pc, #772]	@ (80010d0 <OBC_AppInit+0x34c>)
 8000dcc:	2105      	movs	r1, #5
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f007 f99e 	bl	8008110 <Sys_Boardcast>
 8000dd4:	e004      	b.n	8000de0 <OBC_AppInit+0x5c>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step One: PASS!");
 8000dd6:	4abf      	ldr	r2, [pc, #764]	@ (80010d4 <OBC_AppInit+0x350>)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f007 f998 	bl	8008110 <Sys_Boardcast>
	}

	ret = Mgmt_SystemInitStepTwo();
 8000de0:	f7ff fd50 	bl	8000884 <Mgmt_SystemInitStepTwo>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8000dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <OBC_AppInit+0x7a>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Step Two Failed!!!");
 8000df2:	4ab9      	ldr	r2, [pc, #740]	@ (80010d8 <OBC_AppInit+0x354>)
 8000df4:	2105      	movs	r1, #5
 8000df6:	2001      	movs	r0, #1
 8000df8:	f007 f98a 	bl	8008110 <Sys_Boardcast>
 8000dfc:	e004      	b.n	8000e08 <OBC_AppInit+0x84>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step Two: PASS!");
 8000dfe:	4ab7      	ldr	r2, [pc, #732]	@ (80010dc <OBC_AppInit+0x358>)
 8000e00:	2100      	movs	r1, #0
 8000e02:	2000      	movs	r0, #0
 8000e04:	f007 f984 	bl	8008110 <Sys_Boardcast>
	}

	ret = Mgmt_SystemInitFinal();
 8000e08:	f7ff fd92 	bl	8000930 <Mgmt_SystemInitFinal>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8000e12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <OBC_AppInit+0xa2>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Final Failed!!!");
 8000e1a:	4ab1      	ldr	r2, [pc, #708]	@ (80010e0 <OBC_AppInit+0x35c>)
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f007 f976 	bl	8008110 <Sys_Boardcast>
 8000e24:	e004      	b.n	8000e30 <OBC_AppInit+0xac>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step Final: PASS!");
 8000e26:	4aaf      	ldr	r2, [pc, #700]	@ (80010e4 <OBC_AppInit+0x360>)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f007 f970 	bl	8008110 <Sys_Boardcast>
	}

	FS_Init();
 8000e30:	f006 fa5a 	bl	80072e8 <FS_Init>

	MIN_Process_Init();
 8000e34:	f006 febe 	bl	8007bb4 <MIN_Process_Init>

	if (ret != E_OK){
 8000e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <OBC_AppInit+0xc8>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Failed!!!");
 8000e40:	4aa9      	ldr	r2, [pc, #676]	@ (80010e8 <OBC_AppInit+0x364>)
 8000e42:	2105      	movs	r1, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	f007 f963 	bl	8008110 <Sys_Boardcast>
 8000e4a:	e004      	b.n	8000e56 <OBC_AppInit+0xd2>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "[WELCOME]");
 8000e4c:	4aa7      	ldr	r2, [pc, #668]	@ (80010ec <OBC_AppInit+0x368>)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f007 f95d 	bl	8008110 <Sys_Boardcast>
	}

	char boot_log[256] = {0};
 8000e56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e5a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e64:	461a      	mov	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	f021 f911 	bl	802208e <memset>
    int offset = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    s_DateTime rtc;
    Utils_GetRTC(&rtc);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4618      	mov	r0, r3
 8000e78:	f009 f9e8 	bl	800a24c <Utils_GetRTC>
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000e7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e80:	f107 0210 	add.w	r2, r7, #16
 8000e84:	18d0      	adds	r0, r2, r3
 8000e86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e8a:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
                "\r\nHardtime: 20%02d-%02d-%02d %02d:%02d:%02d ",
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000e8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e92:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e96:	789b      	ldrb	r3, [r3, #2]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000e98:	469c      	mov	ip, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000e9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000ea2:	785b      	ldrb	r3, [r3, #1]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000ea4:	461a      	mov	r2, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000ea6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000eaa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000eae:	781b      	ldrb	r3, [r3, #0]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000eb0:	461c      	mov	r4, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000eb2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000eb6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000eba:	78db      	ldrb	r3, [r3, #3]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000ebc:	461d      	mov	r5, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000ebe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ec2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000ec6:	791b      	ldrb	r3, [r3, #4]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000ec8:	461e      	mov	r6, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000eca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ece:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000ed2:	795b      	ldrb	r3, [r3, #5]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000ed4:	9304      	str	r3, [sp, #16]
 8000ed6:	9603      	str	r6, [sp, #12]
 8000ed8:	9502      	str	r5, [sp, #8]
 8000eda:	9401      	str	r4, [sp, #4]
 8000edc:	9200      	str	r2, [sp, #0]
 8000ede:	4663      	mov	r3, ip
 8000ee0:	4a83      	ldr	r2, [pc, #524]	@ (80010f0 <OBC_AppInit+0x36c>)
 8000ee2:	f021 f80f 	bl	8021f04 <sniprintf>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000eec:	4413      	add	r3, r2
 8000eee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    uint8_t hours = 0, minutes = 0, seconds = 0;
 8000ef2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ef6:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f02:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f0e:	f2a3 131b 	subw	r3, r3, #283	@ 0x11b
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
    Utils_GetWorkingTime(NULL, &hours, &minutes, &seconds);
 8000f16:	1d7b      	adds	r3, r7, #5
 8000f18:	1dba      	adds	r2, r7, #6
 8000f1a:	1df9      	adds	r1, r7, #7
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f009 f9ef 	bl	800a300 <Utils_GetWorkingTime>
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000f22:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f26:	f107 0210 	add.w	r2, r7, #16
 8000f2a:	18d0      	adds	r0, r2, r3
 8000f2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f30:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8000f34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f38:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461c      	mov	r4, r3
 8000f40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f44:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f50:	f2a3 131b 	subw	r3, r3, #283	@ 0x11b
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	9200      	str	r2, [sp, #0]
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	4a65      	ldr	r2, [pc, #404]	@ (80010f4 <OBC_AppInit+0x370>)
 8000f5e:	f020 ffd1 	bl	8021f04 <sniprintf>
 8000f62:	4602      	mov	r2, r0
 8000f64:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f68:	4413      	add	r3, r2
 8000f6a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
                    "\r\nUptime: %02u:%02u:%02u",
                    hours, minutes, seconds);
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000f6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f72:	f107 0210 	add.w	r2, r7, #16
 8000f76:	18d0      	adds	r0, r2, r3
 8000f78:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f7c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000f80:	4a5d      	ldr	r2, [pc, #372]	@ (80010f8 <OBC_AppInit+0x374>)
 8000f82:	4619      	mov	r1, r3
 8000f84:	f020 ffbe 	bl	8021f04 <sniprintf>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f8e:	4413      	add	r3, r2
 8000f90:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
                    "\r\nWelcome to SpaceLiinTech - SLT BEE-PC1 OBC \r\n\r\n");

	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000f9a:	e017      	b.n	8000fcc <OBC_AppInit+0x248>
	{
	    while (!LL_USART_IsActiveFlag_TXE(USART1));
 8000f9c:	bf00      	nop
 8000f9e:	4857      	ldr	r0, [pc, #348]	@ (80010fc <OBC_AppInit+0x378>)
 8000fa0:	f7ff fe51 	bl	8000c46 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f9      	beq.n	8000f9e <OBC_AppInit+0x21a>
	    LL_USART_TransmitData8(USART1, (uint8_t)boot_log[i]);
 8000faa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000fae:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000fb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000fb6:	4413      	add	r3, r2
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	484f      	ldr	r0, [pc, #316]	@ (80010fc <OBC_AppInit+0x378>)
 8000fbe:	f7ff fe55 	bl	8000c6c <LL_USART_TransmitData8>
	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8000fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000fcc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000fd0:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1dd      	bne.n	8000f9c <OBC_AppInit+0x218>
	}
	while (!LL_USART_IsActiveFlag_TC(USART1));
 8000fe0:	bf00      	nop
 8000fe2:	4846      	ldr	r0, [pc, #280]	@ (80010fc <OBC_AppInit+0x378>)
 8000fe4:	f7ff fe1c 	bl	8000c20 <LL_USART_IsActiveFlag_TC>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f9      	beq.n	8000fe2 <OBC_AppInit+0x25e>

	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000ff4:	e017      	b.n	8001026 <OBC_AppInit+0x2a2>
	{
	    while (!LL_USART_IsActiveFlag_TXE(USART2));
 8000ff6:	bf00      	nop
 8000ff8:	4841      	ldr	r0, [pc, #260]	@ (8001100 <OBC_AppInit+0x37c>)
 8000ffa:	f7ff fe24 	bl	8000c46 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f9      	beq.n	8000ff8 <OBC_AppInit+0x274>
	    LL_USART_TransmitData8(USART2, (uint8_t)boot_log[i]);
 8001004:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001008:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800100c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	483a      	ldr	r0, [pc, #232]	@ (8001100 <OBC_AppInit+0x37c>)
 8001018:	f7ff fe28 	bl	8000c6c <LL_USART_TransmitData8>
	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 800101c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001020:	3301      	adds	r3, #1
 8001022:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001026:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800102a:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800102e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1dd      	bne.n	8000ff6 <OBC_AppInit+0x272>
	}
	while (!LL_USART_IsActiveFlag_TC(USART2));
 800103a:	bf00      	nop
 800103c:	4830      	ldr	r0, [pc, #192]	@ (8001100 <OBC_AppInit+0x37c>)
 800103e:	f7ff fdef 	bl	8000c20 <LL_USART_IsActiveFlag_TC>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f9      	beq.n	800103c <OBC_AppInit+0x2b8>


    CREATE_TASK(FS_Gatekeeper_Task, 	"FS_Gatekeeper", 	MIN_STACK_SIZE * 20, 	NULL, 									2, NULL);
 8001048:	2300      	movs	r3, #0
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	2302      	movs	r3, #2
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001056:	492b      	ldr	r1, [pc, #172]	@ (8001104 <OBC_AppInit+0x380>)
 8001058:	482b      	ldr	r0, [pc, #172]	@ (8001108 <OBC_AppInit+0x384>)
 800105a:	f010 fc86 	bl	801196a <xTaskCreate>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	d001      	beq.n	8001068 <OBC_AppInit+0x2e4>
 8001064:	2301      	movs	r3, #1
 8001066:	e0ed      	b.n	8001244 <OBC_AppInit+0x4c0>

    CREATE_TASK(MIN_Process_Task, 		"MIN_Process", 		MIN_STACK_SIZE * 20, 	NULL, 									1, NULL);
 8001068:	2300      	movs	r3, #0
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	2301      	movs	r3, #1
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2300      	movs	r3, #0
 8001072:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001076:	4925      	ldr	r1, [pc, #148]	@ (800110c <OBC_AppInit+0x388>)
 8001078:	4825      	ldr	r0, [pc, #148]	@ (8001110 <OBC_AppInit+0x38c>)
 800107a:	f010 fc76 	bl	801196a <xTaskCreate>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d001      	beq.n	8001088 <OBC_AppInit+0x304>
 8001084:	2301      	movs	r3, #1
 8001086:	e0dd      	b.n	8001244 <OBC_AppInit+0x4c0>

    CREATE_TASK(SysLog_Task, 			"SysLog_Task", 		MIN_STACK_SIZE * 10, 	NULL, 									1, NULL);	// Syslog Queue from syslog_queue.c
 8001088:	2300      	movs	r3, #0
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	2301      	movs	r3, #1
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2300      	movs	r3, #0
 8001092:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001096:	491f      	ldr	r1, [pc, #124]	@ (8001114 <OBC_AppInit+0x390>)
 8001098:	481f      	ldr	r0, [pc, #124]	@ (8001118 <OBC_AppInit+0x394>)
 800109a:	f010 fc66 	bl	801196a <xTaskCreate>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d001      	beq.n	80010a8 <OBC_AppInit+0x324>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0cd      	b.n	8001244 <OBC_AppInit+0x4c0>

    CREATE_TASK(vSoft_RTC_Task, 		"Soft_RTC_Task", 	MIN_STACK_SIZE * 5, 	NULL, 									1, NULL);
 80010a8:	2300      	movs	r3, #0
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	2301      	movs	r3, #1
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2300      	movs	r3, #0
 80010b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80010b6:	4919      	ldr	r1, [pc, #100]	@ (800111c <OBC_AppInit+0x398>)
 80010b8:	4819      	ldr	r0, [pc, #100]	@ (8001120 <OBC_AppInit+0x39c>)
 80010ba:	f010 fc56 	bl	801196a <xTaskCreate>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d02f      	beq.n	8001124 <OBC_AppInit+0x3a0>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e0bd      	b.n	8001244 <OBC_AppInit+0x4c0>
 80010c8:	08023364 	.word	0x08023364
 80010cc:	08023384 	.word	0x08023384
 80010d0:	08023398 	.word	0x08023398
 80010d4:	080233b8 	.word	0x080233b8
 80010d8:	080233c8 	.word	0x080233c8
 80010dc:	080233e8 	.word	0x080233e8
 80010e0:	080233f8 	.word	0x080233f8
 80010e4:	08023414 	.word	0x08023414
 80010e8:	08023428 	.word	0x08023428
 80010ec:	0802343c 	.word	0x0802343c
 80010f0:	08023448 	.word	0x08023448
 80010f4:	08023478 	.word	0x08023478
 80010f8:	08023494 	.word	0x08023494
 80010fc:	40011000 	.word	0x40011000
 8001100:	40004400 	.word	0x40004400
 8001104:	080234c8 	.word	0x080234c8
 8001108:	0800736d 	.word	0x0800736d
 800110c:	080234d8 	.word	0x080234d8
 8001110:	080015e5 	.word	0x080015e5
 8001114:	080234e4 	.word	0x080234e4
 8001118:	08008685 	.word	0x08008685
 800111c:	080234f0 	.word	0x080234f0
 8001120:	080012a5 	.word	0x080012a5

    CREATE_TASK(UART_DEBUG_DMA_RX_Task, "DEBUG_RX_Task", 	MIN_STACK_SIZE * 20, 	(void*)UART_DMA_Driver_Get(UART_DEBUG), 1, NULL);
 8001124:	484a      	ldr	r0, [pc, #296]	@ (8001250 <OBC_AppInit+0x4cc>)
 8001126:	f001 f8f5 	bl	8002314 <UART_DMA_Driver_Get>
 800112a:	4603      	mov	r3, r0
 800112c:	2200      	movs	r2, #0
 800112e:	9201      	str	r2, [sp, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	9200      	str	r2, [sp, #0]
 8001134:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001138:	4946      	ldr	r1, [pc, #280]	@ (8001254 <OBC_AppInit+0x4d0>)
 800113a:	4847      	ldr	r0, [pc, #284]	@ (8001258 <OBC_AppInit+0x4d4>)
 800113c:	f010 fc15 	bl	801196a <xTaskCreate>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d001      	beq.n	800114a <OBC_AppInit+0x3c6>
 8001146:	2301      	movs	r3, #1
 8001148:	e07c      	b.n	8001244 <OBC_AppInit+0x4c0>

    CREATE_TASK(UART_EXP_DMA_RX_Task, 	"EXP_RX_Task",	 	MIN_STACK_SIZE * 20, 	(void*)UART_DMA_Driver_Get(UART_EXP), 	1, NULL);
 800114a:	4844      	ldr	r0, [pc, #272]	@ (800125c <OBC_AppInit+0x4d8>)
 800114c:	f001 f8e2 	bl	8002314 <UART_DMA_Driver_Get>
 8001150:	4603      	mov	r3, r0
 8001152:	2200      	movs	r2, #0
 8001154:	9201      	str	r2, [sp, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	9200      	str	r2, [sp, #0]
 800115a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800115e:	4940      	ldr	r1, [pc, #256]	@ (8001260 <OBC_AppInit+0x4dc>)
 8001160:	4840      	ldr	r0, [pc, #256]	@ (8001264 <OBC_AppInit+0x4e0>)
 8001162:	f010 fc02 	bl	801196a <xTaskCreate>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d001      	beq.n	8001170 <OBC_AppInit+0x3ec>
 800116c:	2301      	movs	r3, #1
 800116e:	e069      	b.n	8001244 <OBC_AppInit+0x4c0>

    CREATE_TASK(CLI_Handle_Task, 		"CLI_Handle_Task", 	MIN_STACK_SIZE * 10, 	NULL, 									1, NULL);
 8001170:	2300      	movs	r3, #0
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	2301      	movs	r3, #1
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800117e:	493a      	ldr	r1, [pc, #232]	@ (8001268 <OBC_AppInit+0x4e4>)
 8001180:	483a      	ldr	r0, [pc, #232]	@ (800126c <OBC_AppInit+0x4e8>)
 8001182:	f010 fbf2 	bl	801196a <xTaskCreate>
 8001186:	4603      	mov	r3, r0
 8001188:	2b01      	cmp	r3, #1
 800118a:	d001      	beq.n	8001190 <OBC_AppInit+0x40c>
 800118c:	2301      	movs	r3, #1
 800118e:	e059      	b.n	8001244 <OBC_AppInit+0x4c0>

    CREATE_TASK(vTask1_handler, 		"vTask1", 			MIN_STACK_SIZE, 		NULL, 									1, NULL);
 8001190:	2300      	movs	r3, #0
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	2301      	movs	r3, #1
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2300      	movs	r3, #0
 800119a:	2280      	movs	r2, #128	@ 0x80
 800119c:	4934      	ldr	r1, [pc, #208]	@ (8001270 <OBC_AppInit+0x4ec>)
 800119e:	4835      	ldr	r0, [pc, #212]	@ (8001274 <OBC_AppInit+0x4f0>)
 80011a0:	f010 fbe3 	bl	801196a <xTaskCreate>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d001      	beq.n	80011ae <OBC_AppInit+0x42a>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e04a      	b.n	8001244 <OBC_AppInit+0x4c0>

    CREATE_TASK(vTask2_handler, 		"vTask2", 			MIN_STACK_SIZE, 		NULL, 									1, NULL);
 80011ae:	2300      	movs	r3, #0
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	2301      	movs	r3, #1
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2300      	movs	r3, #0
 80011b8:	2280      	movs	r2, #128	@ 0x80
 80011ba:	492f      	ldr	r1, [pc, #188]	@ (8001278 <OBC_AppInit+0x4f4>)
 80011bc:	482f      	ldr	r0, [pc, #188]	@ (800127c <OBC_AppInit+0x4f8>)
 80011be:	f010 fbd4 	bl	801196a <xTaskCreate>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d001      	beq.n	80011cc <OBC_AppInit+0x448>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e03b      	b.n	8001244 <OBC_AppInit+0x4c0>

    CREATE_TASK(vTask3_handler, 		"vTask3", 			MIN_STACK_SIZE * 5, 	NULL, 									1, NULL);
 80011cc:	2300      	movs	r3, #0
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80011da:	4929      	ldr	r1, [pc, #164]	@ (8001280 <OBC_AppInit+0x4fc>)
 80011dc:	4829      	ldr	r0, [pc, #164]	@ (8001284 <OBC_AppInit+0x500>)
 80011de:	f010 fbc4 	bl	801196a <xTaskCreate>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d001      	beq.n	80011ec <OBC_AppInit+0x468>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e02b      	b.n	8001244 <OBC_AppInit+0x4c0>

    CREATE_TASK(UART_USB_DMA_RX_TASK, 	"UART_USB_RX_Task", MIN_STACK_SIZE * 20, 	(void*)UART_DMA_Driver_Get(UART_USB),	1, NULL);
 80011ec:	4826      	ldr	r0, [pc, #152]	@ (8001288 <OBC_AppInit+0x504>)
 80011ee:	f001 f891 	bl	8002314 <UART_DMA_Driver_Get>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2200      	movs	r2, #0
 80011f6:	9201      	str	r2, [sp, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	9200      	str	r2, [sp, #0]
 80011fc:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001200:	4922      	ldr	r1, [pc, #136]	@ (800128c <OBC_AppInit+0x508>)
 8001202:	4823      	ldr	r0, [pc, #140]	@ (8001290 <OBC_AppInit+0x50c>)
 8001204:	f010 fbb1 	bl	801196a <xTaskCreate>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d001      	beq.n	8001212 <OBC_AppInit+0x48e>
 800120e:	2301      	movs	r3, #1
 8001210:	e018      	b.n	8001244 <OBC_AppInit+0x4c0>

    CREATE_TASK(vWatchdogTask, 			"Watchdog_Task", 	MIN_STACK_SIZE, 		NULL, 									1, NULL);
 8001212:	2300      	movs	r3, #0
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2301      	movs	r3, #1
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	@ 0x80
 800121e:	491d      	ldr	r1, [pc, #116]	@ (8001294 <OBC_AppInit+0x510>)
 8001220:	481d      	ldr	r0, [pc, #116]	@ (8001298 <OBC_AppInit+0x514>)
 8001222:	f010 fba2 	bl	801196a <xTaskCreate>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d001      	beq.n	8001230 <OBC_AppInit+0x4ac>
 800122c:	2301      	movs	r3, #1
 800122e:	e009      	b.n	8001244 <OBC_AppInit+0x4c0>

    vTaskDelay(pdMS_TO_TICKS(1));
 8001230:	2001      	movs	r0, #1
 8001232:	f010 fd8d 	bl	8011d50 <vTaskDelay>

	Shield_Init(&auth_usb, writeChar_auth_USB);
 8001236:	4919      	ldr	r1, [pc, #100]	@ (800129c <OBC_AppInit+0x518>)
 8001238:	4819      	ldr	r0, [pc, #100]	@ (80012a0 <OBC_AppInit+0x51c>)
 800123a:	f001 fd0d 	bl	8002c58 <Shield_Init>

	Dmesg_Init();
 800123e:	f005 fdf9 	bl	8006e34 <Dmesg_Init>

    return E_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800124a:	46bd      	mov	sp, r7
 800124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124e:	bf00      	nop
 8001250:	40004400 	.word	0x40004400
 8001254:	08023500 	.word	0x08023500
 8001258:	08001501 	.word	0x08001501
 800125c:	40007800 	.word	0x40007800
 8001260:	08023510 	.word	0x08023510
 8001264:	08001465 	.word	0x08001465
 8001268:	0802351c 	.word	0x0802351c
 800126c:	080012f1 	.word	0x080012f1
 8001270:	0802352c 	.word	0x0802352c
 8001274:	080015fd 	.word	0x080015fd
 8001278:	08023534 	.word	0x08023534
 800127c:	08001631 	.word	0x08001631
 8001280:	0802353c 	.word	0x0802353c
 8001284:	08001665 	.word	0x08001665
 8001288:	40011000 	.word	0x40011000
 800128c:	08023544 	.word	0x08023544
 8001290:	08001355 	.word	0x08001355
 8001294:	08023558 	.word	0x08023558
 8001298:	080016a9 	.word	0x080016a9
 800129c:	08000cc5 	.word	0x08000cc5
 80012a0:	24014a70 	.word	0x24014a70

080012a4 <vSoft_RTC_Task>:

/*************************************************
 *               TASK LIST                       *
 *************************************************/
void vSoft_RTC_Task(void *pvParameters)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    static uint32_t countingSyncTime = 1;

    while(1)
    {
        Utils_SoftTime_Update();
 80012ac:	f008 fdba 	bl	8009e24 <Utils_SoftTime_Update>
        countingSyncTime++;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <vSoft_RTC_Task+0x44>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <vSoft_RTC_Task+0x44>)
 80012b8:	6013      	str	r3, [r2, #0]
        if(countingSyncTime > 7200)
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <vSoft_RTC_Task+0x44>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f5b3 5fe1 	cmp.w	r3, #7200	@ 0x1c20
 80012c2:	d90c      	bls.n	80012de <vSoft_RTC_Task+0x3a>
        {
            countingSyncTime = 0;
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <vSoft_RTC_Task+0x44>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
            if(Utils_SoftTime_Sync() == E_OK)
 80012ca:	f009 f951 	bl	800a570 <Utils_SoftTime_Sync>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d104      	bne.n	80012de <vSoft_RTC_Task+0x3a>
            {
                SYSLOG_NOTICE("[Sync Time!]");
 80012d4:	2200      	movs	r2, #0
 80012d6:	4905      	ldr	r1, [pc, #20]	@ (80012ec <vSoft_RTC_Task+0x48>)
 80012d8:	2002      	movs	r0, #2
 80012da:	f007 f8cb 	bl	8008474 <syslog_log>
            }
        }

        vTaskDelay(1000);
 80012de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012e2:	f010 fd35 	bl	8011d50 <vTaskDelay>
        Utils_SoftTime_Update();
 80012e6:	e7e1      	b.n	80012ac <vSoft_RTC_Task+0x8>
 80012e8:	24014728 	.word	0x24014728
 80012ec:	08023568 	.word	0x08023568

080012f0 <CLI_Handle_Task>:
    }
}

void CLI_Handle_Task(void *pvParameters)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	while (1)
	{
    	ShieldAuthState_t auth_state;
        embeddedCliProcess(getUartCm4CliPointer());
 80012f8:	f003 ff8e 	bl	8005218 <getUartCm4CliPointer>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 f8a3 	bl	800544a <embeddedCliProcess>

    	auth_state = Shield_GetState(&auth_usb);
 8001304:	4811      	ldr	r0, [pc, #68]	@ (800134c <CLI_Handle_Task+0x5c>)
 8001306:	f001 ff3b 	bl	8003180 <Shield_GetState>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
    	if(auth_state == AUTH_ADMIN || auth_state == AUTH_USER){
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d002      	beq.n	800131a <CLI_Handle_Task+0x2a>
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b04      	cmp	r3, #4
 8001318:	d113      	bne.n	8001342 <CLI_Handle_Task+0x52>
        	if(auth_usb.initreset == 1){
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <CLI_Handle_Task+0x5c>)
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d109      	bne.n	8001336 <CLI_Handle_Task+0x46>
                embeddedCliPrint(getUsbCdcCliPointer(), "");
 8001322:	f003 ff6d 	bl	8005200 <getUsbCdcCliPointer>
 8001326:	4603      	mov	r3, r0
 8001328:	4909      	ldr	r1, [pc, #36]	@ (8001350 <CLI_Handle_Task+0x60>)
 800132a:	4618      	mov	r0, r3
 800132c:	f004 f91e 	bl	800556c <embeddedCliPrint>
                auth_usb.initreset = 0;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <CLI_Handle_Task+0x5c>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
        	}
			embeddedCliProcess(getUsbCdcCliPointer());
 8001336:	f003 ff63 	bl	8005200 <getUsbCdcCliPointer>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	f004 f884 	bl	800544a <embeddedCliProcess>
//			embeddedCliProcess(getUartCm4CliPointer());
    	}

		vTaskDelay(500);
 8001342:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001346:	f010 fd03 	bl	8011d50 <vTaskDelay>
	{
 800134a:	e7d5      	b.n	80012f8 <CLI_Handle_Task+0x8>
 800134c:	24014a70 	.word	0x24014a70
 8001350:	08023578 	.word	0x08023578

08001354 <UART_USB_DMA_RX_TASK>:
	}
}

void UART_USB_DMA_RX_TASK(void *pvParameters)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = (UART_DMA_Driver_t *)pvParameters;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	617b      	str	r3, [r7, #20]
    for (;;)
    {
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	4618      	mov	r0, r3
 800136a:	f00f fe33 	bl	8010fd4 <xQueueSemaphoreTake>
 800136e:	4603      	mov	r3, r0
 8001370:	2b01      	cmp	r3, #1
 8001372:	d16d      	bne.n	8001450 <UART_USB_DMA_RX_TASK+0xfc>
        {
            int c;
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 8001374:	e062      	b.n	800143c <UART_USB_DMA_RX_TASK+0xe8>
            {
                ForwardMode_t mode = ForwardMode_Get();
 8001376:	f7ff fc1d 	bl	8000bb4 <ForwardMode_Get>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
                if (mode == FORWARD_MODE_USB) {
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d115      	bne.n	80013b0 <UART_USB_DMA_RX_TASK+0x5c>
                    // Forward mode: USART2 (rx) - UART7 (tx)
//                    UART_Driver_Write(UART7, (uint8_t)c);
                    UART_Driver_Write(UART_EXP, (uint8_t)c);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	4619      	mov	r1, r3
 800138a:	4833      	ldr	r0, [pc, #204]	@ (8001458 <UART_USB_DMA_RX_TASK+0x104>)
 800138c:	f001 f9a2 	bl	80026d4 <UART_Driver_Write>

                    if (ForwardMode_ProcessReceivedByte((uint8_t)c)) {
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fc19 	bl	8000bcc <ForwardMode_ProcessReceivedByte>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d04d      	beq.n	800143c <UART_USB_DMA_RX_TASK+0xe8>
                        embeddedCliPrint(getUsbCdcCliPointer(), "Forward mode disabled due to 10 consecutive '\\'.");
 80013a0:	f003 ff2e 	bl	8005200 <getUsbCdcCliPointer>
 80013a4:	4603      	mov	r3, r0
 80013a6:	492d      	ldr	r1, [pc, #180]	@ (800145c <UART_USB_DMA_RX_TASK+0x108>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f004 f8df 	bl	800556c <embeddedCliPrint>
 80013ae:	e045      	b.n	800143c <UART_USB_DMA_RX_TASK+0xe8>
                    }
                } else if (mode == FORWARD_MODE_LISTEN_USB) {
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d11e      	bne.n	80013f4 <UART_USB_DMA_RX_TASK+0xa0>
                    if (ForwardMode_ProcessReceivedByte((uint8_t)c)) {
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc06 	bl	8000bcc <ForwardMode_ProcessReceivedByte>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <UART_USB_DMA_RX_TASK+0x80>
                        embeddedCliPrint(getUsbCdcCliPointer(), "Forward mode disabled due to 10 consecutive '\\'.");
 80013c6:	f003 ff1b 	bl	8005200 <getUsbCdcCliPointer>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4923      	ldr	r1, [pc, #140]	@ (800145c <UART_USB_DMA_RX_TASK+0x108>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f004 f8cc 	bl	800556c <embeddedCliPrint>
                    }
                    embeddedCliReceiveChar(getUsbCdcCliPointer(), (char)c);
 80013d4:	f003 ff14 	bl	8005200 <getUsbCdcCliPointer>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4619      	mov	r1, r3
 80013e0:	4610      	mov	r0, r2
 80013e2:	f004 f80f 	bl	8005404 <embeddedCliReceiveChar>
                    embeddedCliProcess(getUsbCdcCliPointer());
 80013e6:	f003 ff0b 	bl	8005200 <getUsbCdcCliPointer>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 f82c 	bl	800544a <embeddedCliProcess>
 80013f2:	e023      	b.n	800143c <UART_USB_DMA_RX_TASK+0xe8>
                } else {
                    // Mode NORMAL: CLI
                	ShieldAuthState_t auth_state = Shield_GetState(&auth_usb);
 80013f4:	481a      	ldr	r0, [pc, #104]	@ (8001460 <UART_USB_DMA_RX_TASK+0x10c>)
 80013f6:	f001 fec3 	bl	8003180 <Shield_GetState>
 80013fa:	4603      	mov	r3, r0
 80013fc:	73bb      	strb	r3, [r7, #14]
                	if(auth_state == AUTH_ADMIN || auth_state == AUTH_USER){
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d002      	beq.n	800140a <UART_USB_DMA_RX_TASK+0xb6>
 8001404:	7bbb      	ldrb	r3, [r7, #14]
 8001406:	2b04      	cmp	r3, #4
 8001408:	d112      	bne.n	8001430 <UART_USB_DMA_RX_TASK+0xdc>
                		Shield_ResetTimer(&auth_usb);
 800140a:	4815      	ldr	r0, [pc, #84]	@ (8001460 <UART_USB_DMA_RX_TASK+0x10c>)
 800140c:	f001 fc12 	bl	8002c34 <Shield_ResetTimer>
                        embeddedCliReceiveChar(getUsbCdcCliPointer(), (char)c);
 8001410:	f003 fef6 	bl	8005200 <getUsbCdcCliPointer>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	4610      	mov	r0, r2
 800141e:	f003 fff1 	bl	8005404 <embeddedCliReceiveChar>
                        embeddedCliProcess(getUsbCdcCliPointer());
 8001422:	f003 feed 	bl	8005200 <getUsbCdcCliPointer>
 8001426:	4603      	mov	r3, r0
 8001428:	4618      	mov	r0, r3
 800142a:	f004 f80e 	bl	800544a <embeddedCliProcess>
 800142e:	e005      	b.n	800143c <UART_USB_DMA_RX_TASK+0xe8>
                	}else{
                		Shield_ReceiveChar(&auth_usb, (char)c);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4619      	mov	r1, r3
 8001436:	480a      	ldr	r0, [pc, #40]	@ (8001460 <UART_USB_DMA_RX_TASK+0x10c>)
 8001438:	f001 fd1e 	bl	8002e78 <Shield_ReceiveChar>
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f001 fa81 	bl	8002948 <UART_DMA_Driver_Read>
 8001446:	6138      	str	r0, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144e:	d192      	bne.n	8001376 <UART_USB_DMA_RX_TASK+0x22>
                	}
                }
            }
        }

        vTaskDelay(pdMS_TO_TICKS(1));
 8001450:	2001      	movs	r0, #1
 8001452:	f010 fc7d 	bl	8011d50 <vTaskDelay>
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 8001456:	e783      	b.n	8001360 <UART_USB_DMA_RX_TASK+0xc>
 8001458:	40007800 	.word	0x40007800
 800145c:	0802357c 	.word	0x0802357c
 8001460:	24014a70 	.word	0x24014a70

08001464 <UART_EXP_DMA_RX_Task>:
    }
}

void UART_EXP_DMA_RX_Task(void *pvParameters)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = (UART_DMA_Driver_t *)pvParameters;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	617b      	str	r3, [r7, #20]
    for (;;)
    {
        if (xSemaphoreTake(driver->rxSemaphore, 0) == pdTRUE)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f00f fdac 	bl	8010fd4 <xQueueSemaphoreTake>
 800147c:	4603      	mov	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	d135      	bne.n	80014ee <UART_EXP_DMA_RX_Task+0x8a>
        {
            int c;
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 8001482:	e02a      	b.n	80014da <UART_EXP_DMA_RX_Task+0x76>
            {
                ForwardMode_t mode = ForwardMode_Get();
 8001484:	f7ff fb96 	bl	8000bb4 <ForwardMode_Get>
 8001488:	4603      	mov	r3, r0
 800148a:	73fb      	strb	r3, [r7, #15]
                if (mode == FORWARD_MODE_UART) {
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d106      	bne.n	80014a0 <UART_EXP_DMA_RX_Task+0x3c>
                    // Forward mode (CM4): UART7 RX -> UART_DEBUG
                    UART_Driver_Write(UART_DEBUG, (uint8_t)c);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4619      	mov	r1, r3
 8001498:	4817      	ldr	r0, [pc, #92]	@ (80014f8 <UART_EXP_DMA_RX_Task+0x94>)
 800149a:	f001 f91b 	bl	80026d4 <UART_Driver_Write>
 800149e:	e01c      	b.n	80014da <UART_EXP_DMA_RX_Task+0x76>
//                    embeddedCliReceiveChar(getUartCm4CliPointer(), (char)c);
                } else if (mode == FORWARD_MODE_USB) {
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d106      	bne.n	80014b4 <UART_EXP_DMA_RX_Task+0x50>
                    // Forward mode (USB): UART7 -> to CDC
                    UART_Driver_Write(UART_USB, (uint8_t)c);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	4813      	ldr	r0, [pc, #76]	@ (80014fc <UART_EXP_DMA_RX_Task+0x98>)
 80014ae:	f001 f911 	bl	80026d4 <UART_Driver_Write>
 80014b2:	e012      	b.n	80014da <UART_EXP_DMA_RX_Task+0x76>
                } else if (mode == FORWARD_MODE_LISTEN_CM4) {
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d106      	bne.n	80014c8 <UART_EXP_DMA_RX_Task+0x64>
                    // Listen mode (CM4): UART7 RX -> UART_DEBUG
                    UART_Driver_Write(UART_DEBUG, (uint8_t)c);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4619      	mov	r1, r3
 80014c0:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <UART_EXP_DMA_RX_Task+0x94>)
 80014c2:	f001 f907 	bl	80026d4 <UART_Driver_Write>
 80014c6:	e008      	b.n	80014da <UART_EXP_DMA_RX_Task+0x76>
                } else if (mode == FORWARD_MODE_LISTEN_USB) {
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d105      	bne.n	80014da <UART_EXP_DMA_RX_Task+0x76>
                    // Listen mode (USB):UART7 RX -> CDC
                    UART_Driver_Write(UART_USB, (uint8_t)c);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4619      	mov	r1, r3
 80014d4:	4809      	ldr	r0, [pc, #36]	@ (80014fc <UART_EXP_DMA_RX_Task+0x98>)
 80014d6:	f001 f8fd 	bl	80026d4 <UART_Driver_Write>
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fa32 	bl	8002948 <UART_DMA_Driver_Read>
 80014e4:	6138      	str	r0, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d1ca      	bne.n	8001484 <UART_EXP_DMA_RX_Task+0x20>
//                        embeddedCliPrint(getUsbCdcCliPointer(), "Listen/Forward mode disabled due to 10 consecutive '\\'.");
//                    }
//                }
            }
        }
        vTaskDelay(pdMS_TO_TICKS(1));
 80014ee:	2001      	movs	r0, #1
 80014f0:	f010 fc2e 	bl	8011d50 <vTaskDelay>
        if (xSemaphoreTake(driver->rxSemaphore, 0) == pdTRUE)
 80014f4:	e7bc      	b.n	8001470 <UART_EXP_DMA_RX_Task+0xc>
 80014f6:	bf00      	nop
 80014f8:	40004400 	.word	0x40004400
 80014fc:	40011000 	.word	0x40011000

08001500 <UART_DEBUG_DMA_RX_Task>:
    }
}


void UART_DEBUG_DMA_RX_Task(void *pvParameters)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = (UART_DMA_Driver_t *)pvParameters;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	617b      	str	r3, [r7, #20]
    for (;;)
    {
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	4618      	mov	r0, r3
 8001516:	f00f fd5d 	bl	8010fd4 <xQueueSemaphoreTake>
 800151a:	4603      	mov	r3, r0
 800151c:	2b01      	cmp	r3, #1
 800151e:	d158      	bne.n	80015d2 <UART_DEBUG_DMA_RX_Task+0xd2>
        {
            int c;
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 8001520:	e04d      	b.n	80015be <UART_DEBUG_DMA_RX_Task+0xbe>
            {
                ForwardMode_t mode = ForwardMode_Get();
 8001522:	f7ff fb47 	bl	8000bb4 <ForwardMode_Get>
 8001526:	4603      	mov	r3, r0
 8001528:	73fb      	strb	r3, [r7, #15]
                if (mode == FORWARD_MODE_UART) {
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d115      	bne.n	800155c <UART_DEBUG_DMA_RX_Task+0x5c>
                    // Forward mode: USART2 (rx) - UART7 (tx)
//                    UART_Driver_Write(UART7, (uint8_t)c);
                    UART_Driver_Write(UART_EXP, (uint8_t)c);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4619      	mov	r1, r3
 8001536:	4829      	ldr	r0, [pc, #164]	@ (80015dc <UART_DEBUG_DMA_RX_Task+0xdc>)
 8001538:	f001 f8cc 	bl	80026d4 <UART_Driver_Write>

                    if (ForwardMode_ProcessReceivedByte((uint8_t)c)) {
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fb43 	bl	8000bcc <ForwardMode_ProcessReceivedByte>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d038      	beq.n	80015be <UART_DEBUG_DMA_RX_Task+0xbe>
                        embeddedCliPrint(getUartCm4CliPointer(), "Forward mode disabled due to 10 consecutive '\\'.");
 800154c:	f003 fe64 	bl	8005218 <getUartCm4CliPointer>
 8001550:	4603      	mov	r3, r0
 8001552:	4923      	ldr	r1, [pc, #140]	@ (80015e0 <UART_DEBUG_DMA_RX_Task+0xe0>)
 8001554:	4618      	mov	r0, r3
 8001556:	f004 f809 	bl	800556c <embeddedCliPrint>
 800155a:	e030      	b.n	80015be <UART_DEBUG_DMA_RX_Task+0xbe>
                    }
                } else if (mode == FORWARD_MODE_LISTEN_CM4) {
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d11e      	bne.n	80015a0 <UART_DEBUG_DMA_RX_Task+0xa0>
                    if (ForwardMode_ProcessReceivedByte((uint8_t)c)) {
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fb30 	bl	8000bcc <ForwardMode_ProcessReceivedByte>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <UART_DEBUG_DMA_RX_Task+0x80>
                        embeddedCliPrint(getUartCm4CliPointer(), "Forward mode disabled due to 10 consecutive '\\'.");
 8001572:	f003 fe51 	bl	8005218 <getUartCm4CliPointer>
 8001576:	4603      	mov	r3, r0
 8001578:	4919      	ldr	r1, [pc, #100]	@ (80015e0 <UART_DEBUG_DMA_RX_Task+0xe0>)
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fff6 	bl	800556c <embeddedCliPrint>
                    }
                    embeddedCliReceiveChar(getUartCm4CliPointer(), (char)c);
 8001580:	f003 fe4a 	bl	8005218 <getUartCm4CliPointer>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4619      	mov	r1, r3
 800158c:	4610      	mov	r0, r2
 800158e:	f003 ff39 	bl	8005404 <embeddedCliReceiveChar>
                    embeddedCliProcess(getUartCm4CliPointer());
 8001592:	f003 fe41 	bl	8005218 <getUartCm4CliPointer>
 8001596:	4603      	mov	r3, r0
 8001598:	4618      	mov	r0, r3
 800159a:	f003 ff56 	bl	800544a <embeddedCliProcess>
 800159e:	e00e      	b.n	80015be <UART_DEBUG_DMA_RX_Task+0xbe>
                } else {
                    // Mode NORMAL: CLI
                    embeddedCliReceiveChar(getUartCm4CliPointer(), (char)c);
 80015a0:	f003 fe3a 	bl	8005218 <getUartCm4CliPointer>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f003 ff29 	bl	8005404 <embeddedCliReceiveChar>
                    embeddedCliProcess(getUartCm4CliPointer());
 80015b2:	f003 fe31 	bl	8005218 <getUartCm4CliPointer>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 ff46 	bl	800544a <embeddedCliProcess>
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 f9c0 	bl	8002948 <UART_DMA_Driver_Read>
 80015c8:	6138      	str	r0, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d1a7      	bne.n	8001522 <UART_DEBUG_DMA_RX_Task+0x22>
                }
            }
        }

        vTaskDelay(pdMS_TO_TICKS(1));
 80015d2:	2001      	movs	r0, #1
 80015d4:	f010 fbbc 	bl	8011d50 <vTaskDelay>
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 80015d8:	e798      	b.n	800150c <UART_DEBUG_DMA_RX_Task+0xc>
 80015da:	bf00      	nop
 80015dc:	40007800 	.word	0x40007800
 80015e0:	0802357c 	.word	0x0802357c

080015e4 <MIN_Process_Task>:
    }
}


void MIN_Process_Task(void *pvParameters)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	while(1){
		MIN_Processing();
 80015ec:	f006 fb12 	bl	8007c14 <MIN_Processing>
	    vTaskDelay(pdMS_TO_TICKS(1));
 80015f0:	2001      	movs	r0, #1
 80015f2:	f010 fbad 	bl	8011d50 <vTaskDelay>
		MIN_Processing();
 80015f6:	bf00      	nop
 80015f8:	e7f8      	b.n	80015ec <MIN_Process_Task+0x8>
	...

080015fc <vTask1_handler>:
	}
}

void vTask1_handler(void *pvParameters)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	while (1)
	{
		GPIO_SetLow(LED0_Port, LED0);
 8001604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001608:	4808      	ldr	r0, [pc, #32]	@ (800162c <vTask1_handler+0x30>)
 800160a:	f7ff fb4c 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
		vTaskDelay(1000);
 800160e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001612:	f010 fb9d 	bl	8011d50 <vTaskDelay>

		GPIO_SetHigh(LED0_Port, LED0);
 8001616:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800161a:	4804      	ldr	r0, [pc, #16]	@ (800162c <vTask1_handler+0x30>)
 800161c:	f7ff fb35 	bl	8000c8a <LL_GPIO_SetOutputPin>
		vTaskDelay(1000);
 8001620:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001624:	f010 fb94 	bl	8011d50 <vTaskDelay>
		GPIO_SetLow(LED0_Port, LED0);
 8001628:	bf00      	nop
 800162a:	e7eb      	b.n	8001604 <vTask1_handler+0x8>
 800162c:	58020c00 	.word	0x58020c00

08001630 <vTask2_handler>:
	}
}

void vTask2_handler(void *pvParameters)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	while (1)
	{
		GPIO_SetHigh(LED1_Port, LED1);
 8001638:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800163c:	4808      	ldr	r0, [pc, #32]	@ (8001660 <vTask2_handler+0x30>)
 800163e:	f7ff fb24 	bl	8000c8a <LL_GPIO_SetOutputPin>
		vTaskDelay(1000);
 8001642:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001646:	f010 fb83 	bl	8011d50 <vTaskDelay>
		GPIO_SetLow(LED1_Port, LED1);
 800164a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800164e:	4804      	ldr	r0, [pc, #16]	@ (8001660 <vTask2_handler+0x30>)
 8001650:	f7ff fb29 	bl	8000ca6 <LL_GPIO_ResetOutputPin>
		vTaskDelay(1000);
 8001654:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001658:	f010 fb7a 	bl	8011d50 <vTaskDelay>
		GPIO_SetHigh(LED1_Port, LED1);
 800165c:	bf00      	nop
 800165e:	e7eb      	b.n	8001638 <vTask2_handler+0x8>
 8001660:	58020c00 	.word	0x58020c00

08001664 <vTask3_handler>:
	}
}

void vTask3_handler(void *pvParameters)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b092      	sub	sp, #72	@ 0x48
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	static uint8_t counting = 0;
	while (1)
	{
		char buffer[64];
	    snprintf(buffer, sizeof(buffer), "60s Cycle Heartbeat: %d", counting++);
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <vTask3_handler+0x3c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	b2d1      	uxtb	r1, r2
 8001674:	4a0a      	ldr	r2, [pc, #40]	@ (80016a0 <vTask3_handler+0x3c>)
 8001676:	7011      	strb	r1, [r2, #0]
 8001678:	f107 0008 	add.w	r0, r7, #8
 800167c:	4a09      	ldr	r2, [pc, #36]	@ (80016a4 <vTask3_handler+0x40>)
 800167e:	2140      	movs	r1, #64	@ 0x40
 8001680:	f020 fc40 	bl	8021f04 <sniprintf>
		SYSLOG_NOTICE(buffer);
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	2002      	movs	r0, #2
 800168e:	f006 fef1 	bl	8008474 <syslog_log>
		vTaskDelay(60000);
 8001692:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001696:	f010 fb5b 	bl	8011d50 <vTaskDelay>
	{
 800169a:	bf00      	nop
 800169c:	e7e6      	b.n	800166c <vTask3_handler+0x8>
 800169e:	bf00      	nop
 80016a0:	24015f28 	.word	0x24015f28
 80016a4:	080235b0 	.word	0x080235b0

080016a8 <vWatchdogTask>:
	}
}

void vWatchdogTask(void *pvParameters)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    for (;;) {
        Watchdog_Device_Update();
 80016b0:	f007 fa10 	bl	8008ad4 <Watchdog_Device_Update>

        if(Watchdog_Device_GetState() == WATCHDOG_STATE_HIGH)
 80016b4:	f007 fa2a 	bl	8008b0c <Watchdog_Device_GetState>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d103      	bne.n	80016c6 <vWatchdogTask+0x1e>
        {
            vTaskDelay(pdMS_TO_TICKS(HIGH_PERIOD));
 80016be:	20c8      	movs	r0, #200	@ 0xc8
 80016c0:	f010 fb46 	bl	8011d50 <vTaskDelay>
 80016c4:	e7f4      	b.n	80016b0 <vWatchdogTask+0x8>
        }
        else
        {
            vTaskDelay(pdMS_TO_TICKS(LOW_PERIOD));
 80016c6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80016ca:	f010 fb41 	bl	8011d50 <vTaskDelay>
        Watchdog_Device_Update();
 80016ce:	e7ef      	b.n	80016b0 <vWatchdogTask+0x8>

080016d0 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(const I2C_TypeDef *I2Cx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <LL_I2C_IsActiveFlag_TXE+0x18>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <LL_I2C_IsActiveFlag_TXE+0x1a>
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d101      	bne.n	800170e <LL_I2C_IsActiveFlag_TXIS+0x18>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b04      	cmp	r3, #4
 800172e:	d101      	bne.n	8001734 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_I2C_IsActiveFlag_NACK>:
  * @rmtoll ISR          NACKF         LL_I2C_IsActiveFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_NACK(const I2C_TypeDef *I2Cx)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b10      	cmp	r3, #16
 8001754:	d101      	bne.n	800175a <LL_I2C_IsActiveFlag_NACK+0x18>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <LL_I2C_IsActiveFlag_NACK+0x1a>
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(const I2C_TypeDef *I2Cx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001778:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800177c:	d101      	bne.n	8001782 <LL_I2C_IsActiveFlag_BUSY+0x1a>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_I2C_IsActiveFlag_BUSY+0x1c>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	605a      	str	r2, [r3, #4]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80017d2:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80017dc:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	4313      	orrs	r3, r2
 80017e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f2:	0d5b      	lsrs	r3, r3, #21
 80017f4:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <LL_I2C_HandleTransfer+0x5c>)
 80017fa:	430b      	orrs	r3, r1
 80017fc:	43db      	mvns	r3, r3
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	431a      	orrs	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8001808:	bf00      	nop
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	03ff7bff 	.word	0x03ff7bff

08001818 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	b2db      	uxtb	r3, r3
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <I2C_Write>:
#include "reinit.h"

#define I2C_TIMEOUT     10      /* 10ms */

Std_ReturnType I2C_Write(LL_I2C_HandleTypeDef *i2c, uint8_t Slave_address, uint8_t Reg_address, uint8_t *pData, uint8_t Length)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af02      	add	r7, sp, #8
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	72fb      	strb	r3, [r7, #11]
 800185e:	4613      	mov	r3, r2
 8001860:	72bb      	strb	r3, [r7, #10]
    uint32_t tickstart;

    tickstart = Utils_GetTick();
 8001862:	f008 fff9 	bl	800a858 <Utils_GetTick>
 8001866:	6138      	str	r0, [r7, #16]
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8001868:	e00d      	b.n	8001886 <I2C_Write+0x36>
    {
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 800186a:	f008 fff5 	bl	800a858 <Utils_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b0a      	cmp	r3, #10
 8001876:	d906      	bls.n	8001886 <I2C_Write+0x36>
        	I2C_ReInit(i2c->Instance);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f015 fa5f 	bl	8016d40 <I2C_ReInit>
            return E_BUSY;
 8001882:	2302      	movs	r3, #2
 8001884:	e096      	b.n	80019b4 <I2C_Write+0x164>
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff6c 	bl	8001768 <LL_I2C_IsActiveFlag_BUSY>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e9      	bne.n	800186a <I2C_Write+0x1a>
        }
    }

    LL_I2C_HandleTransfer(i2c->Instance, (Slave_address << 1), LL_I2C_ADDRSLAVE_7BIT, Length + 1,
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	7afb      	ldrb	r3, [r7, #11]
 800189c:	0059      	lsls	r1, r3, #1
 800189e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a2:	3301      	adds	r3, #1
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b45      	ldr	r3, [pc, #276]	@ (80019bc <I2C_Write+0x16c>)
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	4613      	mov	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	f7ff ff80 	bl	80017b8 <LL_I2C_HandleTransfer>
                          LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);

    tickstart = Utils_GetTick();
 80018b8:	f008 ffce 	bl	800a858 <Utils_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 80018be:	e017      	b.n	80018f0 <I2C_Write+0xa0>
    {
        if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff3c 	bl	8001742 <LL_I2C_IsActiveFlag_NACK>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <I2C_Write+0x84>
            return E_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e06f      	b.n	80019b4 <I2C_Write+0x164>
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 80018d4:	f008 ffc0 	bl	800a858 <Utils_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b0a      	cmp	r3, #10
 80018e0:	d906      	bls.n	80018f0 <I2C_Write+0xa0>
        	I2C_ReInit(i2c->Instance);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f015 fa2a 	bl	8016d40 <I2C_ReInit>
            return E_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e061      	b.n	80019b4 <I2C_Write+0x164>
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fefe 	bl	80016f6 <LL_I2C_IsActiveFlag_TXIS>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0df      	beq.n	80018c0 <I2C_Write+0x70>
        }
    }
    LL_I2C_TransmitData8(i2c->Instance, Reg_address);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	7aba      	ldrb	r2, [r7, #10]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff92 	bl	8001832 <LL_I2C_TransmitData8>

    for(uint8_t i = 0; i < Length; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	75fb      	strb	r3, [r7, #23]
 8001912:	e02f      	b.n	8001974 <I2C_Write+0x124>
    {
        tickstart = Utils_GetTick();
 8001914:	f008 ffa0 	bl	800a858 <Utils_GetTick>
 8001918:	6138      	str	r0, [r7, #16]
        while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 800191a:	e017      	b.n	800194c <I2C_Write+0xfc>
        {
            if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff0e 	bl	8001742 <LL_I2C_IsActiveFlag_NACK>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <I2C_Write+0xe0>
                return E_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e041      	b.n	80019b4 <I2C_Write+0x164>
            if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8001930:	f008 ff92 	bl	800a858 <Utils_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b0a      	cmp	r3, #10
 800193c:	d906      	bls.n	800194c <I2C_Write+0xfc>
            	I2C_ReInit(i2c->Instance);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f015 f9fc 	bl	8016d40 <I2C_ReInit>
                return E_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e033      	b.n	80019b4 <I2C_Write+0x164>
        while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fed0 	bl	80016f6 <LL_I2C_IsActiveFlag_TXIS>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0df      	beq.n	800191c <I2C_Write+0xcc>
            }
        }
        LL_I2C_TransmitData8(i2c->Instance, pData[i]);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff ff62 	bl	8001832 <LL_I2C_TransmitData8>
    for(uint8_t i = 0; i < Length; i++)
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	3301      	adds	r3, #1
 8001972:	75fb      	strb	r3, [r7, #23]
 8001974:	7dfa      	ldrb	r2, [r7, #23]
 8001976:	f897 3020 	ldrb.w	r3, [r7, #32]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3ca      	bcc.n	8001914 <I2C_Write+0xc4>
    }

    tickstart = Utils_GetTick();
 800197e:	f008 ff6b 	bl	800a858 <Utils_GetTick>
 8001982:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 8001984:	e00d      	b.n	80019a2 <I2C_Write+0x152>
    {
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8001986:	f008 ff67 	bl	800a858 <Utils_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b0a      	cmp	r3, #10
 8001992:	d906      	bls.n	80019a2 <I2C_Write+0x152>
        	I2C_ReInit(i2c->Instance);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f015 f9d1 	bl	8016d40 <I2C_ReInit>
            return E_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e008      	b.n	80019b4 <I2C_Write+0x164>
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fe92 	bl	80016d0 <LL_I2C_IsActiveFlag_TXE>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0e9      	beq.n	8001986 <I2C_Write+0x136>
        }
    }
    return E_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	80002000 	.word	0x80002000

080019c0 <I2C_Read>:

Std_ReturnType I2C_Read(LL_I2C_HandleTypeDef *i2c, uint8_t Slave_address, uint8_t Reg_address,
                                  uint8_t *pData, uint8_t Length)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b089      	sub	sp, #36	@ 0x24
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	72fb      	strb	r3, [r7, #11]
 80019ce:	4613      	mov	r3, r2
 80019d0:	72bb      	strb	r3, [r7, #10]
    uint32_t tickstart;

    tickstart = Utils_GetTick();
 80019d2:	f008 ff41 	bl	800a858 <Utils_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 80019d8:	e00d      	b.n	80019f6 <I2C_Read+0x36>
    {
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 80019da:	f008 ff3d 	bl	800a858 <Utils_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b0a      	cmp	r3, #10
 80019e6:	d906      	bls.n	80019f6 <I2C_Read+0x36>
        	I2C_ReInit(i2c->Instance);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f015 f9a7 	bl	8016d40 <I2C_ReInit>
            return E_BUSY;
 80019f2:	2302      	movs	r3, #2
 80019f4:	e0b8      	b.n	8001b68 <I2C_Read+0x1a8>
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff feb4 	bl	8001768 <LL_I2C_IsActiveFlag_BUSY>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1e9      	bne.n	80019da <I2C_Read+0x1a>
        }
    }

    LL_I2C_HandleTransfer(i2c->Instance, (Slave_address << 1), LL_I2C_ADDRSLAVE_7BIT, 1,
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	0059      	lsls	r1, r3, #1
 8001a0e:	4b58      	ldr	r3, [pc, #352]	@ (8001b70 <I2C_Read+0x1b0>)
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	2300      	movs	r3, #0
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f7ff fecd 	bl	80017b8 <LL_I2C_HandleTransfer>
                          LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);

    tickstart = Utils_GetTick();
 8001a1e:	f008 ff1b 	bl	800a858 <Utils_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8001a24:	e017      	b.n	8001a56 <I2C_Read+0x96>
    {
        if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fe89 	bl	8001742 <LL_I2C_IsActiveFlag_NACK>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <I2C_Read+0x7a>
            return E_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e096      	b.n	8001b68 <I2C_Read+0x1a8>
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8001a3a:	f008 ff0d 	bl	800a858 <Utils_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b0a      	cmp	r3, #10
 8001a46:	d906      	bls.n	8001a56 <I2C_Read+0x96>
        	I2C_ReInit(i2c->Instance);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f015 f977 	bl	8016d40 <I2C_ReInit>
            return E_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e088      	b.n	8001b68 <I2C_Read+0x1a8>
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fe4b 	bl	80016f6 <LL_I2C_IsActiveFlag_TXIS>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0df      	beq.n	8001a26 <I2C_Read+0x66>
        }
    }
    LL_I2C_TransmitData8(i2c->Instance, Reg_address);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	7aba      	ldrb	r2, [r7, #10]
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fedf 	bl	8001832 <LL_I2C_TransmitData8>

    tickstart = Utils_GetTick();
 8001a74:	f008 fef0 	bl	800a858 <Utils_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 8001a7a:	e017      	b.n	8001aac <I2C_Read+0xec>
    {
        if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fe5e 	bl	8001742 <LL_I2C_IsActiveFlag_NACK>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <I2C_Read+0xd0>
            return E_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e06b      	b.n	8001b68 <I2C_Read+0x1a8>
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8001a90:	f008 fee2 	bl	800a858 <Utils_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d906      	bls.n	8001aac <I2C_Read+0xec>
        	I2C_ReInit(i2c->Instance);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f015 f94c 	bl	8016d40 <I2C_ReInit>
            return E_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e05d      	b.n	8001b68 <I2C_Read+0x1a8>
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fe0d 	bl	80016d0 <LL_I2C_IsActiveFlag_TXE>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0df      	beq.n	8001a7c <I2C_Read+0xbc>
        }
    }

    LL_I2C_AcknowledgeNextData(i2c->Instance, LL_I2C_ACK);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fe64 	bl	8001790 <LL_I2C_AcknowledgeNextData>

    LL_I2C_HandleTransfer(i2c->Instance, (Slave_address << 1), ((Slave_address << 1) | 1),
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	7afb      	ldrb	r3, [r7, #11]
 8001ace:	0059      	lsls	r1, r3, #1
 8001ad0:	7afb      	ldrb	r3, [r7, #11]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	461c      	mov	r4, r3
 8001ada:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ade:	4a25      	ldr	r2, [pc, #148]	@ (8001b74 <I2C_Read+0x1b4>)
 8001ae0:	9201      	str	r2, [sp, #4]
 8001ae2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ae6:	9200      	str	r2, [sp, #0]
 8001ae8:	4622      	mov	r2, r4
 8001aea:	f7ff fe65 	bl	80017b8 <LL_I2C_HandleTransfer>
                          Length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);

    tickstart = Utils_GetTick();
 8001aee:	f008 feb3 	bl	800a858 <Utils_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]
    for(uint8_t i = 0; i < Length; i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]
 8001af8:	e030      	b.n	8001b5c <I2C_Read+0x19c>
    {
        tickstart = Utils_GetTick();
 8001afa:	f008 fead 	bl	800a858 <Utils_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]
        while(!LL_I2C_IsActiveFlag_RXNE(i2c->Instance))
 8001b00:	e017      	b.n	8001b32 <I2C_Read+0x172>
        {
            if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fe1b 	bl	8001742 <LL_I2C_IsActiveFlag_NACK>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <I2C_Read+0x156>
                return E_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e028      	b.n	8001b68 <I2C_Read+0x1a8>
            if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8001b16:	f008 fe9f 	bl	800a858 <Utils_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b0a      	cmp	r3, #10
 8001b22:	d906      	bls.n	8001b32 <I2C_Read+0x172>
            	I2C_ReInit(i2c->Instance);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f015 f909 	bl	8016d40 <I2C_ReInit>
                return E_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e01a      	b.n	8001b68 <I2C_Read+0x1a8>
        while(!LL_I2C_IsActiveFlag_RXNE(i2c->Instance))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fdf0 	bl	800171c <LL_I2C_IsActiveFlag_RXNE>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0df      	beq.n	8001b02 <I2C_Read+0x142>
            }
        }
        pData[i] = LL_I2C_ReceiveData8(i2c->Instance);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6819      	ldr	r1, [r3, #0]
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	18d4      	adds	r4, r2, r3
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	f7ff fe63 	bl	8001818 <LL_I2C_ReceiveData8>
 8001b52:	4603      	mov	r3, r0
 8001b54:	7023      	strb	r3, [r4, #0]
    for(uint8_t i = 0; i < Length; i++)
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	75fb      	strb	r3, [r7, #23]
 8001b5c:	7dfa      	ldrb	r2, [r7, #23]
 8001b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d3c9      	bcc.n	8001afa <I2C_Read+0x13a>
    }
    return E_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd90      	pop	{r4, r7, pc}
 8001b70:	80002000 	.word	0x80002000
 8001b74:	80002400 	.word	0x80002400

08001b78 <BSP_MMC_Init>:
  * @brief  Initializes the MMC card device.
  * @param  Instance      SDMMC Instance
  * @retval BSP status
  */
int32_t BSP_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_MMC_REGISTER_CALLBACKS == 0)
    /* Msp MMC initialization */

    MMC_MspInit(hmmc);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f895 	bl	8001cb4 <MMC_MspInit>
    if(ret == BSP_ERROR_NONE)
    {
#endif
      /* HAL MMC initialization */

      if(MX_MMC_SD_Init(hmmc) != HAL_OK)
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f80b 	bl	8001ba6 <MX_MMC_SD_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <BSP_MMC_Init+0x24>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001b96:	f06f 0303 	mvn.w	r3, #3
 8001b9a:	60fb      	str	r3, [r7, #12]
      }
    }
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */


  return  ret;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <MX_MMC_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hmmc SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_MMC_SD_Init(MMC_HandleTypeDef *hmmc)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
//  hmmc->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
//  hmmc->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
//  hmmc->Init.BusWide             = SDMMC_BUS_WIDE_4B;

  /* HAL SD initialization */
  if(HAL_MMC_Init(hmmc) != HAL_OK)
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f018 fb5e 	bl	801a274 <HAL_MMC_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_MMC_SD_Init+0x1c>
  {
    ret = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <BSP_MMC_ReadBlocks_DMA>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of MMC blocks to read
  * @retval BSP status
  */
int32_t BSP_MMC_ReadBlocks_DMA(MMC_HandleTypeDef *hmmc, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	603b      	str	r3, [r7, #0]
  int32_t ret;

  if(HAL_MMC_ReadBlocks_DMA(hmmc, (uint8_t *)pData, BlockIdx, BlocksNbr) != HAL_OK)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f018 fc43 	bl	801a46c <HAL_MMC_ReadBlocks_DMA>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <BSP_MMC_ReadBlocks_DMA+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001bec:	f06f 0303 	mvn.w	r3, #3
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e001      	b.n	8001bf8 <BSP_MMC_ReadBlocks_DMA+0x2c>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  }
  /* Return BSP status */
  return ret;
 8001bf8:	697b      	ldr	r3, [r7, #20]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <BSP_MMC_WriteBlocks_DMA>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of MMC blocks to write
  * @retval BSP status
  */
int32_t BSP_MMC_WriteBlocks_DMA(MMC_HandleTypeDef *hmmc, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	603b      	str	r3, [r7, #0]
  int32_t ret;

  if(HAL_MMC_WriteBlocks_DMA(hmmc, (uint8_t *)pData, BlockIdx, BlocksNbr) != HAL_OK)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f018 fcec 	bl	801a5f4 <HAL_MMC_WriteBlocks_DMA>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <BSP_MMC_WriteBlocks_DMA+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001c22:	f06f 0303 	mvn.w	r3, #3
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e001      	b.n	8001c2e <BSP_MMC_WriteBlocks_DMA+0x2c>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  }
  /* Return BSP status */
  return ret;
 8001c2e:	697b      	ldr	r3, [r7, #20]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <BSP_MMC_GetCardState>:
  *            @arg  MMC_TRANSFER_OK: No data transfer is acting
  *            @arg  MMC_TRANSFER_BUSY: Data transfer is acting
  *            @arg  MMC_TRANSFER_ERROR: Data transfer error
  */
int32_t BSP_MMC_GetCardState(MMC_HandleTypeDef *hmmc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  return((HAL_MMC_GetCardState(hmmc) == HAL_MMC_CARD_TRANSFER ) ? MMC_TRANSFER_OK : MMC_TRANSFER_BUSY);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f019 faeb 	bl	801b21c <HAL_MMC_GetCardState>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	bf14      	ite	ne
 8001c4c:	2301      	movne	r3, #1
 8001c4e:	2300      	moveq	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <BSP_MMC_GetCardInfo>:
  * @param  Instance   MMC Instance
  * @param  CardInfo : Pointer to HAL_MMC_CardInfoTypedef structure
  * @retval None
  */
int32_t BSP_MMC_GetCardInfo(MMC_HandleTypeDef *hmmc, BSP_MMC_CardInfo *CardInfo)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(HAL_MMC_GetCardInfo(hmmc, CardInfo) != HAL_OK)
 8001c64:	6839      	ldr	r1, [r7, #0]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f019 f8e8 	bl	801ae3c <HAL_MMC_GetCardInfo>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <BSP_MMC_GetCardInfo+0x20>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001c72:	f06f 0303 	mvn.w	r3, #3
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	e001      	b.n	8001c7e <BSP_MMC_GetCardInfo+0x24>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  }
  /* Return BSP status */
  return ret;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_MMC_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
void HAL_MMC_TxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  BSP_MMC_WriteCpltCallback(hmmc);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f00e fa87 	bl	80101a4 <BSP_MMC_WriteCpltCallback>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_MMC_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
void HAL_MMC_RxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  BSP_MMC_ReadCpltCallback(hmmc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f00e faa6 	bl	80101f8 <BSP_MMC_ReadCpltCallback>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <MMC_MspInit>:
  * @brief  Initializes the MMC MSP.
  * @param  hmmc  MMC handle
  * @retval None
  */
static void MMC_MspInit(MMC_HandleTypeDef *hmmc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmmc);

  /* __weak function can be modified by the application */
  HAL_MMC_MspInit(hmmc);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f016 fdb1 	bl	8018824 <HAL_MMC_MspInit>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(const SPI_TypeDef *SPIx)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <LL_SPI_IsEnabled+0x18>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <LL_SPI_IsEnabled+0x1a>
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_SPI_IsActiveFlag_RXP>:
  * @rmtoll SR           RXP           LL_SPI_IsActiveFlag_RXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(const SPI_TypeDef *SPIx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <LL_SPI_IsActiveFlag_RXP+0x18>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <LL_SPI_IsActiveFlag_RXP+0x1a>
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_SPI_IsActiveFlag_TXC>:
  * @rmtoll SR           TXC           LL_SPI_IsActiveFlag_TXC
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXC(const SPI_TypeDef *SPIx)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXC) == (SPI_SR_TXC)) ? 1UL : 0UL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d2a:	d101      	bne.n	8001d30 <LL_SPI_IsActiveFlag_TXC+0x1a>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <LL_SPI_IsActiveFlag_TXC+0x1c>
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3330      	adds	r3, #48	@ 0x30
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3320      	adds	r3, #32
 8001d6a:	78fa      	ldrb	r2, [r7, #3]
 8001d6c:	701a      	strb	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <SPI_Driver_Transmit8>:
#include "spi_driver.h"
#include "uart_driver_dma.h"

#define SPI_TIMEOUT_MS 10  // 10ms timeout

Std_ReturnType SPI_Driver_Transmit8(SPI_TypeDef *SPIx, uint8_t data, uint8_t *receivedData) {
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	460b      	mov	r3, r1
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	72fb      	strb	r3, [r7, #11]
    if (!LL_SPI_IsEnabled(SPIx)) return E_ERROR;
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7ff ff9e 	bl	8001cca <LL_SPI_IsEnabled>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <SPI_Driver_Transmit8+0x1e>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e035      	b.n	8001e04 <SPI_Driver_Transmit8+0x8a>

    uint32_t startTick = Utils_GetTick();
 8001d98:	f008 fd5e 	bl	800a858 <Utils_GetTick>
 8001d9c:	6178      	str	r0, [r7, #20]
    LL_SPI_TransmitData8(SPIx, data);
 8001d9e:	7afb      	ldrb	r3, [r7, #11]
 8001da0:	4619      	mov	r1, r3
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff ffd9 	bl	8001d5a <LL_SPI_TransmitData8>

    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8001da8:	e008      	b.n	8001dbc <SPI_Driver_Transmit8+0x42>
        if ((Utils_GetTick() - startTick) > SPI_TIMEOUT_MS) {
 8001daa:	f008 fd55 	bl	800a858 <Utils_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b0a      	cmp	r3, #10
 8001db6:	d901      	bls.n	8001dbc <SPI_Driver_Transmit8+0x42>
            return E_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e023      	b.n	8001e04 <SPI_Driver_Transmit8+0x8a>
    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff ffaa 	bl	8001d16 <LL_SPI_IsActiveFlag_TXC>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <SPI_Driver_Transmit8+0x30>
        }
    }

    startTick = Utils_GetTick();
 8001dc8:	f008 fd46 	bl	800a858 <Utils_GetTick>
 8001dcc:	6178      	str	r0, [r7, #20]
    while (!LL_SPI_IsActiveFlag_RXP(SPIx)) {
 8001dce:	e008      	b.n	8001de2 <SPI_Driver_Transmit8+0x68>
        if ((Utils_GetTick() - startTick) > SPI_TIMEOUT_MS) {
 8001dd0:	f008 fd42 	bl	800a858 <Utils_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b0a      	cmp	r3, #10
 8001ddc:	d901      	bls.n	8001de2 <SPI_Driver_Transmit8+0x68>
            return E_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e010      	b.n	8001e04 <SPI_Driver_Transmit8+0x8a>
    while (!LL_SPI_IsActiveFlag_RXP(SPIx)) {
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7ff ff84 	bl	8001cf0 <LL_SPI_IsActiveFlag_RXP>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <SPI_Driver_Transmit8+0x56>
        }
    }

    if (receivedData) {
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <SPI_Driver_Transmit8+0x88>
        *receivedData = LL_SPI_ReceiveData8(SPIx);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff ffa2 	bl	8001d3e <LL_SPI_ReceiveData8>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	701a      	strb	r2, [r3, #0]
    }

    return E_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <SPI_Driver_Write>:
    }

    return E_OK;
}

Std_ReturnType SPI_Driver_Write(SPI_TypeDef *SPIx, uint8_t data) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
    if (!LL_SPI_IsEnabled(SPIx)) return E_ERROR;
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff56 	bl	8001cca <LL_SPI_IsEnabled>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <SPI_Driver_Write+0x1c>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e01b      	b.n	8001e60 <SPI_Driver_Write+0x54>

    uint32_t startTick = Utils_GetTick();
 8001e28:	f008 fd16 	bl	800a858 <Utils_GetTick>
 8001e2c:	60f8      	str	r0, [r7, #12]
    LL_SPI_TransmitData8(SPIx, data);
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	4619      	mov	r1, r3
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ff91 	bl	8001d5a <LL_SPI_TransmitData8>

    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8001e38:	e008      	b.n	8001e4c <SPI_Driver_Write+0x40>
        if ((Utils_GetTick() - startTick) > SPI_TIMEOUT_MS) {
 8001e3a:	f008 fd0d 	bl	800a858 <Utils_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b0a      	cmp	r3, #10
 8001e46:	d901      	bls.n	8001e4c <SPI_Driver_Write+0x40>
            return E_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e009      	b.n	8001e60 <SPI_Driver_Write+0x54>
    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff62 	bl	8001d16 <LL_SPI_IsActiveFlag_TXC>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <SPI_Driver_Write+0x2e>
        }
    }

    LL_SPI_ReceiveData8(SPIx);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff70 	bl	8001d3e <LL_SPI_ReceiveData8>
    return E_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <SharedREG_Clear>:
            SHARED.M7_to_M4[slot] :
            SHARED.M4_to_M7[slot];
}

void SharedREG_Clear(SharedDir_t dir)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
    if (!SHARED_IS_WRITER(dir)) return;
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d110      	bne.n	8001e9a <SharedREG_Clear+0x32>

    if (dir == DIR_M7_TO_M4)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <SharedREG_Clear+0x24>
        memset((void *)SHARED.M7_to_M4, 0, sizeof(SHARED.M7_to_M4));
 8001e7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e82:	2100      	movs	r1, #0
 8001e84:	4807      	ldr	r0, [pc, #28]	@ (8001ea4 <SharedREG_Clear+0x3c>)
 8001e86:	f020 f902 	bl	802208e <memset>
 8001e8a:	e007      	b.n	8001e9c <SharedREG_Clear+0x34>
    else
        memset((void *)SHARED.M4_to_M7, 0, sizeof(SHARED.M4_to_M7));
 8001e8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e90:	2100      	movs	r1, #0
 8001e92:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <SharedREG_Clear+0x40>)
 8001e94:	f020 f8fb 	bl	802208e <memset>
 8001e98:	e000      	b.n	8001e9c <SharedREG_Clear+0x34>
    if (!SHARED_IS_WRITER(dir)) return;
 8001e9a:	bf00      	nop
}
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	3800f800 	.word	0x3800f800
 8001ea8:	3800fc00 	.word	0x3800fc00

08001eac <SharedREG_Init>:

void SharedREG_Init(SharedDir_t dir)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
    if (!SHARED_IS_WRITER(dir)) return;
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <SharedREG_Init+0x1a>

    SharedREG_Clear(dir);
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ffd2 	bl	8001e68 <SharedREG_Clear>
 8001ec4:	e000      	b.n	8001ec8 <SharedREG_Init+0x1c>
    if (!SHARED_IS_WRITER(dir)) return;
 8001ec6:	bf00      	nop
//    if (dir == DIR_M4_TO_M7)
//    {
//        SharedREG_Write(DIR_M4_TO_M7, 0, 0);
//    }
}
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <LL_USART_Enable>:
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_USART_Disable>:
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0201 	bic.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_USART_IsActiveFlag_TC>:
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f1e:	2b40      	cmp	r3, #64	@ 0x40
 8001f20:	d101      	bne.n	8001f26 <LL_USART_IsActiveFlag_TC+0x18>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <LL_USART_IsActiveFlag_TC+0x1a>
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f44:	2b80      	cmp	r3, #128	@ 0x80
 8001f46:	d101      	bne.n	8001f4c <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_USART_EnableIT_IDLE>:
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b089      	sub	sp, #36	@ 0x24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	e853 3f00 	ldrex	r3, [r3]
 8001f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f043 0310 	orr.w	r3, r3, #16
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	61ba      	str	r2, [r7, #24]
 8001f7c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f7e:	6979      	ldr	r1, [r7, #20]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	e841 2300 	strex	r3, r2, [r1]
 8001f86:	613b      	str	r3, [r7, #16]
   return(result);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1e9      	bne.n	8001f62 <LL_USART_EnableIT_IDLE+0x8>
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	3724      	adds	r7, #36	@ 0x24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_USART_EnableIT_TXE_TXFNF>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	e853 3f00 	ldrex	r3, [r3]
 8001fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	61ba      	str	r2, [r7, #24]
 8001fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc0:	6979      	ldr	r1, [r7, #20]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	e841 2300 	strex	r3, r2, [r1]
 8001fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e9      	bne.n	8001fa4 <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3724      	adds	r7, #36	@ 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_USART_DisableIT_TXE_TXFNF>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b089      	sub	sp, #36	@ 0x24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	e853 3f00 	ldrex	r3, [r3]
 8001ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	61ba      	str	r2, [r7, #24]
 8002000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002002:	6979      	ldr	r1, [r7, #20]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	e841 2300 	strex	r3, r2, [r1]
 800200a:	613b      	str	r3, [r7, #16]
   return(result);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1e9      	bne.n	8001fe6 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	3724      	adds	r7, #36	@ 0x24
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_USART_IsEnabledIT_TXE_TXFNF>:
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002030:	2b80      	cmp	r3, #128	@ 0x80
 8002032:	d101      	bne.n	8002038 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_USART_EnableDMAReq_RX>:
{
 8002046:	b480      	push	{r7}
 8002048:	b089      	sub	sp, #36	@ 0x24
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3308      	adds	r3, #8
 8002052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	e853 3f00 	ldrex	r3, [r3]
 800205a:	60bb      	str	r3, [r7, #8]
   return(result);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002062:	61fb      	str	r3, [r7, #28]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3308      	adds	r3, #8
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	61ba      	str	r2, [r7, #24]
 800206c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206e:	6979      	ldr	r1, [r7, #20]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	e841 2300 	strex	r3, r2, [r1]
 8002076:	613b      	str	r3, [r7, #16]
   return(result);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1e7      	bne.n	800204e <LL_USART_EnableDMAReq_RX+0x8>
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	3724      	adds	r7, #36	@ 0x24
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_USART_DMA_GetRegAddr>:
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d103      	bne.n	80020a4 <LL_USART_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3328      	adds	r3, #40	@ 0x28
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e002      	b.n	80020aa <LL_USART_DMA_GetRegAddr+0x1e>
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3324      	adds	r3, #36	@ 0x24
 80020a8:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_USART_TransmitData8>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80020e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002118 <LL_DMA_EnableStream+0x40>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4908      	ldr	r1, [pc, #32]	@ (8002118 <LL_DMA_EnableStream+0x40>)
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	440a      	add	r2, r1
 80020fc:	7812      	ldrb	r2, [r2, #0]
 80020fe:	4611      	mov	r1, r2
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	440a      	add	r2, r1
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6013      	str	r3, [r2, #0]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	08025c20 	.word	0x08025c20

0800211c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 800212a:	4a0c      	ldr	r2, [pc, #48]	@ (800215c <LL_DMA_DisableStream+0x40>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <LL_DMA_DisableStream+0x40>)
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	440a      	add	r2, r1
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	4611      	mov	r1, r2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	440a      	add	r2, r1
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	6013      	str	r3, [r2, #0]
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	08025c20 	.word	0x08025c20

08002160 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t NbData)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8002170:	4a0d      	ldr	r2, [pc, #52]	@ (80021a8 <LL_DMA_SetDataLength+0x48>)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4413      	add	r3, r2
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	4413      	add	r3, r2
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <LL_DMA_SetDataLength+0x4c>)
 8002182:	4013      	ands	r3, r2
 8002184:	4908      	ldr	r1, [pc, #32]	@ (80021a8 <LL_DMA_SetDataLength+0x48>)
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	440a      	add	r2, r1
 800218a:	7812      	ldrb	r2, [r2, #0]
 800218c:	4611      	mov	r1, r2
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	440a      	add	r2, r1
 8002192:	4611      	mov	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	08025c20 	.word	0x08025c20
 80021ac:	ffff0000 	.word	0xffff0000

080021b0 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	60fb      	str	r3, [r7, #12]

  return (READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT));
 80021be:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <LL_DMA_GetDataLength+0x2c>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	b29b      	uxth	r3, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	08025c20 	.word	0x08025c20

080021e0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 80021f0:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <LL_DMA_SetMemoryAddress+0x30>)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4413      	add	r3, r2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4413      	add	r3, r2
 80021fe:	461a      	mov	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	60d3      	str	r3, [r2, #12]
}
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	08025c20 	.word	0x08025c20

08002214 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8002224:	4a07      	ldr	r2, [pc, #28]	@ (8002244 <LL_DMA_SetPeriphAddress+0x30>)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	4413      	add	r3, r2
 8002232:	461a      	mov	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6093      	str	r3, [r2, #8]
}
 8002238:	bf00      	nop
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	08025c20 	.word	0x08025c20

08002248 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8002256:	4a0c      	ldr	r2, [pc, #48]	@ (8002288 <LL_DMA_EnableIT_HT+0x40>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4908      	ldr	r1, [pc, #32]	@ (8002288 <LL_DMA_EnableIT_HT+0x40>)
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	440a      	add	r2, r1
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	4611      	mov	r1, r2
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	440a      	add	r2, r1
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	6013      	str	r3, [r2, #0]
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	08025c20 	.word	0x08025c20

0800228c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE);
 800229a:	4a0c      	ldr	r2, [pc, #48]	@ (80022cc <LL_DMA_EnableIT_TE+0x40>)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4908      	ldr	r1, [pc, #32]	@ (80022cc <LL_DMA_EnableIT_TE+0x40>)
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	440a      	add	r2, r1
 80022b0:	7812      	ldrb	r2, [r2, #0]
 80022b2:	4611      	mov	r1, r2
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	440a      	add	r2, r1
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	6013      	str	r3, [r2, #0]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	08025c20 	.word	0x08025c20

080022d0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 80022de:	4a0c      	ldr	r2, [pc, #48]	@ (8002310 <LL_DMA_EnableIT_TC+0x40>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4908      	ldr	r1, [pc, #32]	@ (8002310 <LL_DMA_EnableIT_TC+0x40>)
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	440a      	add	r2, r1
 80022f4:	7812      	ldrb	r2, [r2, #0]
 80022f6:	4611      	mov	r1, r2
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	440a      	add	r2, r1
 80022fc:	f043 0310 	orr.w	r3, r3, #16
 8002300:	6013      	str	r3, [r2, #0]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	08025c20 	.word	0x08025c20

08002314 <UART_DMA_Driver_Get>:
#ifndef RESET
#define RESET 						    0U
#endif

UART_DMA_Driver_t* UART_DMA_Driver_Get(USART_TypeDef *uart)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e015      	b.n	800234e <UART_DMA_Driver_Get+0x3a>
        if (uart_dma_drivers[i].uart == uart) {
 8002322:	4910      	ldr	r1, [pc, #64]	@ (8002364 <UART_DMA_Driver_Get+0x50>)
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4613      	mov	r3, r2
 8002328:	015b      	lsls	r3, r3, #5
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	d107      	bne.n	8002348 <UART_DMA_Driver_Get+0x34>
            return &uart_dma_drivers[i];
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4613      	mov	r3, r2
 800233c:	015b      	lsls	r3, r3, #5
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4a08      	ldr	r2, [pc, #32]	@ (8002364 <UART_DMA_Driver_Get+0x50>)
 8002344:	4413      	add	r3, r2
 8002346:	e006      	b.n	8002356 <UART_DMA_Driver_Get+0x42>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3301      	adds	r3, #1
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b02      	cmp	r3, #2
 8002352:	dde6      	ble.n	8002322 <UART_DMA_Driver_Get+0xe>
        }
    }
    return NULL;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2401472c 	.word	0x2401472c

08002368 <UART_DMA_Driver_Init>:

/*************************************************
 *                    Init                       *
 *************************************************/
Std_ReturnType UART_DMA_Driver_Init(void)
{
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af02      	add	r7, sp, #8
    // USART1 (index 0)
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	e022      	b.n	80023ba <UART_DMA_Driver_Init+0x52>
        LL_USART_Disable(uart_dma_drivers[i].uart);
 8002374:	49b5      	ldr	r1, [pc, #724]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	015b      	lsls	r3, r3, #5
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fdb2 	bl	8001eee <LL_USART_Disable>
        LL_DMA_DisableStream(uart_dma_drivers[i].dma_rx_instance, uart_dma_drivers[i].dma_rx_channel);
 800238a:	49b0      	ldr	r1, [pc, #704]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	015b      	lsls	r3, r3, #5
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	3368      	adds	r3, #104	@ 0x68
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	49ab      	ldr	r1, [pc, #684]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	015b      	lsls	r3, r3, #5
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	336c      	adds	r3, #108	@ 0x6c
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7ff feb4 	bl	800211c <LL_DMA_DisableStream>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3301      	adds	r3, #1
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	ddd9      	ble.n	8002374 <UART_DMA_Driver_Init+0xc>
    }

    RingBuffer_Create(&uart_dma_drivers[0].rx_buffer, 1, "UART1_RX", uart1_rx_data, UART1_BUFFER_SIZE);
 80023c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	4ba2      	ldr	r3, [pc, #648]	@ (8002650 <UART_DMA_Driver_Init+0x2e8>)
 80023c8:	4aa2      	ldr	r2, [pc, #648]	@ (8002654 <UART_DMA_Driver_Init+0x2ec>)
 80023ca:	2101      	movs	r1, #1
 80023cc:	48a2      	ldr	r0, [pc, #648]	@ (8002658 <UART_DMA_Driver_Init+0x2f0>)
 80023ce:	f008 f8ea 	bl	800a5a6 <RingBuffer_Create>
    RingBuffer_Create(&uart_dma_drivers[0].tx_buffer, 2, "UART1_TX", uart1_tx_data, UART1_BUFFER_SIZE);
 80023d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	4ba0      	ldr	r3, [pc, #640]	@ (800265c <UART_DMA_Driver_Init+0x2f4>)
 80023da:	4aa1      	ldr	r2, [pc, #644]	@ (8002660 <UART_DMA_Driver_Init+0x2f8>)
 80023dc:	2102      	movs	r1, #2
 80023de:	48a1      	ldr	r0, [pc, #644]	@ (8002664 <UART_DMA_Driver_Init+0x2fc>)
 80023e0:	f008 f8e1 	bl	800a5a6 <RingBuffer_Create>
    uart_dma_drivers[0].rxSemaphore = xSemaphoreCreateBinary();
 80023e4:	2203      	movs	r2, #3
 80023e6:	2100      	movs	r1, #0
 80023e8:	2001      	movs	r0, #1
 80023ea:	f00e faa4 	bl	8010936 <xQueueGenericCreate>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4a96      	ldr	r2, [pc, #600]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80023f2:	6653      	str	r3, [r2, #100]	@ 0x64

    LL_DMA_SetPeriphAddress(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 80023f4:	4b95      	ldr	r3, [pc, #596]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80023f6:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
 80023f8:	4b94      	ldr	r3, [pc, #592]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80023fa:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 80023fc:	2101      	movs	r1, #1
 80023fe:	489a      	ldr	r0, [pc, #616]	@ (8002668 <UART_DMA_Driver_Init+0x300>)
 8002400:	f7ff fe44 	bl	800208c <LL_USART_DMA_GetRegAddr>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	4629      	mov	r1, r5
 800240a:	4620      	mov	r0, r4
 800240c:	f7ff ff02 	bl	8002214 <LL_DMA_SetPeriphAddress>
                           LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetDataLength(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 8002410:	4b8e      	ldr	r3, [pc, #568]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002412:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002414:	4a8d      	ldr	r2, [pc, #564]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002416:	6ed1      	ldr	r1, [r2, #108]	@ 0x6c
                         uart_dma_drivers[0].dma_rx_buffer_size);
 8002418:	4a8c      	ldr	r2, [pc, #560]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800241a:	f8b2 2074 	ldrh.w	r2, [r2, #116]	@ 0x74
    LL_DMA_SetDataLength(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fe9e 	bl	8002160 <LL_DMA_SetDataLength>
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 8002424:	4b89      	ldr	r3, [pc, #548]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002428:	4a88      	ldr	r2, [pc, #544]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800242a:	6ed1      	ldr	r1, [r2, #108]	@ 0x6c
                            (uint32_t)uart_dma_drivers[0].dma_rx_buffer);
 800242c:	4a87      	ldr	r2, [pc, #540]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800242e:	6f12      	ldr	r2, [r2, #112]	@ 0x70
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fed5 	bl	80021e0 <LL_DMA_SetMemoryAddress>
    LL_DMA_EnableIT_TC(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 8002436:	4b85      	ldr	r3, [pc, #532]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002438:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800243a:	4a84      	ldr	r2, [pc, #528]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800243c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff45 	bl	80022d0 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 8002446:	4b81      	ldr	r3, [pc, #516]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002448:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800244a:	4a80      	ldr	r2, [pc, #512]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800244c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fef9 	bl	8002248 <LL_DMA_EnableIT_HT>
    LL_DMA_EnableIT_TE(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 8002456:	4b7d      	ldr	r3, [pc, #500]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800245a:	4a7c      	ldr	r2, [pc, #496]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800245c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff13 	bl	800228c <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(USART1);
 8002466:	4880      	ldr	r0, [pc, #512]	@ (8002668 <UART_DMA_Driver_Init+0x300>)
 8002468:	f7ff fded 	bl	8002046 <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableStream(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 800246c:	4b77      	ldr	r3, [pc, #476]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800246e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002470:	4a76      	ldr	r2, [pc, #472]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002472:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fe2e 	bl	80020d8 <LL_DMA_EnableStream>

    LL_USART_EnableIT_IDLE(USART1);
 800247c:	487a      	ldr	r0, [pc, #488]	@ (8002668 <UART_DMA_Driver_Init+0x300>)
 800247e:	f7ff fd6c 	bl	8001f5a <LL_USART_EnableIT_IDLE>
//    LL_USART_EnableIT_RXNE(USART1);

    // USART2 (index 1)
    RingBuffer_Create(&uart_dma_drivers[1].rx_buffer, 5, "UART2_RX", uart2_rx_data, UART2_BUFFER_SIZE);
 8002482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	4b78      	ldr	r3, [pc, #480]	@ (800266c <UART_DMA_Driver_Init+0x304>)
 800248a:	4a79      	ldr	r2, [pc, #484]	@ (8002670 <UART_DMA_Driver_Init+0x308>)
 800248c:	2105      	movs	r1, #5
 800248e:	4879      	ldr	r0, [pc, #484]	@ (8002674 <UART_DMA_Driver_Init+0x30c>)
 8002490:	f008 f889 	bl	800a5a6 <RingBuffer_Create>
    RingBuffer_Create(&uart_dma_drivers[1].tx_buffer, 6, "UART2_TX", uart2_tx_data, UART2_BUFFER_SIZE);
 8002494:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4b77      	ldr	r3, [pc, #476]	@ (8002678 <UART_DMA_Driver_Init+0x310>)
 800249c:	4a77      	ldr	r2, [pc, #476]	@ (800267c <UART_DMA_Driver_Init+0x314>)
 800249e:	2106      	movs	r1, #6
 80024a0:	4877      	ldr	r0, [pc, #476]	@ (8002680 <UART_DMA_Driver_Init+0x318>)
 80024a2:	f008 f880 	bl	800a5a6 <RingBuffer_Create>
    uart_dma_drivers[1].rxSemaphore = xSemaphoreCreateBinary();
 80024a6:	2203      	movs	r2, #3
 80024a8:	2100      	movs	r1, #0
 80024aa:	2001      	movs	r0, #1
 80024ac:	f00e fa43 	bl	8010936 <xQueueGenericCreate>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a66      	ldr	r2, [pc, #408]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80024b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

    LL_DMA_SetPeriphAddress(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 80024b8:	4b64      	ldr	r3, [pc, #400]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80024ba:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
 80024be:	4b63      	ldr	r3, [pc, #396]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80024c0:	f8d3 50e8 	ldr.w	r5, [r3, #232]	@ 0xe8
 80024c4:	2101      	movs	r1, #1
 80024c6:	486f      	ldr	r0, [pc, #444]	@ (8002684 <UART_DMA_Driver_Init+0x31c>)
 80024c8:	f7ff fde0 	bl	800208c <LL_USART_DMA_GetRegAddr>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	4629      	mov	r1, r5
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7ff fe9e 	bl	8002214 <LL_DMA_SetPeriphAddress>
                           LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetDataLength(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 80024d8:	4b5c      	ldr	r3, [pc, #368]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80024da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80024de:	4a5b      	ldr	r2, [pc, #364]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80024e0:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
                         uart_dma_drivers[1].dma_rx_buffer_size);
 80024e4:	4a59      	ldr	r2, [pc, #356]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80024e6:	f8b2 20f0 	ldrh.w	r2, [r2, #240]	@ 0xf0
    LL_DMA_SetDataLength(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fe38 	bl	8002160 <LL_DMA_SetDataLength>
    LL_DMA_SetMemoryAddress(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 80024f0:	4b56      	ldr	r3, [pc, #344]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80024f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80024f6:	4a55      	ldr	r2, [pc, #340]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80024f8:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
                            (uint32_t)uart_dma_drivers[1].dma_rx_buffer);
 80024fc:	4a53      	ldr	r2, [pc, #332]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80024fe:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
    LL_DMA_SetMemoryAddress(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fe6c 	bl	80021e0 <LL_DMA_SetMemoryAddress>
    LL_DMA_EnableIT_TC(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 8002508:	4b50      	ldr	r3, [pc, #320]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800250a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800250e:	4a4f      	ldr	r2, [pc, #316]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002510:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff feda 	bl	80022d0 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 800251c:	4b4b      	ldr	r3, [pc, #300]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800251e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002522:	4a4a      	ldr	r2, [pc, #296]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002524:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fe8c 	bl	8002248 <LL_DMA_EnableIT_HT>
    LL_DMA_EnableIT_TE(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 8002530:	4b46      	ldr	r3, [pc, #280]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002536:	4a45      	ldr	r2, [pc, #276]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002538:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fea4 	bl	800228c <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(USART2);
 8002544:	484f      	ldr	r0, [pc, #316]	@ (8002684 <UART_DMA_Driver_Init+0x31c>)
 8002546:	f7ff fd7e 	bl	8002046 <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableStream(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 800254a:	4b40      	ldr	r3, [pc, #256]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800254c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002550:	4a3e      	ldr	r2, [pc, #248]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002552:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fdbd 	bl	80020d8 <LL_DMA_EnableStream>

    LL_USART_EnableIT_IDLE(USART2);
 800255e:	4849      	ldr	r0, [pc, #292]	@ (8002684 <UART_DMA_Driver_Init+0x31c>)
 8002560:	f7ff fcfb 	bl	8001f5a <LL_USART_EnableIT_IDLE>
//    LL_USART_EnableIT_RXNE(USART2);

    // UART7 (index 2)
    RingBuffer_Create(&uart_dma_drivers[2].rx_buffer, 7, "UART7_RX", uart7_rx_data, UART7_BUFFER_SIZE);
 8002564:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <UART_DMA_Driver_Init+0x320>)
 800256c:	4a47      	ldr	r2, [pc, #284]	@ (800268c <UART_DMA_Driver_Init+0x324>)
 800256e:	2107      	movs	r1, #7
 8002570:	4847      	ldr	r0, [pc, #284]	@ (8002690 <UART_DMA_Driver_Init+0x328>)
 8002572:	f008 f818 	bl	800a5a6 <RingBuffer_Create>
    RingBuffer_Create(&uart_dma_drivers[2].tx_buffer, 8, "UART7_TX", uart7_tx_data, UART7_BUFFER_SIZE);
 8002576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4b45      	ldr	r3, [pc, #276]	@ (8002694 <UART_DMA_Driver_Init+0x32c>)
 800257e:	4a46      	ldr	r2, [pc, #280]	@ (8002698 <UART_DMA_Driver_Init+0x330>)
 8002580:	2108      	movs	r1, #8
 8002582:	4846      	ldr	r0, [pc, #280]	@ (800269c <UART_DMA_Driver_Init+0x334>)
 8002584:	f008 f80f 	bl	800a5a6 <RingBuffer_Create>
    uart_dma_drivers[2].rxSemaphore = xSemaphoreCreateBinary();
 8002588:	2203      	movs	r2, #3
 800258a:	2100      	movs	r1, #0
 800258c:	2001      	movs	r0, #1
 800258e:	f00e f9d2 	bl	8010936 <xQueueGenericCreate>
 8002592:	4603      	mov	r3, r0
 8002594:	4a2d      	ldr	r2, [pc, #180]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002596:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c

    LL_DMA_SetPeriphAddress(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 800259a:	4b2c      	ldr	r3, [pc, #176]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800259c:	f8d3 4160 	ldr.w	r4, [r3, #352]	@ 0x160
 80025a0:	4b2a      	ldr	r3, [pc, #168]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80025a2:	f8d3 5164 	ldr.w	r5, [r3, #356]	@ 0x164
 80025a6:	2101      	movs	r1, #1
 80025a8:	483d      	ldr	r0, [pc, #244]	@ (80026a0 <UART_DMA_Driver_Init+0x338>)
 80025aa:	f7ff fd6f 	bl	800208c <LL_USART_DMA_GetRegAddr>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	4629      	mov	r1, r5
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7ff fe2d 	bl	8002214 <LL_DMA_SetPeriphAddress>
                           LL_USART_DMA_GetRegAddr(UART7, LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetDataLength(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 80025ba:	4b24      	ldr	r3, [pc, #144]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80025bc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80025c0:	4a22      	ldr	r2, [pc, #136]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80025c2:	f8d2 1164 	ldr.w	r1, [r2, #356]	@ 0x164
                         uart_dma_drivers[2].dma_rx_buffer_size);
 80025c6:	4a21      	ldr	r2, [pc, #132]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80025c8:	f8b2 216c 	ldrh.w	r2, [r2, #364]	@ 0x16c
    LL_DMA_SetDataLength(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fdc7 	bl	8002160 <LL_DMA_SetDataLength>
    LL_DMA_SetMemoryAddress(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 80025d2:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80025d4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80025d8:	4a1c      	ldr	r2, [pc, #112]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80025da:	f8d2 1164 	ldr.w	r1, [r2, #356]	@ 0x164
                            (uint32_t)uart_dma_drivers[2].dma_rx_buffer);
 80025de:	4a1b      	ldr	r2, [pc, #108]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80025e0:	f8d2 2168 	ldr.w	r2, [r2, #360]	@ 0x168
    LL_DMA_SetMemoryAddress(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fdfb 	bl	80021e0 <LL_DMA_SetMemoryAddress>
    LL_DMA_EnableIT_TC(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 80025ea:	4b18      	ldr	r3, [pc, #96]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80025ec:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80025f0:	4a16      	ldr	r2, [pc, #88]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 80025f2:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fe69 	bl	80022d0 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 80025fe:	4b13      	ldr	r3, [pc, #76]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002600:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002604:	4a11      	ldr	r2, [pc, #68]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002606:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fe1b 	bl	8002248 <LL_DMA_EnableIT_HT>
    LL_DMA_EnableIT_TE(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002614:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002618:	4a0c      	ldr	r2, [pc, #48]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800261a:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fe33 	bl	800228c <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(UART7);
 8002626:	481e      	ldr	r0, [pc, #120]	@ (80026a0 <UART_DMA_Driver_Init+0x338>)
 8002628:	f7ff fd0d 	bl	8002046 <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableStream(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 800262c:	4b07      	ldr	r3, [pc, #28]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 800262e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002632:	4a06      	ldr	r2, [pc, #24]	@ (800264c <UART_DMA_Driver_Init+0x2e4>)
 8002634:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fd4c 	bl	80020d8 <LL_DMA_EnableStream>

    LL_USART_EnableIT_IDLE(UART7);
 8002640:	4817      	ldr	r0, [pc, #92]	@ (80026a0 <UART_DMA_Driver_Init+0x338>)
 8002642:	f7ff fc8a 	bl	8001f5a <LL_USART_EnableIT_IDLE>
//    LL_USART_EnableIT_RXNE(UART7);

    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8002646:	2300      	movs	r3, #0
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	e039      	b.n	80026c0 <UART_DMA_Driver_Init+0x358>
 800264c:	2401472c 	.word	0x2401472c
 8002650:	2401632c 	.word	0x2401632c
 8002654:	080235c8 	.word	0x080235c8
 8002658:	24014730 	.word	0x24014730
 800265c:	2401672c 	.word	0x2401672c
 8002660:	080235d4 	.word	0x080235d4
 8002664:	24014760 	.word	0x24014760
 8002668:	40011000 	.word	0x40011000
 800266c:	24016f2c 	.word	0x24016f2c
 8002670:	080235e0 	.word	0x080235e0
 8002674:	240147ac 	.word	0x240147ac
 8002678:	2401732c 	.word	0x2401732c
 800267c:	080235ec 	.word	0x080235ec
 8002680:	240147dc 	.word	0x240147dc
 8002684:	40004400 	.word	0x40004400
 8002688:	24017b2c 	.word	0x24017b2c
 800268c:	080235f8 	.word	0x080235f8
 8002690:	24014828 	.word	0x24014828
 8002694:	24017f2c 	.word	0x24017f2c
 8002698:	08023604 	.word	0x08023604
 800269c:	24014858 	.word	0x24014858
 80026a0:	40007800 	.word	0x40007800
        LL_USART_Enable(uart_dma_drivers[i].uart);
 80026a4:	490a      	ldr	r1, [pc, #40]	@ (80026d0 <UART_DMA_Driver_Init+0x368>)
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	015b      	lsls	r3, r3, #5
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fc0a 	bl	8001ece <LL_USART_Enable>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	ddee      	ble.n	80026a4 <UART_DMA_Driver_Init+0x33c>
    }
    return E_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bdb0      	pop	{r4, r5, r7, pc}
 80026d0:	2401472c 	.word	0x2401472c

080026d4 <UART_Driver_Write>:
////    if (!LL_USART_IsEnabledIT_TXE(uart)) {
//        LL_USART_EnableIT_TXE(uart);
////    }
//}
void UART_Driver_Write(USART_TypeDef *uart, uint8_t data)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff fe17 	bl	8002314 <UART_DMA_Driver_Get>
 80026e6:	60b8      	str	r0, [r7, #8]
    if (driver == NULL)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01f      	beq.n	800272e <UART_Driver_Write+0x5a>
        return;

    uint32_t timeout = 500000;
 80026ee:	4b13      	ldr	r3, [pc, #76]	@ (800273c <UART_Driver_Write+0x68>)
 80026f0:	60fb      	str	r3, [r7, #12]

    while (!RingBuffer_Put(&driver->tx_buffer, data))
 80026f2:	e005      	b.n	8002700 <UART_Driver_Write+0x2c>
    {
        if (--timeout == 0)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d018      	beq.n	8002732 <UART_Driver_Write+0x5e>
    while (!RingBuffer_Put(&driver->tx_buffer, data))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	3334      	adds	r3, #52	@ 0x34
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f007 ff7f 	bl	800a60c <RingBuffer_Put>
 800270e:	4603      	mov	r3, r0
 8002710:	f083 0301 	eor.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ec      	bne.n	80026f4 <UART_Driver_Write+0x20>
        {
            return;
        }
    }

    if (!LL_USART_IsEnabledIT_TXE(uart)) {
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fc80 	bl	8002020 <LL_USART_IsEnabledIT_TXE_TXFNF>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <UART_Driver_Write+0x60>
        LL_USART_EnableIT_TXE(uart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fc38 	bl	8001f9c <LL_USART_EnableIT_TXE_TXFNF>
 800272c:	e002      	b.n	8002734 <UART_Driver_Write+0x60>
        return;
 800272e:	bf00      	nop
 8002730:	e000      	b.n	8002734 <UART_Driver_Write+0x60>
            return;
 8002732:	bf00      	nop
    }
}
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	0007a120 	.word	0x0007a120

08002740 <UART_Driver_SendString>:

void UART_Driver_SendString(USART_TypeDef *uart, const char *str)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fde2 	bl	8002314 <UART_DMA_Driver_Get>
 8002750:	60f8      	str	r0, [r7, #12]
    if (driver == NULL || str == NULL)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d011      	beq.n	800277c <UART_Driver_SendString+0x3c>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00e      	beq.n	800277c <UART_Driver_SendString+0x3c>
        return;


    while (*str)
 800275e:	e008      	b.n	8002772 <UART_Driver_SendString+0x32>
        {
            UART_Driver_Write(uart, (uint8_t)(*str));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffb4 	bl	80026d4 <UART_Driver_Write>
            str++;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	603b      	str	r3, [r7, #0]
    while (*str)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f2      	bne.n	8002760 <UART_Driver_SendString+0x20>
 800277a:	e000      	b.n	800277e <UART_Driver_SendString+0x3e>
        return;
 800277c:	bf00      	nop
        }
}
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <UART_Driver_TX_ISR>:
    atomic_store_explicit(&driver->tx_buffer.head, 0U, memory_order_release);
    atomic_store_explicit(&driver->tx_buffer.tail, 0U, memory_order_release);
}

void UART_Driver_TX_ISR(USART_TypeDef *uart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff fdc1 	bl	8002314 <UART_DMA_Driver_Get>
 8002792:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d042      	beq.n	8002820 <UART_Driver_TX_ISR+0x9c>
        return;

    if (driver->uart->ISR & USART_ISR_FE) {
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <UART_Driver_TX_ISR+0x2c>
        driver->uart->ICR = USART_ICR_FECF;  // Clear Framing Error Flag
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2202      	movs	r2, #2
 80027ae:	621a      	str	r2, [r3, #32]
    }

    if (driver->uart->ISR & USART_ISR_NE) {
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <UART_Driver_TX_ISR+0x42>
        driver->uart->ICR = USART_ICR_NECF;  // Clear Noise Error Flag
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2204      	movs	r2, #4
 80027c4:	621a      	str	r2, [r3, #32]

//    if (driver->uart->ISR & USART_ISR_EOBF) {
//        driver->uart->ICR = USART_ICR_EOBCF; // Clear End of Block Flag
//    }

    if (driver->uart->ISR & USART_ISR_CMF) {
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <UART_Driver_TX_ISR+0x5a>
        driver->uart->ICR = USART_ICR_CMCF;  // Clear Character Match Flag
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027dc:	621a      	str	r2, [r3, #32]
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fba8 	bl	8001f34 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01b      	beq.n	8002822 <UART_Driver_TX_ISR+0x9e>
        (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fc18 	bl	8002020 <LL_USART_IsEnabledIT_TXE_TXFNF>
 80027f0:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d015      	beq.n	8002822 <UART_Driver_TX_ISR+0x9e>
    {
        uint8_t tx_data;
        if (RingBuffer_Get(&driver->tx_buffer, &tx_data))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3334      	adds	r3, #52	@ 0x34
 80027fa:	f107 020b 	add.w	r2, r7, #11
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f007 ff49 	bl	800a698 <RingBuffer_Get>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <UART_Driver_TX_ISR+0x94>
        {
            LL_USART_TransmitData8(uart, tx_data);
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fc51 	bl	80020b8 <LL_USART_TransmitData8>
 8002816:	e004      	b.n	8002822 <UART_Driver_TX_ISR+0x9e>
        }
        else
        {
            LL_USART_DisableIT_TXE(uart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fbe0 	bl	8001fde <LL_USART_DisableIT_TXE_TXFNF>
 800281e:	e000      	b.n	8002822 <UART_Driver_TX_ISR+0x9e>
        return;
 8002820:	bf00      	nop
        }
    }
}
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <UART_DMA_Rx_Check>:

/************************************************
 *                    DMA RX                    *
 ************************************************/
void UART_DMA_Rx_Check(USART_TypeDef *uart) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	@ 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff fd6d 	bl	8002314 <UART_DMA_Driver_Get>
 800283a:	61b8      	str	r0, [r7, #24]
    if (driver == NULL)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d07c      	beq.n	800293c <UART_DMA_Rx_Check+0x114>
        return;

    size_t old_pos = driver->old_dma_pos;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002846:	617b      	str	r3, [r7, #20]
    size_t pos;

    uint16_t remaining = LL_DMA_GetDataLength(driver->dma_rx_instance, driver->dma_rx_channel);
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f7ff fcac 	bl	80021b0 <LL_DMA_GetDataLength>
 8002858:	4603      	mov	r3, r0
 800285a:	827b      	strh	r3, [r7, #18]
    pos = driver->dma_rx_buffer_size - remaining;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8002862:	461a      	mov	r2, r3
 8002864:	8a7b      	ldrh	r3, [r7, #18]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	60fb      	str	r3, [r7, #12]
//    if (driver->uart->ISR & USART_ISR_ORE) {
//        driver->uart->ICR = USART_ICR_ORECF;
//        UART_Driver_Polling_SendString(USART1, "Overrun Error detected!\r\n");
//    }

    if (pos != old_pos) {
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	429a      	cmp	r2, r3
 8002870:	d065      	beq.n	800293e <UART_DMA_Rx_Check+0x116>
        if (pos > old_pos) {
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	429a      	cmp	r2, r3
 8002878:	d914      	bls.n	80028a4 <UART_DMA_Rx_Check+0x7c>
            for (size_t i = old_pos; i < pos; i++) {
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
 800287e:	e00c      	b.n	800289a <UART_DMA_Rx_Check+0x72>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	1d18      	adds	r0, r3, #4
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	4413      	add	r3, r2
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	f007 febc 	bl	800a60c <RingBuffer_Put>
            for (size_t i = old_pos; i < pos; i++) {
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	3301      	adds	r3, #1
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
 800289a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d3ee      	bcc.n	8002880 <UART_DMA_Rx_Check+0x58>
 80028a2:	e02a      	b.n	80028fa <UART_DMA_Rx_Check+0xd2>
            }
        } else {
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	623b      	str	r3, [r7, #32]
 80028a8:	e00c      	b.n	80028c4 <UART_DMA_Rx_Check+0x9c>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1d18      	adds	r0, r3, #4
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	4413      	add	r3, r2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	f007 fea7 	bl	800a60c <RingBuffer_Put>
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	3301      	adds	r3, #1
 80028c2:	623b      	str	r3, [r7, #32]
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80028ca:	461a      	mov	r2, r3
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d3eb      	bcc.n	80028aa <UART_DMA_Rx_Check+0x82>
            }
            for (size_t i = 0; i < pos; i++) {
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	e00c      	b.n	80028f2 <UART_DMA_Rx_Check+0xca>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	1d18      	adds	r0, r3, #4
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
 80028e8:	f007 fe90 	bl	800a60c <RingBuffer_Put>
            for (size_t i = 0; i < pos; i++) {
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	3301      	adds	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d3ee      	bcc.n	80028d8 <UART_DMA_Rx_Check+0xb0>
            }
        }
        xSemaphoreGiveFromISR(driver->rxSemaphore, &xHigherPriorityTaskWoken);
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028fe:	f107 0208 	add.w	r2, r7, #8
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f00e f9cb 	bl	8010ca0 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <UART_DMA_Rx_Check+0xf8>
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <UART_DMA_Rx_Check+0x11c>)
 8002912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	f3bf 8f6f 	isb	sy

        driver->old_dma_pos = pos;
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	679a      	str	r2, [r3, #120]	@ 0x78
        if (driver->old_dma_pos == driver->dma_rx_buffer_size) {
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	f8b2 2074 	ldrh.w	r2, [r2, #116]	@ 0x74
 8002930:	4293      	cmp	r3, r2
 8002932:	d104      	bne.n	800293e <UART_DMA_Rx_Check+0x116>
            driver->old_dma_pos = 0;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2200      	movs	r2, #0
 8002938:	679a      	str	r2, [r3, #120]	@ 0x78
 800293a:	e000      	b.n	800293e <UART_DMA_Rx_Check+0x116>
        return;
 800293c:	bf00      	nop
        }
    }
}
 800293e:	3728      	adds	r7, #40	@ 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	e000ed04 	.word	0xe000ed04

08002948 <UART_DMA_Driver_Read>:



int UART_DMA_Driver_Read(USART_TypeDef *uart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fcdf 	bl	8002314 <UART_DMA_Driver_Get>
 8002956:	60f8      	str	r0, [r7, #12]
    if(driver == NULL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <UART_DMA_Driver_Read+0x1c>
        return -1;
 800295e:	f04f 33ff 	mov.w	r3, #4294967295
 8002962:	e00e      	b.n	8002982 <UART_DMA_Driver_Read+0x3a>

    RingBufElement data;
    if(RingBuffer_Get(&driver->rx_buffer, &data)){
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3304      	adds	r3, #4
 8002968:	f107 020b 	add.w	r2, r7, #11
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f007 fe92 	bl	800a698 <RingBuffer_Get>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <UART_DMA_Driver_Read+0x36>
        return data;
 800297a:	7afb      	ldrb	r3, [r7, #11]
 800297c:	e001      	b.n	8002982 <UART_DMA_Driver_Read+0x3a>
    }
    return -1;
 800297e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <UART_DMA_Driver_IsDataAvailable>:

_Bool UART_DMA_Driver_IsDataAvailable(USART_TypeDef *uart)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff fcbe 	bl	8002314 <UART_DMA_Driver_Get>
 8002998:	60f8      	str	r0, [r7, #12]
    if(driver == NULL)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <UART_DMA_Driver_IsDataAvailable+0x1a>
        return false;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e005      	b.n	80029b0 <UART_DMA_Driver_IsDataAvailable+0x26>

    return RingBuffer_IsDataAvailable(&driver->rx_buffer);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4618      	mov	r0, r3
 80029aa:	f007 fef2 	bl	800a792 <RingBuffer_IsDataAvailable>
 80029ae:	4603      	mov	r3, r0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_DMA_Driver_TXNumFreeSlots>:

uint16_t UART_DMA_Driver_TXNumFreeSlots(USART_TypeDef *uart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fca7 	bl	8002314 <UART_DMA_Driver_Get>
 80029c6:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <UART_DMA_Driver_TXNumFreeSlots+0x1a>
        return 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e006      	b.n	80029e0 <UART_DMA_Driver_TXNumFreeSlots+0x28>

    return (uint16_t)RingBuffer_NumFreeSlots(&driver->tx_buffer);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3334      	adds	r3, #52	@ 0x34
 80029d6:	4618      	mov	r0, r3
 80029d8:	f007 fe9f 	bl	800a71a <RingBuffer_NumFreeSlots>
 80029dc:	4603      	mov	r3, r0
 80029de:	bf00      	nop
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <UART_Driver_Polling_Write>:

/************************************************************************************************
 *                    						EXPAND FUNCTION                    					*
 ***********************************************************************************************/
void UART_Driver_Polling_Write(USART_TypeDef *uart, uint8_t data)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	70fb      	strb	r3, [r7, #3]
    while (!LL_USART_IsActiveFlag_TXE(uart))
 80029f4:	bf00      	nop
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fa9c 	bl	8001f34 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f9      	beq.n	80029f6 <UART_Driver_Polling_Write+0xe>
    {
    }
    LL_USART_TransmitData8(uart, data);
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	4619      	mov	r1, r3
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fb56 	bl	80020b8 <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TC(uart))
 8002a0c:	bf00      	nop
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fa7d 	bl	8001f0e <LL_USART_IsActiveFlag_TC>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f9      	beq.n	8002a0e <UART_Driver_Polling_Write+0x26>
    {
    }
}
 8002a1a:	bf00      	nop
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <UART_Driver_Polling_SendString>:

void UART_Driver_Polling_SendString(USART_TypeDef *uart, const char *str)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
    if (str == NULL)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00e      	beq.n	8002a52 <UART_Driver_Polling_SendString+0x2e>
        return;
    while (*str)
 8002a34:	e008      	b.n	8002a48 <UART_Driver_Polling_SendString+0x24>
    {
    	UART_Driver_Polling_Write(uart, (uint8_t)(*str));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ffd3 	bl	80029e8 <UART_Driver_Polling_Write>
        str++;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	603b      	str	r3, [r7, #0]
    while (*str)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f2      	bne.n	8002a36 <UART_Driver_Polling_SendString+0x12>
 8002a50:	e000      	b.n	8002a54 <UART_Driver_Polling_SendString+0x30>
        return;
 8002a52:	bf00      	nop
    }
}
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <fnv1a32>:
static int FRAM_PASSWORD_FAIL = 0;

#define FRAM_USER_PWD_LEN_ADDR  0x0000
#define FRAM_USER_PWD_ADDR      0x0001

static uint32_t fnv1a32(const char *s) {
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
    uint32_t h = 0x811C9DC5u;
 8002a64:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <fnv1a32+0x40>)
 8002a66:	60fb      	str	r3, [r7, #12]
    while (*s) {
 8002a68:	e00c      	b.n	8002a84 <fnv1a32+0x28>
        h ^= (uint8_t)(*s++);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4053      	eors	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
        h *= 0x01000193u;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a08      	ldr	r2, [pc, #32]	@ (8002aa0 <fnv1a32+0x44>)
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	60fb      	str	r3, [r7, #12]
    while (*s) {
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ee      	bne.n	8002a6a <fnv1a32+0xe>
    }
    return h;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	811c9dc5 	.word	0x811c9dc5
 8002aa0:	01000193 	.word	0x01000193

08002aa4 <hash_equal>:
static int hash_equal(uint32_t a, uint32_t b) {
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
    uint32_t diff = a ^ b;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4053      	eors	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
    diff |= diff >> 16;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
    diff |= diff >> 8;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
    return (diff & 0xFFu) == 0;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf0c      	ite	eq
 8002ad2:	2301      	moveq	r3, #1
 8002ad4:	2300      	movne	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <verify_password>:

int verify_password(const char *input_password) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    uint32_t input_hash = fnv1a32(input_password);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ffb5 	bl	8002a5c <fnv1a32>
 8002af2:	60f8      	str	r0, [r7, #12]
    uint32_t stored_hash = itwasmeulrich;
 8002af4:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <verify_password+0x28>)
 8002af6:	60bb      	str	r3, [r7, #8]
    return hash_equal(input_hash, stored_hash);
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff ffd2 	bl	8002aa4 <hash_equal>
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	c5477ba3 	.word	0xc5477ba3

08002b10 <load_user_password>:

static void load_user_password(ShieldInstance_t *instance) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 8002b18:	f006 f822 	bl	8008b60 <FRAM_SPI_GetHandle>
 8002b1c:	60f8      	str	r0, [r7, #12]
    uint8_t pwd_len = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	72fb      	strb	r3, [r7, #11]

    if (FRAM_SPI_ReadMem(hfram, FRAM_USER_PWD_LEN_ADDR, &pwd_len, 1) != E_OK || pwd_len > MAX_PASSWORD_LEN) {
 8002b22:	f107 020b 	add.w	r2, r7, #11
 8002b26:	2301      	movs	r3, #1
 8002b28:	2100      	movs	r1, #0
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f006 f90f 	bl	8008d4e <FRAM_SPI_ReadMem>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d102      	bne.n	8002b3c <load_user_password+0x2c>
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d907      	bls.n	8002b4c <load_user_password+0x3c>
        Shield_WriteString(instance, "Could not load user-pwd, please use admin-pwd instead!\r\n");
 8002b3c:	4915      	ldr	r1, [pc, #84]	@ (8002b94 <load_user_password+0x84>)
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f920 	bl	8002d84 <Shield_WriteString>
    	FRAM_PASSWORD_FAIL = 1;
 8002b44:	4b14      	ldr	r3, [pc, #80]	@ (8002b98 <load_user_password+0x88>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e020      	b.n	8002b8e <load_user_password+0x7e>
        return;
    }

    if (pwd_len > 0) {
 8002b4c:	7afb      	ldrb	r3, [r7, #11]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d016      	beq.n	8002b80 <load_user_password+0x70>
        if (FRAM_SPI_ReadMem(hfram, FRAM_USER_PWD_ADDR, (uint8_t *)user_password, pwd_len) == E_OK) {
 8002b52:	7afb      	ldrb	r3, [r7, #11]
 8002b54:	4a11      	ldr	r2, [pc, #68]	@ (8002b9c <load_user_password+0x8c>)
 8002b56:	2101      	movs	r1, #1
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f006 f8f8 	bl	8008d4e <FRAM_SPI_ReadMem>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <load_user_password+0x60>
            user_password[pwd_len] = '\0';
 8002b64:	7afb      	ldrb	r3, [r7, #11]
 8002b66:	461a      	mov	r2, r3
 8002b68:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <load_user_password+0x8c>)
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]
 8002b6e:	e00e      	b.n	8002b8e <load_user_password+0x7e>
        } else {
            Shield_WriteString(instance, "Could not load user-pwd, please use admin-pwd instead!\r\n");
 8002b70:	4908      	ldr	r1, [pc, #32]	@ (8002b94 <load_user_password+0x84>)
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f906 	bl	8002d84 <Shield_WriteString>
        	FRAM_PASSWORD_FAIL = 1;
 8002b78:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <load_user_password+0x88>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e006      	b.n	8002b8e <load_user_password+0x7e>
        }
    } else {
        Shield_WriteString(instance, "Could not load user-pwd, please use admin-pwd instead!\r\n");
 8002b80:	4904      	ldr	r1, [pc, #16]	@ (8002b94 <load_user_password+0x84>)
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f8fe 	bl	8002d84 <Shield_WriteString>
    	FRAM_PASSWORD_FAIL = 1;
 8002b88:	4b03      	ldr	r3, [pc, #12]	@ (8002b98 <load_user_password+0x88>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
    }
}
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	08023610 	.word	0x08023610
 8002b98:	24018340 	.word	0x24018340
 8002b9c:	2401832c 	.word	0x2401832c

08002ba0 <verify_user_password>:

static int verify_user_password(const char *input_password){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	if(FRAM_PASSWORD_FAIL == 1){
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8002be4 <verify_user_password+0x44>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d10b      	bne.n	8002bc8 <verify_user_password+0x28>
	    uint32_t input_hash = fnv1a32(input_password);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ff53 	bl	8002a5c <fnv1a32>
 8002bb6:	60f8      	str	r0, [r7, #12]
	    uint32_t stored_hash = itwasmeulrich;
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <verify_user_password+0x48>)
 8002bba:	60bb      	str	r3, [r7, #8]
	    return hash_equal(input_hash, stored_hash);
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff ff70 	bl	8002aa4 <hash_equal>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	e009      	b.n	8002bdc <verify_user_password+0x3c>
	}else{
		if(strcmp(input_password, user_password) == 0){
 8002bc8:	4908      	ldr	r1, [pc, #32]	@ (8002bec <verify_user_password+0x4c>)
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fd fb88 	bl	80002e0 <strcmp>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <verify_user_password+0x3a>
			return 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <verify_user_password+0x3c>
		}else{
			return 0;
 8002bda:	2300      	movs	r3, #0
		}
	}
	return 0;
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	24018340 	.word	0x24018340
 8002be8:	c5477ba3 	.word	0xc5477ba3
 8002bec:	2401832c 	.word	0x2401832c

08002bf0 <Shield_UpdateTimer>:

void Shield_UpdateTimer(ShieldInstance_t *instance){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	if(instance->state == AUTH_USER){
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d110      	bne.n	8002c24 <Shield_UpdateTimer+0x34>
		instance->last_activity_time++;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	655a      	str	r2, [r3, #84]	@ 0x54
		if(instance->last_activity_time >= USER_TIMEOUT){
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c10:	4a06      	ldr	r2, [pc, #24]	@ (8002c2c <Shield_UpdateTimer+0x3c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d306      	bcc.n	8002c24 <Shield_UpdateTimer+0x34>
			Shield_Reset(instance);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f868 	bl	8002cec <Shield_Reset>
		    Shield_WriteString(instance, "\r\nSession timed out due to inactivity.\r\n");
 8002c1c:	4904      	ldr	r1, [pc, #16]	@ (8002c30 <Shield_UpdateTimer+0x40>)
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f8b0 	bl	8002d84 <Shield_WriteString>
		}
	}
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	000493e0 	.word	0x000493e0
 8002c30:	0802364c 	.word	0x0802364c

08002c34 <Shield_ResetTimer>:
void Shield_ResetTimer(ShieldInstance_t *instance){
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	if(instance->state == AUTH_USER){
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d102      	bne.n	8002c4c <Shield_ResetTimer+0x18>
		instance->last_activity_time = 0;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <Shield_Init>:

void Shield_Init(ShieldInstance_t *instance, void (*write_char_func)(char c)) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
    instance->write_char = write_char_func;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	659a      	str	r2, [r3, #88]	@ 0x58
    instance->initreset = 0;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	621a      	str	r2, [r3, #32]
    instance->pos = 0;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	625a      	str	r2, [r3, #36]	@ 0x24
    instance->state = UNAUTHORIZED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    instance->login_attempts = 0;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	62da      	str	r2, [r3, #44]	@ 0x2c
    instance->password_pos = 0;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	651a      	str	r2, [r3, #80]	@ 0x50
    instance->last_activity_time = 0; // User should set this with actual time if needed
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    memset(instance->buffer, 0, SHIELD_BUFFER_SIZE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f01f f9fa 	bl	802208e <memset>
    memset(instance->password_buffer, 0, SHIELD_BUFFER_SIZE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3330      	adds	r3, #48	@ 0x30
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f01f f9f3 	bl	802208e <memset>
    Shield_WriteString(instance, "\33[2J");         // Clear screen
 8002ca8:	490b      	ldr	r1, [pc, #44]	@ (8002cd8 <Shield_Init+0x80>)
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f86a 	bl	8002d84 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;0H");     // Move to 0:0
 8002cb0:	490a      	ldr	r1, [pc, #40]	@ (8002cdc <Shield_Init+0x84>)
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f866 	bl	8002d84 <Shield_WriteString>
    Shield_WriteString(instance, "OBC: [CM4 -> OBC]");
 8002cb8:	4909      	ldr	r1, [pc, #36]	@ (8002ce0 <Shield_Init+0x88>)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f862 	bl	8002d84 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;1H");
 8002cc0:	4908      	ldr	r1, [pc, #32]	@ (8002ce4 <Shield_Init+0x8c>)
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f85e 	bl	8002d84 <Shield_WriteString>
    Shield_WriteString(instance, SHIELD_NEWLINE);
 8002cc8:	4907      	ldr	r1, [pc, #28]	@ (8002ce8 <Shield_Init+0x90>)
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f85a 	bl	8002d84 <Shield_WriteString>
//    Shield_WriteString(instance, SHIELD_INITATION);
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	08023678 	.word	0x08023678
 8002cdc:	08023680 	.word	0x08023680
 8002ce0:	08023688 	.word	0x08023688
 8002ce4:	0802369c 	.word	0x0802369c
 8002ce8:	080236a4 	.word	0x080236a4

08002cec <Shield_Reset>:

void Shield_Reset(ShieldInstance_t *instance) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
    instance->initreset = 1;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	621a      	str	r2, [r3, #32]
    instance->pos = 0;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	625a      	str	r2, [r3, #36]	@ 0x24
    instance->state = UNAUTHORIZED;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    instance->login_attempts = 0;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    instance->password_pos = 0;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	651a      	str	r2, [r3, #80]	@ 0x50
    instance->last_activity_time = 0;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54
    memset(instance->buffer, 0, SHIELD_BUFFER_SIZE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f01f f9b4 	bl	802208e <memset>
    memset(instance->password_buffer, 0, SHIELD_BUFFER_SIZE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3330      	adds	r3, #48	@ 0x30
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f01f f9ad 	bl	802208e <memset>
    Shield_WriteString(instance, "\33[2J");         // Clear screen
 8002d34:	490d      	ldr	r1, [pc, #52]	@ (8002d6c <Shield_Reset+0x80>)
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f824 	bl	8002d84 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;0H");     // Move to 0:0
 8002d3c:	490c      	ldr	r1, [pc, #48]	@ (8002d70 <Shield_Reset+0x84>)
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f820 	bl	8002d84 <Shield_WriteString>
    Shield_WriteString(instance, "OBC: [CM4 -> OBC]");
 8002d44:	490b      	ldr	r1, [pc, #44]	@ (8002d74 <Shield_Reset+0x88>)
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f81c 	bl	8002d84 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;1H");
 8002d4c:	490a      	ldr	r1, [pc, #40]	@ (8002d78 <Shield_Reset+0x8c>)
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f818 	bl	8002d84 <Shield_WriteString>
    Shield_WriteString(instance, SHIELD_NEWLINE);
 8002d54:	4909      	ldr	r1, [pc, #36]	@ (8002d7c <Shield_Reset+0x90>)
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f814 	bl	8002d84 <Shield_WriteString>
    Shield_WriteString(instance, SHIELD_INITATION);
 8002d5c:	4908      	ldr	r1, [pc, #32]	@ (8002d80 <Shield_Reset+0x94>)
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f810 	bl	8002d84 <Shield_WriteString>
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	08023678 	.word	0x08023678
 8002d70:	08023680 	.word	0x08023680
 8002d74:	08023688 	.word	0x08023688
 8002d78:	0802369c 	.word	0x0802369c
 8002d7c:	080236a4 	.word	0x080236a4
 8002d80:	080236a8 	.word	0x080236a8

08002d84 <Shield_WriteString>:

void Shield_WriteString(ShieldInstance_t *instance, const char *str) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
    while (*str) {
 8002d8e:	e007      	b.n	8002da0 <Shield_WriteString+0x1c>
        instance->write_char(*str++);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	1c59      	adds	r1, r3, #1
 8002d98:	6039      	str	r1, [r7, #0]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	4790      	blx	r2
    while (*str) {
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f3      	bne.n	8002d90 <Shield_WriteString+0xc>
    }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <Shield_Process>:

static void Shield_Process(ShieldInstance_t *instance) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
    if (instance->state == UNAUTHORIZED) {
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d137      	bne.n	8002e36 <Shield_Process+0x82>
        if (strcmp(instance->buffer, "admin") == 0) {
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4924      	ldr	r1, [pc, #144]	@ (8002e5c <Shield_Process+0xa8>)
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fa88 	bl	80002e0 <strcmp>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <Shield_Process+0x3a>
            instance->state = LOGIN_ADMIN;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            instance->login_attempts = 0;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c
            Shield_WriteString(instance, "Password: ");
 8002de4:	491e      	ldr	r1, [pc, #120]	@ (8002e60 <Shield_Process+0xac>)
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffcc 	bl	8002d84 <Shield_WriteString>
            Shield_WriteString(instance, "Login as [admin/user]: ");
        }
    } else if (instance->state == AUTH_ADMIN || instance->state == AUTH_USER) {
        Shield_WriteString(instance, "HelloWorld\r\n");
    }
}
 8002dec:	e031      	b.n	8002e52 <Shield_Process+0x9e>
        } else if (strcmp(instance->buffer, "user") == 0) {
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	491c      	ldr	r1, [pc, #112]	@ (8002e64 <Shield_Process+0xb0>)
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fa74 	bl	80002e0 <strcmp>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10e      	bne.n	8002e1c <Shield_Process+0x68>
        	load_user_password(instance);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff fe86 	bl	8002b10 <load_user_password>
            instance->state = LOGIN_USER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            instance->login_attempts = 0;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	62da      	str	r2, [r3, #44]	@ 0x2c
            Shield_WriteString(instance, "Password: ");
 8002e12:	4913      	ldr	r1, [pc, #76]	@ (8002e60 <Shield_Process+0xac>)
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffb5 	bl	8002d84 <Shield_WriteString>
}
 8002e1a:	e01a      	b.n	8002e52 <Shield_Process+0x9e>
            Shield_WriteString(instance, "Unsupported this user name. [admin/user]\r\n");
 8002e1c:	4912      	ldr	r1, [pc, #72]	@ (8002e68 <Shield_Process+0xb4>)
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ffb0 	bl	8002d84 <Shield_WriteString>
            Shield_WriteString(instance, SHIELD_NEWLINE);
 8002e24:	4911      	ldr	r1, [pc, #68]	@ (8002e6c <Shield_Process+0xb8>)
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ffac 	bl	8002d84 <Shield_WriteString>
            Shield_WriteString(instance, "Login as [admin/user]: ");
 8002e2c:	4910      	ldr	r1, [pc, #64]	@ (8002e70 <Shield_Process+0xbc>)
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ffa8 	bl	8002d84 <Shield_WriteString>
}
 8002e34:	e00d      	b.n	8002e52 <Shield_Process+0x9e>
    } else if (instance->state == AUTH_ADMIN || instance->state == AUTH_USER) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d004      	beq.n	8002e4a <Shield_Process+0x96>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d103      	bne.n	8002e52 <Shield_Process+0x9e>
        Shield_WriteString(instance, "HelloWorld\r\n");
 8002e4a:	490a      	ldr	r1, [pc, #40]	@ (8002e74 <Shield_Process+0xc0>)
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ff99 	bl	8002d84 <Shield_WriteString>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	080236c0 	.word	0x080236c0
 8002e60:	080236c8 	.word	0x080236c8
 8002e64:	080236d4 	.word	0x080236d4
 8002e68:	080236dc 	.word	0x080236dc
 8002e6c:	080236a4 	.word	0x080236a4
 8002e70:	080236a8 	.word	0x080236a8
 8002e74:	08023708 	.word	0x08023708

08002e78 <Shield_ReceiveChar>:

void Shield_ReceiveChar(ShieldInstance_t *instance, char ch) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
#ifdef DEBUG_SHIELD
    char hex[6];
    snprintf(hex, sizeof(hex), "0x%02X ", ch);
    Shield_WriteString(instance, hex);
#endif
    if (instance->state == LOGIN_ADMIN || instance->state == LOGIN_USER) {
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d005      	beq.n	8002e9a <Shield_ReceiveChar+0x22>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	f040 80ed 	bne.w	8003074 <Shield_ReceiveChar+0x1fc>
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 8002e9a:	220a      	movs	r2, #10
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <Shield_ReceiveChar+0x34>
 8002ea2:	220d      	movs	r2, #13
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	f040 80b6 	bne.w	8003018 <Shield_ReceiveChar+0x1a0>
            instance->password_buffer[instance->password_pos] = '\0';
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            if (instance->state == LOGIN_ADMIN && verify_password(instance->password_buffer) == 1) {
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d138      	bne.n	8002f36 <Shield_ReceiveChar+0xbe>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3330      	adds	r3, #48	@ 0x30
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fe0b 	bl	8002ae4 <verify_password>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d130      	bne.n	8002f36 <Shield_ReceiveChar+0xbe>
                instance->state = AUTH_ADMIN;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002edc:	499a      	ldr	r1, [pc, #616]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ff50 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\r\n");
 8002ee4:	4999      	ldr	r1, [pc, #612]	@ (800314c <Shield_ReceiveChar+0x2d4>)
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff ff4c 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "Logged in as admin: SLT-OBC v1.2.0");
 8002eec:	4998      	ldr	r1, [pc, #608]	@ (8003150 <Shield_ReceiveChar+0x2d8>)
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ff48 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002ef4:	4994      	ldr	r1, [pc, #592]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ff44 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 8002efc:	4995      	ldr	r1, [pc, #596]	@ (8003154 <Shield_ReceiveChar+0x2dc>)
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ff40 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "   ______ _______ ____  ___  _____\r\n");
 8002f04:	4994      	ldr	r1, [pc, #592]	@ (8003158 <Shield_ReceiveChar+0x2e0>)
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff3c 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "  / __/ //_  __(_) __ \\/ _ )/ ___/\r\n");
 8002f0c:	4993      	ldr	r1, [pc, #588]	@ (800315c <Shield_ReceiveChar+0x2e4>)
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff ff38 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, " _\\ \\/ /__/ / _ / /_/ / _  / /__  \r\n");
 8002f14:	4992      	ldr	r1, [pc, #584]	@ (8003160 <Shield_ReceiveChar+0x2e8>)
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ff34 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "/___/____/_/ (_)\\____/____/\\___/  \r\n");
 8002f1c:	4991      	ldr	r1, [pc, #580]	@ (8003164 <Shield_ReceiveChar+0x2ec>)
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ff30 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 8002f24:	498b      	ldr	r1, [pc, #556]	@ (8003154 <Shield_ReceiveChar+0x2dc>)
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff ff2c 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002f2c:	4986      	ldr	r1, [pc, #536]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ff28 	bl	8002d84 <Shield_WriteString>
 8002f34:	e06c      	b.n	8003010 <Shield_ReceiveChar+0x198>
            } else if (instance->state == LOGIN_USER && verify_user_password(instance->password_buffer) == 1) {
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d138      	bne.n	8002fb2 <Shield_ReceiveChar+0x13a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3330      	adds	r3, #48	@ 0x30
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fe2b 	bl	8002ba0 <verify_user_password>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d130      	bne.n	8002fb2 <Shield_ReceiveChar+0x13a>
                instance->state = AUTH_USER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2204      	movs	r2, #4
 8002f54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002f58:	497b      	ldr	r1, [pc, #492]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ff12 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\r\n");
 8002f60:	497a      	ldr	r1, [pc, #488]	@ (800314c <Shield_ReceiveChar+0x2d4>)
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ff0e 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "Logged in as user: SLT-OBC v1.2.0");
 8002f68:	497f      	ldr	r1, [pc, #508]	@ (8003168 <Shield_ReceiveChar+0x2f0>)
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ff0a 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002f70:	4975      	ldr	r1, [pc, #468]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff06 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 8002f78:	4976      	ldr	r1, [pc, #472]	@ (8003154 <Shield_ReceiveChar+0x2dc>)
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ff02 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "   ______ _______ ____  ___  _____\r\n");
 8002f80:	4975      	ldr	r1, [pc, #468]	@ (8003158 <Shield_ReceiveChar+0x2e0>)
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff fefe 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "  / __/ //_  __(_) __ \\/ _ )/ ___/\r\n");
 8002f88:	4974      	ldr	r1, [pc, #464]	@ (800315c <Shield_ReceiveChar+0x2e4>)
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fefa 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, " _\\ \\/ /__/ / _ / /_/ / _  / /__  \r\n");
 8002f90:	4973      	ldr	r1, [pc, #460]	@ (8003160 <Shield_ReceiveChar+0x2e8>)
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff fef6 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "/___/____/_/ (_)\\____/____/\\___/  \r\n");
 8002f98:	4972      	ldr	r1, [pc, #456]	@ (8003164 <Shield_ReceiveChar+0x2ec>)
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fef2 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 8002fa0:	496c      	ldr	r1, [pc, #432]	@ (8003154 <Shield_ReceiveChar+0x2dc>)
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff feee 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002fa8:	4967      	ldr	r1, [pc, #412]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff feea 	bl	8002d84 <Shield_WriteString>
 8002fb0:	e02e      	b.n	8003010 <Shield_ReceiveChar+0x198>
            } else {
                instance->login_attempts++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	62da      	str	r2, [r3, #44]	@ 0x2c
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002fbc:	4962      	ldr	r1, [pc, #392]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff fee0 	bl	8002d84 <Shield_WriteString>
                if (instance->login_attempts >= MAX_LOGIN_ATTEMPTS) {
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	2203      	movs	r2, #3
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	db14      	blt.n	8002ff8 <Shield_ReceiveChar+0x180>
                    instance->state = UNAUTHORIZED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                    Shield_WriteString(instance, "Too many failed attempts. Please try again.");
 8002fd6:	4965      	ldr	r1, [pc, #404]	@ (800316c <Shield_ReceiveChar+0x2f4>)
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff fed3 	bl	8002d84 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_NEWLINE);
 8002fde:	495a      	ldr	r1, [pc, #360]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fecf 	bl	8002d84 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_NEWLINE);
 8002fe6:	4958      	ldr	r1, [pc, #352]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7ff fecb 	bl	8002d84 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_INITATION);
 8002fee:	4960      	ldr	r1, [pc, #384]	@ (8003170 <Shield_ReceiveChar+0x2f8>)
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fec7 	bl	8002d84 <Shield_WriteString>
 8002ff6:	e00b      	b.n	8003010 <Shield_ReceiveChar+0x198>
                } else {
                    Shield_WriteString(instance, "Incorrect password. Please try again.");
 8002ff8:	495e      	ldr	r1, [pc, #376]	@ (8003174 <Shield_ReceiveChar+0x2fc>)
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff fec2 	bl	8002d84 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_NEWLINE);
 8003000:	4951      	ldr	r1, [pc, #324]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff febe 	bl	8002d84 <Shield_WriteString>
                    Shield_WriteString(instance, "Password: ");
 8003008:	495b      	ldr	r1, [pc, #364]	@ (8003178 <Shield_ReceiveChar+0x300>)
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff feba 	bl	8002d84 <Shield_WriteString>
                }
            }
            instance->password_pos = 0;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	651a      	str	r2, [r3, #80]	@ 0x50
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 8003016:	e092      	b.n	800313e <Shield_ReceiveChar+0x2c6>
        } else if (ch == BACKSPACE) {
 8003018:	227f      	movs	r2, #127	@ 0x7f
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	4293      	cmp	r3, r2
 800301e:	d116      	bne.n	800304e <Shield_ReceiveChar+0x1d6>
            if (instance->password_pos > 0) {
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003024:	2b00      	cmp	r3, #0
 8003026:	f340 808a 	ble.w	800313e <Shield_ReceiveChar+0x2c6>
                instance->password_pos--;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302e:	1e5a      	subs	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	651a      	str	r2, [r3, #80]	@ 0x50
                instance->write_char('\b');
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	2008      	movs	r0, #8
 800303a:	4798      	blx	r3
                instance->write_char(' ');
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	2020      	movs	r0, #32
 8003042:	4798      	blx	r3
                instance->write_char('\b');
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	2008      	movs	r0, #8
 800304a:	4798      	blx	r3
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 800304c:	e077      	b.n	800313e <Shield_ReceiveChar+0x2c6>
            }
        } else if (instance->password_pos < SHIELD_BUFFER_SIZE - 1) {
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003052:	2b1e      	cmp	r3, #30
 8003054:	dc73      	bgt.n	800313e <Shield_ReceiveChar+0x2c6>
            instance->password_buffer[instance->password_pos++] = ch;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800305a:	1c59      	adds	r1, r3, #1
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6511      	str	r1, [r2, #80]	@ 0x50
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            instance->write_char('*'); // Mask password with *
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306e:	202a      	movs	r0, #42	@ 0x2a
 8003070:	4798      	blx	r3
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 8003072:	e064      	b.n	800313e <Shield_ReceiveChar+0x2c6>
        }
    } else if (instance->state == AUTH_ADMIN || instance->state == AUTH_USER) {
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800307a:	2b03      	cmp	r3, #3
 800307c:	d004      	beq.n	8003088 <Shield_ReceiveChar+0x210>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003084:	2b04      	cmp	r3, #4
 8003086:	d104      	bne.n	8003092 <Shield_ReceiveChar+0x21a>
        Shield_WriteString(instance, "Hello123\r\n"); // Placeholder for command processing
 8003088:	493c      	ldr	r1, [pc, #240]	@ (800317c <Shield_ReceiveChar+0x304>)
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff fe7a 	bl	8002d84 <Shield_WriteString>
 8003090:	e056      	b.n	8003140 <Shield_ReceiveChar+0x2c8>
    } else {
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 8003092:	220a      	movs	r2, #10
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	4293      	cmp	r3, r2
 8003098:	d003      	beq.n	80030a2 <Shield_ReceiveChar+0x22a>
 800309a:	220d      	movs	r2, #13
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	4293      	cmp	r3, r2
 80030a0:	d11c      	bne.n	80030dc <Shield_ReceiveChar+0x264>
            instance->buffer[instance->pos] = '\0';
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	2100      	movs	r1, #0
 80030aa:	54d1      	strb	r1, [r2, r3]
            if (instance->pos > 0) {
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	dd0a      	ble.n	80030ca <Shield_ReceiveChar+0x252>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 80030b4:	4924      	ldr	r1, [pc, #144]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fe64 	bl	8002d84 <Shield_WriteString>
                Shield_Process(instance);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff fe79 	bl	8002db4 <Shield_Process>
                instance->pos = 0;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24
            if (instance->pos > 0) {
 80030c8:	e03a      	b.n	8003140 <Shield_ReceiveChar+0x2c8>
            } else {
                Shield_WriteString(instance, SHIELD_NEWLINE);
 80030ca:	491f      	ldr	r1, [pc, #124]	@ (8003148 <Shield_ReceiveChar+0x2d0>)
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fe59 	bl	8002d84 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_INITATION);
 80030d2:	4927      	ldr	r1, [pc, #156]	@ (8003170 <Shield_ReceiveChar+0x2f8>)
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff fe55 	bl	8002d84 <Shield_WriteString>
            if (instance->pos > 0) {
 80030da:	e031      	b.n	8003140 <Shield_ReceiveChar+0x2c8>
            }
        } else if (ch == BACKSPACE) {
 80030dc:	227f      	movs	r2, #127	@ 0x7f
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d11a      	bne.n	800311a <Shield_ReceiveChar+0x2a2>
            if (instance->pos > 0) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	dd29      	ble.n	8003140 <Shield_ReceiveChar+0x2c8>
                instance->pos--;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	1e5a      	subs	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	625a      	str	r2, [r3, #36]	@ 0x24
                instance->buffer[instance->pos] = '\0';
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	2100      	movs	r1, #0
 80030fe:	54d1      	strb	r1, [r2, r3]
                instance->write_char('\b');
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003104:	2008      	movs	r0, #8
 8003106:	4798      	blx	r3
                instance->write_char(' ');
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310c:	2020      	movs	r0, #32
 800310e:	4798      	blx	r3
                instance->write_char('\b');
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003114:	2008      	movs	r0, #8
 8003116:	4798      	blx	r3
        } else if (instance->pos < SHIELD_BUFFER_SIZE - 1) {
            instance->buffer[instance->pos++] = ch;
            instance->write_char(ch);
        }
    }
}
 8003118:	e012      	b.n	8003140 <Shield_ReceiveChar+0x2c8>
        } else if (instance->pos < SHIELD_BUFFER_SIZE - 1) {
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	2b1e      	cmp	r3, #30
 8003120:	dc0e      	bgt.n	8003140 <Shield_ReceiveChar+0x2c8>
            instance->buffer[instance->pos++] = ch;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	1c59      	adds	r1, r3, #1
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6251      	str	r1, [r2, #36]	@ 0x24
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	78f9      	ldrb	r1, [r7, #3]
 8003130:	54d1      	strb	r1, [r2, r3]
            instance->write_char(ch);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4610      	mov	r0, r2
 800313a:	4798      	blx	r3
}
 800313c:	e000      	b.n	8003140 <Shield_ReceiveChar+0x2c8>
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 800313e:	bf00      	nop
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	080236a4 	.word	0x080236a4
 800314c:	08023718 	.word	0x08023718
 8003150:	08023784 	.word	0x08023784
 8003154:	080237a8 	.word	0x080237a8
 8003158:	080237d0 	.word	0x080237d0
 800315c:	080237f8 	.word	0x080237f8
 8003160:	08023820 	.word	0x08023820
 8003164:	08023848 	.word	0x08023848
 8003168:	08023870 	.word	0x08023870
 800316c:	08023894 	.word	0x08023894
 8003170:	080236a8 	.word	0x080236a8
 8003174:	080238c0 	.word	0x080238c0
 8003178:	080236c8 	.word	0x080236c8
 800317c:	080238e8 	.word	0x080238e8

08003180 <Shield_GetState>:

ShieldAuthState_t Shield_GetState(ShieldInstance_t *instance) {
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
    return instance->state;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80031a0:	f3bf 8f4f 	dsb	sy
}
 80031a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80031a6:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <__NVIC_SystemReset+0x24>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80031ae:	4904      	ldr	r1, [pc, #16]	@ (80031c0 <__NVIC_SystemReset+0x24>)
 80031b0:	4b04      	ldr	r3, [pc, #16]	@ (80031c4 <__NVIC_SystemReset+0x28>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80031b6:	f3bf 8f4f 	dsb	sy
}
 80031ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <__NVIC_SystemReset+0x20>
 80031c0:	e000ed00 	.word	0xe000ed00
 80031c4:	05fa0004 	.word	0x05fa0004

080031c8 <LL_GPIO_SetOutputPin>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	619a      	str	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_GPIO_ResetOutputPin>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	041a      	lsls	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	619a      	str	r2, [r3, #24]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <UpdateCRC16_XMODEM>:
extern uint32_t _ecustom_data;
#define RAM_D2_200KB_START ((uint8_t*)&_scustom_data)
#define RAM_D3_START ((uint8_t*)0x38000000)
#define RAM_D2_200KB_SIZE  (200 * 1024)  // 200KB

static uint16_t UpdateCRC16_XMODEM(uint16_t crc, uint8_t byte) {
 8003202:	b480      	push	{r7}
 8003204:	b085      	sub	sp, #20
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	460a      	mov	r2, r1
 800320c:	80fb      	strh	r3, [r7, #6]
 800320e:	4613      	mov	r3, r2
 8003210:	717b      	strb	r3, [r7, #5]
    const uint16_t polynomial = 0x1021; // CRC16 XMODEM
 8003212:	f241 0321 	movw	r3, #4129	@ 0x1021
 8003216:	81bb      	strh	r3, [r7, #12]
    crc ^= (uint16_t)byte << 8;
 8003218:	797b      	ldrb	r3, [r7, #5]
 800321a:	b21b      	sxth	r3, r3
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	b21a      	sxth	r2, r3
 8003220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003224:	4053      	eors	r3, r2
 8003226:	b21b      	sxth	r3, r3
 8003228:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
 800322e:	e013      	b.n	8003258 <UpdateCRC16_XMODEM+0x56>
        if (crc & 0x8000) {
 8003230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003234:	2b00      	cmp	r3, #0
 8003236:	da09      	bge.n	800324c <UpdateCRC16_XMODEM+0x4a>
            crc = (crc << 1) ^ polynomial;
 8003238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	b21a      	sxth	r2, r3
 8003240:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003244:	4053      	eors	r3, r2
 8003246:	b21b      	sxth	r3, r3
 8003248:	80fb      	strh	r3, [r7, #6]
 800324a:	e002      	b.n	8003252 <UpdateCRC16_XMODEM+0x50>
        } else {
            crc <<= 1;
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	3301      	adds	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b07      	cmp	r3, #7
 800325c:	d9e8      	bls.n	8003230 <UpdateCRC16_XMODEM+0x2e>
        }
    }
    return crc;
 800325e:	88fb      	ldrh	r3, [r7, #6]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <CMD_Test>:

static void CMD_Test(EmbeddedCli *cli, char *args, void *context) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 8003278:	2101      	movs	r1, #1
 800327a:	68b8      	ldr	r0, [r7, #8]
 800327c:	f002 fa38 	bl	80056f0 <embeddedCliGetToken>
 8003280:	6178      	str	r0, [r7, #20]
//    char buffer[100];

    if (arg1 == NULL) {
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <CMD_Test+0x26>
        embeddedCliPrint(cli, "Usage: test <arg>");
 8003288:	493f      	ldr	r1, [pc, #252]	@ (8003388 <CMD_Test+0x11c>)
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f002 f96e 	bl	800556c <embeddedCliPrint>
        return;
 8003290:	e076      	b.n	8003380 <CMD_Test+0x114>
    }

    int option = atoi(arg1);
 8003292:	6978      	ldr	r0, [r7, #20]
 8003294:	f01e fc36 	bl	8021b04 <atoi>
 8003298:	6138      	str	r0, [r7, #16]

    switch (option){
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b1e      	cmp	r3, #30
 800329e:	d86a      	bhi.n	8003376 <CMD_Test+0x10a>
 80032a0:	a201      	add	r2, pc, #4	@ (adr r2, 80032a8 <CMD_Test+0x3c>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	08003325 	.word	0x08003325
 80032ac:	0800332d 	.word	0x0800332d
 80032b0:	08003337 	.word	0x08003337
 80032b4:	08003377 	.word	0x08003377
 80032b8:	08003377 	.word	0x08003377
 80032bc:	08003377 	.word	0x08003377
 80032c0:	08003377 	.word	0x08003377
 80032c4:	08003377 	.word	0x08003377
 80032c8:	08003377 	.word	0x08003377
 80032cc:	08003377 	.word	0x08003377
 80032d0:	08003341 	.word	0x08003341
 80032d4:	08003349 	.word	0x08003349
 80032d8:	08003351 	.word	0x08003351
 80032dc:	08003359 	.word	0x08003359
 80032e0:	08003377 	.word	0x08003377
 80032e4:	08003377 	.word	0x08003377
 80032e8:	08003377 	.word	0x08003377
 80032ec:	08003377 	.word	0x08003377
 80032f0:	08003377 	.word	0x08003377
 80032f4:	08003377 	.word	0x08003377
 80032f8:	08003361 	.word	0x08003361
 80032fc:	0800336b 	.word	0x0800336b
 8003300:	08003377 	.word	0x08003377
 8003304:	08003377 	.word	0x08003377
 8003308:	08003377 	.word	0x08003377
 800330c:	08003377 	.word	0x08003377
 8003310:	08003377 	.word	0x08003377
 8003314:	08003377 	.word	0x08003377
 8003318:	08003377 	.word	0x08003377
 800331c:	08003377 	.word	0x08003377
 8003320:	08003371 	.word	0x08003371
		case 0:
			Min_Send_CONTROL_TEMP_CMD(30);
 8003324:	201e      	movs	r0, #30
 8003326:	f004 fc9d 	bl	8007c64 <Min_Send_CONTROL_TEMP_CMD>
			break;
 800332a:	e025      	b.n	8003378 <CMD_Test+0x10c>
		case 1:
			Min_Send_COLLECT_DATA(1024);
 800332c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003330:	f004 fcda 	bl	8007ce8 <Min_Send_COLLECT_DATA>
			break;
 8003334:	e020      	b.n	8003378 <CMD_Test+0x10c>
		case 2:
			Min_Send_PRE_DATA(512);
 8003336:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800333a:	f004 fd25 	bl	8007d88 <Min_Send_PRE_DATA>
			break;
 800333e:	e01b      	b.n	8003378 <CMD_Test+0x10c>
		case 10:
			Min_Send_PRE_CHUNK(0);
 8003340:	2000      	movs	r0, #0
 8003342:	f004 fd6b 	bl	8007e1c <Min_Send_PRE_CHUNK>
			break;
 8003346:	e017      	b.n	8003378 <CMD_Test+0x10c>
		case 11:
			Min_Send_PRE_CHUNK(1);
 8003348:	2001      	movs	r0, #1
 800334a:	f004 fd67 	bl	8007e1c <Min_Send_PRE_CHUNK>
			break;
 800334e:	e013      	b.n	8003378 <CMD_Test+0x10c>
		case 12:
			Min_Send_PRE_CHUNK(2);
 8003350:	2002      	movs	r0, #2
 8003352:	f004 fd63 	bl	8007e1c <Min_Send_PRE_CHUNK>
			break;
 8003356:	e00f      	b.n	8003378 <CMD_Test+0x10c>
		case 13:
			Min_Send_PRE_CHUNK(3);
 8003358:	2003      	movs	r0, #3
 800335a:	f004 fd5f 	bl	8007e1c <Min_Send_PRE_CHUNK>
			break;
 800335e:	e00b      	b.n	8003378 <CMD_Test+0x10c>
		case 20:
			Min_Send_SAMPLERATE_SET(0xABCD);
 8003360:	f64a 30cd 	movw	r0, #43981	@ 0xabcd
 8003364:	f004 fd9c 	bl	8007ea0 <Min_Send_SAMPLERATE_SET>
			break;
 8003368:	e006      	b.n	8003378 <CMD_Test+0x10c>
		case 21:
			Min_Send_SAMPLERATE_GET();
 800336a:	f004 fde9 	bl	8007f40 <Min_Send_SAMPLERATE_GET>
			break;
 800336e:	e003      	b.n	8003378 <CMD_Test+0x10c>
		case 30:
			Min_Send_COLLECT_PACKAGE();
 8003370:	f004 fe22 	bl	8007fb8 <Min_Send_COLLECT_PACKAGE>
			break;
 8003374:	e000      	b.n	8003378 <CMD_Test+0x10c>


		default:

			break;
 8003376:	bf00      	nop
    }

//    snprintf(buffer, sizeof(buffer), "");
//    embeddedCliPrint(cli, buffer);

    embeddedCliPrint(cli, "");
 8003378:	4904      	ldr	r1, [pc, #16]	@ (800338c <CMD_Test+0x120>)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f002 f8f6 	bl	800556c <embeddedCliPrint>
}
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	08023f78 	.word	0x08023f78
 800338c:	08023f8c 	.word	0x08023f8c

08003390 <CMD_RamFill>:

static void CMD_RamFill(EmbeddedCli *cli, char *args, void *context) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b0a8      	sub	sp, #160	@ 0xa0
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // option (1, 2, 3)
 800339c:	2101      	movs	r1, #1
 800339e:	68b8      	ldr	r0, [r7, #8]
 80033a0:	f002 f9a6 	bl	80056f0 <embeddedCliGetToken>
 80033a4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    const char *arg2 = embeddedCliGetToken(args, 2); // size (byte)
 80033a8:	2102      	movs	r1, #2
 80033aa:	68b8      	ldr	r0, [r7, #8]
 80033ac:	f002 f9a0 	bl	80056f0 <embeddedCliGetToken>
 80033b0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    char buffer[100];
    uint16_t crc = 0x0000;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (arg1 == NULL || arg2 == NULL) {
 80033ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <CMD_RamFill+0x3a>
 80033c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <CMD_RamFill+0x44>
        embeddedCliPrint(cli, "Usage: ram_fill <1|2|3> <size> (1: 0-255, 2: ASCII, 3: random, size: 1-200KB)");
 80033ca:	49a0      	ldr	r1, [pc, #640]	@ (800364c <CMD_RamFill+0x2bc>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f002 f8cd 	bl	800556c <embeddedCliPrint>
        return;
 80033d2:	e138      	b.n	8003646 <CMD_RamFill+0x2b6>
    }

    int option = atoi(arg1);
 80033d4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80033d8:	f01e fb94 	bl	8021b04 <atoi>
 80033dc:	67f8      	str	r0, [r7, #124]	@ 0x7c
    uint32_t size = (uint32_t)strtoul(arg2, NULL, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80033e6:	f01e fcc1 	bl	8021d6c <strtoul>
 80033ea:	67b8      	str	r0, [r7, #120]	@ 0x78

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 80033ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <CMD_RamFill+0x6a>
 80033f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033f4:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 80033f8:	d90e      	bls.n	8003418 <CMD_RamFill+0x88>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)RAM_D2_200KB_SIZE);
 80033fa:	f107 0010 	add.w	r0, r7, #16
 80033fe:	f44f 3348 	mov.w	r3, #204800	@ 0x32000
 8003402:	4a93      	ldr	r2, [pc, #588]	@ (8003650 <CMD_RamFill+0x2c0>)
 8003404:	2164      	movs	r1, #100	@ 0x64
 8003406:	f01e fd7d 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800340a:	f107 0310 	add.w	r3, r7, #16
 800340e:	4619      	mov	r1, r3
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f002 f8ab 	bl	800556c <embeddedCliPrint>
        return;
 8003416:	e116      	b.n	8003646 <CMD_RamFill+0x2b6>
    }

    if (toCM4_GetState() != TOCM4_IDLE) {
 8003418:	f7fd fb7c 	bl	8000b14 <toCM4_GetState>
 800341c:	4603      	mov	r3, r0
 800341e:	2b03      	cmp	r3, #3
 8003420:	d01b      	beq.n	800345a <CMD_RamFill+0xca>
        snprintf(buffer, sizeof(buffer), "Cannot fill RAM. Current state: %s",
                 toCM4_GetState() == TOCM4_BUSY ? "BUSY" :
 8003422:	f7fd fb77 	bl	8000b14 <toCM4_GetState>
 8003426:	4603      	mov	r3, r0
        snprintf(buffer, sizeof(buffer), "Cannot fill RAM. Current state: %s",
 8003428:	2b02      	cmp	r3, #2
 800342a:	d008      	beq.n	800343e <CMD_RamFill+0xae>
                 toCM4_GetState() == TOCM4_READYSEND ? "READYSEND" : "ERROR");
 800342c:	f7fd fb72 	bl	8000b14 <toCM4_GetState>
 8003430:	4603      	mov	r3, r0
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <CMD_RamFill+0xaa>
 8003436:	4b87      	ldr	r3, [pc, #540]	@ (8003654 <CMD_RamFill+0x2c4>)
 8003438:	e002      	b.n	8003440 <CMD_RamFill+0xb0>
 800343a:	4b87      	ldr	r3, [pc, #540]	@ (8003658 <CMD_RamFill+0x2c8>)
 800343c:	e000      	b.n	8003440 <CMD_RamFill+0xb0>
        snprintf(buffer, sizeof(buffer), "Cannot fill RAM. Current state: %s",
 800343e:	4b87      	ldr	r3, [pc, #540]	@ (800365c <CMD_RamFill+0x2cc>)
 8003440:	f107 0010 	add.w	r0, r7, #16
 8003444:	4a86      	ldr	r2, [pc, #536]	@ (8003660 <CMD_RamFill+0x2d0>)
 8003446:	2164      	movs	r1, #100	@ 0x64
 8003448:	f01e fd5c 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800344c:	f107 0310 	add.w	r3, r7, #16
 8003450:	4619      	mov	r1, r3
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f002 f88a 	bl	800556c <embeddedCliPrint>
        return;
 8003458:	e0f5      	b.n	8003646 <CMD_RamFill+0x2b6>
    }

    toCM4_SetState(TOCM4_BUSY);
 800345a:	2002      	movs	r0, #2
 800345c:	f7fd fb08 	bl	8000a70 <toCM4_SetState>

    switch (option) {
 8003460:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003462:	2b03      	cmp	r3, #3
 8003464:	d06d      	beq.n	8003542 <CMD_RamFill+0x1b2>
 8003466:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003468:	2b03      	cmp	r3, #3
 800346a:	f300 809c 	bgt.w	80035a6 <CMD_RamFill+0x216>
 800346e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d003      	beq.n	800347c <CMD_RamFill+0xec>
 8003474:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003476:	2b02      	cmp	r3, #2
 8003478:	d02c      	beq.n	80034d4 <CMD_RamFill+0x144>
 800347a:	e094      	b.n	80035a6 <CMD_RamFill+0x216>
        case 1:  // 0-255
            for (uint32_t i = 0; i < size; i++) {
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003482:	e01a      	b.n	80034ba <CMD_RamFill+0x12a>
                uint8_t value = (uint8_t)(i % 256);
 8003484:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003488:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
                RAM_D2_200KB_START[i] = value;
 800348c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003490:	4a74      	ldr	r2, [pc, #464]	@ (8003664 <CMD_RamFill+0x2d4>)
 8003492:	4413      	add	r3, r2
 8003494:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 8003498:	701a      	strb	r2, [r3, #0]
                crc = UpdateCRC16_XMODEM(crc, value);
 800349a:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 800349e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff feac 	bl	8003202 <UpdateCRC16_XMODEM>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            for (uint32_t i = 0; i < size; i++) {
 80034b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034b4:	3301      	adds	r3, #1
 80034b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80034be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d3df      	bcc.n	8003484 <CMD_RamFill+0xf4>
            }
            snprintf(buffer, sizeof(buffer), "Filled %lu bytes with pattern 0-255 repeating", (unsigned long)size);
 80034c4:	f107 0010 	add.w	r0, r7, #16
 80034c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034ca:	4a67      	ldr	r2, [pc, #412]	@ (8003668 <CMD_RamFill+0x2d8>)
 80034cc:	2164      	movs	r1, #100	@ 0x64
 80034ce:	f01e fd19 	bl	8021f04 <sniprintf>
            break;
 80034d2:	e070      	b.n	80035b6 <CMD_RamFill+0x226>

        case 2:  // ASCII 0x20-0x7F
            for (uint32_t i = 0; i < size; i++) {
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034da:	e025      	b.n	8003528 <CMD_RamFill+0x198>
                uint8_t value = (uint8_t)(0x20 + (i % (0x7F - 0x20 + 1)));
 80034dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80034e0:	4b62      	ldr	r3, [pc, #392]	@ (800366c <CMD_RamFill+0x2dc>)
 80034e2:	fba3 2301 	umull	r2, r3, r3, r1
 80034e6:	099a      	lsrs	r2, r3, #6
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	015b      	lsls	r3, r3, #5
 80034f0:	1aca      	subs	r2, r1, r3
 80034f2:	b2d3      	uxtb	r3, r2
 80034f4:	3320      	adds	r3, #32
 80034f6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
                RAM_D2_200KB_START[i] = value;
 80034fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034fe:	4a59      	ldr	r2, [pc, #356]	@ (8003664 <CMD_RamFill+0x2d4>)
 8003500:	4413      	add	r3, r2
 8003502:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8003506:	701a      	strb	r2, [r3, #0]
                crc = UpdateCRC16_XMODEM(crc, value);
 8003508:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 800350c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fe75 	bl	8003202 <UpdateCRC16_XMODEM>
 8003518:	4603      	mov	r3, r0
 800351a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            for (uint32_t i = 0; i < size; i++) {
 800351e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003522:	3301      	adds	r3, #1
 8003524:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003528:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800352c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800352e:	429a      	cmp	r2, r3
 8003530:	d3d4      	bcc.n	80034dc <CMD_RamFill+0x14c>
            }
            snprintf(buffer, sizeof(buffer), "Filled %lu bytes with ASCII pattern (0x20-0x7F)", (unsigned long)size);
 8003532:	f107 0010 	add.w	r0, r7, #16
 8003536:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003538:	4a4d      	ldr	r2, [pc, #308]	@ (8003670 <CMD_RamFill+0x2e0>)
 800353a:	2164      	movs	r1, #100	@ 0x64
 800353c:	f01e fce2 	bl	8021f04 <sniprintf>
            break;
 8003540:	e039      	b.n	80035b6 <CMD_RamFill+0x226>

        case 3:  // Random
            for (uint32_t i = 0; i < size; i++) {
 8003542:	2300      	movs	r3, #0
 8003544:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003548:	e020      	b.n	800358c <CMD_RamFill+0x1fc>
                uint8_t value = (uint8_t)(rand() % 256);
 800354a:	f01e fadf 	bl	8021b0c <rand>
 800354e:	4603      	mov	r3, r0
 8003550:	425a      	negs	r2, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	bf58      	it	pl
 8003558:	4253      	negpl	r3, r2
 800355a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                RAM_D2_200KB_START[i] = value;
 800355e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003562:	4a40      	ldr	r2, [pc, #256]	@ (8003664 <CMD_RamFill+0x2d4>)
 8003564:	4413      	add	r3, r2
 8003566:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800356a:	701a      	strb	r2, [r3, #0]
                crc = UpdateCRC16_XMODEM(crc, value);
 800356c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8003570:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fe43 	bl	8003202 <UpdateCRC16_XMODEM>
 800357c:	4603      	mov	r3, r0
 800357e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            for (uint32_t i = 0; i < size; i++) {
 8003582:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003586:	3301      	adds	r3, #1
 8003588:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800358c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003592:	429a      	cmp	r2, r3
 8003594:	d3d9      	bcc.n	800354a <CMD_RamFill+0x1ba>
            }
            snprintf(buffer, sizeof(buffer), "Filled %lu bytes with random bytes", (unsigned long)size);
 8003596:	f107 0010 	add.w	r0, r7, #16
 800359a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800359c:	4a35      	ldr	r2, [pc, #212]	@ (8003674 <CMD_RamFill+0x2e4>)
 800359e:	2164      	movs	r1, #100	@ 0x64
 80035a0:	f01e fcb0 	bl	8021f04 <sniprintf>
            break;
 80035a4:	e007      	b.n	80035b6 <CMD_RamFill+0x226>

        default:
            embeddedCliPrint(cli, "Invalid option. Use: ram_fill <1|2|3> <size>");
 80035a6:	4934      	ldr	r1, [pc, #208]	@ (8003678 <CMD_RamFill+0x2e8>)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f001 ffdf 	bl	800556c <embeddedCliPrint>
            toCM4_SetState(TOCM4_IDLE);
 80035ae:	2003      	movs	r0, #3
 80035b0:	f7fd fa5e 	bl	8000a70 <toCM4_SetState>
            return;
 80035b4:	e047      	b.n	8003646 <CMD_RamFill+0x2b6>
    }

    vTaskDelay(pdMS_TO_TICKS(1000));
 80035b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035ba:	f00e fbc9 	bl	8011d50 <vTaskDelay>

    toCM4_SetState(TOCM4_READYSEND);
 80035be:	2001      	movs	r0, #1
 80035c0:	f7fd fa56 	bl	8000a70 <toCM4_SetState>

    embeddedCliPrint(cli, buffer);
 80035c4:	f107 0310 	add.w	r3, r7, #16
 80035c8:	4619      	mov	r1, r3
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f001 ffce 	bl	800556c <embeddedCliPrint>
    snprintf(buffer, sizeof(buffer), "Start of RAM_D2 (0x%08lX): 0x%02X",
 80035d0:	4a24      	ldr	r2, [pc, #144]	@ (8003664 <CMD_RamFill+0x2d4>)
             (uint32_t)RAM_D2_200KB_START, RAM_D2_200KB_START[0]);
 80035d2:	4b24      	ldr	r3, [pc, #144]	@ (8003664 <CMD_RamFill+0x2d4>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Start of RAM_D2 (0x%08lX): 0x%02X",
 80035d6:	f107 0010 	add.w	r0, r7, #16
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	4613      	mov	r3, r2
 80035de:	4a27      	ldr	r2, [pc, #156]	@ (800367c <CMD_RamFill+0x2ec>)
 80035e0:	2164      	movs	r1, #100	@ 0x64
 80035e2:	f01e fc8f 	bl	8021f04 <sniprintf>
    embeddedCliPrint(cli, buffer);
 80035e6:	f107 0310 	add.w	r3, r7, #16
 80035ea:	4619      	mov	r1, r3
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f001 ffbd 	bl	800556c <embeddedCliPrint>
    snprintf(buffer, sizeof(buffer), "End of RAM_D2 (0x%08lX): 0x%02X",
             (uint32_t)(RAM_D2_200KB_START + size - 1),
 80035f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035f4:	3b01      	subs	r3, #1
 80035f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003664 <CMD_RamFill+0x2d4>)
 80035f8:	4413      	add	r3, r2
    snprintf(buffer, sizeof(buffer), "End of RAM_D2 (0x%08lX): 0x%02X",
 80035fa:	4619      	mov	r1, r3
             RAM_D2_200KB_START[size - 1]);
 80035fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035fe:	3b01      	subs	r3, #1
 8003600:	4a18      	ldr	r2, [pc, #96]	@ (8003664 <CMD_RamFill+0x2d4>)
 8003602:	4413      	add	r3, r2
 8003604:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer), "End of RAM_D2 (0x%08lX): 0x%02X",
 8003606:	f107 0010 	add.w	r0, r7, #16
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	460b      	mov	r3, r1
 800360e:	4a1c      	ldr	r2, [pc, #112]	@ (8003680 <CMD_RamFill+0x2f0>)
 8003610:	2164      	movs	r1, #100	@ 0x64
 8003612:	f01e fc77 	bl	8021f04 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8003616:	f107 0310 	add.w	r3, r7, #16
 800361a:	4619      	mov	r1, r3
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f001 ffa5 	bl	800556c <embeddedCliPrint>
    snprintf(buffer, sizeof(buffer), "CRC16-XMODEM: 0x%04X", crc);
 8003622:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003626:	f107 0010 	add.w	r0, r7, #16
 800362a:	4a16      	ldr	r2, [pc, #88]	@ (8003684 <CMD_RamFill+0x2f4>)
 800362c:	2164      	movs	r1, #100	@ 0x64
 800362e:	f01e fc69 	bl	8021f04 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8003632:	f107 0310 	add.w	r3, r7, #16
 8003636:	4619      	mov	r1, r3
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f001 ff97 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 800363e:	4912      	ldr	r1, [pc, #72]	@ (8003688 <CMD_RamFill+0x2f8>)
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f001 ff93 	bl	800556c <embeddedCliPrint>
}
 8003646:	3798      	adds	r7, #152	@ 0x98
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	08023f90 	.word	0x08023f90
 8003650:	08023fe0 	.word	0x08023fe0
 8003654:	08024008 	.word	0x08024008
 8003658:	08024014 	.word	0x08024014
 800365c:	0802401c 	.word	0x0802401c
 8003660:	08024024 	.word	0x08024024
 8003664:	30000000 	.word	0x30000000
 8003668:	08024048 	.word	0x08024048
 800366c:	aaaaaaab 	.word	0xaaaaaaab
 8003670:	08024078 	.word	0x08024078
 8003674:	080240a8 	.word	0x080240a8
 8003678:	080240cc 	.word	0x080240cc
 800367c:	080240fc 	.word	0x080240fc
 8003680:	08024120 	.word	0x08024120
 8003684:	08024140 	.word	0x08024140
 8003688:	08023f8c 	.word	0x08023f8c

0800368c <CMD_RamDump>:

static void CMD_RamDump(EmbeddedCli *cli, char *args, void *context) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b0aa      	sub	sp, #168	@ 0xa8
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // size
 8003698:	2101      	movs	r1, #1
 800369a:	68b8      	ldr	r0, [r7, #8]
 800369c:	f002 f828 	bl	80056f0 <embeddedCliGetToken>
 80036a0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    char buffer[100];
    const uint32_t bytes_per_line = 16;
 80036a4:	2310      	movs	r3, #16
 80036a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t byte_count = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint16_t crc = 0x0000;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

    if (arg1 == NULL) {
 80036b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d104      	bne.n	80036c8 <CMD_RamDump+0x3c>
        embeddedCliPrint(cli, "Usage: ram_dump <size> (size: 1-200KB)");
 80036be:	4980      	ldr	r1, [pc, #512]	@ (80038c0 <CMD_RamDump+0x234>)
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f001 ff53 	bl	800556c <embeddedCliPrint>
        return;
 80036c6:	e0f7      	b.n	80038b8 <CMD_RamDump+0x22c>
    }

    uint32_t size = (uint32_t)strtoul(arg1, NULL, 0);
 80036c8:	2200      	movs	r2, #0
 80036ca:	2100      	movs	r1, #0
 80036cc:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80036d0:	f01e fb4c 	bl	8021d6c <strtoul>
 80036d4:	67f8      	str	r0, [r7, #124]	@ 0x7c

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 80036d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <CMD_RamDump+0x58>
 80036dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036de:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 80036e2:	d90e      	bls.n	8003702 <CMD_RamDump+0x76>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)RAM_D2_200KB_SIZE);
 80036e4:	f107 0014 	add.w	r0, r7, #20
 80036e8:	f44f 3348 	mov.w	r3, #204800	@ 0x32000
 80036ec:	4a75      	ldr	r2, [pc, #468]	@ (80038c4 <CMD_RamDump+0x238>)
 80036ee:	2164      	movs	r1, #100	@ 0x64
 80036f0:	f01e fc08 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	4619      	mov	r1, r3
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f001 ff36 	bl	800556c <embeddedCliPrint>
        return;
 8003700:	e0da      	b.n	80038b8 <CMD_RamDump+0x22c>
    }

    snprintf(buffer, sizeof(buffer), "Dumping %lu bytes of RAM_D3 contents:", (unsigned long)size);
 8003702:	f107 0014 	add.w	r0, r7, #20
 8003706:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003708:	4a6f      	ldr	r2, [pc, #444]	@ (80038c8 <CMD_RamDump+0x23c>)
 800370a:	2164      	movs	r1, #100	@ 0x64
 800370c:	f01e fbfa 	bl	8021f04 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	4619      	mov	r1, r3
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f001 ff28 	bl	800556c <embeddedCliPrint>

    for (uint32_t i = 0; i < size; i += bytes_per_line) {
 800371c:	2300      	movs	r3, #0
 800371e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003722:	e0ae      	b.n	8003882 <CMD_RamDump+0x1f6>
        snprintf(buffer, sizeof(buffer), "0x%08lX: ", (uint32_t)(0x38000000 + i));
 8003724:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003728:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 800372c:	f107 0014 	add.w	r0, r7, #20
 8003730:	4a66      	ldr	r2, [pc, #408]	@ (80038cc <CMD_RamDump+0x240>)
 8003732:	2164      	movs	r1, #100	@ 0x64
 8003734:	f01e fbe6 	bl	8021f04 <sniprintf>
        char *ptr = buffer + strlen(buffer);
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	4618      	mov	r0, r3
 800373e:	f7fc fdd9 	bl	80002f4 <strlen>
 8003742:	4602      	mov	r2, r0
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4413      	add	r3, r2
 800374a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003754:	e031      	b.n	80037ba <CMD_RamDump+0x12e>
            uint8_t value = RAM_D3_START[i + j];
 8003756:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800375a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800375e:	4413      	add	r3, r2
 8003760:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
            snprintf(ptr, sizeof(buffer) - (ptr - buffer), "%02X ", value);
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f1c3 0164 	rsb	r1, r3, #100	@ 0x64
 8003778:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800377c:	4a54      	ldr	r2, [pc, #336]	@ (80038d0 <CMD_RamDump+0x244>)
 800377e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003782:	f01e fbbf 	bl	8021f04 <sniprintf>
            ptr += 3;
 8003786:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800378a:	3303      	adds	r3, #3
 800378c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            byte_count++;
 8003790:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003794:	3301      	adds	r3, #1
 8003796:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            crc = UpdateCRC16_XMODEM(crc, value);
 800379a:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 800379e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fd2c 	bl	8003202 <UpdateCRC16_XMODEM>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 80037b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037b4:	3301      	adds	r3, #1
 80037b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80037be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d207      	bcs.n	80037d6 <CMD_RamDump+0x14a>
 80037c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ce:	4413      	add	r3, r2
 80037d0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d8bf      	bhi.n	8003756 <CMD_RamDump+0xca>
        }

        *ptr++ = ' ';
 80037d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80037e0:	2220      	movs	r2, #32
 80037e2:	701a      	strb	r2, [r3, #0]
        *ptr++ = '|';
 80037e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80037ee:	227c      	movs	r2, #124	@ 0x7c
 80037f0:	701a      	strb	r2, [r3, #0]
        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037f8:	e021      	b.n	800383e <CMD_RamDump+0x1b2>
            uint8_t c = RAM_D3_START[i + j];
 80037fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003802:	4413      	add	r3, r2
 8003804:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
            *ptr++ = (c >= 32 && c <= 126) ? c : '.';
 800380e:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8003812:	2b1f      	cmp	r3, #31
 8003814:	d906      	bls.n	8003824 <CMD_RamDump+0x198>
 8003816:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800381a:	2b7e      	cmp	r3, #126	@ 0x7e
 800381c:	d802      	bhi.n	8003824 <CMD_RamDump+0x198>
 800381e:	f897 107a 	ldrb.w	r1, [r7, #122]	@ 0x7a
 8003822:	e000      	b.n	8003826 <CMD_RamDump+0x19a>
 8003824:	212e      	movs	r1, #46	@ 0x2e
 8003826:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003830:	460a      	mov	r2, r1
 8003832:	701a      	strb	r2, [r3, #0]
        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 8003834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003838:	3301      	adds	r3, #1
 800383a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800383e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003842:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003846:	429a      	cmp	r2, r3
 8003848:	d207      	bcs.n	800385a <CMD_RamDump+0x1ce>
 800384a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800384e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003852:	4413      	add	r3, r2
 8003854:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003856:	429a      	cmp	r2, r3
 8003858:	d8cf      	bhi.n	80037fa <CMD_RamDump+0x16e>
        }
        *ptr = '\0';
 800385a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]

        embeddedCliPrint(cli, buffer);
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4619      	mov	r1, r3
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f001 fe7f 	bl	800556c <embeddedCliPrint>

        vTaskDelay(pdMS_TO_TICKS(1));
 800386e:	2001      	movs	r0, #1
 8003870:	f00e fa6e 	bl	8011d50 <vTaskDelay>
    for (uint32_t i = 0; i < size; i += bytes_per_line) {
 8003874:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003878:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800387c:	4413      	add	r3, r2
 800387e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003882:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003886:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003888:	429a      	cmp	r2, r3
 800388a:	f4ff af4b 	bcc.w	8003724 <CMD_RamDump+0x98>
    }

    snprintf(buffer, sizeof(buffer), "Dump complete. Counted bytes: %lu, CRC16-XMODEM: 0x%04X",
 800388e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8003892:	f107 0014 	add.w	r0, r7, #20
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800389c:	4a0d      	ldr	r2, [pc, #52]	@ (80038d4 <CMD_RamDump+0x248>)
 800389e:	2164      	movs	r1, #100	@ 0x64
 80038a0:	f01e fb30 	bl	8021f04 <sniprintf>
             (unsigned long)byte_count, crc);
    embeddedCliPrint(cli, buffer);
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	4619      	mov	r1, r3
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f001 fe5e 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80038b0:	4909      	ldr	r1, [pc, #36]	@ (80038d8 <CMD_RamDump+0x24c>)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f001 fe5a 	bl	800556c <embeddedCliPrint>
}
 80038b8:	37a0      	adds	r7, #160	@ 0xa0
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	08024158 	.word	0x08024158
 80038c4:	08023fe0 	.word	0x08023fe0
 80038c8:	08024180 	.word	0x08024180
 80038cc:	080241a8 	.word	0x080241a8
 80038d0:	080241b4 	.word	0x080241b4
 80038d4:	080241bc 	.word	0x080241bc
 80038d8:	08023f8c 	.word	0x08023f8c

080038dc <CMD_StateToCM4>:

static void CMD_StateToCM4(EmbeddedCli *cli, char *args, void *context) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b0a0      	sub	sp, #128	@ 0x80
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 80038e8:	2101      	movs	r1, #1
 80038ea:	68b8      	ldr	r0, [r7, #8]
 80038ec:	f001 ff00 	bl	80056f0 <embeddedCliGetToken>
 80038f0:	67f8      	str	r0, [r7, #124]	@ 0x7c
    char buffer[100];

    if (arg1 == NULL) {
 80038f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <CMD_StateToCM4+0x26>
        embeddedCliPrint(cli, "Usage: state_tocm4 <get|reset>");
 80038f8:	4934      	ldr	r1, [pc, #208]	@ (80039cc <CMD_StateToCM4+0xf0>)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f001 fe36 	bl	800556c <embeddedCliPrint>
 8003900:	e060      	b.n	80039c4 <CMD_StateToCM4+0xe8>
        return;
    }

    if (strcmp(arg1, "get") == 0) {
 8003902:	4933      	ldr	r1, [pc, #204]	@ (80039d0 <CMD_StateToCM4+0xf4>)
 8003904:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003906:	f7fc fceb 	bl	80002e0 <strcmp>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d142      	bne.n	8003996 <CMD_StateToCM4+0xba>
        toCM4_State_t state = toCM4_GetState();
 8003910:	f7fd f900 	bl	8000b14 <toCM4_GetState>
 8003914:	4603      	mov	r3, r0
 8003916:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        switch (state) {
 800391a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800391e:	2b03      	cmp	r3, #3
 8003920:	d82a      	bhi.n	8003978 <CMD_StateToCM4+0x9c>
 8003922:	a201      	add	r2, pc, #4	@ (adr r2, 8003928 <CMD_StateToCM4+0x4c>)
 8003924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003928:	08003939 	.word	0x08003939
 800392c:	08003949 	.word	0x08003949
 8003930:	08003959 	.word	0x08003959
 8003934:	08003969 	.word	0x08003969
            case TOCM4_ERROR:
                snprintf(buffer, sizeof(buffer), "toCM4 State: ERROR");
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	4a25      	ldr	r2, [pc, #148]	@ (80039d4 <CMD_StateToCM4+0xf8>)
 800393e:	2164      	movs	r1, #100	@ 0x64
 8003940:	4618      	mov	r0, r3
 8003942:	f01e fadf 	bl	8021f04 <sniprintf>
                break;
 8003946:	e01f      	b.n	8003988 <CMD_StateToCM4+0xac>
            case TOCM4_READYSEND:
                snprintf(buffer, sizeof(buffer), "toCM4 State: READYSEND");
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	4a22      	ldr	r2, [pc, #136]	@ (80039d8 <CMD_StateToCM4+0xfc>)
 800394e:	2164      	movs	r1, #100	@ 0x64
 8003950:	4618      	mov	r0, r3
 8003952:	f01e fad7 	bl	8021f04 <sniprintf>
                break;
 8003956:	e017      	b.n	8003988 <CMD_StateToCM4+0xac>
            case TOCM4_BUSY:
                snprintf(buffer, sizeof(buffer), "toCM4 State: BUSY");
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	4a1f      	ldr	r2, [pc, #124]	@ (80039dc <CMD_StateToCM4+0x100>)
 800395e:	2164      	movs	r1, #100	@ 0x64
 8003960:	4618      	mov	r0, r3
 8003962:	f01e facf 	bl	8021f04 <sniprintf>
                break;
 8003966:	e00f      	b.n	8003988 <CMD_StateToCM4+0xac>
            case TOCM4_IDLE:
                snprintf(buffer, sizeof(buffer), "toCM4 State: IDLE");
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4a1c      	ldr	r2, [pc, #112]	@ (80039e0 <CMD_StateToCM4+0x104>)
 800396e:	2164      	movs	r1, #100	@ 0x64
 8003970:	4618      	mov	r0, r3
 8003972:	f01e fac7 	bl	8021f04 <sniprintf>
                break;
 8003976:	e007      	b.n	8003988 <CMD_StateToCM4+0xac>
            default:
                snprintf(buffer, sizeof(buffer), "toCM4 State: UNKNOWN");
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	4a19      	ldr	r2, [pc, #100]	@ (80039e4 <CMD_StateToCM4+0x108>)
 800397e:	2164      	movs	r1, #100	@ 0x64
 8003980:	4618      	mov	r0, r3
 8003982:	f01e fabf 	bl	8021f04 <sniprintf>
                break;
 8003986:	bf00      	nop
        }
        embeddedCliPrint(cli, buffer);
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4619      	mov	r1, r3
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f001 fdec 	bl	800556c <embeddedCliPrint>
 8003994:	e012      	b.n	80039bc <CMD_StateToCM4+0xe0>
    } else if (strcmp(arg1, "reset") == 0) {
 8003996:	4914      	ldr	r1, [pc, #80]	@ (80039e8 <CMD_StateToCM4+0x10c>)
 8003998:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800399a:	f7fc fca1 	bl	80002e0 <strcmp>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d107      	bne.n	80039b4 <CMD_StateToCM4+0xd8>
        toCM4_SetState(TOCM4_IDLE);
 80039a4:	2003      	movs	r0, #3
 80039a6:	f7fd f863 	bl	8000a70 <toCM4_SetState>
        embeddedCliPrint(cli, "toCM4 State reset to IDLE");
 80039aa:	4910      	ldr	r1, [pc, #64]	@ (80039ec <CMD_StateToCM4+0x110>)
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f001 fddd 	bl	800556c <embeddedCliPrint>
 80039b2:	e003      	b.n	80039bc <CMD_StateToCM4+0xe0>
    } else {
        embeddedCliPrint(cli, "Invalid option. Usage: state_tocm4 <get|reset>");
 80039b4:	490e      	ldr	r1, [pc, #56]	@ (80039f0 <CMD_StateToCM4+0x114>)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f001 fdd8 	bl	800556c <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 80039bc:	490d      	ldr	r1, [pc, #52]	@ (80039f4 <CMD_StateToCM4+0x118>)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f001 fdd4 	bl	800556c <embeddedCliPrint>
}
 80039c4:	3780      	adds	r7, #128	@ 0x80
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	080241f4 	.word	0x080241f4
 80039d0:	08024214 	.word	0x08024214
 80039d4:	08024218 	.word	0x08024218
 80039d8:	0802422c 	.word	0x0802422c
 80039dc:	08024244 	.word	0x08024244
 80039e0:	08024258 	.word	0x08024258
 80039e4:	0802426c 	.word	0x0802426c
 80039e8:	08023db0 	.word	0x08023db0
 80039ec:	08024284 	.word	0x08024284
 80039f0:	080242a0 	.word	0x080242a0
 80039f4:	08023f8c 	.word	0x08023f8c

080039f8 <CMD_SPISlaveRST>:

static void CMD_SPISlaveRST(EmbeddedCli *cli, char *args, void *context) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b0a0      	sub	sp, #128	@ 0x80
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
    char buffer[100];

    SPI_SlaveDevice_t *device = SPI_SlaveDevice_GetHandle();
 8003a04:	f005 ff50 	bl	80098a8 <SPI_SlaveDevice_GetHandle>
 8003a08:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (!device->is_initialized) {
 8003a0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a0c:	7d1b      	ldrb	r3, [r3, #20]
 8003a0e:	f083 0301 	eor.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <CMD_SPISlaveRST+0x2a>
        embeddedCliPrint(cli, "SPI Slave Device not initialized");
 8003a18:	4917      	ldr	r1, [pc, #92]	@ (8003a78 <CMD_SPISlaveRST+0x80>)
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f001 fda6 	bl	800556c <embeddedCliPrint>
 8003a20:	e027      	b.n	8003a72 <CMD_SPISlaveRST+0x7a>
        return;
    }

    Std_ReturnType ret = SPI_SlaveDevice_Disable();
 8003a22:	f006 f88b 	bl	8009b3c <SPI_SlaveDevice_Disable>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    if (ret == E_OK) {
 8003a2c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10d      	bne.n	8003a50 <CMD_SPISlaveRST+0x58>
        snprintf(buffer, sizeof(buffer), "SPI Slave Device reset to IDLE state");
 8003a34:	f107 0314 	add.w	r3, r7, #20
 8003a38:	4a10      	ldr	r2, [pc, #64]	@ (8003a7c <CMD_SPISlaveRST+0x84>)
 8003a3a:	2164      	movs	r1, #100	@ 0x64
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f01e fa61 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003a42:	f107 0314 	add.w	r3, r7, #20
 8003a46:	4619      	mov	r1, r3
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f001 fd8f 	bl	800556c <embeddedCliPrint>
 8003a4e:	e00c      	b.n	8003a6a <CMD_SPISlaveRST+0x72>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to reset SPI Slave Device");
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	4a0a      	ldr	r2, [pc, #40]	@ (8003a80 <CMD_SPISlaveRST+0x88>)
 8003a56:	2164      	movs	r1, #100	@ 0x64
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f01e fa53 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003a5e:	f107 0314 	add.w	r3, r7, #20
 8003a62:	4619      	mov	r1, r3
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f001 fd81 	bl	800556c <embeddedCliPrint>
    }

    embeddedCliPrint(cli, "");
 8003a6a:	4906      	ldr	r1, [pc, #24]	@ (8003a84 <CMD_SPISlaveRST+0x8c>)
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f001 fd7d 	bl	800556c <embeddedCliPrint>
}
 8003a72:	3780      	adds	r7, #128	@ 0x80
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	080242d0 	.word	0x080242d0
 8003a7c:	080242f4 	.word	0x080242f4
 8003a80:	0802431c 	.word	0x0802431c
 8003a84:	08023f8c 	.word	0x08023f8c

08003a88 <CMD_CollectData>:

static void CMD_CollectData(EmbeddedCli *cli, char *args, void *context) {
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b0ab      	sub	sp, #172	@ 0xac
 8003a8c:	af04      	add	r7, sp, #16
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // type
 8003a94:	2101      	movs	r1, #1
 8003a96:	68b8      	ldr	r0, [r7, #8]
 8003a98:	f001 fe2a 	bl	80056f0 <embeddedCliGetToken>
 8003a9c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    const char *arg2 = embeddedCliGetToken(args, 2); // sample
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	68b8      	ldr	r0, [r7, #8]
 8003aa4:	f001 fe24 	bl	80056f0 <embeddedCliGetToken>
 8003aa8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    char buffer[100];

    if (arg1 == NULL || arg2 == NULL) {
 8003aac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <CMD_CollectData+0x34>
 8003ab4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <CMD_CollectData+0x3e>
        embeddedCliPrint(cli, "Usage: collect_data <type> <sample>");
 8003abc:	4934      	ldr	r1, [pc, #208]	@ (8003b90 <CMD_CollectData+0x108>)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f001 fd54 	bl	800556c <embeddedCliPrint>
 8003ac4:	e061      	b.n	8003b8a <CMD_CollectData+0x102>
        return;
    }

    uint8_t type = (uint8_t)atoi(arg1);
 8003ac6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003aca:	f01e f81b 	bl	8021b04 <atoi>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint32_t sample = (uint32_t)strtoul(arg2, NULL, 0);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003adc:	f01e f946 	bl	8021d6c <strtoul>
 8003ae0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

    Std_ReturnType ret = SPI_SlaveDevice_CollectData(type, sample, (uint32_t)RAM_D2_200KB_START);
 8003ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8003b94 <CMD_CollectData+0x10c>)
 8003ae6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003aea:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003aee:	4618      	mov	r0, r3
 8003af0:	f005 ff12 	bl	8009918 <SPI_SlaveDevice_CollectData>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (ret == E_OK) {
 8003afa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11e      	bne.n	8003b40 <CMD_CollectData+0xb8>
        DataProcessContext_t ctx;
        if (SPI_SlaveDevice_GetDataInfo(&ctx) == E_OK) {
 8003b02:	f107 0310 	add.w	r3, r7, #16
 8003b06:	4618      	mov	r0, r3
 8003b08:	f005 ffa2 	bl	8009a50 <SPI_SlaveDevice_GetDataInfo>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d137      	bne.n	8003b82 <CMD_CollectData+0xfa>
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
                     (unsigned long)ctx.sample, ctx.type, (unsigned long)ctx.data_size, ctx.crc);
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	7c3b      	ldrb	r3, [r7, #16]
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
 8003b16:	4619      	mov	r1, r3
                     (unsigned long)ctx.sample, ctx.type, (unsigned long)ctx.data_size, ctx.crc);
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	8bb8      	ldrh	r0, [r7, #28]
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	f107 0020 	add.w	r0, r7, #32
 8003b22:	9402      	str	r4, [sp, #8]
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	9100      	str	r1, [sp, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003b98 <CMD_CollectData+0x110>)
 8003b2c:	2164      	movs	r1, #100	@ 0x64
 8003b2e:	f01e f9e9 	bl	8021f04 <sniprintf>
            embeddedCliPrint(cli, buffer);
 8003b32:	f107 0320 	add.w	r3, r7, #32
 8003b36:	4619      	mov	r1, r3
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f001 fd17 	bl	800556c <embeddedCliPrint>
 8003b3e:	e020      	b.n	8003b82 <CMD_CollectData+0xfa>
        }
    } else if (ret == E_BUSY) {
 8003b40:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d10e      	bne.n	8003b66 <CMD_CollectData+0xde>
        snprintf(buffer, sizeof(buffer), "Type %d not implemented yet.", type);
 8003b48:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003b4c:	f107 0020 	add.w	r0, r7, #32
 8003b50:	4a12      	ldr	r2, [pc, #72]	@ (8003b9c <CMD_CollectData+0x114>)
 8003b52:	2164      	movs	r1, #100	@ 0x64
 8003b54:	f01e f9d6 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003b58:	f107 0320 	add.w	r3, r7, #32
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f001 fd04 	bl	800556c <embeddedCliPrint>
 8003b64:	e00d      	b.n	8003b82 <CMD_CollectData+0xfa>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to collect data. Error code: %d", ret);
 8003b66:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003b6a:	f107 0020 	add.w	r0, r7, #32
 8003b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ba0 <CMD_CollectData+0x118>)
 8003b70:	2164      	movs	r1, #100	@ 0x64
 8003b72:	f01e f9c7 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003b76:	f107 0320 	add.w	r3, r7, #32
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f001 fcf5 	bl	800556c <embeddedCliPrint>
    }

    embeddedCliPrint(cli, "");
 8003b82:	4908      	ldr	r1, [pc, #32]	@ (8003ba4 <CMD_CollectData+0x11c>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f001 fcf1 	bl	800556c <embeddedCliPrint>
}
 8003b8a:	379c      	adds	r7, #156	@ 0x9c
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd90      	pop	{r4, r7, pc}
 8003b90:	08024340 	.word	0x08024340
 8003b94:	30000000 	.word	0x30000000
 8003b98:	08024364 	.word	0x08024364
 8003b9c:	080243a4 	.word	0x080243a4
 8003ba0:	080243c4 	.word	0x080243c4
 8003ba4:	08023f8c 	.word	0x08023f8c

08003ba8 <CMD_PullData>:

static void CMD_PullData(EmbeddedCli *cli, char *args, void *context) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b0a4      	sub	sp, #144	@ 0x90
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
    char buffer[100];
    toCM4_State_t state = SPI_SlaveDevice_GetCM4State();
 8003bb4:	f005 fffc 	bl	8009bb0 <SPI_SlaveDevice_GetCM4State>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    switch (state) {
 8003bbe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d838      	bhi.n	8003c38 <CMD_PullData+0x90>
 8003bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bcc <CMD_PullData+0x24>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003c2f 	.word	0x08003c2f
 8003bd0:	08003bf1 	.word	0x08003bf1
 8003bd4:	08003be7 	.word	0x08003be7
 8003bd8:	08003bdd 	.word	0x08003bdd
        case TOCM4_IDLE:
            embeddedCliPrint(cli, "State: IDLE");
 8003bdc:	491d      	ldr	r1, [pc, #116]	@ (8003c54 <CMD_PullData+0xac>)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f001 fcc4 	bl	800556c <embeddedCliPrint>
            break;
 8003be4:	e02d      	b.n	8003c42 <CMD_PullData+0x9a>
        case TOCM4_BUSY:
            embeddedCliPrint(cli, "State: BUSY");
 8003be6:	491c      	ldr	r1, [pc, #112]	@ (8003c58 <CMD_PullData+0xb0>)
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f001 fcbf 	bl	800556c <embeddedCliPrint>
            break;
 8003bee:	e028      	b.n	8003c42 <CMD_PullData+0x9a>
        case TOCM4_READYSEND:
        {
            DataProcessContext_t ctx;
            if (SPI_SlaveDevice_GetDataInfo(&ctx) == E_OK) {
 8003bf0:	f107 0310 	add.w	r3, r7, #16
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f005 ff2b 	bl	8009a50 <SPI_SlaveDevice_GetDataInfo>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d111      	bne.n	8003c24 <CMD_PullData+0x7c>
                snprintf(buffer, sizeof(buffer), "State: READYSEND, CRC: 0x%04X, Size: %lu bytes",
                         ctx.crc, (unsigned long)ctx.data_size);
 8003c00:	8bbb      	ldrh	r3, [r7, #28]
                snprintf(buffer, sizeof(buffer), "State: READYSEND, CRC: 0x%04X, Size: %lu bytes",
 8003c02:	461a      	mov	r2, r3
                         ctx.crc, (unsigned long)ctx.data_size);
 8003c04:	69bb      	ldr	r3, [r7, #24]
                snprintf(buffer, sizeof(buffer), "State: READYSEND, CRC: 0x%04X, Size: %lu bytes",
 8003c06:	f107 0020 	add.w	r0, r7, #32
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	4a13      	ldr	r2, [pc, #76]	@ (8003c5c <CMD_PullData+0xb4>)
 8003c10:	2164      	movs	r1, #100	@ 0x64
 8003c12:	f01e f977 	bl	8021f04 <sniprintf>
                embeddedCliPrint(cli, buffer);
 8003c16:	f107 0320 	add.w	r3, r7, #32
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f001 fca5 	bl	800556c <embeddedCliPrint>
            } else {
                embeddedCliPrint(cli, "State: READYSEND, but no valid data context");
            }
            break;
 8003c22:	e00e      	b.n	8003c42 <CMD_PullData+0x9a>
                embeddedCliPrint(cli, "State: READYSEND, but no valid data context");
 8003c24:	490e      	ldr	r1, [pc, #56]	@ (8003c60 <CMD_PullData+0xb8>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f001 fca0 	bl	800556c <embeddedCliPrint>
            break;
 8003c2c:	e009      	b.n	8003c42 <CMD_PullData+0x9a>
        }
        case TOCM4_ERROR:
            embeddedCliPrint(cli, "State: ERROR");
 8003c2e:	490d      	ldr	r1, [pc, #52]	@ (8003c64 <CMD_PullData+0xbc>)
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f001 fc9b 	bl	800556c <embeddedCliPrint>
            break;
 8003c36:	e004      	b.n	8003c42 <CMD_PullData+0x9a>
        default:
            embeddedCliPrint(cli, "State: UNKNOWN");
 8003c38:	490b      	ldr	r1, [pc, #44]	@ (8003c68 <CMD_PullData+0xc0>)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f001 fc96 	bl	800556c <embeddedCliPrint>
            break;
 8003c40:	bf00      	nop
    }

    embeddedCliPrint(cli, "");
 8003c42:	490a      	ldr	r1, [pc, #40]	@ (8003c6c <CMD_PullData+0xc4>)
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f001 fc91 	bl	800556c <embeddedCliPrint>
}
 8003c4a:	bf00      	nop
 8003c4c:	3788      	adds	r7, #136	@ 0x88
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	080243ec 	.word	0x080243ec
 8003c58:	080243f8 	.word	0x080243f8
 8003c5c:	08024404 	.word	0x08024404
 8003c60:	08024434 	.word	0x08024434
 8003c64:	08024460 	.word	0x08024460
 8003c68:	08024470 	.word	0x08024470
 8003c6c:	08023f8c 	.word	0x08023f8c

08003c70 <CMD_MasterRead>:

static void CMD_MasterRead(EmbeddedCli *cli, char *args, void *context) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b0a6      	sub	sp, #152	@ 0x98
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // size
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	68b8      	ldr	r0, [r7, #8]
 8003c80:	f001 fd36 	bl	80056f0 <embeddedCliGetToken>
 8003c84:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    char buffer[100];

    if (arg1 == NULL) {
 8003c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d104      	bne.n	8003c9a <CMD_MasterRead+0x2a>
        embeddedCliPrint(cli, "Usage: master_read <size> (size: 1-200KB)");
 8003c90:	4943      	ldr	r1, [pc, #268]	@ (8003da0 <CMD_MasterRead+0x130>)
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f001 fc6a 	bl	800556c <embeddedCliPrint>
        return;
 8003c98:	e07f      	b.n	8003d9a <CMD_MasterRead+0x12a>
    }

    uint32_t size = (uint32_t)strtoul(arg1, NULL, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003ca2:	f01e f863 	bl	8021d6c <strtoul>
 8003ca6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 8003caa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <CMD_MasterRead+0x4c>
 8003cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cb6:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8003cba:	d90e      	bls.n	8003cda <CMD_MasterRead+0x6a>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)RAM_D2_200KB_SIZE);
 8003cbc:	f107 0014 	add.w	r0, r7, #20
 8003cc0:	f44f 3348 	mov.w	r3, #204800	@ 0x32000
 8003cc4:	4a37      	ldr	r2, [pc, #220]	@ (8003da4 <CMD_MasterRead+0x134>)
 8003cc6:	2164      	movs	r1, #100	@ 0x64
 8003cc8:	f01e f91c 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003ccc:	f107 0314 	add.w	r3, r7, #20
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f001 fc4a 	bl	800556c <embeddedCliPrint>
        return;
 8003cd8:	e05f      	b.n	8003d9a <CMD_MasterRead+0x12a>
//                 toCM4_GetState() == TOCM4_READYSEND ? "READYSEND" : "ERROR");
//        embeddedCliPrint(cli, buffer);
//        return;
//    }

    SPI_MasterDevice_t *device = SPI_MasterDevice_GetHandle();
 8003cda:	f005 faab 	bl	8009234 <SPI_MasterDevice_GetHandle>
 8003cde:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (!device->is_initialized) {
 8003ce0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ce2:	7adb      	ldrb	r3, [r3, #11]
 8003ce4:	f083 0301 	eor.w	r3, r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <CMD_MasterRead+0x88>
        embeddedCliPrint(cli, "SPI Master Device not initialized");
 8003cee:	492e      	ldr	r1, [pc, #184]	@ (8003da8 <CMD_MasterRead+0x138>)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f001 fc3b 	bl	800556c <embeddedCliPrint>
        return;
 8003cf6:	e050      	b.n	8003d9a <CMD_MasterRead+0x12a>
    }

    Std_ReturnType ret = SPI_MasterDevice_ReadDMA(0x38000000, size);
 8003cf8:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003cfc:	f04f 5060 	mov.w	r0, #939524096	@ 0x38000000
 8003d00:	f005 fae4 	bl	80092cc <SPI_MasterDevice_ReadDMA>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    if (ret == E_OK) {
 8003d0a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d131      	bne.n	8003d76 <CMD_MasterRead+0x106>
        uint16_t crc = 0x0000;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        for (uint32_t i = 0; i < size; i++) {
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d1e:	e012      	b.n	8003d46 <CMD_MasterRead+0xd6>
            crc = UpdateCRC16_XMODEM(crc, RAM_D3_START[i]);
 8003d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d24:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fa66 	bl	8003202 <UpdateCRC16_XMODEM>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        for (uint32_t i = 0; i < size; i++) {
 8003d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d40:	3301      	adds	r3, #1
 8003d42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d46:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d3e6      	bcc.n	8003d20 <CMD_MasterRead+0xb0>
        }
        snprintf(buffer, sizeof(buffer), "Read %lu bytes via SPI6 Master, CRC: 0x%04X",
 8003d52:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003d56:	f107 0014 	add.w	r0, r7, #20
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d60:	4a12      	ldr	r2, [pc, #72]	@ (8003dac <CMD_MasterRead+0x13c>)
 8003d62:	2164      	movs	r1, #100	@ 0x64
 8003d64:	f01e f8ce 	bl	8021f04 <sniprintf>
                 (unsigned long)size, crc);
        embeddedCliPrint(cli, buffer);
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f001 fbfc 	bl	800556c <embeddedCliPrint>
 8003d74:	e00d      	b.n	8003d92 <CMD_MasterRead+0x122>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to read data. Error code: %d", ret);
 8003d76:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003d7a:	f107 0014 	add.w	r0, r7, #20
 8003d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003db0 <CMD_MasterRead+0x140>)
 8003d80:	2164      	movs	r1, #100	@ 0x64
 8003d82:	f01e f8bf 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f001 fbed 	bl	800556c <embeddedCliPrint>
    }

    embeddedCliPrint(cli, "");
 8003d92:	4908      	ldr	r1, [pc, #32]	@ (8003db4 <CMD_MasterRead+0x144>)
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f001 fbe9 	bl	800556c <embeddedCliPrint>
}
 8003d9a:	3790      	adds	r7, #144	@ 0x90
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	08024480 	.word	0x08024480
 8003da4:	08023fe0 	.word	0x08023fe0
 8003da8:	080244ac 	.word	0x080244ac
 8003dac:	080244d0 	.word	0x080244d0
 8003db0:	080244fc 	.word	0x080244fc
 8003db4:	08023f8c 	.word	0x08023f8c

08003db8 <CMD_ClearCLI>:

static void CMD_ClearCLI(EmbeddedCli *cli, char *args, void *context) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "\33[2J");
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	4a07      	ldr	r2, [pc, #28]	@ (8003de8 <CMD_ClearCLI+0x30>)
 8003dca:	210a      	movs	r1, #10
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f01e f899 	bl	8021f04 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8003dd2:	f107 0314 	add.w	r3, r7, #20
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f001 fbc7 	bl	800556c <embeddedCliPrint>
}
 8003dde:	bf00      	nop
 8003de0:	3720      	adds	r7, #32
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	08024520 	.word	0x08024520

08003dec <CMD_RtcSet>:

static void CMD_RtcSet(EmbeddedCli *cli, char *args, void *context) {
 8003dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dee:	b0b3      	sub	sp, #204	@ 0xcc
 8003df0:	af06      	add	r7, sp, #24
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // hour
 8003df8:	2101      	movs	r1, #1
 8003dfa:	68b8      	ldr	r0, [r7, #8]
 8003dfc:	f001 fc78 	bl	80056f0 <embeddedCliGetToken>
 8003e00:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    const char *arg2 = embeddedCliGetToken(args, 2); // minute
 8003e04:	2102      	movs	r1, #2
 8003e06:	68b8      	ldr	r0, [r7, #8]
 8003e08:	f001 fc72 	bl	80056f0 <embeddedCliGetToken>
 8003e0c:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    const char *arg3 = embeddedCliGetToken(args, 3); // second
 8003e10:	2103      	movs	r1, #3
 8003e12:	68b8      	ldr	r0, [r7, #8]
 8003e14:	f001 fc6c 	bl	80056f0 <embeddedCliGetToken>
 8003e18:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    const char *arg4 = embeddedCliGetToken(args, 4); // day
 8003e1c:	2104      	movs	r1, #4
 8003e1e:	68b8      	ldr	r0, [r7, #8]
 8003e20:	f001 fc66 	bl	80056f0 <embeddedCliGetToken>
 8003e24:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    const char *arg5 = embeddedCliGetToken(args, 5); // month
 8003e28:	2105      	movs	r1, #5
 8003e2a:	68b8      	ldr	r0, [r7, #8]
 8003e2c:	f001 fc60 	bl	80056f0 <embeddedCliGetToken>
 8003e30:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    const char *arg6 = embeddedCliGetToken(args, 6); // year
 8003e34:	2106      	movs	r1, #6
 8003e36:	68b8      	ldr	r0, [r7, #8]
 8003e38:	f001 fc5a 	bl	80056f0 <embeddedCliGetToken>
 8003e3c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    char buffer[100];
    if (arg1 == NULL || arg2 == NULL || arg3 == NULL ||
 8003e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d013      	beq.n	8003e70 <CMD_RtcSet+0x84>
 8003e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00f      	beq.n	8003e70 <CMD_RtcSet+0x84>
 8003e50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <CMD_RtcSet+0x84>
 8003e58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <CMD_RtcSet+0x84>
        arg4 == NULL || arg5 == NULL || arg6 == NULL) {
 8003e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <CMD_RtcSet+0x84>
 8003e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10d      	bne.n	8003e8c <CMD_RtcSet+0xa0>
        snprintf(buffer, sizeof(buffer),
 8003e70:	f107 0318 	add.w	r3, r7, #24
 8003e74:	4a62      	ldr	r2, [pc, #392]	@ (8004000 <CMD_RtcSet+0x214>)
 8003e76:	2164      	movs	r1, #100	@ 0x64
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f01e f843 	bl	8021f04 <sniprintf>
                 "Usage: rtc_set <hour> <minute> <second> <day> <month> <year>");
        embeddedCliPrint(cli, buffer);
 8003e7e:	f107 0318 	add.w	r3, r7, #24
 8003e82:	4619      	mov	r1, r3
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f001 fb71 	bl	800556c <embeddedCliPrint>
        return;
 8003e8a:	e0b6      	b.n	8003ffa <CMD_RtcSet+0x20e>
    }

    int hour   = atoi(arg1);
 8003e8c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003e90:	f01d fe38 	bl	8021b04 <atoi>
 8003e94:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    int minute = atoi(arg2);
 8003e98:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8003e9c:	f01d fe32 	bl	8021b04 <atoi>
 8003ea0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    int second = atoi(arg3);
 8003ea4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003ea8:	f01d fe2c 	bl	8021b04 <atoi>
 8003eac:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    int day    = atoi(arg4);
 8003eb0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003eb4:	f01d fe26 	bl	8021b04 <atoi>
 8003eb8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    int month  = atoi(arg5);
 8003ebc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003ec0:	f01d fe20 	bl	8021b04 <atoi>
 8003ec4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    int year   = atoi(arg6);
 8003ec8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003ecc:	f01d fe1a 	bl	8021b04 <atoi>
 8003ed0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    if (hour < 0 || hour > 23) {
 8003ed4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	db03      	blt.n	8003ee4 <CMD_RtcSet+0xf8>
 8003edc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ee0:	2b17      	cmp	r3, #23
 8003ee2:	dd04      	ble.n	8003eee <CMD_RtcSet+0x102>
        embeddedCliPrint(cli, "Invalid hour (must be 0-23). Please enter again.");
 8003ee4:	4947      	ldr	r1, [pc, #284]	@ (8004004 <CMD_RtcSet+0x218>)
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f001 fb40 	bl	800556c <embeddedCliPrint>
        return;
 8003eec:	e085      	b.n	8003ffa <CMD_RtcSet+0x20e>
    }
    if (minute < 0 || minute > 59) {
 8003eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db03      	blt.n	8003efe <CMD_RtcSet+0x112>
 8003ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003efa:	2b3b      	cmp	r3, #59	@ 0x3b
 8003efc:	dd04      	ble.n	8003f08 <CMD_RtcSet+0x11c>
        embeddedCliPrint(cli, "Invalid minute (must be 0-59). Please enter again.");
 8003efe:	4942      	ldr	r1, [pc, #264]	@ (8004008 <CMD_RtcSet+0x21c>)
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f001 fb33 	bl	800556c <embeddedCliPrint>
        return;
 8003f06:	e078      	b.n	8003ffa <CMD_RtcSet+0x20e>
    }
    if (second < 0 || second > 59) {
 8003f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	db03      	blt.n	8003f18 <CMD_RtcSet+0x12c>
 8003f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f14:	2b3b      	cmp	r3, #59	@ 0x3b
 8003f16:	dd04      	ble.n	8003f22 <CMD_RtcSet+0x136>
        embeddedCliPrint(cli, "Invalid second (must be 0-59). Please enter again.");
 8003f18:	493c      	ldr	r1, [pc, #240]	@ (800400c <CMD_RtcSet+0x220>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f001 fb26 	bl	800556c <embeddedCliPrint>
        return;
 8003f20:	e06b      	b.n	8003ffa <CMD_RtcSet+0x20e>
    }
    if (day < 1 || day > 31) {
 8003f22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	dd03      	ble.n	8003f32 <CMD_RtcSet+0x146>
 8003f2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f2e:	2b1f      	cmp	r3, #31
 8003f30:	dd04      	ble.n	8003f3c <CMD_RtcSet+0x150>
        embeddedCliPrint(cli, "Invalid day (must be 1-31). Please enter again.");
 8003f32:	4937      	ldr	r1, [pc, #220]	@ (8004010 <CMD_RtcSet+0x224>)
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f001 fb19 	bl	800556c <embeddedCliPrint>
        return;
 8003f3a:	e05e      	b.n	8003ffa <CMD_RtcSet+0x20e>
    }
    if (month < 1 || month > 12) {
 8003f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	dd03      	ble.n	8003f4c <CMD_RtcSet+0x160>
 8003f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	dd04      	ble.n	8003f56 <CMD_RtcSet+0x16a>
        embeddedCliPrint(cli, "Invalid month (must be 1-12). Please enter again.");
 8003f4c:	4931      	ldr	r1, [pc, #196]	@ (8004014 <CMD_RtcSet+0x228>)
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f001 fb0c 	bl	800556c <embeddedCliPrint>
        return;
 8003f54:	e051      	b.n	8003ffa <CMD_RtcSet+0x20e>
    }
    if (year < 0 || year > 99) {
 8003f56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	db03      	blt.n	8003f66 <CMD_RtcSet+0x17a>
 8003f5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f62:	2b63      	cmp	r3, #99	@ 0x63
 8003f64:	dd04      	ble.n	8003f70 <CMD_RtcSet+0x184>
        embeddedCliPrint(cli, "Invalid year (must be 2 digits, e.g., 25 for 2025). Please enter again.");
 8003f66:	492c      	ldr	r1, [pc, #176]	@ (8004018 <CMD_RtcSet+0x22c>)
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f001 faff 	bl	800556c <embeddedCliPrint>
        return;
 8003f6e:	e044      	b.n	8003ffa <CMD_RtcSet+0x20e>
    }

    s_DateTime dt;
    dt.hour   = (uint8_t)hour;
 8003f70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	74fb      	strb	r3, [r7, #19]
    dt.minute = (uint8_t)minute;
 8003f78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	753b      	strb	r3, [r7, #20]
    dt.second = (uint8_t)second;
 8003f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	757b      	strb	r3, [r7, #21]
    dt.day    = (uint8_t)day;
 8003f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	743b      	strb	r3, [r7, #16]
    dt.month  = (uint8_t)month;
 8003f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	747b      	strb	r3, [r7, #17]
    dt.year   = (uint8_t)year;
 8003f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	74bb      	strb	r3, [r7, #18]

    Utils_SetRTC(&dt);
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f006 f967 	bl	800a278 <Utils_SetRTC>
    RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 8003faa:	f004 fca9 	bl	8008900 <RV3129_GetHandle>
 8003fae:	67f8      	str	r0, [r7, #124]	@ 0x7c
    RV3129_SetTime(hrtc, &dt);
 8003fb0:	f107 0310 	add.w	r3, r7, #16
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003fb8:	f004 fcf8 	bl	80089ac <RV3129_SetTime>

    snprintf(buffer, sizeof(buffer),
             "--> RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
    snprintf(buffer, sizeof(buffer),
 8003fbe:	461e      	mov	r6, r3
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8003fc0:	7d3b      	ldrb	r3, [r7, #20]
 8003fc2:	7d7a      	ldrb	r2, [r7, #21]
 8003fc4:	7c39      	ldrb	r1, [r7, #16]
 8003fc6:	7c78      	ldrb	r0, [r7, #17]
    snprintf(buffer, sizeof(buffer),
 8003fc8:	4604      	mov	r4, r0
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8003fca:	7cb8      	ldrb	r0, [r7, #18]
    snprintf(buffer, sizeof(buffer),
 8003fcc:	4605      	mov	r5, r0
 8003fce:	f107 0018 	add.w	r0, r7, #24
 8003fd2:	9504      	str	r5, [sp, #16]
 8003fd4:	9403      	str	r4, [sp, #12]
 8003fd6:	9102      	str	r1, [sp, #8]
 8003fd8:	9201      	str	r2, [sp, #4]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	4633      	mov	r3, r6
 8003fde:	4a0f      	ldr	r2, [pc, #60]	@ (800401c <CMD_RtcSet+0x230>)
 8003fe0:	2164      	movs	r1, #100	@ 0x64
 8003fe2:	f01d ff8f 	bl	8021f04 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8003fe6:	f107 0318 	add.w	r3, r7, #24
 8003fea:	4619      	mov	r1, r3
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f001 fabd 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8003ff2:	490b      	ldr	r1, [pc, #44]	@ (8004020 <CMD_RtcSet+0x234>)
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f001 fab9 	bl	800556c <embeddedCliPrint>
}
 8003ffa:	37b4      	adds	r7, #180	@ 0xb4
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004000:	08024528 	.word	0x08024528
 8004004:	08024568 	.word	0x08024568
 8004008:	0802459c 	.word	0x0802459c
 800400c:	080245d0 	.word	0x080245d0
 8004010:	08024604 	.word	0x08024604
 8004014:	08024634 	.word	0x08024634
 8004018:	08024668 	.word	0x08024668
 800401c:	080246b0 	.word	0x080246b0
 8004020:	08023f8c 	.word	0x08023f8c

08004024 <CMD_RtcGet>:

static void CMD_RtcGet(EmbeddedCli *cli, char *args, void *context) {
 8004024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004026:	b0b7      	sub	sp, #220	@ 0xdc
 8004028:	af06      	add	r7, sp, #24
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
    const char *mode = embeddedCliGetToken(args, 1);
 8004030:	2101      	movs	r1, #1
 8004032:	68b8      	ldr	r0, [r7, #8]
 8004034:	f001 fb5c 	bl	80056f0 <embeddedCliGetToken>
 8004038:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    char buffer[100];

    if (mode == NULL) {
 800403c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10d      	bne.n	8004060 <CMD_RtcGet+0x3c>
        snprintf(buffer, sizeof(buffer), "Usage: rtc_get <hard|soft|work|epoch|all>");
 8004044:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004048:	4ac8      	ldr	r2, [pc, #800]	@ (800436c <CMD_RtcGet+0x348>)
 800404a:	2164      	movs	r1, #100	@ 0x64
 800404c:	4618      	mov	r0, r3
 800404e:	f01d ff59 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004052:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004056:	4619      	mov	r1, r3
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f001 fa87 	bl	800556c <embeddedCliPrint>
 800405e:	e182      	b.n	8004366 <CMD_RtcGet+0x342>
        return;
    }

    //Hard
    if (strcmp(mode, "hard") == 0) {
 8004060:	49c3      	ldr	r1, [pc, #780]	@ (8004370 <CMD_RtcGet+0x34c>)
 8004062:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8004066:	f7fc f93b 	bl	80002e0 <strcmp>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d13f      	bne.n	80040f0 <CMD_RtcGet+0xcc>
        s_DateTime currentTime;
        RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 8004070:	f004 fc46 	bl	8008900 <RV3129_GetHandle>
 8004074:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
        if (RV3129_GetTime(hrtc, &currentTime) == E_OK) {
 8004078:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800407c:	4619      	mov	r1, r3
 800407e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004082:	f004 fc47 	bl	8008914 <RV3129_GetTime>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d12c      	bne.n	80040e6 <CMD_RtcGet+0xc2>
            int16_t temp;
            RV3129_GetTemp(hrtc, &temp);
 800408c:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 8004090:	4619      	mov	r1, r3
 8004092:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004096:	f004 fccd 	bl	8008a34 <RV3129_GetTemp>
            snprintf(buffer, sizeof(buffer),
                     "--> Hard RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d, Temp: %d",
                     currentTime.hour, currentTime.minute, currentTime.second,
 800409a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
            snprintf(buffer, sizeof(buffer),
 800409e:	469c      	mov	ip, r3
                     currentTime.hour, currentTime.minute, currentTime.second,
 80040a0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80040a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
                     currentTime.day, currentTime.month, currentTime.year, temp);
 80040a8:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 80040ac:	f897 0041 	ldrb.w	r0, [r7, #65]	@ 0x41
            snprintf(buffer, sizeof(buffer),
 80040b0:	4604      	mov	r4, r0
                     currentTime.day, currentTime.month, currentTime.year, temp);
 80040b2:	f897 0042 	ldrb.w	r0, [r7, #66]	@ 0x42
            snprintf(buffer, sizeof(buffer),
 80040b6:	4605      	mov	r5, r0
 80040b8:	f9b7 003e 	ldrsh.w	r0, [r7, #62]	@ 0x3e
 80040bc:	4606      	mov	r6, r0
 80040be:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80040c2:	9605      	str	r6, [sp, #20]
 80040c4:	9504      	str	r5, [sp, #16]
 80040c6:	9403      	str	r4, [sp, #12]
 80040c8:	9102      	str	r1, [sp, #8]
 80040ca:	9201      	str	r2, [sp, #4]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	4663      	mov	r3, ip
 80040d0:	4aa8      	ldr	r2, [pc, #672]	@ (8004374 <CMD_RtcGet+0x350>)
 80040d2:	2164      	movs	r1, #100	@ 0x64
 80040d4:	f01d ff16 	bl	8021f04 <sniprintf>
            embeddedCliPrint(cli, buffer);
 80040d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80040dc:	4619      	mov	r1, r3
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f001 fa44 	bl	800556c <embeddedCliPrint>
 80040e4:	e13b      	b.n	800435e <CMD_RtcGet+0x33a>
        } else {
            embeddedCliPrint(cli, "Failed to get hard RTC\r\n");
 80040e6:	49a4      	ldr	r1, [pc, #656]	@ (8004378 <CMD_RtcGet+0x354>)
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f001 fa3f 	bl	800556c <embeddedCliPrint>
 80040ee:	e136      	b.n	800435e <CMD_RtcGet+0x33a>
        }
    } else if (strcmp(mode, "soft") == 0) {
 80040f0:	49a2      	ldr	r1, [pc, #648]	@ (800437c <CMD_RtcGet+0x358>)
 80040f2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80040f6:	f7fc f8f3 	bl	80002e0 <strcmp>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d126      	bne.n	800414e <CMD_RtcGet+0x12a>
        s_DateTime rtc;
        Utils_GetRTC(&rtc);
 8004100:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004104:	4618      	mov	r0, r3
 8004106:	f006 f8a1 	bl	800a24c <Utils_GetRTC>
        snprintf(buffer, sizeof(buffer),
                 "--> Soft RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d",
                 rtc.hour, rtc.minute, rtc.second,
 800410a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
        snprintf(buffer, sizeof(buffer),
 800410e:	461e      	mov	r6, r3
                 rtc.hour, rtc.minute, rtc.second,
 8004110:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004114:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
                 rtc.day, rtc.month, rtc.year);
 8004118:	f897 1038 	ldrb.w	r1, [r7, #56]	@ 0x38
 800411c:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
        snprintf(buffer, sizeof(buffer),
 8004120:	4604      	mov	r4, r0
                 rtc.day, rtc.month, rtc.year);
 8004122:	f897 003a 	ldrb.w	r0, [r7, #58]	@ 0x3a
        snprintf(buffer, sizeof(buffer),
 8004126:	4605      	mov	r5, r0
 8004128:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800412c:	9504      	str	r5, [sp, #16]
 800412e:	9403      	str	r4, [sp, #12]
 8004130:	9102      	str	r1, [sp, #8]
 8004132:	9201      	str	r2, [sp, #4]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	4633      	mov	r3, r6
 8004138:	4a91      	ldr	r2, [pc, #580]	@ (8004380 <CMD_RtcGet+0x35c>)
 800413a:	2164      	movs	r1, #100	@ 0x64
 800413c:	f01d fee2 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004140:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004144:	4619      	mov	r1, r3
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f001 fa10 	bl	800556c <embeddedCliPrint>
 800414c:	e107      	b.n	800435e <CMD_RtcGet+0x33a>
    } else if (strcmp(mode, "work") == 0) {
 800414e:	498d      	ldr	r1, [pc, #564]	@ (8004384 <CMD_RtcGet+0x360>)
 8004150:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8004154:	f7fc f8c4 	bl	80002e0 <strcmp>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d12e      	bne.n	80041bc <CMD_RtcGet+0x198>
        uint32_t days = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t hours = 0, minutes = 0, seconds = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8004168:	2300      	movs	r3, #0
 800416a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800416e:	2300      	movs	r3, #0
 8004170:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
        Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 8004174:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 8004178:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 800417c:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8004180:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8004184:	f006 f8bc 	bl	800a300 <Utils_GetWorkingTime>
        snprintf(buffer, sizeof(buffer),
 8004188:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800418c:	461c      	mov	r4, r3
 800418e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004192:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
                        "--> Working Uptime: Time: %02d:%02d:%02d, Days: %d",
                        hours, minutes, seconds, (uint8_t)days);
 8004196:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004198:	b2c9      	uxtb	r1, r1
        snprintf(buffer, sizeof(buffer),
 800419a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800419e:	9102      	str	r1, [sp, #8]
 80041a0:	9201      	str	r2, [sp, #4]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	4623      	mov	r3, r4
 80041a6:	4a78      	ldr	r2, [pc, #480]	@ (8004388 <CMD_RtcGet+0x364>)
 80041a8:	2164      	movs	r1, #100	@ 0x64
 80041aa:	f01d feab 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80041ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80041b2:	4619      	mov	r1, r3
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f001 f9d9 	bl	800556c <embeddedCliPrint>
 80041ba:	e0d0      	b.n	800435e <CMD_RtcGet+0x33a>
    }else if (strcmp(mode, "epoch") == 0) {
 80041bc:	4973      	ldr	r1, [pc, #460]	@ (800438c <CMD_RtcGet+0x368>)
 80041be:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80041c2:	f7fc f88d 	bl	80002e0 <strcmp>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d112      	bne.n	80041f2 <CMD_RtcGet+0x1ce>
        uint32_t epoch = Utils_GetEpoch();
 80041cc:	f006 f88a 	bl	800a2e4 <Utils_GetEpoch>
 80041d0:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        snprintf(buffer, sizeof(buffer), "--> Epoch: %lu", (unsigned long)epoch);
 80041d4:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80041d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041dc:	4a6c      	ldr	r2, [pc, #432]	@ (8004390 <CMD_RtcGet+0x36c>)
 80041de:	2164      	movs	r1, #100	@ 0x64
 80041e0:	f01d fe90 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80041e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80041e8:	4619      	mov	r1, r3
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f001 f9be 	bl	800556c <embeddedCliPrint>
 80041f0:	e0b5      	b.n	800435e <CMD_RtcGet+0x33a>
    } else if (strcmp(mode, "all") == 0) {
 80041f2:	4968      	ldr	r1, [pc, #416]	@ (8004394 <CMD_RtcGet+0x370>)
 80041f4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 80041f8:	f7fc f872 	bl	80002e0 <strcmp>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f040 80a0 	bne.w	8004344 <CMD_RtcGet+0x320>
        s_DateTime currentTime;
        RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 8004204:	f004 fb7c 	bl	8008900 <RV3129_GetHandle>
 8004208:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (RV3129_GetTime(hrtc, &currentTime) == E_OK) {
 800420c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004210:	4619      	mov	r1, r3
 8004212:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8004216:	f004 fb7d 	bl	8008914 <RV3129_GetTime>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d12c      	bne.n	800427a <CMD_RtcGet+0x256>
            int16_t temp;
            RV3129_GetTemp(hrtc, &temp);
 8004220:	f107 0316 	add.w	r3, r7, #22
 8004224:	4619      	mov	r1, r3
 8004226:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800422a:	f004 fc03 	bl	8008a34 <RV3129_GetTemp>
            snprintf(buffer, sizeof(buffer),
                     "--> Hard RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d, Temp: %d",
                     currentTime.hour, currentTime.minute, currentTime.second,
 800422e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
            snprintf(buffer, sizeof(buffer),
 8004232:	469c      	mov	ip, r3
                     currentTime.hour, currentTime.minute, currentTime.second,
 8004234:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004238:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
                     currentTime.day, currentTime.month, currentTime.year, temp);
 800423c:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8004240:	f897 0029 	ldrb.w	r0, [r7, #41]	@ 0x29
            snprintf(buffer, sizeof(buffer),
 8004244:	4604      	mov	r4, r0
                     currentTime.day, currentTime.month, currentTime.year, temp);
 8004246:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
            snprintf(buffer, sizeof(buffer),
 800424a:	4605      	mov	r5, r0
 800424c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8004250:	4606      	mov	r6, r0
 8004252:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8004256:	9605      	str	r6, [sp, #20]
 8004258:	9504      	str	r5, [sp, #16]
 800425a:	9403      	str	r4, [sp, #12]
 800425c:	9102      	str	r1, [sp, #8]
 800425e:	9201      	str	r2, [sp, #4]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	4663      	mov	r3, ip
 8004264:	4a43      	ldr	r2, [pc, #268]	@ (8004374 <CMD_RtcGet+0x350>)
 8004266:	2164      	movs	r1, #100	@ 0x64
 8004268:	f01d fe4c 	bl	8021f04 <sniprintf>
            embeddedCliPrint(cli, buffer);
 800426c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004270:	4619      	mov	r1, r3
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f001 f97a 	bl	800556c <embeddedCliPrint>
 8004278:	e003      	b.n	8004282 <CMD_RtcGet+0x25e>
        } else {
            embeddedCliPrint(cli, "Failed to get hard RTC");
 800427a:	4947      	ldr	r1, [pc, #284]	@ (8004398 <CMD_RtcGet+0x374>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f001 f975 	bl	800556c <embeddedCliPrint>
        }
        // Soft RTC
        s_DateTime rtc;
        Utils_GetRTC(&rtc);
 8004282:	f107 0320 	add.w	r3, r7, #32
 8004286:	4618      	mov	r0, r3
 8004288:	f005 ffe0 	bl	800a24c <Utils_GetRTC>
        snprintf(buffer, sizeof(buffer),
                 "--> Soft RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d",
                 rtc.hour, rtc.minute, rtc.second,
 800428c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
        snprintf(buffer, sizeof(buffer),
 8004290:	461e      	mov	r6, r3
                 rtc.hour, rtc.minute, rtc.second,
 8004292:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004296:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
                 rtc.day, rtc.month, rtc.year);
 800429a:	f897 1020 	ldrb.w	r1, [r7, #32]
 800429e:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
        snprintf(buffer, sizeof(buffer),
 80042a2:	4604      	mov	r4, r0
                 rtc.day, rtc.month, rtc.year);
 80042a4:	f897 0022 	ldrb.w	r0, [r7, #34]	@ 0x22
        snprintf(buffer, sizeof(buffer),
 80042a8:	4605      	mov	r5, r0
 80042aa:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80042ae:	9504      	str	r5, [sp, #16]
 80042b0:	9403      	str	r4, [sp, #12]
 80042b2:	9102      	str	r1, [sp, #8]
 80042b4:	9201      	str	r2, [sp, #4]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	4633      	mov	r3, r6
 80042ba:	4a31      	ldr	r2, [pc, #196]	@ (8004380 <CMD_RtcGet+0x35c>)
 80042bc:	2164      	movs	r1, #100	@ 0x64
 80042be:	f01d fe21 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80042c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80042c6:	4619      	mov	r1, r3
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f001 f94f 	bl	800556c <embeddedCliPrint>
        // Working uptime:
        uint32_t days = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
        uint8_t hours = 0, minutes = 0, seconds = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	76fb      	strb	r3, [r7, #27]
 80042d6:	2300      	movs	r3, #0
 80042d8:	76bb      	strb	r3, [r7, #26]
 80042da:	2300      	movs	r3, #0
 80042dc:	767b      	strb	r3, [r7, #25]
        Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 80042de:	f107 0319 	add.w	r3, r7, #25
 80042e2:	f107 021a 	add.w	r2, r7, #26
 80042e6:	f107 011b 	add.w	r1, r7, #27
 80042ea:	f107 001c 	add.w	r0, r7, #28
 80042ee:	f006 f807 	bl	800a300 <Utils_GetWorkingTime>
        snprintf(buffer, sizeof(buffer),
 80042f2:	7efb      	ldrb	r3, [r7, #27]
 80042f4:	461c      	mov	r4, r3
 80042f6:	7ebb      	ldrb	r3, [r7, #26]
 80042f8:	7e7a      	ldrb	r2, [r7, #25]
                        "--> Working Uptime: Time: %02d:%02d:%02d, Days: %d",
                        hours, minutes, seconds, (uint8_t)days);
 80042fa:	69f9      	ldr	r1, [r7, #28]
 80042fc:	b2c9      	uxtb	r1, r1
        snprintf(buffer, sizeof(buffer),
 80042fe:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8004302:	9102      	str	r1, [sp, #8]
 8004304:	9201      	str	r2, [sp, #4]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	4623      	mov	r3, r4
 800430a:	4a1f      	ldr	r2, [pc, #124]	@ (8004388 <CMD_RtcGet+0x364>)
 800430c:	2164      	movs	r1, #100	@ 0x64
 800430e:	f01d fdf9 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004312:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004316:	4619      	mov	r1, r3
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f001 f927 	bl	800556c <embeddedCliPrint>
        // Epoch
        uint32_t epoch = Utils_GetEpoch();
 800431e:	f005 ffe1 	bl	800a2e4 <Utils_GetEpoch>
 8004322:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
        snprintf(buffer, sizeof(buffer), "--> Epoch: %lu", (unsigned long)epoch);
 8004326:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800432a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800432e:	4a18      	ldr	r2, [pc, #96]	@ (8004390 <CMD_RtcGet+0x36c>)
 8004330:	2164      	movs	r1, #100	@ 0x64
 8004332:	f01d fde7 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004336:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800433a:	4619      	mov	r1, r3
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f001 f915 	bl	800556c <embeddedCliPrint>
 8004342:	e00c      	b.n	800435e <CMD_RtcGet+0x33a>
    } else {
        snprintf(buffer, sizeof(buffer), "Unknown mode. Use: rtc_get <hard|soft|work|epoch|all>");
 8004344:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004348:	4a14      	ldr	r2, [pc, #80]	@ (800439c <CMD_RtcGet+0x378>)
 800434a:	2164      	movs	r1, #100	@ 0x64
 800434c:	4618      	mov	r0, r3
 800434e:	f01d fdd9 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004352:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004356:	4619      	mov	r1, r3
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f001 f907 	bl	800556c <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 800435e:	4910      	ldr	r1, [pc, #64]	@ (80043a0 <CMD_RtcGet+0x37c>)
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f001 f903 	bl	800556c <embeddedCliPrint>
}
 8004366:	37c4      	adds	r7, #196	@ 0xc4
 8004368:	46bd      	mov	sp, r7
 800436a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436c:	080246e0 	.word	0x080246e0
 8004370:	0802470c 	.word	0x0802470c
 8004374:	08024714 	.word	0x08024714
 8004378:	0802475c 	.word	0x0802475c
 800437c:	08024778 	.word	0x08024778
 8004380:	08024780 	.word	0x08024780
 8004384:	080247bc 	.word	0x080247bc
 8004388:	080247c4 	.word	0x080247c4
 800438c:	080247f8 	.word	0x080247f8
 8004390:	08024800 	.word	0x08024800
 8004394:	08024810 	.word	0x08024810
 8004398:	08024814 	.word	0x08024814
 800439c:	0802482c 	.word	0x0802482c
 80043a0:	08023f8c 	.word	0x08023f8c

080043a4 <CMD_RtcSetEpoch>:

static void CMD_RtcSetEpoch(EmbeddedCli *cli, char *args, void *context) {
 80043a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043a6:	b0a9      	sub	sp, #164	@ 0xa4
 80043a8:	af06      	add	r7, sp, #24
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 80043b0:	2101      	movs	r1, #1
 80043b2:	68b8      	ldr	r0, [r7, #8]
 80043b4:	f001 f99c 	bl	80056f0 <embeddedCliGetToken>
 80043b8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    char buffer[100];
    if (arg1 == NULL) {
 80043bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <CMD_RtcSetEpoch+0x3c>
        snprintf(buffer, sizeof(buffer), "Usage: rtc_setepoch <epoch>");
 80043c4:	f107 0318 	add.w	r3, r7, #24
 80043c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004488 <CMD_RtcSetEpoch+0xe4>)
 80043ca:	2164      	movs	r1, #100	@ 0x64
 80043cc:	4618      	mov	r0, r3
 80043ce:	f01d fd99 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80043d2:	f107 0318 	add.w	r3, r7, #24
 80043d6:	4619      	mov	r1, r3
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f001 f8c7 	bl	800556c <embeddedCliPrint>
        return;
 80043de:	e050      	b.n	8004482 <CMD_RtcSetEpoch+0xde>
    }

    uint32_t epoch = (uint32_t)strtoul(arg1, NULL, 0);
 80043e0:	2200      	movs	r2, #0
 80043e2:	2100      	movs	r1, #0
 80043e4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80043e8:	f01d fcc0 	bl	8021d6c <strtoul>
 80043ec:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    if (epoch < EPOCH_OFFSET_UNIX) {
 80043f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043f4:	4a25      	ldr	r2, [pc, #148]	@ (800448c <CMD_RtcSetEpoch+0xe8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d80d      	bhi.n	8004416 <CMD_RtcSetEpoch+0x72>
        snprintf(buffer, sizeof(buffer), "Invalid epoch. Must be >= %lu", (unsigned long)EPOCH_OFFSET_UNIX);
 80043fa:	f107 0018 	add.w	r0, r7, #24
 80043fe:	4b24      	ldr	r3, [pc, #144]	@ (8004490 <CMD_RtcSetEpoch+0xec>)
 8004400:	4a24      	ldr	r2, [pc, #144]	@ (8004494 <CMD_RtcSetEpoch+0xf0>)
 8004402:	2164      	movs	r1, #100	@ 0x64
 8004404:	f01d fd7e 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004408:	f107 0318 	add.w	r3, r7, #24
 800440c:	4619      	mov	r1, r3
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f001 f8ac 	bl	800556c <embeddedCliPrint>
        return;
 8004414:	e035      	b.n	8004482 <CMD_RtcSetEpoch+0xde>
    }

    Utils_SetEpoch(epoch);
 8004416:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800441a:	f005 ff43 	bl	800a2a4 <Utils_SetEpoch>

    s_DateTime dt;
    EpochToDateTime(epoch - EPOCH_OFFSET_UNIX, &dt);
 800441e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004422:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <CMD_RtcSetEpoch+0xf4>)
 8004424:	4413      	add	r3, r2
 8004426:	f107 0210 	add.w	r2, r7, #16
 800442a:	4611      	mov	r1, r2
 800442c:	4618      	mov	r0, r3
 800442e:	f005 fc71 	bl	8009d14 <EpochToDateTime>
    RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 8004432:	f004 fa65 	bl	8008900 <RV3129_GetHandle>
 8004436:	67f8      	str	r0, [r7, #124]	@ 0x7c
    RV3129_SetTime(hrtc, &dt);
 8004438:	f107 0310 	add.w	r3, r7, #16
 800443c:	4619      	mov	r1, r3
 800443e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004440:	f004 fab4 	bl	80089ac <RV3129_SetTime>

    snprintf(buffer, sizeof(buffer),
             "--> RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8004444:	7cfb      	ldrb	r3, [r7, #19]
    snprintf(buffer, sizeof(buffer),
 8004446:	461e      	mov	r6, r3
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8004448:	7d3b      	ldrb	r3, [r7, #20]
 800444a:	7d7a      	ldrb	r2, [r7, #21]
 800444c:	7c39      	ldrb	r1, [r7, #16]
 800444e:	7c78      	ldrb	r0, [r7, #17]
    snprintf(buffer, sizeof(buffer),
 8004450:	4604      	mov	r4, r0
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8004452:	7cb8      	ldrb	r0, [r7, #18]
    snprintf(buffer, sizeof(buffer),
 8004454:	4605      	mov	r5, r0
 8004456:	f107 0018 	add.w	r0, r7, #24
 800445a:	9504      	str	r5, [sp, #16]
 800445c:	9403      	str	r4, [sp, #12]
 800445e:	9102      	str	r1, [sp, #8]
 8004460:	9201      	str	r2, [sp, #4]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	4633      	mov	r3, r6
 8004466:	4a0d      	ldr	r2, [pc, #52]	@ (800449c <CMD_RtcSetEpoch+0xf8>)
 8004468:	2164      	movs	r1, #100	@ 0x64
 800446a:	f01d fd4b 	bl	8021f04 <sniprintf>
    embeddedCliPrint(cli, buffer);
 800446e:	f107 0318 	add.w	r3, r7, #24
 8004472:	4619      	mov	r1, r3
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f001 f879 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 800447a:	4909      	ldr	r1, [pc, #36]	@ (80044a0 <CMD_RtcSetEpoch+0xfc>)
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f001 f875 	bl	800556c <embeddedCliPrint>
}
 8004482:	378c      	adds	r7, #140	@ 0x8c
 8004484:	46bd      	mov	sp, r7
 8004486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004488:	08024864 	.word	0x08024864
 800448c:	386d437f 	.word	0x386d437f
 8004490:	386d4380 	.word	0x386d4380
 8004494:	08024880 	.word	0x08024880
 8004498:	c792bc80 	.word	0xc792bc80
 800449c:	080246b0 	.word	0x080246b0
 80044a0:	08023f8c 	.word	0x08023f8c

080044a4 <CMD_FramWrite>:


static void CMD_FramWrite(EmbeddedCli *cli, char *args, void *context) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b0a4      	sub	sp, #144	@ 0x90
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // Address
 80044b0:	2101      	movs	r1, #1
 80044b2:	68b8      	ldr	r0, [r7, #8]
 80044b4:	f001 f91c 	bl	80056f0 <embeddedCliGetToken>
 80044b8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    const char *arg2 = embeddedCliGetToken(args, 2); // Value
 80044bc:	2102      	movs	r1, #2
 80044be:	68b8      	ldr	r0, [r7, #8]
 80044c0:	f001 f916 	bl	80056f0 <embeddedCliGetToken>
 80044c4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    char buffer[100];

    if (arg1 == NULL || arg2 == NULL) {
 80044c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <CMD_FramWrite+0x34>
 80044d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10d      	bne.n	80044f4 <CMD_FramWrite+0x50>
        snprintf(buffer, sizeof(buffer), "Usage: fram_write [address] [value]");
 80044d8:	f107 0314 	add.w	r3, r7, #20
 80044dc:	4a25      	ldr	r2, [pc, #148]	@ (8004574 <CMD_FramWrite+0xd0>)
 80044de:	2164      	movs	r1, #100	@ 0x64
 80044e0:	4618      	mov	r0, r3
 80044e2:	f01d fd0f 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80044e6:	f107 0314 	add.w	r3, r7, #20
 80044ea:	4619      	mov	r1, r3
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f001 f83d 	bl	800556c <embeddedCliPrint>
 80044f2:	e03c      	b.n	800456e <CMD_FramWrite+0xca>
        return;
    }

    uint16_t address = (uint16_t)strtol(arg1, NULL, 0);
 80044f4:	2200      	movs	r2, #0
 80044f6:	2100      	movs	r1, #0
 80044f8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80044fc:	f01d fbbe 	bl	8021c7c <strtol>
 8004500:	4603      	mov	r3, r0
 8004502:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    uint8_t value = (uint8_t)strtol(arg2, NULL, 0);
 8004506:	2200      	movs	r2, #0
 8004508:	2100      	movs	r1, #0
 800450a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800450e:	f01d fbb5 	bl	8021c7c <strtol>
 8004512:	4603      	mov	r3, r0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	74fb      	strb	r3, [r7, #19]

    FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 8004518:	f004 fb22 	bl	8008b60 <FRAM_SPI_GetHandle>
 800451c:	67b8      	str	r0, [r7, #120]	@ 0x78
    if (FRAM_SPI_WriteMem(hfram, address, &value, 1) == E_OK) {
 800451e:	f8b7 107e 	ldrh.w	r1, [r7, #126]	@ 0x7e
 8004522:	f107 0213 	add.w	r2, r7, #19
 8004526:	2301      	movs	r3, #1
 8004528:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800452a:	f004 fb81 	bl	8008c30 <FRAM_SPI_WriteMem>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <CMD_FramWrite+0xa6>
        snprintf(buffer, sizeof(buffer), "Write OK: Addr 0x%04X = 0x%02X", address, value);
 8004534:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004538:	7cfa      	ldrb	r2, [r7, #19]
 800453a:	f107 0014 	add.w	r0, r7, #20
 800453e:	9200      	str	r2, [sp, #0]
 8004540:	4a0d      	ldr	r2, [pc, #52]	@ (8004578 <CMD_FramWrite+0xd4>)
 8004542:	2164      	movs	r1, #100	@ 0x64
 8004544:	f01d fcde 	bl	8021f04 <sniprintf>
 8004548:	e007      	b.n	800455a <CMD_FramWrite+0xb6>
    } else {
        snprintf(buffer, sizeof(buffer), "FRAM Write Error at 0x%04X", address);
 800454a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800454e:	f107 0014 	add.w	r0, r7, #20
 8004552:	4a0a      	ldr	r2, [pc, #40]	@ (800457c <CMD_FramWrite+0xd8>)
 8004554:	2164      	movs	r1, #100	@ 0x64
 8004556:	f01d fcd5 	bl	8021f04 <sniprintf>
    }

    embeddedCliPrint(cli, buffer);
 800455a:	f107 0314 	add.w	r3, r7, #20
 800455e:	4619      	mov	r1, r3
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f001 f803 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8004566:	4906      	ldr	r1, [pc, #24]	@ (8004580 <CMD_FramWrite+0xdc>)
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 ffff 	bl	800556c <embeddedCliPrint>
}
 800456e:	3788      	adds	r7, #136	@ 0x88
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	080248a0 	.word	0x080248a0
 8004578:	080248c4 	.word	0x080248c4
 800457c:	080248e4 	.word	0x080248e4
 8004580:	08023f8c 	.word	0x08023f8c

08004584 <CMD_FramRead>:

static void CMD_FramRead(EmbeddedCli *cli, char *args, void *context) {
 8004584:	b580      	push	{r7, lr}
 8004586:	b0a4      	sub	sp, #144	@ 0x90
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // Address
 8004590:	2101      	movs	r1, #1
 8004592:	68b8      	ldr	r0, [r7, #8]
 8004594:	f001 f8ac 	bl	80056f0 <embeddedCliGetToken>
 8004598:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    char buffer[100];

    if (arg1 == NULL) {
 800459c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <CMD_FramRead+0x3c>
        snprintf(buffer, sizeof(buffer), "Usage: fram_read [address]");
 80045a4:	f107 0318 	add.w	r3, r7, #24
 80045a8:	4a22      	ldr	r2, [pc, #136]	@ (8004634 <CMD_FramRead+0xb0>)
 80045aa:	2164      	movs	r1, #100	@ 0x64
 80045ac:	4618      	mov	r0, r3
 80045ae:	f01d fca9 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80045b2:	f107 0318 	add.w	r3, r7, #24
 80045b6:	4619      	mov	r1, r3
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 ffd7 	bl	800556c <embeddedCliPrint>
 80045be:	e035      	b.n	800462c <CMD_FramRead+0xa8>
        return;
    }

    uint16_t address = (uint16_t)strtol(arg1, NULL, 0);
 80045c0:	2200      	movs	r2, #0
 80045c2:	2100      	movs	r1, #0
 80045c4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80045c8:	f01d fb58 	bl	8021c7c <strtol>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    uint8_t readData = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	75fb      	strb	r3, [r7, #23]

    FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 80045d6:	f004 fac3 	bl	8008b60 <FRAM_SPI_GetHandle>
 80045da:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (FRAM_SPI_ReadMem(hfram, address, &readData, 1) == E_OK) {
 80045dc:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 80045e0:	f107 0217 	add.w	r2, r7, #23
 80045e4:	2301      	movs	r3, #1
 80045e6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80045e8:	f004 fbb1 	bl	8008d4e <FRAM_SPI_ReadMem>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <CMD_FramRead+0x84>
        snprintf(buffer, sizeof(buffer), "Read OK: Addr 0x%04X = 0x%02X", address, readData);
 80045f2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80045f6:	7dfa      	ldrb	r2, [r7, #23]
 80045f8:	f107 0018 	add.w	r0, r7, #24
 80045fc:	9200      	str	r2, [sp, #0]
 80045fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004638 <CMD_FramRead+0xb4>)
 8004600:	2164      	movs	r1, #100	@ 0x64
 8004602:	f01d fc7f 	bl	8021f04 <sniprintf>
 8004606:	e007      	b.n	8004618 <CMD_FramRead+0x94>
    } else {
        snprintf(buffer, sizeof(buffer), "FRAM Read Error at 0x%04X", address);
 8004608:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800460c:	f107 0018 	add.w	r0, r7, #24
 8004610:	4a0a      	ldr	r2, [pc, #40]	@ (800463c <CMD_FramRead+0xb8>)
 8004612:	2164      	movs	r1, #100	@ 0x64
 8004614:	f01d fc76 	bl	8021f04 <sniprintf>
    }

    embeddedCliPrint(cli, buffer);
 8004618:	f107 0318 	add.w	r3, r7, #24
 800461c:	4619      	mov	r1, r3
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 ffa4 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8004624:	4906      	ldr	r1, [pc, #24]	@ (8004640 <CMD_FramRead+0xbc>)
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 ffa0 	bl	800556c <embeddedCliPrint>
}
 800462c:	3788      	adds	r7, #136	@ 0x88
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	08024900 	.word	0x08024900
 8004638:	0802491c 	.word	0x0802491c
 800463c:	0802493c 	.word	0x0802493c
 8004640:	08023f8c 	.word	0x08023f8c

08004644 <CMD_ls>:

static void CMD_ls(EmbeddedCli *cli, char *args, void *context) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
    FS_ListFiles_path(cli);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f003 f981 	bl	8007958 <FS_ListFiles_path>
    embeddedCliPrint(cli, "");
 8004656:	4904      	ldr	r1, [pc, #16]	@ (8004668 <CMD_ls+0x24>)
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 ff87 	bl	800556c <embeddedCliPrint>
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	08023f8c 	.word	0x08023f8c

0800466c <CMD_sd_lockin>:

static void CMD_sd_lockin(EmbeddedCli *cli, char *args, void *context) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
    SD_Lockin();
 8004678:	f002 fe12 	bl	80072a0 <SD_Lockin>
    embeddedCliPrint(cli, "SD filesystem locked-in");
 800467c:	490d      	ldr	r1, [pc, #52]	@ (80046b4 <CMD_sd_lockin+0x48>)
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 ff74 	bl	800556c <embeddedCliPrint>
	Std_ReturnType ret = Link_SDFS_Driver();
 8004684:	f002 ff80 	bl	8007588 <Link_SDFS_Driver>
 8004688:	4603      	mov	r3, r0
 800468a:	75fb      	strb	r3, [r7, #23]
	if(ret != E_OK){
 800468c:	7dfb      	ldrb	r3, [r7, #23]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <CMD_sd_lockin+0x30>
        embeddedCliPrint(cli, "[Link FATFS Fail]");
 8004692:	4909      	ldr	r1, [pc, #36]	@ (80046b8 <CMD_sd_lockin+0x4c>)
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 ff69 	bl	800556c <embeddedCliPrint>
 800469a:	e003      	b.n	80046a4 <CMD_sd_lockin+0x38>
	}else{
        embeddedCliPrint(cli, "[Link FATFS Successfully]");
 800469c:	4907      	ldr	r1, [pc, #28]	@ (80046bc <CMD_sd_lockin+0x50>)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 ff64 	bl	800556c <embeddedCliPrint>
	}
    embeddedCliPrint(cli, "");
 80046a4:	4906      	ldr	r1, [pc, #24]	@ (80046c0 <CMD_sd_lockin+0x54>)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 ff60 	bl	800556c <embeddedCliPrint>
}
 80046ac:	bf00      	nop
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	08024958 	.word	0x08024958
 80046b8:	08024970 	.word	0x08024970
 80046bc:	08024984 	.word	0x08024984
 80046c0:	08023f8c 	.word	0x08023f8c

080046c4 <CMD_sd_release>:

static void CMD_sd_release(EmbeddedCli *cli, char *args, void *context) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
    SD_Release();
 80046d0:	f002 fdf8 	bl	80072c4 <SD_Release>
    embeddedCliPrint(cli, "SD filesystem released");
 80046d4:	4905      	ldr	r1, [pc, #20]	@ (80046ec <CMD_sd_release+0x28>)
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 ff48 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80046dc:	4904      	ldr	r1, [pc, #16]	@ (80046f0 <CMD_sd_release+0x2c>)
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 ff44 	bl	800556c <embeddedCliPrint>
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	080249a0 	.word	0x080249a0
 80046f0:	08023f8c 	.word	0x08023f8c

080046f4 <CMD_vim_bypass>:

static void CMD_vim_bypass(EmbeddedCli *cli, char *args, void *context) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b0a6      	sub	sp, #152	@ 0x98
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
    const char *filename = embeddedCliGetToken(args, 1);
 8004700:	2101      	movs	r1, #1
 8004702:	68b8      	ldr	r0, [r7, #8]
 8004704:	f000 fff4 	bl	80056f0 <embeddedCliGetToken>
 8004708:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    const char *content = embeddedCliGetToken(args, 2);
 800470c:	2102      	movs	r1, #2
 800470e:	68b8      	ldr	r0, [r7, #8]
 8004710:	f000 ffee 	bl	80056f0 <embeddedCliGetToken>
 8004714:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    char buffer[128];

    if (filename == NULL || content == NULL) {
 8004718:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <CMD_vim_bypass+0x34>
 8004720:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004724:	2b00      	cmp	r3, #0
 8004726:	d104      	bne.n	8004732 <CMD_vim_bypass+0x3e>
        embeddedCliPrint(cli, "Usage: vim <filename> \"content\"");
 8004728:	4911      	ldr	r1, [pc, #68]	@ (8004770 <CMD_vim_bypass+0x7c>)
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 ff1e 	bl	800556c <embeddedCliPrint>
 8004730:	e01b      	b.n	800476a <CMD_vim_bypass+0x76>
        return;
    }

    if (Vim_SDFS(cli, filename, content) == 0) {
 8004732:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004736:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f003 f820 	bl	8007780 <Vim_SDFS>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10d      	bne.n	8004762 <CMD_vim_bypass+0x6e>
        snprintf(buffer, sizeof(buffer), "Content written to %s", filename);
 8004746:	f107 0010 	add.w	r0, r7, #16
 800474a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800474e:	4a09      	ldr	r2, [pc, #36]	@ (8004774 <CMD_vim_bypass+0x80>)
 8004750:	2180      	movs	r1, #128	@ 0x80
 8004752:	f01d fbd7 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004756:	f107 0310 	add.w	r3, r7, #16
 800475a:	4619      	mov	r1, r3
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 ff05 	bl	800556c <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 8004762:	4905      	ldr	r1, [pc, #20]	@ (8004778 <CMD_vim_bypass+0x84>)
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 ff01 	bl	800556c <embeddedCliPrint>
}
 800476a:	3798      	adds	r7, #152	@ 0x98
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	080249b8 	.word	0x080249b8
 8004774:	080249d8 	.word	0x080249d8
 8004778:	08023f8c 	.word	0x08023f8c

0800477c <CMD_vim>:

static void CMD_vim(EmbeddedCli *cli, char *args, void *context) {
 800477c:	b580      	push	{r7, lr}
 800477e:	b0a8      	sub	sp, #160	@ 0xa0
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
    const char *filename = embeddedCliGetToken(args, 1);
 8004788:	2101      	movs	r1, #1
 800478a:	68b8      	ldr	r0, [r7, #8]
 800478c:	f000 ffb0 	bl	80056f0 <embeddedCliGetToken>
 8004790:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    const char *content = embeddedCliGetToken(args, 2);
 8004794:	2102      	movs	r1, #2
 8004796:	68b8      	ldr	r0, [r7, #8]
 8004798:	f000 ffaa 	bl	80056f0 <embeddedCliGetToken>
 800479c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    char buffer[128];

    if (filename == NULL || content == NULL) {
 80047a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <CMD_vim+0x34>
 80047a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <CMD_vim+0x3e>
        embeddedCliPrint(cli, "Usage: vim <filename> \"content\"");
 80047b0:	491c      	ldr	r1, [pc, #112]	@ (8004824 <CMD_vim+0xa8>)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 feda 	bl	800556c <embeddedCliPrint>
        return;
 80047b8:	e031      	b.n	800481e <CMD_vim+0xa2>
    }

    size_t content_len = strlen(content);
 80047ba:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80047be:	f7fb fd99 	bl	80002f4 <strlen>
 80047c2:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if (content_len > (8 * 1024) ){
 80047c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ce:	d904      	bls.n	80047da <CMD_vim+0x5e>
        embeddedCliPrint(cli, "Content exceeds 8KB limit");
 80047d0:	4915      	ldr	r1, [pc, #84]	@ (8004828 <CMD_vim+0xac>)
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 feca 	bl	800556c <embeddedCliPrint>
        return;
 80047d8:	e021      	b.n	800481e <CMD_vim+0xa2>
    }

    if (FS_Request_Write(filename, (uint8_t*)content, content_len) == E_OK) {
 80047da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047de:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80047e2:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80047e6:	f002 fe27 	bl	8007438 <FS_Request_Write>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10e      	bne.n	800480e <CMD_vim+0x92>
        snprintf(buffer, sizeof(buffer), "Content written to %s", filename);
 80047f0:	f107 0014 	add.w	r0, r7, #20
 80047f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047f8:	4a0c      	ldr	r2, [pc, #48]	@ (800482c <CMD_vim+0xb0>)
 80047fa:	2180      	movs	r1, #128	@ 0x80
 80047fc:	f01d fb82 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004800:	f107 0314 	add.w	r3, r7, #20
 8004804:	4619      	mov	r1, r3
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 feb0 	bl	800556c <embeddedCliPrint>
 800480c:	e003      	b.n	8004816 <CMD_vim+0x9a>
    } else {
        embeddedCliPrint(cli, "Failed to write to file");
 800480e:	4908      	ldr	r1, [pc, #32]	@ (8004830 <CMD_vim+0xb4>)
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 feab 	bl	800556c <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 8004816:	4907      	ldr	r1, [pc, #28]	@ (8004834 <CMD_vim+0xb8>)
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 fea7 	bl	800556c <embeddedCliPrint>
}
 800481e:	37a0      	adds	r7, #160	@ 0xa0
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	080249b8 	.word	0x080249b8
 8004828:	080249f0 	.word	0x080249f0
 800482c:	080249d8 	.word	0x080249d8
 8004830:	08024a0c 	.word	0x08024a0c
 8004834:	08023f8c 	.word	0x08023f8c

08004838 <CMD_cat>:

static void CMD_cat(EmbeddedCli *cli, char *args, void *context) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
    const char *filename = embeddedCliGetToken(args, 1);
 8004844:	2101      	movs	r1, #1
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	f000 ff52 	bl	80056f0 <embeddedCliGetToken>
 800484c:	6178      	str	r0, [r7, #20]

    if (filename == NULL) {
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <CMD_cat+0x26>
        embeddedCliPrint(cli, "Usage: cat <filename>");
 8004854:	4907      	ldr	r1, [pc, #28]	@ (8004874 <CMD_cat+0x3c>)
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 fe88 	bl	800556c <embeddedCliPrint>
        return;
 800485c:	e007      	b.n	800486e <CMD_cat+0x36>
    }

    Cat_SDFS(cli, filename);
 800485e:	6979      	ldr	r1, [r7, #20]
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f002 feb3 	bl	80075cc <Cat_SDFS>
    embeddedCliPrint(cli, "");
 8004866:	4904      	ldr	r1, [pc, #16]	@ (8004878 <CMD_cat+0x40>)
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fe7f 	bl	800556c <embeddedCliPrint>
}
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	08024a24 	.word	0x08024a24
 8004878:	08023f8c 	.word	0x08023f8c

0800487c <CMD_Cm4Rst>:

static void CMD_Cm4Rst(EmbeddedCli *cli, char *args, void *context) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
    GPIO_SetLow(CM4_RST_Port, CM4_RST_Pin);
 8004888:	2180      	movs	r1, #128	@ 0x80
 800488a:	480b      	ldr	r0, [pc, #44]	@ (80048b8 <CMD_Cm4Rst+0x3c>)
 800488c:	f7fe fcaa 	bl	80031e4 <LL_GPIO_ResetOutputPin>
    vTaskDelay(pdMS_TO_TICKS(100));
 8004890:	2064      	movs	r0, #100	@ 0x64
 8004892:	f00d fa5d 	bl	8011d50 <vTaskDelay>
    GPIO_SetHigh(CM4_RST_Port, CM4_RST_Pin);
 8004896:	2180      	movs	r1, #128	@ 0x80
 8004898:	4807      	ldr	r0, [pc, #28]	@ (80048b8 <CMD_Cm4Rst+0x3c>)
 800489a:	f7fe fc95 	bl	80031c8 <LL_GPIO_SetOutputPin>
    embeddedCliPrint(cli, "CM4 reset pulse triggered.");
 800489e:	4907      	ldr	r1, [pc, #28]	@ (80048bc <CMD_Cm4Rst+0x40>)
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fe63 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80048a6:	4906      	ldr	r1, [pc, #24]	@ (80048c0 <CMD_Cm4Rst+0x44>)
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 fe5f 	bl	800556c <embeddedCliPrint>
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	58021800 	.word	0x58021800
 80048bc:	08024a3c 	.word	0x08024a3c
 80048c0:	08023f8c 	.word	0x08023f8c

080048c4 <CMD_Cm4Dis>:

static void CMD_Cm4Dis(EmbeddedCli *cli, char *args, void *context) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
    GPIO_SetLow(CM4_ENA_Port, CM4_ENA_Pin);
 80048d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048d4:	4807      	ldr	r0, [pc, #28]	@ (80048f4 <CMD_Cm4Dis+0x30>)
 80048d6:	f7fe fc85 	bl	80031e4 <LL_GPIO_ResetOutputPin>
    embeddedCliPrint(cli, "CM4 power disabled (enable driven low).");
 80048da:	4907      	ldr	r1, [pc, #28]	@ (80048f8 <CMD_Cm4Dis+0x34>)
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fe45 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80048e2:	4906      	ldr	r1, [pc, #24]	@ (80048fc <CMD_Cm4Dis+0x38>)
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fe41 	bl	800556c <embeddedCliPrint>
}
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	58021800 	.word	0x58021800
 80048f8:	08024a58 	.word	0x08024a58
 80048fc:	08023f8c 	.word	0x08023f8c

08004900 <CMD_Cm4Ena>:

static void CMD_Cm4Ena(EmbeddedCli *cli, char *args, void *context) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
    GPIO_SetHigh(CM4_ENA_Port, CM4_ENA_Pin);
 800490c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004910:	4807      	ldr	r0, [pc, #28]	@ (8004930 <CMD_Cm4Ena+0x30>)
 8004912:	f7fe fc59 	bl	80031c8 <LL_GPIO_SetOutputPin>
    embeddedCliPrint(cli, "CM4 power enabled (enable driven high).");
 8004916:	4907      	ldr	r1, [pc, #28]	@ (8004934 <CMD_Cm4Ena+0x34>)
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fe27 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 800491e:	4906      	ldr	r1, [pc, #24]	@ (8004938 <CMD_Cm4Ena+0x38>)
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fe23 	bl	800556c <embeddedCliPrint>
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	58021800 	.word	0x58021800
 8004934:	08024a80 	.word	0x08024a80
 8004938:	08023f8c 	.word	0x08023f8c

0800493c <CMD_ExpForward>:

static void CMD_ExpForward(EmbeddedCli *cli, char *args, void *context) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
    const char *param = embeddedCliGetToken(args, 1);
 8004948:	2101      	movs	r1, #1
 800494a:	68b8      	ldr	r0, [r7, #8]
 800494c:	f000 fed0 	bl	80056f0 <embeddedCliGetToken>
 8004950:	6178      	str	r0, [r7, #20]
    if (param == NULL) {
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <CMD_ExpForward+0x26>
        embeddedCliPrint(cli, "Usage: exp_forward <cm4|usb|normal>");
 8004958:	491e      	ldr	r1, [pc, #120]	@ (80049d4 <CMD_ExpForward+0x98>)
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fe06 	bl	800556c <embeddedCliPrint>
        return;
 8004960:	e035      	b.n	80049ce <CMD_ExpForward+0x92>
    }

    if (strcmp(param, "cm4") == 0) {
 8004962:	491d      	ldr	r1, [pc, #116]	@ (80049d8 <CMD_ExpForward+0x9c>)
 8004964:	6978      	ldr	r0, [r7, #20]
 8004966:	f7fb fcbb 	bl	80002e0 <strcmp>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d107      	bne.n	8004980 <CMD_ExpForward+0x44>
        embeddedCliPrint(cli, "Forward mode enabled: CM4 <-> EXP forwarding.");
 8004970:	491a      	ldr	r1, [pc, #104]	@ (80049dc <CMD_ExpForward+0xa0>)
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fdfa 	bl	800556c <embeddedCliPrint>
        ForwardMode_Set(FORWARD_MODE_UART);
 8004978:	2001      	movs	r0, #1
 800497a:	f7fc f905 	bl	8000b88 <ForwardMode_Set>
 800497e:	e022      	b.n	80049c6 <CMD_ExpForward+0x8a>
    } else if (strcmp(param, "usb") == 0) {
 8004980:	4917      	ldr	r1, [pc, #92]	@ (80049e0 <CMD_ExpForward+0xa4>)
 8004982:	6978      	ldr	r0, [r7, #20]
 8004984:	f7fb fcac 	bl	80002e0 <strcmp>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d107      	bne.n	800499e <CMD_ExpForward+0x62>
        embeddedCliPrint(cli, "Forward mode enabled: CDC <-> EXP forwarding.");
 800498e:	4915      	ldr	r1, [pc, #84]	@ (80049e4 <CMD_ExpForward+0xa8>)
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fdeb 	bl	800556c <embeddedCliPrint>
        ForwardMode_Set(FORWARD_MODE_USB);
 8004996:	2002      	movs	r0, #2
 8004998:	f7fc f8f6 	bl	8000b88 <ForwardMode_Set>
 800499c:	e013      	b.n	80049c6 <CMD_ExpForward+0x8a>
    } else if (strcmp(param, "normal") == 0) {
 800499e:	4912      	ldr	r1, [pc, #72]	@ (80049e8 <CMD_ExpForward+0xac>)
 80049a0:	6978      	ldr	r0, [r7, #20]
 80049a2:	f7fb fc9d 	bl	80002e0 <strcmp>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <CMD_ExpForward+0x80>
        embeddedCliPrint(cli, "Forward mode disabled. Operating in NORMAL mode.");
 80049ac:	490f      	ldr	r1, [pc, #60]	@ (80049ec <CMD_ExpForward+0xb0>)
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fddc 	bl	800556c <embeddedCliPrint>
        ForwardMode_Set(FORWARD_MODE_NORMAL);
 80049b4:	2000      	movs	r0, #0
 80049b6:	f7fc f8e7 	bl	8000b88 <ForwardMode_Set>
 80049ba:	e004      	b.n	80049c6 <CMD_ExpForward+0x8a>
    } else {
        embeddedCliPrint(cli, "Invalid parameter. Usage: exp_forward <cm4|usb|normal>");
 80049bc:	490c      	ldr	r1, [pc, #48]	@ (80049f0 <CMD_ExpForward+0xb4>)
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fdd4 	bl	800556c <embeddedCliPrint>
        return;
 80049c4:	e003      	b.n	80049ce <CMD_ExpForward+0x92>
    }

    embeddedCliPrint(cli, "");
 80049c6:	490b      	ldr	r1, [pc, #44]	@ (80049f4 <CMD_ExpForward+0xb8>)
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fdcf 	bl	800556c <embeddedCliPrint>
}
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	08024aa8 	.word	0x08024aa8
 80049d8:	08024acc 	.word	0x08024acc
 80049dc:	08024ad0 	.word	0x08024ad0
 80049e0:	08024b00 	.word	0x08024b00
 80049e4:	08024b04 	.word	0x08024b04
 80049e8:	08024b34 	.word	0x08024b34
 80049ec:	08024b3c 	.word	0x08024b3c
 80049f0:	08024b70 	.word	0x08024b70
 80049f4:	08023f8c 	.word	0x08023f8c

080049f8 <CMD_ExpListen>:

static void CMD_ExpListen(EmbeddedCli *cli, char *args, void *context) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
    const char *param = embeddedCliGetToken(args, 1);
 8004a04:	2101      	movs	r1, #1
 8004a06:	68b8      	ldr	r0, [r7, #8]
 8004a08:	f000 fe72 	bl	80056f0 <embeddedCliGetToken>
 8004a0c:	6178      	str	r0, [r7, #20]
    if (param == NULL) {
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <CMD_ExpListen+0x26>
        embeddedCliPrint(cli, "Usage: exp_listen <cm4|usb|off>");
 8004a14:	491e      	ldr	r1, [pc, #120]	@ (8004a90 <CMD_ExpListen+0x98>)
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fda8 	bl	800556c <embeddedCliPrint>
        return;
 8004a1c:	e034      	b.n	8004a88 <CMD_ExpListen+0x90>
    }

    if (strcmp(param, "cm4") == 0) {
 8004a1e:	491d      	ldr	r1, [pc, #116]	@ (8004a94 <CMD_ExpListen+0x9c>)
 8004a20:	6978      	ldr	r0, [r7, #20]
 8004a22:	f7fb fc5d 	bl	80002e0 <strcmp>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d107      	bne.n	8004a3c <CMD_ExpListen+0x44>
        ForwardMode_Set(FORWARD_MODE_LISTEN_CM4);
 8004a2c:	2003      	movs	r0, #3
 8004a2e:	f7fc f8ab 	bl	8000b88 <ForwardMode_Set>
        embeddedCliPrint(cli, "Listen mode enabled: EXP data from UART7 will be sent to UART_DEBUG.");
 8004a32:	4919      	ldr	r1, [pc, #100]	@ (8004a98 <CMD_ExpListen+0xa0>)
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fd99 	bl	800556c <embeddedCliPrint>
 8004a3a:	e021      	b.n	8004a80 <CMD_ExpListen+0x88>
    } else if (strcmp(param, "usb") == 0) {
 8004a3c:	4917      	ldr	r1, [pc, #92]	@ (8004a9c <CMD_ExpListen+0xa4>)
 8004a3e:	6978      	ldr	r0, [r7, #20]
 8004a40:	f7fb fc4e 	bl	80002e0 <strcmp>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d107      	bne.n	8004a5a <CMD_ExpListen+0x62>
        ForwardMode_Set(FORWARD_MODE_LISTEN_USB);
 8004a4a:	2004      	movs	r0, #4
 8004a4c:	f7fc f89c 	bl	8000b88 <ForwardMode_Set>
        embeddedCliPrint(cli, "Listen mode enabled: EXP data from UART7 will be sent to CDC.");
 8004a50:	4913      	ldr	r1, [pc, #76]	@ (8004aa0 <CMD_ExpListen+0xa8>)
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 fd8a 	bl	800556c <embeddedCliPrint>
 8004a58:	e012      	b.n	8004a80 <CMD_ExpListen+0x88>
    } else if (strcmp(param, "off") == 0) {
 8004a5a:	4912      	ldr	r1, [pc, #72]	@ (8004aa4 <CMD_ExpListen+0xac>)
 8004a5c:	6978      	ldr	r0, [r7, #20]
 8004a5e:	f7fb fc3f 	bl	80002e0 <strcmp>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d107      	bne.n	8004a78 <CMD_ExpListen+0x80>
        ForwardMode_Set(FORWARD_MODE_NORMAL);
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f7fc f88d 	bl	8000b88 <ForwardMode_Set>
        embeddedCliPrint(cli, "Listen mode disabled. Operating in NORMAL mode.");
 8004a6e:	490e      	ldr	r1, [pc, #56]	@ (8004aa8 <CMD_ExpListen+0xb0>)
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fd7b 	bl	800556c <embeddedCliPrint>
 8004a76:	e003      	b.n	8004a80 <CMD_ExpListen+0x88>
    } else {
        embeddedCliPrint(cli, "Invalid parameter. Usage: exp_listen <cm4|usb|off>");
 8004a78:	490c      	ldr	r1, [pc, #48]	@ (8004aac <CMD_ExpListen+0xb4>)
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fd76 	bl	800556c <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 8004a80:	490b      	ldr	r1, [pc, #44]	@ (8004ab0 <CMD_ExpListen+0xb8>)
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fd72 	bl	800556c <embeddedCliPrint>
}
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	08024ba8 	.word	0x08024ba8
 8004a94:	08024acc 	.word	0x08024acc
 8004a98:	08024bc8 	.word	0x08024bc8
 8004a9c:	08024b00 	.word	0x08024b00
 8004aa0:	08024c10 	.word	0x08024c10
 8004aa4:	08024c50 	.word	0x08024c50
 8004aa8:	08024c54 	.word	0x08024c54
 8004aac:	08024c84 	.word	0x08024c84
 8004ab0:	08023f8c 	.word	0x08023f8c

08004ab4 <CMD_ExpSend>:

static void CMD_ExpSend(EmbeddedCli *cli, char *args, void *context) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
    const char *msg = embeddedCliGetToken(args, 1);
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	68b8      	ldr	r0, [r7, #8]
 8004ac4:	f000 fe14 	bl	80056f0 <embeddedCliGetToken>
 8004ac8:	61b8      	str	r0, [r7, #24]
    if (msg == NULL) {
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <CMD_ExpSend+0x26>
        embeddedCliPrint(cli, "Usage: exp_send \"message\"");
 8004ad0:	4916      	ldr	r1, [pc, #88]	@ (8004b2c <CMD_ExpSend+0x78>)
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fd4a 	bl	800556c <embeddedCliPrint>
        return;
 8004ad8:	e025      	b.n	8004b26 <CMD_ExpSend+0x72>
    }
    size_t len = strlen(msg);
 8004ada:	69b8      	ldr	r0, [r7, #24]
 8004adc:	f7fb fc0a 	bl	80002f4 <strlen>
 8004ae0:	6178      	str	r0, [r7, #20]
    UART_Driver_Write(UART_EXP, '\r');
 8004ae2:	210d      	movs	r1, #13
 8004ae4:	4812      	ldr	r0, [pc, #72]	@ (8004b30 <CMD_ExpSend+0x7c>)
 8004ae6:	f7fd fdf5 	bl	80026d4 <UART_Driver_Write>
    for (size_t i = 0; i < len; i++) {
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	e00a      	b.n	8004b06 <CMD_ExpSend+0x52>
        UART_Driver_Write(UART_EXP, (uint8_t)msg[i]);
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	4619      	mov	r1, r3
 8004afa:	480d      	ldr	r0, [pc, #52]	@ (8004b30 <CMD_ExpSend+0x7c>)
 8004afc:	f7fd fdea 	bl	80026d4 <UART_Driver_Write>
    for (size_t i = 0; i < len; i++) {
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	3301      	adds	r3, #1
 8004b04:	61fb      	str	r3, [r7, #28]
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d3f0      	bcc.n	8004af0 <CMD_ExpSend+0x3c>
    }
    UART_Driver_Write(UART_EXP, '\r');
 8004b0e:	210d      	movs	r1, #13
 8004b10:	4807      	ldr	r0, [pc, #28]	@ (8004b30 <CMD_ExpSend+0x7c>)
 8004b12:	f7fd fddf 	bl	80026d4 <UART_Driver_Write>
    embeddedCliPrint(cli, "Message sent to EXP via UART7.");
 8004b16:	4907      	ldr	r1, [pc, #28]	@ (8004b34 <CMD_ExpSend+0x80>)
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fd27 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8004b1e:	4906      	ldr	r1, [pc, #24]	@ (8004b38 <CMD_ExpSend+0x84>)
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fd23 	bl	800556c <embeddedCliPrint>
}
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	08024cb8 	.word	0x08024cb8
 8004b30:	40007800 	.word	0x40007800
 8004b34:	08024cd4 	.word	0x08024cd4
 8004b38:	08023f8c 	.word	0x08023f8c

08004b3c <callback_every>:

void callback_every(void *context) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = (EmbeddedCli *)context;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60fb      	str	r3, [r7, #12]
    embeddedCliPrint(cli, "Callback Every");
 8004b48:	4903      	ldr	r1, [pc, #12]	@ (8004b58 <callback_every+0x1c>)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fd0e 	bl	800556c <embeddedCliPrint>
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	08024cf4 	.word	0x08024cf4

08004b5c <callback_moment>:

void callback_moment(void *context) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = (EmbeddedCli *)context;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60fb      	str	r3, [r7, #12]
    embeddedCliPrint(cli, "Callback Moment");
 8004b68:	4903      	ldr	r1, [pc, #12]	@ (8004b78 <callback_moment+0x1c>)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fcfe 	bl	800556c <embeddedCliPrint>
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	08024d04 	.word	0x08024d04

08004b7c <callback_countdown>:

void callback_countdown(void *context) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = (EmbeddedCli *)context;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60fb      	str	r3, [r7, #12]
    embeddedCliPrint(cli, "Callback Countdown");
 8004b88:	4903      	ldr	r1, [pc, #12]	@ (8004b98 <callback_countdown+0x1c>)
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fcee 	bl	800556c <embeddedCliPrint>
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	08024d14 	.word	0x08024d14

08004b9c <CMD_AliveCheck>:

static void CMD_AliveCheck(EmbeddedCli *cli, char *args, void *context) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af04      	add	r7, sp, #16
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
	Utils_Cronjob_SetEvery(EVERY_SECOND, 10, 0, callback_every, cli, 0);
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	4b16      	ldr	r3, [pc, #88]	@ (8004c0c <CMD_AliveCheck+0x70>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	210a      	movs	r1, #10
 8004bb6:	2002      	movs	r0, #2
 8004bb8:	f005 fc6e 	bl	800a498 <Utils_Cronjob_SetEvery>
	Utils_Cronjob_SetMoment(10, 20, 30, 0, callback_moment, cli, 1);
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	9302      	str	r3, [sp, #8]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <CMD_AliveCheck+0x74>)
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	221e      	movs	r2, #30
 8004bcc:	2114      	movs	r1, #20
 8004bce:	200a      	movs	r0, #10
 8004bd0:	f005 fbc2 	bl	800a358 <Utils_Cronjob_SetMoment>
	Utils_Cronjob_SetCountdown(20, 0, callback_countdown, cli, 2);
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a0e      	ldr	r2, [pc, #56]	@ (8004c14 <CMD_AliveCheck+0x78>)
 8004bdc:	2100      	movs	r1, #0
 8004bde:	2014      	movs	r0, #20
 8004be0:	f005 fc10 	bl	800a404 <Utils_Cronjob_SetCountdown>

    embeddedCliPrint(cli, "Hello from OBC-STM32. Status: OK");
 8004be4:	490c      	ldr	r1, [pc, #48]	@ (8004c18 <CMD_AliveCheck+0x7c>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fcc0 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "Sparrow call Eagle. Code: OK");
 8004bec:	490b      	ldr	r1, [pc, #44]	@ (8004c1c <CMD_AliveCheck+0x80>)
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 fcbc 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "Eagle clear, end. Code: OK");
 8004bf4:	490a      	ldr	r1, [pc, #40]	@ (8004c20 <CMD_AliveCheck+0x84>)
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fcb8 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8004bfc:	4909      	ldr	r1, [pc, #36]	@ (8004c24 <CMD_AliveCheck+0x88>)
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fcb4 	bl	800556c <embeddedCliPrint>
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	08004b3d 	.word	0x08004b3d
 8004c10:	08004b5d 	.word	0x08004b5d
 8004c14:	08004b7d 	.word	0x08004b7d
 8004c18:	08024d28 	.word	0x08024d28
 8004c1c:	08024d4c 	.word	0x08024d4c
 8004c20:	08024d6c 	.word	0x08024d6c
 8004c24:	08023f8c 	.word	0x08023f8c

08004c28 <CMD_RtosCheck>:

static void CMD_RtosCheck(EmbeddedCli *cli, char *args, void *context) {
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	f2ad 4d0c 	subw	sp, sp, #1036	@ 0x40c
 8004c2e:	af04      	add	r7, sp, #16
 8004c30:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004c34:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004c38:	6018      	str	r0, [r3, #0]
 8004c3a:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004c3e:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 8004c42:	6019      	str	r1, [r3, #0]
 8004c44:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004c48:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8004c4c:	601a      	str	r2, [r3, #0]
    TaskStatus_t taskStatusArray[20];
    UBaseType_t arraySize = 20;
 8004c4e:	2314      	movs	r3, #20
 8004c50:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    UBaseType_t totalTasks;
    char buffer[256];

    UBaseType_t numTasks = uxTaskGetNumberOfTasks();
 8004c54:	f00d faee 	bl	8012234 <uxTaskGetNumberOfTasks>
 8004c58:	f8c7 03e8 	str.w	r0, [r7, #1000]	@ 0x3e8
        snprintf(buffer, sizeof(buffer), "Number of tasks running: %lu", (unsigned long)numTasks);
 8004c5c:	f107 0014 	add.w	r0, r7, #20
 8004c60:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8004c64:	4a73      	ldr	r2, [pc, #460]	@ (8004e34 <CMD_RtosCheck+0x20c>)
 8004c66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c6a:	f01d f94b 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004c6e:	f107 0214 	add.w	r2, r7, #20
 8004c72:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004c76:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	f000 fc75 	bl	800556c <embeddedCliPrint>

    totalTasks = uxTaskGetSystemState(taskStatusArray, arraySize, NULL);
 8004c82:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f00d fadd 	bl	801224c <uxTaskGetSystemState>
 8004c92:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4

    if (totalTasks == 0) {
 8004c96:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d110      	bne.n	8004cc0 <CMD_RtosCheck+0x98>
        embeddedCliPrint(cli, "No tasks found or error occurred.");
 8004c9e:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004ca2:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004ca6:	4964      	ldr	r1, [pc, #400]	@ (8004e38 <CMD_RtosCheck+0x210>)
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	f000 fc5f 	bl	800556c <embeddedCliPrint>
        embeddedCliPrint(cli, "");
 8004cae:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004cb2:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004cb6:	4961      	ldr	r1, [pc, #388]	@ (8004e3c <CMD_RtosCheck+0x214>)
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	f000 fc57 	bl	800556c <embeddedCliPrint>
 8004cbe:	e0b4      	b.n	8004e2a <CMD_RtosCheck+0x202>
        return;
    }

    snprintf(buffer, sizeof(buffer), "Total Tasks: %lu", (unsigned long)totalTasks);
 8004cc0:	f107 0014 	add.w	r0, r7, #20
 8004cc4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8004cc8:	4a5d      	ldr	r2, [pc, #372]	@ (8004e40 <CMD_RtosCheck+0x218>)
 8004cca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cce:	f01d f919 	bl	8021f04 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8004cd2:	f107 0214 	add.w	r2, r7, #20
 8004cd6:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004cda:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004cde:	4611      	mov	r1, r2
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	f000 fc43 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "Task Name          State     Prio  Stack Left");
 8004ce6:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004cea:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004cee:	4955      	ldr	r1, [pc, #340]	@ (8004e44 <CMD_RtosCheck+0x21c>)
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	f000 fc3b 	bl	800556c <embeddedCliPrint>
    embeddedCliPrint(cli, "----------------------------------------");
 8004cf6:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004cfa:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004cfe:	4952      	ldr	r1, [pc, #328]	@ (8004e48 <CMD_RtosCheck+0x220>)
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	f000 fc33 	bl	800556c <embeddedCliPrint>

	for (UBaseType_t i = 0; i < totalTasks; i++) {
 8004d06:	2300      	movs	r3, #0
 8004d08:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8004d0c:	e077      	b.n	8004dfe <CMD_RtosCheck+0x1d6>
		const char *stateStr;
		switch (taskStatusArray[i].eCurrentState) {
 8004d0e:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004d12:	f5a3 7139 	sub.w	r1, r3, #740	@ 0x2e4
 8004d16:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	@ 0x3f4
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	330c      	adds	r3, #12
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d821      	bhi.n	8004d70 <CMD_RtosCheck+0x148>
 8004d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d34 <CMD_RtosCheck+0x10c>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004d49 	.word	0x08004d49
 8004d38:	08004d51 	.word	0x08004d51
 8004d3c:	08004d59 	.word	0x08004d59
 8004d40:	08004d61 	.word	0x08004d61
 8004d44:	08004d69 	.word	0x08004d69
		case eRunning:
			stateStr = "Running";
 8004d48:	4b40      	ldr	r3, [pc, #256]	@ (8004e4c <CMD_RtosCheck+0x224>)
 8004d4a:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004d4e:	e013      	b.n	8004d78 <CMD_RtosCheck+0x150>
		case eReady:
			stateStr = "Ready";
 8004d50:	4b3f      	ldr	r3, [pc, #252]	@ (8004e50 <CMD_RtosCheck+0x228>)
 8004d52:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004d56:	e00f      	b.n	8004d78 <CMD_RtosCheck+0x150>
		case eBlocked:
			stateStr = "Blocked";
 8004d58:	4b3e      	ldr	r3, [pc, #248]	@ (8004e54 <CMD_RtosCheck+0x22c>)
 8004d5a:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004d5e:	e00b      	b.n	8004d78 <CMD_RtosCheck+0x150>
		case eSuspended:
			stateStr = "Suspend";
 8004d60:	4b3d      	ldr	r3, [pc, #244]	@ (8004e58 <CMD_RtosCheck+0x230>)
 8004d62:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004d66:	e007      	b.n	8004d78 <CMD_RtosCheck+0x150>
		case eDeleted:
			stateStr = "Deleted";
 8004d68:	4b3c      	ldr	r3, [pc, #240]	@ (8004e5c <CMD_RtosCheck+0x234>)
 8004d6a:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004d6e:	e003      	b.n	8004d78 <CMD_RtosCheck+0x150>
		default:
			stateStr = "Unknown";
 8004d70:	4b3b      	ldr	r3, [pc, #236]	@ (8004e60 <CMD_RtosCheck+0x238>)
 8004d72:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004d76:	bf00      	nop
		}

		snprintf(buffer, sizeof(buffer), "%-18s %-10s %-4lu %10lu",
 8004d78:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004d7c:	f5a3 7139 	sub.w	r1, r3, #740	@ 0x2e4
 8004d80:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	@ 0x3f4
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3304      	adds	r3, #4
 8004d90:	681c      	ldr	r4, [r3, #0]
 8004d92:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004d96:	f5a3 7139 	sub.w	r1, r3, #740	@ 0x2e4
 8004d9a:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	@ 0x3f4
 8004d9e:	4613      	mov	r3, r2
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	3310      	adds	r3, #16
 8004daa:	6819      	ldr	r1, [r3, #0]
 8004dac:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004db0:	f5a3 7039 	sub.w	r0, r3, #740	@ 0x2e4
 8004db4:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	@ 0x3f4
 8004db8:	4613      	mov	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4403      	add	r3, r0
 8004dc2:	3320      	adds	r3, #32
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f107 0014 	add.w	r0, r7, #20
 8004dca:	9302      	str	r3, [sp, #8]
 8004dcc:	9101      	str	r1, [sp, #4]
 8004dce:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	4623      	mov	r3, r4
 8004dd6:	4a23      	ldr	r2, [pc, #140]	@ (8004e64 <CMD_RtosCheck+0x23c>)
 8004dd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ddc:	f01d f892 	bl	8021f04 <sniprintf>
				taskStatusArray[i].pcTaskName, stateStr,
				taskStatusArray[i].uxCurrentPriority,
				taskStatusArray[i].usStackHighWaterMark);
		embeddedCliPrint(cli, buffer);
 8004de0:	f107 0214 	add.w	r2, r7, #20
 8004de4:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004de8:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004dec:	4611      	mov	r1, r2
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	f000 fbbc 	bl	800556c <embeddedCliPrint>
	for (UBaseType_t i = 0; i < totalTasks; i++) {
 8004df4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8004df8:	3301      	adds	r3, #1
 8004dfa:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8004dfe:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	@ 0x3f4
 8004e02:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d381      	bcc.n	8004d0e <CMD_RtosCheck+0xe6>
	}

	embeddedCliPrint(cli, "----------------------------------------");
 8004e0a:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004e0e:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004e12:	490d      	ldr	r1, [pc, #52]	@ (8004e48 <CMD_RtosCheck+0x220>)
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	f000 fba9 	bl	800556c <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8004e1a:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004e1e:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004e22:	4906      	ldr	r1, [pc, #24]	@ (8004e3c <CMD_RtosCheck+0x214>)
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	f000 fba1 	bl	800556c <embeddedCliPrint>
}
 8004e2a:	f507 777f 	add.w	r7, r7, #1020	@ 0x3fc
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd90      	pop	{r4, r7, pc}
 8004e32:	bf00      	nop
 8004e34:	08024d88 	.word	0x08024d88
 8004e38:	08024da8 	.word	0x08024da8
 8004e3c:	08023f8c 	.word	0x08023f8c
 8004e40:	08024dcc 	.word	0x08024dcc
 8004e44:	08024de0 	.word	0x08024de0
 8004e48:	08024e10 	.word	0x08024e10
 8004e4c:	08024e3c 	.word	0x08024e3c
 8004e50:	08024e44 	.word	0x08024e44
 8004e54:	08024e4c 	.word	0x08024e4c
 8004e58:	08024e54 	.word	0x08024e54
 8004e5c:	08024e5c 	.word	0x08024e5c
 8004e60:	08024e64 	.word	0x08024e64
 8004e64:	08024e6c 	.word	0x08024e6c

08004e68 <LogoutTimerCallback>:

static TimerHandle_t logoutTimer = NULL;
static void LogoutTimerCallback(TimerHandle_t xTimer) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
    Shield_Reset(&auth_usb);
 8004e70:	4803      	ldr	r0, [pc, #12]	@ (8004e80 <LogoutTimerCallback+0x18>)
 8004e72:	f7fd ff3b 	bl	8002cec <Shield_Reset>
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	24014a70 	.word	0x24014a70

08004e84 <CMD_LogOut>:
static void CMD_LogOut(EmbeddedCli *cli, char *args, void *context) {
 8004e84:	b590      	push	{r4, r7, lr}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
    embeddedCliPrint(cli, "Logging out...");
 8004e90:	4913      	ldr	r1, [pc, #76]	@ (8004ee0 <CMD_LogOut+0x5c>)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fb6a 	bl	800556c <embeddedCliPrint>
    if (logoutTimer == NULL) {
 8004e98:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <CMD_LogOut+0x60>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <CMD_LogOut+0x32>
        logoutTimer = xTimerCreate("LogoutTimer", pdMS_TO_TICKS(100), pdFALSE, NULL, LogoutTimerCallback);
 8004ea0:	4b11      	ldr	r3, [pc, #68]	@ (8004ee8 <CMD_LogOut+0x64>)
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2164      	movs	r1, #100	@ 0x64
 8004eaa:	4810      	ldr	r0, [pc, #64]	@ (8004eec <CMD_LogOut+0x68>)
 8004eac:	f00e fc3a 	bl	8013724 <xTimerCreate>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee4 <CMD_LogOut+0x60>)
 8004eb4:	6013      	str	r3, [r2, #0]
    }
    if (logoutTimer != NULL) {
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <CMD_LogOut+0x60>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <CMD_LogOut+0x52>
        xTimerStart(logoutTimer, 0);
 8004ebe:	4b09      	ldr	r3, [pc, #36]	@ (8004ee4 <CMD_LogOut+0x60>)
 8004ec0:	681c      	ldr	r4, [r3, #0]
 8004ec2:	f00d f9a7 	bl	8012214 <xTaskGetTickCount>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2101      	movs	r1, #1
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f00e fc83 	bl	80137dc <xTimerGenericCommandFromTask>
    }
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	08024e84 	.word	0x08024e84
 8004ee4:	24018344 	.word	0x24018344
 8004ee8:	08004e69 	.word	0x08004e69
 8004eec:	08024e94 	.word	0x08024e94

08004ef0 <CMD_PwdChange>:

static void CMD_PwdChange(EmbeddedCli *cli, char *args, void *context) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	@ 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
    const char *new_password = embeddedCliGetToken(args, 1);
 8004efc:	2101      	movs	r1, #1
 8004efe:	68b8      	ldr	r0, [r7, #8]
 8004f00:	f000 fbf6 	bl	80056f0 <embeddedCliGetToken>
 8004f04:	6278      	str	r0, [r7, #36]	@ 0x24
    if (new_password == NULL) {
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <CMD_PwdChange+0x26>
        embeddedCliPrint(cli, "Usage: pwd_change <new_password>");
 8004f0c:	4929      	ldr	r1, [pc, #164]	@ (8004fb4 <CMD_PwdChange+0xc4>)
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fb2c 	bl	800556c <embeddedCliPrint>
        return;
 8004f14:	e04a      	b.n	8004fac <CMD_PwdChange+0xbc>
    }

	ShieldAuthState_t auth_state;
	auth_state = Shield_GetState(&auth_usb);
 8004f16:	4828      	ldr	r0, [pc, #160]	@ (8004fb8 <CMD_PwdChange+0xc8>)
 8004f18:	f7fe f932 	bl	8003180 <Shield_GetState>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (auth_state == AUTH_ADMIN) {
 8004f22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d13b      	bne.n	8004fa2 <CMD_PwdChange+0xb2>
    	size_t pwd_len = strlen(new_password);
 8004f2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f2c:	f7fb f9e2 	bl	80002f4 <strlen>
 8004f30:	61f8      	str	r0, [r7, #28]
        if (pwd_len > MAX_PASSWORD_LEN) {
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d904      	bls.n	8004f42 <CMD_PwdChange+0x52>
        	embeddedCliPrint(cli, "Password too long (max 16 characters).");
 8004f38:	4920      	ldr	r1, [pc, #128]	@ (8004fbc <CMD_PwdChange+0xcc>)
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fb16 	bl	800556c <embeddedCliPrint>
            return;
 8004f40:	e034      	b.n	8004fac <CMD_PwdChange+0xbc>
        }
        FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 8004f42:	f003 fe0d 	bl	8008b60 <FRAM_SPI_GetHandle>
 8004f46:	61b8      	str	r0, [r7, #24]
        uint8_t len = (uint8_t)pwd_len;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	75fb      	strb	r3, [r7, #23]
        if (FRAM_SPI_WriteMem(hfram, FRAM_USER_PWD_LEN_ADDR, &len, 1) != E_OK) {
 8004f4e:	f107 0217 	add.w	r2, r7, #23
 8004f52:	2301      	movs	r3, #1
 8004f54:	2100      	movs	r1, #0
 8004f56:	69b8      	ldr	r0, [r7, #24]
 8004f58:	f003 fe6a 	bl	8008c30 <FRAM_SPI_WriteMem>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <CMD_PwdChange+0x7c>
        	embeddedCliPrint(cli, "Failed to write password length to FRAM.\r\n");
 8004f62:	4917      	ldr	r1, [pc, #92]	@ (8004fc0 <CMD_PwdChange+0xd0>)
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 fb01 	bl	800556c <embeddedCliPrint>
            return;
 8004f6a:	e01f      	b.n	8004fac <CMD_PwdChange+0xbc>
        }
        if (pwd_len > 0) {
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00e      	beq.n	8004f90 <CMD_PwdChange+0xa0>
            if (FRAM_SPI_WriteMem(hfram, FRAM_USER_PWD_ADDR, (uint8_t *)new_password, pwd_len) != E_OK) {
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f78:	2101      	movs	r1, #1
 8004f7a:	69b8      	ldr	r0, [r7, #24]
 8004f7c:	f003 fe58 	bl	8008c30 <FRAM_SPI_WriteMem>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <CMD_PwdChange+0xa0>
            	embeddedCliPrint(cli, "Failed to write password to FRAM.\r\n");
 8004f86:	490f      	ldr	r1, [pc, #60]	@ (8004fc4 <CMD_PwdChange+0xd4>)
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 faef 	bl	800556c <embeddedCliPrint>
                return;
 8004f8e:	e00d      	b.n	8004fac <CMD_PwdChange+0xbc>
            }
        }
        embeddedCliPrint(cli, "User password updated successfully.");
 8004f90:	490d      	ldr	r1, [pc, #52]	@ (8004fc8 <CMD_PwdChange+0xd8>)
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 faea 	bl	800556c <embeddedCliPrint>
    } else {
        embeddedCliPrint(cli, "Must be logged in as admin to change password.");
        return;
    }
    embeddedCliPrint(cli, "");
 8004f98:	490c      	ldr	r1, [pc, #48]	@ (8004fcc <CMD_PwdChange+0xdc>)
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fae6 	bl	800556c <embeddedCliPrint>
 8004fa0:	e004      	b.n	8004fac <CMD_PwdChange+0xbc>
        embeddedCliPrint(cli, "Must be logged in as admin to change password.");
 8004fa2:	490b      	ldr	r1, [pc, #44]	@ (8004fd0 <CMD_PwdChange+0xe0>)
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fae1 	bl	800556c <embeddedCliPrint>
        return;
 8004faa:	bf00      	nop
}
 8004fac:	3728      	adds	r7, #40	@ 0x28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	08024ea0 	.word	0x08024ea0
 8004fb8:	24014a70 	.word	0x24014a70
 8004fbc:	08024ec4 	.word	0x08024ec4
 8004fc0:	08024eec 	.word	0x08024eec
 8004fc4:	08024f18 	.word	0x08024f18
 8004fc8:	08024f3c 	.word	0x08024f3c
 8004fcc:	08023f8c 	.word	0x08023f8c
 8004fd0:	08024f60 	.word	0x08024f60

08004fd4 <CMD_Dmesg>:

static void CMD_Dmesg(EmbeddedCli *cli, char *args, void *context) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b096      	sub	sp, #88	@ 0x58
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	68b8      	ldr	r0, [r7, #8]
 8004fe4:	f000 fb84 	bl	80056f0 <embeddedCliGetToken>
 8004fe8:	6578      	str	r0, [r7, #84]	@ 0x54
    char buffer[64];
    embeddedCliPrint(cli, "Dmesg - Logger Message:");
 8004fea:	4919      	ldr	r1, [pc, #100]	@ (8005050 <CMD_Dmesg+0x7c>)
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fabd 	bl	800556c <embeddedCliPrint>

    if (arg1 == NULL) {
 8004ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10b      	bne.n	8005010 <CMD_Dmesg+0x3c>
        embeddedCliPrint(cli, "--> Oldest >>");
 8004ff8:	4916      	ldr	r1, [pc, #88]	@ (8005054 <CMD_Dmesg+0x80>)
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fab6 	bl	800556c <embeddedCliPrint>
        Dmesg_GetLogs(cli);
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f002 f86b 	bl	80070dc <Dmesg_GetLogs>
        embeddedCliPrint(cli, "--> Latest <<");
 8005006:	4914      	ldr	r1, [pc, #80]	@ (8005058 <CMD_Dmesg+0x84>)
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 faaf 	bl	800556c <embeddedCliPrint>
 800500e:	e016      	b.n	800503e <CMD_Dmesg+0x6a>
    } else {
        size_t N = (size_t)strtoul(arg1, NULL, 10);
 8005010:	220a      	movs	r2, #10
 8005012:	2100      	movs	r1, #0
 8005014:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005016:	f01c fea9 	bl	8021d6c <strtoul>
 800501a:	6538      	str	r0, [r7, #80]	@ 0x50
        snprintf(buffer, sizeof(buffer), "Latest %lu Logs:", (unsigned long)N);
 800501c:	f107 0010 	add.w	r0, r7, #16
 8005020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005022:	4a0e      	ldr	r2, [pc, #56]	@ (800505c <CMD_Dmesg+0x88>)
 8005024:	2140      	movs	r1, #64	@ 0x40
 8005026:	f01c ff6d 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800502a:	f107 0310 	add.w	r3, r7, #16
 800502e:	4619      	mov	r1, r3
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fa9b 	bl	800556c <embeddedCliPrint>
        Dmesg_GetLatestN(N, cli);
 8005036:	68f9      	ldr	r1, [r7, #12]
 8005038:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800503a:	f002 f883 	bl	8007144 <Dmesg_GetLatestN>
    }

    embeddedCliPrint(cli, "");
 800503e:	4908      	ldr	r1, [pc, #32]	@ (8005060 <CMD_Dmesg+0x8c>)
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 fa93 	bl	800556c <embeddedCliPrint>
}
 8005046:	bf00      	nop
 8005048:	3758      	adds	r7, #88	@ 0x58
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	08024f90 	.word	0x08024f90
 8005054:	08024fa8 	.word	0x08024fa8
 8005058:	08024fb8 	.word	0x08024fb8
 800505c:	08024fc8 	.word	0x08024fc8
 8005060:	08023f8c 	.word	0x08023f8c

08005064 <CMD_Reset>:
static void CMD_Reset(EmbeddedCli *cli, char *args, void *context) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
	NVIC_SystemReset();
 8005070:	f7fe f894 	bl	800319c <__NVIC_SystemReset>

08005074 <getCliStaticBindings>:
 *************************************************/

/*************************************************
 *                Getter - Helper                *
 *************************************************/
const CliCommandBinding *getCliStaticBindings(void) {
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
    return cliStaticBindings_internal;
 8005078:	4b02      	ldr	r3, [pc, #8]	@ (8005084 <getCliStaticBindings+0x10>)
}
 800507a:	4618      	mov	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	08025c28 	.word	0x08025c28

08005088 <getCliStaticBindingCount>:

uint16_t getCliStaticBindingCount(void) {
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
    return sizeof(cliStaticBindings_internal) / sizeof(cliStaticBindings_internal[0]);
 800508c:	2322      	movs	r3, #34	@ 0x22
}
 800508e:	4618      	mov	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <writeCharToCli_USBCDC>:

/*************************************************
 *          Tx Transmit CLI Byte Buffer          *
 *************************************************/

static void writeCharToCli_USBCDC(EmbeddedCli *embeddedCli, char c) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
    uint8_t c_to_send = c;
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	73fb      	strb	r3, [r7, #15]
    UART_Driver_Write(UART_USB, c_to_send);
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	4619      	mov	r1, r3
 80050ac:	4803      	ldr	r0, [pc, #12]	@ (80050bc <writeCharToCli_USBCDC+0x24>)
 80050ae:	f7fd fb11 	bl	80026d4 <UART_Driver_Write>
}
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40011000 	.word	0x40011000

080050c0 <writeCharToCli_UARTCM4>:

static void writeCharToCli_UARTCM4(EmbeddedCli *embeddedCli, char c) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
    uint8_t c_to_send = c;
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	73fb      	strb	r3, [r7, #15]
    UART_Driver_Write(UART_DEBUG, c_to_send);
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	4619      	mov	r1, r3
 80050d4:	4803      	ldr	r0, [pc, #12]	@ (80050e4 <writeCharToCli_UARTCM4+0x24>)
 80050d6:	f7fd fafd 	bl	80026d4 <UART_Driver_Write>
}
 80050da:	bf00      	nop
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40004400 	.word	0x40004400

080050e8 <SystemCLI_Init>:

//Call before FREERTOS be initialized
//Call After UART Driver Init (or Peripheral use CLI)

Std_ReturnType SystemCLI_Init() {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
    // Initialize the CLI configuration settings
    // Initialize USB CDC CLI
    EmbeddedCliConfig *usbcdc_config = embeddedCliDefaultConfig();
 80050ee:	f000 f89f 	bl	8005230 <embeddedCliDefaultConfig>
 80050f2:	6078      	str	r0, [r7, #4]
    usbcdc_config->cliBuffer = usbcdc_cliStaticBuffer;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a39      	ldr	r2, [pc, #228]	@ (80051dc <SystemCLI_Init+0xf4>)
 80050f8:	60da      	str	r2, [r3, #12]
    usbcdc_config->cliBufferSize = USBCDC_CLI_BUFFER_SIZE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005100:	821a      	strh	r2, [r3, #16]
    usbcdc_config->rxBufferSize = CLI_RX_BUFFER_SIZE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2210      	movs	r2, #16
 8005106:	809a      	strh	r2, [r3, #4]
    usbcdc_config->cmdBufferSize = CLI_CMD_BUFFER_SIZE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2240      	movs	r2, #64	@ 0x40
 800510c:	80da      	strh	r2, [r3, #6]
    usbcdc_config->historyBufferSize = CLI_HISTORY_SIZE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2280      	movs	r2, #128	@ 0x80
 8005112:	811a      	strh	r2, [r3, #8]
    usbcdc_config->maxBindingCount = CLI_MAX_BINDING_COUNT;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	815a      	strh	r2, [r3, #10]
    usbcdc_config->enableAutoComplete = CLI_AUTO_COMPLETE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	749a      	strb	r2, [r3, #18]
    usbcdc_config->invitation = CLI_INITATION_USB;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a2f      	ldr	r2, [pc, #188]	@ (80051e0 <SystemCLI_Init+0xf8>)
 8005124:	601a      	str	r2, [r3, #0]
    usbcdc_config->staticBindings = getCliStaticBindings();
 8005126:	f7ff ffa5 	bl	8005074 <getCliStaticBindings>
 800512a:	4602      	mov	r2, r0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	615a      	str	r2, [r3, #20]
    usbcdc_config->staticBindingCount = getCliStaticBindingCount();
 8005130:	f7ff ffaa 	bl	8005088 <getCliStaticBindingCount>
 8005134:	4603      	mov	r3, r0
 8005136:	461a      	mov	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	831a      	strh	r2, [r3, #24]

    cli_usbcdc = embeddedCliNew(usbcdc_config);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f8d2 	bl	80052e6 <embeddedCliNew>
 8005142:	4603      	mov	r3, r0
 8005144:	4a27      	ldr	r2, [pc, #156]	@ (80051e4 <SystemCLI_Init+0xfc>)
 8005146:	6013      	str	r3, [r2, #0]
    if (cli_usbcdc == NULL) {
 8005148:	4b26      	ldr	r3, [pc, #152]	@ (80051e4 <SystemCLI_Init+0xfc>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <SystemCLI_Init+0x6c>
        return E_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e03e      	b.n	80051d2 <SystemCLI_Init+0xea>
    }
    cli_usbcdc->writeChar = writeCharToCli_USBCDC;
 8005154:	4b23      	ldr	r3, [pc, #140]	@ (80051e4 <SystemCLI_Init+0xfc>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a23      	ldr	r2, [pc, #140]	@ (80051e8 <SystemCLI_Init+0x100>)
 800515a:	601a      	str	r2, [r3, #0]

    // Initialize UART CM4 CLI
    EmbeddedCliConfig *uartcm4_config = embeddedCliDefaultConfig();
 800515c:	f000 f868 	bl	8005230 <embeddedCliDefaultConfig>
 8005160:	6038      	str	r0, [r7, #0]
    uartcm4_config->cliBuffer = uartcm4_cliStaticBuffer;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	4a21      	ldr	r2, [pc, #132]	@ (80051ec <SystemCLI_Init+0x104>)
 8005166:	60da      	str	r2, [r3, #12]
    uartcm4_config->cliBufferSize = UARTCM4_CLI_BUFFER_SIZE;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800516e:	821a      	strh	r2, [r3, #16]
    uartcm4_config->rxBufferSize = CLI_RX_BUFFER_SIZE;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2210      	movs	r2, #16
 8005174:	809a      	strh	r2, [r3, #4]
    uartcm4_config->cmdBufferSize = CLI_CMD_BUFFER_SIZE;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2240      	movs	r2, #64	@ 0x40
 800517a:	80da      	strh	r2, [r3, #6]
    uartcm4_config->historyBufferSize = CLI_HISTORY_SIZE;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2280      	movs	r2, #128	@ 0x80
 8005180:	811a      	strh	r2, [r3, #8]
    uartcm4_config->maxBindingCount = CLI_MAX_BINDING_COUNT;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2220      	movs	r2, #32
 8005186:	815a      	strh	r2, [r3, #10]
    uartcm4_config->enableAutoComplete = CLI_AUTO_COMPLETE;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	749a      	strb	r2, [r3, #18]
    uartcm4_config->invitation = CLI_INITATION_CM4;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	4a17      	ldr	r2, [pc, #92]	@ (80051f0 <SystemCLI_Init+0x108>)
 8005192:	601a      	str	r2, [r3, #0]
    uartcm4_config->staticBindings = getCliStaticBindings();
 8005194:	f7ff ff6e 	bl	8005074 <getCliStaticBindings>
 8005198:	4602      	mov	r2, r0
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	615a      	str	r2, [r3, #20]
    uartcm4_config->staticBindingCount = getCliStaticBindingCount();
 800519e:	f7ff ff73 	bl	8005088 <getCliStaticBindingCount>
 80051a2:	4603      	mov	r3, r0
 80051a4:	461a      	mov	r2, r3
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	831a      	strh	r2, [r3, #24]

    cli_uartcm4 = embeddedCliNew(uartcm4_config);
 80051aa:	6838      	ldr	r0, [r7, #0]
 80051ac:	f000 f89b 	bl	80052e6 <embeddedCliNew>
 80051b0:	4603      	mov	r3, r0
 80051b2:	4a10      	ldr	r2, [pc, #64]	@ (80051f4 <SystemCLI_Init+0x10c>)
 80051b4:	6013      	str	r3, [r2, #0]
    if (cli_uartcm4 == NULL) {
 80051b6:	4b0f      	ldr	r3, [pc, #60]	@ (80051f4 <SystemCLI_Init+0x10c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <SystemCLI_Init+0xda>
        return E_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e007      	b.n	80051d2 <SystemCLI_Init+0xea>
    }
    cli_uartcm4->writeChar = writeCharToCli_UARTCM4;
 80051c2:	4b0c      	ldr	r3, [pc, #48]	@ (80051f4 <SystemCLI_Init+0x10c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a0c      	ldr	r2, [pc, #48]	@ (80051f8 <SystemCLI_Init+0x110>)
 80051c8:	601a      	str	r2, [r3, #0]

    // Init the CLI with blank screen
//    onClearCLI(cli, NULL, NULL);

    // CLI has now been initialized, set bool to true to enable interrupts.
    cliIsReady = true;
 80051ca:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <SystemCLI_Init+0x114>)
 80051cc:	2201      	movs	r2, #1
 80051ce:	701a      	strb	r2, [r3, #0]

    return E_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	24018348 	.word	0x24018348
 80051e0:	08024fdc 	.word	0x08024fdc
 80051e4:	24019348 	.word	0x24019348
 80051e8:	08005099 	.word	0x08005099
 80051ec:	24018b48 	.word	0x24018b48
 80051f0:	08024ff0 	.word	0x08024ff0
 80051f4:	2401934c 	.word	0x2401934c
 80051f8:	080050c1 	.word	0x080050c1
 80051fc:	24019350 	.word	0x24019350

08005200 <getUsbCdcCliPointer>:


/*************************************************
 *             Get CLI Pointers                  *
 *************************************************/
EmbeddedCli *getUsbCdcCliPointer() {
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
    return cli_usbcdc;
 8005204:	4b03      	ldr	r3, [pc, #12]	@ (8005214 <getUsbCdcCliPointer+0x14>)
 8005206:	681b      	ldr	r3, [r3, #0]
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	24019348 	.word	0x24019348

08005218 <getUartCm4CliPointer>:

EmbeddedCli *getUartCm4CliPointer() {
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
    return cli_uartcm4;
 800521c:	4b03      	ldr	r3, [pc, #12]	@ (800522c <getUartCm4CliPointer+0x14>)
 800521e:	681b      	ldr	r3, [r3, #0]
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	2401934c 	.word	0x2401934c

08005230 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8005234:	4b11      	ldr	r3, [pc, #68]	@ (800527c <embeddedCliDefaultConfig+0x4c>)
 8005236:	2240      	movs	r2, #64	@ 0x40
 8005238:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 800523a:	4b10      	ldr	r3, [pc, #64]	@ (800527c <embeddedCliDefaultConfig+0x4c>)
 800523c:	2240      	movs	r2, #64	@ 0x40
 800523e:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8005240:	4b0e      	ldr	r3, [pc, #56]	@ (800527c <embeddedCliDefaultConfig+0x4c>)
 8005242:	2280      	movs	r2, #128	@ 0x80
 8005244:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8005246:	4b0d      	ldr	r3, [pc, #52]	@ (800527c <embeddedCliDefaultConfig+0x4c>)
 8005248:	2200      	movs	r2, #0
 800524a:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 800524c:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <embeddedCliDefaultConfig+0x4c>)
 800524e:	2200      	movs	r2, #0
 8005250:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 8;
 8005252:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <embeddedCliDefaultConfig+0x4c>)
 8005254:	2208      	movs	r2, #8
 8005256:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8005258:	4b08      	ldr	r3, [pc, #32]	@ (800527c <embeddedCliDefaultConfig+0x4c>)
 800525a:	2201      	movs	r2, #1
 800525c:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 800525e:	4b07      	ldr	r3, [pc, #28]	@ (800527c <embeddedCliDefaultConfig+0x4c>)
 8005260:	4a07      	ldr	r2, [pc, #28]	@ (8005280 <embeddedCliDefaultConfig+0x50>)
 8005262:	601a      	str	r2, [r3, #0]
    defaultConfig.staticBindingCount = 0;
 8005264:	4b05      	ldr	r3, [pc, #20]	@ (800527c <embeddedCliDefaultConfig+0x4c>)
 8005266:	2200      	movs	r2, #0
 8005268:	831a      	strh	r2, [r3, #24]
    defaultConfig.staticBindings = NULL;
 800526a:	4b04      	ldr	r3, [pc, #16]	@ (800527c <embeddedCliDefaultConfig+0x4c>)
 800526c:	2200      	movs	r2, #0
 800526e:	615a      	str	r2, [r3, #20]
    return &defaultConfig;
 8005270:	4b02      	ldr	r3, [pc, #8]	@ (800527c <embeddedCliDefaultConfig+0x4c>)
}
 8005272:	4618      	mov	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	24019354 	.word	0x24019354
 8005280:	08025020 	.word	0x08025020

08005284 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (config->staticBindings == NULL) ?
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <embeddedCliRequiredSize+0x16>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	895b      	ldrh	r3, [r3, #10]
 8005298:	e000      	b.n	800529c <embeddedCliRequiredSize+0x18>
 800529a:	2300      	movs	r3, #0
 800529c:	81fb      	strh	r3, [r7, #14]
                            (config->maxBindingCount) : 0;
    return (CLI_UINT_SIZE * (
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	889b      	ldrh	r3, [r3, #4]
 80052a2:	3303      	adds	r3, #3
 80052a4:	089a      	lsrs	r2, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	88db      	ldrh	r3, [r3, #6]
 80052aa:	3303      	adds	r3, #3
 80052ac:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80052ae:	441a      	add	r2, r3
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	891b      	ldrh	r3, [r3, #8]
 80052b4:	3303      	adds	r3, #3
 80052b6:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80052b8:	18d1      	adds	r1, r2, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80052ba:	89fa      	ldrh	r2, [r7, #14]
 80052bc:	4613      	mov	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	3303      	adds	r3, #3
 80052c6:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80052c8:	18ca      	adds	r2, r1, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))
 80052ca:	89fb      	ldrh	r3, [r7, #14]
 80052cc:	3303      	adds	r3, #3
 80052ce:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80052d0:	4413      	add	r3, r2
 80052d2:	3312      	adds	r3, #18
    return (CLI_UINT_SIZE * (
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	b29b      	uxth	r3, r3
    ));
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b088      	sub	sp, #32
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]

    size_t totalSize = embeddedCliRequiredSize(config);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff ffc6 	bl	8005284 <embeddedCliRequiredSize>
 80052f8:	4603      	mov	r3, r0
 80052fa:	61bb      	str	r3, [r7, #24]

    _Bool allocated = false;
 80052fc:	2300      	movs	r3, #0
 80052fe:	75fb      	strb	r3, [r7, #23]

    if (config->cliBuffer == NULL || config->cliBufferSize < totalSize) {
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <embeddedCliNew+0x2e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8a1b      	ldrh	r3, [r3, #16]
 800530c:	461a      	mov	r2, r3
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	4293      	cmp	r3, r2
 8005312:	d901      	bls.n	8005318 <embeddedCliNew+0x32>
        return NULL;
 8005314:	2300      	movs	r3, #0
 8005316:	e071      	b.n	80053fc <embeddedCliNew+0x116>
    }

    CLI_UINT *buf = config->cliBuffer;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	613b      	str	r3, [r7, #16]

    memset(buf, 0, totalSize);
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	2100      	movs	r1, #0
 8005322:	6938      	ldr	r0, [r7, #16]
 8005324:	f01c feb3 	bl	802208e <memset>

    cli = (EmbeddedCli *) buf;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	61fb      	str	r3, [r7, #28]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	3310      	adds	r3, #16
 8005330:	613b      	str	r3, [r7, #16]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	3338      	adds	r3, #56	@ 0x38
 800533c:	613b      	str	r3, [r7, #16]

    PREPARE_IMPL(cli);
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	60fb      	str	r3, [r7, #12]
    impl->rxBuffer.buf = (char *) buf;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	889b      	ldrh	r3, [r3, #4]
 800534e:	3303      	adds	r3, #3
 8005350:	f023 0303 	bic.w	r3, r3, #3
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4413      	add	r3, r2
 8005358:	613b      	str	r3, [r7, #16]

    impl->cmdBuffer = (char *) buf;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	88db      	ldrh	r3, [r3, #6]
 8005364:	3303      	adds	r3, #3
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	613b      	str	r3, [r7, #16]


    impl->bindings = (CliCommandBinding *) config->staticBindings;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	625a      	str	r2, [r3, #36]	@ 0x24
    impl->bindingsCount = config->staticBindingCount;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8b1a      	ldrh	r2, [r3, #24]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = config->staticBindingCount;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8b1a      	ldrh	r2, [r3, #24]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	85da      	strh	r2, [r3, #46]	@ 0x2e


    impl->history.buf = (char *) buf;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	891a      	ldrh	r2, [r3, #8]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <embeddedCliNew+0xc8>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80053a2:	f043 0304 	orr.w	r3, r3, #4
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	7c9b      	ldrb	r3, [r3, #18]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d008      	beq.n	80053c8 <embeddedCliNew+0xe2>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80053bc:	f043 0320 	orr.w	r3, r3, #32
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	889a      	ldrh	r2, [r3, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	88da      	ldrh	r2, [r3, #6]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->lastChar = '\0';
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]
    impl->cursorPos = 0;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	869a      	strh	r2, [r3, #52]	@ 0x34

    return cli;
 80053fa:	69fb      	ldr	r3, [r7, #28]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3720      	adds	r7, #32
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3310      	adds	r3, #16
 800541a:	78fa      	ldrb	r2, [r7, #3]
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f000 ff8a 	bl	8006338 <fifoBufPush>
 8005424:	4603      	mov	r3, r0
 8005426:	f083 0301 	eor.w	r3, r3, #1
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8083 	beq.w	8005562 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d155      	bne.n	800551c <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005476:	f043 0302 	orr.w	r3, r3, #2
 800547a:	b2da      	uxtb	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fe7e 	bl	800618a <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 800548e:	e045      	b.n	800551c <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3310      	adds	r3, #16
 8005494:	4618      	mov	r0, r3
 8005496:	f000 ff27 	bl	80062e8 <fifoBufPop>
 800549a:	4603      	mov	r3, r0
 800549c:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 80054ac:	7afb      	ldrb	r3, [r7, #11]
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f9f5 	bl	80058a0 <onEscapedInput>
 80054b6:	e02a      	b.n	800550e <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80054be:	2b1b      	cmp	r3, #27
 80054c0:	d10c      	bne.n	80054dc <embeddedCliProcess+0x92>
 80054c2:	7afb      	ldrb	r3, [r7, #11]
 80054c4:	2b5b      	cmp	r3, #91	@ 0x5b
 80054c6:	d109      	bne.n	80054dc <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80054ce:	f043 0308 	orr.w	r3, r3, #8
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80054da:	e018      	b.n	800550e <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 80054dc:	7afb      	ldrb	r3, [r7, #11]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 feaa 	bl	8006238 <isControlChar>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 80054ea:	7afb      	ldrb	r3, [r7, #11]
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa86 	bl	8005a00 <onControlInput>
 80054f4:	e00b      	b.n	800550e <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 80054f6:	7afb      	ldrb	r3, [r7, #11]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 febd 	bl	8006278 <isDisplayableChar>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8005504:	7afb      	ldrb	r3, [r7, #11]
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa27 	bl	800595c <onCharInput>
        }

        printLiveAutocompletion(cli);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fd12 	bl	8005f38 <printLiveAutocompletion>

        impl->lastChar = c;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	7afa      	ldrb	r2, [r7, #11]
 8005518:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3310      	adds	r3, #16
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fec0 	bl	80062a6 <fifoBufAvailable>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1b1      	bne.n	8005490 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d014      	beq.n	8005564 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	8c12      	ldrh	r2, [r2, #32]
 8005548:	4413      	add	r3, r2
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8005560:	e000      	b.n	8005564 <embeddedCliProcess+0x11a>
        return;
 8005562:	bf00      	nop
    }
}
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d03e      	beq.n	80055fc <embeddedCliPrint+0x90>
        return;

    PREPARE_IMPL(cli);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	60fb      	str	r3, [r7, #12]

    // Save cursor position
    uint16_t cursorPosSave = impl->cursorPos;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005588:	817b      	strh	r3, [r7, #10]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <embeddedCliPrint+0x32>
        clearCurrentLine(cli);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fdc1 	bl	8006120 <clearCurrentLine>

    // Restore cursor position
    impl->cursorPos = cursorPosSave;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	897a      	ldrh	r2, [r7, #10]
 80055a2:	869a      	strh	r2, [r3, #52]	@ 0x34

    // print provided string
    writeToOutput(cli, string);
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fdef 	bl	800618a <writeToOutput>
    writeToOutput(cli, lineBreak);
 80055ac:	4b15      	ldr	r3, [pc, #84]	@ (8005604 <embeddedCliPrint+0x98>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fde9 	bl	800618a <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d11b      	bne.n	80055fe <embeddedCliPrint+0x92>
        writeToOutput(cli, impl->invitation);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fddc 	bl	800618a <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fdd6 	bl	800618a <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8c1a      	ldrh	r2, [r3, #32]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	861a      	strh	r2, [r3, #48]	@ 0x30
        moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_BACKWARD);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80055ea:	2200      	movs	r2, #0
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fdec 	bl	80061cc <moveCursor>

        printLiveAutocompletion(cli);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fc9f 	bl	8005f38 <printLiveAutocompletion>
 80055fa:	e000      	b.n	80055fe <embeddedCliPrint+0x92>
        return;
 80055fc:	bf00      	nop
    }
}
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	240148a0 	.word	0x240148a0

08005608 <embeddedCliTokenizeArgs>:

void embeddedCliTokenizeArgs(char *args) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d066      	beq.n	80056e4 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8005616:	4b35      	ldr	r3, [pc, #212]	@ (80056ec <embeddedCliTokenizeArgs+0xe4>)
 8005618:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 800561a:	2300      	movs	r3, #0
 800561c:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 800561e:	2300      	movs	r3, #0
 8005620:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 800562a:	e047      	b.n	80056bc <embeddedCliTokenizeArgs+0xb4>
        ++i;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	3301      	adds	r3, #1
 8005630:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8005632:	7fbb      	ldrb	r3, [r7, #30]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8005638:	2300      	movs	r3, #0
 800563a:	77bb      	strb	r3, [r7, #30]
 800563c:	e029      	b.n	8005692 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 800563e:	7cfb      	ldrb	r3, [r7, #19]
 8005640:	2b5c      	cmp	r3, #92	@ 0x5c
 8005642:	d102      	bne.n	800564a <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8005644:	2301      	movs	r3, #1
 8005646:	77bb      	strb	r3, [r7, #30]
            continue;
 8005648:	e038      	b.n	80056bc <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 800564a:	7cfb      	ldrb	r3, [r7, #19]
 800564c:	2b22      	cmp	r3, #34	@ 0x22
 800564e:	d110      	bne.n	8005672 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8005650:	7ffb      	ldrb	r3, [r7, #31]
 8005652:	2b00      	cmp	r3, #0
 8005654:	bf14      	ite	ne
 8005656:	2301      	movne	r3, #1
 8005658:	2300      	moveq	r3, #0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f083 0301 	eor.w	r3, r3, #1
 8005660:	b2db      	uxtb	r3, r3
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	7ffb      	ldrb	r3, [r7, #31]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 800566c:	2300      	movs	r3, #0
 800566e:	74fb      	strb	r3, [r7, #19]
 8005670:	e00f      	b.n	8005692 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8005672:	7ffb      	ldrb	r3, [r7, #31]
 8005674:	f083 0301 	eor.w	r3, r3, #1
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <embeddedCliTokenizeArgs+0x8a>
 800567e:	7cfb      	ldrb	r3, [r7, #19]
 8005680:	4619      	mov	r1, r3
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f01c fd1a 	bl	80220bc <strchr>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 800568e:	2300      	movs	r3, #0
 8005690:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8005692:	7cfb      	ldrb	r3, [r7, #19]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <embeddedCliTokenizeArgs+0xa4>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	dd0e      	ble.n	80056bc <embeddedCliTokenizeArgs+0xb4>
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	4413      	add	r3, r2
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	7cfa      	ldrb	r2, [r7, #19]
 80056b4:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	3301      	adds	r3, #1
 80056ba:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	74fb      	strb	r3, [r7, #19]
 80056c6:	7cfb      	ldrb	r3, [r7, #19]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1af      	bne.n	800562c <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	3301      	adds	r3, #1
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	4413      	add	r3, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	e000      	b.n	80056e6 <embeddedCliTokenizeArgs+0xde>
        return;
 80056e4:	bf00      	nop
}
 80056e6:	3720      	adds	r7, #32
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	08025024 	.word	0x08025024

080056f0 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80056fc:	887b      	ldrh	r3, [r7, #2]
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 ff20 	bl	8006546 <getTokenPosition>
 8005706:	4603      	mov	r3, r0
 8005708:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 800570a:	89fb      	ldrh	r3, [r7, #14]
 800570c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8005714:	89fb      	ldrh	r3, [r7, #14]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	e000      	b.n	800571e <embeddedCliGetToken+0x2e>
    else
        return NULL;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8005732:	887b      	ldrh	r3, [r7, #2]
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 ff05 	bl	8006546 <getTokenPosition>
 800573c:	4603      	mov	r3, r0
 800573e:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8005740:	89fb      	ldrh	r3, [r7, #14]
 8005742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 800574a:	89fb      	ldrh	r3, [r7, #14]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4413      	add	r3, r2
 8005750:	e000      	b.n	8005754 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <embeddedCliGetTokenCount+0x16>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <embeddedCliGetTokenCount+0x1a>
        return 0;
 8005772:	2300      	movs	r3, #0
 8005774:	e019      	b.n	80057aa <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 800577a:	2301      	movs	r3, #1
 800577c:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	4413      	add	r3, r2
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3301      	adds	r3, #1
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	4413      	add	r3, r2
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d006      	beq.n	80057a6 <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8005798:	897b      	ldrh	r3, [r7, #10]
 800579a:	3301      	adds	r3, #1
 800579c:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 80057a4:	e7eb      	b.n	800577e <embeddedCliGetTokenCount+0x22>
                break;
 80057a6:	bf00      	nop
    }

    return tokenCount;
 80057a8:	897b      	ldrh	r3, [r7, #10]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	899b      	ldrh	r3, [r3, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d05f      	beq.n	8005892 <navigateHistory+0xda>
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	895a      	ldrh	r2, [r3, #10]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	899b      	ldrh	r3, [r3, #12]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d056      	beq.n	8005892 <navigateHistory+0xda>
        (!navigateUp && impl->history.current == 0))
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	f083 0301 	eor.w	r3, r3, #1
 80057ea:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	895b      	ldrh	r3, [r3, #10]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d04c      	beq.n	8005892 <navigateHistory+0xda>
        return;

    clearCurrentLine(cli);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fc91 	bl	8006120 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fcc0 	bl	800618a <writeToOutput>

    if (navigateUp)
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d006      	beq.n	800581e <navigateHistory+0x66>
        ++impl->history.current;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	895b      	ldrh	r3, [r3, #10]
 8005814:	3301      	adds	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	815a      	strh	r2, [r3, #10]
 800581c:	e005      	b.n	800582a <navigateHistory+0x72>
    else
        --impl->history.current;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	895b      	ldrh	r3, [r3, #10]
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1d1a      	adds	r2, r3, #4
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	895b      	ldrh	r3, [r3, #10]
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f000 fe0d 	bl	8006454 <historyGet>
 800583a:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <navigateHistory+0x8e>
        item = "";
 8005842:	4b16      	ldr	r3, [pc, #88]	@ (800589c <navigateHistory+0xe4>)
 8005844:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8005846:	6978      	ldr	r0, [r7, #20]
 8005848:	f7fa fd54 	bl	80002f4 <strlen>
 800584c:	4603      	mov	r3, r0
 800584e:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	89fa      	ldrh	r2, [r7, #14]
 8005856:	6979      	ldr	r1, [r7, #20]
 8005858:	4618      	mov	r0, r3
 800585a:	f01c fcc2 	bl	80221e2 <memcpy>
    impl->cmdBuffer[len] = '\0';
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	69da      	ldr	r2, [r3, #28]
 8005862:	89fb      	ldrh	r3, [r7, #14]
 8005864:	4413      	add	r3, r2
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	89fa      	ldrh	r2, [r7, #14]
 800586e:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fc87 	bl	800618a <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	8c1a      	ldrh	r2, [r3, #32]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cursorPos = 0;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2200      	movs	r2, #0
 8005888:	869a      	strh	r2, [r3, #52]	@ 0x34

    printLiveAutocompletion(cli);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fb54 	bl	8005f38 <printLiveAutocompletion>
 8005890:	e000      	b.n	8005894 <navigateHistory+0xdc>
        return;
 8005892:	bf00      	nop
}
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	08025028 	.word	0x08025028

080058a0 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 80058a0:	b590      	push	{r4, r7, lr}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80058b6:	d948      	bls.n	800594a <onEscapedInput+0xaa>
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	2b7e      	cmp	r3, #126	@ 0x7e
 80058bc:	d845      	bhi.n	800594a <onEscapedInput+0xaa>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80058c4:	f023 0308 	bic.w	r3, r3, #8
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	2b41      	cmp	r3, #65	@ 0x41
 80058d4:	d002      	beq.n	80058dc <onEscapedInput+0x3c>
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	2b42      	cmp	r3, #66	@ 0x42
 80058da:	d109      	bne.n	80058f0 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	2b41      	cmp	r3, #65	@ 0x41
 80058e0:	bf0c      	ite	eq
 80058e2:	2301      	moveq	r3, #1
 80058e4:	2300      	movne	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff ff64 	bl	80057b8 <navigateHistory>
        }

        if (c == 'C' && impl->cursorPos > 0) {
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	2b43      	cmp	r3, #67	@ 0x43
 80058f4:	d10f      	bne.n	8005916 <onEscapedInput+0x76>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <onEscapedInput+0x76>
            impl->cursorPos--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorRight);
 800590a:	4b12      	ldr	r3, [pc, #72]	@ (8005954 <onEscapedInput+0xb4>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fc3a 	bl	800618a <writeToOutput>
        }

        if (c == 'D' && impl->cursorPos < strlen(impl->cmdBuffer)) {
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	2b44      	cmp	r3, #68	@ 0x44
 800591a:	d116      	bne.n	800594a <onEscapedInput+0xaa>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005920:	461c      	mov	r4, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	4618      	mov	r0, r3
 8005928:	f7fa fce4 	bl	80002f4 <strlen>
 800592c:	4603      	mov	r3, r0
 800592e:	429c      	cmp	r4, r3
 8005930:	d20b      	bcs.n	800594a <onEscapedInput+0xaa>
            impl->cursorPos++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005936:	3301      	adds	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorLeft);
 800593e:	4b06      	ldr	r3, [pc, #24]	@ (8005958 <onEscapedInput+0xb8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fc20 	bl	800618a <writeToOutput>
        }
    }
}
 800594a:	bf00      	nop
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	bd90      	pop	{r4, r7, pc}
 8005952:	bf00      	nop
 8005954:	240148a4 	.word	0x240148a4
 8005958:	240148a8 	.word	0x240148a8

0800595c <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8c1b      	ldrh	r3, [r3, #32]
 8005972:	3302      	adds	r3, #2
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8005978:	4293      	cmp	r3, r2
 800597a:	da3b      	bge.n	80059f4 <onCharInput+0x98>
        return;

    size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	4618      	mov	r0, r3
 8005982:	f7fa fcb7 	bl	80002f4 <strlen>
 8005986:	4602      	mov	r2, r0
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	60bb      	str	r3, [r7, #8]

    memmove(&impl->cmdBuffer[insertPos + 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	3301      	adds	r3, #1
 8005998:	18d0      	adds	r0, r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	18d1      	adds	r1, r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80059a6:	3301      	adds	r3, #1
 80059a8:	461a      	mov	r2, r3
 80059aa:	f01c fb56 	bl	802205a <memmove>

    ++impl->cmdSize;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8c1b      	ldrh	r3, [r3, #32]
 80059b2:	3301      	adds	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	841a      	strh	r2, [r3, #32]
    ++impl->inputLineLength;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80059be:	3301      	adds	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cmdBuffer[insertPos] = c;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	69da      	ldr	r2, [r3, #28]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4413      	add	r3, r2
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	701a      	strb	r2, [r3, #0]

    if (impl->cursorPos > 0)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <onCharInput+0x8a>
        writeToOutput(cli, escSeqInsertChar); // Insert Character
 80059da:	4b08      	ldr	r3, [pc, #32]	@ (80059fc <onCharInput+0xa0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fbd2 	bl	800618a <writeToOutput>

    cli->writeChar(cli, c);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	78fa      	ldrb	r2, [r7, #3]
 80059ec:	4611      	mov	r1, r2
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	4798      	blx	r3
 80059f2:	e000      	b.n	80059f6 <onCharInput+0x9a>
        return;
 80059f4:	bf00      	nop
}
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	240148b4 	.word	0x240148b4

08005a00 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005a18:	2b0d      	cmp	r3, #13
 8005a1a:	d102      	bne.n	8005a22 <onControlInput+0x22>
 8005a1c:	78fb      	ldrb	r3, [r7, #3]
 8005a1e:	2b0a      	cmp	r3, #10
 8005a20:	d078      	beq.n	8005b14 <onControlInput+0x114>
        (impl->lastChar == '\n' && c == '\r'))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8005a28:	2b0a      	cmp	r3, #10
 8005a2a:	d102      	bne.n	8005a32 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	2b0d      	cmp	r3, #13
 8005a30:	d070      	beq.n	8005b14 <onControlInput+0x114>
        return;

    if (c == '\r' || c == '\n') {
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	2b0d      	cmp	r3, #13
 8005a36:	d002      	beq.n	8005a3e <onControlInput+0x3e>
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	2b0a      	cmp	r3, #10
 8005a3c:	d129      	bne.n	8005a92 <onControlInput+0x92>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fadc 	bl	8005ffc <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8005a44:	4b35      	ldr	r3, [pc, #212]	@ (8005b1c <onControlInput+0x11c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fb9d 	bl	800618a <writeToOutput>

        if (impl->cmdSize > 0)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8c1b      	ldrh	r3, [r3, #32]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <onControlInput+0x5e>
            parseCommand(cli);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f865 	bl	8005b28 <parseCommand>
        impl->cmdSize = 0;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	8c12      	ldrh	r2, [r2, #32]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	815a      	strh	r2, [r3, #10]
        impl->cursorPos = 0;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	869a      	strh	r2, [r3, #52]	@ 0x34

        writeToOutput(cli, impl->invitation);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fb7d 	bl	800618a <writeToOutput>
 8005a90:	e041      	b.n	8005b16 <onControlInput+0x116>
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d002      	beq.n	8005a9e <onControlInput+0x9e>
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a9c:	d133      	bne.n	8005b06 <onControlInput+0x106>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8c1b      	ldrh	r3, [r3, #32]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	dd2b      	ble.n	8005b06 <onControlInput+0x106>
        // remove char from screen
        writeToOutput(cli, escSeqCursorLeft); // Move cursor to left
 8005aae:	4b1c      	ldr	r3, [pc, #112]	@ (8005b20 <onControlInput+0x120>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fb68 	bl	800618a <writeToOutput>
        writeToOutput(cli, escSeqDeleteChar); // And remove character
 8005aba:	4b1a      	ldr	r3, [pc, #104]	@ (8005b24 <onControlInput+0x124>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fb62 	bl	800618a <writeToOutput>
        // and from buffer
        size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fa fc12 	bl	80002f4 <strlen>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	60bb      	str	r3, [r7, #8]
        memmove(&impl->cmdBuffer[insertPos - 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	69da      	ldr	r2, [r3, #28]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	18d0      	adds	r0, r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	18d1      	adds	r1, r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005af0:	3301      	adds	r3, #1
 8005af2:	461a      	mov	r2, r3
 8005af4:	f01c fab1 	bl	802205a <memmove>
        --impl->cmdSize;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8c1b      	ldrh	r3, [r3, #32]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	841a      	strh	r2, [r3, #32]
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 8005b04:	e007      	b.n	8005b16 <onControlInput+0x116>
    } else if (c == '\t') {
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	2b09      	cmp	r3, #9
 8005b0a:	d104      	bne.n	8005b16 <onControlInput+0x116>
        onAutocompleteRequest(cli);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fa75 	bl	8005ffc <onAutocompleteRequest>
 8005b12:	e000      	b.n	8005b16 <onControlInput+0x116>
        return;
 8005b14:	bf00      	nop
    }

}
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	240148a0 	.word	0x240148a0
 8005b20:	240148a8 	.word	0x240148a8
 8005b24:	240148b8 	.word	0x240148b8

08005b28 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b08f      	sub	sp, #60	@ 0x3c
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b40:	e00d      	b.n	8005b5e <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b48:	4413      	add	r3, r2
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d003      	beq.n	8005b58 <parseCommand+0x30>
            isEmpty = false;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8005b56:	e008      	b.n	8005b6a <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8005b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	8c1b      	ldrh	r3, [r3, #32]
 8005b62:	461a      	mov	r2, r3
 8005b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b66:	4293      	cmp	r3, r2
 8005b68:	dbeb      	blt.n	8005b42 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8005b6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 80fa 	bne.w	8005d68 <parseCommand+0x240>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f000 fc04 	bl	800638c <historyPut>

    char *cmdName = NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8005b92:	2300      	movs	r3, #0
 8005b94:	623b      	str	r3, [r7, #32]
 8005b96:	e030      	b.n	8005bfa <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d10f      	bne.n	8005bca <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8005baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d105      	bne.n	8005bbc <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8005bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d018      	beq.n	8005bf4 <parseCommand+0xcc>
                nameFinished = true;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005bc8:	e014      	b.n	8005bf4 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8005bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d105      	bne.n	8005bdc <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bda:	e00b      	b.n	8005bf4 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8005bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d108      	bne.n	8005bf4 <parseCommand+0xcc>
 8005be2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	69da      	ldr	r2, [r3, #28]
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	623b      	str	r3, [r7, #32]
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	8c1b      	ldrh	r3, [r3, #32]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	4293      	cmp	r3, r2
 8005c04:	dbc8      	blt.n	8005b98 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	8c1b      	ldrh	r3, [r3, #32]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8005c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 80a7 	beq.w	8005d6c <parseCommand+0x244>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	e072      	b.n	8005d0a <parseCommand+0x1e2>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	4413      	add	r3, r2
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	440b      	add	r3, r1
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	4619      	mov	r1, r3
 8005c38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c3a:	f7fa fb51 	bl	80002e0 <strcmp>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d15f      	bne.n	8005d04 <parseCommand+0x1dc>
            if (impl->bindings[i].binding == NULL)
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	4413      	add	r3, r2
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	440b      	add	r3, r1
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d05e      	beq.n	8005d18 <parseCommand+0x1f0>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	4613      	mov	r3, r2
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	4413      	add	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	440b      	add	r3, r1
 8005c6a:	7b1b      	ldrb	r3, [r3, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8005c70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c72:	f7ff fcc9 	bl	8005608 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005c7c:	f043 0310 	orr.w	r3, r3, #16
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            // check if help was requested (help is printed when no other options are set)
            if (cmdArgs != NULL && (strcmp(cmdArgs, "-h") == 0 || strcmp(cmdArgs, "--help") == 0)) {
 8005c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01a      	beq.n	8005cc4 <parseCommand+0x19c>
 8005c8e:	4939      	ldr	r1, [pc, #228]	@ (8005d74 <parseCommand+0x24c>)
 8005c90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c92:	f7fa fb25 	bl	80002e0 <strcmp>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d006      	beq.n	8005caa <parseCommand+0x182>
 8005c9c:	4936      	ldr	r1, [pc, #216]	@ (8005d78 <parseCommand+0x250>)
 8005c9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ca0:	f7fa fb1e 	bl	80002e0 <strcmp>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10c      	bne.n	8005cc4 <parseCommand+0x19c>
                printBindingHelp(cli, &impl->bindings[i]);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	4413      	add	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	440b      	add	r3, r1
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f85d 	bl	8005d7c <printBindingHelp>
 8005cc2:	e015      	b.n	8005cf0 <parseCommand+0x1c8>
            } else {
                impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	440b      	add	r3, r1
 8005cd4:	695c      	ldr	r4, [r3, #20]
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	440b      	add	r3, r1
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	47a0      	blx	r4
            }
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005cf6:	f023 0310 	bic.w	r3, r3, #16
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8005d02:	e034      	b.n	8005d6e <parseCommand+0x246>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	3301      	adds	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d0e:	461a      	mov	r2, r3
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4293      	cmp	r3, r2
 8005d14:	db86      	blt.n	8005c24 <parseCommand+0xfc>
 8005d16:	e000      	b.n	8005d1a <parseCommand+0x1f2>
                break;
 8005d18:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01d      	beq.n	8005d5e <parseCommand+0x236>
        CliCommand command;
        command.name = cmdName;
 8005d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d24:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8005d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d28:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005d30:	f043 0310 	orr.w	r3, r3, #16
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f107 020c 	add.w	r2, r7, #12
 8005d44:	4611      	mov	r1, r2
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005d50:	f023 0310 	bic.w	r3, r3, #16
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8005d5c:	e007      	b.n	8005d6e <parseCommand+0x246>
    } else {
        onUnknownCommand(cli, cmdName);
 8005d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f001 f845 	bl	8006df0 <onUnknownCommand>
 8005d66:	e002      	b.n	8005d6e <parseCommand+0x246>
        return;
 8005d68:	bf00      	nop
 8005d6a:	e000      	b.n	8005d6e <parseCommand+0x246>
        return;
 8005d6c:	bf00      	nop
    }
}
 8005d6e:	373c      	adds	r7, #60	@ 0x3c
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd90      	pop	{r4, r7, pc}
 8005d74:	0802502c 	.word	0x0802502c
 8005d78:	08025030 	.word	0x08025030

08005d7c <printBindingHelp>:

static void printBindingHelp(EmbeddedCli *cli, CliCommandBinding *binding) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
    if (binding->help != NULL) {
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d010      	beq.n	8005db0 <printBindingHelp+0x34>
        cli->writeChar(cli, '\t');
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2109      	movs	r1, #9
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	4798      	blx	r3
        writeToOutput(cli, binding->help);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f9f3 	bl	800618a <writeToOutput>
        writeToOutput(cli, lineBreak);
 8005da4:	4b04      	ldr	r3, [pc, #16]	@ (8005db8 <printBindingHelp+0x3c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f9ed 	bl	800618a <writeToOutput>
    }
}
 8005db0:	bf00      	nop
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	240148a0 	.word	0x240148a0

08005dbc <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08e      	sub	sp, #56	@ 0x38
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8005dc8:	2300      	movs	r3, #0
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	82bb      	strh	r3, [r7, #20]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7fa fa8d 	bl	80002f4 <strlen>
 8005dda:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <getAutocompletedCommand+0x34>
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d108      	bne.n	8005e02 <getAutocompletedCommand+0x46>
        return cmd;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	461a      	mov	r2, r3
 8005df4:	f107 0310 	add.w	r3, r7, #16
 8005df8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005dfc:	e882 0003 	stmia.w	r2, {r0, r1}
 8005e00:	e095      	b.n	8005f2e <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8005e02:	2300      	movs	r3, #0
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e06:	e083      	b.n	8005f10 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005e0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e0e:	4613      	mov	r3, r2
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	4413      	add	r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	440b      	add	r3, r1
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8005e1c:	69f8      	ldr	r0, [r7, #28]
 8005e1e:	f7fa fa69 	bl	80002f4 <strlen>
 8005e22:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2a:	4413      	add	r3, r2
 8005e2c:	781a      	ldrb	r2, [r3, #0]
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e34:	440b      	add	r3, r1
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d35e      	bcc.n	8005f04 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 8005e46:	2301      	movs	r3, #1
 8005e48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e50:	e010      	b.n	8005e74 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e56:	4413      	add	r3, r2
 8005e58:	781a      	ldrb	r2, [r3, #0]
 8005e5a:	69f9      	ldr	r1, [r7, #28]
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	440b      	add	r3, r1
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d003      	beq.n	8005e6e <getAutocompletedCommand+0xb2>
                isCandidate = false;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8005e6c:	e006      	b.n	8005e7c <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8005e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e70:	3301      	adds	r3, #1
 8005e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d3ea      	bcc.n	8005e52 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8005e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e80:	f083 0301 	eor.w	r3, r3, #1
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d13e      	bne.n	8005f08 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e90:	4413      	add	r3, r2
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9a:	440b      	add	r3, r1
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8005ea4:	8afb      	ldrh	r3, [r7, #22]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d004      	beq.n	8005eb4 <getAutocompletedCommand+0xf8>
 8005eaa:	8abb      	ldrh	r3, [r7, #20]
 8005eac:	461a      	mov	r2, r3
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d202      	bcs.n	8005eba <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8005eba:	8afb      	ldrh	r3, [r7, #22]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8005ec2:	8afb      	ldrh	r3, [r7, #22]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d102      	bne.n	8005ece <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	613b      	str	r3, [r7, #16]
            continue;
 8005ecc:	e01d      	b.n	8005f0a <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	8c1b      	ldrh	r3, [r3, #32]
 8005ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ed4:	e010      	b.n	8005ef8 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eda:	4413      	add	r3, r2
 8005edc:	781a      	ldrb	r2, [r3, #0]
 8005ede:	69f9      	ldr	r1, [r7, #28]
 8005ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee2:	440b      	add	r3, r1
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d003      	beq.n	8005ef2 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8005eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	82bb      	strh	r3, [r7, #20]
                break;
 8005ef0:	e00b      	b.n	8005f0a <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8005ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ef8:	8abb      	ldrh	r3, [r7, #20]
 8005efa:	461a      	mov	r2, r3
 8005efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d3e9      	bcc.n	8005ed6 <getAutocompletedCommand+0x11a>
 8005f02:	e002      	b.n	8005f0a <getAutocompletedCommand+0x14e>
            continue;
 8005f04:	bf00      	nop
 8005f06:	e000      	b.n	8005f0a <getAutocompletedCommand+0x14e>
            continue;
 8005f08:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f14:	461a      	mov	r2, r3
 8005f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	f6ff af75 	blt.w	8005e08 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	461a      	mov	r2, r3
 8005f22:	f107 0310 	add.w	r3, r7, #16
 8005f26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f2a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	3738      	adds	r7, #56	@ 0x38
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d04a      	beq.n	8005fea <printLiveAutocompletion+0xb2>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff ff2c 	bl	8005dbc <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8005f64:	8a7b      	ldrh	r3, [r7, #18]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d102      	bne.n	8005f70 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	8c1b      	ldrh	r3, [r3, #32]
 8005f6e:	823b      	strh	r3, [r7, #16]
    }

    // save cursor location
    writeToOutput(cli, escSeqCursorSave);
 8005f70:	4b20      	ldr	r3, [pc, #128]	@ (8005ff4 <printLiveAutocompletion+0xbc>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f907 	bl	800618a <writeToOutput>

    moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_FORWARD);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005f80:	2201      	movs	r2, #1
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f921 	bl	80061cc <moveCursor>

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	8c1b      	ldrh	r3, [r3, #32]
 8005f8e:	61fb      	str	r3, [r7, #28]
 8005f90:	e00b      	b.n	8005faa <printLiveAutocompletion+0x72>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	7812      	ldrb	r2, [r2, #0]
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	61fb      	str	r3, [r7, #28]
 8005faa:	8a3b      	ldrh	r3, [r7, #16]
 8005fac:	461a      	mov	r2, r3
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d3ee      	bcc.n	8005f92 <printLiveAutocompletion+0x5a>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8005fb4:	8a3b      	ldrh	r3, [r7, #16]
 8005fb6:	61bb      	str	r3, [r7, #24]
 8005fb8:	e007      	b.n	8005fca <printLiveAutocompletion+0x92>
        cli->writeChar(cli, ' ');
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2120      	movs	r1, #32
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005fce:	461a      	mov	r2, r3
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d3f1      	bcc.n	8005fba <printLiveAutocompletion+0x82>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8005fd6:	8a3a      	ldrh	r2, [r7, #16]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	861a      	strh	r2, [r3, #48]	@ 0x30

    // restore cursor
    writeToOutput(cli, escSeqCursorRestore);
 8005fdc:	4b06      	ldr	r3, [pc, #24]	@ (8005ff8 <printLiveAutocompletion+0xc0>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f8d1 	bl	800618a <writeToOutput>
 8005fe8:	e000      	b.n	8005fec <printLiveAutocompletion+0xb4>
        return;
 8005fea:	bf00      	nop
}
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	240148ac 	.word	0x240148ac
 8005ff8:	240148b0 	.word	0x240148b0

08005ffc <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	69da      	ldr	r2, [r3, #28]
 800600e:	f107 030c 	add.w	r3, r7, #12
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff fed1 	bl	8005dbc <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 800601a:	8a7b      	ldrh	r3, [r7, #18]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d078      	beq.n	8006112 <onAutocompleteRequest+0x116>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8006020:	8a7b      	ldrh	r3, [r7, #18]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d004      	beq.n	8006030 <onAutocompleteRequest+0x34>
 8006026:	8a3a      	ldrh	r2, [r7, #16]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	8c1b      	ldrh	r3, [r3, #32]
 800602c:	429a      	cmp	r2, r3
 800602e:	d931      	bls.n	8006094 <onAutocompleteRequest+0x98>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	68f9      	ldr	r1, [r7, #12]
 8006036:	8a3a      	ldrh	r2, [r7, #16]
 8006038:	4618      	mov	r0, r3
 800603a:	f01c f8d2 	bl	80221e2 <memcpy>
        if (cmd.candidateCount == 1) {
 800603e:	8a7b      	ldrh	r3, [r7, #18]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d109      	bne.n	8006058 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	8a3a      	ldrh	r2, [r7, #16]
 800604a:	4413      	add	r3, r2
 800604c:	2220      	movs	r2, #32
 800604e:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8006050:	8a3b      	ldrh	r3, [r7, #16]
 8006052:	3301      	adds	r3, #1
 8006054:	b29b      	uxth	r3, r3
 8006056:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	8a3a      	ldrh	r2, [r7, #16]
 800605e:	4413      	add	r3, r2
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize - impl->cursorPos]);
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	8c12      	ldrh	r2, [r2, #32]
 800606c:	4611      	mov	r1, r2
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8006072:	1a8a      	subs	r2, r1, r2
 8006074:	4413      	add	r3, r2
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f886 	bl	800618a <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 800607e:	8a3a      	ldrh	r2, [r7, #16]
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	8c1a      	ldrh	r2, [r3, #32]
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->cursorPos = 0; // Cursor has been moved to the end
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	2200      	movs	r2, #0
 8006090:	869a      	strh	r2, [r3, #52]	@ 0x34
        return;
 8006092:	e03f      	b.n	8006114 <onAutocompleteRequest+0x118>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f843 	bl	8006120 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	e021      	b.n	80060e4 <onAutocompleteRequest+0xe8>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	4413      	add	r3, r2
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d014      	beq.n	80060dc <onAutocompleteRequest+0xe0>
            continue;

        const char *name = impl->bindings[i].name;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	4613      	mov	r3, r2
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	4413      	add	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	440b      	add	r3, r1
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 80060c6:	6979      	ldr	r1, [r7, #20]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f85e 	bl	800618a <writeToOutput>
        writeToOutput(cli, lineBreak);
 80060ce:	4b13      	ldr	r3, [pc, #76]	@ (800611c <onAutocompleteRequest+0x120>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f858 	bl	800618a <writeToOutput>
 80060da:	e000      	b.n	80060de <onAutocompleteRequest+0xe2>
            continue;
 80060dc:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	3301      	adds	r3, #1
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060e8:	461a      	mov	r2, r3
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	dbd7      	blt.n	80060a0 <onAutocompleteRequest+0xa4>
    }

    writeToOutput(cli, impl->invitation);
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f847 	bl	800618a <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f841 	bl	800618a <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	8c1a      	ldrh	r2, [r3, #32]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8006110:	e000      	b.n	8006114 <onAutocompleteRequest+0x118>
        return;
 8006112:	bf00      	nop
}
 8006114:	3720      	adds	r7, #32
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	240148a0 	.word	0x240148a0

08006120 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8006120:	b590      	push	{r4, r7, lr}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006132:	461c      	mov	r4, r3
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f7fa f8db 	bl	80002f4 <strlen>
 800613e:	4603      	mov	r3, r0
 8006140:	4423      	add	r3, r4
 8006142:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	210d      	movs	r1, #13
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	e007      	b.n	8006164 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2120      	movs	r1, #32
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	3301      	adds	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	429a      	cmp	r2, r3
 800616a:	d3f3      	bcc.n	8006154 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	210d      	movs	r1, #13
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
    impl->inputLineLength = 0;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2200      	movs	r2, #0
 800617a:	861a      	strh	r2, [r3, #48]	@ 0x30

    impl->cursorPos = 0;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2200      	movs	r2, #0
 8006180:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	bd90      	pop	{r4, r7, pc}

0800618a <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8006194:	6838      	ldr	r0, [r7, #0]
 8006196:	f7fa f8ad 	bl	80002f4 <strlen>
 800619a:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	e00b      	b.n	80061ba <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	440a      	add	r2, r1
 80061ac:	7812      	ldrb	r2, [r2, #0]
 80061ae:	4611      	mov	r1, r2
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3301      	adds	r3, #1
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d3ef      	bcc.n	80061a2 <writeToOutput+0x18>
    }
}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <moveCursor>:

static void moveCursor(EmbeddedCli* cli, uint16_t count, bool direction) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	807b      	strh	r3, [r7, #2]
 80061d8:	4613      	mov	r3, r2
 80061da:	707b      	strb	r3, [r7, #1]
    // Check if we need to send any command
    if (count == 0)
 80061dc:	887b      	ldrh	r3, [r7, #2]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d020      	beq.n	8006224 <moveCursor+0x58>
        return;

    // 5 = uint16_t max, 3 = escape sequence, 1 = string termination
    char escBuffer[5 + 3 + 1] = { 0 };
 80061e2:	f107 030c 	add.w	r3, r7, #12
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	605a      	str	r2, [r3, #4]
 80061ec:	721a      	strb	r2, [r3, #8]
    char dirChar = direction ? escSeqCursorRight[2] : escSeqCursorLeft[2];
 80061ee:	787b      	ldrb	r3, [r7, #1]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <moveCursor+0x32>
 80061f4:	4b0d      	ldr	r3, [pc, #52]	@ (800622c <moveCursor+0x60>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3302      	adds	r3, #2
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	e003      	b.n	8006206 <moveCursor+0x3a>
 80061fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006230 <moveCursor+0x64>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3302      	adds	r3, #2
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	75fb      	strb	r3, [r7, #23]
    sprintf(escBuffer, "\x1B[%u%c", count, dirChar);
 8006208:	887a      	ldrh	r2, [r7, #2]
 800620a:	7dfb      	ldrb	r3, [r7, #23]
 800620c:	f107 000c 	add.w	r0, r7, #12
 8006210:	4908      	ldr	r1, [pc, #32]	@ (8006234 <moveCursor+0x68>)
 8006212:	f01b fead 	bl	8021f70 <siprintf>
    writeToOutput(cli, escBuffer);
 8006216:	f107 030c 	add.w	r3, r7, #12
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff ffb4 	bl	800618a <writeToOutput>
 8006222:	e000      	b.n	8006226 <moveCursor+0x5a>
        return;
 8006224:	bf00      	nop
}
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	240148a4 	.word	0x240148a4
 8006230:	240148a8 	.word	0x240148a8
 8006234:	08025038 	.word	0x08025038

08006238 <isControlChar>:

static bool isControlChar(char c) {
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	2b0d      	cmp	r3, #13
 8006246:	d00b      	beq.n	8006260 <isControlChar+0x28>
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	2b0a      	cmp	r3, #10
 800624c:	d008      	beq.n	8006260 <isControlChar+0x28>
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d005      	beq.n	8006260 <isControlChar+0x28>
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	2b09      	cmp	r3, #9
 8006258:	d002      	beq.n	8006260 <isControlChar+0x28>
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	2b7f      	cmp	r3, #127	@ 0x7f
 800625e:	d101      	bne.n	8006264 <isControlChar+0x2c>
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <isControlChar+0x2e>
 8006264:	2300      	movs	r3, #0
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	b2db      	uxtb	r3, r3
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	2b1f      	cmp	r3, #31
 8006286:	d904      	bls.n	8006292 <isDisplayableChar+0x1a>
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	2b7e      	cmp	r3, #126	@ 0x7e
 800628c:	d801      	bhi.n	8006292 <isDisplayableChar+0x1a>
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <isDisplayableChar+0x1c>
 8006292:	2300      	movs	r3, #0
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	b2db      	uxtb	r3, r3
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	88da      	ldrh	r2, [r3, #6]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	889b      	ldrh	r3, [r3, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d306      	bcc.n	80062c8 <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	88da      	ldrh	r2, [r3, #6]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	889b      	ldrh	r3, [r3, #4]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	e009      	b.n	80062dc <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	891a      	ldrh	r2, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	889b      	ldrh	r3, [r3, #4]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	88db      	ldrh	r3, [r3, #6]
 80062d8:	4413      	add	r3, r2
 80062da:	b29b      	uxth	r3, r3
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
    char a = '\0';
 80062f0:	2300      	movs	r3, #0
 80062f2:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	889a      	ldrh	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	88db      	ldrh	r3, [r3, #6]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d014      	beq.n	800632a <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	8892      	ldrh	r2, [r2, #4]
 8006308:	4413      	add	r3, r2
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	889b      	ldrh	r3, [r3, #4]
 8006312:	3301      	adds	r3, #1
 8006314:	b29b      	uxth	r3, r3
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	8912      	ldrh	r2, [r2, #8]
 800631a:	fbb3 f1f2 	udiv	r1, r3, r2
 800631e:	fb01 f202 	mul.w	r2, r1, r2
 8006322:	1a9b      	subs	r3, r3, r2
 8006324:	b29a      	uxth	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	809a      	strh	r2, [r3, #4]
    }
    return a;
 800632a:	7bfb      	ldrb	r3, [r7, #15]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	88db      	ldrh	r3, [r3, #6]
 8006348:	3301      	adds	r3, #1
 800634a:	b29b      	uxth	r3, r3
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	8912      	ldrh	r2, [r2, #8]
 8006350:	fbb3 f1f2 	udiv	r1, r3, r2
 8006354:	fb01 f202 	mul.w	r2, r1, r2
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	889b      	ldrh	r3, [r3, #4]
 8006360:	89fa      	ldrh	r2, [r7, #14]
 8006362:	429a      	cmp	r2, r3
 8006364:	d00b      	beq.n	800637e <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	88d2      	ldrh	r2, [r2, #6]
 800636e:	4413      	add	r3, r2
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	89fa      	ldrh	r2, [r7, #14]
 8006378:	80da      	strh	r2, [r3, #6]
        return true;
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <fifoBufPush+0x48>
    }
    return false;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8006396:	6838      	ldr	r0, [r7, #0]
 8006398:	f7f9 ffac 	bl	80002f4 <strlen>
 800639c:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	889b      	ldrh	r3, [r3, #4]
 80063a2:	461a      	mov	r2, r3
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	3301      	adds	r3, #1
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d201      	bcs.n	80063b0 <historyPut+0x24>
        return false;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e04d      	b.n	800644c <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f86a 	bl	800648c <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 80063b8:	e024      	b.n	8006404 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	891b      	ldrh	r3, [r3, #8]
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f847 	bl	8006454 <historyGet>
 80063c6:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 80063c8:	6978      	ldr	r0, [r7, #20]
 80063ca:	f7f9 ff93 	bl	80002f4 <strlen>
 80063ce:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4413      	add	r3, r2
 80063de:	3301      	adds	r3, #1
 80063e0:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	889b      	ldrh	r3, [r3, #4]
 80063e6:	461a      	mov	r2, r3
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	3301      	adds	r3, #1
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d20a      	bcs.n	800640e <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	891b      	ldrh	r3, [r3, #8]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	891b      	ldrh	r3, [r3, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1d6      	bne.n	80063ba <historyPut+0x2e>
 800640c:	e000      	b.n	8006410 <historyPut+0x84>
            break;
 800640e:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	891b      	ldrh	r3, [r3, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	3301      	adds	r3, #1
 8006420:	18d0      	adds	r0, r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	4619      	mov	r1, r3
 800642a:	f01b fe16 	bl	802205a <memmove>
    }
    memcpy(history->buf, str, len + 1);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	3301      	adds	r3, #1
 8006436:	461a      	mov	r2, r3
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	f01b fed2 	bl	80221e2 <memcpy>
    ++history->itemsCount;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	891b      	ldrh	r3, [r3, #8]
 8006442:	3301      	adds	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	811a      	strh	r2, [r3, #8]

    return true;
 800644a:	2301      	movs	r3, #1
}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8006460:	887b      	ldrh	r3, [r7, #2]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d004      	beq.n	8006470 <historyGet+0x1c>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	891b      	ldrh	r3, [r3, #8]
 800646a:	887a      	ldrh	r2, [r7, #2]
 800646c:	429a      	cmp	r2, r3
 800646e:	d901      	bls.n	8006474 <historyGet+0x20>
        return NULL;
 8006470:	2300      	movs	r3, #0
 8006472:	e007      	b.n	8006484 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	887a      	ldrh	r2, [r7, #2]
 800647a:	4611      	mov	r1, r2
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff f937 	bl	80056f0 <embeddedCliGetToken>
 8006482:	4603      	mov	r3, r0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d04c      	beq.n	8006536 <historyRemove+0xaa>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	891b      	ldrh	r3, [r3, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d048      	beq.n	8006536 <historyRemove+0xaa>
        return;
    char *item = NULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80064a8:	2301      	movs	r3, #1
 80064aa:	827b      	strh	r3, [r7, #18]
 80064ac:	e013      	b.n	80064d6 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	8a7a      	ldrh	r2, [r7, #18]
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff f935 	bl	8005726 <embeddedCliGetTokenVariable>
 80064bc:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6978      	ldr	r0, [r7, #20]
 80064c2:	f7f9 ff0d 	bl	80002e0 <strcmp>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <historyRemove+0x56>
            break;
        }
        item = NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80064d0:	8a7b      	ldrh	r3, [r7, #18]
 80064d2:	3301      	adds	r3, #1
 80064d4:	827b      	strh	r3, [r7, #18]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	891b      	ldrh	r3, [r3, #8]
 80064da:	8a7a      	ldrh	r2, [r7, #18]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d9e6      	bls.n	80064ae <historyRemove+0x22>
 80064e0:	e000      	b.n	80064e4 <historyRemove+0x58>
            break;
 80064e2:	bf00      	nop
    }
    if (item == NULL)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d027      	beq.n	800653a <historyRemove+0xae>
        return;

    --history->itemsCount;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	891b      	ldrh	r3, [r3, #8]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 80064f6:	8a7a      	ldrh	r2, [r7, #18]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	891b      	ldrh	r3, [r3, #8]
 80064fc:	3301      	adds	r3, #1
 80064fe:	429a      	cmp	r2, r3
 8006500:	d01d      	beq.n	800653e <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8006502:	6978      	ldr	r0, [r7, #20]
 8006504:	f7f9 fef6 	bl	80002f4 <strlen>
 8006508:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	889b      	ldrh	r3, [r3, #4]
 800650e:	4619      	mov	r1, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3301      	adds	r3, #1
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	441a      	add	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	1acb      	subs	r3, r1, r3
 8006520:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4413      	add	r3, r2
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	4619      	mov	r1, r3
 800652e:	6978      	ldr	r0, [r7, #20]
 8006530:	f01b fd93 	bl	802205a <memmove>
 8006534:	e004      	b.n	8006540 <historyRemove+0xb4>
        return;
 8006536:	bf00      	nop
 8006538:	e002      	b.n	8006540 <historyRemove+0xb4>
        return;
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <historyRemove+0xb4>
        return;
 800653e:	bf00      	nop
}
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <getTokenPosition+0x18>
 8006558:	887b      	ldrh	r3, [r7, #2]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 800655e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006562:	e028      	b.n	80065b6 <getTokenPosition+0x70>
    uint16_t i = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 8006568:	2301      	movs	r3, #1
 800656a:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 800656c:	89ba      	ldrh	r2, [r7, #12]
 800656e:	887b      	ldrh	r3, [r7, #2]
 8006570:	429a      	cmp	r2, r3
 8006572:	d013      	beq.n	800659c <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8006574:	89fb      	ldrh	r3, [r7, #14]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4413      	add	r3, r2
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d109      	bne.n	8006594 <getTokenPosition+0x4e>
            ++tokenCount;
 8006580:	89bb      	ldrh	r3, [r7, #12]
 8006582:	3301      	adds	r3, #1
 8006584:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8006586:	89fb      	ldrh	r3, [r7, #14]
 8006588:	3301      	adds	r3, #1
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8006594:	89fb      	ldrh	r3, [r7, #14]
 8006596:	3301      	adds	r3, #1
 8006598:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 800659a:	e7e7      	b.n	800656c <getTokenPosition+0x26>
            break;
 800659c:	bf00      	nop
 800659e:	e000      	b.n	80065a2 <getTokenPosition+0x5c>
                break;
 80065a0:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 80065a2:	89fb      	ldrh	r3, [r7, #14]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	4413      	add	r3, r2
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <getTokenPosition+0x6c>
        return i;
 80065ae:	89fb      	ldrh	r3, [r7, #14]
 80065b0:	e001      	b.n	80065b6 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 80065b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <findCategoryIndex>:

/*************************************************
 *                   Helper API                  *
 *************************************************/
static int findCategoryIndex(const char* cat, const char* categories[], int catCount) {
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b086      	sub	sp, #24
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < catCount; i++) {
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e010      	b.n	80065f6 <findCategoryIndex+0x34>
        if (strcmp(cat, categories[i]) == 0) {
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	4413      	add	r3, r2
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4619      	mov	r1, r3
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f7f9 fe7d 	bl	80002e0 <strcmp>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <findCategoryIndex+0x2e>
            return i;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	e008      	b.n	8006602 <findCategoryIndex+0x40>
    for (int i = 0; i < catCount; i++) {
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	3301      	adds	r3, #1
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	dbea      	blt.n	80065d4 <findCategoryIndex+0x12>
        }
    }
    return -1;
 80065fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <printAlignedColumn>:

static void printAlignedColumn(EmbeddedCli *cli, const char *str, int colWidth) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
    int len = strlen(str);
 8006618:	68b8      	ldr	r0, [r7, #8]
 800661a:	f7f9 fe6b 	bl	80002f4 <strlen>
 800661e:	4603      	mov	r3, r0
 8006620:	613b      	str	r3, [r7, #16]
    writeToOutput(cli, str);
 8006622:	68b9      	ldr	r1, [r7, #8]
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7ff fdb0 	bl	800618a <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	e006      	b.n	800663e <printAlignedColumn+0x32>
        writeToOutput(cli, " ");
 8006630:	4908      	ldr	r1, [pc, #32]	@ (8006654 <printAlignedColumn+0x48>)
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff fda9 	bl	800618a <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	3301      	adds	r3, #1
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	429a      	cmp	r2, r3
 8006648:	dbf2      	blt.n	8006630 <printAlignedColumn+0x24>
    }
}
 800664a:	bf00      	nop
 800664c:	bf00      	nop
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	08025024 	.word	0x08025024

08006658 <CMD_Help>:

void CMD_Help(EmbeddedCli *cli, char *tokens, void *context) {
 8006658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800665c:	b095      	sub	sp, #84	@ 0x54
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	637b      	str	r3, [r7, #52]	@ 0x34

    if (impl->bindingsCount == 0) {
 800666c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <CMD_Help+0x32>
        writeToOutput(cli, "Help is not available");
 8006674:	4982      	ldr	r1, [pc, #520]	@ (8006880 <CMD_Help+0x228>)
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff fd87 	bl	800618a <writeToOutput>
        writeToOutput(cli, lineBreak);
 800667c:	4b81      	ldr	r3, [pc, #516]	@ (8006884 <CMD_Help+0x22c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4619      	mov	r1, r3
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f7ff fd81 	bl	800618a <writeToOutput>
        return;
 8006688:	e1a3      	b.n	80069d2 <CMD_Help+0x37a>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 800668a:	68b8      	ldr	r0, [r7, #8]
 800668c:	f7ff f866 	bl	800575c <embeddedCliGetTokenCount>
 8006690:	4603      	mov	r3, r0
 8006692:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (tokenCount == 0) {
 8006694:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006696:	2b00      	cmp	r3, #0
 8006698:	f040 80e2 	bne.w	8006860 <CMD_Help+0x208>
 800669c:	466b      	mov	r3, sp
 800669e:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 80066a0:	2320      	movs	r3, #32
 80066a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char* categories[MAX_CAT];
 80066a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a6:	3b01      	subs	r3, #1
 80066a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	2200      	movs	r2, #0
 80066ae:	4698      	mov	r8, r3
 80066b0:	4691      	mov	r9, r2
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80066be:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80066c2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80066c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c8:	2200      	movs	r2, #0
 80066ca:	461c      	mov	r4, r3
 80066cc:	4615      	mov	r5, r2
 80066ce:	f04f 0200 	mov.w	r2, #0
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	016b      	lsls	r3, r5, #5
 80066d8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80066dc:	0162      	lsls	r2, r4, #5
 80066de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	3307      	adds	r3, #7
 80066e4:	08db      	lsrs	r3, r3, #3
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	ebad 0d03 	sub.w	sp, sp, r3
 80066ec:	466b      	mov	r3, sp
 80066ee:	3303      	adds	r3, #3
 80066f0:	089b      	lsrs	r3, r3, #2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	623b      	str	r3, [r7, #32]
        int catCount = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

        for (int i = 0; i < impl->bindingsCount; i++) {
 80066fa:	2300      	movs	r3, #0
 80066fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066fe:	e023      	b.n	8006748 <CMD_Help+0xf0>
            const char* cat = impl->bindings[i].category;
 8006700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006702:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006704:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006706:	4613      	mov	r3, r2
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	4413      	add	r3, r2
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	440b      	add	r3, r1
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	61bb      	str	r3, [r7, #24]
            if (cat != NULL) {
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d013      	beq.n	8006742 <CMD_Help+0xea>
                int idx = findCategoryIndex(cat, categories, catCount);
 800671a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800671c:	6a39      	ldr	r1, [r7, #32]
 800671e:	69b8      	ldr	r0, [r7, #24]
 8006720:	f7ff ff4f 	bl	80065c2 <findCategoryIndex>
 8006724:	6178      	str	r0, [r7, #20]
                if (idx < 0 && catCount < MAX_CAT) {
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	da0a      	bge.n	8006742 <CMD_Help+0xea>
 800672c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800672e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006730:	429a      	cmp	r2, r3
 8006732:	da06      	bge.n	8006742 <CMD_Help+0xea>
                    categories[catCount++] = cat;
 8006734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800673a:	6a3a      	ldr	r2, [r7, #32]
 800673c:	69b9      	ldr	r1, [r7, #24]
 800673e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < impl->bindingsCount; i++) {
 8006742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006744:	3301      	adds	r3, #1
 8006746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800674c:	461a      	mov	r2, r3
 800674e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006750:	4293      	cmp	r3, r2
 8006752:	dbd5      	blt.n	8006700 <CMD_Help+0xa8>
                }
            }
        }

        for (int c = 0; c < catCount; c++) {
 8006754:	2300      	movs	r3, #0
 8006756:	647b      	str	r3, [r7, #68]	@ 0x44
 8006758:	e07b      	b.n	8006852 <CMD_Help+0x1fa>
            writeToOutput(cli, "[");
 800675a:	494b      	ldr	r1, [pc, #300]	@ (8006888 <CMD_Help+0x230>)
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff fd14 	bl	800618a <writeToOutput>
            writeToOutput(cli, categories[c]);
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676a:	4619      	mov	r1, r3
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff fd0c 	bl	800618a <writeToOutput>
            writeToOutput(cli, "]");
 8006772:	4946      	ldr	r1, [pc, #280]	@ (800688c <CMD_Help+0x234>)
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff fd08 	bl	800618a <writeToOutput>
            writeToOutput(cli, lineBreak);
 800677a:	4b42      	ldr	r3, [pc, #264]	@ (8006884 <CMD_Help+0x22c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4619      	mov	r1, r3
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7ff fd02 	bl	800618a <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 8006786:	2300      	movs	r3, #0
 8006788:	643b      	str	r3, [r7, #64]	@ 0x40
 800678a:	e053      	b.n	8006834 <CMD_Help+0x1dc>
                const char* cmdCat = impl->bindings[i].category;
 800678c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006790:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006792:	4613      	mov	r3, r2
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	4413      	add	r3, r2
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	440b      	add	r3, r1
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	61fb      	str	r3, [r7, #28]
                if (cmdCat != NULL && strcmp(cmdCat, categories[c]) == 0) {
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d043      	beq.n	800682e <CMD_Help+0x1d6>
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ae:	4619      	mov	r1, r3
 80067b0:	69f8      	ldr	r0, [r7, #28]
 80067b2:	f7f9 fd95 	bl	80002e0 <strcmp>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d138      	bne.n	800682e <CMD_Help+0x1d6>
                    writeToOutput(cli, "    ");
 80067bc:	4934      	ldr	r1, [pc, #208]	@ (8006890 <CMD_Help+0x238>)
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7ff fce3 	bl	800618a <writeToOutput>
                    printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 80067c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80067c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067ca:	4613      	mov	r3, r2
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	4413      	add	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	440b      	add	r3, r1
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2210      	movs	r2, #16
 80067d8:	4619      	mov	r1, r3
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff ff16 	bl	800660c <printAlignedColumn>
                    writeToOutput(cli, "| ");
 80067e0:	492c      	ldr	r1, [pc, #176]	@ (8006894 <CMD_Help+0x23c>)
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff fcd1 	bl	800618a <writeToOutput>
                    if (impl->bindings[i].help) {
 80067e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80067ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067ee:	4613      	mov	r3, r2
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	4413      	add	r3, r2
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	440b      	add	r3, r1
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00d      	beq.n	800681a <CMD_Help+0x1c2>
                        writeToOutput(cli, impl->bindings[i].help);
 80067fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006800:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006802:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006804:	4613      	mov	r3, r2
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	4413      	add	r3, r2
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	440b      	add	r3, r1
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	4619      	mov	r1, r3
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7ff fcb9 	bl	800618a <writeToOutput>
 8006818:	e003      	b.n	8006822 <CMD_Help+0x1ca>
                    } else {
                        writeToOutput(cli, "(no help)");
 800681a:	491f      	ldr	r1, [pc, #124]	@ (8006898 <CMD_Help+0x240>)
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7ff fcb4 	bl	800618a <writeToOutput>
                    }
                    writeToOutput(cli, lineBreak);
 8006822:	4b18      	ldr	r3, [pc, #96]	@ (8006884 <CMD_Help+0x22c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4619      	mov	r1, r3
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7ff fcae 	bl	800618a <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 800682e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006830:	3301      	adds	r3, #1
 8006832:	643b      	str	r3, [r7, #64]	@ 0x40
 8006834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006836:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006838:	461a      	mov	r2, r3
 800683a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800683c:	4293      	cmp	r3, r2
 800683e:	dba5      	blt.n	800678c <CMD_Help+0x134>
                }
            }
            writeToOutput(cli, lineBreak);
 8006840:	4b10      	ldr	r3, [pc, #64]	@ (8006884 <CMD_Help+0x22c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7ff fc9f 	bl	800618a <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 800684c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800684e:	3301      	adds	r3, #1
 8006850:	647b      	str	r3, [r7, #68]	@ 0x44
 8006852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006856:	429a      	cmp	r2, r3
 8006858:	f6ff af7f 	blt.w	800675a <CMD_Help+0x102>
 800685c:	46b5      	mov	sp, r6
 800685e:	e0b8      	b.n	80069d2 <CMD_Help+0x37a>
        }
    } else if (tokenCount == 1) {
 8006860:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006862:	2b01      	cmp	r3, #1
 8006864:	f040 80ab 	bne.w	80069be <CMD_Help+0x366>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8006868:	2101      	movs	r1, #1
 800686a:	68b8      	ldr	r0, [r7, #8]
 800686c:	f7fe ff40 	bl	80056f0 <embeddedCliGetToken>
 8006870:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool found = false;
 8006872:	2300      	movs	r3, #0
 8006874:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8006878:	2300      	movs	r3, #0
 800687a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800687c:	e08c      	b.n	8006998 <CMD_Help+0x340>
 800687e:	bf00      	nop
 8006880:	08025040 	.word	0x08025040
 8006884:	240148a0 	.word	0x240148a0
 8006888:	08025058 	.word	0x08025058
 800688c:	0802505c 	.word	0x0802505c
 8006890:	08025060 	.word	0x08025060
 8006894:	08025068 	.word	0x08025068
 8006898:	0802506c 	.word	0x0802506c
            if (impl->bindings[i].category == NULL) continue;
 800689c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80068a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068a2:	4613      	mov	r3, r2
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	4413      	add	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	440b      	add	r3, r1
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d06e      	beq.n	8006990 <CMD_Help+0x338>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 80068b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80068b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068b8:	4613      	mov	r3, r2
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	4413      	add	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	440b      	add	r3, r1
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7f9 fd0a 	bl	80002e0 <strcmp>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d15f      	bne.n	8006992 <CMD_Help+0x33a>
                found = true;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                writeToOutput(cli, "Command: ");
 80068d8:	4940      	ldr	r1, [pc, #256]	@ (80069dc <CMD_Help+0x384>)
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7ff fc55 	bl	800618a <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 80068e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80068e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068e6:	4613      	mov	r3, r2
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	4413      	add	r3, r2
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	440b      	add	r3, r1
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	4619      	mov	r1, r3
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff fc48 	bl	800618a <writeToOutput>
                writeToOutput(cli, lineBreak);
 80068fa:	4b39      	ldr	r3, [pc, #228]	@ (80069e0 <CMD_Help+0x388>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4619      	mov	r1, r3
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f7ff fc42 	bl	800618a <writeToOutput>

                writeToOutput(cli, "Category: ");
 8006906:	4937      	ldr	r1, [pc, #220]	@ (80069e4 <CMD_Help+0x38c>)
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff fc3e 	bl	800618a <writeToOutput>
                writeToOutput(cli, impl->bindings[i].category);
 800690e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006910:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006912:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006914:	4613      	mov	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4413      	add	r3, r2
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	440b      	add	r3, r1
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f7ff fc31 	bl	800618a <writeToOutput>
                writeToOutput(cli, lineBreak);
 8006928:	4b2d      	ldr	r3, [pc, #180]	@ (80069e0 <CMD_Help+0x388>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff fc2b 	bl	800618a <writeToOutput>

                if (impl->bindings[i].help) {
 8006934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006936:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006938:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800693a:	4613      	mov	r3, r2
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4413      	add	r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	440b      	add	r3, r1
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d017      	beq.n	800697a <CMD_Help+0x322>
                    writeToOutput(cli, "Help: ");
 800694a:	4927      	ldr	r1, [pc, #156]	@ (80069e8 <CMD_Help+0x390>)
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f7ff fc1c 	bl	800618a <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 8006952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006954:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006956:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006958:	4613      	mov	r3, r2
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	4413      	add	r3, r2
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	440b      	add	r3, r1
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	4619      	mov	r1, r3
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7ff fc0f 	bl	800618a <writeToOutput>
                    writeToOutput(cli, lineBreak);
 800696c:	4b1c      	ldr	r3, [pc, #112]	@ (80069e0 <CMD_Help+0x388>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4619      	mov	r1, r3
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff fc09 	bl	800618a <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 8006978:	e015      	b.n	80069a6 <CMD_Help+0x34e>
                    writeToOutput(cli, "(no help)");
 800697a:	491c      	ldr	r1, [pc, #112]	@ (80069ec <CMD_Help+0x394>)
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff fc04 	bl	800618a <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8006982:	4b17      	ldr	r3, [pc, #92]	@ (80069e0 <CMD_Help+0x388>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4619      	mov	r1, r3
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fbfe 	bl	800618a <writeToOutput>
                break;
 800698e:	e00a      	b.n	80069a6 <CMD_Help+0x34e>
            if (impl->bindings[i].category == NULL) continue;
 8006990:	bf00      	nop
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8006992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006994:	3301      	adds	r3, #1
 8006996:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800699c:	461a      	mov	r2, r3
 800699e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a0:	4293      	cmp	r3, r2
 80069a2:	f6ff af7b 	blt.w	800689c <CMD_Help+0x244>
            }
        }
        if (!found) {
 80069a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80069aa:	f083 0301 	eor.w	r3, r3, #1
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00e      	beq.n	80069d2 <CMD_Help+0x37a>
            onUnknownCommand(cli, cmdName);
 80069b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 fa1a 	bl	8006df0 <onUnknownCommand>
 80069bc:	e009      	b.n	80069d2 <CMD_Help+0x37a>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 80069be:	490c      	ldr	r1, [pc, #48]	@ (80069f0 <CMD_Help+0x398>)
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff fbe2 	bl	800618a <writeToOutput>
        writeToOutput(cli, lineBreak);
 80069c6:	4b06      	ldr	r3, [pc, #24]	@ (80069e0 <CMD_Help+0x388>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4619      	mov	r1, r3
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7ff fbdc 	bl	800618a <writeToOutput>
    }
}
 80069d2:	3754      	adds	r7, #84	@ 0x54
 80069d4:	46bd      	mov	sp, r7
 80069d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069da:	bf00      	nop
 80069dc:	08025078 	.word	0x08025078
 80069e0:	240148a0 	.word	0x240148a0
 80069e4:	08025084 	.word	0x08025084
 80069e8:	08025090 	.word	0x08025090
 80069ec:	0802506c 	.word	0x0802506c
 80069f0:	08025098 	.word	0x08025098

080069f4 <CMD_Dev>:

void CMD_Dev(EmbeddedCli *cli, char *tokens, void *context) {
 80069f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069f8:	b097      	sub	sp, #92	@ 0x5c
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (impl->bindingsCount == 0) {
 8006a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a0a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <CMD_Dev+0x32>
        writeToOutput(cli, "No development commands available");
 8006a10:	4993      	ldr	r1, [pc, #588]	@ (8006c60 <CMD_Dev+0x26c>)
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f7ff fbb9 	bl	800618a <writeToOutput>
        writeToOutput(cli, lineBreak);
 8006a18:	4b92      	ldr	r3, [pc, #584]	@ (8006c64 <CMD_Dev+0x270>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7ff fbb3 	bl	800618a <writeToOutput>
        return;
 8006a24:	e1cf      	b.n	8006dc6 <CMD_Dev+0x3d2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8006a26:	68b8      	ldr	r0, [r7, #8]
 8006a28:	f7fe fe98 	bl	800575c <embeddedCliGetTokenCount>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    if (tokenCount == 0) {
 8006a30:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 8105 	bne.w	8006c42 <CMD_Dev+0x24e>
 8006a38:	466b      	mov	r3, sp
 8006a3a:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const char* categories[MAX_CAT];
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	3b01      	subs	r3, #1
 8006a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4698      	mov	r8, r3
 8006a4c:	4691      	mov	r9, r2
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	f04f 0300 	mov.w	r3, #0
 8006a56:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8006a5a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8006a5e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8006a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a64:	2200      	movs	r2, #0
 8006a66:	461c      	mov	r4, r3
 8006a68:	4615      	mov	r5, r2
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	016b      	lsls	r3, r5, #5
 8006a74:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006a78:	0162      	lsls	r2, r4, #5
 8006a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	3307      	adds	r3, #7
 8006a80:	08db      	lsrs	r3, r3, #3
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	ebad 0d03 	sub.w	sp, sp, r3
 8006a88:	466b      	mov	r3, sp
 8006a8a:	3303      	adds	r3, #3
 8006a8c:	089b      	lsrs	r3, r3, #2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24
        int catCount = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	657b      	str	r3, [r7, #84]	@ 0x54

        for (int i = 0; i < impl->bindingsCount; i++) {
 8006a96:	2300      	movs	r3, #0
 8006a98:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a9a:	e033      	b.n	8006b04 <CMD_Dev+0x110>
            const char* cat = impl->bindings[i].category;
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a9e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006aa0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4413      	add	r3, r2
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	440b      	add	r3, r1
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	61bb      	str	r3, [r7, #24]
            if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d006      	beq.n	8006ac4 <CMD_Dev+0xd0>
 8006ab6:	496c      	ldr	r1, [pc, #432]	@ (8006c68 <CMD_Dev+0x274>)
 8006ab8:	69b8      	ldr	r0, [r7, #24]
 8006aba:	f7f9 fc11 	bl	80002e0 <strcmp>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11b      	bne.n	8006afc <CMD_Dev+0x108>
            const char* display_cat = (cat == NULL) ? "Deployment" : cat;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <CMD_Dev+0xda>
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	e000      	b.n	8006ad0 <CMD_Dev+0xdc>
 8006ace:	4b67      	ldr	r3, [pc, #412]	@ (8006c6c <CMD_Dev+0x278>)
 8006ad0:	617b      	str	r3, [r7, #20]
            int idx = findCategoryIndex(display_cat, categories, catCount);
 8006ad2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ad6:	6978      	ldr	r0, [r7, #20]
 8006ad8:	f7ff fd73 	bl	80065c2 <findCategoryIndex>
 8006adc:	6138      	str	r0, [r7, #16]
            if (idx < 0 && catCount < MAX_CAT) {
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	da0c      	bge.n	8006afe <CMD_Dev+0x10a>
 8006ae4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	da08      	bge.n	8006afe <CMD_Dev+0x10a>
                categories[catCount++] = display_cat;
 8006aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	657a      	str	r2, [r7, #84]	@ 0x54
 8006af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af4:	6979      	ldr	r1, [r7, #20]
 8006af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8006afa:	e000      	b.n	8006afe <CMD_Dev+0x10a>
            if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 8006afc:	bf00      	nop
        for (int i = 0; i < impl->bindingsCount; i++) {
 8006afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b00:	3301      	adds	r3, #1
 8006b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	dbc5      	blt.n	8006a9c <CMD_Dev+0xa8>
            }
        }

        if (catCount == 0) {
 8006b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10b      	bne.n	8006b2e <CMD_Dev+0x13a>
            writeToOutput(cli, "No development commands available");
 8006b16:	4952      	ldr	r1, [pc, #328]	@ (8006c60 <CMD_Dev+0x26c>)
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff fb36 	bl	800618a <writeToOutput>
            writeToOutput(cli, lineBreak);
 8006b1e:	4b51      	ldr	r3, [pc, #324]	@ (8006c64 <CMD_Dev+0x270>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4619      	mov	r1, r3
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff fb30 	bl	800618a <writeToOutput>
            return;
 8006b2a:	46b5      	mov	sp, r6
 8006b2c:	e14b      	b.n	8006dc6 <CMD_Dev+0x3d2>
        }

        for (int c = 0; c < catCount; c++) {
 8006b2e:	2300      	movs	r3, #0
 8006b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b32:	e07f      	b.n	8006c34 <CMD_Dev+0x240>
            writeToOutput(cli, "[");
 8006b34:	494e      	ldr	r1, [pc, #312]	@ (8006c70 <CMD_Dev+0x27c>)
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff fb27 	bl	800618a <writeToOutput>
            writeToOutput(cli, categories[c]);
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b44:	4619      	mov	r1, r3
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7ff fb1f 	bl	800618a <writeToOutput>
            writeToOutput(cli, "]");
 8006b4c:	4949      	ldr	r1, [pc, #292]	@ (8006c74 <CMD_Dev+0x280>)
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f7ff fb1b 	bl	800618a <writeToOutput>
            writeToOutput(cli, lineBreak);
 8006b54:	4b43      	ldr	r3, [pc, #268]	@ (8006c64 <CMD_Dev+0x270>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff fb15 	bl	800618a <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 8006b60:	2300      	movs	r3, #0
 8006b62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b64:	e057      	b.n	8006c16 <CMD_Dev+0x222>
                const char* cmdCat = impl->bindings[i].category;
 8006b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b68:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006b6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	4413      	add	r3, r2
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	440b      	add	r3, r1
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	623b      	str	r3, [r7, #32]
                const char* display_cmdCat = (cmdCat == NULL) ? "Deployment" : cmdCat;
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <CMD_Dev+0x190>
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	e000      	b.n	8006b86 <CMD_Dev+0x192>
 8006b84:	4b39      	ldr	r3, [pc, #228]	@ (8006c6c <CMD_Dev+0x278>)
 8006b86:	61fb      	str	r3, [r7, #28]
                if (strcmp(display_cmdCat, categories[c]) == 0) {
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b90:	4619      	mov	r1, r3
 8006b92:	69f8      	ldr	r0, [r7, #28]
 8006b94:	f7f9 fba4 	bl	80002e0 <strcmp>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d138      	bne.n	8006c10 <CMD_Dev+0x21c>
                    writeToOutput(cli, "    ");
 8006b9e:	4936      	ldr	r1, [pc, #216]	@ (8006c78 <CMD_Dev+0x284>)
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff faf2 	bl	800618a <writeToOutput>
                    printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 8006ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bac:	4613      	mov	r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	4413      	add	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	440b      	add	r3, r1
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2210      	movs	r2, #16
 8006bba:	4619      	mov	r1, r3
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f7ff fd25 	bl	800660c <printAlignedColumn>
                    writeToOutput(cli, "| ");
 8006bc2:	492e      	ldr	r1, [pc, #184]	@ (8006c7c <CMD_Dev+0x288>)
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff fae0 	bl	800618a <writeToOutput>
                    if (impl->bindings[i].help) {
 8006bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bcc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006bce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	4413      	add	r3, r2
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	440b      	add	r3, r1
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00d      	beq.n	8006bfc <CMD_Dev+0x208>
                        writeToOutput(cli, impl->bindings[i].help);
 8006be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006be2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006be4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006be6:	4613      	mov	r3, r2
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	4413      	add	r3, r2
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	440b      	add	r3, r1
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff fac8 	bl	800618a <writeToOutput>
 8006bfa:	e003      	b.n	8006c04 <CMD_Dev+0x210>
                    } else {
                        writeToOutput(cli, "(no help)");
 8006bfc:	4920      	ldr	r1, [pc, #128]	@ (8006c80 <CMD_Dev+0x28c>)
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fac3 	bl	800618a <writeToOutput>
                    }
                    writeToOutput(cli, lineBreak);
 8006c04:	4b17      	ldr	r3, [pc, #92]	@ (8006c64 <CMD_Dev+0x270>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7ff fabd 	bl	800618a <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 8006c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c12:	3301      	adds	r3, #1
 8006c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	dba1      	blt.n	8006b66 <CMD_Dev+0x172>
                }
            }
            writeToOutput(cli, lineBreak);
 8006c22:	4b10      	ldr	r3, [pc, #64]	@ (8006c64 <CMD_Dev+0x270>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4619      	mov	r1, r3
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7ff faae 	bl	800618a <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 8006c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c30:	3301      	adds	r3, #1
 8006c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	f6ff af7b 	blt.w	8006b34 <CMD_Dev+0x140>
 8006c3e:	46b5      	mov	sp, r6
 8006c40:	e0c1      	b.n	8006dc6 <CMD_Dev+0x3d2>
        }
    } else if (tokenCount == 1) {
 8006c42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	f040 80b4 	bne.w	8006db2 <CMD_Dev+0x3be>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	68b8      	ldr	r0, [r7, #8]
 8006c4e:	f7fe fd4f 	bl	80056f0 <embeddedCliGetToken>
 8006c52:	6378      	str	r0, [r7, #52]	@ 0x34
        bool found = false;
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c5e:	e095      	b.n	8006d8c <CMD_Dev+0x398>
 8006c60:	080250c8 	.word	0x080250c8
 8006c64:	240148a0 	.word	0x240148a0
 8006c68:	080250ec 	.word	0x080250ec
 8006c6c:	080250f0 	.word	0x080250f0
 8006c70:	08025058 	.word	0x08025058
 8006c74:	0802505c 	.word	0x0802505c
 8006c78:	08025060 	.word	0x08025060
 8006c7c:	08025068 	.word	0x08025068
 8006c80:	0802506c 	.word	0x0802506c
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8006c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c86:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4413      	add	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	440b      	add	r3, r1
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7f9 fb21 	bl	80002e0 <strcmp>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d170      	bne.n	8006d86 <CMD_Dev+0x392>
                const char* cat = impl->bindings[i].category;
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006ca8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006caa:	4613      	mov	r3, r2
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4413      	add	r3, r2
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	440b      	add	r3, r1
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	633b      	str	r3, [r7, #48]	@ 0x30
                if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d006      	beq.n	8006ccc <CMD_Dev+0x2d8>
 8006cbe:	4944      	ldr	r1, [pc, #272]	@ (8006dd0 <CMD_Dev+0x3dc>)
 8006cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cc2:	f7f9 fb0d 	bl	80002e0 <strcmp>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d15b      	bne.n	8006d84 <CMD_Dev+0x390>
                found = true;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                writeToOutput(cli, "Command: ");
 8006cd2:	4940      	ldr	r1, [pc, #256]	@ (8006dd4 <CMD_Dev+0x3e0>)
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7ff fa58 	bl	800618a <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 8006cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cdc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006cde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	4413      	add	r3, r2
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	440b      	add	r3, r1
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4619      	mov	r1, r3
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff fa4b 	bl	800618a <writeToOutput>
                writeToOutput(cli, lineBreak);
 8006cf4:	4b38      	ldr	r3, [pc, #224]	@ (8006dd8 <CMD_Dev+0x3e4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7ff fa45 	bl	800618a <writeToOutput>

                writeToOutput(cli, "Category: ");
 8006d00:	4936      	ldr	r1, [pc, #216]	@ (8006ddc <CMD_Dev+0x3e8>)
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff fa41 	bl	800618a <writeToOutput>
                writeToOutput(cli, cat ? cat : "Deployment");
 8006d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <CMD_Dev+0x31e>
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	e000      	b.n	8006d14 <CMD_Dev+0x320>
 8006d12:	4b33      	ldr	r3, [pc, #204]	@ (8006de0 <CMD_Dev+0x3ec>)
 8006d14:	4619      	mov	r1, r3
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f7ff fa37 	bl	800618a <writeToOutput>
                writeToOutput(cli, lineBreak);
 8006d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8006dd8 <CMD_Dev+0x3e4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4619      	mov	r1, r3
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7ff fa31 	bl	800618a <writeToOutput>

                if (impl->bindings[i].help) {
 8006d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d2a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006d2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d2e:	4613      	mov	r3, r2
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	4413      	add	r3, r2
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	440b      	add	r3, r1
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d017      	beq.n	8006d6e <CMD_Dev+0x37a>
                    writeToOutput(cli, "Help: ");
 8006d3e:	4929      	ldr	r1, [pc, #164]	@ (8006de4 <CMD_Dev+0x3f0>)
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f7ff fa22 	bl	800618a <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 8006d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d48:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006d4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	4413      	add	r3, r2
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	440b      	add	r3, r1
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f7ff fa15 	bl	800618a <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8006d60:	4b1d      	ldr	r3, [pc, #116]	@ (8006dd8 <CMD_Dev+0x3e4>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4619      	mov	r1, r3
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f7ff fa0f 	bl	800618a <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 8006d6c:	e015      	b.n	8006d9a <CMD_Dev+0x3a6>
                    writeToOutput(cli, "(no help)");
 8006d6e:	491e      	ldr	r1, [pc, #120]	@ (8006de8 <CMD_Dev+0x3f4>)
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff fa0a 	bl	800618a <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8006d76:	4b18      	ldr	r3, [pc, #96]	@ (8006dd8 <CMD_Dev+0x3e4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fa04 	bl	800618a <writeToOutput>
                break;
 8006d82:	e00a      	b.n	8006d9a <CMD_Dev+0x3a6>
                if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 8006d84:	bf00      	nop
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8006d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d88:	3301      	adds	r3, #1
 8006d8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d8e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d90:	461a      	mov	r2, r3
 8006d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d94:	4293      	cmp	r3, r2
 8006d96:	f6ff af75 	blt.w	8006c84 <CMD_Dev+0x290>
            }
        }
        if (!found) {
 8006d9a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006d9e:	f083 0301 	eor.w	r3, r3, #1
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00e      	beq.n	8006dc6 <CMD_Dev+0x3d2>
            onUnknownCommand(cli, cmdName);
 8006da8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f820 	bl	8006df0 <onUnknownCommand>
 8006db0:	e009      	b.n	8006dc6 <CMD_Dev+0x3d2>
        }
    } else {
        writeToOutput(cli, "Command \"dev\" receives one or zero arguments");
 8006db2:	490e      	ldr	r1, [pc, #56]	@ (8006dec <CMD_Dev+0x3f8>)
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff f9e8 	bl	800618a <writeToOutput>
        writeToOutput(cli, lineBreak);
 8006dba:	4b07      	ldr	r3, [pc, #28]	@ (8006dd8 <CMD_Dev+0x3e4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f7ff f9e2 	bl	800618a <writeToOutput>
    }
}
 8006dc6:	375c      	adds	r7, #92	@ 0x5c
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dce:	bf00      	nop
 8006dd0:	080250ec 	.word	0x080250ec
 8006dd4:	08025078 	.word	0x08025078
 8006dd8:	240148a0 	.word	0x240148a0
 8006ddc:	08025084 	.word	0x08025084
 8006de0:	080250f0 	.word	0x080250f0
 8006de4:	08025090 	.word	0x08025090
 8006de8:	0802506c 	.word	0x0802506c
 8006dec:	080250fc 	.word	0x080250fc

08006df0 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8006dfa:	490b      	ldr	r1, [pc, #44]	@ (8006e28 <onUnknownCommand+0x38>)
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff f9c4 	bl	800618a <writeToOutput>
    writeToOutput(cli, name);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff f9c0 	bl	800618a <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8006e0a:	4908      	ldr	r1, [pc, #32]	@ (8006e2c <onUnknownCommand+0x3c>)
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff f9bc 	bl	800618a <writeToOutput>
    writeToOutput(cli, lineBreak);
 8006e12:	4b07      	ldr	r3, [pc, #28]	@ (8006e30 <onUnknownCommand+0x40>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff f9b6 	bl	800618a <writeToOutput>
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	0802512c 	.word	0x0802512c
 8006e2c:	08025140 	.word	0x08025140
 8006e30:	240148a0 	.word	0x240148a0

08006e34 <Dmesg_Init>:
static uint8_t *write_ptr = &_sdmesg_buffer;
static uint8_t *read_ptr = &_sdmesg_buffer;
static size_t log_count = 0;
static SemaphoreHandle_t dmesg_mutex = NULL;

void Dmesg_Init(void) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
    write_ptr = &_sdmesg_buffer;
 8006e38:	4b0b      	ldr	r3, [pc, #44]	@ (8006e68 <Dmesg_Init+0x34>)
 8006e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e6c <Dmesg_Init+0x38>)
 8006e3c:	601a      	str	r2, [r3, #0]
    read_ptr = &_sdmesg_buffer;
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e70 <Dmesg_Init+0x3c>)
 8006e40:	4a0a      	ldr	r2, [pc, #40]	@ (8006e6c <Dmesg_Init+0x38>)
 8006e42:	601a      	str	r2, [r3, #0]
    log_count = 0;
 8006e44:	4b0b      	ldr	r3, [pc, #44]	@ (8006e74 <Dmesg_Init+0x40>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]
    dmesg_mutex = xSemaphoreCreateMutex();
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	f009 fe05 	bl	8010a5a <xQueueCreateMutex>
 8006e50:	4603      	mov	r3, r0
 8006e52:	4a09      	ldr	r2, [pc, #36]	@ (8006e78 <Dmesg_Init+0x44>)
 8006e54:	6013      	str	r3, [r2, #0]
    if (dmesg_mutex == NULL) {
 8006e56:	4b08      	ldr	r3, [pc, #32]	@ (8006e78 <Dmesg_Init+0x44>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <Dmesg_Init+0x2e>
        while (1);
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <Dmesg_Init+0x2a>
    }
}
 8006e62:	bf00      	nop
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	240148bc 	.word	0x240148bc
 8006e6c:	20000000 	.word	0x20000000
 8006e70:	240148c0 	.word	0x240148c0
 8006e74:	24019370 	.word	0x24019370
 8006e78:	24019374 	.word	0x24019374

08006e7c <dmesg_write>:

static void dmesg_write(const char *msg, uint32_t len) {
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
    if (len > DMESG_MSG_MAX_LENGTH) len = DMESG_MSG_MAX_LENGTH;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b80      	cmp	r3, #128	@ 0x80
 8006e8a:	d901      	bls.n	8006e90 <dmesg_write+0x14>
 8006e8c:	2380      	movs	r3, #128	@ 0x80
 8006e8e:	603b      	str	r3, [r7, #0]
    if (len > 255) len = 255;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2bff      	cmp	r3, #255	@ 0xff
 8006e94:	d901      	bls.n	8006e9a <dmesg_write+0x1e>
 8006e96:	23ff      	movs	r3, #255	@ 0xff
 8006e98:	603b      	str	r3, [r7, #0]

    uint32_t required_space = len + 1;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]
    uint32_t space_left = (read_ptr <= write_ptr) ?
 8006ea0:	4b42      	ldr	r3, [pc, #264]	@ (8006fac <dmesg_write+0x130>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	4b42      	ldr	r3, [pc, #264]	@ (8006fb0 <dmesg_write+0x134>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
                          (DMESG_BUFFER_SIZE - (write_ptr - read_ptr)) :
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d807      	bhi.n	8006ebc <dmesg_write+0x40>
 8006eac:	4b40      	ldr	r3, [pc, #256]	@ (8006fb0 <dmesg_write+0x134>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	4b3e      	ldr	r3, [pc, #248]	@ (8006fac <dmesg_write+0x130>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	f5c3 33c0 	rsb	r3, r3, #98304	@ 0x18000
 8006eba:	e004      	b.n	8006ec6 <dmesg_write+0x4a>
                          (read_ptr - write_ptr);
 8006ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8006fac <dmesg_write+0x130>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8006fb0 <dmesg_write+0x134>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	1ad3      	subs	r3, r2, r3
    uint32_t space_left = (read_ptr <= write_ptr) ?
 8006ec6:	617b      	str	r3, [r7, #20]
    while (space_left < required_space && log_count > 0) {
 8006ec8:	e031      	b.n	8006f2e <dmesg_write+0xb2>
        uint8_t old_len = *read_ptr;
 8006eca:	4b38      	ldr	r3, [pc, #224]	@ (8006fac <dmesg_write+0x130>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	72fb      	strb	r3, [r7, #11]
        read_ptr += old_len + 1;
 8006ed2:	4b36      	ldr	r3, [pc, #216]	@ (8006fac <dmesg_write+0x130>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	4413      	add	r3, r2
 8006edc:	4a33      	ldr	r2, [pc, #204]	@ (8006fac <dmesg_write+0x130>)
 8006ede:	6013      	str	r3, [r2, #0]
        if (read_ptr >= &_edmesg_buffer) {
 8006ee0:	4b32      	ldr	r3, [pc, #200]	@ (8006fac <dmesg_write+0x130>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a33      	ldr	r2, [pc, #204]	@ (8006fb4 <dmesg_write+0x138>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d308      	bcc.n	8006efc <dmesg_write+0x80>
            read_ptr = &_sdmesg_buffer + (read_ptr - &_edmesg_buffer);
 8006eea:	4b30      	ldr	r3, [pc, #192]	@ (8006fac <dmesg_write+0x130>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a31      	ldr	r2, [pc, #196]	@ (8006fb4 <dmesg_write+0x138>)
 8006ef0:	1a9b      	subs	r3, r3, r2
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	4b30      	ldr	r3, [pc, #192]	@ (8006fb8 <dmesg_write+0x13c>)
 8006ef6:	4413      	add	r3, r2
 8006ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8006fac <dmesg_write+0x130>)
 8006efa:	6013      	str	r3, [r2, #0]
        }
        log_count--;
 8006efc:	4b2f      	ldr	r3, [pc, #188]	@ (8006fbc <dmesg_write+0x140>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	4a2e      	ldr	r2, [pc, #184]	@ (8006fbc <dmesg_write+0x140>)
 8006f04:	6013      	str	r3, [r2, #0]
        space_left = (read_ptr <= write_ptr) ?
 8006f06:	4b29      	ldr	r3, [pc, #164]	@ (8006fac <dmesg_write+0x130>)
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	4b29      	ldr	r3, [pc, #164]	@ (8006fb0 <dmesg_write+0x134>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
                     (DMESG_BUFFER_SIZE - (write_ptr - read_ptr)) :
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d807      	bhi.n	8006f22 <dmesg_write+0xa6>
 8006f12:	4b27      	ldr	r3, [pc, #156]	@ (8006fb0 <dmesg_write+0x134>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b25      	ldr	r3, [pc, #148]	@ (8006fac <dmesg_write+0x130>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	f5c3 33c0 	rsb	r3, r3, #98304	@ 0x18000
 8006f20:	e004      	b.n	8006f2c <dmesg_write+0xb0>
                     (read_ptr - write_ptr);
 8006f22:	4b22      	ldr	r3, [pc, #136]	@ (8006fac <dmesg_write+0x130>)
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	4b22      	ldr	r3, [pc, #136]	@ (8006fb0 <dmesg_write+0x134>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	1ad3      	subs	r3, r2, r3
        space_left = (read_ptr <= write_ptr) ?
 8006f2c:	617b      	str	r3, [r7, #20]
    while (space_left < required_space && log_count > 0) {
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d203      	bcs.n	8006f3e <dmesg_write+0xc2>
 8006f36:	4b21      	ldr	r3, [pc, #132]	@ (8006fbc <dmesg_write+0x140>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1c5      	bne.n	8006eca <dmesg_write+0x4e>
    }

    *write_ptr++ = (uint8_t)len;
 8006f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8006fb0 <dmesg_write+0x134>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	491a      	ldr	r1, [pc, #104]	@ (8006fb0 <dmesg_write+0x134>)
 8006f46:	600a      	str	r2, [r1, #0]
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]
    if (write_ptr >= &_edmesg_buffer) {
 8006f4e:	4b18      	ldr	r3, [pc, #96]	@ (8006fb0 <dmesg_write+0x134>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a18      	ldr	r2, [pc, #96]	@ (8006fb4 <dmesg_write+0x138>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d302      	bcc.n	8006f5e <dmesg_write+0xe2>
        write_ptr = &_sdmesg_buffer;
 8006f58:	4b15      	ldr	r3, [pc, #84]	@ (8006fb0 <dmesg_write+0x134>)
 8006f5a:	4a17      	ldr	r2, [pc, #92]	@ (8006fb8 <dmesg_write+0x13c>)
 8006f5c:	601a      	str	r2, [r3, #0]
    }

    for (uint32_t i = 0; i < len; i++) {
 8006f5e:	2300      	movs	r3, #0
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	e014      	b.n	8006f8e <dmesg_write+0x112>
        *write_ptr++ = msg[i];
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	441a      	add	r2, r3
 8006f6a:	4b11      	ldr	r3, [pc, #68]	@ (8006fb0 <dmesg_write+0x134>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	1c59      	adds	r1, r3, #1
 8006f70:	480f      	ldr	r0, [pc, #60]	@ (8006fb0 <dmesg_write+0x134>)
 8006f72:	6001      	str	r1, [r0, #0]
 8006f74:	7812      	ldrb	r2, [r2, #0]
 8006f76:	701a      	strb	r2, [r3, #0]
        if (write_ptr >= &_edmesg_buffer) {
 8006f78:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb0 <dmesg_write+0x134>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8006fb4 <dmesg_write+0x138>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d302      	bcc.n	8006f88 <dmesg_write+0x10c>
            write_ptr = &_sdmesg_buffer;
 8006f82:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb0 <dmesg_write+0x134>)
 8006f84:	4a0c      	ldr	r2, [pc, #48]	@ (8006fb8 <dmesg_write+0x13c>)
 8006f86:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++) {
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	613b      	str	r3, [r7, #16]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d3e6      	bcc.n	8006f64 <dmesg_write+0xe8>
        }
    }
    log_count++;
 8006f96:	4b09      	ldr	r3, [pc, #36]	@ (8006fbc <dmesg_write+0x140>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	4a07      	ldr	r2, [pc, #28]	@ (8006fbc <dmesg_write+0x140>)
 8006f9e:	6013      	str	r3, [r2, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	240148c0 	.word	0x240148c0
 8006fb0:	240148bc 	.word	0x240148bc
 8006fb4:	20018000 	.word	0x20018000
 8006fb8:	20000000 	.word	0x20000000
 8006fbc:	24019370 	.word	0x24019370

08006fc0 <Dmesg_HardWrite>:

void Dmesg_HardWrite(const char *msg) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
    uint32_t len = strlen(msg);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7f9 f993 	bl	80002f4 <strlen>
 8006fce:	60f8      	str	r0, [r7, #12]
    dmesg_write(msg, len);
 8006fd0:	68f9      	ldr	r1, [r7, #12]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff ff52 	bl	8006e7c <dmesg_write>
}
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <Dmesg_SafeWrite>:

void Dmesg_SafeWrite(const char *msg) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
    if (dmesg_mutex != NULL && xSemaphoreTake(dmesg_mutex, portMAX_DELAY) == pdTRUE) {
 8006fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8007020 <Dmesg_SafeWrite+0x40>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d013      	beq.n	8007018 <Dmesg_SafeWrite+0x38>
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8007020 <Dmesg_SafeWrite+0x40>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f009 ffeb 	bl	8010fd4 <xQueueSemaphoreTake>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b01      	cmp	r3, #1
 8007002:	d109      	bne.n	8007018 <Dmesg_SafeWrite+0x38>
        Dmesg_HardWrite(msg);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff ffdb 	bl	8006fc0 <Dmesg_HardWrite>
        xSemaphoreGive(dmesg_mutex);
 800700a:	4b05      	ldr	r3, [pc, #20]	@ (8007020 <Dmesg_SafeWrite+0x40>)
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	2300      	movs	r3, #0
 8007010:	2200      	movs	r2, #0
 8007012:	2100      	movs	r1, #0
 8007014:	f009 fd3a 	bl	8010a8c <xQueueGenericSend>
    }
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	24019374 	.word	0x24019374

08007024 <dmesg_print_entry>:

static void dmesg_print_entry(uint8_t **ptr, EmbeddedCli *cli) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b0a6      	sub	sp, #152	@ 0x98
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
    uint8_t len = **ptr;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    (*ptr)++;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	601a      	str	r2, [r3, #0]
    if (*ptr >= &_edmesg_buffer) {
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a23      	ldr	r2, [pc, #140]	@ (80070d4 <dmesg_print_entry+0xb0>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d302      	bcc.n	8007052 <dmesg_print_entry+0x2e>
        *ptr = &_sdmesg_buffer;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a22      	ldr	r2, [pc, #136]	@ (80070d8 <dmesg_print_entry+0xb4>)
 8007050:	601a      	str	r2, [r3, #0]
    }
    char buffer[DMESG_MSG_MAX_LENGTH + 1];
    size_t copy_len = (len < sizeof(buffer) - 1) ? len : sizeof(buffer) - 1;
 8007052:	f997 3093 	ldrsb.w	r3, [r7, #147]	@ 0x93
 8007056:	2b00      	cmp	r3, #0
 8007058:	db02      	blt.n	8007060 <dmesg_print_entry+0x3c>
 800705a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800705e:	e000      	b.n	8007062 <dmesg_print_entry+0x3e>
 8007060:	2380      	movs	r3, #128	@ 0x80
 8007062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    for (size_t i = 0; i < copy_len; i++) {
 8007066:	2300      	movs	r3, #0
 8007068:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800706c:	e01b      	b.n	80070a6 <dmesg_print_entry+0x82>
        buffer[i] = **ptr;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	7819      	ldrb	r1, [r3, #0]
 8007074:	f107 0208 	add.w	r2, r7, #8
 8007078:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800707c:	4413      	add	r3, r2
 800707e:	460a      	mov	r2, r1
 8007080:	701a      	strb	r2, [r3, #0]
        (*ptr)++;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	601a      	str	r2, [r3, #0]
        if (*ptr >= &_edmesg_buffer) {
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a10      	ldr	r2, [pc, #64]	@ (80070d4 <dmesg_print_entry+0xb0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d302      	bcc.n	800709c <dmesg_print_entry+0x78>
            *ptr = &_sdmesg_buffer;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a0f      	ldr	r2, [pc, #60]	@ (80070d8 <dmesg_print_entry+0xb4>)
 800709a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < copy_len; i++) {
 800709c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80070a0:	3301      	adds	r3, #1
 80070a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d3dd      	bcc.n	800706e <dmesg_print_entry+0x4a>
        }
    }
    buffer[copy_len] = '\0';
 80070b2:	f107 0208 	add.w	r2, r7, #8
 80070b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ba:	4413      	add	r3, r2
 80070bc:	2200      	movs	r2, #0
 80070be:	701a      	strb	r2, [r3, #0]
    embeddedCliPrint(cli, buffer);
 80070c0:	f107 0308 	add.w	r3, r7, #8
 80070c4:	4619      	mov	r1, r3
 80070c6:	6838      	ldr	r0, [r7, #0]
 80070c8:	f7fe fa50 	bl	800556c <embeddedCliPrint>
}
 80070cc:	bf00      	nop
 80070ce:	3798      	adds	r7, #152	@ 0x98
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20018000 	.word	0x20018000
 80070d8:	20000000 	.word	0x20000000

080070dc <Dmesg_GetLogs>:

void Dmesg_GetLogs(EmbeddedCli *cli) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
    if (dmesg_mutex == NULL || xSemaphoreTake(dmesg_mutex, portMAX_DELAY) != pdTRUE) {
 80070e4:	4b14      	ldr	r3, [pc, #80]	@ (8007138 <Dmesg_GetLogs+0x5c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d020      	beq.n	800712e <Dmesg_GetLogs+0x52>
 80070ec:	4b12      	ldr	r3, [pc, #72]	@ (8007138 <Dmesg_GetLogs+0x5c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f04f 31ff 	mov.w	r1, #4294967295
 80070f4:	4618      	mov	r0, r3
 80070f6:	f009 ff6d 	bl	8010fd4 <xQueueSemaphoreTake>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d116      	bne.n	800712e <Dmesg_GetLogs+0x52>
        return;
    }

    uint8_t *ptr = read_ptr;
 8007100:	4b0e      	ldr	r3, [pc, #56]	@ (800713c <Dmesg_GetLogs+0x60>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	60fb      	str	r3, [r7, #12]
    while (ptr != write_ptr) {
 8007106:	e005      	b.n	8007114 <Dmesg_GetLogs+0x38>
        dmesg_print_entry(&ptr, cli);
 8007108:	f107 030c 	add.w	r3, r7, #12
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff ff88 	bl	8007024 <dmesg_print_entry>
    while (ptr != write_ptr) {
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4b0a      	ldr	r3, [pc, #40]	@ (8007140 <Dmesg_GetLogs+0x64>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d1f4      	bne.n	8007108 <Dmesg_GetLogs+0x2c>
    }
    xSemaphoreGive(dmesg_mutex);
 800711e:	4b06      	ldr	r3, [pc, #24]	@ (8007138 <Dmesg_GetLogs+0x5c>)
 8007120:	6818      	ldr	r0, [r3, #0]
 8007122:	2300      	movs	r3, #0
 8007124:	2200      	movs	r2, #0
 8007126:	2100      	movs	r1, #0
 8007128:	f009 fcb0 	bl	8010a8c <xQueueGenericSend>
 800712c:	e000      	b.n	8007130 <Dmesg_GetLogs+0x54>
        return;
 800712e:	bf00      	nop
}
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	24019374 	.word	0x24019374
 800713c:	240148c0 	.word	0x240148c0
 8007140:	240148bc 	.word	0x240148bc

08007144 <Dmesg_GetLatestN>:

void Dmesg_GetLatestN(size_t N, EmbeddedCli *cli) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
    if (dmesg_mutex == NULL || xSemaphoreTake(dmesg_mutex, portMAX_DELAY) != pdTRUE) {
 800714e:	4b31      	ldr	r3, [pc, #196]	@ (8007214 <Dmesg_GetLatestN+0xd0>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d059      	beq.n	800720a <Dmesg_GetLatestN+0xc6>
 8007156:	4b2f      	ldr	r3, [pc, #188]	@ (8007214 <Dmesg_GetLatestN+0xd0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f04f 31ff 	mov.w	r1, #4294967295
 800715e:	4618      	mov	r0, r3
 8007160:	f009 ff38 	bl	8010fd4 <xQueueSemaphoreTake>
 8007164:	4603      	mov	r3, r0
 8007166:	2b01      	cmp	r3, #1
 8007168:	d14f      	bne.n	800720a <Dmesg_GetLatestN+0xc6>
        return;
    }

    if (N > log_count) N = log_count;
 800716a:	4b2b      	ldr	r3, [pc, #172]	@ (8007218 <Dmesg_GetLatestN+0xd4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	429a      	cmp	r2, r3
 8007172:	d902      	bls.n	800717a <Dmesg_GetLatestN+0x36>
 8007174:	4b28      	ldr	r3, [pc, #160]	@ (8007218 <Dmesg_GetLatestN+0xd4>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	607b      	str	r3, [r7, #4]
    if (N == 0) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d107      	bne.n	8007190 <Dmesg_GetLatestN+0x4c>
        xSemaphoreGive(dmesg_mutex);
 8007180:	4b24      	ldr	r3, [pc, #144]	@ (8007214 <Dmesg_GetLatestN+0xd0>)
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	2300      	movs	r3, #0
 8007186:	2200      	movs	r2, #0
 8007188:	2100      	movs	r1, #0
 800718a:	f009 fc7f 	bl	8010a8c <xQueueGenericSend>
        return;
 800718e:	e03d      	b.n	800720c <Dmesg_GetLatestN+0xc8>
    }

    size_t skip = log_count - N;
 8007190:	4b21      	ldr	r3, [pc, #132]	@ (8007218 <Dmesg_GetLatestN+0xd4>)
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	617b      	str	r3, [r7, #20]
    uint8_t *ptr = read_ptr;
 800719a:	4b20      	ldr	r3, [pc, #128]	@ (800721c <Dmesg_GetLatestN+0xd8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; i < skip; i++) {
 80071a0:	2300      	movs	r3, #0
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	e015      	b.n	80071d2 <Dmesg_GetLatestN+0x8e>
        uint8_t len = *ptr;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	74fb      	strb	r3, [r7, #19]
        ptr += (len + 1);
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	7cfb      	ldrb	r3, [r7, #19]
 80071b0:	3301      	adds	r3, #1
 80071b2:	4413      	add	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]
        if (ptr >= &_edmesg_buffer) {
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a19      	ldr	r2, [pc, #100]	@ (8007220 <Dmesg_GetLatestN+0xdc>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d306      	bcc.n	80071cc <Dmesg_GetLatestN+0x88>
            ptr = &_sdmesg_buffer + (ptr - &_edmesg_buffer);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4a17      	ldr	r2, [pc, #92]	@ (8007220 <Dmesg_GetLatestN+0xdc>)
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	4b17      	ldr	r3, [pc, #92]	@ (8007224 <Dmesg_GetLatestN+0xe0>)
 80071c8:	4413      	add	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < skip; i++) {
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	3301      	adds	r3, #1
 80071d0:	61fb      	str	r3, [r7, #28]
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d3e5      	bcc.n	80071a6 <Dmesg_GetLatestN+0x62>
        }
    }

    for (size_t i = 0; i < N; i++) {
 80071da:	2300      	movs	r3, #0
 80071dc:	61bb      	str	r3, [r7, #24]
 80071de:	e008      	b.n	80071f2 <Dmesg_GetLatestN+0xae>
        dmesg_print_entry(&ptr, cli);
 80071e0:	f107 030c 	add.w	r3, r7, #12
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff ff1c 	bl	8007024 <dmesg_print_entry>
    for (size_t i = 0; i < N; i++) {
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	3301      	adds	r3, #1
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d3f2      	bcc.n	80071e0 <Dmesg_GetLatestN+0x9c>
    }
    xSemaphoreGive(dmesg_mutex);
 80071fa:	4b06      	ldr	r3, [pc, #24]	@ (8007214 <Dmesg_GetLatestN+0xd0>)
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	2300      	movs	r3, #0
 8007200:	2200      	movs	r2, #0
 8007202:	2100      	movs	r1, #0
 8007204:	f009 fc42 	bl	8010a8c <xQueueGenericSend>
 8007208:	e000      	b.n	800720c <Dmesg_GetLatestN+0xc8>
        return;
 800720a:	bf00      	nop
}
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	24019374 	.word	0x24019374
 8007218:	24019370 	.word	0x24019370
 800721c:	240148c0 	.word	0x240148c0
 8007220:	20018000 	.word	0x20018000
 8007224:	20000000 	.word	0x20000000

08007228 <LL_GPIO_SetOutputPin>:
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	619a      	str	r2, [r3, #24]
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <LL_GPIO_ResetOutputPin>:
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	041a      	lsls	r2, r3, #16
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	619a      	str	r2, [r3, #24]
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
	...

08007264 <FindFreeSlot>:
//__attribute__((section(".fs_buffer"))) static uint8_t fsQueueBuffer[90640]; // 10 slot * 8240 bytes + 1 backup
__attribute__((section(".fs_buffer"))) static uint8_t fsQueueBuffer[NUM_SLOTS * 64]; 			// 10 slot * 64 bytes = 640 bytes
__attribute__((section(".fs_buffer"))) static uint8_t fsDataBuffer[NUM_SLOTS][MAX_DATA_SIZE];   // 10 slot * 8KB = 80KB
static uint8_t slotInUse[NUM_SLOTS] = {0};

static int FindFreeSlot(void) {
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_SLOTS; i++) {
 800726a:	2300      	movs	r3, #0
 800726c:	607b      	str	r3, [r7, #4]
 800726e:	e00a      	b.n	8007286 <FindFreeSlot+0x22>
        if (slotInUse[i] == 0) return i;
 8007270:	4a0a      	ldr	r2, [pc, #40]	@ (800729c <FindFreeSlot+0x38>)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4413      	add	r3, r2
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <FindFreeSlot+0x1c>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	e007      	b.n	8007290 <FindFreeSlot+0x2c>
    for (int i = 0; i < NUM_SLOTS; i++) {
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3301      	adds	r3, #1
 8007284:	607b      	str	r3, [r7, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b09      	cmp	r3, #9
 800728a:	ddf1      	ble.n	8007270 <FindFreeSlot+0xc>
    }
    return -1;
 800728c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	240193d8 	.word	0x240193d8

080072a0 <SD_Lockin>:
 *              Physical Status SDMMC            *
 *************************************************/
SDFS_StateTypedef SDFS_State = SDFS_READY;

void SD_Lockin(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
    GPIO_SetHigh(SD_InOut_Port, SD_InOut);
 80072a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072a8:	4804      	ldr	r0, [pc, #16]	@ (80072bc <SD_Lockin+0x1c>)
 80072aa:	f7ff ffbd 	bl	8007228 <LL_GPIO_SetOutputPin>
    GPIO_SetHigh(SD_Detect_Port, SD_Detect);
 80072ae:	2110      	movs	r1, #16
 80072b0:	4803      	ldr	r0, [pc, #12]	@ (80072c0 <SD_Lockin+0x20>)
 80072b2:	f7ff ffb9 	bl	8007228 <LL_GPIO_SetOutputPin>
}
 80072b6:	bf00      	nop
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	58021000 	.word	0x58021000
 80072c0:	58020c00 	.word	0x58020c00

080072c4 <SD_Release>:
void SD_Release(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
    GPIO_SetLow(SD_InOut_Port, SD_InOut);
 80072c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072cc:	4804      	ldr	r0, [pc, #16]	@ (80072e0 <SD_Release+0x1c>)
 80072ce:	f7ff ffb9 	bl	8007244 <LL_GPIO_ResetOutputPin>
    GPIO_SetLow(SD_Detect_Port, SD_Detect);
 80072d2:	2110      	movs	r1, #16
 80072d4:	4803      	ldr	r0, [pc, #12]	@ (80072e4 <SD_Release+0x20>)
 80072d6:	f7ff ffb5 	bl	8007244 <LL_GPIO_ResetOutputPin>
}
 80072da:	bf00      	nop
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	58021000 	.word	0x58021000
 80072e4:	58020c00 	.word	0x58020c00

080072e8 <FS_Init>:

/*************************************************
 *                 Queue implement               *
 *************************************************/
void FS_Init(void) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af02      	add	r7, sp, #8
    fsMutex = xSemaphoreCreateMutex();
 80072ee:	2001      	movs	r0, #1
 80072f0:	f009 fbb3 	bl	8010a5a <xQueueCreateMutex>
 80072f4:	4603      	mov	r3, r0
 80072f6:	4a16      	ldr	r2, [pc, #88]	@ (8007350 <FS_Init+0x68>)
 80072f8:	6013      	str	r3, [r2, #0]
    fsSlotMutex = xSemaphoreCreateMutex();
 80072fa:	2001      	movs	r0, #1
 80072fc:	f009 fbad 	bl	8010a5a <xQueueCreateMutex>
 8007300:	4603      	mov	r3, r0
 8007302:	4a14      	ldr	r2, [pc, #80]	@ (8007354 <FS_Init+0x6c>)
 8007304:	6013      	str	r3, [r2, #0]
    if (fsMutex == NULL || fsSlotMutex == NULL) {
 8007306:	4b12      	ldr	r3, [pc, #72]	@ (8007350 <FS_Init+0x68>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <FS_Init+0x2e>
 800730e:	4b11      	ldr	r3, [pc, #68]	@ (8007354 <FS_Init+0x6c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d105      	bne.n	8007322 <FS_Init+0x3a>
        SYSLOG_ERROR_POLL("Failed to create mutexes");
 8007316:	2201      	movs	r2, #1
 8007318:	490f      	ldr	r1, [pc, #60]	@ (8007358 <FS_Init+0x70>)
 800731a:	2004      	movs	r0, #4
 800731c:	f001 f8aa 	bl	8008474 <syslog_log>
        return;
 8007320:	e014      	b.n	800734c <FS_Init+0x64>
    }

    fsWriteQueue = xQueueCreateStatic(NUM_SLOTS, sizeof(FS_WriteRequest_t), fsQueueBuffer, &fsWriteQueueStruct);
 8007322:	2300      	movs	r3, #0
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	4b0d      	ldr	r3, [pc, #52]	@ (800735c <FS_Init+0x74>)
 8007328:	4a0d      	ldr	r2, [pc, #52]	@ (8007360 <FS_Init+0x78>)
 800732a:	2130      	movs	r1, #48	@ 0x30
 800732c:	200a      	movs	r0, #10
 800732e:	f009 fa9b 	bl	8010868 <xQueueGenericCreateStatic>
 8007332:	4603      	mov	r3, r0
 8007334:	4a0b      	ldr	r2, [pc, #44]	@ (8007364 <FS_Init+0x7c>)
 8007336:	6013      	str	r3, [r2, #0]
    if (fsWriteQueue == NULL) {
 8007338:	4b0a      	ldr	r3, [pc, #40]	@ (8007364 <FS_Init+0x7c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d105      	bne.n	800734c <FS_Init+0x64>
        SYSLOG_ERROR_POLL("Failed to create FS write queue");
 8007340:	2201      	movs	r2, #1
 8007342:	4909      	ldr	r1, [pc, #36]	@ (8007368 <FS_Init+0x80>)
 8007344:	2004      	movs	r0, #4
 8007346:	f001 f895 	bl	8008474 <syslog_log>
        return;
 800734a:	bf00      	nop
    }
}
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	24019378 	.word	0x24019378
 8007354:	2401937c 	.word	0x2401937c
 8007358:	08025174 	.word	0x08025174
 800735c:	24019388 	.word	0x24019388
 8007360:	240004a8 	.word	0x240004a8
 8007364:	24019384 	.word	0x24019384
 8007368:	08025190 	.word	0x08025190

0800736c <FS_Gatekeeper_Task>:

void FS_Gatekeeper_Task(void *pvParameters) {
 800736c:	b580      	push	{r7, lr}
 800736e:	f5ad 7d28 	sub.w	sp, sp, #672	@ 0x2a0
 8007372:	af02      	add	r7, sp, #8
 8007374:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8007378:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800737c:	6018      	str	r0, [r3, #0]
    FS_WriteRequest_t request;

    for (;;) {
        if (xQueueReceive(fsWriteQueue, &request, portMAX_DELAY) == pdTRUE) {
 800737e:	4b2c      	ldr	r3, [pc, #176]	@ (8007430 <FS_Gatekeeper_Task+0xc4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f507 7119 	add.w	r1, r7, #612	@ 0x264
 8007386:	f04f 32ff 	mov.w	r2, #4294967295
 800738a:	4618      	mov	r0, r3
 800738c:	f009 fd3a 	bl	8010e04 <xQueueReceive>
 8007390:	4603      	mov	r3, r0
 8007392:	2b01      	cmp	r3, #1
 8007394:	d1f3      	bne.n	800737e <FS_Gatekeeper_Task+0x12>
            Std_ReturnType result = E_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
            FIL file;
            FRESULT res;
            UINT byteswritten;

            if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) == pdTRUE) {
 800739c:	4b25      	ldr	r3, [pc, #148]	@ (8007434 <FS_Gatekeeper_Task+0xc8>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80073a4:	4618      	mov	r0, r3
 80073a6:	f009 fe15 	bl	8010fd4 <xQueueSemaphoreTake>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d134      	bne.n	800741a <FS_Gatekeeper_Task+0xae>
                res = f_open(&file, request.filename, FA_OPEN_APPEND | FA_WRITE);
 80073b0:	f507 7119 	add.w	r1, r7, #612	@ 0x264
 80073b4:	f107 0308 	add.w	r3, r7, #8
 80073b8:	2232      	movs	r2, #50	@ 0x32
 80073ba:	4618      	mov	r0, r3
 80073bc:	f007 fa62 	bl	800e884 <f_open>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 3296 	strb.w	r3, [r7, #662]	@ 0x296
                if (res == FR_OK) {
 80073c6:	f897 3296 	ldrb.w	r3, [r7, #662]	@ 0x296
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d11e      	bne.n	800740c <FS_Gatekeeper_Task+0xa0>
                    res = f_write(&file, request.data, request.size, &byteswritten);
 80073ce:	f8d7 1284 	ldr.w	r1, [r7, #644]	@ 0x284
 80073d2:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80073d6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80073da:	f107 0008 	add.w	r0, r7, #8
 80073de:	f007 ffa2 	bl	800f326 <f_write>
 80073e2:	4603      	mov	r3, r0
 80073e4:	f887 3296 	strb.w	r3, [r7, #662]	@ 0x296
                    f_close(&file);
 80073e8:	f107 0308 	add.w	r3, r7, #8
 80073ec:	4618      	mov	r0, r3
 80073ee:	f008 fb33 	bl	800fa58 <f_close>
                    if (res == FR_OK && byteswritten == request.size) {
 80073f2:	f897 3296 	ldrb.w	r3, [r7, #662]	@ 0x296
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d108      	bne.n	800740c <FS_Gatekeeper_Task+0xa0>
 80073fa:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 80073fe:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8007402:	429a      	cmp	r2, r3
 8007404:	d102      	bne.n	800740c <FS_Gatekeeper_Task+0xa0>
                        result = E_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
                    }
                }
                xSemaphoreGive(fsMutex);
 800740c:	4b09      	ldr	r3, [pc, #36]	@ (8007434 <FS_Gatekeeper_Task+0xc8>)
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	2300      	movs	r3, #0
 8007412:	2200      	movs	r2, #0
 8007414:	2100      	movs	r1, #0
 8007416:	f009 fb39 	bl	8010a8c <xQueueGenericSend>
            }
            xTaskNotify(request.requester, result, eSetValueWithOverwrite);
 800741a:	f8d7 028c 	ldr.w	r0, [r7, #652]	@ 0x28c
 800741e:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8007422:	2300      	movs	r3, #0
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	2303      	movs	r3, #3
 8007428:	2100      	movs	r1, #0
 800742a:	f00b ff6d 	bl	8013308 <xTaskGenericNotify>
        if (xQueueReceive(fsWriteQueue, &request, portMAX_DELAY) == pdTRUE) {
 800742e:	e7a6      	b.n	800737e <FS_Gatekeeper_Task+0x12>
 8007430:	24019384 	.word	0x24019384
 8007434:	24019378 	.word	0x24019378

08007438 <FS_Request_Write>:
        }
    }
}

Std_ReturnType FS_Request_Write(const char* filename, uint8_t* buffer, uint32_t size) {
 8007438:	b580      	push	{r7, lr}
 800743a:	b094      	sub	sp, #80	@ 0x50
 800743c:	af02      	add	r7, sp, #8
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
    if (size > MAX_DATA_SIZE) {
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800744a:	d901      	bls.n	8007450 <FS_Request_Write+0x18>
        return E_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e08f      	b.n	8007570 <FS_Request_Write+0x138>
    }

    if (xSemaphoreTake(fsSlotMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 8007450:	4b49      	ldr	r3, [pc, #292]	@ (8007578 <FS_Request_Write+0x140>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007458:	4618      	mov	r0, r3
 800745a:	f009 fdbb 	bl	8010fd4 <xQueueSemaphoreTake>
 800745e:	4603      	mov	r3, r0
 8007460:	2b01      	cmp	r3, #1
 8007462:	d001      	beq.n	8007468 <FS_Request_Write+0x30>
        return E_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e083      	b.n	8007570 <FS_Request_Write+0x138>
    }

    int slot = FindFreeSlot();
 8007468:	f7ff fefc 	bl	8007264 <FindFreeSlot>
 800746c:	6478      	str	r0, [r7, #68]	@ 0x44
    if (slot == -1) {
 800746e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d108      	bne.n	8007488 <FS_Request_Write+0x50>
        xSemaphoreGive(fsSlotMutex);
 8007476:	4b40      	ldr	r3, [pc, #256]	@ (8007578 <FS_Request_Write+0x140>)
 8007478:	6818      	ldr	r0, [r3, #0]
 800747a:	2300      	movs	r3, #0
 800747c:	2200      	movs	r2, #0
 800747e:	2100      	movs	r1, #0
 8007480:	f009 fb04 	bl	8010a8c <xQueueGenericSend>
        return E_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e073      	b.n	8007570 <FS_Request_Write+0x138>
    }
    slotInUse[slot] = 1;
 8007488:	4a3c      	ldr	r2, [pc, #240]	@ (800757c <FS_Request_Write+0x144>)
 800748a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800748c:	4413      	add	r3, r2
 800748e:	2201      	movs	r2, #1
 8007490:	701a      	strb	r2, [r3, #0]
    xSemaphoreGive(fsSlotMutex);
 8007492:	4b39      	ldr	r3, [pc, #228]	@ (8007578 <FS_Request_Write+0x140>)
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	2300      	movs	r3, #0
 8007498:	2200      	movs	r2, #0
 800749a:	2100      	movs	r1, #0
 800749c:	f009 faf6 	bl	8010a8c <xQueueGenericSend>

    FS_WriteRequest_t req = {
 80074a0:	f107 0314 	add.w	r3, r7, #20
 80074a4:	2230      	movs	r2, #48	@ 0x30
 80074a6:	2100      	movs	r1, #0
 80074a8:	4618      	mov	r0, r3
 80074aa:	f01a fdf0 	bl	802208e <memset>
        .data = fsDataBuffer[slot],
 80074ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074b0:	035b      	lsls	r3, r3, #13
 80074b2:	4a33      	ldr	r2, [pc, #204]	@ (8007580 <FS_Request_Write+0x148>)
 80074b4:	4413      	add	r3, r2
    FS_WriteRequest_t req = {
 80074b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        .size = size,
        .requester = xTaskGetCurrentTaskHandle()
 80074bc:	f00b fc36 	bl	8012d2c <xTaskGetCurrentTaskHandle>
 80074c0:	4603      	mov	r3, r0
    FS_WriteRequest_t req = {
 80074c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    };
    strncpy(req.filename, filename, sizeof(req.filename) - 1);
 80074c4:	f107 0314 	add.w	r3, r7, #20
 80074c8:	221f      	movs	r2, #31
 80074ca:	68f9      	ldr	r1, [r7, #12]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f01a fe02 	bl	80220d6 <strncpy>
    memcpy(fsDataBuffer[slot], buffer, size);
 80074d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074d4:	035b      	lsls	r3, r3, #13
 80074d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007580 <FS_Request_Write+0x148>)
 80074d8:	4413      	add	r3, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	4618      	mov	r0, r3
 80074e0:	f01a fe7f 	bl	80221e2 <memcpy>

    if (xQueueSend(fsWriteQueue, &req, pdMS_TO_TICKS(1000)) != pdPASS) {
 80074e4:	4b27      	ldr	r3, [pc, #156]	@ (8007584 <FS_Request_Write+0x14c>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	f107 0114 	add.w	r1, r7, #20
 80074ec:	2300      	movs	r3, #0
 80074ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80074f2:	f009 facb 	bl	8010a8c <xQueueGenericSend>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d017      	beq.n	800752c <FS_Request_Write+0xf4>
        if (xSemaphoreTake(fsSlotMutex, pdMS_TO_TICKS(1000)) == pdTRUE) {
 80074fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007578 <FS_Request_Write+0x140>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007504:	4618      	mov	r0, r3
 8007506:	f009 fd65 	bl	8010fd4 <xQueueSemaphoreTake>
 800750a:	4603      	mov	r3, r0
 800750c:	2b01      	cmp	r3, #1
 800750e:	d10b      	bne.n	8007528 <FS_Request_Write+0xf0>
            slotInUse[slot] = 0;
 8007510:	4a1a      	ldr	r2, [pc, #104]	@ (800757c <FS_Request_Write+0x144>)
 8007512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007514:	4413      	add	r3, r2
 8007516:	2200      	movs	r2, #0
 8007518:	701a      	strb	r2, [r3, #0]
            xSemaphoreGive(fsSlotMutex);
 800751a:	4b17      	ldr	r3, [pc, #92]	@ (8007578 <FS_Request_Write+0x140>)
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	2300      	movs	r3, #0
 8007520:	2200      	movs	r2, #0
 8007522:	2100      	movs	r1, #0
 8007524:	f009 fab2 	bl	8010a8c <xQueueGenericSend>
        }
        return E_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e021      	b.n	8007570 <FS_Request_Write+0x138>
    }

    uint32_t result;
    xTaskNotifyWait(0, 0, &result, pdMS_TO_TICKS(5000));
 800752c:	f107 0310 	add.w	r3, r7, #16
 8007530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007534:	9200      	str	r2, [sp, #0]
 8007536:	2200      	movs	r2, #0
 8007538:	2100      	movs	r1, #0
 800753a:	2000      	movs	r0, #0
 800753c:	f00b fe4a 	bl	80131d4 <xTaskGenericNotifyWait>

    if (xSemaphoreTake(fsSlotMutex, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007540:	4b0d      	ldr	r3, [pc, #52]	@ (8007578 <FS_Request_Write+0x140>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007548:	4618      	mov	r0, r3
 800754a:	f009 fd43 	bl	8010fd4 <xQueueSemaphoreTake>
 800754e:	4603      	mov	r3, r0
 8007550:	2b01      	cmp	r3, #1
 8007552:	d10b      	bne.n	800756c <FS_Request_Write+0x134>
        slotInUse[slot] = 0;
 8007554:	4a09      	ldr	r2, [pc, #36]	@ (800757c <FS_Request_Write+0x144>)
 8007556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007558:	4413      	add	r3, r2
 800755a:	2200      	movs	r2, #0
 800755c:	701a      	strb	r2, [r3, #0]
        xSemaphoreGive(fsSlotMutex);
 800755e:	4b06      	ldr	r3, [pc, #24]	@ (8007578 <FS_Request_Write+0x140>)
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	2300      	movs	r3, #0
 8007564:	2200      	movs	r2, #0
 8007566:	2100      	movs	r1, #0
 8007568:	f009 fa90 	bl	8010a8c <xQueueGenericSend>
    }

    return (Std_ReturnType)result;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	b2db      	uxtb	r3, r3
}
 8007570:	4618      	mov	r0, r3
 8007572:	3748      	adds	r7, #72	@ 0x48
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	2401937c 	.word	0x2401937c
 800757c:	240193d8 	.word	0x240193d8
 8007580:	24000728 	.word	0x24000728
 8007584:	24019384 	.word	0x24019384

08007588 <Link_SDFS_Driver>:

/*************************************************
 *                   Low layer API               *
 *************************************************/
Std_ReturnType Link_SDFS_Driver(void) {
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    const Diskio_drvTypeDef *mmc1_driver = MMC1_GetDriver();
 800758e:	f008 fec1 	bl	8010314 <MMC1_GetDriver>
 8007592:	6078      	str	r0, [r7, #4]
    if (FATFS_LinkDriver(mmc1_driver, MMC1Path) == 0) {
 8007594:	490b      	ldr	r1, [pc, #44]	@ (80075c4 <Link_SDFS_Driver+0x3c>)
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f008 fcae 	bl	800fef8 <FATFS_LinkDriver>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <Link_SDFS_Driver+0x32>
        int ret1 = f_mount(&MMC1FatFs, (TCHAR const*)MMC1Path, 1);
 80075a2:	2201      	movs	r2, #1
 80075a4:	4907      	ldr	r1, [pc, #28]	@ (80075c4 <Link_SDFS_Driver+0x3c>)
 80075a6:	4808      	ldr	r0, [pc, #32]	@ (80075c8 <Link_SDFS_Driver+0x40>)
 80075a8:	f007 f8f6 	bl	800e798 <f_mount>
 80075ac:	4603      	mov	r3, r0
 80075ae:	603b      	str	r3, [r7, #0]
        if (ret1 != FR_OK) {
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <Link_SDFS_Driver+0x32>
            return E_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <Link_SDFS_Driver+0x34>
        if (ret2 != FR_OK) {
            return E_ERROR;
        }
    }
#endif
    return E_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	24019380 	.word	0x24019380
 80075c8:	24000000 	.word	0x24000000

080075cc <Cat_SDFS>:

int Cat_SDFS(EmbeddedCli *cli, const char *filename) {
 80075cc:	b590      	push	{r4, r7, lr}
 80075ce:	f5ad 7d5d 	sub.w	sp, sp, #884	@ 0x374
 80075d2:	af02      	add	r7, sp, #8
 80075d4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80075d8:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80075dc:	6018      	str	r0, [r3, #0]
 80075de:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80075e2:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80075e6:	6019      	str	r1, [r3, #0]
 80075e8:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80075ec:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80075f0:	331f      	adds	r3, #31
 80075f2:	095b      	lsrs	r3, r3, #5
 80075f4:	015c      	lsls	r4, r3, #5
    FRESULT res;
    ALIGN_32BYTES(uint8_t rtext[96]);
    UINT bytesread;
    char buffer[128];

    if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 80075f6:	4b5d      	ldr	r3, [pc, #372]	@ (800776c <Cat_SDFS+0x1a0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80075fe:	4618      	mov	r0, r3
 8007600:	f009 fce8 	bl	8010fd4 <xQueueSemaphoreTake>
 8007604:	4603      	mov	r3, r0
 8007606:	2b01      	cmp	r3, #1
 8007608:	d00a      	beq.n	8007620 <Cat_SDFS+0x54>
        embeddedCliPrint(cli, "Failed to acquire FS mutex");
 800760a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800760e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8007612:	4957      	ldr	r1, [pc, #348]	@ (8007770 <Cat_SDFS+0x1a4>)
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	f7fd ffa9 	bl	800556c <embeddedCliPrint>
        return -1;
 800761a:	f04f 33ff 	mov.w	r3, #4294967295
 800761e:	e0a0      	b.n	8007762 <Cat_SDFS+0x196>
    }

    res = f_open(&file, filename, FA_READ);
 8007620:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007624:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8007628:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800762c:	2201      	movs	r2, #1
 800762e:	6819      	ldr	r1, [r3, #0]
 8007630:	f007 f928 	bl	800e884 <f_open>
 8007634:	4603      	mov	r3, r0
 8007636:	f887 3367 	strb.w	r3, [r7, #871]	@ 0x367
    if (res != FR_OK) {
 800763a:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 800763e:	2b00      	cmp	r3, #0
 8007640:	d021      	beq.n	8007686 <Cat_SDFS+0xba>
        snprintf(buffer, sizeof(buffer), "Failed to open file %s: %d", filename, res);
 8007642:	f897 2367 	ldrb.w	r2, [r7, #871]	@ 0x367
 8007646:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800764a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800764e:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8007652:	9200      	str	r2, [sp, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a47      	ldr	r2, [pc, #284]	@ (8007774 <Cat_SDFS+0x1a8>)
 8007658:	2180      	movs	r1, #128	@ 0x80
 800765a:	f01a fc53 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800765e:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8007662:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007666:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 800766a:	4611      	mov	r1, r2
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	f7fd ff7d 	bl	800556c <embeddedCliPrint>
        xSemaphoreGive(fsMutex);
 8007672:	4b3e      	ldr	r3, [pc, #248]	@ (800776c <Cat_SDFS+0x1a0>)
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	2300      	movs	r3, #0
 8007678:	2200      	movs	r2, #0
 800767a:	2100      	movs	r1, #0
 800767c:	f009 fa06 	bl	8010a8c <xQueueGenericSend>
        return -1;
 8007680:	f04f 33ff 	mov.w	r3, #4294967295
 8007684:	e06d      	b.n	8007762 <Cat_SDFS+0x196>
    }

    embeddedCliPrint(cli, "");
 8007686:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800768a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 800768e:	493a      	ldr	r1, [pc, #232]	@ (8007778 <Cat_SDFS+0x1ac>)
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	f7fd ff6b 	bl	800556c <embeddedCliPrint>
    do {
        memset(rtext, 0, sizeof(rtext));
 8007696:	2260      	movs	r2, #96	@ 0x60
 8007698:	2100      	movs	r1, #0
 800769a:	4620      	mov	r0, r4
 800769c:	f01a fcf7 	bl	802208e <memset>
        res = f_read(&file, rtext, sizeof(rtext) - 1, &bytesread);
 80076a0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80076a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076a8:	225f      	movs	r2, #95	@ 0x5f
 80076aa:	4621      	mov	r1, r4
 80076ac:	f007 fc94 	bl	800efd8 <f_read>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3367 	strb.w	r3, [r7, #871]	@ 0x367
        if (res != FR_OK) {
 80076b6:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d026      	beq.n	800770c <Cat_SDFS+0x140>
            snprintf(buffer, sizeof(buffer), "Failed to read file %s: %d", filename, res);
 80076be:	f897 2367 	ldrb.w	r2, [r7, #871]	@ 0x367
 80076c2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80076c6:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80076ca:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80076ce:	9200      	str	r2, [sp, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a2a      	ldr	r2, [pc, #168]	@ (800777c <Cat_SDFS+0x1b0>)
 80076d4:	2180      	movs	r1, #128	@ 0x80
 80076d6:	f01a fc15 	bl	8021f04 <sniprintf>
            embeddedCliPrint(cli, buffer);
 80076da:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 80076de:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80076e2:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80076e6:	4611      	mov	r1, r2
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f7fd ff3f 	bl	800556c <embeddedCliPrint>
            f_close(&file);
 80076ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f2:	4618      	mov	r0, r3
 80076f4:	f008 f9b0 	bl	800fa58 <f_close>
            xSemaphoreGive(fsMutex);
 80076f8:	4b1c      	ldr	r3, [pc, #112]	@ (800776c <Cat_SDFS+0x1a0>)
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	2300      	movs	r3, #0
 80076fe:	2200      	movs	r2, #0
 8007700:	2100      	movs	r1, #0
 8007702:	f009 f9c3 	bl	8010a8c <xQueueGenericSend>
            return -1;
 8007706:	f04f 33ff 	mov.w	r3, #4294967295
 800770a:	e02a      	b.n	8007762 <Cat_SDFS+0x196>
        }
        rtext[bytesread] = '\0';
 800770c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007710:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2200      	movs	r2, #0
 8007718:	54e2      	strb	r2, [r4, r3]
        embeddedCliPrint(cli, (char *)rtext);
 800771a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800771e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8007722:	4621      	mov	r1, r4
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	f7fd ff21 	bl	800556c <embeddedCliPrint>
    } while (bytesread > 0);
 800772a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800772e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1ae      	bne.n	8007696 <Cat_SDFS+0xca>

    embeddedCliPrint(cli, "");
 8007738:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800773c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8007740:	490d      	ldr	r1, [pc, #52]	@ (8007778 <Cat_SDFS+0x1ac>)
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	f7fd ff12 	bl	800556c <embeddedCliPrint>
    f_close(&file);
 8007748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774c:	4618      	mov	r0, r3
 800774e:	f008 f983 	bl	800fa58 <f_close>
    xSemaphoreGive(fsMutex);
 8007752:	4b06      	ldr	r3, [pc, #24]	@ (800776c <Cat_SDFS+0x1a0>)
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	2300      	movs	r3, #0
 8007758:	2200      	movs	r2, #0
 800775a:	2100      	movs	r1, #0
 800775c:	f009 f996 	bl	8010a8c <xQueueGenericSend>
    return 0;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	f507 775b 	add.w	r7, r7, #876	@ 0x36c
 8007768:	46bd      	mov	sp, r7
 800776a:	bd90      	pop	{r4, r7, pc}
 800776c:	24019378 	.word	0x24019378
 8007770:	080251b0 	.word	0x080251b0
 8007774:	080251cc 	.word	0x080251cc
 8007778:	080251e8 	.word	0x080251e8
 800777c:	080251ec 	.word	0x080251ec

08007780 <Vim_SDFS>:

int Vim_SDFS(EmbeddedCli *cli, const char *filename, const char *content) {
 8007780:	b590      	push	{r4, r7, lr}
 8007782:	f5ad 7d41 	sub.w	sp, sp, #772	@ 0x304
 8007786:	af02      	add	r7, sp, #8
 8007788:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800778c:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8007790:	6018      	str	r0, [r3, #0]
 8007792:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8007796:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 800779a:	6019      	str	r1, [r3, #0]
 800779c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80077a0:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80077a4:	601a      	str	r2, [r3, #0]
    FIL file;
    FRESULT res;
    char buffer[128];
    UINT byteswritten;

    if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 80077a6:	4b67      	ldr	r3, [pc, #412]	@ (8007944 <Vim_SDFS+0x1c4>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80077ae:	4618      	mov	r0, r3
 80077b0:	f009 fc10 	bl	8010fd4 <xQueueSemaphoreTake>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d00a      	beq.n	80077d0 <Vim_SDFS+0x50>
        embeddedCliPrint(cli, "Failed to acquire FS mutex");
 80077ba:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80077be:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80077c2:	4961      	ldr	r1, [pc, #388]	@ (8007948 <Vim_SDFS+0x1c8>)
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	f7fd fed1 	bl	800556c <embeddedCliPrint>
        return -1;
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295
 80077ce:	e0b4      	b.n	800793a <Vim_SDFS+0x1ba>
    }

    res = f_open(&file, filename, FA_OPEN_APPEND | FA_WRITE);
 80077d0:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80077d4:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80077d8:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80077dc:	2232      	movs	r2, #50	@ 0x32
 80077de:	6819      	ldr	r1, [r3, #0]
 80077e0:	f007 f850 	bl	800e884 <f_open>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f887 32f7 	strb.w	r3, [r7, #759]	@ 0x2f7
    if (res != FR_OK) {
 80077ea:	f897 32f7 	ldrb.w	r3, [r7, #759]	@ 0x2f7
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d021      	beq.n	8007836 <Vim_SDFS+0xb6>
        snprintf(buffer, sizeof(buffer), "Failed to open or create file %s: %d", filename, res);
 80077f2:	f897 22f7 	ldrb.w	r2, [r7, #759]	@ 0x2f7
 80077f6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80077fa:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80077fe:	f107 0018 	add.w	r0, r7, #24
 8007802:	9200      	str	r2, [sp, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a51      	ldr	r2, [pc, #324]	@ (800794c <Vim_SDFS+0x1cc>)
 8007808:	2180      	movs	r1, #128	@ 0x80
 800780a:	f01a fb7b 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800780e:	f107 0218 	add.w	r2, r7, #24
 8007812:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8007816:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 800781a:	4611      	mov	r1, r2
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	f7fd fea5 	bl	800556c <embeddedCliPrint>
        xSemaphoreGive(fsMutex);
 8007822:	4b48      	ldr	r3, [pc, #288]	@ (8007944 <Vim_SDFS+0x1c4>)
 8007824:	6818      	ldr	r0, [r3, #0]
 8007826:	2300      	movs	r3, #0
 8007828:	2200      	movs	r2, #0
 800782a:	2100      	movs	r1, #0
 800782c:	f009 f92e 	bl	8010a8c <xQueueGenericSend>
        return -1;
 8007830:	f04f 33ff 	mov.w	r3, #4294967295
 8007834:	e081      	b.n	800793a <Vim_SDFS+0x1ba>
    }

    if (content && strlen(content) > 0) {
 8007836:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800783a:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d058      	beq.n	80078f6 <Vim_SDFS+0x176>
 8007844:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8007848:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d050      	beq.n	80078f6 <Vim_SDFS+0x176>
        res = f_write(&file, content, strlen(content), &byteswritten);
 8007854:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8007858:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 800785c:	6818      	ldr	r0, [r3, #0]
 800785e:	f7f8 fd49 	bl	80002f4 <strlen>
 8007862:	4604      	mov	r4, r0
 8007864:	f107 0314 	add.w	r3, r7, #20
 8007868:	f507 723e 	add.w	r2, r7, #760	@ 0x2f8
 800786c:	f5a2 713d 	sub.w	r1, r2, #756	@ 0x2f4
 8007870:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8007874:	4622      	mov	r2, r4
 8007876:	6809      	ldr	r1, [r1, #0]
 8007878:	f007 fd55 	bl	800f326 <f_write>
 800787c:	4603      	mov	r3, r0
 800787e:	f887 32f7 	strb.w	r3, [r7, #759]	@ 0x2f7
        if (res != FR_OK || byteswritten != strlen(content)) {
 8007882:	f897 32f7 	ldrb.w	r3, [r7, #759]	@ 0x2f7
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10e      	bne.n	80078a8 <Vim_SDFS+0x128>
 800788a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800788e:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	f7f8 fd2e 	bl	80002f4 <strlen>
 8007898:	4602      	mov	r2, r0
 800789a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800789e:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d026      	beq.n	80078f6 <Vim_SDFS+0x176>
            snprintf(buffer, sizeof(buffer), "Failed to write to file %s: %d", filename, res);
 80078a8:	f897 22f7 	ldrb.w	r2, [r7, #759]	@ 0x2f7
 80078ac:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80078b0:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80078b4:	f107 0018 	add.w	r0, r7, #24
 80078b8:	9200      	str	r2, [sp, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a24      	ldr	r2, [pc, #144]	@ (8007950 <Vim_SDFS+0x1d0>)
 80078be:	2180      	movs	r1, #128	@ 0x80
 80078c0:	f01a fb20 	bl	8021f04 <sniprintf>
            embeddedCliPrint(cli, buffer);
 80078c4:	f107 0218 	add.w	r2, r7, #24
 80078c8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80078cc:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80078d0:	4611      	mov	r1, r2
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	f7fd fe4a 	bl	800556c <embeddedCliPrint>
            f_close(&file);
 80078d8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80078dc:	4618      	mov	r0, r3
 80078de:	f008 f8bb 	bl	800fa58 <f_close>
            xSemaphoreGive(fsMutex);
 80078e2:	4b18      	ldr	r3, [pc, #96]	@ (8007944 <Vim_SDFS+0x1c4>)
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	2300      	movs	r3, #0
 80078e8:	2200      	movs	r2, #0
 80078ea:	2100      	movs	r1, #0
 80078ec:	f009 f8ce 	bl	8010a8c <xQueueGenericSend>
            return -1;
 80078f0:	f04f 33ff 	mov.w	r3, #4294967295
 80078f4:	e021      	b.n	800793a <Vim_SDFS+0x1ba>
        }
    }

    f_close(&file);
 80078f6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80078fa:	4618      	mov	r0, r3
 80078fc:	f008 f8ac 	bl	800fa58 <f_close>
    xSemaphoreGive(fsMutex);
 8007900:	4b10      	ldr	r3, [pc, #64]	@ (8007944 <Vim_SDFS+0x1c4>)
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	2300      	movs	r3, #0
 8007906:	2200      	movs	r2, #0
 8007908:	2100      	movs	r1, #0
 800790a:	f009 f8bf 	bl	8010a8c <xQueueGenericSend>
    snprintf(buffer, sizeof(buffer), "Successfully wrote to %s", filename);
 800790e:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8007912:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8007916:	f107 0018 	add.w	r0, r7, #24
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a0d      	ldr	r2, [pc, #52]	@ (8007954 <Vim_SDFS+0x1d4>)
 800791e:	2180      	movs	r1, #128	@ 0x80
 8007920:	f01a faf0 	bl	8021f04 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8007924:	f107 0218 	add.w	r2, r7, #24
 8007928:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800792c:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8007930:	4611      	mov	r1, r2
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	f7fd fe1a 	bl	800556c <embeddedCliPrint>
    return 0;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	f507 773f 	add.w	r7, r7, #764	@ 0x2fc
 8007940:	46bd      	mov	sp, r7
 8007942:	bd90      	pop	{r4, r7, pc}
 8007944:	24019378 	.word	0x24019378
 8007948:	080251b0 	.word	0x080251b0
 800794c:	08025208 	.word	0x08025208
 8007950:	08025230 	.word	0x08025230
 8007954:	08025250 	.word	0x08025250

08007958 <FS_ListFiles_path>:

void FS_ListFiles_path(EmbeddedCli *cli) {
 8007958:	b580      	push	{r7, lr}
 800795a:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
 800795e:	af02      	add	r7, sp, #8
 8007960:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8007964:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8007968:	6018      	str	r0, [r3, #0]
    FRESULT res;
    DIR dir;
    FILINFO fno;
    char *path = MMC1Path;
 800796a:	4b57      	ldr	r3, [pc, #348]	@ (8007ac8 <FS_ListFiles_path+0x170>)
 800796c:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
    char buffer[384];

    if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 8007970:	4b56      	ldr	r3, [pc, #344]	@ (8007acc <FS_ListFiles_path+0x174>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007978:	4618      	mov	r0, r3
 800797a:	f009 fb2b 	bl	8010fd4 <xQueueSemaphoreTake>
 800797e:	4603      	mov	r3, r0
 8007980:	2b01      	cmp	r3, #1
 8007982:	d008      	beq.n	8007996 <FS_ListFiles_path+0x3e>
        embeddedCliPrint(cli, "Failed to acquire FS mutex");
 8007984:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8007988:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 800798c:	4950      	ldr	r1, [pc, #320]	@ (8007ad0 <FS_ListFiles_path+0x178>)
 800798e:	6818      	ldr	r0, [r3, #0]
 8007990:	f7fd fdec 	bl	800556c <embeddedCliPrint>
 8007994:	e093      	b.n	8007abe <FS_ListFiles_path+0x166>
        return;
    }

    snprintf(buffer, sizeof(buffer), "Listing files in %s...", path);
 8007996:	f107 0008 	add.w	r0, r7, #8
 800799a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 800799e:	4a4d      	ldr	r2, [pc, #308]	@ (8007ad4 <FS_ListFiles_path+0x17c>)
 80079a0:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80079a4:	f01a faae 	bl	8021f04 <sniprintf>
    embeddedCliPrint(cli, buffer);
 80079a8:	f107 0208 	add.w	r2, r7, #8
 80079ac:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80079b0:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80079b4:	4611      	mov	r1, r2
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	f7fd fdd8 	bl	800556c <embeddedCliPrint>

    res = f_opendir(&dir, path);
 80079bc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80079c0:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 80079c4:	4618      	mov	r0, r3
 80079c6:	f008 f876 	bl	800fab6 <f_opendir>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f887 32fb 	strb.w	r3, [r7, #763]	@ 0x2fb
    if (res == FR_OK) {
 80079d0:	f897 32fb 	ldrb.w	r3, [r7, #763]	@ 0x2fb
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d155      	bne.n	8007a84 <FS_ListFiles_path+0x12c>
        while (1) {
            res = f_readdir(&dir, &fno);
 80079d8:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 80079dc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80079e0:	4611      	mov	r1, r2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f008 f9b1 	bl	800fd4a <f_readdir>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 32fb 	strb.w	r3, [r7, #763]	@ 0x2fb
            if (res != FR_OK || fno.fname[0] == 0) break;
 80079ee:	f897 32fb 	ldrb.w	r3, [r7, #763]	@ 0x2fb
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d140      	bne.n	8007a78 <FS_ListFiles_path+0x120>
 80079f6:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80079fa:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80079fe:	7e9b      	ldrb	r3, [r3, #26]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d039      	beq.n	8007a78 <FS_ListFiles_path+0x120>
            if (fno.fattrib & AM_DIR) {
 8007a04:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8007a08:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8007a0c:	7b1b      	ldrb	r3, [r3, #12]
 8007a0e:	f003 0310 	and.w	r3, r3, #16
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d014      	beq.n	8007a40 <FS_ListFiles_path+0xe8>
                snprintf(buffer, sizeof(buffer), "  [DIR]  %s", fno.fname);
 8007a16:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8007a1a:	331a      	adds	r3, #26
 8007a1c:	f107 0008 	add.w	r0, r7, #8
 8007a20:	4a2d      	ldr	r2, [pc, #180]	@ (8007ad8 <FS_ListFiles_path+0x180>)
 8007a22:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8007a26:	f01a fa6d 	bl	8021f04 <sniprintf>
                embeddedCliPrint(cli, buffer);
 8007a2a:	f107 0208 	add.w	r2, r7, #8
 8007a2e:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8007a32:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8007a36:	4611      	mov	r1, r2
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	f7fd fd97 	bl	800556c <embeddedCliPrint>
 8007a3e:	e7cb      	b.n	80079d8 <FS_ListFiles_path+0x80>
            } else {
                snprintf(buffer, sizeof(buffer), "  [FILE] %s  %lu bytes",
                         fno.fname, (unsigned long)fno.fsize);
 8007a40:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8007a44:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
                snprintf(buffer, sizeof(buffer), "  [FILE] %s  %lu bytes",
 8007a4c:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8007a50:	331a      	adds	r3, #26
 8007a52:	f107 0008 	add.w	r0, r7, #8
 8007a56:	9200      	str	r2, [sp, #0]
 8007a58:	4a20      	ldr	r2, [pc, #128]	@ (8007adc <FS_ListFiles_path+0x184>)
 8007a5a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8007a5e:	f01a fa51 	bl	8021f04 <sniprintf>
                embeddedCliPrint(cli, buffer);
 8007a62:	f107 0208 	add.w	r2, r7, #8
 8007a66:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8007a6a:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8007a6e:	4611      	mov	r1, r2
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	f7fd fd7b 	bl	800556c <embeddedCliPrint>
            res = f_readdir(&dir, &fno);
 8007a76:	e7af      	b.n	80079d8 <FS_ListFiles_path+0x80>
            }
        }
        f_closedir(&dir);
 8007a78:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f008 f939 	bl	800fcf4 <f_closedir>
 8007a82:	e015      	b.n	8007ab0 <FS_ListFiles_path+0x158>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to open directory %s: %d", path, res);
 8007a84:	f897 32fb 	ldrb.w	r3, [r7, #763]	@ 0x2fb
 8007a88:	f107 0008 	add.w	r0, r7, #8
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8007a92:	4a13      	ldr	r2, [pc, #76]	@ (8007ae0 <FS_ListFiles_path+0x188>)
 8007a94:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8007a98:	f01a fa34 	bl	8021f04 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8007a9c:	f107 0208 	add.w	r2, r7, #8
 8007aa0:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8007aa4:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	f7fd fd5e 	bl	800556c <embeddedCliPrint>
    }
    xSemaphoreGive(fsMutex);
 8007ab0:	4b06      	ldr	r3, [pc, #24]	@ (8007acc <FS_ListFiles_path+0x174>)
 8007ab2:	6818      	ldr	r0, [r3, #0]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2100      	movs	r1, #0
 8007aba:	f008 ffe7 	bl	8010a8c <xQueueGenericSend>
}
 8007abe:	f507 7740 	add.w	r7, r7, #768	@ 0x300
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	24019380 	.word	0x24019380
 8007acc:	24019378 	.word	0x24019378
 8007ad0:	080251b0 	.word	0x080251b0
 8007ad4:	0802526c 	.word	0x0802526c
 8007ad8:	08025284 	.word	0x08025284
 8007adc:	08025290 	.word	0x08025290
 8007ae0:	080252a8 	.word	0x080252a8

08007ae4 <MIN_ResponseCallback>:
typedef struct {
    uint8_t cmdId;
    uint8_t expectedResponseId;
} CommandInfo_t;

void MIN_ResponseCallback(uint8_t min_id, const uint8_t *payload, uint8_t len) {
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
 8007af0:	4613      	mov	r3, r2
 8007af2:	71bb      	strb	r3, [r7, #6]
    CommandInfo_t cmdInfo;
    if (xQueuePeek(pendingCommandsQueue, &cmdInfo, 0) == pdTRUE) {
 8007af4:	4b10      	ldr	r3, [pc, #64]	@ (8007b38 <MIN_ResponseCallback+0x54>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f107 010c 	add.w	r1, r7, #12
 8007afc:	2200      	movs	r2, #0
 8007afe:	4618      	mov	r0, r3
 8007b00:	f009 fb6e 	bl	80111e0 <xQueuePeek>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d112      	bne.n	8007b30 <MIN_ResponseCallback+0x4c>
        if (min_id == cmdInfo.expectedResponseId) {
 8007b0a:	7b7b      	ldrb	r3, [r7, #13]
 8007b0c:	79fa      	ldrb	r2, [r7, #7]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d10e      	bne.n	8007b30 <MIN_ResponseCallback+0x4c>
            xQueueReceive(pendingCommandsQueue, &cmdInfo, 0);
 8007b12:	4b09      	ldr	r3, [pc, #36]	@ (8007b38 <MIN_ResponseCallback+0x54>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f107 010c 	add.w	r1, r7, #12
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f009 f971 	bl	8010e04 <xQueueReceive>
            xSemaphoreGive(responseSemaphore);
 8007b22:	4b06      	ldr	r3, [pc, #24]	@ (8007b3c <MIN_ResponseCallback+0x58>)
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	2300      	movs	r3, #0
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	f008 ffae 	bl	8010a8c <xQueueGenericSend>
        }
    }
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	240195f8 	.word	0x240195f8
 8007b3c:	240195f4 	.word	0x240195f4

08007b40 <ClearPendingCommand>:

static void ClearPendingCommand(void) {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b09c      	sub	sp, #112	@ 0x70
 8007b44:	af02      	add	r7, sp, #8
    CommandInfo_t cmdInfo;
    if (xQueueReceive(pendingCommandsQueue, &cmdInfo, 0) == pdTRUE) {
 8007b46:	4b10      	ldr	r3, [pc, #64]	@ (8007b88 <ClearPendingCommand+0x48>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f009 f957 	bl	8010e04 <xQueueReceive>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d110      	bne.n	8007b7e <ClearPendingCommand+0x3e>
        char buffer[100];
        snprintf(buffer, sizeof(buffer), "Cleared pending command: ID 0x%02X, Expected 0x%02X\r\n",
                 cmdInfo.cmdId, cmdInfo.expectedResponseId);
 8007b5c:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
        snprintf(buffer, sizeof(buffer), "Cleared pending command: ID 0x%02X, Expected 0x%02X\r\n",
 8007b60:	461a      	mov	r2, r3
                 cmdInfo.cmdId, cmdInfo.expectedResponseId);
 8007b62:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
        snprintf(buffer, sizeof(buffer), "Cleared pending command: ID 0x%02X, Expected 0x%02X\r\n",
 8007b66:	4638      	mov	r0, r7
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	4a07      	ldr	r2, [pc, #28]	@ (8007b8c <ClearPendingCommand+0x4c>)
 8007b6e:	2164      	movs	r1, #100	@ 0x64
 8007b70:	f01a f9c8 	bl	8021f04 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 8007b74:	463b      	mov	r3, r7
 8007b76:	4619      	mov	r1, r3
 8007b78:	4805      	ldr	r0, [pc, #20]	@ (8007b90 <ClearPendingCommand+0x50>)
 8007b7a:	f7fa fde1 	bl	8002740 <UART_Driver_SendString>
    }
}
 8007b7e:	bf00      	nop
 8007b80:	3768      	adds	r7, #104	@ 0x68
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	240195f8 	.word	0x240195f8
 8007b8c:	080252c8 	.word	0x080252c8
 8007b90:	40004400 	.word	0x40004400

08007b94 <MIN_Timeout_Handler>:

void MIN_Timeout_Handler(MIN_Context_t *ctx) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
    SYSLOG_ERROR_POLL("MIN-Timeout!");
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	4904      	ldr	r1, [pc, #16]	@ (8007bb0 <MIN_Timeout_Handler+0x1c>)
 8007ba0:	2004      	movs	r0, #4
 8007ba2:	f000 fc67 	bl	8008474 <syslog_log>
}
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	08025300 	.word	0x08025300

08007bb4 <MIN_Process_Init>:

void MIN_Process_Init(void){
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
	MIN_Context_Init(&OBC_MinCtx, EXP_PORT);
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4810      	ldr	r0, [pc, #64]	@ (8007bfc <MIN_Process_Init+0x48>)
 8007bbc:	f00d fc6a 	bl	8015494 <MIN_Context_Init>
	MIN_RegisterTimeoutCallback(&OBC_MinCtx, MIN_Timeout_Handler);
 8007bc0:	490f      	ldr	r1, [pc, #60]	@ (8007c00 <MIN_Process_Init+0x4c>)
 8007bc2:	480e      	ldr	r0, [pc, #56]	@ (8007bfc <MIN_Process_Init+0x48>)
 8007bc4:	f00d fcb3 	bl	801552e <MIN_RegisterTimeoutCallback>

	responseSemaphore = xSemaphoreCreateBinary();
 8007bc8:	2203      	movs	r2, #3
 8007bca:	2100      	movs	r1, #0
 8007bcc:	2001      	movs	r0, #1
 8007bce:	f008 feb2 	bl	8010936 <xQueueGenericCreate>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8007c04 <MIN_Process_Init+0x50>)
 8007bd6:	6013      	str	r3, [r2, #0]
	pendingCommandsQueue = xQueueCreate(10, sizeof(CommandInfo_t));
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2102      	movs	r1, #2
 8007bdc:	200a      	movs	r0, #10
 8007bde:	f008 feaa 	bl	8010936 <xQueueGenericCreate>
 8007be2:	4603      	mov	r3, r0
 8007be4:	4a08      	ldr	r2, [pc, #32]	@ (8007c08 <MIN_Process_Init+0x54>)
 8007be6:	6013      	str	r3, [r2, #0]
	MIN_RegisterResponseHandler(MIN_ResponseCallback);
 8007be8:	4808      	ldr	r0, [pc, #32]	@ (8007c0c <MIN_Process_Init+0x58>)
 8007bea:	f00d fd1f 	bl	801562c <MIN_RegisterResponseHandler>

	Sys_Boardcast(E_OK, LOG_INFOR, "MIN Process Init!");
 8007bee:	4a08      	ldr	r2, [pc, #32]	@ (8007c10 <MIN_Process_Init+0x5c>)
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	f000 fa8c 	bl	8008110 <Sys_Boardcast>
}
 8007bf8:	bf00      	nop
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	240193e4 	.word	0x240193e4
 8007c00:	08007b95 	.word	0x08007b95
 8007c04:	240195f4 	.word	0x240195f4
 8007c08:	240195f8 	.word	0x240195f8
 8007c0c:	08007ae5 	.word	0x08007ae5
 8007c10:	08025310 	.word	0x08025310

08007c14 <MIN_Processing>:

void MIN_Processing(void){
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
    while (UART_DMA_Driver_IsDataAvailable(UART_EXP)) {
 8007c1a:	e00f      	b.n	8007c3c <MIN_Processing+0x28>
        int data = UART_DMA_Driver_Read(UART_EXP);
 8007c1c:	480f      	ldr	r0, [pc, #60]	@ (8007c5c <MIN_Processing+0x48>)
 8007c1e:	f7fa fe93 	bl	8002948 <UART_DMA_Driver_Read>
 8007c22:	6078      	str	r0, [r7, #4]
        if (data >= 0) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	db08      	blt.n	8007c3c <MIN_Processing+0x28>
            uint8_t byte = (uint8_t)data;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	70fb      	strb	r3, [r7, #3]
            MIN_App_Poll(&OBC_MinCtx, &byte, 1);
 8007c30:	1cfb      	adds	r3, r7, #3
 8007c32:	2201      	movs	r2, #1
 8007c34:	4619      	mov	r1, r3
 8007c36:	480a      	ldr	r0, [pc, #40]	@ (8007c60 <MIN_Processing+0x4c>)
 8007c38:	f00d fc88 	bl	801554c <MIN_App_Poll>
    while (UART_DMA_Driver_IsDataAvailable(UART_EXP)) {
 8007c3c:	4807      	ldr	r0, [pc, #28]	@ (8007c5c <MIN_Processing+0x48>)
 8007c3e:	f7fa fea4 	bl	800298a <UART_DMA_Driver_IsDataAvailable>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e9      	bne.n	8007c1c <MIN_Processing+0x8>
        }
    }
	MIN_App_Poll(&OBC_MinCtx, NULL, 0);
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	4804      	ldr	r0, [pc, #16]	@ (8007c60 <MIN_Processing+0x4c>)
 8007c4e:	f00d fc7d 	bl	801554c <MIN_App_Poll>
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40007800 	.word	0x40007800
 8007c60:	240193e4 	.word	0x240193e4

08007c64 <Min_Send_CONTROL_TEMP_CMD>:

// =================================================================
// Command Sending Functions
// =================================================================

void Min_Send_CONTROL_TEMP_CMD(uint8_t temperature) {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	71fb      	strb	r3, [r7, #7]
    uint8_t payload[1] = {temperature};
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	733b      	strb	r3, [r7, #12]
    MIN_Send(&OBC_MinCtx, CONTROL_TEMP_CMD, payload, 1);
 8007c72:	f107 020c 	add.w	r2, r7, #12
 8007c76:	2301      	movs	r3, #1
 8007c78:	2103      	movs	r1, #3
 8007c7a:	4815      	ldr	r0, [pc, #84]	@ (8007cd0 <Min_Send_CONTROL_TEMP_CMD+0x6c>)
 8007c7c:	f00d fcb8 	bl	80155f0 <MIN_Send>

    CommandInfo_t cmdInfo = {CONTROL_TEMP_CMD, CONTROL_TEMP_ACK};
 8007c80:	4b14      	ldr	r3, [pc, #80]	@ (8007cd4 <Min_Send_CONTROL_TEMP_CMD+0x70>)
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007c86:	4b14      	ldr	r3, [pc, #80]	@ (8007cd8 <Min_Send_CONTROL_TEMP_CMD+0x74>)
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	f107 0108 	add.w	r1, r7, #8
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f04f 32ff 	mov.w	r2, #4294967295
 8007c94:	f008 fefa 	bl	8010a8c <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007c98:	4b10      	ldr	r3, [pc, #64]	@ (8007cdc <Min_Send_CONTROL_TEMP_CMD+0x78>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f009 f997 	bl	8010fd4 <xQueueSemaphoreTake>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d105      	bne.n	8007cb8 <Min_Send_CONTROL_TEMP_CMD+0x54>
        SYSLOG_NOTICE("Response OK - CONTROL_TEMP_CMD");
 8007cac:	2200      	movs	r2, #0
 8007cae:	490c      	ldr	r1, [pc, #48]	@ (8007ce0 <Min_Send_CONTROL_TEMP_CMD+0x7c>)
 8007cb0:	2002      	movs	r0, #2
 8007cb2:	f000 fbdf 	bl	8008474 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout CONTROL_TEMP_CMD");
        ClearPendingCommand();
    }
}
 8007cb6:	e006      	b.n	8007cc6 <Min_Send_CONTROL_TEMP_CMD+0x62>
        SYSLOG_ERROR("Timeout CONTROL_TEMP_CMD");
 8007cb8:	2200      	movs	r2, #0
 8007cba:	490a      	ldr	r1, [pc, #40]	@ (8007ce4 <Min_Send_CONTROL_TEMP_CMD+0x80>)
 8007cbc:	2004      	movs	r0, #4
 8007cbe:	f000 fbd9 	bl	8008474 <syslog_log>
        ClearPendingCommand();
 8007cc2:	f7ff ff3d 	bl	8007b40 <ClearPendingCommand>
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	240193e4 	.word	0x240193e4
 8007cd4:	08025360 	.word	0x08025360
 8007cd8:	240195f8 	.word	0x240195f8
 8007cdc:	240195f4 	.word	0x240195f4
 8007ce0:	08025324 	.word	0x08025324
 8007ce4:	08025344 	.word	0x08025344

08007ce8 <Min_Send_COLLECT_DATA>:

void Min_Send_COLLECT_DATA(uint32_t sample) {
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]

    uint8_t payload[4] = {0};
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
    // Big-endian packing [3210]
    payload[3] = (uint8_t)((sample >> 24) & 0xFF);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	0e1b      	lsrs	r3, r3, #24
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	73fb      	strb	r3, [r7, #15]
    payload[2] = (uint8_t)((sample >> 16) & 0xFF);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	0c1b      	lsrs	r3, r3, #16
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	73bb      	strb	r3, [r7, #14]
    payload[1] = (uint8_t)((sample >> 8	) & 0xFF);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	0a1b      	lsrs	r3, r3, #8
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	737b      	strb	r3, [r7, #13]
    payload[0] = (uint8_t)((sample & 0xFF));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	733b      	strb	r3, [r7, #12]

    MIN_Send(&OBC_MinCtx, COLLECT_DATA_CMD, payload, sizeof(payload));
 8007d12:	f107 020c 	add.w	r2, r7, #12
 8007d16:	2304      	movs	r3, #4
 8007d18:	2112      	movs	r1, #18
 8007d1a:	4815      	ldr	r0, [pc, #84]	@ (8007d70 <Min_Send_COLLECT_DATA+0x88>)
 8007d1c:	f00d fc68 	bl	80155f0 <MIN_Send>

    CommandInfo_t cmdInfo = {COLLECT_DATA_CMD, DONE};
 8007d20:	4b14      	ldr	r3, [pc, #80]	@ (8007d74 <Min_Send_COLLECT_DATA+0x8c>)
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007d26:	4b14      	ldr	r3, [pc, #80]	@ (8007d78 <Min_Send_COLLECT_DATA+0x90>)
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	f107 0108 	add.w	r1, r7, #8
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f04f 32ff 	mov.w	r2, #4294967295
 8007d34:	f008 feaa 	bl	8010a8c <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007d38:	4b10      	ldr	r3, [pc, #64]	@ (8007d7c <Min_Send_COLLECT_DATA+0x94>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007d40:	4618      	mov	r0, r3
 8007d42:	f009 f947 	bl	8010fd4 <xQueueSemaphoreTake>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d105      	bne.n	8007d58 <Min_Send_COLLECT_DATA+0x70>
        SYSLOG_NOTICE("Response OK - COLLECT_DATA");
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	490c      	ldr	r1, [pc, #48]	@ (8007d80 <Min_Send_COLLECT_DATA+0x98>)
 8007d50:	2002      	movs	r0, #2
 8007d52:	f000 fb8f 	bl	8008474 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout COLLECT_DATA");
        ClearPendingCommand();
    }
}
 8007d56:	e006      	b.n	8007d66 <Min_Send_COLLECT_DATA+0x7e>
        SYSLOG_ERROR("Timeout COLLECT_DATA");
 8007d58:	2200      	movs	r2, #0
 8007d5a:	490a      	ldr	r1, [pc, #40]	@ (8007d84 <Min_Send_COLLECT_DATA+0x9c>)
 8007d5c:	2004      	movs	r0, #4
 8007d5e:	f000 fb89 	bl	8008474 <syslog_log>
        ClearPendingCommand();
 8007d62:	f7ff feed 	bl	8007b40 <ClearPendingCommand>
}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	240193e4 	.word	0x240193e4
 8007d74:	08025398 	.word	0x08025398
 8007d78:	240195f8 	.word	0x240195f8
 8007d7c:	240195f4 	.word	0x240195f4
 8007d80:	08025364 	.word	0x08025364
 8007d84:	08025380 	.word	0x08025380

08007d88 <Min_Send_PRE_DATA>:

void Min_Send_PRE_DATA(uint16_t chunk_size) {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	80fb      	strh	r3, [r7, #6]
    uint8_t payload[2] = {0};
 8007d92:	2300      	movs	r3, #0
 8007d94:	81bb      	strh	r3, [r7, #12]

    payload[1] = (uint8_t)((chunk_size >> 8) & 0xFF);
 8007d96:	88fb      	ldrh	r3, [r7, #6]
 8007d98:	0a1b      	lsrs	r3, r3, #8
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	737b      	strb	r3, [r7, #13]
    payload[0] = (uint8_t)((chunk_size & 0xFF));
 8007da0:	88fb      	ldrh	r3, [r7, #6]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	733b      	strb	r3, [r7, #12]

    MIN_Send(&OBC_MinCtx, PRE_DATA_CMD, payload, sizeof(payload));
 8007da6:	f107 020c 	add.w	r2, r7, #12
 8007daa:	2302      	movs	r3, #2
 8007dac:	2115      	movs	r1, #21
 8007dae:	4815      	ldr	r0, [pc, #84]	@ (8007e04 <Min_Send_PRE_DATA+0x7c>)
 8007db0:	f00d fc1e 	bl	80155f0 <MIN_Send>

    CommandInfo_t cmdInfo = {PRE_DATA_CMD, PRE_DATA_ACK};
 8007db4:	4b14      	ldr	r3, [pc, #80]	@ (8007e08 <Min_Send_PRE_DATA+0x80>)
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007dba:	4b14      	ldr	r3, [pc, #80]	@ (8007e0c <Min_Send_PRE_DATA+0x84>)
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	f107 0108 	add.w	r1, r7, #8
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc8:	f008 fe60 	bl	8010a8c <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007dcc:	4b10      	ldr	r3, [pc, #64]	@ (8007e10 <Min_Send_PRE_DATA+0x88>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f009 f8fd 	bl	8010fd4 <xQueueSemaphoreTake>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d105      	bne.n	8007dec <Min_Send_PRE_DATA+0x64>
        SYSLOG_NOTICE("Response OK - PRE_DATA_CMD");
 8007de0:	2200      	movs	r2, #0
 8007de2:	490c      	ldr	r1, [pc, #48]	@ (8007e14 <Min_Send_PRE_DATA+0x8c>)
 8007de4:	2002      	movs	r0, #2
 8007de6:	f000 fb45 	bl	8008474 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout PRE_DATA_CMD");
        ClearPendingCommand();
    }
}
 8007dea:	e006      	b.n	8007dfa <Min_Send_PRE_DATA+0x72>
        SYSLOG_ERROR("Timeout PRE_DATA_CMD");
 8007dec:	2200      	movs	r2, #0
 8007dee:	490a      	ldr	r1, [pc, #40]	@ (8007e18 <Min_Send_PRE_DATA+0x90>)
 8007df0:	2004      	movs	r0, #4
 8007df2:	f000 fb3f 	bl	8008474 <syslog_log>
        ClearPendingCommand();
 8007df6:	f7ff fea3 	bl	8007b40 <ClearPendingCommand>
}
 8007dfa:	bf00      	nop
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	240193e4 	.word	0x240193e4
 8007e08:	080253d0 	.word	0x080253d0
 8007e0c:	240195f8 	.word	0x240195f8
 8007e10:	240195f4 	.word	0x240195f4
 8007e14:	0802539c 	.word	0x0802539c
 8007e18:	080253b8 	.word	0x080253b8

08007e1c <Min_Send_PRE_CHUNK>:

void Min_Send_PRE_CHUNK(uint8_t chunk) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	71fb      	strb	r3, [r7, #7]
    uint8_t payload[1] = {chunk};
 8007e26:	79fb      	ldrb	r3, [r7, #7]
 8007e28:	733b      	strb	r3, [r7, #12]
    MIN_Send(&OBC_MinCtx, PRE_CHUNK_CMD, payload, 1);
 8007e2a:	f107 020c 	add.w	r2, r7, #12
 8007e2e:	2301      	movs	r3, #1
 8007e30:	2113      	movs	r1, #19
 8007e32:	4815      	ldr	r0, [pc, #84]	@ (8007e88 <Min_Send_PRE_CHUNK+0x6c>)
 8007e34:	f00d fbdc 	bl	80155f0 <MIN_Send>

    CommandInfo_t cmdInfo = {PRE_CHUNK_CMD, PRE_CHUNK_ACK};
 8007e38:	4b14      	ldr	r3, [pc, #80]	@ (8007e8c <Min_Send_PRE_CHUNK+0x70>)
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007e3e:	4b14      	ldr	r3, [pc, #80]	@ (8007e90 <Min_Send_PRE_CHUNK+0x74>)
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	f107 0108 	add.w	r1, r7, #8
 8007e46:	2300      	movs	r3, #0
 8007e48:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4c:	f008 fe1e 	bl	8010a8c <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007e50:	4b10      	ldr	r3, [pc, #64]	@ (8007e94 <Min_Send_PRE_CHUNK+0x78>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f009 f8bb 	bl	8010fd4 <xQueueSemaphoreTake>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d105      	bne.n	8007e70 <Min_Send_PRE_CHUNK+0x54>
        SYSLOG_NOTICE("Response OK - PRE_CHUNK_CMD");
 8007e64:	2200      	movs	r2, #0
 8007e66:	490c      	ldr	r1, [pc, #48]	@ (8007e98 <Min_Send_PRE_CHUNK+0x7c>)
 8007e68:	2002      	movs	r0, #2
 8007e6a:	f000 fb03 	bl	8008474 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout PRE_CHUNK_CMD");
        ClearPendingCommand();
    }
}
 8007e6e:	e006      	b.n	8007e7e <Min_Send_PRE_CHUNK+0x62>
        SYSLOG_ERROR("Timeout PRE_CHUNK_CMD");
 8007e70:	2200      	movs	r2, #0
 8007e72:	490a      	ldr	r1, [pc, #40]	@ (8007e9c <Min_Send_PRE_CHUNK+0x80>)
 8007e74:	2004      	movs	r0, #4
 8007e76:	f000 fafd 	bl	8008474 <syslog_log>
        ClearPendingCommand();
 8007e7a:	f7ff fe61 	bl	8007b40 <ClearPendingCommand>
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	240193e4 	.word	0x240193e4
 8007e8c:	08025408 	.word	0x08025408
 8007e90:	240195f8 	.word	0x240195f8
 8007e94:	240195f4 	.word	0x240195f4
 8007e98:	080253d4 	.word	0x080253d4
 8007e9c:	080253f0 	.word	0x080253f0

08007ea0 <Min_Send_SAMPLERATE_SET>:

void Min_Send_SAMPLERATE_SET(uint32_t sample_rate) {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
    uint8_t payload[4] = {0};
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60fb      	str	r3, [r7, #12]

    payload[3] = (uint8_t)((sample_rate >> 24) & 0xFF);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	0e1b      	lsrs	r3, r3, #24
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	73fb      	strb	r3, [r7, #15]
    payload[2] = (uint8_t)((sample_rate >> 16) & 0xFF);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	0c1b      	lsrs	r3, r3, #16
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	73bb      	strb	r3, [r7, #14]
    payload[1] = (uint8_t)((sample_rate >> 8) & 0xFF);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	0a1b      	lsrs	r3, r3, #8
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	737b      	strb	r3, [r7, #13]
    payload[0] = (uint8_t)(sample_rate & 0xFF);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	733b      	strb	r3, [r7, #12]

    MIN_Send(&OBC_MinCtx, SAMPLERATE_SET_CMD, payload, sizeof(payload));
 8007eca:	f107 020c 	add.w	r2, r7, #12
 8007ece:	2304      	movs	r3, #4
 8007ed0:	2117      	movs	r1, #23
 8007ed2:	4815      	ldr	r0, [pc, #84]	@ (8007f28 <Min_Send_SAMPLERATE_SET+0x88>)
 8007ed4:	f00d fb8c 	bl	80155f0 <MIN_Send>

    CommandInfo_t cmdInfo = {SAMPLERATE_SET_CMD, DONE};
 8007ed8:	4b14      	ldr	r3, [pc, #80]	@ (8007f2c <Min_Send_SAMPLERATE_SET+0x8c>)
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007ede:	4b14      	ldr	r3, [pc, #80]	@ (8007f30 <Min_Send_SAMPLERATE_SET+0x90>)
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	f107 0108 	add.w	r1, r7, #8
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eec:	f008 fdce 	bl	8010a8c <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007ef0:	4b10      	ldr	r3, [pc, #64]	@ (8007f34 <Min_Send_SAMPLERATE_SET+0x94>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f009 f86b 	bl	8010fd4 <xQueueSemaphoreTake>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d105      	bne.n	8007f10 <Min_Send_SAMPLERATE_SET+0x70>
        SYSLOG_NOTICE("Response OK - SAMPLERATE_SET_CMD");
 8007f04:	2200      	movs	r2, #0
 8007f06:	490c      	ldr	r1, [pc, #48]	@ (8007f38 <Min_Send_SAMPLERATE_SET+0x98>)
 8007f08:	2002      	movs	r0, #2
 8007f0a:	f000 fab3 	bl	8008474 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout SAMPLERATE_SET_CMD");
        ClearPendingCommand();
    }
}
 8007f0e:	e006      	b.n	8007f1e <Min_Send_SAMPLERATE_SET+0x7e>
        SYSLOG_ERROR("Timeout SAMPLERATE_SET_CMD");
 8007f10:	2200      	movs	r2, #0
 8007f12:	490a      	ldr	r1, [pc, #40]	@ (8007f3c <Min_Send_SAMPLERATE_SET+0x9c>)
 8007f14:	2004      	movs	r0, #4
 8007f16:	f000 faad 	bl	8008474 <syslog_log>
        ClearPendingCommand();
 8007f1a:	f7ff fe11 	bl	8007b40 <ClearPendingCommand>
}
 8007f1e:	bf00      	nop
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	240193e4 	.word	0x240193e4
 8007f2c:	0802544c 	.word	0x0802544c
 8007f30:	240195f8 	.word	0x240195f8
 8007f34:	240195f4 	.word	0x240195f4
 8007f38:	0802540c 	.word	0x0802540c
 8007f3c:	08025430 	.word	0x08025430

08007f40 <Min_Send_SAMPLERATE_GET>:

void Min_Send_SAMPLERATE_GET(void) {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
    MIN_Send(&OBC_MinCtx, SAMPLERATE_GET_CMD, NULL, 0);
 8007f46:	2300      	movs	r3, #0
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2118      	movs	r1, #24
 8007f4c:	4814      	ldr	r0, [pc, #80]	@ (8007fa0 <Min_Send_SAMPLERATE_GET+0x60>)
 8007f4e:	f00d fb4f 	bl	80155f0 <MIN_Send>

    CommandInfo_t cmdInfo = {SAMPLERATE_GET_CMD, SAMPLERATE_GET_ACK};
 8007f52:	4b14      	ldr	r3, [pc, #80]	@ (8007fa4 <Min_Send_SAMPLERATE_GET+0x64>)
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	80bb      	strh	r3, [r7, #4]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007f58:	4b13      	ldr	r3, [pc, #76]	@ (8007fa8 <Min_Send_SAMPLERATE_GET+0x68>)
 8007f5a:	6818      	ldr	r0, [r3, #0]
 8007f5c:	1d39      	adds	r1, r7, #4
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295
 8007f64:	f008 fd92 	bl	8010a8c <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007f68:	4b10      	ldr	r3, [pc, #64]	@ (8007fac <Min_Send_SAMPLERATE_GET+0x6c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007f70:	4618      	mov	r0, r3
 8007f72:	f009 f82f 	bl	8010fd4 <xQueueSemaphoreTake>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d105      	bne.n	8007f88 <Min_Send_SAMPLERATE_GET+0x48>
        SYSLOG_NOTICE("Response OK - SAMPLERATE_GET_CMD");
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	490c      	ldr	r1, [pc, #48]	@ (8007fb0 <Min_Send_SAMPLERATE_GET+0x70>)
 8007f80:	2002      	movs	r0, #2
 8007f82:	f000 fa77 	bl	8008474 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout SAMPLERATE_GET_CMD");
        ClearPendingCommand();
    }
}
 8007f86:	e006      	b.n	8007f96 <Min_Send_SAMPLERATE_GET+0x56>
        SYSLOG_ERROR("Timeout SAMPLERATE_GET_CMD");
 8007f88:	2200      	movs	r2, #0
 8007f8a:	490a      	ldr	r1, [pc, #40]	@ (8007fb4 <Min_Send_SAMPLERATE_GET+0x74>)
 8007f8c:	2004      	movs	r0, #4
 8007f8e:	f000 fa71 	bl	8008474 <syslog_log>
        ClearPendingCommand();
 8007f92:	f7ff fdd5 	bl	8007b40 <ClearPendingCommand>
}
 8007f96:	bf00      	nop
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	240193e4 	.word	0x240193e4
 8007fa4:	08025490 	.word	0x08025490
 8007fa8:	240195f8 	.word	0x240195f8
 8007fac:	240195f4 	.word	0x240195f4
 8007fb0:	08025450 	.word	0x08025450
 8007fb4:	08025474 	.word	0x08025474

08007fb8 <Min_Send_COLLECT_PACKAGE>:

void Min_Send_COLLECT_PACKAGE(void) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
    MIN_Send(&OBC_MinCtx, COLLECT_PACKAGE_CMD, NULL, 0);
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	211a      	movs	r1, #26
 8007fc4:	4814      	ldr	r0, [pc, #80]	@ (8008018 <Min_Send_COLLECT_PACKAGE+0x60>)
 8007fc6:	f00d fb13 	bl	80155f0 <MIN_Send>

    CommandInfo_t cmdInfo = {COLLECT_PACKAGE_CMD, COLLECT_PACKAGE_ACK};
 8007fca:	4b14      	ldr	r3, [pc, #80]	@ (800801c <Min_Send_COLLECT_PACKAGE+0x64>)
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	80bb      	strh	r3, [r7, #4]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007fd0:	4b13      	ldr	r3, [pc, #76]	@ (8008020 <Min_Send_COLLECT_PACKAGE+0x68>)
 8007fd2:	6818      	ldr	r0, [r3, #0]
 8007fd4:	1d39      	adds	r1, r7, #4
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fdc:	f008 fd56 	bl	8010a8c <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007fe0:	4b10      	ldr	r3, [pc, #64]	@ (8008024 <Min_Send_COLLECT_PACKAGE+0x6c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f008 fff3 	bl	8010fd4 <xQueueSemaphoreTake>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d105      	bne.n	8008000 <Min_Send_COLLECT_PACKAGE+0x48>
        SYSLOG_NOTICE("Response OK - COLLECT_PACKAGE_CMD");
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	490c      	ldr	r1, [pc, #48]	@ (8008028 <Min_Send_COLLECT_PACKAGE+0x70>)
 8007ff8:	2002      	movs	r0, #2
 8007ffa:	f000 fa3b 	bl	8008474 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout COLLECT_PACKAGE_CMD");
        ClearPendingCommand();
    }
}
 8007ffe:	e006      	b.n	800800e <Min_Send_COLLECT_PACKAGE+0x56>
        SYSLOG_ERROR("Timeout COLLECT_PACKAGE_CMD");
 8008000:	2200      	movs	r2, #0
 8008002:	490a      	ldr	r1, [pc, #40]	@ (800802c <Min_Send_COLLECT_PACKAGE+0x74>)
 8008004:	2004      	movs	r0, #4
 8008006:	f000 fa35 	bl	8008474 <syslog_log>
        ClearPendingCommand();
 800800a:	f7ff fd99 	bl	8007b40 <ClearPendingCommand>
}
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	240193e4 	.word	0x240193e4
 800801c:	080254d4 	.word	0x080254d4
 8008020:	240195f8 	.word	0x240195f8
 8008024:	240195f4 	.word	0x240195f4
 8008028:	08025494 	.word	0x08025494
 800802c:	080254b8 	.word	0x080254b8

08008030 <LL_USART_IsActiveFlag_TC>:
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008040:	2b40      	cmp	r3, #64	@ 0x40
 8008042:	d101      	bne.n	8008048 <LL_USART_IsActiveFlag_TC+0x18>
 8008044:	2301      	movs	r3, #1
 8008046:	e000      	b.n	800804a <LL_USART_IsActiveFlag_TC+0x1a>
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008066:	2b80      	cmp	r3, #128	@ 0x80
 8008068:	d101      	bne.n	800806e <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 800806a:	2301      	movs	r3, #1
 800806c:	e000      	b.n	8008070 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <LL_USART_TransmitData8>:
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8008088:	78fa      	ldrb	r2, [r7, #3]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
	...

0800809c <syslog_level_to_str>:
#include "Dmesg/dmesg.h"

static USART_TypeDef* syslog_uarts[SYSLOG_OUTPUT_UART_COUNT] = SYSLOG_OUTPUT_UARTS;

static const char* syslog_level_to_str(syslog_level_t level)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	71fb      	strb	r3, [r7, #7]
    switch(level) {
 80080a6:	79fb      	ldrb	r3, [r7, #7]
 80080a8:	2b05      	cmp	r3, #5
 80080aa:	d81b      	bhi.n	80080e4 <syslog_level_to_str+0x48>
 80080ac:	a201      	add	r2, pc, #4	@ (adr r2, 80080b4 <syslog_level_to_str+0x18>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080cd 	.word	0x080080cd
 80080b8:	080080d1 	.word	0x080080d1
 80080bc:	080080d5 	.word	0x080080d5
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080dd 	.word	0x080080dd
 80080c8:	080080e1 	.word	0x080080e1
        case LOG_INFOR:  return "[INFO]  ";
 80080cc:	4b09      	ldr	r3, [pc, #36]	@ (80080f4 <syslog_level_to_str+0x58>)
 80080ce:	e00a      	b.n	80080e6 <syslog_level_to_str+0x4a>
        case LOG_DEBUG:  return "[DEBUG] ";
 80080d0:	4b09      	ldr	r3, [pc, #36]	@ (80080f8 <syslog_level_to_str+0x5c>)
 80080d2:	e008      	b.n	80080e6 <syslog_level_to_str+0x4a>
        case LOG_NOTICE: return "[NOTICE]";
 80080d4:	4b09      	ldr	r3, [pc, #36]	@ (80080fc <syslog_level_to_str+0x60>)
 80080d6:	e006      	b.n	80080e6 <syslog_level_to_str+0x4a>
        case LOG_WARN:   return "[WARN]  ";
 80080d8:	4b09      	ldr	r3, [pc, #36]	@ (8008100 <syslog_level_to_str+0x64>)
 80080da:	e004      	b.n	80080e6 <syslog_level_to_str+0x4a>
        case LOG_ERROR:  return "[ERROR] ";
 80080dc:	4b09      	ldr	r3, [pc, #36]	@ (8008104 <syslog_level_to_str+0x68>)
 80080de:	e002      	b.n	80080e6 <syslog_level_to_str+0x4a>
        case LOG_FATAL:  return "[FATAL] ";
 80080e0:	4b09      	ldr	r3, [pc, #36]	@ (8008108 <syslog_level_to_str+0x6c>)
 80080e2:	e000      	b.n	80080e6 <syslog_level_to_str+0x4a>
        default:         return "[UNK]   ";
 80080e4:	4b09      	ldr	r3, [pc, #36]	@ (800810c <syslog_level_to_str+0x70>)
    }
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	080254d8 	.word	0x080254d8
 80080f8:	080254e4 	.word	0x080254e4
 80080fc:	080254f0 	.word	0x080254f0
 8008100:	080254fc 	.word	0x080254fc
 8008104:	08025508 	.word	0x08025508
 8008108:	08025514 	.word	0x08025514
 800810c:	08025520 	.word	0x08025520

08008110 <Sys_Boardcast>:

void Sys_Boardcast(bool status, syslog_level_t level, const char *msg)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b0a8      	sub	sp, #160	@ 0xa0
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	603a      	str	r2, [r7, #0]
 800811a:	71fb      	strb	r3, [r7, #7]
 800811c:	460b      	mov	r3, r1
 800811e:	71bb      	strb	r3, [r7, #6]
    switch(level) {
 8008120:	79bb      	ldrb	r3, [r7, #6]
 8008122:	2b05      	cmp	r3, #5
 8008124:	f200 80ee 	bhi.w	8008304 <Sys_Boardcast+0x1f4>
 8008128:	a201      	add	r2, pc, #4	@ (adr r2, 8008130 <Sys_Boardcast+0x20>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008149 	.word	0x08008149
 8008134:	08008149 	.word	0x08008149
 8008138:	08008149 	.word	0x08008149
 800813c:	08008149 	.word	0x08008149
 8008140:	08008149 	.word	0x08008149
 8008144:	08008149 	.word	0x08008149
        case LOG_INFOR:  if (!LOG_INFOR_ENABLED)  return; break;
 8008148:	bf00      	nop
    }

    char log_buffer[128];
    int offset;

    offset = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    const char* status_str = status ? "[ ER ] " : "[ OK ] ";
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <Sys_Boardcast+0x4a>
 8008156:	4b6d      	ldr	r3, [pc, #436]	@ (800830c <Sys_Boardcast+0x1fc>)
 8008158:	e000      	b.n	800815c <Sys_Boardcast+0x4c>
 800815a:	4b6d      	ldr	r3, [pc, #436]	@ (8008310 <Sys_Boardcast+0x200>)
 800815c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s", status_str);
 8008160:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008164:	f107 020c 	add.w	r2, r7, #12
 8008168:	18d0      	adds	r0, r2, r3
 800816a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800816e:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 8008172:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008176:	4a67      	ldr	r2, [pc, #412]	@ (8008314 <Sys_Boardcast+0x204>)
 8008178:	f019 fec4 	bl	8021f04 <sniprintf>
 800817c:	4602      	mov	r2, r0
 800817e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008182:	4413      	add	r3, r2
 8008184:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    const char* level_str = syslog_level_to_str(level);
 8008188:	79bb      	ldrb	r3, [r7, #6]
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff ff86 	bl	800809c <syslog_level_to_str>
 8008190:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s->[OBC-STM32] ", level_str);
 8008194:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008198:	f107 020c 	add.w	r2, r7, #12
 800819c:	18d0      	adds	r0, r2, r3
 800819e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081a2:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80081a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081aa:	4a5b      	ldr	r2, [pc, #364]	@ (8008318 <Sys_Boardcast+0x208>)
 80081ac:	f019 feaa 	bl	8021f04 <sniprintf>
 80081b0:	4602      	mov	r2, r0
 80081b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081b6:	4413      	add	r3, r2
 80081b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "\"%s\"\r\n", msg);
 80081bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081c0:	f107 020c 	add.w	r2, r7, #12
 80081c4:	18d0      	adds	r0, r2, r3
 80081c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081ca:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	4a52      	ldr	r2, [pc, #328]	@ (800831c <Sys_Boardcast+0x20c>)
 80081d2:	f019 fe97 	bl	8021f04 <sniprintf>
 80081d6:	4602      	mov	r2, r0
 80081d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081dc:	4413      	add	r3, r2
 80081de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 80081e2:	2300      	movs	r3, #0
 80081e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081e8:	e015      	b.n	8008216 <Sys_Boardcast+0x106>
    {
        while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 80081ea:	bf00      	nop
 80081ec:	484c      	ldr	r0, [pc, #304]	@ (8008320 <Sys_Boardcast+0x210>)
 80081ee:	f7ff ff32 	bl	8008056 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0f9      	beq.n	80081ec <Sys_Boardcast+0xdc>
        LL_USART_TransmitData8(UART_DEBUG, (uint8_t)log_buffer[i]);
 80081f8:	f107 020c 	add.w	r2, r7, #12
 80081fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008200:	4413      	add	r3, r2
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	4619      	mov	r1, r3
 8008206:	4846      	ldr	r0, [pc, #280]	@ (8008320 <Sys_Boardcast+0x210>)
 8008208:	f7ff ff38 	bl	800807c <LL_USART_TransmitData8>
    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 800820c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008210:	3301      	adds	r3, #1
 8008212:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008216:	f107 020c 	add.w	r2, r7, #12
 800821a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800821e:	4413      	add	r3, r2
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e1      	bne.n	80081ea <Sys_Boardcast+0xda>
    }
    while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 8008226:	bf00      	nop
 8008228:	483d      	ldr	r0, [pc, #244]	@ (8008320 <Sys_Boardcast+0x210>)
 800822a:	f7ff ff01 	bl	8008030 <LL_USART_IsActiveFlag_TC>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d0f9      	beq.n	8008228 <Sys_Boardcast+0x118>

    offset = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s", status_str);
 800823a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800823e:	f107 020c 	add.w	r2, r7, #12
 8008242:	18d0      	adds	r0, r2, r3
 8008244:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008248:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800824c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008250:	4a30      	ldr	r2, [pc, #192]	@ (8008314 <Sys_Boardcast+0x204>)
 8008252:	f019 fe57 	bl	8021f04 <sniprintf>
 8008256:	4602      	mov	r2, r0
 8008258:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800825c:	4413      	add	r3, r2
 800825e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s->[USB-STM32] ", level_str);
 8008262:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008266:	f107 020c 	add.w	r2, r7, #12
 800826a:	18d0      	adds	r0, r2, r3
 800826c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008270:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 8008274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008278:	4a2a      	ldr	r2, [pc, #168]	@ (8008324 <Sys_Boardcast+0x214>)
 800827a:	f019 fe43 	bl	8021f04 <sniprintf>
 800827e:	4602      	mov	r2, r0
 8008280:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008284:	4413      	add	r3, r2
 8008286:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "\"%s\"\r\n", msg);
 800828a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800828e:	f107 020c 	add.w	r2, r7, #12
 8008292:	18d0      	adds	r0, r2, r3
 8008294:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008298:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	4a1f      	ldr	r2, [pc, #124]	@ (800831c <Sys_Boardcast+0x20c>)
 80082a0:	f019 fe30 	bl	8021f04 <sniprintf>
 80082a4:	4602      	mov	r2, r0
 80082a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082aa:	4413      	add	r3, r2
 80082ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 80082b0:	2300      	movs	r3, #0
 80082b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082b6:	e015      	b.n	80082e4 <Sys_Boardcast+0x1d4>
    {
        while (!LL_USART_IsActiveFlag_TXE(UART_USB));
 80082b8:	bf00      	nop
 80082ba:	481b      	ldr	r0, [pc, #108]	@ (8008328 <Sys_Boardcast+0x218>)
 80082bc:	f7ff fecb 	bl	8008056 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0f9      	beq.n	80082ba <Sys_Boardcast+0x1aa>
        LL_USART_TransmitData8(UART_USB, (uint8_t)log_buffer[i]);
 80082c6:	f107 020c 	add.w	r2, r7, #12
 80082ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082ce:	4413      	add	r3, r2
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	4619      	mov	r1, r3
 80082d4:	4814      	ldr	r0, [pc, #80]	@ (8008328 <Sys_Boardcast+0x218>)
 80082d6:	f7ff fed1 	bl	800807c <LL_USART_TransmitData8>
    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 80082da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082de:	3301      	adds	r3, #1
 80082e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082e4:	f107 020c 	add.w	r2, r7, #12
 80082e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082ec:	4413      	add	r3, r2
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e1      	bne.n	80082b8 <Sys_Boardcast+0x1a8>
    }
    while (!LL_USART_IsActiveFlag_TC(UART_USB));
 80082f4:	bf00      	nop
 80082f6:	480c      	ldr	r0, [pc, #48]	@ (8008328 <Sys_Boardcast+0x218>)
 80082f8:	f7ff fe9a 	bl	8008030 <LL_USART_IsActiveFlag_TC>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0f9      	beq.n	80082f6 <Sys_Boardcast+0x1e6>
 8008302:	e000      	b.n	8008306 <Sys_Boardcast+0x1f6>
        default:         return; // unknown level
 8008304:	bf00      	nop
}
 8008306:	37a0      	adds	r7, #160	@ 0xa0
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	0802552c 	.word	0x0802552c
 8008310:	08025534 	.word	0x08025534
 8008314:	0802553c 	.word	0x0802553c
 8008318:	08025540 	.word	0x08025540
 800831c:	08025554 	.word	0x08025554
 8008320:	40004400 	.word	0x40004400
 8008324:	0802555c 	.word	0x0802555c
 8008328:	40011000 	.word	0x40011000

0800832c <Sys_Debugcast>:

void Sys_Debugcast(bool status, syslog_level_t level, const char *msg)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b0a6      	sub	sp, #152	@ 0x98
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	603a      	str	r2, [r7, #0]
 8008336:	71fb      	strb	r3, [r7, #7]
 8008338:	460b      	mov	r3, r1
 800833a:	71bb      	strb	r3, [r7, #6]
    switch(level) {
 800833c:	79bb      	ldrb	r3, [r7, #6]
 800833e:	2b05      	cmp	r3, #5
 8008340:	f200 8087 	bhi.w	8008452 <Sys_Debugcast+0x126>
 8008344:	a201      	add	r2, pc, #4	@ (adr r2, 800834c <Sys_Debugcast+0x20>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	08008365 	.word	0x08008365
 8008350:	08008365 	.word	0x08008365
 8008354:	08008365 	.word	0x08008365
 8008358:	08008365 	.word	0x08008365
 800835c:	08008365 	.word	0x08008365
 8008360:	08008365 	.word	0x08008365
        case LOG_INFOR:  if (!LOG_INFOR_ENABLED)  return; break;
 8008364:	bf00      	nop
    }

    char log_buffer[128];
    int offset;

    offset = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    const char* status_str = status ? "[ ER ] " : "[ OK ] ";
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <Sys_Debugcast+0x4a>
 8008372:	4b3a      	ldr	r3, [pc, #232]	@ (800845c <Sys_Debugcast+0x130>)
 8008374:	e000      	b.n	8008378 <Sys_Debugcast+0x4c>
 8008376:	4b3a      	ldr	r3, [pc, #232]	@ (8008460 <Sys_Debugcast+0x134>)
 8008378:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s", status_str);
 800837c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008380:	f107 0208 	add.w	r2, r7, #8
 8008384:	18d0      	adds	r0, r2, r3
 8008386:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800838a:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800838e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008392:	4a34      	ldr	r2, [pc, #208]	@ (8008464 <Sys_Debugcast+0x138>)
 8008394:	f019 fdb6 	bl	8021f04 <sniprintf>
 8008398:	4602      	mov	r2, r0
 800839a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800839e:	4413      	add	r3, r2
 80083a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    const char* level_str = syslog_level_to_str(level);
 80083a4:	79bb      	ldrb	r3, [r7, #6]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff fe78 	bl	800809c <syslog_level_to_str>
 80083ac:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s->[OBC-STM32] ", level_str);
 80083b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083b4:	f107 0208 	add.w	r2, r7, #8
 80083b8:	18d0      	adds	r0, r2, r3
 80083ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083be:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80083c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083c6:	4a28      	ldr	r2, [pc, #160]	@ (8008468 <Sys_Debugcast+0x13c>)
 80083c8:	f019 fd9c 	bl	8021f04 <sniprintf>
 80083cc:	4602      	mov	r2, r0
 80083ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083d2:	4413      	add	r3, r2
 80083d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "\"%s\"\r\n", msg);
 80083d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083dc:	f107 0208 	add.w	r2, r7, #8
 80083e0:	18d0      	adds	r0, r2, r3
 80083e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083e6:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	4a1f      	ldr	r2, [pc, #124]	@ (800846c <Sys_Debugcast+0x140>)
 80083ee:	f019 fd89 	bl	8021f04 <sniprintf>
 80083f2:	4602      	mov	r2, r0
 80083f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083f8:	4413      	add	r3, r2
 80083fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 80083fe:	2300      	movs	r3, #0
 8008400:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008404:	e015      	b.n	8008432 <Sys_Debugcast+0x106>
    {
        while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 8008406:	bf00      	nop
 8008408:	4819      	ldr	r0, [pc, #100]	@ (8008470 <Sys_Debugcast+0x144>)
 800840a:	f7ff fe24 	bl	8008056 <LL_USART_IsActiveFlag_TXE_TXFNF>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f9      	beq.n	8008408 <Sys_Debugcast+0xdc>
        LL_USART_TransmitData8(UART_DEBUG, (uint8_t)log_buffer[i]);
 8008414:	f107 0208 	add.w	r2, r7, #8
 8008418:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800841c:	4413      	add	r3, r2
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	4619      	mov	r1, r3
 8008422:	4813      	ldr	r0, [pc, #76]	@ (8008470 <Sys_Debugcast+0x144>)
 8008424:	f7ff fe2a 	bl	800807c <LL_USART_TransmitData8>
    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 8008428:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800842c:	3301      	adds	r3, #1
 800842e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008432:	f107 0208 	add.w	r2, r7, #8
 8008436:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800843a:	4413      	add	r3, r2
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e1      	bne.n	8008406 <Sys_Debugcast+0xda>
    }
    while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 8008442:	bf00      	nop
 8008444:	480a      	ldr	r0, [pc, #40]	@ (8008470 <Sys_Debugcast+0x144>)
 8008446:	f7ff fdf3 	bl	8008030 <LL_USART_IsActiveFlag_TC>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0f9      	beq.n	8008444 <Sys_Debugcast+0x118>
 8008450:	e000      	b.n	8008454 <Sys_Debugcast+0x128>
        default:         return; // unknown level
 8008452:	bf00      	nop
}
 8008454:	3798      	adds	r7, #152	@ 0x98
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	0802552c 	.word	0x0802552c
 8008460:	08025534 	.word	0x08025534
 8008464:	0802553c 	.word	0x0802553c
 8008468:	08025540 	.word	0x08025540
 800846c:	08025554 	.word	0x08025554
 8008470:	40004400 	.word	0x40004400

08008474 <syslog_log>:
 * - Finally, it appends the message content enclosed in quotes, followed by a newline.
 * Example output:
 *    2024-02-22 23:40:03 0:05:03 [NOTICE] [OBC-STM32] "Start up"
 */
void syslog_log(syslog_level_t level, const char *msg, int use_polling)
{
 8008474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008476:	b0af      	sub	sp, #188	@ 0xbc
 8008478:	af06      	add	r7, sp, #24
 800847a:	4603      	mov	r3, r0
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	73fb      	strb	r3, [r7, #15]
    char log_buffer[128];
    int offset = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

#if SYSLOG_USE_RTC
    s_DateTime rtc;
    Utils_GetRTC(&rtc);
 8008488:	f107 0314 	add.w	r3, r7, #20
 800848c:	4618      	mov	r0, r3
 800848e:	f001 fedd 	bl	800a24c <Utils_GetRTC>
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 8008492:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008496:	f107 021c 	add.w	r2, r7, #28
 800849a:	18d0      	adds	r0, r2, r3
 800849c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084a0:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
                "20%02d-%02d-%02d %02d:%02d:%02d ",
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 80084a4:	7dbb      	ldrb	r3, [r7, #22]
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 80084a6:	469c      	mov	ip, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 80084a8:	7d7b      	ldrb	r3, [r7, #21]
 80084aa:	7d3a      	ldrb	r2, [r7, #20]
 80084ac:	7dfc      	ldrb	r4, [r7, #23]
 80084ae:	7e3d      	ldrb	r5, [r7, #24]
 80084b0:	7e7e      	ldrb	r6, [r7, #25]
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 80084b2:	9604      	str	r6, [sp, #16]
 80084b4:	9503      	str	r5, [sp, #12]
 80084b6:	9402      	str	r4, [sp, #8]
 80084b8:	9201      	str	r2, [sp, #4]
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	4663      	mov	r3, ip
 80084be:	4a45      	ldr	r2, [pc, #276]	@ (80085d4 <syslog_log+0x160>)
 80084c0:	f019 fd20 	bl	8021f04 <sniprintf>
 80084c4:	4602      	mov	r2, r0
 80084c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084ca:	4413      	add	r3, r2
 80084cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
#endif

#if SYSLOG_USE_WORKING_TIME
    uint8_t hours = 0, minutes = 0, seconds = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	74fb      	strb	r3, [r7, #19]
 80084d4:	2300      	movs	r3, #0
 80084d6:	74bb      	strb	r3, [r7, #18]
 80084d8:	2300      	movs	r3, #0
 80084da:	747b      	strb	r3, [r7, #17]
    Utils_GetWorkingTime(NULL, &hours, &minutes, &seconds);
 80084dc:	f107 0311 	add.w	r3, r7, #17
 80084e0:	f107 0212 	add.w	r2, r7, #18
 80084e4:	f107 0113 	add.w	r1, r7, #19
 80084e8:	2000      	movs	r0, #0
 80084ea:	f001 ff09 	bl	800a300 <Utils_GetWorkingTime>
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 80084ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084f2:	f107 021c 	add.w	r2, r7, #28
 80084f6:	18d0      	adds	r0, r2, r3
 80084f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084fc:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 8008500:	7cfb      	ldrb	r3, [r7, #19]
 8008502:	461c      	mov	r4, r3
 8008504:	7cbb      	ldrb	r3, [r7, #18]
 8008506:	7c7a      	ldrb	r2, [r7, #17]
 8008508:	9201      	str	r2, [sp, #4]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	4623      	mov	r3, r4
 800850e:	4a32      	ldr	r2, [pc, #200]	@ (80085d8 <syslog_log+0x164>)
 8008510:	f019 fcf8 	bl	8021f04 <sniprintf>
 8008514:	4602      	mov	r2, r0
 8008516:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800851a:	4413      	add	r3, r2
 800851c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    "%02u:%02u:%02u ",
                    hours, minutes, seconds);
#endif

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 8008520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008524:	f107 021c 	add.w	r2, r7, #28
 8008528:	18d4      	adds	r4, r2, r3
 800852a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800852e:	f1c3 0580 	rsb	r5, r3, #128	@ 0x80
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff fdb1 	bl	800809c <syslog_level_to_str>
 800853a:	4603      	mov	r3, r0
 800853c:	4a27      	ldr	r2, [pc, #156]	@ (80085dc <syslog_log+0x168>)
 800853e:	4629      	mov	r1, r5
 8008540:	4620      	mov	r0, r4
 8008542:	f019 fcdf 	bl	8021f04 <sniprintf>
 8008546:	4602      	mov	r2, r0
 8008548:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800854c:	4413      	add	r3, r2
 800854e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                "%s ", syslog_level_to_str(level));

#ifdef SYSLOG_SOURCE
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 8008552:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008556:	f107 021c 	add.w	r2, r7, #28
 800855a:	18d0      	adds	r0, r2, r3
 800855c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008560:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 8008564:	4b1e      	ldr	r3, [pc, #120]	@ (80085e0 <syslog_log+0x16c>)
 8008566:	4a1f      	ldr	r2, [pc, #124]	@ (80085e4 <syslog_log+0x170>)
 8008568:	f019 fccc 	bl	8021f04 <sniprintf>
 800856c:	4602      	mov	r2, r0
 800856e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008572:	4413      	add	r3, r2
 8008574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                "[%s] ", SYSLOG_SOURCE);
#endif

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 8008578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800857c:	f107 021c 	add.w	r2, r7, #28
 8008580:	18d0      	adds	r0, r2, r3
 8008582:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008586:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	4a16      	ldr	r2, [pc, #88]	@ (80085e8 <syslog_log+0x174>)
 800858e:	f019 fcb9 	bl	8021f04 <sniprintf>
 8008592:	4602      	mov	r2, r0
 8008594:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008598:	4413      	add	r3, r2
 800859a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                "\"%s", msg);

#ifdef DEBUG_USE_UART
        if (use_polling) {
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00e      	beq.n	80085c2 <syslog_log+0x14e>
            UART_Driver_Polling_SendString(syslog_uarts[0], log_buffer);
 80085a4:	4b11      	ldr	r3, [pc, #68]	@ (80085ec <syslog_log+0x178>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f107 021c 	add.w	r2, r7, #28
 80085ac:	4611      	mov	r1, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fa fa38 	bl	8002a24 <UART_Driver_Polling_SendString>
            UART_Driver_Polling_SendString(syslog_uarts[0], "\r\n");
 80085b4:	4b0d      	ldr	r3, [pc, #52]	@ (80085ec <syslog_log+0x178>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	490d      	ldr	r1, [pc, #52]	@ (80085f0 <syslog_log+0x17c>)
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fa fa32 	bl	8002a24 <UART_Driver_Polling_SendString>
        } else {
            Dmesg_SafeWrite(log_buffer);
        }
#endif
}
 80085c0:	e004      	b.n	80085cc <syslog_log+0x158>
            Dmesg_SafeWrite(log_buffer);
 80085c2:	f107 031c 	add.w	r3, r7, #28
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe fd0a 	bl	8006fe0 <Dmesg_SafeWrite>
}
 80085cc:	bf00      	nop
 80085ce:	37a4      	adds	r7, #164	@ 0xa4
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d4:	08025570 	.word	0x08025570
 80085d8:	08025594 	.word	0x08025594
 80085dc:	080255a4 	.word	0x080255a4
 80085e0:	080255a8 	.word	0x080255a8
 80085e4:	080255ac 	.word	0x080255ac
 80085e8:	080255b4 	.word	0x080255b4
 80085ec:	240148c4 	.word	0x240148c4
 80085f0:	080255b8 	.word	0x080255b8

080085f4 <syslog_level_to_str>:

//static USART_TypeDef* syslog_uarts[SYSLOG_OUTPUT_UART_COUNT] = SYSLOG_OUTPUT_UARTS;
//static const int syslog_uart_count = sizeof(syslog_uarts) / sizeof(syslog_uarts[0]);

static const char* syslog_level_to_str(syslog_level_t level)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	71fb      	strb	r3, [r7, #7]
    switch(level) {
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	2b05      	cmp	r3, #5
 8008602:	d81b      	bhi.n	800863c <syslog_level_to_str+0x48>
 8008604:	a201      	add	r2, pc, #4	@ (adr r2, 800860c <syslog_level_to_str+0x18>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	08008625 	.word	0x08008625
 8008610:	08008629 	.word	0x08008629
 8008614:	0800862d 	.word	0x0800862d
 8008618:	08008631 	.word	0x08008631
 800861c:	08008635 	.word	0x08008635
 8008620:	08008639 	.word	0x08008639
        case LOG_INFOR:  return "[INFO]  ";
 8008624:	4b09      	ldr	r3, [pc, #36]	@ (800864c <syslog_level_to_str+0x58>)
 8008626:	e00a      	b.n	800863e <syslog_level_to_str+0x4a>
        case LOG_DEBUG:  return "[DEBUG] ";
 8008628:	4b09      	ldr	r3, [pc, #36]	@ (8008650 <syslog_level_to_str+0x5c>)
 800862a:	e008      	b.n	800863e <syslog_level_to_str+0x4a>
        case LOG_NOTICE: return "[NOTICE]";
 800862c:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <syslog_level_to_str+0x60>)
 800862e:	e006      	b.n	800863e <syslog_level_to_str+0x4a>
        case LOG_WARN:   return "[WARN]  ";
 8008630:	4b09      	ldr	r3, [pc, #36]	@ (8008658 <syslog_level_to_str+0x64>)
 8008632:	e004      	b.n	800863e <syslog_level_to_str+0x4a>
        case LOG_ERROR:  return "[ERROR] ";
 8008634:	4b09      	ldr	r3, [pc, #36]	@ (800865c <syslog_level_to_str+0x68>)
 8008636:	e002      	b.n	800863e <syslog_level_to_str+0x4a>
        case LOG_FATAL:  return "[FATAL] ";
 8008638:	4b09      	ldr	r3, [pc, #36]	@ (8008660 <syslog_level_to_str+0x6c>)
 800863a:	e000      	b.n	800863e <syslog_level_to_str+0x4a>
        default:         return "[UNK]   ";
 800863c:	4b09      	ldr	r3, [pc, #36]	@ (8008664 <syslog_level_to_str+0x70>)
    }
}
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	080255bc 	.word	0x080255bc
 8008650:	080255c8 	.word	0x080255c8
 8008654:	080255d4 	.word	0x080255d4
 8008658:	080255e0 	.word	0x080255e0
 800865c:	080255ec 	.word	0x080255ec
 8008660:	080255f8 	.word	0x080255f8
 8008664:	08025604 	.word	0x08025604

08008668 <SysLogQueue_Init>:

void SysLogQueue_Init(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
    syslogQueue = xQueueCreate(SYSLOG_QUEUE_SLOT, sizeof(syslog_msg_t));
 800866c:	2200      	movs	r2, #0
 800866e:	2141      	movs	r1, #65	@ 0x41
 8008670:	2010      	movs	r0, #16
 8008672:	f008 f960 	bl	8010936 <xQueueGenericCreate>
 8008676:	4603      	mov	r3, r0
 8008678:	4a01      	ldr	r2, [pc, #4]	@ (8008680 <SysLogQueue_Init+0x18>)
 800867a:	6013      	str	r3, [r2, #0]
}
 800867c:	bf00      	nop
 800867e:	bd80      	pop	{r7, pc}
 8008680:	240195fc 	.word	0x240195fc

08008684 <SysLog_Task>:
        xQueueSend(syslogQueue, &logMsg, 0);
    }
}

void SysLog_Task(void *parameters)
{
 8008684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008686:	b0bf      	sub	sp, #252	@ 0xfc
 8008688:	af06      	add	r7, sp, #24
 800868a:	6078      	str	r0, [r7, #4]
    syslog_msg_t logMsg;
    char outputBuffer[SYSLOG_OUTPUT_BUFFER_SIZE];
    for(;;)
    {
        if(xQueueReceive(syslogQueue, &logMsg, portMAX_DELAY) == pdTRUE)
 800868c:	4b65      	ldr	r3, [pc, #404]	@ (8008824 <SysLog_Task+0x1a0>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8008694:	f04f 32ff 	mov.w	r2, #4294967295
 8008698:	4618      	mov	r0, r3
 800869a:	f008 fbb3 	bl	8010e04 <xQueueReceive>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d1f3      	bne.n	800868c <SysLog_Task+0x8>
        {
            int offset = 0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  #if SYSLOG_USE_RTC
            s_DateTime rtc;
            Utils_GetRTC(&rtc);
 80086aa:	f107 0310 	add.w	r3, r7, #16
 80086ae:	4618      	mov	r0, r3
 80086b0:	f001 fdcc 	bl	800a24c <Utils_GetRTC>
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 80086b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086b8:	f107 0218 	add.w	r2, r7, #24
 80086bc:	18d0      	adds	r0, r2, r3
 80086be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086c2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80086c6:	461e      	mov	r6, r3
                               "20%02d-%02d-%02d %02d:%02d:%02d ",
                               rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 80086c8:	7cbb      	ldrb	r3, [r7, #18]
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 80086ca:	469c      	mov	ip, r3
                               rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 80086cc:	7c7b      	ldrb	r3, [r7, #17]
 80086ce:	7c3a      	ldrb	r2, [r7, #16]
 80086d0:	7cf9      	ldrb	r1, [r7, #19]
 80086d2:	7d3c      	ldrb	r4, [r7, #20]
 80086d4:	7d7d      	ldrb	r5, [r7, #21]
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 80086d6:	9504      	str	r5, [sp, #16]
 80086d8:	9403      	str	r4, [sp, #12]
 80086da:	9102      	str	r1, [sp, #8]
 80086dc:	9201      	str	r2, [sp, #4]
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	4663      	mov	r3, ip
 80086e2:	4a51      	ldr	r2, [pc, #324]	@ (8008828 <SysLog_Task+0x1a4>)
 80086e4:	4631      	mov	r1, r6
 80086e6:	f019 fc0d 	bl	8021f04 <sniprintf>
 80086ea:	4602      	mov	r2, r0
 80086ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086f0:	4413      	add	r3, r2
 80086f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  #endif

  #if SYSLOG_USE_WORKING_TIME
            uint32_t days = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
            uint8_t hours = 0, minutes = 0, seconds = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	72fb      	strb	r3, [r7, #11]
 80086fe:	2300      	movs	r3, #0
 8008700:	72bb      	strb	r3, [r7, #10]
 8008702:	2300      	movs	r3, #0
 8008704:	727b      	strb	r3, [r7, #9]
            Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 8008706:	f107 0309 	add.w	r3, r7, #9
 800870a:	f107 020a 	add.w	r2, r7, #10
 800870e:	f107 010b 	add.w	r1, r7, #11
 8008712:	f107 000c 	add.w	r0, r7, #12
 8008716:	f001 fdf3 	bl	800a300 <Utils_GetWorkingTime>
            if (days > 0)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01b      	beq.n	8008758 <SysLog_Task+0xd4>
            {
                offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 8008720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008724:	f107 0218 	add.w	r2, r7, #24
 8008728:	18d0      	adds	r0, r2, r3
 800872a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800872e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8008732:	461d      	mov	r5, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	7afa      	ldrb	r2, [r7, #11]
 8008738:	7ab9      	ldrb	r1, [r7, #10]
 800873a:	7a7c      	ldrb	r4, [r7, #9]
 800873c:	9402      	str	r4, [sp, #8]
 800873e:	9101      	str	r1, [sp, #4]
 8008740:	9200      	str	r2, [sp, #0]
 8008742:	4a3a      	ldr	r2, [pc, #232]	@ (800882c <SysLog_Task+0x1a8>)
 8008744:	4629      	mov	r1, r5
 8008746:	f019 fbdd 	bl	8021f04 <sniprintf>
 800874a:	4602      	mov	r2, r0
 800874c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008750:	4413      	add	r3, r2
 8008752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008756:	e019      	b.n	800878c <SysLog_Task+0x108>
                                   "%lu+%02u:%02u:%02u ",
                                   days, hours, minutes, seconds);
            }
            else
            {
                offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 8008758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800875c:	f107 0218 	add.w	r2, r7, #24
 8008760:	18d0      	adds	r0, r2, r3
 8008762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008766:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800876a:	4619      	mov	r1, r3
 800876c:	7afb      	ldrb	r3, [r7, #11]
 800876e:	461c      	mov	r4, r3
 8008770:	7abb      	ldrb	r3, [r7, #10]
 8008772:	7a7a      	ldrb	r2, [r7, #9]
 8008774:	9201      	str	r2, [sp, #4]
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	4623      	mov	r3, r4
 800877a:	4a2d      	ldr	r2, [pc, #180]	@ (8008830 <SysLog_Task+0x1ac>)
 800877c:	f019 fbc2 	bl	8021f04 <sniprintf>
 8008780:	4602      	mov	r2, r0
 8008782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008786:	4413      	add	r3, r2
 8008788:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                                   "%02u:%02u:%02u ",
                                   hours, minutes, seconds);
            }
  #endif

            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 800878c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008790:	f107 0218 	add.w	r2, r7, #24
 8008794:	18d4      	adds	r4, r2, r3
 8008796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800879a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800879e:	461d      	mov	r5, r3
 80087a0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff ff25 	bl	80085f4 <syslog_level_to_str>
 80087aa:	4603      	mov	r3, r0
 80087ac:	4a21      	ldr	r2, [pc, #132]	@ (8008834 <SysLog_Task+0x1b0>)
 80087ae:	4629      	mov	r1, r5
 80087b0:	4620      	mov	r0, r4
 80087b2:	f019 fba7 	bl	8021f04 <sniprintf>
 80087b6:	4602      	mov	r2, r0
 80087b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087bc:	4413      	add	r3, r2
 80087be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                               "%s ", syslog_level_to_str(logMsg.level));

  #ifdef SYSLOG_SOURCE
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 80087c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087c6:	f107 0218 	add.w	r2, r7, #24
 80087ca:	18d0      	adds	r0, r2, r3
 80087cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087d0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80087d4:	4619      	mov	r1, r3
 80087d6:	4b18      	ldr	r3, [pc, #96]	@ (8008838 <SysLog_Task+0x1b4>)
 80087d8:	4a18      	ldr	r2, [pc, #96]	@ (800883c <SysLog_Task+0x1b8>)
 80087da:	f019 fb93 	bl	8021f04 <sniprintf>
 80087de:	4602      	mov	r2, r0
 80087e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087e4:	4413      	add	r3, r2
 80087e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                               "[%s] ", SYSLOG_SOURCE);
  #endif

            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 80087ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087ee:	f107 0218 	add.w	r2, r7, #24
 80087f2:	18d0      	adds	r0, r2, r3
 80087f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087f8:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80087fc:	4619      	mov	r1, r3
 80087fe:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008802:	3301      	adds	r3, #1
 8008804:	4a0e      	ldr	r2, [pc, #56]	@ (8008840 <SysLog_Task+0x1bc>)
 8008806:	f019 fb7d 	bl	8021f04 <sniprintf>
 800880a:	4602      	mov	r2, r0
 800880c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008810:	4413      	add	r3, r2
 8008812:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                               "\"%s", logMsg.msg);

  #ifdef DEBUG_USE_UART
            Dmesg_SafeWrite(outputBuffer);
 8008816:	f107 0318 	add.w	r3, r7, #24
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fbe0 	bl	8006fe0 <Dmesg_SafeWrite>
        if(xQueueReceive(syslogQueue, &logMsg, portMAX_DELAY) == pdTRUE)
 8008820:	e734      	b.n	800868c <SysLog_Task+0x8>
 8008822:	bf00      	nop
 8008824:	240195fc 	.word	0x240195fc
 8008828:	08025610 	.word	0x08025610
 800882c:	08025634 	.word	0x08025634
 8008830:	08025648 	.word	0x08025648
 8008834:	08025658 	.word	0x08025658
 8008838:	0802565c 	.word	0x0802565c
 800883c:	08025660 	.word	0x08025660
 8008840:	08025668 	.word	0x08025668

08008844 <bcd2dec>:
/************************************************
 *                   Helper                     *
 ************************************************/

static inline uint8_t bcd2dec(uint8_t bcd)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	091b      	lsrs	r3, r3, #4
 8008852:	b2db      	uxtb	r3, r3
 8008854:	461a      	mov	r2, r3
 8008856:	0092      	lsls	r2, r2, #2
 8008858:	4413      	add	r3, r2
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	b2da      	uxtb	r2, r3
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	b2db      	uxtb	r3, r3
 8008866:	4413      	add	r3, r2
 8008868:	b2db      	uxtb	r3, r3
}
 800886a:	4618      	mov	r0, r3
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
	...

08008878 <dec2bcd>:

static inline uint8_t dec2bcd(uint8_t dec)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	71fb      	strb	r3, [r7, #7]
    return ((dec / 10) << 4) | (dec % 10);
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	4a0e      	ldr	r2, [pc, #56]	@ (80088c0 <dec2bcd+0x48>)
 8008886:	fba2 2303 	umull	r2, r3, r2, r3
 800888a:	08db      	lsrs	r3, r3, #3
 800888c:	b2db      	uxtb	r3, r3
 800888e:	b25b      	sxtb	r3, r3
 8008890:	011b      	lsls	r3, r3, #4
 8008892:	b258      	sxtb	r0, r3
 8008894:	79fa      	ldrb	r2, [r7, #7]
 8008896:	4b0a      	ldr	r3, [pc, #40]	@ (80088c0 <dec2bcd+0x48>)
 8008898:	fba3 1302 	umull	r1, r3, r3, r2
 800889c:	08d9      	lsrs	r1, r3, #3
 800889e:	460b      	mov	r3, r1
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	b25b      	sxtb	r3, r3
 80088ac:	4303      	orrs	r3, r0
 80088ae:	b25b      	sxtb	r3, r3
 80088b0:	b2db      	uxtb	r3, r3
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	cccccccd 	.word	0xcccccccd

080088c4 <RV3129_Driver_Init>:


RV3129_HandleTypeDef* RV3129_Driver_Init(I2C_TypeDef *i2c_instance)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
    static LL_I2C_HandleTypeDef ll_i2c_handle;
    ll_i2c_handle.Instance = i2c_instance;
 80088cc:	4a0a      	ldr	r2, [pc, #40]	@ (80088f8 <RV3129_Driver_Init+0x34>)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6013      	str	r3, [r2, #0]
    ll_i2c_handle.State = I2C_STATE_READY;
 80088d2:	4b09      	ldr	r3, [pc, #36]	@ (80088f8 <RV3129_Driver_Init+0x34>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	729a      	strb	r2, [r3, #10]
    ll_i2c_handle.Process = I2C_DONE;
 80088d8:	4b07      	ldr	r3, [pc, #28]	@ (80088f8 <RV3129_Driver_Init+0x34>)
 80088da:	2210      	movs	r2, #16
 80088dc:	72da      	strb	r2, [r3, #11]

    hrtc_local.rtc_i2c = &ll_i2c_handle;
 80088de:	4b07      	ldr	r3, [pc, #28]	@ (80088fc <RV3129_Driver_Init+0x38>)
 80088e0:	4a05      	ldr	r2, [pc, #20]	@ (80088f8 <RV3129_Driver_Init+0x34>)
 80088e2:	601a      	str	r2, [r3, #0]
    hrtc_local.address = RV3129_ADDR;
 80088e4:	4b05      	ldr	r3, [pc, #20]	@ (80088fc <RV3129_Driver_Init+0x38>)
 80088e6:	2256      	movs	r2, #86	@ 0x56
 80088e8:	711a      	strb	r2, [r3, #4]

    return &hrtc_local;
 80088ea:	4b04      	ldr	r3, [pc, #16]	@ (80088fc <RV3129_Driver_Init+0x38>)
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	24019608 	.word	0x24019608
 80088fc:	24019600 	.word	0x24019600

08008900 <RV3129_GetHandle>:

RV3129_HandleTypeDef* RV3129_GetHandle(void)
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
    return &hrtc_local;
 8008904:	4b02      	ldr	r3, [pc, #8]	@ (8008910 <RV3129_GetHandle+0x10>)
}
 8008906:	4618      	mov	r0, r3
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	24019600 	.word	0x24019600

08008914 <RV3129_GetTime>:

Std_ReturnType RV3129_GetTime(RV3129_HandleTypeDef *hrtc, s_DateTime *datetime)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af02      	add	r7, sp, #8
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
    uint8_t buffer[7];
    Std_ReturnType status;

    status = I2C_Read(hrtc->rtc_i2c, hrtc->address, RV3129_SECONDS, buffer, 7);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	7919      	ldrb	r1, [r3, #4]
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	2207      	movs	r2, #7
 800892c:	9200      	str	r2, [sp, #0]
 800892e:	2208      	movs	r2, #8
 8008930:	f7f9 f846 	bl	80019c0 <I2C_Read>
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]
    if (status != E_OK)
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <RV3129_GetTime+0x2e>
    {
        return status;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	e030      	b.n	80089a4 <RV3129_GetTime+0x90>
    }

    datetime->second = bcd2dec(buffer[0]);
 8008942:	7a3b      	ldrb	r3, [r7, #8]
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff ff7d 	bl	8008844 <bcd2dec>
 800894a:	4603      	mov	r3, r0
 800894c:	461a      	mov	r2, r3
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	715a      	strb	r2, [r3, #5]
    datetime->minute = bcd2dec(buffer[1]);
 8008952:	7a7b      	ldrb	r3, [r7, #9]
 8008954:	4618      	mov	r0, r3
 8008956:	f7ff ff75 	bl	8008844 <bcd2dec>
 800895a:	4603      	mov	r3, r0
 800895c:	461a      	mov	r2, r3
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	711a      	strb	r2, [r3, #4]
    datetime->hour   = bcd2dec(buffer[2]);
 8008962:	7abb      	ldrb	r3, [r7, #10]
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff ff6d 	bl	8008844 <bcd2dec>
 800896a:	4603      	mov	r3, r0
 800896c:	461a      	mov	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	70da      	strb	r2, [r3, #3]
    datetime->day    = bcd2dec(buffer[3]);
 8008972:	7afb      	ldrb	r3, [r7, #11]
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff ff65 	bl	8008844 <bcd2dec>
 800897a:	4603      	mov	r3, r0
 800897c:	461a      	mov	r2, r3
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	701a      	strb	r2, [r3, #0]
    datetime->month  = bcd2dec(buffer[5]);
 8008982:	7b7b      	ldrb	r3, [r7, #13]
 8008984:	4618      	mov	r0, r3
 8008986:	f7ff ff5d 	bl	8008844 <bcd2dec>
 800898a:	4603      	mov	r3, r0
 800898c:	461a      	mov	r2, r3
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	705a      	strb	r2, [r3, #1]
    datetime->year   = bcd2dec(buffer[6]);
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff ff55 	bl	8008844 <bcd2dec>
 800899a:	4603      	mov	r3, r0
 800899c:	461a      	mov	r2, r3
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	709a      	strb	r2, [r3, #2]

    return E_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <RV3129_SetTime>:

Std_ReturnType RV3129_SetTime(RV3129_HandleTypeDef *hrtc, s_DateTime *datetime)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
    uint8_t buffer[7];

    buffer[0] = dec2bcd(datetime->second);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	795b      	ldrb	r3, [r3, #5]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff ff5c 	bl	8008878 <dec2bcd>
 80089c0:	4603      	mov	r3, r0
 80089c2:	723b      	strb	r3, [r7, #8]
    buffer[1] = dec2bcd(datetime->minute);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	791b      	ldrb	r3, [r3, #4]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7ff ff55 	bl	8008878 <dec2bcd>
 80089ce:	4603      	mov	r3, r0
 80089d0:	727b      	strb	r3, [r7, #9]
    buffer[2] = dec2bcd(datetime->hour);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	78db      	ldrb	r3, [r3, #3]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff ff4e 	bl	8008878 <dec2bcd>
 80089dc:	4603      	mov	r3, r0
 80089de:	72bb      	strb	r3, [r7, #10]
    buffer[3] = dec2bcd(datetime->day);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff ff47 	bl	8008878 <dec2bcd>
 80089ea:	4603      	mov	r3, r0
 80089ec:	72fb      	strb	r3, [r7, #11]
    buffer[4] = dec2bcd(1);
 80089ee:	2001      	movs	r0, #1
 80089f0:	f7ff ff42 	bl	8008878 <dec2bcd>
 80089f4:	4603      	mov	r3, r0
 80089f6:	733b      	strb	r3, [r7, #12]
    buffer[5] = dec2bcd(datetime->month);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	785b      	ldrb	r3, [r3, #1]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff ff3b 	bl	8008878 <dec2bcd>
 8008a02:	4603      	mov	r3, r0
 8008a04:	737b      	strb	r3, [r7, #13]
    buffer[6] = dec2bcd(datetime->year);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	789b      	ldrb	r3, [r3, #2]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff ff34 	bl	8008878 <dec2bcd>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73bb      	strb	r3, [r7, #14]

    return I2C_Write(hrtc->rtc_i2c, hrtc->address, RV3129_SECONDS, buffer, 7);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	7919      	ldrb	r1, [r3, #4]
 8008a1c:	f107 0308 	add.w	r3, r7, #8
 8008a20:	2207      	movs	r2, #7
 8008a22:	9200      	str	r2, [sp, #0]
 8008a24:	2208      	movs	r2, #8
 8008a26:	f7f8 ff13 	bl	8001850 <I2C_Write>
 8008a2a:	4603      	mov	r3, r0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <RV3129_GetTemp>:

Std_ReturnType RV3129_GetTemp(RV3129_HandleTypeDef *hrtc, int16_t *pTemp)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af02      	add	r7, sp, #8
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
    uint8_t temp;
    Std_ReturnType status;

    status = I2C_Read(hrtc->rtc_i2c, hrtc->address, RV3129_TEMP, &temp, 1);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6818      	ldr	r0, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	7919      	ldrb	r1, [r3, #4]
 8008a46:	f107 030e 	add.w	r3, r7, #14
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	9200      	str	r2, [sp, #0]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f7f8 ffb6 	bl	80019c0 <I2C_Read>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]
    if (status != E_OK)
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <RV3129_GetTemp+0x2e>
    {
        return status;
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	e007      	b.n	8008a72 <RV3129_GetTemp+0x3e>
    }
    *pTemp = (int8_t)(temp - OFFSET_TEMP);
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	3b3c      	subs	r3, #60	@ 0x3c
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	b25b      	sxtb	r3, r3
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	801a      	strh	r2, [r3, #0]
    return E_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <LL_GPIO_SetOutputPin>:
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b083      	sub	sp, #12
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	619a      	str	r2, [r3, #24]
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <LL_GPIO_ResetOutputPin>:
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	041a      	lsls	r2, r3, #16
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	619a      	str	r2, [r3, #24]
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <Watchdog_Device_Init>:
#include "wd_tpl5010.h"

static Watchdog_StateEnum currentState = WATCHDOG_STATE_LOW;

Std_ReturnType Watchdog_Device_Init(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
    currentState = WATCHDOG_STATE_LOW;
 8008ab8:	4b04      	ldr	r3, [pc, #16]	@ (8008acc <Watchdog_Device_Init+0x18>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	701a      	strb	r2, [r3, #0]
    LL_GPIO_ResetOutputPin(WD_Done_Port, WD_Done_Pin);
 8008abe:	2180      	movs	r1, #128	@ 0x80
 8008ac0:	4803      	ldr	r0, [pc, #12]	@ (8008ad0 <Watchdog_Device_Init+0x1c>)
 8008ac2:	f7ff ffe8 	bl	8008a96 <LL_GPIO_ResetOutputPin>
    return E_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	24019618 	.word	0x24019618
 8008ad0:	58020c00 	.word	0x58020c00

08008ad4 <Watchdog_Device_Update>:

void Watchdog_Device_Update(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
    if(currentState == WATCHDOG_STATE_LOW)
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b04 <Watchdog_Device_Update+0x30>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d107      	bne.n	8008af0 <Watchdog_Device_Update+0x1c>
    {
        currentState = WATCHDOG_STATE_HIGH;
 8008ae0:	4b08      	ldr	r3, [pc, #32]	@ (8008b04 <Watchdog_Device_Update+0x30>)
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(WD_Done_Port, WD_Done_Pin);
 8008ae6:	2180      	movs	r1, #128	@ 0x80
 8008ae8:	4807      	ldr	r0, [pc, #28]	@ (8008b08 <Watchdog_Device_Update+0x34>)
 8008aea:	f7ff ffc6 	bl	8008a7a <LL_GPIO_SetOutputPin>
    else
    {
        currentState = WATCHDOG_STATE_LOW;
        LL_GPIO_ResetOutputPin(WD_Done_Port, WD_Done_Pin);
    }
}
 8008aee:	e006      	b.n	8008afe <Watchdog_Device_Update+0x2a>
        currentState = WATCHDOG_STATE_LOW;
 8008af0:	4b04      	ldr	r3, [pc, #16]	@ (8008b04 <Watchdog_Device_Update+0x30>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(WD_Done_Port, WD_Done_Pin);
 8008af6:	2180      	movs	r1, #128	@ 0x80
 8008af8:	4803      	ldr	r0, [pc, #12]	@ (8008b08 <Watchdog_Device_Update+0x34>)
 8008afa:	f7ff ffcc 	bl	8008a96 <LL_GPIO_ResetOutputPin>
}
 8008afe:	bf00      	nop
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	24019618 	.word	0x24019618
 8008b08:	58020c00 	.word	0x58020c00

08008b0c <Watchdog_Device_GetState>:

Watchdog_StateEnum Watchdog_Device_GetState(void)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0
    return currentState;
 8008b10:	4b03      	ldr	r3, [pc, #12]	@ (8008b20 <Watchdog_Device_GetState+0x14>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	24019618 	.word	0x24019618

08008b24 <LL_GPIO_SetOutputPin>:
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	619a      	str	r2, [r3, #24]
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <LL_GPIO_ResetOutputPin>:
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	041a      	lsls	r2, r3, #16
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	619a      	str	r2, [r3, #24]
}
 8008b52:	bf00      	nop
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
	...

08008b60 <FRAM_SPI_GetHandle>:
#define FRAM_SLEEP  0xB9   // Sleep mode

static FRAM_SPI_HandleTypeDef hfram_instance;

FRAM_SPI_HandleTypeDef* FRAM_SPI_GetHandle(void)
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
    return &hfram_instance;
 8008b64:	4b02      	ldr	r3, [pc, #8]	@ (8008b70 <FRAM_SPI_GetHandle+0x10>)
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	2401961c 	.word	0x2401961c

08008b74 <FRAM_SPI_Driver_Init>:

void FRAM_SPI_Driver_Init(SPI_TypeDef *SPIx, GPIO_TypeDef *CS_Port, uint16_t CS_Pin)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	80fb      	strh	r3, [r7, #6]
    hfram_instance.SPIx = SPIx;
 8008b82:	4a09      	ldr	r2, [pc, #36]	@ (8008ba8 <FRAM_SPI_Driver_Init+0x34>)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6013      	str	r3, [r2, #0]
    hfram_instance.CS_Port = CS_Port;
 8008b88:	4a07      	ldr	r2, [pc, #28]	@ (8008ba8 <FRAM_SPI_Driver_Init+0x34>)
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6053      	str	r3, [r2, #4]
    hfram_instance.CS_Pin = CS_Pin;
 8008b8e:	4a06      	ldr	r2, [pc, #24]	@ (8008ba8 <FRAM_SPI_Driver_Init+0x34>)
 8008b90:	88fb      	ldrh	r3, [r7, #6]
 8008b92:	8113      	strh	r3, [r2, #8]

    LL_GPIO_SetOutputPin(CS_Port, CS_Pin);
 8008b94:	88fb      	ldrh	r3, [r7, #6]
 8008b96:	4619      	mov	r1, r3
 8008b98:	68b8      	ldr	r0, [r7, #8]
 8008b9a:	f7ff ffc3 	bl	8008b24 <LL_GPIO_SetOutputPin>
}
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	2401961c 	.word	0x2401961c

08008bac <FRAM_SPI_WriteEnable>:

Std_ReturnType FRAM_SPI_WriteEnable(FRAM_SPI_HandleTypeDef *hfram)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
    Std_ReturnType status;

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	891b      	ldrh	r3, [r3, #8]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f7ff ffbe 	bl	8008b40 <LL_GPIO_ResetOutputPin>
    status = SPI_Driver_Write(hfram->SPIx, FRAM_WREN);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2106      	movs	r1, #6
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7f9 f91e 	bl	8001e0c <SPI_Driver_Write>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73fb      	strb	r3, [r7, #15]
    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	891b      	ldrh	r3, [r3, #8]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4610      	mov	r0, r2
 8008be0:	f7ff ffa0 	bl	8008b24 <LL_GPIO_SetOutputPin>

    return status;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <FRAM_SPI_WriteDisable>:

Std_ReturnType FRAM_SPI_WriteDisable(FRAM_SPI_HandleTypeDef *hfram)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b084      	sub	sp, #16
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
    Std_ReturnType status;

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	891b      	ldrh	r3, [r3, #8]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4610      	mov	r0, r2
 8008c02:	f7ff ff9d 	bl	8008b40 <LL_GPIO_ResetOutputPin>
    status = SPI_Driver_Write(hfram->SPIx, FRAM_WRDI);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2104      	movs	r1, #4
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7f9 f8fd 	bl	8001e0c <SPI_Driver_Write>
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]
    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	891b      	ldrh	r3, [r3, #8]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4610      	mov	r0, r2
 8008c22:	f7ff ff7f 	bl	8008b24 <LL_GPIO_SetOutputPin>

    return status;
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <FRAM_SPI_WriteMem>:

Std_ReturnType FRAM_SPI_WriteMem(FRAM_SPI_HandleTypeDef *hfram, uint32_t addr, uint8_t *pData, uint16_t len)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b088      	sub	sp, #32
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	807b      	strh	r3, [r7, #2]
    Std_ReturnType status;
    uint8_t addr_bytes[3] = {
        (uint8_t)((addr >> 16) & 0xFF),
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	0c1b      	lsrs	r3, r3, #16
 8008c42:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008c44:	753b      	strb	r3, [r7, #20]
        (uint8_t)((addr >> 8) & 0xFF),
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	0a1b      	lsrs	r3, r3, #8
 8008c4a:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008c4c:	757b      	strb	r3, [r7, #21]
        (uint8_t)(addr & 0xFF)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008c52:	75bb      	strb	r3, [r7, #22]
    };

    status = FRAM_SPI_WriteEnable(hfram);
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f7ff ffa9 	bl	8008bac <FRAM_SPI_WriteEnable>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]
    if(status != E_OK) return status;
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <FRAM_SPI_WriteMem+0x38>
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
 8008c66:	e06e      	b.n	8008d46 <FRAM_SPI_WriteMem+0x116>

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	891b      	ldrh	r3, [r3, #8]
 8008c70:	4619      	mov	r1, r3
 8008c72:	4610      	mov	r0, r2
 8008c74:	f7ff ff64 	bl	8008b40 <LL_GPIO_ResetOutputPin>

    status = SPI_Driver_Write(hfram->SPIx, FRAM_WRITE);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7f9 f8c4 	bl	8001e0c <SPI_Driver_Write>
 8008c84:	4603      	mov	r3, r0
 8008c86:	75fb      	strb	r3, [r7, #23]
    if(status != E_OK) {
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d009      	beq.n	8008ca2 <FRAM_SPI_WriteMem+0x72>
        LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	891b      	ldrh	r3, [r3, #8]
 8008c96:	4619      	mov	r1, r3
 8008c98:	4610      	mov	r0, r2
 8008c9a:	f7ff ff43 	bl	8008b24 <LL_GPIO_SetOutputPin>
        return status;
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	e051      	b.n	8008d46 <FRAM_SPI_WriteMem+0x116>
    }

    for (int i = 0; i < 3; i++)
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61fb      	str	r3, [r7, #28]
 8008ca6:	e01b      	b.n	8008ce0 <FRAM_SPI_WriteMem+0xb0>
    {
        status = SPI_Driver_Write(hfram->SPIx, addr_bytes[i]);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6818      	ldr	r0, [r3, #0]
 8008cac:	f107 0214 	add.w	r2, r7, #20
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	f7f9 f8a8 	bl	8001e0c <SPI_Driver_Write>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	75fb      	strb	r3, [r7, #23]
        if(status != E_OK) {
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d009      	beq.n	8008cda <FRAM_SPI_WriteMem+0xaa>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	891b      	ldrh	r3, [r3, #8]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	f7ff ff27 	bl	8008b24 <LL_GPIO_SetOutputPin>
            return status;
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	e035      	b.n	8008d46 <FRAM_SPI_WriteMem+0x116>
    for (int i = 0; i < 3; i++)
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	61fb      	str	r3, [r7, #28]
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	dde0      	ble.n	8008ca8 <FRAM_SPI_WriteMem+0x78>
        }
    }

    for (int i = 0; i < len; i++)
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	61bb      	str	r3, [r7, #24]
 8008cea:	e01a      	b.n	8008d22 <FRAM_SPI_WriteMem+0xf2>
    {
        status = SPI_Driver_Write(hfram->SPIx, pData[i]);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	f7f9 f887 	bl	8001e0c <SPI_Driver_Write>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	75fb      	strb	r3, [r7, #23]
        if(status != E_OK) {
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d009      	beq.n	8008d1c <FRAM_SPI_WriteMem+0xec>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	891b      	ldrh	r3, [r3, #8]
 8008d10:	4619      	mov	r1, r3
 8008d12:	4610      	mov	r0, r2
 8008d14:	f7ff ff06 	bl	8008b24 <LL_GPIO_SetOutputPin>
            return status;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	e014      	b.n	8008d46 <FRAM_SPI_WriteMem+0x116>
    for (int i = 0; i < len; i++)
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	61bb      	str	r3, [r7, #24]
 8008d22:	887b      	ldrh	r3, [r7, #2]
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	dbe0      	blt.n	8008cec <FRAM_SPI_WriteMem+0xbc>
        }
    }

    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	891b      	ldrh	r3, [r3, #8]
 8008d32:	4619      	mov	r1, r3
 8008d34:	4610      	mov	r0, r2
 8008d36:	f7ff fef5 	bl	8008b24 <LL_GPIO_SetOutputPin>

    status = FRAM_SPI_WriteDisable(hfram);
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7ff ff57 	bl	8008bee <FRAM_SPI_WriteDisable>
 8008d40:	4603      	mov	r3, r0
 8008d42:	75fb      	strb	r3, [r7, #23]

    return status;
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <FRAM_SPI_ReadMem>:

Std_ReturnType FRAM_SPI_ReadMem(FRAM_SPI_HandleTypeDef *hfram, uint32_t addr, uint8_t *pData, uint16_t len)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b088      	sub	sp, #32
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	60b9      	str	r1, [r7, #8]
 8008d58:	607a      	str	r2, [r7, #4]
 8008d5a:	807b      	strh	r3, [r7, #2]
    Std_ReturnType status;
    uint8_t addr_bytes[3] = {
        (uint8_t)((addr >> 16) & 0xFF),
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	0c1b      	lsrs	r3, r3, #16
 8008d60:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008d62:	743b      	strb	r3, [r7, #16]
        (uint8_t)((addr >> 8) & 0xFF),
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	0a1b      	lsrs	r3, r3, #8
 8008d68:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008d6a:	747b      	strb	r3, [r7, #17]
        (uint8_t)(addr & 0xFF)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008d70:	74bb      	strb	r3, [r7, #18]
    };

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	685a      	ldr	r2, [r3, #4]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	891b      	ldrh	r3, [r3, #8]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	f7ff fedf 	bl	8008b40 <LL_GPIO_ResetOutputPin>

    status = SPI_Driver_Write(hfram->SPIx, FRAM_READ);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2103      	movs	r1, #3
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7f9 f83f 	bl	8001e0c <SPI_Driver_Write>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	77fb      	strb	r3, [r7, #31]
    if(status != E_OK) {
 8008d92:	7ffb      	ldrb	r3, [r7, #31]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d009      	beq.n	8008dac <FRAM_SPI_ReadMem+0x5e>
        LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	891b      	ldrh	r3, [r3, #8]
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f7ff febe 	bl	8008b24 <LL_GPIO_SetOutputPin>
        return status;
 8008da8:	7ffb      	ldrb	r3, [r7, #31]
 8008daa:	e04c      	b.n	8008e46 <FRAM_SPI_ReadMem+0xf8>
    }

    for (int i = 0; i < 3; i++)
 8008dac:	2300      	movs	r3, #0
 8008dae:	61bb      	str	r3, [r7, #24]
 8008db0:	e01b      	b.n	8008dea <FRAM_SPI_ReadMem+0x9c>
    {
        status = SPI_Driver_Write(hfram->SPIx, addr_bytes[i]);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	f107 0210 	add.w	r2, r7, #16
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f7f9 f823 	bl	8001e0c <SPI_Driver_Write>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	77fb      	strb	r3, [r7, #31]
        if(status != E_OK) {
 8008dca:	7ffb      	ldrb	r3, [r7, #31]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d009      	beq.n	8008de4 <FRAM_SPI_ReadMem+0x96>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	891b      	ldrh	r3, [r3, #8]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	f7ff fea2 	bl	8008b24 <LL_GPIO_SetOutputPin>
            return status;
 8008de0:	7ffb      	ldrb	r3, [r7, #31]
 8008de2:	e030      	b.n	8008e46 <FRAM_SPI_ReadMem+0xf8>
    for (int i = 0; i < 3; i++)
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	3301      	adds	r3, #1
 8008de8:	61bb      	str	r3, [r7, #24]
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	dde0      	ble.n	8008db2 <FRAM_SPI_ReadMem+0x64>
        }
    }

    for (int i = 0; i < len; i++)
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]
 8008df4:	e01a      	b.n	8008e2c <FRAM_SPI_ReadMem+0xde>
    {
        status = SPI_Driver_Transmit8(hfram->SPIx, 0x00, &pData[i]);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6818      	ldr	r0, [r3, #0]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	4413      	add	r3, r2
 8008e00:	461a      	mov	r2, r3
 8008e02:	2100      	movs	r1, #0
 8008e04:	f7f8 ffb9 	bl	8001d7a <SPI_Driver_Transmit8>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	77fb      	strb	r3, [r7, #31]
        if(status != E_OK) {
 8008e0c:	7ffb      	ldrb	r3, [r7, #31]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d009      	beq.n	8008e26 <FRAM_SPI_ReadMem+0xd8>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	891b      	ldrh	r3, [r3, #8]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	f7ff fe81 	bl	8008b24 <LL_GPIO_SetOutputPin>
            return status;
 8008e22:	7ffb      	ldrb	r3, [r7, #31]
 8008e24:	e00f      	b.n	8008e46 <FRAM_SPI_ReadMem+0xf8>
    for (int i = 0; i < len; i++)
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	887b      	ldrh	r3, [r7, #2]
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	dbe0      	blt.n	8008df6 <FRAM_SPI_ReadMem+0xa8>
        }
    }

    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	891b      	ldrh	r3, [r3, #8]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f7ff fe70 	bl	8008b24 <LL_GPIO_SetOutputPin>

    return status;
 8008e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3720      	adds	r7, #32
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <LL_SPI_Enable>:
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f043 0201 	orr.w	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	601a      	str	r2, [r3, #0]
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <LL_SPI_Disable>:
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f023 0201 	bic.w	r2, r3, #1
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	601a      	str	r2, [r3, #0]
}
 8008e82:	bf00      	nop
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <LL_SPI_StartMasterTransfer>:
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	601a      	str	r2, [r3, #0]
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <LL_SPI_EnableDMAReq_RX>:
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b083      	sub	sp, #12
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG1, SPI_CFG1_RXDMAEN);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	609a      	str	r2, [r3, #8]
}
 8008ec2:	bf00      	nop
 8008ec4:	370c      	adds	r7, #12
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <LL_SPI_DisableDMAReq_RX>:
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG1, SPI_CFG1_RXDMAEN);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	609a      	str	r2, [r3, #8]
}
 8008ee2:	bf00      	nop
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <LL_SPI_EnableDMAReq_TX>:
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	609a      	str	r2, [r3, #8]
}
 8008f02:	bf00      	nop
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <LL_SPI_DisableDMAReq_TX>:
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b083      	sub	sp, #12
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	609a      	str	r2, [r3, #8]
}
 8008f22:	bf00      	nop
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <LL_GPIO_SetOutputPin>:
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	619a      	str	r2, [r3, #24]
}
 8008f3e:	bf00      	nop
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <LL_GPIO_ResetOutputPin>:
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b083      	sub	sp, #12
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	041a      	lsls	r2, r3, #16
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	619a      	str	r2, [r3, #24]
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <LL_BDMA_EnableChannel>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_EnableChannel(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	60fb      	str	r3, [r7, #12]

  SET_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_EN);
 8008f76:	4a0c      	ldr	r2, [pc, #48]	@ (8008fa8 <LL_BDMA_EnableChannel+0x40>)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4908      	ldr	r1, [pc, #32]	@ (8008fa8 <LL_BDMA_EnableChannel+0x40>)
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	7812      	ldrb	r2, [r2, #0]
 8008f8e:	4611      	mov	r1, r2
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	440a      	add	r2, r1
 8008f94:	f043 0301 	orr.w	r3, r3, #1
 8008f98:	6013      	str	r3, [r2, #0]
}
 8008f9a:	bf00      	nop
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	08025f58 	.word	0x08025f58

08008fac <LL_BDMA_DisableChannel>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_DisableChannel(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_EN);
 8008fba:	4a0c      	ldr	r2, [pc, #48]	@ (8008fec <LL_BDMA_DisableChannel+0x40>)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4908      	ldr	r1, [pc, #32]	@ (8008fec <LL_BDMA_DisableChannel+0x40>)
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	440a      	add	r2, r1
 8008fd0:	7812      	ldrb	r2, [r2, #0]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f023 0301 	bic.w	r3, r3, #1
 8008fdc:	6013      	str	r3, [r2, #0]
}
 8008fde:	bf00      	nop
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	08025f58 	.word	0x08025f58

08008ff0 <LL_BDMA_GetDataTransferDirection>:
  *         @arg @ref LL_BDMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_BDMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_BDMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_BDMA_GetDataTransferDirection(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	60fb      	str	r3, [r7, #12]

  return (READ_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR,
 8008ffe:	4a08      	ldr	r2, [pc, #32]	@ (8009020 <LL_BDMA_GetDataTransferDirection+0x30>)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	4413      	add	r3, r2
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4413      	add	r3, r2
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	f244 0310 	movw	r3, #16400	@ 0x4010
 8009012:	4013      	ands	r3, r2
                   BDMA_CCR_DIR | BDMA_CCR_MEM2MEM));
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	08025f58 	.word	0x08025f58

08009024 <LL_BDMA_SetDataLength>:
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_SetDataLength(const BDMA_TypeDef *BDMAx, uint32_t Channel, uint32_t NbData)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CNDTR,
 8009034:	4a0d      	ldr	r2, [pc, #52]	@ (800906c <LL_BDMA_SetDataLength+0x48>)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	4413      	add	r3, r2
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	4413      	add	r3, r2
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	4b0a      	ldr	r3, [pc, #40]	@ (8009070 <LL_BDMA_SetDataLength+0x4c>)
 8009046:	4013      	ands	r3, r2
 8009048:	4908      	ldr	r1, [pc, #32]	@ (800906c <LL_BDMA_SetDataLength+0x48>)
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	440a      	add	r2, r1
 800904e:	7812      	ldrb	r2, [r2, #0]
 8009050:	4611      	mov	r1, r2
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	440a      	add	r2, r1
 8009056:	4611      	mov	r1, r2
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	4313      	orrs	r3, r2
 800905c:	604b      	str	r3, [r1, #4]
             BDMA_CNDTR_NDT, NbData);
}
 800905e:	bf00      	nop
 8009060:	371c      	adds	r7, #28
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	08025f58 	.word	0x08025f58
 8009070:	ffff0000 	.word	0xffff0000

08009074 <LL_BDMA_ConfigAddresses>:
  *         @arg @ref LL_BDMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_ConfigAddresses(const BDMA_TypeDef *BDMAx, uint32_t Channel, uint32_t SrcAddress,
                                             uint32_t DstAddress, uint32_t Direction)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	603b      	str	r3, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_BDMA_DIRECTION_MEMORY_TO_PERIPH)
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	2b10      	cmp	r3, #16
 800908a:	d114      	bne.n	80090b6 <LL_BDMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CM0AR, SrcAddress);
 800908c:	4a17      	ldr	r2, [pc, #92]	@ (80090ec <LL_BDMA_ConfigAddresses+0x78>)
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	4413      	add	r3, r2
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	461a      	mov	r2, r3
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	4413      	add	r3, r2
 800909a:	461a      	mov	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 80090a0:	4a12      	ldr	r2, [pc, #72]	@ (80090ec <LL_BDMA_ConfigAddresses+0x78>)
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	4413      	add	r3, r2
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	4413      	add	r3, r2
 80090ae:	461a      	mov	r2, r3
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CM0AR, DstAddress);
  }
}
 80090b4:	e013      	b.n	80090de <LL_BDMA_ConfigAddresses+0x6a>
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 80090b6:	4a0d      	ldr	r2, [pc, #52]	@ (80090ec <LL_BDMA_ConfigAddresses+0x78>)
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4413      	add	r3, r2
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	4413      	add	r3, r2
 80090c4:	461a      	mov	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6093      	str	r3, [r2, #8]
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CM0AR, DstAddress);
 80090ca:	4a08      	ldr	r2, [pc, #32]	@ (80090ec <LL_BDMA_ConfigAddresses+0x78>)
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4413      	add	r3, r2
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	4413      	add	r3, r2
 80090d8:	461a      	mov	r2, r3
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	60d3      	str	r3, [r2, #12]
}
 80090de:	bf00      	nop
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	08025f58 	.word	0x08025f58

080090f0 <LL_BDMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_SetPeriphRequest(const BDMA_TypeDef *BDMAx, uint32_t Channel, uint32_t Request)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  UNUSED(BDMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX2_Channel0 + (DMAMUX_CCR_SIZE * (Channel))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009128 <LL_BDMA_SetPeriphRequest+0x38>)
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <LL_BDMA_SetPeriphRequest+0x38>)
 800910e:	440b      	add	r3, r1
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4619      	mov	r1, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4313      	orrs	r3, r2
 8009118:	600b      	str	r3, [r1, #0]
}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	16009600 	.word	0x16009600

0800912c <LL_BDMA_IsActiveFlag_TC0>:
  * @rmtoll ISR          TCIF0         LL_BDMA_IsActiveFlag_TC0
  * @param  BDMAx BDMA Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_BDMA_IsActiveFlag_TC0(const BDMA_TypeDef *BDMAx)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BDMAx->ISR, BDMA_ISR_TCIF0) == (BDMA_ISR_TCIF0)) ? 1UL : 0UL);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0302 	and.w	r3, r3, #2
 800913c:	2b02      	cmp	r3, #2
 800913e:	d101      	bne.n	8009144 <LL_BDMA_IsActiveFlag_TC0+0x18>
 8009140:	2301      	movs	r3, #1
 8009142:	e000      	b.n	8009146 <LL_BDMA_IsActiveFlag_TC0+0x1a>
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <LL_BDMA_IsActiveFlag_TE0>:
  * @rmtoll ISR          TEIF0         LL_BDMA_IsActiveFlag_TE0
  * @param  BDMAx BDMA Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_BDMA_IsActiveFlag_TE0(const BDMA_TypeDef *BDMAx)
{
 8009152:	b480      	push	{r7}
 8009154:	b083      	sub	sp, #12
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BDMAx->ISR, BDMA_ISR_TEIF0) == (BDMA_ISR_TEIF0)) ? 1UL : 0UL);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0308 	and.w	r3, r3, #8
 8009162:	2b08      	cmp	r3, #8
 8009164:	d101      	bne.n	800916a <LL_BDMA_IsActiveFlag_TE0+0x18>
 8009166:	2301      	movs	r3, #1
 8009168:	e000      	b.n	800916c <LL_BDMA_IsActiveFlag_TE0+0x1a>
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <LL_BDMA_ClearFlag_TC0>:
  * @rmtoll IFCR         CTCIF0        LL_BDMA_ClearFlag_TC0
  * @param  BDMAx BDMA Instance
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_ClearFlag_TC0(BDMA_TypeDef *BDMAx)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  WRITE_REG(BDMAx->IFCR, BDMA_IFCR_CTCIF0);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	605a      	str	r2, [r3, #4]
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <LL_BDMA_ClearFlag_TE0>:
  * @rmtoll IFCR         CTEIF0        LL_BDMA_ClearFlag_TE0
  * @param  BDMAx BDMA Instance
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_ClearFlag_TE0(BDMA_TypeDef *BDMAx)
{
 8009192:	b480      	push	{r7}
 8009194:	b083      	sub	sp, #12
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  WRITE_REG(BDMAx->IFCR, BDMA_IFCR_CTEIF0);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2208      	movs	r2, #8
 800919e:	605a      	str	r2, [r3, #4]
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <LL_BDMA_EnableIT_TC>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_EnableIT_TC(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60fb      	str	r3, [r7, #12]

  SET_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_TCIE);
 80091ba:	4a0c      	ldr	r2, [pc, #48]	@ (80091ec <LL_BDMA_EnableIT_TC+0x40>)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	4413      	add	r3, r2
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4413      	add	r3, r2
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4908      	ldr	r1, [pc, #32]	@ (80091ec <LL_BDMA_EnableIT_TC+0x40>)
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	440a      	add	r2, r1
 80091d0:	7812      	ldrb	r2, [r2, #0]
 80091d2:	4611      	mov	r1, r2
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	440a      	add	r2, r1
 80091d8:	f043 0302 	orr.w	r3, r3, #2
 80091dc:	6013      	str	r3, [r2, #0]
}
 80091de:	bf00      	nop
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	08025f58 	.word	0x08025f58

080091f0 <LL_BDMA_EnableIT_TE>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_EnableIT_TE(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	60fb      	str	r3, [r7, #12]

  SET_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_TEIE);
 80091fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009230 <LL_BDMA_EnableIT_TE+0x40>)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	4413      	add	r3, r2
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4413      	add	r3, r2
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4908      	ldr	r1, [pc, #32]	@ (8009230 <LL_BDMA_EnableIT_TE+0x40>)
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	440a      	add	r2, r1
 8009214:	7812      	ldrb	r2, [r2, #0]
 8009216:	4611      	mov	r1, r2
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	440a      	add	r2, r1
 800921c:	f043 0308 	orr.w	r3, r3, #8
 8009220:	6013      	str	r3, [r2, #0]
}
 8009222:	bf00      	nop
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	08025f58 	.word	0x08025f58

08009234 <SPI_MasterDevice_GetHandle>:
    .transfer_state = SPI_MASTER_TRANSFER_IDLE,
    .is_initialized = false,
};

SPI_MasterDevice_t* SPI_MasterDevice_GetHandle(void)
{
 8009234:	b480      	push	{r7}
 8009236:	af00      	add	r7, sp, #0
    return &spi_master_instance;
 8009238:	4b02      	ldr	r3, [pc, #8]	@ (8009244 <SPI_MasterDevice_GetHandle+0x10>)
}
 800923a:	4618      	mov	r0, r3
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	2401962c 	.word	0x2401962c

08009248 <SPI_MasterDevice_Init>:

Std_ReturnType SPI_MasterDevice_Init(SPI_TypeDef *SPIx, GPIO_TypeDef *CS_Port, uint16_t CS_Pin)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	4613      	mov	r3, r2
 8009254:	80fb      	strh	r3, [r7, #6]
    if (spi_master_instance.is_initialized) {
 8009256:	4b1a      	ldr	r3, [pc, #104]	@ (80092c0 <SPI_MasterDevice_Init+0x78>)
 8009258:	7adb      	ldrb	r3, [r3, #11]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <SPI_MasterDevice_Init+0x1a>
        return E_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	e02a      	b.n	80092b8 <SPI_MasterDevice_Init+0x70>
    }

    spi_master_instance.SPIx = SPIx;
 8009262:	4a17      	ldr	r2, [pc, #92]	@ (80092c0 <SPI_MasterDevice_Init+0x78>)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6013      	str	r3, [r2, #0]
    spi_master_instance.CS_Port = CS_Port;
 8009268:	4a15      	ldr	r2, [pc, #84]	@ (80092c0 <SPI_MasterDevice_Init+0x78>)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	6053      	str	r3, [r2, #4]
    spi_master_instance.CS_Pin = CS_Pin;
 800926e:	4a14      	ldr	r2, [pc, #80]	@ (80092c0 <SPI_MasterDevice_Init+0x78>)
 8009270:	88fb      	ldrh	r3, [r7, #6]
 8009272:	8113      	strh	r3, [r2, #8]

    rxMaster_Semaphore = xSemaphoreCreateBinary();
 8009274:	2203      	movs	r2, #3
 8009276:	2100      	movs	r1, #0
 8009278:	2001      	movs	r0, #1
 800927a:	f007 fb5c 	bl	8010936 <xQueueGenericCreate>
 800927e:	4603      	mov	r3, r0
 8009280:	4a10      	ldr	r2, [pc, #64]	@ (80092c4 <SPI_MasterDevice_Init+0x7c>)
 8009282:	6013      	str	r3, [r2, #0]
    if (rxMaster_Semaphore == NULL) {
 8009284:	4b0f      	ldr	r3, [pc, #60]	@ (80092c4 <SPI_MasterDevice_Init+0x7c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <SPI_MasterDevice_Init+0x48>
        return E_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e013      	b.n	80092b8 <SPI_MasterDevice_Init+0x70>
    }

    LL_BDMA_EnableIT_TC(BDMA, LL_BDMA_CHANNEL_0);
 8009290:	2100      	movs	r1, #0
 8009292:	480d      	ldr	r0, [pc, #52]	@ (80092c8 <SPI_MasterDevice_Init+0x80>)
 8009294:	f7ff ff8a 	bl	80091ac <LL_BDMA_EnableIT_TC>
    LL_BDMA_EnableIT_TE(BDMA, LL_BDMA_CHANNEL_0);
 8009298:	2100      	movs	r1, #0
 800929a:	480b      	ldr	r0, [pc, #44]	@ (80092c8 <SPI_MasterDevice_Init+0x80>)
 800929c:	f7ff ffa8 	bl	80091f0 <LL_BDMA_EnableIT_TE>
//    LL_BDMA_SetPeriphAddress(BDMA, LL_BDMA_CHANNEL_0, (uint32_t)&SPIx->RXDR);
    LL_GPIO_SetOutputPin(CS_Port, CS_Pin);
 80092a0:	88fb      	ldrh	r3, [r7, #6]
 80092a2:	4619      	mov	r1, r3
 80092a4:	68b8      	ldr	r0, [r7, #8]
 80092a6:	f7ff fe42 	bl	8008f2e <LL_GPIO_SetOutputPin>
//    LL_SPI_Enable(SPIx);

    spi_master_instance.is_initialized = true;
 80092aa:	4b05      	ldr	r3, [pc, #20]	@ (80092c0 <SPI_MasterDevice_Init+0x78>)
 80092ac:	2201      	movs	r2, #1
 80092ae:	72da      	strb	r2, [r3, #11]
    spi_master_instance.transfer_state = SPI_MASTER_TRANSFER_IDLE;
 80092b0:	4b03      	ldr	r3, [pc, #12]	@ (80092c0 <SPI_MasterDevice_Init+0x78>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	729a      	strb	r2, [r3, #10]
    return E_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	2401962c 	.word	0x2401962c
 80092c4:	24019628 	.word	0x24019628
 80092c8:	58025400 	.word	0x58025400

080092cc <SPI_MasterDevice_ReadDMA>:


Std_ReturnType SPI_MasterDevice_ReadDMA(uint32_t data_addr, uint32_t size)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af02      	add	r7, sp, #8
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
    if (!spi_master_instance.is_initialized) {
 80092d6:	4b5f      	ldr	r3, [pc, #380]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 80092d8:	7adb      	ldrb	r3, [r3, #11]
 80092da:	f083 0301 	eor.w	r3, r3, #1
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <SPI_MasterDevice_ReadDMA+0x1c>
        return E_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e0b0      	b.n	800944a <SPI_MasterDevice_ReadDMA+0x17e>

//    if (toCM4_GetState() != TOCM4_IDLE) {
//        return E_ERROR;
//    }

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <SPI_MasterDevice_ReadDMA+0x2a>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 80092f4:	d901      	bls.n	80092fa <SPI_MasterDevice_ReadDMA+0x2e>
        return E_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e0a7      	b.n	800944a <SPI_MasterDevice_ReadDMA+0x17e>
    }

    spi_master_instance.transfer_state = SPI_MASTER_TRANSFER_BUSY;
 80092fa:	4b56      	ldr	r3, [pc, #344]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 80092fc:	2201      	movs	r2, #1
 80092fe:	729a      	strb	r2, [r3, #10]

    LL_BDMA_ConfigAddresses(BDMA, LL_BDMA_CHANNEL_1,
 8009300:	2101      	movs	r1, #1
 8009302:	4855      	ldr	r0, [pc, #340]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 8009304:	f7ff fe74 	bl	8008ff0 <LL_BDMA_GetDataTransferDirection>
 8009308:	4603      	mov	r3, r0
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	4b53      	ldr	r3, [pc, #332]	@ (800945c <SPI_MasterDevice_ReadDMA+0x190>)
 800930e:	4a54      	ldr	r2, [pc, #336]	@ (8009460 <SPI_MasterDevice_ReadDMA+0x194>)
 8009310:	2101      	movs	r1, #1
 8009312:	4851      	ldr	r0, [pc, #324]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 8009314:	f7ff feae 	bl	8009074 <LL_BDMA_ConfigAddresses>
    						0x3800FFFF,(uint32_t) &(SPI6->TXDR),
						    LL_BDMA_GetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_1));
    LL_BDMA_SetDataLength(BDMA, LL_BDMA_CHANNEL_1, size);
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	2101      	movs	r1, #1
 800931c:	484e      	ldr	r0, [pc, #312]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 800931e:	f7ff fe81 	bl	8009024 <LL_BDMA_SetDataLength>

    LL_BDMA_ConfigAddresses(BDMA, LL_BDMA_CHANNEL_0,
 8009322:	2100      	movs	r1, #0
 8009324:	484c      	ldr	r0, [pc, #304]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 8009326:	f7ff fe63 	bl	8008ff0 <LL_BDMA_GetDataTransferDirection>
 800932a:	4603      	mov	r3, r0
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a4c      	ldr	r2, [pc, #304]	@ (8009464 <SPI_MasterDevice_ReadDMA+0x198>)
 8009332:	2100      	movs	r1, #0
 8009334:	4848      	ldr	r0, [pc, #288]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 8009336:	f7ff fe9d 	bl	8009074 <LL_BDMA_ConfigAddresses>
                           (uint32_t) &(SPI6->RXDR), data_addr,
						   LL_BDMA_GetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_0));
    LL_BDMA_SetDataLength(BDMA, LL_BDMA_CHANNEL_0, size);
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	2100      	movs	r1, #0
 800933e:	4846      	ldr	r0, [pc, #280]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 8009340:	f7ff fe70 	bl	8009024 <LL_BDMA_SetDataLength>
    LL_BDMA_SetPeriphRequest(BDMA, LL_BDMA_CHANNEL_0, LL_DMAMUX2_REQ_SPI6_RX);
 8009344:	220b      	movs	r2, #11
 8009346:	2100      	movs	r1, #0
 8009348:	4843      	ldr	r0, [pc, #268]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 800934a:	f7ff fed1 	bl	80090f0 <LL_BDMA_SetPeriphRequest>

    LL_GPIO_ResetOutputPin(spi_master_instance.CS_Port, spi_master_instance.CS_Pin);
 800934e:	4b41      	ldr	r3, [pc, #260]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	4a40      	ldr	r2, [pc, #256]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 8009354:	8912      	ldrh	r2, [r2, #8]
 8009356:	4611      	mov	r1, r2
 8009358:	4618      	mov	r0, r3
 800935a:	f7ff fdf6 	bl	8008f4a <LL_GPIO_ResetOutputPin>

    LL_SPI_EnableDMAReq_RX(spi_master_instance.SPIx);
 800935e:	4b3d      	ldr	r3, [pc, #244]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff fda3 	bl	8008eae <LL_SPI_EnableDMAReq_RX>
    LL_BDMA_EnableChannel(BDMA, LL_BDMA_CHANNEL_0);
 8009368:	2100      	movs	r1, #0
 800936a:	483b      	ldr	r0, [pc, #236]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 800936c:	f7ff fdfc 	bl	8008f68 <LL_BDMA_EnableChannel>

    LL_SPI_EnableDMAReq_TX(spi_master_instance.SPIx);
 8009370:	4b38      	ldr	r3, [pc, #224]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff fdba 	bl	8008eee <LL_SPI_EnableDMAReq_TX>
    LL_BDMA_EnableChannel(BDMA, LL_BDMA_CHANNEL_1);
 800937a:	2101      	movs	r1, #1
 800937c:	4836      	ldr	r0, [pc, #216]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 800937e:	f7ff fdf3 	bl	8008f68 <LL_BDMA_EnableChannel>
    LL_SPI_Enable(spi_master_instance.SPIx);
 8009382:	4b34      	ldr	r3, [pc, #208]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff fd61 	bl	8008e4e <LL_SPI_Enable>
    LL_SPI_StartMasterTransfer(spi_master_instance.SPIx);
 800938c:	4b31      	ldr	r3, [pc, #196]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff fd7c 	bl	8008e8e <LL_SPI_StartMasterTransfer>

    if (xSemaphoreTake(rxMaster_Semaphore, pdMS_TO_TICKS(1000)) != pdTRUE) {
 8009396:	4b34      	ldr	r3, [pc, #208]	@ (8009468 <SPI_MasterDevice_ReadDMA+0x19c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800939e:	4618      	mov	r0, r3
 80093a0:	f007 fe18 	bl	8010fd4 <xQueueSemaphoreTake>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d023      	beq.n	80093f2 <SPI_MasterDevice_ReadDMA+0x126>
        LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_1);
 80093aa:	2101      	movs	r1, #1
 80093ac:	482a      	ldr	r0, [pc, #168]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 80093ae:	f7ff fdfd 	bl	8008fac <LL_BDMA_DisableChannel>
        LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_0);
 80093b2:	2100      	movs	r1, #0
 80093b4:	4828      	ldr	r0, [pc, #160]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 80093b6:	f7ff fdf9 	bl	8008fac <LL_BDMA_DisableChannel>
        LL_SPI_DisableDMAReq_RX(spi_master_instance.SPIx);
 80093ba:	4b26      	ldr	r3, [pc, #152]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff fd85 	bl	8008ece <LL_SPI_DisableDMAReq_RX>
        LL_SPI_DisableDMAReq_TX(spi_master_instance.SPIx);
 80093c4:	4b23      	ldr	r3, [pc, #140]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff fda0 	bl	8008f0e <LL_SPI_DisableDMAReq_TX>
        LL_SPI_Disable(spi_master_instance.SPIx);
 80093ce:	4b21      	ldr	r3, [pc, #132]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7ff fd4b 	bl	8008e6e <LL_SPI_Disable>
        LL_GPIO_SetOutputPin(spi_master_instance.CS_Port, spi_master_instance.CS_Pin);
 80093d8:	4b1e      	ldr	r3, [pc, #120]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 80093de:	8912      	ldrh	r2, [r2, #8]
 80093e0:	4611      	mov	r1, r2
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff fda3 	bl	8008f2e <LL_GPIO_SetOutputPin>
        toCM4_SetState(TOCM4_ERROR);
 80093e8:	2000      	movs	r0, #0
 80093ea:	f7f7 fb41 	bl	8000a70 <toCM4_SetState>
        return E_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e02b      	b.n	800944a <SPI_MasterDevice_ReadDMA+0x17e>
    }

    LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_1);
 80093f2:	2101      	movs	r1, #1
 80093f4:	4818      	ldr	r0, [pc, #96]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 80093f6:	f7ff fdd9 	bl	8008fac <LL_BDMA_DisableChannel>
    LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_0);
 80093fa:	2100      	movs	r1, #0
 80093fc:	4816      	ldr	r0, [pc, #88]	@ (8009458 <SPI_MasterDevice_ReadDMA+0x18c>)
 80093fe:	f7ff fdd5 	bl	8008fac <LL_BDMA_DisableChannel>
    LL_SPI_DisableDMAReq_RX(spi_master_instance.SPIx);
 8009402:	4b14      	ldr	r3, [pc, #80]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff fd61 	bl	8008ece <LL_SPI_DisableDMAReq_RX>
    LL_SPI_DisableDMAReq_TX(spi_master_instance.SPIx);
 800940c:	4b11      	ldr	r3, [pc, #68]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4618      	mov	r0, r3
 8009412:	f7ff fd7c 	bl	8008f0e <LL_SPI_DisableDMAReq_TX>
    LL_SPI_Disable(spi_master_instance.SPIx);
 8009416:	4b0f      	ldr	r3, [pc, #60]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4618      	mov	r0, r3
 800941c:	f7ff fd27 	bl	8008e6e <LL_SPI_Disable>
    LL_GPIO_SetOutputPin(spi_master_instance.CS_Port, spi_master_instance.CS_Pin);
 8009420:	4b0c      	ldr	r3, [pc, #48]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	4a0b      	ldr	r2, [pc, #44]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 8009426:	8912      	ldrh	r2, [r2, #8]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7ff fd7f 	bl	8008f2e <LL_GPIO_SetOutputPin>

    if (spi_master_instance.transfer_state == SPI_MASTER_TRANSFER_COMPLETE) {
 8009430:	4b08      	ldr	r3, [pc, #32]	@ (8009454 <SPI_MasterDevice_ReadDMA+0x188>)
 8009432:	7a9b      	ldrb	r3, [r3, #10]
 8009434:	2b02      	cmp	r3, #2
 8009436:	d104      	bne.n	8009442 <SPI_MasterDevice_ReadDMA+0x176>
        toCM4_SetState(TOCM4_READYSEND);
 8009438:	2001      	movs	r0, #1
 800943a:	f7f7 fb19 	bl	8000a70 <toCM4_SetState>
        return E_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	e003      	b.n	800944a <SPI_MasterDevice_ReadDMA+0x17e>
    } else {
        toCM4_SetState(TOCM4_ERROR);
 8009442:	2000      	movs	r0, #0
 8009444:	f7f7 fb14 	bl	8000a70 <toCM4_SetState>
        return E_ERROR;
 8009448:	2301      	movs	r3, #1
    }
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	2401962c 	.word	0x2401962c
 8009458:	58025400 	.word	0x58025400
 800945c:	58001420 	.word	0x58001420
 8009460:	3800ffff 	.word	0x3800ffff
 8009464:	58001430 	.word	0x58001430
 8009468:	24019628 	.word	0x24019628

0800946c <SPI_MasterDevice_SetTransferState>:
{
    return spi_master_instance.transfer_state;
}

void SPI_MasterDevice_SetTransferState(SPI_MasterTransferState_t state)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
    spi_master_instance.transfer_state = state;
 8009476:	4a04      	ldr	r2, [pc, #16]	@ (8009488 <SPI_MasterDevice_SetTransferState+0x1c>)
 8009478:	79fb      	ldrb	r3, [r7, #7]
 800947a:	7293      	strb	r3, [r2, #10]
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	2401962c 	.word	0x2401962c

0800948c <SPIMaster_IRQHandler>:
{
    return toCM4_GetState();
}

void SPIMaster_IRQHandler(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
    if (LL_BDMA_IsActiveFlag_TC0(BDMA)) {
 8009492:	4822      	ldr	r0, [pc, #136]	@ (800951c <SPIMaster_IRQHandler+0x90>)
 8009494:	f7ff fe4a 	bl	800912c <LL_BDMA_IsActiveFlag_TC0>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d019      	beq.n	80094d2 <SPIMaster_IRQHandler+0x46>
        LL_BDMA_ClearFlag_TC0(BDMA);
 800949e:	481f      	ldr	r0, [pc, #124]	@ (800951c <SPIMaster_IRQHandler+0x90>)
 80094a0:	f7ff fe6a 	bl	8009178 <LL_BDMA_ClearFlag_TC0>
        SPI_MasterDevice_SetTransferState(SPI_MASTER_TRANSFER_COMPLETE);
 80094a4:	2002      	movs	r0, #2
 80094a6:	f7ff ffe1 	bl	800946c <SPI_MasterDevice_SetTransferState>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80094aa:	2300      	movs	r3, #0
 80094ac:	607b      	str	r3, [r7, #4]
        xSemaphoreGiveFromISR(rxMaster_Semaphore, &xHigherPriorityTaskWoken);
 80094ae:	4b1c      	ldr	r3, [pc, #112]	@ (8009520 <SPIMaster_IRQHandler+0x94>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	1d3a      	adds	r2, r7, #4
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f007 fbf2 	bl	8010ca0 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d007      	beq.n	80094d2 <SPIMaster_IRQHandler+0x46>
 80094c2:	4b18      	ldr	r3, [pc, #96]	@ (8009524 <SPIMaster_IRQHandler+0x98>)
 80094c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	f3bf 8f6f 	isb	sy
    }
    if (LL_BDMA_IsActiveFlag_TE0(BDMA)) {
 80094d2:	4812      	ldr	r0, [pc, #72]	@ (800951c <SPIMaster_IRQHandler+0x90>)
 80094d4:	f7ff fe3d 	bl	8009152 <LL_BDMA_IsActiveFlag_TE0>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d019      	beq.n	8009512 <SPIMaster_IRQHandler+0x86>
        LL_BDMA_ClearFlag_TE0(BDMA);
 80094de:	480f      	ldr	r0, [pc, #60]	@ (800951c <SPIMaster_IRQHandler+0x90>)
 80094e0:	f7ff fe57 	bl	8009192 <LL_BDMA_ClearFlag_TE0>
        SPI_MasterDevice_SetTransferState(SPI_MASTER_TRANSFER_ERROR);
 80094e4:	2003      	movs	r0, #3
 80094e6:	f7ff ffc1 	bl	800946c <SPI_MasterDevice_SetTransferState>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80094ea:	2300      	movs	r3, #0
 80094ec:	603b      	str	r3, [r7, #0]
        xSemaphoreGiveFromISR(rxMaster_Semaphore, &xHigherPriorityTaskWoken);
 80094ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009520 <SPIMaster_IRQHandler+0x94>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	463a      	mov	r2, r7
 80094f4:	4611      	mov	r1, r2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f007 fbd2 	bl	8010ca0 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d007      	beq.n	8009512 <SPIMaster_IRQHandler+0x86>
 8009502:	4b08      	ldr	r3, [pc, #32]	@ (8009524 <SPIMaster_IRQHandler+0x98>)
 8009504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	f3bf 8f6f 	isb	sy
    }
}
 8009512:	bf00      	nop
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	58025400 	.word	0x58025400
 8009520:	24019628 	.word	0x24019628
 8009524:	e000ed04 	.word	0xe000ed04

08009528 <LL_SPI_Enable>:
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f043 0201 	orr.w	r2, r3, #1
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	601a      	str	r2, [r3, #0]
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <LL_SPI_Disable>:
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f023 0201 	bic.w	r2, r3, #1
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	601a      	str	r2, [r3, #0]
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <LL_SPI_EnableDMAReq_TX>:
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	609a      	str	r2, [r3, #8]
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <LL_SPI_DisableDMAReq_TX>:
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	609a      	str	r2, [r3, #8]
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <LL_DMA_EnableStream>:
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80095b6:	4a0c      	ldr	r2, [pc, #48]	@ (80095e8 <LL_DMA_EnableStream+0x40>)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	4413      	add	r3, r2
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4413      	add	r3, r2
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4908      	ldr	r1, [pc, #32]	@ (80095e8 <LL_DMA_EnableStream+0x40>)
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	440a      	add	r2, r1
 80095cc:	7812      	ldrb	r2, [r2, #0]
 80095ce:	4611      	mov	r1, r2
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	440a      	add	r2, r1
 80095d4:	f043 0301 	orr.w	r3, r3, #1
 80095d8:	6013      	str	r3, [r2, #0]
}
 80095da:	bf00      	nop
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	08025f60 	.word	0x08025f60

080095ec <LL_DMA_DisableStream>:
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80095fa:	4a0c      	ldr	r2, [pc, #48]	@ (800962c <LL_DMA_DisableStream+0x40>)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	4413      	add	r3, r2
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4413      	add	r3, r2
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4908      	ldr	r1, [pc, #32]	@ (800962c <LL_DMA_DisableStream+0x40>)
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	440a      	add	r2, r1
 8009610:	7812      	ldrb	r2, [r2, #0]
 8009612:	4611      	mov	r1, r2
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	440a      	add	r2, r1
 8009618:	f023 0301 	bic.w	r3, r3, #1
 800961c:	6013      	str	r3, [r2, #0]
}
 800961e:	bf00      	nop
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	08025f60 	.word	0x08025f60

08009630 <LL_DMA_SetMemorySize>:
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8009640:	4a0d      	ldr	r2, [pc, #52]	@ (8009678 <LL_DMA_SetMemorySize+0x48>)
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	4413      	add	r3, r2
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	461a      	mov	r2, r3
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	4413      	add	r3, r2
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8009654:	4908      	ldr	r1, [pc, #32]	@ (8009678 <LL_DMA_SetMemorySize+0x48>)
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	440b      	add	r3, r1
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	4619      	mov	r1, r3
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	440b      	add	r3, r1
 8009662:	4619      	mov	r1, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4313      	orrs	r3, r2
 8009668:	600b      	str	r3, [r1, #0]
}
 800966a:	bf00      	nop
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	08025f60 	.word	0x08025f60

0800967c <LL_DMA_SetDataLength>:
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 800968c:	4a0d      	ldr	r2, [pc, #52]	@ (80096c4 <LL_DMA_SetDataLength+0x48>)
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	4413      	add	r3, r2
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	461a      	mov	r2, r3
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	4413      	add	r3, r2
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	4b0a      	ldr	r3, [pc, #40]	@ (80096c8 <LL_DMA_SetDataLength+0x4c>)
 800969e:	4013      	ands	r3, r2
 80096a0:	4908      	ldr	r1, [pc, #32]	@ (80096c4 <LL_DMA_SetDataLength+0x48>)
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	440a      	add	r2, r1
 80096a6:	7812      	ldrb	r2, [r2, #0]
 80096a8:	4611      	mov	r1, r2
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	440a      	add	r2, r1
 80096ae:	4611      	mov	r1, r2
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	604b      	str	r3, [r1, #4]
}
 80096b6:	bf00      	nop
 80096b8:	371c      	adds	r7, #28
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	08025f60 	.word	0x08025f60
 80096c8:	ffff0000 	.word	0xffff0000

080096cc <LL_DMA_ConfigAddresses>:
{
 80096cc:	b480      	push	{r7}
 80096ce:	b087      	sub	sp, #28
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	2b40      	cmp	r3, #64	@ 0x40
 80096e2:	d114      	bne.n	800970e <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, SrcAddress);
 80096e4:	4a17      	ldr	r2, [pc, #92]	@ (8009744 <LL_DMA_ConfigAddresses+0x78>)
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	4413      	add	r3, r2
 80096f2:	461a      	mov	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, DstAddress);
 80096f8:	4a12      	ldr	r2, [pc, #72]	@ (8009744 <LL_DMA_ConfigAddresses+0x78>)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	4413      	add	r3, r2
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	4413      	add	r3, r2
 8009706:	461a      	mov	r2, r3
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	6093      	str	r3, [r2, #8]
}
 800970c:	e013      	b.n	8009736 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, SrcAddress);
 800970e:	4a0d      	ldr	r2, [pc, #52]	@ (8009744 <LL_DMA_ConfigAddresses+0x78>)
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4413      	add	r3, r2
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	4413      	add	r3, r2
 800971c:	461a      	mov	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, DstAddress);
 8009722:	4a08      	ldr	r2, [pc, #32]	@ (8009744 <LL_DMA_ConfigAddresses+0x78>)
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	4413      	add	r3, r2
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	461a      	mov	r2, r3
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	4413      	add	r3, r2
 8009730:	461a      	mov	r2, r3
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	60d3      	str	r3, [r2, #12]
}
 8009736:	bf00      	nop
 8009738:	371c      	adds	r7, #28
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	08025f60 	.word	0x08025f60

08009748 <LL_DMA_SetPeriphAddress>:
{
 8009748:	b480      	push	{r7}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8009758:	4a07      	ldr	r2, [pc, #28]	@ (8009778 <LL_DMA_SetPeriphAddress+0x30>)
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	4413      	add	r3, r2
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	461a      	mov	r2, r3
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	4413      	add	r3, r2
 8009766:	461a      	mov	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6093      	str	r3, [r2, #8]
}
 800976c:	bf00      	nop
 800976e:	371c      	adds	r7, #28
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	08025f60 	.word	0x08025f60

0800977c <LL_DMA_ClearFlag_TC7>:
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTCIF7);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800978a:	60da      	str	r2, [r3, #12]
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <LL_DMA_ClearFlag_TE7>:
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTEIF7);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80097a6:	60da      	str	r2, [r3, #12]
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <LL_DMA_EnableIT_TE>:
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE);
 80097c2:	4a0c      	ldr	r2, [pc, #48]	@ (80097f4 <LL_DMA_EnableIT_TE+0x40>)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	4413      	add	r3, r2
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4413      	add	r3, r2
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4908      	ldr	r1, [pc, #32]	@ (80097f4 <LL_DMA_EnableIT_TE+0x40>)
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	440a      	add	r2, r1
 80097d8:	7812      	ldrb	r2, [r2, #0]
 80097da:	4611      	mov	r1, r2
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	440a      	add	r2, r1
 80097e0:	f043 0304 	orr.w	r3, r3, #4
 80097e4:	6013      	str	r3, [r2, #0]
}
 80097e6:	bf00      	nop
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	08025f60 	.word	0x08025f60

080097f8 <LL_DMA_EnableIT_TC>:
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8009806:	4a0c      	ldr	r2, [pc, #48]	@ (8009838 <LL_DMA_EnableIT_TC+0x40>)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	4413      	add	r3, r2
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	461a      	mov	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4413      	add	r3, r2
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4908      	ldr	r1, [pc, #32]	@ (8009838 <LL_DMA_EnableIT_TC+0x40>)
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	440a      	add	r2, r1
 800981c:	7812      	ldrb	r2, [r2, #0]
 800981e:	4611      	mov	r1, r2
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	440a      	add	r2, r1
 8009824:	f043 0310 	orr.w	r3, r3, #16
 8009828:	6013      	str	r3, [r2, #0]
}
 800982a:	bf00      	nop
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	08025f60 	.word	0x08025f60

0800983c <UpdateCRC16_XMODEM>:
    .transfer_state = SPI_TRANSFER_WAIT,
    .data_context = {0},
    .is_initialized = false
};

static uint16_t UpdateCRC16_XMODEM(uint16_t crc, uint8_t byte) {
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	460a      	mov	r2, r1
 8009846:	80fb      	strh	r3, [r7, #6]
 8009848:	4613      	mov	r3, r2
 800984a:	717b      	strb	r3, [r7, #5]
    const uint16_t polynomial = 0x1021; // CRC16 XMODEM
 800984c:	f241 0321 	movw	r3, #4129	@ 0x1021
 8009850:	81bb      	strh	r3, [r7, #12]
    crc ^= (uint16_t)byte << 8;
 8009852:	797b      	ldrb	r3, [r7, #5]
 8009854:	b21b      	sxth	r3, r3
 8009856:	021b      	lsls	r3, r3, #8
 8009858:	b21a      	sxth	r2, r3
 800985a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800985e:	4053      	eors	r3, r2
 8009860:	b21b      	sxth	r3, r3
 8009862:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]
 8009868:	e013      	b.n	8009892 <UpdateCRC16_XMODEM+0x56>
        if (crc & 0x8000) {
 800986a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800986e:	2b00      	cmp	r3, #0
 8009870:	da09      	bge.n	8009886 <UpdateCRC16_XMODEM+0x4a>
            crc = (crc << 1) ^ polynomial;
 8009872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	b21a      	sxth	r2, r3
 800987a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800987e:	4053      	eors	r3, r2
 8009880:	b21b      	sxth	r3, r3
 8009882:	80fb      	strh	r3, [r7, #6]
 8009884:	e002      	b.n	800988c <UpdateCRC16_XMODEM+0x50>
        } else {
            crc <<= 1;
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 800988c:	7bfb      	ldrb	r3, [r7, #15]
 800988e:	3301      	adds	r3, #1
 8009890:	73fb      	strb	r3, [r7, #15]
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	2b07      	cmp	r3, #7
 8009896:	d9e8      	bls.n	800986a <UpdateCRC16_XMODEM+0x2e>
        }
    }
    return crc;
 8009898:	88fb      	ldrh	r3, [r7, #6]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
	...

080098a8 <SPI_SlaveDevice_GetHandle>:

SPI_SlaveDevice_t* SPI_SlaveDevice_GetHandle(void)
{
 80098a8:	b480      	push	{r7}
 80098aa:	af00      	add	r7, sp, #0
    return &spi_device_instance;
 80098ac:	4b02      	ldr	r3, [pc, #8]	@ (80098b8 <SPI_SlaveDevice_GetHandle+0x10>)
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	24019638 	.word	0x24019638

080098bc <SPI_SlaveDevice_Init>:

Std_ReturnType SPI_SlaveDevice_Init(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
    if (spi_device_instance.is_initialized) {
 80098c0:	4b12      	ldr	r3, [pc, #72]	@ (800990c <SPI_SlaveDevice_Init+0x50>)
 80098c2:	7d1b      	ldrb	r3, [r3, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <SPI_SlaveDevice_Init+0x10>
        return E_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	e01d      	b.n	8009908 <SPI_SlaveDevice_Init+0x4c>
    }

    LL_DMA_SetMemorySize(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 80098cc:	2200      	movs	r2, #0
 80098ce:	2107      	movs	r1, #7
 80098d0:	480f      	ldr	r0, [pc, #60]	@ (8009910 <SPI_SlaveDevice_Init+0x54>)
 80098d2:	f7ff fead 	bl	8009630 <LL_DMA_SetMemorySize>
    LL_DMA_SetPeriphAddress(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, (uint32_t)&SPI_SLAVE_INSTANCE->TXDR);
 80098d6:	4a0f      	ldr	r2, [pc, #60]	@ (8009914 <SPI_SlaveDevice_Init+0x58>)
 80098d8:	2107      	movs	r1, #7
 80098da:	480d      	ldr	r0, [pc, #52]	@ (8009910 <SPI_SlaveDevice_Init+0x54>)
 80098dc:	f7ff ff34 	bl	8009748 <LL_DMA_SetPeriphAddress>

    LL_DMA_EnableIT_TC(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 80098e0:	2107      	movs	r1, #7
 80098e2:	480b      	ldr	r0, [pc, #44]	@ (8009910 <SPI_SlaveDevice_Init+0x54>)
 80098e4:	f7ff ff88 	bl	80097f8 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_TE(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 80098e8:	2107      	movs	r1, #7
 80098ea:	4809      	ldr	r0, [pc, #36]	@ (8009910 <SPI_SlaveDevice_Init+0x54>)
 80098ec:	f7ff ff62 	bl	80097b4 <LL_DMA_EnableIT_TE>

    toCM4_Init();
 80098f0:	f7f7 f8aa 	bl	8000a48 <toCM4_Init>
    spi_device_instance.data_context.is_valid = false;
 80098f4:	4b05      	ldr	r3, [pc, #20]	@ (800990c <SPI_SlaveDevice_Init+0x50>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	749a      	strb	r2, [r3, #18]
    spi_device_instance.is_initialized = true;
 80098fa:	4b04      	ldr	r3, [pc, #16]	@ (800990c <SPI_SlaveDevice_Init+0x50>)
 80098fc:	2201      	movs	r2, #1
 80098fe:	751a      	strb	r2, [r3, #20]
    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 8009900:	4b02      	ldr	r3, [pc, #8]	@ (800990c <SPI_SlaveDevice_Init+0x50>)
 8009902:	2200      	movs	r2, #0
 8009904:	701a      	strb	r2, [r3, #0]
    return E_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	bd80      	pop	{r7, pc}
 800990c:	24019638 	.word	0x24019638
 8009910:	40020000 	.word	0x40020000
 8009914:	40015020 	.word	0x40015020

08009918 <SPI_SlaveDevice_CollectData>:

Std_ReturnType SPI_SlaveDevice_CollectData(uint8_t type, uint32_t sample, uint32_t data_addr)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b088      	sub	sp, #32
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	73fb      	strb	r3, [r7, #15]
    if (!spi_device_instance.is_initialized) {
 8009926:	4b47      	ldr	r3, [pc, #284]	@ (8009a44 <SPI_SlaveDevice_CollectData+0x12c>)
 8009928:	7d1b      	ldrb	r3, [r3, #20]
 800992a:	f083 0301 	eor.w	r3, r3, #1
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <SPI_SlaveDevice_CollectData+0x20>
        return E_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e080      	b.n	8009a3a <SPI_SlaveDevice_CollectData+0x122>
    }

    if (toCM4_GetState() != TOCM4_IDLE) {
 8009938:	f7f7 f8ec 	bl	8000b14 <toCM4_GetState>
 800993c:	4603      	mov	r3, r0
 800993e:	2b03      	cmp	r3, #3
 8009940:	d001      	beq.n	8009946 <SPI_SlaveDevice_CollectData+0x2e>
        return E_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e079      	b.n	8009a3a <SPI_SlaveDevice_CollectData+0x122>
    }

    if (type > 3) {
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	2b03      	cmp	r3, #3
 800994a:	d901      	bls.n	8009950 <SPI_SlaveDevice_CollectData+0x38>
        return E_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e074      	b.n	8009a3a <SPI_SlaveDevice_CollectData+0x122>
    }

    if (sample < 1 || sample > 100000 || sample * 2 > RAM_D2_200KB_SIZE) {
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d008      	beq.n	8009968 <SPI_SlaveDevice_CollectData+0x50>
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	4a3b      	ldr	r2, [pc, #236]	@ (8009a48 <SPI_SlaveDevice_CollectData+0x130>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d804      	bhi.n	8009968 <SPI_SlaveDevice_CollectData+0x50>
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8009966:	d901      	bls.n	800996c <SPI_SlaveDevice_CollectData+0x54>
        return E_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e066      	b.n	8009a3a <SPI_SlaveDevice_CollectData+0x122>
    }

    toCM4_SetState(TOCM4_BUSY);
 800996c:	2002      	movs	r0, #2
 800996e:	f7f7 f87f 	bl	8000a70 <toCM4_SetState>
    spi_device_instance.data_context.is_valid = false;
 8009972:	4b34      	ldr	r3, [pc, #208]	@ (8009a44 <SPI_SlaveDevice_CollectData+0x12c>)
 8009974:	2200      	movs	r2, #0
 8009976:	749a      	strb	r2, [r3, #18]

    if (type == 0) {
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d159      	bne.n	8009a32 <SPI_SlaveDevice_CollectData+0x11a>
        uint16_t crc = 0x0000;
 800997e:	2300      	movs	r3, #0
 8009980:	83fb      	strh	r3, [r7, #30]
        uint16_t *data = (uint16_t *)data_addr;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	617b      	str	r3, [r7, #20]

        for (uint32_t i = 0; i < sample; i++) {
 8009986:	2300      	movs	r3, #0
 8009988:	61bb      	str	r3, [r7, #24]
 800998a:	e02b      	b.n	80099e4 <SPI_SlaveDevice_CollectData+0xcc>
            uint16_t value = (uint16_t)(i % 1001);
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	4a2f      	ldr	r2, [pc, #188]	@ (8009a4c <SPI_SlaveDevice_CollectData+0x134>)
 8009990:	fba2 1203 	umull	r1, r2, r2, r3
 8009994:	1a99      	subs	r1, r3, r2
 8009996:	0849      	lsrs	r1, r1, #1
 8009998:	440a      	add	r2, r1
 800999a:	0a52      	lsrs	r2, r2, #9
 800999c:	f240 31e9 	movw	r1, #1001	@ 0x3e9
 80099a0:	fb01 f202 	mul.w	r2, r1, r2
 80099a4:	1a9a      	subs	r2, r3, r2
 80099a6:	4613      	mov	r3, r2
 80099a8:	827b      	strh	r3, [r7, #18]
            data[i] = value;
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4413      	add	r3, r2
 80099b2:	8a7a      	ldrh	r2, [r7, #18]
 80099b4:	801a      	strh	r2, [r3, #0]
            crc = UpdateCRC16_XMODEM(crc, (uint8_t)(value & 0xFF));
 80099b6:	8a7b      	ldrh	r3, [r7, #18]
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	8bfb      	ldrh	r3, [r7, #30]
 80099bc:	4611      	mov	r1, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff ff3c 	bl	800983c <UpdateCRC16_XMODEM>
 80099c4:	4603      	mov	r3, r0
 80099c6:	83fb      	strh	r3, [r7, #30]
            crc = UpdateCRC16_XMODEM(crc, (uint8_t)((value >> 8) & 0xFF));
 80099c8:	8a7b      	ldrh	r3, [r7, #18]
 80099ca:	0a1b      	lsrs	r3, r3, #8
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	8bfb      	ldrh	r3, [r7, #30]
 80099d2:	4611      	mov	r1, r2
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff ff31 	bl	800983c <UpdateCRC16_XMODEM>
 80099da:	4603      	mov	r3, r0
 80099dc:	83fb      	strh	r3, [r7, #30]
        for (uint32_t i = 0; i < sample; i++) {
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	3301      	adds	r3, #1
 80099e2:	61bb      	str	r3, [r7, #24]
 80099e4:	69ba      	ldr	r2, [r7, #24]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d3cf      	bcc.n	800998c <SPI_SlaveDevice_CollectData+0x74>
        }

        spi_device_instance.data_context.type = type;
 80099ec:	4a15      	ldr	r2, [pc, #84]	@ (8009a44 <SPI_SlaveDevice_CollectData+0x12c>)
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	7113      	strb	r3, [r2, #4]
        spi_device_instance.data_context.sample = sample;
 80099f2:	4a14      	ldr	r2, [pc, #80]	@ (8009a44 <SPI_SlaveDevice_CollectData+0x12c>)
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	6093      	str	r3, [r2, #8]
        spi_device_instance.data_context.data_size = sample * 2;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	4a11      	ldr	r2, [pc, #68]	@ (8009a44 <SPI_SlaveDevice_CollectData+0x12c>)
 80099fe:	60d3      	str	r3, [r2, #12]
        spi_device_instance.data_context.crc = crc;
 8009a00:	4a10      	ldr	r2, [pc, #64]	@ (8009a44 <SPI_SlaveDevice_CollectData+0x12c>)
 8009a02:	8bfb      	ldrh	r3, [r7, #30]
 8009a04:	8213      	strh	r3, [r2, #16]
        spi_device_instance.data_context.is_valid = true;
 8009a06:	4b0f      	ldr	r3, [pc, #60]	@ (8009a44 <SPI_SlaveDevice_CollectData+0x12c>)
 8009a08:	2201      	movs	r2, #1
 8009a0a:	749a      	strb	r2, [r3, #18]

        if (SPI_SlaveDevice_ResetDMA(data_addr, spi_device_instance.data_context.data_size) != E_OK) {
 8009a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a44 <SPI_SlaveDevice_CollectData+0x12c>)
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f840 	bl	8009a98 <SPI_SlaveDevice_ResetDMA>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d004      	beq.n	8009a28 <SPI_SlaveDevice_CollectData+0x110>
            toCM4_SetState(TOCM4_ERROR);
 8009a1e:	2000      	movs	r0, #0
 8009a20:	f7f7 f826 	bl	8000a70 <toCM4_SetState>
            return E_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e008      	b.n	8009a3a <SPI_SlaveDevice_CollectData+0x122>
        }

        toCM4_SetState(TOCM4_READYSEND);
 8009a28:	2001      	movs	r0, #1
 8009a2a:	f7f7 f821 	bl	8000a70 <toCM4_SetState>
    } else {
        toCM4_SetState(TOCM4_IDLE);
        return E_BUSY;
    }

    return E_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	e003      	b.n	8009a3a <SPI_SlaveDevice_CollectData+0x122>
        toCM4_SetState(TOCM4_IDLE);
 8009a32:	2003      	movs	r0, #3
 8009a34:	f7f7 f81c 	bl	8000a70 <toCM4_SetState>
        return E_BUSY;
 8009a38:	2302      	movs	r3, #2
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3720      	adds	r7, #32
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	24019638 	.word	0x24019638
 8009a48:	000186a0 	.word	0x000186a0
 8009a4c:	05e1d27b 	.word	0x05e1d27b

08009a50 <SPI_SlaveDevice_GetDataInfo>:

Std_ReturnType SPI_SlaveDevice_GetDataInfo(DataProcessContext_t *context)
{
 8009a50:	b490      	push	{r4, r7}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
    if (!spi_device_instance.is_initialized || !spi_device_instance.data_context.is_valid) {
 8009a58:	4b0e      	ldr	r3, [pc, #56]	@ (8009a94 <SPI_SlaveDevice_GetDataInfo+0x44>)
 8009a5a:	7d1b      	ldrb	r3, [r3, #20]
 8009a5c:	f083 0301 	eor.w	r3, r3, #1
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <SPI_SlaveDevice_GetDataInfo+0x24>
 8009a66:	4b0b      	ldr	r3, [pc, #44]	@ (8009a94 <SPI_SlaveDevice_GetDataInfo+0x44>)
 8009a68:	7c9b      	ldrb	r3, [r3, #18]
 8009a6a:	f083 0301 	eor.w	r3, r3, #1
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <SPI_SlaveDevice_GetDataInfo+0x28>
        return E_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e007      	b.n	8009a88 <SPI_SlaveDevice_GetDataInfo+0x38>
    }

    *context = spi_device_instance.data_context;
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	4b06      	ldr	r3, [pc, #24]	@ (8009a94 <SPI_SlaveDevice_GetDataInfo+0x44>)
 8009a7c:	4614      	mov	r4, r2
 8009a7e:	3304      	adds	r3, #4
 8009a80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009a82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return E_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bc90      	pop	{r4, r7}
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	24019638 	.word	0x24019638

08009a98 <SPI_SlaveDevice_ResetDMA>:

Std_ReturnType SPI_SlaveDevice_ResetDMA(uint32_t data_addr, uint32_t data_size)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af02      	add	r7, sp, #8
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
    if (!spi_device_instance.is_initialized) {
 8009aa2:	4b22      	ldr	r3, [pc, #136]	@ (8009b2c <SPI_SlaveDevice_ResetDMA+0x94>)
 8009aa4:	7d1b      	ldrb	r3, [r3, #20]
 8009aa6:	f083 0301 	eor.w	r3, r3, #1
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <SPI_SlaveDevice_ResetDMA+0x1c>
        return E_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e036      	b.n	8009b22 <SPI_SlaveDevice_ResetDMA+0x8a>
    }

    if (toCM4_GetState() != TOCM4_BUSY && toCM4_GetState() != TOCM4_READYSEND) {
 8009ab4:	f7f7 f82e 	bl	8000b14 <toCM4_GetState>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d006      	beq.n	8009acc <SPI_SlaveDevice_ResetDMA+0x34>
 8009abe:	f7f7 f829 	bl	8000b14 <toCM4_GetState>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d001      	beq.n	8009acc <SPI_SlaveDevice_ResetDMA+0x34>
        return E_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e02a      	b.n	8009b22 <SPI_SlaveDevice_ResetDMA+0x8a>
    }

    LL_DMA_DisableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 8009acc:	2107      	movs	r1, #7
 8009ace:	4818      	ldr	r0, [pc, #96]	@ (8009b30 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009ad0:	f7ff fd8c 	bl	80095ec <LL_DMA_DisableStream>
    LL_SPI_DisableDMAReq_TX(SPI_SLAVE_INSTANCE);
 8009ad4:	4817      	ldr	r0, [pc, #92]	@ (8009b34 <SPI_SlaveDevice_ResetDMA+0x9c>)
 8009ad6:	f7ff fd57 	bl	8009588 <LL_SPI_DisableDMAReq_TX>
    LL_SPI_Disable(SPI_SLAVE_INSTANCE);
 8009ada:	4816      	ldr	r0, [pc, #88]	@ (8009b34 <SPI_SlaveDevice_ResetDMA+0x9c>)
 8009adc:	f7ff fd34 	bl	8009548 <LL_SPI_Disable>

    LL_DMA_ClearFlag_TC7(SPI_DMA_INSTANCE);
 8009ae0:	4813      	ldr	r0, [pc, #76]	@ (8009b30 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009ae2:	f7ff fe4b 	bl	800977c <LL_DMA_ClearFlag_TC7>
    LL_DMA_ClearFlag_TE7(SPI_DMA_INSTANCE);
 8009ae6:	4812      	ldr	r0, [pc, #72]	@ (8009b30 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009ae8:	f7ff fe56 	bl	8009798 <LL_DMA_ClearFlag_TE7>

    LL_DMA_ConfigAddresses(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM,
 8009aec:	2340      	movs	r3, #64	@ 0x40
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	4b11      	ldr	r3, [pc, #68]	@ (8009b38 <SPI_SlaveDevice_ResetDMA+0xa0>)
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	2107      	movs	r1, #7
 8009af6:	480e      	ldr	r0, [pc, #56]	@ (8009b30 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009af8:	f7ff fde8 	bl	80096cc <LL_DMA_ConfigAddresses>
                           data_addr, (uint32_t)&SPI_SLAVE_INSTANCE->TXDR,
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
    LL_DMA_SetDataLength(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, data_size);
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	2107      	movs	r1, #7
 8009b00:	480b      	ldr	r0, [pc, #44]	@ (8009b30 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009b02:	f7ff fdbb 	bl	800967c <LL_DMA_SetDataLength>

    LL_SPI_Enable(SPI_SLAVE_INSTANCE);
 8009b06:	480b      	ldr	r0, [pc, #44]	@ (8009b34 <SPI_SlaveDevice_ResetDMA+0x9c>)
 8009b08:	f7ff fd0e 	bl	8009528 <LL_SPI_Enable>
    LL_SPI_EnableDMAReq_TX(SPI_SLAVE_INSTANCE);
 8009b0c:	4809      	ldr	r0, [pc, #36]	@ (8009b34 <SPI_SlaveDevice_ResetDMA+0x9c>)
 8009b0e:	f7ff fd2b 	bl	8009568 <LL_SPI_EnableDMAReq_TX>
    LL_DMA_EnableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 8009b12:	2107      	movs	r1, #7
 8009b14:	4806      	ldr	r0, [pc, #24]	@ (8009b30 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009b16:	f7ff fd47 	bl	80095a8 <LL_DMA_EnableStream>

    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 8009b1a:	4b04      	ldr	r3, [pc, #16]	@ (8009b2c <SPI_SlaveDevice_ResetDMA+0x94>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	701a      	strb	r2, [r3, #0]
    return E_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	24019638 	.word	0x24019638
 8009b30:	40020000 	.word	0x40020000
 8009b34:	40015000 	.word	0x40015000
 8009b38:	40015020 	.word	0x40015020

08009b3c <SPI_SlaveDevice_Disable>:

Std_ReturnType SPI_SlaveDevice_Disable(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
    if (!spi_device_instance.is_initialized) {
 8009b40:	4b10      	ldr	r3, [pc, #64]	@ (8009b84 <SPI_SlaveDevice_Disable+0x48>)
 8009b42:	7d1b      	ldrb	r3, [r3, #20]
 8009b44:	f083 0301 	eor.w	r3, r3, #1
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <SPI_SlaveDevice_Disable+0x16>
        return E_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e016      	b.n	8009b80 <SPI_SlaveDevice_Disable+0x44>
    }

    LL_DMA_DisableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 8009b52:	2107      	movs	r1, #7
 8009b54:	480c      	ldr	r0, [pc, #48]	@ (8009b88 <SPI_SlaveDevice_Disable+0x4c>)
 8009b56:	f7ff fd49 	bl	80095ec <LL_DMA_DisableStream>
    LL_SPI_DisableDMAReq_TX(SPI_SLAVE_INSTANCE);
 8009b5a:	480c      	ldr	r0, [pc, #48]	@ (8009b8c <SPI_SlaveDevice_Disable+0x50>)
 8009b5c:	f7ff fd14 	bl	8009588 <LL_SPI_DisableDMAReq_TX>
//    LL_SPI_Disable(SPI_SLAVE_INSTANCE);

    LL_DMA_ClearFlag_TC7(SPI_DMA_INSTANCE);
 8009b60:	4809      	ldr	r0, [pc, #36]	@ (8009b88 <SPI_SlaveDevice_Disable+0x4c>)
 8009b62:	f7ff fe0b 	bl	800977c <LL_DMA_ClearFlag_TC7>
    LL_DMA_ClearFlag_TE7(SPI_DMA_INSTANCE);
 8009b66:	4808      	ldr	r0, [pc, #32]	@ (8009b88 <SPI_SlaveDevice_Disable+0x4c>)
 8009b68:	f7ff fe16 	bl	8009798 <LL_DMA_ClearFlag_TE7>

    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 8009b6c:	4b05      	ldr	r3, [pc, #20]	@ (8009b84 <SPI_SlaveDevice_Disable+0x48>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	701a      	strb	r2, [r3, #0]
    spi_device_instance.data_context.is_valid = false;
 8009b72:	4b04      	ldr	r3, [pc, #16]	@ (8009b84 <SPI_SlaveDevice_Disable+0x48>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	749a      	strb	r2, [r3, #18]
    toCM4_SetState(TOCM4_IDLE);
 8009b78:	2003      	movs	r0, #3
 8009b7a:	f7f6 ff79 	bl	8000a70 <toCM4_SetState>
    return E_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	24019638 	.word	0x24019638
 8009b88:	40020000 	.word	0x40020000
 8009b8c:	40015000 	.word	0x40015000

08009b90 <SPI_SlaveDevice_SetTransferState>:
{
    return spi_device_instance.transfer_state;
}

void SPI_SlaveDevice_SetTransferState(SPI_TransferState_t state)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	71fb      	strb	r3, [r7, #7]
    spi_device_instance.transfer_state = state;
 8009b9a:	4a04      	ldr	r2, [pc, #16]	@ (8009bac <SPI_SlaveDevice_SetTransferState+0x1c>)
 8009b9c:	79fb      	ldrb	r3, [r7, #7]
 8009b9e:	7013      	strb	r3, [r2, #0]
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	24019638 	.word	0x24019638

08009bb0 <SPI_SlaveDevice_GetCM4State>:

toCM4_State_t SPI_SlaveDevice_GetCM4State(void)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	af00      	add	r7, sp, #0
    return toCM4_GetState();
 8009bb4:	f7f6 ffae 	bl	8000b14 <toCM4_GetState>
 8009bb8:	4603      	mov	r3, r0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	bd80      	pop	{r7, pc}
	...

08009bc0 <isLeapYear>:
    uint8_t minutes;
    uint8_t seconds;
} s_WorkingTimeClock_context = {0, 0, 0, 0};

static inline uint8_t isLeapYear(uint16_t fullYear)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	80fb      	strh	r3, [r7, #6]
    return ((fullYear % 4 == 0) && ((fullYear % 100 != 0) || (fullYear % 400 == 0))) ? 1 : 0;
 8009bca:	88fb      	ldrh	r3, [r7, #6]
 8009bcc:	f003 0303 	and.w	r3, r3, #3
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d11a      	bne.n	8009c0c <isLeapYear+0x4c>
 8009bd6:	88fb      	ldrh	r3, [r7, #6]
 8009bd8:	4a10      	ldr	r2, [pc, #64]	@ (8009c1c <isLeapYear+0x5c>)
 8009bda:	fba2 1203 	umull	r1, r2, r2, r3
 8009bde:	0952      	lsrs	r2, r2, #5
 8009be0:	2164      	movs	r1, #100	@ 0x64
 8009be2:	fb01 f202 	mul.w	r2, r1, r2
 8009be6:	1a9b      	subs	r3, r3, r2
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10c      	bne.n	8009c08 <isLeapYear+0x48>
 8009bee:	88fb      	ldrh	r3, [r7, #6]
 8009bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8009c1c <isLeapYear+0x5c>)
 8009bf2:	fba2 1203 	umull	r1, r2, r2, r3
 8009bf6:	09d2      	lsrs	r2, r2, #7
 8009bf8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8009bfc:	fb01 f202 	mul.w	r2, r1, r2
 8009c00:	1a9b      	subs	r3, r3, r2
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <isLeapYear+0x4c>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e000      	b.n	8009c0e <isLeapYear+0x4e>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	b2db      	uxtb	r3, r3
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	51eb851f 	.word	0x51eb851f

08009c20 <getMaxDays>:

static inline uint8_t getMaxDays(uint8_t month, uint16_t fullYear)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	460a      	mov	r2, r1
 8009c2a:	71fb      	strb	r3, [r7, #7]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	80bb      	strh	r3, [r7, #4]
    static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    if (month == 2) {
 8009c30:	79fb      	ldrb	r3, [r7, #7]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d107      	bne.n	8009c46 <getMaxDays+0x26>
        return 28 + isLeapYear(fullYear);
 8009c36:	88bb      	ldrh	r3, [r7, #4]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7ff ffc1 	bl	8009bc0 <isLeapYear>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	331c      	adds	r3, #28
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	e003      	b.n	8009c4e <getMaxDays+0x2e>
    } else {
        return daysInMonth[month - 1];
 8009c46:	79fb      	ldrb	r3, [r7, #7]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	4a03      	ldr	r2, [pc, #12]	@ (8009c58 <getMaxDays+0x38>)
 8009c4c:	5cd3      	ldrb	r3, [r2, r3]
    }
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	08025f68 	.word	0x08025f68

08009c5c <DateTimeToEpoch>:

static uint32_t DateTimeToEpoch(const s_DateTime *dt)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
    uint32_t days = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	617b      	str	r3, [r7, #20]
    uint16_t fullYear = 2000 + dt->year;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	789b      	ldrb	r3, [r3, #2]
 8009c6c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8009c70:	81fb      	strh	r3, [r7, #14]

    for (uint16_t year = 2000; year < fullYear; year++)
 8009c72:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8009c76:	827b      	strh	r3, [r7, #18]
 8009c78:	e00d      	b.n	8009c96 <DateTimeToEpoch+0x3a>
    {
        days += 365 + isLeapYear(year);
 8009c7a:	8a7b      	ldrh	r3, [r7, #18]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7ff ff9f 	bl	8009bc0 <isLeapYear>
 8009c82:	4603      	mov	r3, r0
 8009c84:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 8009c88:	461a      	mov	r2, r3
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	617b      	str	r3, [r7, #20]
    for (uint16_t year = 2000; year < fullYear; year++)
 8009c90:	8a7b      	ldrh	r3, [r7, #18]
 8009c92:	3301      	adds	r3, #1
 8009c94:	827b      	strh	r3, [r7, #18]
 8009c96:	8a7a      	ldrh	r2, [r7, #18]
 8009c98:	89fb      	ldrh	r3, [r7, #14]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d3ed      	bcc.n	8009c7a <DateTimeToEpoch+0x1e>
    }
    for (uint8_t m = 1; m < dt->month; m++)
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	747b      	strb	r3, [r7, #17]
 8009ca2:	e00d      	b.n	8009cc0 <DateTimeToEpoch+0x64>
    {
        days += getMaxDays(m, fullYear);
 8009ca4:	89fa      	ldrh	r2, [r7, #14]
 8009ca6:	7c7b      	ldrb	r3, [r7, #17]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7ff ffb8 	bl	8009c20 <getMaxDays>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	617b      	str	r3, [r7, #20]
    for (uint8_t m = 1; m < dt->month; m++)
 8009cba:	7c7b      	ldrb	r3, [r7, #17]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	747b      	strb	r3, [r7, #17]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	785b      	ldrb	r3, [r3, #1]
 8009cc4:	7c7a      	ldrb	r2, [r7, #17]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d3ec      	bcc.n	8009ca4 <DateTimeToEpoch+0x48>
    }
    days += dt->day - 1;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	617b      	str	r3, [r7, #20]

    return days * 86400UL + dt->hour * 3600UL + dt->minute * 60UL + dt->second;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	4a0d      	ldr	r2, [pc, #52]	@ (8009d10 <DateTimeToEpoch+0xb4>)
 8009cdc:	fb03 f202 	mul.w	r2, r3, r2
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	78db      	ldrb	r3, [r3, #3]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8009cea:	fb01 f303 	mul.w	r3, r1, r3
 8009cee:	441a      	add	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	791b      	ldrb	r3, [r3, #4]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	011b      	lsls	r3, r3, #4
 8009cfa:	1a5b      	subs	r3, r3, r1
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	7952      	ldrb	r2, [r2, #5]
 8009d04:	4413      	add	r3, r2
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	00015180 	.word	0x00015180

08009d14 <EpochToDateTime>:

void EpochToDateTime(uint32_t epoch, s_DateTime *dt)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
    uint32_t days = epoch / 86400;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a3c      	ldr	r2, [pc, #240]	@ (8009e14 <EpochToDateTime+0x100>)
 8009d22:	fba2 2303 	umull	r2, r3, r2, r3
 8009d26:	0c1b      	lsrs	r3, r3, #16
 8009d28:	617b      	str	r3, [r7, #20]
    uint32_t remSeconds = epoch % 86400;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a39      	ldr	r2, [pc, #228]	@ (8009e14 <EpochToDateTime+0x100>)
 8009d2e:	fba2 1203 	umull	r1, r2, r2, r3
 8009d32:	0c12      	lsrs	r2, r2, #16
 8009d34:	4938      	ldr	r1, [pc, #224]	@ (8009e18 <EpochToDateTime+0x104>)
 8009d36:	fb01 f202 	mul.w	r2, r1, r2
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]

    dt->hour   = remSeconds / 3600;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4a36      	ldr	r2, [pc, #216]	@ (8009e1c <EpochToDateTime+0x108>)
 8009d42:	fba2 2303 	umull	r2, r3, r2, r3
 8009d46:	0adb      	lsrs	r3, r3, #11
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	70da      	strb	r2, [r3, #3]
    remSeconds %= 3600;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4a32      	ldr	r2, [pc, #200]	@ (8009e1c <EpochToDateTime+0x108>)
 8009d52:	fba2 1203 	umull	r1, r2, r2, r3
 8009d56:	0ad2      	lsrs	r2, r2, #11
 8009d58:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8009d5c:	fb01 f202 	mul.w	r2, r1, r2
 8009d60:	1a9b      	subs	r3, r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]
    dt->minute = remSeconds / 60;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4a2e      	ldr	r2, [pc, #184]	@ (8009e20 <EpochToDateTime+0x10c>)
 8009d68:	fba2 2303 	umull	r2, r3, r2, r3
 8009d6c:	095b      	lsrs	r3, r3, #5
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	711a      	strb	r2, [r3, #4]
    dt->second = remSeconds % 60;
 8009d74:	68f9      	ldr	r1, [r7, #12]
 8009d76:	4b2a      	ldr	r3, [pc, #168]	@ (8009e20 <EpochToDateTime+0x10c>)
 8009d78:	fba3 2301 	umull	r2, r3, r3, r1
 8009d7c:	095a      	lsrs	r2, r3, #5
 8009d7e:	4613      	mov	r3, r2
 8009d80:	011b      	lsls	r3, r3, #4
 8009d82:	1a9b      	subs	r3, r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	1aca      	subs	r2, r1, r3
 8009d88:	b2d2      	uxtb	r2, r2
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	715a      	strb	r2, [r3, #5]

    uint16_t year = 2000;
 8009d8e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8009d92:	827b      	strh	r3, [r7, #18]
    while (1)
    {
        uint16_t daysInYear = 365 + isLeapYear(year);
 8009d94:	8a7b      	ldrh	r3, [r7, #18]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff ff12 	bl	8009bc0 <isLeapYear>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 8009da2:	817b      	strh	r3, [r7, #10]
        if (days >= daysInYear)
 8009da4:	897b      	ldrh	r3, [r7, #10]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d307      	bcc.n	8009dbc <EpochToDateTime+0xa8>
        {
            days -= daysInYear;
 8009dac:	897b      	ldrh	r3, [r7, #10]
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	617b      	str	r3, [r7, #20]
            year++;
 8009db4:	8a7b      	ldrh	r3, [r7, #18]
 8009db6:	3301      	adds	r3, #1
 8009db8:	827b      	strh	r3, [r7, #18]
    {
 8009dba:	e7eb      	b.n	8009d94 <EpochToDateTime+0x80>
        } else
        {
            break;
 8009dbc:	bf00      	nop
        }
    }
    dt->year = year - 2000;
 8009dbe:	8a7b      	ldrh	r3, [r7, #18]
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	3330      	adds	r3, #48	@ 0x30
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	709a      	strb	r2, [r3, #2]

    uint8_t month = 1;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	747b      	strb	r3, [r7, #17]
    while (1)
    {
        uint8_t dim = getMaxDays(month, year);
 8009dce:	8a7a      	ldrh	r2, [r7, #18]
 8009dd0:	7c7b      	ldrb	r3, [r7, #17]
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7ff ff23 	bl	8009c20 <getMaxDays>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	727b      	strb	r3, [r7, #9]
        if (days >= dim)
 8009dde:	7a7b      	ldrb	r3, [r7, #9]
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d307      	bcc.n	8009df6 <EpochToDateTime+0xe2>
        {
            days -= dim;
 8009de6:	7a7b      	ldrb	r3, [r7, #9]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	617b      	str	r3, [r7, #20]
            month++;
 8009dee:	7c7b      	ldrb	r3, [r7, #17]
 8009df0:	3301      	adds	r3, #1
 8009df2:	747b      	strb	r3, [r7, #17]
    {
 8009df4:	e7eb      	b.n	8009dce <EpochToDateTime+0xba>
        }
        else
        {
            break;
 8009df6:	bf00      	nop
        }
    }
    dt->month = month;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	7c7a      	ldrb	r2, [r7, #17]
 8009dfc:	705a      	strb	r2, [r3, #1]
    dt->day = days + 1;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	3301      	adds	r3, #1
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	701a      	strb	r2, [r3, #0]
}
 8009e0a:	bf00      	nop
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	c22e4507 	.word	0xc22e4507
 8009e18:	00015180 	.word	0x00015180
 8009e1c:	91a2b3c5 	.word	0x91a2b3c5
 8009e20:	88888889 	.word	0x88888889

08009e24 <Utils_SoftTime_Update>:

void Utils_SoftTime_Update(void) {
 8009e24:	b590      	push	{r4, r7, lr}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
    // Update RTC
    if (++s_RealTimeClock_context.second >= 60) {
 8009e2a:	4b94      	ldr	r3, [pc, #592]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e2c:	795b      	ldrb	r3, [r3, #5]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	4b92      	ldr	r3, [pc, #584]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e34:	715a      	strb	r2, [r3, #5]
 8009e36:	4b91      	ldr	r3, [pc, #580]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e38:	795b      	ldrb	r3, [r3, #5]
 8009e3a:	2b3b      	cmp	r3, #59	@ 0x3b
 8009e3c:	d94c      	bls.n	8009ed8 <Utils_SoftTime_Update+0xb4>
        s_RealTimeClock_context.second = 0;
 8009e3e:	4b8f      	ldr	r3, [pc, #572]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	715a      	strb	r2, [r3, #5]
        if (++s_RealTimeClock_context.minute >= 60) {
 8009e44:	4b8d      	ldr	r3, [pc, #564]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e46:	791b      	ldrb	r3, [r3, #4]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	4b8b      	ldr	r3, [pc, #556]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e4e:	711a      	strb	r2, [r3, #4]
 8009e50:	4b8a      	ldr	r3, [pc, #552]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e52:	791b      	ldrb	r3, [r3, #4]
 8009e54:	2b3b      	cmp	r3, #59	@ 0x3b
 8009e56:	d93f      	bls.n	8009ed8 <Utils_SoftTime_Update+0xb4>
            s_RealTimeClock_context.minute = 0;
 8009e58:	4b88      	ldr	r3, [pc, #544]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	711a      	strb	r2, [r3, #4]
            if (++s_RealTimeClock_context.hour >= 24) {
 8009e5e:	4b87      	ldr	r3, [pc, #540]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e60:	78db      	ldrb	r3, [r3, #3]
 8009e62:	3301      	adds	r3, #1
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	4b85      	ldr	r3, [pc, #532]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e68:	70da      	strb	r2, [r3, #3]
 8009e6a:	4b84      	ldr	r3, [pc, #528]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e6c:	78db      	ldrb	r3, [r3, #3]
 8009e6e:	2b17      	cmp	r3, #23
 8009e70:	d932      	bls.n	8009ed8 <Utils_SoftTime_Update+0xb4>
                s_RealTimeClock_context.hour = 0;
 8009e72:	4b82      	ldr	r3, [pc, #520]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	70da      	strb	r2, [r3, #3]
                if (++s_RealTimeClock_context.day > getMaxDays(s_RealTimeClock_context.month, s_RealTimeClock_context.year)) {
 8009e78:	4b80      	ldr	r3, [pc, #512]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	4b7e      	ldr	r3, [pc, #504]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	4b7d      	ldr	r3, [pc, #500]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e86:	781c      	ldrb	r4, [r3, #0]
 8009e88:	4b7c      	ldr	r3, [pc, #496]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e8a:	785b      	ldrb	r3, [r3, #1]
 8009e8c:	4a7b      	ldr	r2, [pc, #492]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009e8e:	7892      	ldrb	r2, [r2, #2]
 8009e90:	4611      	mov	r1, r2
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7ff fec4 	bl	8009c20 <getMaxDays>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	429c      	cmp	r4, r3
 8009e9c:	d91c      	bls.n	8009ed8 <Utils_SoftTime_Update+0xb4>
                    s_RealTimeClock_context.day = 1;
 8009e9e:	4b77      	ldr	r3, [pc, #476]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	701a      	strb	r2, [r3, #0]
                    if (++s_RealTimeClock_context.month > 12) {
 8009ea4:	4b75      	ldr	r3, [pc, #468]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009ea6:	785b      	ldrb	r3, [r3, #1]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	4b73      	ldr	r3, [pc, #460]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009eae:	705a      	strb	r2, [r3, #1]
 8009eb0:	4b72      	ldr	r3, [pc, #456]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009eb2:	785b      	ldrb	r3, [r3, #1]
 8009eb4:	2b0c      	cmp	r3, #12
 8009eb6:	d90f      	bls.n	8009ed8 <Utils_SoftTime_Update+0xb4>
                        s_RealTimeClock_context.month = 1;
 8009eb8:	4b70      	ldr	r3, [pc, #448]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	705a      	strb	r2, [r3, #1]
                        if (++s_RealTimeClock_context.year > 99) {
 8009ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009ec0:	789b      	ldrb	r3, [r3, #2]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009ec8:	709a      	strb	r2, [r3, #2]
 8009eca:	4b6c      	ldr	r3, [pc, #432]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009ecc:	789b      	ldrb	r3, [r3, #2]
 8009ece:	2b63      	cmp	r3, #99	@ 0x63
 8009ed0:	d902      	bls.n	8009ed8 <Utils_SoftTime_Update+0xb4>
                            s_RealTimeClock_context.year = 0;
 8009ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	709a      	strb	r2, [r3, #2]
                }
            }
        }
    }

    if (++s_WorkingTimeClock_context.seconds >= 60) {
 8009ed8:	4b69      	ldr	r3, [pc, #420]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009eda:	799b      	ldrb	r3, [r3, #6]
 8009edc:	3301      	adds	r3, #1
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	4b67      	ldr	r3, [pc, #412]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009ee2:	719a      	strb	r2, [r3, #6]
 8009ee4:	4b66      	ldr	r3, [pc, #408]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009ee6:	799b      	ldrb	r3, [r3, #6]
 8009ee8:	2b3b      	cmp	r3, #59	@ 0x3b
 8009eea:	d921      	bls.n	8009f30 <Utils_SoftTime_Update+0x10c>
        s_WorkingTimeClock_context.seconds = 0;
 8009eec:	4b64      	ldr	r3, [pc, #400]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	719a      	strb	r2, [r3, #6]
        if (++s_WorkingTimeClock_context.minutes >= 60) {
 8009ef2:	4b63      	ldr	r3, [pc, #396]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009ef4:	795b      	ldrb	r3, [r3, #5]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	4b61      	ldr	r3, [pc, #388]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009efc:	715a      	strb	r2, [r3, #5]
 8009efe:	4b60      	ldr	r3, [pc, #384]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009f00:	795b      	ldrb	r3, [r3, #5]
 8009f02:	2b3b      	cmp	r3, #59	@ 0x3b
 8009f04:	d914      	bls.n	8009f30 <Utils_SoftTime_Update+0x10c>
            s_WorkingTimeClock_context.minutes = 0;
 8009f06:	4b5e      	ldr	r3, [pc, #376]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	715a      	strb	r2, [r3, #5]
            if (++s_WorkingTimeClock_context.hours >= 24) {
 8009f0c:	4b5c      	ldr	r3, [pc, #368]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009f0e:	791b      	ldrb	r3, [r3, #4]
 8009f10:	3301      	adds	r3, #1
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	4b5a      	ldr	r3, [pc, #360]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009f16:	711a      	strb	r2, [r3, #4]
 8009f18:	4b59      	ldr	r3, [pc, #356]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009f1a:	791b      	ldrb	r3, [r3, #4]
 8009f1c:	2b17      	cmp	r3, #23
 8009f1e:	d907      	bls.n	8009f30 <Utils_SoftTime_Update+0x10c>
                s_WorkingTimeClock_context.hours = 0;
 8009f20:	4b57      	ldr	r3, [pc, #348]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	711a      	strb	r2, [r3, #4]
                s_WorkingTimeClock_context.days++;
 8009f26:	4b56      	ldr	r3, [pc, #344]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	4a54      	ldr	r2, [pc, #336]	@ (800a080 <Utils_SoftTime_Update+0x25c>)
 8009f2e:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // Cronjob
    uint32_t current_epoch = Utils_GetEpoch();
 8009f30:	f000 f9d8 	bl	800a2e4 <Utils_GetEpoch>
 8009f34:	60b8      	str	r0, [r7, #8]
    uint8_t second_changed = (last_second != s_RealTimeClock_context.second);
 8009f36:	4b51      	ldr	r3, [pc, #324]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009f38:	795a      	ldrb	r2, [r3, #5]
 8009f3a:	4b52      	ldr	r3, [pc, #328]	@ (800a084 <Utils_SoftTime_Update+0x260>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	bf14      	ite	ne
 8009f42:	2301      	movne	r3, #1
 8009f44:	2300      	moveq	r3, #0
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	71fb      	strb	r3, [r7, #7]
    uint8_t minute_changed = (last_minute != s_RealTimeClock_context.minute);
 8009f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009f4c:	791a      	ldrb	r2, [r3, #4]
 8009f4e:	4b4e      	ldr	r3, [pc, #312]	@ (800a088 <Utils_SoftTime_Update+0x264>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	bf14      	ite	ne
 8009f56:	2301      	movne	r3, #1
 8009f58:	2300      	moveq	r3, #0
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	71bb      	strb	r3, [r7, #6]
    uint8_t hour_changed = (last_hour != s_RealTimeClock_context.hour);
 8009f5e:	4b47      	ldr	r3, [pc, #284]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009f60:	78da      	ldrb	r2, [r3, #3]
 8009f62:	4b4a      	ldr	r3, [pc, #296]	@ (800a08c <Utils_SoftTime_Update+0x268>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	bf14      	ite	ne
 8009f6a:	2301      	movne	r3, #1
 8009f6c:	2300      	moveq	r3, #0
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	717b      	strb	r3, [r7, #5]

    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 8009f72:	2300      	movs	r3, #0
 8009f74:	73fb      	strb	r3, [r7, #15]
 8009f76:	e109      	b.n	800a18c <Utils_SoftTime_Update+0x368>
        s_Cronjob *job = &s_Cronjob_List[i];
 8009f78:	7bfa      	ldrb	r2, [r7, #15]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	00db      	lsls	r3, r3, #3
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4a43      	ldr	r2, [pc, #268]	@ (800a090 <Utils_SoftTime_Update+0x26c>)
 8009f84:	4413      	add	r3, r2
 8009f86:	603b      	str	r3, [r7, #0]
        if (!job->active || !job->callback) continue;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 80f3 	beq.w	800a178 <Utils_SoftTime_Update+0x354>
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 80ee 	beq.w	800a178 <Utils_SoftTime_Update+0x354>

        switch (job->type) {
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	785b      	ldrb	r3, [r3, #1]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d05e      	beq.n	800a062 <Utils_SoftTime_Update+0x23e>
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	f300 80ee 	bgt.w	800a186 <Utils_SoftTime_Update+0x362>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d002      	beq.n	8009fb4 <Utils_SoftTime_Update+0x190>
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d032      	beq.n	800a018 <Utils_SoftTime_Update+0x1f4>
 8009fb2:	e0e8      	b.n	800a186 <Utils_SoftTime_Update+0x362>
            case CRON_TYPE_MOMENT:
                if (second_changed && s_RealTimeClock_context.hour == job->hour &&
 8009fb4:	79fb      	ldrb	r3, [r7, #7]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 80e0 	beq.w	800a17c <Utils_SoftTime_Update+0x358>
 8009fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009fbe:	78da      	ldrb	r2, [r3, #3]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	789b      	ldrb	r3, [r3, #2]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	f040 80d9 	bne.w	800a17c <Utils_SoftTime_Update+0x358>
                    s_RealTimeClock_context.minute == job->minute &&
 8009fca:	4b2c      	ldr	r3, [pc, #176]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009fcc:	791a      	ldrb	r2, [r3, #4]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	78db      	ldrb	r3, [r3, #3]
                if (second_changed && s_RealTimeClock_context.hour == job->hour &&
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	f040 80d2 	bne.w	800a17c <Utils_SoftTime_Update+0x358>
                    s_RealTimeClock_context.second == job->second) {
 8009fd8:	4b28      	ldr	r3, [pc, #160]	@ (800a07c <Utils_SoftTime_Update+0x258>)
 8009fda:	795a      	ldrb	r2, [r3, #5]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	791b      	ldrb	r3, [r3, #4]
                    s_RealTimeClock_context.minute == job->minute &&
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	f040 80cb 	bne.w	800a17c <Utils_SoftTime_Update+0x358>
                	job->callback(job->context);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	6a12      	ldr	r2, [r2, #32]
 8009fee:	4610      	mov	r0, r2
 8009ff0:	4798      	blx	r3
                    if (job->repeat_count > 0 && --job->remaining == 0) {
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 80c0 	beq.w	800a17c <Utils_SoftTime_Update+0x358>
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	1e5a      	subs	r2, r3, #1
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	619a      	str	r2, [r3, #24]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f040 80b6 	bne.w	800a17c <Utils_SoftTime_Update+0x358>
                        job->active = 0;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2200      	movs	r2, #0
 800a014:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 800a016:	e0b1      	b.n	800a17c <Utils_SoftTime_Update+0x358>

            case CRON_TYPE_COUNTDOWN:
                if (current_epoch - job->last_trigger >= job->interval) {
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	1ad2      	subs	r2, r2, r3
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	429a      	cmp	r2, r3
 800a026:	f0c0 80ab 	bcc.w	800a180 <Utils_SoftTime_Update+0x35c>
                	job->callback(job->context);
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	6a12      	ldr	r2, [r2, #32]
 800a032:	4610      	mov	r0, r2
 800a034:	4798      	blx	r3
                    job->last_trigger = current_epoch;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	60da      	str	r2, [r3, #12]
                    if (job->repeat_count > 0 && --job->remaining == 0) {
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 809d 	beq.w	800a180 <Utils_SoftTime_Update+0x35c>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	1e5a      	subs	r2, r3, #1
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	619a      	str	r2, [r3, #24]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	2b00      	cmp	r3, #0
 800a056:	f040 8093 	bne.w	800a180 <Utils_SoftTime_Update+0x35c>
                        job->active = 0;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2200      	movs	r2, #0
 800a05e:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 800a060:	e08e      	b.n	800a180 <Utils_SoftTime_Update+0x35c>

            case CRON_TYPE_EVERY:
                switch (job->every_unit) {
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	7c1b      	ldrb	r3, [r3, #16]
 800a066:	2b02      	cmp	r3, #2
 800a068:	d05c      	beq.n	800a124 <Utils_SoftTime_Update+0x300>
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	f300 808a 	bgt.w	800a184 <Utils_SoftTime_Update+0x360>
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00f      	beq.n	800a094 <Utils_SoftTime_Update+0x270>
 800a074:	2b01      	cmp	r3, #1
 800a076:	d031      	beq.n	800a0dc <Utils_SoftTime_Update+0x2b8>
                                job->active = 0;
                            }
                        }
                        break;
                }
                break;
 800a078:	e084      	b.n	800a184 <Utils_SoftTime_Update+0x360>
 800a07a:	bf00      	nop
 800a07c:	240148c8 	.word	0x240148c8
 800a080:	240197b8 	.word	0x240197b8
 800a084:	240148ce 	.word	0x240148ce
 800a088:	240148cf 	.word	0x240148cf
 800a08c:	240148d0 	.word	0x240148d0
 800a090:	24019650 	.word	0x24019650
                        if (hour_changed && s_RealTimeClock_context.hour == job->hour) {
 800a094:	797b      	ldrb	r3, [r7, #5]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d068      	beq.n	800a16c <Utils_SoftTime_Update+0x348>
 800a09a:	4b46      	ldr	r3, [pc, #280]	@ (800a1b4 <Utils_SoftTime_Update+0x390>)
 800a09c:	78da      	ldrb	r2, [r3, #3]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	789b      	ldrb	r3, [r3, #2]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d162      	bne.n	800a16c <Utils_SoftTime_Update+0x348>
                        	job->callback(job->context);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	6a12      	ldr	r2, [r2, #32]
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	4798      	blx	r3
                            job->last_triggered_unit = job->hour;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	789a      	ldrb	r2, [r3, #2]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	745a      	strb	r2, [r3, #17]
                            if (job->repeat_count > 0 && --job->remaining == 0) {
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d054      	beq.n	800a16c <Utils_SoftTime_Update+0x348>
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	1e5a      	subs	r2, r3, #1
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	619a      	str	r2, [r3, #24]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d14b      	bne.n	800a16c <Utils_SoftTime_Update+0x348>
                                job->active = 0;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	701a      	strb	r2, [r3, #0]
                        break;
 800a0da:	e047      	b.n	800a16c <Utils_SoftTime_Update+0x348>
                        if (minute_changed && s_RealTimeClock_context.minute == job->minute) {
 800a0dc:	79bb      	ldrb	r3, [r7, #6]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d046      	beq.n	800a170 <Utils_SoftTime_Update+0x34c>
 800a0e2:	4b34      	ldr	r3, [pc, #208]	@ (800a1b4 <Utils_SoftTime_Update+0x390>)
 800a0e4:	791a      	ldrb	r2, [r3, #4]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	78db      	ldrb	r3, [r3, #3]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d140      	bne.n	800a170 <Utils_SoftTime_Update+0x34c>
                        	job->callback(job->context);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	6a12      	ldr	r2, [r2, #32]
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	4798      	blx	r3
                            job->last_triggered_unit = job->minute;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	78da      	ldrb	r2, [r3, #3]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	745a      	strb	r2, [r3, #17]
                            if (job->repeat_count > 0 && --job->remaining == 0) {
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d032      	beq.n	800a170 <Utils_SoftTime_Update+0x34c>
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	1e5a      	subs	r2, r3, #1
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	619a      	str	r2, [r3, #24]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d129      	bne.n	800a170 <Utils_SoftTime_Update+0x34c>
                                job->active = 0;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
                        break;
 800a122:	e025      	b.n	800a170 <Utils_SoftTime_Update+0x34c>
                        if (second_changed && s_RealTimeClock_context.second == job->second) {
 800a124:	79fb      	ldrb	r3, [r7, #7]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d024      	beq.n	800a174 <Utils_SoftTime_Update+0x350>
 800a12a:	4b22      	ldr	r3, [pc, #136]	@ (800a1b4 <Utils_SoftTime_Update+0x390>)
 800a12c:	795a      	ldrb	r2, [r3, #5]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	791b      	ldrb	r3, [r3, #4]
 800a132:	429a      	cmp	r2, r3
 800a134:	d11e      	bne.n	800a174 <Utils_SoftTime_Update+0x350>
                        	job->callback(job->context);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	6a12      	ldr	r2, [r2, #32]
 800a13e:	4610      	mov	r0, r2
 800a140:	4798      	blx	r3
                            job->last_triggered_unit = job->second;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	791a      	ldrb	r2, [r3, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	745a      	strb	r2, [r3, #17]
                            if (job->repeat_count > 0 && --job->remaining == 0) {
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d010      	beq.n	800a174 <Utils_SoftTime_Update+0x350>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	1e5a      	subs	r2, r3, #1
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	619a      	str	r2, [r3, #24]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d107      	bne.n	800a174 <Utils_SoftTime_Update+0x350>
                                job->active = 0;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
                        break;
 800a16a:	e003      	b.n	800a174 <Utils_SoftTime_Update+0x350>
                        break;
 800a16c:	bf00      	nop
 800a16e:	e009      	b.n	800a184 <Utils_SoftTime_Update+0x360>
                        break;
 800a170:	bf00      	nop
 800a172:	e007      	b.n	800a184 <Utils_SoftTime_Update+0x360>
                        break;
 800a174:	bf00      	nop
                break;
 800a176:	e005      	b.n	800a184 <Utils_SoftTime_Update+0x360>
        if (!job->active || !job->callback) continue;
 800a178:	bf00      	nop
 800a17a:	e004      	b.n	800a186 <Utils_SoftTime_Update+0x362>
                break;
 800a17c:	bf00      	nop
 800a17e:	e002      	b.n	800a186 <Utils_SoftTime_Update+0x362>
                break;
 800a180:	bf00      	nop
 800a182:	e000      	b.n	800a186 <Utils_SoftTime_Update+0x362>
                break;
 800a184:	bf00      	nop
    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	3301      	adds	r3, #1
 800a18a:	73fb      	strb	r3, [r7, #15]
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	2b09      	cmp	r3, #9
 800a190:	f67f aef2 	bls.w	8009f78 <Utils_SoftTime_Update+0x154>
        }
    }

    last_second = s_RealTimeClock_context.second;
 800a194:	4b07      	ldr	r3, [pc, #28]	@ (800a1b4 <Utils_SoftTime_Update+0x390>)
 800a196:	795a      	ldrb	r2, [r3, #5]
 800a198:	4b07      	ldr	r3, [pc, #28]	@ (800a1b8 <Utils_SoftTime_Update+0x394>)
 800a19a:	701a      	strb	r2, [r3, #0]
    last_minute = s_RealTimeClock_context.minute;
 800a19c:	4b05      	ldr	r3, [pc, #20]	@ (800a1b4 <Utils_SoftTime_Update+0x390>)
 800a19e:	791a      	ldrb	r2, [r3, #4]
 800a1a0:	4b06      	ldr	r3, [pc, #24]	@ (800a1bc <Utils_SoftTime_Update+0x398>)
 800a1a2:	701a      	strb	r2, [r3, #0]
    last_hour = s_RealTimeClock_context.hour;
 800a1a4:	4b03      	ldr	r3, [pc, #12]	@ (800a1b4 <Utils_SoftTime_Update+0x390>)
 800a1a6:	78da      	ldrb	r2, [r3, #3]
 800a1a8:	4b05      	ldr	r3, [pc, #20]	@ (800a1c0 <Utils_SoftTime_Update+0x39c>)
 800a1aa:	701a      	strb	r2, [r3, #0]
}
 800a1ac:	bf00      	nop
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd90      	pop	{r4, r7, pc}
 800a1b4:	240148c8 	.word	0x240148c8
 800a1b8:	240148ce 	.word	0x240148ce
 800a1bc:	240148cf 	.word	0x240148cf
 800a1c0:	240148d0 	.word	0x240148d0

0800a1c4 <Utils_SoftTime_Init>:

void Utils_SoftTime_Init(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.year = 0;  // 2000
 800a1ca:	4b1d      	ldr	r3, [pc, #116]	@ (800a240 <Utils_SoftTime_Init+0x7c>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	709a      	strb	r2, [r3, #2]
    s_RealTimeClock_context.month = 1; // January
 800a1d0:	4b1b      	ldr	r3, [pc, #108]	@ (800a240 <Utils_SoftTime_Init+0x7c>)
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	705a      	strb	r2, [r3, #1]
    s_RealTimeClock_context.day = 1;
 800a1d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a240 <Utils_SoftTime_Init+0x7c>)
 800a1d8:	2201      	movs	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]
    s_RealTimeClock_context.hour = 0;
 800a1dc:	4b18      	ldr	r3, [pc, #96]	@ (800a240 <Utils_SoftTime_Init+0x7c>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	70da      	strb	r2, [r3, #3]
    s_RealTimeClock_context.minute = 0;
 800a1e2:	4b17      	ldr	r3, [pc, #92]	@ (800a240 <Utils_SoftTime_Init+0x7c>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	711a      	strb	r2, [r3, #4]
    s_RealTimeClock_context.second = 0;
 800a1e8:	4b15      	ldr	r3, [pc, #84]	@ (800a240 <Utils_SoftTime_Init+0x7c>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	715a      	strb	r2, [r3, #5]

    s_WorkingTimeClock_context.days = 0;
 800a1ee:	4b15      	ldr	r3, [pc, #84]	@ (800a244 <Utils_SoftTime_Init+0x80>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
    s_WorkingTimeClock_context.hours = 0;
 800a1f4:	4b13      	ldr	r3, [pc, #76]	@ (800a244 <Utils_SoftTime_Init+0x80>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	711a      	strb	r2, [r3, #4]
    s_WorkingTimeClock_context.minutes = 0;
 800a1fa:	4b12      	ldr	r3, [pc, #72]	@ (800a244 <Utils_SoftTime_Init+0x80>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	715a      	strb	r2, [r3, #5]
    s_WorkingTimeClock_context.seconds = 0;
 800a200:	4b10      	ldr	r3, [pc, #64]	@ (800a244 <Utils_SoftTime_Init+0x80>)
 800a202:	2200      	movs	r2, #0
 800a204:	719a      	strb	r2, [r3, #6]

    memset(s_Cronjob_List, 0, sizeof(s_Cronjob_List));
 800a206:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800a20a:	2100      	movs	r1, #0
 800a20c:	480e      	ldr	r0, [pc, #56]	@ (800a248 <Utils_SoftTime_Init+0x84>)
 800a20e:	f017 ff3e 	bl	802208e <memset>
    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 800a212:	2300      	movs	r3, #0
 800a214:	71fb      	strb	r3, [r7, #7]
 800a216:	e00b      	b.n	800a230 <Utils_SoftTime_Init+0x6c>
            s_Cronjob_List[i].active = 0;
 800a218:	79fa      	ldrb	r2, [r7, #7]
 800a21a:	490b      	ldr	r1, [pc, #44]	@ (800a248 <Utils_SoftTime_Init+0x84>)
 800a21c:	4613      	mov	r3, r2
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	4413      	add	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	440b      	add	r3, r1
 800a226:	2200      	movs	r2, #0
 800a228:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	3301      	adds	r3, #1
 800a22e:	71fb      	strb	r3, [r7, #7]
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	2b09      	cmp	r3, #9
 800a234:	d9f0      	bls.n	800a218 <Utils_SoftTime_Init+0x54>
    }
}
 800a236:	bf00      	nop
 800a238:	bf00      	nop
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	240148c8 	.word	0x240148c8
 800a244:	240197b8 	.word	0x240197b8
 800a248:	24019650 	.word	0x24019650

0800a24c <Utils_GetRTC>:

// ================= Helper Functions =================
void Utils_GetRTC(s_DateTime *dateTime)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
    if (dateTime == NULL) return;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d006      	beq.n	800a268 <Utils_GetRTC+0x1c>
    *dateTime = s_RealTimeClock_context;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a05      	ldr	r2, [pc, #20]	@ (800a274 <Utils_GetRTC+0x28>)
 800a25e:	6810      	ldr	r0, [r2, #0]
 800a260:	6018      	str	r0, [r3, #0]
 800a262:	8892      	ldrh	r2, [r2, #4]
 800a264:	809a      	strh	r2, [r3, #4]
 800a266:	e000      	b.n	800a26a <Utils_GetRTC+0x1e>
    if (dateTime == NULL) return;
 800a268:	bf00      	nop
}
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	240148c8 	.word	0x240148c8

0800a278 <Utils_SetRTC>:

void Utils_SetRTC(const s_DateTime *dateTime)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
    if (dateTime == NULL) return;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d006      	beq.n	800a294 <Utils_SetRTC+0x1c>
    s_RealTimeClock_context = *dateTime;
 800a286:	4b06      	ldr	r3, [pc, #24]	@ (800a2a0 <Utils_SetRTC+0x28>)
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	6810      	ldr	r0, [r2, #0]
 800a28c:	6018      	str	r0, [r3, #0]
 800a28e:	8892      	ldrh	r2, [r2, #4]
 800a290:	809a      	strh	r2, [r3, #4]
 800a292:	e000      	b.n	800a296 <Utils_SetRTC+0x1e>
    if (dateTime == NULL) return;
 800a294:	bf00      	nop
}
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	240148c8 	.word	0x240148c8

0800a2a4 <Utils_SetEpoch>:
 *  s_DateTime newTime = {15, 10, 23, 14, 30, 0}; // 15/10/2023 14:30:00
 *  DateTime_SetRTC(&newTime);
 */

void Utils_SetEpoch(uint32_t epoch)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
    s_DateTime dt;
    if (epoch < EPOCH_OFFSET_UNIX)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a0b      	ldr	r2, [pc, #44]	@ (800a2dc <Utils_SetEpoch+0x38>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d90e      	bls.n	800a2d2 <Utils_SetEpoch+0x2e>
    {
        return;
    }
    EpochToDateTime(epoch - EPOCH_OFFSET_UNIX, &dt);
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a2e0 <Utils_SetEpoch+0x3c>)
 800a2b8:	4413      	add	r3, r2
 800a2ba:	f107 0208 	add.w	r2, r7, #8
 800a2be:	4611      	mov	r1, r2
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff fd27 	bl	8009d14 <EpochToDateTime>
    Utils_SetRTC(&dt);
 800a2c6:	f107 0308 	add.w	r3, r7, #8
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7ff ffd4 	bl	800a278 <Utils_SetRTC>
 800a2d0:	e000      	b.n	800a2d4 <Utils_SetEpoch+0x30>
        return;
 800a2d2:	bf00      	nop
}
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	386d437f 	.word	0x386d437f
 800a2e0:	c792bc80 	.word	0xc792bc80

0800a2e4 <Utils_GetEpoch>:

uint32_t Utils_GetEpoch(void)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	af00      	add	r7, sp, #0
    return DateTimeToEpoch(&s_RealTimeClock_context) + EPOCH_OFFSET_UNIX;
 800a2e8:	4803      	ldr	r0, [pc, #12]	@ (800a2f8 <Utils_GetEpoch+0x14>)
 800a2ea:	f7ff fcb7 	bl	8009c5c <DateTimeToEpoch>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	4b02      	ldr	r3, [pc, #8]	@ (800a2fc <Utils_GetEpoch+0x18>)
 800a2f2:	4413      	add	r3, r2
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	240148c8 	.word	0x240148c8
 800a2fc:	386d4380 	.word	0x386d4380

0800a300 <Utils_GetWorkingTime>:

void Utils_GetWorkingTime(uint32_t *days, uint8_t *hours, uint8_t *minutes, uint8_t *seconds)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	603b      	str	r3, [r7, #0]
    if (days) *days = s_WorkingTimeClock_context.days;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <Utils_GetWorkingTime+0x1c>
 800a314:	4b0f      	ldr	r3, [pc, #60]	@ (800a354 <Utils_GetWorkingTime+0x54>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	601a      	str	r2, [r3, #0]
    if (hours) *hours = s_WorkingTimeClock_context.hours;
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <Utils_GetWorkingTime+0x2a>
 800a322:	4b0c      	ldr	r3, [pc, #48]	@ (800a354 <Utils_GetWorkingTime+0x54>)
 800a324:	791a      	ldrb	r2, [r3, #4]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	701a      	strb	r2, [r3, #0]
    if (minutes) *minutes = s_WorkingTimeClock_context.minutes;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <Utils_GetWorkingTime+0x38>
 800a330:	4b08      	ldr	r3, [pc, #32]	@ (800a354 <Utils_GetWorkingTime+0x54>)
 800a332:	795a      	ldrb	r2, [r3, #5]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	701a      	strb	r2, [r3, #0]
    if (seconds) *seconds = s_WorkingTimeClock_context.seconds;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <Utils_GetWorkingTime+0x46>
 800a33e:	4b05      	ldr	r3, [pc, #20]	@ (800a354 <Utils_GetWorkingTime+0x54>)
 800a340:	799a      	ldrb	r2, [r3, #6]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	701a      	strb	r2, [r3, #0]
}
 800a346:	bf00      	nop
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	240197b8 	.word	0x240197b8

0800a358 <Utils_Cronjob_SetMoment>:

// ================= Cronjob Functions =================
uint8_t Utils_Cronjob_SetMoment(uint8_t hour, uint8_t minute, uint8_t second, uint32_t repeat_count, CronCallback_t callback, void *context, uint8_t index) {
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	603b      	str	r3, [r7, #0]
 800a360:	4603      	mov	r3, r0
 800a362:	71fb      	strb	r3, [r7, #7]
 800a364:	460b      	mov	r3, r1
 800a366:	71bb      	strb	r3, [r7, #6]
 800a368:	4613      	mov	r3, r2
 800a36a:	717b      	strb	r3, [r7, #5]
    if (index >= MAX_CRONJOBS || callback == NULL || hour > 23 || minute > 59 || second > 59) return 1;
 800a36c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a370:	2b09      	cmp	r3, #9
 800a372:	d80b      	bhi.n	800a38c <Utils_Cronjob_SetMoment+0x34>
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d008      	beq.n	800a38c <Utils_Cronjob_SetMoment+0x34>
 800a37a:	79fb      	ldrb	r3, [r7, #7]
 800a37c:	2b17      	cmp	r3, #23
 800a37e:	d805      	bhi.n	800a38c <Utils_Cronjob_SetMoment+0x34>
 800a380:	79bb      	ldrb	r3, [r7, #6]
 800a382:	2b3b      	cmp	r3, #59	@ 0x3b
 800a384:	d802      	bhi.n	800a38c <Utils_Cronjob_SetMoment+0x34>
 800a386:	797b      	ldrb	r3, [r7, #5]
 800a388:	2b3b      	cmp	r3, #59	@ 0x3b
 800a38a:	d901      	bls.n	800a390 <Utils_Cronjob_SetMoment+0x38>
 800a38c:	2301      	movs	r3, #1
 800a38e:	e031      	b.n	800a3f4 <Utils_Cronjob_SetMoment+0x9c>
    if (s_Cronjob_List[index].active) return 1;
 800a390:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a394:	491a      	ldr	r1, [pc, #104]	@ (800a400 <Utils_Cronjob_SetMoment+0xa8>)
 800a396:	4613      	mov	r3, r2
 800a398:	00db      	lsls	r3, r3, #3
 800a39a:	4413      	add	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	440b      	add	r3, r1
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <Utils_Cronjob_SetMoment+0x52>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e024      	b.n	800a3f4 <Utils_Cronjob_SetMoment+0x9c>

    s_Cronjob *job = &s_Cronjob_List[index];
 800a3aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	4413      	add	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4a12      	ldr	r2, [pc, #72]	@ (800a400 <Utils_Cronjob_SetMoment+0xa8>)
 800a3b8:	4413      	add	r3, r2
 800a3ba:	60fb      	str	r3, [r7, #12]
    job->active = 1;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	701a      	strb	r2, [r3, #0]
    job->type = CRON_TYPE_MOMENT;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	705a      	strb	r2, [r3, #1]
    job->hour = hour;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	79fa      	ldrb	r2, [r7, #7]
 800a3cc:	709a      	strb	r2, [r3, #2]
    job->minute = minute;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	79ba      	ldrb	r2, [r7, #6]
 800a3d2:	70da      	strb	r2, [r3, #3]
    job->second = second;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	797a      	ldrb	r2, [r7, #5]
 800a3d8:	711a      	strb	r2, [r3, #4]
    job->repeat_count = repeat_count;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	615a      	str	r2, [r3, #20]
    job->remaining = repeat_count;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	619a      	str	r2, [r3, #24]
    job->callback = callback;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	61da      	str	r2, [r3, #28]
    job->context = context;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	69fa      	ldr	r2, [r7, #28]
 800a3f0:	621a      	str	r2, [r3, #32]
    return 0;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3714      	adds	r7, #20
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	24019650 	.word	0x24019650

0800a404 <Utils_Cronjob_SetCountdown>:

uint8_t Utils_Cronjob_SetCountdown(uint32_t seconds, uint32_t repeat_count, CronCallback_t callback, void *context, uint8_t index) {
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
    if (index >= MAX_CRONJOBS || callback == NULL || seconds == 0) return 1;
 800a412:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a416:	2b09      	cmp	r3, #9
 800a418:	d805      	bhi.n	800a426 <Utils_Cronjob_SetCountdown+0x22>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <Utils_Cronjob_SetCountdown+0x22>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d101      	bne.n	800a42a <Utils_Cronjob_SetCountdown+0x26>
 800a426:	2301      	movs	r3, #1
 800a428:	e030      	b.n	800a48c <Utils_Cronjob_SetCountdown+0x88>
    if (s_Cronjob_List[index].active) return 1;
 800a42a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a42e:	4919      	ldr	r1, [pc, #100]	@ (800a494 <Utils_Cronjob_SetCountdown+0x90>)
 800a430:	4613      	mov	r3, r2
 800a432:	00db      	lsls	r3, r3, #3
 800a434:	4413      	add	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	440b      	add	r3, r1
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d001      	beq.n	800a444 <Utils_Cronjob_SetCountdown+0x40>
 800a440:	2301      	movs	r3, #1
 800a442:	e023      	b.n	800a48c <Utils_Cronjob_SetCountdown+0x88>

    s_Cronjob *job = &s_Cronjob_List[index];
 800a444:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a448:	4613      	mov	r3, r2
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	4413      	add	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4a10      	ldr	r2, [pc, #64]	@ (800a494 <Utils_Cronjob_SetCountdown+0x90>)
 800a452:	4413      	add	r3, r2
 800a454:	617b      	str	r3, [r7, #20]
    job->active = 1;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2201      	movs	r2, #1
 800a45a:	701a      	strb	r2, [r3, #0]
    job->type = CRON_TYPE_COUNTDOWN;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	2201      	movs	r2, #1
 800a460:	705a      	strb	r2, [r3, #1]
    job->interval = seconds;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	609a      	str	r2, [r3, #8]
    job->last_trigger = Utils_GetEpoch();
 800a468:	f7ff ff3c 	bl	800a2e4 <Utils_GetEpoch>
 800a46c:	4602      	mov	r2, r0
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	60da      	str	r2, [r3, #12]
    job->repeat_count = repeat_count;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	615a      	str	r2, [r3, #20]
    job->remaining = repeat_count;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	619a      	str	r2, [r3, #24]
    job->callback = callback;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	61da      	str	r2, [r3, #28]
    job->context = context;
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	621a      	str	r2, [r3, #32]
    return 0;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3718      	adds	r7, #24
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	24019650 	.word	0x24019650

0800a498 <Utils_Cronjob_SetEvery>:

uint8_t Utils_Cronjob_SetEvery(EveryUnit_t unit, uint8_t value, uint32_t repeat_count, CronCallback_t callback, void *context, uint8_t index) {
 800a498:	b480      	push	{r7}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60ba      	str	r2, [r7, #8]
 800a4a0:	607b      	str	r3, [r7, #4]
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	73fb      	strb	r3, [r7, #15]
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	73bb      	strb	r3, [r7, #14]
    if (index >= MAX_CRONJOBS || callback == NULL) return 1;
 800a4aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a4ae:	2b09      	cmp	r3, #9
 800a4b0:	d802      	bhi.n	800a4b8 <Utils_Cronjob_SetEvery+0x20>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <Utils_Cronjob_SetEvery+0x24>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e050      	b.n	800a55e <Utils_Cronjob_SetEvery+0xc6>
    if (s_Cronjob_List[index].active) return 1;
 800a4bc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800a4c0:	492a      	ldr	r1, [pc, #168]	@ (800a56c <Utils_Cronjob_SetEvery+0xd4>)
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	4413      	add	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	440b      	add	r3, r1
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <Utils_Cronjob_SetEvery+0x3e>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e043      	b.n	800a55e <Utils_Cronjob_SetEvery+0xc6>
    if ((unit == EVERY_HOUR && value > 23) || (unit == EVERY_MINUTE && value > 59) || (unit == EVERY_SECOND && value > 59)) return 1;
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d102      	bne.n	800a4e2 <Utils_Cronjob_SetEvery+0x4a>
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
 800a4de:	2b17      	cmp	r3, #23
 800a4e0:	d80b      	bhi.n	800a4fa <Utils_Cronjob_SetEvery+0x62>
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d102      	bne.n	800a4ee <Utils_Cronjob_SetEvery+0x56>
 800a4e8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ea:	2b3b      	cmp	r3, #59	@ 0x3b
 800a4ec:	d805      	bhi.n	800a4fa <Utils_Cronjob_SetEvery+0x62>
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d104      	bne.n	800a4fe <Utils_Cronjob_SetEvery+0x66>
 800a4f4:	7bbb      	ldrb	r3, [r7, #14]
 800a4f6:	2b3b      	cmp	r3, #59	@ 0x3b
 800a4f8:	d901      	bls.n	800a4fe <Utils_Cronjob_SetEvery+0x66>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e02f      	b.n	800a55e <Utils_Cronjob_SetEvery+0xc6>

    s_Cronjob *job = &s_Cronjob_List[index];
 800a4fe:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800a502:	4613      	mov	r3, r2
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	4413      	add	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4a18      	ldr	r2, [pc, #96]	@ (800a56c <Utils_Cronjob_SetEvery+0xd4>)
 800a50c:	4413      	add	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]
    job->active = 1;
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	2201      	movs	r2, #1
 800a514:	701a      	strb	r2, [r3, #0]
    job->type = CRON_TYPE_EVERY;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2202      	movs	r2, #2
 800a51a:	705a      	strb	r2, [r3, #1]
    job->every_unit = unit;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	7bfa      	ldrb	r2, [r7, #15]
 800a520:	741a      	strb	r2, [r3, #16]
    if (unit == EVERY_HOUR) job->hour = value;
 800a522:	7bfb      	ldrb	r3, [r7, #15]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d103      	bne.n	800a530 <Utils_Cronjob_SetEvery+0x98>
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	7bba      	ldrb	r2, [r7, #14]
 800a52c:	709a      	strb	r2, [r3, #2]
 800a52e:	e009      	b.n	800a544 <Utils_Cronjob_SetEvery+0xac>
    else if (unit == EVERY_MINUTE) job->minute = value;
 800a530:	7bfb      	ldrb	r3, [r7, #15]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d103      	bne.n	800a53e <Utils_Cronjob_SetEvery+0xa6>
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	7bba      	ldrb	r2, [r7, #14]
 800a53a:	70da      	strb	r2, [r3, #3]
 800a53c:	e002      	b.n	800a544 <Utils_Cronjob_SetEvery+0xac>
    else job->second = value;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	7bba      	ldrb	r2, [r7, #14]
 800a542:	711a      	strb	r2, [r3, #4]
    job->repeat_count = repeat_count;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	615a      	str	r2, [r3, #20]
    job->remaining = repeat_count;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	619a      	str	r2, [r3, #24]
    job->callback = callback;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	61da      	str	r2, [r3, #28]
    job->context = context;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	6a3a      	ldr	r2, [r7, #32]
 800a55a:	621a      	str	r2, [r3, #32]
    return 0;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	371c      	adds	r7, #28
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	24019650 	.word	0x24019650

0800a570 <Utils_SoftTime_Sync>:
    return 0;
}

#if USE_EXTERNAL_RTC
Std_ReturnType Utils_SoftTime_Sync(void)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
	s_DateTime currentTime;
	RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 800a576:	f7fe f9c3 	bl	8008900 <RV3129_GetHandle>
 800a57a:	60f8      	str	r0, [r7, #12]
	Std_ReturnType ret = E_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	72fb      	strb	r3, [r7, #11]
	ret = RV3129_GetTime(hrtc, &currentTime);
 800a580:	1d3b      	adds	r3, r7, #4
 800a582:	4619      	mov	r1, r3
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f7fe f9c5 	bl	8008914 <RV3129_GetTime>
 800a58a:	4603      	mov	r3, r0
 800a58c:	72fb      	strb	r3, [r7, #11]
    if(ret == E_OK)
 800a58e:	7afb      	ldrb	r3, [r7, #11]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d103      	bne.n	800a59c <Utils_SoftTime_Sync+0x2c>
    {
       Utils_SetRTC(&currentTime);
 800a594:	1d3b      	adds	r3, r7, #4
 800a596:	4618      	mov	r0, r3
 800a598:	f7ff fe6e 	bl	800a278 <Utils_SetRTC>
    }
    return ret;
 800a59c:	7afb      	ldrb	r3, [r7, #11]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <RingBuffer_Create>:

#include "ring_buffer.h"

void RingBuffer_Create(s_RingBufferType *rb, uint32_t id, const char *name,
                         RingBufElement *buffer, RingBufCtr max_size)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b088      	sub	sp, #32
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	60f8      	str	r0, [r7, #12]
 800a5ae:	60b9      	str	r1, [r7, #8]
 800a5b0:	607a      	str	r2, [r7, #4]
 800a5b2:	603b      	str	r3, [r7, #0]
    rb->id = id;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	601a      	str	r2, [r3, #0]

    strncpy(rb->name, name, RINGBUFFER_NAME_MAX_LEN - 1);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	221f      	movs	r2, #31
 800a5c0:	6879      	ldr	r1, [r7, #4]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f017 fd87 	bl	80220d6 <strncpy>
    rb->name[RINGBUFFER_NAME_MAX_LEN - 1] = '\0';
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    rb->buffer = buffer;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	625a      	str	r2, [r3, #36]	@ 0x24
    rb->max_size = max_size;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a5da:	851a      	strh	r2, [r3, #40]	@ 0x28

    atomic_store_explicit(&rb->head, 0U, memory_order_release);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	332a      	adds	r3, #42	@ 0x2a
 800a5e0:	61fb      	str	r3, [r7, #28]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	82fb      	strh	r3, [r7, #22]
 800a5e6:	8afa      	ldrh	r2, [r7, #22]
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	f3bf 8f5b 	dmb	ish
 800a5ee:	801a      	strh	r2, [r3, #0]
    atomic_store_explicit(&rb->tail, 0U, memory_order_release);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	332c      	adds	r3, #44	@ 0x2c
 800a5f4:	61bb      	str	r3, [r7, #24]
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	82bb      	strh	r3, [r7, #20]
 800a5fa:	8aba      	ldrh	r2, [r7, #20]
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	f3bf 8f5b 	dmb	ish
 800a602:	801a      	strh	r2, [r3, #0]
}
 800a604:	bf00      	nop
 800a606:	3720      	adds	r7, #32
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <RingBuffer_Put>:

_Bool RingBuffer_Put(s_RingBufferType * const rb, RingBufElement const el)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b08b      	sub	sp, #44	@ 0x2c
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_relaxed) + 1U;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	332a      	adds	r3, #42	@ 0x2a
 800a61c:	623b      	str	r3, [r7, #32]
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	b29b      	uxth	r3, r3
 800a624:	81fb      	strh	r3, [r7, #14]
 800a626:	89fb      	ldrh	r3, [r7, #14]
 800a628:	3301      	adds	r3, #1
 800a62a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (head == rb->max_size)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a630:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a632:	429a      	cmp	r2, r3
 800a634:	d101      	bne.n	800a63a <RingBuffer_Put+0x2e>
    {
        head = 0U;
 800a636:	2300      	movs	r3, #0
 800a638:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_acquire);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	332c      	adds	r3, #44	@ 0x2c
 800a63e:	61fb      	str	r3, [r7, #28]
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	f3bf 8f5b 	dmb	ish
 800a648:	b29b      	uxth	r3, r3
 800a64a:	81bb      	strh	r3, [r7, #12]
 800a64c:	89bb      	ldrh	r3, [r7, #12]
 800a64e:	837b      	strh	r3, [r7, #26]
    if (head != tail) // buffer NOT full?
 800a650:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a652:	8b7b      	ldrh	r3, [r7, #26]
 800a654:	429a      	cmp	r2, r3
 800a656:	d018      	beq.n	800a68a <RingBuffer_Put+0x7e>
    {
        rb->buffer[atomic_load_explicit(&rb->head, memory_order_relaxed)] = el;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	322a      	adds	r2, #42	@ 0x2a
 800a660:	617a      	str	r2, [r7, #20]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	8812      	ldrh	r2, [r2, #0]
 800a666:	b292      	uxth	r2, r2
 800a668:	817a      	strh	r2, [r7, #10]
 800a66a:	897a      	ldrh	r2, [r7, #10]
 800a66c:	4413      	add	r3, r2
 800a66e:	78fa      	ldrb	r2, [r7, #3]
 800a670:	701a      	strb	r2, [r3, #0]
        atomic_store_explicit(&rb->head, head, memory_order_release);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	332a      	adds	r3, #42	@ 0x2a
 800a676:	613b      	str	r3, [r7, #16]
 800a678:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a67a:	813b      	strh	r3, [r7, #8]
 800a67c:	893a      	ldrh	r2, [r7, #8]
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	f3bf 8f5b 	dmb	ish
 800a684:	801a      	strh	r2, [r3, #0]
//        __enable_irq();
        return true;
 800a686:	2301      	movs	r3, #1
 800a688:	e000      	b.n	800a68c <RingBuffer_Put+0x80>
    }
    else
    {
//    	__enable_irq();
        return false;
 800a68a:	2300      	movs	r3, #0
    }
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	372c      	adds	r7, #44	@ 0x2c
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <RingBuffer_Get>:

_Bool RingBuffer_Get(s_RingBufferType * const rb, RingBufElement *pel)
{
 800a698:	b480      	push	{r7}
 800a69a:	b08b      	sub	sp, #44	@ 0x2c
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
//	__disable_irq();
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	332c      	adds	r3, #44	@ 0x2c
 800a6a6:	623b      	str	r3, [r7, #32]
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	827b      	strh	r3, [r7, #18]
 800a6b0:	8a7b      	ldrh	r3, [r7, #18]
 800a6b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	332a      	adds	r3, #42	@ 0x2a
 800a6b8:	61fb      	str	r3, [r7, #28]
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	f3bf 8f5b 	dmb	ish
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	823b      	strh	r3, [r7, #16]
 800a6c6:	8a3b      	ldrh	r3, [r7, #16]
 800a6c8:	837b      	strh	r3, [r7, #26]
    if (head != tail)  // buffer NOT empty?
 800a6ca:	8b7a      	ldrh	r2, [r7, #26]
 800a6cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d01c      	beq.n	800a70c <RingBuffer_Get+0x74>
    {
        *pel = rb->buffer[tail];
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a6d8:	4413      	add	r3, r2
 800a6da:	781a      	ldrb	r2, [r3, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	701a      	strb	r2, [r3, #0]
        ++tail;
 800a6e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (tail == rb->max_size)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d101      	bne.n	800a6f4 <RingBuffer_Get+0x5c>
        {
            tail = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        atomic_store_explicit(&rb->tail, tail, memory_order_release);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	332c      	adds	r3, #44	@ 0x2c
 800a6f8:	617b      	str	r3, [r7, #20]
 800a6fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a6fc:	81fb      	strh	r3, [r7, #14]
 800a6fe:	89fa      	ldrh	r2, [r7, #14]
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f3bf 8f5b 	dmb	ish
 800a706:	801a      	strh	r2, [r3, #0]
//    	__enable_irq();
        return true;
 800a708:	2301      	movs	r3, #1
 800a70a:	e000      	b.n	800a70e <RingBuffer_Get+0x76>
    }
    else
    {
//    	__enable_irq();
        return false;
 800a70c:	2300      	movs	r3, #0
    }
}
 800a70e:	4618      	mov	r0, r3
 800a710:	372c      	adds	r7, #44	@ 0x2c
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <RingBuffer_NumFreeSlots>:

// Function to calculate the number of free slots in the ring buffer.
// Note: We always leave one empty slot to distinguish between an empty and a full buffer.
RingBufCtr RingBuffer_NumFreeSlots(s_RingBufferType * const rb)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b089      	sub	sp, #36	@ 0x24
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	332a      	adds	r3, #42	@ 0x2a
 800a726:	61fb      	str	r3, [r7, #28]
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	f3bf 8f5b 	dmb	ish
 800a730:	b29b      	uxth	r3, r3
 800a732:	823b      	strh	r3, [r7, #16]
 800a734:	8a3b      	ldrh	r3, [r7, #16]
 800a736:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	332c      	adds	r3, #44	@ 0x2c
 800a73c:	617b      	str	r3, [r7, #20]
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	b29b      	uxth	r3, r3
 800a744:	81fb      	strh	r3, [r7, #14]
 800a746:	89fb      	ldrh	r3, [r7, #14]
 800a748:	827b      	strh	r3, [r7, #18]

    if (head == tail)
 800a74a:	8b7a      	ldrh	r2, [r7, #26]
 800a74c:	8a7b      	ldrh	r3, [r7, #18]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d104      	bne.n	800a75c <RingBuffer_NumFreeSlots+0x42>
    {
        return (RingBufCtr)(rb->max_size - 1U);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a756:	3b01      	subs	r3, #1
 800a758:	b29b      	uxth	r3, r3
 800a75a:	e014      	b.n	800a786 <RingBuffer_NumFreeSlots+0x6c>
    }
    else if (head < tail)
 800a75c:	8b7a      	ldrh	r2, [r7, #26]
 800a75e:	8a7b      	ldrh	r3, [r7, #18]
 800a760:	429a      	cmp	r2, r3
 800a762:	d206      	bcs.n	800a772 <RingBuffer_NumFreeSlots+0x58>
    {
        return (RingBufCtr)(tail - head - 1U);
 800a764:	8a7a      	ldrh	r2, [r7, #18]
 800a766:	8b7b      	ldrh	r3, [r7, #26]
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	3b01      	subs	r3, #1
 800a76e:	b29b      	uxth	r3, r3
 800a770:	e009      	b.n	800a786 <RingBuffer_NumFreeSlots+0x6c>
    }
    else
    {
        return (RingBufCtr)(rb->max_size + tail - head - 1U);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a776:	8a7b      	ldrh	r3, [r7, #18]
 800a778:	4413      	add	r3, r2
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	8b7b      	ldrh	r3, [r7, #26]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	b29b      	uxth	r3, r3
 800a782:	3b01      	subs	r3, #1
 800a784:	b29b      	uxth	r3, r3
    }
}
 800a786:	4618      	mov	r0, r3
 800a788:	3724      	adds	r7, #36	@ 0x24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <RingBuffer_IsDataAvailable>:
    }
    return rb->buffer[tail];
}

_Bool RingBuffer_IsDataAvailable(s_RingBufferType * const rb)
{
 800a792:	b480      	push	{r7}
 800a794:	b089      	sub	sp, #36	@ 0x24
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	332a      	adds	r3, #42	@ 0x2a
 800a79e:	61fb      	str	r3, [r7, #28]
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	f3bf 8f5b 	dmb	ish
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	823b      	strh	r3, [r7, #16]
 800a7ac:	8a3b      	ldrh	r3, [r7, #16]
 800a7ae:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	332c      	adds	r3, #44	@ 0x2c
 800a7b4:	617b      	str	r3, [r7, #20]
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	81fb      	strh	r3, [r7, #14]
 800a7be:	89fb      	ldrh	r3, [r7, #14]
 800a7c0:	827b      	strh	r3, [r7, #18]
    return (head != tail);
 800a7c2:	8b7a      	ldrh	r2, [r7, #26]
 800a7c4:	8a7b      	ldrh	r3, [r7, #18]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	bf14      	ite	ne
 800a7ca:	2301      	movne	r3, #1
 800a7cc:	2300      	moveq	r3, #0
 800a7ce:	b2db      	uxtb	r3, r3
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3724      	adds	r7, #36	@ 0x24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f06f 0201 	mvn.w	r2, #1
 800a7ea:	611a      	str	r2, [r3, #16]
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d101      	bne.n	800a810 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e000      	b.n	800a812 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
	...

0800a820 <TickTimer_IRQHandler>:

extern ShieldInstance_t auth_usb;

volatile uint32_t LL_Tick = 0;

void TickTimer_IRQHandler(void) {
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 800a824:	4809      	ldr	r0, [pc, #36]	@ (800a84c <TickTimer_IRQHandler+0x2c>)
 800a826:	f7ff ffe7 	bl	800a7f8 <LL_TIM_IsActiveFlag_UPDATE>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00a      	beq.n	800a846 <TickTimer_IRQHandler+0x26>
        LL_TIM_ClearFlag_UPDATE(TIM1);
 800a830:	4806      	ldr	r0, [pc, #24]	@ (800a84c <TickTimer_IRQHandler+0x2c>)
 800a832:	f7ff ffd3 	bl	800a7dc <LL_TIM_ClearFlag_UPDATE>
        LL_Tick++;
 800a836:	4b06      	ldr	r3, [pc, #24]	@ (800a850 <TickTimer_IRQHandler+0x30>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3301      	adds	r3, #1
 800a83c:	4a04      	ldr	r2, [pc, #16]	@ (800a850 <TickTimer_IRQHandler+0x30>)
 800a83e:	6013      	str	r3, [r2, #0]
        Shield_UpdateTimer(&auth_usb);
 800a840:	4804      	ldr	r0, [pc, #16]	@ (800a854 <TickTimer_IRQHandler+0x34>)
 800a842:	f7f8 f9d5 	bl	8002bf0 <Shield_UpdateTimer>
    }
}
 800a846:	bf00      	nop
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	40010000 	.word	0x40010000
 800a850:	240197c0 	.word	0x240197c0
 800a854:	24014a70 	.word	0x24014a70

0800a858 <Utils_GetTick>:

uint32_t Utils_GetTick(void) {
 800a858:	b480      	push	{r7}
 800a85a:	af00      	add	r7, sp, #0
    return LL_Tick;
 800a85c:	4b03      	ldr	r3, [pc, #12]	@ (800a86c <Utils_GetTick+0x14>)
 800a85e:	681b      	ldr	r3, [r3, #0]
}
 800a860:	4618      	mov	r0, r3
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	240197c0 	.word	0x240197c0

0800a870 <disk_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..) - Physical drive number to identify the drive
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (BYTE pdrv)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 800a87a:	f005 fae7 	bl	800fe4c <FATFS_GetDisk>
 800a87e:	60f8      	str	r0, [r7, #12]
  stat = disk->drv[pdrv]->disk_status(disk->lun[pdrv]);
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	79fa      	ldrb	r2, [r7, #7]
 800a88e:	68f9      	ldr	r1, [r7, #12]
 800a890:	440a      	add	r2, r1
 800a892:	7a12      	ldrb	r2, [r2, #8]
 800a894:	4610      	mov	r0, r2
 800a896:	4798      	blx	r3
 800a898:	4603      	mov	r3, r0
 800a89a:	72fb      	strb	r3, [r7, #11]
  return stat;
 800a89c:	7afb      	ldrb	r3, [r7, #11]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <disk_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..) - Physical drive nmuber to identify the drive
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (BYTE pdrv)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	73fb      	strb	r3, [r7, #15]
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 800a8b4:	f005 faca 	bl	800fe4c <FATFS_GetDisk>
 800a8b8:	60b8      	str	r0, [r7, #8]
  if (disk->is_initialized[pdrv] == 0)
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	5cd3      	ldrb	r3, [r2, r3]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d114      	bne.n	800a8ee <disk_initialize+0x48>
  {
     stat = disk->drv[pdrv]->disk_initialize(disk->lun[pdrv]);
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	79fa      	ldrb	r2, [r7, #7]
 800a8d2:	68b9      	ldr	r1, [r7, #8]
 800a8d4:	440a      	add	r2, r1
 800a8d6:	7a12      	ldrb	r2, [r2, #8]
 800a8d8:	4610      	mov	r0, r2
 800a8da:	4798      	blx	r3
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]
     if (stat == RES_OK)
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d103      	bne.n	800a8ee <disk_initialize+0x48>
     {
        disk->is_initialized[pdrv] = 1;
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	54d1      	strb	r1, [r2, r3]
     }
  }
  return stat;
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a8f8:	b590      	push	{r4, r7, lr}
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60b9      	str	r1, [r7, #8]
 800a900:	607a      	str	r2, [r7, #4]
 800a902:	603b      	str	r3, [r7, #0]
 800a904:	4603      	mov	r3, r0
 800a906:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 800a908:	f005 faa0 	bl	800fe4c <FATFS_GetDisk>
 800a90c:	6178      	str	r0, [r7, #20]
  res = disk->drv[pdrv]->disk_read(disk->lun[pdrv], buff, sector, count);
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	689c      	ldr	r4, [r3, #8]
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	4413      	add	r3, r2
 800a920:	7a18      	ldrb	r0, [r3, #8]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	68b9      	ldr	r1, [r7, #8]
 800a928:	47a0      	blx	r4
 800a92a:	4603      	mov	r3, r0
 800a92c:	74fb      	strb	r3, [r7, #19]
  return res;
 800a92e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a930:	4618      	mov	r0, r3
 800a932:	371c      	adds	r7, #28
 800a934:	46bd      	mov	sp, r7
 800a936:	bd90      	pop	{r4, r7, pc}

0800a938 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a938:	b590      	push	{r4, r7, lr}
 800a93a:	b087      	sub	sp, #28
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60b9      	str	r1, [r7, #8]
 800a940:	607a      	str	r2, [r7, #4]
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	4603      	mov	r3, r0
 800a946:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 800a948:	f005 fa80 	bl	800fe4c <FATFS_GetDisk>
 800a94c:	6178      	str	r0, [r7, #20]
  res = disk->drv[pdrv]->disk_write(disk->lun[pdrv], buff, sector, count);
 800a94e:	7bfb      	ldrb	r3, [r7, #15]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	68dc      	ldr	r4, [r3, #12]
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	4413      	add	r3, r2
 800a960:	7a18      	ldrb	r0, [r3, #8]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	68b9      	ldr	r1, [r7, #8]
 800a968:	47a0      	blx	r4
 800a96a:	4603      	mov	r3, r0
 800a96c:	74fb      	strb	r3, [r7, #19]
  return res;
 800a96e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a970:	4618      	mov	r0, r3
 800a972:	371c      	adds	r7, #28
 800a974:	46bd      	mov	sp, r7
 800a976:	bd90      	pop	{r4, r7, pc}

0800a978 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	603a      	str	r2, [r7, #0]
 800a982:	71fb      	strb	r3, [r7, #7]
 800a984:	460b      	mov	r3, r1
 800a986:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 800a988:	f005 fa60 	bl	800fe4c <FATFS_GetDisk>
 800a98c:	60f8      	str	r0, [r7, #12]
  res = disk->drv[pdrv]->disk_ioctl(disk->lun[pdrv], cmd, buff);
 800a98e:	79fb      	ldrb	r3, [r7, #7]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	79fa      	ldrb	r2, [r7, #7]
 800a99c:	68f9      	ldr	r1, [r7, #12]
 800a99e:	440a      	add	r2, r1
 800a9a0:	7a10      	ldrb	r0, [r2, #8]
 800a9a2:	79b9      	ldrb	r1, [r7, #6]
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	4798      	blx	r3
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	72fb      	strb	r3, [r7, #11]
  return res;
 800a9ac:	7afb      	ldrb	r3, [r7, #11]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	af00      	add	r7, sp, #0
  return 0;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b085      	sub	sp, #20
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a9d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a9da:	021b      	lsls	r3, r3, #8
 800a9dc:	b21a      	sxth	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	b21b      	sxth	r3, r3
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	b21b      	sxth	r3, r3
 800a9e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a9ea:	89fb      	ldrh	r3, [r7, #14]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3303      	adds	r3, #3
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	021b      	lsls	r3, r3, #8
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	3202      	adds	r2, #2
 800aa10:	7812      	ldrb	r2, [r2, #0]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	021b      	lsls	r3, r3, #8
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	3201      	adds	r2, #1
 800aa1e:	7812      	ldrb	r2, [r2, #0]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	021b      	lsls	r3, r3, #8
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	7812      	ldrb	r2, [r2, #0]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
	return rv;
 800aa30:	68fb      	ldr	r3, [r7, #12]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800aa3e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800aa42:	b09d      	sub	sp, #116	@ 0x74
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800aa48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa4a:	3307      	adds	r3, #7
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2200      	movs	r2, #0
 800aa52:	469a      	mov	sl, r3
 800aa54:	4693      	mov	fp, r2
 800aa56:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800aa5a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800aa5e:	f04f 0000 	mov.w	r0, #0
 800aa62:	f04f 0100 	mov.w	r1, #0
 800aa66:	0219      	lsls	r1, r3, #8
 800aa68:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aa6c:	0210      	lsls	r0, r2, #8
 800aa6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa70:	3306      	adds	r3, #6
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2200      	movs	r2, #0
 800aa78:	461c      	mov	r4, r3
 800aa7a:	4615      	mov	r5, r2
 800aa7c:	ea40 0804 	orr.w	r8, r0, r4
 800aa80:	ea41 0905 	orr.w	r9, r1, r5
 800aa84:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800aa88:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800aa8c:	f04f 0000 	mov.w	r0, #0
 800aa90:	f04f 0100 	mov.w	r1, #0
 800aa94:	0219      	lsls	r1, r3, #8
 800aa96:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aa9a:	0210      	lsls	r0, r2, #8
 800aa9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa9e:	3305      	adds	r3, #5
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aaa8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800aaaa:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800aaae:	4623      	mov	r3, r4
 800aab0:	4303      	orrs	r3, r0
 800aab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aab4:	462b      	mov	r3, r5
 800aab6:	430b      	orrs	r3, r1
 800aab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800aabe:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800aac2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800aac6:	f04f 0000 	mov.w	r0, #0
 800aaca:	f04f 0100 	mov.w	r1, #0
 800aace:	0219      	lsls	r1, r3, #8
 800aad0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aad4:	0210      	lsls	r0, r2, #8
 800aad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aad8:	3304      	adds	r3, #4
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2200      	movs	r2, #0
 800aae0:	653b      	str	r3, [r7, #80]	@ 0x50
 800aae2:	657a      	str	r2, [r7, #84]	@ 0x54
 800aae4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800aae8:	4623      	mov	r3, r4
 800aaea:	4303      	orrs	r3, r0
 800aaec:	623b      	str	r3, [r7, #32]
 800aaee:	462b      	mov	r3, r5
 800aaf0:	430b      	orrs	r3, r1
 800aaf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaf4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800aaf8:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800aafc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800ab00:	f04f 0000 	mov.w	r0, #0
 800ab04:	f04f 0100 	mov.w	r1, #0
 800ab08:	0219      	lsls	r1, r3, #8
 800ab0a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ab0e:	0210      	lsls	r0, r2, #8
 800ab10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab12:	3303      	adds	r3, #3
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2200      	movs	r2, #0
 800ab1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab1c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ab1e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800ab22:	4623      	mov	r3, r4
 800ab24:	4303      	orrs	r3, r0
 800ab26:	61bb      	str	r3, [r7, #24]
 800ab28:	462b      	mov	r3, r5
 800ab2a:	430b      	orrs	r3, r1
 800ab2c:	61fb      	str	r3, [r7, #28]
 800ab2e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ab32:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800ab36:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800ab3a:	f04f 0000 	mov.w	r0, #0
 800ab3e:	f04f 0100 	mov.w	r1, #0
 800ab42:	0219      	lsls	r1, r3, #8
 800ab44:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ab48:	0210      	lsls	r0, r2, #8
 800ab4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab4c:	3302      	adds	r3, #2
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2200      	movs	r2, #0
 800ab54:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab56:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab58:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800ab5c:	4623      	mov	r3, r4
 800ab5e:	4303      	orrs	r3, r0
 800ab60:	613b      	str	r3, [r7, #16]
 800ab62:	462b      	mov	r3, r5
 800ab64:	430b      	orrs	r3, r1
 800ab66:	617b      	str	r3, [r7, #20]
 800ab68:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ab6c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800ab70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ab74:	f04f 0200 	mov.w	r2, #0
 800ab78:	f04f 0300 	mov.w	r3, #0
 800ab7c:	020b      	lsls	r3, r1, #8
 800ab7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab82:	0202      	lsls	r2, r0, #8
 800ab84:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ab86:	3101      	adds	r1, #1
 800ab88:	7809      	ldrb	r1, [r1, #0]
 800ab8a:	b2c9      	uxtb	r1, r1
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ab90:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800ab92:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800ab96:	4621      	mov	r1, r4
 800ab98:	4311      	orrs	r1, r2
 800ab9a:	60b9      	str	r1, [r7, #8]
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	4319      	orrs	r1, r3
 800aba0:	60f9      	str	r1, [r7, #12]
 800aba2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800aba6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800abaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800abae:	f04f 0200 	mov.w	r2, #0
 800abb2:	f04f 0300 	mov.w	r3, #0
 800abb6:	020b      	lsls	r3, r1, #8
 800abb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800abbc:	0202      	lsls	r2, r0, #8
 800abbe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800abc0:	7809      	ldrb	r1, [r1, #0]
 800abc2:	b2c9      	uxtb	r1, r1
 800abc4:	2000      	movs	r0, #0
 800abc6:	6339      	str	r1, [r7, #48]	@ 0x30
 800abc8:	6378      	str	r0, [r7, #52]	@ 0x34
 800abca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800abce:	4621      	mov	r1, r4
 800abd0:	4311      	orrs	r1, r2
 800abd2:	6039      	str	r1, [r7, #0]
 800abd4:	4629      	mov	r1, r5
 800abd6:	4319      	orrs	r1, r3
 800abd8:	6079      	str	r1, [r7, #4]
 800abda:	e9d7 3400 	ldrd	r3, r4, [r7]
 800abde:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800abe2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800abe6:	4610      	mov	r0, r2
 800abe8:	4619      	mov	r1, r3
 800abea:	3774      	adds	r7, #116	@ 0x74
 800abec:	46bd      	mov	sp, r7
 800abee:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800abf2:	4770      	bx	lr

0800abf4 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	607a      	str	r2, [r7, #4]
 800ac06:	887a      	ldrh	r2, [r7, #2]
 800ac08:	b2d2      	uxtb	r2, r2
 800ac0a:	701a      	strb	r2, [r3, #0]
 800ac0c:	887b      	ldrh	r3, [r7, #2]
 800ac0e:	0a1b      	lsrs	r3, r3, #8
 800ac10:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	607a      	str	r2, [r7, #4]
 800ac18:	887a      	ldrh	r2, [r7, #2]
 800ac1a:	b2d2      	uxtb	r2, r2
 800ac1c:	701a      	strb	r2, [r3, #0]
}
 800ac1e:	bf00      	nop
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	1c5a      	adds	r2, r3, #1
 800ac38:	607a      	str	r2, [r7, #4]
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	b2d2      	uxtb	r2, r2
 800ac3e:	701a      	strb	r2, [r3, #0]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	0a1b      	lsrs	r3, r3, #8
 800ac44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	b2d2      	uxtb	r2, r2
 800ac50:	701a      	strb	r2, [r3, #0]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	0a1b      	lsrs	r3, r3, #8
 800ac56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	607a      	str	r2, [r7, #4]
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	b2d2      	uxtb	r2, r2
 800ac62:	701a      	strb	r2, [r3, #0]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	0a1b      	lsrs	r3, r3, #8
 800ac68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	1c5a      	adds	r2, r3, #1
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	b2d2      	uxtb	r2, r2
 800ac74:	701a      	strb	r2, [r3, #0]
}
 800ac76:	bf00      	nop
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800ac82:	b480      	push	{r7}
 800ac84:	b085      	sub	sp, #20
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	60fa      	str	r2, [r7, #12]
 800ac94:	783a      	ldrb	r2, [r7, #0]
 800ac96:	701a      	strb	r2, [r3, #0]
 800ac98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac9c:	f04f 0200 	mov.w	r2, #0
 800aca0:	f04f 0300 	mov.w	r3, #0
 800aca4:	0a02      	lsrs	r2, r0, #8
 800aca6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800acaa:	0a0b      	lsrs	r3, r1, #8
 800acac:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	60fa      	str	r2, [r7, #12]
 800acb6:	783a      	ldrb	r2, [r7, #0]
 800acb8:	701a      	strb	r2, [r3, #0]
 800acba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acbe:	f04f 0200 	mov.w	r2, #0
 800acc2:	f04f 0300 	mov.w	r3, #0
 800acc6:	0a02      	lsrs	r2, r0, #8
 800acc8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800accc:	0a0b      	lsrs	r3, r1, #8
 800acce:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	60fa      	str	r2, [r7, #12]
 800acd8:	783a      	ldrb	r2, [r7, #0]
 800acda:	701a      	strb	r2, [r3, #0]
 800acdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ace0:	f04f 0200 	mov.w	r2, #0
 800ace4:	f04f 0300 	mov.w	r3, #0
 800ace8:	0a02      	lsrs	r2, r0, #8
 800acea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800acee:	0a0b      	lsrs	r3, r1, #8
 800acf0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	1c5a      	adds	r2, r3, #1
 800acf8:	60fa      	str	r2, [r7, #12]
 800acfa:	783a      	ldrb	r2, [r7, #0]
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad02:	f04f 0200 	mov.w	r2, #0
 800ad06:	f04f 0300 	mov.w	r3, #0
 800ad0a:	0a02      	lsrs	r2, r0, #8
 800ad0c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ad10:	0a0b      	lsrs	r3, r1, #8
 800ad12:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	1c5a      	adds	r2, r3, #1
 800ad1a:	60fa      	str	r2, [r7, #12]
 800ad1c:	783a      	ldrb	r2, [r7, #0]
 800ad1e:	701a      	strb	r2, [r3, #0]
 800ad20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad24:	f04f 0200 	mov.w	r2, #0
 800ad28:	f04f 0300 	mov.w	r3, #0
 800ad2c:	0a02      	lsrs	r2, r0, #8
 800ad2e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ad32:	0a0b      	lsrs	r3, r1, #8
 800ad34:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	60fa      	str	r2, [r7, #12]
 800ad3e:	783a      	ldrb	r2, [r7, #0]
 800ad40:	701a      	strb	r2, [r3, #0]
 800ad42:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad46:	f04f 0200 	mov.w	r2, #0
 800ad4a:	f04f 0300 	mov.w	r3, #0
 800ad4e:	0a02      	lsrs	r2, r0, #8
 800ad50:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ad54:	0a0b      	lsrs	r3, r1, #8
 800ad56:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	60fa      	str	r2, [r7, #12]
 800ad60:	783a      	ldrb	r2, [r7, #0]
 800ad62:	701a      	strb	r2, [r3, #0]
 800ad64:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad68:	f04f 0200 	mov.w	r2, #0
 800ad6c:	f04f 0300 	mov.w	r3, #0
 800ad70:	0a02      	lsrs	r2, r0, #8
 800ad72:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ad76:	0a0b      	lsrs	r3, r1, #8
 800ad78:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	1c5a      	adds	r2, r3, #1
 800ad80:	60fa      	str	r2, [r7, #12]
 800ad82:	783a      	ldrb	r2, [r7, #0]
 800ad84:	701a      	strb	r2, [r3, #0]
}
 800ad86:	bf00      	nop
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	4603      	mov	r3, r0
 800ad9a:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800ad9c:	79fb      	ldrb	r3, [r7, #7]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <dbc_1st+0x14>
 800ada2:	2300      	movs	r3, #0
 800ada4:	e000      	b.n	800ada8 <dbc_1st+0x16>
#endif
	return 0;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	4603      	mov	r3, r0
 800adbc:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800adbe:	79fb      	ldrb	r3, [r7, #7]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <dbc_2nd+0x14>
 800adc4:	2300      	movs	r3, #0
 800adc6:	e000      	b.n	800adca <dbc_2nd+0x16>
#endif
	return 0;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b086      	sub	sp, #24
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	1c5a      	adds	r2, r3, #1
 800ade8:	617a      	str	r2, [r7, #20]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 800adee:	8a7b      	ldrh	r3, [r7, #18]
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7ff ffcd 	bl	800ad92 <dbc_1st>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d015      	beq.n	800ae2a <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	617a      	str	r2, [r7, #20]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 800ae08:	7c7b      	ldrb	r3, [r7, #17]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7ff ffd2 	bl	800adb4 <dbc_2nd>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d102      	bne.n	800ae1c <tchar2uni+0x46>
 800ae16:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1a:	e01d      	b.n	800ae58 <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 800ae1c:	8a7b      	ldrh	r3, [r7, #18]
 800ae1e:	021b      	lsls	r3, r3, #8
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	7c7b      	ldrb	r3, [r7, #17]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	4413      	add	r3, r2
 800ae28:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 800ae2a:	8a7b      	ldrh	r3, [r7, #18]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00d      	beq.n	800ae4c <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 800ae30:	8a7b      	ldrh	r3, [r7, #18]
 800ae32:	f240 3152 	movw	r1, #850	@ 0x352
 800ae36:	4618      	mov	r0, r3
 800ae38:	f005 fab0 	bl	801039c <ff_oem2uni>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 800ae40:	8a7b      	ldrh	r3, [r7, #18]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d102      	bne.n	800ae4c <tchar2uni+0x76>
 800ae46:	f04f 33ff 	mov.w	r3, #4294967295
 800ae4a:	e005      	b.n	800ae58 <tchar2uni+0x82>
	}
	uc = wc;
 800ae4c:	8a7b      	ldrh	r3, [r7, #18]
 800ae4e:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	601a      	str	r2, [r3, #0]
	return uc;
 800ae56:	68fb      	ldr	r3, [r7, #12]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3718      	adds	r7, #24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <put_utf>:
static UINT put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encoding) */
	DWORD chr,	/* UTF-16 encoded character (Surrogate pair if >=0x10000) */
	TCHAR* buf,	/* Output buffer */
	UINT szb	/* Size of the buffer */
)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
	return 1;

#else						/* ANSI/OEM output */
	WCHAR wc;

	wc = ff_uni2oem(chr, CODEPAGE);
 800ae6c:	f240 3152 	movw	r1, #850	@ 0x352
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f005 fa59 	bl	8010328 <ff_uni2oem>
 800ae76:	4603      	mov	r3, r0
 800ae78:	82fb      	strh	r3, [r7, #22]
	if (wc >= 0x100) {	/* Is this a DBC? */
 800ae7a:	8afb      	ldrh	r3, [r7, #22]
 800ae7c:	2bff      	cmp	r3, #255	@ 0xff
 800ae7e:	d914      	bls.n	800aeaa <put_utf+0x4a>
		if (szb < 2) return 0;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d801      	bhi.n	800ae8a <put_utf+0x2a>
 800ae86:	2300      	movs	r3, #0
 800ae88:	e01e      	b.n	800aec8 <put_utf+0x68>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 800ae8a:	8afb      	ldrh	r3, [r7, #22]
 800ae8c:	0a1b      	lsrs	r3, r3, #8
 800ae8e:	b299      	uxth	r1, r3
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	60ba      	str	r2, [r7, #8]
 800ae96:	b2ca      	uxtb	r2, r1
 800ae98:	701a      	strb	r2, [r3, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	1c5a      	adds	r2, r3, #1
 800ae9e:	60ba      	str	r2, [r7, #8]
 800aea0:	8afa      	ldrh	r2, [r7, #22]
 800aea2:	b2d2      	uxtb	r2, r2
 800aea4:	701a      	strb	r2, [r3, #0]
		return 2;
 800aea6:	2302      	movs	r3, #2
 800aea8:	e00e      	b.n	800aec8 <put_utf+0x68>
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 800aeaa:	8afb      	ldrh	r3, [r7, #22]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <put_utf+0x56>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <put_utf+0x5a>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e006      	b.n	800aec8 <put_utf+0x68>
	*buf++ = (TCHAR)wc;					/* Store the character */
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	1c5a      	adds	r2, r3, #1
 800aebe:	60ba      	str	r2, [r7, #8]
 800aec0:	8afa      	ldrh	r2, [r7, #22]
 800aec2:	b2d2      	uxtb	r2, r2
 800aec4:	701a      	strb	r2, [r3, #0]
	return 1;
 800aec6:	2301      	movs	r3, #1
#endif
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3718      	adds	r7, #24
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <lock_volume>:

static int lock_volume (	/* 1:Ok, 0:timeout */
	FATFS* fs,				/* Filesystem object to lock */
	int syslock				/* System lock required */
)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
	int rv;


#if FF_FS_LOCK
	rv = ff_mutex_take(fs->ldrv);	/* Lock the volume */
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	789b      	ldrb	r3, [r3, #2]
 800aede:	4618      	mov	r0, r3
 800aee0:	f005 fb4a 	bl	8010578 <ff_mutex_take>
 800aee4:	60f8      	str	r0, [r7, #12]
	if (rv && syslock) {			/* System lock reqiered? */
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d016      	beq.n	800af1a <lock_volume+0x4a>
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d013      	beq.n	800af1a <lock_volume+0x4a>
		rv = ff_mutex_take(FF_VOLUMES);	/* Lock the system */
 800aef2:	2001      	movs	r0, #1
 800aef4:	f005 fb40 	bl	8010578 <ff_mutex_take>
 800aef8:	60f8      	str	r0, [r7, #12]
		if (rv) {
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d007      	beq.n	800af10 <lock_volume+0x40>
			SysLockVolume = fs->ldrv;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	789a      	ldrb	r2, [r3, #2]
 800af04:	4b07      	ldr	r3, [pc, #28]	@ (800af24 <lock_volume+0x54>)
 800af06:	701a      	strb	r2, [r3, #0]
			SysLock = 2;				/* System lock succeeded */
 800af08:	4b07      	ldr	r3, [pc, #28]	@ (800af28 <lock_volume+0x58>)
 800af0a:	2202      	movs	r2, #2
 800af0c:	701a      	strb	r2, [r3, #0]
 800af0e:	e004      	b.n	800af1a <lock_volume+0x4a>
		} else {
			ff_mutex_give(fs->ldrv);	/* Failed system lock */
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	789b      	ldrb	r3, [r3, #2]
 800af14:	4618      	mov	r0, r3
 800af16:	f005 fb49 	bl	80105ac <ff_mutex_give>
		}
	}
#else
	rv = syslock ? ff_mutex_take(fs->ldrv) : ff_mutex_take(fs->ldrv);	/* Lock the volume (this is to prevent compiler warning) */
#endif
	return rv;
 800af1a:	68fb      	ldr	r3, [r7, #12]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	2401980d 	.word	0x2401980d
 800af28:	2401980c 	.word	0x2401980c

0800af2c <unlock_volume>:

static void unlock_volume (
	FATFS* fs,		/* Filesystem object */
	FRESULT res		/* Result code to be returned */
)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d01f      	beq.n	800af7e <unlock_volume+0x52>
 800af3e:	78fb      	ldrb	r3, [r7, #3]
 800af40:	2b0c      	cmp	r3, #12
 800af42:	d01c      	beq.n	800af7e <unlock_volume+0x52>
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	2b0b      	cmp	r3, #11
 800af48:	d019      	beq.n	800af7e <unlock_volume+0x52>
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	2b0f      	cmp	r3, #15
 800af4e:	d016      	beq.n	800af7e <unlock_volume+0x52>
#if FF_FS_LOCK
		if (SysLock == 2 && SysLockVolume == fs->ldrv) {	/* Unlock system if it has been locked by this task */
 800af50:	4b0d      	ldr	r3, [pc, #52]	@ (800af88 <unlock_volume+0x5c>)
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b02      	cmp	r3, #2
 800af58:	d10c      	bne.n	800af74 <unlock_volume+0x48>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	789a      	ldrb	r2, [r3, #2]
 800af5e:	4b0b      	ldr	r3, [pc, #44]	@ (800af8c <unlock_volume+0x60>)
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	b2db      	uxtb	r3, r3
 800af64:	429a      	cmp	r2, r3
 800af66:	d105      	bne.n	800af74 <unlock_volume+0x48>
			SysLock = 1;
 800af68:	4b07      	ldr	r3, [pc, #28]	@ (800af88 <unlock_volume+0x5c>)
 800af6a:	2201      	movs	r2, #1
 800af6c:	701a      	strb	r2, [r3, #0]
			ff_mutex_give(FF_VOLUMES);
 800af6e:	2001      	movs	r0, #1
 800af70:	f005 fb1c 	bl	80105ac <ff_mutex_give>
		}
#endif
		ff_mutex_give(fs->ldrv);	/* Unlock the volume */
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	789b      	ldrb	r3, [r3, #2]
 800af78:	4618      	mov	r0, r3
 800af7a:	f005 fb17 	bl	80105ac <ff_mutex_give>
	}
}
 800af7e:	bf00      	nop
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	2401980c 	.word	0x2401980c
 800af8c:	2401980d 	.word	0x2401980d

0800af90 <chk_share>:

static FRESULT chk_share (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search open object table for the object */
	be = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < FF_FS_LOCK; i++) {
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	e029      	b.n	800aff8 <chk_share+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800afa4:	4a27      	ldr	r2, [pc, #156]	@ (800b044 <chk_share+0xb4>)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	011b      	lsls	r3, r3, #4
 800afaa:	4413      	add	r3, r2
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d01d      	beq.n	800afee <chk_share+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800afb2:	4a24      	ldr	r2, [pc, #144]	@ (800b044 <chk_share+0xb4>)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	011b      	lsls	r3, r3, #4
 800afb8:	4413      	add	r3, r2
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d116      	bne.n	800aff2 <chk_share+0x62>
				Files[i].clu == dp->obj.sclust &&
 800afc4:	4a1f      	ldr	r2, [pc, #124]	@ (800b044 <chk_share+0xb4>)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	011b      	lsls	r3, r3, #4
 800afca:	4413      	add	r3, r2
 800afcc:	3304      	adds	r3, #4
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d10c      	bne.n	800aff2 <chk_share+0x62>
				Files[i].ofs == dp->dptr) break;
 800afd8:	4a1a      	ldr	r2, [pc, #104]	@ (800b044 <chk_share+0xb4>)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	011b      	lsls	r3, r3, #4
 800afde:	4413      	add	r3, r2
 800afe0:	3308      	adds	r3, #8
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800afe8:	429a      	cmp	r2, r3
 800afea:	d102      	bne.n	800aff2 <chk_share+0x62>
				Files[i].ofs == dp->dptr) break;
 800afec:	e007      	b.n	800affe <chk_share+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800afee:	2301      	movs	r3, #1
 800aff0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < FF_FS_LOCK; i++) {
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3301      	adds	r3, #1
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2b03      	cmp	r3, #3
 800affc:	d9d2      	bls.n	800afa4 <chk_share+0x14>
		}
	}
	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b04      	cmp	r3, #4
 800b002:	d109      	bne.n	800b018 <chk_share+0x88>
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d104      	bne.n	800b014 <chk_share+0x84>
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d001      	beq.n	800b014 <chk_share+0x84>
 800b010:	2312      	movs	r3, #18
 800b012:	e010      	b.n	800b036 <chk_share+0xa6>
 800b014:	2300      	movs	r3, #0
 800b016:	e00e      	b.n	800b036 <chk_share+0xa6>
	}

	/* The object was opened. Reject any open against writing file and all write mode open */
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d108      	bne.n	800b030 <chk_share+0xa0>
 800b01e:	4a09      	ldr	r2, [pc, #36]	@ (800b044 <chk_share+0xb4>)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	011b      	lsls	r3, r3, #4
 800b024:	4413      	add	r3, r2
 800b026:	330c      	adds	r3, #12
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b02e:	d101      	bne.n	800b034 <chk_share+0xa4>
 800b030:	2310      	movs	r3, #16
 800b032:	e000      	b.n	800b036 <chk_share+0xa6>
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3714      	adds	r7, #20
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	240197cc 	.word	0x240197cc

0800b048 <enq_share>:


static int enq_share (void)	/* Check if an entry is available for a new object */
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800b04e:	2300      	movs	r3, #0
 800b050:	607b      	str	r3, [r7, #4]
 800b052:	e002      	b.n	800b05a <enq_share+0x12>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3301      	adds	r3, #1
 800b058:	607b      	str	r3, [r7, #4]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	d806      	bhi.n	800b06e <enq_share+0x26>
 800b060:	4a09      	ldr	r2, [pc, #36]	@ (800b088 <enq_share+0x40>)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	011b      	lsls	r3, r3, #4
 800b066:	4413      	add	r3, r2
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1f2      	bne.n	800b054 <enq_share+0xc>
	return (i == FF_FS_LOCK) ? 0 : 1;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b04      	cmp	r3, #4
 800b072:	bf14      	ite	ne
 800b074:	2301      	movne	r3, #1
 800b076:	2300      	moveq	r3, #0
 800b078:	b2db      	uxtb	r3, r3
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	370c      	adds	r7, #12
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	240197cc 	.word	0x240197cc

0800b08c <inc_share>:

static UINT inc_share (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800b096:	2300      	movs	r3, #0
 800b098:	60fb      	str	r3, [r7, #12]
 800b09a:	e01f      	b.n	800b0dc <inc_share+0x50>
		if (Files[i].fs == dp->obj.fs
 800b09c:	4a41      	ldr	r2, [pc, #260]	@ (800b1a4 <inc_share+0x118>)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	011b      	lsls	r3, r3, #4
 800b0a2:	4413      	add	r3, r2
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d113      	bne.n	800b0d6 <inc_share+0x4a>
		 && Files[i].clu == dp->obj.sclust
 800b0ae:	4a3d      	ldr	r2, [pc, #244]	@ (800b1a4 <inc_share+0x118>)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	011b      	lsls	r3, r3, #4
 800b0b4:	4413      	add	r3, r2
 800b0b6:	3304      	adds	r3, #4
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d109      	bne.n	800b0d6 <inc_share+0x4a>
		 && Files[i].ofs == dp->dptr) break;
 800b0c2:	4a38      	ldr	r2, [pc, #224]	@ (800b1a4 <inc_share+0x118>)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	4413      	add	r3, r2
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d006      	beq.n	800b0e4 <inc_share+0x58>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	d9dc      	bls.n	800b09c <inc_share+0x10>
 800b0e2:	e000      	b.n	800b0e6 <inc_share+0x5a>
		 && Files[i].ofs == dp->dptr) break;
 800b0e4:	bf00      	nop
	}

	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2b04      	cmp	r3, #4
 800b0ea:	d132      	bne.n	800b152 <inc_share+0xc6>
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	e002      	b.n	800b0f8 <inc_share+0x6c>
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d806      	bhi.n	800b10c <inc_share+0x80>
 800b0fe:	4a29      	ldr	r2, [pc, #164]	@ (800b1a4 <inc_share+0x118>)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	4413      	add	r3, r2
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1f2      	bne.n	800b0f2 <inc_share+0x66>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2b04      	cmp	r3, #4
 800b110:	d101      	bne.n	800b116 <inc_share+0x8a>
 800b112:	2300      	movs	r3, #0
 800b114:	e03f      	b.n	800b196 <inc_share+0x10a>
		Files[i].fs = dp->obj.fs;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	4922      	ldr	r1, [pc, #136]	@ (800b1a4 <inc_share+0x118>)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	011b      	lsls	r3, r3, #4
 800b120:	440b      	add	r3, r1
 800b122:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689a      	ldr	r2, [r3, #8]
 800b128:	491e      	ldr	r1, [pc, #120]	@ (800b1a4 <inc_share+0x118>)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	011b      	lsls	r3, r3, #4
 800b12e:	440b      	add	r3, r1
 800b130:	3304      	adds	r3, #4
 800b132:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b138:	491a      	ldr	r1, [pc, #104]	@ (800b1a4 <inc_share+0x118>)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	011b      	lsls	r3, r3, #4
 800b13e:	440b      	add	r3, r1
 800b140:	3308      	adds	r3, #8
 800b142:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b144:	4a17      	ldr	r2, [pc, #92]	@ (800b1a4 <inc_share+0x118>)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	011b      	lsls	r3, r3, #4
 800b14a:	4413      	add	r3, r2
 800b14c:	330c      	adds	r3, #12
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]
	}

	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	dd09      	ble.n	800b16c <inc_share+0xe0>
 800b158:	4a12      	ldr	r2, [pc, #72]	@ (800b1a4 <inc_share+0x118>)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	011b      	lsls	r3, r3, #4
 800b15e:	4413      	add	r3, r2
 800b160:	330c      	adds	r3, #12
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d001      	beq.n	800b16c <inc_share+0xe0>
 800b168:	2300      	movs	r3, #0
 800b16a:	e014      	b.n	800b196 <inc_share+0x10a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d107      	bne.n	800b182 <inc_share+0xf6>
 800b172:	4a0c      	ldr	r2, [pc, #48]	@ (800b1a4 <inc_share+0x118>)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	011b      	lsls	r3, r3, #4
 800b178:	4413      	add	r3, r2
 800b17a:	330c      	adds	r3, #12
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3301      	adds	r3, #1
 800b180:	e001      	b.n	800b186 <inc_share+0xfa>
 800b182:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b186:	4907      	ldr	r1, [pc, #28]	@ (800b1a4 <inc_share+0x118>)
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	0112      	lsls	r2, r2, #4
 800b18c:	440a      	add	r2, r1
 800b18e:	320c      	adds	r2, #12
 800b190:	6013      	str	r3, [r2, #0]

	return i + 1;	/* Index number origin from 1 */
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3301      	adds	r3, #1
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	240197cc 	.word	0x240197cc

0800b1a8 <dec_share>:


static FRESULT dec_share (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
	UINT n;
	FRESULT res;


	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	607b      	str	r3, [r7, #4]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d825      	bhi.n	800b208 <dec_share+0x60>
		n = Files[i].ctr;
 800b1bc:	4a17      	ldr	r2, [pc, #92]	@ (800b21c <dec_share+0x74>)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	011b      	lsls	r3, r3, #4
 800b1c2:	4413      	add	r3, r2
 800b1c4:	330c      	adds	r3, #12
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	60fb      	str	r3, [r7, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1d0:	d101      	bne.n	800b1d6 <dec_share+0x2e>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60fb      	str	r3, [r7, #12]
		if (n > 0) n--;			/* Decrement read mode open count */
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <dec_share+0x3a>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	60fb      	str	r3, [r7, #12]
		Files[i].ctr = n;
 800b1e2:	4a0e      	ldr	r2, [pc, #56]	@ (800b21c <dec_share+0x74>)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	011b      	lsls	r3, r3, #4
 800b1e8:	4413      	add	r3, r2
 800b1ea:	330c      	adds	r3, #12
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	601a      	str	r2, [r3, #0]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d105      	bne.n	800b202 <dec_share+0x5a>
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 800b1f6:	4a09      	ldr	r2, [pc, #36]	@ (800b21c <dec_share+0x74>)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	011b      	lsls	r3, r3, #4
 800b1fc:	4413      	add	r3, r2
 800b1fe:	2200      	movs	r2, #0
 800b200:	601a      	str	r2, [r3, #0]
		}
		res = FR_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	72fb      	strb	r3, [r7, #11]
 800b206:	e001      	b.n	800b20c <dec_share+0x64>
	} else {
		res = FR_INT_ERR;		/* Invalid index number */
 800b208:	2302      	movs	r3, #2
 800b20a:	72fb      	strb	r3, [r7, #11]
	}
	return res;
 800b20c:	7afb      	ldrb	r3, [r7, #11]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	240197cc 	.word	0x240197cc

0800b220 <clear_share>:


static void clear_share (	/* Clear all lock entries of the volume */
	FATFS* fs
)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < FF_FS_LOCK; i++) {
 800b228:	2300      	movs	r3, #0
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	e010      	b.n	800b250 <clear_share+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b22e:	4a0d      	ldr	r2, [pc, #52]	@ (800b264 <clear_share+0x44>)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	011b      	lsls	r3, r3, #4
 800b234:	4413      	add	r3, r2
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d105      	bne.n	800b24a <clear_share+0x2a>
 800b23e:	4a09      	ldr	r2, [pc, #36]	@ (800b264 <clear_share+0x44>)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	011b      	lsls	r3, r3, #4
 800b244:	4413      	add	r3, r2
 800b246:	2200      	movs	r2, #0
 800b248:	601a      	str	r2, [r3, #0]
	for (i = 0; i < FF_FS_LOCK; i++) {
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3301      	adds	r3, #1
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2b03      	cmp	r3, #3
 800b254:	d9eb      	bls.n	800b22e <clear_share+0xe>
	}
}
 800b256:	bf00      	nop
 800b258:	bf00      	nop
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	240197cc 	.word	0x240197cc

0800b268 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	791b      	ldrb	r3, [r3, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d02c      	beq.n	800b2d6 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	7858      	ldrb	r0, [r3, #1]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b28a:	2301      	movs	r3, #1
 800b28c:	f7ff fb54 	bl	800a938 <disk_write>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d11d      	bne.n	800b2d2 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a4:	1ad2      	subs	r2, r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d213      	bcs.n	800b2d6 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	78db      	ldrb	r3, [r3, #3]
 800b2b2:	2b02      	cmp	r3, #2
 800b2b4:	d10f      	bne.n	800b2d6 <sync_window+0x6e>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	7858      	ldrb	r0, [r3, #1]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2c8:	441a      	add	r2, r3
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	f7ff fb34 	bl	800a938 <disk_write>
 800b2d0:	e001      	b.n	800b2d6 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d01b      	beq.n	800b330 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f7ff ffb5 	bl	800b268 <sync_window>
 800b2fe:	4603      	mov	r3, r0
 800b300:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b302:	7bfb      	ldrb	r3, [r7, #15]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d113      	bne.n	800b330 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	7858      	ldrb	r0, [r3, #1]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800b312:	2301      	movs	r3, #1
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	f7ff faef 	bl	800a8f8 <disk_read>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d004      	beq.n	800b32a <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800b320:	f04f 33ff 	mov.w	r3, #4294967295
 800b324:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b326:	2301      	movs	r3, #1
 800b328:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	649a      	str	r2, [r3, #72]	@ 0x48
		}
	}
	return res;
 800b330:	7bfb      	ldrb	r3, [r7, #15]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7ff ff8f 	bl	800b268 <sync_window>
 800b34a:	4603      	mov	r3, r0
 800b34c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d158      	bne.n	800b406 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	2b03      	cmp	r3, #3
 800b35a:	d148      	bne.n	800b3ee <sync_fs+0xb2>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	795b      	ldrb	r3, [r3, #5]
 800b360:	2b01      	cmp	r3, #1
 800b362:	d144      	bne.n	800b3ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	334c      	adds	r3, #76	@ 0x4c
 800b368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b36c:	2100      	movs	r1, #0
 800b36e:	4618      	mov	r0, r3
 800b370:	f016 fe8d 	bl	802208e <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	334c      	adds	r3, #76	@ 0x4c
 800b378:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b37c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff fc37 	bl	800abf4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	334c      	adds	r3, #76	@ 0x4c
 800b38a:	4921      	ldr	r1, [pc, #132]	@ (800b410 <sync_fs+0xd4>)
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fc4c 	bl	800ac2a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	334c      	adds	r3, #76	@ 0x4c
 800b396:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b39a:	491e      	ldr	r1, [pc, #120]	@ (800b414 <sync_fs+0xd8>)
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7ff fc44 	bl	800ac2a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	334c      	adds	r3, #76	@ 0x4c
 800b3a6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	699b      	ldr	r3, [r3, #24]
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	f7ff fc3a 	bl	800ac2a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	334c      	adds	r3, #76	@ 0x4c
 800b3ba:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	f7ff fc30 	bl	800ac2a <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3ce:	1c5a      	adds	r2, r3, #1
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	649a      	str	r2, [r3, #72]	@ 0x48
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	7858      	ldrb	r0, [r3, #1]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	f7ff faa8 	bl	800a938 <disk_write>
			fs->fsi_flag = 0;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	785b      	ldrb	r3, [r3, #1]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff fabe 	bl	800a978 <disk_ioctl>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <sync_fs+0xca>
 800b402:	2301      	movs	r3, #1
 800b404:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b406:	7bfb      	ldrb	r3, [r7, #15]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	41615252 	.word	0x41615252
 800b414:	61417272 	.word	0x61417272

0800b418 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	3b02      	subs	r3, #2
 800b426:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b42c:	3b02      	subs	r3, #2
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	429a      	cmp	r2, r3
 800b432:	d301      	bcc.n	800b438 <clst2sect+0x20>
 800b434:	2300      	movs	r3, #0
 800b436:	e008      	b.n	800b44a <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	895b      	ldrh	r3, [r3, #10]
 800b440:	4619      	mov	r1, r3
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	fb01 f303 	mul.w	r3, r1, r3
 800b448:	4413      	add	r3, r2
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
	...

0800b458 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b462:	6879      	ldr	r1, [r7, #4]
 800b464:	6809      	ldr	r1, [r1, #0]
 800b466:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b468:	6839      	ldr	r1, [r7, #0]
 800b46a:	2901      	cmp	r1, #1
 800b46c:	d904      	bls.n	800b478 <get_fat+0x20>
 800b46e:	69b9      	ldr	r1, [r7, #24]
 800b470:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800b472:	6838      	ldr	r0, [r7, #0]
 800b474:	4288      	cmp	r0, r1
 800b476:	d302      	bcc.n	800b47e <get_fat+0x26>
		val = 1;	/* Internal error */
 800b478:	2301      	movs	r3, #1
 800b47a:	61fb      	str	r3, [r7, #28]
 800b47c:	e10c      	b.n	800b698 <get_fat+0x240>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b47e:	f04f 31ff 	mov.w	r1, #4294967295
 800b482:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800b484:	69b9      	ldr	r1, [r7, #24]
 800b486:	7809      	ldrb	r1, [r1, #0]
 800b488:	3901      	subs	r1, #1
 800b48a:	2903      	cmp	r1, #3
 800b48c:	f200 80f8 	bhi.w	800b680 <get_fat+0x228>
 800b490:	a001      	add	r0, pc, #4	@ (adr r0, 800b498 <get_fat+0x40>)
 800b492:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b496:	bf00      	nop
 800b498:	0800b4a9 	.word	0x0800b4a9
 800b49c:	0800b52f 	.word	0x0800b52f
 800b4a0:	0800b565 	.word	0x0800b565
 800b4a4:	0800b59f 	.word	0x0800b59f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	085b      	lsrs	r3, r3, #1
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	0a5b      	lsrs	r3, r3, #9
 800b4be:	4413      	add	r3, r2
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	69b8      	ldr	r0, [r7, #24]
 800b4c4:	f7ff ff0c 	bl	800b2e0 <move_window>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f040 80db 	bne.w	800b686 <get_fat+0x22e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	60fa      	str	r2, [r7, #12]
 800b4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	4413      	add	r3, r2
 800b4de:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800b4e2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	0a5b      	lsrs	r3, r3, #9
 800b4ec:	4413      	add	r3, r2
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	69b8      	ldr	r0, [r7, #24]
 800b4f2:	f7ff fef5 	bl	800b2e0 <move_window>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f040 80c6 	bne.w	800b68a <get_fat+0x232>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b504:	69ba      	ldr	r2, [r7, #24]
 800b506:	4413      	add	r3, r2
 800b508:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800b50c:	021b      	lsls	r3, r3, #8
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	4313      	orrs	r3, r2
 800b512:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	f003 0301 	and.w	r3, r3, #1
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <get_fat+0xcc>
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	091b      	lsrs	r3, r3, #4
 800b522:	e002      	b.n	800b52a <get_fat+0xd2>
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b52a:	61fb      	str	r3, [r7, #28]
			break;
 800b52c:	e0b4      	b.n	800b698 <get_fat+0x240>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	0a1b      	lsrs	r3, r3, #8
 800b536:	4413      	add	r3, r2
 800b538:	4619      	mov	r1, r3
 800b53a:	69b8      	ldr	r0, [r7, #24]
 800b53c:	f7ff fed0 	bl	800b2e0 <move_window>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	f040 80a3 	bne.w	800b68e <get_fat+0x236>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	005b      	lsls	r3, r3, #1
 800b552:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b556:	4413      	add	r3, r2
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff fa34 	bl	800a9c6 <ld_word>
 800b55e:	4603      	mov	r3, r0
 800b560:	61fb      	str	r3, [r7, #28]
			break;
 800b562:	e099      	b.n	800b698 <get_fat+0x240>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	09db      	lsrs	r3, r3, #7
 800b56c:	4413      	add	r3, r2
 800b56e:	4619      	mov	r1, r3
 800b570:	69b8      	ldr	r0, [r7, #24]
 800b572:	f7ff feb5 	bl	800b2e0 <move_window>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f040 808a 	bne.w	800b692 <get_fat+0x23a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b58c:	4413      	add	r3, r2
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff fa32 	bl	800a9f8 <ld_dword>
 800b594:	4603      	mov	r3, r0
 800b596:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b59a:	61fb      	str	r3, [r7, #28]
			break;
 800b59c:	e07c      	b.n	800b698 <get_fat+0x240>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800b59e:	6879      	ldr	r1, [r7, #4]
 800b5a0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b5a4:	4301      	orrs	r1, r0
 800b5a6:	d003      	beq.n	800b5b0 <get_fat+0x158>
 800b5a8:	6879      	ldr	r1, [r7, #4]
 800b5aa:	6889      	ldr	r1, [r1, #8]
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	d103      	bne.n	800b5b8 <get_fat+0x160>
 800b5b0:	6879      	ldr	r1, [r7, #4]
 800b5b2:	79c9      	ldrb	r1, [r1, #7]
 800b5b4:	2900      	cmp	r1, #0
 800b5b6:	d160      	bne.n	800b67a <get_fat+0x222>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b5b8:	6879      	ldr	r1, [r7, #4]
 800b5ba:	6889      	ldr	r1, [r1, #8]
 800b5bc:	6838      	ldr	r0, [r7, #0]
 800b5be:	1a41      	subs	r1, r0, r1
 800b5c0:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800b5c2:	6879      	ldr	r1, [r7, #4]
 800b5c4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b5c8:	1e42      	subs	r2, r0, #1
 800b5ca:	f141 33ff 	adc.w	r3, r1, #4294967295
 800b5ce:	f04f 0000 	mov.w	r0, #0
 800b5d2:	f04f 0100 	mov.w	r1, #0
 800b5d6:	0a50      	lsrs	r0, r2, #9
 800b5d8:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b5dc:	0a59      	lsrs	r1, r3, #9
 800b5de:	4602      	mov	r2, r0
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	895b      	ldrh	r3, [r3, #10]
 800b5e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e8:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	79db      	ldrb	r3, [r3, #7]
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d10e      	bne.n	800b610 <get_fat+0x1b8>
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d80a      	bhi.n	800b610 <get_fat+0x1b8>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d002      	beq.n	800b608 <get_fat+0x1b0>
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	3301      	adds	r3, #1
 800b606:	e001      	b.n	800b60c <get_fat+0x1b4>
 800b608:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b60c:	61fb      	str	r3, [r7, #28]
					break;
 800b60e:	e043      	b.n	800b698 <get_fat+0x240>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	79db      	ldrb	r3, [r3, #7]
 800b614:	2b03      	cmp	r3, #3
 800b616:	d108      	bne.n	800b62a <get_fat+0x1d2>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	697a      	ldr	r2, [r7, #20]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d203      	bcs.n	800b62a <get_fat+0x1d2>
					val = clst + 1; 	/* Generate the value */
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	3301      	adds	r3, #1
 800b626:	61fb      	str	r3, [r7, #28]
					break;
 800b628:	e036      	b.n	800b698 <get_fat+0x240>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	79db      	ldrb	r3, [r3, #7]
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d023      	beq.n	800b67a <get_fat+0x222>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d003      	beq.n	800b642 <get_fat+0x1ea>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800b63a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b63e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800b640:	e02a      	b.n	800b698 <get_fat+0x240>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	09db      	lsrs	r3, r3, #7
 800b64a:	4413      	add	r3, r2
 800b64c:	4619      	mov	r1, r3
 800b64e:	69b8      	ldr	r0, [r7, #24]
 800b650:	f7ff fe46 	bl	800b2e0 <move_window>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d11d      	bne.n	800b696 <get_fat+0x23e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b668:	4413      	add	r3, r2
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7ff f9c4 	bl	800a9f8 <ld_dword>
 800b670:	4603      	mov	r3, r0
 800b672:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b676:	61fb      	str	r3, [r7, #28]
					break;
 800b678:	e00e      	b.n	800b698 <get_fat+0x240>
				}
			}
			val = 1;	/* Internal error */
 800b67a:	2301      	movs	r3, #1
 800b67c:	61fb      	str	r3, [r7, #28]
			break;
 800b67e:	e00b      	b.n	800b698 <get_fat+0x240>
#endif
		default:
			val = 1;	/* Internal error */
 800b680:	2301      	movs	r3, #1
 800b682:	61fb      	str	r3, [r7, #28]
 800b684:	e008      	b.n	800b698 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b686:	bf00      	nop
 800b688:	e006      	b.n	800b698 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b68a:	bf00      	nop
 800b68c:	e004      	b.n	800b698 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b68e:	bf00      	nop
 800b690:	e002      	b.n	800b698 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b692:	bf00      	nop
 800b694:	e000      	b.n	800b698 <get_fat+0x240>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b696:	bf00      	nop
		}
	}

	return val;
 800b698:	69fb      	ldr	r3, [r7, #28]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3720      	adds	r7, #32
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop

0800b6a4 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b6a4:	b590      	push	{r4, r7, lr}
 800b6a6:	b089      	sub	sp, #36	@ 0x24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	f240 80dd 	bls.w	800b876 <put_fat+0x1d2>
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	f080 80d7 	bcs.w	800b876 <put_fat+0x1d2>
		switch (fs->fs_type) {
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	2b04      	cmp	r3, #4
 800b6ce:	f300 80d2 	bgt.w	800b876 <put_fat+0x1d2>
 800b6d2:	2b03      	cmp	r3, #3
 800b6d4:	f280 8093 	bge.w	800b7fe <put_fat+0x15a>
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d002      	beq.n	800b6e2 <put_fat+0x3e>
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d06e      	beq.n	800b7be <put_fat+0x11a>
 800b6e0:	e0c9      	b.n	800b876 <put_fat+0x1d2>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	61bb      	str	r3, [r7, #24]
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	085b      	lsrs	r3, r3, #1
 800b6ea:	69ba      	ldr	r2, [r7, #24]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6f4:	69bb      	ldr	r3, [r7, #24]
 800b6f6:	0a5b      	lsrs	r3, r3, #9
 800b6f8:	4413      	add	r3, r2
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f7ff fdef 	bl	800b2e0 <move_window>
 800b702:	4603      	mov	r3, r0
 800b704:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b706:	7ffb      	ldrb	r3, [r7, #31]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f040 80ad 	bne.w	800b868 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	1c59      	adds	r1, r3, #1
 800b718:	61b9      	str	r1, [r7, #24]
 800b71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b71e:	4413      	add	r3, r2
 800b720:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00d      	beq.n	800b748 <put_fat+0xa4>
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	b25b      	sxtb	r3, r3
 800b732:	f003 030f 	and.w	r3, r3, #15
 800b736:	b25a      	sxtb	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	b25b      	sxtb	r3, r3
 800b73c:	011b      	lsls	r3, r3, #4
 800b73e:	b25b      	sxtb	r3, r3
 800b740:	4313      	orrs	r3, r2
 800b742:	b25b      	sxtb	r3, r3
 800b744:	b2db      	uxtb	r3, r3
 800b746:	e001      	b.n	800b74c <put_fat+0xa8>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2201      	movs	r2, #1
 800b754:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	0a5b      	lsrs	r3, r3, #9
 800b75e:	4413      	add	r3, r2
 800b760:	4619      	mov	r1, r3
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f7ff fdbc 	bl	800b2e0 <move_window>
 800b768:	4603      	mov	r3, r0
 800b76a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b76c:	7ffb      	ldrb	r3, [r7, #31]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d17c      	bne.n	800b86c <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b77e:	4413      	add	r3, r2
 800b780:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d003      	beq.n	800b794 <put_fat+0xf0>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	091b      	lsrs	r3, r3, #4
 800b790:	b2db      	uxtb	r3, r3
 800b792:	e00e      	b.n	800b7b2 <put_fat+0x10e>
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	b25b      	sxtb	r3, r3
 800b79a:	f023 030f 	bic.w	r3, r3, #15
 800b79e:	b25a      	sxtb	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	0a1b      	lsrs	r3, r3, #8
 800b7a4:	b25b      	sxtb	r3, r3
 800b7a6:	f003 030f 	and.w	r3, r3, #15
 800b7aa:	b25b      	sxtb	r3, r3
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	b25b      	sxtb	r3, r3
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	711a      	strb	r2, [r3, #4]
			break;
 800b7bc:	e05b      	b.n	800b876 <put_fat+0x1d2>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	0a1b      	lsrs	r3, r3, #8
 800b7c6:	4413      	add	r3, r2
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7ff fd88 	bl	800b2e0 <move_window>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7d4:	7ffb      	ldrb	r3, [r7, #31]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d14a      	bne.n	800b870 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	005b      	lsls	r3, r3, #1
 800b7e4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b7e8:	4413      	add	r3, r2
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	b292      	uxth	r2, r2
 800b7ee:	4611      	mov	r1, r2
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7ff f9ff 	bl	800abf4 <st_word>
			fs->wflag = 1;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	711a      	strb	r2, [r3, #4]
			break;
 800b7fc:	e03b      	b.n	800b876 <put_fat+0x1d2>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	09db      	lsrs	r3, r3, #7
 800b806:	4413      	add	r3, r2
 800b808:	4619      	mov	r1, r3
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f7ff fd68 	bl	800b2e0 <move_window>
 800b810:	4603      	mov	r3, r0
 800b812:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b814:	7ffb      	ldrb	r3, [r7, #31]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d12c      	bne.n	800b874 <put_fat+0x1d0>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	2b04      	cmp	r3, #4
 800b820:	d012      	beq.n	800b848 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b836:	4413      	add	r3, r2
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff f8dd 	bl	800a9f8 <ld_dword>
 800b83e:	4603      	mov	r3, r0
 800b840:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b844:	4323      	orrs	r3, r4
 800b846:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b856:	4413      	add	r3, r2
 800b858:	6879      	ldr	r1, [r7, #4]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff f9e5 	bl	800ac2a <st_dword>
			fs->wflag = 1;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2201      	movs	r2, #1
 800b864:	711a      	strb	r2, [r3, #4]
			break;
 800b866:	e006      	b.n	800b876 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b868:	bf00      	nop
 800b86a:	e004      	b.n	800b876 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b86c:	bf00      	nop
 800b86e:	e002      	b.n	800b876 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b870:	bf00      	nop
 800b872:	e000      	b.n	800b876 <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b874:	bf00      	nop
		}
	}
	return res;
 800b876:	7ffb      	ldrb	r3, [r7, #31]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3724      	adds	r7, #36	@ 0x24
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd90      	pop	{r4, r7, pc}

0800b880 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b08a      	sub	sp, #40	@ 0x28
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	3b02      	subs	r3, #2
 800b890:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b896:	3b02      	subs	r3, #2
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d301      	bcc.n	800b8a2 <find_bitmap+0x22>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	61fb      	str	r3, [r7, #28]
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	61bb      	str	r3, [r7, #24]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	0b1b      	lsrs	r3, r3, #12
 800b8b6:	4413      	add	r3, r2
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f7ff fd10 	bl	800b2e0 <move_window>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d002      	beq.n	800b8cc <find_bitmap+0x4c>
 800b8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ca:	e051      	b.n	800b970 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	08db      	lsrs	r3, r3, #3
 800b8d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8d4:	623b      	str	r3, [r7, #32]
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	f003 0307 	and.w	r3, r3, #7
 800b8dc:	2201      	movs	r2, #1
 800b8de:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	334c      	adds	r3, #76	@ 0x4c
 800b8ee:	781a      	ldrb	r2, [r3, #0]
 800b8f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	74fb      	strb	r3, [r7, #19]
 800b8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	3301      	adds	r3, #1
 800b906:	61fb      	str	r3, [r7, #28]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b90c:	3b02      	subs	r3, #2
 800b90e:	69fa      	ldr	r2, [r7, #28]
 800b910:	429a      	cmp	r2, r3
 800b912:	d307      	bcc.n	800b924 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800b914:	2300      	movs	r3, #0
 800b916:	61fb      	str	r3, [r7, #28]
 800b918:	2300      	movs	r3, #0
 800b91a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b91e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b922:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 800b924:	7cfb      	ldrb	r3, [r7, #19]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d109      	bne.n	800b93e <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	3301      	adds	r3, #1
 800b92e:	617b      	str	r3, [r7, #20]
 800b930:	697a      	ldr	r2, [r7, #20]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	d106      	bne.n	800b946 <find_bitmap+0xc6>
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	3302      	adds	r3, #2
 800b93c:	e018      	b.n	800b970 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	61bb      	str	r3, [r7, #24]
 800b942:	2300      	movs	r3, #0
 800b944:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800b946:	69fa      	ldr	r2, [r7, #28]
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d101      	bne.n	800b952 <find_bitmap+0xd2>
 800b94e:	2300      	movs	r3, #0
 800b950:	e00e      	b.n	800b970 <find_bitmap+0xf0>
			} while (bm != 0);
 800b952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1c5      	bne.n	800b8e6 <find_bitmap+0x66>
			bm = 1;
 800b95a:	2301      	movs	r3, #1
 800b95c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	3301      	adds	r3, #1
 800b964:	623b      	str	r3, [r7, #32]
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b96c:	d3bb      	bcc.n	800b8e6 <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800b96e:	e79e      	b.n	800b8ae <find_bitmap+0x2e>
	}
}
 800b970:	4618      	mov	r0, r3
 800b972:	3728      	adds	r7, #40	@ 0x28
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b088      	sub	sp, #32
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
 800b984:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	3b02      	subs	r3, #2
 800b98a:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	0b1b      	lsrs	r3, r3, #12
 800b994:	4413      	add	r3, r2
 800b996:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	08db      	lsrs	r3, r3, #3
 800b99c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9a0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	f003 0307 	and.w	r3, r3, #7
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ae:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	1c5a      	adds	r2, r3, #1
 800b9b4:	617a      	str	r2, [r7, #20]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f7ff fc91 	bl	800b2e0 <move_window>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d001      	beq.n	800b9c8 <change_bitmap+0x50>
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e03d      	b.n	800ba44 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	334c      	adds	r3, #76	@ 0x4c
 800b9d0:	781a      	ldrb	r2, [r3, #0]
 800b9d2:	7ffb      	ldrb	r3, [r7, #31]
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	bf14      	ite	ne
 800b9dc:	2301      	movne	r3, #1
 800b9de:	2300      	moveq	r3, #0
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d101      	bne.n	800b9ee <change_bitmap+0x76>
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	e02a      	b.n	800ba44 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	334c      	adds	r3, #76	@ 0x4c
 800b9f6:	781a      	ldrb	r2, [r3, #0]
 800b9f8:	7ffb      	ldrb	r3, [r7, #31]
 800b9fa:	4053      	eors	r3, r2
 800b9fc:	b2d9      	uxtb	r1, r3
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	4413      	add	r3, r2
 800ba04:	334c      	adds	r3, #76	@ 0x4c
 800ba06:	460a      	mov	r2, r1
 800ba08:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	711a      	strb	r2, [r3, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3b01      	subs	r3, #1
 800ba14:	607b      	str	r3, [r7, #4]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <change_bitmap+0xa8>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e011      	b.n	800ba44 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800ba20:	7ffb      	ldrb	r3, [r7, #31]
 800ba22:	005b      	lsls	r3, r3, #1
 800ba24:	77fb      	strb	r3, [r7, #31]
 800ba26:	7ffb      	ldrb	r3, [r7, #31]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1cd      	bne.n	800b9c8 <change_bitmap+0x50>
			bm = 1;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	3301      	adds	r3, #1
 800ba34:	61bb      	str	r3, [r7, #24]
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba3c:	d3c4      	bcc.n	800b9c8 <change_bitmap+0x50>
		i = 0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800ba42:	e7b5      	b.n	800b9b0 <change_bitmap+0x38>
	}
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3720      	adds	r7, #32
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	79db      	ldrb	r3, [r3, #7]
 800ba58:	2b03      	cmp	r3, #3
 800ba5a:	d121      	bne.n	800baa0 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	617b      	str	r3, [r7, #20]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	613b      	str	r3, [r7, #16]
 800ba68:	e014      	b.n	800ba94 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6818      	ldr	r0, [r3, #0]
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	3301      	adds	r3, #1
 800ba72:	461a      	mov	r2, r3
 800ba74:	6979      	ldr	r1, [r7, #20]
 800ba76:	f7ff fe15 	bl	800b6a4 <put_fat>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <fill_first_frag+0x3c>
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
 800ba86:	e00c      	b.n	800baa2 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	617b      	str	r3, [r7, #20]
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	613b      	str	r3, [r7, #16]
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1e7      	bne.n	800ba6a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b086      	sub	sp, #24
 800baae:	af00      	add	r7, sp, #0
 800bab0:	60f8      	str	r0, [r7, #12]
 800bab2:	60b9      	str	r1, [r7, #8]
 800bab4:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800bab6:	e020      	b.n	800bafa <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6818      	ldr	r0, [r3, #0]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	69db      	ldr	r3, [r3, #28]
 800bac0:	68ba      	ldr	r2, [r7, #8]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	1c59      	adds	r1, r3, #1
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d905      	bls.n	800bada <fill_last_frag+0x30>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	69db      	ldr	r3, [r3, #28]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	3302      	adds	r3, #2
 800bad8:	e000      	b.n	800badc <fill_last_frag+0x32>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	461a      	mov	r2, r3
 800bade:	f7ff fde1 	bl	800b6a4 <put_fat>
 800bae2:	4603      	mov	r3, r0
 800bae4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <fill_last_frag+0x46>
 800baec:	7dfb      	ldrb	r3, [r7, #23]
 800baee:	e009      	b.n	800bb04 <fill_last_frag+0x5a>
		obj->n_frag--;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	69db      	ldr	r3, [r3, #28]
 800baf4:	1e5a      	subs	r2, r3, #1
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	69db      	ldr	r3, [r3, #28]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1da      	bne.n	800bab8 <fill_last_frag+0xe>
	}
	return FR_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3718      	adds	r7, #24
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b08a      	sub	sp, #40	@ 0x28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d904      	bls.n	800bb3a <remove_chain+0x2e>
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d301      	bcc.n	800bb3e <remove_chain+0x32>
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	e0c4      	b.n	800bcc8 <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d014      	beq.n	800bb6e <remove_chain+0x62>
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b04      	cmp	r3, #4
 800bb4a:	d103      	bne.n	800bb54 <remove_chain+0x48>
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	79db      	ldrb	r3, [r3, #7]
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d00c      	beq.n	800bb6e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bb54:	f04f 32ff 	mov.w	r2, #4294967295
 800bb58:	6879      	ldr	r1, [r7, #4]
 800bb5a:	69b8      	ldr	r0, [r7, #24]
 800bb5c:	f7ff fda2 	bl	800b6a4 <put_fat>
 800bb60:	4603      	mov	r3, r0
 800bb62:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bb64:	7ffb      	ldrb	r3, [r7, #31]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <remove_chain+0x62>
 800bb6a:	7ffb      	ldrb	r3, [r7, #31]
 800bb6c:	e0ac      	b.n	800bcc8 <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bb6e:	68b9      	ldr	r1, [r7, #8]
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f7ff fc71 	bl	800b458 <get_fat>
 800bb76:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d055      	beq.n	800bc2a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d101      	bne.n	800bb88 <remove_chain+0x7c>
 800bb84:	2302      	movs	r3, #2
 800bb86:	e09f      	b.n	800bcc8 <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8e:	d101      	bne.n	800bb94 <remove_chain+0x88>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e099      	b.n	800bcc8 <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b04      	cmp	r3, #4
 800bb9a:	d00b      	beq.n	800bbb4 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	68b9      	ldr	r1, [r7, #8]
 800bba0:	69b8      	ldr	r0, [r7, #24]
 800bba2:	f7ff fd7f 	bl	800b6a4 <put_fat>
 800bba6:	4603      	mov	r3, r0
 800bba8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bbaa:	7ffb      	ldrb	r3, [r7, #31]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <remove_chain+0xa8>
 800bbb0:	7ffb      	ldrb	r3, [r7, #31]
 800bbb2:	e089      	b.n	800bcc8 <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	699a      	ldr	r2, [r3, #24]
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbbc:	3b02      	subs	r3, #2
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d20b      	bcs.n	800bbda <remove_chain+0xce>
			fs->free_clst++;
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	699b      	ldr	r3, [r3, #24]
 800bbc6:	1c5a      	adds	r2, r3, #1
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	795b      	ldrb	r3, [r3, #5]
 800bbd0:	f043 0301 	orr.w	r3, r3, #1
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	715a      	strb	r2, [r3, #5]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d102      	bne.n	800bbea <remove_chain+0xde>
			ecl = nxt;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	623b      	str	r3, [r7, #32]
 800bbe8:	e017      	b.n	800bc1a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	2b04      	cmp	r3, #4
 800bbf0:	d10f      	bne.n	800bc12 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800bbf2:	6a3a      	ldr	r2, [r7, #32]
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bbfe:	69b8      	ldr	r0, [r7, #24]
 800bc00:	f7ff feba 	bl	800b978 <change_bitmap>
 800bc04:	4603      	mov	r3, r0
 800bc06:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800bc08:	7ffb      	ldrb	r3, [r7, #31]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <remove_chain+0x106>
 800bc0e:	7ffb      	ldrb	r3, [r7, #31]
 800bc10:	e05a      	b.n	800bcc8 <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	623b      	str	r3, [r7, #32]
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d3a2      	bcc.n	800bb6e <remove_chain+0x62>
 800bc28:	e000      	b.n	800bc2c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800bc2a:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	2b04      	cmp	r3, #4
 800bc32:	d148      	bne.n	800bcc6 <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d103      	bne.n	800bc42 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	71da      	strb	r2, [r3, #7]
 800bc40:	e041      	b.n	800bcc6 <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	79db      	ldrb	r3, [r3, #7]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d129      	bne.n	800bc9e <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800bc50:	e017      	b.n	800bc82 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f7ff fbff 	bl	800b458 <get_fat>
 800bc5a:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d801      	bhi.n	800bc66 <remove_chain+0x15a>
 800bc62:	2302      	movs	r3, #2
 800bc64:	e030      	b.n	800bcc8 <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6c:	d101      	bne.n	800bc72 <remove_chain+0x166>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e02a      	b.n	800bcc8 <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	3301      	adds	r3, #1
 800bc76:	697a      	ldr	r2, [r7, #20]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d107      	bne.n	800bc8c <remove_chain+0x180>
					clst++;
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d1e3      	bne.n	800bc52 <remove_chain+0x146>
 800bc8a:	e000      	b.n	800bc8e <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800bc8c:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d117      	bne.n	800bcc6 <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2202      	movs	r2, #2
 800bc9a:	71da      	strb	r2, [r3, #7]
 800bc9c:	e013      	b.n	800bcc6 <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	79db      	ldrb	r3, [r3, #7]
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d10f      	bne.n	800bcc6 <remove_chain+0x1ba>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d30a      	bcc.n	800bcc6 <remove_chain+0x1ba>
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	689a      	ldr	r2, [r3, #8]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	4413      	add	r3, r2
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d802      	bhi.n	800bcc6 <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3728      	adds	r7, #40	@ 0x28
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10d      	bne.n	800bd02 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d004      	beq.n	800bcfc <create_chain+0x2c>
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf6:	69ba      	ldr	r2, [r7, #24]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d31b      	bcc.n	800bd34 <create_chain+0x64>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	61bb      	str	r3, [r7, #24]
 800bd00:	e018      	b.n	800bd34 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7ff fba7 	bl	800b458 <get_fat>
 800bd0a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d801      	bhi.n	800bd16 <create_chain+0x46>
 800bd12:	2301      	movs	r3, #1
 800bd14:	e113      	b.n	800bf3e <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1c:	d101      	bne.n	800bd22 <create_chain+0x52>
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	e10d      	b.n	800bf3e <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd26:	68fa      	ldr	r2, [r7, #12]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d201      	bcs.n	800bd30 <create_chain+0x60>
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	e106      	b.n	800bf3e <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <create_chain+0x70>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	e0fe      	b.n	800bf3e <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	2b04      	cmp	r3, #4
 800bd46:	d165      	bne.n	800be14 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800bd48:	2201      	movs	r2, #1
 800bd4a:	69b9      	ldr	r1, [r7, #24]
 800bd4c:	6938      	ldr	r0, [r7, #16]
 800bd4e:	f7ff fd97 	bl	800b880 <find_bitmap>
 800bd52:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d003      	beq.n	800bd62 <create_chain+0x92>
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd60:	d101      	bne.n	800bd66 <create_chain+0x96>
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	e0eb      	b.n	800bf3e <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800bd66:	2301      	movs	r3, #1
 800bd68:	2201      	movs	r2, #1
 800bd6a:	69f9      	ldr	r1, [r7, #28]
 800bd6c:	6938      	ldr	r0, [r7, #16]
 800bd6e:	f7ff fe03 	bl	800b978 <change_bitmap>
 800bd72:	4603      	mov	r3, r0
 800bd74:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800bd76:	7dfb      	ldrb	r3, [r7, #23]
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d101      	bne.n	800bd80 <create_chain+0xb0>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e0de      	b.n	800bf3e <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d102      	bne.n	800bd8c <create_chain+0xbc>
 800bd86:	f04f 33ff 	mov.w	r3, #4294967295
 800bd8a:	e0d8      	b.n	800bf3e <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d103      	bne.n	800bd9a <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2202      	movs	r2, #2
 800bd96:	71da      	strb	r2, [r3, #7]
 800bd98:	e011      	b.n	800bdbe <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	79db      	ldrb	r3, [r3, #7]
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d10d      	bne.n	800bdbe <create_chain+0xee>
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	3301      	adds	r3, #1
 800bda6:	69fa      	ldr	r2, [r7, #28]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d008      	beq.n	800bdbe <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	69ba      	ldr	r2, [r7, #24]
 800bdb2:	1ad2      	subs	r2, r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2203      	movs	r2, #3
 800bdbc:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	79db      	ldrb	r3, [r3, #7]
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	f000 8098 	beq.w	800bef8 <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	69fa      	ldr	r2, [r7, #28]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d10b      	bne.n	800bdea <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	69db      	ldr	r3, [r3, #28]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d003      	beq.n	800bde2 <create_chain+0x112>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	3301      	adds	r3, #1
 800bde0:	e000      	b.n	800bde4 <create_chain+0x114>
 800bde2:	2302      	movs	r3, #2
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	61d3      	str	r3, [r2, #28]
 800bde8:	e086      	b.n	800bef8 <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	69db      	ldr	r3, [r3, #28]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d102      	bne.n	800bdf8 <create_chain+0x128>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800bdf8:	69fa      	ldr	r2, [r7, #28]
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7ff fe54 	bl	800baaa <fill_last_frag>
 800be02:	4603      	mov	r3, r0
 800be04:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800be06:	7dfb      	ldrb	r3, [r7, #23]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d175      	bne.n	800bef8 <create_chain+0x228>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	61da      	str	r2, [r3, #28]
 800be12:	e071      	b.n	800bef8 <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800be14:	2300      	movs	r3, #0
 800be16:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800be18:	69ba      	ldr	r2, [r7, #24]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d129      	bne.n	800be74 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	3301      	adds	r3, #1
 800be24:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2a:	69fa      	ldr	r2, [r7, #28]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d301      	bcc.n	800be34 <create_chain+0x164>
 800be30:	2302      	movs	r3, #2
 800be32:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800be34:	69f9      	ldr	r1, [r7, #28]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f7ff fb0e 	bl	800b458 <get_fat>
 800be3c:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d003      	beq.n	800be4c <create_chain+0x17c>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4a:	d101      	bne.n	800be50 <create_chain+0x180>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	e076      	b.n	800bf3e <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00e      	beq.n	800be74 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d906      	bls.n	800be70 <create_chain+0x1a0>
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d201      	bcs.n	800be70 <create_chain+0x1a0>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800be70:	2300      	movs	r3, #0
 800be72:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d129      	bne.n	800bece <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	3301      	adds	r3, #1
 800be82:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be88:	69fa      	ldr	r2, [r7, #28]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d307      	bcc.n	800be9e <create_chain+0x1ce>
					ncl = 2;
 800be8e:	2302      	movs	r3, #2
 800be90:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800be92:	69fa      	ldr	r2, [r7, #28]
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	429a      	cmp	r2, r3
 800be98:	d901      	bls.n	800be9e <create_chain+0x1ce>
 800be9a:	2300      	movs	r3, #0
 800be9c:	e04f      	b.n	800bf3e <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800be9e:	69f9      	ldr	r1, [r7, #28]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff fad9 	bl	800b458 <get_fat>
 800bea6:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00e      	beq.n	800becc <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d003      	beq.n	800bebc <create_chain+0x1ec>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beba:	d101      	bne.n	800bec0 <create_chain+0x1f0>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	e03e      	b.n	800bf3e <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800bec0:	69fa      	ldr	r2, [r7, #28]
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d1da      	bne.n	800be7e <create_chain+0x1ae>
 800bec8:	2300      	movs	r3, #0
 800beca:	e038      	b.n	800bf3e <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
 800becc:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800bece:	f04f 32ff 	mov.w	r2, #4294967295
 800bed2:	69f9      	ldr	r1, [r7, #28]
 800bed4:	6938      	ldr	r0, [r7, #16]
 800bed6:	f7ff fbe5 	bl	800b6a4 <put_fat>
 800beda:	4603      	mov	r3, r0
 800bedc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d109      	bne.n	800bef8 <create_chain+0x228>
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d006      	beq.n	800bef8 <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800beea:	69fa      	ldr	r2, [r7, #28]
 800beec:	6839      	ldr	r1, [r7, #0]
 800beee:	6938      	ldr	r0, [r7, #16]
 800bef0:	f7ff fbd8 	bl	800b6a4 <put_fat>
 800bef4:	4603      	mov	r3, r0
 800bef6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bef8:	7dfb      	ldrb	r3, [r7, #23]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d116      	bne.n	800bf2c <create_chain+0x25c>
		fs->last_clst = ncl;
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	69fa      	ldr	r2, [r7, #28]
 800bf02:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	699a      	ldr	r2, [r3, #24]
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf0c:	3b02      	subs	r3, #2
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d804      	bhi.n	800bf1c <create_chain+0x24c>
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	699b      	ldr	r3, [r3, #24]
 800bf16:	1e5a      	subs	r2, r3, #1
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	795b      	ldrb	r3, [r3, #5]
 800bf20:	f043 0301 	orr.w	r3, r3, #1
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	715a      	strb	r2, [r3, #5]
 800bf2a:	e007      	b.n	800bf3c <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bf2c:	7dfb      	ldrb	r3, [r7, #23]
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d102      	bne.n	800bf38 <create_chain+0x268>
 800bf32:	f04f 33ff 	mov.w	r3, #4294967295
 800bf36:	e000      	b.n	800bf3a <create_chain+0x26a>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bf3c:	69fb      	ldr	r3, [r7, #28]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3720      	adds	r7, #32
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <clmt_clust>:

static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bf46:	b5b0      	push	{r4, r5, r7, lr}
 800bf48:	b088      	sub	sp, #32
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	60f8      	str	r0, [r7, #12]
 800bf4e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl;
	DWORD *tbl;
	FATFS *fs = fp->obj.fs;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf5c:	3304      	adds	r3, #4
 800bf5e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bf60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf64:	f04f 0000 	mov.w	r0, #0
 800bf68:	f04f 0100 	mov.w	r1, #0
 800bf6c:	0a50      	lsrs	r0, r2, #9
 800bf6e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bf72:	0a59      	lsrs	r1, r3, #9
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	895b      	ldrh	r3, [r3, #10]
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	461c      	mov	r4, r3
 800bf7e:	4615      	mov	r5, r2
 800bf80:	4622      	mov	r2, r4
 800bf82:	462b      	mov	r3, r5
 800bf84:	f7f4 fa14 	bl	80003b0 <__aeabi_uldivmod>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	1d1a      	adds	r2, r3, #4
 800bf94:	61ba      	str	r2, [r7, #24]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <clmt_clust+0x5e>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	e010      	b.n	800bfc6 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800bfa4:	69fa      	ldr	r2, [r7, #28]
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d307      	bcc.n	800bfbc <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800bfac:	69fa      	ldr	r2, [r7, #28]
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	61fb      	str	r3, [r7, #28]
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bfba:	e7e9      	b.n	800bf90 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800bfbc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	4413      	add	r3, r2
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3720      	adds	r7, #32
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bdb0      	pop	{r4, r5, r7, pc}

0800bfce <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b086      	sub	sp, #24
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f7ff f945 	bl	800b268 <sync_window>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <dir_clear+0x1a>
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e036      	b.n	800c056 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800bfe8:	6839      	ldr	r1, [r7, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7ff fa14 	bl	800b418 <clst2sect>
 800bff0:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	649a      	str	r2, [r3, #72]	@ 0x48
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	334c      	adds	r3, #76	@ 0x4c
 800bffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c000:	2100      	movs	r1, #0
 800c002:	4618      	mov	r0, r3
 800c004:	f016 f843 	bl	802208e <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	334c      	adds	r3, #76	@ 0x4c
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	2301      	movs	r3, #1
 800c010:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800c012:	2300      	movs	r3, #0
 800c014:	617b      	str	r3, [r7, #20]
 800c016:	e003      	b.n	800c020 <dir_clear+0x52>
 800c018:	697a      	ldr	r2, [r7, #20]
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	4413      	add	r3, r2
 800c01e:	617b      	str	r3, [r7, #20]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	895b      	ldrh	r3, [r3, #10]
 800c024:	461a      	mov	r2, r3
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	4293      	cmp	r3, r2
 800c02a:	d20b      	bcs.n	800c044 <dir_clear+0x76>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	7858      	ldrb	r0, [r3, #1]
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	441a      	add	r2, r3
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	68f9      	ldr	r1, [r7, #12]
 800c03a:	f7fe fc7d 	bl	800a938 <disk_write>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d0e9      	beq.n	800c018 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	895b      	ldrh	r3, [r3, #10]
 800c048:	461a      	mov	r2, r3
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	4293      	cmp	r3, r2
 800c04e:	bf14      	ite	ne
 800c050:	2301      	movne	r3, #1
 800c052:	2300      	moveq	r3, #0
 800c054:	b2db      	uxtb	r3, r3
}
 800c056:	4618      	mov	r0, r3
 800c058:	3718      	adds	r7, #24
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b086      	sub	sp, #24
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	2b04      	cmp	r3, #4
 800c074:	d102      	bne.n	800c07c <dir_sdi+0x1e>
 800c076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c07a:	e001      	b.n	800c080 <dir_sdi+0x22>
 800c07c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	429a      	cmp	r2, r3
 800c084:	d904      	bls.n	800c090 <dir_sdi+0x32>
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	f003 031f 	and.w	r3, r3, #31
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <dir_sdi+0x36>
		return FR_INT_ERR;
 800c090:	2302      	movs	r3, #2
 800c092:	e066      	b.n	800c162 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d109      	bne.n	800c0ba <dir_sdi+0x5c>
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d905      	bls.n	800c0ba <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b2:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10c      	bne.n	800c0da <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	095b      	lsrs	r3, r3, #5
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	8912      	ldrh	r2, [r2, #8]
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d301      	bcc.n	800c0d0 <dir_sdi+0x72>
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	e048      	b.n	800c162 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	639a      	str	r2, [r3, #56]	@ 0x38
 800c0d8:	e029      	b.n	800c12e <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	895b      	ldrh	r3, [r3, #10]
 800c0de:	025b      	lsls	r3, r3, #9
 800c0e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0e2:	e019      	b.n	800c118 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6979      	ldr	r1, [r7, #20]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7ff f9b5 	bl	800b458 <get_fat>
 800c0ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f6:	d101      	bne.n	800c0fc <dir_sdi+0x9e>
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e032      	b.n	800c162 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d904      	bls.n	800c10c <dir_sdi+0xae>
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d301      	bcc.n	800c110 <dir_sdi+0xb2>
 800c10c:	2302      	movs	r3, #2
 800c10e:	e028      	b.n	800c162 <dir_sdi+0x104>
			ofs -= csz;
 800c110:	683a      	ldr	r2, [r7, #0]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c118:	683a      	ldr	r2, [r7, #0]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d2e1      	bcs.n	800c0e4 <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
 800c120:	6979      	ldr	r1, [r7, #20]
 800c122:	6938      	ldr	r0, [r7, #16]
 800c124:	f7ff f978 	bl	800b418 <clst2sect>
 800c128:	4602      	mov	r2, r0
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	697a      	ldr	r2, [r7, #20]
 800c132:	635a      	str	r2, [r3, #52]	@ 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d101      	bne.n	800c140 <dir_sdi+0xe2>
 800c13c:	2302      	movs	r3, #2
 800c13e:	e010      	b.n	800c162 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	0a5b      	lsrs	r3, r3, #9
 800c148:	441a      	add	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c15a:	441a      	add	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800c160:	2300      	movs	r3, #0
}
 800c162:	4618      	mov	r0, r3
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b086      	sub	sp, #24
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
 800c172:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c17e:	3320      	adds	r3, #32
 800c180:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	2b04      	cmp	r3, #4
 800c188:	d102      	bne.n	800c190 <dir_next+0x26>
 800c18a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c18e:	e001      	b.n	800c194 <dir_next+0x2a>
 800c190:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	429a      	cmp	r2, r3
 800c198:	d802      	bhi.n	800c1a0 <dir_next+0x36>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	639a      	str	r2, [r3, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d101      	bne.n	800c1ac <dir_next+0x42>
 800c1a8:	2304      	movs	r3, #4
 800c1aa:	e07f      	b.n	800c2ac <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d16d      	bne.n	800c292 <dir_next+0x128>
		dp->sect++;				/* Next sector */
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1ba:	1c5a      	adds	r2, r3, #1
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	639a      	str	r2, [r3, #56]	@ 0x38

		if (dp->clust == 0) {	/* Static table */
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10a      	bne.n	800c1de <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	095b      	lsrs	r3, r3, #5
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	8912      	ldrh	r2, [r2, #8]
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d35e      	bcc.n	800c292 <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	639a      	str	r2, [r3, #56]	@ 0x38
 800c1da:	2304      	movs	r3, #4
 800c1dc:	e066      	b.n	800c2ac <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	0a5b      	lsrs	r3, r3, #9
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	8952      	ldrh	r2, [r2, #10]
 800c1e6:	3a01      	subs	r2, #1
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d151      	bne.n	800c292 <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	4610      	mov	r0, r2
 800c1f8:	f7ff f92e 	bl	800b458 <get_fat>
 800c1fc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d801      	bhi.n	800c208 <dir_next+0x9e>
 800c204:	2302      	movs	r3, #2
 800c206:	e051      	b.n	800c2ac <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20e:	d101      	bne.n	800c214 <dir_next+0xaa>
 800c210:	2301      	movs	r3, #1
 800c212:	e04b      	b.n	800c2ac <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c218:	697a      	ldr	r2, [r7, #20]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d32f      	bcc.n	800c27e <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d104      	bne.n	800c22e <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	639a      	str	r2, [r3, #56]	@ 0x38
 800c22a:	2304      	movs	r3, #4
 800c22c:	e03e      	b.n	800c2ac <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c234:	4619      	mov	r1, r3
 800c236:	4610      	mov	r0, r2
 800c238:	f7ff fd4a 	bl	800bcd0 <create_chain>
 800c23c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <dir_next+0xde>
 800c244:	2307      	movs	r3, #7
 800c246:	e031      	b.n	800c2ac <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d101      	bne.n	800c252 <dir_next+0xe8>
 800c24e:	2302      	movs	r3, #2
 800c250:	e02c      	b.n	800c2ac <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c258:	d101      	bne.n	800c25e <dir_next+0xf4>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e026      	b.n	800c2ac <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800c25e:	6979      	ldr	r1, [r7, #20]
 800c260:	6938      	ldr	r0, [r7, #16]
 800c262:	f7ff feb4 	bl	800bfce <dir_clear>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <dir_next+0x106>
 800c26c:	2301      	movs	r3, #1
 800c26e:	e01d      	b.n	800c2ac <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	79db      	ldrb	r3, [r3, #7]
 800c274:	f043 0304 	orr.w	r3, r3, #4
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	697a      	ldr	r2, [r7, #20]
 800c282:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 800c284:	6979      	ldr	r1, [r7, #20]
 800c286:	6938      	ldr	r0, [r7, #16]
 800c288:	f7ff f8c6 	bl	800b418 <clst2sect>
 800c28c:	4602      	mov	r2, r0
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a4:	441a      	add	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3718      	adds	r7, #24
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f7ff fec9 	bl	800c05e <dir_sdi>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2d0:	7dfb      	ldrb	r3, [r7, #23]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d140      	bne.n	800c358 <dir_alloc+0xa4>
		n = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2de:	4619      	mov	r1, r3
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f7fe fffd 	bl	800b2e0 <move_window>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d132      	bne.n	800c356 <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b04      	cmp	r3, #4
 800c2f6:	d108      	bne.n	800c30a <dir_alloc+0x56>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	b25b      	sxtb	r3, r3
 800c300:	43db      	mvns	r3, r3
 800c302:	b2db      	uxtb	r3, r3
 800c304:	09db      	lsrs	r3, r3, #7
 800c306:	b2db      	uxtb	r3, r3
 800c308:	e00f      	b.n	800c32a <dir_alloc+0x76>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	2be5      	cmp	r3, #229	@ 0xe5
 800c312:	d004      	beq.n	800c31e <dir_alloc+0x6a>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <dir_alloc+0x6e>
 800c31e:	2301      	movs	r3, #1
 800c320:	e000      	b.n	800c324 <dir_alloc+0x70>
 800c322:	2300      	movs	r3, #0
 800c324:	f003 0301 	and.w	r3, r3, #1
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d007      	beq.n	800c33e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	3301      	adds	r3, #1
 800c332:	613b      	str	r3, [r7, #16]
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d102      	bne.n	800c342 <dir_alloc+0x8e>
 800c33c:	e00c      	b.n	800c358 <dir_alloc+0xa4>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800c33e:	2300      	movs	r3, #0
 800c340:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800c342:	2101      	movs	r1, #1
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7ff ff10 	bl	800c16a <dir_next>
 800c34a:	4603      	mov	r3, r0
 800c34c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c34e:	7dfb      	ldrb	r3, [r7, #23]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d0c2      	beq.n	800c2da <dir_alloc+0x26>
 800c354:	e000      	b.n	800c358 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800c356:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c358:	7dfb      	ldrb	r3, [r7, #23]
 800c35a:	2b04      	cmp	r3, #4
 800c35c:	d101      	bne.n	800c362 <dir_alloc+0xae>
 800c35e:	2307      	movs	r3, #7
 800c360:	75fb      	strb	r3, [r7, #23]
	return res;
 800c362:	7dfb      	ldrb	r3, [r7, #23]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	331a      	adds	r3, #26
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fe fb23 	bl	800a9c6 <ld_word>
 800c380:	4603      	mov	r3, r0
 800c382:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	2b03      	cmp	r3, #3
 800c38a:	d109      	bne.n	800c3a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	3314      	adds	r3, #20
 800c390:	4618      	mov	r0, r3
 800c392:	f7fe fb18 	bl	800a9c6 <ld_word>
 800c396:	4603      	mov	r3, r0
 800c398:	041b      	lsls	r3, r3, #16
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	60f8      	str	r0, [r7, #12]
 800c3b2:	60b9      	str	r1, [r7, #8]
 800c3b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	331a      	adds	r3, #26
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	b292      	uxth	r2, r2
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fe fc17 	bl	800abf4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d109      	bne.n	800c3e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	f103 0214 	add.w	r2, r3, #20
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	0c1b      	lsrs	r3, r3, #16
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4610      	mov	r0, r2
 800c3de:	f7fe fc09 	bl	800abf4 <st_word>
	}
}
 800c3e2:	bf00      	nop
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c3ec:	b590      	push	{r4, r7, lr}
 800c3ee:	b087      	sub	sp, #28
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	331a      	adds	r3, #26
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fe fae3 	bl	800a9c6 <ld_word>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <cmp_lfn+0x1e>
 800c406:	2300      	movs	r3, #0
 800c408:	e058      	b.n	800c4bc <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c412:	1e5a      	subs	r2, r3, #1
 800c414:	4613      	mov	r3, r2
 800c416:	005b      	lsls	r3, r3, #1
 800c418:	4413      	add	r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c420:	2301      	movs	r3, #1
 800c422:	81fb      	strh	r3, [r7, #14]
 800c424:	2300      	movs	r3, #0
 800c426:	613b      	str	r3, [r7, #16]
 800c428:	e032      	b.n	800c490 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c42a:	4a26      	ldr	r2, [pc, #152]	@ (800c4c4 <cmp_lfn+0xd8>)
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	4413      	add	r3, r2
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	461a      	mov	r2, r3
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	4413      	add	r3, r2
 800c438:	4618      	mov	r0, r3
 800c43a:	f7fe fac4 	bl	800a9c6 <ld_word>
 800c43e:	4603      	mov	r3, r0
 800c440:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800c442:	89fb      	ldrh	r3, [r7, #14]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d019      	beq.n	800c47c <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	2bff      	cmp	r3, #255	@ 0xff
 800c44c:	d811      	bhi.n	800c472 <cmp_lfn+0x86>
 800c44e:	89bb      	ldrh	r3, [r7, #12]
 800c450:	4618      	mov	r0, r3
 800c452:	f003 ffd1 	bl	80103f8 <ff_wtoupper>
 800c456:	4604      	mov	r4, r0
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	1c5a      	adds	r2, r3, #1
 800c45c:	617a      	str	r2, [r7, #20]
 800c45e:	005b      	lsls	r3, r3, #1
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	4413      	add	r3, r2
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	4618      	mov	r0, r3
 800c468:	f003 ffc6 	bl	80103f8 <ff_wtoupper>
 800c46c:	4603      	mov	r3, r0
 800c46e:	429c      	cmp	r4, r3
 800c470:	d001      	beq.n	800c476 <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 800c472:	2300      	movs	r3, #0
 800c474:	e022      	b.n	800c4bc <cmp_lfn+0xd0>
			}
			wc = uc;
 800c476:	89bb      	ldrh	r3, [r7, #12]
 800c478:	81fb      	strh	r3, [r7, #14]
 800c47a:	e006      	b.n	800c48a <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c47c:	89bb      	ldrh	r3, [r7, #12]
 800c47e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c482:	4293      	cmp	r3, r2
 800c484:	d001      	beq.n	800c48a <cmp_lfn+0x9e>
 800c486:	2300      	movs	r3, #0
 800c488:	e018      	b.n	800c4bc <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	3301      	adds	r3, #1
 800c48e:	613b      	str	r3, [r7, #16]
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	2b0c      	cmp	r3, #12
 800c494:	d9c9      	bls.n	800c42a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00b      	beq.n	800c4ba <cmp_lfn+0xce>
 800c4a2:	89fb      	ldrh	r3, [r7, #14]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d008      	beq.n	800c4ba <cmp_lfn+0xce>
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	005b      	lsls	r3, r3, #1
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	881b      	ldrh	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <cmp_lfn+0xce>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	e000      	b.n	800c4bc <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 800c4ba:	2301      	movs	r3, #1
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	371c      	adds	r7, #28
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd90      	pop	{r4, r7, pc}
 800c4c4:	08025f74 	.word	0x08025f74

0800c4c8 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	331a      	adds	r3, #26
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7fe fa75 	bl	800a9c6 <ld_word>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <pick_lfn+0x1e>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e050      	b.n	800c588 <pick_lfn+0xc0>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4ee:	1e5a      	subs	r2, r3, #1
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	005b      	lsls	r3, r3, #1
 800c4f4:	4413      	add	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	4413      	add	r3, r2
 800c4fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	81fb      	strh	r3, [r7, #14]
 800c500:	2300      	movs	r3, #0
 800c502:	613b      	str	r3, [r7, #16]
 800c504:	e028      	b.n	800c558 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c506:	4a22      	ldr	r2, [pc, #136]	@ (800c590 <pick_lfn+0xc8>)
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	4413      	add	r3, r2
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	461a      	mov	r2, r3
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	4413      	add	r3, r2
 800c514:	4618      	mov	r0, r3
 800c516:	f7fe fa56 	bl	800a9c6 <ld_word>
 800c51a:	4603      	mov	r3, r0
 800c51c:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800c51e:	89fb      	ldrh	r3, [r7, #14]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00f      	beq.n	800c544 <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	2bff      	cmp	r3, #255	@ 0xff
 800c528:	d901      	bls.n	800c52e <pick_lfn+0x66>
 800c52a:	2300      	movs	r3, #0
 800c52c:	e02c      	b.n	800c588 <pick_lfn+0xc0>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c52e:	89bb      	ldrh	r3, [r7, #12]
 800c530:	81fb      	strh	r3, [r7, #14]
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	1c5a      	adds	r2, r3, #1
 800c536:	617a      	str	r2, [r7, #20]
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	4413      	add	r3, r2
 800c53e:	89fa      	ldrh	r2, [r7, #14]
 800c540:	801a      	strh	r2, [r3, #0]
 800c542:	e006      	b.n	800c552 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c544:	89bb      	ldrh	r3, [r7, #12]
 800c546:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d001      	beq.n	800c552 <pick_lfn+0x8a>
 800c54e:	2300      	movs	r3, #0
 800c550:	e01a      	b.n	800c588 <pick_lfn+0xc0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	3301      	adds	r3, #1
 800c556:	613b      	str	r3, [r7, #16]
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	2b0c      	cmp	r3, #12
 800c55c:	d9d3      	bls.n	800c506 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00d      	beq.n	800c586 <pick_lfn+0xbe>
 800c56a:	89fb      	ldrh	r3, [r7, #14]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00a      	beq.n	800c586 <pick_lfn+0xbe>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	2bff      	cmp	r3, #255	@ 0xff
 800c574:	d901      	bls.n	800c57a <pick_lfn+0xb2>
 800c576:	2300      	movs	r3, #0
 800c578:	e006      	b.n	800c588 <pick_lfn+0xc0>
		lfnbuf[i] = 0;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	4413      	add	r3, r2
 800c582:	2200      	movs	r2, #0
 800c584:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c586:	2301      	movs	r3, #1
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3718      	adds	r7, #24
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	08025f74 	.word	0x08025f74

0800c594 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b088      	sub	sp, #32
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	4611      	mov	r1, r2
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	71fb      	strb	r3, [r7, #7]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	330d      	adds	r3, #13
 800c5ae:	79ba      	ldrb	r2, [r7, #6]
 800c5b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	330b      	adds	r3, #11
 800c5b6:	220f      	movs	r2, #15
 800c5b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	330c      	adds	r3, #12
 800c5be:	2200      	movs	r2, #0
 800c5c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	331a      	adds	r3, #26
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fe fb13 	bl	800abf4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c5ce:	79fb      	ldrb	r3, [r7, #7]
 800c5d0:	1e5a      	subs	r2, r3, #1
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	4413      	add	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	82fb      	strh	r3, [r7, #22]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c5e6:	8afb      	ldrh	r3, [r7, #22]
 800c5e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d007      	beq.n	800c600 <put_lfn+0x6c>
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	1c5a      	adds	r2, r3, #1
 800c5f4:	61fa      	str	r2, [r7, #28]
 800c5f6:	005b      	lsls	r3, r3, #1
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	881b      	ldrh	r3, [r3, #0]
 800c5fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c600:	4a17      	ldr	r2, [pc, #92]	@ (800c660 <put_lfn+0xcc>)
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	4413      	add	r3, r2
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	461a      	mov	r2, r3
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	8afa      	ldrh	r2, [r7, #22]
 800c610:	4611      	mov	r1, r2
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe faee 	bl	800abf4 <st_word>
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 800c618:	8afb      	ldrh	r3, [r7, #22]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d102      	bne.n	800c624 <put_lfn+0x90>
 800c61e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c622:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	3301      	adds	r3, #1
 800c628:	61bb      	str	r3, [r7, #24]
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	2b0c      	cmp	r3, #12
 800c62e:	d9da      	bls.n	800c5e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c630:	8afb      	ldrh	r3, [r7, #22]
 800c632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c636:	4293      	cmp	r3, r2
 800c638:	d006      	beq.n	800c648 <put_lfn+0xb4>
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	005b      	lsls	r3, r3, #1
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	4413      	add	r3, r2
 800c642:	881b      	ldrh	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d103      	bne.n	800c650 <put_lfn+0xbc>
 800c648:	79fb      	ldrb	r3, [r7, #7]
 800c64a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c64e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	79fa      	ldrb	r2, [r7, #7]
 800c654:	701a      	strb	r2, [r3, #0]
}
 800c656:	bf00      	nop
 800c658:	3720      	adds	r7, #32
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	08025f74 	.word	0x08025f74

0800c664 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08c      	sub	sp, #48	@ 0x30
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800c672:	220b      	movs	r2, #11
 800c674:	68b9      	ldr	r1, [r7, #8]
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f015 fdb3 	bl	80221e2 <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b05      	cmp	r3, #5
 800c680:	d929      	bls.n	800c6d6 <gen_numname+0x72>
		sreg = seq;
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 800c686:	e020      	b.n	800c6ca <gen_numname+0x66>
			wc = *lfn++;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	1c9a      	adds	r2, r3, #2
 800c68c:	607a      	str	r2, [r7, #4]
 800c68e:	881b      	ldrh	r3, [r3, #0]
 800c690:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c692:	2300      	movs	r3, #0
 800c694:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c696:	e015      	b.n	800c6c4 <gen_numname+0x60>
				sreg = (sreg << 1) + (wc & 1);
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	005a      	lsls	r2, r3, #1
 800c69c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c69e:	f003 0301 	and.w	r3, r3, #1
 800c6a2:	4413      	add	r3, r2
 800c6a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c6a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c6a8:	085b      	lsrs	r3, r3, #1
 800c6aa:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d003      	beq.n	800c6be <gen_numname+0x5a>
 800c6b6:	69fa      	ldr	r2, [r7, #28]
 800c6b8:	4b3c      	ldr	r3, [pc, #240]	@ (800c7ac <gen_numname+0x148>)
 800c6ba:	4053      	eors	r3, r2
 800c6bc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c6:	2b0f      	cmp	r3, #15
 800c6c8:	d9e6      	bls.n	800c698 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1da      	bne.n	800c688 <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexadecimal) */
	i = 7;
 800c6d6:	2307      	movs	r3, #7
 800c6d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	f003 030f 	and.w	r3, r3, #15
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	3330      	adds	r3, #48	@ 0x30
 800c6e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	091b      	lsrs	r3, r3, #4
 800c6ee:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 800c6f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6f4:	2b39      	cmp	r3, #57	@ 0x39
 800c6f6:	d904      	bls.n	800c702 <gen_numname+0x9e>
 800c6f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6fc:	3307      	adds	r3, #7
 800c6fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c704:	1e5a      	subs	r2, r3, #1
 800c706:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c708:	3330      	adds	r3, #48	@ 0x30
 800c70a:	443b      	add	r3, r7
 800c70c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c710:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 800c714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c716:	2b00      	cmp	r3, #0
 800c718:	d002      	beq.n	800c720 <gen_numname+0xbc>
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d1dc      	bne.n	800c6da <gen_numname+0x76>
	ns[i] = '~';
 800c720:	f107 0214 	add.w	r2, r7, #20
 800c724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c726:	4413      	add	r3, r2
 800c728:	227e      	movs	r2, #126	@ 0x7e
 800c72a:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800c72c:	2300      	movs	r3, #0
 800c72e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c730:	e014      	b.n	800c75c <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c736:	4413      	add	r3, r2
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fe fb29 	bl	800ad92 <dbc_1st>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d007      	beq.n	800c756 <gen_numname+0xf2>
			if (j == i - 1) break;
 800c746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c748:	3b01      	subs	r3, #1
 800c74a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d010      	beq.n	800c772 <gen_numname+0x10e>
			j++;
 800c750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c752:	3301      	adds	r3, #1
 800c754:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800c756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c758:	3301      	adds	r3, #1
 800c75a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c75c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c760:	429a      	cmp	r2, r3
 800c762:	d207      	bcs.n	800c774 <gen_numname+0x110>
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c768:	4413      	add	r3, r2
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	2b20      	cmp	r3, #32
 800c76e:	d1e0      	bne.n	800c732 <gen_numname+0xce>
 800c770:	e000      	b.n	800c774 <gen_numname+0x110>
			if (j == i - 1) break;
 800c772:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c776:	2b07      	cmp	r3, #7
 800c778:	d807      	bhi.n	800c78a <gen_numname+0x126>
 800c77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c780:	3330      	adds	r3, #48	@ 0x30
 800c782:	443b      	add	r3, r7
 800c784:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c788:	e000      	b.n	800c78c <gen_numname+0x128>
 800c78a:	2120      	movs	r1, #32
 800c78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78e:	1c5a      	adds	r2, r3, #1
 800c790:	627a      	str	r2, [r7, #36]	@ 0x24
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	4413      	add	r3, r2
 800c796:	460a      	mov	r2, r1
 800c798:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79c:	2b07      	cmp	r3, #7
 800c79e:	d9e9      	bls.n	800c774 <gen_numname+0x110>
}
 800c7a0:	bf00      	nop
 800c7a2:	bf00      	nop
 800c7a4:	3730      	adds	r7, #48	@ 0x30
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	00011021 	.word	0x00011021

0800c7b0 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c7bc:	230b      	movs	r3, #11
 800c7be:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
 800c7c2:	b2da      	uxtb	r2, r3
 800c7c4:	0852      	lsrs	r2, r2, #1
 800c7c6:	01db      	lsls	r3, r3, #7
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	1c59      	adds	r1, r3, #1
 800c7d0:	6079      	str	r1, [r7, #4]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	60bb      	str	r3, [r7, #8]
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d1ed      	bne.n	800c7c0 <sum_sfn+0x10>
	return sum;
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b087      	sub	sp, #28
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	3301      	adds	r3, #1
 800c802:	015b      	lsls	r3, r3, #5
 800c804:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800c806:	2300      	movs	r3, #0
 800c808:	827b      	strh	r3, [r7, #18]
 800c80a:	2300      	movs	r3, #0
 800c80c:	617b      	str	r3, [r7, #20]
 800c80e:	e015      	b.n	800c83c <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2b02      	cmp	r3, #2
 800c814:	d103      	bne.n	800c81e <xdir_sum+0x2c>
			i++;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	3301      	adds	r3, #1
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	e00b      	b.n	800c836 <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800c81e:	8a7b      	ldrh	r3, [r7, #18]
 800c820:	b29a      	uxth	r2, r3
 800c822:	0852      	lsrs	r2, r2, #1
 800c824:	03db      	lsls	r3, r3, #15
 800c826:	4313      	orrs	r3, r2
 800c828:	b29b      	uxth	r3, r3
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	697a      	ldr	r2, [r7, #20]
 800c82e:	440a      	add	r2, r1
 800c830:	7812      	ldrb	r2, [r2, #0]
 800c832:	4413      	add	r3, r2
 800c834:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	3301      	adds	r3, #1
 800c83a:	617b      	str	r3, [r7, #20]
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	429a      	cmp	r2, r3
 800c842:	d3e5      	bcc.n	800c810 <xdir_sum+0x1e>
		}
	}
	return sum;
 800c844:	8a7b      	ldrh	r3, [r7, #18]
}
 800c846:	4618      	mov	r0, r3
 800c848:	371c      	adds	r7, #28
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b084      	sub	sp, #16
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800c85e:	e01b      	b.n	800c898 <xname_sum+0x46>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 800c860:	89bb      	ldrh	r3, [r7, #12]
 800c862:	4618      	mov	r0, r3
 800c864:	f003 fdc8 	bl	80103f8 <ff_wtoupper>
 800c868:	4603      	mov	r3, r0
 800c86a:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800c86c:	89fb      	ldrh	r3, [r7, #14]
 800c86e:	b29a      	uxth	r2, r3
 800c870:	0852      	lsrs	r2, r2, #1
 800c872:	03db      	lsls	r3, r3, #15
 800c874:	4313      	orrs	r3, r2
 800c876:	b29a      	uxth	r2, r3
 800c878:	89bb      	ldrh	r3, [r7, #12]
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	4413      	add	r3, r2
 800c880:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800c882:	89fb      	ldrh	r3, [r7, #14]
 800c884:	b29a      	uxth	r2, r3
 800c886:	0852      	lsrs	r2, r2, #1
 800c888:	03db      	lsls	r3, r3, #15
 800c88a:	4313      	orrs	r3, r2
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	89bb      	ldrh	r3, [r7, #12]
 800c890:	0a1b      	lsrs	r3, r3, #8
 800c892:	b29b      	uxth	r3, r3
 800c894:	4413      	add	r3, r2
 800c896:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	1c9a      	adds	r2, r3, #2
 800c89c:	607a      	str	r2, [r7, #4]
 800c89e:	881b      	ldrh	r3, [r3, #0]
 800c8a0:	81bb      	strh	r3, [r7, #12]
 800c8a2:	89bb      	ldrh	r3, [r7, #12]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1db      	bne.n	800c860 <xname_sum+0xe>
	}
	return sum;
 800c8a8:	89fb      	ldrh	r3, [r7, #14]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
	...

0800c8b4 <load_xdir>:
/*------------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading directory object pointing top of the entry block to load */
)
{
 800c8b4:	b590      	push	{r4, r7, lr}
 800c8b6:	b087      	sub	sp, #28
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	60fb      	str	r3, [r7, #12]


	/* Load file directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	4610      	mov	r0, r2
 800c8d0:	f7fe fd06 	bl	800b2e0 <move_window>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c8d8:	7dfb      	ldrb	r3, [r7, #23]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <load_xdir+0x2e>
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
 800c8e0:	e0a9      	b.n	800ca36 <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b85      	cmp	r3, #133	@ 0x85
 800c8ea:	d001      	beq.n	800c8f0 <load_xdir+0x3c>
 800c8ec:	2302      	movs	r3, #2
 800c8ee:	e0a2      	b.n	800ca36 <load_xdir+0x182>
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8f4:	2220      	movs	r2, #32
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f015 fc72 	bl	80221e2 <memcpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3301      	adds	r3, #1
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	3301      	adds	r3, #1
 800c906:	015b      	lsls	r3, r3, #5
 800c908:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	2b5f      	cmp	r3, #95	@ 0x5f
 800c90e:	d903      	bls.n	800c918 <load_xdir+0x64>
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800c916:	d901      	bls.n	800c91c <load_xdir+0x68>
 800c918:	2302      	movs	r3, #2
 800c91a:	e08c      	b.n	800ca36 <load_xdir+0x182>

	/* Load stream extension entry */
	res = dir_next(dp, 0);
 800c91c:	2100      	movs	r1, #0
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f7ff fc23 	bl	800c16a <dir_next>
 800c924:	4603      	mov	r3, r0
 800c926:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800c928:	7dfb      	ldrb	r3, [r7, #23]
 800c92a:	2b04      	cmp	r3, #4
 800c92c:	d101      	bne.n	800c932 <load_xdir+0x7e>
 800c92e:	2302      	movs	r3, #2
 800c930:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d001      	beq.n	800c93c <load_xdir+0x88>
 800c938:	7dfb      	ldrb	r3, [r7, #23]
 800c93a:	e07c      	b.n	800ca36 <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c944:	4619      	mov	r1, r3
 800c946:	4610      	mov	r0, r2
 800c948:	f7fe fcca 	bl	800b2e0 <move_window>
 800c94c:	4603      	mov	r3, r0
 800c94e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c950:	7dfb      	ldrb	r3, [r7, #23]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <load_xdir+0xa6>
 800c956:	7dfb      	ldrb	r3, [r7, #23]
 800c958:	e06d      	b.n	800ca36 <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2bc0      	cmp	r3, #192	@ 0xc0
 800c962:	d001      	beq.n	800c968 <load_xdir+0xb4>
 800c964:	2302      	movs	r3, #2
 800c966:	e066      	b.n	800ca36 <load_xdir+0x182>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f103 0020 	add.w	r0, r3, #32
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c972:	2220      	movs	r2, #32
 800c974:	4619      	mov	r1, r3
 800c976:	f015 fc34 	bl	80221e2 <memcpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3323      	adds	r3, #35	@ 0x23
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	332c      	adds	r3, #44	@ 0x2c
 800c982:	4a2f      	ldr	r2, [pc, #188]	@ (800ca40 <load_xdir+0x18c>)
 800c984:	fba2 2303 	umull	r2, r3, r2, r3
 800c988:	08db      	lsrs	r3, r3, #3
 800c98a:	015b      	lsls	r3, r3, #5
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d201      	bcs.n	800c996 <load_xdir+0xe2>
 800c992:	2302      	movs	r3, #2
 800c994:	e04f      	b.n	800ca36 <load_xdir+0x182>

	/* Load file name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 800c996:	2340      	movs	r3, #64	@ 0x40
 800c998:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 800c99a:	2100      	movs	r1, #0
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7ff fbe4 	bl	800c16a <dir_next>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800c9a6:	7dfb      	ldrb	r3, [r7, #23]
 800c9a8:	2b04      	cmp	r3, #4
 800c9aa:	d101      	bne.n	800c9b0 <load_xdir+0xfc>
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800c9b0:	7dfb      	ldrb	r3, [r7, #23]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d001      	beq.n	800c9ba <load_xdir+0x106>
 800c9b6:	7dfb      	ldrb	r3, [r7, #23]
 800c9b8:	e03d      	b.n	800ca36 <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	f7fe fc8b 	bl	800b2e0 <move_window>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <load_xdir+0x124>
 800c9d4:	7dfb      	ldrb	r3, [r7, #23]
 800c9d6:	e02e      	b.n	800ca36 <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	2bc1      	cmp	r3, #193	@ 0xc1
 800c9e0:	d001      	beq.n	800c9e6 <load_xdir+0x132>
 800c9e2:	2302      	movs	r3, #2
 800c9e4:	e027      	b.n	800ca36 <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800c9ec:	d208      	bcs.n	800ca00 <load_xdir+0x14c>
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	18d0      	adds	r0, r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9f8:	2220      	movs	r2, #32
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	f015 fbf1 	bl	80221e2 <memcpy>
	} while ((i += SZDIRE) < sz_ent);
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	3320      	adds	r3, #32
 800ca04:	613b      	str	r3, [r7, #16]
 800ca06:	693a      	ldr	r2, [r7, #16]
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d3c5      	bcc.n	800c99a <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800ca14:	d80e      	bhi.n	800ca34 <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f7ff feeb 	bl	800c7f2 <xdir_sum>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	461c      	mov	r4, r3
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	3302      	adds	r3, #2
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7fd ffce 	bl	800a9c6 <ld_word>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	429c      	cmp	r4, r3
 800ca2e:	d001      	beq.n	800ca34 <load_xdir+0x180>
 800ca30:	2302      	movs	r3, #2
 800ca32:	e000      	b.n	800ca36 <load_xdir+0x182>
	}
	return FR_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	371c      	adds	r7, #28
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd90      	pop	{r4, r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	88888889 	.word	0x88888889

0800ca44 <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	3334      	adds	r3, #52	@ 0x34
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fd ffcf 	bl	800a9f8 <ld_dword>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	691b      	ldr	r3, [r3, #16]
 800ca64:	3338      	adds	r3, #56	@ 0x38
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fd ffe9 	bl	800aa3e <ld_qword>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	6839      	ldr	r1, [r7, #0]
 800ca72:	e9c1 2304 	strd	r2, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	3321      	adds	r3, #33	@ 0x21
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	f003 0302 	and.w	r3, r3, #2
 800ca82:	b2da      	uxtb	r2, r3
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	61da      	str	r2, [r3, #28]
}
 800ca8e:	bf00      	nop
 800ca90:	3708      	adds	r7, #8
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing directory */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 800ca96:	b5b0      	push	{r4, r5, r7, lr}
 800ca98:	b084      	sub	sp, #16
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
 800ca9e:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	6808      	ldr	r0, [r1, #0]
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	6a08      	ldr	r0, [r1, #32]
 800caac:	6879      	ldr	r1, [r7, #4]
 800caae:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800cab4:	b2c8      	uxtb	r0, r1
 800cab6:	6879      	ldr	r1, [r7, #4]
 800cab8:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800cabe:	2000      	movs	r0, #0
 800cac0:	460c      	mov	r4, r1
 800cac2:	4605      	mov	r5, r0
 800cac4:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800cac8:	2300      	movs	r3, #0
 800caca:	6879      	ldr	r1, [r7, #4]
 800cacc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->obj.n_frag = 0;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7ff faba 	bl	800c05e <dir_sdi>
 800caea:	4603      	mov	r3, r0
 800caec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800caee:	7bfb      	ldrb	r3, [r7, #15]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d104      	bne.n	800cafe <load_obj_xdir+0x68>
		res = load_xdir(dp);		/* Load the object's entry block */
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7ff fedd 	bl	800c8b4 <load_xdir>
 800cafa:	4603      	mov	r3, r0
 800cafc:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bdb0      	pop	{r4, r5, r7, pc}

0800cb08 <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the directory object */
)
{
 800cb08:	b590      	push	{r4, r7, lr}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the directory entry block 85+C0+C1s */
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	1c9c      	adds	r4, r3, #2
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f7ff fe68 	bl	800c7f2 <xdir_sum>
 800cb22:	4603      	mov	r3, r0
 800cb24:	4619      	mov	r1, r3
 800cb26:	4620      	mov	r0, r4
 800cb28:	f7fe f864 	bl	800abf4 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	3301      	adds	r3, #1
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	3301      	adds	r3, #1
 800cb34:	613b      	str	r3, [r7, #16]

	/* Store the directory entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7ff fa8e 	bl	800c05e <dir_sdi>
 800cb42:	4603      	mov	r3, r0
 800cb44:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800cb46:	e026      	b.n	800cb96 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f7fe fbc4 	bl	800b2e0 <move_window>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb5c:	7dfb      	ldrb	r3, [r7, #23]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d11d      	bne.n	800cb9e <store_xdir+0x96>
		memcpy(dp->dir, dirb, SZDIRE);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb66:	2220      	movs	r2, #32
 800cb68:	68f9      	ldr	r1, [r7, #12]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f015 fb39 	bl	80221e2 <memcpy>
		dp->obj.fs->wflag = 1;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2201      	movs	r2, #1
 800cb76:	711a      	strb	r2, [r3, #4]
		if (--nent == 0) break;
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	613b      	str	r3, [r7, #16]
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00e      	beq.n	800cba2 <store_xdir+0x9a>
		dirb += SZDIRE;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	3320      	adds	r3, #32
 800cb88:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7ff faec 	bl	800c16a <dir_next>
 800cb92:	4603      	mov	r3, r0
 800cb94:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d0d5      	beq.n	800cb48 <store_xdir+0x40>
 800cb9c:	e002      	b.n	800cba4 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800cb9e:	bf00      	nop
 800cba0:	e000      	b.n	800cba4 <store_xdir+0x9c>
		if (--nent == 0) break;
 800cba2:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <store_xdir+0xa8>
 800cbaa:	7dfb      	ldrb	r3, [r7, #23]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d101      	bne.n	800cbb4 <store_xdir+0xac>
 800cbb0:	7dfb      	ldrb	r3, [r7, #23]
 800cbb2:	e000      	b.n	800cbb6 <store_xdir+0xae>
 800cbb4:	2302      	movs	r3, #2
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	371c      	adds	r7, #28
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd90      	pop	{r4, r7, pc}

0800cbbe <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the directory entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 800cbbe:	b590      	push	{r4, r7, lr}
 800cbc0:	b085      	sub	sp, #20
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	memset(dirb, 0, 2 * SZDIRE);
 800cbc8:	2240      	movs	r2, #64	@ 0x40
 800cbca:	2100      	movs	r1, #0
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f015 fa5e 	bl	802208e <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2285      	movs	r2, #133	@ 0x85
 800cbd6:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3320      	adds	r3, #32
 800cbdc:	22c0      	movs	r2, #192	@ 0xc0
 800cbde:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
 800cbe0:	2340      	movs	r3, #64	@ 0x40
 800cbe2:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	72fb      	strb	r3, [r7, #11]
 800cbe8:	7afb      	ldrb	r3, [r7, #11]
 800cbea:	72bb      	strb	r3, [r7, #10]
 800cbec:	2301      	movs	r3, #1
 800cbee:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	1c5a      	adds	r2, r3, #1
 800cbf4:	60fa      	str	r2, [r7, #12]
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	22c1      	movs	r2, #193	@ 0xc1
 800cbfc:	701a      	strb	r2, [r3, #0]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	1c5a      	adds	r2, r3, #1
 800cc02:	60fa      	str	r2, [r7, #12]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	4413      	add	r3, r2
 800cc08:	2200      	movs	r2, #0
 800cc0a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800cc0c:	893b      	ldrh	r3, [r7, #8]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00b      	beq.n	800cc2a <create_xdir+0x6c>
 800cc12:	7abb      	ldrb	r3, [r7, #10]
 800cc14:	005b      	lsls	r3, r3, #1
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	4413      	add	r3, r2
 800cc1a:	881b      	ldrh	r3, [r3, #0]
 800cc1c:	813b      	strh	r3, [r7, #8]
 800cc1e:	893b      	ldrh	r3, [r7, #8]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <create_xdir+0x6c>
 800cc24:	7abb      	ldrb	r3, [r7, #10]
 800cc26:	3301      	adds	r3, #1
 800cc28:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 	/* Store it */
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4413      	add	r3, r2
 800cc30:	893a      	ldrh	r2, [r7, #8]
 800cc32:	4611      	mov	r1, r2
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fd ffdd 	bl	800abf4 <st_word>
			i += 2;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3302      	adds	r3, #2
 800cc3e:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f003 031f 	and.w	r3, r3, #31
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1e0      	bne.n	800cc0c <create_xdir+0x4e>
		nc1++;
 800cc4a:	7afb      	ldrb	r3, [r7, #11]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 800cc50:	7abb      	ldrb	r3, [r7, #10]
 800cc52:	005b      	lsls	r3, r3, #1
 800cc54:	683a      	ldr	r2, [r7, #0]
 800cc56:	4413      	add	r3, r2
 800cc58:	881b      	ldrh	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d1c8      	bne.n	800cbf0 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	3323      	adds	r3, #35	@ 0x23
 800cc62:	7aba      	ldrb	r2, [r7, #10]
 800cc64:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	7afa      	ldrb	r2, [r7, #11]
 800cc6c:	3201      	adds	r2, #1
 800cc6e:	b2d2      	uxtb	r2, r2
 800cc70:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800cc78:	6838      	ldr	r0, [r7, #0]
 800cc7a:	f7ff fdea 	bl	800c852 <xname_sum>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	4619      	mov	r1, r3
 800cc82:	4620      	mov	r0, r4
 800cc84:	f7fd ffb6 	bl	800abf4 <st_word>
}
 800cc88:	bf00      	nop
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd90      	pop	{r4, r7, pc}

0800cc90 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cc9a:	2304      	movs	r3, #4
 800cc9c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 800cca4:	23ff      	movs	r3, #255	@ 0xff
 800cca6:	757b      	strb	r3, [r7, #21]
 800cca8:	23ff      	movs	r3, #255	@ 0xff
 800ccaa:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ccac:	e0a6      	b.n	800cdfc <dir_read+0x16c>
		res = move_window(fs, dp->sect);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	6938      	ldr	r0, [r7, #16]
 800ccb6:	f7fe fb13 	bl	800b2e0 <move_window>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ccbe:	7dfb      	ldrb	r3, [r7, #23]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f040 80a1 	bne.w	800ce08 <dir_read+0x178>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 800ccce:	7dbb      	ldrb	r3, [r7, #22]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d102      	bne.n	800ccda <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ccd4:	2304      	movs	r3, #4
 800ccd6:	75fb      	strb	r3, [r7, #23]
 800ccd8:	e09d      	b.n	800ce16 <dir_read+0x186>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	2b04      	cmp	r3, #4
 800cce0:	d11f      	bne.n	800cd22 <dir_read+0x92>
			if (FF_USE_LABEL && vol) {
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d003      	beq.n	800ccf0 <dir_read+0x60>
				if (b == ET_VLABEL) break;	/* Volume label entry? */
 800cce8:	7dbb      	ldrb	r3, [r7, #22]
 800ccea:	2b83      	cmp	r3, #131	@ 0x83
 800ccec:	d17d      	bne.n	800cdea <dir_read+0x15a>
 800ccee:	e092      	b.n	800ce16 <dir_read+0x186>
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 800ccf0:	7dbb      	ldrb	r3, [r7, #22]
 800ccf2:	2b85      	cmp	r3, #133	@ 0x85
 800ccf4:	d179      	bne.n	800cdea <dir_read+0x15a>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f7ff fdd8 	bl	800c8b4 <load_xdir>
 800cd04:	4603      	mov	r3, r0
 800cd06:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800cd08:	7dfb      	ldrb	r3, [r7, #23]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d17e      	bne.n	800ce0c <dir_read+0x17c>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	691b      	ldr	r3, [r3, #16]
 800cd12:	3304      	adds	r3, #4
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	719a      	strb	r2, [r3, #6]
					}
					break;
 800cd20:	e074      	b.n	800ce0c <dir_read+0x17c>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd26:	330b      	adds	r3, #11
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd2e:	73fb      	strb	r3, [r7, #15]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	7bfa      	ldrb	r2, [r7, #15]
 800cd34:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cd36:	7dbb      	ldrb	r3, [r7, #22]
 800cd38:	2be5      	cmp	r3, #229	@ 0xe5
 800cd3a:	d00e      	beq.n	800cd5a <dir_read+0xca>
 800cd3c:	7dbb      	ldrb	r3, [r7, #22]
 800cd3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd40:	d00b      	beq.n	800cd5a <dir_read+0xca>
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
 800cd44:	f023 0320 	bic.w	r3, r3, #32
 800cd48:	2b08      	cmp	r3, #8
 800cd4a:	bf0c      	ite	eq
 800cd4c:	2301      	moveq	r3, #1
 800cd4e:	2300      	movne	r3, #0
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	461a      	mov	r2, r3
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d002      	beq.n	800cd60 <dir_read+0xd0>
				ord = 0xFF;
 800cd5a:	23ff      	movs	r3, #255	@ 0xff
 800cd5c:	757b      	strb	r3, [r7, #21]
 800cd5e:	e044      	b.n	800cdea <dir_read+0x15a>
			} else {
				if (attr == AM_LFN) {	/* An LFN entry is found */
 800cd60:	7bfb      	ldrb	r3, [r7, #15]
 800cd62:	2b0f      	cmp	r3, #15
 800cd64:	d12f      	bne.n	800cdc6 <dir_read+0x136>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 800cd66:	7dbb      	ldrb	r3, [r7, #22]
 800cd68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00d      	beq.n	800cd8c <dir_read+0xfc>
						sum = dp->dir[LDIR_Chksum];
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd74:	7b5b      	ldrb	r3, [r3, #13]
 800cd76:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 800cd78:	7dbb      	ldrb	r3, [r7, #22]
 800cd7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd7e:	75bb      	strb	r3, [r7, #22]
 800cd80:	7dbb      	ldrb	r3, [r7, #22]
 800cd82:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cd8c:	7dba      	ldrb	r2, [r7, #22]
 800cd8e:	7d7b      	ldrb	r3, [r7, #21]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d115      	bne.n	800cdc0 <dir_read+0x130>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd98:	330d      	adds	r3, #13
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	7d3a      	ldrb	r2, [r7, #20]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d10e      	bne.n	800cdc0 <dir_read+0x130>
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	68da      	ldr	r2, [r3, #12]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4610      	mov	r0, r2
 800cdae:	f7ff fb8b 	bl	800c4c8 <pick_lfn>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d003      	beq.n	800cdc0 <dir_read+0x130>
 800cdb8:	7d7b      	ldrb	r3, [r7, #21]
 800cdba:	3b01      	subs	r3, #1
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	e000      	b.n	800cdc2 <dir_read+0x132>
 800cdc0:	23ff      	movs	r3, #255	@ 0xff
 800cdc2:	757b      	strb	r3, [r7, #21]
 800cdc4:	e011      	b.n	800cdea <dir_read+0x15a>
				} else {				/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cdc6:	7d7b      	ldrb	r3, [r7, #21]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d109      	bne.n	800cde0 <dir_read+0x150>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7ff fced 	bl	800c7b0 <sum_sfn>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	461a      	mov	r2, r3
 800cdda:	7d3b      	ldrb	r3, [r7, #20]
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d017      	beq.n	800ce10 <dir_read+0x180>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f04f 32ff 	mov.w	r2, #4294967295
 800cde6:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800cde8:	e012      	b.n	800ce10 <dir_read+0x180>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cdea:	2100      	movs	r1, #0
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7ff f9bc 	bl	800c16a <dir_next>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cdf6:	7dfb      	ldrb	r3, [r7, #23]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10b      	bne.n	800ce14 <dir_read+0x184>
	while (dp->sect) {
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f47f af54 	bne.w	800ccae <dir_read+0x1e>
 800ce06:	e006      	b.n	800ce16 <dir_read+0x186>
		if (res != FR_OK) break;
 800ce08:	bf00      	nop
 800ce0a:	e004      	b.n	800ce16 <dir_read+0x186>
					break;
 800ce0c:	bf00      	nop
 800ce0e:	e002      	b.n	800ce16 <dir_read+0x186>
					break;
 800ce10:	bf00      	nop
 800ce12:	e000      	b.n	800ce16 <dir_read+0x186>
		if (res != FR_OK) break;
 800ce14:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ce16:	7dfb      	ldrb	r3, [r7, #23]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d002      	beq.n	800ce22 <dir_read+0x192>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800ce22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3718      	adds	r7, #24
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800ce2c:	b590      	push	{r4, r7, lr}
 800ce2e:	b089      	sub	sp, #36	@ 0x24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f7ff f90e 	bl	800c05e <dir_sdi>
 800ce42:	4603      	mov	r3, r0
 800ce44:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800ce46:	7ffb      	ldrb	r3, [r7, #31]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d001      	beq.n	800ce50 <dir_find+0x24>
 800ce4c:	7ffb      	ldrb	r3, [r7, #31]
 800ce4e:	e112      	b.n	800d076 <dir_find+0x24a>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b04      	cmp	r3, #4
 800ce56:	d164      	bne.n	800cf22 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff fcf8 	bl	800c852 <xname_sum>
 800ce62:	4603      	mov	r3, r0
 800ce64:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800ce66:	e04f      	b.n	800cf08 <dir_find+0xdc>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	691b      	ldr	r3, [r3, #16]
 800ce6c:	3324      	adds	r3, #36	@ 0x24
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fd fda9 	bl	800a9c6 <ld_word>
 800ce74:	4603      	mov	r3, r0
 800ce76:	461a      	mov	r2, r3
 800ce78:	893b      	ldrh	r3, [r7, #8]
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d143      	bne.n	800cf06 <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	691b      	ldr	r3, [r3, #16]
 800ce82:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800ce86:	76fb      	strb	r3, [r7, #27]
 800ce88:	2340      	movs	r3, #64	@ 0x40
 800ce8a:	617b      	str	r3, [r7, #20]
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	613b      	str	r3, [r7, #16]
 800ce90:	e028      	b.n	800cee4 <dir_find+0xb8>
				if ((di % SZDIRE) == 0) di += 2;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f003 031f 	and.w	r3, r3, #31
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d102      	bne.n	800cea2 <dir_find+0x76>
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	3302      	adds	r3, #2
 800cea0:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	691a      	ldr	r2, [r3, #16]
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	4413      	add	r3, r2
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fd fd8b 	bl	800a9c6 <ld_word>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f003 faa0 	bl	80103f8 <ff_wtoupper>
 800ceb8:	4604      	mov	r4, r0
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	68da      	ldr	r2, [r3, #12]
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	4413      	add	r3, r2
 800cec4:	881b      	ldrh	r3, [r3, #0]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f003 fa96 	bl	80103f8 <ff_wtoupper>
 800cecc:	4603      	mov	r3, r0
 800cece:	429c      	cmp	r4, r3
 800ced0:	d10c      	bne.n	800ceec <dir_find+0xc0>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ced2:	7efb      	ldrb	r3, [r7, #27]
 800ced4:	3b01      	subs	r3, #1
 800ced6:	76fb      	strb	r3, [r7, #27]
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	3302      	adds	r3, #2
 800cedc:	617b      	str	r3, [r7, #20]
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	3301      	adds	r3, #1
 800cee2:	613b      	str	r3, [r7, #16]
 800cee4:	7efb      	ldrb	r3, [r7, #27]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d1d3      	bne.n	800ce92 <dir_find+0x66>
 800ceea:	e000      	b.n	800ceee <dir_find+0xc2>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ceec:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ceee:	7efb      	ldrb	r3, [r7, #27]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d109      	bne.n	800cf08 <dir_find+0xdc>
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	68da      	ldr	r2, [r3, #12]
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	005b      	lsls	r3, r3, #1
 800cefc:	4413      	add	r3, r2
 800cefe:	881b      	ldrh	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00b      	beq.n	800cf1c <dir_find+0xf0>
 800cf04:	e000      	b.n	800cf08 <dir_find+0xdc>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800cf06:	bf00      	nop
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800cf08:	2100      	movs	r1, #0
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7ff fec0 	bl	800cc90 <dir_read>
 800cf10:	4603      	mov	r3, r0
 800cf12:	77fb      	strb	r3, [r7, #31]
 800cf14:	7ffb      	ldrb	r3, [r7, #31]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d0a6      	beq.n	800ce68 <dir_find+0x3c>
 800cf1a:	e000      	b.n	800cf1e <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800cf1c:	bf00      	nop
		}
		return res;
 800cf1e:	7ffb      	ldrb	r3, [r7, #31]
 800cf20:	e0a9      	b.n	800d076 <dir_find+0x24a>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cf22:	23ff      	movs	r3, #255	@ 0xff
 800cf24:	773b      	strb	r3, [r7, #28]
 800cf26:	7f3b      	ldrb	r3, [r7, #28]
 800cf28:	777b      	strb	r3, [r7, #29]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf30:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf36:	4619      	mov	r1, r3
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f7fe f9d1 	bl	800b2e0 <move_window>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800cf42:	7ffb      	ldrb	r3, [r7, #31]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f040 8090 	bne.w	800d06a <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cf52:	7fbb      	ldrb	r3, [r7, #30]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d102      	bne.n	800cf5e <dir_find+0x132>
 800cf58:	2304      	movs	r3, #4
 800cf5a:	77fb      	strb	r3, [r7, #31]
 800cf5c:	e08a      	b.n	800d074 <dir_find+0x248>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf62:	330b      	adds	r3, #11
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf6a:	72fb      	strb	r3, [r7, #11]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	7afa      	ldrb	r2, [r7, #11]
 800cf70:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cf72:	7fbb      	ldrb	r3, [r7, #30]
 800cf74:	2be5      	cmp	r3, #229	@ 0xe5
 800cf76:	d007      	beq.n	800cf88 <dir_find+0x15c>
 800cf78:	7afb      	ldrb	r3, [r7, #11]
 800cf7a:	f003 0308 	and.w	r3, r3, #8
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d009      	beq.n	800cf96 <dir_find+0x16a>
 800cf82:	7afb      	ldrb	r3, [r7, #11]
 800cf84:	2b0f      	cmp	r3, #15
 800cf86:	d006      	beq.n	800cf96 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cf88:	23ff      	movs	r3, #255	@ 0xff
 800cf8a:	777b      	strb	r3, [r7, #29]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf92:	64da      	str	r2, [r3, #76]	@ 0x4c
 800cf94:	e05e      	b.n	800d054 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cf96:	7afb      	ldrb	r3, [r7, #11]
 800cf98:	2b0f      	cmp	r3, #15
 800cf9a:	d136      	bne.n	800d00a <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800cfa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d154      	bne.n	800d054 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cfaa:	7fbb      	ldrb	r3, [r7, #30]
 800cfac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00d      	beq.n	800cfd0 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfb8:	7b5b      	ldrb	r3, [r3, #13]
 800cfba:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cfbc:	7fbb      	ldrb	r3, [r7, #30]
 800cfbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfc2:	77bb      	strb	r3, [r7, #30]
 800cfc4:	7fbb      	ldrb	r3, [r7, #30]
 800cfc6:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cfd0:	7fba      	ldrb	r2, [r7, #30]
 800cfd2:	7f7b      	ldrb	r3, [r7, #29]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d115      	bne.n	800d004 <dir_find+0x1d8>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfdc:	330d      	adds	r3, #13
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	7f3a      	ldrb	r2, [r7, #28]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d10e      	bne.n	800d004 <dir_find+0x1d8>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	68da      	ldr	r2, [r3, #12]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfee:	4619      	mov	r1, r3
 800cff0:	4610      	mov	r0, r2
 800cff2:	f7ff f9fb 	bl	800c3ec <cmp_lfn>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d003      	beq.n	800d004 <dir_find+0x1d8>
 800cffc:	7f7b      	ldrb	r3, [r7, #29]
 800cffe:	3b01      	subs	r3, #1
 800d000:	b2db      	uxtb	r3, r3
 800d002:	e000      	b.n	800d006 <dir_find+0x1da>
 800d004:	23ff      	movs	r3, #255	@ 0xff
 800d006:	777b      	strb	r3, [r7, #29]
 800d008:	e024      	b.n	800d054 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d00a:	7f7b      	ldrb	r3, [r7, #29]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d109      	bne.n	800d024 <dir_find+0x1f8>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d014:	4618      	mov	r0, r3
 800d016:	f7ff fbcb 	bl	800c7b0 <sum_sfn>
 800d01a:	4603      	mov	r3, r0
 800d01c:	461a      	mov	r2, r3
 800d01e:	7f3b      	ldrb	r3, [r7, #28]
 800d020:	4293      	cmp	r3, r2
 800d022:	d024      	beq.n	800d06e <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d02a:	f003 0301 	and.w	r3, r3, #1
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d10a      	bne.n	800d048 <dir_find+0x21c>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	3340      	adds	r3, #64	@ 0x40
 800d03a:	220b      	movs	r2, #11
 800d03c:	4619      	mov	r1, r3
 800d03e:	f014 fffc 	bl	802203a <memcmp>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d014      	beq.n	800d072 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d048:	23ff      	movs	r3, #255	@ 0xff
 800d04a:	777b      	strb	r3, [r7, #29]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f04f 32ff 	mov.w	r2, #4294967295
 800d052:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d054:	2100      	movs	r1, #0
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7ff f887 	bl	800c16a <dir_next>
 800d05c:	4603      	mov	r3, r0
 800d05e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800d060:	7ffb      	ldrb	r3, [r7, #31]
 800d062:	2b00      	cmp	r3, #0
 800d064:	f43f af65 	beq.w	800cf32 <dir_find+0x106>
 800d068:	e004      	b.n	800d074 <dir_find+0x248>
		if (res != FR_OK) break;
 800d06a:	bf00      	nop
 800d06c:	e002      	b.n	800d074 <dir_find+0x248>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d06e:	bf00      	nop
 800d070:	e000      	b.n	800d074 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d072:	bf00      	nop

	return res;
 800d074:	7ffb      	ldrb	r3, [r7, #31]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3724      	adds	r7, #36	@ 0x24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd90      	pop	{r4, r7, pc}
	...

0800d080 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800d080:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d084:	b0a0      	sub	sp, #128	@ 0x80
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d096:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d001      	beq.n	800d0a2 <dir_register+0x22>
 800d09e:	2306      	movs	r3, #6
 800d0a0:	e194      	b.n	800d3cc <dir_register+0x34c>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	677b      	str	r3, [r7, #116]	@ 0x74
 800d0a6:	e002      	b.n	800d0ae <dir_register+0x2e>
 800d0a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	677b      	str	r3, [r7, #116]	@ 0x74
 800d0ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d0b0:	68da      	ldr	r2, [r3, #12]
 800d0b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	4413      	add	r3, r2
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1f4      	bne.n	800d0a8 <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d0be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2b04      	cmp	r3, #4
 800d0c4:	f040 80a6 	bne.w	800d214 <dir_register+0x194>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d0c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d0ca:	330e      	adds	r3, #14
 800d0cc:	4aa5      	ldr	r2, [pc, #660]	@ (800d364 <dir_register+0x2e4>)
 800d0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d2:	08db      	lsrs	r3, r3, #3
 800d0d4:	3302      	adds	r3, #2
 800d0d6:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 800d0d8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f7ff f8ea 	bl	800c2b4 <dir_alloc>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800d0e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d002      	beq.n	800d0f4 <dir_register+0x74>
 800d0ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d0f2:	e16b      	b.n	800d3cc <dir_register+0x34c>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	015b      	lsls	r3, r3, #5
 800d0fe:	1ad2      	subs	r2, r2, r3
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	79db      	ldrb	r3, [r3, #7]
 800d108:	f003 0304 	and.w	r3, r3, #4
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d077      	beq.n	800d200 <dir_register+0x180>
			dp->obj.stat &= ~4;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	79db      	ldrb	r3, [r3, #7]
 800d114:	f023 0304 	bic.w	r3, r3, #4
 800d118:	b2da      	uxtb	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	4618      	mov	r0, r3
 800d122:	f7fe fc93 	bl	800ba4c <fill_first_frag>
 800d126:	4603      	mov	r3, r0
 800d128:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d12c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <dir_register+0xba>
 800d134:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d138:	e148      	b.n	800d3cc <dir_register+0x34c>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d140:	f04f 32ff 	mov.w	r2, #4294967295
 800d144:	4619      	mov	r1, r3
 800d146:	f7fe fcb0 	bl	800baaa <fill_last_frag>
 800d14a:	4603      	mov	r3, r0
 800d14c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d150:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <dir_register+0xde>
 800d158:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d15c:	e136      	b.n	800d3cc <dir_register+0x34c>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d04c      	beq.n	800d200 <dir_register+0x180>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	f107 0308 	add.w	r3, r7, #8
 800d16c:	4611      	mov	r1, r2
 800d16e:	4618      	mov	r0, r3
 800d170:	f7ff fc91 	bl	800ca96 <load_obj_xdir>
 800d174:	4603      	mov	r3, r0
 800d176:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 800d17a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d002      	beq.n	800d188 <dir_register+0x108>
 800d182:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d186:	e121      	b.n	800d3cc <dir_register+0x34c>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d18e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d190:	8949      	ldrh	r1, [r1, #10]
 800d192:	0249      	lsls	r1, r1, #9
 800d194:	2000      	movs	r0, #0
 800d196:	460c      	mov	r4, r1
 800d198:	4605      	mov	r5, r0
 800d19a:	eb12 0804 	adds.w	r8, r2, r4
 800d19e:	eb43 0905 	adc.w	r9, r3, r5
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	e9c3 8904 	strd	r8, r9, [r3, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 800d1a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d1b6:	4608      	mov	r0, r1
 800d1b8:	f7fd fd63 	bl	800ac82 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d1bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d1be:	691b      	ldr	r3, [r3, #16]
 800d1c0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d1ca:	4608      	mov	r0, r1
 800d1cc:	f7fd fd59 	bl	800ac82 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	79da      	ldrb	r2, [r3, #7]
 800d1d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d1d6:	691b      	ldr	r3, [r3, #16]
 800d1d8:	3321      	adds	r3, #33	@ 0x21
 800d1da:	f042 0201 	orr.w	r2, r2, #1
 800d1de:	b2d2      	uxtb	r2, r2
 800d1e0:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 800d1e2:	f107 0308 	add.w	r3, r7, #8
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7ff fc8e 	bl	800cb08 <store_xdir>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 800d1f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d002      	beq.n	800d200 <dir_register+0x180>
 800d1fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d1fe:	e0e5      	b.n	800d3cc <dir_register+0x34c>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d202:	691a      	ldr	r2, [r3, #16]
 800d204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	4619      	mov	r1, r3
 800d20a:	4610      	mov	r0, r2
 800d20c:	f7ff fcd7 	bl	800cbbe <create_xdir>
		return FR_OK;
 800d210:	2300      	movs	r3, #0
 800d212:	e0db      	b.n	800d3cc <dir_register+0x34c>
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800d21a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d21e:	6810      	ldr	r0, [r2, #0]
 800d220:	6851      	ldr	r1, [r2, #4]
 800d222:	6892      	ldr	r2, [r2, #8]
 800d224:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d226:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d033      	beq.n	800d29a <dir_register+0x21a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2240      	movs	r2, #64	@ 0x40
 800d236:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800d23a:	2301      	movs	r3, #1
 800d23c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d23e:	e016      	b.n	800d26e <dir_register+0x1ee>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800d246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d248:	68da      	ldr	r2, [r3, #12]
 800d24a:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800d24e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d250:	f7ff fa08 	bl	800c664 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7ff fde9 	bl	800ce2c <dir_find>
 800d25a:	4603      	mov	r3, r0
 800d25c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800d260:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d264:	2b00      	cmp	r3, #0
 800d266:	d106      	bne.n	800d276 <dir_register+0x1f6>
		for (n = 1; n < 100; n++) {
 800d268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d26a:	3301      	adds	r3, #1
 800d26c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d26e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d270:	2b63      	cmp	r3, #99	@ 0x63
 800d272:	d9e5      	bls.n	800d240 <dir_register+0x1c0>
 800d274:	e000      	b.n	800d278 <dir_register+0x1f8>
			if (res != FR_OK) break;
 800d276:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d27a:	2b64      	cmp	r3, #100	@ 0x64
 800d27c:	d101      	bne.n	800d282 <dir_register+0x202>
 800d27e:	2307      	movs	r3, #7
 800d280:	e0a4      	b.n	800d3cc <dir_register+0x34c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d282:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d286:	2b04      	cmp	r3, #4
 800d288:	d002      	beq.n	800d290 <dir_register+0x210>
 800d28a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d28e:	e09d      	b.n	800d3cc <dir_register+0x34c>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d290:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d29a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d29e:	f003 0302 	and.w	r3, r3, #2
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d007      	beq.n	800d2b6 <dir_register+0x236>
 800d2a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d2a8:	330c      	adds	r3, #12
 800d2aa:	4a2f      	ldr	r2, [pc, #188]	@ (800d368 <dir_register+0x2e8>)
 800d2ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b0:	089b      	lsrs	r3, r3, #2
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	e000      	b.n	800d2b8 <dir_register+0x238>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800d2ba:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7fe fff9 	bl	800c2b4 <dir_alloc>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 800d2c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d14e      	bne.n	800d36e <dir_register+0x2ee>
 800d2d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	673b      	str	r3, [r7, #112]	@ 0x70
 800d2d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d048      	beq.n	800d36e <dir_register+0x2ee>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2e2:	015b      	lsls	r3, r3, #5
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f7fe feb8 	bl	800c05e <dir_sdi>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800d2f4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d138      	bne.n	800d36e <dir_register+0x2ee>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	3340      	adds	r3, #64	@ 0x40
 800d300:	4618      	mov	r0, r3
 800d302:	f7ff fa55 	bl	800c7b0 <sum_sfn>
 800d306:	4603      	mov	r3, r0
 800d308:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d310:	4619      	mov	r1, r3
 800d312:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d314:	f7fd ffe4 	bl	800b2e0 <move_window>
 800d318:	4603      	mov	r3, r0
 800d31a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800d31e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d322:	2b00      	cmp	r3, #0
 800d324:	d122      	bne.n	800d36c <dir_register+0x2ec>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 800d326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d328:	68d8      	ldr	r0, [r3, #12]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d32e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d330:	b2da      	uxtb	r2, r3
 800d332:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d336:	f7ff f92d 	bl	800c594 <put_lfn>
				fs->wflag = 1;
 800d33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d33c:	2201      	movs	r2, #1
 800d33e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800d340:	2100      	movs	r1, #0
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7fe ff11 	bl	800c16a <dir_next>
 800d348:	4603      	mov	r3, r0
 800d34a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --n_ent);
 800d34e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d352:	2b00      	cmp	r3, #0
 800d354:	d10b      	bne.n	800d36e <dir_register+0x2ee>
 800d356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d358:	3b01      	subs	r3, #1
 800d35a:	673b      	str	r3, [r7, #112]	@ 0x70
 800d35c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d1d4      	bne.n	800d30c <dir_register+0x28c>
 800d362:	e004      	b.n	800d36e <dir_register+0x2ee>
 800d364:	88888889 	.word	0x88888889
 800d368:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800d36c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d36e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d372:	2b00      	cmp	r3, #0
 800d374:	d128      	bne.n	800d3c8 <dir_register+0x348>
		res = move_window(fs, dp->sect);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d37a:	4619      	mov	r1, r3
 800d37c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d37e:	f7fd ffaf 	bl	800b2e0 <move_window>
 800d382:	4603      	mov	r3, r0
 800d384:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800d388:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d11b      	bne.n	800d3c8 <dir_register+0x348>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d394:	2220      	movs	r2, #32
 800d396:	2100      	movs	r1, #0
 800d398:	4618      	mov	r0, r3
 800d39a:	f014 fe78 	bl	802208e <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	3340      	adds	r3, #64	@ 0x40
 800d3a6:	220b      	movs	r2, #11
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	f014 ff1a 	bl	80221e2 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3b8:	330c      	adds	r3, #12
 800d3ba:	f002 0218 	and.w	r2, r2, #24
 800d3be:	b2d2      	uxtb	r2, r2
 800d3c0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d3c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800d3c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3780      	adds	r7, #128	@ 0x80
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d3d6:	bf00      	nop

0800d3d8 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 800d3d8:	b5b0      	push	{r4, r5, r7, lr}
 800d3da:	b08a      	sub	sp, #40	@ 0x28
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
	UINT si, di;
#if FF_USE_LFN
	BYTE lcf;
	WCHAR wc, hs;
	FATFS *fs = dp->obj.fs;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	613b      	str	r3, [r7, #16]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	769a      	strb	r2, [r3, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 81b6 	beq.w	800d764 <get_fileinfo+0x38c>

#if FF_USE_LFN		/* LFN configuration */
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b04      	cmp	r3, #4
 800d3fe:	f040 80a6 	bne.w	800d54e <get_fileinfo+0x176>
		UINT nc = 0;
 800d402:	2300      	movs	r3, #0
 800d404:	617b      	str	r3, [r7, #20]

		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
 800d406:	2340      	movs	r3, #64	@ 0x40
 800d408:	627b      	str	r3, [r7, #36]	@ 0x24
 800d40a:	2300      	movs	r3, #0
 800d40c:	623b      	str	r3, [r7, #32]
		hs = 0;
 800d40e:	2300      	movs	r3, #0
 800d410:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 800d412:	e048      	b.n	800d4a6 <get_fileinfo+0xce>
			if (si >= MAXDIRB(FF_MAX_LFN)) {	/* Truncated directory block? */
 800d414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d416:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800d41a:	d302      	bcc.n	800d422 <get_fileinfo+0x4a>
				di = 0; break;
 800d41c:	2300      	movs	r3, #0
 800d41e:	623b      	str	r3, [r7, #32]
 800d420:	e049      	b.n	800d4b6 <get_fileinfo+0xde>
			}
			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
 800d422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d424:	f003 031f 	and.w	r3, r3, #31
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d102      	bne.n	800d432 <get_fileinfo+0x5a>
 800d42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d42e:	3302      	adds	r3, #2
 800d430:	627b      	str	r3, [r7, #36]	@ 0x24
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	691a      	ldr	r2, [r3, #16]
 800d436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d438:	4413      	add	r3, r2
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7fd fac3 	bl	800a9c6 <ld_word>
 800d440:	4603      	mov	r3, r0
 800d442:	83bb      	strh	r3, [r7, #28]
 800d444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d446:	3302      	adds	r3, #2
 800d448:	627b      	str	r3, [r7, #36]	@ 0x24
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	3301      	adds	r3, #1
 800d44e:	617b      	str	r3, [r7, #20]
			if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800d450:	8b7b      	ldrh	r3, [r7, #26]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10a      	bne.n	800d46c <get_fileinfo+0x94>
 800d456:	8bbb      	ldrh	r3, [r7, #28]
 800d458:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800d45c:	d306      	bcc.n	800d46c <get_fileinfo+0x94>
 800d45e:	8bbb      	ldrh	r3, [r7, #28]
 800d460:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800d464:	d202      	bcs.n	800d46c <get_fileinfo+0x94>
				hs = wc; continue;				/* Get low surrogate */
 800d466:	8bbb      	ldrh	r3, [r7, #28]
 800d468:	837b      	strh	r3, [r7, #26]
 800d46a:	e01c      	b.n	800d4a6 <get_fileinfo+0xce>
			}
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800d46c:	8b7b      	ldrh	r3, [r7, #26]
 800d46e:	041a      	lsls	r2, r3, #16
 800d470:	8bbb      	ldrh	r3, [r7, #28]
 800d472:	ea42 0003 	orr.w	r0, r2, r3
 800d476:	6a3b      	ldr	r3, [r7, #32]
 800d478:	3318      	adds	r3, #24
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	4413      	add	r3, r2
 800d47e:	1c99      	adds	r1, r3, #2
 800d480:	6a3b      	ldr	r3, [r7, #32]
 800d482:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800d486:	461a      	mov	r2, r3
 800d488:	f7fd fcea 	bl	800ae60 <put_utf>
 800d48c:	60f8      	str	r0, [r7, #12]
			if (nw == 0) {						/* Buffer overflow or wrong char? */
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d102      	bne.n	800d49a <get_fileinfo+0xc2>
				di = 0; break;
 800d494:	2300      	movs	r3, #0
 800d496:	623b      	str	r3, [r7, #32]
 800d498:	e00d      	b.n	800d4b6 <get_fileinfo+0xde>
			}
			di += nw;
 800d49a:	6a3a      	ldr	r2, [r7, #32]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	4413      	add	r3, r2
 800d4a0:	623b      	str	r3, [r7, #32]
			hs = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	691b      	ldr	r3, [r3, #16]
 800d4aa:	3323      	adds	r3, #35	@ 0x23
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d3ae      	bcc.n	800d414 <get_fileinfo+0x3c>
		}
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
 800d4b6:	8b7b      	ldrh	r3, [r7, #26]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <get_fileinfo+0xe8>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	623b      	str	r3, [r7, #32]
		if (di == 0) fno->fname[di++] = '\?';	/* Inaccessible object name? */
 800d4c0:	6a3b      	ldr	r3, [r7, #32]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d106      	bne.n	800d4d4 <get_fileinfo+0xfc>
 800d4c6:	6a3b      	ldr	r3, [r7, #32]
 800d4c8:	1c5a      	adds	r2, r3, #1
 800d4ca:	623a      	str	r2, [r7, #32]
 800d4cc:	683a      	ldr	r2, [r7, #0]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	223f      	movs	r2, #63	@ 0x3f
 800d4d2:	769a      	strb	r2, [r3, #26]
		fno->fname[di] = 0;						/* Terminate the name */
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	4413      	add	r3, r2
 800d4da:	331a      	adds	r3, #26
 800d4dc:	2200      	movs	r2, #0
 800d4de:	701a      	strb	r2, [r3, #0]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	735a      	strb	r2, [r3, #13]

		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	691b      	ldr	r3, [r3, #16]
 800d4ea:	3304      	adds	r3, #4
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	731a      	strb	r2, [r3, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	7b1b      	ldrb	r3, [r3, #12]
 800d4fc:	f003 0310 	and.w	r3, r3, #16
 800d500:	2b00      	cmp	r3, #0
 800d502:	d108      	bne.n	800d516 <get_fileinfo+0x13e>
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	691b      	ldr	r3, [r3, #16]
 800d508:	3338      	adds	r3, #56	@ 0x38
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fd fa97 	bl	800aa3e <ld_qword>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	e003      	b.n	800d51e <get_fileinfo+0x146>
 800d516:	f04f 0200 	mov.w	r2, #0
 800d51a:	f04f 0300 	mov.w	r3, #0
 800d51e:	6839      	ldr	r1, [r7, #0]
 800d520:	e9c1 2300 	strd	r2, r3, [r1]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	691b      	ldr	r3, [r3, #16]
 800d528:	330c      	adds	r3, #12
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fd fa4b 	bl	800a9c6 <ld_word>
 800d530:	4603      	mov	r3, r0
 800d532:	461a      	mov	r2, r3
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	815a      	strh	r2, [r3, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	330e      	adds	r3, #14
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fd fa41 	bl	800a9c6 <ld_word>
 800d544:	4603      	mov	r3, r0
 800d546:	461a      	mov	r2, r3
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	811a      	strh	r2, [r3, #8]
		return;
 800d54c:	e10b      	b.n	800d766 <get_fileinfo+0x38e>
	} else
#endif
	{	/* FAT/FAT32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d556:	d04d      	beq.n	800d5f4 <get_fileinfo+0x21c>
			si = di = 0;
 800d558:	2300      	movs	r3, #0
 800d55a:	623b      	str	r3, [r7, #32]
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	627b      	str	r3, [r7, #36]	@ 0x24
			hs = 0;
 800d560:	2300      	movs	r3, #0
 800d562:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 800d564:	e033      	b.n	800d5ce <get_fileinfo+0x1f6>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	68da      	ldr	r2, [r3, #12]
 800d56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56c:	1c59      	adds	r1, r3, #1
 800d56e:	6279      	str	r1, [r7, #36]	@ 0x24
 800d570:	005b      	lsls	r3, r3, #1
 800d572:	4413      	add	r3, r2
 800d574:	881b      	ldrh	r3, [r3, #0]
 800d576:	83bb      	strh	r3, [r7, #28]
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800d578:	8b7b      	ldrh	r3, [r7, #26]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10a      	bne.n	800d594 <get_fileinfo+0x1bc>
 800d57e:	8bbb      	ldrh	r3, [r7, #28]
 800d580:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800d584:	d306      	bcc.n	800d594 <get_fileinfo+0x1bc>
 800d586:	8bbb      	ldrh	r3, [r7, #28]
 800d588:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800d58c:	d202      	bcs.n	800d594 <get_fileinfo+0x1bc>
					hs = wc; continue;		/* Get low surrogate */
 800d58e:	8bbb      	ldrh	r3, [r7, #28]
 800d590:	837b      	strh	r3, [r7, #26]
 800d592:	e01c      	b.n	800d5ce <get_fileinfo+0x1f6>
				}
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800d594:	8b7b      	ldrh	r3, [r7, #26]
 800d596:	041a      	lsls	r2, r3, #16
 800d598:	8bbb      	ldrh	r3, [r7, #28]
 800d59a:	ea42 0003 	orr.w	r0, r2, r3
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	3318      	adds	r3, #24
 800d5a2:	683a      	ldr	r2, [r7, #0]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	1c99      	adds	r1, r3, #2
 800d5a8:	6a3b      	ldr	r3, [r7, #32]
 800d5aa:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f7fd fc56 	bl	800ae60 <put_utf>
 800d5b4:	60f8      	str	r0, [r7, #12]
				if (nw == 0) {				/* Buffer overflow or wrong char? */
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d102      	bne.n	800d5c2 <get_fileinfo+0x1ea>
					di = 0; break;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	623b      	str	r3, [r7, #32]
 800d5c0:	e00d      	b.n	800d5de <get_fileinfo+0x206>
				}
				di += nw;
 800d5c2:	6a3a      	ldr	r2, [r7, #32]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	623b      	str	r3, [r7, #32]
				hs = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	68da      	ldr	r2, [r3, #12]
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d4:	005b      	lsls	r3, r3, #1
 800d5d6:	4413      	add	r3, r2
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d1c3      	bne.n	800d566 <get_fileinfo+0x18e>
			}
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 800d5de:	8b7b      	ldrh	r3, [r7, #26]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d001      	beq.n	800d5e8 <get_fileinfo+0x210>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	623b      	str	r3, [r7, #32]
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 800d5e8:	683a      	ldr	r2, [r7, #0]
 800d5ea:	6a3b      	ldr	r3, [r7, #32]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	331a      	adds	r3, #26
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	701a      	strb	r2, [r3, #0]
		}
	}

	si = di = 0;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	623b      	str	r3, [r7, #32]
 800d5f8:	6a3b      	ldr	r3, [r7, #32]
 800d5fa:	627b      	str	r3, [r7, #36]	@ 0x24
	while (si < 11) {		/* Get SFN from SFN entry */
 800d5fc:	e027      	b.n	800d64e <get_fileinfo+0x276>
		wc = dp->dir[si++];			/* Get a char */
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d604:	1c59      	adds	r1, r3, #1
 800d606:	6279      	str	r1, [r7, #36]	@ 0x24
 800d608:	4413      	add	r3, r2
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	83bb      	strh	r3, [r7, #28]
		if (wc == ' ') continue;	/* Skip padding spaces */
 800d60e:	8bbb      	ldrh	r3, [r7, #28]
 800d610:	2b20      	cmp	r3, #32
 800d612:	d01b      	beq.n	800d64c <get_fileinfo+0x274>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 800d614:	8bbb      	ldrh	r3, [r7, #28]
 800d616:	2b05      	cmp	r3, #5
 800d618:	d101      	bne.n	800d61e <get_fileinfo+0x246>
 800d61a:	23e5      	movs	r3, #229	@ 0xe5
 800d61c:	83bb      	strh	r3, [r7, #28]
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 800d61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d620:	2b09      	cmp	r3, #9
 800d622:	d109      	bne.n	800d638 <get_fileinfo+0x260>
 800d624:	6a3b      	ldr	r3, [r7, #32]
 800d626:	2b0b      	cmp	r3, #11
 800d628:	d806      	bhi.n	800d638 <get_fileinfo+0x260>
 800d62a:	6a3b      	ldr	r3, [r7, #32]
 800d62c:	1c5a      	adds	r2, r3, #1
 800d62e:	623a      	str	r2, [r7, #32]
 800d630:	683a      	ldr	r2, [r7, #0]
 800d632:	4413      	add	r3, r2
 800d634:	222e      	movs	r2, #46	@ 0x2e
 800d636:	735a      	strb	r2, [r3, #13]
		if (nw == 0) {				/* Buffer overflow? */
			di = 0; break;
		}
		di += nw;
#else					/* ANSI/OEM output */
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 800d638:	6a3b      	ldr	r3, [r7, #32]
 800d63a:	1c5a      	adds	r2, r3, #1
 800d63c:	623a      	str	r2, [r7, #32]
 800d63e:	8bba      	ldrh	r2, [r7, #28]
 800d640:	b2d1      	uxtb	r1, r2
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	4413      	add	r3, r2
 800d646:	460a      	mov	r2, r1
 800d648:	735a      	strb	r2, [r3, #13]
 800d64a:	e000      	b.n	800d64e <get_fileinfo+0x276>
		if (wc == ' ') continue;	/* Skip padding spaces */
 800d64c:	bf00      	nop
	while (si < 11) {		/* Get SFN from SFN entry */
 800d64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d650:	2b0a      	cmp	r3, #10
 800d652:	d9d4      	bls.n	800d5fe <get_fileinfo+0x226>
#endif
	}
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 800d654:	683a      	ldr	r2, [r7, #0]
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	4413      	add	r3, r2
 800d65a:	330d      	adds	r3, #13
 800d65c:	2200      	movs	r2, #0
 800d65e:	701a      	strb	r2, [r3, #0]

	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	7e9b      	ldrb	r3, [r3, #26]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d152      	bne.n	800d70e <get_fileinfo+0x336>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccessible */
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d107      	bne.n	800d67e <get_fileinfo+0x2a6>
			fno->fname[di++] = '\?';
 800d66e:	6a3b      	ldr	r3, [r7, #32]
 800d670:	1c5a      	adds	r2, r3, #1
 800d672:	623a      	str	r2, [r7, #32]
 800d674:	683a      	ldr	r2, [r7, #0]
 800d676:	4413      	add	r3, r2
 800d678:	223f      	movs	r2, #63	@ 0x3f
 800d67a:	769a      	strb	r2, [r3, #26]
 800d67c:	e038      	b.n	800d6f0 <get_fileinfo+0x318>
		} else {
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800d67e:	2300      	movs	r3, #0
 800d680:	623b      	str	r3, [r7, #32]
 800d682:	6a3b      	ldr	r3, [r7, #32]
 800d684:	627b      	str	r3, [r7, #36]	@ 0x24
 800d686:	2308      	movs	r3, #8
 800d688:	77fb      	strb	r3, [r7, #31]
 800d68a:	e02a      	b.n	800d6e2 <get_fileinfo+0x30a>
				wc = (WCHAR)fno->altname[si];
 800d68c:	683a      	ldr	r2, [r7, #0]
 800d68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d690:	4413      	add	r3, r2
 800d692:	330d      	adds	r3, #13
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	83bb      	strh	r3, [r7, #28]
				if (wc == '.') lcf = NS_EXT;
 800d698:	8bbb      	ldrh	r3, [r7, #28]
 800d69a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d69c:	d101      	bne.n	800d6a2 <get_fileinfo+0x2ca>
 800d69e:	2310      	movs	r3, #16
 800d6a0:	77fb      	strb	r3, [r7, #31]
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 800d6a2:	8bbb      	ldrh	r3, [r7, #28]
 800d6a4:	2b40      	cmp	r3, #64	@ 0x40
 800d6a6:	d90e      	bls.n	800d6c6 <get_fileinfo+0x2ee>
 800d6a8:	8bbb      	ldrh	r3, [r7, #28]
 800d6aa:	2b5a      	cmp	r3, #90	@ 0x5a
 800d6ac:	d80b      	bhi.n	800d6c6 <get_fileinfo+0x2ee>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6b2:	330c      	adds	r3, #12
 800d6b4:	781a      	ldrb	r2, [r3, #0]
 800d6b6:	7ffb      	ldrb	r3, [r7, #31]
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d002      	beq.n	800d6c6 <get_fileinfo+0x2ee>
 800d6c0:	8bbb      	ldrh	r3, [r7, #28]
 800d6c2:	3320      	adds	r3, #32
 800d6c4:	83bb      	strh	r3, [r7, #28]
				fno->fname[di] = (TCHAR)wc;
 800d6c6:	8bbb      	ldrh	r3, [r7, #28]
 800d6c8:	b2d9      	uxtb	r1, r3
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	6a3b      	ldr	r3, [r7, #32]
 800d6ce:	4413      	add	r3, r2
 800d6d0:	331a      	adds	r3, #26
 800d6d2:	460a      	mov	r2, r1
 800d6d4:	701a      	strb	r2, [r3, #0]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d8:	3301      	adds	r3, #1
 800d6da:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	623b      	str	r3, [r7, #32]
 800d6e2:	683a      	ldr	r2, [r7, #0]
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e6:	4413      	add	r3, r2
 800d6e8:	330d      	adds	r3, #13
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d1cd      	bne.n	800d68c <get_fileinfo+0x2b4>
			}
		}
		fno->fname[di] = 0;	/* Terminate the LFN */
 800d6f0:	683a      	ldr	r2, [r7, #0]
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	331a      	adds	r3, #26
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d700:	330c      	adds	r3, #12
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d102      	bne.n	800d70e <get_fileinfo+0x336>
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2200      	movs	r2, #0
 800d70c:	735a      	strb	r2, [r3, #13]
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d712:	330b      	adds	r3, #11
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d724:	331c      	adds	r3, #28
 800d726:	4618      	mov	r0, r3
 800d728:	f7fd f966 	bl	800a9f8 <ld_dword>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2200      	movs	r2, #0
 800d730:	461c      	mov	r4, r3
 800d732:	4615      	mov	r5, r2
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	e9c3 4500 	strd	r4, r5, [r3]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d73e:	3316      	adds	r3, #22
 800d740:	4618      	mov	r0, r3
 800d742:	f7fd f940 	bl	800a9c6 <ld_word>
 800d746:	4603      	mov	r3, r0
 800d748:	461a      	mov	r2, r3
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d752:	3318      	adds	r3, #24
 800d754:	4618      	mov	r0, r3
 800d756:	f7fd f936 	bl	800a9c6 <ld_word>
 800d75a:	4603      	mov	r3, r0
 800d75c:	461a      	mov	r2, r3
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	811a      	strh	r2, [r3, #8]
 800d762:	e000      	b.n	800d766 <get_fileinfo+0x38e>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800d764:	bf00      	nop
}
 800d766:	3728      	adds	r7, #40	@ 0x28
 800d768:	46bd      	mov	sp, r7
 800d76a:	bdb0      	pop	{r4, r5, r7, pc}

0800d76c <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b08a      	sub	sp, #40	@ 0x28
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	60bb      	str	r3, [r7, #8]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	613b      	str	r3, [r7, #16]
 800d784:	2300      	movs	r3, #0
 800d786:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 800d788:	f107 0308 	add.w	r3, r7, #8
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fd fb22 	bl	800add6 <tchar2uni>
 800d792:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79a:	d101      	bne.n	800d7a0 <create_name+0x34>
 800d79c:	2306      	movs	r3, #6
 800d79e:	e209      	b.n	800dbb4 <create_name+0x448>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7a6:	d309      	bcc.n	800d7bc <create_name+0x50>
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	0c19      	lsrs	r1, r3, #16
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	1c5a      	adds	r2, r3, #1
 800d7b0:	617a      	str	r2, [r7, #20]
 800d7b2:	005b      	lsls	r3, r3, #1
 800d7b4:	693a      	ldr	r2, [r7, #16]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	b28a      	uxth	r2, r1
 800d7ba:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 800d7c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7c2:	2b1f      	cmp	r3, #31
 800d7c4:	d920      	bls.n	800d808 <create_name+0x9c>
 800d7c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7c8:	2b2f      	cmp	r3, #47	@ 0x2f
 800d7ca:	d01d      	beq.n	800d808 <create_name+0x9c>
 800d7cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7ce:	2b5c      	cmp	r3, #92	@ 0x5c
 800d7d0:	d01a      	beq.n	800d808 <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d7d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7d6:	d809      	bhi.n	800d7ec <create_name+0x80>
 800d7d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7da:	4619      	mov	r1, r3
 800d7dc:	4894      	ldr	r0, [pc, #592]	@ (800da30 <create_name+0x2c4>)
 800d7de:	f014 fc6d 	bl	80220bc <strchr>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <create_name+0x80>
 800d7e8:	2306      	movs	r3, #6
 800d7ea:	e1e3      	b.n	800dbb4 <create_name+0x448>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	2bfe      	cmp	r3, #254	@ 0xfe
 800d7f0:	d901      	bls.n	800d7f6 <create_name+0x8a>
 800d7f2:	2306      	movs	r3, #6
 800d7f4:	e1de      	b.n	800dbb4 <create_name+0x448>
		lfn[di++] = wc;				/* Store the Unicode character */
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	617a      	str	r2, [r7, #20]
 800d7fc:	005b      	lsls	r3, r3, #1
 800d7fe:	693a      	ldr	r2, [r7, #16]
 800d800:	4413      	add	r3, r2
 800d802:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d804:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 800d806:	e7bf      	b.n	800d788 <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 800d808:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d80a:	2b1f      	cmp	r3, #31
 800d80c:	d806      	bhi.n	800d81c <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 800d80e:	2304      	movs	r3, #4
 800d810:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d814:	e014      	b.n	800d840 <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	3301      	adds	r3, #1
 800d81a:	60bb      	str	r3, [r7, #8]
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2b2f      	cmp	r3, #47	@ 0x2f
 800d822:	d0f8      	beq.n	800d816 <create_name+0xaa>
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	2b5c      	cmp	r3, #92	@ 0x5c
 800d82a:	d0f4      	beq.n	800d816 <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 800d82c:	2300      	movs	r3, #0
 800d82e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	2b1f      	cmp	r3, #31
 800d838:	d802      	bhi.n	800d840 <create_name+0xd4>
 800d83a:	2304      	movs	r3, #4
 800d83c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 800d840:	68ba      	ldr	r2, [r7, #8]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	601a      	str	r2, [r3, #0]

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d109      	bne.n	800d860 <create_name+0xf4>
 800d84c:	697a      	ldr	r2, [r7, #20]
 800d84e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d852:	4413      	add	r3, r2
 800d854:	005b      	lsls	r3, r3, #1
 800d856:	693a      	ldr	r2, [r7, #16]
 800d858:	4413      	add	r3, r2
 800d85a:	881b      	ldrh	r3, [r3, #0]
 800d85c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d85e:	d015      	beq.n	800d88c <create_name+0x120>
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	2b02      	cmp	r3, #2
 800d864:	d14d      	bne.n	800d902 <create_name+0x196>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800d866:	697a      	ldr	r2, [r7, #20]
 800d868:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d86c:	4413      	add	r3, r2
 800d86e:	005b      	lsls	r3, r3, #1
 800d870:	693a      	ldr	r2, [r7, #16]
 800d872:	4413      	add	r3, r2
 800d874:	881b      	ldrh	r3, [r3, #0]
 800d876:	2b2e      	cmp	r3, #46	@ 0x2e
 800d878:	d143      	bne.n	800d902 <create_name+0x196>
 800d87a:	697a      	ldr	r2, [r7, #20]
 800d87c:	4b6d      	ldr	r3, [pc, #436]	@ (800da34 <create_name+0x2c8>)
 800d87e:	4413      	add	r3, r2
 800d880:	005b      	lsls	r3, r3, #1
 800d882:	693a      	ldr	r2, [r7, #16]
 800d884:	4413      	add	r3, r2
 800d886:	881b      	ldrh	r3, [r3, #0]
 800d888:	2b2e      	cmp	r3, #46	@ 0x2e
 800d88a:	d13a      	bne.n	800d902 <create_name+0x196>
		lfn[di] = 0;
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	005b      	lsls	r3, r3, #1
 800d890:	693a      	ldr	r2, [r7, #16]
 800d892:	4413      	add	r3, r2
 800d894:	2200      	movs	r2, #0
 800d896:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 800d898:	2300      	movs	r3, #0
 800d89a:	623b      	str	r3, [r7, #32]
 800d89c:	e00f      	b.n	800d8be <create_name+0x152>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800d89e:	6a3a      	ldr	r2, [r7, #32]
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d201      	bcs.n	800d8aa <create_name+0x13e>
 800d8a6:	212e      	movs	r1, #46	@ 0x2e
 800d8a8:	e000      	b.n	800d8ac <create_name+0x140>
 800d8aa:	2120      	movs	r1, #32
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	6a3b      	ldr	r3, [r7, #32]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	3340      	adds	r3, #64	@ 0x40
 800d8b4:	460a      	mov	r2, r1
 800d8b6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	623b      	str	r3, [r7, #32]
 800d8be:	6a3b      	ldr	r3, [r7, #32]
 800d8c0:	2b0a      	cmp	r3, #10
 800d8c2:	d9ec      	bls.n	800d89e <create_name+0x132>
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
 800d8c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d8c8:	f043 0320 	orr.w	r3, r3, #32
 800d8cc:	b2d9      	uxtb	r1, r3
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	6a3b      	ldr	r3, [r7, #32]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	3340      	adds	r3, #64	@ 0x40
 800d8d6:	460a      	mov	r2, r1
 800d8d8:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	e16a      	b.n	800dbb4 <create_name+0x448>
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 800d8de:	697a      	ldr	r2, [r7, #20]
 800d8e0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d8e4:	4413      	add	r3, r2
 800d8e6:	005b      	lsls	r3, r3, #1
 800d8e8:	693a      	ldr	r2, [r7, #16]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	881b      	ldrh	r3, [r3, #0]
 800d8ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc != ' ' && wc != '.') break;
 800d8f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8f2:	2b20      	cmp	r3, #32
 800d8f4:	d002      	beq.n	800d8fc <create_name+0x190>
 800d8f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8fa:	d106      	bne.n	800d90a <create_name+0x19e>
		di--;
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	3b01      	subs	r3, #1
 800d900:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1ea      	bne.n	800d8de <create_name+0x172>
 800d908:	e000      	b.n	800d90c <create_name+0x1a0>
		if (wc != ' ' && wc != '.') break;
 800d90a:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	693a      	ldr	r2, [r7, #16]
 800d912:	4413      	add	r3, r2
 800d914:	2200      	movs	r2, #0
 800d916:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d101      	bne.n	800d922 <create_name+0x1b6>
 800d91e:	2306      	movs	r3, #6
 800d920:	e148      	b.n	800dbb4 <create_name+0x448>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 800d922:	2300      	movs	r3, #0
 800d924:	61bb      	str	r3, [r7, #24]
 800d926:	e002      	b.n	800d92e <create_name+0x1c2>
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	3301      	adds	r3, #1
 800d92c:	61bb      	str	r3, [r7, #24]
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	4413      	add	r3, r2
 800d936:	881b      	ldrh	r3, [r3, #0]
 800d938:	2b20      	cmp	r3, #32
 800d93a:	d0f5      	beq.n	800d928 <create_name+0x1bc>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d106      	bne.n	800d950 <create_name+0x1e4>
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	005b      	lsls	r3, r3, #1
 800d946:	693a      	ldr	r2, [r7, #16]
 800d948:	4413      	add	r3, r2
 800d94a:	881b      	ldrh	r3, [r3, #0]
 800d94c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d94e:	d109      	bne.n	800d964 <create_name+0x1f8>
 800d950:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d954:	f043 0303 	orr.w	r3, r3, #3
 800d958:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 800d95c:	e002      	b.n	800d964 <create_name+0x1f8>
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	3b01      	subs	r3, #1
 800d962:	617b      	str	r3, [r7, #20]
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d009      	beq.n	800d97e <create_name+0x212>
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d970:	4413      	add	r3, r2
 800d972:	005b      	lsls	r3, r3, #1
 800d974:	693a      	ldr	r2, [r7, #16]
 800d976:	4413      	add	r3, r2
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d97c:	d1ef      	bne.n	800d95e <create_name+0x1f2>

	memset(dp->fn, ' ', 11);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	3340      	adds	r3, #64	@ 0x40
 800d982:	220b      	movs	r2, #11
 800d984:	2120      	movs	r1, #32
 800d986:	4618      	mov	r0, r3
 800d988:	f014 fb81 	bl	802208e <memset>
	i = b = 0; ni = 8;
 800d98c:	2300      	movs	r3, #0
 800d98e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d992:	2300      	movs	r3, #0
 800d994:	623b      	str	r3, [r7, #32]
 800d996:	2308      	movs	r3, #8
 800d998:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	1c5a      	adds	r2, r3, #1
 800d99e:	61ba      	str	r2, [r7, #24]
 800d9a0:	005b      	lsls	r3, r3, #1
 800d9a2:	693a      	ldr	r2, [r7, #16]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	881b      	ldrh	r3, [r3, #0]
 800d9a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 800d9aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f000 80b7 	beq.w	800db20 <create_name+0x3b4>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800d9b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9b4:	2b20      	cmp	r3, #32
 800d9b6:	d006      	beq.n	800d9c6 <create_name+0x25a>
 800d9b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9bc:	d10a      	bne.n	800d9d4 <create_name+0x268>
 800d9be:	69ba      	ldr	r2, [r7, #24]
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d006      	beq.n	800d9d4 <create_name+0x268>
			cf |= NS_LOSS | NS_LFN;
 800d9c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d9ca:	f043 0303 	orr.w	r3, r3, #3
 800d9ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			continue;
 800d9d2:	e0a4      	b.n	800db1e <create_name+0x3b2>
		}

		if (i >= ni || si == di) {		/* End of field? */
 800d9d4:	6a3a      	ldr	r2, [r7, #32]
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d203      	bcs.n	800d9e4 <create_name+0x278>
 800d9dc:	69ba      	ldr	r2, [r7, #24]
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d129      	bne.n	800da38 <create_name+0x2cc>
			if (ni == 11) {				/* Name extension overflow? */
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	2b0b      	cmp	r3, #11
 800d9e8:	d106      	bne.n	800d9f8 <create_name+0x28c>
				cf |= NS_LOSS | NS_LFN;
 800d9ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d9ee:	f043 0303 	orr.w	r3, r3, #3
 800d9f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 800d9f6:	e096      	b.n	800db26 <create_name+0x3ba>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800d9f8:	69ba      	ldr	r2, [r7, #24]
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d005      	beq.n	800da0c <create_name+0x2a0>
 800da00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da04:	f043 0303 	orr.w	r3, r3, #3
 800da08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;						/* No name extension? */
 800da0c:	69ba      	ldr	r2, [r7, #24]
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	429a      	cmp	r2, r3
 800da12:	f200 8087 	bhi.w	800db24 <create_name+0x3b8>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	61bb      	str	r3, [r7, #24]
 800da1a:	2308      	movs	r3, #8
 800da1c:	623b      	str	r3, [r7, #32]
 800da1e:	230b      	movs	r3, #11
 800da20:	61fb      	str	r3, [r7, #28]
 800da22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			continue;
 800da2c:	e077      	b.n	800db1e <create_name+0x3b2>
 800da2e:	bf00      	nop
 800da30:	0802566c 	.word	0x0802566c
 800da34:	7ffffffe 	.word	0x7ffffffe
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 800da38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800da3c:	d918      	bls.n	800da70 <create_name+0x304>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800da3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da42:	f043 0302 	orr.w	r3, r3, #2
 800da46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* In DBCS cfg */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800da4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da4c:	f240 3152 	movw	r1, #850	@ 0x352
 800da50:	4618      	mov	r0, r3
 800da52:	f002 fc69 	bl	8010328 <ff_uni2oem>
 800da56:	4603      	mov	r3, r0
 800da58:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 800da5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da60:	2b00      	cmp	r3, #0
 800da62:	d005      	beq.n	800da70 <create_name+0x304>
 800da64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da6a:	4a54      	ldr	r2, [pc, #336]	@ (800dbbc <create_name+0x450>)
 800da6c:	5cd3      	ldrb	r3, [r2, r3]
 800da6e:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 800da70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da72:	2bff      	cmp	r3, #255	@ 0xff
 800da74:	d91a      	bls.n	800daac <create_name+0x340>
			if (i >= ni - 1) {			/* Field overflow? */
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	3b01      	subs	r3, #1
 800da7a:	6a3a      	ldr	r2, [r7, #32]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d308      	bcc.n	800da92 <create_name+0x326>
				cf |= NS_LOSS | NS_LFN;
 800da80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da84:	f043 0303 	orr.w	r3, r3, #3
 800da88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				i = ni; continue;		/* Next field */
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	623b      	str	r3, [r7, #32]
 800da90:	e045      	b.n	800db1e <create_name+0x3b2>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 800da92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da94:	0a1b      	lsrs	r3, r3, #8
 800da96:	b299      	uxth	r1, r3
 800da98:	6a3b      	ldr	r3, [r7, #32]
 800da9a:	1c5a      	adds	r2, r3, #1
 800da9c:	623a      	str	r2, [r7, #32]
 800da9e:	b2c9      	uxtb	r1, r1
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	4413      	add	r3, r2
 800daa4:	460a      	mov	r2, r1
 800daa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800daaa:	e02e      	b.n	800db0a <create_name+0x39e>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 800daac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d007      	beq.n	800dac2 <create_name+0x356>
 800dab2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dab4:	4619      	mov	r1, r3
 800dab6:	4842      	ldr	r0, [pc, #264]	@ (800dbc0 <create_name+0x454>)
 800dab8:	f014 fb00 	bl	80220bc <strchr>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d008      	beq.n	800dad4 <create_name+0x368>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dac2:	235f      	movs	r3, #95	@ 0x5f
 800dac4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800dac6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800daca:	f043 0303 	orr.w	r3, r3, #3
 800dace:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dad2:	e01a      	b.n	800db0a <create_name+0x39e>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800dad4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dad6:	2b40      	cmp	r3, #64	@ 0x40
 800dad8:	d908      	bls.n	800daec <create_name+0x380>
 800dada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dadc:	2b5a      	cmp	r3, #90	@ 0x5a
 800dade:	d805      	bhi.n	800daec <create_name+0x380>
					b |= 2;
 800dae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dae4:	f043 0302 	orr.w	r3, r3, #2
 800dae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 800daec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800daee:	2b60      	cmp	r3, #96	@ 0x60
 800daf0:	d90b      	bls.n	800db0a <create_name+0x39e>
 800daf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800daf4:	2b7a      	cmp	r3, #122	@ 0x7a
 800daf6:	d808      	bhi.n	800db0a <create_name+0x39e>
					b |= 1; wc -= 0x20;
 800daf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dafc:	f043 0301 	orr.w	r3, r3, #1
 800db00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800db04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db06:	3b20      	subs	r3, #32
 800db08:	84bb      	strh	r3, [r7, #36]	@ 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	1c5a      	adds	r2, r3, #1
 800db0e:	623a      	str	r2, [r7, #32]
 800db10:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800db12:	b2d1      	uxtb	r1, r2
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	4413      	add	r3, r2
 800db18:	460a      	mov	r2, r1
 800db1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		wc = lfn[si++];					/* Get an LFN character */
 800db1e:	e73c      	b.n	800d99a <create_name+0x22e>
		if (wc == 0) break;				/* Break on end of the LFN */
 800db20:	bf00      	nop
 800db22:	e000      	b.n	800db26 <create_name+0x3ba>
			if (si > di) break;						/* No name extension? */
 800db24:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800db2c:	2be5      	cmp	r3, #229	@ 0xe5
 800db2e:	d103      	bne.n	800db38 <create_name+0x3cc>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2205      	movs	r2, #5
 800db34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	2b08      	cmp	r3, #8
 800db3c:	d104      	bne.n	800db48 <create_name+0x3dc>
 800db3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800db48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db4c:	f003 030c 	and.w	r3, r3, #12
 800db50:	2b0c      	cmp	r3, #12
 800db52:	d005      	beq.n	800db60 <create_name+0x3f4>
 800db54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db58:	f003 0303 	and.w	r3, r3, #3
 800db5c:	2b03      	cmp	r3, #3
 800db5e:	d105      	bne.n	800db6c <create_name+0x400>
 800db60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800db64:	f043 0302 	orr.w	r3, r3, #2
 800db68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800db6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800db70:	f003 0302 	and.w	r3, r3, #2
 800db74:	2b00      	cmp	r3, #0
 800db76:	d117      	bne.n	800dba8 <create_name+0x43c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 800db78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db7c:	f003 0301 	and.w	r3, r3, #1
 800db80:	2b00      	cmp	r3, #0
 800db82:	d005      	beq.n	800db90 <create_name+0x424>
 800db84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800db88:	f043 0310 	orr.w	r3, r3, #16
 800db8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800db90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db94:	f003 0304 	and.w	r3, r3, #4
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d005      	beq.n	800dba8 <create_name+0x43c>
 800db9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dba0:	f043 0308 	orr.w	r3, r3, #8
 800dba4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dbae:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800dbb2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3728      	adds	r7, #40	@ 0x28
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	08025f84 	.word	0x08025f84
 800dbc0:	08025678 	.word	0x08025678

0800dbc4 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800dbc4:	b5b0      	push	{r4, r5, r7, lr}
 800dbc6:	b09a      	sub	sp, #104	@ 0x68
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	663b      	str	r3, [r7, #96]	@ 0x60


#if FF_FS_RPATH != 0
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	2b2f      	cmp	r3, #47	@ 0x2f
 800dbda:	d00b      	beq.n	800dbf4 <follow_path+0x30>
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	2b5c      	cmp	r3, #92	@ 0x5c
 800dbe2:	d007      	beq.n	800dbf4 <follow_path+0x30>
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
 800dbe4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dbe6:	69da      	ldr	r2, [r3, #28]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	609a      	str	r2, [r3, #8]
 800dbec:	e00d      	b.n	800dc0a <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	603b      	str	r3, [r7, #0]
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	2b2f      	cmp	r3, #47	@ 0x2f
 800dbfa:	d0f8      	beq.n	800dbee <follow_path+0x2a>
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	2b5c      	cmp	r3, #92	@ 0x5c
 800dc02:	d0f4      	beq.n	800dbee <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	61da      	str	r2, [r3, #28]
#if FF_FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
 800dc10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	d136      	bne.n	800dc86 <follow_path+0xc2>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d032      	beq.n	800dc86 <follow_path+0xc2>
		DIR dj;

		dp->obj.c_scl = fs->cdc_scl;
 800dc20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc22:	6a1a      	ldr	r2, [r3, #32]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	621a      	str	r2, [r3, #32]
		dp->obj.c_size = fs->cdc_size;
 800dc28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	625a      	str	r2, [r3, #36]	@ 0x24
		dp->obj.c_ofs = fs->cdc_ofs;
 800dc30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	629a      	str	r2, [r3, #40]	@ 0x28
		res = load_obj_xdir(&dj, &dp->obj);
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	f107 0308 	add.w	r3, r7, #8
 800dc3e:	4611      	mov	r1, r2
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe ff28 	bl	800ca96 <load_obj_xdir>
 800dc46:	4603      	mov	r3, r0
 800dc48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		if (res != FR_OK) return res;
 800dc4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <follow_path+0x96>
 800dc54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dc58:	e0a8      	b.n	800ddac <follow_path+0x1e8>
		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 800dc5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	3338      	adds	r3, #56	@ 0x38
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7fc fec9 	bl	800a9f8 <ld_dword>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2200      	movs	r2, #0
 800dc6a:	461c      	mov	r4, r3
 800dc6c:	4615      	mov	r5, r2
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	e9c3 4504 	strd	r4, r5, [r3, #16]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dc74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	3321      	adds	r3, #33	@ 0x21
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	f003 0302 	and.w	r3, r3, #2
 800dc80:	b2da      	uxtb	r2, r3
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	2b1f      	cmp	r3, #31
 800dc8c:	d80b      	bhi.n	800dca6 <follow_path+0xe2>
		dp->fn[NSFLAG] = NS_NONAME;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2280      	movs	r2, #128	@ 0x80
 800dc92:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800dc96:	2100      	movs	r1, #0
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f7fe f9e0 	bl	800c05e <dir_sdi>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dca4:	e080      	b.n	800dda8 <follow_path+0x1e4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dca6:	463b      	mov	r3, r7
 800dca8:	4619      	mov	r1, r3
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f7ff fd5e 	bl	800d76c <create_name>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			if (res != FR_OK) break;
 800dcb6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d16f      	bne.n	800dd9e <follow_path+0x1da>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7ff f8b4 	bl	800ce2c <dir_find>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			ns = dp->fn[NSFLAG];
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800dcd0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res != FR_OK) {				/* Failed to find the object */
 800dcd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d021      	beq.n	800dd20 <follow_path+0x15c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dcdc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dce0:	2b04      	cmp	r3, #4
 800dce2:	d15e      	bne.n	800dda2 <follow_path+0x1de>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800dce4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dce8:	f003 0320 	and.w	r3, r3, #32
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00d      	beq.n	800dd0c <follow_path+0x148>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800dcf0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dcf4:	f003 0304 	and.w	r3, r3, #4
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d04e      	beq.n	800dd9a <follow_path+0x1d6>
						dp->fn[NSFLAG] = NS_NONAME;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2280      	movs	r2, #128	@ 0x80
 800dd00:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
						res = FR_OK;
 800dd04:	2300      	movs	r3, #0
 800dd06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800dd0a:	e04a      	b.n	800dda2 <follow_path+0x1de>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dd0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd10:	f003 0304 	and.w	r3, r3, #4
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d144      	bne.n	800dda2 <follow_path+0x1de>
 800dd18:	2305      	movs	r3, #5
 800dd1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				break;
 800dd1e:	e040      	b.n	800dda2 <follow_path+0x1de>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800dd20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd24:	f003 0304 	and.w	r3, r3, #4
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d13c      	bne.n	800dda6 <follow_path+0x1e2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	799b      	ldrb	r3, [r3, #6]
 800dd30:	f003 0310 	and.w	r3, r3, #16
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d103      	bne.n	800dd40 <follow_path+0x17c>
				res = FR_NO_PATH; break;
 800dd38:	2305      	movs	r3, #5
 800dd3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dd3e:	e033      	b.n	800dda8 <follow_path+0x1e4>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 800dd40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	2b04      	cmp	r3, #4
 800dd46:	d118      	bne.n	800dd7a <follow_path+0x1b6>
				dp->obj.c_scl = dp->obj.sclust;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	689a      	ldr	r2, [r3, #8]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dd56:	4613      	mov	r3, r2
 800dd58:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	79d2      	ldrb	r2, [r2, #7]
 800dd60:	431a      	orrs	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	625a      	str	r2, [r3, #36]	@ 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4619      	mov	r1, r3
 800dd72:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800dd74:	f7fe fe66 	bl	800ca44 <init_alloc_info>
 800dd78:	e795      	b.n	800dca6 <follow_path+0xe2>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dd7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd7c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd88:	4413      	add	r3, r2
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800dd8e:	f7fe faed 	bl	800c36c <ld_clust>
 800dd92:	4602      	mov	r2, r0
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	609a      	str	r2, [r3, #8]
 800dd98:	e785      	b.n	800dca6 <follow_path+0xe2>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800dd9a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd9c:	e783      	b.n	800dca6 <follow_path+0xe2>
			if (res != FR_OK) break;
 800dd9e:	bf00      	nop
 800dda0:	e002      	b.n	800dda8 <follow_path+0x1e4>
				break;
 800dda2:	bf00      	nop
 800dda4:	e000      	b.n	800dda8 <follow_path+0x1e4>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800dda6:	bf00      	nop
			}
		}
	}

	return res;
 800dda8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3768      	adds	r7, #104	@ 0x68
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bdb0      	pop	{r4, r5, r7, pc}

0800ddb4 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b089      	sub	sp, #36	@ 0x24
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 800ddbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc0:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	613b      	str	r3, [r7, #16]
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d101      	bne.n	800ddd6 <get_ldnumber+0x22>
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	e02e      	b.n	800de34 <get_ldnumber+0x80>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	1c5a      	adds	r2, r3, #1
 800ddda:	61fa      	str	r2, [r7, #28]
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 800dde0:	7bfb      	ldrb	r3, [r7, #15]
 800dde2:	2b1f      	cmp	r3, #31
 800dde4:	d902      	bls.n	800ddec <get_ldnumber+0x38>
 800dde6:	7bfb      	ldrb	r3, [r7, #15]
 800dde8:	2b3a      	cmp	r3, #58	@ 0x3a
 800ddea:	d1f4      	bne.n	800ddd6 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800ddec:	7bfb      	ldrb	r3, [r7, #15]
 800ddee:	2b3a      	cmp	r3, #58	@ 0x3a
 800ddf0:	d11c      	bne.n	800de2c <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	2b2f      	cmp	r3, #47	@ 0x2f
 800ddfc:	d90c      	bls.n	800de18 <get_ldnumber+0x64>
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	2b39      	cmp	r3, #57	@ 0x39
 800de04:	d808      	bhi.n	800de18 <get_ldnumber+0x64>
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	3302      	adds	r3, #2
 800de0a:	69fa      	ldr	r2, [r7, #28]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d103      	bne.n	800de18 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	3b30      	subs	r3, #48	@ 0x30
 800de16:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	dc04      	bgt.n	800de28 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	69fa      	ldr	r2, [r7, #28]
 800de26:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	e003      	b.n	800de34 <get_ldnumber+0x80>
		return vol;
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 800de2c:	4b04      	ldr	r3, [pc, #16]	@ (800de40 <get_ldnumber+0x8c>)
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 800de32:	697b      	ldr	r3, [r7, #20]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3724      	adds	r7, #36	@ 0x24
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr
 800de40:	240197ca 	.word	0x240197ca

0800de44 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2200      	movs	r2, #0
 800de52:	711a      	strb	r2, [r3, #4]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f04f 32ff 	mov.w	r2, #4294967295
 800de5a:	649a      	str	r2, [r3, #72]	@ 0x48
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800de5c:	6839      	ldr	r1, [r7, #0]
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7fd fa3e 	bl	800b2e0 <move_window>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d001      	beq.n	800de6e <check_fs+0x2a>
 800de6a:	2304      	movs	r3, #4
 800de6c:	e099      	b.n	800dfa2 <check_fs+0x15e>
	sign = ld_word(fs->win + BS_55AA);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	334c      	adds	r3, #76	@ 0x4c
 800de72:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800de76:	4618      	mov	r0, r3
 800de78:	f7fc fda5 	bl	800a9c6 <ld_word>
 800de7c:	4603      	mov	r3, r0
 800de7e:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800de80:	89fb      	ldrh	r3, [r7, #14]
 800de82:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800de86:	4293      	cmp	r3, r2
 800de88:	d10b      	bne.n	800dea2 <check_fs+0x5e>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	334c      	adds	r3, #76	@ 0x4c
 800de8e:	220b      	movs	r2, #11
 800de90:	4946      	ldr	r1, [pc, #280]	@ (800dfac <check_fs+0x168>)
 800de92:	4618      	mov	r0, r3
 800de94:	f014 f8d1 	bl	802203a <memcmp>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d101      	bne.n	800dea2 <check_fs+0x5e>
 800de9e:	2301      	movs	r3, #1
 800dea0:	e07f      	b.n	800dfa2 <check_fs+0x15e>
#endif
	b = fs->win[BS_JmpBoot];
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800dea8:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800deaa:	7b7b      	ldrb	r3, [r7, #13]
 800deac:	2beb      	cmp	r3, #235	@ 0xeb
 800deae:	d005      	beq.n	800debc <check_fs+0x78>
 800deb0:	7b7b      	ldrb	r3, [r7, #13]
 800deb2:	2be9      	cmp	r3, #233	@ 0xe9
 800deb4:	d002      	beq.n	800debc <check_fs+0x78>
 800deb6:	7b7b      	ldrb	r3, [r7, #13]
 800deb8:	2be8      	cmp	r3, #232	@ 0xe8
 800deba:	d16a      	bne.n	800df92 <check_fs+0x14e>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800debc:	89fb      	ldrh	r3, [r7, #14]
 800debe:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d10c      	bne.n	800dee0 <check_fs+0x9c>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	334c      	adds	r3, #76	@ 0x4c
 800deca:	3352      	adds	r3, #82	@ 0x52
 800decc:	2208      	movs	r2, #8
 800dece:	4938      	ldr	r1, [pc, #224]	@ (800dfb0 <check_fs+0x16c>)
 800ded0:	4618      	mov	r0, r3
 800ded2:	f014 f8b2 	bl	802203a <memcmp>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d101      	bne.n	800dee0 <check_fs+0x9c>
			return 0;	/* It is an FAT32 VBR */
 800dedc:	2300      	movs	r3, #0
 800dede:	e060      	b.n	800dfa2 <check_fs+0x15e>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	334c      	adds	r3, #76	@ 0x4c
 800dee4:	330b      	adds	r3, #11
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fc fd6d 	bl	800a9c6 <ld_word>
 800deec:	4603      	mov	r3, r0
 800deee:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800def6:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800def8:	897a      	ldrh	r2, [r7, #10]
 800defa:	897b      	ldrh	r3, [r7, #10]
 800defc:	3b01      	subs	r3, #1
 800defe:	4013      	ands	r3, r2
 800df00:	2b00      	cmp	r3, #0
 800df02:	d146      	bne.n	800df92 <check_fs+0x14e>
 800df04:	897b      	ldrh	r3, [r7, #10]
 800df06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df0a:	d342      	bcc.n	800df92 <check_fs+0x14e>
 800df0c:	897b      	ldrh	r3, [r7, #10]
 800df0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df12:	d83e      	bhi.n	800df92 <check_fs+0x14e>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800df14:	7b7b      	ldrb	r3, [r7, #13]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d03b      	beq.n	800df92 <check_fs+0x14e>
 800df1a:	7b7a      	ldrb	r2, [r7, #13]
 800df1c:	7b7b      	ldrb	r3, [r7, #13]
 800df1e:	3b01      	subs	r3, #1
 800df20:	4013      	ands	r3, r2
 800df22:	2b00      	cmp	r3, #0
 800df24:	d135      	bne.n	800df92 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	334c      	adds	r3, #76	@ 0x4c
 800df2a:	330e      	adds	r3, #14
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fc fd4a 	bl	800a9c6 <ld_word>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d02c      	beq.n	800df92 <check_fs+0x14e>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800df3e:	3b01      	subs	r3, #1
 800df40:	2b01      	cmp	r3, #1
 800df42:	d826      	bhi.n	800df92 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	334c      	adds	r3, #76	@ 0x4c
 800df48:	3311      	adds	r3, #17
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fc fd3b 	bl	800a9c6 <ld_word>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d01d      	beq.n	800df92 <check_fs+0x14e>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	334c      	adds	r3, #76	@ 0x4c
 800df5a:	3313      	adds	r3, #19
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7fc fd32 	bl	800a9c6 <ld_word>
 800df62:	4603      	mov	r3, r0
 800df64:	2b7f      	cmp	r3, #127	@ 0x7f
 800df66:	d809      	bhi.n	800df7c <check_fs+0x138>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	334c      	adds	r3, #76	@ 0x4c
 800df6c:	3320      	adds	r3, #32
 800df6e:	4618      	mov	r0, r3
 800df70:	f7fc fd42 	bl	800a9f8 <ld_dword>
 800df74:	4603      	mov	r3, r0
 800df76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df7a:	d30a      	bcc.n	800df92 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	334c      	adds	r3, #76	@ 0x4c
 800df80:	3316      	adds	r3, #22
 800df82:	4618      	mov	r0, r3
 800df84:	f7fc fd1f 	bl	800a9c6 <ld_word>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d001      	beq.n	800df92 <check_fs+0x14e>
				return 0;	/* It can be presumed an FAT VBR */
 800df8e:	2300      	movs	r3, #0
 800df90:	e007      	b.n	800dfa2 <check_fs+0x15e>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800df92:	89fb      	ldrh	r3, [r7, #14]
 800df94:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800df98:	4293      	cmp	r3, r2
 800df9a:	d101      	bne.n	800dfa0 <check_fs+0x15c>
 800df9c:	2302      	movs	r3, #2
 800df9e:	e000      	b.n	800dfa2 <check_fs+0x15e>
 800dfa0:	2303      	movs	r3, #3
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	08025680 	.word	0x08025680
 800dfb0:	0802568c 	.word	0x0802568c

0800dfb4 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b088      	sub	sp, #32
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7ff ff3f 	bl	800de44 <check_fs>
 800dfc6:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	2b02      	cmp	r3, #2
 800dfcc:	d007      	beq.n	800dfde <find_volume+0x2a>
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	d802      	bhi.n	800dfda <find_volume+0x26>
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d101      	bne.n	800dfde <find_volume+0x2a>
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	e045      	b.n	800e06a <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800dfde:	2300      	movs	r3, #0
 800dfe0:	61fb      	str	r3, [r7, #28]
 800dfe2:	e014      	b.n	800e00e <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	011b      	lsls	r3, r3, #4
 800dfee:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800dff2:	4413      	add	r3, r2
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fc fcff 	bl	800a9f8 <ld_dword>
 800dffa:	4602      	mov	r2, r0
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	3320      	adds	r3, #32
 800e002:	443b      	add	r3, r7
 800e004:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	3301      	adds	r3, #1
 800e00c:	61fb      	str	r3, [r7, #28]
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	2b03      	cmp	r3, #3
 800e012:	d9e7      	bls.n	800dfe4 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d002      	beq.n	800e020 <find_volume+0x6c>
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	3b01      	subs	r3, #1
 800e01e:	e000      	b.n	800e022 <find_volume+0x6e>
 800e020:	2300      	movs	r3, #0
 800e022:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	3320      	adds	r3, #32
 800e02a:	443b      	add	r3, r7
 800e02c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d00b      	beq.n	800e04c <find_volume+0x98>
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	3320      	adds	r3, #32
 800e03a:	443b      	add	r3, r7
 800e03c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800e040:	4619      	mov	r1, r3
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7ff fefe 	bl	800de44 <check_fs>
 800e048:	4603      	mov	r3, r0
 800e04a:	e000      	b.n	800e04e <find_volume+0x9a>
 800e04c:	2303      	movs	r3, #3
 800e04e:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d108      	bne.n	800e068 <find_volume+0xb4>
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d905      	bls.n	800e068 <find_volume+0xb4>
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	3301      	adds	r3, #1
 800e060:	61fb      	str	r3, [r7, #28]
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	2b03      	cmp	r3, #3
 800e066:	d9dd      	bls.n	800e024 <find_volume+0x70>
	return fmt;
 800e068:	69bb      	ldr	r3, [r7, #24]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3720      	adds	r7, #32
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
	...

0800e074 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800e074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e078:	b09a      	sub	sp, #104	@ 0x68
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	61f8      	str	r0, [r7, #28]
 800e07e:	61b9      	str	r1, [r7, #24]
 800e080:	4613      	mov	r3, r2
 800e082:	75fb      	strb	r3, [r7, #23]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	2200      	movs	r2, #0
 800e088:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e08a:	69f8      	ldr	r0, [r7, #28]
 800e08c:	f7ff fe92 	bl	800ddb4 <get_ldnumber>
 800e090:	64b8      	str	r0, [r7, #72]	@ 0x48
	if (vol < 0) return FR_INVALID_DRIVE;
 800e092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e094:	2b00      	cmp	r3, #0
 800e096:	da01      	bge.n	800e09c <mount_volume+0x28>
 800e098:	230b      	movs	r3, #11
 800e09a:	e327      	b.n	800e6ec <mount_volume+0x678>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800e09c:	4aa0      	ldr	r2, [pc, #640]	@ (800e320 <mount_volume+0x2ac>)
 800e09e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e0a4:	647b      	str	r3, [r7, #68]	@ 0x44
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800e0a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d101      	bne.n	800e0b0 <mount_volume+0x3c>
 800e0ac:	230c      	movs	r3, #12
 800e0ae:	e31d      	b.n	800e6ec <mount_volume+0x678>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e0b4:	f7fc ff0c 	bl	800aed0 <lock_volume>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <mount_volume+0x4e>
 800e0be:	230f      	movs	r3, #15
 800e0c0:	e314      	b.n	800e6ec <mount_volume+0x678>
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e0c8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ca:	f023 0301 	bic.w	r3, r3, #1
 800e0ce:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800e0d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d01a      	beq.n	800e10e <mount_volume+0x9a>
		stat = disk_status(fs->pdrv);
 800e0d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0da:	785b      	ldrb	r3, [r3, #1]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fc fbc7 	bl	800a870 <disk_status>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e0e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e0ec:	f003 0301 	and.w	r3, r3, #1
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d10c      	bne.n	800e10e <mount_volume+0x9a>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e0f4:	7dfb      	ldrb	r3, [r7, #23]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d007      	beq.n	800e10a <mount_volume+0x96>
 800e0fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e0fe:	f003 0304 	and.w	r3, r3, #4
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <mount_volume+0x96>
				return FR_WRITE_PROTECTED;
 800e106:	230a      	movs	r3, #10
 800e108:	e2f0      	b.n	800e6ec <mount_volume+0x678>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800e10a:	2300      	movs	r3, #0
 800e10c:	e2ee      	b.n	800e6ec <mount_volume+0x678>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800e10e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e110:	2200      	movs	r2, #0
 800e112:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800e114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e116:	785b      	ldrb	r3, [r3, #1]
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fc fbc4 	bl	800a8a6 <disk_initialize>
 800e11e:	4603      	mov	r3, r0
 800e120:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e124:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e128:	f003 0301 	and.w	r3, r3, #1
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d001      	beq.n	800e134 <mount_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e130:	2303      	movs	r3, #3
 800e132:	e2db      	b.n	800e6ec <mount_volume+0x678>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e134:	7dfb      	ldrb	r3, [r7, #23]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d007      	beq.n	800e14a <mount_volume+0xd6>
 800e13a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e13e:	f003 0304 	and.w	r3, r3, #4
 800e142:	2b00      	cmp	r3, #0
 800e144:	d001      	beq.n	800e14a <mount_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800e146:	230a      	movs	r3, #10
 800e148:	e2d0      	b.n	800e6ec <mount_volume+0x678>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800e14a:	2100      	movs	r1, #0
 800e14c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e14e:	f7ff ff31 	bl	800dfb4 <find_volume>
 800e152:	65b8      	str	r0, [r7, #88]	@ 0x58
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800e154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e156:	2b04      	cmp	r3, #4
 800e158:	d101      	bne.n	800e15e <mount_volume+0xea>
 800e15a:	2301      	movs	r3, #1
 800e15c:	e2c6      	b.n	800e6ec <mount_volume+0x678>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e15e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e160:	2b01      	cmp	r3, #1
 800e162:	d901      	bls.n	800e168 <mount_volume+0xf4>
 800e164:	230d      	movs	r3, #13
 800e166:	e2c1      	b.n	800e6ec <mount_volume+0x678>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800e168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e16a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e16c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 800e16e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e170:	2b01      	cmp	r3, #1
 800e172:	f040 813d 	bne.w	800e3f0 <mount_volume+0x37c>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800e176:	230b      	movs	r3, #11
 800e178:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e17a:	e002      	b.n	800e182 <mount_volume+0x10e>
 800e17c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e17e:	3301      	adds	r3, #1
 800e180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e184:	2b3f      	cmp	r3, #63	@ 0x3f
 800e186:	d806      	bhi.n	800e196 <mount_volume+0x122>
 800e188:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e18a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e18c:	4413      	add	r3, r2
 800e18e:	334c      	adds	r3, #76	@ 0x4c
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d0f2      	beq.n	800e17c <mount_volume+0x108>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800e196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e198:	2b3f      	cmp	r3, #63	@ 0x3f
 800e19a:	d801      	bhi.n	800e1a0 <mount_volume+0x12c>
 800e19c:	230d      	movs	r3, #13
 800e19e:	e2a5      	b.n	800e6ec <mount_volume+0x678>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800e1a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1a2:	334c      	adds	r3, #76	@ 0x4c
 800e1a4:	3368      	adds	r3, #104	@ 0x68
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fc fc0d 	bl	800a9c6 <ld_word>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1b2:	d001      	beq.n	800e1b8 <mount_volume+0x144>
 800e1b4:	230d      	movs	r3, #13
 800e1b6:	e299      	b.n	800e6ec <mount_volume+0x678>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800e1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ba:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e1be:	2b09      	cmp	r3, #9
 800e1c0:	d001      	beq.n	800e1c6 <mount_volume+0x152>
			return FR_NO_FILESYSTEM;
 800e1c2:	230d      	movs	r3, #13
 800e1c4:	e292      	b.n	800e6ec <mount_volume+0x678>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 800e1c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1c8:	334c      	adds	r3, #76	@ 0x4c
 800e1ca:	3348      	adds	r3, #72	@ 0x48
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7fc fc36 	bl	800aa3e <ld_qword>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e1d8:	2000      	movs	r0, #0
 800e1da:	60b9      	str	r1, [r7, #8]
 800e1dc:	60f8      	str	r0, [r7, #12]
 800e1de:	68b9      	ldr	r1, [r7, #8]
 800e1e0:	1851      	adds	r1, r2, r1
 800e1e2:	6039      	str	r1, [r7, #0]
 800e1e4:	68f9      	ldr	r1, [r7, #12]
 800e1e6:	eb43 0101 	adc.w	r1, r3, r1
 800e1ea:	6079      	str	r1, [r7, #4]
 800e1ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 800e1f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d301      	bcc.n	800e200 <mount_volume+0x18c>
 800e1fc:	230d      	movs	r3, #13
 800e1fe:	e275      	b.n	800e6ec <mount_volume+0x678>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800e200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e202:	334c      	adds	r3, #76	@ 0x4c
 800e204:	3354      	adds	r3, #84	@ 0x54
 800e206:	4618      	mov	r0, r3
 800e208:	f7fc fbf6 	bl	800a9f8 <ld_dword>
 800e20c:	4602      	mov	r2, r0
 800e20e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e210:	631a      	str	r2, [r3, #48]	@ 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800e212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e214:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e21a:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800e21c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e21e:	78db      	ldrb	r3, [r3, #3]
 800e220:	2b01      	cmp	r3, #1
 800e222:	d001      	beq.n	800e228 <mount_volume+0x1b4>
 800e224:	230d      	movs	r3, #13
 800e226:	e261      	b.n	800e6ec <mount_volume+0x678>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800e228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e22a:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800e22e:	461a      	mov	r2, r3
 800e230:	2301      	movs	r3, #1
 800e232:	4093      	lsls	r3, r2
 800e234:	b29a      	uxth	r2, r3
 800e236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e238:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 800e23a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e23c:	895b      	ldrh	r3, [r3, #10]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d101      	bne.n	800e246 <mount_volume+0x1d2>
 800e242:	230d      	movs	r3, #13
 800e244:	e252      	b.n	800e6ec <mount_volume+0x678>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800e246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e248:	334c      	adds	r3, #76	@ 0x4c
 800e24a:	335c      	adds	r3, #92	@ 0x5c
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fc fbd3 	bl	800a9f8 <ld_dword>
 800e252:	6338      	str	r0, [r7, #48]	@ 0x30
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800e254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e256:	4a33      	ldr	r2, [pc, #204]	@ (800e324 <mount_volume+0x2b0>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d901      	bls.n	800e260 <mount_volume+0x1ec>
 800e25c:	230d      	movs	r3, #13
 800e25e:	e245      	b.n	800e6ec <mount_volume+0x678>
		fs->n_fatent = nclst + 2;
 800e260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e262:	1c9a      	adds	r2, r3, #2
 800e264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e266:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800e268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e26a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e26c:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800e26e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e270:	334c      	adds	r3, #76	@ 0x4c
 800e272:	3358      	adds	r3, #88	@ 0x58
 800e274:	4618      	mov	r0, r3
 800e276:	f7fc fbbf 	bl	800a9f8 <ld_dword>
 800e27a:	4602      	mov	r2, r0
 800e27c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e27e:	441a      	add	r2, r3
 800e280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e282:	641a      	str	r2, [r3, #64]	@ 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800e284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e286:	334c      	adds	r3, #76	@ 0x4c
 800e288:	3350      	adds	r3, #80	@ 0x50
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7fc fbb4 	bl	800a9f8 <ld_dword>
 800e290:	4602      	mov	r2, r0
 800e292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e294:	441a      	add	r2, r3
 800e296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e298:	639a      	str	r2, [r3, #56]	@ 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800e29a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e29e:	2200      	movs	r2, #0
 800e2a0:	469a      	mov	sl, r3
 800e2a2:	4693      	mov	fp, r2
 800e2a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2a6:	895b      	ldrh	r3, [r3, #10]
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ac:	fb02 f303 	mul.w	r3, r2, r3
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	4698      	mov	r8, r3
 800e2b4:	4691      	mov	r9, r2
 800e2b6:	eb1a 0408 	adds.w	r4, sl, r8
 800e2ba:	eb4b 0509 	adc.w	r5, fp, r9
 800e2be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e2c2:	42a2      	cmp	r2, r4
 800e2c4:	41ab      	sbcs	r3, r5
 800e2c6:	d201      	bcs.n	800e2cc <mount_volume+0x258>
 800e2c8:	230d      	movs	r3, #13
 800e2ca:	e20f      	b.n	800e6ec <mount_volume+0x678>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800e2cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2ce:	334c      	adds	r3, #76	@ 0x4c
 800e2d0:	3360      	adds	r3, #96	@ 0x60
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7fc fb90 	bl	800a9f8 <ld_dword>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2dc:	63da      	str	r2, [r3, #60]	@ 0x3c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e2e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2e4:	657b      	str	r3, [r7, #84]	@ 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 800e2e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d120      	bne.n	800e32e <mount_volume+0x2ba>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 800e2ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2ee:	895b      	ldrh	r3, [r3, #10]
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d301      	bcc.n	800e2fc <mount_volume+0x288>
 800e2f8:	230d      	movs	r3, #13
 800e2fa:	e1f7      	b.n	800e6ec <mount_volume+0x678>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800e2fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e300:	4619      	mov	r1, r3
 800e302:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e304:	f7fd f888 	bl	800b418 <clst2sect>
 800e308:	4602      	mov	r2, r0
 800e30a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e30c:	4413      	add	r3, r2
 800e30e:	4619      	mov	r1, r3
 800e310:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e312:	f7fc ffe5 	bl	800b2e0 <move_window>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d005      	beq.n	800e328 <mount_volume+0x2b4>
 800e31c:	2301      	movs	r3, #1
 800e31e:	e1e5      	b.n	800e6ec <mount_volume+0x678>
 800e320:	240197c4 	.word	0x240197c4
 800e324:	7ffffffd 	.word	0x7ffffffd
				so++;
 800e328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e32a:	3301      	adds	r3, #1
 800e32c:	657b      	str	r3, [r7, #84]	@ 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800e32e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e332:	4413      	add	r3, r2
 800e334:	334c      	adds	r3, #76	@ 0x4c
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	2b81      	cmp	r3, #129	@ 0x81
 800e33a:	d005      	beq.n	800e348 <mount_volume+0x2d4>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800e33c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e33e:	3320      	adds	r3, #32
 800e340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e344:	64fb      	str	r3, [r7, #76]	@ 0x4c
			if (i == 0) {
 800e346:	e7ce      	b.n	800e2e6 <mount_volume+0x272>
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800e348:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 800e34a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e34c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800e350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e352:	3314      	adds	r3, #20
 800e354:	4413      	add	r3, r2
 800e356:	4618      	mov	r0, r3
 800e358:	f7fc fb4e 	bl	800a9f8 <ld_dword>
 800e35c:	6538      	str	r0, [r7, #80]	@ 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 800e35e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e360:	2b01      	cmp	r3, #1
 800e362:	d904      	bls.n	800e36e <mount_volume+0x2fa>
 800e364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e368:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d301      	bcc.n	800e372 <mount_volume+0x2fe>
 800e36e:	230d      	movs	r3, #13
 800e370:	e1bc      	b.n	800e6ec <mount_volume+0x678>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800e372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e378:	895b      	ldrh	r3, [r3, #10]
 800e37a:	4619      	mov	r1, r3
 800e37c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e37e:	3b02      	subs	r3, #2
 800e380:	fb01 f303 	mul.w	r3, r1, r3
 800e384:	441a      	add	r2, r3
 800e386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e388:	645a      	str	r2, [r3, #68]	@ 0x44
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800e38a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e38c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e38e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e390:	09db      	lsrs	r3, r3, #7
 800e392:	4413      	add	r3, r2
 800e394:	4619      	mov	r1, r3
 800e396:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e398:	f7fc ffa2 	bl	800b2e0 <move_window>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <mount_volume+0x332>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e1a2      	b.n	800e6ec <mount_volume+0x678>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800e3a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3a8:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800e3ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4413      	add	r3, r2
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fc fb1e 	bl	800a9f8 <ld_dword>
 800e3bc:	6278      	str	r0, [r7, #36]	@ 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800e3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c4:	d008      	beq.n	800e3d8 <mount_volume+0x364>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 800e3c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800e3cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d0da      	beq.n	800e38a <mount_volume+0x316>
 800e3d4:	230d      	movs	r3, #13
 800e3d6:	e189      	b.n	800e6ec <mount_volume+0x678>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800e3d8:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e3da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e3e0:	619a      	str	r2, [r3, #24]
 800e3e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3e4:	699a      	ldr	r2, [r3, #24]
 800e3e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3e8:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800e3ea:	2304      	movs	r3, #4
 800e3ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e3ee:	e168      	b.n	800e6c2 <mount_volume+0x64e>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e3f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3f2:	334c      	adds	r3, #76	@ 0x4c
 800e3f4:	330b      	adds	r3, #11
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fc fae5 	bl	800a9c6 <ld_word>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e402:	d001      	beq.n	800e408 <mount_volume+0x394>
 800e404:	230d      	movs	r3, #13
 800e406:	e171      	b.n	800e6ec <mount_volume+0x678>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e40a:	334c      	adds	r3, #76	@ 0x4c
 800e40c:	3316      	adds	r3, #22
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fc fad9 	bl	800a9c6 <ld_word>
 800e414:	4603      	mov	r3, r0
 800e416:	663b      	str	r3, [r7, #96]	@ 0x60
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e418:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d106      	bne.n	800e42c <mount_volume+0x3b8>
 800e41e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e420:	334c      	adds	r3, #76	@ 0x4c
 800e422:	3324      	adds	r3, #36	@ 0x24
 800e424:	4618      	mov	r0, r3
 800e426:	f7fc fae7 	bl	800a9f8 <ld_dword>
 800e42a:	6638      	str	r0, [r7, #96]	@ 0x60
		fs->fsize = fasize;
 800e42c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e42e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e430:	631a      	str	r2, [r3, #48]	@ 0x30

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e434:	f893 205c 	ldrb.w	r2, [r3, #92]	@ 0x5c
 800e438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e43a:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e43c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e43e:	78db      	ldrb	r3, [r3, #3]
 800e440:	2b01      	cmp	r3, #1
 800e442:	d005      	beq.n	800e450 <mount_volume+0x3dc>
 800e444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e446:	78db      	ldrb	r3, [r3, #3]
 800e448:	2b02      	cmp	r3, #2
 800e44a:	d001      	beq.n	800e450 <mount_volume+0x3dc>
 800e44c:	230d      	movs	r3, #13
 800e44e:	e14d      	b.n	800e6ec <mount_volume+0x678>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e452:	78db      	ldrb	r3, [r3, #3]
 800e454:	461a      	mov	r2, r3
 800e456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e458:	fb02 f303 	mul.w	r3, r2, r3
 800e45c:	663b      	str	r3, [r7, #96]	@ 0x60

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e45e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e460:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e464:	461a      	mov	r2, r3
 800e466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e468:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e46a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e46c:	895b      	ldrh	r3, [r3, #10]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d008      	beq.n	800e484 <mount_volume+0x410>
 800e472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e474:	895b      	ldrh	r3, [r3, #10]
 800e476:	461a      	mov	r2, r3
 800e478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e47a:	895b      	ldrh	r3, [r3, #10]
 800e47c:	3b01      	subs	r3, #1
 800e47e:	4013      	ands	r3, r2
 800e480:	2b00      	cmp	r3, #0
 800e482:	d001      	beq.n	800e488 <mount_volume+0x414>
 800e484:	230d      	movs	r3, #13
 800e486:	e131      	b.n	800e6ec <mount_volume+0x678>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e48a:	334c      	adds	r3, #76	@ 0x4c
 800e48c:	3311      	adds	r3, #17
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fc fa99 	bl	800a9c6 <ld_word>
 800e494:	4603      	mov	r3, r0
 800e496:	461a      	mov	r2, r3
 800e498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e49a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e49c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e49e:	891b      	ldrh	r3, [r3, #8]
 800e4a0:	f003 030f 	and.w	r3, r3, #15
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <mount_volume+0x43a>
 800e4aa:	230d      	movs	r3, #13
 800e4ac:	e11e      	b.n	800e6ec <mount_volume+0x678>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e4ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4b0:	334c      	adds	r3, #76	@ 0x4c
 800e4b2:	3313      	adds	r3, #19
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fc fa86 	bl	800a9c6 <ld_word>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	667b      	str	r3, [r7, #100]	@ 0x64
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e4be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d106      	bne.n	800e4d2 <mount_volume+0x45e>
 800e4c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4c6:	334c      	adds	r3, #76	@ 0x4c
 800e4c8:	3320      	adds	r3, #32
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fc fa94 	bl	800a9f8 <ld_dword>
 800e4d0:	6678      	str	r0, [r7, #100]	@ 0x64

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e4d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4d4:	334c      	adds	r3, #76	@ 0x4c
 800e4d6:	330e      	adds	r3, #14
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7fc fa74 	bl	800a9c6 <ld_word>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e4e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d101      	bne.n	800e4ec <mount_volume+0x478>
 800e4e8:	230d      	movs	r3, #13
 800e4ea:	e0ff      	b.n	800e6ec <mount_volume+0x678>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e4ec:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e4ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e4f0:	4413      	add	r3, r2
 800e4f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4f4:	8912      	ldrh	r2, [r2, #8]
 800e4f6:	0912      	lsrs	r2, r2, #4
 800e4f8:	b292      	uxth	r2, r2
 800e4fa:	4413      	add	r3, r2
 800e4fc:	637b      	str	r3, [r7, #52]	@ 0x34
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e4fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e502:	429a      	cmp	r2, r3
 800e504:	d201      	bcs.n	800e50a <mount_volume+0x496>
 800e506:	230d      	movs	r3, #13
 800e508:	e0f0      	b.n	800e6ec <mount_volume+0x678>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e50a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e50e:	1ad3      	subs	r3, r2, r3
 800e510:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e512:	8952      	ldrh	r2, [r2, #10]
 800e514:	fbb3 f3f2 	udiv	r3, r3, r2
 800e518:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d101      	bne.n	800e524 <mount_volume+0x4b0>
 800e520:	230d      	movs	r3, #13
 800e522:	e0e3      	b.n	800e6ec <mount_volume+0x678>
		fmt = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800e528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52a:	4a73      	ldr	r2, [pc, #460]	@ (800e6f8 <mount_volume+0x684>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d801      	bhi.n	800e534 <mount_volume+0x4c0>
 800e530:	2303      	movs	r3, #3
 800e532:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e536:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d801      	bhi.n	800e542 <mount_volume+0x4ce>
 800e53e:	2302      	movs	r3, #2
 800e540:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e544:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e548:	4293      	cmp	r3, r2
 800e54a:	d801      	bhi.n	800e550 <mount_volume+0x4dc>
 800e54c:	2301      	movs	r3, #1
 800e54e:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800e550:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e552:	2b00      	cmp	r3, #0
 800e554:	d101      	bne.n	800e55a <mount_volume+0x4e6>
 800e556:	230d      	movs	r3, #13
 800e558:	e0c8      	b.n	800e6ec <mount_volume+0x678>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55c:	1c9a      	adds	r2, r3, #2
 800e55e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e560:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800e562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e564:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e566:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e568:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e56a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e56c:	441a      	add	r2, r3
 800e56e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e570:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 800e572:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e576:	441a      	add	r2, r3
 800e578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e57a:	641a      	str	r2, [r3, #64]	@ 0x40
		if (fmt == FS_FAT32) {
 800e57c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e57e:	2b03      	cmp	r3, #3
 800e580:	d11e      	bne.n	800e5c0 <mount_volume+0x54c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e584:	334c      	adds	r3, #76	@ 0x4c
 800e586:	332a      	adds	r3, #42	@ 0x2a
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fc fa1c 	bl	800a9c6 <ld_word>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d001      	beq.n	800e598 <mount_volume+0x524>
 800e594:	230d      	movs	r3, #13
 800e596:	e0a9      	b.n	800e6ec <mount_volume+0x678>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e59a:	891b      	ldrh	r3, [r3, #8]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d001      	beq.n	800e5a4 <mount_volume+0x530>
 800e5a0:	230d      	movs	r3, #13
 800e5a2:	e0a3      	b.n	800e6ec <mount_volume+0x678>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e5a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5a6:	334c      	adds	r3, #76	@ 0x4c
 800e5a8:	332c      	adds	r3, #44	@ 0x2c
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fc fa24 	bl	800a9f8 <ld_dword>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5b4:	63da      	str	r2, [r3, #60]	@ 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e5b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ba:	009b      	lsls	r3, r3, #2
 800e5bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e5be:	e01e      	b.n	800e5fe <mount_volume+0x58a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800e5c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5c2:	891b      	ldrh	r3, [r3, #8]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d101      	bne.n	800e5cc <mount_volume+0x558>
 800e5c8:	230d      	movs	r3, #13
 800e5ca:	e08f      	b.n	800e6ec <mount_volume+0x678>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e5cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e5d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5d2:	441a      	add	r2, r3
 800e5d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5d6:	63da      	str	r2, [r3, #60]	@ 0x3c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e5d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e5da:	2b02      	cmp	r3, #2
 800e5dc:	d103      	bne.n	800e5e6 <mount_volume+0x572>
 800e5de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5e2:	005b      	lsls	r3, r3, #1
 800e5e4:	e00a      	b.n	800e5fc <mount_volume+0x588>
 800e5e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	005b      	lsls	r3, r3, #1
 800e5ee:	4413      	add	r3, r2
 800e5f0:	085a      	lsrs	r2, r3, #1
 800e5f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5f6:	f003 0301 	and.w	r3, r3, #1
 800e5fa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e5fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e5fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e604:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e608:	0a5b      	lsrs	r3, r3, #9
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d201      	bcs.n	800e612 <mount_volume+0x59e>
 800e60e:	230d      	movs	r3, #13
 800e610:	e06c      	b.n	800e6ec <mount_volume+0x678>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e614:	f04f 32ff 	mov.w	r2, #4294967295
 800e618:	619a      	str	r2, [r3, #24]
 800e61a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e61c:	699a      	ldr	r2, [r3, #24]
 800e61e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e620:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e624:	2280      	movs	r2, #128	@ 0x80
 800e626:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800e628:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e62a:	2b03      	cmp	r3, #3
 800e62c:	d149      	bne.n	800e6c2 <mount_volume+0x64e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e62e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e630:	334c      	adds	r3, #76	@ 0x4c
 800e632:	3330      	adds	r3, #48	@ 0x30
 800e634:	4618      	mov	r0, r3
 800e636:	f7fc f9c6 	bl	800a9c6 <ld_word>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d140      	bne.n	800e6c2 <mount_volume+0x64e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e642:	3301      	adds	r3, #1
 800e644:	4619      	mov	r1, r3
 800e646:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e648:	f7fc fe4a 	bl	800b2e0 <move_window>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d137      	bne.n	800e6c2 <mount_volume+0x64e>
		{
			fs->fsi_flag = 0;
 800e652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e654:	2200      	movs	r2, #0
 800e656:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800e658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e65a:	334c      	adds	r3, #76	@ 0x4c
 800e65c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e660:	4618      	mov	r0, r3
 800e662:	f7fc f9b0 	bl	800a9c6 <ld_word>
 800e666:	4603      	mov	r3, r0
 800e668:	461a      	mov	r2, r3
 800e66a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e66e:	429a      	cmp	r2, r3
 800e670:	d127      	bne.n	800e6c2 <mount_volume+0x64e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e674:	334c      	adds	r3, #76	@ 0x4c
 800e676:	4618      	mov	r0, r3
 800e678:	f7fc f9be 	bl	800a9f8 <ld_dword>
 800e67c:	4603      	mov	r3, r0
 800e67e:	4a1f      	ldr	r2, [pc, #124]	@ (800e6fc <mount_volume+0x688>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d11e      	bne.n	800e6c2 <mount_volume+0x64e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e686:	334c      	adds	r3, #76	@ 0x4c
 800e688:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7fc f9b3 	bl	800a9f8 <ld_dword>
 800e692:	4603      	mov	r3, r0
 800e694:	4a1a      	ldr	r2, [pc, #104]	@ (800e700 <mount_volume+0x68c>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d113      	bne.n	800e6c2 <mount_volume+0x64e>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e69a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e69c:	334c      	adds	r3, #76	@ 0x4c
 800e69e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fc f9a8 	bl	800a9f8 <ld_dword>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6ac:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6b0:	334c      	adds	r3, #76	@ 0x4c
 800e6b2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fc f99e 	bl	800a9f8 <ld_dword>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6c0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800e6c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e6c4:	b2da      	uxtb	r2, r3
 800e6c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800e6ca:	4b0e      	ldr	r3, [pc, #56]	@ (800e704 <mount_volume+0x690>)
 800e6cc:	881b      	ldrh	r3, [r3, #0]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e704 <mount_volume+0x690>)
 800e6d4:	801a      	strh	r2, [r3, #0]
 800e6d6:	4b0b      	ldr	r3, [pc, #44]	@ (800e704 <mount_volume+0x690>)
 800e6d8:	881a      	ldrh	r2, [r3, #0]
 800e6da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6dc:	80da      	strh	r2, [r3, #6]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800e6de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	61da      	str	r2, [r3, #28]
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
 800e6e4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e6e6:	f7fc fd9b 	bl	800b220 <clear_share>
#endif
	return FR_OK;
 800e6ea:	2300      	movs	r3, #0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3768      	adds	r7, #104	@ 0x68
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e6f6:	bf00      	nop
 800e6f8:	0ffffff5 	.word	0x0ffffff5
 800e6fc:	41615252 	.word	0x41615252
 800e700:	61417272 	.word	0x61417272
 800e704:	240197c8 	.word	0x240197c8

0800e708 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e712:	2309      	movs	r3, #9
 800e714:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d02f      	beq.n	800e77c <validate+0x74>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d02b      	beq.n	800e77c <validate+0x74>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d026      	beq.n	800e77c <validate+0x74>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	889a      	ldrh	r2, [r3, #4]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	88db      	ldrh	r3, [r3, #6]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d11f      	bne.n	800e77c <validate+0x74>
#if FF_FS_REENTRANT
		if (lock_volume(obj->fs, 0)) {	/* Take a grant to access the volume */
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2100      	movs	r1, #0
 800e742:	4618      	mov	r0, r3
 800e744:	f7fc fbc4 	bl	800aed0 <lock_volume>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d014      	beq.n	800e778 <validate+0x70>
			if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	785b      	ldrb	r3, [r3, #1]
 800e754:	4618      	mov	r0, r3
 800e756:	f7fc f88b 	bl	800a870 <disk_status>
 800e75a:	4603      	mov	r3, r0
 800e75c:	f003 0301 	and.w	r3, r3, #1
 800e760:	2b00      	cmp	r3, #0
 800e762:	d102      	bne.n	800e76a <validate+0x62>
				res = FR_OK;
 800e764:	2300      	movs	r3, #0
 800e766:	73fb      	strb	r3, [r7, #15]
 800e768:	e008      	b.n	800e77c <validate+0x74>
			} else {
				unlock_volume(obj->fs, FR_OK);	/* Invalidated volume, abort to access */
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2100      	movs	r1, #0
 800e770:	4618      	mov	r0, r3
 800e772:	f7fc fbdb 	bl	800af2c <unlock_volume>
 800e776:	e001      	b.n	800e77c <validate+0x74>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
 800e778:	230f      	movs	r3, #15
 800e77a:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800e77c:	7bfb      	ldrb	r3, [r7, #15]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d102      	bne.n	800e788 <validate+0x80>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	e000      	b.n	800e78a <validate+0x82>
 800e788:	2300      	movs	r3, #0
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	6013      	str	r3, [r2, #0]
	return res;
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e790:	4618      	mov	r0, r3
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b088      	sub	sp, #32
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800e7aa:	f107 0310 	add.w	r3, r7, #16
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7ff fb00 	bl	800ddb4 <get_ldnumber>
 800e7b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	da01      	bge.n	800e7c0 <f_mount+0x28>
 800e7bc:	230b      	movs	r3, #11
 800e7be:	e059      	b.n	800e874 <f_mount+0xdc>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800e7c0:	4a2e      	ldr	r2, [pc, #184]	@ (800e87c <f_mount+0xe4>)
 800e7c2:	69fb      	ldr	r3, [r7, #28]
 800e7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d00d      	beq.n	800e7ec <f_mount+0x54>
		FatFs[vol] = 0;
 800e7d0:	4a2a      	ldr	r2, [pc, #168]	@ (800e87c <f_mount+0xe4>)
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if FF_FS_LOCK
		clear_share(cfs);
 800e7da:	69b8      	ldr	r0, [r7, #24]
 800e7dc:	f7fc fd20 	bl	800b220 <clear_share>
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
 800e7e0:	69f8      	ldr	r0, [r7, #28]
 800e7e2:	f001 feb7 	bl	8010554 <ff_mutex_delete>
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800e7e6:	69bb      	ldr	r3, [r7, #24]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d02a      	beq.n	800e848 <f_mount+0xb0>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	69fa      	ldr	r2, [r7, #28]
 800e7f6:	b2d2      	uxtb	r2, r2
 800e7f8:	705a      	strb	r2, [r3, #1]
#if FF_FS_REENTRANT				/* Create a volume mutex */
		fs->ldrv = (BYTE)vol;	/* Owner volume ID */
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	69fa      	ldr	r2, [r7, #28]
 800e7fe:	b2d2      	uxtb	r2, r2
 800e800:	709a      	strb	r2, [r3, #2]
		if (!ff_mutex_create(vol)) return FR_INT_ERR;
 800e802:	69f8      	ldr	r0, [r7, #28]
 800e804:	f001 fe8a 	bl	801051c <ff_mutex_create>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d101      	bne.n	800e812 <f_mount+0x7a>
 800e80e:	2302      	movs	r3, #2
 800e810:	e030      	b.n	800e874 <f_mount+0xdc>
#if FF_FS_LOCK
		if (SysLock == 0) {		/* Create a system mutex if needed */
 800e812:	4b1b      	ldr	r3, [pc, #108]	@ (800e880 <f_mount+0xe8>)
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	b2db      	uxtb	r3, r3
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d10d      	bne.n	800e838 <f_mount+0xa0>
			if (!ff_mutex_create(FF_VOLUMES)) {
 800e81c:	2001      	movs	r0, #1
 800e81e:	f001 fe7d 	bl	801051c <ff_mutex_create>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d104      	bne.n	800e832 <f_mount+0x9a>
				ff_mutex_delete(vol);
 800e828:	69f8      	ldr	r0, [r7, #28]
 800e82a:	f001 fe93 	bl	8010554 <ff_mutex_delete>
				return FR_INT_ERR;
 800e82e:	2302      	movs	r3, #2
 800e830:	e020      	b.n	800e874 <f_mount+0xdc>
			}
			SysLock = 1;		/* System mutex is ready */
 800e832:	4b13      	ldr	r3, [pc, #76]	@ (800e880 <f_mount+0xe8>)
 800e834:	2201      	movs	r2, #1
 800e836:	701a      	strb	r2, [r3, #0]
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800e83e:	68fa      	ldr	r2, [r7, #12]
 800e840:	490e      	ldr	r1, [pc, #56]	@ (800e87c <f_mount+0xe4>)
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800e848:	79fb      	ldrb	r3, [r7, #7]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d101      	bne.n	800e852 <f_mount+0xba>
 800e84e:	2300      	movs	r3, #0
 800e850:	e010      	b.n	800e874 <f_mount+0xdc>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e852:	f107 010c 	add.w	r1, r7, #12
 800e856:	f107 0308 	add.w	r3, r7, #8
 800e85a:	2200      	movs	r2, #0
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7ff fc09 	bl	800e074 <mount_volume>
 800e862:	4603      	mov	r3, r0
 800e864:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	7dfa      	ldrb	r2, [r7, #23]
 800e86a:	4611      	mov	r1, r2
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7fc fb5d 	bl	800af2c <unlock_volume>
 800e872:	7dfb      	ldrb	r3, [r7, #23]
}
 800e874:	4618      	mov	r0, r3
 800e876:	3720      	adds	r7, #32
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	240197c4 	.word	0x240197c4
 800e880:	2401980c 	.word	0x2401980c

0800e884 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800e884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e888:	f2ad 4dfc 	subw	sp, sp, #1276	@ 0x4fc
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e892:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e896:	6018      	str	r0, [r3, #0]
 800e898:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e89c:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800e8a0:	6019      	str	r1, [r3, #0]
 800e8a2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e8a6:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e8aa:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e8ac:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e8b0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d101      	bne.n	800e8be <f_open+0x3a>
 800e8ba:	2309      	movs	r3, #9
 800e8bc:	e386      	b.n	800efcc <f_open+0x748>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800e8be:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e8c2:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e8c6:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800e8ca:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800e8ce:	7812      	ldrb	r2, [r2, #0]
 800e8d0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e8d4:	701a      	strb	r2, [r3, #0]
	res = mount_volume(&path, &fs, mode);
 800e8d6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e8da:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e8de:	781a      	ldrb	r2, [r3, #0]
 800e8e0:	f207 4184 	addw	r1, r7, #1156	@ 0x484
 800e8e4:	f107 0318 	add.w	r3, r7, #24
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7ff fbc3 	bl	800e074 <mount_volume>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
	if (res == FR_OK) {
 800e8f4:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f040 8352 	bne.w	800efa2 <f_open+0x71e>
		dj.obj.fs = fs;
 800e8fe:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e902:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
		INIT_NAMBUF(fs);
 800e906:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e90a:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 800e90e:	60da      	str	r2, [r3, #12]
 800e910:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e914:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e918:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e91a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e91e:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e928:	4611      	mov	r1, r2
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7ff f94a 	bl	800dbc4 <follow_path>
 800e930:	4603      	mov	r3, r0
 800e932:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800e936:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d11c      	bne.n	800e978 <f_open+0xf4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e93e:	f897 34d3 	ldrb.w	r3, [r7, #1235]	@ 0x4d3
 800e942:	b25b      	sxtb	r3, r3
 800e944:	2b00      	cmp	r3, #0
 800e946:	da03      	bge.n	800e950 <f_open+0xcc>
				res = FR_INVALID_NAME;
 800e948:	2306      	movs	r3, #6
 800e94a:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800e94e:	e013      	b.n	800e978 <f_open+0xf4>
			}
#if FF_FS_LOCK
			else {
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 800e950:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e954:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	bf8c      	ite	hi
 800e95e:	2301      	movhi	r3, #1
 800e960:	2300      	movls	r3, #0
 800e962:	b2db      	uxtb	r3, r3
 800e964:	461a      	mov	r2, r3
 800e966:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e96a:	4611      	mov	r1, r2
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7fc fb0f 	bl	800af90 <chk_share>
 800e972:	4603      	mov	r3, r0
 800e974:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e978:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e97c:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	f003 031c 	and.w	r3, r3, #28
 800e986:	2b00      	cmp	r3, #0
 800e988:	f000 811d 	beq.w	800ebc6 <f_open+0x342>
			if (res != FR_OK) {					/* No file, create new */
 800e98c:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e990:	2b00      	cmp	r3, #0
 800e992:	d01f      	beq.n	800e9d4 <f_open+0x150>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e994:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e998:	2b04      	cmp	r3, #4
 800e99a:	d10e      	bne.n	800e9ba <f_open+0x136>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e99c:	f7fc fb54 	bl	800b048 <enq_share>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d006      	beq.n	800e9b4 <f_open+0x130>
 800e9a6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fe fb68 	bl	800d080 <dir_register>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	e000      	b.n	800e9b6 <f_open+0x132>
 800e9b4:	2312      	movs	r3, #18
 800e9b6:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e9ba:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e9be:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e9c2:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800e9c6:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800e9ca:	7812      	ldrb	r2, [r2, #0]
 800e9cc:	f042 0208 	orr.w	r2, r2, #8
 800e9d0:	701a      	strb	r2, [r3, #0]
 800e9d2:	e015      	b.n	800ea00 <f_open+0x17c>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e9d4:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800e9d8:	f003 0311 	and.w	r3, r3, #17
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d003      	beq.n	800e9e8 <f_open+0x164>
					res = FR_DENIED;
 800e9e0:	2307      	movs	r3, #7
 800e9e2:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800e9e6:	e00b      	b.n	800ea00 <f_open+0x17c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e9e8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e9ec:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	f003 0304 	and.w	r3, r3, #4
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d002      	beq.n	800ea00 <f_open+0x17c>
 800e9fa:	2308      	movs	r3, #8
 800e9fc:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800ea00:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f040 80fe 	bne.w	800ec06 <f_open+0x382>
 800ea0a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea0e:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	f003 0308 	and.w	r3, r3, #8
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f000 80f4 	beq.w	800ec06 <f_open+0x382>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800ea1e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	2b04      	cmp	r3, #4
 800ea26:	d16f      	bne.n	800eb08 <f_open+0x284>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800ea28:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800ea2c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea30:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 800ea38:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800ea3c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea40:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4619      	mov	r1, r3
 800ea48:	4610      	mov	r0, r2
 800ea4a:	f7fd fffb 	bl	800ca44 <init_alloc_info>
					/* Set directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 800ea4e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ea52:	691b      	ldr	r3, [r3, #16]
 800ea54:	3302      	adds	r3, #2
 800ea56:	221e      	movs	r2, #30
 800ea58:	2100      	movs	r1, #0
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f013 fb17 	bl	802208e <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 800ea60:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ea64:	691b      	ldr	r3, [r3, #16]
 800ea66:	3326      	adds	r3, #38	@ 0x26
 800ea68:	221a      	movs	r2, #26
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f013 fb0e 	bl	802208e <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 800ea72:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	3304      	adds	r3, #4
 800ea7a:	2220      	movs	r2, #32
 800ea7c:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 800ea7e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ea82:	691b      	ldr	r3, [r3, #16]
 800ea84:	f103 0408 	add.w	r4, r3, #8
 800ea88:	f7fb ff95 	bl	800a9b6 <get_fattime>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	4619      	mov	r1, r3
 800ea90:	4620      	mov	r0, r4
 800ea92:	f7fc f8ca 	bl	800ac2a <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800ea96:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	3321      	adds	r3, #33	@ 0x21
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800eaa2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fe f82e 	bl	800cb08 <store_xdir>
 800eaac:	4603      	mov	r3, r0
 800eaae:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 800eab2:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	f040 80a5 	bne.w	800ec06 <f_open+0x382>
 800eabc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eac0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	689b      	ldr	r3, [r3, #8]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	f000 809c 	beq.w	800ec06 <f_open+0x382>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800eace:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ead2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ead6:	6818      	ldr	r0, [r3, #0]
 800ead8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eadc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	689b      	ldr	r3, [r3, #8]
 800eae4:	2200      	movs	r2, #0
 800eae6:	4619      	mov	r1, r3
 800eae8:	f7fd f810 	bl	800bb0c <remove_chain>
 800eaec:	4603      	mov	r3, r0
 800eaee:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800eaf2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eaf6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	689a      	ldr	r2, [r3, #8]
 800eafe:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eb02:	3a01      	subs	r2, #1
 800eb04:	615a      	str	r2, [r3, #20]
 800eb06:	e07e      	b.n	800ec06 <f_open+0x382>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800eb08:	f7fb ff55 	bl	800a9b6 <get_fattime>
 800eb0c:	f8c7 04e4 	str.w	r0, [r7, #1252]	@ 0x4e4
					st_dword(dj.dir + DIR_CrtTime, tm);
 800eb10:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800eb14:	330e      	adds	r3, #14
 800eb16:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fc f885 	bl	800ac2a <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800eb20:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800eb24:	3316      	adds	r3, #22
 800eb26:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7fc f87d 	bl	800ac2a <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800eb30:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eb34:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800eb38:	4611      	mov	r1, r2
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7fd fc16 	bl	800c36c <ld_clust>
 800eb40:	f8c7 04e0 	str.w	r0, [r7, #1248]	@ 0x4e0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eb44:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800eb48:	330b      	adds	r3, #11
 800eb4a:	2220      	movs	r2, #32
 800eb4c:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eb4e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eb52:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 800eb56:	2200      	movs	r2, #0
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7fd fc26 	bl	800c3aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eb5e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800eb62:	331c      	adds	r3, #28
 800eb64:	2100      	movs	r1, #0
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7fc f85f 	bl	800ac2a <st_dword>
					fs->wflag = 1;
 800eb6c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eb70:	2201      	movs	r2, #1
 800eb72:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800eb74:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d044      	beq.n	800ec06 <f_open+0x382>
						sc = fs->winsect;
 800eb7c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eb80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb82:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
						res = remove_chain(&dj.obj, cl, 0);
 800eb86:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	@ 0x4e0
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fc ffbb 	bl	800bb0c <remove_chain>
 800eb96:	4603      	mov	r3, r0
 800eb98:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
						if (res == FR_OK) {
 800eb9c:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d130      	bne.n	800ec06 <f_open+0x382>
							res = move_window(fs, sc);
 800eba4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eba8:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	@ 0x4dc
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fc fb97 	bl	800b2e0 <move_window>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ebb8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ebbc:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 800ebc0:	3a01      	subs	r2, #1
 800ebc2:	615a      	str	r2, [r3, #20]
 800ebc4:	e01f      	b.n	800ec06 <f_open+0x382>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800ebc6:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d11b      	bne.n	800ec06 <f_open+0x382>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800ebce:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800ebd2:	f003 0310 	and.w	r3, r3, #16
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d003      	beq.n	800ebe2 <f_open+0x35e>
					res = FR_NO_FILE;
 800ebda:	2304      	movs	r3, #4
 800ebdc:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800ebe0:	e011      	b.n	800ec06 <f_open+0x382>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800ebe2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ebe6:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	f003 0302 	and.w	r3, r3, #2
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d008      	beq.n	800ec06 <f_open+0x382>
 800ebf4:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800ebf8:	f003 0301 	and.w	r3, r3, #1
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d002      	beq.n	800ec06 <f_open+0x382>
						res = FR_DENIED;
 800ec00:	2307      	movs	r3, #7
 800ec02:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					}
				}
			}
		}
		if (res == FR_OK) {
 800ec06:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d148      	bne.n	800eca0 <f_open+0x41c>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800ec0e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec12:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	f003 0308 	and.w	r3, r3, #8
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00b      	beq.n	800ec38 <f_open+0x3b4>
 800ec20:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec24:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800ec28:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800ec2c:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800ec30:	7812      	ldrb	r2, [r2, #0]
 800ec32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ec36:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ec38:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ec3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ec3e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec42:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800ec4a:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800ec4e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec52:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	64da      	str	r2, [r3, #76]	@ 0x4c
#if FF_FS_LOCK
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800ec5a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec5e:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	bf8c      	ite	hi
 800ec68:	2301      	movhi	r3, #1
 800ec6a:	2300      	movls	r3, #0
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	461a      	mov	r2, r3
 800ec70:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800ec74:	4611      	mov	r1, r2
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fc fa08 	bl	800b08c <inc_share>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec82:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 800ec8a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec8e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d102      	bne.n	800eca0 <f_open+0x41c>
 800ec9a:	2302      	movs	r3, #2
 800ec9c:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800eca0:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f040 817c 	bne.w	800efa2 <f_open+0x71e>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ecaa:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	2b04      	cmp	r3, #4
 800ecb2:	d12b      	bne.n	800ed0c <f_open+0x488>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800ecb4:	f8d7 2490 	ldr.w	r2, [r7, #1168]	@ 0x490
 800ecb8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ecbc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800ecc4:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800ecc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eccc:	4613      	mov	r3, r2
 800ecce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ecd2:	f897 248f 	ldrb.w	r2, [r7, #1167]	@ 0x48f
 800ecd6:	431a      	orrs	r2, r3
 800ecd8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ecdc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800ece4:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 800ece8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ecec:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 800ecf4:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800ecf8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ecfc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4619      	mov	r1, r3
 800ed04:	4610      	mov	r0, r2
 800ed06:	f7fd fe9d 	bl	800ca44 <init_alloc_info>
 800ed0a:	e021      	b.n	800ed50 <f_open+0x4cc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ed0c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ed10:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800ed14:	4611      	mov	r1, r2
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fd fb28 	bl	800c36c <ld_clust>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed22:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ed2a:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800ed2e:	331c      	adds	r3, #28
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7fb fe61 	bl	800a9f8 <ld_dword>
 800ed36:	4603      	mov	r3, r0
 800ed38:	2200      	movs	r2, #0
 800ed3a:	60bb      	str	r3, [r7, #8]
 800ed3c:	60fa      	str	r2, [r7, #12]
 800ed3e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed42:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ed4c:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
 800ed50:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed54:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 800ed5e:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800ed62:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed66:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ed6e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ed72:	88da      	ldrh	r2, [r3, #6]
 800ed74:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed78:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 800ed80:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed84:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800ed8e:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800ed92:	7812      	ldrb	r2, [r2, #0]
 800ed94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 800ed98:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed9c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2200      	movs	r2, #0
 800eda4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 800eda8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800edac:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2200      	movs	r2, #0
 800edb4:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
 800edb6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800edba:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800edbe:	6819      	ldr	r1, [r3, #0]
 800edc0:	f04f 0200 	mov.w	r2, #0
 800edc4:	f04f 0300 	mov.w	r3, #0
 800edc8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800edcc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800edd0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	3354      	adds	r3, #84	@ 0x54
 800edd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eddc:	2100      	movs	r1, #0
 800edde:	4618      	mov	r0, r3
 800ede0:	f013 f955 	bl	802208e <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ede4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ede8:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	f003 0320 	and.w	r3, r3, #32
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f000 80d5 	beq.w	800efa2 <f_open+0x71e>
 800edf8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800edfc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ee06:	4313      	orrs	r3, r2
 800ee08:	f000 80cb 	beq.w	800efa2 <f_open+0x71e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ee0c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ee10:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ee1a:	f507 619f 	add.w	r1, r7, #1272	@ 0x4f8
 800ee1e:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800ee22:	6809      	ldr	r1, [r1, #0]
 800ee24:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ee28:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ee2c:	895b      	ldrh	r3, [r3, #10]
 800ee2e:	025b      	lsls	r3, r3, #9
 800ee30:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ee34:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ee38:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	689b      	ldr	r3, [r3, #8]
 800ee40:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee44:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ee48:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ee52:	f507 619d 	add.w	r1, r7, #1256	@ 0x4e8
 800ee56:	e9c1 2300 	strd	r2, r3, [r1]
 800ee5a:	e02e      	b.n	800eeba <f_open+0x636>
					clst = get_fat(&fp->obj, clst);
 800ee5c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ee60:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	@ 0x4f0
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7fc faf4 	bl	800b458 <get_fat>
 800ee70:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
					if (clst <= 1) res = FR_INT_ERR;
 800ee74:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d802      	bhi.n	800ee82 <f_open+0x5fe>
 800ee7c:	2302      	movs	r3, #2
 800ee7e:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ee82:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800ee86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee8a:	d102      	bne.n	800ee92 <f_open+0x60e>
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee92:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800ee96:	2200      	movs	r2, #0
 800ee98:	461d      	mov	r5, r3
 800ee9a:	4616      	mov	r6, r2
 800ee9c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800eea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea4:	1b51      	subs	r1, r2, r5
 800eea6:	6039      	str	r1, [r7, #0]
 800eea8:	eb63 0306 	sbc.w	r3, r3, r6
 800eeac:	607b      	str	r3, [r7, #4]
 800eeae:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 800eeb2:	e9d7 3400 	ldrd	r3, r4, [r7]
 800eeb6:	e9c2 3400 	strd	r3, r4, [r2]
 800eeba:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d10c      	bne.n	800eedc <f_open+0x658>
 800eec2:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800eec6:	2200      	movs	r2, #0
 800eec8:	469a      	mov	sl, r3
 800eeca:	4693      	mov	fp, r2
 800eecc:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800eed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed4:	4592      	cmp	sl, r2
 800eed6:	eb7b 0303 	sbcs.w	r3, fp, r3
 800eeda:	d3bf      	bcc.n	800ee5c <f_open+0x5d8>
				}
				fp->clust = clst;
 800eedc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eee0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	@ 0x4f0
 800eeea:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800eeec:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d149      	bne.n	800ef88 <f_open+0x704>
 800eef4:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800eef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefc:	f3c2 0808 	ubfx	r8, r2, #0, #9
 800ef00:	f04f 0900 	mov.w	r9, #0
 800ef04:	ea58 0309 	orrs.w	r3, r8, r9
 800ef08:	d03e      	beq.n	800ef88 <f_open+0x704>
					sc = clst2sect(fs, clst);
 800ef0a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ef0e:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	@ 0x4f0
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fc fa80 	bl	800b418 <clst2sect>
 800ef18:	f8c7 04dc 	str.w	r0, [r7, #1244]	@ 0x4dc
					if (sc == 0) {
 800ef1c:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d103      	bne.n	800ef2c <f_open+0x6a8>
						res = FR_INT_ERR;
 800ef24:	2302      	movs	r3, #2
 800ef26:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800ef2a:	e02d      	b.n	800ef88 <f_open+0x704>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ef2c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800ef30:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef34:	f04f 0200 	mov.w	r2, #0
 800ef38:	f04f 0300 	mov.w	r3, #0
 800ef3c:	0a42      	lsrs	r2, r0, #9
 800ef3e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ef42:	0a4b      	lsrs	r3, r1, #9
 800ef44:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 800ef48:	441a      	add	r2, r3
 800ef4a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ef4e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	645a      	str	r2, [r3, #68]	@ 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ef56:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ef5a:	7858      	ldrb	r0, [r3, #1]
 800ef5c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ef60:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ef6a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ef6e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ef76:	2301      	movs	r3, #1
 800ef78:	f7fb fcbe 	bl	800a8f8 <disk_read>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d002      	beq.n	800ef88 <f_open+0x704>
 800ef82:	2301      	movs	r3, #1
 800ef84:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#endif
					}
				}
#if FF_FS_LOCK
				if (res != FR_OK) dec_share(fp->obj.lockid); /* Decrement file open counter if seek failed */
 800ef88:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d008      	beq.n	800efa2 <f_open+0x71e>
 800ef90:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ef94:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fc f903 	bl	800b1a8 <dec_share>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800efa2:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d006      	beq.n	800efb8 <f_open+0x734>
 800efaa:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800efae:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2200      	movs	r2, #0
 800efb6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800efb8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800efbc:	f897 24f7 	ldrb.w	r2, [r7, #1271]	@ 0x4f7
 800efc0:	4611      	mov	r1, r2
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fb ffb2 	bl	800af2c <unlock_volume>
 800efc8:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
}
 800efcc:	4618      	mov	r0, r3
 800efce:	f207 47fc 	addw	r7, r7, #1276	@ 0x4fc
 800efd2:	46bd      	mov	sp, r7
 800efd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800efd8 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800efd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efdc:	b095      	sub	sp, #84	@ 0x54
 800efde:	af00      	add	r7, sp, #0
 800efe0:	61f8      	str	r0, [r7, #28]
 800efe2:	61b9      	str	r1, [r7, #24]
 800efe4:	617a      	str	r2, [r7, #20]
 800efe6:	613b      	str	r3, [r7, #16]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	2200      	movs	r2, #0
 800eff0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800eff8:	4611      	mov	r1, r2
 800effa:	4618      	mov	r0, r3
 800effc:	f7ff fb84 	bl	800e708 <validate>
 800f000:	4603      	mov	r3, r0
 800f002:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f006:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d108      	bne.n	800f020 <f_read+0x48>
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f014:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800f018:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d009      	beq.n	800f034 <f_read+0x5c>
 800f020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f022:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800f026:	4611      	mov	r1, r2
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fb ff7f 	bl	800af2c <unlock_volume>
 800f02e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f032:	e173      	b.n	800f31c <f_read+0x344>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f03a:	f003 0301 	and.w	r3, r3, #1
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d106      	bne.n	800f050 <f_read+0x78>
 800f042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f044:	2107      	movs	r1, #7
 800f046:	4618      	mov	r0, r3
 800f048:	f7fb ff70 	bl	800af2c <unlock_volume>
 800f04c:	2307      	movs	r3, #7
 800f04e:	e165      	b.n	800f31c <f_read+0x344>
	remain = fp->obj.objsize - fp->fptr;
 800f050:	69fb      	ldr	r3, [r7, #28]
 800f052:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f05c:	1a86      	subs	r6, r0, r2
 800f05e:	603e      	str	r6, [r7, #0]
 800f060:	eb61 0303 	sbc.w	r3, r1, r3
 800f064:	607b      	str	r3, [r7, #4]
 800f066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f06a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	2200      	movs	r2, #0
 800f072:	469a      	mov	sl, r3
 800f074:	4693      	mov	fp, r2
 800f076:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800f07a:	4552      	cmp	r2, sl
 800f07c:	eb73 030b 	sbcs.w	r3, r3, fp
 800f080:	f080 8142 	bcs.w	800f308 <f_read+0x330>
 800f084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f086:	617b      	str	r3, [r7, #20]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800f088:	e13e      	b.n	800f308 <f_read+0x330>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f08a:	69fb      	ldr	r3, [r7, #28]
 800f08c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f090:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800f094:	2500      	movs	r5, #0
 800f096:	ea54 0305 	orrs.w	r3, r4, r5
 800f09a:	f040 80f7 	bne.w	800f28c <f_read+0x2b4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f0a4:	f04f 0200 	mov.w	r2, #0
 800f0a8:	f04f 0300 	mov.w	r3, #0
 800f0ac:	0a42      	lsrs	r2, r0, #9
 800f0ae:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f0b2:	0a4b      	lsrs	r3, r1, #9
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b6:	895b      	ldrh	r3, [r3, #10]
 800f0b8:	3b01      	subs	r3, #1
 800f0ba:	4013      	ands	r3, r2
 800f0bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800f0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d13c      	bne.n	800f13e <f_read+0x166>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	d103      	bne.n	800f0d6 <f_read+0xfe>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f0ce:	69fb      	ldr	r3, [r7, #28]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f0d4:	e013      	b.n	800f0fe <f_read+0x126>
				} else {						/* Middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d007      	beq.n	800f0ee <f_read+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f0de:	69fb      	ldr	r3, [r7, #28]
 800f0e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f0e4:	69f8      	ldr	r0, [r7, #28]
 800f0e6:	f7fc ff2e 	bl	800bf46 <clmt_clust>
 800f0ea:	64b8      	str	r0, [r7, #72]	@ 0x48
 800f0ec:	e007      	b.n	800f0fe <f_read+0x126>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f0ee:	69fa      	ldr	r2, [r7, #28]
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	4610      	mov	r0, r2
 800f0f8:	f7fc f9ae 	bl	800b458 <get_fat>
 800f0fc:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f0fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f100:	2b01      	cmp	r3, #1
 800f102:	d80a      	bhi.n	800f11a <f_read+0x142>
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	2202      	movs	r2, #2
 800f108:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10e:	2102      	movs	r1, #2
 800f110:	4618      	mov	r0, r3
 800f112:	f7fb ff0b 	bl	800af2c <unlock_volume>
 800f116:	2302      	movs	r3, #2
 800f118:	e100      	b.n	800f31c <f_read+0x344>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f11a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f120:	d10a      	bne.n	800f138 <f_read+0x160>
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	2201      	movs	r2, #1
 800f126:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f12c:	2101      	movs	r1, #1
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fb fefc 	bl	800af2c <unlock_volume>
 800f134:	2301      	movs	r3, #1
 800f136:	e0f1      	b.n	800f31c <f_read+0x344>
				fp->clust = clst;				/* Update current cluster */
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f13c:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800f13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f144:	4619      	mov	r1, r3
 800f146:	4610      	mov	r0, r2
 800f148:	f7fc f966 	bl	800b418 <clst2sect>
 800f14c:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800f14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10a      	bne.n	800f16a <f_read+0x192>
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	2202      	movs	r2, #2
 800f158:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f15e:	2102      	movs	r1, #2
 800f160:	4618      	mov	r0, r3
 800f162:	f7fb fee3 	bl	800af2c <unlock_volume>
 800f166:	2302      	movs	r3, #2
 800f168:	e0d8      	b.n	800f31c <f_read+0x344>
			sect += csect;
 800f16a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f16e:	4413      	add	r3, r2
 800f170:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	0a5b      	lsrs	r3, r3, #9
 800f176:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800f178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d040      	beq.n	800f200 <f_read+0x228>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f17e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f182:	4413      	add	r3, r2
 800f184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f186:	8952      	ldrh	r2, [r2, #10]
 800f188:	4293      	cmp	r3, r2
 800f18a:	d905      	bls.n	800f198 <f_read+0x1c0>
					cc = fs->csize - csect;
 800f18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18e:	895b      	ldrh	r3, [r3, #10]
 800f190:	461a      	mov	r2, r3
 800f192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f194:	1ad3      	subs	r3, r2, r3
 800f196:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19a:	7858      	ldrb	r0, [r3, #1]
 800f19c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f19e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f1a2:	f7fb fba9 	bl	800a8f8 <disk_read>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d00a      	beq.n	800f1c2 <f_read+0x1ea>
 800f1ac:	69fb      	ldr	r3, [r7, #28]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b6:	2101      	movs	r1, #1
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7fb feb7 	bl	800af2c <unlock_volume>
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e0ac      	b.n	800f31c <f_read+0x344>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f1c8:	b25b      	sxtb	r3, r3
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	da14      	bge.n	800f1f8 <f_read+0x220>
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1d4:	1ad3      	subs	r3, r2, r3
 800f1d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d90d      	bls.n	800f1f8 <f_read+0x220>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e2:	1ad3      	subs	r3, r2, r3
 800f1e4:	025b      	lsls	r3, r3, #9
 800f1e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f1e8:	18d0      	adds	r0, r2, r3
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	3354      	adds	r3, #84	@ 0x54
 800f1ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	f012 fff5 	bl	80221e2 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f1f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1fa:	025b      	lsls	r3, r3, #9
 800f1fc:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800f1fe:	e063      	b.n	800f2c8 <f_read+0x2f0>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f204:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f206:	429a      	cmp	r2, r3
 800f208:	d03d      	beq.n	800f286 <f_read+0x2ae>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f210:	b25b      	sxtb	r3, r3
 800f212:	2b00      	cmp	r3, #0
 800f214:	da20      	bge.n	800f258 <f_read+0x280>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f218:	7858      	ldrb	r0, [r3, #1]
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f224:	2301      	movs	r3, #1
 800f226:	f7fb fb87 	bl	800a938 <disk_write>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d00a      	beq.n	800f246 <f_read+0x26e>
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	2201      	movs	r2, #1
 800f234:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23a:	2101      	movs	r1, #1
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7fb fe75 	bl	800af2c <unlock_volume>
 800f242:	2301      	movs	r3, #1
 800f244:	e06a      	b.n	800f31c <f_read+0x344>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f246:	69fb      	ldr	r3, [r7, #28]
 800f248:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f24c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f250:	b2da      	uxtb	r2, r3
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25a:	7858      	ldrb	r0, [r3, #1]
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f262:	2301      	movs	r3, #1
 800f264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f266:	f7fb fb47 	bl	800a8f8 <disk_read>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d00a      	beq.n	800f286 <f_read+0x2ae>
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	2201      	movs	r2, #1
 800f274:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f27a:	2101      	movs	r1, #1
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7fb fe55 	bl	800af2c <unlock_volume>
 800f282:	2301      	movs	r3, #1
 800f284:	e04a      	b.n	800f31c <f_read+0x344>
			}
#endif
			fp->sect = sect;
 800f286:	69fb      	ldr	r3, [r7, #28]
 800f288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f28a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f292:	4613      	mov	r3, r2
 800f294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f298:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f29c:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f29e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d901      	bls.n	800f2aa <f_read+0x2d2>
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	647b      	str	r3, [r7, #68]	@ 0x44
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2bc:	440b      	add	r3, r1
 800f2be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f2c4:	f012 ff8d 	bl	80221e2 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800f2c8:	697a      	ldr	r2, [r7, #20]
 800f2ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	617b      	str	r3, [r7, #20]
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	681a      	ldr	r2, [r3, #0]
 800f2d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2d6:	441a      	add	r2, r3
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	601a      	str	r2, [r3, #0]
 800f2dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f2de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2e0:	4413      	add	r3, r2
 800f2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f2ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	4688      	mov	r8, r1
 800f2f0:	4681      	mov	r9, r0
 800f2f2:	eb12 0108 	adds.w	r1, r2, r8
 800f2f6:	60b9      	str	r1, [r7, #8]
 800f2f8:	eb43 0309 	adc.w	r3, r3, r9
 800f2fc:	60fb      	str	r3, [r7, #12]
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f304:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	f47f aebd 	bne.w	800f08a <f_read+0xb2>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f312:	2100      	movs	r1, #0
 800f314:	4618      	mov	r0, r3
 800f316:	f7fb fe09 	bl	800af2c <unlock_volume>
 800f31a:	2300      	movs	r3, #0
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3754      	adds	r7, #84	@ 0x54
 800f320:	46bd      	mov	sp, r7
 800f322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f326 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800f326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f32a:	b08d      	sub	sp, #52	@ 0x34
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	60b9      	str	r1, [r7, #8]
 800f332:	607a      	str	r2, [r7, #4]
 800f334:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	2200      	movs	r2, #0
 800f33e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f107 0210 	add.w	r2, r7, #16
 800f346:	4611      	mov	r1, r2
 800f348:	4618      	mov	r0, r3
 800f34a:	f7ff f9dd 	bl	800e708 <validate>
 800f34e:	4603      	mov	r3, r0
 800f350:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f354:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d108      	bne.n	800f36e <f_write+0x48>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f362:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f366:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d009      	beq.n	800f382 <f_write+0x5c>
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f374:	4611      	mov	r1, r2
 800f376:	4618      	mov	r0, r3
 800f378:	f7fb fdd8 	bl	800af2c <unlock_volume>
 800f37c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f380:	e1af      	b.n	800f6e2 <f_write+0x3bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f388:	f003 0302 	and.w	r3, r3, #2
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d106      	bne.n	800f39e <f_write+0x78>
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	2107      	movs	r1, #7
 800f394:	4618      	mov	r0, r3
 800f396:	f7fb fdc9 	bl	800af2c <unlock_volume>
 800f39a:	2307      	movs	r3, #7
 800f39c:	e1a1      	b.n	800f6e2 <f_write+0x3bc>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	2b04      	cmp	r3, #4
 800f3a4:	f000 8188 	beq.w	800f6b8 <f_write+0x392>
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	18d1      	adds	r1, r2, r3
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	4299      	cmp	r1, r3
 800f3bc:	f080 817c 	bcs.w	800f6b8 <f_write+0x392>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f3c6:	4613      	mov	r3, r2
 800f3c8:	43db      	mvns	r3, r3
 800f3ca:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800f3cc:	e174      	b.n	800f6b8 <f_write+0x392>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f3d4:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800f3d8:	2500      	movs	r5, #0
 800f3da:	ea54 0305 	orrs.w	r3, r4, r5
 800f3de:	f040 8119 	bne.w	800f614 <f_write+0x2ee>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f3e8:	f04f 0200 	mov.w	r2, #0
 800f3ec:	f04f 0300 	mov.w	r3, #0
 800f3f0:	0a42      	lsrs	r2, r0, #9
 800f3f2:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f3f6:	0a4b      	lsrs	r3, r1, #9
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	895b      	ldrh	r3, [r3, #10]
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	4013      	ands	r3, r2
 800f400:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d150      	bne.n	800f4aa <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f40e:	4313      	orrs	r3, r2
 800f410:	d10c      	bne.n	800f42c <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d11a      	bne.n	800f454 <f_write+0x12e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2100      	movs	r1, #0
 800f422:	4618      	mov	r0, r3
 800f424:	f7fc fc54 	bl	800bcd0 <create_chain>
 800f428:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f42a:	e013      	b.n	800f454 <f_write+0x12e>
					}
				} else {					/* On the middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f430:	2b00      	cmp	r3, #0
 800f432:	d007      	beq.n	800f444 <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f7fc fd83 	bl	800bf46 <clmt_clust>
 800f440:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f442:	e007      	b.n	800f454 <f_write+0x12e>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f444:	68fa      	ldr	r2, [r7, #12]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f44a:	4619      	mov	r1, r3
 800f44c:	4610      	mov	r0, r2
 800f44e:	f7fc fc3f 	bl	800bcd0 <create_chain>
 800f452:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f456:	2b00      	cmp	r3, #0
 800f458:	f000 8133 	beq.w	800f6c2 <f_write+0x39c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d10a      	bne.n	800f478 <f_write+0x152>
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2202      	movs	r2, #2
 800f466:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	2102      	movs	r1, #2
 800f46e:	4618      	mov	r0, r3
 800f470:	f7fb fd5c 	bl	800af2c <unlock_volume>
 800f474:	2302      	movs	r3, #2
 800f476:	e134      	b.n	800f6e2 <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f47e:	d10a      	bne.n	800f496 <f_write+0x170>
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2201      	movs	r2, #1
 800f484:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	2101      	movs	r1, #1
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fb fd4d 	bl	800af2c <unlock_volume>
 800f492:	2301      	movs	r3, #1
 800f494:	e125      	b.n	800f6e2 <f_write+0x3bc>
				fp->clust = clst;			/* Update current cluster */
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f49a:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	689b      	ldr	r3, [r3, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d102      	bne.n	800f4aa <f_write+0x184>
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4a8:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f4b0:	b25b      	sxtb	r3, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	da20      	bge.n	800f4f8 <f_write+0x1d2>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	7858      	ldrb	r0, [r3, #1]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	f7fb fa37 	bl	800a938 <disk_write>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00a      	beq.n	800f4e6 <f_write+0x1c0>
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	2101      	movs	r1, #1
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7fb fd25 	bl	800af2c <unlock_volume>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e0fd      	b.n	800f6e2 <f_write+0x3bc>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f4ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800f4f8:	693a      	ldr	r2, [r7, #16]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4fe:	4619      	mov	r1, r3
 800f500:	4610      	mov	r0, r2
 800f502:	f7fb ff89 	bl	800b418 <clst2sect>
 800f506:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d10a      	bne.n	800f524 <f_write+0x1fe>
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2202      	movs	r2, #2
 800f512:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	2102      	movs	r1, #2
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7fb fd06 	bl	800af2c <unlock_volume>
 800f520:	2302      	movs	r3, #2
 800f522:	e0de      	b.n	800f6e2 <f_write+0x3bc>
			sect += csect;
 800f524:	697a      	ldr	r2, [r7, #20]
 800f526:	69bb      	ldr	r3, [r7, #24]
 800f528:	4413      	add	r3, r2
 800f52a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	0a5b      	lsrs	r3, r3, #9
 800f530:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d044      	beq.n	800f5c2 <f_write+0x29c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f538:	69ba      	ldr	r2, [r7, #24]
 800f53a:	6a3b      	ldr	r3, [r7, #32]
 800f53c:	4413      	add	r3, r2
 800f53e:	693a      	ldr	r2, [r7, #16]
 800f540:	8952      	ldrh	r2, [r2, #10]
 800f542:	4293      	cmp	r3, r2
 800f544:	d905      	bls.n	800f552 <f_write+0x22c>
					cc = fs->csize - csect;
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	895b      	ldrh	r3, [r3, #10]
 800f54a:	461a      	mov	r2, r3
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	1ad3      	subs	r3, r2, r3
 800f550:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	7858      	ldrb	r0, [r3, #1]
 800f556:	6a3b      	ldr	r3, [r7, #32]
 800f558:	697a      	ldr	r2, [r7, #20]
 800f55a:	69f9      	ldr	r1, [r7, #28]
 800f55c:	f7fb f9ec 	bl	800a938 <disk_write>
 800f560:	4603      	mov	r3, r0
 800f562:	2b00      	cmp	r3, #0
 800f564:	d00a      	beq.n	800f57c <f_write+0x256>
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2201      	movs	r2, #1
 800f56a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	2101      	movs	r1, #1
 800f572:	4618      	mov	r0, r3
 800f574:	f7fb fcda 	bl	800af2c <unlock_volume>
 800f578:	2301      	movs	r3, #1
 800f57a:	e0b2      	b.n	800f6e2 <f_write+0x3bc>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	1ad3      	subs	r3, r2, r3
 800f584:	6a3a      	ldr	r2, [r7, #32]
 800f586:	429a      	cmp	r2, r3
 800f588:	d917      	bls.n	800f5ba <f_write+0x294>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	1ad3      	subs	r3, r2, r3
 800f598:	025b      	lsls	r3, r3, #9
 800f59a:	69fa      	ldr	r2, [r7, #28]
 800f59c:	4413      	add	r3, r2
 800f59e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	f012 fe1d 	bl	80221e2 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f5ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5b2:	b2da      	uxtb	r2, r3
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f5ba:	6a3b      	ldr	r3, [r7, #32]
 800f5bc:	025b      	lsls	r3, r3, #9
 800f5be:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800f5c0:	e04f      	b.n	800f662 <f_write+0x33c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d020      	beq.n	800f60e <f_write+0x2e8>
				fp->fptr < fp->obj.objsize &&
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f5d8:	4290      	cmp	r0, r2
 800f5da:	eb71 0303 	sbcs.w	r3, r1, r3
 800f5de:	d216      	bcs.n	800f60e <f_write+0x2e8>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	7858      	ldrb	r0, [r3, #1]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	697a      	ldr	r2, [r7, #20]
 800f5ee:	f7fb f983 	bl	800a8f8 <disk_read>
 800f5f2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d00a      	beq.n	800f60e <f_write+0x2e8>
					ABORT(fs, FR_DISK_ERR);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	2101      	movs	r1, #1
 800f604:	4618      	mov	r0, r3
 800f606:	f7fb fc91 	bl	800af2c <unlock_volume>
 800f60a:	2301      	movs	r3, #1
 800f60c:	e069      	b.n	800f6e2 <f_write+0x3bc>
			}
#endif
			fp->sect = sect;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	697a      	ldr	r2, [r7, #20]
 800f612:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f61a:	4613      	mov	r3, r2
 800f61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f620:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f624:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d901      	bls.n	800f632 <f_write+0x30c>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f63e:	4613      	mov	r3, r2
 800f640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f644:	440b      	add	r3, r1
 800f646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f648:	69f9      	ldr	r1, [r7, #28]
 800f64a:	4618      	mov	r0, r3
 800f64c:	f012 fdc9 	bl	80221e2 <memcpy>
		fp->flag |= FA_DIRTY;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f656:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f65a:	b2da      	uxtb	r2, r3
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f666:	1ad3      	subs	r3, r2, r3
 800f668:	607b      	str	r3, [r7, #4]
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f670:	441a      	add	r2, r3
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	601a      	str	r2, [r3, #0]
 800f676:	69fa      	ldr	r2, [r7, #28]
 800f678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f67a:	4413      	add	r3, r2
 800f67c:	61fb      	str	r3, [r7, #28]
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f684:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f686:	2000      	movs	r0, #0
 800f688:	4688      	mov	r8, r1
 800f68a:	4681      	mov	r9, r0
 800f68c:	eb12 0a08 	adds.w	sl, r2, r8
 800f690:	eb43 0b09 	adc.w	fp, r3, r9
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f6a0:	68f9      	ldr	r1, [r7, #12]
 800f6a2:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800f6a6:	4282      	cmp	r2, r0
 800f6a8:	eb73 0601 	sbcs.w	r6, r3, r1
 800f6ac:	d201      	bcs.n	800f6b2 <f_write+0x38c>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	68f9      	ldr	r1, [r7, #12]
 800f6b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	f47f ae87 	bne.w	800f3ce <f_write+0xa8>
 800f6c0:	e000      	b.n	800f6c4 <f_write+0x39e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f6c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f6ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6ce:	b2da      	uxtb	r2, r3
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	2100      	movs	r1, #0
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fb fc26 	bl	800af2c <unlock_volume>
 800f6e0:	2300      	movs	r3, #0
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3734      	adds	r7, #52	@ 0x34
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f6f8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f6fc:	6018      	str	r0, [r3, #0]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f6fe:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f702:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 800f70c:	4611      	mov	r1, r2
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fe fffa 	bl	800e708 <validate>
 800f714:	4603      	mov	r3, r0
 800f716:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	if (res == FR_OK) {
 800f71a:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f040 818b 	bne.w	800fa3a <f_sync+0x34e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f724:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f728:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f736:	2b00      	cmp	r3, #0
 800f738:	f000 817f 	beq.w	800fa3a <f_sync+0x34e>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f73c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f740:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f74a:	b25b      	sxtb	r3, r3
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	da2e      	bge.n	800f7ae <f_sync+0xc2>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f750:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f754:	7858      	ldrb	r0, [r3, #1]
 800f756:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f75a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f764:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f768:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f770:	2301      	movs	r3, #1
 800f772:	f7fb f8e1 	bl	800a938 <disk_write>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d007      	beq.n	800f78c <f_sync+0xa0>
 800f77c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f780:	2101      	movs	r1, #1
 800f782:	4618      	mov	r0, r3
 800f784:	f7fb fbd2 	bl	800af2c <unlock_volume>
 800f788:	2301      	movs	r3, #1
 800f78a:	e160      	b.n	800fa4e <f_sync+0x362>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f78c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f790:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f79a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f79e:	b2da      	uxtb	r2, r3
 800f7a0:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f7a4:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f7ae:	f7fb f902 	bl	800a9b6 <get_fattime>
 800f7b2:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f7b6:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	2b04      	cmp	r3, #4
 800f7be:	f040 80ca 	bne.w	800f956 <f_sync+0x26a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800f7c2:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f7c6:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fc f93d 	bl	800ba4c <fill_first_frag>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 800f7d8:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d112      	bne.n	800f806 <f_sync+0x11a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f7e0:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f7e4:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f7e8:	6818      	ldr	r0, [r3, #0]
 800f7ea:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f7ee:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	f7fc f955 	bl	800baaa <fill_last_frag>
 800f800:	4603      	mov	r3, r0
 800f802:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				}
				if (res == FR_OK) {
 800f806:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	f040 8115 	bne.w	800fa3a <f_sync+0x34e>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
 800f810:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f814:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f818:	60da      	str	r2, [r3, #12]
 800f81a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f81e:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800f822:	611a      	str	r2, [r3, #16]
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 800f824:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f828:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	f107 0308 	add.w	r3, r7, #8
 800f832:	4611      	mov	r1, r2
 800f834:	4618      	mov	r0, r3
 800f836:	f7fd f92e 	bl	800ca96 <load_obj_xdir>
 800f83a:	4603      	mov	r3, r0
 800f83c:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					if (res == FR_OK) {
 800f840:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f844:	2b00      	cmp	r3, #0
 800f846:	f040 80f8 	bne.w	800fa3a <f_sync+0x34e>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 800f84a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	3304      	adds	r3, #4
 800f852:	781a      	ldrb	r2, [r3, #0]
 800f854:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f858:	691b      	ldr	r3, [r3, #16]
 800f85a:	3304      	adds	r3, #4
 800f85c:	f042 0220 	orr.w	r2, r2, #32
 800f860:	b2d2      	uxtb	r2, r2
 800f862:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800f864:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f868:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	79da      	ldrb	r2, [r3, #7]
 800f870:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f874:	691b      	ldr	r3, [r3, #16]
 800f876:	3321      	adds	r3, #33	@ 0x21
 800f878:	f042 0201 	orr.w	r2, r2, #1
 800f87c:	b2d2      	uxtb	r2, r2
 800f87e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 800f880:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f884:	691b      	ldr	r3, [r3, #16]
 800f886:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f88a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f88e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	689b      	ldr	r3, [r3, #8]
 800f896:	4619      	mov	r1, r3
 800f898:	4610      	mov	r0, r2
 800f89a:	f7fb f9c6 	bl	800ac2a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 800f89e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f8a8:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f8ac:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f8b6:	4608      	mov	r0, r1
 800f8b8:	f7fb f9e3 	bl	800ac82 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 800f8bc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f8c0:	691b      	ldr	r3, [r3, #16]
 800f8c2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800f8c6:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f8ca:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f8d4:	4608      	mov	r0, r1
 800f8d6:	f7fb f9d4 	bl	800ac82 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800f8da:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f8de:	691b      	ldr	r3, [r3, #16]
 800f8e0:	330c      	adds	r3, #12
 800f8e2:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fb f99f 	bl	800ac2a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800f8ec:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f8f0:	691b      	ldr	r3, [r3, #16]
 800f8f2:	3315      	adds	r3, #21
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800f8f8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f8fc:	691b      	ldr	r3, [r3, #16]
 800f8fe:	3310      	adds	r3, #16
 800f900:	2100      	movs	r1, #0
 800f902:	4618      	mov	r0, r3
 800f904:	f7fb f991 	bl	800ac2a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800f908:	f107 0308 	add.w	r3, r7, #8
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fd f8fb 	bl	800cb08 <store_xdir>
 800f912:	4603      	mov	r3, r0
 800f914:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
						if (res == FR_OK) {
 800f918:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	f040 808c 	bne.w	800fa3a <f_sync+0x34e>
							res = sync_fs(fs);
 800f922:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f926:	4618      	mov	r0, r3
 800f928:	f7fb fd08 	bl	800b33c <sync_fs>
 800f92c:	4603      	mov	r3, r0
 800f92e:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 800f932:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f936:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f944:	b2da      	uxtb	r2, r3
 800f946:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f94a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800f954:	e071      	b.n	800fa3a <f_sync+0x34e>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f956:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	@ 0x4b8
 800f95a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f95e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f966:	4619      	mov	r1, r3
 800f968:	4610      	mov	r0, r2
 800f96a:	f7fb fcb9 	bl	800b2e0 <move_window>
 800f96e:	4603      	mov	r3, r0
 800f970:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 800f974:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d15e      	bne.n	800fa3a <f_sync+0x34e>
					dir = fp->dir_ptr;
 800f97c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f980:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f988:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800f98c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f990:	330b      	adds	r3, #11
 800f992:	781a      	ldrb	r2, [r3, #0]
 800f994:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f998:	330b      	adds	r3, #11
 800f99a:	f042 0220 	orr.w	r2, r2, #32
 800f99e:	b2d2      	uxtb	r2, r2
 800f9a0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800f9a2:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f9a6:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	6818      	ldr	r0, [r3, #0]
 800f9ae:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f9b2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	689b      	ldr	r3, [r3, #8]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 800f9c0:	f7fc fcf3 	bl	800c3aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f9c4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f9c8:	f103 001c 	add.w	r0, r3, #28
 800f9cc:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f9d0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f9da:	4613      	mov	r3, r2
 800f9dc:	4619      	mov	r1, r3
 800f9de:	f7fb f924 	bl	800ac2a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f9e2:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f9e6:	3316      	adds	r3, #22
 800f9e8:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fb f91c 	bl	800ac2a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f9f2:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f9f6:	3312      	adds	r3, #18
 800f9f8:	2100      	movs	r1, #0
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fb f8fa 	bl	800abf4 <st_word>
					fs->wflag = 1;
 800fa00:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800fa04:	2201      	movs	r2, #1
 800fa06:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fa08:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fb fc95 	bl	800b33c <sync_fs>
 800fa12:	4603      	mov	r3, r0
 800fa14:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fa18:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800fa1c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fa26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa2a:	b2da      	uxtb	r2, r3
 800fa2c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800fa30:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fa3a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800fa3e:	f897 24c7 	ldrb.w	r2, [r7, #1223]	@ 0x4c7
 800fa42:	4611      	mov	r1, r2
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fb fa71 	bl	800af2c <unlock_volume>
 800fa4a:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7ff fe43 	bl	800f6ec <f_sync>
 800fa66:	4603      	mov	r3, r0
 800fa68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fa6a:	7bfb      	ldrb	r3, [r7, #15]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d11d      	bne.n	800faac <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f107 0208 	add.w	r2, r7, #8
 800fa76:	4611      	mov	r1, r2
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fe fe45 	bl	800e708 <validate>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fa82:	7bfb      	ldrb	r3, [r7, #15]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d111      	bne.n	800faac <f_close+0x54>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fb fb8b 	bl	800b1a8 <dec_share>
 800fa92:	4603      	mov	r3, r0
 800fa94:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 800fa96:	7bfb      	ldrb	r3, [r7, #15]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d102      	bne.n	800faa2 <f_close+0x4a>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	601a      	str	r2, [r3, #0]
#else
			fp->obj.fs = 0;	/* Invalidate file object */
#endif
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	2100      	movs	r1, #0
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fb fa40 	bl	800af2c <unlock_volume>
#endif
		}
	}
	return res;
 800faac:	7bfb      	ldrb	r3, [r7, #15]
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fab6:	b580      	push	{r7, lr}
 800fab8:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fac2:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fac6:	6018      	str	r0, [r3, #0]
 800fac8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800facc:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800fad0:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800fad2:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fad6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d101      	bne.n	800fae4 <f_opendir+0x2e>
 800fae0:	2309      	movs	r3, #9
 800fae2:	e102      	b.n	800fcea <f_opendir+0x234>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 800fae4:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 800fae8:	463b      	mov	r3, r7
 800faea:	2200      	movs	r2, #0
 800faec:	4618      	mov	r0, r3
 800faee:	f7fe fac1 	bl	800e074 <mount_volume>
 800faf2:	4603      	mov	r3, r0
 800faf4:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	if (res == FR_OK) {
 800faf8:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	f040 80df 	bne.w	800fcc0 <f_opendir+0x20a>
		dp->obj.fs = fs;
 800fb02:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 800fb06:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb0a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800fb12:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fb16:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800fb1a:	60da      	str	r2, [r3, #12]
 800fb1c:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fb20:	f107 0208 	add.w	r2, r7, #8
 800fb24:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fb26:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb2a:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800fb2e:	681a      	ldr	r2, [r3, #0]
 800fb30:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb34:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb38:	4611      	mov	r1, r2
 800fb3a:	6818      	ldr	r0, [r3, #0]
 800fb3c:	f7fe f842 	bl	800dbc4 <follow_path>
 800fb40:	4603      	mov	r3, r0
 800fb42:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
		if (res == FR_OK) {						/* Follow completed */
 800fb46:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f040 80b1 	bne.w	800fcb2 <f_opendir+0x1fc>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fb50:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb54:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800fb5e:	b25b      	sxtb	r3, r3
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	db60      	blt.n	800fc26 <f_opendir+0x170>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 800fb64:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb68:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	799b      	ldrb	r3, [r3, #6]
 800fb70:	f003 0310 	and.w	r3, r3, #16
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d053      	beq.n	800fc20 <f_opendir+0x16a>
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800fb78:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	2b04      	cmp	r3, #4
 800fb80:	d13a      	bne.n	800fbf8 <f_opendir+0x142>
						dp->obj.c_scl = dp->obj.sclust;	/* Get containing directory inforamation */
 800fb82:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb86:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	689a      	ldr	r2, [r3, #8]
 800fb8e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb92:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	621a      	str	r2, [r3, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800fb9a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb9e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fba8:	4613      	mov	r3, r2
 800fbaa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800fbae:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 800fbb2:	f2a2 426c 	subw	r2, r2, #1132	@ 0x46c
 800fbb6:	6812      	ldr	r2, [r2, #0]
 800fbb8:	79d2      	ldrb	r2, [r2, #7]
 800fbba:	431a      	orrs	r2, r3
 800fbbc:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fbc0:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	625a      	str	r2, [r3, #36]	@ 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 800fbc8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fbcc:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fbd4:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fbd8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	629a      	str	r2, [r3, #40]	@ 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800fbe0:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 800fbe4:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fbe8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4619      	mov	r1, r3
 800fbf0:	4610      	mov	r0, r2
 800fbf2:	f7fc ff27 	bl	800ca44 <init_alloc_info>
 800fbf6:	e016      	b.n	800fc26 <f_opendir+0x170>
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fbf8:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 800fbfc:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fc00:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc08:	4619      	mov	r1, r3
 800fc0a:	4610      	mov	r0, r2
 800fc0c:	f7fc fbae 	bl	800c36c <ld_clust>
 800fc10:	4602      	mov	r2, r0
 800fc12:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fc16:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	609a      	str	r2, [r3, #8]
 800fc1e:	e002      	b.n	800fc26 <f_opendir+0x170>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800fc20:	2305      	movs	r3, #5
 800fc22:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
				}
			}
			if (res == FR_OK) {
 800fc26:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d141      	bne.n	800fcb2 <f_opendir+0x1fc>
				dp->obj.id = fs->id;
 800fc2e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fc32:	88da      	ldrh	r2, [r3, #6]
 800fc34:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fc38:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fc40:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fc44:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fc48:	2100      	movs	r1, #0
 800fc4a:	6818      	ldr	r0, [r3, #0]
 800fc4c:	f7fc fa07 	bl	800c05e <dir_sdi>
 800fc50:	4603      	mov	r3, r0
 800fc52:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
#if FF_FS_LOCK
				if (res == FR_OK) {
 800fc56:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d129      	bne.n	800fcb2 <f_opendir+0x1fc>
					if (dp->obj.sclust != 0) {
 800fc5e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fc62:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	689b      	ldr	r3, [r3, #8]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d01a      	beq.n	800fca4 <f_opendir+0x1ee>
						dp->obj.lockid = inc_share(dp, 0);	/* Lock the sub directory */
 800fc6e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fc72:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fc76:	2100      	movs	r1, #0
 800fc78:	6818      	ldr	r0, [r3, #0]
 800fc7a:	f7fb fa07 	bl	800b08c <inc_share>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fc84:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fc8c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fc90:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d10a      	bne.n	800fcb2 <f_opendir+0x1fc>
 800fc9c:	2312      	movs	r3, #18
 800fc9e:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
 800fca2:	e006      	b.n	800fcb2 <f_opendir+0x1fc>
					} else {
						dp->obj.lockid = 0;	/* Root directory need not to be locked */
 800fca4:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fca8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fcb2:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fcb6:	2b04      	cmp	r3, #4
 800fcb8:	d102      	bne.n	800fcc0 <f_opendir+0x20a>
 800fcba:	2305      	movs	r3, #5
 800fcbc:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 800fcc0:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d006      	beq.n	800fcd6 <f_opendir+0x220>
 800fcc8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fccc:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fcd6:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fcda:	f897 246f 	ldrb.w	r2, [r7, #1135]	@ 0x46f
 800fcde:	4611      	mov	r1, r2
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7fb f923 	bl	800af2c <unlock_volume>
 800fce6:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f107 0208 	add.w	r2, r7, #8
 800fd02:	4611      	mov	r1, r2
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7fe fcff 	bl	800e708 <validate>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fd0e:	7bfb      	ldrb	r3, [r7, #15]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d115      	bne.n	800fd40 <f_closedir+0x4c>
#if FF_FS_LOCK
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d006      	beq.n	800fd2a <f_closedir+0x36>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fb fa41 	bl	800b1a8 <dec_share>
 800fd26:	4603      	mov	r3, r0
 800fd28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 800fd2a:	7bfb      	ldrb	r3, [r7, #15]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d102      	bne.n	800fd36 <f_closedir+0x42>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	601a      	str	r2, [r3, #0]
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
#endif
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	2100      	movs	r1, #0
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fb f8f6 	bl	800af2c <unlock_volume>
#endif
	}
	return res;
 800fd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3710      	adds	r7, #16
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}

0800fd4a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fd56:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fd5a:	6018      	str	r0, [r3, #0]
 800fd5c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fd60:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800fd64:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fd66:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fd6a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 800fd74:	4611      	mov	r1, r2
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fe fcc6 	bl	800e708 <validate>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	if (res == FR_OK) {
 800fd82:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d150      	bne.n	800fe2c <f_readdir+0xe2>
		if (!fno) {
 800fd8a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fd8e:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d10b      	bne.n	800fdb0 <f_readdir+0x66>
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
 800fd98:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fd9c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fda0:	2100      	movs	r1, #0
 800fda2:	6818      	ldr	r0, [r3, #0]
 800fda4:	f7fc f95b 	bl	800c05e <dir_sdi>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
 800fdae:	e03d      	b.n	800fe2c <f_readdir+0xe2>
		} else {
			INIT_NAMBUF(fs);
 800fdb0:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fdb4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800fdb8:	60da      	str	r2, [r3, #12]
 800fdba:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fdbe:	f107 0208 	add.w	r2, r7, #8
 800fdc2:	611a      	str	r2, [r3, #16]
			res = DIR_READ_FILE(dp);		/* Read an item */
 800fdc4:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fdc8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fdcc:	2100      	movs	r1, #0
 800fdce:	6818      	ldr	r0, [r3, #0]
 800fdd0:	f7fc ff5e 	bl	800cc90 <dir_read>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800fdda:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fdde:	2b04      	cmp	r3, #4
 800fde0:	d102      	bne.n	800fde8 <f_readdir+0x9e>
 800fde2:	2300      	movs	r3, #0
 800fde4:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			if (res == FR_OK) {				/* A valid entry is found */
 800fde8:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d11d      	bne.n	800fe2c <f_readdir+0xe2>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fdf0:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fdf4:	f5a3 628e 	sub.w	r2, r3, #1136	@ 0x470
 800fdf8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fdfc:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fe00:	6811      	ldr	r1, [r2, #0]
 800fe02:	6818      	ldr	r0, [r3, #0]
 800fe04:	f7fd fae8 	bl	800d3d8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fe08:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fe0c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fe10:	2100      	movs	r1, #0
 800fe12:	6818      	ldr	r0, [r3, #0]
 800fe14:	f7fc f9a9 	bl	800c16a <dir_next>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fe1e:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fe22:	2b04      	cmp	r3, #4
 800fe24:	d102      	bne.n	800fe2c <f_readdir+0xe2>
 800fe26:	2300      	movs	r3, #0
 800fe28:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fe2c:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fe30:	f897 246f 	ldrb.w	r2, [r7, #1135]	@ 0x46f
 800fe34:	4611      	mov	r1, r2
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7fb f878 	bl	800af2c <unlock_volume>
 800fe3c:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
	...

0800fe4c <FATFS_GetDisk>:
/**
 * @brief  Returns a pointer to the disk structure.
 * @retval Pointer to Disk_drvTypeDef
 */
Disk_drvTypeDef* FATFS_GetDisk(void)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	af00      	add	r7, sp, #0
    return &disk;
 800fe50:	4b02      	ldr	r3, [pc, #8]	@ (800fe5c <FATFS_GetDisk+0x10>)
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr
 800fe5c:	24019810 	.word	0x24019810

0800fe60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b087      	sub	sp, #28
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	4613      	mov	r3, r2
 800fe6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fe72:	2300      	movs	r3, #0
 800fe74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < FF_VOLUMES)
 800fe76:	4b1f      	ldr	r3, [pc, #124]	@ (800fef4 <FATFS_LinkDriverEx+0x94>)
 800fe78:	7a5b      	ldrb	r3, [r3, #9]
 800fe7a:	b2db      	uxtb	r3, r3
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d131      	bne.n	800fee4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fe80:	4b1c      	ldr	r3, [pc, #112]	@ (800fef4 <FATFS_LinkDriverEx+0x94>)
 800fe82:	7a5b      	ldrb	r3, [r3, #9]
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	461a      	mov	r2, r3
 800fe88:	4b1a      	ldr	r3, [pc, #104]	@ (800fef4 <FATFS_LinkDriverEx+0x94>)
 800fe8a:	2100      	movs	r1, #0
 800fe8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fe8e:	4b19      	ldr	r3, [pc, #100]	@ (800fef4 <FATFS_LinkDriverEx+0x94>)
 800fe90:	7a5b      	ldrb	r3, [r3, #9]
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	4a17      	ldr	r2, [pc, #92]	@ (800fef4 <FATFS_LinkDriverEx+0x94>)
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	4413      	add	r3, r2
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fe9e:	4b15      	ldr	r3, [pc, #84]	@ (800fef4 <FATFS_LinkDriverEx+0x94>)
 800fea0:	7a5b      	ldrb	r3, [r3, #9]
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	461a      	mov	r2, r3
 800fea6:	4b13      	ldr	r3, [pc, #76]	@ (800fef4 <FATFS_LinkDriverEx+0x94>)
 800fea8:	4413      	add	r3, r2
 800feaa:	79fa      	ldrb	r2, [r7, #7]
 800feac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800feae:	4b11      	ldr	r3, [pc, #68]	@ (800fef4 <FATFS_LinkDriverEx+0x94>)
 800feb0:	7a5b      	ldrb	r3, [r3, #9]
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	1c5a      	adds	r2, r3, #1
 800feb6:	b2d1      	uxtb	r1, r2
 800feb8:	4a0e      	ldr	r2, [pc, #56]	@ (800fef4 <FATFS_LinkDriverEx+0x94>)
 800feba:	7251      	strb	r1, [r2, #9]
 800febc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800febe:	7dbb      	ldrb	r3, [r7, #22]
 800fec0:	3330      	adds	r3, #48	@ 0x30
 800fec2:	b2da      	uxtb	r2, r3
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	3301      	adds	r3, #1
 800fecc:	223a      	movs	r2, #58	@ 0x3a
 800fece:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	3302      	adds	r3, #2
 800fed4:	222f      	movs	r2, #47	@ 0x2f
 800fed6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	3303      	adds	r3, #3
 800fedc:	2200      	movs	r2, #0
 800fede:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fee0:	2300      	movs	r3, #0
 800fee2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	371c      	adds	r7, #28
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr
 800fef2:	bf00      	nop
 800fef4:	24019810 	.word	0x24019810

0800fef8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ff02:	2200      	movs	r2, #0
 800ff04:	6839      	ldr	r1, [r7, #0]
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f7ff ffaa 	bl	800fe60 <FATFS_LinkDriverEx>
 800ff0c:	4603      	mov	r3, r0
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
	...

0800ff18 <MMC_CheckStatus>:
#else
static volatile UINT WriteStatus = 0, ReadStatus = 0;
#endif

/* Generic MMC driver implementation */
static DSTATUS MMC_CheckStatus(MMC_HandleTypeDef *hmmc) {
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
    Stat = STA_NOINIT;
 800ff20:	4b0b      	ldr	r3, [pc, #44]	@ (800ff50 <MMC_CheckStatus+0x38>)
 800ff22:	2201      	movs	r2, #1
 800ff24:	701a      	strb	r2, [r3, #0]
    if (BSP_MMC_GetCardState(hmmc) == BSP_ERROR_NONE) {
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f7f1 fe86 	bl	8001c38 <BSP_MMC_GetCardState>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d107      	bne.n	800ff42 <MMC_CheckStatus+0x2a>
        Stat &= ~STA_NOINIT;
 800ff32:	4b07      	ldr	r3, [pc, #28]	@ (800ff50 <MMC_CheckStatus+0x38>)
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	f023 0301 	bic.w	r3, r3, #1
 800ff3c:	b2da      	uxtb	r2, r3
 800ff3e:	4b04      	ldr	r3, [pc, #16]	@ (800ff50 <MMC_CheckStatus+0x38>)
 800ff40:	701a      	strb	r2, [r3, #0]
    }
    return Stat;
 800ff42:	4b03      	ldr	r3, [pc, #12]	@ (800ff50 <MMC_CheckStatus+0x38>)
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	b2db      	uxtb	r3, r3
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	240148d1 	.word	0x240148d1

0800ff54 <MMC_Initialize>:

static DSTATUS MMC_Initialize(MMC_HandleTypeDef *hmmc, BYTE lun) {
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	70fb      	strb	r3, [r7, #3]
#ifdef USE_FREERTOS
    /* Ensure FreeRTOS kernel is running before using RTOS APIs */
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ff60:	f002 fef4 	bl	8012d4c <xTaskGetSchedulerState>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d028      	beq.n	800ffbc <MMC_Initialize+0x68>
#ifndef DISABLE_MMC_INIT
        if (BSP_MMC_Init(hmmc) == BSP_ERROR_NONE) {
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f7f1 fe04 	bl	8001b78 <BSP_MMC_Init>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d106      	bne.n	800ff84 <MMC_Initialize+0x30>
            Stat = MMC_CheckStatus(hmmc);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7ff ffce 	bl	800ff18 <MMC_CheckStatus>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	461a      	mov	r2, r3
 800ff80:	4b12      	ldr	r3, [pc, #72]	@ (800ffcc <MMC_Initialize+0x78>)
 800ff82:	701a      	strb	r2, [r3, #0]
        }
#else
        Stat = MMC_CheckStatus(hmmc);
#endif
        /* Create semaphore for DMA synchronization if MMC is initialized */
        if (Stat != STA_NOINIT) {
 800ff84:	4b11      	ldr	r3, [pc, #68]	@ (800ffcc <MMC_Initialize+0x78>)
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	b2db      	uxtb	r3, r3
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d016      	beq.n	800ffbc <MMC_Initialize+0x68>
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
            if (hmmc == &hmmc1 && MMC1Semaphore == NULL) {
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	4a0f      	ldr	r2, [pc, #60]	@ (800ffd0 <MMC_Initialize+0x7c>)
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d112      	bne.n	800ffbc <MMC_Initialize+0x68>
 800ff96:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd4 <MMC_Initialize+0x80>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d10e      	bne.n	800ffbc <MMC_Initialize+0x68>
                MMC1Semaphore = xSemaphoreCreateBinary();
 800ff9e:	2203      	movs	r2, #3
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	2001      	movs	r0, #1
 800ffa4:	f000 fcc7 	bl	8010936 <xQueueGenericCreate>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	4a0a      	ldr	r2, [pc, #40]	@ (800ffd4 <MMC_Initialize+0x80>)
 800ffac:	6013      	str	r3, [r2, #0]
                if (MMC1Semaphore == NULL) {
 800ffae:	4b09      	ldr	r3, [pc, #36]	@ (800ffd4 <MMC_Initialize+0x80>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d102      	bne.n	800ffbc <MMC_Initialize+0x68>
                    Stat = STA_NOINIT;  /* Failed to create semaphore */
 800ffb6:	4b05      	ldr	r3, [pc, #20]	@ (800ffcc <MMC_Initialize+0x78>)
 800ffb8:	2201      	movs	r2, #1
 800ffba:	701a      	strb	r2, [r3, #0]
    }
#else
    return MMC_CheckStatus(hmmc);
#endif
#endif
    return Stat;
 800ffbc:	4b03      	ldr	r3, [pc, #12]	@ (800ffcc <MMC_Initialize+0x78>)
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	b2db      	uxtb	r3, r3
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3708      	adds	r7, #8
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	240148d1 	.word	0x240148d1
 800ffd0:	2405a57c 	.word	0x2405a57c
 800ffd4:	2401981c 	.word	0x2401981c

0800ffd8 <MMC_Read>:

static DRESULT MMC_Read(MMC_HandleTypeDef *hmmc, BYTE *buff, DWORD sector, UINT count) {
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b088      	sub	sp, #32
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]
 800ffe4:	603b      	str	r3, [r7, #0]
    DRESULT res = RES_ERROR;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	77fb      	strb	r3, [r7, #31]

#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	4a1b      	ldr	r2, [pc, #108]	@ (801005c <MMC_Read+0x84>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d102      	bne.n	800fff8 <MMC_Read+0x20>
 800fff2:	4b1b      	ldr	r3, [pc, #108]	@ (8010060 <MMC_Read+0x88>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	e000      	b.n	800fffa <MMC_Read+0x22>
 800fff8:	2300      	movs	r3, #0
 800fffa:	61bb      	str	r3, [r7, #24]

#if (ENABLE_DMA_CACHE_MAINTENANCE == 1)
    uint32_t alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count * MMC_DEFAULT_BLOCK_SIZE + ((uint32_t)buff - alignedAddr));
#endif
    if (BSP_MMC_ReadBlocks_DMA(hmmc, (uint32_t*)buff, sector, count) == BSP_ERROR_NONE) {
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	68b9      	ldr	r1, [r7, #8]
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f7f1 fde2 	bl	8001bcc <BSP_MMC_ReadBlocks_DMA>
 8010008:	4603      	mov	r3, r0
 801000a:	2b00      	cmp	r3, #0
 801000c:	d121      	bne.n	8010052 <MMC_Read+0x7a>
        /* Wait for DMA completion via semaphore */
        if (xSemaphoreTake(semaphore, pdMS_TO_TICKS(MMC_TIMEOUT)) == pdTRUE) {
 801000e:	f247 5130 	movw	r1, #30000	@ 0x7530
 8010012:	69b8      	ldr	r0, [r7, #24]
 8010014:	f000 ffde 	bl	8010fd4 <xQueueSemaphoreTake>
 8010018:	4603      	mov	r3, r0
 801001a:	2b01      	cmp	r3, #1
 801001c:	d119      	bne.n	8010052 <MMC_Read+0x7a>
            /* Check MMC state to ensure transfer is complete */
            TickType_t timeout = xTaskGetTickCount() + pdMS_TO_TICKS(MMC_TIMEOUT);
 801001e:	f002 f8f9 	bl	8012214 <xTaskGetTickCount>
 8010022:	4602      	mov	r2, r0
 8010024:	f247 5330 	movw	r3, #30000	@ 0x7530
 8010028:	4413      	add	r3, r2
 801002a:	617b      	str	r3, [r7, #20]
            while (xTaskGetTickCount() < timeout) {
 801002c:	e00b      	b.n	8010046 <MMC_Read+0x6e>
                if (BSP_MMC_GetCardState(hmmc) == MMC_TRANSFER_OK) {
 801002e:	68f8      	ldr	r0, [r7, #12]
 8010030:	f7f1 fe02 	bl	8001c38 <BSP_MMC_GetCardState>
 8010034:	4603      	mov	r3, r0
 8010036:	2b00      	cmp	r3, #0
 8010038:	d102      	bne.n	8010040 <MMC_Read+0x68>
                    res = RES_OK;
 801003a:	2300      	movs	r3, #0
 801003c:	77fb      	strb	r3, [r7, #31]
                    break;
 801003e:	e008      	b.n	8010052 <MMC_Read+0x7a>
                }
                vTaskDelay(pdMS_TO_TICKS(1));  /* Delay 1ms to avoid busy-wait */
 8010040:	2001      	movs	r0, #1
 8010042:	f001 fe85 	bl	8011d50 <vTaskDelay>
            while (xTaskGetTickCount() < timeout) {
 8010046:	f002 f8e5 	bl	8012214 <xTaskGetTickCount>
 801004a:	4602      	mov	r2, r0
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	4293      	cmp	r3, r2
 8010050:	d8ed      	bhi.n	801002e <MMC_Read+0x56>
                }
            }
        }
    }
#endif
    return res;
 8010052:	7ffb      	ldrb	r3, [r7, #31]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3720      	adds	r7, #32
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}
 801005c:	2405a57c 	.word	0x2405a57c
 8010060:	2401981c 	.word	0x2401981c

08010064 <MMC_Write>:

#if _USE_WRITE == 1
static DRESULT MMC_Write(MMC_HandleTypeDef *hmmc, const BYTE *buff, DWORD sector, UINT count) {
 8010064:	b580      	push	{r7, lr}
 8010066:	b088      	sub	sp, #32
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
 8010070:	603b      	str	r3, [r7, #0]
    DRESULT res = RES_ERROR;
 8010072:	2301      	movs	r3, #1
 8010074:	77fb      	strb	r3, [r7, #31]

#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	4a1b      	ldr	r2, [pc, #108]	@ (80100e8 <MMC_Write+0x84>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d102      	bne.n	8010084 <MMC_Write+0x20>
 801007e:	4b1b      	ldr	r3, [pc, #108]	@ (80100ec <MMC_Write+0x88>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	e000      	b.n	8010086 <MMC_Write+0x22>
 8010084:	2300      	movs	r3, #0
 8010086:	61bb      	str	r3, [r7, #24]

#if (ENABLE_DMA_CACHE_MAINTENANCE == 1)
    uint32_t alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count * MMC_DEFAULT_BLOCK_SIZE + ((uint32_t)buff - alignedAddr));
#endif
    if (BSP_MMC_WriteBlocks_DMA(hmmc, (uint32_t*)buff, sector, count) == BSP_ERROR_NONE) {
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	68b9      	ldr	r1, [r7, #8]
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f7f1 fdb7 	bl	8001c02 <BSP_MMC_WriteBlocks_DMA>
 8010094:	4603      	mov	r3, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d121      	bne.n	80100de <MMC_Write+0x7a>
        /* Wait for DMA completion via semaphore */
        if (xSemaphoreTake(semaphore, pdMS_TO_TICKS(MMC_TIMEOUT)) == pdTRUE) {
 801009a:	f247 5130 	movw	r1, #30000	@ 0x7530
 801009e:	69b8      	ldr	r0, [r7, #24]
 80100a0:	f000 ff98 	bl	8010fd4 <xQueueSemaphoreTake>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b01      	cmp	r3, #1
 80100a8:	d119      	bne.n	80100de <MMC_Write+0x7a>
            /* Check MMC state to ensure transfer is complete */
            TickType_t timeout = xTaskGetTickCount() + pdMS_TO_TICKS(MMC_TIMEOUT);
 80100aa:	f002 f8b3 	bl	8012214 <xTaskGetTickCount>
 80100ae:	4602      	mov	r2, r0
 80100b0:	f247 5330 	movw	r3, #30000	@ 0x7530
 80100b4:	4413      	add	r3, r2
 80100b6:	617b      	str	r3, [r7, #20]
            while (xTaskGetTickCount() < timeout) {
 80100b8:	e00b      	b.n	80100d2 <MMC_Write+0x6e>
                if (BSP_MMC_GetCardState(hmmc) == MMC_TRANSFER_OK) {
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f7f1 fdbc 	bl	8001c38 <BSP_MMC_GetCardState>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d102      	bne.n	80100cc <MMC_Write+0x68>
                    res = RES_OK;
 80100c6:	2300      	movs	r3, #0
 80100c8:	77fb      	strb	r3, [r7, #31]
                    break;
 80100ca:	e008      	b.n	80100de <MMC_Write+0x7a>
                }
                vTaskDelay(pdMS_TO_TICKS(1));  /* Delay 1ms to avoid busy-wait */
 80100cc:	2001      	movs	r0, #1
 80100ce:	f001 fe3f 	bl	8011d50 <vTaskDelay>
            while (xTaskGetTickCount() < timeout) {
 80100d2:	f002 f89f 	bl	8012214 <xTaskGetTickCount>
 80100d6:	4602      	mov	r2, r0
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	4293      	cmp	r3, r2
 80100dc:	d8ed      	bhi.n	80100ba <MMC_Write+0x56>
                }
            }
        }
    }
#endif
    return res;
 80100de:	7ffb      	ldrb	r3, [r7, #31]
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3720      	adds	r7, #32
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	2405a57c 	.word	0x2405a57c
 80100ec:	2401981c 	.word	0x2401981c

080100f0 <MMC_Ioctl>:
#endif

#if _USE_IOCTL == 1
static DRESULT MMC_Ioctl(MMC_HandleTypeDef *hmmc, BYTE cmd, void *buff) {
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08c      	sub	sp, #48	@ 0x30
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	460b      	mov	r3, r1
 80100fa:	607a      	str	r2, [r7, #4]
 80100fc:	72fb      	strb	r3, [r7, #11]
    DRESULT res = RES_ERROR;
 80100fe:	2301      	movs	r3, #1
 8010100:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BSP_MMC_CardInfo CardInfo;

    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010104:	4b26      	ldr	r3, [pc, #152]	@ (80101a0 <MMC_Ioctl+0xb0>)
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	b2db      	uxtb	r3, r3
 801010a:	f003 0301 	and.w	r3, r3, #1
 801010e:	2b00      	cmp	r3, #0
 8010110:	d001      	beq.n	8010116 <MMC_Ioctl+0x26>
 8010112:	2303      	movs	r3, #3
 8010114:	e040      	b.n	8010198 <MMC_Ioctl+0xa8>

    switch (cmd) {
 8010116:	7afb      	ldrb	r3, [r7, #11]
 8010118:	2b03      	cmp	r3, #3
 801011a:	d838      	bhi.n	801018e <MMC_Ioctl+0x9e>
 801011c:	a201      	add	r2, pc, #4	@ (adr r2, 8010124 <MMC_Ioctl+0x34>)
 801011e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010122:	bf00      	nop
 8010124:	08010135 	.word	0x08010135
 8010128:	0801013d 	.word	0x0801013d
 801012c:	08010157 	.word	0x08010157
 8010130:	08010173 	.word	0x08010173
        case CTRL_SYNC:
            res = RES_OK;
 8010134:	2300      	movs	r3, #0
 8010136:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 801013a:	e02b      	b.n	8010194 <MMC_Ioctl+0xa4>
        case GET_SECTOR_COUNT:
            BSP_MMC_GetCardInfo(hmmc, &CardInfo);
 801013c:	f107 0310 	add.w	r3, r7, #16
 8010140:	4619      	mov	r1, r3
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f7f1 fd89 	bl	8001c5a <BSP_MMC_GetCardInfo>
            *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	601a      	str	r2, [r3, #0]
            res = RES_OK;
 801014e:	2300      	movs	r3, #0
 8010150:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 8010154:	e01e      	b.n	8010194 <MMC_Ioctl+0xa4>
        case GET_SECTOR_SIZE:
            BSP_MMC_GetCardInfo(hmmc, &CardInfo);
 8010156:	f107 0310 	add.w	r3, r7, #16
 801015a:	4619      	mov	r1, r3
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	f7f1 fd7c 	bl	8001c5a <BSP_MMC_GetCardInfo>
            *(WORD*)buff = CardInfo.LogBlockSize;
 8010162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010164:	b29a      	uxth	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 801016a:	2300      	movs	r3, #0
 801016c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 8010170:	e010      	b.n	8010194 <MMC_Ioctl+0xa4>
        case GET_BLOCK_SIZE:
            BSP_MMC_GetCardInfo(hmmc, &CardInfo);
 8010172:	f107 0310 	add.w	r3, r7, #16
 8010176:	4619      	mov	r1, r3
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f7f1 fd6e 	bl	8001c5a <BSP_MMC_GetCardInfo>
            *(DWORD*)buff = CardInfo.LogBlockSize / MMC_DEFAULT_BLOCK_SIZE;
 801017e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010180:	0a5a      	lsrs	r2, r3, #9
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	601a      	str	r2, [r3, #0]
            res = RES_OK;
 8010186:	2300      	movs	r3, #0
 8010188:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 801018c:	e002      	b.n	8010194 <MMC_Ioctl+0xa4>
        default:
            res = RES_PARERR;
 801018e:	2304      	movs	r3, #4
 8010190:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    return res;
 8010194:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010198:	4618      	mov	r0, r3
 801019a:	3730      	adds	r7, #48	@ 0x30
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	240148d1 	.word	0x240148d1

080101a4 <BSP_MMC_WriteCpltCallback>:
#endif

/* Callback functions */
void BSP_MMC_WriteCpltCallback(MMC_HandleTypeDef *hmmc) {
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b084      	sub	sp, #16
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	4a0f      	ldr	r2, [pc, #60]	@ (80101ec <BSP_MMC_WriteCpltCallback+0x48>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d102      	bne.n	80101ba <BSP_MMC_WriteCpltCallback+0x16>
 80101b4:	4b0e      	ldr	r3, [pc, #56]	@ (80101f0 <BSP_MMC_WriteCpltCallback+0x4c>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	e000      	b.n	80101bc <BSP_MMC_WriteCpltCallback+0x18>
 80101ba:	2300      	movs	r3, #0
 80101bc:	60fb      	str	r3, [r7, #12]
#if defined(DUAL_MMC) || defined(ONLY_MMC2)
                                  (hmmc == &hmmc2) ? MMC2Semaphore : NULL;
#else
                                  NULL;
#endif
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80101be:	2300      	movs	r3, #0
 80101c0:	60bb      	str	r3, [r7, #8]
    xSemaphoreGiveFromISR(semaphore, &xHigherPriorityTaskWoken);
 80101c2:	f107 0308 	add.w	r3, r7, #8
 80101c6:	4619      	mov	r1, r3
 80101c8:	68f8      	ldr	r0, [r7, #12]
 80101ca:	f000 fd69 	bl	8010ca0 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d007      	beq.n	80101e4 <BSP_MMC_WriteCpltCallback+0x40>
 80101d4:	4b07      	ldr	r3, [pc, #28]	@ (80101f4 <BSP_MMC_WriteCpltCallback+0x50>)
 80101d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101da:	601a      	str	r2, [r3, #0]
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	f3bf 8f6f 	isb	sy
#else
    WriteStatus = 1;
#endif
}
 80101e4:	bf00      	nop
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	2405a57c 	.word	0x2405a57c
 80101f0:	2401981c 	.word	0x2401981c
 80101f4:	e000ed04 	.word	0xe000ed04

080101f8 <BSP_MMC_ReadCpltCallback>:

void BSP_MMC_ReadCpltCallback(MMC_HandleTypeDef *hmmc) {
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	4a0f      	ldr	r2, [pc, #60]	@ (8010240 <BSP_MMC_ReadCpltCallback+0x48>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d102      	bne.n	801020e <BSP_MMC_ReadCpltCallback+0x16>
 8010208:	4b0e      	ldr	r3, [pc, #56]	@ (8010244 <BSP_MMC_ReadCpltCallback+0x4c>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	e000      	b.n	8010210 <BSP_MMC_ReadCpltCallback+0x18>
 801020e:	2300      	movs	r3, #0
 8010210:	60fb      	str	r3, [r7, #12]
#if defined(DUAL_MMC) || defined(ONLY_MMC2)
                                  (hmmc == &hmmc2) ? MMC2Semaphore : NULL;
#else
                                  NULL;
#endif
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8010212:	2300      	movs	r3, #0
 8010214:	60bb      	str	r3, [r7, #8]
    xSemaphoreGiveFromISR(semaphore, &xHigherPriorityTaskWoken);
 8010216:	f107 0308 	add.w	r3, r7, #8
 801021a:	4619      	mov	r1, r3
 801021c:	68f8      	ldr	r0, [r7, #12]
 801021e:	f000 fd3f 	bl	8010ca0 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d007      	beq.n	8010238 <BSP_MMC_ReadCpltCallback+0x40>
 8010228:	4b07      	ldr	r3, [pc, #28]	@ (8010248 <BSP_MMC_ReadCpltCallback+0x50>)
 801022a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801022e:	601a      	str	r2, [r3, #0]
 8010230:	f3bf 8f4f 	dsb	sy
 8010234:	f3bf 8f6f 	isb	sy
#else
    ReadStatus = 1;
#endif
}
 8010238:	bf00      	nop
 801023a:	3710      	adds	r7, #16
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}
 8010240:	2405a57c 	.word	0x2405a57c
 8010244:	2401981c 	.word	0x2401981c
 8010248:	e000ed04 	.word	0xe000ed04

0801024c <MMC1_initialize>:

/* MMC1 Driver */
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
static DSTATUS MMC1_initialize(BYTE lun) { return MMC_Initialize(&hmmc1, lun); }
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	4603      	mov	r3, r0
 8010254:	71fb      	strb	r3, [r7, #7]
 8010256:	79fb      	ldrb	r3, [r7, #7]
 8010258:	4619      	mov	r1, r3
 801025a:	4804      	ldr	r0, [pc, #16]	@ (801026c <MMC1_initialize+0x20>)
 801025c:	f7ff fe7a 	bl	800ff54 <MMC_Initialize>
 8010260:	4603      	mov	r3, r0
 8010262:	4618      	mov	r0, r3
 8010264:	3708      	adds	r7, #8
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	2405a57c 	.word	0x2405a57c

08010270 <MMC1_status>:
static DSTATUS MMC1_status(BYTE lun) { return MMC_CheckStatus(&hmmc1); }
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	4603      	mov	r3, r0
 8010278:	71fb      	strb	r3, [r7, #7]
 801027a:	4804      	ldr	r0, [pc, #16]	@ (801028c <MMC1_status+0x1c>)
 801027c:	f7ff fe4c 	bl	800ff18 <MMC_CheckStatus>
 8010280:	4603      	mov	r3, r0
 8010282:	4618      	mov	r0, r3
 8010284:	3708      	adds	r7, #8
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	2405a57c 	.word	0x2405a57c

08010290 <MMC1_read>:
static DRESULT MMC1_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) { return MMC_Read(&hmmc1, buff, sector, count); }
 8010290:	b580      	push	{r7, lr}
 8010292:	b084      	sub	sp, #16
 8010294:	af00      	add	r7, sp, #0
 8010296:	60b9      	str	r1, [r7, #8]
 8010298:	607a      	str	r2, [r7, #4]
 801029a:	603b      	str	r3, [r7, #0]
 801029c:	4603      	mov	r3, r0
 801029e:	73fb      	strb	r3, [r7, #15]
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	68b9      	ldr	r1, [r7, #8]
 80102a6:	4804      	ldr	r0, [pc, #16]	@ (80102b8 <MMC1_read+0x28>)
 80102a8:	f7ff fe96 	bl	800ffd8 <MMC_Read>
 80102ac:	4603      	mov	r3, r0
 80102ae:	4618      	mov	r0, r3
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	2405a57c 	.word	0x2405a57c

080102bc <MMC1_write>:
#if _USE_WRITE == 1
static DRESULT MMC1_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) { return MMC_Write(&hmmc1, buff, sector, count); }
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60b9      	str	r1, [r7, #8]
 80102c4:	607a      	str	r2, [r7, #4]
 80102c6:	603b      	str	r3, [r7, #0]
 80102c8:	4603      	mov	r3, r0
 80102ca:	73fb      	strb	r3, [r7, #15]
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	687a      	ldr	r2, [r7, #4]
 80102d0:	68b9      	ldr	r1, [r7, #8]
 80102d2:	4804      	ldr	r0, [pc, #16]	@ (80102e4 <MMC1_write+0x28>)
 80102d4:	f7ff fec6 	bl	8010064 <MMC_Write>
 80102d8:	4603      	mov	r3, r0
 80102da:	4618      	mov	r0, r3
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	2405a57c 	.word	0x2405a57c

080102e8 <MMC1_ioctl>:
#endif
#if _USE_IOCTL == 1
static DRESULT MMC1_ioctl(BYTE lun, BYTE cmd, void *buff) { return MMC_Ioctl(&hmmc1, cmd, buff); }
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	4603      	mov	r3, r0
 80102f0:	603a      	str	r2, [r7, #0]
 80102f2:	71fb      	strb	r3, [r7, #7]
 80102f4:	460b      	mov	r3, r1
 80102f6:	71bb      	strb	r3, [r7, #6]
 80102f8:	79bb      	ldrb	r3, [r7, #6]
 80102fa:	683a      	ldr	r2, [r7, #0]
 80102fc:	4619      	mov	r1, r3
 80102fe:	4804      	ldr	r0, [pc, #16]	@ (8010310 <MMC1_ioctl+0x28>)
 8010300:	f7ff fef6 	bl	80100f0 <MMC_Ioctl>
 8010304:	4603      	mov	r3, r0
 8010306:	4618      	mov	r0, r3
 8010308:	3708      	adds	r7, #8
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	2405a57c 	.word	0x2405a57c

08010314 <MMC1_GetDriver>:
#if _USE_IOCTL == 1
    MMC1_ioctl,
#endif
};

const Diskio_drvTypeDef* MMC1_GetDriver(void) {
 8010314:	b480      	push	{r7}
 8010316:	af00      	add	r7, sp, #0
    return &MMC1_Driver;
 8010318:	4b02      	ldr	r3, [pc, #8]	@ (8010324 <MMC1_GetDriver+0x10>)
}
 801031a:	4618      	mov	r0, r3
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr
 8010324:	08026004 	.word	0x08026004

08010328 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8010328:	b480      	push	{r7}
 801032a:	b085      	sub	sp, #20
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	460b      	mov	r3, r1
 8010332:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 8010334:	2300      	movs	r3, #0
 8010336:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8010338:	4b17      	ldr	r3, [pc, #92]	@ (8010398 <ff_uni2oem+0x70>)
 801033a:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010340:	d802      	bhi.n	8010348 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	81fb      	strh	r3, [r7, #14]
 8010346:	e01f      	b.n	8010388 <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801034e:	d21b      	bcs.n	8010388 <ff_uni2oem+0x60>
 8010350:	887b      	ldrh	r3, [r7, #2]
 8010352:	f240 3252 	movw	r2, #850	@ 0x352
 8010356:	4293      	cmp	r3, r2
 8010358:	d116      	bne.n	8010388 <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 801035a:	2300      	movs	r3, #0
 801035c:	81fb      	strh	r3, [r7, #14]
 801035e:	e002      	b.n	8010366 <ff_uni2oem+0x3e>
 8010360:	89fb      	ldrh	r3, [r7, #14]
 8010362:	3301      	adds	r3, #1
 8010364:	81fb      	strh	r3, [r7, #14]
 8010366:	89fb      	ldrh	r3, [r7, #14]
 8010368:	2b7f      	cmp	r3, #127	@ 0x7f
 801036a:	d808      	bhi.n	801037e <ff_uni2oem+0x56>
 801036c:	89fb      	ldrh	r3, [r7, #14]
 801036e:	005b      	lsls	r3, r3, #1
 8010370:	68ba      	ldr	r2, [r7, #8]
 8010372:	4413      	add	r3, r2
 8010374:	881b      	ldrh	r3, [r3, #0]
 8010376:	461a      	mov	r2, r3
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	4293      	cmp	r3, r2
 801037c:	d1f0      	bne.n	8010360 <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 801037e:	89fb      	ldrh	r3, [r7, #14]
 8010380:	3380      	adds	r3, #128	@ 0x80
 8010382:	b29b      	uxth	r3, r3
 8010384:	b2db      	uxtb	r3, r3
 8010386:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010388:	89fb      	ldrh	r3, [r7, #14]
}
 801038a:	4618      	mov	r0, r3
 801038c:	3714      	adds	r7, #20
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr
 8010396:	bf00      	nop
 8010398:	08026018 	.word	0x08026018

0801039c <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 801039c:	b480      	push	{r7}
 801039e:	b085      	sub	sp, #20
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	4603      	mov	r3, r0
 80103a4:	460a      	mov	r2, r1
 80103a6:	80fb      	strh	r3, [r7, #6]
 80103a8:	4613      	mov	r3, r2
 80103aa:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 80103ac:	2300      	movs	r3, #0
 80103ae:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 80103b0:	4b0f      	ldr	r3, [pc, #60]	@ (80103f0 <ff_oem2uni+0x54>)
 80103b2:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 80103b4:	88fb      	ldrh	r3, [r7, #6]
 80103b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80103b8:	d802      	bhi.n	80103c0 <ff_oem2uni+0x24>
		c = oem;
 80103ba:	88fb      	ldrh	r3, [r7, #6]
 80103bc:	81fb      	strh	r3, [r7, #14]
 80103be:	e00f      	b.n	80103e0 <ff_oem2uni+0x44>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 80103c0:	88bb      	ldrh	r3, [r7, #4]
 80103c2:	f240 3252 	movw	r2, #850	@ 0x352
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d10a      	bne.n	80103e0 <ff_oem2uni+0x44>
			if (oem < 0x100) c = p[oem - 0x80];
 80103ca:	88fb      	ldrh	r3, [r7, #6]
 80103cc:	2bff      	cmp	r3, #255	@ 0xff
 80103ce:	d807      	bhi.n	80103e0 <ff_oem2uni+0x44>
 80103d0:	88fa      	ldrh	r2, [r7, #6]
 80103d2:	4b08      	ldr	r3, [pc, #32]	@ (80103f4 <ff_oem2uni+0x58>)
 80103d4:	4413      	add	r3, r2
 80103d6:	005b      	lsls	r3, r3, #1
 80103d8:	68ba      	ldr	r2, [r7, #8]
 80103da:	4413      	add	r3, r2
 80103dc:	881b      	ldrh	r3, [r3, #0]
 80103de:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80103e0:	89fb      	ldrh	r3, [r7, #14]
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3714      	adds	r7, #20
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop
 80103f0:	08026018 	.word	0x08026018
 80103f4:	7fffff80 	.word	0x7fffff80

080103f8 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b087      	sub	sp, #28
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010406:	d27d      	bcs.n	8010504 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 801040c:	8a7b      	ldrh	r3, [r7, #18]
 801040e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010412:	d201      	bcs.n	8010418 <ff_wtoupper+0x20>
 8010414:	4b3f      	ldr	r3, [pc, #252]	@ (8010514 <ff_wtoupper+0x11c>)
 8010416:	e000      	b.n	801041a <ff_wtoupper+0x22>
 8010418:	4b3f      	ldr	r3, [pc, #252]	@ (8010518 <ff_wtoupper+0x120>)
 801041a:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	1c9a      	adds	r2, r3, #2
 8010420:	617a      	str	r2, [r7, #20]
 8010422:	881b      	ldrh	r3, [r3, #0]
 8010424:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8010426:	8a3b      	ldrh	r3, [r7, #16]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d069      	beq.n	8010500 <ff_wtoupper+0x108>
 801042c:	8a7a      	ldrh	r2, [r7, #18]
 801042e:	8a3b      	ldrh	r3, [r7, #16]
 8010430:	429a      	cmp	r2, r3
 8010432:	d365      	bcc.n	8010500 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	1c9a      	adds	r2, r3, #2
 8010438:	617a      	str	r2, [r7, #20]
 801043a:	881b      	ldrh	r3, [r3, #0]
 801043c:	81fb      	strh	r3, [r7, #14]
 801043e:	89fb      	ldrh	r3, [r7, #14]
 8010440:	0a1b      	lsrs	r3, r3, #8
 8010442:	81bb      	strh	r3, [r7, #12]
 8010444:	89fb      	ldrh	r3, [r7, #14]
 8010446:	b2db      	uxtb	r3, r3
 8010448:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 801044a:	8a7a      	ldrh	r2, [r7, #18]
 801044c:	8a39      	ldrh	r1, [r7, #16]
 801044e:	89fb      	ldrh	r3, [r7, #14]
 8010450:	440b      	add	r3, r1
 8010452:	429a      	cmp	r2, r3
 8010454:	da4a      	bge.n	80104ec <ff_wtoupper+0xf4>
				switch (cmd) {
 8010456:	89bb      	ldrh	r3, [r7, #12]
 8010458:	2b08      	cmp	r3, #8
 801045a:	d850      	bhi.n	80104fe <ff_wtoupper+0x106>
 801045c:	a201      	add	r2, pc, #4	@ (adr r2, 8010464 <ff_wtoupper+0x6c>)
 801045e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010462:	bf00      	nop
 8010464:	08010489 	.word	0x08010489
 8010468:	0801049b 	.word	0x0801049b
 801046c:	080104b1 	.word	0x080104b1
 8010470:	080104b9 	.word	0x080104b9
 8010474:	080104c1 	.word	0x080104c1
 8010478:	080104c9 	.word	0x080104c9
 801047c:	080104d1 	.word	0x080104d1
 8010480:	080104d9 	.word	0x080104d9
 8010484:	080104e1 	.word	0x080104e1
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8010488:	8a7a      	ldrh	r2, [r7, #18]
 801048a:	8a3b      	ldrh	r3, [r7, #16]
 801048c:	1ad3      	subs	r3, r2, r3
 801048e:	005b      	lsls	r3, r3, #1
 8010490:	697a      	ldr	r2, [r7, #20]
 8010492:	4413      	add	r3, r2
 8010494:	881b      	ldrh	r3, [r3, #0]
 8010496:	827b      	strh	r3, [r7, #18]
 8010498:	e027      	b.n	80104ea <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 801049a:	8a7a      	ldrh	r2, [r7, #18]
 801049c:	8a3b      	ldrh	r3, [r7, #16]
 801049e:	1ad3      	subs	r3, r2, r3
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	f003 0301 	and.w	r3, r3, #1
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	8a7a      	ldrh	r2, [r7, #18]
 80104aa:	1ad3      	subs	r3, r2, r3
 80104ac:	827b      	strh	r3, [r7, #18]
 80104ae:	e01c      	b.n	80104ea <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 80104b0:	8a7b      	ldrh	r3, [r7, #18]
 80104b2:	3b10      	subs	r3, #16
 80104b4:	827b      	strh	r3, [r7, #18]
 80104b6:	e018      	b.n	80104ea <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 80104b8:	8a7b      	ldrh	r3, [r7, #18]
 80104ba:	3b20      	subs	r3, #32
 80104bc:	827b      	strh	r3, [r7, #18]
 80104be:	e014      	b.n	80104ea <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 80104c0:	8a7b      	ldrh	r3, [r7, #18]
 80104c2:	3b30      	subs	r3, #48	@ 0x30
 80104c4:	827b      	strh	r3, [r7, #18]
 80104c6:	e010      	b.n	80104ea <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 80104c8:	8a7b      	ldrh	r3, [r7, #18]
 80104ca:	3b1a      	subs	r3, #26
 80104cc:	827b      	strh	r3, [r7, #18]
 80104ce:	e00c      	b.n	80104ea <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 80104d0:	8a7b      	ldrh	r3, [r7, #18]
 80104d2:	3308      	adds	r3, #8
 80104d4:	827b      	strh	r3, [r7, #18]
 80104d6:	e008      	b.n	80104ea <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 80104d8:	8a7b      	ldrh	r3, [r7, #18]
 80104da:	3b50      	subs	r3, #80	@ 0x50
 80104dc:	827b      	strh	r3, [r7, #18]
 80104de:	e004      	b.n	80104ea <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 80104e0:	8a7b      	ldrh	r3, [r7, #18]
 80104e2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80104e6:	827b      	strh	r3, [r7, #18]
 80104e8:	bf00      	nop
				}
				break;
 80104ea:	e008      	b.n	80104fe <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 80104ec:	89bb      	ldrh	r3, [r7, #12]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d194      	bne.n	801041c <ff_wtoupper+0x24>
 80104f2:	89fb      	ldrh	r3, [r7, #14]
 80104f4:	005b      	lsls	r3, r3, #1
 80104f6:	697a      	ldr	r2, [r7, #20]
 80104f8:	4413      	add	r3, r2
 80104fa:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 80104fc:	e78e      	b.n	801041c <ff_wtoupper+0x24>
				break;
 80104fe:	bf00      	nop
		}
		uni = uc;
 8010500:	8a7b      	ldrh	r3, [r7, #18]
 8010502:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8010504:	687b      	ldr	r3, [r7, #4]
}
 8010506:	4618      	mov	r0, r3
 8010508:	371c      	adds	r7, #28
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr
 8010512:	bf00      	nop
 8010514:	08026118 	.word	0x08026118
 8010518:	0802630c 	.word	0x0802630c

0801051c <ff_mutex_create>:
*/

int ff_mutex_create (	/* Returns 1:Function succeeded or 0:Could not create the mutex */
	int vol				/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]

	Mutex[vol] = OSMutexCreate(0, &err);
	return (int)(err == OS_NO_ERR);

#elif OS_TYPE == 3	/* FreeRTOS */
	Mutex[vol] = xSemaphoreCreateMutex();
 8010524:	2001      	movs	r0, #1
 8010526:	f000 fa98 	bl	8010a5a <xQueueCreateMutex>
 801052a:	4602      	mov	r2, r0
 801052c:	4908      	ldr	r1, [pc, #32]	@ (8010550 <ff_mutex_create+0x34>)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return (int)(Mutex[vol] != NULL);
 8010534:	4a06      	ldr	r2, [pc, #24]	@ (8010550 <ff_mutex_create+0x34>)
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801053c:	2b00      	cmp	r3, #0
 801053e:	bf14      	ite	ne
 8010540:	2301      	movne	r3, #1
 8010542:	2300      	moveq	r3, #0
 8010544:	b2db      	uxtb	r3, r3

	Mutex[vol] = osMutexCreate(osMutex(cmsis_os_mutex));
	return (int)(Mutex[vol] != NULL);

#endif
}
 8010546:	4618      	mov	r0, r3
 8010548:	3708      	adds	r7, #8
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	24019820 	.word	0x24019820

08010554 <ff_mutex_delete>:
*/

void ff_mutex_delete (	/* Returns 1:Function succeeded or 0:Could not delete due to an error */
	int vol				/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
	OS_ERR err;

	OSMutexDel(Mutex[vol], OS_DEL_ALWAYS, &err);

#elif OS_TYPE == 3	/* FreeRTOS */
	vSemaphoreDelete(Mutex[vol]);
 801055c:	4a05      	ldr	r2, [pc, #20]	@ (8010574 <ff_mutex_delete+0x20>)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010564:	4618      	mov	r0, r3
 8010566:	f000 ff25 	bl	80113b4 <vQueueDelete>

#elif OS_TYPE == 4	/* CMSIS-RTOS */
	osMutexDelete(Mutex[vol]);

#endif
}
 801056a:	bf00      	nop
 801056c:	3708      	adds	r7, #8
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	24019820 	.word	0x24019820

08010578 <ff_mutex_take>:
*/

int ff_mutex_take (	/* Returns 1:Succeeded or 0:Timeout */
	int vol			/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]

	OSMutexPend(Mutex[vol], FF_FS_TIMEOUT, &err));
	return (int)(err == OS_NO_ERR);

#elif OS_TYPE == 3	/* FreeRTOS */
	return (int)(xSemaphoreTake(Mutex[vol], FF_FS_TIMEOUT) == pdTRUE);
 8010580:	4a09      	ldr	r2, [pc, #36]	@ (80105a8 <ff_mutex_take+0x30>)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010588:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801058c:	4618      	mov	r0, r3
 801058e:	f000 fd21 	bl	8010fd4 <xQueueSemaphoreTake>
 8010592:	4603      	mov	r3, r0
 8010594:	2b01      	cmp	r3, #1
 8010596:	bf0c      	ite	eq
 8010598:	2301      	moveq	r3, #1
 801059a:	2300      	movne	r3, #0
 801059c:	b2db      	uxtb	r3, r3

#elif OS_TYPE == 4	/* CMSIS-RTOS */
	return (int)(osMutexWait(Mutex[vol], FF_FS_TIMEOUT) == osOK);

#endif
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	24019820 	.word	0x24019820

080105ac <ff_mutex_give>:
*/

void ff_mutex_give (
	int vol			/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]

#elif OS_TYPE == 2	/* uC/OS-II */
	OSMutexPost(Mutex[vol]);

#elif OS_TYPE == 3	/* FreeRTOS */
	xSemaphoreGive(Mutex[vol]);
 80105b4:	4a06      	ldr	r2, [pc, #24]	@ (80105d0 <ff_mutex_give+0x24>)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80105bc:	2300      	movs	r3, #0
 80105be:	2200      	movs	r2, #0
 80105c0:	2100      	movs	r1, #0
 80105c2:	f000 fa63 	bl	8010a8c <xQueueGenericSend>

#elif OS_TYPE == 4	/* CMSIS-RTOS */
	osMutexRelease(Mutex[vol]);

#endif
}
 80105c6:	bf00      	nop
 80105c8:	3708      	adds	r7, #8
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}
 80105ce:	bf00      	nop
 80105d0:	24019820 	.word	0x24019820

080105d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80105d4:	b480      	push	{r7}
 80105d6:	b083      	sub	sp, #12
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f103 0208 	add.w	r2, r3, #8
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f04f 32ff 	mov.w	r2, #4294967295
 80105ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f103 0208 	add.w	r2, r3, #8
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f103 0208 	add.w	r2, r3, #8
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2200      	movs	r2, #0
 8010606:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2200      	movs	r2, #0
 8010620:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8010622:	bf00      	nop
 8010624:	370c      	adds	r7, #12
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr

0801062e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 801062e:	b480      	push	{r7}
 8010630:	b085      	sub	sp, #20
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
 8010636:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	68fa      	ldr	r2, [r7, #12]
 8010642:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	689a      	ldr	r2, [r3, #8]
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	689b      	ldr	r3, [r3, #8]
 8010650:	683a      	ldr	r2, [r7, #0]
 8010652:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	683a      	ldr	r2, [r7, #0]
 8010658:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	687a      	ldr	r2, [r7, #4]
 801065e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	1c5a      	adds	r2, r3, #1
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 801066a:	bf00      	nop
 801066c:	3714      	adds	r7, #20
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr

08010676 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8010676:	b480      	push	{r7}
 8010678:	b085      	sub	sp, #20
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
 801067e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801068c:	d103      	bne.n	8010696 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	691b      	ldr	r3, [r3, #16]
 8010692:	60fb      	str	r3, [r7, #12]
 8010694:	e00c      	b.n	80106b0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	3308      	adds	r3, #8
 801069a:	60fb      	str	r3, [r7, #12]
 801069c:	e002      	b.n	80106a4 <vListInsert+0x2e>
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	60fb      	str	r3, [r7, #12]
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	68ba      	ldr	r2, [r7, #8]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d2f6      	bcs.n	801069e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	685a      	ldr	r2, [r3, #4]
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	685b      	ldr	r3, [r3, #4]
 80106bc:	683a      	ldr	r2, [r7, #0]
 80106be:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	68fa      	ldr	r2, [r7, #12]
 80106c4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	683a      	ldr	r2, [r7, #0]
 80106ca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	1c5a      	adds	r2, r3, #1
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80106dc:	bf00      	nop
 80106de:	3714      	adds	r7, #20
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80106e8:	b480      	push	{r7}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	691b      	ldr	r3, [r3, #16]
 80106f4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	687a      	ldr	r2, [r7, #4]
 80106fc:	6892      	ldr	r2, [r2, #8]
 80106fe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	6852      	ldr	r2, [r2, #4]
 8010708:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	429a      	cmp	r2, r3
 8010712:	d103      	bne.n	801071c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	689a      	ldr	r2, [r3, #8]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	1e5a      	subs	r2, r3, #1
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3714      	adds	r7, #20
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b086      	sub	sp, #24
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8010746:	2301      	movs	r3, #1
 8010748:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d10d      	bne.n	8010770 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8010754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010758:	b672      	cpsid	i
 801075a:	f383 8811 	msr	BASEPRI, r3
 801075e:	f3bf 8f6f 	isb	sy
 8010762:	f3bf 8f4f 	dsb	sy
 8010766:	b662      	cpsie	i
 8010768:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 801076a:	bf00      	nop
 801076c:	bf00      	nop
 801076e:	e7fd      	b.n	801076c <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d05d      	beq.n	8010832 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 801077a:	2b00      	cmp	r3, #0
 801077c:	d059      	beq.n	8010832 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010786:	2100      	movs	r1, #0
 8010788:	fba3 2302 	umull	r2, r3, r3, r2
 801078c:	2b00      	cmp	r3, #0
 801078e:	d000      	beq.n	8010792 <xQueueGenericReset+0x56>
 8010790:	2101      	movs	r1, #1
 8010792:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8010794:	2b00      	cmp	r3, #0
 8010796:	d14c      	bne.n	8010832 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8010798:	f003 fc44 	bl	8014024 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	681a      	ldr	r2, [r3, #0]
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107a4:	6939      	ldr	r1, [r7, #16]
 80107a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80107a8:	fb01 f303 	mul.w	r3, r1, r3
 80107ac:	441a      	add	r2, r3
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80107b2:	693b      	ldr	r3, [r7, #16]
 80107b4:	2200      	movs	r2, #0
 80107b6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107c8:	3b01      	subs	r3, #1
 80107ca:	6939      	ldr	r1, [r7, #16]
 80107cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80107ce:	fb01 f303 	mul.w	r3, r1, r3
 80107d2:	441a      	add	r2, r3
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	22ff      	movs	r2, #255	@ 0xff
 80107dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	22ff      	movs	r2, #255	@ 0xff
 80107e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d114      	bne.n	8010818 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	691b      	ldr	r3, [r3, #16]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d01a      	beq.n	801082c <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	3310      	adds	r3, #16
 80107fa:	4618      	mov	r0, r3
 80107fc:	f001 ffb2 	bl	8012764 <xTaskRemoveFromEventList>
 8010800:	4603      	mov	r3, r0
 8010802:	2b00      	cmp	r3, #0
 8010804:	d012      	beq.n	801082c <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8010806:	4b17      	ldr	r3, [pc, #92]	@ (8010864 <xQueueGenericReset+0x128>)
 8010808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801080c:	601a      	str	r2, [r3, #0]
 801080e:	f3bf 8f4f 	dsb	sy
 8010812:	f3bf 8f6f 	isb	sy
 8010816:	e009      	b.n	801082c <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	3310      	adds	r3, #16
 801081c:	4618      	mov	r0, r3
 801081e:	f7ff fed9 	bl	80105d4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	3324      	adds	r3, #36	@ 0x24
 8010826:	4618      	mov	r0, r3
 8010828:	f7ff fed4 	bl	80105d4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 801082c:	f003 fc30 	bl	8014090 <vPortExitCritical>
 8010830:	e001      	b.n	8010836 <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8010832:	2300      	movs	r3, #0
 8010834:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d10d      	bne.n	8010858 <xQueueGenericReset+0x11c>
    __asm volatile
 801083c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010840:	b672      	cpsid	i
 8010842:	f383 8811 	msr	BASEPRI, r3
 8010846:	f3bf 8f6f 	isb	sy
 801084a:	f3bf 8f4f 	dsb	sy
 801084e:	b662      	cpsie	i
 8010850:	60bb      	str	r3, [r7, #8]
}
 8010852:	bf00      	nop
 8010854:	bf00      	nop
 8010856:	e7fd      	b.n	8010854 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8010858:	697b      	ldr	r3, [r7, #20]
}
 801085a:	4618      	mov	r0, r3
 801085c:	3718      	adds	r7, #24
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	e000ed04 	.word	0xe000ed04

08010868 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8010868:	b580      	push	{r7, lr}
 801086a:	b08c      	sub	sp, #48	@ 0x30
 801086c:	af02      	add	r7, sp, #8
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	607a      	str	r2, [r7, #4]
 8010874:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8010876:	2300      	movs	r3, #0
 8010878:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d10d      	bne.n	801089c <xQueueGenericCreateStatic+0x34>
    __asm volatile
 8010880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010884:	b672      	cpsid	i
 8010886:	f383 8811 	msr	BASEPRI, r3
 801088a:	f3bf 8f6f 	isb	sy
 801088e:	f3bf 8f4f 	dsb	sy
 8010892:	b662      	cpsie	i
 8010894:	623b      	str	r3, [r7, #32]
}
 8010896:	bf00      	nop
 8010898:	bf00      	nop
 801089a:	e7fd      	b.n	8010898 <xQueueGenericCreateStatic+0x30>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d033      	beq.n	801090a <xQueueGenericCreateStatic+0xa2>
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d030      	beq.n	801090a <xQueueGenericCreateStatic+0xa2>
            ( pxStaticQueue != NULL ) &&
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d002      	beq.n	80108b4 <xQueueGenericCreateStatic+0x4c>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d02a      	beq.n	801090a <xQueueGenericCreateStatic+0xa2>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d102      	bne.n	80108c0 <xQueueGenericCreateStatic+0x58>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d124      	bne.n	801090a <xQueueGenericCreateStatic+0xa2>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80108c0:	2350      	movs	r3, #80	@ 0x50
 80108c2:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	2b50      	cmp	r3, #80	@ 0x50
 80108c8:	d00d      	beq.n	80108e6 <xQueueGenericCreateStatic+0x7e>
    __asm volatile
 80108ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108ce:	b672      	cpsid	i
 80108d0:	f383 8811 	msr	BASEPRI, r3
 80108d4:	f3bf 8f6f 	isb	sy
 80108d8:	f3bf 8f4f 	dsb	sy
 80108dc:	b662      	cpsie	i
 80108de:	61fb      	str	r3, [r7, #28]
}
 80108e0:	bf00      	nop
 80108e2:	bf00      	nop
 80108e4:	e7fd      	b.n	80108e2 <xQueueGenericCreateStatic+0x7a>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 80108e6:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80108ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ee:	2201      	movs	r2, #1
 80108f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80108f4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80108f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108fa:	9300      	str	r3, [sp, #0]
 80108fc:	4613      	mov	r3, r2
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	68b9      	ldr	r1, [r7, #8]
 8010902:	68f8      	ldr	r0, [r7, #12]
 8010904:	f000 f86c 	bl	80109e0 <prvInitialiseNewQueue>
 8010908:	e010      	b.n	801092c <xQueueGenericCreateStatic+0xc4>
        }
        else
        {
            configASSERT( pxNewQueue );
 801090a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801090c:	2b00      	cmp	r3, #0
 801090e:	d10d      	bne.n	801092c <xQueueGenericCreateStatic+0xc4>
    __asm volatile
 8010910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010914:	b672      	cpsid	i
 8010916:	f383 8811 	msr	BASEPRI, r3
 801091a:	f3bf 8f6f 	isb	sy
 801091e:	f3bf 8f4f 	dsb	sy
 8010922:	b662      	cpsie	i
 8010924:	61bb      	str	r3, [r7, #24]
}
 8010926:	bf00      	nop
 8010928:	bf00      	nop
 801092a:	e7fd      	b.n	8010928 <xQueueGenericCreateStatic+0xc0>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 801092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801092e:	4618      	mov	r0, r3
 8010930:	3728      	adds	r7, #40	@ 0x28
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8010936:	b580      	push	{r7, lr}
 8010938:	b08a      	sub	sp, #40	@ 0x28
 801093a:	af02      	add	r7, sp, #8
 801093c:	60f8      	str	r0, [r7, #12]
 801093e:	60b9      	str	r1, [r7, #8]
 8010940:	4613      	mov	r3, r2
 8010942:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8010944:	2300      	movs	r3, #0
 8010946:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d032      	beq.n	80109b4 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 801094e:	2100      	movs	r1, #0
 8010950:	68ba      	ldr	r2, [r7, #8]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	fba3 2302 	umull	r2, r3, r3, r2
 8010958:	2b00      	cmp	r3, #0
 801095a:	d000      	beq.n	801095e <xQueueGenericCreate+0x28>
 801095c:	2101      	movs	r1, #1
 801095e:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8010960:	2b00      	cmp	r3, #0
 8010962:	d127      	bne.n	80109b4 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	68ba      	ldr	r2, [r7, #8]
 8010968:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 801096c:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8010970:	d820      	bhi.n	80109b4 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	68ba      	ldr	r2, [r7, #8]
 8010976:	fb02 f303 	mul.w	r3, r2, r3
 801097a:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	3350      	adds	r3, #80	@ 0x50
 8010980:	4618      	mov	r0, r3
 8010982:	f003 fc83 	bl	801428c <pvPortMalloc>
 8010986:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d023      	beq.n	80109d6 <xQueueGenericCreate+0xa0>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801098e:	69fb      	ldr	r3, [r7, #28]
 8010990:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	3350      	adds	r3, #80	@ 0x50
 8010996:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010998:	69fb      	ldr	r3, [r7, #28]
 801099a:	2200      	movs	r2, #0
 801099c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80109a0:	79fa      	ldrb	r2, [r7, #7]
 80109a2:	69fb      	ldr	r3, [r7, #28]
 80109a4:	9300      	str	r3, [sp, #0]
 80109a6:	4613      	mov	r3, r2
 80109a8:	697a      	ldr	r2, [r7, #20]
 80109aa:	68b9      	ldr	r1, [r7, #8]
 80109ac:	68f8      	ldr	r0, [r7, #12]
 80109ae:	f000 f817 	bl	80109e0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80109b2:	e010      	b.n	80109d6 <xQueueGenericCreate+0xa0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80109b4:	69fb      	ldr	r3, [r7, #28]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d10d      	bne.n	80109d6 <xQueueGenericCreate+0xa0>
    __asm volatile
 80109ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109be:	b672      	cpsid	i
 80109c0:	f383 8811 	msr	BASEPRI, r3
 80109c4:	f3bf 8f6f 	isb	sy
 80109c8:	f3bf 8f4f 	dsb	sy
 80109cc:	b662      	cpsie	i
 80109ce:	613b      	str	r3, [r7, #16]
}
 80109d0:	bf00      	nop
 80109d2:	bf00      	nop
 80109d4:	e7fd      	b.n	80109d2 <xQueueGenericCreate+0x9c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 80109d6:	69fb      	ldr	r3, [r7, #28]
    }
 80109d8:	4618      	mov	r0, r3
 80109da:	3720      	adds	r7, #32
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
 80109ec:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d103      	bne.n	80109fc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80109f4:	69bb      	ldr	r3, [r7, #24]
 80109f6:	69ba      	ldr	r2, [r7, #24]
 80109f8:	601a      	str	r2, [r3, #0]
 80109fa:	e002      	b.n	8010a02 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80109fc:	69bb      	ldr	r3, [r7, #24]
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8010a02:	69bb      	ldr	r3, [r7, #24]
 8010a04:	68fa      	ldr	r2, [r7, #12]
 8010a06:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8010a08:	69bb      	ldr	r3, [r7, #24]
 8010a0a:	68ba      	ldr	r2, [r7, #8]
 8010a0c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010a0e:	2101      	movs	r1, #1
 8010a10:	69b8      	ldr	r0, [r7, #24]
 8010a12:	f7ff fe93 	bl	801073c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	78fa      	ldrb	r2, [r7, #3]
 8010a1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8010a1e:	bf00      	nop
 8010a20:	3710      	adds	r7, #16
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}

08010a26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8010a26:	b580      	push	{r7, lr}
 8010a28:	b082      	sub	sp, #8
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d00e      	beq.n	8010a52 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2200      	movs	r2, #0
 8010a38:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2200      	movs	r2, #0
 8010a44:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010a46:	2300      	movs	r3, #0
 8010a48:	2200      	movs	r2, #0
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f000 f81d 	bl	8010a8c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8010a52:	bf00      	nop
 8010a54:	3708      	adds	r7, #8
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}

08010a5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b086      	sub	sp, #24
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	4603      	mov	r3, r0
 8010a62:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010a64:	2301      	movs	r3, #1
 8010a66:	617b      	str	r3, [r7, #20]
 8010a68:	2300      	movs	r3, #0
 8010a6a:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010a6c:	79fb      	ldrb	r3, [r7, #7]
 8010a6e:	461a      	mov	r2, r3
 8010a70:	6939      	ldr	r1, [r7, #16]
 8010a72:	6978      	ldr	r0, [r7, #20]
 8010a74:	f7ff ff5f 	bl	8010936 <xQueueGenericCreate>
 8010a78:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010a7a:	68f8      	ldr	r0, [r7, #12]
 8010a7c:	f7ff ffd3 	bl	8010a26 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8010a80:	68fb      	ldr	r3, [r7, #12]
    }
 8010a82:	4618      	mov	r0, r3
 8010a84:	3718      	adds	r7, #24
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
	...

08010a8c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b08e      	sub	sp, #56	@ 0x38
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	60f8      	str	r0, [r7, #12]
 8010a94:	60b9      	str	r1, [r7, #8]
 8010a96:	607a      	str	r2, [r7, #4]
 8010a98:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8010aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d10d      	bne.n	8010ac4 <xQueueGenericSend+0x38>
    __asm volatile
 8010aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aac:	b672      	cpsid	i
 8010aae:	f383 8811 	msr	BASEPRI, r3
 8010ab2:	f3bf 8f6f 	isb	sy
 8010ab6:	f3bf 8f4f 	dsb	sy
 8010aba:	b662      	cpsie	i
 8010abc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010abe:	bf00      	nop
 8010ac0:	bf00      	nop
 8010ac2:	e7fd      	b.n	8010ac0 <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d103      	bne.n	8010ad2 <xQueueGenericSend+0x46>
 8010aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d101      	bne.n	8010ad6 <xQueueGenericSend+0x4a>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e000      	b.n	8010ad8 <xQueueGenericSend+0x4c>
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d10d      	bne.n	8010af8 <xQueueGenericSend+0x6c>
    __asm volatile
 8010adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ae0:	b672      	cpsid	i
 8010ae2:	f383 8811 	msr	BASEPRI, r3
 8010ae6:	f3bf 8f6f 	isb	sy
 8010aea:	f3bf 8f4f 	dsb	sy
 8010aee:	b662      	cpsie	i
 8010af0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010af2:	bf00      	nop
 8010af4:	bf00      	nop
 8010af6:	e7fd      	b.n	8010af4 <xQueueGenericSend+0x68>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	2b02      	cmp	r3, #2
 8010afc:	d103      	bne.n	8010b06 <xQueueGenericSend+0x7a>
 8010afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	d101      	bne.n	8010b0a <xQueueGenericSend+0x7e>
 8010b06:	2301      	movs	r3, #1
 8010b08:	e000      	b.n	8010b0c <xQueueGenericSend+0x80>
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d10d      	bne.n	8010b2c <xQueueGenericSend+0xa0>
    __asm volatile
 8010b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b14:	b672      	cpsid	i
 8010b16:	f383 8811 	msr	BASEPRI, r3
 8010b1a:	f3bf 8f6f 	isb	sy
 8010b1e:	f3bf 8f4f 	dsb	sy
 8010b22:	b662      	cpsie	i
 8010b24:	623b      	str	r3, [r7, #32]
}
 8010b26:	bf00      	nop
 8010b28:	bf00      	nop
 8010b2a:	e7fd      	b.n	8010b28 <xQueueGenericSend+0x9c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b2c:	f002 f90e 	bl	8012d4c <xTaskGetSchedulerState>
 8010b30:	4603      	mov	r3, r0
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d102      	bne.n	8010b3c <xQueueGenericSend+0xb0>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d101      	bne.n	8010b40 <xQueueGenericSend+0xb4>
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	e000      	b.n	8010b42 <xQueueGenericSend+0xb6>
 8010b40:	2300      	movs	r3, #0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d10d      	bne.n	8010b62 <xQueueGenericSend+0xd6>
    __asm volatile
 8010b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b4a:	b672      	cpsid	i
 8010b4c:	f383 8811 	msr	BASEPRI, r3
 8010b50:	f3bf 8f6f 	isb	sy
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	b662      	cpsie	i
 8010b5a:	61fb      	str	r3, [r7, #28]
}
 8010b5c:	bf00      	nop
 8010b5e:	bf00      	nop
 8010b60:	e7fd      	b.n	8010b5e <xQueueGenericSend+0xd2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8010b62:	f003 fa5f 	bl	8014024 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d302      	bcc.n	8010b78 <xQueueGenericSend+0xec>
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d129      	bne.n	8010bcc <xQueueGenericSend+0x140>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b78:	683a      	ldr	r2, [r7, #0]
 8010b7a:	68b9      	ldr	r1, [r7, #8]
 8010b7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b7e:	f000 fc57 	bl	8011430 <prvCopyDataToQueue>
 8010b82:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d010      	beq.n	8010bae <xQueueGenericSend+0x122>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b8e:	3324      	adds	r3, #36	@ 0x24
 8010b90:	4618      	mov	r0, r3
 8010b92:	f001 fde7 	bl	8012764 <xTaskRemoveFromEventList>
 8010b96:	4603      	mov	r3, r0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d013      	beq.n	8010bc4 <xQueueGenericSend+0x138>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8010b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8010c9c <xQueueGenericSend+0x210>)
 8010b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ba2:	601a      	str	r2, [r3, #0]
 8010ba4:	f3bf 8f4f 	dsb	sy
 8010ba8:	f3bf 8f6f 	isb	sy
 8010bac:	e00a      	b.n	8010bc4 <xQueueGenericSend+0x138>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8010bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d007      	beq.n	8010bc4 <xQueueGenericSend+0x138>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8010bb4:	4b39      	ldr	r3, [pc, #228]	@ (8010c9c <xQueueGenericSend+0x210>)
 8010bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bba:	601a      	str	r2, [r3, #0]
 8010bbc:	f3bf 8f4f 	dsb	sy
 8010bc0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8010bc4:	f003 fa64 	bl	8014090 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8010bc8:	2301      	movs	r3, #1
 8010bca:	e063      	b.n	8010c94 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d103      	bne.n	8010bda <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8010bd2:	f003 fa5d 	bl	8014090 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	e05c      	b.n	8010c94 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 8010bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d106      	bne.n	8010bee <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8010be0:	f107 0314 	add.w	r3, r7, #20
 8010be4:	4618      	mov	r0, r3
 8010be6:	f001 fe99 	bl	801291c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8010bea:	2301      	movs	r3, #1
 8010bec:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8010bee:	f003 fa4f 	bl	8014090 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8010bf2:	f001 f9f7 	bl	8011fe4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8010bf6:	f003 fa15 	bl	8014024 <vPortEnterCritical>
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010c00:	b25b      	sxtb	r3, r3
 8010c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c06:	d103      	bne.n	8010c10 <xQueueGenericSend+0x184>
 8010c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c16:	b25b      	sxtb	r3, r3
 8010c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c1c:	d103      	bne.n	8010c26 <xQueueGenericSend+0x19a>
 8010c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c20:	2200      	movs	r2, #0
 8010c22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010c26:	f003 fa33 	bl	8014090 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c2a:	1d3a      	adds	r2, r7, #4
 8010c2c:	f107 0314 	add.w	r3, r7, #20
 8010c30:	4611      	mov	r1, r2
 8010c32:	4618      	mov	r0, r3
 8010c34:	f001 fe88 	bl	8012948 <xTaskCheckForTimeOut>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d124      	bne.n	8010c88 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010c3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c40:	f000 fcee 	bl	8011620 <prvIsQueueFull>
 8010c44:	4603      	mov	r3, r0
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d018      	beq.n	8010c7c <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c4c:	3310      	adds	r3, #16
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	4611      	mov	r1, r2
 8010c52:	4618      	mov	r0, r3
 8010c54:	f001 fd16 	bl	8012684 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8010c58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c5a:	f000 fc79 	bl	8011550 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8010c5e:	f001 f9cf 	bl	8012000 <xTaskResumeAll>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	f47f af7c 	bne.w	8010b62 <xQueueGenericSend+0xd6>
                {
                    taskYIELD_WITHIN_API();
 8010c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8010c9c <xQueueGenericSend+0x210>)
 8010c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c70:	601a      	str	r2, [r3, #0]
 8010c72:	f3bf 8f4f 	dsb	sy
 8010c76:	f3bf 8f6f 	isb	sy
 8010c7a:	e772      	b.n	8010b62 <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8010c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c7e:	f000 fc67 	bl	8011550 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8010c82:	f001 f9bd 	bl	8012000 <xTaskResumeAll>
 8010c86:	e76c      	b.n	8010b62 <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8010c88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c8a:	f000 fc61 	bl	8011550 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8010c8e:	f001 f9b7 	bl	8012000 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8010c92:	2300      	movs	r3, #0
        }
    }
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3738      	adds	r7, #56	@ 0x38
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	e000ed04 	.word	0xe000ed04

08010ca0 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b090      	sub	sp, #64	@ 0x40
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	63bb      	str	r3, [r7, #56]	@ 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8010cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d10d      	bne.n	8010cd0 <xQueueGiveFromISR+0x30>
    __asm volatile
 8010cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cb8:	b672      	cpsid	i
 8010cba:	f383 8811 	msr	BASEPRI, r3
 8010cbe:	f3bf 8f6f 	isb	sy
 8010cc2:	f3bf 8f4f 	dsb	sy
 8010cc6:	b662      	cpsie	i
 8010cc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010cca:	bf00      	nop
 8010ccc:	bf00      	nop
 8010cce:	e7fd      	b.n	8010ccc <xQueueGiveFromISR+0x2c>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8010cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00d      	beq.n	8010cf4 <xQueueGiveFromISR+0x54>
    __asm volatile
 8010cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cdc:	b672      	cpsid	i
 8010cde:	f383 8811 	msr	BASEPRI, r3
 8010ce2:	f3bf 8f6f 	isb	sy
 8010ce6:	f3bf 8f4f 	dsb	sy
 8010cea:	b662      	cpsie	i
 8010cec:	623b      	str	r3, [r7, #32]
}
 8010cee:	bf00      	nop
 8010cf0:	bf00      	nop
 8010cf2:	e7fd      	b.n	8010cf0 <xQueueGiveFromISR+0x50>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d103      	bne.n	8010d04 <xQueueGiveFromISR+0x64>
 8010cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cfe:	689b      	ldr	r3, [r3, #8]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d101      	bne.n	8010d08 <xQueueGiveFromISR+0x68>
 8010d04:	2301      	movs	r3, #1
 8010d06:	e000      	b.n	8010d0a <xQueueGiveFromISR+0x6a>
 8010d08:	2300      	movs	r3, #0
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d10d      	bne.n	8010d2a <xQueueGiveFromISR+0x8a>
    __asm volatile
 8010d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d12:	b672      	cpsid	i
 8010d14:	f383 8811 	msr	BASEPRI, r3
 8010d18:	f3bf 8f6f 	isb	sy
 8010d1c:	f3bf 8f4f 	dsb	sy
 8010d20:	b662      	cpsie	i
 8010d22:	61fb      	str	r3, [r7, #28]
}
 8010d24:	bf00      	nop
 8010d26:	bf00      	nop
 8010d28:	e7fd      	b.n	8010d26 <xQueueGiveFromISR+0x86>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d2a:	f003 fa69 	bl	8014200 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8010d2e:	f3ef 8211 	mrs	r2, BASEPRI
 8010d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d36:	b672      	cpsid	i
 8010d38:	f383 8811 	msr	BASEPRI, r3
 8010d3c:	f3bf 8f6f 	isb	sy
 8010d40:	f3bf 8f4f 	dsb	sy
 8010d44:	b662      	cpsie	i
 8010d46:	61ba      	str	r2, [r7, #24]
 8010d48:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8010d4a:	69bb      	ldr	r3, [r7, #24]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8010d4c:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d52:	633b      	str	r3, [r7, #48]	@ 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8010d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d245      	bcs.n	8010dea <xQueueGiveFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8010d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010d64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8010d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d6a:	1c5a      	adds	r2, r3, #1
 8010d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8010d70:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d78:	d112      	bne.n	8010da0 <xQueueGiveFromISR+0x100>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d030      	beq.n	8010de4 <xQueueGiveFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d84:	3324      	adds	r3, #36	@ 0x24
 8010d86:	4618      	mov	r0, r3
 8010d88:	f001 fcec 	bl	8012764 <xTaskRemoveFromEventList>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d028      	beq.n	8010de4 <xQueueGiveFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d025      	beq.n	8010de4 <xQueueGiveFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	601a      	str	r2, [r3, #0]
 8010d9e:	e021      	b.n	8010de4 <xQueueGiveFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8010da0:	f001 fa48 	bl	8012234 <uxTaskGetNumberOfTasks>
 8010da4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010da6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d919      	bls.n	8010de4 <xQueueGiveFromISR+0x144>
 8010db0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010db4:	2b7f      	cmp	r3, #127	@ 0x7f
 8010db6:	d10d      	bne.n	8010dd4 <xQueueGiveFromISR+0x134>
    __asm volatile
 8010db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dbc:	b672      	cpsid	i
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	b662      	cpsie	i
 8010dcc:	613b      	str	r3, [r7, #16]
}
 8010dce:	bf00      	nop
 8010dd0:	bf00      	nop
 8010dd2:	e7fd      	b.n	8010dd0 <xQueueGiveFromISR+0x130>
 8010dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010dd8:	3301      	adds	r3, #1
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	b25a      	sxtb	r2, r3
 8010dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8010de4:	2301      	movs	r3, #1
 8010de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010de8:	e001      	b.n	8010dee <xQueueGiveFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8010dea:	2300      	movs	r3, #0
 8010dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010df0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8010df8:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
 8010dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3740      	adds	r7, #64	@ 0x40
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b08c      	sub	sp, #48	@ 0x30
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	60f8      	str	r0, [r7, #12]
 8010e0c:	60b9      	str	r1, [r7, #8]
 8010e0e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8010e10:	2300      	movs	r3, #0
 8010e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8010e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d10d      	bne.n	8010e3a <xQueueReceive+0x36>
    __asm volatile
 8010e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e22:	b672      	cpsid	i
 8010e24:	f383 8811 	msr	BASEPRI, r3
 8010e28:	f3bf 8f6f 	isb	sy
 8010e2c:	f3bf 8f4f 	dsb	sy
 8010e30:	b662      	cpsie	i
 8010e32:	623b      	str	r3, [r7, #32]
}
 8010e34:	bf00      	nop
 8010e36:	bf00      	nop
 8010e38:	e7fd      	b.n	8010e36 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d103      	bne.n	8010e48 <xQueueReceive+0x44>
 8010e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d101      	bne.n	8010e4c <xQueueReceive+0x48>
 8010e48:	2301      	movs	r3, #1
 8010e4a:	e000      	b.n	8010e4e <xQueueReceive+0x4a>
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d10d      	bne.n	8010e6e <xQueueReceive+0x6a>
    __asm volatile
 8010e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e56:	b672      	cpsid	i
 8010e58:	f383 8811 	msr	BASEPRI, r3
 8010e5c:	f3bf 8f6f 	isb	sy
 8010e60:	f3bf 8f4f 	dsb	sy
 8010e64:	b662      	cpsie	i
 8010e66:	61fb      	str	r3, [r7, #28]
}
 8010e68:	bf00      	nop
 8010e6a:	bf00      	nop
 8010e6c:	e7fd      	b.n	8010e6a <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010e6e:	f001 ff6d 	bl	8012d4c <xTaskGetSchedulerState>
 8010e72:	4603      	mov	r3, r0
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d102      	bne.n	8010e7e <xQueueReceive+0x7a>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d101      	bne.n	8010e82 <xQueueReceive+0x7e>
 8010e7e:	2301      	movs	r3, #1
 8010e80:	e000      	b.n	8010e84 <xQueueReceive+0x80>
 8010e82:	2300      	movs	r3, #0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d10d      	bne.n	8010ea4 <xQueueReceive+0xa0>
    __asm volatile
 8010e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e8c:	b672      	cpsid	i
 8010e8e:	f383 8811 	msr	BASEPRI, r3
 8010e92:	f3bf 8f6f 	isb	sy
 8010e96:	f3bf 8f4f 	dsb	sy
 8010e9a:	b662      	cpsie	i
 8010e9c:	61bb      	str	r3, [r7, #24]
}
 8010e9e:	bf00      	nop
 8010ea0:	bf00      	nop
 8010ea2:	e7fd      	b.n	8010ea0 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8010ea4:	f003 f8be 	bl	8014024 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eac:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d01f      	beq.n	8010ef4 <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010eb4:	68b9      	ldr	r1, [r7, #8]
 8010eb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010eb8:	f000 fb24 	bl	8011504 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8010ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ebe:	1e5a      	subs	r2, r3, #1
 8010ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec6:	691b      	ldr	r3, [r3, #16]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d00f      	beq.n	8010eec <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ece:	3310      	adds	r3, #16
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f001 fc47 	bl	8012764 <xTaskRemoveFromEventList>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d007      	beq.n	8010eec <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8010edc:	4b3c      	ldr	r3, [pc, #240]	@ (8010fd0 <xQueueReceive+0x1cc>)
 8010ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ee2:	601a      	str	r2, [r3, #0]
 8010ee4:	f3bf 8f4f 	dsb	sy
 8010ee8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8010eec:	f003 f8d0 	bl	8014090 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	e069      	b.n	8010fc8 <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d103      	bne.n	8010f02 <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8010efa:	f003 f8c9 	bl	8014090 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8010efe:	2300      	movs	r3, #0
 8010f00:	e062      	b.n	8010fc8 <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8010f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d106      	bne.n	8010f16 <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8010f08:	f107 0310 	add.w	r3, r7, #16
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f001 fd05 	bl	801291c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8010f12:	2301      	movs	r3, #1
 8010f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8010f16:	f003 f8bb 	bl	8014090 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8010f1a:	f001 f863 	bl	8011fe4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8010f1e:	f003 f881 	bl	8014024 <vPortEnterCritical>
 8010f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010f28:	b25b      	sxtb	r3, r3
 8010f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f2e:	d103      	bne.n	8010f38 <xQueueReceive+0x134>
 8010f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f32:	2200      	movs	r2, #0
 8010f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010f3e:	b25b      	sxtb	r3, r3
 8010f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f44:	d103      	bne.n	8010f4e <xQueueReceive+0x14a>
 8010f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010f4e:	f003 f89f 	bl	8014090 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010f52:	1d3a      	adds	r2, r7, #4
 8010f54:	f107 0310 	add.w	r3, r7, #16
 8010f58:	4611      	mov	r1, r2
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f001 fcf4 	bl	8012948 <xTaskCheckForTimeOut>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d123      	bne.n	8010fae <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f68:	f000 fb44 	bl	80115f4 <prvIsQueueEmpty>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d017      	beq.n	8010fa2 <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f74:	3324      	adds	r3, #36	@ 0x24
 8010f76:	687a      	ldr	r2, [r7, #4]
 8010f78:	4611      	mov	r1, r2
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f001 fb82 	bl	8012684 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8010f80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f82:	f000 fae5 	bl	8011550 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8010f86:	f001 f83b 	bl	8012000 <xTaskResumeAll>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d189      	bne.n	8010ea4 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8010f90:	4b0f      	ldr	r3, [pc, #60]	@ (8010fd0 <xQueueReceive+0x1cc>)
 8010f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f96:	601a      	str	r2, [r3, #0]
 8010f98:	f3bf 8f4f 	dsb	sy
 8010f9c:	f3bf 8f6f 	isb	sy
 8010fa0:	e780      	b.n	8010ea4 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8010fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010fa4:	f000 fad4 	bl	8011550 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8010fa8:	f001 f82a 	bl	8012000 <xTaskResumeAll>
 8010fac:	e77a      	b.n	8010ea4 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8010fae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010fb0:	f000 face 	bl	8011550 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8010fb4:	f001 f824 	bl	8012000 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010fba:	f000 fb1b 	bl	80115f4 <prvIsQueueEmpty>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	f43f af6f 	beq.w	8010ea4 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8010fc6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3730      	adds	r7, #48	@ 0x30
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	e000ed04 	.word	0xe000ed04

08010fd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b08c      	sub	sp, #48	@ 0x30
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8010fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10d      	bne.n	801100c <xQueueSemaphoreTake+0x38>
    __asm volatile
 8010ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ff4:	b672      	cpsid	i
 8010ff6:	f383 8811 	msr	BASEPRI, r3
 8010ffa:	f3bf 8f6f 	isb	sy
 8010ffe:	f3bf 8f4f 	dsb	sy
 8011002:	b662      	cpsie	i
 8011004:	61bb      	str	r3, [r7, #24]
}
 8011006:	bf00      	nop
 8011008:	bf00      	nop
 801100a:	e7fd      	b.n	8011008 <xQueueSemaphoreTake+0x34>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 801100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00d      	beq.n	8011030 <xQueueSemaphoreTake+0x5c>
    __asm volatile
 8011014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011018:	b672      	cpsid	i
 801101a:	f383 8811 	msr	BASEPRI, r3
 801101e:	f3bf 8f6f 	isb	sy
 8011022:	f3bf 8f4f 	dsb	sy
 8011026:	b662      	cpsie	i
 8011028:	617b      	str	r3, [r7, #20]
}
 801102a:	bf00      	nop
 801102c:	bf00      	nop
 801102e:	e7fd      	b.n	801102c <xQueueSemaphoreTake+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011030:	f001 fe8c 	bl	8012d4c <xTaskGetSchedulerState>
 8011034:	4603      	mov	r3, r0
 8011036:	2b00      	cmp	r3, #0
 8011038:	d102      	bne.n	8011040 <xQueueSemaphoreTake+0x6c>
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d101      	bne.n	8011044 <xQueueSemaphoreTake+0x70>
 8011040:	2301      	movs	r3, #1
 8011042:	e000      	b.n	8011046 <xQueueSemaphoreTake+0x72>
 8011044:	2300      	movs	r3, #0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d10d      	bne.n	8011066 <xQueueSemaphoreTake+0x92>
    __asm volatile
 801104a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801104e:	b672      	cpsid	i
 8011050:	f383 8811 	msr	BASEPRI, r3
 8011054:	f3bf 8f6f 	isb	sy
 8011058:	f3bf 8f4f 	dsb	sy
 801105c:	b662      	cpsie	i
 801105e:	613b      	str	r3, [r7, #16]
}
 8011060:	bf00      	nop
 8011062:	bf00      	nop
 8011064:	e7fd      	b.n	8011062 <xQueueSemaphoreTake+0x8e>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8011066:	f002 ffdd 	bl	8014024 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801106c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801106e:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011070:	6a3b      	ldr	r3, [r7, #32]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d024      	beq.n	80110c0 <xQueueSemaphoreTake+0xec>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8011076:	6a3b      	ldr	r3, [r7, #32]
 8011078:	1e5a      	subs	r2, r3, #1
 801107a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801107c:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d104      	bne.n	8011090 <xQueueSemaphoreTake+0xbc>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011086:	f002 f88d 	bl	80131a4 <pvTaskIncrementMutexHeldCount>
 801108a:	4602      	mov	r2, r0
 801108c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801108e:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011092:	691b      	ldr	r3, [r3, #16]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d00f      	beq.n	80110b8 <xQueueSemaphoreTake+0xe4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801109a:	3310      	adds	r3, #16
 801109c:	4618      	mov	r0, r3
 801109e:	f001 fb61 	bl	8012764 <xTaskRemoveFromEventList>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d007      	beq.n	80110b8 <xQueueSemaphoreTake+0xe4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80110a8:	4b4c      	ldr	r3, [pc, #304]	@ (80111dc <xQueueSemaphoreTake+0x208>)
 80110aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80110b8:	f002 ffea 	bl	8014090 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 80110bc:	2301      	movs	r3, #1
 80110be:	e089      	b.n	80111d4 <xQueueSemaphoreTake+0x200>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d103      	bne.n	80110ce <xQueueSemaphoreTake+0xfa>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80110c6:	f002 ffe3 	bl	8014090 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80110ca:	2300      	movs	r3, #0
 80110cc:	e082      	b.n	80111d4 <xQueueSemaphoreTake+0x200>
                }
                else if( xEntryTimeSet == pdFALSE )
 80110ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d106      	bne.n	80110e2 <xQueueSemaphoreTake+0x10e>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80110d4:	f107 0308 	add.w	r3, r7, #8
 80110d8:	4618      	mov	r0, r3
 80110da:	f001 fc1f 	bl	801291c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80110de:	2301      	movs	r3, #1
 80110e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80110e2:	f002 ffd5 	bl	8014090 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80110e6:	f000 ff7d 	bl	8011fe4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80110ea:	f002 ff9b 	bl	8014024 <vPortEnterCritical>
 80110ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80110f4:	b25b      	sxtb	r3, r3
 80110f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110fa:	d103      	bne.n	8011104 <xQueueSemaphoreTake+0x130>
 80110fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110fe:	2200      	movs	r2, #0
 8011100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011106:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801110a:	b25b      	sxtb	r3, r3
 801110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011110:	d103      	bne.n	801111a <xQueueSemaphoreTake+0x146>
 8011112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011114:	2200      	movs	r2, #0
 8011116:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801111a:	f002 ffb9 	bl	8014090 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801111e:	463a      	mov	r2, r7
 8011120:	f107 0308 	add.w	r3, r7, #8
 8011124:	4611      	mov	r1, r2
 8011126:	4618      	mov	r0, r3
 8011128:	f001 fc0e 	bl	8012948 <xTaskCheckForTimeOut>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d132      	bne.n	8011198 <xQueueSemaphoreTake+0x1c4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011134:	f000 fa5e 	bl	80115f4 <prvIsQueueEmpty>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	d026      	beq.n	801118c <xQueueSemaphoreTake+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d109      	bne.n	801115a <xQueueSemaphoreTake+0x186>
                    {
                        taskENTER_CRITICAL();
 8011146:	f002 ff6d 	bl	8014024 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801114c:	689b      	ldr	r3, [r3, #8]
 801114e:	4618      	mov	r0, r3
 8011150:	f001 fe1a 	bl	8012d88 <xTaskPriorityInherit>
 8011154:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8011156:	f002 ff9b 	bl	8014090 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801115c:	3324      	adds	r3, #36	@ 0x24
 801115e:	683a      	ldr	r2, [r7, #0]
 8011160:	4611      	mov	r1, r2
 8011162:	4618      	mov	r0, r3
 8011164:	f001 fa8e 	bl	8012684 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8011168:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801116a:	f000 f9f1 	bl	8011550 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 801116e:	f000 ff47 	bl	8012000 <xTaskResumeAll>
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	f47f af76 	bne.w	8011066 <xQueueSemaphoreTake+0x92>
                {
                    taskYIELD_WITHIN_API();
 801117a:	4b18      	ldr	r3, [pc, #96]	@ (80111dc <xQueueSemaphoreTake+0x208>)
 801117c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011180:	601a      	str	r2, [r3, #0]
 8011182:	f3bf 8f4f 	dsb	sy
 8011186:	f3bf 8f6f 	isb	sy
 801118a:	e76c      	b.n	8011066 <xQueueSemaphoreTake+0x92>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 801118c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801118e:	f000 f9df 	bl	8011550 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8011192:	f000 ff35 	bl	8012000 <xTaskResumeAll>
 8011196:	e766      	b.n	8011066 <xQueueSemaphoreTake+0x92>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8011198:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801119a:	f000 f9d9 	bl	8011550 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 801119e:	f000 ff2f 	bl	8012000 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80111a4:	f000 fa26 	bl	80115f4 <prvIsQueueEmpty>
 80111a8:	4603      	mov	r3, r0
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f43f af5b 	beq.w	8011066 <xQueueSemaphoreTake+0x92>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80111b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d00d      	beq.n	80111d2 <xQueueSemaphoreTake+0x1fe>
                    {
                        taskENTER_CRITICAL();
 80111b6:	f002 ff35 	bl	8014024 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80111ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80111bc:	f000 f920 	bl	8011400 <prvGetDisinheritPriorityAfterTimeout>
 80111c0:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80111c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c4:	689b      	ldr	r3, [r3, #8]
 80111c6:	69f9      	ldr	r1, [r7, #28]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f001 ff29 	bl	8013020 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80111ce:	f002 ff5f 	bl	8014090 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80111d2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3730      	adds	r7, #48	@ 0x30
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	e000ed04 	.word	0xe000ed04

080111e0 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b08e      	sub	sp, #56	@ 0x38
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	60b9      	str	r1, [r7, #8]
 80111ea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80111ec:	2300      	movs	r3, #0
 80111ee:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueuePeek( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80111f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d10d      	bne.n	8011216 <xQueuePeek+0x36>
    __asm volatile
 80111fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111fe:	b672      	cpsid	i
 8011200:	f383 8811 	msr	BASEPRI, r3
 8011204:	f3bf 8f6f 	isb	sy
 8011208:	f3bf 8f4f 	dsb	sy
 801120c:	b662      	cpsie	i
 801120e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011210:	bf00      	nop
 8011212:	bf00      	nop
 8011214:	e7fd      	b.n	8011212 <xQueuePeek+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d103      	bne.n	8011224 <xQueuePeek+0x44>
 801121c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011220:	2b00      	cmp	r3, #0
 8011222:	d101      	bne.n	8011228 <xQueuePeek+0x48>
 8011224:	2301      	movs	r3, #1
 8011226:	e000      	b.n	801122a <xQueuePeek+0x4a>
 8011228:	2300      	movs	r3, #0
 801122a:	2b00      	cmp	r3, #0
 801122c:	d10d      	bne.n	801124a <xQueuePeek+0x6a>
    __asm volatile
 801122e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011232:	b672      	cpsid	i
 8011234:	f383 8811 	msr	BASEPRI, r3
 8011238:	f3bf 8f6f 	isb	sy
 801123c:	f3bf 8f4f 	dsb	sy
 8011240:	b662      	cpsie	i
 8011242:	623b      	str	r3, [r7, #32]
}
 8011244:	bf00      	nop
 8011246:	bf00      	nop
 8011248:	e7fd      	b.n	8011246 <xQueuePeek+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801124a:	f001 fd7f 	bl	8012d4c <xTaskGetSchedulerState>
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d102      	bne.n	801125a <xQueuePeek+0x7a>
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d101      	bne.n	801125e <xQueuePeek+0x7e>
 801125a:	2301      	movs	r3, #1
 801125c:	e000      	b.n	8011260 <xQueuePeek+0x80>
 801125e:	2300      	movs	r3, #0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d10d      	bne.n	8011280 <xQueuePeek+0xa0>
    __asm volatile
 8011264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011268:	b672      	cpsid	i
 801126a:	f383 8811 	msr	BASEPRI, r3
 801126e:	f3bf 8f6f 	isb	sy
 8011272:	f3bf 8f4f 	dsb	sy
 8011276:	b662      	cpsie	i
 8011278:	61fb      	str	r3, [r7, #28]
}
 801127a:	bf00      	nop
 801127c:	bf00      	nop
 801127e:	e7fd      	b.n	801127c <xQueuePeek+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8011280:	f002 fed0 	bl	8014024 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011288:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801128a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801128c:	2b00      	cmp	r3, #0
 801128e:	d021      	beq.n	80112d4 <xQueuePeek+0xf4>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8011290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	62bb      	str	r3, [r7, #40]	@ 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011296:	68b9      	ldr	r1, [r7, #8]
 8011298:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801129a:	f000 f933 	bl	8011504 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 801129e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112a2:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80112a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00f      	beq.n	80112cc <xQueuePeek+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80112ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112ae:	3324      	adds	r3, #36	@ 0x24
 80112b0:	4618      	mov	r0, r3
 80112b2:	f001 fa57 	bl	8012764 <xTaskRemoveFromEventList>
 80112b6:	4603      	mov	r3, r0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d007      	beq.n	80112cc <xQueuePeek+0xec>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 80112bc:	4b3c      	ldr	r3, [pc, #240]	@ (80113b0 <xQueuePeek+0x1d0>)
 80112be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112c2:	601a      	str	r2, [r3, #0]
 80112c4:	f3bf 8f4f 	dsb	sy
 80112c8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80112cc:	f002 fee0 	bl	8014090 <vPortExitCritical>

                traceRETURN_xQueuePeek( pdPASS );

                return pdPASS;
 80112d0:	2301      	movs	r3, #1
 80112d2:	e069      	b.n	80113a8 <xQueuePeek+0x1c8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d103      	bne.n	80112e2 <xQueuePeek+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80112da:	f002 fed9 	bl	8014090 <vPortExitCritical>

                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80112de:	2300      	movs	r3, #0
 80112e0:	e062      	b.n	80113a8 <xQueuePeek+0x1c8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80112e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d106      	bne.n	80112f6 <xQueuePeek+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80112e8:	f107 0314 	add.w	r3, r7, #20
 80112ec:	4618      	mov	r0, r3
 80112ee:	f001 fb15 	bl	801291c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80112f2:	2301      	movs	r3, #1
 80112f4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80112f6:	f002 fecb 	bl	8014090 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 80112fa:	f000 fe73 	bl	8011fe4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80112fe:	f002 fe91 	bl	8014024 <vPortEnterCritical>
 8011302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011308:	b25b      	sxtb	r3, r3
 801130a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801130e:	d103      	bne.n	8011318 <xQueuePeek+0x138>
 8011310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011312:	2200      	movs	r2, #0
 8011314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801131a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801131e:	b25b      	sxtb	r3, r3
 8011320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011324:	d103      	bne.n	801132e <xQueuePeek+0x14e>
 8011326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011328:	2200      	movs	r2, #0
 801132a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801132e:	f002 feaf 	bl	8014090 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011332:	1d3a      	adds	r2, r7, #4
 8011334:	f107 0314 	add.w	r3, r7, #20
 8011338:	4611      	mov	r1, r2
 801133a:	4618      	mov	r0, r3
 801133c:	f001 fb04 	bl	8012948 <xTaskCheckForTimeOut>
 8011340:	4603      	mov	r3, r0
 8011342:	2b00      	cmp	r3, #0
 8011344:	d123      	bne.n	801138e <xQueuePeek+0x1ae>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011346:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011348:	f000 f954 	bl	80115f4 <prvIsQueueEmpty>
 801134c:	4603      	mov	r3, r0
 801134e:	2b00      	cmp	r3, #0
 8011350:	d017      	beq.n	8011382 <xQueuePeek+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011354:	3324      	adds	r3, #36	@ 0x24
 8011356:	687a      	ldr	r2, [r7, #4]
 8011358:	4611      	mov	r1, r2
 801135a:	4618      	mov	r0, r3
 801135c:	f001 f992 	bl	8012684 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8011360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011362:	f000 f8f5 	bl	8011550 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8011366:	f000 fe4b 	bl	8012000 <xTaskResumeAll>
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d187      	bne.n	8011280 <xQueuePeek+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8011370:	4b0f      	ldr	r3, [pc, #60]	@ (80113b0 <xQueuePeek+0x1d0>)
 8011372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011376:	601a      	str	r2, [r3, #0]
 8011378:	f3bf 8f4f 	dsb	sy
 801137c:	f3bf 8f6f 	isb	sy
 8011380:	e77e      	b.n	8011280 <xQueuePeek+0xa0>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8011382:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011384:	f000 f8e4 	bl	8011550 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8011388:	f000 fe3a 	bl	8012000 <xTaskResumeAll>
 801138c:	e778      	b.n	8011280 <xQueuePeek+0xa0>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 801138e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011390:	f000 f8de 	bl	8011550 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8011394:	f000 fe34 	bl	8012000 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801139a:	f000 f92b 	bl	80115f4 <prvIsQueueEmpty>
 801139e:	4603      	mov	r3, r0
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	f43f af6d 	beq.w	8011280 <xQueuePeek+0xa0>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80113a6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	3738      	adds	r7, #56	@ 0x38
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	e000ed04 	.word	0xe000ed04

080113b4 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b084      	sub	sp, #16
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d10d      	bne.n	80113e2 <vQueueDelete+0x2e>
    __asm volatile
 80113c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113ca:	b672      	cpsid	i
 80113cc:	f383 8811 	msr	BASEPRI, r3
 80113d0:	f3bf 8f6f 	isb	sy
 80113d4:	f3bf 8f4f 	dsb	sy
 80113d8:	b662      	cpsie	i
 80113da:	60bb      	str	r3, [r7, #8]
}
 80113dc:	bf00      	nop
 80113de:	bf00      	nop
 80113e0:	e7fd      	b.n	80113de <vQueueDelete+0x2a>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 80113e2:	68f8      	ldr	r0, [r7, #12]
 80113e4:	f000 f986 	bl	80116f4 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d102      	bne.n	80113f8 <vQueueDelete+0x44>
        {
            vPortFree( pxQueue );
 80113f2:	68f8      	ldr	r0, [r7, #12]
 80113f4:	f003 f88e 	bl	8014514 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 80113f8:	bf00      	nop
 80113fa:	3710      	adds	r7, #16
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8011400:	b480      	push	{r7}
 8011402:	b085      	sub	sp, #20
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801140c:	2b00      	cmp	r3, #0
 801140e:	d006      	beq.n	801141e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	f1c3 0307 	rsb	r3, r3, #7
 801141a:	60fb      	str	r3, [r7, #12]
 801141c:	e001      	b.n	8011422 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801141e:	2300      	movs	r3, #0
 8011420:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8011422:	68fb      	ldr	r3, [r7, #12]
    }
 8011424:	4618      	mov	r0, r3
 8011426:	3714      	adds	r7, #20
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr

08011430 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b086      	sub	sp, #24
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 801143c:	2300      	movs	r3, #0
 801143e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011444:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801144a:	2b00      	cmp	r3, #0
 801144c:	d10d      	bne.n	801146a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d14d      	bne.n	80114f2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	689b      	ldr	r3, [r3, #8]
 801145a:	4618      	mov	r0, r3
 801145c:	f001 fd34 	bl	8012ec8 <xTaskPriorityDisinherit>
 8011460:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	2200      	movs	r2, #0
 8011466:	609a      	str	r2, [r3, #8]
 8011468:	e043      	b.n	80114f2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d119      	bne.n	80114a4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	6858      	ldr	r0, [r3, #4]
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011478:	461a      	mov	r2, r3
 801147a:	68b9      	ldr	r1, [r7, #8]
 801147c:	f010 feb1 	bl	80221e2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	685a      	ldr	r2, [r3, #4]
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011488:	441a      	add	r2, r3
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	685a      	ldr	r2, [r3, #4]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	689b      	ldr	r3, [r3, #8]
 8011496:	429a      	cmp	r2, r3
 8011498:	d32b      	bcc.n	80114f2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681a      	ldr	r2, [r3, #0]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	605a      	str	r2, [r3, #4]
 80114a2:	e026      	b.n	80114f2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	68d8      	ldr	r0, [r3, #12]
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114ac:	461a      	mov	r2, r3
 80114ae:	68b9      	ldr	r1, [r7, #8]
 80114b0:	f010 fe97 	bl	80221e2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	68da      	ldr	r2, [r3, #12]
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114bc:	425b      	negs	r3, r3
 80114be:	441a      	add	r2, r3
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	68da      	ldr	r2, [r3, #12]
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d207      	bcs.n	80114e0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	689a      	ldr	r2, [r3, #8]
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114d8:	425b      	negs	r3, r3
 80114da:	441a      	add	r2, r3
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2b02      	cmp	r3, #2
 80114e4:	d105      	bne.n	80114f2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80114e6:	693b      	ldr	r3, [r7, #16]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d002      	beq.n	80114f2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	3b01      	subs	r3, #1
 80114f0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	1c5a      	adds	r2, r3, #1
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80114fa:	697b      	ldr	r3, [r7, #20]
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3718      	adds	r7, #24
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b082      	sub	sp, #8
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
 801150c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011512:	2b00      	cmp	r3, #0
 8011514:	d018      	beq.n	8011548 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	68da      	ldr	r2, [r3, #12]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801151e:	441a      	add	r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	68da      	ldr	r2, [r3, #12]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	689b      	ldr	r3, [r3, #8]
 801152c:	429a      	cmp	r2, r3
 801152e:	d303      	bcc.n	8011538 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	68d9      	ldr	r1, [r3, #12]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011540:	461a      	mov	r2, r3
 8011542:	6838      	ldr	r0, [r7, #0]
 8011544:	f010 fe4d 	bl	80221e2 <memcpy>
    }
}
 8011548:	bf00      	nop
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}

08011550 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b084      	sub	sp, #16
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8011558:	f002 fd64 	bl	8014024 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011562:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8011564:	e011      	b.n	801158a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801156a:	2b00      	cmp	r3, #0
 801156c:	d012      	beq.n	8011594 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	3324      	adds	r3, #36	@ 0x24
 8011572:	4618      	mov	r0, r3
 8011574:	f001 f8f6 	bl	8012764 <xTaskRemoveFromEventList>
 8011578:	4603      	mov	r3, r0
 801157a:	2b00      	cmp	r3, #0
 801157c:	d001      	beq.n	8011582 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 801157e:	f001 fa47 	bl	8012a10 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8011582:	7bfb      	ldrb	r3, [r7, #15]
 8011584:	3b01      	subs	r3, #1
 8011586:	b2db      	uxtb	r3, r3
 8011588:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 801158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801158e:	2b00      	cmp	r3, #0
 8011590:	dce9      	bgt.n	8011566 <prvUnlockQueue+0x16>
 8011592:	e000      	b.n	8011596 <prvUnlockQueue+0x46>
                    break;
 8011594:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	22ff      	movs	r2, #255	@ 0xff
 801159a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 801159e:	f002 fd77 	bl	8014090 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80115a2:	f002 fd3f 	bl	8014024 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80115ac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80115ae:	e011      	b.n	80115d4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	691b      	ldr	r3, [r3, #16]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d012      	beq.n	80115de <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	3310      	adds	r3, #16
 80115bc:	4618      	mov	r0, r3
 80115be:	f001 f8d1 	bl	8012764 <xTaskRemoveFromEventList>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d001      	beq.n	80115cc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80115c8:	f001 fa22 	bl	8012a10 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80115cc:	7bbb      	ldrb	r3, [r7, #14]
 80115ce:	3b01      	subs	r3, #1
 80115d0:	b2db      	uxtb	r3, r3
 80115d2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80115d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	dce9      	bgt.n	80115b0 <prvUnlockQueue+0x60>
 80115dc:	e000      	b.n	80115e0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80115de:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	22ff      	movs	r2, #255	@ 0xff
 80115e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80115e8:	f002 fd52 	bl	8014090 <vPortExitCritical>
}
 80115ec:	bf00      	nop
 80115ee:	3710      	adds	r7, #16
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80115fc:	f002 fd12 	bl	8014024 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011604:	2b00      	cmp	r3, #0
 8011606:	d102      	bne.n	801160e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8011608:	2301      	movs	r3, #1
 801160a:	60fb      	str	r3, [r7, #12]
 801160c:	e001      	b.n	8011612 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 801160e:	2300      	movs	r3, #0
 8011610:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8011612:	f002 fd3d 	bl	8014090 <vPortExitCritical>

    return xReturn;
 8011616:	68fb      	ldr	r3, [r7, #12]
}
 8011618:	4618      	mov	r0, r3
 801161a:	3710      	adds	r7, #16
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b084      	sub	sp, #16
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8011628:	f002 fcfc 	bl	8014024 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011634:	429a      	cmp	r2, r3
 8011636:	d102      	bne.n	801163e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8011638:	2301      	movs	r3, #1
 801163a:	60fb      	str	r3, [r7, #12]
 801163c:	e001      	b.n	8011642 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 801163e:	2300      	movs	r3, #0
 8011640:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8011642:	f002 fd25 	bl	8014090 <vPortExitCritical>

    return xReturn;
 8011646:	68fb      	ldr	r3, [r7, #12]
}
 8011648:	4618      	mov	r0, r3
 801164a:	3710      	adds	r7, #16
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8011650:	b480      	push	{r7}
 8011652:	b087      	sub	sp, #28
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 801165a:	2300      	movs	r3, #0
 801165c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d10d      	bne.n	8011680 <vQueueAddToRegistry+0x30>
    __asm volatile
 8011664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011668:	b672      	cpsid	i
 801166a:	f383 8811 	msr	BASEPRI, r3
 801166e:	f3bf 8f6f 	isb	sy
 8011672:	f3bf 8f4f 	dsb	sy
 8011676:	b662      	cpsie	i
 8011678:	60fb      	str	r3, [r7, #12]
}
 801167a:	bf00      	nop
 801167c:	bf00      	nop
 801167e:	e7fd      	b.n	801167c <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d024      	beq.n	80116d0 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011686:	2300      	movs	r3, #0
 8011688:	617b      	str	r3, [r7, #20]
 801168a:	e01e      	b.n	80116ca <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 801168c:	4a18      	ldr	r2, [pc, #96]	@ (80116f0 <vQueueAddToRegistry+0xa0>)
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	00db      	lsls	r3, r3, #3
 8011692:	4413      	add	r3, r2
 8011694:	685b      	ldr	r3, [r3, #4]
 8011696:	687a      	ldr	r2, [r7, #4]
 8011698:	429a      	cmp	r2, r3
 801169a:	d105      	bne.n	80116a8 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	00db      	lsls	r3, r3, #3
 80116a0:	4a13      	ldr	r2, [pc, #76]	@ (80116f0 <vQueueAddToRegistry+0xa0>)
 80116a2:	4413      	add	r3, r2
 80116a4:	613b      	str	r3, [r7, #16]
                    break;
 80116a6:	e013      	b.n	80116d0 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d10a      	bne.n	80116c4 <vQueueAddToRegistry+0x74>
 80116ae:	4a10      	ldr	r2, [pc, #64]	@ (80116f0 <vQueueAddToRegistry+0xa0>)
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d104      	bne.n	80116c4 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	00db      	lsls	r3, r3, #3
 80116be:	4a0c      	ldr	r2, [pc, #48]	@ (80116f0 <vQueueAddToRegistry+0xa0>)
 80116c0:	4413      	add	r3, r2
 80116c2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	3301      	adds	r3, #1
 80116c8:	617b      	str	r3, [r7, #20]
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	2b07      	cmp	r3, #7
 80116ce:	d9dd      	bls.n	801168c <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d005      	beq.n	80116e2 <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	683a      	ldr	r2, [r7, #0]
 80116da:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 80116e2:	bf00      	nop
 80116e4:	371c      	adds	r7, #28
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop
 80116f0:	24019828 	.word	0x24019828

080116f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 80116f4:	b480      	push	{r7}
 80116f6:	b085      	sub	sp, #20
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d10d      	bne.n	801171e <vQueueUnregisterQueue+0x2a>
    __asm volatile
 8011702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011706:	b672      	cpsid	i
 8011708:	f383 8811 	msr	BASEPRI, r3
 801170c:	f3bf 8f6f 	isb	sy
 8011710:	f3bf 8f4f 	dsb	sy
 8011714:	b662      	cpsie	i
 8011716:	60bb      	str	r3, [r7, #8]
}
 8011718:	bf00      	nop
 801171a:	bf00      	nop
 801171c:	e7fd      	b.n	801171a <vQueueUnregisterQueue+0x26>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801171e:	2300      	movs	r3, #0
 8011720:	60fb      	str	r3, [r7, #12]
 8011722:	e016      	b.n	8011752 <vQueueUnregisterQueue+0x5e>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011724:	4a10      	ldr	r2, [pc, #64]	@ (8011768 <vQueueUnregisterQueue+0x74>)
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	00db      	lsls	r3, r3, #3
 801172a:	4413      	add	r3, r2
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	429a      	cmp	r2, r3
 8011732:	d10b      	bne.n	801174c <vQueueUnregisterQueue+0x58>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8011734:	4a0c      	ldr	r2, [pc, #48]	@ (8011768 <vQueueUnregisterQueue+0x74>)
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	2100      	movs	r1, #0
 801173a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801173e:	4a0a      	ldr	r2, [pc, #40]	@ (8011768 <vQueueUnregisterQueue+0x74>)
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	00db      	lsls	r3, r3, #3
 8011744:	4413      	add	r3, r2
 8011746:	2200      	movs	r2, #0
 8011748:	605a      	str	r2, [r3, #4]
                break;
 801174a:	e006      	b.n	801175a <vQueueUnregisterQueue+0x66>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	3301      	adds	r3, #1
 8011750:	60fb      	str	r3, [r7, #12]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	2b07      	cmp	r3, #7
 8011756:	d9e5      	bls.n	8011724 <vQueueUnregisterQueue+0x30>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 8011758:	bf00      	nop
 801175a:	bf00      	nop
 801175c:	3714      	adds	r7, #20
 801175e:	46bd      	mov	sp, r7
 8011760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011764:	4770      	bx	lr
 8011766:	bf00      	nop
 8011768:	24019828 	.word	0x24019828

0801176c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 801176c:	b580      	push	{r7, lr}
 801176e:	b086      	sub	sp, #24
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 801177c:	f002 fc52 	bl	8014024 <vPortEnterCritical>
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011786:	b25b      	sxtb	r3, r3
 8011788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801178c:	d103      	bne.n	8011796 <vQueueWaitForMessageRestricted+0x2a>
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	2200      	movs	r2, #0
 8011792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801179c:	b25b      	sxtb	r3, r3
 801179e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a2:	d103      	bne.n	80117ac <vQueueWaitForMessageRestricted+0x40>
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	2200      	movs	r2, #0
 80117a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80117ac:	f002 fc70 	bl	8014090 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d106      	bne.n	80117c6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	3324      	adds	r3, #36	@ 0x24
 80117bc:	687a      	ldr	r2, [r7, #4]
 80117be:	68b9      	ldr	r1, [r7, #8]
 80117c0:	4618      	mov	r0, r3
 80117c2:	f000 ff87 	bl	80126d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80117c6:	6978      	ldr	r0, [r7, #20]
 80117c8:	f7ff fec2 	bl	8011550 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80117cc:	bf00      	nop
 80117ce:	3718      	adds	r7, #24
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}

080117d4 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b08e      	sub	sp, #56	@ 0x38
 80117d8:	af04      	add	r7, sp, #16
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	607a      	str	r2, [r7, #4]
 80117e0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 80117e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d10d      	bne.n	8011804 <prvCreateStaticTask+0x30>
    __asm volatile
 80117e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117ec:	b672      	cpsid	i
 80117ee:	f383 8811 	msr	BASEPRI, r3
 80117f2:	f3bf 8f6f 	isb	sy
 80117f6:	f3bf 8f4f 	dsb	sy
 80117fa:	b662      	cpsie	i
 80117fc:	623b      	str	r3, [r7, #32]
}
 80117fe:	bf00      	nop
 8011800:	bf00      	nop
 8011802:	e7fd      	b.n	8011800 <prvCreateStaticTask+0x2c>
        configASSERT( pxTaskBuffer != NULL );
 8011804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011806:	2b00      	cmp	r3, #0
 8011808:	d10d      	bne.n	8011826 <prvCreateStaticTask+0x52>
    __asm volatile
 801180a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801180e:	b672      	cpsid	i
 8011810:	f383 8811 	msr	BASEPRI, r3
 8011814:	f3bf 8f6f 	isb	sy
 8011818:	f3bf 8f4f 	dsb	sy
 801181c:	b662      	cpsie	i
 801181e:	61fb      	str	r3, [r7, #28]
}
 8011820:	bf00      	nop
 8011822:	bf00      	nop
 8011824:	e7fd      	b.n	8011822 <prvCreateStaticTask+0x4e>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8011826:	235c      	movs	r3, #92	@ 0x5c
 8011828:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	2b5c      	cmp	r3, #92	@ 0x5c
 801182e:	d00d      	beq.n	801184c <prvCreateStaticTask+0x78>
    __asm volatile
 8011830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011834:	b672      	cpsid	i
 8011836:	f383 8811 	msr	BASEPRI, r3
 801183a:	f3bf 8f6f 	isb	sy
 801183e:	f3bf 8f4f 	dsb	sy
 8011842:	b662      	cpsie	i
 8011844:	61bb      	str	r3, [r7, #24]
}
 8011846:	bf00      	nop
 8011848:	bf00      	nop
 801184a:	e7fd      	b.n	8011848 <prvCreateStaticTask+0x74>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 801184c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801184e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011850:	2b00      	cmp	r3, #0
 8011852:	d01f      	beq.n	8011894 <prvCreateStaticTask+0xc0>
 8011854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011856:	2b00      	cmp	r3, #0
 8011858:	d01c      	beq.n	8011894 <prvCreateStaticTask+0xc0>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 801185a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801185c:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 801185e:	225c      	movs	r2, #92	@ 0x5c
 8011860:	2100      	movs	r1, #0
 8011862:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011864:	f010 fc13 	bl	802208e <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801186c:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011870:	2202      	movs	r2, #2
 8011872:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011876:	2300      	movs	r3, #0
 8011878:	9303      	str	r3, [sp, #12]
 801187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801187c:	9302      	str	r3, [sp, #8]
 801187e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011880:	9301      	str	r3, [sp, #4]
 8011882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011884:	9300      	str	r3, [sp, #0]
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	687a      	ldr	r2, [r7, #4]
 801188a:	68b9      	ldr	r1, [r7, #8]
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f000 f88f 	bl	80119b0 <prvInitialiseNewTask>
 8011892:	e001      	b.n	8011898 <prvCreateStaticTask+0xc4>
        }
        else
        {
            pxNewTCB = NULL;
 8011894:	2300      	movs	r3, #0
 8011896:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8011898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801189a:	4618      	mov	r0, r3
 801189c:	3728      	adds	r7, #40	@ 0x28
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80118a2:	b580      	push	{r7, lr}
 80118a4:	b08a      	sub	sp, #40	@ 0x28
 80118a6:	af04      	add	r7, sp, #16
 80118a8:	60f8      	str	r0, [r7, #12]
 80118aa:	60b9      	str	r1, [r7, #8]
 80118ac:	607a      	str	r2, [r7, #4]
 80118ae:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 80118b0:	2300      	movs	r3, #0
 80118b2:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 80118b4:	f107 0310 	add.w	r3, r7, #16
 80118b8:	9303      	str	r3, [sp, #12]
 80118ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118bc:	9302      	str	r3, [sp, #8]
 80118be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118c0:	9301      	str	r3, [sp, #4]
 80118c2:	6a3b      	ldr	r3, [r7, #32]
 80118c4:	9300      	str	r3, [sp, #0]
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	687a      	ldr	r2, [r7, #4]
 80118ca:	68b9      	ldr	r1, [r7, #8]
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f7ff ff81 	bl	80117d4 <prvCreateStaticTask>
 80118d2:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d002      	beq.n	80118e0 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80118da:	6978      	ldr	r0, [r7, #20]
 80118dc:	f000 f8fc 	bl	8011ad8 <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 80118e0:	693b      	ldr	r3, [r7, #16]
    }
 80118e2:	4618      	mov	r0, r3
 80118e4:	3718      	adds	r7, #24
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}

080118ea <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80118ea:	b580      	push	{r7, lr}
 80118ec:	b08a      	sub	sp, #40	@ 0x28
 80118ee:	af04      	add	r7, sp, #16
 80118f0:	60f8      	str	r0, [r7, #12]
 80118f2:	60b9      	str	r1, [r7, #8]
 80118f4:	607a      	str	r2, [r7, #4]
 80118f6:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	4618      	mov	r0, r3
 80118fe:	f002 fcc5 	bl	801428c <pvPortMalloc>
 8011902:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d013      	beq.n	8011932 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 801190a:	205c      	movs	r0, #92	@ 0x5c
 801190c:	f002 fcbe 	bl	801428c <pvPortMalloc>
 8011910:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d008      	beq.n	801192a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8011918:	225c      	movs	r2, #92	@ 0x5c
 801191a:	2100      	movs	r1, #0
 801191c:	6978      	ldr	r0, [r7, #20]
 801191e:	f010 fbb6 	bl	802208e <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	693a      	ldr	r2, [r7, #16]
 8011926:	631a      	str	r2, [r3, #48]	@ 0x30
 8011928:	e005      	b.n	8011936 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 801192a:	6938      	ldr	r0, [r7, #16]
 801192c:	f002 fdf2 	bl	8014514 <vPortFree>
 8011930:	e001      	b.n	8011936 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8011932:	2300      	movs	r3, #0
 8011934:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d011      	beq.n	8011960 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	2200      	movs	r2, #0
 8011940:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011944:	2300      	movs	r3, #0
 8011946:	9303      	str	r3, [sp, #12]
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	9302      	str	r3, [sp, #8]
 801194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801194e:	9301      	str	r3, [sp, #4]
 8011950:	6a3b      	ldr	r3, [r7, #32]
 8011952:	9300      	str	r3, [sp, #0]
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	687a      	ldr	r2, [r7, #4]
 8011958:	68b9      	ldr	r1, [r7, #8]
 801195a:	68f8      	ldr	r0, [r7, #12]
 801195c:	f000 f828 	bl	80119b0 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8011960:	697b      	ldr	r3, [r7, #20]
    }
 8011962:	4618      	mov	r0, r3
 8011964:	3718      	adds	r7, #24
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}

0801196a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 801196a:	b580      	push	{r7, lr}
 801196c:	b088      	sub	sp, #32
 801196e:	af02      	add	r7, sp, #8
 8011970:	60f8      	str	r0, [r7, #12]
 8011972:	60b9      	str	r1, [r7, #8]
 8011974:	607a      	str	r2, [r7, #4]
 8011976:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8011978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801197a:	9301      	str	r3, [sp, #4]
 801197c:	6a3b      	ldr	r3, [r7, #32]
 801197e:	9300      	str	r3, [sp, #0]
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	687a      	ldr	r2, [r7, #4]
 8011984:	68b9      	ldr	r1, [r7, #8]
 8011986:	68f8      	ldr	r0, [r7, #12]
 8011988:	f7ff ffaf 	bl	80118ea <prvCreateTask>
 801198c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d005      	beq.n	80119a0 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8011994:	6938      	ldr	r0, [r7, #16]
 8011996:	f000 f89f 	bl	8011ad8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 801199a:	2301      	movs	r3, #1
 801199c:	617b      	str	r3, [r7, #20]
 801199e:	e002      	b.n	80119a6 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80119a0:	f04f 33ff 	mov.w	r3, #4294967295
 80119a4:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80119a6:	697b      	ldr	r3, [r7, #20]
    }
 80119a8:	4618      	mov	r0, r3
 80119aa:	3718      	adds	r7, #24
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b088      	sub	sp, #32
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	60f8      	str	r0, [r7, #12]
 80119b8:	60b9      	str	r1, [r7, #8]
 80119ba:	607a      	str	r2, [r7, #4]
 80119bc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80119be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	461a      	mov	r2, r3
 80119c8:	21a5      	movs	r1, #165	@ 0xa5
 80119ca:	f010 fb60 	bl	802208e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80119ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80119d2:	6879      	ldr	r1, [r7, #4]
 80119d4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80119d8:	440b      	add	r3, r1
 80119da:	009b      	lsls	r3, r3, #2
 80119dc:	4413      	add	r3, r2
 80119de:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80119e0:	69bb      	ldr	r3, [r7, #24]
 80119e2:	f023 0307 	bic.w	r3, r3, #7
 80119e6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80119e8:	69bb      	ldr	r3, [r7, #24]
 80119ea:	f003 0307 	and.w	r3, r3, #7
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d00d      	beq.n	8011a0e <prvInitialiseNewTask+0x5e>
    __asm volatile
 80119f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119f6:	b672      	cpsid	i
 80119f8:	f383 8811 	msr	BASEPRI, r3
 80119fc:	f3bf 8f6f 	isb	sy
 8011a00:	f3bf 8f4f 	dsb	sy
 8011a04:	b662      	cpsie	i
 8011a06:	617b      	str	r3, [r7, #20]
}
 8011a08:	bf00      	nop
 8011a0a:	bf00      	nop
 8011a0c:	e7fd      	b.n	8011a0a <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d01e      	beq.n	8011a52 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011a14:	2300      	movs	r3, #0
 8011a16:	61fb      	str	r3, [r7, #28]
 8011a18:	e012      	b.n	8011a40 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011a1a:	68ba      	ldr	r2, [r7, #8]
 8011a1c:	69fb      	ldr	r3, [r7, #28]
 8011a1e:	4413      	add	r3, r2
 8011a20:	7819      	ldrb	r1, [r3, #0]
 8011a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	4413      	add	r3, r2
 8011a28:	3334      	adds	r3, #52	@ 0x34
 8011a2a:	460a      	mov	r2, r1
 8011a2c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8011a2e:	68ba      	ldr	r2, [r7, #8]
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	4413      	add	r3, r2
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d006      	beq.n	8011a48 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011a3a:	69fb      	ldr	r3, [r7, #28]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	61fb      	str	r3, [r7, #28]
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	2b0f      	cmp	r3, #15
 8011a44:	d9e9      	bls.n	8011a1a <prvInitialiseNewTask+0x6a>
 8011a46:	e000      	b.n	8011a4a <prvInitialiseNewTask+0x9a>
            {
                break;
 8011a48:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8011a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8011a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a54:	2b06      	cmp	r3, #6
 8011a56:	d90d      	bls.n	8011a74 <prvInitialiseNewTask+0xc4>
    __asm volatile
 8011a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a5c:	b672      	cpsid	i
 8011a5e:	f383 8811 	msr	BASEPRI, r3
 8011a62:	f3bf 8f6f 	isb	sy
 8011a66:	f3bf 8f4f 	dsb	sy
 8011a6a:	b662      	cpsie	i
 8011a6c:	613b      	str	r3, [r7, #16]
}
 8011a6e:	bf00      	nop
 8011a70:	bf00      	nop
 8011a72:	e7fd      	b.n	8011a70 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a76:	2b06      	cmp	r3, #6
 8011a78:	d901      	bls.n	8011a7e <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011a7a:	2306      	movs	r3, #6
 8011a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8011a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a82:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8011a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a88:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a8c:	3304      	adds	r3, #4
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7fe fdc0 	bl	8010614 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a96:	3318      	adds	r3, #24
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fe fdbb 	bl	8010614 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011aa2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8011aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aa6:	f1c3 0207 	rsb	r2, r3, #7
 8011aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ab2:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011ab4:	683a      	ldr	r2, [r7, #0]
 8011ab6:	68f9      	ldr	r1, [r7, #12]
 8011ab8:	69b8      	ldr	r0, [r7, #24]
 8011aba:	f002 f951 	bl	8013d60 <pxPortInitialiseStack>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ac2:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8011ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d002      	beq.n	8011ad0 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ace:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8011ad0:	bf00      	nop
 8011ad2:	3720      	adds	r7, #32
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b084      	sub	sp, #16
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8011ae0:	f002 faa0 	bl	8014024 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8011ae4:	4b41      	ldr	r3, [pc, #260]	@ (8011bec <prvAddNewTaskToReadyList+0x114>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	3301      	adds	r3, #1
 8011aea:	4a40      	ldr	r2, [pc, #256]	@ (8011bec <prvAddNewTaskToReadyList+0x114>)
 8011aec:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8011aee:	4b40      	ldr	r3, [pc, #256]	@ (8011bf0 <prvAddNewTaskToReadyList+0x118>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d109      	bne.n	8011b0a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8011af6:	4a3e      	ldr	r2, [pc, #248]	@ (8011bf0 <prvAddNewTaskToReadyList+0x118>)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011afc:	4b3b      	ldr	r3, [pc, #236]	@ (8011bec <prvAddNewTaskToReadyList+0x114>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b01      	cmp	r3, #1
 8011b02:	d110      	bne.n	8011b26 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8011b04:	f000 ffa8 	bl	8012a58 <prvInitialiseTaskLists>
 8011b08:	e00d      	b.n	8011b26 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8011b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8011bf4 <prvAddNewTaskToReadyList+0x11c>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d109      	bne.n	8011b26 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011b12:	4b37      	ldr	r3, [pc, #220]	@ (8011bf0 <prvAddNewTaskToReadyList+0x118>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d802      	bhi.n	8011b26 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8011b20:	4a33      	ldr	r2, [pc, #204]	@ (8011bf0 <prvAddNewTaskToReadyList+0x118>)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8011b26:	4b34      	ldr	r3, [pc, #208]	@ (8011bf8 <prvAddNewTaskToReadyList+0x120>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	4a32      	ldr	r2, [pc, #200]	@ (8011bf8 <prvAddNewTaskToReadyList+0x120>)
 8011b2e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011b30:	4b31      	ldr	r3, [pc, #196]	@ (8011bf8 <prvAddNewTaskToReadyList+0x120>)
 8011b32:	681a      	ldr	r2, [r3, #0]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	409a      	lsls	r2, r3
 8011b40:	4b2e      	ldr	r3, [pc, #184]	@ (8011bfc <prvAddNewTaskToReadyList+0x124>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	4313      	orrs	r3, r2
 8011b46:	4a2d      	ldr	r2, [pc, #180]	@ (8011bfc <prvAddNewTaskToReadyList+0x124>)
 8011b48:	6013      	str	r3, [r2, #0]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b4e:	492c      	ldr	r1, [pc, #176]	@ (8011c00 <prvAddNewTaskToReadyList+0x128>)
 8011b50:	4613      	mov	r3, r2
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4413      	add	r3, r2
 8011b56:	009b      	lsls	r3, r3, #2
 8011b58:	440b      	add	r3, r1
 8011b5a:	3304      	adds	r3, #4
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	60fb      	str	r3, [r7, #12]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	68fa      	ldr	r2, [r7, #12]
 8011b64:	609a      	str	r2, [r3, #8]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	689a      	ldr	r2, [r3, #8]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	60da      	str	r2, [r3, #12]
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	689b      	ldr	r3, [r3, #8]
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	3204      	adds	r2, #4
 8011b76:	605a      	str	r2, [r3, #4]
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	1d1a      	adds	r2, r3, #4
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	609a      	str	r2, [r3, #8]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b84:	4613      	mov	r3, r2
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	4413      	add	r3, r2
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8011c00 <prvAddNewTaskToReadyList+0x128>)
 8011b8e:	441a      	add	r2, r3
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	615a      	str	r2, [r3, #20]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b98:	4919      	ldr	r1, [pc, #100]	@ (8011c00 <prvAddNewTaskToReadyList+0x128>)
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	009b      	lsls	r3, r3, #2
 8011b9e:	4413      	add	r3, r2
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	440b      	add	r3, r1
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011baa:	1c59      	adds	r1, r3, #1
 8011bac:	4814      	ldr	r0, [pc, #80]	@ (8011c00 <prvAddNewTaskToReadyList+0x128>)
 8011bae:	4613      	mov	r3, r2
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	4413      	add	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4403      	add	r3, r0
 8011bb8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8011bba:	f002 fa69 	bl	8014090 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8011bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8011bf4 <prvAddNewTaskToReadyList+0x11c>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d00e      	beq.n	8011be4 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8011bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8011bf0 <prvAddNewTaskToReadyList+0x118>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d207      	bcs.n	8011be4 <prvAddNewTaskToReadyList+0x10c>
 8011bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8011c04 <prvAddNewTaskToReadyList+0x12c>)
 8011bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011bda:	601a      	str	r2, [r3, #0]
 8011bdc:	f3bf 8f4f 	dsb	sy
 8011be0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8011be4:	bf00      	nop
 8011be6:	3710      	adds	r7, #16
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	24019954 	.word	0x24019954
 8011bf0:	24019868 	.word	0x24019868
 8011bf4:	24019960 	.word	0x24019960
 8011bf8:	24019970 	.word	0x24019970
 8011bfc:	2401995c 	.word	0x2401995c
 8011c00:	2401986c 	.word	0x2401986c
 8011c04:	e000ed04 	.word	0xe000ed04

08011c08 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b086      	sub	sp, #24
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8011c10:	2300      	movs	r3, #0
 8011c12:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8011c14:	f002 fa06 	bl	8014024 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d102      	bne.n	8011c24 <vTaskDelete+0x1c>
 8011c1e:	4b42      	ldr	r3, [pc, #264]	@ (8011d28 <vTaskDelete+0x120>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	e000      	b.n	8011c26 <vTaskDelete+0x1e>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	3304      	adds	r3, #4
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7fe fd5b 	bl	80106e8 <uxListRemove>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d115      	bne.n	8011c64 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c3c:	493b      	ldr	r1, [pc, #236]	@ (8011d2c <vTaskDelete+0x124>)
 8011c3e:	4613      	mov	r3, r2
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	4413      	add	r3, r2
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	440b      	add	r3, r1
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d10a      	bne.n	8011c64 <vTaskDelete+0x5c>
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c52:	2201      	movs	r2, #1
 8011c54:	fa02 f303 	lsl.w	r3, r2, r3
 8011c58:	43da      	mvns	r2, r3
 8011c5a:	4b35      	ldr	r3, [pc, #212]	@ (8011d30 <vTaskDelete+0x128>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	4013      	ands	r3, r2
 8011c60:	4a33      	ldr	r2, [pc, #204]	@ (8011d30 <vTaskDelete+0x128>)
 8011c62:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d004      	beq.n	8011c76 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	3318      	adds	r3, #24
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7fe fd39 	bl	80106e8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8011c76:	4b2f      	ldr	r3, [pc, #188]	@ (8011d34 <vTaskDelete+0x12c>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8011d34 <vTaskDelete+0x12c>)
 8011c7e:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8011c80:	4b29      	ldr	r3, [pc, #164]	@ (8011d28 <vTaskDelete+0x120>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	693a      	ldr	r2, [r7, #16]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d101      	bne.n	8011c8e <vTaskDelete+0x86>
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	e000      	b.n	8011c90 <vTaskDelete+0x88>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8011c92:	4b29      	ldr	r3, [pc, #164]	@ (8011d38 <vTaskDelete+0x130>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d010      	beq.n	8011cbc <vTaskDelete+0xb4>
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d00d      	beq.n	8011cbc <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	3304      	adds	r3, #4
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	4825      	ldr	r0, [pc, #148]	@ (8011d3c <vTaskDelete+0x134>)
 8011ca8:	f7fe fcc1 	bl	801062e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8011cac:	4b24      	ldr	r3, [pc, #144]	@ (8011d40 <vTaskDelete+0x138>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	3301      	adds	r3, #1
 8011cb2:	4a23      	ldr	r2, [pc, #140]	@ (8011d40 <vTaskDelete+0x138>)
 8011cb4:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	617b      	str	r3, [r7, #20]
 8011cba:	e006      	b.n	8011cca <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8011cbc:	4b21      	ldr	r3, [pc, #132]	@ (8011d44 <vTaskDelete+0x13c>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	4a20      	ldr	r2, [pc, #128]	@ (8011d44 <vTaskDelete+0x13c>)
 8011cc4:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8011cc6:	f001 f815 	bl	8012cf4 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8011cca:	f002 f9e1 	bl	8014090 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8011cce:	697b      	ldr	r3, [r7, #20]
 8011cd0:	2b01      	cmp	r3, #1
 8011cd2:	d002      	beq.n	8011cda <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8011cd4:	6938      	ldr	r0, [r7, #16]
 8011cd6:	f000 ffdb 	bl	8012c90 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8011cda:	4b17      	ldr	r3, [pc, #92]	@ (8011d38 <vTaskDelete+0x130>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d01e      	beq.n	8011d20 <vTaskDelete+0x118>
            {
                if( pxTCB == pxCurrentTCB )
 8011ce2:	4b11      	ldr	r3, [pc, #68]	@ (8011d28 <vTaskDelete+0x120>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	693a      	ldr	r2, [r7, #16]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d119      	bne.n	8011d20 <vTaskDelete+0x118>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8011cec:	4b16      	ldr	r3, [pc, #88]	@ (8011d48 <vTaskDelete+0x140>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d00d      	beq.n	8011d10 <vTaskDelete+0x108>
    __asm volatile
 8011cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cf8:	b672      	cpsid	i
 8011cfa:	f383 8811 	msr	BASEPRI, r3
 8011cfe:	f3bf 8f6f 	isb	sy
 8011d02:	f3bf 8f4f 	dsb	sy
 8011d06:	b662      	cpsie	i
 8011d08:	60bb      	str	r3, [r7, #8]
}
 8011d0a:	bf00      	nop
 8011d0c:	bf00      	nop
 8011d0e:	e7fd      	b.n	8011d0c <vTaskDelete+0x104>
                    taskYIELD_WITHIN_API();
 8011d10:	4b0e      	ldr	r3, [pc, #56]	@ (8011d4c <vTaskDelete+0x144>)
 8011d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d16:	601a      	str	r2, [r3, #0]
 8011d18:	f3bf 8f4f 	dsb	sy
 8011d1c:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8011d20:	bf00      	nop
 8011d22:	3718      	adds	r7, #24
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	24019868 	.word	0x24019868
 8011d2c:	2401986c 	.word	0x2401986c
 8011d30:	2401995c 	.word	0x2401995c
 8011d34:	24019970 	.word	0x24019970
 8011d38:	24019960 	.word	0x24019960
 8011d3c:	2401993c 	.word	0x2401993c
 8011d40:	24019950 	.word	0x24019950
 8011d44:	24019954 	.word	0x24019954
 8011d48:	2401997c 	.word	0x2401997c
 8011d4c:	e000ed04 	.word	0xe000ed04

08011d50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b084      	sub	sp, #16
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d01a      	beq.n	8011d98 <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 8011d62:	f000 f93f 	bl	8011fe4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8011d66:	4b14      	ldr	r3, [pc, #80]	@ (8011db8 <vTaskDelay+0x68>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	2b01      	cmp	r3, #1
 8011d6c:	d00d      	beq.n	8011d8a <vTaskDelay+0x3a>
    __asm volatile
 8011d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d72:	b672      	cpsid	i
 8011d74:	f383 8811 	msr	BASEPRI, r3
 8011d78:	f3bf 8f6f 	isb	sy
 8011d7c:	f3bf 8f4f 	dsb	sy
 8011d80:	b662      	cpsie	i
 8011d82:	60bb      	str	r3, [r7, #8]
}
 8011d84:	bf00      	nop
 8011d86:	bf00      	nop
 8011d88:	e7fd      	b.n	8011d86 <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011d8a:	2100      	movs	r1, #0
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f001 fbf3 	bl	8013578 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8011d92:	f000 f935 	bl	8012000 <xTaskResumeAll>
 8011d96:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d107      	bne.n	8011dae <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 8011d9e:	4b07      	ldr	r3, [pc, #28]	@ (8011dbc <vTaskDelay+0x6c>)
 8011da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011da4:	601a      	str	r2, [r3, #0]
 8011da6:	f3bf 8f4f 	dsb	sy
 8011daa:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8011dae:	bf00      	nop
 8011db0:	3710      	adds	r7, #16
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	2401997c 	.word	0x2401997c
 8011dbc:	e000ed04 	.word	0xe000ed04

08011dc0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b08a      	sub	sp, #40	@ 0x28
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	623b      	str	r3, [r7, #32]

        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB );
 8011dcc:	6a3b      	ldr	r3, [r7, #32]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d10d      	bne.n	8011dee <eTaskGetState+0x2e>
    __asm volatile
 8011dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dd6:	b672      	cpsid	i
 8011dd8:	f383 8811 	msr	BASEPRI, r3
 8011ddc:	f3bf 8f6f 	isb	sy
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	b662      	cpsie	i
 8011de6:	60fb      	str	r3, [r7, #12]
}
 8011de8:	bf00      	nop
 8011dea:	bf00      	nop
 8011dec:	e7fd      	b.n	8011dea <eTaskGetState+0x2a>

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 8011dee:	4b20      	ldr	r3, [pc, #128]	@ (8011e70 <eTaskGetState+0xb0>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	6a3a      	ldr	r2, [r7, #32]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d103      	bne.n	8011e00 <eTaskGetState+0x40>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011dfe:	e031      	b.n	8011e64 <eTaskGetState+0xa4>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 8011e00:	f002 f910 	bl	8014024 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8011e04:	6a3b      	ldr	r3, [r7, #32]
 8011e06:	695b      	ldr	r3, [r3, #20]
 8011e08:	61fb      	str	r3, [r7, #28]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 8011e0a:	6a3b      	ldr	r3, [r7, #32]
 8011e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e0e:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 8011e10:	4b18      	ldr	r3, [pc, #96]	@ (8011e74 <eTaskGetState+0xb4>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8011e16:	4b18      	ldr	r3, [pc, #96]	@ (8011e78 <eTaskGetState+0xb8>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
 8011e1c:	f002 f938 	bl	8014090 <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 8011e20:	69bb      	ldr	r3, [r7, #24]
 8011e22:	4a16      	ldr	r2, [pc, #88]	@ (8011e7c <eTaskGetState+0xbc>)
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d103      	bne.n	8011e30 <eTaskGetState+0x70>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 8011e28:	2301      	movs	r3, #1
 8011e2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011e2e:	e019      	b.n	8011e64 <eTaskGetState+0xa4>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8011e30:	69fa      	ldr	r2, [r7, #28]
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d003      	beq.n	8011e40 <eTaskGetState+0x80>
 8011e38:	69fa      	ldr	r2, [r7, #28]
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d103      	bne.n	8011e48 <eTaskGetState+0x88>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 8011e40:	2302      	movs	r3, #2
 8011e42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011e46:	e00d      	b.n	8011e64 <eTaskGetState+0xa4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8011e48:	69fb      	ldr	r3, [r7, #28]
 8011e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8011e80 <eTaskGetState+0xc0>)
 8011e4c:	4293      	cmp	r3, r2
 8011e4e:	d002      	beq.n	8011e56 <eTaskGetState+0x96>
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d103      	bne.n	8011e5e <eTaskGetState+0x9e>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 8011e56:	2304      	movs	r3, #4
 8011e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011e5c:	e002      	b.n	8011e64 <eTaskGetState+0xa4>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 8011e5e:	2301      	movs	r3, #1
 8011e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        traceRETURN_eTaskGetState( eReturn );

        return eReturn;
 8011e64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3728      	adds	r7, #40	@ 0x28
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}
 8011e70:	24019868 	.word	0x24019868
 8011e74:	24019920 	.word	0x24019920
 8011e78:	24019924 	.word	0x24019924
 8011e7c:	24019928 	.word	0x24019928
 8011e80:	2401993c 	.word	0x2401993c

08011e84 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b090      	sub	sp, #64	@ 0x40
 8011e88:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8011e92:	2300      	movs	r3, #0
 8011e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e96:	e013      	b.n	8011ec0 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8011e98:	4a2b      	ldr	r2, [pc, #172]	@ (8011f48 <prvCreateIdleTasks+0xc4>)
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e9c:	4413      	add	r3, r2
 8011e9e:	7819      	ldrb	r1, [r3, #0]
 8011ea0:	f107 0210 	add.w	r2, r7, #16
 8011ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea6:	4413      	add	r3, r2
 8011ea8:	460a      	mov	r2, r1
 8011eaa:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8011eac:	f107 0210 	add.w	r2, r7, #16
 8011eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eb2:	4413      	add	r3, r2
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d006      	beq.n	8011ec8 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8011eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ec2:	2b0f      	cmp	r3, #15
 8011ec4:	dde8      	ble.n	8011e98 <prvCreateIdleTasks+0x14>
 8011ec6:	e000      	b.n	8011eca <prvCreateIdleTasks+0x46>
        {
            break;
 8011ec8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8011eca:	2300      	movs	r3, #0
 8011ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011ece:	e031      	b.n	8011f34 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8011ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8011f4c <prvCreateIdleTasks+0xc8>)
 8011ed2:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8011edc:	1d3a      	adds	r2, r7, #4
 8011ede:	f107 0108 	add.w	r1, r7, #8
 8011ee2:	f107 030c 	add.w	r3, r7, #12
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f001 fb9c 	bl	8013624 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	68fa      	ldr	r2, [r7, #12]
 8011ef2:	f107 0110 	add.w	r1, r7, #16
 8011ef6:	9202      	str	r2, [sp, #8]
 8011ef8:	9301      	str	r3, [sp, #4]
 8011efa:	2300      	movs	r3, #0
 8011efc:	9300      	str	r3, [sp, #0]
 8011efe:	2300      	movs	r3, #0
 8011f00:	4602      	mov	r2, r0
 8011f02:	6a38      	ldr	r0, [r7, #32]
 8011f04:	f7ff fccd 	bl	80118a2 <xTaskCreateStatic>
 8011f08:	4602      	mov	r2, r0
 8011f0a:	4911      	ldr	r1, [pc, #68]	@ (8011f50 <prvCreateIdleTasks+0xcc>)
 8011f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8011f12:	4a0f      	ldr	r2, [pc, #60]	@ (8011f50 <prvCreateIdleTasks+0xcc>)
 8011f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d002      	beq.n	8011f24 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f22:	e001      	b.n	8011f28 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8011f24:	2300      	movs	r3, #0
 8011f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8011f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d006      	beq.n	8011f3c <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8011f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f30:	3301      	adds	r3, #1
 8011f32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	ddca      	ble.n	8011ed0 <prvCreateIdleTasks+0x4c>
 8011f3a:	e000      	b.n	8011f3e <prvCreateIdleTasks+0xba>
        {
            break;
 8011f3c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8011f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3730      	adds	r7, #48	@ 0x30
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	080256d8 	.word	0x080256d8
 8011f4c:	08012a29 	.word	0x08012a29
 8011f50:	24019978 	.word	0x24019978

08011f54 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8011f5a:	f7ff ff93 	bl	8011e84 <prvCreateIdleTasks>
 8011f5e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	2b01      	cmp	r3, #1
 8011f64:	d102      	bne.n	8011f6c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8011f66:	f001 fb91 	bl	801368c <xTimerCreateTimerTask>
 8011f6a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d118      	bne.n	8011fa4 <vTaskStartScheduler+0x50>
    __asm volatile
 8011f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f76:	b672      	cpsid	i
 8011f78:	f383 8811 	msr	BASEPRI, r3
 8011f7c:	f3bf 8f6f 	isb	sy
 8011f80:	f3bf 8f4f 	dsb	sy
 8011f84:	b662      	cpsie	i
 8011f86:	60bb      	str	r3, [r7, #8]
}
 8011f88:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8011f8a:	4b12      	ldr	r3, [pc, #72]	@ (8011fd4 <vTaskStartScheduler+0x80>)
 8011f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f90:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8011f92:	4b11      	ldr	r3, [pc, #68]	@ (8011fd8 <vTaskStartScheduler+0x84>)
 8011f94:	2201      	movs	r2, #1
 8011f96:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011f98:	4b10      	ldr	r3, [pc, #64]	@ (8011fdc <vTaskStartScheduler+0x88>)
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8011f9e:	f001 ff71 	bl	8013e84 <xPortStartScheduler>
 8011fa2:	e011      	b.n	8011fc8 <vTaskStartScheduler+0x74>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011faa:	d10d      	bne.n	8011fc8 <vTaskStartScheduler+0x74>
    __asm volatile
 8011fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fb0:	b672      	cpsid	i
 8011fb2:	f383 8811 	msr	BASEPRI, r3
 8011fb6:	f3bf 8f6f 	isb	sy
 8011fba:	f3bf 8f4f 	dsb	sy
 8011fbe:	b662      	cpsie	i
 8011fc0:	607b      	str	r3, [r7, #4]
}
 8011fc2:	bf00      	nop
 8011fc4:	bf00      	nop
 8011fc6:	e7fd      	b.n	8011fc4 <vTaskStartScheduler+0x70>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8011fc8:	4b05      	ldr	r3, [pc, #20]	@ (8011fe0 <vTaskStartScheduler+0x8c>)
 8011fca:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8011fcc:	bf00      	nop
 8011fce:	3710      	adds	r7, #16
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}
 8011fd4:	24019974 	.word	0x24019974
 8011fd8:	24019960 	.word	0x24019960
 8011fdc:	24019958 	.word	0x24019958
 8011fe0:	080263c8 	.word	0x080263c8

08011fe4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8011fe8:	4b04      	ldr	r3, [pc, #16]	@ (8011ffc <vTaskSuspendAll+0x18>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	3301      	adds	r3, #1
 8011fee:	4a03      	ldr	r2, [pc, #12]	@ (8011ffc <vTaskSuspendAll+0x18>)
 8011ff0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8011ff2:	bf00      	nop
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffa:	4770      	bx	lr
 8011ffc:	2401997c 	.word	0x2401997c

08012000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b088      	sub	sp, #32
 8012004:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8012006:	2300      	movs	r3, #0
 8012008:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 801200a:	2300      	movs	r3, #0
 801200c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 801200e:	f002 f809 	bl	8014024 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8012012:	2300      	movs	r3, #0
 8012014:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8012016:	4b76      	ldr	r3, [pc, #472]	@ (80121f0 <xTaskResumeAll+0x1f0>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d10d      	bne.n	801203a <xTaskResumeAll+0x3a>
    __asm volatile
 801201e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012022:	b672      	cpsid	i
 8012024:	f383 8811 	msr	BASEPRI, r3
 8012028:	f3bf 8f6f 	isb	sy
 801202c:	f3bf 8f4f 	dsb	sy
 8012030:	b662      	cpsie	i
 8012032:	603b      	str	r3, [r7, #0]
}
 8012034:	bf00      	nop
 8012036:	bf00      	nop
 8012038:	e7fd      	b.n	8012036 <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 801203a:	4b6d      	ldr	r3, [pc, #436]	@ (80121f0 <xTaskResumeAll+0x1f0>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	3b01      	subs	r3, #1
 8012040:	4a6b      	ldr	r2, [pc, #428]	@ (80121f0 <xTaskResumeAll+0x1f0>)
 8012042:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8012044:	4b6a      	ldr	r3, [pc, #424]	@ (80121f0 <xTaskResumeAll+0x1f0>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	2b00      	cmp	r3, #0
 801204a:	f040 80ca 	bne.w	80121e2 <xTaskResumeAll+0x1e2>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801204e:	4b69      	ldr	r3, [pc, #420]	@ (80121f4 <xTaskResumeAll+0x1f4>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	f000 80c5 	beq.w	80121e2 <xTaskResumeAll+0x1e2>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012058:	e08e      	b.n	8012178 <xTaskResumeAll+0x178>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801205a:	4b67      	ldr	r3, [pc, #412]	@ (80121f8 <xTaskResumeAll+0x1f8>)
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	68db      	ldr	r3, [r3, #12]
 8012060:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8012062:	69fb      	ldr	r3, [r7, #28]
 8012064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012066:	60fb      	str	r3, [r7, #12]
 8012068:	69fb      	ldr	r3, [r7, #28]
 801206a:	69db      	ldr	r3, [r3, #28]
 801206c:	69fa      	ldr	r2, [r7, #28]
 801206e:	6a12      	ldr	r2, [r2, #32]
 8012070:	609a      	str	r2, [r3, #8]
 8012072:	69fb      	ldr	r3, [r7, #28]
 8012074:	6a1b      	ldr	r3, [r3, #32]
 8012076:	69fa      	ldr	r2, [r7, #28]
 8012078:	69d2      	ldr	r2, [r2, #28]
 801207a:	605a      	str	r2, [r3, #4]
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	685a      	ldr	r2, [r3, #4]
 8012080:	69fb      	ldr	r3, [r7, #28]
 8012082:	3318      	adds	r3, #24
 8012084:	429a      	cmp	r2, r3
 8012086:	d103      	bne.n	8012090 <xTaskResumeAll+0x90>
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	6a1a      	ldr	r2, [r3, #32]
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	605a      	str	r2, [r3, #4]
 8012090:	69fb      	ldr	r3, [r7, #28]
 8012092:	2200      	movs	r2, #0
 8012094:	629a      	str	r2, [r3, #40]	@ 0x28
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	1e5a      	subs	r2, r3, #1
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80120a0:	69fb      	ldr	r3, [r7, #28]
 80120a2:	695b      	ldr	r3, [r3, #20]
 80120a4:	60bb      	str	r3, [r7, #8]
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	689b      	ldr	r3, [r3, #8]
 80120aa:	69fa      	ldr	r2, [r7, #28]
 80120ac:	68d2      	ldr	r2, [r2, #12]
 80120ae:	609a      	str	r2, [r3, #8]
 80120b0:	69fb      	ldr	r3, [r7, #28]
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	69fa      	ldr	r2, [r7, #28]
 80120b6:	6892      	ldr	r2, [r2, #8]
 80120b8:	605a      	str	r2, [r3, #4]
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	685a      	ldr	r2, [r3, #4]
 80120be:	69fb      	ldr	r3, [r7, #28]
 80120c0:	3304      	adds	r3, #4
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d103      	bne.n	80120ce <xTaskResumeAll+0xce>
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	68da      	ldr	r2, [r3, #12]
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	605a      	str	r2, [r3, #4]
 80120ce:	69fb      	ldr	r3, [r7, #28]
 80120d0:	2200      	movs	r2, #0
 80120d2:	615a      	str	r2, [r3, #20]
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	1e5a      	subs	r2, r3, #1
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120e2:	2201      	movs	r2, #1
 80120e4:	409a      	lsls	r2, r3
 80120e6:	4b45      	ldr	r3, [pc, #276]	@ (80121fc <xTaskResumeAll+0x1fc>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	4313      	orrs	r3, r2
 80120ec:	4a43      	ldr	r2, [pc, #268]	@ (80121fc <xTaskResumeAll+0x1fc>)
 80120ee:	6013      	str	r3, [r2, #0]
 80120f0:	69fb      	ldr	r3, [r7, #28]
 80120f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120f4:	4942      	ldr	r1, [pc, #264]	@ (8012200 <xTaskResumeAll+0x200>)
 80120f6:	4613      	mov	r3, r2
 80120f8:	009b      	lsls	r3, r3, #2
 80120fa:	4413      	add	r3, r2
 80120fc:	009b      	lsls	r3, r3, #2
 80120fe:	440b      	add	r3, r1
 8012100:	3304      	adds	r3, #4
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	607b      	str	r3, [r7, #4]
 8012106:	69fb      	ldr	r3, [r7, #28]
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	609a      	str	r2, [r3, #8]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	689a      	ldr	r2, [r3, #8]
 8012110:	69fb      	ldr	r3, [r7, #28]
 8012112:	60da      	str	r2, [r3, #12]
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	689b      	ldr	r3, [r3, #8]
 8012118:	69fa      	ldr	r2, [r7, #28]
 801211a:	3204      	adds	r2, #4
 801211c:	605a      	str	r2, [r3, #4]
 801211e:	69fb      	ldr	r3, [r7, #28]
 8012120:	1d1a      	adds	r2, r3, #4
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	609a      	str	r2, [r3, #8]
 8012126:	69fb      	ldr	r3, [r7, #28]
 8012128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801212a:	4613      	mov	r3, r2
 801212c:	009b      	lsls	r3, r3, #2
 801212e:	4413      	add	r3, r2
 8012130:	009b      	lsls	r3, r3, #2
 8012132:	4a33      	ldr	r2, [pc, #204]	@ (8012200 <xTaskResumeAll+0x200>)
 8012134:	441a      	add	r2, r3
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	615a      	str	r2, [r3, #20]
 801213a:	69fb      	ldr	r3, [r7, #28]
 801213c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801213e:	4930      	ldr	r1, [pc, #192]	@ (8012200 <xTaskResumeAll+0x200>)
 8012140:	4613      	mov	r3, r2
 8012142:	009b      	lsls	r3, r3, #2
 8012144:	4413      	add	r3, r2
 8012146:	009b      	lsls	r3, r3, #2
 8012148:	440b      	add	r3, r1
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	69fa      	ldr	r2, [r7, #28]
 801214e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012150:	1c59      	adds	r1, r3, #1
 8012152:	482b      	ldr	r0, [pc, #172]	@ (8012200 <xTaskResumeAll+0x200>)
 8012154:	4613      	mov	r3, r2
 8012156:	009b      	lsls	r3, r3, #2
 8012158:	4413      	add	r3, r2
 801215a:	009b      	lsls	r3, r3, #2
 801215c:	4403      	add	r3, r0
 801215e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012160:	69fb      	ldr	r3, [r7, #28]
 8012162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012164:	4b27      	ldr	r3, [pc, #156]	@ (8012204 <xTaskResumeAll+0x204>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801216a:	429a      	cmp	r2, r3
 801216c:	d904      	bls.n	8012178 <xTaskResumeAll+0x178>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 801216e:	4a26      	ldr	r2, [pc, #152]	@ (8012208 <xTaskResumeAll+0x208>)
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	2101      	movs	r1, #1
 8012174:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012178:	4b1f      	ldr	r3, [pc, #124]	@ (80121f8 <xTaskResumeAll+0x1f8>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	f47f af6c 	bne.w	801205a <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8012182:	69fb      	ldr	r3, [r7, #28]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d001      	beq.n	801218c <xTaskResumeAll+0x18c>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8012188:	f000 fdb4 	bl	8012cf4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801218c:	4b1f      	ldr	r3, [pc, #124]	@ (801220c <xTaskResumeAll+0x20c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d012      	beq.n	80121be <xTaskResumeAll+0x1be>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8012198:	f000 f8d2 	bl	8012340 <xTaskIncrementTick>
 801219c:	4603      	mov	r3, r0
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d004      	beq.n	80121ac <xTaskResumeAll+0x1ac>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80121a2:	4a19      	ldr	r2, [pc, #100]	@ (8012208 <xTaskResumeAll+0x208>)
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	2101      	movs	r1, #1
 80121a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	3b01      	subs	r3, #1
 80121b0:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d1ef      	bne.n	8012198 <xTaskResumeAll+0x198>

                            xPendedTicks = 0;
 80121b8:	4b14      	ldr	r3, [pc, #80]	@ (801220c <xTaskResumeAll+0x20c>)
 80121ba:	2200      	movs	r2, #0
 80121bc:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80121be:	4a12      	ldr	r2, [pc, #72]	@ (8012208 <xTaskResumeAll+0x208>)
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d00b      	beq.n	80121e2 <xTaskResumeAll+0x1e2>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80121ca:	2301      	movs	r3, #1
 80121cc:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80121ce:	4b0d      	ldr	r3, [pc, #52]	@ (8012204 <xTaskResumeAll+0x204>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	4b0f      	ldr	r3, [pc, #60]	@ (8012210 <xTaskResumeAll+0x210>)
 80121d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80121d8:	601a      	str	r2, [r3, #0]
 80121da:	f3bf 8f4f 	dsb	sy
 80121de:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80121e2:	f001 ff55 	bl	8014090 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80121e6:	69bb      	ldr	r3, [r7, #24]
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3720      	adds	r7, #32
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	2401997c 	.word	0x2401997c
 80121f4:	24019954 	.word	0x24019954
 80121f8:	24019928 	.word	0x24019928
 80121fc:	2401995c 	.word	0x2401995c
 8012200:	2401986c 	.word	0x2401986c
 8012204:	24019868 	.word	0x24019868
 8012208:	24019968 	.word	0x24019968
 801220c:	24019964 	.word	0x24019964
 8012210:	e000ed04 	.word	0xe000ed04

08012214 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012214:	b480      	push	{r7}
 8012216:	b083      	sub	sp, #12
 8012218:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 801221a:	4b05      	ldr	r3, [pc, #20]	@ (8012230 <xTaskGetTickCount+0x1c>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8012220:	687b      	ldr	r3, [r7, #4]
}
 8012222:	4618      	mov	r0, r3
 8012224:	370c      	adds	r7, #12
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr
 801222e:	bf00      	nop
 8012230:	24019958 	.word	0x24019958

08012234 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8012234:	b480      	push	{r7}
 8012236:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8012238:	4b03      	ldr	r3, [pc, #12]	@ (8012248 <uxTaskGetNumberOfTasks+0x14>)
 801223a:	681b      	ldr	r3, [r3, #0]
}
 801223c:	4618      	mov	r0, r3
 801223e:	46bd      	mov	sp, r7
 8012240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012244:	4770      	bx	lr
 8012246:	bf00      	nop
 8012248:	24019954 	.word	0x24019954

0801224c <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
    {
 801224c:	b580      	push	{r7, lr}
 801224e:	b086      	sub	sp, #24
 8012250:	af00      	add	r7, sp, #0
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8012258:	2300      	movs	r3, #0
 801225a:	617b      	str	r3, [r7, #20]
 801225c:	2307      	movs	r3, #7
 801225e:	613b      	str	r3, [r7, #16]

        traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );

        vTaskSuspendAll();
 8012260:	f7ff fec0 	bl	8011fe4 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 8012264:	4b31      	ldr	r3, [pc, #196]	@ (801232c <uxTaskGetSystemState+0xe0>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	68ba      	ldr	r2, [r7, #8]
 801226a:	429a      	cmp	r2, r3
 801226c:	d357      	bcc.n	801231e <uxTaskGetSystemState+0xd2>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	3b01      	subs	r3, #1
 8012272:	613b      	str	r3, [r7, #16]
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 8012274:	697a      	ldr	r2, [r7, #20]
 8012276:	4613      	mov	r3, r2
 8012278:	00db      	lsls	r3, r3, #3
 801227a:	4413      	add	r3, r2
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	461a      	mov	r2, r3
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	1898      	adds	r0, r3, r2
 8012284:	693a      	ldr	r2, [r7, #16]
 8012286:	4613      	mov	r3, r2
 8012288:	009b      	lsls	r3, r3, #2
 801228a:	4413      	add	r3, r2
 801228c:	009b      	lsls	r3, r3, #2
 801228e:	4a28      	ldr	r2, [pc, #160]	@ (8012330 <uxTaskGetSystemState+0xe4>)
 8012290:	4413      	add	r3, r2
 8012292:	2201      	movs	r2, #1
 8012294:	4619      	mov	r1, r3
 8012296:	f000 fcab 	bl	8012bf0 <prvListTasksWithinSingleList>
 801229a:	4602      	mov	r2, r0
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	4413      	add	r3, r2
 80122a0:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d1e2      	bne.n	801226e <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 80122a8:	697a      	ldr	r2, [r7, #20]
 80122aa:	4613      	mov	r3, r2
 80122ac:	00db      	lsls	r3, r3, #3
 80122ae:	4413      	add	r3, r2
 80122b0:	009b      	lsls	r3, r3, #2
 80122b2:	461a      	mov	r2, r3
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	4413      	add	r3, r2
 80122b8:	4a1e      	ldr	r2, [pc, #120]	@ (8012334 <uxTaskGetSystemState+0xe8>)
 80122ba:	6811      	ldr	r1, [r2, #0]
 80122bc:	2202      	movs	r2, #2
 80122be:	4618      	mov	r0, r3
 80122c0:	f000 fc96 	bl	8012bf0 <prvListTasksWithinSingleList>
 80122c4:	4602      	mov	r2, r0
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	4413      	add	r3, r2
 80122ca:	617b      	str	r3, [r7, #20]
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 80122cc:	697a      	ldr	r2, [r7, #20]
 80122ce:	4613      	mov	r3, r2
 80122d0:	00db      	lsls	r3, r3, #3
 80122d2:	4413      	add	r3, r2
 80122d4:	009b      	lsls	r3, r3, #2
 80122d6:	461a      	mov	r2, r3
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	4413      	add	r3, r2
 80122dc:	4a16      	ldr	r2, [pc, #88]	@ (8012338 <uxTaskGetSystemState+0xec>)
 80122de:	6811      	ldr	r1, [r2, #0]
 80122e0:	2202      	movs	r2, #2
 80122e2:	4618      	mov	r0, r3
 80122e4:	f000 fc84 	bl	8012bf0 <prvListTasksWithinSingleList>
 80122e8:	4602      	mov	r2, r0
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	4413      	add	r3, r2
 80122ee:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task that has been deleted but not yet cleaned up. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 80122f0:	697a      	ldr	r2, [r7, #20]
 80122f2:	4613      	mov	r3, r2
 80122f4:	00db      	lsls	r3, r3, #3
 80122f6:	4413      	add	r3, r2
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	461a      	mov	r2, r3
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	4413      	add	r3, r2
 8012300:	2204      	movs	r2, #4
 8012302:	490e      	ldr	r1, [pc, #56]	@ (801233c <uxTaskGetSystemState+0xf0>)
 8012304:	4618      	mov	r0, r3
 8012306:	f000 fc73 	bl	8012bf0 <prvListTasksWithinSingleList>
 801230a:	4602      	mov	r2, r0
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	4413      	add	r3, r2
 8012310:	617b      	str	r3, [r7, #20]
                        #endif
                    }
                }
                #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
                {
                    if( pulTotalRunTime != NULL )
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d002      	beq.n	801231e <uxTaskGetSystemState+0xd2>
                    {
                        *pulTotalRunTime = 0;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2200      	movs	r2, #0
 801231c:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 801231e:	f7ff fe6f 	bl	8012000 <xTaskResumeAll>

        traceRETURN_uxTaskGetSystemState( uxTask );

        return uxTask;
 8012322:	697b      	ldr	r3, [r7, #20]
    }
 8012324:	4618      	mov	r0, r3
 8012326:	3718      	adds	r7, #24
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	24019954 	.word	0x24019954
 8012330:	2401986c 	.word	0x2401986c
 8012334:	24019920 	.word	0x24019920
 8012338:	24019924 	.word	0x24019924
 801233c:	2401993c 	.word	0x2401993c

08012340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b08a      	sub	sp, #40	@ 0x28
 8012344:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8012346:	2300      	movs	r3, #0
 8012348:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 801234a:	4b80      	ldr	r3, [pc, #512]	@ (801254c <xTaskIncrementTick+0x20c>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	2b00      	cmp	r3, #0
 8012350:	f040 80f1 	bne.w	8012536 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012354:	4b7e      	ldr	r3, [pc, #504]	@ (8012550 <xTaskIncrementTick+0x210>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	3301      	adds	r3, #1
 801235a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 801235c:	4a7c      	ldr	r2, [pc, #496]	@ (8012550 <xTaskIncrementTick+0x210>)
 801235e:	6a3b      	ldr	r3, [r7, #32]
 8012360:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8012362:	6a3b      	ldr	r3, [r7, #32]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d123      	bne.n	80123b0 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8012368:	4b7a      	ldr	r3, [pc, #488]	@ (8012554 <xTaskIncrementTick+0x214>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d00d      	beq.n	801238e <xTaskIncrementTick+0x4e>
    __asm volatile
 8012372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012376:	b672      	cpsid	i
 8012378:	f383 8811 	msr	BASEPRI, r3
 801237c:	f3bf 8f6f 	isb	sy
 8012380:	f3bf 8f4f 	dsb	sy
 8012384:	b662      	cpsie	i
 8012386:	607b      	str	r3, [r7, #4]
}
 8012388:	bf00      	nop
 801238a:	bf00      	nop
 801238c:	e7fd      	b.n	801238a <xTaskIncrementTick+0x4a>
 801238e:	4b71      	ldr	r3, [pc, #452]	@ (8012554 <xTaskIncrementTick+0x214>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	61fb      	str	r3, [r7, #28]
 8012394:	4b70      	ldr	r3, [pc, #448]	@ (8012558 <xTaskIncrementTick+0x218>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	4a6e      	ldr	r2, [pc, #440]	@ (8012554 <xTaskIncrementTick+0x214>)
 801239a:	6013      	str	r3, [r2, #0]
 801239c:	4a6e      	ldr	r2, [pc, #440]	@ (8012558 <xTaskIncrementTick+0x218>)
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	6013      	str	r3, [r2, #0]
 80123a2:	4b6e      	ldr	r3, [pc, #440]	@ (801255c <xTaskIncrementTick+0x21c>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	3301      	adds	r3, #1
 80123a8:	4a6c      	ldr	r2, [pc, #432]	@ (801255c <xTaskIncrementTick+0x21c>)
 80123aa:	6013      	str	r3, [r2, #0]
 80123ac:	f000 fca2 	bl	8012cf4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80123b0:	4b6b      	ldr	r3, [pc, #428]	@ (8012560 <xTaskIncrementTick+0x220>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	6a3a      	ldr	r2, [r7, #32]
 80123b6:	429a      	cmp	r2, r3
 80123b8:	f0c0 80a8 	bcc.w	801250c <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123bc:	4b65      	ldr	r3, [pc, #404]	@ (8012554 <xTaskIncrementTick+0x214>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d104      	bne.n	80123d0 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80123c6:	4b66      	ldr	r3, [pc, #408]	@ (8012560 <xTaskIncrementTick+0x220>)
 80123c8:	f04f 32ff 	mov.w	r2, #4294967295
 80123cc:	601a      	str	r2, [r3, #0]
                    break;
 80123ce:	e09d      	b.n	801250c <xTaskIncrementTick+0x1cc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80123d0:	4b60      	ldr	r3, [pc, #384]	@ (8012554 <xTaskIncrementTick+0x214>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	68db      	ldr	r3, [r3, #12]
 80123d8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80123da:	69bb      	ldr	r3, [r7, #24]
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80123e0:	6a3a      	ldr	r2, [r7, #32]
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	d203      	bcs.n	80123f0 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80123e8:	4a5d      	ldr	r2, [pc, #372]	@ (8012560 <xTaskIncrementTick+0x220>)
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	6013      	str	r3, [r2, #0]
                        break;
 80123ee:	e08d      	b.n	801250c <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80123f0:	69bb      	ldr	r3, [r7, #24]
 80123f2:	695b      	ldr	r3, [r3, #20]
 80123f4:	613b      	str	r3, [r7, #16]
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	689b      	ldr	r3, [r3, #8]
 80123fa:	69ba      	ldr	r2, [r7, #24]
 80123fc:	68d2      	ldr	r2, [r2, #12]
 80123fe:	609a      	str	r2, [r3, #8]
 8012400:	69bb      	ldr	r3, [r7, #24]
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	69ba      	ldr	r2, [r7, #24]
 8012406:	6892      	ldr	r2, [r2, #8]
 8012408:	605a      	str	r2, [r3, #4]
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	685a      	ldr	r2, [r3, #4]
 801240e:	69bb      	ldr	r3, [r7, #24]
 8012410:	3304      	adds	r3, #4
 8012412:	429a      	cmp	r2, r3
 8012414:	d103      	bne.n	801241e <xTaskIncrementTick+0xde>
 8012416:	69bb      	ldr	r3, [r7, #24]
 8012418:	68da      	ldr	r2, [r3, #12]
 801241a:	693b      	ldr	r3, [r7, #16]
 801241c:	605a      	str	r2, [r3, #4]
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	2200      	movs	r2, #0
 8012422:	615a      	str	r2, [r3, #20]
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	1e5a      	subs	r2, r3, #1
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801242e:	69bb      	ldr	r3, [r7, #24]
 8012430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012432:	2b00      	cmp	r3, #0
 8012434:	d01e      	beq.n	8012474 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801243a:	60fb      	str	r3, [r7, #12]
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	69db      	ldr	r3, [r3, #28]
 8012440:	69ba      	ldr	r2, [r7, #24]
 8012442:	6a12      	ldr	r2, [r2, #32]
 8012444:	609a      	str	r2, [r3, #8]
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	6a1b      	ldr	r3, [r3, #32]
 801244a:	69ba      	ldr	r2, [r7, #24]
 801244c:	69d2      	ldr	r2, [r2, #28]
 801244e:	605a      	str	r2, [r3, #4]
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	685a      	ldr	r2, [r3, #4]
 8012454:	69bb      	ldr	r3, [r7, #24]
 8012456:	3318      	adds	r3, #24
 8012458:	429a      	cmp	r2, r3
 801245a:	d103      	bne.n	8012464 <xTaskIncrementTick+0x124>
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	6a1a      	ldr	r2, [r3, #32]
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	605a      	str	r2, [r3, #4]
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	2200      	movs	r2, #0
 8012468:	629a      	str	r2, [r3, #40]	@ 0x28
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	1e5a      	subs	r2, r3, #1
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8012474:	69bb      	ldr	r3, [r7, #24]
 8012476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012478:	2201      	movs	r2, #1
 801247a:	409a      	lsls	r2, r3
 801247c:	4b39      	ldr	r3, [pc, #228]	@ (8012564 <xTaskIncrementTick+0x224>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	4313      	orrs	r3, r2
 8012482:	4a38      	ldr	r2, [pc, #224]	@ (8012564 <xTaskIncrementTick+0x224>)
 8012484:	6013      	str	r3, [r2, #0]
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801248a:	4937      	ldr	r1, [pc, #220]	@ (8012568 <xTaskIncrementTick+0x228>)
 801248c:	4613      	mov	r3, r2
 801248e:	009b      	lsls	r3, r3, #2
 8012490:	4413      	add	r3, r2
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	440b      	add	r3, r1
 8012496:	3304      	adds	r3, #4
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	60bb      	str	r3, [r7, #8]
 801249c:	69bb      	ldr	r3, [r7, #24]
 801249e:	68ba      	ldr	r2, [r7, #8]
 80124a0:	609a      	str	r2, [r3, #8]
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	689a      	ldr	r2, [r3, #8]
 80124a6:	69bb      	ldr	r3, [r7, #24]
 80124a8:	60da      	str	r2, [r3, #12]
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	689b      	ldr	r3, [r3, #8]
 80124ae:	69ba      	ldr	r2, [r7, #24]
 80124b0:	3204      	adds	r2, #4
 80124b2:	605a      	str	r2, [r3, #4]
 80124b4:	69bb      	ldr	r3, [r7, #24]
 80124b6:	1d1a      	adds	r2, r3, #4
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	609a      	str	r2, [r3, #8]
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124c0:	4613      	mov	r3, r2
 80124c2:	009b      	lsls	r3, r3, #2
 80124c4:	4413      	add	r3, r2
 80124c6:	009b      	lsls	r3, r3, #2
 80124c8:	4a27      	ldr	r2, [pc, #156]	@ (8012568 <xTaskIncrementTick+0x228>)
 80124ca:	441a      	add	r2, r3
 80124cc:	69bb      	ldr	r3, [r7, #24]
 80124ce:	615a      	str	r2, [r3, #20]
 80124d0:	69bb      	ldr	r3, [r7, #24]
 80124d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124d4:	4924      	ldr	r1, [pc, #144]	@ (8012568 <xTaskIncrementTick+0x228>)
 80124d6:	4613      	mov	r3, r2
 80124d8:	009b      	lsls	r3, r3, #2
 80124da:	4413      	add	r3, r2
 80124dc:	009b      	lsls	r3, r3, #2
 80124de:	440b      	add	r3, r1
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	69ba      	ldr	r2, [r7, #24]
 80124e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80124e6:	1c59      	adds	r1, r3, #1
 80124e8:	481f      	ldr	r0, [pc, #124]	@ (8012568 <xTaskIncrementTick+0x228>)
 80124ea:	4613      	mov	r3, r2
 80124ec:	009b      	lsls	r3, r3, #2
 80124ee:	4413      	add	r3, r2
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	4403      	add	r3, r0
 80124f4:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124fa:	4b1c      	ldr	r3, [pc, #112]	@ (801256c <xTaskIncrementTick+0x22c>)
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012500:	429a      	cmp	r2, r3
 8012502:	f67f af5b 	bls.w	80123bc <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 8012506:	2301      	movs	r3, #1
 8012508:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801250a:	e757      	b.n	80123bc <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 801250c:	4b17      	ldr	r3, [pc, #92]	@ (801256c <xTaskIncrementTick+0x22c>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012512:	4915      	ldr	r1, [pc, #84]	@ (8012568 <xTaskIncrementTick+0x228>)
 8012514:	4613      	mov	r3, r2
 8012516:	009b      	lsls	r3, r3, #2
 8012518:	4413      	add	r3, r2
 801251a:	009b      	lsls	r3, r3, #2
 801251c:	440b      	add	r3, r1
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	2b01      	cmp	r3, #1
 8012522:	d901      	bls.n	8012528 <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8012524:	2301      	movs	r3, #1
 8012526:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8012528:	4b11      	ldr	r3, [pc, #68]	@ (8012570 <xTaskIncrementTick+0x230>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d007      	beq.n	8012540 <xTaskIncrementTick+0x200>
                {
                    xSwitchRequired = pdTRUE;
 8012530:	2301      	movs	r3, #1
 8012532:	627b      	str	r3, [r7, #36]	@ 0x24
 8012534:	e004      	b.n	8012540 <xTaskIncrementTick+0x200>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8012536:	4b0f      	ldr	r3, [pc, #60]	@ (8012574 <xTaskIncrementTick+0x234>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	3301      	adds	r3, #1
 801253c:	4a0d      	ldr	r2, [pc, #52]	@ (8012574 <xTaskIncrementTick+0x234>)
 801253e:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8012540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012542:	4618      	mov	r0, r3
 8012544:	3728      	adds	r7, #40	@ 0x28
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}
 801254a:	bf00      	nop
 801254c:	2401997c 	.word	0x2401997c
 8012550:	24019958 	.word	0x24019958
 8012554:	24019920 	.word	0x24019920
 8012558:	24019924 	.word	0x24019924
 801255c:	2401996c 	.word	0x2401996c
 8012560:	24019974 	.word	0x24019974
 8012564:	2401995c 	.word	0x2401995c
 8012568:	2401986c 	.word	0x2401986c
 801256c:	24019868 	.word	0x24019868
 8012570:	24019968 	.word	0x24019968
 8012574:	24019964 	.word	0x24019964

08012578 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8012578:	b580      	push	{r7, lr}
 801257a:	b088      	sub	sp, #32
 801257c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 801257e:	4b3c      	ldr	r3, [pc, #240]	@ (8012670 <vTaskSwitchContext+0xf8>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d003      	beq.n	801258e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8012586:	4b3b      	ldr	r3, [pc, #236]	@ (8012674 <vTaskSwitchContext+0xfc>)
 8012588:	2201      	movs	r2, #1
 801258a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 801258c:	e06b      	b.n	8012666 <vTaskSwitchContext+0xee>
            xYieldPendings[ 0 ] = pdFALSE;
 801258e:	4b39      	ldr	r3, [pc, #228]	@ (8012674 <vTaskSwitchContext+0xfc>)
 8012590:	2200      	movs	r2, #0
 8012592:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 8012594:	4b38      	ldr	r3, [pc, #224]	@ (8012678 <vTaskSwitchContext+0x100>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801259a:	61fb      	str	r3, [r7, #28]
 801259c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80125a0:	61bb      	str	r3, [r7, #24]
 80125a2:	69fb      	ldr	r3, [r7, #28]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	69ba      	ldr	r2, [r7, #24]
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d111      	bne.n	80125d0 <vTaskSwitchContext+0x58>
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	3304      	adds	r3, #4
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	69ba      	ldr	r2, [r7, #24]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d10b      	bne.n	80125d0 <vTaskSwitchContext+0x58>
 80125b8:	69fb      	ldr	r3, [r7, #28]
 80125ba:	3308      	adds	r3, #8
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	69ba      	ldr	r2, [r7, #24]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d105      	bne.n	80125d0 <vTaskSwitchContext+0x58>
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	330c      	adds	r3, #12
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	69ba      	ldr	r2, [r7, #24]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d009      	beq.n	80125e4 <vTaskSwitchContext+0x6c>
 80125d0:	4b29      	ldr	r3, [pc, #164]	@ (8012678 <vTaskSwitchContext+0x100>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	3334      	adds	r3, #52	@ 0x34
 80125d6:	617b      	str	r3, [r7, #20]
 80125d8:	4b27      	ldr	r3, [pc, #156]	@ (8012678 <vTaskSwitchContext+0x100>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	6979      	ldr	r1, [r7, #20]
 80125de:	4618      	mov	r0, r3
 80125e0:	f7ee f9c0 	bl	8000964 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80125e4:	4b25      	ldr	r3, [pc, #148]	@ (801267c <vTaskSwitchContext+0x104>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	fab3 f383 	clz	r3, r3
 80125f0:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 80125f2:	79fb      	ldrb	r3, [r7, #7]
 80125f4:	f1c3 031f 	rsb	r3, r3, #31
 80125f8:	613b      	str	r3, [r7, #16]
 80125fa:	4921      	ldr	r1, [pc, #132]	@ (8012680 <vTaskSwitchContext+0x108>)
 80125fc:	693a      	ldr	r2, [r7, #16]
 80125fe:	4613      	mov	r3, r2
 8012600:	009b      	lsls	r3, r3, #2
 8012602:	4413      	add	r3, r2
 8012604:	009b      	lsls	r3, r3, #2
 8012606:	440b      	add	r3, r1
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d10d      	bne.n	801262a <vTaskSwitchContext+0xb2>
    __asm volatile
 801260e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012612:	b672      	cpsid	i
 8012614:	f383 8811 	msr	BASEPRI, r3
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	b662      	cpsie	i
 8012622:	603b      	str	r3, [r7, #0]
}
 8012624:	bf00      	nop
 8012626:	bf00      	nop
 8012628:	e7fd      	b.n	8012626 <vTaskSwitchContext+0xae>
 801262a:	693a      	ldr	r2, [r7, #16]
 801262c:	4613      	mov	r3, r2
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	4413      	add	r3, r2
 8012632:	009b      	lsls	r3, r3, #2
 8012634:	4a12      	ldr	r2, [pc, #72]	@ (8012680 <vTaskSwitchContext+0x108>)
 8012636:	4413      	add	r3, r2
 8012638:	60fb      	str	r3, [r7, #12]
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	685a      	ldr	r2, [r3, #4]
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	605a      	str	r2, [r3, #4]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	685a      	ldr	r2, [r3, #4]
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	3308      	adds	r3, #8
 801264c:	429a      	cmp	r2, r3
 801264e:	d103      	bne.n	8012658 <vTaskSwitchContext+0xe0>
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	68da      	ldr	r2, [r3, #12]
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	605a      	str	r2, [r3, #4]
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	68db      	ldr	r3, [r3, #12]
 801265e:	4a06      	ldr	r2, [pc, #24]	@ (8012678 <vTaskSwitchContext+0x100>)
 8012660:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8012662:	4b05      	ldr	r3, [pc, #20]	@ (8012678 <vTaskSwitchContext+0x100>)
 8012664:	681b      	ldr	r3, [r3, #0]
    }
 8012666:	bf00      	nop
 8012668:	3720      	adds	r7, #32
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	2401997c 	.word	0x2401997c
 8012674:	24019968 	.word	0x24019968
 8012678:	24019868 	.word	0x24019868
 801267c:	2401995c 	.word	0x2401995c
 8012680:	2401986c 	.word	0x2401986c

08012684 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b084      	sub	sp, #16
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d10d      	bne.n	80126b0 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 8012694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012698:	b672      	cpsid	i
 801269a:	f383 8811 	msr	BASEPRI, r3
 801269e:	f3bf 8f6f 	isb	sy
 80126a2:	f3bf 8f4f 	dsb	sy
 80126a6:	b662      	cpsie	i
 80126a8:	60fb      	str	r3, [r7, #12]
}
 80126aa:	bf00      	nop
 80126ac:	bf00      	nop
 80126ae:	e7fd      	b.n	80126ac <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80126b0:	4b07      	ldr	r3, [pc, #28]	@ (80126d0 <vTaskPlaceOnEventList+0x4c>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	3318      	adds	r3, #24
 80126b6:	4619      	mov	r1, r3
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7fd ffdc 	bl	8010676 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80126be:	2101      	movs	r1, #1
 80126c0:	6838      	ldr	r0, [r7, #0]
 80126c2:	f000 ff59 	bl	8013578 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80126c6:	bf00      	nop
 80126c8:	3710      	adds	r7, #16
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	24019868 	.word	0x24019868

080126d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b086      	sub	sp, #24
 80126d8:	af00      	add	r7, sp, #0
 80126da:	60f8      	str	r0, [r7, #12]
 80126dc:	60b9      	str	r1, [r7, #8]
 80126de:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d10d      	bne.n	8012702 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 80126e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126ea:	b672      	cpsid	i
 80126ec:	f383 8811 	msr	BASEPRI, r3
 80126f0:	f3bf 8f6f 	isb	sy
 80126f4:	f3bf 8f4f 	dsb	sy
 80126f8:	b662      	cpsie	i
 80126fa:	613b      	str	r3, [r7, #16]
}
 80126fc:	bf00      	nop
 80126fe:	bf00      	nop
 8012700:	e7fd      	b.n	80126fe <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	617b      	str	r3, [r7, #20]
 8012708:	4b15      	ldr	r3, [pc, #84]	@ (8012760 <vTaskPlaceOnEventListRestricted+0x8c>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	697a      	ldr	r2, [r7, #20]
 801270e:	61da      	str	r2, [r3, #28]
 8012710:	4b13      	ldr	r3, [pc, #76]	@ (8012760 <vTaskPlaceOnEventListRestricted+0x8c>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	697a      	ldr	r2, [r7, #20]
 8012716:	6892      	ldr	r2, [r2, #8]
 8012718:	621a      	str	r2, [r3, #32]
 801271a:	4b11      	ldr	r3, [pc, #68]	@ (8012760 <vTaskPlaceOnEventListRestricted+0x8c>)
 801271c:	681a      	ldr	r2, [r3, #0]
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	689b      	ldr	r3, [r3, #8]
 8012722:	3218      	adds	r2, #24
 8012724:	605a      	str	r2, [r3, #4]
 8012726:	4b0e      	ldr	r3, [pc, #56]	@ (8012760 <vTaskPlaceOnEventListRestricted+0x8c>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f103 0218 	add.w	r2, r3, #24
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	609a      	str	r2, [r3, #8]
 8012732:	4b0b      	ldr	r3, [pc, #44]	@ (8012760 <vTaskPlaceOnEventListRestricted+0x8c>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	68fa      	ldr	r2, [r7, #12]
 8012738:	629a      	str	r2, [r3, #40]	@ 0x28
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	1c5a      	adds	r2, r3, #1
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d002      	beq.n	8012750 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 801274a:	f04f 33ff 	mov.w	r3, #4294967295
 801274e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012750:	6879      	ldr	r1, [r7, #4]
 8012752:	68b8      	ldr	r0, [r7, #8]
 8012754:	f000 ff10 	bl	8013578 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8012758:	bf00      	nop
 801275a:	3718      	adds	r7, #24
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	24019868 	.word	0x24019868

08012764 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012764:	b480      	push	{r7}
 8012766:	b08b      	sub	sp, #44	@ 0x2c
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	68db      	ldr	r3, [r3, #12]
 8012772:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8012774:	6a3b      	ldr	r3, [r7, #32]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d10d      	bne.n	8012796 <xTaskRemoveFromEventList+0x32>
    __asm volatile
 801277a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801277e:	b672      	cpsid	i
 8012780:	f383 8811 	msr	BASEPRI, r3
 8012784:	f3bf 8f6f 	isb	sy
 8012788:	f3bf 8f4f 	dsb	sy
 801278c:	b662      	cpsie	i
 801278e:	60fb      	str	r3, [r7, #12]
}
 8012790:	bf00      	nop
 8012792:	bf00      	nop
 8012794:	e7fd      	b.n	8012792 <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8012796:	6a3b      	ldr	r3, [r7, #32]
 8012798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801279a:	61fb      	str	r3, [r7, #28]
 801279c:	6a3b      	ldr	r3, [r7, #32]
 801279e:	69db      	ldr	r3, [r3, #28]
 80127a0:	6a3a      	ldr	r2, [r7, #32]
 80127a2:	6a12      	ldr	r2, [r2, #32]
 80127a4:	609a      	str	r2, [r3, #8]
 80127a6:	6a3b      	ldr	r3, [r7, #32]
 80127a8:	6a1b      	ldr	r3, [r3, #32]
 80127aa:	6a3a      	ldr	r2, [r7, #32]
 80127ac:	69d2      	ldr	r2, [r2, #28]
 80127ae:	605a      	str	r2, [r3, #4]
 80127b0:	69fb      	ldr	r3, [r7, #28]
 80127b2:	685a      	ldr	r2, [r3, #4]
 80127b4:	6a3b      	ldr	r3, [r7, #32]
 80127b6:	3318      	adds	r3, #24
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d103      	bne.n	80127c4 <xTaskRemoveFromEventList+0x60>
 80127bc:	6a3b      	ldr	r3, [r7, #32]
 80127be:	6a1a      	ldr	r2, [r3, #32]
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	605a      	str	r2, [r3, #4]
 80127c4:	6a3b      	ldr	r3, [r7, #32]
 80127c6:	2200      	movs	r2, #0
 80127c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	1e5a      	subs	r2, r3, #1
 80127d0:	69fb      	ldr	r3, [r7, #28]
 80127d2:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80127d4:	4b4b      	ldr	r3, [pc, #300]	@ (8012904 <xTaskRemoveFromEventList+0x1a0>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d160      	bne.n	801289e <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80127dc:	6a3b      	ldr	r3, [r7, #32]
 80127de:	695b      	ldr	r3, [r3, #20]
 80127e0:	617b      	str	r3, [r7, #20]
 80127e2:	6a3b      	ldr	r3, [r7, #32]
 80127e4:	689b      	ldr	r3, [r3, #8]
 80127e6:	6a3a      	ldr	r2, [r7, #32]
 80127e8:	68d2      	ldr	r2, [r2, #12]
 80127ea:	609a      	str	r2, [r3, #8]
 80127ec:	6a3b      	ldr	r3, [r7, #32]
 80127ee:	68db      	ldr	r3, [r3, #12]
 80127f0:	6a3a      	ldr	r2, [r7, #32]
 80127f2:	6892      	ldr	r2, [r2, #8]
 80127f4:	605a      	str	r2, [r3, #4]
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	685a      	ldr	r2, [r3, #4]
 80127fa:	6a3b      	ldr	r3, [r7, #32]
 80127fc:	3304      	adds	r3, #4
 80127fe:	429a      	cmp	r2, r3
 8012800:	d103      	bne.n	801280a <xTaskRemoveFromEventList+0xa6>
 8012802:	6a3b      	ldr	r3, [r7, #32]
 8012804:	68da      	ldr	r2, [r3, #12]
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	605a      	str	r2, [r3, #4]
 801280a:	6a3b      	ldr	r3, [r7, #32]
 801280c:	2200      	movs	r2, #0
 801280e:	615a      	str	r2, [r3, #20]
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	1e5a      	subs	r2, r3, #1
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 801281a:	6a3b      	ldr	r3, [r7, #32]
 801281c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801281e:	2201      	movs	r2, #1
 8012820:	409a      	lsls	r2, r3
 8012822:	4b39      	ldr	r3, [pc, #228]	@ (8012908 <xTaskRemoveFromEventList+0x1a4>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	4313      	orrs	r3, r2
 8012828:	4a37      	ldr	r2, [pc, #220]	@ (8012908 <xTaskRemoveFromEventList+0x1a4>)
 801282a:	6013      	str	r3, [r2, #0]
 801282c:	6a3b      	ldr	r3, [r7, #32]
 801282e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012830:	4936      	ldr	r1, [pc, #216]	@ (801290c <xTaskRemoveFromEventList+0x1a8>)
 8012832:	4613      	mov	r3, r2
 8012834:	009b      	lsls	r3, r3, #2
 8012836:	4413      	add	r3, r2
 8012838:	009b      	lsls	r3, r3, #2
 801283a:	440b      	add	r3, r1
 801283c:	3304      	adds	r3, #4
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	613b      	str	r3, [r7, #16]
 8012842:	6a3b      	ldr	r3, [r7, #32]
 8012844:	693a      	ldr	r2, [r7, #16]
 8012846:	609a      	str	r2, [r3, #8]
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	689a      	ldr	r2, [r3, #8]
 801284c:	6a3b      	ldr	r3, [r7, #32]
 801284e:	60da      	str	r2, [r3, #12]
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	689b      	ldr	r3, [r3, #8]
 8012854:	6a3a      	ldr	r2, [r7, #32]
 8012856:	3204      	adds	r2, #4
 8012858:	605a      	str	r2, [r3, #4]
 801285a:	6a3b      	ldr	r3, [r7, #32]
 801285c:	1d1a      	adds	r2, r3, #4
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	609a      	str	r2, [r3, #8]
 8012862:	6a3b      	ldr	r3, [r7, #32]
 8012864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012866:	4613      	mov	r3, r2
 8012868:	009b      	lsls	r3, r3, #2
 801286a:	4413      	add	r3, r2
 801286c:	009b      	lsls	r3, r3, #2
 801286e:	4a27      	ldr	r2, [pc, #156]	@ (801290c <xTaskRemoveFromEventList+0x1a8>)
 8012870:	441a      	add	r2, r3
 8012872:	6a3b      	ldr	r3, [r7, #32]
 8012874:	615a      	str	r2, [r3, #20]
 8012876:	6a3b      	ldr	r3, [r7, #32]
 8012878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801287a:	4924      	ldr	r1, [pc, #144]	@ (801290c <xTaskRemoveFromEventList+0x1a8>)
 801287c:	4613      	mov	r3, r2
 801287e:	009b      	lsls	r3, r3, #2
 8012880:	4413      	add	r3, r2
 8012882:	009b      	lsls	r3, r3, #2
 8012884:	440b      	add	r3, r1
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	6a3a      	ldr	r2, [r7, #32]
 801288a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801288c:	1c59      	adds	r1, r3, #1
 801288e:	481f      	ldr	r0, [pc, #124]	@ (801290c <xTaskRemoveFromEventList+0x1a8>)
 8012890:	4613      	mov	r3, r2
 8012892:	009b      	lsls	r3, r3, #2
 8012894:	4413      	add	r3, r2
 8012896:	009b      	lsls	r3, r3, #2
 8012898:	4403      	add	r3, r0
 801289a:	6019      	str	r1, [r3, #0]
 801289c:	e01b      	b.n	80128d6 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801289e:	4b1c      	ldr	r3, [pc, #112]	@ (8012910 <xTaskRemoveFromEventList+0x1ac>)
 80128a0:	685b      	ldr	r3, [r3, #4]
 80128a2:	61bb      	str	r3, [r7, #24]
 80128a4:	6a3b      	ldr	r3, [r7, #32]
 80128a6:	69ba      	ldr	r2, [r7, #24]
 80128a8:	61da      	str	r2, [r3, #28]
 80128aa:	69bb      	ldr	r3, [r7, #24]
 80128ac:	689a      	ldr	r2, [r3, #8]
 80128ae:	6a3b      	ldr	r3, [r7, #32]
 80128b0:	621a      	str	r2, [r3, #32]
 80128b2:	69bb      	ldr	r3, [r7, #24]
 80128b4:	689b      	ldr	r3, [r3, #8]
 80128b6:	6a3a      	ldr	r2, [r7, #32]
 80128b8:	3218      	adds	r2, #24
 80128ba:	605a      	str	r2, [r3, #4]
 80128bc:	6a3b      	ldr	r3, [r7, #32]
 80128be:	f103 0218 	add.w	r2, r3, #24
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	609a      	str	r2, [r3, #8]
 80128c6:	6a3b      	ldr	r3, [r7, #32]
 80128c8:	4a11      	ldr	r2, [pc, #68]	@ (8012910 <xTaskRemoveFromEventList+0x1ac>)
 80128ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80128cc:	4b10      	ldr	r3, [pc, #64]	@ (8012910 <xTaskRemoveFromEventList+0x1ac>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	3301      	adds	r3, #1
 80128d2:	4a0f      	ldr	r2, [pc, #60]	@ (8012910 <xTaskRemoveFromEventList+0x1ac>)
 80128d4:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80128d6:	6a3b      	ldr	r3, [r7, #32]
 80128d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128da:	4b0e      	ldr	r3, [pc, #56]	@ (8012914 <xTaskRemoveFromEventList+0x1b0>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d905      	bls.n	80128f0 <xTaskRemoveFromEventList+0x18c>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80128e4:	2301      	movs	r3, #1
 80128e6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80128e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012918 <xTaskRemoveFromEventList+0x1b4>)
 80128ea:	2201      	movs	r2, #1
 80128ec:	601a      	str	r2, [r3, #0]
 80128ee:	e001      	b.n	80128f4 <xTaskRemoveFromEventList+0x190>
        }
        else
        {
            xReturn = pdFALSE;
 80128f0:	2300      	movs	r3, #0
 80128f2:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 80128f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	372c      	adds	r7, #44	@ 0x2c
 80128fa:	46bd      	mov	sp, r7
 80128fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012900:	4770      	bx	lr
 8012902:	bf00      	nop
 8012904:	2401997c 	.word	0x2401997c
 8012908:	2401995c 	.word	0x2401995c
 801290c:	2401986c 	.word	0x2401986c
 8012910:	24019928 	.word	0x24019928
 8012914:	24019868 	.word	0x24019868
 8012918:	24019968 	.word	0x24019968

0801291c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012924:	4b06      	ldr	r3, [pc, #24]	@ (8012940 <vTaskInternalSetTimeOutState+0x24>)
 8012926:	681a      	ldr	r2, [r3, #0]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 801292c:	4b05      	ldr	r3, [pc, #20]	@ (8012944 <vTaskInternalSetTimeOutState+0x28>)
 801292e:	681a      	ldr	r2, [r3, #0]
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8012934:	bf00      	nop
 8012936:	370c      	adds	r7, #12
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr
 8012940:	2401996c 	.word	0x2401996c
 8012944:	24019958 	.word	0x24019958

08012948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d10d      	bne.n	8012974 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8012958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801295c:	b672      	cpsid	i
 801295e:	f383 8811 	msr	BASEPRI, r3
 8012962:	f3bf 8f6f 	isb	sy
 8012966:	f3bf 8f4f 	dsb	sy
 801296a:	b662      	cpsie	i
 801296c:	613b      	str	r3, [r7, #16]
}
 801296e:	bf00      	nop
 8012970:	bf00      	nop
 8012972:	e7fd      	b.n	8012970 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d10d      	bne.n	8012996 <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 801297a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801297e:	b672      	cpsid	i
 8012980:	f383 8811 	msr	BASEPRI, r3
 8012984:	f3bf 8f6f 	isb	sy
 8012988:	f3bf 8f4f 	dsb	sy
 801298c:	b662      	cpsie	i
 801298e:	60fb      	str	r3, [r7, #12]
}
 8012990:	bf00      	nop
 8012992:	bf00      	nop
 8012994:	e7fd      	b.n	8012992 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 8012996:	f001 fb45 	bl	8014024 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 801299a:	4b1b      	ldr	r3, [pc, #108]	@ (8012a08 <xTaskCheckForTimeOut+0xc0>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	685b      	ldr	r3, [r3, #4]
 80129a4:	69ba      	ldr	r2, [r7, #24]
 80129a6:	1ad3      	subs	r3, r2, r3
 80129a8:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	4b17      	ldr	r3, [pc, #92]	@ (8012a0c <xTaskCheckForTimeOut+0xc4>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d00a      	beq.n	80129cc <xTaskCheckForTimeOut+0x84>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	69ba      	ldr	r2, [r7, #24]
 80129bc:	429a      	cmp	r2, r3
 80129be:	d305      	bcc.n	80129cc <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80129c0:	2301      	movs	r3, #1
 80129c2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	2200      	movs	r2, #0
 80129c8:	601a      	str	r2, [r3, #0]
 80129ca:	e015      	b.n	80129f8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	697a      	ldr	r2, [r7, #20]
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d20b      	bcs.n	80129ee <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	1ad2      	subs	r2, r2, r3
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f7ff ff9a 	bl	801291c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80129e8:	2300      	movs	r3, #0
 80129ea:	61fb      	str	r3, [r7, #28]
 80129ec:	e004      	b.n	80129f8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80129ee:	683b      	ldr	r3, [r7, #0]
 80129f0:	2200      	movs	r2, #0
 80129f2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80129f4:	2301      	movs	r3, #1
 80129f6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80129f8:	f001 fb4a 	bl	8014090 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80129fc:	69fb      	ldr	r3, [r7, #28]
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3720      	adds	r7, #32
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}
 8012a06:	bf00      	nop
 8012a08:	24019958 	.word	0x24019958
 8012a0c:	2401996c 	.word	0x2401996c

08012a10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012a10:	b480      	push	{r7}
 8012a12:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8012a14:	4b03      	ldr	r3, [pc, #12]	@ (8012a24 <vTaskMissedYield+0x14>)
 8012a16:	2201      	movs	r2, #1
 8012a18:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8012a1a:	bf00      	nop
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a22:	4770      	bx	lr
 8012a24:	24019968 	.word	0x24019968

08012a28 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8012a30:	f000 f84c 	bl	8012acc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8012a34:	4b06      	ldr	r3, [pc, #24]	@ (8012a50 <prvIdleTask+0x28>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d9f9      	bls.n	8012a30 <prvIdleTask+0x8>
            {
                taskYIELD();
 8012a3c:	4b05      	ldr	r3, [pc, #20]	@ (8012a54 <prvIdleTask+0x2c>)
 8012a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a42:	601a      	str	r2, [r3, #0]
 8012a44:	f3bf 8f4f 	dsb	sy
 8012a48:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8012a4c:	e7f0      	b.n	8012a30 <prvIdleTask+0x8>
 8012a4e:	bf00      	nop
 8012a50:	2401986c 	.word	0x2401986c
 8012a54:	e000ed04 	.word	0xe000ed04

08012a58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012a5e:	2300      	movs	r3, #0
 8012a60:	607b      	str	r3, [r7, #4]
 8012a62:	e00c      	b.n	8012a7e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012a64:	687a      	ldr	r2, [r7, #4]
 8012a66:	4613      	mov	r3, r2
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	4413      	add	r3, r2
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	4a10      	ldr	r2, [pc, #64]	@ (8012ab0 <prvInitialiseTaskLists+0x58>)
 8012a70:	4413      	add	r3, r2
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7fd fdae 	bl	80105d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	607b      	str	r3, [r7, #4]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2b06      	cmp	r3, #6
 8012a82:	d9ef      	bls.n	8012a64 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8012a84:	480b      	ldr	r0, [pc, #44]	@ (8012ab4 <prvInitialiseTaskLists+0x5c>)
 8012a86:	f7fd fda5 	bl	80105d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8012a8a:	480b      	ldr	r0, [pc, #44]	@ (8012ab8 <prvInitialiseTaskLists+0x60>)
 8012a8c:	f7fd fda2 	bl	80105d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8012a90:	480a      	ldr	r0, [pc, #40]	@ (8012abc <prvInitialiseTaskLists+0x64>)
 8012a92:	f7fd fd9f 	bl	80105d4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8012a96:	480a      	ldr	r0, [pc, #40]	@ (8012ac0 <prvInitialiseTaskLists+0x68>)
 8012a98:	f7fd fd9c 	bl	80105d4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8012a9c:	4b09      	ldr	r3, [pc, #36]	@ (8012ac4 <prvInitialiseTaskLists+0x6c>)
 8012a9e:	4a05      	ldr	r2, [pc, #20]	@ (8012ab4 <prvInitialiseTaskLists+0x5c>)
 8012aa0:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012aa2:	4b09      	ldr	r3, [pc, #36]	@ (8012ac8 <prvInitialiseTaskLists+0x70>)
 8012aa4:	4a04      	ldr	r2, [pc, #16]	@ (8012ab8 <prvInitialiseTaskLists+0x60>)
 8012aa6:	601a      	str	r2, [r3, #0]
}
 8012aa8:	bf00      	nop
 8012aaa:	3708      	adds	r7, #8
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	2401986c 	.word	0x2401986c
 8012ab4:	240198f8 	.word	0x240198f8
 8012ab8:	2401990c 	.word	0x2401990c
 8012abc:	24019928 	.word	0x24019928
 8012ac0:	2401993c 	.word	0x2401993c
 8012ac4:	24019920 	.word	0x24019920
 8012ac8:	24019924 	.word	0x24019924

08012acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ad2:	e019      	b.n	8012b08 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8012ad4:	f001 faa6 	bl	8014024 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012ad8:	4b10      	ldr	r3, [pc, #64]	@ (8012b1c <prvCheckTasksWaitingTermination+0x50>)
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	68db      	ldr	r3, [r3, #12]
 8012ade:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	3304      	adds	r3, #4
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7fd fdff 	bl	80106e8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8012aea:	4b0d      	ldr	r3, [pc, #52]	@ (8012b20 <prvCheckTasksWaitingTermination+0x54>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	3b01      	subs	r3, #1
 8012af0:	4a0b      	ldr	r2, [pc, #44]	@ (8012b20 <prvCheckTasksWaitingTermination+0x54>)
 8012af2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8012af4:	4b0b      	ldr	r3, [pc, #44]	@ (8012b24 <prvCheckTasksWaitingTermination+0x58>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	3b01      	subs	r3, #1
 8012afa:	4a0a      	ldr	r2, [pc, #40]	@ (8012b24 <prvCheckTasksWaitingTermination+0x58>)
 8012afc:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8012afe:	f001 fac7 	bl	8014090 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f000 f8c4 	bl	8012c90 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012b08:	4b06      	ldr	r3, [pc, #24]	@ (8012b24 <prvCheckTasksWaitingTermination+0x58>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d1e1      	bne.n	8012ad4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8012b10:	bf00      	nop
 8012b12:	bf00      	nop
 8012b14:	3708      	adds	r7, #8
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	2401993c 	.word	0x2401993c
 8012b20:	24019954 	.word	0x24019954
 8012b24:	24019950 	.word	0x24019950

08012b28 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b086      	sub	sp, #24
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	60b9      	str	r1, [r7, #8]
 8012b32:	607a      	str	r2, [r7, #4]
 8012b34:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d102      	bne.n	8012b42 <vTaskGetInfo+0x1a>
 8012b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8012be8 <vTaskGetInfo+0xc0>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	e000      	b.n	8012b44 <vTaskGetInfo+0x1c>
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = pxTCB;
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	697a      	ldr	r2, [r7, #20]
 8012b4a:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	609a      	str	r2, [r3, #8]
        }
        #endif

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	615a      	str	r2, [r3, #20]
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
        }
        #else
        {
            pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 8012b7c:	78fb      	ldrb	r3, [r7, #3]
 8012b7e:	2b05      	cmp	r3, #5
 8012b80:	d018      	beq.n	8012bb4 <vTaskGetInfo+0x8c>
        {
            if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8012b82:	4b19      	ldr	r3, [pc, #100]	@ (8012be8 <vTaskGetInfo+0xc0>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	697a      	ldr	r2, [r7, #20]
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d103      	bne.n	8012b94 <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	731a      	strb	r2, [r3, #12]
 8012b92:	e016      	b.n	8012bc2 <vTaskGetInfo+0x9a>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	78fa      	ldrb	r2, [r7, #3]
 8012b98:	731a      	strb	r2, [r3, #12]
                #endif /* INCLUDE_vTaskSuspend */

                /* Tasks can be in pending ready list and other state list at the
                 * same time. These tasks are in ready state no matter what state
                 * list the task is in. */
                taskENTER_CRITICAL();
 8012b9a:	f001 fa43 	bl	8014024 <vPortEnterCritical>
                {
                    if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ba2:	4a12      	ldr	r2, [pc, #72]	@ (8012bec <vTaskGetInfo+0xc4>)
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	d102      	bne.n	8012bae <vTaskGetInfo+0x86>
                    {
                        pxTaskStatus->eCurrentState = eReady;
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	2201      	movs	r2, #1
 8012bac:	731a      	strb	r2, [r3, #12]
                    }
                }
                taskEXIT_CRITICAL();
 8012bae:	f001 fa6f 	bl	8014090 <vPortExitCritical>
 8012bb2:	e006      	b.n	8012bc2 <vTaskGetInfo+0x9a>
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8012bb4:	6978      	ldr	r0, [r7, #20]
 8012bb6:	f7ff f903 	bl	8011dc0 <eTaskGetState>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d008      	beq.n	8012bda <vTaskGetInfo+0xb2>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f000 f844 	bl	8012c5a <prvTaskCheckFreeStackSpace>
 8012bd2:	4602      	mov	r2, r0
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	621a      	str	r2, [r3, #32]
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }

        traceRETURN_vTaskGetInfo();
    }
 8012bd8:	e002      	b.n	8012be0 <vTaskGetInfo+0xb8>
            pxTaskStatus->usStackHighWaterMark = 0;
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	621a      	str	r2, [r3, #32]
    }
 8012be0:	bf00      	nop
 8012be2:	3718      	adds	r7, #24
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	24019868 	.word	0x24019868
 8012bec:	24019928 	.word	0x24019928

08012bf0 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b088      	sub	sp, #32
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	60f8      	str	r0, [r7, #12]
 8012bf8:	60b9      	str	r1, [r7, #8]
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 8012bfe:	2300      	movs	r3, #0
 8012c00:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	3308      	adds	r3, #8
 8012c06:	617b      	str	r3, [r7, #20]
        ListItem_t * pxIterator;
        TCB_t * pxTCB = NULL;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	613b      	str	r3, [r7, #16]

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d01d      	beq.n	8012c50 <prvListTasksWithinSingleList+0x60>
        {
            /* Populate an TaskStatus_t structure within the
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	68db      	ldr	r3, [r3, #12]
 8012c18:	61bb      	str	r3, [r7, #24]
 8012c1a:	e015      	b.n	8012c48 <prvListTasksWithinSingleList+0x58>
            {
                /* MISRA Ref 11.5.3 [Void pointer assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
 8012c1c:	69bb      	ldr	r3, [r7, #24]
 8012c1e:	68db      	ldr	r3, [r3, #12]
 8012c20:	613b      	str	r3, [r7, #16]

                vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8012c22:	69fa      	ldr	r2, [r7, #28]
 8012c24:	4613      	mov	r3, r2
 8012c26:	00db      	lsls	r3, r3, #3
 8012c28:	4413      	add	r3, r2
 8012c2a:	009b      	lsls	r3, r3, #2
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	1899      	adds	r1, r3, r2
 8012c32:	79fb      	ldrb	r3, [r7, #7]
 8012c34:	2201      	movs	r2, #1
 8012c36:	6938      	ldr	r0, [r7, #16]
 8012c38:	f7ff ff76 	bl	8012b28 <vTaskGetInfo>
                uxTask++;
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	3301      	adds	r3, #1
 8012c40:	61fb      	str	r3, [r7, #28]
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 8012c42:	69bb      	ldr	r3, [r7, #24]
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	61bb      	str	r3, [r7, #24]
 8012c48:	69ba      	ldr	r2, [r7, #24]
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d1e5      	bne.n	8012c1c <prvListTasksWithinSingleList+0x2c>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 8012c50:	69fb      	ldr	r3, [r7, #28]
    }
 8012c52:	4618      	mov	r0, r3
 8012c54:	3720      	adds	r7, #32
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}

08012c5a <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8012c5a:	b480      	push	{r7}
 8012c5c:	b085      	sub	sp, #20
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 8012c62:	2300      	movs	r3, #0
 8012c64:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012c66:	e005      	b.n	8012c74 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	607b      	str	r3, [r7, #4]
            uxCount++;
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	3301      	adds	r3, #1
 8012c72:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	2ba5      	cmp	r3, #165	@ 0xa5
 8012c7a:	d0f5      	beq.n	8012c68 <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	089b      	lsrs	r3, r3, #2
 8012c80:	60fb      	str	r3, [r7, #12]

        return uxCount;
 8012c82:	68fb      	ldr	r3, [r7, #12]
    }
 8012c84:	4618      	mov	r0, r3
 8012c86:	3714      	adds	r7, #20
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8e:	4770      	bx	lr

08012c90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b084      	sub	sp, #16
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d108      	bne.n	8012cb4 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f001 fc34 	bl	8014514 <vPortFree>
                vPortFree( pxTCB );
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f001 fc31 	bl	8014514 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8012cb2:	e01b      	b.n	8012cec <prvDeleteTCB+0x5c>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8012cba:	2b01      	cmp	r3, #1
 8012cbc:	d103      	bne.n	8012cc6 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f001 fc28 	bl	8014514 <vPortFree>
    }
 8012cc4:	e012      	b.n	8012cec <prvDeleteTCB+0x5c>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8012ccc:	2b02      	cmp	r3, #2
 8012cce:	d00d      	beq.n	8012cec <prvDeleteTCB+0x5c>
    __asm volatile
 8012cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cd4:	b672      	cpsid	i
 8012cd6:	f383 8811 	msr	BASEPRI, r3
 8012cda:	f3bf 8f6f 	isb	sy
 8012cde:	f3bf 8f4f 	dsb	sy
 8012ce2:	b662      	cpsie	i
 8012ce4:	60fb      	str	r3, [r7, #12]
}
 8012ce6:	bf00      	nop
 8012ce8:	bf00      	nop
 8012cea:	e7fd      	b.n	8012ce8 <prvDeleteTCB+0x58>
    }
 8012cec:	bf00      	nop
 8012cee:	3710      	adds	r7, #16
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}

08012cf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012cf4:	b480      	push	{r7}
 8012cf6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8012d24 <prvResetNextTaskUnblockTime+0x30>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d104      	bne.n	8012d0c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8012d02:	4b09      	ldr	r3, [pc, #36]	@ (8012d28 <prvResetNextTaskUnblockTime+0x34>)
 8012d04:	f04f 32ff 	mov.w	r2, #4294967295
 8012d08:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8012d0a:	e005      	b.n	8012d18 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012d0c:	4b05      	ldr	r3, [pc, #20]	@ (8012d24 <prvResetNextTaskUnblockTime+0x30>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	68db      	ldr	r3, [r3, #12]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	4a04      	ldr	r2, [pc, #16]	@ (8012d28 <prvResetNextTaskUnblockTime+0x34>)
 8012d16:	6013      	str	r3, [r2, #0]
}
 8012d18:	bf00      	nop
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d20:	4770      	bx	lr
 8012d22:	bf00      	nop
 8012d24:	24019920 	.word	0x24019920
 8012d28:	24019974 	.word	0x24019974

08012d2c <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8012d2c:	b480      	push	{r7}
 8012d2e:	b083      	sub	sp, #12
 8012d30:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8012d32:	4b05      	ldr	r3, [pc, #20]	@ (8012d48 <xTaskGetCurrentTaskHandle+0x1c>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 8012d38:	687b      	ldr	r3, [r7, #4]
        }
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	370c      	adds	r7, #12
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d44:	4770      	bx	lr
 8012d46:	bf00      	nop
 8012d48:	24019868 	.word	0x24019868

08012d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8012d4c:	b480      	push	{r7}
 8012d4e:	b083      	sub	sp, #12
 8012d50:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8012d52:	4b0b      	ldr	r3, [pc, #44]	@ (8012d80 <xTaskGetSchedulerState+0x34>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d102      	bne.n	8012d60 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	607b      	str	r3, [r7, #4]
 8012d5e:	e008      	b.n	8012d72 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8012d60:	4b08      	ldr	r3, [pc, #32]	@ (8012d84 <xTaskGetSchedulerState+0x38>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d102      	bne.n	8012d6e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8012d68:	2302      	movs	r3, #2
 8012d6a:	607b      	str	r3, [r7, #4]
 8012d6c:	e001      	b.n	8012d72 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8012d72:	687b      	ldr	r3, [r7, #4]
    }
 8012d74:	4618      	mov	r0, r3
 8012d76:	370c      	adds	r7, #12
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7e:	4770      	bx	lr
 8012d80:	24019960 	.word	0x24019960
 8012d84:	2401997c 	.word	0x2401997c

08012d88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b086      	sub	sp, #24
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8012d94:	2300      	movs	r3, #0
 8012d96:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	f000 8089 	beq.w	8012eb2 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012da4:	4b45      	ldr	r3, [pc, #276]	@ (8012ebc <xTaskPriorityInherit+0x134>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d278      	bcs.n	8012ea0 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8012dae:	693b      	ldr	r3, [r7, #16]
 8012db0:	699b      	ldr	r3, [r3, #24]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	db06      	blt.n	8012dc4 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8012db6:	4b41      	ldr	r3, [pc, #260]	@ (8012ebc <xTaskPriorityInherit+0x134>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dbc:	f1c3 0207 	rsb	r2, r3, #7
 8012dc0:	693b      	ldr	r3, [r7, #16]
 8012dc2:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012dc4:	693b      	ldr	r3, [r7, #16]
 8012dc6:	6959      	ldr	r1, [r3, #20]
 8012dc8:	693b      	ldr	r3, [r7, #16]
 8012dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012dcc:	4613      	mov	r3, r2
 8012dce:	009b      	lsls	r3, r3, #2
 8012dd0:	4413      	add	r3, r2
 8012dd2:	009b      	lsls	r3, r3, #2
 8012dd4:	4a3a      	ldr	r2, [pc, #232]	@ (8012ec0 <xTaskPriorityInherit+0x138>)
 8012dd6:	4413      	add	r3, r2
 8012dd8:	4299      	cmp	r1, r3
 8012dda:	d159      	bne.n	8012e90 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	3304      	adds	r3, #4
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7fd fc81 	bl	80106e8 <uxListRemove>
 8012de6:	4603      	mov	r3, r0
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d10a      	bne.n	8012e02 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012df0:	2201      	movs	r2, #1
 8012df2:	fa02 f303 	lsl.w	r3, r2, r3
 8012df6:	43da      	mvns	r2, r3
 8012df8:	4b32      	ldr	r3, [pc, #200]	@ (8012ec4 <xTaskPriorityInherit+0x13c>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	4013      	ands	r3, r2
 8012dfe:	4a31      	ldr	r2, [pc, #196]	@ (8012ec4 <xTaskPriorityInherit+0x13c>)
 8012e00:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012e02:	4b2e      	ldr	r3, [pc, #184]	@ (8012ebc <xTaskPriorityInherit+0x134>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e10:	2201      	movs	r2, #1
 8012e12:	409a      	lsls	r2, r3
 8012e14:	4b2b      	ldr	r3, [pc, #172]	@ (8012ec4 <xTaskPriorityInherit+0x13c>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	4313      	orrs	r3, r2
 8012e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8012ec4 <xTaskPriorityInherit+0x13c>)
 8012e1c:	6013      	str	r3, [r2, #0]
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e22:	4927      	ldr	r1, [pc, #156]	@ (8012ec0 <xTaskPriorityInherit+0x138>)
 8012e24:	4613      	mov	r3, r2
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	4413      	add	r3, r2
 8012e2a:	009b      	lsls	r3, r3, #2
 8012e2c:	440b      	add	r3, r1
 8012e2e:	3304      	adds	r3, #4
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	60fb      	str	r3, [r7, #12]
 8012e34:	693b      	ldr	r3, [r7, #16]
 8012e36:	68fa      	ldr	r2, [r7, #12]
 8012e38:	609a      	str	r2, [r3, #8]
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	689a      	ldr	r2, [r3, #8]
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	60da      	str	r2, [r3, #12]
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	689b      	ldr	r3, [r3, #8]
 8012e46:	693a      	ldr	r2, [r7, #16]
 8012e48:	3204      	adds	r2, #4
 8012e4a:	605a      	str	r2, [r3, #4]
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	1d1a      	adds	r2, r3, #4
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	609a      	str	r2, [r3, #8]
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e58:	4613      	mov	r3, r2
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	4413      	add	r3, r2
 8012e5e:	009b      	lsls	r3, r3, #2
 8012e60:	4a17      	ldr	r2, [pc, #92]	@ (8012ec0 <xTaskPriorityInherit+0x138>)
 8012e62:	441a      	add	r2, r3
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	615a      	str	r2, [r3, #20]
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e6c:	4914      	ldr	r1, [pc, #80]	@ (8012ec0 <xTaskPriorityInherit+0x138>)
 8012e6e:	4613      	mov	r3, r2
 8012e70:	009b      	lsls	r3, r3, #2
 8012e72:	4413      	add	r3, r2
 8012e74:	009b      	lsls	r3, r3, #2
 8012e76:	440b      	add	r3, r1
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	693a      	ldr	r2, [r7, #16]
 8012e7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012e7e:	1c59      	adds	r1, r3, #1
 8012e80:	480f      	ldr	r0, [pc, #60]	@ (8012ec0 <xTaskPriorityInherit+0x138>)
 8012e82:	4613      	mov	r3, r2
 8012e84:	009b      	lsls	r3, r3, #2
 8012e86:	4413      	add	r3, r2
 8012e88:	009b      	lsls	r3, r3, #2
 8012e8a:	4403      	add	r3, r0
 8012e8c:	6019      	str	r1, [r3, #0]
 8012e8e:	e004      	b.n	8012e9a <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012e90:	4b0a      	ldr	r3, [pc, #40]	@ (8012ebc <xTaskPriorityInherit+0x134>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	617b      	str	r3, [r7, #20]
 8012e9e:	e008      	b.n	8012eb2 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012ea0:	693b      	ldr	r3, [r7, #16]
 8012ea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012ea4:	4b05      	ldr	r3, [pc, #20]	@ (8012ebc <xTaskPriorityInherit+0x134>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d201      	bcs.n	8012eb2 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8012eae:	2301      	movs	r3, #1
 8012eb0:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8012eb2:	697b      	ldr	r3, [r7, #20]
    }
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3718      	adds	r7, #24
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	24019868 	.word	0x24019868
 8012ec0:	2401986c 	.word	0x2401986c
 8012ec4:	2401995c 	.word	0x2401995c

08012ec8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b088      	sub	sp, #32
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f000 8094 	beq.w	8013008 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8012ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8013014 <xTaskPriorityDisinherit+0x14c>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	69ba      	ldr	r2, [r7, #24]
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d00d      	beq.n	8012f06 <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 8012eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012eee:	b672      	cpsid	i
 8012ef0:	f383 8811 	msr	BASEPRI, r3
 8012ef4:	f3bf 8f6f 	isb	sy
 8012ef8:	f3bf 8f4f 	dsb	sy
 8012efc:	b662      	cpsie	i
 8012efe:	613b      	str	r3, [r7, #16]
}
 8012f00:	bf00      	nop
 8012f02:	bf00      	nop
 8012f04:	e7fd      	b.n	8012f02 <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8012f06:	69bb      	ldr	r3, [r7, #24]
 8012f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d10d      	bne.n	8012f2a <xTaskPriorityDisinherit+0x62>
    __asm volatile
 8012f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f12:	b672      	cpsid	i
 8012f14:	f383 8811 	msr	BASEPRI, r3
 8012f18:	f3bf 8f6f 	isb	sy
 8012f1c:	f3bf 8f4f 	dsb	sy
 8012f20:	b662      	cpsie	i
 8012f22:	60fb      	str	r3, [r7, #12]
}
 8012f24:	bf00      	nop
 8012f26:	bf00      	nop
 8012f28:	e7fd      	b.n	8012f26 <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f2e:	1e5a      	subs	r2, r3, #1
 8012f30:	69bb      	ldr	r3, [r7, #24]
 8012f32:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012f34:	69bb      	ldr	r3, [r7, #24]
 8012f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f38:	69bb      	ldr	r3, [r7, #24]
 8012f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d063      	beq.n	8013008 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d15f      	bne.n	8013008 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f48:	69bb      	ldr	r3, [r7, #24]
 8012f4a:	3304      	adds	r3, #4
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7fd fbcb 	bl	80106e8 <uxListRemove>
 8012f52:	4603      	mov	r3, r0
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d10a      	bne.n	8012f6e <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8012f62:	43da      	mvns	r2, r3
 8012f64:	4b2c      	ldr	r3, [pc, #176]	@ (8013018 <xTaskPriorityDisinherit+0x150>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	4013      	ands	r3, r2
 8012f6a:	4a2b      	ldr	r2, [pc, #172]	@ (8013018 <xTaskPriorityDisinherit+0x150>)
 8012f6c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012f6e:	69bb      	ldr	r3, [r7, #24]
 8012f70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012f72:	69bb      	ldr	r3, [r7, #24]
 8012f74:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8012f76:	69bb      	ldr	r3, [r7, #24]
 8012f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f7a:	f1c3 0207 	rsb	r2, r3, #7
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8012f82:	69bb      	ldr	r3, [r7, #24]
 8012f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f86:	2201      	movs	r2, #1
 8012f88:	409a      	lsls	r2, r3
 8012f8a:	4b23      	ldr	r3, [pc, #140]	@ (8013018 <xTaskPriorityDisinherit+0x150>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	4313      	orrs	r3, r2
 8012f90:	4a21      	ldr	r2, [pc, #132]	@ (8013018 <xTaskPriorityDisinherit+0x150>)
 8012f92:	6013      	str	r3, [r2, #0]
 8012f94:	69bb      	ldr	r3, [r7, #24]
 8012f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f98:	4920      	ldr	r1, [pc, #128]	@ (801301c <xTaskPriorityDisinherit+0x154>)
 8012f9a:	4613      	mov	r3, r2
 8012f9c:	009b      	lsls	r3, r3, #2
 8012f9e:	4413      	add	r3, r2
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	440b      	add	r3, r1
 8012fa4:	3304      	adds	r3, #4
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	617b      	str	r3, [r7, #20]
 8012faa:	69bb      	ldr	r3, [r7, #24]
 8012fac:	697a      	ldr	r2, [r7, #20]
 8012fae:	609a      	str	r2, [r3, #8]
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	689a      	ldr	r2, [r3, #8]
 8012fb4:	69bb      	ldr	r3, [r7, #24]
 8012fb6:	60da      	str	r2, [r3, #12]
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	689b      	ldr	r3, [r3, #8]
 8012fbc:	69ba      	ldr	r2, [r7, #24]
 8012fbe:	3204      	adds	r2, #4
 8012fc0:	605a      	str	r2, [r3, #4]
 8012fc2:	69bb      	ldr	r3, [r7, #24]
 8012fc4:	1d1a      	adds	r2, r3, #4
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	609a      	str	r2, [r3, #8]
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fce:	4613      	mov	r3, r2
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	4413      	add	r3, r2
 8012fd4:	009b      	lsls	r3, r3, #2
 8012fd6:	4a11      	ldr	r2, [pc, #68]	@ (801301c <xTaskPriorityDisinherit+0x154>)
 8012fd8:	441a      	add	r2, r3
 8012fda:	69bb      	ldr	r3, [r7, #24]
 8012fdc:	615a      	str	r2, [r3, #20]
 8012fde:	69bb      	ldr	r3, [r7, #24]
 8012fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fe2:	490e      	ldr	r1, [pc, #56]	@ (801301c <xTaskPriorityDisinherit+0x154>)
 8012fe4:	4613      	mov	r3, r2
 8012fe6:	009b      	lsls	r3, r3, #2
 8012fe8:	4413      	add	r3, r2
 8012fea:	009b      	lsls	r3, r3, #2
 8012fec:	440b      	add	r3, r1
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	69ba      	ldr	r2, [r7, #24]
 8012ff2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012ff4:	1c59      	adds	r1, r3, #1
 8012ff6:	4809      	ldr	r0, [pc, #36]	@ (801301c <xTaskPriorityDisinherit+0x154>)
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	009b      	lsls	r3, r3, #2
 8012ffc:	4413      	add	r3, r2
 8012ffe:	009b      	lsls	r3, r3, #2
 8013000:	4403      	add	r3, r0
 8013002:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8013004:	2301      	movs	r3, #1
 8013006:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8013008:	69fb      	ldr	r3, [r7, #28]
    }
 801300a:	4618      	mov	r0, r3
 801300c:	3720      	adds	r7, #32
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	24019868 	.word	0x24019868
 8013018:	2401995c 	.word	0x2401995c
 801301c:	2401986c 	.word	0x2401986c

08013020 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8013020:	b580      	push	{r7, lr}
 8013022:	b08a      	sub	sp, #40	@ 0x28
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801302e:	2301      	movs	r3, #1
 8013030:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2b00      	cmp	r3, #0
 8013036:	f000 80aa 	beq.w	801318e <vTaskPriorityDisinheritAfterTimeout+0x16e>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 801303a:	6a3b      	ldr	r3, [r7, #32]
 801303c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801303e:	2b00      	cmp	r3, #0
 8013040:	d10d      	bne.n	801305e <vTaskPriorityDisinheritAfterTimeout+0x3e>
    __asm volatile
 8013042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013046:	b672      	cpsid	i
 8013048:	f383 8811 	msr	BASEPRI, r3
 801304c:	f3bf 8f6f 	isb	sy
 8013050:	f3bf 8f4f 	dsb	sy
 8013054:	b662      	cpsie	i
 8013056:	613b      	str	r3, [r7, #16]
}
 8013058:	bf00      	nop
 801305a:	bf00      	nop
 801305c:	e7fd      	b.n	801305a <vTaskPriorityDisinheritAfterTimeout+0x3a>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801305e:	6a3b      	ldr	r3, [r7, #32]
 8013060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013062:	683a      	ldr	r2, [r7, #0]
 8013064:	429a      	cmp	r2, r3
 8013066:	d902      	bls.n	801306e <vTaskPriorityDisinheritAfterTimeout+0x4e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	627b      	str	r3, [r7, #36]	@ 0x24
 801306c:	e002      	b.n	8013074 <vTaskPriorityDisinheritAfterTimeout+0x54>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 801306e:	6a3b      	ldr	r3, [r7, #32]
 8013070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013072:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8013074:	6a3b      	ldr	r3, [r7, #32]
 8013076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801307a:	429a      	cmp	r2, r3
 801307c:	f000 8087 	beq.w	801318e <vTaskPriorityDisinheritAfterTimeout+0x16e>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013080:	6a3b      	ldr	r3, [r7, #32]
 8013082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013084:	69fa      	ldr	r2, [r7, #28]
 8013086:	429a      	cmp	r2, r3
 8013088:	f040 8081 	bne.w	801318e <vTaskPriorityDisinheritAfterTimeout+0x16e>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 801308c:	4b42      	ldr	r3, [pc, #264]	@ (8013198 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	6a3a      	ldr	r2, [r7, #32]
 8013092:	429a      	cmp	r2, r3
 8013094:	d10d      	bne.n	80130b2 <vTaskPriorityDisinheritAfterTimeout+0x92>
    __asm volatile
 8013096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801309a:	b672      	cpsid	i
 801309c:	f383 8811 	msr	BASEPRI, r3
 80130a0:	f3bf 8f6f 	isb	sy
 80130a4:	f3bf 8f4f 	dsb	sy
 80130a8:	b662      	cpsie	i
 80130aa:	60fb      	str	r3, [r7, #12]
}
 80130ac:	bf00      	nop
 80130ae:	bf00      	nop
 80130b0:	e7fd      	b.n	80130ae <vTaskPriorityDisinheritAfterTimeout+0x8e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80130b2:	6a3b      	ldr	r3, [r7, #32]
 80130b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130b6:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80130b8:	6a3b      	ldr	r3, [r7, #32]
 80130ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130bc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80130be:	6a3b      	ldr	r3, [r7, #32]
 80130c0:	699b      	ldr	r3, [r3, #24]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	db04      	blt.n	80130d0 <vTaskPriorityDisinheritAfterTimeout+0xb0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80130c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130c8:	f1c3 0207 	rsb	r2, r3, #7
 80130cc:	6a3b      	ldr	r3, [r7, #32]
 80130ce:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80130d0:	6a3b      	ldr	r3, [r7, #32]
 80130d2:	6959      	ldr	r1, [r3, #20]
 80130d4:	69ba      	ldr	r2, [r7, #24]
 80130d6:	4613      	mov	r3, r2
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	4413      	add	r3, r2
 80130dc:	009b      	lsls	r3, r3, #2
 80130de:	4a2f      	ldr	r2, [pc, #188]	@ (801319c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80130e0:	4413      	add	r3, r2
 80130e2:	4299      	cmp	r1, r3
 80130e4:	d153      	bne.n	801318e <vTaskPriorityDisinheritAfterTimeout+0x16e>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130e6:	6a3b      	ldr	r3, [r7, #32]
 80130e8:	3304      	adds	r3, #4
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7fd fafc 	bl	80106e8 <uxListRemove>
 80130f0:	4603      	mov	r3, r0
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d10a      	bne.n	801310c <vTaskPriorityDisinheritAfterTimeout+0xec>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80130f6:	6a3b      	ldr	r3, [r7, #32]
 80130f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130fa:	2201      	movs	r2, #1
 80130fc:	fa02 f303 	lsl.w	r3, r2, r3
 8013100:	43da      	mvns	r2, r3
 8013102:	4b27      	ldr	r3, [pc, #156]	@ (80131a0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	4013      	ands	r3, r2
 8013108:	4a25      	ldr	r2, [pc, #148]	@ (80131a0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 801310a:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 801310c:	6a3b      	ldr	r3, [r7, #32]
 801310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013110:	2201      	movs	r2, #1
 8013112:	409a      	lsls	r2, r3
 8013114:	4b22      	ldr	r3, [pc, #136]	@ (80131a0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	4313      	orrs	r3, r2
 801311a:	4a21      	ldr	r2, [pc, #132]	@ (80131a0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 801311c:	6013      	str	r3, [r2, #0]
 801311e:	6a3b      	ldr	r3, [r7, #32]
 8013120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013122:	491e      	ldr	r1, [pc, #120]	@ (801319c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8013124:	4613      	mov	r3, r2
 8013126:	009b      	lsls	r3, r3, #2
 8013128:	4413      	add	r3, r2
 801312a:	009b      	lsls	r3, r3, #2
 801312c:	440b      	add	r3, r1
 801312e:	3304      	adds	r3, #4
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	617b      	str	r3, [r7, #20]
 8013134:	6a3b      	ldr	r3, [r7, #32]
 8013136:	697a      	ldr	r2, [r7, #20]
 8013138:	609a      	str	r2, [r3, #8]
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	689a      	ldr	r2, [r3, #8]
 801313e:	6a3b      	ldr	r3, [r7, #32]
 8013140:	60da      	str	r2, [r3, #12]
 8013142:	697b      	ldr	r3, [r7, #20]
 8013144:	689b      	ldr	r3, [r3, #8]
 8013146:	6a3a      	ldr	r2, [r7, #32]
 8013148:	3204      	adds	r2, #4
 801314a:	605a      	str	r2, [r3, #4]
 801314c:	6a3b      	ldr	r3, [r7, #32]
 801314e:	1d1a      	adds	r2, r3, #4
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	609a      	str	r2, [r3, #8]
 8013154:	6a3b      	ldr	r3, [r7, #32]
 8013156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013158:	4613      	mov	r3, r2
 801315a:	009b      	lsls	r3, r3, #2
 801315c:	4413      	add	r3, r2
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	4a0e      	ldr	r2, [pc, #56]	@ (801319c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8013162:	441a      	add	r2, r3
 8013164:	6a3b      	ldr	r3, [r7, #32]
 8013166:	615a      	str	r2, [r3, #20]
 8013168:	6a3b      	ldr	r3, [r7, #32]
 801316a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801316c:	490b      	ldr	r1, [pc, #44]	@ (801319c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 801316e:	4613      	mov	r3, r2
 8013170:	009b      	lsls	r3, r3, #2
 8013172:	4413      	add	r3, r2
 8013174:	009b      	lsls	r3, r3, #2
 8013176:	440b      	add	r3, r1
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	6a3a      	ldr	r2, [r7, #32]
 801317c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801317e:	1c59      	adds	r1, r3, #1
 8013180:	4806      	ldr	r0, [pc, #24]	@ (801319c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8013182:	4613      	mov	r3, r2
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	4413      	add	r3, r2
 8013188:	009b      	lsls	r3, r3, #2
 801318a:	4403      	add	r3, r0
 801318c:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 801318e:	bf00      	nop
 8013190:	3728      	adds	r7, #40	@ 0x28
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	24019868 	.word	0x24019868
 801319c:	2401986c 	.word	0x2401986c
 80131a0:	2401995c 	.word	0x2401995c

080131a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80131aa:	4b09      	ldr	r3, [pc, #36]	@ (80131d0 <pvTaskIncrementMutexHeldCount+0x2c>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d004      	beq.n	80131c0 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131ba:	1c5a      	adds	r2, r3, #1
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 80131c0:	687b      	ldr	r3, [r7, #4]
    }
 80131c2:	4618      	mov	r0, r3
 80131c4:	370c      	adds	r7, #12
 80131c6:	46bd      	mov	sp, r7
 80131c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131cc:	4770      	bx	lr
 80131ce:	bf00      	nop
 80131d0:	24019868 	.word	0x24019868

080131d4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b088      	sub	sp, #32
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	607a      	str	r2, [r7, #4]
 80131e0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 80131e2:	2300      	movs	r3, #0
 80131e4:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d00d      	beq.n	8013208 <xTaskGenericNotifyWait+0x34>
    __asm volatile
 80131ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131f0:	b672      	cpsid	i
 80131f2:	f383 8811 	msr	BASEPRI, r3
 80131f6:	f3bf 8f6f 	isb	sy
 80131fa:	f3bf 8f4f 	dsb	sy
 80131fe:	b662      	cpsie	i
 8013200:	613b      	str	r3, [r7, #16]
}
 8013202:	bf00      	nop
 8013204:	bf00      	nop
 8013206:	e7fd      	b.n	8013204 <xTaskGenericNotifyWait+0x30>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8013208:	f7fe feec 	bl	8011fe4 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 801320c:	f000 ff0a 	bl	8014024 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8013210:	4b3b      	ldr	r3, [pc, #236]	@ (8013300 <xTaskGenericNotifyWait+0x12c>)
 8013212:	681a      	ldr	r2, [r3, #0]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	4413      	add	r3, r2
 8013218:	3358      	adds	r3, #88	@ 0x58
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	b2db      	uxtb	r3, r3
 801321e:	2b02      	cmp	r3, #2
 8013220:	d01a      	beq.n	8013258 <xTaskGenericNotifyWait+0x84>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8013222:	4b37      	ldr	r3, [pc, #220]	@ (8013300 <xTaskGenericNotifyWait+0x12c>)
 8013224:	681a      	ldr	r2, [r3, #0]
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	3314      	adds	r3, #20
 801322a:	009b      	lsls	r3, r3, #2
 801322c:	4413      	add	r3, r2
 801322e:	6859      	ldr	r1, [r3, #4]
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	43db      	mvns	r3, r3
 8013234:	4019      	ands	r1, r3
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	3314      	adds	r3, #20
 801323a:	009b      	lsls	r3, r3, #2
 801323c:	4413      	add	r3, r2
 801323e:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8013240:	4b2f      	ldr	r3, [pc, #188]	@ (8013300 <xTaskGenericNotifyWait+0x12c>)
 8013242:	681a      	ldr	r2, [r3, #0]
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	4413      	add	r3, r2
 8013248:	3358      	adds	r3, #88	@ 0x58
 801324a:	2201      	movs	r2, #1
 801324c:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 801324e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013250:	2b00      	cmp	r3, #0
 8013252:	d001      	beq.n	8013258 <xTaskGenericNotifyWait+0x84>
                    {
                        xShouldBlock = pdTRUE;
 8013254:	2301      	movs	r3, #1
 8013256:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8013258:	f000 ff1a 	bl	8014090 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 801325c:	69bb      	ldr	r3, [r7, #24]
 801325e:	2b01      	cmp	r3, #1
 8013260:	d103      	bne.n	801326a <xTaskGenericNotifyWait+0x96>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013262:	2101      	movs	r1, #1
 8013264:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013266:	f000 f987 	bl	8013578 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 801326a:	f7fe fec9 	bl	8012000 <xTaskResumeAll>
 801326e:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8013270:	69bb      	ldr	r3, [r7, #24]
 8013272:	2b01      	cmp	r3, #1
 8013274:	d10a      	bne.n	801328c <xTaskGenericNotifyWait+0xb8>
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d107      	bne.n	801328c <xTaskGenericNotifyWait+0xb8>
        {
            taskYIELD_WITHIN_API();
 801327c:	4b21      	ldr	r3, [pc, #132]	@ (8013304 <xTaskGenericNotifyWait+0x130>)
 801327e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013282:	601a      	str	r2, [r3, #0]
 8013284:	f3bf 8f4f 	dsb	sy
 8013288:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 801328c:	f000 feca 	bl	8014024 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d008      	beq.n	80132a8 <xTaskGenericNotifyWait+0xd4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8013296:	4b1a      	ldr	r3, [pc, #104]	@ (8013300 <xTaskGenericNotifyWait+0x12c>)
 8013298:	681a      	ldr	r2, [r3, #0]
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	3314      	adds	r3, #20
 801329e:	009b      	lsls	r3, r3, #2
 80132a0:	4413      	add	r3, r2
 80132a2:	685a      	ldr	r2, [r3, #4]
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80132a8:	4b15      	ldr	r3, [pc, #84]	@ (8013300 <xTaskGenericNotifyWait+0x12c>)
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	4413      	add	r3, r2
 80132b0:	3358      	adds	r3, #88	@ 0x58
 80132b2:	781b      	ldrb	r3, [r3, #0]
 80132b4:	b2db      	uxtb	r3, r3
 80132b6:	2b02      	cmp	r3, #2
 80132b8:	d002      	beq.n	80132c0 <xTaskGenericNotifyWait+0xec>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80132ba:	2300      	movs	r3, #0
 80132bc:	61fb      	str	r3, [r7, #28]
 80132be:	e010      	b.n	80132e2 <xTaskGenericNotifyWait+0x10e>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 80132c0:	4b0f      	ldr	r3, [pc, #60]	@ (8013300 <xTaskGenericNotifyWait+0x12c>)
 80132c2:	681a      	ldr	r2, [r3, #0]
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	3314      	adds	r3, #20
 80132c8:	009b      	lsls	r3, r3, #2
 80132ca:	4413      	add	r3, r2
 80132cc:	6859      	ldr	r1, [r3, #4]
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	43db      	mvns	r3, r3
 80132d2:	4019      	ands	r1, r3
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	3314      	adds	r3, #20
 80132d8:	009b      	lsls	r3, r3, #2
 80132da:	4413      	add	r3, r2
 80132dc:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 80132de:	2301      	movs	r3, #1
 80132e0:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80132e2:	4b07      	ldr	r3, [pc, #28]	@ (8013300 <xTaskGenericNotifyWait+0x12c>)
 80132e4:	681a      	ldr	r2, [r3, #0]
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	4413      	add	r3, r2
 80132ea:	3358      	adds	r3, #88	@ 0x58
 80132ec:	2200      	movs	r2, #0
 80132ee:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80132f0:	f000 fece 	bl	8014090 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 80132f4:	69fb      	ldr	r3, [r7, #28]
    }
 80132f6:	4618      	mov	r0, r3
 80132f8:	3720      	adds	r7, #32
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}
 80132fe:	bf00      	nop
 8013300:	24019868 	.word	0x24019868
 8013304:	e000ed04 	.word	0xe000ed04

08013308 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8013308:	b580      	push	{r7, lr}
 801330a:	b08e      	sub	sp, #56	@ 0x38
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	60b9      	str	r1, [r7, #8]
 8013312:	607a      	str	r2, [r7, #4]
 8013314:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8013316:	2301      	movs	r3, #1
 8013318:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d00d      	beq.n	801333c <xTaskGenericNotify+0x34>
    __asm volatile
 8013320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013324:	b672      	cpsid	i
 8013326:	f383 8811 	msr	BASEPRI, r3
 801332a:	f3bf 8f6f 	isb	sy
 801332e:	f3bf 8f4f 	dsb	sy
 8013332:	b662      	cpsie	i
 8013334:	623b      	str	r3, [r7, #32]
}
 8013336:	bf00      	nop
 8013338:	bf00      	nop
 801333a:	e7fd      	b.n	8013338 <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d10d      	bne.n	801335e <xTaskGenericNotify+0x56>
    __asm volatile
 8013342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013346:	b672      	cpsid	i
 8013348:	f383 8811 	msr	BASEPRI, r3
 801334c:	f3bf 8f6f 	isb	sy
 8013350:	f3bf 8f4f 	dsb	sy
 8013354:	b662      	cpsie	i
 8013356:	61fb      	str	r3, [r7, #28]
}
 8013358:	bf00      	nop
 801335a:	bf00      	nop
 801335c:	e7fd      	b.n	801335a <xTaskGenericNotify+0x52>
        pxTCB = xTaskToNotify;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8013362:	f000 fe5f 	bl	8014024 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8013366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013368:	2b00      	cmp	r3, #0
 801336a:	d007      	beq.n	801337c <xTaskGenericNotify+0x74>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 801336c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	3314      	adds	r3, #20
 8013372:	009b      	lsls	r3, r3, #2
 8013374:	4413      	add	r3, r2
 8013376:	685a      	ldr	r2, [r3, #4]
 8013378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801337a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 801337c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	4413      	add	r3, r2
 8013382:	3358      	adds	r3, #88	@ 0x58
 8013384:	781b      	ldrb	r3, [r3, #0]
 8013386:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 801338a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	4413      	add	r3, r2
 8013390:	3358      	adds	r3, #88	@ 0x58
 8013392:	2202      	movs	r2, #2
 8013394:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8013396:	78fb      	ldrb	r3, [r7, #3]
 8013398:	2b04      	cmp	r3, #4
 801339a:	d841      	bhi.n	8013420 <xTaskGenericNotify+0x118>
 801339c:	a201      	add	r2, pc, #4	@ (adr r2, 80133a4 <xTaskGenericNotify+0x9c>)
 801339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133a2:	bf00      	nop
 80133a4:	08013445 	.word	0x08013445
 80133a8:	080133b9 	.word	0x080133b9
 80133ac:	080133d7 	.word	0x080133d7
 80133b0:	080133f3 	.word	0x080133f3
 80133b4:	08013403 	.word	0x08013403
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80133b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	3314      	adds	r3, #20
 80133be:	009b      	lsls	r3, r3, #2
 80133c0:	4413      	add	r3, r2
 80133c2:	685a      	ldr	r2, [r3, #4]
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	431a      	orrs	r2, r3
 80133c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	3314      	adds	r3, #20
 80133ce:	009b      	lsls	r3, r3, #2
 80133d0:	440b      	add	r3, r1
 80133d2:	605a      	str	r2, [r3, #4]
                    break;
 80133d4:	e039      	b.n	801344a <xTaskGenericNotify+0x142>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80133d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	3314      	adds	r3, #20
 80133dc:	009b      	lsls	r3, r3, #2
 80133de:	4413      	add	r3, r2
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	1c5a      	adds	r2, r3, #1
 80133e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	3314      	adds	r3, #20
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	440b      	add	r3, r1
 80133ee:	605a      	str	r2, [r3, #4]
                    break;
 80133f0:	e02b      	b.n	801344a <xTaskGenericNotify+0x142>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80133f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	3314      	adds	r3, #20
 80133f8:	009b      	lsls	r3, r3, #2
 80133fa:	4413      	add	r3, r2
 80133fc:	687a      	ldr	r2, [r7, #4]
 80133fe:	605a      	str	r2, [r3, #4]
                    break;
 8013400:	e023      	b.n	801344a <xTaskGenericNotify+0x142>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013402:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013406:	2b02      	cmp	r3, #2
 8013408:	d007      	beq.n	801341a <xTaskGenericNotify+0x112>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 801340a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801340c:	68bb      	ldr	r3, [r7, #8]
 801340e:	3314      	adds	r3, #20
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	4413      	add	r3, r2
 8013414:	687a      	ldr	r2, [r7, #4]
 8013416:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8013418:	e017      	b.n	801344a <xTaskGenericNotify+0x142>
                        xReturn = pdFAIL;
 801341a:	2300      	movs	r3, #0
 801341c:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 801341e:	e014      	b.n	801344a <xTaskGenericNotify+0x142>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8013420:	4b50      	ldr	r3, [pc, #320]	@ (8013564 <xTaskGenericNotify+0x25c>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d00f      	beq.n	8013448 <xTaskGenericNotify+0x140>
    __asm volatile
 8013428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801342c:	b672      	cpsid	i
 801342e:	f383 8811 	msr	BASEPRI, r3
 8013432:	f3bf 8f6f 	isb	sy
 8013436:	f3bf 8f4f 	dsb	sy
 801343a:	b662      	cpsie	i
 801343c:	61bb      	str	r3, [r7, #24]
}
 801343e:	bf00      	nop
 8013440:	bf00      	nop
 8013442:	e7fd      	b.n	8013440 <xTaskGenericNotify+0x138>
                    break;
 8013444:	bf00      	nop
 8013446:	e000      	b.n	801344a <xTaskGenericNotify+0x142>

                    break;
 8013448:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801344a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801344e:	2b01      	cmp	r3, #1
 8013450:	f040 8081 	bne.w	8013556 <xTaskGenericNotify+0x24e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8013454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013456:	695b      	ldr	r3, [r3, #20]
 8013458:	62bb      	str	r3, [r7, #40]	@ 0x28
 801345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801345c:	689b      	ldr	r3, [r3, #8]
 801345e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013460:	68d2      	ldr	r2, [r2, #12]
 8013462:	609a      	str	r2, [r3, #8]
 8013464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013466:	68db      	ldr	r3, [r3, #12]
 8013468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801346a:	6892      	ldr	r2, [r2, #8]
 801346c:	605a      	str	r2, [r3, #4]
 801346e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013470:	685a      	ldr	r2, [r3, #4]
 8013472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013474:	3304      	adds	r3, #4
 8013476:	429a      	cmp	r2, r3
 8013478:	d103      	bne.n	8013482 <xTaskGenericNotify+0x17a>
 801347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801347c:	68da      	ldr	r2, [r3, #12]
 801347e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013480:	605a      	str	r2, [r3, #4]
 8013482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013484:	2200      	movs	r2, #0
 8013486:	615a      	str	r2, [r3, #20]
 8013488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	1e5a      	subs	r2, r3, #1
 801348e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013490:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8013492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013496:	2201      	movs	r2, #1
 8013498:	409a      	lsls	r2, r3
 801349a:	4b33      	ldr	r3, [pc, #204]	@ (8013568 <xTaskGenericNotify+0x260>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	4313      	orrs	r3, r2
 80134a0:	4a31      	ldr	r2, [pc, #196]	@ (8013568 <xTaskGenericNotify+0x260>)
 80134a2:	6013      	str	r3, [r2, #0]
 80134a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134a8:	4930      	ldr	r1, [pc, #192]	@ (801356c <xTaskGenericNotify+0x264>)
 80134aa:	4613      	mov	r3, r2
 80134ac:	009b      	lsls	r3, r3, #2
 80134ae:	4413      	add	r3, r2
 80134b0:	009b      	lsls	r3, r3, #2
 80134b2:	440b      	add	r3, r1
 80134b4:	3304      	adds	r3, #4
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80134ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80134be:	609a      	str	r2, [r3, #8]
 80134c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134c2:	689a      	ldr	r2, [r3, #8]
 80134c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134c6:	60da      	str	r2, [r3, #12]
 80134c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134ca:	689b      	ldr	r3, [r3, #8]
 80134cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80134ce:	3204      	adds	r2, #4
 80134d0:	605a      	str	r2, [r3, #4]
 80134d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134d4:	1d1a      	adds	r2, r3, #4
 80134d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134d8:	609a      	str	r2, [r3, #8]
 80134da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134de:	4613      	mov	r3, r2
 80134e0:	009b      	lsls	r3, r3, #2
 80134e2:	4413      	add	r3, r2
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	4a21      	ldr	r2, [pc, #132]	@ (801356c <xTaskGenericNotify+0x264>)
 80134e8:	441a      	add	r2, r3
 80134ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ec:	615a      	str	r2, [r3, #20]
 80134ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134f2:	491e      	ldr	r1, [pc, #120]	@ (801356c <xTaskGenericNotify+0x264>)
 80134f4:	4613      	mov	r3, r2
 80134f6:	009b      	lsls	r3, r3, #2
 80134f8:	4413      	add	r3, r2
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	440b      	add	r3, r1
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013502:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013504:	1c59      	adds	r1, r3, #1
 8013506:	4819      	ldr	r0, [pc, #100]	@ (801356c <xTaskGenericNotify+0x264>)
 8013508:	4613      	mov	r3, r2
 801350a:	009b      	lsls	r3, r3, #2
 801350c:	4413      	add	r3, r2
 801350e:	009b      	lsls	r3, r3, #2
 8013510:	4403      	add	r3, r0
 8013512:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013518:	2b00      	cmp	r3, #0
 801351a:	d00d      	beq.n	8013538 <xTaskGenericNotify+0x230>
    __asm volatile
 801351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013520:	b672      	cpsid	i
 8013522:	f383 8811 	msr	BASEPRI, r3
 8013526:	f3bf 8f6f 	isb	sy
 801352a:	f3bf 8f4f 	dsb	sy
 801352e:	b662      	cpsie	i
 8013530:	617b      	str	r3, [r7, #20]
}
 8013532:	bf00      	nop
 8013534:	bf00      	nop
 8013536:	e7fd      	b.n	8013534 <xTaskGenericNotify+0x22c>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8013538:	4b0d      	ldr	r3, [pc, #52]	@ (8013570 <xTaskGenericNotify+0x268>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013542:	429a      	cmp	r2, r3
 8013544:	d207      	bcs.n	8013556 <xTaskGenericNotify+0x24e>
 8013546:	4b0b      	ldr	r3, [pc, #44]	@ (8013574 <xTaskGenericNotify+0x26c>)
 8013548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801354c:	601a      	str	r2, [r3, #0]
 801354e:	f3bf 8f4f 	dsb	sy
 8013552:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8013556:	f000 fd9b 	bl	8014090 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 801355a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801355c:	4618      	mov	r0, r3
 801355e:	3738      	adds	r7, #56	@ 0x38
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}
 8013564:	24019958 	.word	0x24019958
 8013568:	2401995c 	.word	0x2401995c
 801356c:	2401986c 	.word	0x2401986c
 8013570:	24019868 	.word	0x24019868
 8013574:	e000ed04 	.word	0xe000ed04

08013578 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b086      	sub	sp, #24
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8013582:	4b22      	ldr	r3, [pc, #136]	@ (801360c <prvAddCurrentTaskToDelayedList+0x94>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	617b      	str	r3, [r7, #20]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8013588:	4b21      	ldr	r3, [pc, #132]	@ (8013610 <prvAddCurrentTaskToDelayedList+0x98>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	613b      	str	r3, [r7, #16]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 801358e:	4b21      	ldr	r3, [pc, #132]	@ (8013614 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013594:	4b20      	ldr	r3, [pc, #128]	@ (8013618 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	3304      	adds	r3, #4
 801359a:	4618      	mov	r0, r3
 801359c:	f7fd f8a4 	bl	80106e8 <uxListRemove>
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d10b      	bne.n	80135be <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80135a6:	4b1c      	ldr	r3, [pc, #112]	@ (8013618 <prvAddCurrentTaskToDelayedList+0xa0>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135ac:	2201      	movs	r2, #1
 80135ae:	fa02 f303 	lsl.w	r3, r2, r3
 80135b2:	43da      	mvns	r2, r3
 80135b4:	4b19      	ldr	r3, [pc, #100]	@ (801361c <prvAddCurrentTaskToDelayedList+0xa4>)
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	4013      	ands	r3, r2
 80135ba:	4a18      	ldr	r2, [pc, #96]	@ (801361c <prvAddCurrentTaskToDelayedList+0xa4>)
 80135bc:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 80135be:	697a      	ldr	r2, [r7, #20]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	4413      	add	r3, r2
 80135c4:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80135c6:	4b14      	ldr	r3, [pc, #80]	@ (8013618 <prvAddCurrentTaskToDelayedList+0xa0>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	68ba      	ldr	r2, [r7, #8]
 80135cc:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 80135ce:	68ba      	ldr	r2, [r7, #8]
 80135d0:	697b      	ldr	r3, [r7, #20]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d207      	bcs.n	80135e6 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80135d6:	4b10      	ldr	r3, [pc, #64]	@ (8013618 <prvAddCurrentTaskToDelayedList+0xa0>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	3304      	adds	r3, #4
 80135dc:	4619      	mov	r1, r3
 80135de:	68f8      	ldr	r0, [r7, #12]
 80135e0:	f7fd f849 	bl	8010676 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80135e4:	e00e      	b.n	8013604 <prvAddCurrentTaskToDelayedList+0x8c>
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80135e6:	4b0c      	ldr	r3, [pc, #48]	@ (8013618 <prvAddCurrentTaskToDelayedList+0xa0>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	3304      	adds	r3, #4
 80135ec:	4619      	mov	r1, r3
 80135ee:	6938      	ldr	r0, [r7, #16]
 80135f0:	f7fd f841 	bl	8010676 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 80135f4:	4b0a      	ldr	r3, [pc, #40]	@ (8013620 <prvAddCurrentTaskToDelayedList+0xa8>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	68ba      	ldr	r2, [r7, #8]
 80135fa:	429a      	cmp	r2, r3
 80135fc:	d202      	bcs.n	8013604 <prvAddCurrentTaskToDelayedList+0x8c>
                xNextTaskUnblockTime = xTimeToWake;
 80135fe:	4a08      	ldr	r2, [pc, #32]	@ (8013620 <prvAddCurrentTaskToDelayedList+0xa8>)
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	6013      	str	r3, [r2, #0]
}
 8013604:	bf00      	nop
 8013606:	3718      	adds	r7, #24
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}
 801360c:	24019958 	.word	0x24019958
 8013610:	24019920 	.word	0x24019920
 8013614:	24019924 	.word	0x24019924
 8013618:	24019868 	.word	0x24019868
 801361c:	2401995c 	.word	0x2401995c
 8013620:	24019974 	.word	0x24019974

08013624 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8013624:	b480      	push	{r7}
 8013626:	b085      	sub	sp, #20
 8013628:	af00      	add	r7, sp, #0
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	4a07      	ldr	r2, [pc, #28]	@ (8013650 <vApplicationGetIdleTaskMemory+0x2c>)
 8013634:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	4a06      	ldr	r2, [pc, #24]	@ (8013654 <vApplicationGetIdleTaskMemory+0x30>)
 801363a:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2280      	movs	r2, #128	@ 0x80
 8013640:	601a      	str	r2, [r3, #0]
    }
 8013642:	bf00      	nop
 8013644:	3714      	adds	r7, #20
 8013646:	46bd      	mov	sp, r7
 8013648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364c:	4770      	bx	lr
 801364e:	bf00      	nop
 8013650:	24019980 	.word	0x24019980
 8013654:	240199dc 	.word	0x240199dc

08013658 <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 8013658:	b480      	push	{r7}
 801365a:	b085      	sub	sp, #20
 801365c:	af00      	add	r7, sp, #0
 801365e:	60f8      	str	r0, [r7, #12]
 8013660:	60b9      	str	r1, [r7, #8]
 8013662:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	4a07      	ldr	r2, [pc, #28]	@ (8013684 <vApplicationGetTimerTaskMemory+0x2c>)
 8013668:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	4a06      	ldr	r2, [pc, #24]	@ (8013688 <vApplicationGetTimerTaskMemory+0x30>)
 801366e:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013676:	601a      	str	r2, [r3, #0]
    }
 8013678:	bf00      	nop
 801367a:	3714      	adds	r7, #20
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr
 8013684:	24019bdc 	.word	0x24019bdc
 8013688:	24019c38 	.word	0x24019c38

0801368c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 801368c:	b580      	push	{r7, lr}
 801368e:	b08a      	sub	sp, #40	@ 0x28
 8013690:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8013692:	2300      	movs	r3, #0
 8013694:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8013696:	f000 fb23 	bl	8013ce0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 801369a:	4b1e      	ldr	r3, [pc, #120]	@ (8013714 <xTimerCreateTimerTask+0x88>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d021      	beq.n	80136e6 <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80136a2:	2300      	movs	r3, #0
 80136a4:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80136a6:	2300      	movs	r3, #0
 80136a8:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 80136aa:	1d3a      	adds	r2, r7, #4
 80136ac:	f107 0108 	add.w	r1, r7, #8
 80136b0:	f107 030c 	add.w	r3, r7, #12
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7ff ffcf 	bl	8013658 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80136ba:	6879      	ldr	r1, [r7, #4]
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	68fa      	ldr	r2, [r7, #12]
 80136c0:	9202      	str	r2, [sp, #8]
 80136c2:	9301      	str	r3, [sp, #4]
 80136c4:	2302      	movs	r3, #2
 80136c6:	9300      	str	r3, [sp, #0]
 80136c8:	2300      	movs	r3, #0
 80136ca:	460a      	mov	r2, r1
 80136cc:	4912      	ldr	r1, [pc, #72]	@ (8013718 <xTimerCreateTimerTask+0x8c>)
 80136ce:	4813      	ldr	r0, [pc, #76]	@ (801371c <xTimerCreateTimerTask+0x90>)
 80136d0:	f7fe f8e7 	bl	80118a2 <xTaskCreateStatic>
 80136d4:	4603      	mov	r3, r0
 80136d6:	4a12      	ldr	r2, [pc, #72]	@ (8013720 <xTimerCreateTimerTask+0x94>)
 80136d8:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 80136da:	4b11      	ldr	r3, [pc, #68]	@ (8013720 <xTimerCreateTimerTask+0x94>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d001      	beq.n	80136e6 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 80136e2:	2301      	movs	r3, #1
 80136e4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d10d      	bne.n	8013708 <xTimerCreateTimerTask+0x7c>
    __asm volatile
 80136ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136f0:	b672      	cpsid	i
 80136f2:	f383 8811 	msr	BASEPRI, r3
 80136f6:	f3bf 8f6f 	isb	sy
 80136fa:	f3bf 8f4f 	dsb	sy
 80136fe:	b662      	cpsie	i
 8013700:	613b      	str	r3, [r7, #16]
}
 8013702:	bf00      	nop
 8013704:	bf00      	nop
 8013706:	e7fd      	b.n	8013704 <xTimerCreateTimerTask+0x78>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8013708:	697b      	ldr	r3, [r7, #20]
    }
 801370a:	4618      	mov	r0, r3
 801370c:	3718      	adds	r7, #24
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
 8013712:	bf00      	nop
 8013714:	2401a068 	.word	0x2401a068
 8013718:	080256e0 	.word	0x080256e0
 801371c:	08013931 	.word	0x08013931
 8013720:	2401a06c 	.word	0x2401a06c

08013724 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8013724:	b580      	push	{r7, lr}
 8013726:	b088      	sub	sp, #32
 8013728:	af02      	add	r7, sp, #8
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	60b9      	str	r1, [r7, #8]
 801372e:	607a      	str	r2, [r7, #4]
 8013730:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8013732:	202c      	movs	r0, #44	@ 0x2c
 8013734:	f000 fdaa 	bl	801428c <pvPortMalloc>
 8013738:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d00d      	beq.n	801375c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	2200      	movs	r2, #0
 8013744:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	9301      	str	r3, [sp, #4]
 801374c:	6a3b      	ldr	r3, [r7, #32]
 801374e:	9300      	str	r3, [sp, #0]
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	68b9      	ldr	r1, [r7, #8]
 8013756:	68f8      	ldr	r0, [r7, #12]
 8013758:	f000 f805 	bl	8013766 <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
 801375c:	697b      	ldr	r3, [r7, #20]
        }
 801375e:	4618      	mov	r0, r3
 8013760:	3718      	adds	r7, #24
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}

08013766 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8013766:	b580      	push	{r7, lr}
 8013768:	b086      	sub	sp, #24
 801376a:	af00      	add	r7, sp, #0
 801376c:	60f8      	str	r0, [r7, #12]
 801376e:	60b9      	str	r1, [r7, #8]
 8013770:	607a      	str	r2, [r7, #4]
 8013772:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d10d      	bne.n	8013796 <prvInitialiseNewTimer+0x30>
    __asm volatile
 801377a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801377e:	b672      	cpsid	i
 8013780:	f383 8811 	msr	BASEPRI, r3
 8013784:	f3bf 8f6f 	isb	sy
 8013788:	f3bf 8f4f 	dsb	sy
 801378c:	b662      	cpsie	i
 801378e:	617b      	str	r3, [r7, #20]
}
 8013790:	bf00      	nop
 8013792:	bf00      	nop
 8013794:	e7fd      	b.n	8013792 <prvInitialiseNewTimer+0x2c>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8013796:	f000 faa3 	bl	8013ce0 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 801379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801379c:	68fa      	ldr	r2, [r7, #12]
 801379e:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80137a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137a2:	68ba      	ldr	r2, [r7, #8]
 80137a4:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80137a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137a8:	683a      	ldr	r2, [r7, #0]
 80137aa:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80137ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ae:	6a3a      	ldr	r2, [r7, #32]
 80137b0:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80137b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137b4:	3304      	adds	r3, #4
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7fc ff2c 	bl	8010614 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d008      	beq.n	80137d4 <prvInitialiseNewTimer+0x6e>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 80137c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80137c8:	f043 0304 	orr.w	r3, r3, #4
 80137cc:	b2da      	uxtb	r2, r3
 80137ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80137d4:	bf00      	nop
 80137d6:	3718      	adds	r7, #24
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 80137dc:	b580      	push	{r7, lr}
 80137de:	b08a      	sub	sp, #40	@ 0x28
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
 80137e8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80137ea:	2300      	movs	r3, #0
 80137ec:	627b      	str	r3, [r7, #36]	@ 0x24

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d10d      	bne.n	8013810 <xTimerGenericCommandFromTask+0x34>
    __asm volatile
 80137f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137f8:	b672      	cpsid	i
 80137fa:	f383 8811 	msr	BASEPRI, r3
 80137fe:	f3bf 8f6f 	isb	sy
 8013802:	f3bf 8f4f 	dsb	sy
 8013806:	b662      	cpsie	i
 8013808:	623b      	str	r3, [r7, #32]
}
 801380a:	bf00      	nop
 801380c:	bf00      	nop
 801380e:	e7fd      	b.n	801380c <xTimerGenericCommandFromTask+0x30>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8013810:	4b1d      	ldr	r3, [pc, #116]	@ (8013888 <xTimerGenericCommandFromTask+0xac>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d031      	beq.n	801387c <xTimerGenericCommandFromTask+0xa0>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	61bb      	str	r3, [r7, #24]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	2b05      	cmp	r3, #5
 8013828:	dd0d      	ble.n	8013846 <xTimerGenericCommandFromTask+0x6a>
    __asm volatile
 801382a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801382e:	b672      	cpsid	i
 8013830:	f383 8811 	msr	BASEPRI, r3
 8013834:	f3bf 8f6f 	isb	sy
 8013838:	f3bf 8f4f 	dsb	sy
 801383c:	b662      	cpsie	i
 801383e:	61fb      	str	r3, [r7, #28]
}
 8013840:	bf00      	nop
 8013842:	bf00      	nop
 8013844:	e7fd      	b.n	8013842 <xTimerGenericCommandFromTask+0x66>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	2b05      	cmp	r3, #5
 801384a:	dc17      	bgt.n	801387c <xTimerGenericCommandFromTask+0xa0>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801384c:	f7ff fa7e 	bl	8012d4c <xTaskGetSchedulerState>
 8013850:	4603      	mov	r3, r0
 8013852:	2b02      	cmp	r3, #2
 8013854:	d109      	bne.n	801386a <xTimerGenericCommandFromTask+0x8e>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013856:	4b0c      	ldr	r3, [pc, #48]	@ (8013888 <xTimerGenericCommandFromTask+0xac>)
 8013858:	6818      	ldr	r0, [r3, #0]
 801385a:	f107 0110 	add.w	r1, r7, #16
 801385e:	2300      	movs	r3, #0
 8013860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013862:	f7fd f913 	bl	8010a8c <xQueueGenericSend>
 8013866:	6278      	str	r0, [r7, #36]	@ 0x24
 8013868:	e008      	b.n	801387c <xTimerGenericCommandFromTask+0xa0>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801386a:	4b07      	ldr	r3, [pc, #28]	@ (8013888 <xTimerGenericCommandFromTask+0xac>)
 801386c:	6818      	ldr	r0, [r3, #0]
 801386e:	f107 0110 	add.w	r1, r7, #16
 8013872:	2300      	movs	r3, #0
 8013874:	2200      	movs	r2, #0
 8013876:	f7fd f909 	bl	8010a8c <xQueueGenericSend>
 801387a:	6278      	str	r0, [r7, #36]	@ 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
 801387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801387e:	4618      	mov	r0, r3
 8013880:	3728      	adds	r7, #40	@ 0x28
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}
 8013886:	bf00      	nop
 8013888:	2401a068 	.word	0x2401a068

0801388c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 801388c:	b580      	push	{r7, lr}
 801388e:	b084      	sub	sp, #16
 8013890:	af00      	add	r7, sp, #0
 8013892:	60f8      	str	r0, [r7, #12]
 8013894:	60b9      	str	r1, [r7, #8]
 8013896:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8013898:	e008      	b.n	80138ac <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	699b      	ldr	r3, [r3, #24]
 801389e:	68ba      	ldr	r2, [r7, #8]
 80138a0:	4413      	add	r3, r2
 80138a2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	6a1b      	ldr	r3, [r3, #32]
 80138a8:	68f8      	ldr	r0, [r7, #12]
 80138aa:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	699a      	ldr	r2, [r3, #24]
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	18d1      	adds	r1, r2, r3
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	68f8      	ldr	r0, [r7, #12]
 80138ba:	f000 f8df 	bl	8013a7c <prvInsertTimerInActiveList>
 80138be:	4603      	mov	r3, r0
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d1ea      	bne.n	801389a <prvReloadTimer+0xe>
        }
    }
 80138c4:	bf00      	nop
 80138c6:	bf00      	nop
 80138c8:	3710      	adds	r7, #16
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}
	...

080138d0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b084      	sub	sp, #16
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
 80138d8:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80138da:	4b14      	ldr	r3, [pc, #80]	@ (801392c <prvProcessExpiredTimer+0x5c>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	68db      	ldr	r3, [r3, #12]
 80138e0:	68db      	ldr	r3, [r3, #12]
 80138e2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	3304      	adds	r3, #4
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7fc fefd 	bl	80106e8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80138f4:	f003 0304 	and.w	r3, r3, #4
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d005      	beq.n	8013908 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80138fc:	683a      	ldr	r2, [r7, #0]
 80138fe:	6879      	ldr	r1, [r7, #4]
 8013900:	68f8      	ldr	r0, [r7, #12]
 8013902:	f7ff ffc3 	bl	801388c <prvReloadTimer>
 8013906:	e008      	b.n	801391a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801390e:	f023 0301 	bic.w	r3, r3, #1
 8013912:	b2da      	uxtb	r2, r3
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	6a1b      	ldr	r3, [r3, #32]
 801391e:	68f8      	ldr	r0, [r7, #12]
 8013920:	4798      	blx	r3
    }
 8013922:	bf00      	nop
 8013924:	3710      	adds	r7, #16
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}
 801392a:	bf00      	nop
 801392c:	2401a060 	.word	0x2401a060

08013930 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8013930:	b580      	push	{r7, lr}
 8013932:	b084      	sub	sp, #16
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013938:	f107 0308 	add.w	r3, r7, #8
 801393c:	4618      	mov	r0, r3
 801393e:	f000 f859 	bl	80139f4 <prvGetNextExpireTime>
 8013942:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	4619      	mov	r1, r3
 8013948:	68f8      	ldr	r0, [r7, #12]
 801394a:	f000 f805 	bl	8013958 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 801394e:	f000 f8d7 	bl	8013b00 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013952:	bf00      	nop
 8013954:	e7f0      	b.n	8013938 <prvTimerTask+0x8>
	...

08013958 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8013958:	b580      	push	{r7, lr}
 801395a:	b084      	sub	sp, #16
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
 8013960:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8013962:	f7fe fb3f 	bl	8011fe4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013966:	f107 0308 	add.w	r3, r7, #8
 801396a:	4618      	mov	r0, r3
 801396c:	f000 f866 	bl	8013a3c <prvSampleTimeNow>
 8013970:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8013972:	68bb      	ldr	r3, [r7, #8]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d130      	bne.n	80139da <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d10a      	bne.n	8013994 <prvProcessTimerOrBlockTask+0x3c>
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	429a      	cmp	r2, r3
 8013984:	d806      	bhi.n	8013994 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8013986:	f7fe fb3b 	bl	8012000 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801398a:	68f9      	ldr	r1, [r7, #12]
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f7ff ff9f 	bl	80138d0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8013992:	e024      	b.n	80139de <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d008      	beq.n	80139ac <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801399a:	4b13      	ldr	r3, [pc, #76]	@ (80139e8 <prvProcessTimerOrBlockTask+0x90>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d101      	bne.n	80139a8 <prvProcessTimerOrBlockTask+0x50>
 80139a4:	2301      	movs	r3, #1
 80139a6:	e000      	b.n	80139aa <prvProcessTimerOrBlockTask+0x52>
 80139a8:	2300      	movs	r3, #0
 80139aa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80139ac:	4b0f      	ldr	r3, [pc, #60]	@ (80139ec <prvProcessTimerOrBlockTask+0x94>)
 80139ae:	6818      	ldr	r0, [r3, #0]
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	1ad3      	subs	r3, r2, r3
 80139b6:	683a      	ldr	r2, [r7, #0]
 80139b8:	4619      	mov	r1, r3
 80139ba:	f7fd fed7 	bl	801176c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80139be:	f7fe fb1f 	bl	8012000 <xTaskResumeAll>
 80139c2:	4603      	mov	r3, r0
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d10a      	bne.n	80139de <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80139c8:	4b09      	ldr	r3, [pc, #36]	@ (80139f0 <prvProcessTimerOrBlockTask+0x98>)
 80139ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80139ce:	601a      	str	r2, [r3, #0]
 80139d0:	f3bf 8f4f 	dsb	sy
 80139d4:	f3bf 8f6f 	isb	sy
    }
 80139d8:	e001      	b.n	80139de <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80139da:	f7fe fb11 	bl	8012000 <xTaskResumeAll>
    }
 80139de:	bf00      	nop
 80139e0:	3710      	adds	r7, #16
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}
 80139e6:	bf00      	nop
 80139e8:	2401a064 	.word	0x2401a064
 80139ec:	2401a068 	.word	0x2401a068
 80139f0:	e000ed04 	.word	0xe000ed04

080139f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80139f4:	b480      	push	{r7}
 80139f6:	b085      	sub	sp, #20
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80139fc:	4b0e      	ldr	r3, [pc, #56]	@ (8013a38 <prvGetNextExpireTime+0x44>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d101      	bne.n	8013a0a <prvGetNextExpireTime+0x16>
 8013a06:	2201      	movs	r2, #1
 8013a08:	e000      	b.n	8013a0c <prvGetNextExpireTime+0x18>
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d105      	bne.n	8013a24 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013a18:	4b07      	ldr	r3, [pc, #28]	@ (8013a38 <prvGetNextExpireTime+0x44>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	68db      	ldr	r3, [r3, #12]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	60fb      	str	r3, [r7, #12]
 8013a22:	e001      	b.n	8013a28 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8013a24:	2300      	movs	r3, #0
 8013a26:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8013a28:	68fb      	ldr	r3, [r7, #12]
    }
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3714      	adds	r7, #20
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop
 8013a38:	2401a060 	.word	0x2401a060

08013a3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b084      	sub	sp, #16
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8013a44:	f7fe fbe6 	bl	8012214 <xTaskGetTickCount>
 8013a48:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8013a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8013a78 <prvSampleTimeNow+0x3c>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	68fa      	ldr	r2, [r7, #12]
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d205      	bcs.n	8013a60 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8013a54:	f000 f91e 	bl	8013c94 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2201      	movs	r2, #1
 8013a5c:	601a      	str	r2, [r3, #0]
 8013a5e:	e002      	b.n	8013a66 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2200      	movs	r2, #0
 8013a64:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8013a66:	4a04      	ldr	r2, [pc, #16]	@ (8013a78 <prvSampleTimeNow+0x3c>)
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
    }
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3710      	adds	r7, #16
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	2401a070 	.word	0x2401a070

08013a7c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b086      	sub	sp, #24
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	60f8      	str	r0, [r7, #12]
 8013a84:	60b9      	str	r1, [r7, #8]
 8013a86:	607a      	str	r2, [r7, #4]
 8013a88:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	68ba      	ldr	r2, [r7, #8]
 8013a92:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	68fa      	ldr	r2, [r7, #12]
 8013a98:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8013a9a:	68ba      	ldr	r2, [r7, #8]
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d812      	bhi.n	8013ac8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8013aa2:	687a      	ldr	r2, [r7, #4]
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	1ad2      	subs	r2, r2, r3
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	699b      	ldr	r3, [r3, #24]
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d302      	bcc.n	8013ab6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	617b      	str	r3, [r7, #20]
 8013ab4:	e01b      	b.n	8013aee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013ab6:	4b10      	ldr	r3, [pc, #64]	@ (8013af8 <prvInsertTimerInActiveList+0x7c>)
 8013ab8:	681a      	ldr	r2, [r3, #0]
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	3304      	adds	r3, #4
 8013abe:	4619      	mov	r1, r3
 8013ac0:	4610      	mov	r0, r2
 8013ac2:	f7fc fdd8 	bl	8010676 <vListInsert>
 8013ac6:	e012      	b.n	8013aee <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013ac8:	687a      	ldr	r2, [r7, #4]
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d206      	bcs.n	8013ade <prvInsertTimerInActiveList+0x62>
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d302      	bcc.n	8013ade <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8013ad8:	2301      	movs	r3, #1
 8013ada:	617b      	str	r3, [r7, #20]
 8013adc:	e007      	b.n	8013aee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013ade:	4b07      	ldr	r3, [pc, #28]	@ (8013afc <prvInsertTimerInActiveList+0x80>)
 8013ae0:	681a      	ldr	r2, [r3, #0]
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	3304      	adds	r3, #4
 8013ae6:	4619      	mov	r1, r3
 8013ae8:	4610      	mov	r0, r2
 8013aea:	f7fc fdc4 	bl	8010676 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8013aee:	697b      	ldr	r3, [r7, #20]
    }
 8013af0:	4618      	mov	r0, r3
 8013af2:	3718      	adds	r7, #24
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	2401a064 	.word	0x2401a064
 8013afc:	2401a060 	.word	0x2401a060

08013b00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b088      	sub	sp, #32
 8013b04:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8013b06:	f107 0308 	add.w	r3, r7, #8
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	601a      	str	r2, [r3, #0]
 8013b0e:	605a      	str	r2, [r3, #4]
 8013b10:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8013b12:	e0ab      	b.n	8013c6c <prvProcessReceivedCommands+0x16c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	f2c0 80a8 	blt.w	8013c6c <prvProcessReceivedCommands+0x16c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8013b20:	69fb      	ldr	r3, [r7, #28]
 8013b22:	695b      	ldr	r3, [r3, #20]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d004      	beq.n	8013b32 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	3304      	adds	r3, #4
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7fc fddb 	bl	80106e8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013b32:	1d3b      	adds	r3, r7, #4
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7ff ff81 	bl	8013a3c <prvSampleTimeNow>
 8013b3a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	3b01      	subs	r3, #1
 8013b40:	2b08      	cmp	r3, #8
 8013b42:	f200 8090 	bhi.w	8013c66 <prvProcessReceivedCommands+0x166>
 8013b46:	a201      	add	r2, pc, #4	@ (adr r2, 8013b4c <prvProcessReceivedCommands+0x4c>)
 8013b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b4c:	08013b71 	.word	0x08013b71
 8013b50:	08013b71 	.word	0x08013b71
 8013b54:	08013bd9 	.word	0x08013bd9
 8013b58:	08013bed 	.word	0x08013bed
 8013b5c:	08013c3d 	.word	0x08013c3d
 8013b60:	08013b71 	.word	0x08013b71
 8013b64:	08013b71 	.word	0x08013b71
 8013b68:	08013bd9 	.word	0x08013bd9
 8013b6c:	08013bed 	.word	0x08013bed
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8013b70:	69fb      	ldr	r3, [r7, #28]
 8013b72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013b76:	f043 0301 	orr.w	r3, r3, #1
 8013b7a:	b2da      	uxtb	r2, r3
 8013b7c:	69fb      	ldr	r3, [r7, #28]
 8013b7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013b82:	68fa      	ldr	r2, [r7, #12]
 8013b84:	69fb      	ldr	r3, [r7, #28]
 8013b86:	699b      	ldr	r3, [r3, #24]
 8013b88:	18d1      	adds	r1, r2, r3
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	69ba      	ldr	r2, [r7, #24]
 8013b8e:	69f8      	ldr	r0, [r7, #28]
 8013b90:	f7ff ff74 	bl	8013a7c <prvInsertTimerInActiveList>
 8013b94:	4603      	mov	r3, r0
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d067      	beq.n	8013c6a <prvProcessReceivedCommands+0x16a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8013b9a:	69fb      	ldr	r3, [r7, #28]
 8013b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013ba0:	f003 0304 	and.w	r3, r3, #4
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d009      	beq.n	8013bbc <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	69fb      	ldr	r3, [r7, #28]
 8013bac:	699b      	ldr	r3, [r3, #24]
 8013bae:	4413      	add	r3, r2
 8013bb0:	69ba      	ldr	r2, [r7, #24]
 8013bb2:	4619      	mov	r1, r3
 8013bb4:	69f8      	ldr	r0, [r7, #28]
 8013bb6:	f7ff fe69 	bl	801388c <prvReloadTimer>
 8013bba:	e008      	b.n	8013bce <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013bbc:	69fb      	ldr	r3, [r7, #28]
 8013bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013bc2:	f023 0301 	bic.w	r3, r3, #1
 8013bc6:	b2da      	uxtb	r2, r3
 8013bc8:	69fb      	ldr	r3, [r7, #28]
 8013bca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013bce:	69fb      	ldr	r3, [r7, #28]
 8013bd0:	6a1b      	ldr	r3, [r3, #32]
 8013bd2:	69f8      	ldr	r0, [r7, #28]
 8013bd4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8013bd6:	e048      	b.n	8013c6a <prvProcessReceivedCommands+0x16a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013bd8:	69fb      	ldr	r3, [r7, #28]
 8013bda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013bde:	f023 0301 	bic.w	r3, r3, #1
 8013be2:	b2da      	uxtb	r2, r3
 8013be4:	69fb      	ldr	r3, [r7, #28]
 8013be6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8013bea:	e03f      	b.n	8013c6c <prvProcessReceivedCommands+0x16c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8013bec:	69fb      	ldr	r3, [r7, #28]
 8013bee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013bf2:	f043 0301 	orr.w	r3, r3, #1
 8013bf6:	b2da      	uxtb	r2, r3
 8013bf8:	69fb      	ldr	r3, [r7, #28]
 8013bfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013bfe:	68fa      	ldr	r2, [r7, #12]
 8013c00:	69fb      	ldr	r3, [r7, #28]
 8013c02:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	699b      	ldr	r3, [r3, #24]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d10d      	bne.n	8013c28 <prvProcessReceivedCommands+0x128>
    __asm volatile
 8013c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c10:	b672      	cpsid	i
 8013c12:	f383 8811 	msr	BASEPRI, r3
 8013c16:	f3bf 8f6f 	isb	sy
 8013c1a:	f3bf 8f4f 	dsb	sy
 8013c1e:	b662      	cpsie	i
 8013c20:	617b      	str	r3, [r7, #20]
}
 8013c22:	bf00      	nop
 8013c24:	bf00      	nop
 8013c26:	e7fd      	b.n	8013c24 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013c28:	69fb      	ldr	r3, [r7, #28]
 8013c2a:	699a      	ldr	r2, [r3, #24]
 8013c2c:	69bb      	ldr	r3, [r7, #24]
 8013c2e:	18d1      	adds	r1, r2, r3
 8013c30:	69bb      	ldr	r3, [r7, #24]
 8013c32:	69ba      	ldr	r2, [r7, #24]
 8013c34:	69f8      	ldr	r0, [r7, #28]
 8013c36:	f7ff ff21 	bl	8013a7c <prvInsertTimerInActiveList>
                        break;
 8013c3a:	e017      	b.n	8013c6c <prvProcessReceivedCommands+0x16c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013c3c:	69fb      	ldr	r3, [r7, #28]
 8013c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013c42:	f003 0302 	and.w	r3, r3, #2
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d103      	bne.n	8013c52 <prvProcessReceivedCommands+0x152>
                            {
                                vPortFree( pxTimer );
 8013c4a:	69f8      	ldr	r0, [r7, #28]
 8013c4c:	f000 fc62 	bl	8014514 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8013c50:	e00c      	b.n	8013c6c <prvProcessReceivedCommands+0x16c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013c52:	69fb      	ldr	r3, [r7, #28]
 8013c54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013c58:	f023 0301 	bic.w	r3, r3, #1
 8013c5c:	b2da      	uxtb	r2, r3
 8013c5e:	69fb      	ldr	r3, [r7, #28]
 8013c60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8013c64:	e002      	b.n	8013c6c <prvProcessReceivedCommands+0x16c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8013c66:	bf00      	nop
 8013c68:	e000      	b.n	8013c6c <prvProcessReceivedCommands+0x16c>
                        break;
 8013c6a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8013c6c:	4b08      	ldr	r3, [pc, #32]	@ (8013c90 <prvProcessReceivedCommands+0x190>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	f107 0108 	add.w	r1, r7, #8
 8013c74:	2200      	movs	r2, #0
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7fd f8c4 	bl	8010e04 <xQueueReceive>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	f47f af48 	bne.w	8013b14 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8013c84:	bf00      	nop
 8013c86:	bf00      	nop
 8013c88:	3720      	adds	r7, #32
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	2401a068 	.word	0x2401a068

08013c94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b082      	sub	sp, #8
 8013c98:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013c9a:	e009      	b.n	8013cb0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8013cd8 <prvSwitchTimerLists+0x44>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	68db      	ldr	r3, [r3, #12]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8013ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8013caa:	6838      	ldr	r0, [r7, #0]
 8013cac:	f7ff fe10 	bl	80138d0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013cb0:	4b09      	ldr	r3, [pc, #36]	@ (8013cd8 <prvSwitchTimerLists+0x44>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d1f0      	bne.n	8013c9c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8013cba:	4b07      	ldr	r3, [pc, #28]	@ (8013cd8 <prvSwitchTimerLists+0x44>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8013cc0:	4b06      	ldr	r3, [pc, #24]	@ (8013cdc <prvSwitchTimerLists+0x48>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	4a04      	ldr	r2, [pc, #16]	@ (8013cd8 <prvSwitchTimerLists+0x44>)
 8013cc6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8013cc8:	4a04      	ldr	r2, [pc, #16]	@ (8013cdc <prvSwitchTimerLists+0x48>)
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6013      	str	r3, [r2, #0]
    }
 8013cce:	bf00      	nop
 8013cd0:	3708      	adds	r7, #8
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}
 8013cd6:	bf00      	nop
 8013cd8:	2401a060 	.word	0x2401a060
 8013cdc:	2401a064 	.word	0x2401a064

08013ce0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8013ce6:	f000 f99d 	bl	8014024 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8013cea:	4b15      	ldr	r3, [pc, #84]	@ (8013d40 <prvCheckForValidListAndQueue+0x60>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d120      	bne.n	8013d34 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8013cf2:	4814      	ldr	r0, [pc, #80]	@ (8013d44 <prvCheckForValidListAndQueue+0x64>)
 8013cf4:	f7fc fc6e 	bl	80105d4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8013cf8:	4813      	ldr	r0, [pc, #76]	@ (8013d48 <prvCheckForValidListAndQueue+0x68>)
 8013cfa:	f7fc fc6b 	bl	80105d4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8013cfe:	4b13      	ldr	r3, [pc, #76]	@ (8013d4c <prvCheckForValidListAndQueue+0x6c>)
 8013d00:	4a10      	ldr	r2, [pc, #64]	@ (8013d44 <prvCheckForValidListAndQueue+0x64>)
 8013d02:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8013d04:	4b12      	ldr	r3, [pc, #72]	@ (8013d50 <prvCheckForValidListAndQueue+0x70>)
 8013d06:	4a10      	ldr	r2, [pc, #64]	@ (8013d48 <prvCheckForValidListAndQueue+0x68>)
 8013d08:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	9300      	str	r3, [sp, #0]
 8013d0e:	4b11      	ldr	r3, [pc, #68]	@ (8013d54 <prvCheckForValidListAndQueue+0x74>)
 8013d10:	4a11      	ldr	r2, [pc, #68]	@ (8013d58 <prvCheckForValidListAndQueue+0x78>)
 8013d12:	210c      	movs	r1, #12
 8013d14:	200a      	movs	r0, #10
 8013d16:	f7fc fda7 	bl	8010868 <xQueueGenericCreateStatic>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	4a08      	ldr	r2, [pc, #32]	@ (8013d40 <prvCheckForValidListAndQueue+0x60>)
 8013d1e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8013d20:	4b07      	ldr	r3, [pc, #28]	@ (8013d40 <prvCheckForValidListAndQueue+0x60>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d005      	beq.n	8013d34 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013d28:	4b05      	ldr	r3, [pc, #20]	@ (8013d40 <prvCheckForValidListAndQueue+0x60>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	490b      	ldr	r1, [pc, #44]	@ (8013d5c <prvCheckForValidListAndQueue+0x7c>)
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7fd fc8e 	bl	8011650 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8013d34:	f000 f9ac 	bl	8014090 <vPortExitCritical>
    }
 8013d38:	bf00      	nop
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
 8013d3e:	bf00      	nop
 8013d40:	2401a068 	.word	0x2401a068
 8013d44:	2401a038 	.word	0x2401a038
 8013d48:	2401a04c 	.word	0x2401a04c
 8013d4c:	2401a060 	.word	0x2401a060
 8013d50:	2401a064 	.word	0x2401a064
 8013d54:	2401a0ec 	.word	0x2401a0ec
 8013d58:	2401a074 	.word	0x2401a074
 8013d5c:	080256e8 	.word	0x080256e8

08013d60 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8013d60:	b480      	push	{r7}
 8013d62:	b085      	sub	sp, #20
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	60f8      	str	r0, [r7, #12]
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	3b04      	subs	r3, #4
 8013d70:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013d78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	3b04      	subs	r3, #4
 8013d7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8013d80:	68bb      	ldr	r3, [r7, #8]
 8013d82:	f023 0201 	bic.w	r2, r3, #1
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	3b04      	subs	r3, #4
 8013d8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8013d90:	4a0c      	ldr	r2, [pc, #48]	@ (8013dc4 <pxPortInitialiseStack+0x64>)
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	3b14      	subs	r3, #20
 8013d9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8013d9c:	687a      	ldr	r2, [r7, #4]
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	3b04      	subs	r3, #4
 8013da6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	f06f 0202 	mvn.w	r2, #2
 8013dae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	3b20      	subs	r3, #32
 8013db4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8013db6:	68fb      	ldr	r3, [r7, #12]
}
 8013db8:	4618      	mov	r0, r3
 8013dba:	3714      	adds	r7, #20
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc2:	4770      	bx	lr
 8013dc4:	08013dc9 	.word	0x08013dc9

08013dc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b085      	sub	sp, #20
 8013dcc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8013dd2:	4b15      	ldr	r3, [pc, #84]	@ (8013e28 <prvTaskExitError+0x60>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dda:	d00d      	beq.n	8013df8 <prvTaskExitError+0x30>
    __asm volatile
 8013ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013de0:	b672      	cpsid	i
 8013de2:	f383 8811 	msr	BASEPRI, r3
 8013de6:	f3bf 8f6f 	isb	sy
 8013dea:	f3bf 8f4f 	dsb	sy
 8013dee:	b662      	cpsie	i
 8013df0:	60fb      	str	r3, [r7, #12]
}
 8013df2:	bf00      	nop
 8013df4:	bf00      	nop
 8013df6:	e7fd      	b.n	8013df4 <prvTaskExitError+0x2c>
    __asm volatile
 8013df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dfc:	b672      	cpsid	i
 8013dfe:	f383 8811 	msr	BASEPRI, r3
 8013e02:	f3bf 8f6f 	isb	sy
 8013e06:	f3bf 8f4f 	dsb	sy
 8013e0a:	b662      	cpsie	i
 8013e0c:	60bb      	str	r3, [r7, #8]
}
 8013e0e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8013e10:	bf00      	nop
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d0fc      	beq.n	8013e12 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8013e18:	bf00      	nop
 8013e1a:	bf00      	nop
 8013e1c:	3714      	adds	r7, #20
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e24:	4770      	bx	lr
 8013e26:	bf00      	nop
 8013e28:	240148d4 	.word	0x240148d4
 8013e2c:	00000000 	.word	0x00000000

08013e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8013e30:	4b07      	ldr	r3, [pc, #28]	@ (8013e50 <pxCurrentTCBConst2>)
 8013e32:	6819      	ldr	r1, [r3, #0]
 8013e34:	6808      	ldr	r0, [r1, #0]
 8013e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e3a:	f380 8809 	msr	PSP, r0
 8013e3e:	f3bf 8f6f 	isb	sy
 8013e42:	f04f 0000 	mov.w	r0, #0
 8013e46:	f380 8811 	msr	BASEPRI, r0
 8013e4a:	4770      	bx	lr
 8013e4c:	f3af 8000 	nop.w

08013e50 <pxCurrentTCBConst2>:
 8013e50:	24019868 	.word	0x24019868
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8013e54:	bf00      	nop
 8013e56:	bf00      	nop

08013e58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8013e58:	4808      	ldr	r0, [pc, #32]	@ (8013e7c <prvPortStartFirstTask+0x24>)
 8013e5a:	6800      	ldr	r0, [r0, #0]
 8013e5c:	6800      	ldr	r0, [r0, #0]
 8013e5e:	f380 8808 	msr	MSP, r0
 8013e62:	f04f 0000 	mov.w	r0, #0
 8013e66:	f380 8814 	msr	CONTROL, r0
 8013e6a:	b662      	cpsie	i
 8013e6c:	b661      	cpsie	f
 8013e6e:	f3bf 8f4f 	dsb	sy
 8013e72:	f3bf 8f6f 	isb	sy
 8013e76:	df00      	svc	0
 8013e78:	bf00      	nop
 8013e7a:	0000      	.short	0x0000
 8013e7c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8013e80:	bf00      	nop
 8013e82:	bf00      	nop

08013e84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b08a      	sub	sp, #40	@ 0x28
 8013e88:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8013e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8013ffc <xPortStartScheduler+0x178>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8013e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e92:	332c      	adds	r3, #44	@ 0x2c
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	4a5a      	ldr	r2, [pc, #360]	@ (8014000 <xPortStartScheduler+0x17c>)
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	d00d      	beq.n	8013eb8 <xPortStartScheduler+0x34>
    __asm volatile
 8013e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ea0:	b672      	cpsid	i
 8013ea2:	f383 8811 	msr	BASEPRI, r3
 8013ea6:	f3bf 8f6f 	isb	sy
 8013eaa:	f3bf 8f4f 	dsb	sy
 8013eae:	b662      	cpsie	i
 8013eb0:	61bb      	str	r3, [r7, #24]
}
 8013eb2:	bf00      	nop
 8013eb4:	bf00      	nop
 8013eb6:	e7fd      	b.n	8013eb4 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eba:	3338      	adds	r3, #56	@ 0x38
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	4a51      	ldr	r2, [pc, #324]	@ (8014004 <xPortStartScheduler+0x180>)
 8013ec0:	4293      	cmp	r3, r2
 8013ec2:	d00d      	beq.n	8013ee0 <xPortStartScheduler+0x5c>
    __asm volatile
 8013ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ec8:	b672      	cpsid	i
 8013eca:	f383 8811 	msr	BASEPRI, r3
 8013ece:	f3bf 8f6f 	isb	sy
 8013ed2:	f3bf 8f4f 	dsb	sy
 8013ed6:	b662      	cpsie	i
 8013ed8:	61fb      	str	r3, [r7, #28]
}
 8013eda:	bf00      	nop
 8013edc:	bf00      	nop
 8013ede:	e7fd      	b.n	8013edc <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013ee4:	4b48      	ldr	r3, [pc, #288]	@ (8014008 <xPortStartScheduler+0x184>)
 8013ee6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8013ee8:	6a3b      	ldr	r3, [r7, #32]
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	b2db      	uxtb	r3, r3
 8013eee:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013ef0:	6a3b      	ldr	r3, [r7, #32]
 8013ef2:	22ff      	movs	r2, #255	@ 0xff
 8013ef4:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013ef6:	6a3b      	ldr	r3, [r7, #32]
 8013ef8:	781b      	ldrb	r3, [r3, #0]
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013efe:	79fb      	ldrb	r3, [r7, #7]
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013f06:	b2da      	uxtb	r2, r3
 8013f08:	4b40      	ldr	r3, [pc, #256]	@ (801400c <xPortStartScheduler+0x188>)
 8013f0a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8013f0c:	4b3f      	ldr	r3, [pc, #252]	@ (801400c <xPortStartScheduler+0x188>)
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d10d      	bne.n	8013f30 <xPortStartScheduler+0xac>
    __asm volatile
 8013f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f18:	b672      	cpsid	i
 8013f1a:	f383 8811 	msr	BASEPRI, r3
 8013f1e:	f3bf 8f6f 	isb	sy
 8013f22:	f3bf 8f4f 	dsb	sy
 8013f26:	b662      	cpsie	i
 8013f28:	617b      	str	r3, [r7, #20]
}
 8013f2a:	bf00      	nop
 8013f2c:	bf00      	nop
 8013f2e:	e7fd      	b.n	8013f2c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8013f30:	79fb      	ldrb	r3, [r7, #7]
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	43db      	mvns	r3, r3
 8013f36:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d015      	beq.n	8013f6a <xPortStartScheduler+0xe6>
    __asm volatile
 8013f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f42:	b672      	cpsid	i
 8013f44:	f383 8811 	msr	BASEPRI, r3
 8013f48:	f3bf 8f6f 	isb	sy
 8013f4c:	f3bf 8f4f 	dsb	sy
 8013f50:	b662      	cpsie	i
 8013f52:	613b      	str	r3, [r7, #16]
}
 8013f54:	bf00      	nop
 8013f56:	bf00      	nop
 8013f58:	e7fd      	b.n	8013f56 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013f60:	79fb      	ldrb	r3, [r7, #7]
 8013f62:	b2db      	uxtb	r3, r3
 8013f64:	005b      	lsls	r3, r3, #1
 8013f66:	b2db      	uxtb	r3, r3
 8013f68:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013f6a:	79fb      	ldrb	r3, [r7, #7]
 8013f6c:	b2db      	uxtb	r3, r3
 8013f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013f72:	2b80      	cmp	r3, #128	@ 0x80
 8013f74:	d0f1      	beq.n	8013f5a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	2b08      	cmp	r3, #8
 8013f7a:	d103      	bne.n	8013f84 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8013f7c:	4b24      	ldr	r3, [pc, #144]	@ (8014010 <xPortStartScheduler+0x18c>)
 8013f7e:	2200      	movs	r2, #0
 8013f80:	601a      	str	r2, [r3, #0]
 8013f82:	e004      	b.n	8013f8e <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	f1c3 0307 	rsb	r3, r3, #7
 8013f8a:	4a21      	ldr	r2, [pc, #132]	@ (8014010 <xPortStartScheduler+0x18c>)
 8013f8c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013f8e:	4b20      	ldr	r3, [pc, #128]	@ (8014010 <xPortStartScheduler+0x18c>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	021b      	lsls	r3, r3, #8
 8013f94:	4a1e      	ldr	r2, [pc, #120]	@ (8014010 <xPortStartScheduler+0x18c>)
 8013f96:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013f98:	4b1d      	ldr	r3, [pc, #116]	@ (8014010 <xPortStartScheduler+0x18c>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8014010 <xPortStartScheduler+0x18c>)
 8013fa2:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8013fa4:	7bfb      	ldrb	r3, [r7, #15]
 8013fa6:	b2da      	uxtb	r2, r3
 8013fa8:	6a3b      	ldr	r3, [r7, #32]
 8013faa:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8013fac:	4b19      	ldr	r3, [pc, #100]	@ (8014014 <xPortStartScheduler+0x190>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	4a18      	ldr	r2, [pc, #96]	@ (8014014 <xPortStartScheduler+0x190>)
 8013fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013fb6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8013fb8:	4b16      	ldr	r3, [pc, #88]	@ (8014014 <xPortStartScheduler+0x190>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	4a15      	ldr	r2, [pc, #84]	@ (8014014 <xPortStartScheduler+0x190>)
 8013fbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013fc2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8013fc4:	4b14      	ldr	r3, [pc, #80]	@ (8014018 <xPortStartScheduler+0x194>)
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8013fca:	f000 f8e9 	bl	80141a0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8013fce:	4b13      	ldr	r3, [pc, #76]	@ (801401c <xPortStartScheduler+0x198>)
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8013fd4:	f000 f908 	bl	80141e8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013fd8:	4b11      	ldr	r3, [pc, #68]	@ (8014020 <xPortStartScheduler+0x19c>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	4a10      	ldr	r2, [pc, #64]	@ (8014020 <xPortStartScheduler+0x19c>)
 8013fde:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8013fe2:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8013fe4:	f7ff ff38 	bl	8013e58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8013fe8:	f7fe fac6 	bl	8012578 <vTaskSwitchContext>
    prvTaskExitError();
 8013fec:	f7ff feec 	bl	8013dc8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8013ff0:	2300      	movs	r3, #0
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3728      	adds	r7, #40	@ 0x28
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	e000ed08 	.word	0xe000ed08
 8014000:	08013e31 	.word	0x08013e31
 8014004:	080140f1 	.word	0x080140f1
 8014008:	e000e400 	.word	0xe000e400
 801400c:	2401a13c 	.word	0x2401a13c
 8014010:	2401a140 	.word	0x2401a140
 8014014:	e000ed20 	.word	0xe000ed20
 8014018:	e000ed1c 	.word	0xe000ed1c
 801401c:	240148d4 	.word	0x240148d4
 8014020:	e000ef34 	.word	0xe000ef34

08014024 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014024:	b480      	push	{r7}
 8014026:	b083      	sub	sp, #12
 8014028:	af00      	add	r7, sp, #0
    __asm volatile
 801402a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801402e:	b672      	cpsid	i
 8014030:	f383 8811 	msr	BASEPRI, r3
 8014034:	f3bf 8f6f 	isb	sy
 8014038:	f3bf 8f4f 	dsb	sy
 801403c:	b662      	cpsie	i
 801403e:	607b      	str	r3, [r7, #4]
}
 8014040:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8014042:	4b11      	ldr	r3, [pc, #68]	@ (8014088 <vPortEnterCritical+0x64>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	3301      	adds	r3, #1
 8014048:	4a0f      	ldr	r2, [pc, #60]	@ (8014088 <vPortEnterCritical+0x64>)
 801404a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 801404c:	4b0e      	ldr	r3, [pc, #56]	@ (8014088 <vPortEnterCritical+0x64>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	2b01      	cmp	r3, #1
 8014052:	d112      	bne.n	801407a <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014054:	4b0d      	ldr	r3, [pc, #52]	@ (801408c <vPortEnterCritical+0x68>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	b2db      	uxtb	r3, r3
 801405a:	2b00      	cmp	r3, #0
 801405c:	d00d      	beq.n	801407a <vPortEnterCritical+0x56>
    __asm volatile
 801405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014062:	b672      	cpsid	i
 8014064:	f383 8811 	msr	BASEPRI, r3
 8014068:	f3bf 8f6f 	isb	sy
 801406c:	f3bf 8f4f 	dsb	sy
 8014070:	b662      	cpsie	i
 8014072:	603b      	str	r3, [r7, #0]
}
 8014074:	bf00      	nop
 8014076:	bf00      	nop
 8014078:	e7fd      	b.n	8014076 <vPortEnterCritical+0x52>
    }
}
 801407a:	bf00      	nop
 801407c:	370c      	adds	r7, #12
 801407e:	46bd      	mov	sp, r7
 8014080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014084:	4770      	bx	lr
 8014086:	bf00      	nop
 8014088:	240148d4 	.word	0x240148d4
 801408c:	e000ed04 	.word	0xe000ed04

08014090 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014090:	b480      	push	{r7}
 8014092:	b083      	sub	sp, #12
 8014094:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8014096:	4b13      	ldr	r3, [pc, #76]	@ (80140e4 <vPortExitCritical+0x54>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d10d      	bne.n	80140ba <vPortExitCritical+0x2a>
    __asm volatile
 801409e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140a2:	b672      	cpsid	i
 80140a4:	f383 8811 	msr	BASEPRI, r3
 80140a8:	f3bf 8f6f 	isb	sy
 80140ac:	f3bf 8f4f 	dsb	sy
 80140b0:	b662      	cpsie	i
 80140b2:	607b      	str	r3, [r7, #4]
}
 80140b4:	bf00      	nop
 80140b6:	bf00      	nop
 80140b8:	e7fd      	b.n	80140b6 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 80140ba:	4b0a      	ldr	r3, [pc, #40]	@ (80140e4 <vPortExitCritical+0x54>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	3b01      	subs	r3, #1
 80140c0:	4a08      	ldr	r2, [pc, #32]	@ (80140e4 <vPortExitCritical+0x54>)
 80140c2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80140c4:	4b07      	ldr	r3, [pc, #28]	@ (80140e4 <vPortExitCritical+0x54>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d105      	bne.n	80140d8 <vPortExitCritical+0x48>
 80140cc:	2300      	movs	r3, #0
 80140ce:	603b      	str	r3, [r7, #0]
    __asm volatile
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	f383 8811 	msr	BASEPRI, r3
}
 80140d6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80140d8:	bf00      	nop
 80140da:	370c      	adds	r7, #12
 80140dc:	46bd      	mov	sp, r7
 80140de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e2:	4770      	bx	lr
 80140e4:	240148d4 	.word	0x240148d4
	...

080140f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80140f0:	f3ef 8009 	mrs	r0, PSP
 80140f4:	f3bf 8f6f 	isb	sy
 80140f8:	4b15      	ldr	r3, [pc, #84]	@ (8014150 <pxCurrentTCBConst>)
 80140fa:	681a      	ldr	r2, [r3, #0]
 80140fc:	f01e 0f10 	tst.w	lr, #16
 8014100:	bf08      	it	eq
 8014102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801410a:	6010      	str	r0, [r2, #0]
 801410c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014114:	b672      	cpsid	i
 8014116:	f380 8811 	msr	BASEPRI, r0
 801411a:	f3bf 8f4f 	dsb	sy
 801411e:	f3bf 8f6f 	isb	sy
 8014122:	b662      	cpsie	i
 8014124:	f7fe fa28 	bl	8012578 <vTaskSwitchContext>
 8014128:	f04f 0000 	mov.w	r0, #0
 801412c:	f380 8811 	msr	BASEPRI, r0
 8014130:	bc09      	pop	{r0, r3}
 8014132:	6819      	ldr	r1, [r3, #0]
 8014134:	6808      	ldr	r0, [r1, #0]
 8014136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801413a:	f01e 0f10 	tst.w	lr, #16
 801413e:	bf08      	it	eq
 8014140:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014144:	f380 8809 	msr	PSP, r0
 8014148:	f3bf 8f6f 	isb	sy
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop

08014150 <pxCurrentTCBConst>:
 8014150:	24019868 	.word	0x24019868
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8014154:	bf00      	nop
 8014156:	bf00      	nop

08014158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b082      	sub	sp, #8
 801415c:	af00      	add	r7, sp, #0
    __asm volatile
 801415e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014162:	b672      	cpsid	i
 8014164:	f383 8811 	msr	BASEPRI, r3
 8014168:	f3bf 8f6f 	isb	sy
 801416c:	f3bf 8f4f 	dsb	sy
 8014170:	b662      	cpsie	i
 8014172:	607b      	str	r3, [r7, #4]
}
 8014174:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8014176:	f7fe f8e3 	bl	8012340 <xTaskIncrementTick>
 801417a:	4603      	mov	r3, r0
 801417c:	2b00      	cmp	r3, #0
 801417e:	d003      	beq.n	8014188 <SysTick_Handler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014180:	4b06      	ldr	r3, [pc, #24]	@ (801419c <SysTick_Handler+0x44>)
 8014182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014186:	601a      	str	r2, [r3, #0]
 8014188:	2300      	movs	r3, #0
 801418a:	603b      	str	r3, [r7, #0]
    __asm volatile
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	f383 8811 	msr	BASEPRI, r3
}
 8014192:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8014194:	bf00      	nop
 8014196:	3708      	adds	r7, #8
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	e000ed04 	.word	0xe000ed04

080141a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80141a0:	b480      	push	{r7}
 80141a2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80141a4:	4b0b      	ldr	r3, [pc, #44]	@ (80141d4 <vPortSetupTimerInterrupt+0x34>)
 80141a6:	2200      	movs	r2, #0
 80141a8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80141aa:	4b0b      	ldr	r3, [pc, #44]	@ (80141d8 <vPortSetupTimerInterrupt+0x38>)
 80141ac:	2200      	movs	r2, #0
 80141ae:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80141b0:	4b0a      	ldr	r3, [pc, #40]	@ (80141dc <vPortSetupTimerInterrupt+0x3c>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	4a0a      	ldr	r2, [pc, #40]	@ (80141e0 <vPortSetupTimerInterrupt+0x40>)
 80141b6:	fba2 2303 	umull	r2, r3, r2, r3
 80141ba:	099b      	lsrs	r3, r3, #6
 80141bc:	4a09      	ldr	r2, [pc, #36]	@ (80141e4 <vPortSetupTimerInterrupt+0x44>)
 80141be:	3b01      	subs	r3, #1
 80141c0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80141c2:	4b04      	ldr	r3, [pc, #16]	@ (80141d4 <vPortSetupTimerInterrupt+0x34>)
 80141c4:	2207      	movs	r2, #7
 80141c6:	601a      	str	r2, [r3, #0]
}
 80141c8:	bf00      	nop
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr
 80141d2:	bf00      	nop
 80141d4:	e000e010 	.word	0xe000e010
 80141d8:	e000e018 	.word	0xe000e018
 80141dc:	240148d8 	.word	0x240148d8
 80141e0:	10624dd3 	.word	0x10624dd3
 80141e4:	e000e014 	.word	0xe000e014

080141e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80141e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80141f8 <vPortEnableVFP+0x10>
 80141ec:	6801      	ldr	r1, [r0, #0]
 80141ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80141f2:	6001      	str	r1, [r0, #0]
 80141f4:	4770      	bx	lr
 80141f6:	0000      	.short	0x0000
 80141f8:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80141fc:	bf00      	nop
 80141fe:	bf00      	nop

08014200 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8014200:	b480      	push	{r7}
 8014202:	b085      	sub	sp, #20
 8014204:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8014206:	f3ef 8305 	mrs	r3, IPSR
 801420a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	2b0f      	cmp	r3, #15
 8014210:	d917      	bls.n	8014242 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014212:	4a1a      	ldr	r2, [pc, #104]	@ (801427c <vPortValidateInterruptPriority+0x7c>)
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	4413      	add	r3, r2
 8014218:	781b      	ldrb	r3, [r3, #0]
 801421a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801421c:	4b18      	ldr	r3, [pc, #96]	@ (8014280 <vPortValidateInterruptPriority+0x80>)
 801421e:	781b      	ldrb	r3, [r3, #0]
 8014220:	7afa      	ldrb	r2, [r7, #11]
 8014222:	429a      	cmp	r2, r3
 8014224:	d20d      	bcs.n	8014242 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8014226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801422a:	b672      	cpsid	i
 801422c:	f383 8811 	msr	BASEPRI, r3
 8014230:	f3bf 8f6f 	isb	sy
 8014234:	f3bf 8f4f 	dsb	sy
 8014238:	b662      	cpsie	i
 801423a:	607b      	str	r3, [r7, #4]
}
 801423c:	bf00      	nop
 801423e:	bf00      	nop
 8014240:	e7fd      	b.n	801423e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014242:	4b10      	ldr	r3, [pc, #64]	@ (8014284 <vPortValidateInterruptPriority+0x84>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801424a:	4b0f      	ldr	r3, [pc, #60]	@ (8014288 <vPortValidateInterruptPriority+0x88>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	429a      	cmp	r2, r3
 8014250:	d90d      	bls.n	801426e <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8014252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014256:	b672      	cpsid	i
 8014258:	f383 8811 	msr	BASEPRI, r3
 801425c:	f3bf 8f6f 	isb	sy
 8014260:	f3bf 8f4f 	dsb	sy
 8014264:	b662      	cpsie	i
 8014266:	603b      	str	r3, [r7, #0]
}
 8014268:	bf00      	nop
 801426a:	bf00      	nop
 801426c:	e7fd      	b.n	801426a <vPortValidateInterruptPriority+0x6a>
    }
 801426e:	bf00      	nop
 8014270:	3714      	adds	r7, #20
 8014272:	46bd      	mov	sp, r7
 8014274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014278:	4770      	bx	lr
 801427a:	bf00      	nop
 801427c:	e000e3f0 	.word	0xe000e3f0
 8014280:	2401a13c 	.word	0x2401a13c
 8014284:	e000ed0c 	.word	0xe000ed0c
 8014288:	2401a140 	.word	0x2401a140

0801428c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b08e      	sub	sp, #56	@ 0x38
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8014294:	2300      	movs	r3, #0
 8014296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d022      	beq.n	80142e4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 801429e:	2308      	movs	r3, #8
 80142a0:	43db      	mvns	r3, r3
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d81b      	bhi.n	80142e0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80142a8:	2208      	movs	r2, #8
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	4413      	add	r3, r2
 80142ae:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	f003 0307 	and.w	r3, r3, #7
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d014      	beq.n	80142e4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f003 0307 	and.w	r3, r3, #7
 80142c0:	f1c3 0308 	rsb	r3, r3, #8
 80142c4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80142c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142c8:	43db      	mvns	r3, r3
 80142ca:	687a      	ldr	r2, [r7, #4]
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d804      	bhi.n	80142da <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80142d0:	687a      	ldr	r2, [r7, #4]
 80142d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142d4:	4413      	add	r3, r2
 80142d6:	607b      	str	r3, [r7, #4]
 80142d8:	e004      	b.n	80142e4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80142da:	2300      	movs	r3, #0
 80142dc:	607b      	str	r3, [r7, #4]
 80142de:	e001      	b.n	80142e4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80142e0:	2300      	movs	r3, #0
 80142e2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80142e4:	f7fd fe7e 	bl	8011fe4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80142e8:	4b83      	ldr	r3, [pc, #524]	@ (80144f8 <pvPortMalloc+0x26c>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d101      	bne.n	80142f4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80142f0:	f000 f98c 	bl	801460c <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	f2c0 80de 	blt.w	80144b8 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	f000 80da 	beq.w	80144b8 <pvPortMalloc+0x22c>
 8014304:	4b7d      	ldr	r3, [pc, #500]	@ (80144fc <pvPortMalloc+0x270>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	687a      	ldr	r2, [r7, #4]
 801430a:	429a      	cmp	r2, r3
 801430c:	f200 80d4 	bhi.w	80144b8 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8014310:	4b7b      	ldr	r3, [pc, #492]	@ (8014500 <pvPortMalloc+0x274>)
 8014312:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8014314:	4b7a      	ldr	r3, [pc, #488]	@ (8014500 <pvPortMalloc+0x274>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 801431a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801431c:	4a79      	ldr	r2, [pc, #484]	@ (8014504 <pvPortMalloc+0x278>)
 801431e:	4293      	cmp	r3, r2
 8014320:	d305      	bcc.n	801432e <pvPortMalloc+0xa2>
 8014322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014324:	4a78      	ldr	r2, [pc, #480]	@ (8014508 <pvPortMalloc+0x27c>)
 8014326:	4293      	cmp	r3, r2
 8014328:	d801      	bhi.n	801432e <pvPortMalloc+0xa2>
 801432a:	2301      	movs	r3, #1
 801432c:	e000      	b.n	8014330 <pvPortMalloc+0xa4>
 801432e:	2300      	movs	r3, #0
 8014330:	2b00      	cmp	r3, #0
 8014332:	d12d      	bne.n	8014390 <pvPortMalloc+0x104>
    __asm volatile
 8014334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014338:	b672      	cpsid	i
 801433a:	f383 8811 	msr	BASEPRI, r3
 801433e:	f3bf 8f6f 	isb	sy
 8014342:	f3bf 8f4f 	dsb	sy
 8014346:	b662      	cpsie	i
 8014348:	623b      	str	r3, [r7, #32]
}
 801434a:	bf00      	nop
 801434c:	bf00      	nop
 801434e:	e7fd      	b.n	801434c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8014350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014352:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8014354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 801435a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801435c:	4a69      	ldr	r2, [pc, #420]	@ (8014504 <pvPortMalloc+0x278>)
 801435e:	4293      	cmp	r3, r2
 8014360:	d305      	bcc.n	801436e <pvPortMalloc+0xe2>
 8014362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014364:	4a68      	ldr	r2, [pc, #416]	@ (8014508 <pvPortMalloc+0x27c>)
 8014366:	4293      	cmp	r3, r2
 8014368:	d801      	bhi.n	801436e <pvPortMalloc+0xe2>
 801436a:	2301      	movs	r3, #1
 801436c:	e000      	b.n	8014370 <pvPortMalloc+0xe4>
 801436e:	2300      	movs	r3, #0
 8014370:	2b00      	cmp	r3, #0
 8014372:	d10d      	bne.n	8014390 <pvPortMalloc+0x104>
    __asm volatile
 8014374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014378:	b672      	cpsid	i
 801437a:	f383 8811 	msr	BASEPRI, r3
 801437e:	f3bf 8f6f 	isb	sy
 8014382:	f3bf 8f4f 	dsb	sy
 8014386:	b662      	cpsie	i
 8014388:	61fb      	str	r3, [r7, #28]
}
 801438a:	bf00      	nop
 801438c:	bf00      	nop
 801438e:	e7fd      	b.n	801438c <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8014390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	687a      	ldr	r2, [r7, #4]
 8014396:	429a      	cmp	r2, r3
 8014398:	d903      	bls.n	80143a2 <pvPortMalloc+0x116>
 801439a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d1d6      	bne.n	8014350 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80143a2:	4b55      	ldr	r3, [pc, #340]	@ (80144f8 <pvPortMalloc+0x26c>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80143a8:	429a      	cmp	r2, r3
 80143aa:	f000 8085 	beq.w	80144b8 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80143ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	2208      	movs	r2, #8
 80143b4:	4413      	add	r3, r2
 80143b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80143b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ba:	4a52      	ldr	r2, [pc, #328]	@ (8014504 <pvPortMalloc+0x278>)
 80143bc:	4293      	cmp	r3, r2
 80143be:	d305      	bcc.n	80143cc <pvPortMalloc+0x140>
 80143c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143c2:	4a51      	ldr	r2, [pc, #324]	@ (8014508 <pvPortMalloc+0x27c>)
 80143c4:	4293      	cmp	r3, r2
 80143c6:	d801      	bhi.n	80143cc <pvPortMalloc+0x140>
 80143c8:	2301      	movs	r3, #1
 80143ca:	e000      	b.n	80143ce <pvPortMalloc+0x142>
 80143cc:	2300      	movs	r3, #0
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d10d      	bne.n	80143ee <pvPortMalloc+0x162>
    __asm volatile
 80143d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143d6:	b672      	cpsid	i
 80143d8:	f383 8811 	msr	BASEPRI, r3
 80143dc:	f3bf 8f6f 	isb	sy
 80143e0:	f3bf 8f4f 	dsb	sy
 80143e4:	b662      	cpsie	i
 80143e6:	61bb      	str	r3, [r7, #24]
}
 80143e8:	bf00      	nop
 80143ea:	bf00      	nop
 80143ec:	e7fd      	b.n	80143ea <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80143ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143f0:	681a      	ldr	r2, [r3, #0]
 80143f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143f4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80143f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	687a      	ldr	r2, [r7, #4]
 80143fc:	429a      	cmp	r2, r3
 80143fe:	d90d      	bls.n	801441c <pvPortMalloc+0x190>
    __asm volatile
 8014400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014404:	b672      	cpsid	i
 8014406:	f383 8811 	msr	BASEPRI, r3
 801440a:	f3bf 8f6f 	isb	sy
 801440e:	f3bf 8f4f 	dsb	sy
 8014412:	b662      	cpsie	i
 8014414:	617b      	str	r3, [r7, #20]
}
 8014416:	bf00      	nop
 8014418:	bf00      	nop
 801441a:	e7fd      	b.n	8014418 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801441c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801441e:	685a      	ldr	r2, [r3, #4]
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	1ad2      	subs	r2, r2, r3
 8014424:	2308      	movs	r3, #8
 8014426:	005b      	lsls	r3, r3, #1
 8014428:	429a      	cmp	r2, r3
 801442a:	d926      	bls.n	801447a <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801442c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	4413      	add	r3, r2
 8014432:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014436:	f003 0307 	and.w	r3, r3, #7
 801443a:	2b00      	cmp	r3, #0
 801443c:	d00d      	beq.n	801445a <pvPortMalloc+0x1ce>
    __asm volatile
 801443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014442:	b672      	cpsid	i
 8014444:	f383 8811 	msr	BASEPRI, r3
 8014448:	f3bf 8f6f 	isb	sy
 801444c:	f3bf 8f4f 	dsb	sy
 8014450:	b662      	cpsie	i
 8014452:	613b      	str	r3, [r7, #16]
}
 8014454:	bf00      	nop
 8014456:	bf00      	nop
 8014458:	e7fd      	b.n	8014456 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801445a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801445c:	685a      	ldr	r2, [r3, #4]
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	1ad2      	subs	r2, r2, r3
 8014462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014464:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8014466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 801446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801446e:	681a      	ldr	r2, [r3, #0]
 8014470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014472:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8014474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014478:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 801447a:	4b20      	ldr	r3, [pc, #128]	@ (80144fc <pvPortMalloc+0x270>)
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014480:	685b      	ldr	r3, [r3, #4]
 8014482:	1ad3      	subs	r3, r2, r3
 8014484:	4a1d      	ldr	r2, [pc, #116]	@ (80144fc <pvPortMalloc+0x270>)
 8014486:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014488:	4b1c      	ldr	r3, [pc, #112]	@ (80144fc <pvPortMalloc+0x270>)
 801448a:	681a      	ldr	r2, [r3, #0]
 801448c:	4b1f      	ldr	r3, [pc, #124]	@ (801450c <pvPortMalloc+0x280>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	429a      	cmp	r2, r3
 8014492:	d203      	bcs.n	801449c <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014494:	4b19      	ldr	r3, [pc, #100]	@ (80144fc <pvPortMalloc+0x270>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	4a1c      	ldr	r2, [pc, #112]	@ (801450c <pvPortMalloc+0x280>)
 801449a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 801449c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801449e:	685b      	ldr	r3, [r3, #4]
 80144a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80144a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144a6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80144a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144aa:	2200      	movs	r2, #0
 80144ac:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80144ae:	4b18      	ldr	r3, [pc, #96]	@ (8014510 <pvPortMalloc+0x284>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	3301      	adds	r3, #1
 80144b4:	4a16      	ldr	r2, [pc, #88]	@ (8014510 <pvPortMalloc+0x284>)
 80144b6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80144b8:	f7fd fda2 	bl	8012000 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 80144bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d101      	bne.n	80144c6 <pvPortMalloc+0x23a>
        {
            vApplicationMallocFailedHook();
 80144c2:	f7ec fa77 	bl	80009b4 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80144c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144c8:	f003 0307 	and.w	r3, r3, #7
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d00d      	beq.n	80144ec <pvPortMalloc+0x260>
    __asm volatile
 80144d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144d4:	b672      	cpsid	i
 80144d6:	f383 8811 	msr	BASEPRI, r3
 80144da:	f3bf 8f6f 	isb	sy
 80144de:	f3bf 8f4f 	dsb	sy
 80144e2:	b662      	cpsie	i
 80144e4:	60fb      	str	r3, [r7, #12]
}
 80144e6:	bf00      	nop
 80144e8:	bf00      	nop
 80144ea:	e7fd      	b.n	80144e8 <pvPortMalloc+0x25c>
    return pvReturn;
 80144ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3738      	adds	r7, #56	@ 0x38
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}
 80144f6:	bf00      	nop
 80144f8:	2405a14c 	.word	0x2405a14c
 80144fc:	2405a150 	.word	0x2405a150
 8014500:	2405a144 	.word	0x2405a144
 8014504:	2401a144 	.word	0x2401a144
 8014508:	2405a143 	.word	0x2405a143
 801450c:	2405a154 	.word	0x2405a154
 8014510:	2405a158 	.word	0x2405a158

08014514 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b088      	sub	sp, #32
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d066      	beq.n	80145f4 <vPortFree+0xe0>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8014526:	2308      	movs	r3, #8
 8014528:	425b      	negs	r3, r3
 801452a:	69fa      	ldr	r2, [r7, #28]
 801452c:	4413      	add	r3, r2
 801452e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8014530:	69fb      	ldr	r3, [r7, #28]
 8014532:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8014534:	69bb      	ldr	r3, [r7, #24]
 8014536:	4a31      	ldr	r2, [pc, #196]	@ (80145fc <vPortFree+0xe8>)
 8014538:	4293      	cmp	r3, r2
 801453a:	d305      	bcc.n	8014548 <vPortFree+0x34>
 801453c:	69bb      	ldr	r3, [r7, #24]
 801453e:	4a30      	ldr	r2, [pc, #192]	@ (8014600 <vPortFree+0xec>)
 8014540:	4293      	cmp	r3, r2
 8014542:	d801      	bhi.n	8014548 <vPortFree+0x34>
 8014544:	2301      	movs	r3, #1
 8014546:	e000      	b.n	801454a <vPortFree+0x36>
 8014548:	2300      	movs	r3, #0
 801454a:	2b00      	cmp	r3, #0
 801454c:	d10d      	bne.n	801456a <vPortFree+0x56>
    __asm volatile
 801454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014552:	b672      	cpsid	i
 8014554:	f383 8811 	msr	BASEPRI, r3
 8014558:	f3bf 8f6f 	isb	sy
 801455c:	f3bf 8f4f 	dsb	sy
 8014560:	b662      	cpsie	i
 8014562:	617b      	str	r3, [r7, #20]
}
 8014564:	bf00      	nop
 8014566:	bf00      	nop
 8014568:	e7fd      	b.n	8014566 <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 801456a:	69bb      	ldr	r3, [r7, #24]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	db0d      	blt.n	801458e <vPortFree+0x7a>
    __asm volatile
 8014572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014576:	b672      	cpsid	i
 8014578:	f383 8811 	msr	BASEPRI, r3
 801457c:	f3bf 8f6f 	isb	sy
 8014580:	f3bf 8f4f 	dsb	sy
 8014584:	b662      	cpsie	i
 8014586:	613b      	str	r3, [r7, #16]
}
 8014588:	bf00      	nop
 801458a:	bf00      	nop
 801458c:	e7fd      	b.n	801458a <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 801458e:	69bb      	ldr	r3, [r7, #24]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d00d      	beq.n	80145b2 <vPortFree+0x9e>
    __asm volatile
 8014596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801459a:	b672      	cpsid	i
 801459c:	f383 8811 	msr	BASEPRI, r3
 80145a0:	f3bf 8f6f 	isb	sy
 80145a4:	f3bf 8f4f 	dsb	sy
 80145a8:	b662      	cpsie	i
 80145aa:	60fb      	str	r3, [r7, #12]
}
 80145ac:	bf00      	nop
 80145ae:	bf00      	nop
 80145b0:	e7fd      	b.n	80145ae <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80145b2:	69bb      	ldr	r3, [r7, #24]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	da1c      	bge.n	80145f4 <vPortFree+0xe0>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80145ba:	69bb      	ldr	r3, [r7, #24]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d118      	bne.n	80145f4 <vPortFree+0xe0>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80145c2:	69bb      	ldr	r3, [r7, #24]
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80145ca:	69bb      	ldr	r3, [r7, #24]
 80145cc:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80145ce:	f7fd fd09 	bl	8011fe4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	685a      	ldr	r2, [r3, #4]
 80145d6:	4b0b      	ldr	r3, [pc, #44]	@ (8014604 <vPortFree+0xf0>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	4413      	add	r3, r2
 80145dc:	4a09      	ldr	r2, [pc, #36]	@ (8014604 <vPortFree+0xf0>)
 80145de:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80145e0:	69b8      	ldr	r0, [r7, #24]
 80145e2:	f000 f86d 	bl	80146c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80145e6:	4b08      	ldr	r3, [pc, #32]	@ (8014608 <vPortFree+0xf4>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	3301      	adds	r3, #1
 80145ec:	4a06      	ldr	r2, [pc, #24]	@ (8014608 <vPortFree+0xf4>)
 80145ee:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80145f0:	f7fd fd06 	bl	8012000 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80145f4:	bf00      	nop
 80145f6:	3720      	adds	r7, #32
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	2401a144 	.word	0x2401a144
 8014600:	2405a143 	.word	0x2405a143
 8014604:	2405a150 	.word	0x2405a150
 8014608:	2405a15c 	.word	0x2405a15c

0801460c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 801460c:	b480      	push	{r7}
 801460e:	b085      	sub	sp, #20
 8014610:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014612:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8014616:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8014618:	4b24      	ldr	r3, [pc, #144]	@ (80146ac <prvHeapInit+0xa0>)
 801461a:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	f003 0307 	and.w	r3, r3, #7
 8014622:	2b00      	cmp	r3, #0
 8014624:	d00c      	beq.n	8014640 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	3307      	adds	r3, #7
 801462a:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	f023 0307 	bic.w	r3, r3, #7
 8014632:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8014634:	68ba      	ldr	r2, [r7, #8]
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	1ad3      	subs	r3, r2, r3
 801463a:	4a1c      	ldr	r2, [pc, #112]	@ (80146ac <prvHeapInit+0xa0>)
 801463c:	4413      	add	r3, r2
 801463e:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	4a1b      	ldr	r2, [pc, #108]	@ (80146b0 <prvHeapInit+0xa4>)
 8014644:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8014646:	4b1a      	ldr	r3, [pc, #104]	@ (80146b0 <prvHeapInit+0xa4>)
 8014648:	2200      	movs	r2, #0
 801464a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 801464c:	68fa      	ldr	r2, [r7, #12]
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	4413      	add	r3, r2
 8014652:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8014654:	2208      	movs	r2, #8
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	1a9b      	subs	r3, r3, r2
 801465a:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f023 0307 	bic.w	r3, r3, #7
 8014662:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	4a13      	ldr	r2, [pc, #76]	@ (80146b4 <prvHeapInit+0xa8>)
 8014668:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 801466a:	4b12      	ldr	r3, [pc, #72]	@ (80146b4 <prvHeapInit+0xa8>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2200      	movs	r2, #0
 8014670:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8014672:	4b10      	ldr	r3, [pc, #64]	@ (80146b4 <prvHeapInit+0xa8>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	2200      	movs	r2, #0
 8014678:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	1ad2      	subs	r2, r2, r3
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8014688:	4b0a      	ldr	r3, [pc, #40]	@ (80146b4 <prvHeapInit+0xa8>)
 801468a:	681a      	ldr	r2, [r3, #0]
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	4a08      	ldr	r2, [pc, #32]	@ (80146b8 <prvHeapInit+0xac>)
 8014696:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	4a07      	ldr	r2, [pc, #28]	@ (80146bc <prvHeapInit+0xb0>)
 801469e:	6013      	str	r3, [r2, #0]
}
 80146a0:	bf00      	nop
 80146a2:	3714      	adds	r7, #20
 80146a4:	46bd      	mov	sp, r7
 80146a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146aa:	4770      	bx	lr
 80146ac:	2401a144 	.word	0x2401a144
 80146b0:	2405a144 	.word	0x2405a144
 80146b4:	2405a14c 	.word	0x2405a14c
 80146b8:	2405a154 	.word	0x2405a154
 80146bc:	2405a150 	.word	0x2405a150

080146c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80146c0:	b480      	push	{r7}
 80146c2:	b087      	sub	sp, #28
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80146c8:	4b37      	ldr	r3, [pc, #220]	@ (80147a8 <prvInsertBlockIntoFreeList+0xe8>)
 80146ca:	617b      	str	r3, [r7, #20]
 80146cc:	e002      	b.n	80146d4 <prvInsertBlockIntoFreeList+0x14>
 80146ce:	697b      	ldr	r3, [r7, #20]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	617b      	str	r3, [r7, #20]
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	687a      	ldr	r2, [r7, #4]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d8f7      	bhi.n	80146ce <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	4a31      	ldr	r2, [pc, #196]	@ (80147a8 <prvInsertBlockIntoFreeList+0xe8>)
 80146e2:	4293      	cmp	r3, r2
 80146e4:	d01a      	beq.n	801471c <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	4a30      	ldr	r2, [pc, #192]	@ (80147ac <prvInsertBlockIntoFreeList+0xec>)
 80146ea:	4293      	cmp	r3, r2
 80146ec:	d305      	bcc.n	80146fa <prvInsertBlockIntoFreeList+0x3a>
 80146ee:	697b      	ldr	r3, [r7, #20]
 80146f0:	4a2f      	ldr	r2, [pc, #188]	@ (80147b0 <prvInsertBlockIntoFreeList+0xf0>)
 80146f2:	4293      	cmp	r3, r2
 80146f4:	d801      	bhi.n	80146fa <prvInsertBlockIntoFreeList+0x3a>
 80146f6:	2301      	movs	r3, #1
 80146f8:	e000      	b.n	80146fc <prvInsertBlockIntoFreeList+0x3c>
 80146fa:	2300      	movs	r3, #0
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d10d      	bne.n	801471c <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 8014700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014704:	b672      	cpsid	i
 8014706:	f383 8811 	msr	BASEPRI, r3
 801470a:	f3bf 8f6f 	isb	sy
 801470e:	f3bf 8f4f 	dsb	sy
 8014712:	b662      	cpsie	i
 8014714:	60fb      	str	r3, [r7, #12]
}
 8014716:	bf00      	nop
 8014718:	bf00      	nop
 801471a:	e7fd      	b.n	8014718 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014720:	697b      	ldr	r3, [r7, #20]
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	693a      	ldr	r2, [r7, #16]
 8014726:	4413      	add	r3, r2
 8014728:	687a      	ldr	r2, [r7, #4]
 801472a:	429a      	cmp	r2, r3
 801472c:	d108      	bne.n	8014740 <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	685a      	ldr	r2, [r3, #4]
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	685b      	ldr	r3, [r3, #4]
 8014736:	441a      	add	r2, r3
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	693a      	ldr	r2, [r7, #16]
 801474a:	441a      	add	r2, r3
 801474c:	697b      	ldr	r3, [r7, #20]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	429a      	cmp	r2, r3
 8014752:	d118      	bne.n	8014786 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	681a      	ldr	r2, [r3, #0]
 8014758:	4b16      	ldr	r3, [pc, #88]	@ (80147b4 <prvInsertBlockIntoFreeList+0xf4>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	429a      	cmp	r2, r3
 801475e:	d00d      	beq.n	801477c <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	685a      	ldr	r2, [r3, #4]
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	441a      	add	r2, r3
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	681a      	ldr	r2, [r3, #0]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	601a      	str	r2, [r3, #0]
 801477a:	e008      	b.n	801478e <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 801477c:	4b0d      	ldr	r3, [pc, #52]	@ (80147b4 <prvInsertBlockIntoFreeList+0xf4>)
 801477e:	681a      	ldr	r2, [r3, #0]
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	601a      	str	r2, [r3, #0]
 8014784:	e003      	b.n	801478e <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	681a      	ldr	r2, [r3, #0]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 801478e:	697a      	ldr	r2, [r7, #20]
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	429a      	cmp	r2, r3
 8014794:	d002      	beq.n	801479c <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	687a      	ldr	r2, [r7, #4]
 801479a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 801479c:	bf00      	nop
 801479e:	371c      	adds	r7, #28
 80147a0:	46bd      	mov	sp, r7
 80147a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a6:	4770      	bx	lr
 80147a8:	2405a144 	.word	0x2405a144
 80147ac:	2401a144 	.word	0x2401a144
 80147b0:	2405a143 	.word	0x2405a143
 80147b4:	2405a14c 	.word	0x2405a14c

080147b8 <crc32_init_context>:
static uint32_t now;
static void send_reset(struct min_context *self);
#endif

static void crc32_init_context(struct crc32_context *context)
{
 80147b8:	b480      	push	{r7}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
    context->crc = 0xffffffffU;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f04f 32ff 	mov.w	r2, #4294967295
 80147c6:	601a      	str	r2, [r3, #0]
}
 80147c8:	bf00      	nop
 80147ca:	370c      	adds	r7, #12
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr

080147d4 <crc32_step>:

static void crc32_step(struct crc32_context *context, uint8_t byte)
{
 80147d4:	b480      	push	{r7}
 80147d6:	b085      	sub	sp, #20
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	460b      	mov	r3, r1
 80147de:	70fb      	strb	r3, [r7, #3]
    uint32_t j;
    context->crc ^= byte;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681a      	ldr	r2, [r3, #0]
 80147e4:	78fb      	ldrb	r3, [r7, #3]
 80147e6:	405a      	eors	r2, r3
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	601a      	str	r2, [r3, #0]
    for (j = 0; j < 8; j++) {
 80147ec:	2300      	movs	r3, #0
 80147ee:	60fb      	str	r3, [r7, #12]
 80147f0:	e011      	b.n	8014816 <crc32_step+0x42>
        uint32_t mask = (uint32_t) - (context->crc & 1U);
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	f003 0301 	and.w	r3, r3, #1
 80147fa:	425b      	negs	r3, r3
 80147fc:	60bb      	str	r3, [r7, #8]
        context->crc = (context->crc >> 1) ^ (0xedb88320U & mask);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	085a      	lsrs	r2, r3, #1
 8014804:	68b9      	ldr	r1, [r7, #8]
 8014806:	4b09      	ldr	r3, [pc, #36]	@ (801482c <crc32_step+0x58>)
 8014808:	400b      	ands	r3, r1
 801480a:	405a      	eors	r2, r3
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	601a      	str	r2, [r3, #0]
    for (j = 0; j < 8; j++) {
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	3301      	adds	r3, #1
 8014814:	60fb      	str	r3, [r7, #12]
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	2b07      	cmp	r3, #7
 801481a:	d9ea      	bls.n	80147f2 <crc32_step+0x1e>
    }
}
 801481c:	bf00      	nop
 801481e:	bf00      	nop
 8014820:	3714      	adds	r7, #20
 8014822:	46bd      	mov	sp, r7
 8014824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014828:	4770      	bx	lr
 801482a:	bf00      	nop
 801482c:	edb88320 	.word	0xedb88320

08014830 <crc32_finalize>:

static uint32_t crc32_finalize(struct crc32_context *context)
{
 8014830:	b480      	push	{r7}
 8014832:	b083      	sub	sp, #12
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
    return ~context->crc;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	43db      	mvns	r3, r3
}
 801483e:	4618      	mov	r0, r3
 8014840:	370c      	adds	r7, #12
 8014842:	46bd      	mov	sp, r7
 8014844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014848:	4770      	bx	lr

0801484a <stuffed_tx_byte>:

static void stuffed_tx_byte(struct min_context *self, uint8_t byte, bool crc)
{
 801484a:	b580      	push	{r7, lr}
 801484c:	b082      	sub	sp, #8
 801484e:	af00      	add	r7, sp, #0
 8014850:	6078      	str	r0, [r7, #4]
 8014852:	460b      	mov	r3, r1
 8014854:	70fb      	strb	r3, [r7, #3]
 8014856:	4613      	mov	r3, r2
 8014858:	70bb      	strb	r3, [r7, #2]
    // Transmit the byte
    min_tx_byte(self->port, byte);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014860:	78fa      	ldrb	r2, [r7, #3]
 8014862:	4611      	mov	r1, r2
 8014864:	4618      	mov	r0, r3
 8014866:	f000 fde1 	bl	801542c <min_tx_byte>
    if (crc) {
 801486a:	78bb      	ldrb	r3, [r7, #2]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d007      	beq.n	8014880 <stuffed_tx_byte+0x36>
        crc32_step(&self->tx_checksum, byte);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8014876:	78fa      	ldrb	r2, [r7, #3]
 8014878:	4611      	mov	r1, r2
 801487a:	4618      	mov	r0, r3
 801487c:	f7ff ffaa 	bl	80147d4 <crc32_step>
    }

    // See if an additional stuff byte is needed
    if (byte == HEADER_BYTE) {
 8014880:	78fb      	ldrb	r3, [r7, #3]
 8014882:	2baa      	cmp	r3, #170	@ 0xaa
 8014884:	d118      	bne.n	80148b8 <stuffed_tx_byte+0x6e>
        if (--self->tx_header_byte_countdown == 0) {
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 801488c:	3b01      	subs	r3, #1
 801488e:	b2da      	uxtb	r2, r3
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 801489c:	2b00      	cmp	r3, #0
 801489e:	d10f      	bne.n	80148c0 <stuffed_tx_byte+0x76>
            min_tx_byte(self->port, STUFF_BYTE); // Stuff byte
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80148a6:	2155      	movs	r1, #85	@ 0x55
 80148a8:	4618      	mov	r0, r3
 80148aa:	f000 fdbf 	bl	801542c <min_tx_byte>
            self->tx_header_byte_countdown = 2U;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2202      	movs	r2, #2
 80148b2:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
        }
    } else {
        self->tx_header_byte_countdown = 2U;
    }
}
 80148b6:	e003      	b.n	80148c0 <stuffed_tx_byte+0x76>
        self->tx_header_byte_countdown = 2U;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	2202      	movs	r2, #2
 80148bc:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
}
 80148c0:	bf00      	nop
 80148c2:	3708      	adds	r7, #8
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}

080148c8 <on_wire_bytes>:

static void on_wire_bytes(struct min_context *self, uint8_t id_control, uint8_t seq, uint8_t const *payload_base, uint16_t payload_offset, uint16_t payload_mask, uint8_t payload_len)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b086      	sub	sp, #24
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	60f8      	str	r0, [r7, #12]
 80148d0:	607b      	str	r3, [r7, #4]
 80148d2:	460b      	mov	r3, r1
 80148d4:	72fb      	strb	r3, [r7, #11]
 80148d6:	4613      	mov	r3, r2
 80148d8:	72bb      	strb	r3, [r7, #10]
    uint8_t n, i;
    uint32_t checksum;

    self->tx_header_byte_countdown = 2U;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	2202      	movs	r2, #2
 80148de:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    crc32_init_context(&self->tx_checksum);
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80148e8:	4618      	mov	r0, r3
 80148ea:	f7ff ff65 	bl	80147b8 <crc32_init_context>

    min_tx_start(self->port);
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80148f4:	4618      	mov	r0, r3
 80148f6:	f000 fdaf 	bl	8015458 <min_tx_start>

    // Header is 3 bytes; because unstuffed will reset receiver immediately
    min_tx_byte(self->port, HEADER_BYTE);
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014900:	21aa      	movs	r1, #170	@ 0xaa
 8014902:	4618      	mov	r0, r3
 8014904:	f000 fd92 	bl	801542c <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801490e:	21aa      	movs	r1, #170	@ 0xaa
 8014910:	4618      	mov	r0, r3
 8014912:	f000 fd8b 	bl	801542c <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801491c:	21aa      	movs	r1, #170	@ 0xaa
 801491e:	4618      	mov	r0, r3
 8014920:	f000 fd84 	bl	801542c <min_tx_byte>

    stuffed_tx_byte(self, id_control, true);
 8014924:	7afb      	ldrb	r3, [r7, #11]
 8014926:	2201      	movs	r2, #1
 8014928:	4619      	mov	r1, r3
 801492a:	68f8      	ldr	r0, [r7, #12]
 801492c:	f7ff ff8d 	bl	801484a <stuffed_tx_byte>
    if (id_control & 0x80U) {
 8014930:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014934:	2b00      	cmp	r3, #0
 8014936:	da05      	bge.n	8014944 <on_wire_bytes+0x7c>
        // Send the sequence number if it is a transport frame
        stuffed_tx_byte(self, seq, true);
 8014938:	7abb      	ldrb	r3, [r7, #10]
 801493a:	2201      	movs	r2, #1
 801493c:	4619      	mov	r1, r3
 801493e:	68f8      	ldr	r0, [r7, #12]
 8014940:	f7ff ff83 	bl	801484a <stuffed_tx_byte>
    }

    stuffed_tx_byte(self, payload_len, true);
 8014944:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014948:	2201      	movs	r2, #1
 801494a:	4619      	mov	r1, r3
 801494c:	68f8      	ldr	r0, [r7, #12]
 801494e:	f7ff ff7c 	bl	801484a <stuffed_tx_byte>

    for (i = 0, n = payload_len; n > 0; n--, i++) {
 8014952:	2300      	movs	r3, #0
 8014954:	75bb      	strb	r3, [r7, #22]
 8014956:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801495a:	75fb      	strb	r3, [r7, #23]
 801495c:	e015      	b.n	801498a <on_wire_bytes+0xc2>
        stuffed_tx_byte(self, payload_base[payload_offset], true);
 801495e:	8c3b      	ldrh	r3, [r7, #32]
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	4413      	add	r3, r2
 8014964:	781b      	ldrb	r3, [r3, #0]
 8014966:	2201      	movs	r2, #1
 8014968:	4619      	mov	r1, r3
 801496a:	68f8      	ldr	r0, [r7, #12]
 801496c:	f7ff ff6d 	bl	801484a <stuffed_tx_byte>
        payload_offset++;
 8014970:	8c3b      	ldrh	r3, [r7, #32]
 8014972:	3301      	adds	r3, #1
 8014974:	843b      	strh	r3, [r7, #32]
        payload_offset &= payload_mask;
 8014976:	8c3a      	ldrh	r2, [r7, #32]
 8014978:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801497a:	4013      	ands	r3, r2
 801497c:	843b      	strh	r3, [r7, #32]
    for (i = 0, n = payload_len; n > 0; n--, i++) {
 801497e:	7dfb      	ldrb	r3, [r7, #23]
 8014980:	3b01      	subs	r3, #1
 8014982:	75fb      	strb	r3, [r7, #23]
 8014984:	7dbb      	ldrb	r3, [r7, #22]
 8014986:	3301      	adds	r3, #1
 8014988:	75bb      	strb	r3, [r7, #22]
 801498a:	7dfb      	ldrb	r3, [r7, #23]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d1e6      	bne.n	801495e <on_wire_bytes+0x96>
    }

    checksum = crc32_finalize(&self->tx_checksum);
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8014996:	4618      	mov	r0, r3
 8014998:	f7ff ff4a 	bl	8014830 <crc32_finalize>
 801499c:	6138      	str	r0, [r7, #16]

    // Network order is big-endian. A decent C compiler will spot that this
    // is extracting bytes and will use efficient instructions.
    stuffed_tx_byte(self, (uint8_t)((checksum >> 24) & 0xffU), false);
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	0e1b      	lsrs	r3, r3, #24
 80149a2:	b2db      	uxtb	r3, r3
 80149a4:	2200      	movs	r2, #0
 80149a6:	4619      	mov	r1, r3
 80149a8:	68f8      	ldr	r0, [r7, #12]
 80149aa:	f7ff ff4e 	bl	801484a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 16) & 0xffU), false);
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	0c1b      	lsrs	r3, r3, #16
 80149b2:	b2db      	uxtb	r3, r3
 80149b4:	2200      	movs	r2, #0
 80149b6:	4619      	mov	r1, r3
 80149b8:	68f8      	ldr	r0, [r7, #12]
 80149ba:	f7ff ff46 	bl	801484a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 8) & 0xffU), false);
 80149be:	693b      	ldr	r3, [r7, #16]
 80149c0:	0a1b      	lsrs	r3, r3, #8
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	2200      	movs	r2, #0
 80149c6:	4619      	mov	r1, r3
 80149c8:	68f8      	ldr	r0, [r7, #12]
 80149ca:	f7ff ff3e 	bl	801484a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 0) & 0xffU), false);
 80149ce:	693b      	ldr	r3, [r7, #16]
 80149d0:	b2db      	uxtb	r3, r3
 80149d2:	2200      	movs	r2, #0
 80149d4:	4619      	mov	r1, r3
 80149d6:	68f8      	ldr	r0, [r7, #12]
 80149d8:	f7ff ff37 	bl	801484a <stuffed_tx_byte>

    // Ensure end-of-frame doesn't contain 0xaa and confuse search for start-of-frame
    min_tx_byte(self->port, EOF_BYTE);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80149e2:	2155      	movs	r1, #85	@ 0x55
 80149e4:	4618      	mov	r0, r3
 80149e6:	f000 fd21 	bl	801542c <min_tx_byte>

    min_tx_finished(self->port);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80149f0:	4618      	mov	r0, r3
 80149f2:	f000 fd3c 	bl	801546e <min_tx_finished>
}
 80149f6:	bf00      	nop
 80149f8:	3718      	adds	r7, #24
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}

080149fe <transport_fifo_pop>:

#ifdef TRANSPORT_PROTOCOL

// Pops frame from front of queue, reclaims its ring buffer space
static void transport_fifo_pop(struct min_context *self)
{
 80149fe:	b480      	push	{r7}
 8014a00:	b085      	sub	sp, #20
 8014a02:	af00      	add	r7, sp, #0
 8014a04:	6078      	str	r0, [r7, #4]
#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_frames != 0);
#endif
    struct transport_frame *frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	4613      	mov	r3, r2
 8014a10:	005b      	lsls	r3, r3, #1
 8014a12:	4413      	add	r3, r2
 8014a14:	009b      	lsls	r3, r3, #2
 8014a16:	687a      	ldr	r2, [r7, #4]
 8014a18:	4413      	add	r3, r2
 8014a1a:	60fb      	str	r3, [r7, #12]

#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_ring_buffer_bytes >= frame->payload_len);
#endif

    self->transport_fifo.n_frames--;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8014a22:	3b01      	subs	r3, #1
 8014a24:	b2da      	uxtb	r2, r3
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    self->transport_fifo.head_idx++;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014a32:	3301      	adds	r3, #1
 8014a34:	b2da      	uxtb	r2, r3
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.head_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014a42:	f003 030f 	and.w	r3, r3, #15
 8014a46:	b2da      	uxtb	r2, r3
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.n_ring_buffer_bytes -= frame->payload_len;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8014a54:	68fa      	ldr	r2, [r7, #12]
 8014a56:	7992      	ldrb	r2, [r2, #6]
 8014a58:	1a9b      	subs	r3, r3, r2
 8014a5a:	b29a      	uxth	r2, r3
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
}
 8014a62:	bf00      	nop
 8014a64:	3714      	adds	r7, #20
 8014a66:	46bd      	mov	sp, r7
 8014a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6c:	4770      	bx	lr

08014a6e <transport_fifo_push>:

// Claim a buffer slot from the FIFO. Returns 0 if there is no space.
static struct transport_frame *transport_fifo_push(struct min_context *self, uint16_t data_size)
{
 8014a6e:	b480      	push	{r7}
 8014a70:	b085      	sub	sp, #20
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	6078      	str	r0, [r7, #4]
 8014a76:	460b      	mov	r3, r1
 8014a78:	807b      	strh	r3, [r7, #2]
    // A frame is only queued if there aren't too many frames in the FIFO and there is space in the
    // data ring buffer.
    struct transport_frame *ret = 0;
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	60fb      	str	r3, [r7, #12]
    if (self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES) {
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8014a84:	2b0f      	cmp	r3, #15
 8014a86:	d868      	bhi.n	8014b5a <transport_fifo_push+0xec>
        // Is there space in the ring buffer for the frame payload?
        if (self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - data_size) {
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8014a8e:	461a      	mov	r2, r3
 8014a90:	887b      	ldrh	r3, [r7, #2]
 8014a92:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d85f      	bhi.n	8014b5a <transport_fifo_push+0xec>
            self->transport_fifo.n_frames++;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8014aa0:	3301      	adds	r3, #1
 8014aa2:	b2da      	uxtb	r2, r3
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            if (self->transport_fifo.n_frames > self->transport_fifo.n_frames_max) {
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f893 20e2 	ldrb.w	r2, [r3, #226]	@ 0xe2
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d905      	bls.n	8014ac6 <transport_fifo_push+0x58>
                // High-water mark of FIFO (for diagnostic purposes)
                self->transport_fifo.n_frames_max = self->transport_fifo.n_frames;
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f893 20e2 	ldrb.w	r2, [r3, #226]	@ 0xe2
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            }
            // Create FIFO entry
            ret = &(self->transport_fifo.frames[self->transport_fifo.tail_idx]);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8014acc:	461a      	mov	r2, r3
 8014ace:	4613      	mov	r3, r2
 8014ad0:	005b      	lsls	r3, r3, #1
 8014ad2:	4413      	add	r3, r2
 8014ad4:	009b      	lsls	r3, r3, #2
 8014ad6:	687a      	ldr	r2, [r7, #4]
 8014ad8:	4413      	add	r3, r2
 8014ada:	60fb      	str	r3, [r7, #12]
            ret->payload_offset = self->transport_fifo.ring_buffer_tail_offset;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	809a      	strh	r2, [r3, #4]

            // Claim ring buffer space
            self->transport_fifo.n_ring_buffer_bytes += data_size;
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8014aec:	887b      	ldrh	r3, [r7, #2]
 8014aee:	4413      	add	r3, r2
 8014af0:	b29a      	uxth	r2, r3
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
            if (self->transport_fifo.n_ring_buffer_bytes > self->transport_fifo.n_ring_buffer_bytes_max) {
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f8b3 30de 	ldrh.w	r3, [r3, #222]	@ 0xde
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d905      	bls.n	8014b14 <transport_fifo_push+0xa6>
                // High-water mark of ring buffer usage (for diagnostic purposes)
                self->transport_fifo.n_ring_buffer_bytes_max = self->transport_fifo.n_ring_buffer_bytes;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
            }
            self->transport_fifo.ring_buffer_tail_offset += data_size;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8014b1a:	887b      	ldrh	r3, [r7, #2]
 8014b1c:	4413      	add	r3, r2
 8014b1e:	b29a      	uxth	r2, r3
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
            self->transport_fifo.ring_buffer_tail_offset &= TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 8014b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014b30:	b29a      	uxth	r2, r3
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0

            // Claim FIFO space
            self->transport_fifo.tail_idx++;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8014b3e:	3301      	adds	r3, #1
 8014b40:	b2da      	uxtb	r2, r3
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            self->transport_fifo.tail_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8014b4e:	f003 030f 	and.w	r3, r3, #15
 8014b52:	b2da      	uxtb	r2, r3
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
//            min_debug_print("No FIFO payload space: data_size=%d, n_ring_buffer_bytes=%d\n", data_size, self->transport_fifo.n_ring_buffer_bytes);
        }
    } else {
//        min_debug_print("No FIFO frame slots\n");
    }
    return ret;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3714      	adds	r7, #20
 8014b60:	46bd      	mov	sp, r7
 8014b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b66:	4770      	bx	lr

08014b68 <transport_fifo_get>:

// Return the nth frame in the FIFO
static struct transport_frame *transport_fifo_get(struct min_context *self, uint8_t n)
{
 8014b68:	b480      	push	{r7}
 8014b6a:	b085      	sub	sp, #20
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	460b      	mov	r3, r1
 8014b72:	70fb      	strb	r3, [r7, #3]
    uint8_t idx = self->transport_fifo.head_idx;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014b7a:	73fb      	strb	r3, [r7, #15]
    return &self->transport_fifo.frames[(idx + n) & TRANSPORT_FIFO_SIZE_FRAMES_MASK];
 8014b7c:	7bfa      	ldrb	r2, [r7, #15]
 8014b7e:	78fb      	ldrb	r3, [r7, #3]
 8014b80:	4413      	add	r3, r2
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	f003 020f 	and.w	r2, r3, #15
 8014b88:	4613      	mov	r3, r2
 8014b8a:	005b      	lsls	r3, r3, #1
 8014b8c:	4413      	add	r3, r2
 8014b8e:	009b      	lsls	r3, r3, #2
 8014b90:	687a      	ldr	r2, [r7, #4]
 8014b92:	4413      	add	r3, r2
}
 8014b94:	4618      	mov	r0, r3
 8014b96:	3714      	adds	r7, #20
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9e:	4770      	bx	lr

08014ba0 <transport_fifo_send>:

// Sends the given frame to the serial line
static void transport_fifo_send(struct min_context *self, struct transport_frame *frame)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b086      	sub	sp, #24
 8014ba4:	af04      	add	r7, sp, #16
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	6039      	str	r1, [r7, #0]
//    min_debug_print("transport_fifo_send: min_id=%d, seq=%d, payload_len=%d\n", frame->min_id, frame->seq, frame->payload_len);
    on_wire_bytes(self, frame->min_id | (uint8_t)0x80U, frame->seq, payloads_ring_buffer, frame->payload_offset, TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK, frame->payload_len);
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	79db      	ldrb	r3, [r3, #7]
 8014bae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014bb2:	b2d9      	uxtb	r1, r3
 8014bb4:	683b      	ldr	r3, [r7, #0]
 8014bb6:	7a18      	ldrb	r0, [r3, #8]
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	889b      	ldrh	r3, [r3, #4]
 8014bbc:	683a      	ldr	r2, [r7, #0]
 8014bbe:	7992      	ldrb	r2, [r2, #6]
 8014bc0:	9202      	str	r2, [sp, #8]
 8014bc2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8014bc6:	9201      	str	r2, [sp, #4]
 8014bc8:	9300      	str	r3, [sp, #0]
 8014bca:	4b06      	ldr	r3, [pc, #24]	@ (8014be4 <transport_fifo_send+0x44>)
 8014bcc:	4602      	mov	r2, r0
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f7ff fe7a 	bl	80148c8 <on_wire_bytes>
    frame->last_sent_time_ms = now;
 8014bd4:	4b04      	ldr	r3, [pc, #16]	@ (8014be8 <transport_fifo_send+0x48>)
 8014bd6:	681a      	ldr	r2, [r3, #0]
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	601a      	str	r2, [r3, #0]
}
 8014bdc:	bf00      	nop
 8014bde:	3708      	adds	r7, #8
 8014be0:	46bd      	mov	sp, r7
 8014be2:	bd80      	pop	{r7, pc}
 8014be4:	2405a160 	.word	0x2405a160
 8014be8:	2405a560 	.word	0x2405a560

08014bec <send_ack>:

// We don't queue an ACK frame - we send it straight away (if there's space to do so)
static void send_ack(struct min_context *self)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b086      	sub	sp, #24
 8014bf0:	af04      	add	r7, sp, #16
 8014bf2:	6078      	str	r0, [r7, #4]
    // In the embedded end we don't reassemble out-of-order frames and so never ask for retransmits. Payload is
    // always the same as the sequence number.
//    min_debug_print("send ACK: seq=%d\n", self->transport_fifo.rn);
    if (ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f000 fc06 	bl	801540c <min_tx_space>
 8014c00:	4603      	mov	r3, r0
 8014c02:	2b0a      	cmp	r3, #10
 8014c04:	d913      	bls.n	8014c2e <send_ack+0x42>
        on_wire_bytes(self, ACK, self->transport_fifo.rn, &self->transport_fifo.rn, 0, 0xffU, 1U);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f893 20e8 	ldrb.w	r2, [r3, #232]	@ 0xe8
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	33e8      	adds	r3, #232	@ 0xe8
 8014c10:	2101      	movs	r1, #1
 8014c12:	9102      	str	r1, [sp, #8]
 8014c14:	21ff      	movs	r1, #255	@ 0xff
 8014c16:	9101      	str	r1, [sp, #4]
 8014c18:	2100      	movs	r1, #0
 8014c1a:	9100      	str	r1, [sp, #0]
 8014c1c:	21ff      	movs	r1, #255	@ 0xff
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f7ff fe52 	bl	80148c8 <on_wire_bytes>
        self->transport_fifo.last_sent_ack_time_ms = now;
 8014c24:	4b04      	ldr	r3, [pc, #16]	@ (8014c38 <send_ack+0x4c>)
 8014c26:	681a      	ldr	r2, [r3, #0]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    }
}
 8014c2e:	bf00      	nop
 8014c30:	3708      	adds	r7, #8
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
 8014c36:	bf00      	nop
 8014c38:	2405a560 	.word	0x2405a560

08014c3c <send_reset>:

// We don't queue an RESET frame - we send it straight away (if there's space to do so)
static void send_reset(struct min_context *self)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b086      	sub	sp, #24
 8014c40:	af04      	add	r7, sp, #16
 8014c42:	6078      	str	r0, [r7, #4]
//    min_debug_print("send RESET\n");
    if (ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f000 fbde 	bl	801540c <min_tx_space>
 8014c50:	4603      	mov	r3, r0
 8014c52:	2b0a      	cmp	r3, #10
 8014c54:	d90b      	bls.n	8014c6e <send_reset+0x32>
        on_wire_bytes(self, RESET, 0, 0, 0, 0, 0);
 8014c56:	2300      	movs	r3, #0
 8014c58:	9302      	str	r3, [sp, #8]
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	9301      	str	r3, [sp, #4]
 8014c5e:	2300      	movs	r3, #0
 8014c60:	9300      	str	r3, [sp, #0]
 8014c62:	2300      	movs	r3, #0
 8014c64:	2200      	movs	r2, #0
 8014c66:	21fe      	movs	r1, #254	@ 0xfe
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f7ff fe2d 	bl	80148c8 <on_wire_bytes>
    }
}
 8014c6e:	bf00      	nop
 8014c70:	3708      	adds	r7, #8
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}
	...

08014c78 <transport_fifo_reset>:

static void transport_fifo_reset(struct min_context *self)
{
 8014c78:	b480      	push	{r7}
 8014c7a:	b083      	sub	sp, #12
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
    // Clear down the transmission FIFO queue
    self->transport_fifo.n_frames = 0;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2200      	movs	r2, #0
 8014c84:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    self->transport_fifo.head_idx = 0;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.tail_idx = 0;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	2200      	movs	r2, #0
 8014c94:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
    self->transport_fifo.n_ring_buffer_bytes = 0;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
    self->transport_fifo.ring_buffer_tail_offset = 0;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
    self->transport_fifo.sn_max = 0;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2200      	movs	r2, #0
 8014cac:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    self->transport_fifo.sn_min = 0;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
    self->transport_fifo.rn = 0;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

    // Reset the timers
    self->transport_fifo.last_received_anything_ms = now;
 8014cc0:	4b09      	ldr	r3, [pc, #36]	@ (8014ce8 <transport_fifo_reset+0x70>)
 8014cc2:	681a      	ldr	r2, [r3, #0]
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    self->transport_fifo.last_sent_ack_time_ms = now;
 8014cca:	4b07      	ldr	r3, [pc, #28]	@ (8014ce8 <transport_fifo_reset+0x70>)
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    self->transport_fifo.last_received_frame_ms = 0;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8014cdc:	bf00      	nop
 8014cde:	370c      	adds	r7, #12
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr
 8014ce8:	2405a560 	.word	0x2405a560

08014cec <min_transport_reset>:

void min_transport_reset(struct min_context *self, bool inform_other_side)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b082      	sub	sp, #8
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	70fb      	strb	r3, [r7, #3]
//    min_debug_print("Resetting %s other side\n", inform_other_side ? "and informing" : "without informing");
    if (inform_other_side) {
 8014cf8:	78fb      	ldrb	r3, [r7, #3]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d002      	beq.n	8014d04 <min_transport_reset+0x18>
        // Tell the other end we have gone away
        send_reset(self);
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f7ff ff9c 	bl	8014c3c <send_reset>
    }

    // Throw our frames away
    transport_fifo_reset(self);
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f7ff ffb7 	bl	8014c78 <transport_fifo_reset>
}
 8014d0a:	bf00      	nop
 8014d0c:	3708      	adds	r7, #8
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd80      	pop	{r7, pc}
	...

08014d14 <min_queue_frame>:

// Queues a MIN ID / payload frame into the outgoing FIFO
// API call.
// Returns true if the frame was queued OK.
bool min_queue_frame(struct min_context *self, uint8_t min_id, uint8_t const *payload, uint8_t payload_len)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b088      	sub	sp, #32
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	60f8      	str	r0, [r7, #12]
 8014d1c:	607a      	str	r2, [r7, #4]
 8014d1e:	461a      	mov	r2, r3
 8014d20:	460b      	mov	r3, r1
 8014d22:	72fb      	strb	r3, [r7, #11]
 8014d24:	4613      	mov	r3, r2
 8014d26:	72bb      	strb	r3, [r7, #10]
    struct transport_frame *frame = transport_fifo_push(self, payload_len); // Claim a FIFO slot, reserve space for payload
 8014d28:	7abb      	ldrb	r3, [r7, #10]
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	68f8      	ldr	r0, [r7, #12]
 8014d30:	f7ff fe9d 	bl	8014a6e <transport_fifo_push>
 8014d34:	6178      	str	r0, [r7, #20]

    // We are just queueing here: the poll() function puts the frame into the window and on to the wire
    if (frame != 0) {
 8014d36:	697b      	ldr	r3, [r7, #20]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d025      	beq.n	8014d88 <min_queue_frame+0x74>
        uint32_t i;
        // Copy frame details into frame slot, copy payload into ring buffer
        frame->min_id = min_id & (uint8_t)0x3fU;
 8014d3c:	7afb      	ldrb	r3, [r7, #11]
 8014d3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014d42:	b2da      	uxtb	r2, r3
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	71da      	strb	r2, [r3, #7]
        frame->payload_len = payload_len;
 8014d48:	697b      	ldr	r3, [r7, #20]
 8014d4a:	7aba      	ldrb	r2, [r7, #10]
 8014d4c:	719a      	strb	r2, [r3, #6]

        uint16_t payload_offset = frame->payload_offset;
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	889b      	ldrh	r3, [r3, #4]
 8014d52:	837b      	strh	r3, [r7, #26]
        for (i = 0; i < payload_len; i++) {
 8014d54:	2300      	movs	r3, #0
 8014d56:	61fb      	str	r3, [r7, #28]
 8014d58:	e010      	b.n	8014d7c <min_queue_frame+0x68>
            payloads_ring_buffer[payload_offset] = payload[i];
 8014d5a:	687a      	ldr	r2, [r7, #4]
 8014d5c:	69fb      	ldr	r3, [r7, #28]
 8014d5e:	441a      	add	r2, r3
 8014d60:	8b7b      	ldrh	r3, [r7, #26]
 8014d62:	7811      	ldrb	r1, [r2, #0]
 8014d64:	4a0e      	ldr	r2, [pc, #56]	@ (8014da0 <min_queue_frame+0x8c>)
 8014d66:	54d1      	strb	r1, [r2, r3]
            payload_offset++;
 8014d68:	8b7b      	ldrh	r3, [r7, #26]
 8014d6a:	3301      	adds	r3, #1
 8014d6c:	837b      	strh	r3, [r7, #26]
            payload_offset &= TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK;
 8014d6e:	8b7b      	ldrh	r3, [r7, #26]
 8014d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014d74:	837b      	strh	r3, [r7, #26]
        for (i = 0; i < payload_len; i++) {
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	3301      	adds	r3, #1
 8014d7a:	61fb      	str	r3, [r7, #28]
 8014d7c:	7abb      	ldrb	r3, [r7, #10]
 8014d7e:	69fa      	ldr	r2, [r7, #28]
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d3ea      	bcc.n	8014d5a <min_queue_frame+0x46>
        }
//        min_debug_print("Queued ID=%d, len=%d\n", min_id, payload_len);
        return true;
 8014d84:	2301      	movs	r3, #1
 8014d86:	e007      	b.n	8014d98 <min_queue_frame+0x84>
    } else {
        self->transport_fifo.dropped_frames++;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8014d8e:	1c5a      	adds	r2, r3, #1
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        return false;
 8014d96:	2300      	movs	r3, #0
    }
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	3720      	adds	r7, #32
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}
 8014da0:	2405a160 	.word	0x2405a160

08014da4 <min_queue_has_space_for_frame>:

bool min_queue_has_space_for_frame(struct min_context *self, uint8_t payload_len)
{
 8014da4:	b480      	push	{r7}
 8014da6:	b083      	sub	sp, #12
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
 8014dac:	460b      	mov	r3, r1
 8014dae:	70fb      	strb	r3, [r7, #3]
    return self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES &&
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8014db6:	2b0f      	cmp	r3, #15
 8014db8:	d80a      	bhi.n	8014dd0 <min_queue_has_space_for_frame+0x2c>
           self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - payload_len;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	78fb      	ldrb	r3, [r7, #3]
 8014dc4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
    return self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES &&
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d801      	bhi.n	8014dd0 <min_queue_has_space_for_frame+0x2c>
 8014dcc:	2301      	movs	r3, #1
 8014dce:	e000      	b.n	8014dd2 <min_queue_has_space_for_frame+0x2e>
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	f003 0301 	and.w	r3, r3, #1
 8014dd6:	b2db      	uxtb	r3, r3
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	370c      	adds	r7, #12
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de2:	4770      	bx	lr

08014de4 <find_retransmit_frame>:

// Finds the frame in the window that was sent least recently
static struct transport_frame *find_retransmit_frame(struct min_context *self)
{
 8014de4:	b480      	push	{r7}
 8014de6:	b089      	sub	sp, #36	@ 0x24
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
    uint8_t idx;
    uint8_t i;
    uint8_t window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8014df8:	1ad3      	subs	r3, r2, r3
 8014dfa:	74fb      	strb	r3, [r7, #19]
    assert(window_size > 0);
    assert(window_size <= self->transport_fifo.n_frames);
#endif

    // Start with the head of the queue and call this the oldest
    struct transport_frame *oldest_frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014e02:	461a      	mov	r2, r3
 8014e04:	4613      	mov	r3, r2
 8014e06:	005b      	lsls	r3, r3, #1
 8014e08:	4413      	add	r3, r2
 8014e0a:	009b      	lsls	r3, r3, #2
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	4413      	add	r3, r2
 8014e10:	61bb      	str	r3, [r7, #24]
    uint32_t oldest_elapsed_time = now - oldest_frame->last_sent_time_ms;
 8014e12:	4b1e      	ldr	r3, [pc, #120]	@ (8014e8c <find_retransmit_frame+0xa8>)
 8014e14:	681a      	ldr	r2, [r3, #0]
 8014e16:	69bb      	ldr	r3, [r7, #24]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	1ad3      	subs	r3, r2, r3
 8014e1c:	617b      	str	r3, [r7, #20]

    idx = self->transport_fifo.head_idx;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014e24:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < window_size; i++) {
 8014e26:	2300      	movs	r3, #0
 8014e28:	77bb      	strb	r3, [r7, #30]
 8014e2a:	e023      	b.n	8014e74 <find_retransmit_frame+0x90>
        uint32_t elapsed = now - self->transport_fifo.frames[idx].last_sent_time_ms;
 8014e2c:	4b17      	ldr	r3, [pc, #92]	@ (8014e8c <find_retransmit_frame+0xa8>)
 8014e2e:	6819      	ldr	r1, [r3, #0]
 8014e30:	7ffa      	ldrb	r2, [r7, #31]
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	4613      	mov	r3, r2
 8014e36:	005b      	lsls	r3, r3, #1
 8014e38:	4413      	add	r3, r2
 8014e3a:	009b      	lsls	r3, r3, #2
 8014e3c:	4403      	add	r3, r0
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	1acb      	subs	r3, r1, r3
 8014e42:	60fb      	str	r3, [r7, #12]
        if (elapsed > oldest_elapsed_time) { // Strictly older only; otherwise the earlier frame is deemed the older
 8014e44:	68fa      	ldr	r2, [r7, #12]
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	d909      	bls.n	8014e60 <find_retransmit_frame+0x7c>
            oldest_elapsed_time = elapsed;
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	617b      	str	r3, [r7, #20]
            oldest_frame = &self->transport_fifo.frames[idx];
 8014e50:	7ffa      	ldrb	r2, [r7, #31]
 8014e52:	4613      	mov	r3, r2
 8014e54:	005b      	lsls	r3, r3, #1
 8014e56:	4413      	add	r3, r2
 8014e58:	009b      	lsls	r3, r3, #2
 8014e5a:	687a      	ldr	r2, [r7, #4]
 8014e5c:	4413      	add	r3, r2
 8014e5e:	61bb      	str	r3, [r7, #24]
        }
        idx++;
 8014e60:	7ffb      	ldrb	r3, [r7, #31]
 8014e62:	3301      	adds	r3, #1
 8014e64:	77fb      	strb	r3, [r7, #31]
        idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8014e66:	7ffb      	ldrb	r3, [r7, #31]
 8014e68:	f003 030f 	and.w	r3, r3, #15
 8014e6c:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < window_size; i++) {
 8014e6e:	7fbb      	ldrb	r3, [r7, #30]
 8014e70:	3301      	adds	r3, #1
 8014e72:	77bb      	strb	r3, [r7, #30]
 8014e74:	7fba      	ldrb	r2, [r7, #30]
 8014e76:	7cfb      	ldrb	r3, [r7, #19]
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d3d7      	bcc.n	8014e2c <find_retransmit_frame+0x48>
    }

    return oldest_frame;
 8014e7c:	69bb      	ldr	r3, [r7, #24]
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3724      	adds	r7, #36	@ 0x24
 8014e82:	46bd      	mov	sp, r7
 8014e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e88:	4770      	bx	lr
 8014e8a:	bf00      	nop
 8014e8c:	2405a560 	.word	0x2405a560

08014e90 <valid_frame_received>:
#endif // TRANSPORT_PROTOCOL

// This runs the receiving half of the transport protocol, acknowledging frames received, discarding
// duplicates received, and handling RESET requests.
static void valid_frame_received(struct min_context *self)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b088      	sub	sp, #32
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
    uint8_t id_control = self->rx_frame_id_control;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f893 31fb 	ldrb.w	r3, [r3, #507]	@ 0x1fb
 8014e9e:	777b      	strb	r3, [r7, #29]
    uint8_t *payload = self->rx_frame_payload_buf;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	33ec      	adds	r3, #236	@ 0xec
 8014ea4:	61bb      	str	r3, [r7, #24]
    uint8_t payload_len = self->rx_control;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8014eac:	75fb      	strb	r3, [r7, #23]

#ifdef TRANSPORT_PROTOCOL
    uint8_t seq = self->rx_frame_seq;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8014eb4:	75bb      	strb	r3, [r7, #22]
    uint8_t num_acked;
    uint8_t num_nacked;
    uint8_t num_in_window;

    // When we receive anything we know the other end is still active and won't shut down
    self->transport_fifo.last_received_anything_ms = now;
 8014eb6:	4b52      	ldr	r3, [pc, #328]	@ (8015000 <valid_frame_received+0x170>)
 8014eb8:	681a      	ldr	r2, [r3, #0]
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    switch (id_control) {
 8014ec0:	7f7b      	ldrb	r3, [r7, #29]
 8014ec2:	2bfe      	cmp	r3, #254	@ 0xfe
 8014ec4:	d053      	beq.n	8014f6e <valid_frame_received+0xde>
 8014ec6:	2bff      	cmp	r3, #255	@ 0xff
 8014ec8:	d15c      	bne.n	8014f84 <valid_frame_received+0xf4>
    case ACK:
        // If we get an ACK then we remove all the acknowledged frames with seq < rn
        // The payload byte specifies the number of NACKed frames: how many we want retransmitted because
        // they have gone missing.
        // But we need to make sure we don't accidentally ACK too many because of a stale ACK from an old session
        num_acked = seq - self->transport_fifo.sn_min;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8014ed0:	7dba      	ldrb	r2, [r7, #22]
 8014ed2:	1ad3      	subs	r3, r2, r3
 8014ed4:	757b      	strb	r3, [r7, #21]
        num_nacked = payload[0] - seq;
 8014ed6:	69bb      	ldr	r3, [r7, #24]
 8014ed8:	781a      	ldrb	r2, [r3, #0]
 8014eda:	7dbb      	ldrb	r3, [r7, #22]
 8014edc:	1ad3      	subs	r3, r2, r3
 8014ede:	753b      	strb	r3, [r7, #20]
        num_in_window = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8014eec:	1ad3      	subs	r3, r2, r3
 8014eee:	74fb      	strb	r3, [r7, #19]

        if (num_acked <= num_in_window) {
 8014ef0:	7d7a      	ldrb	r2, [r7, #21]
 8014ef2:	7cfb      	ldrb	r3, [r7, #19]
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	d832      	bhi.n	8014f5e <valid_frame_received+0xce>
            uint8_t i;

            self->transport_fifo.sn_min = seq;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	7dba      	ldrb	r2, [r7, #22]
 8014efc:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            assert(num_nacked <= TRANSPORT_MAX_WINDOW_SIZE);
#endif
            // Now pop off all the frames up to (but not including) rn
            // The ACK contains Rn; all frames before Rn are ACKed and can be removed from the window
//            min_debug_print("Received ACK seq=%d, num_acked=%d, num_nacked=%d\n", seq, num_acked, num_nacked);
            for (i = 0; i < num_acked; i++) {
 8014f00:	2300      	movs	r3, #0
 8014f02:	77fb      	strb	r3, [r7, #31]
 8014f04:	e005      	b.n	8014f12 <valid_frame_received+0x82>
                transport_fifo_pop(self);
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f7ff fd79 	bl	80149fe <transport_fifo_pop>
            for (i = 0; i < num_acked; i++) {
 8014f0c:	7ffb      	ldrb	r3, [r7, #31]
 8014f0e:	3301      	adds	r3, #1
 8014f10:	77fb      	strb	r3, [r7, #31]
 8014f12:	7ffa      	ldrb	r2, [r7, #31]
 8014f14:	7d7b      	ldrb	r3, [r7, #21]
 8014f16:	429a      	cmp	r2, r3
 8014f18:	d3f5      	bcc.n	8014f06 <valid_frame_received+0x76>
            }
            uint8_t idx = self->transport_fifo.head_idx;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014f20:	77bb      	strb	r3, [r7, #30]
            // Now retransmit the number of frames that were requested
            for (i = 0; i < num_nacked; i++) {
 8014f22:	2300      	movs	r3, #0
 8014f24:	77fb      	strb	r3, [r7, #31]
 8014f26:	e015      	b.n	8014f54 <valid_frame_received+0xc4>
                struct transport_frame *retransmit_frame = &self->transport_fifo.frames[idx];
 8014f28:	7fba      	ldrb	r2, [r7, #30]
 8014f2a:	4613      	mov	r3, r2
 8014f2c:	005b      	lsls	r3, r3, #1
 8014f2e:	4413      	add	r3, r2
 8014f30:	009b      	lsls	r3, r3, #2
 8014f32:	687a      	ldr	r2, [r7, #4]
 8014f34:	4413      	add	r3, r2
 8014f36:	60fb      	str	r3, [r7, #12]
                transport_fifo_send(self, retransmit_frame);
 8014f38:	68f9      	ldr	r1, [r7, #12]
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f7ff fe30 	bl	8014ba0 <transport_fifo_send>
                idx++;
 8014f40:	7fbb      	ldrb	r3, [r7, #30]
 8014f42:	3301      	adds	r3, #1
 8014f44:	77bb      	strb	r3, [r7, #30]
                idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8014f46:	7fbb      	ldrb	r3, [r7, #30]
 8014f48:	f003 030f 	and.w	r3, r3, #15
 8014f4c:	77bb      	strb	r3, [r7, #30]
            for (i = 0; i < num_nacked; i++) {
 8014f4e:	7ffb      	ldrb	r3, [r7, #31]
 8014f50:	3301      	adds	r3, #1
 8014f52:	77fb      	strb	r3, [r7, #31]
 8014f54:	7ffa      	ldrb	r2, [r7, #31]
 8014f56:	7d3b      	ldrb	r3, [r7, #20]
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d3e5      	bcc.n	8014f28 <valid_frame_received+0x98>
            }
        } else {
//            min_debug_print("Received spurious ACK seq=%d\n", seq);
            self->transport_fifo.spurious_acks++;
        }
        break;
 8014f5c:	e04c      	b.n	8014ff8 <valid_frame_received+0x168>
            self->transport_fifo.spurious_acks++;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8014f64:	1c5a      	adds	r2, r3, #1
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        break;
 8014f6c:	e044      	b.n	8014ff8 <valid_frame_received+0x168>
        // If we get a RESET demand then we reset the transport protocol (empty the FIFO, reset the
        // sequence numbers, etc.)
        // We don't send anything, we just do it. The other end can send frames to see if this end is
        // alive (pings, etc.) or just wait to get application frames.
//        min_debug_print("Received reset\n");
        self->transport_fifo.resets_received++;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014f74:	1c5a      	adds	r2, r3, #1
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        transport_fifo_reset(self);
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f7ff fe7b 	bl	8014c78 <transport_fifo_reset>
        break;
 8014f82:	e039      	b.n	8014ff8 <valid_frame_received+0x168>
    default:
        if (id_control & 0x80U) {
 8014f84:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	da29      	bge.n	8014fe0 <valid_frame_received+0x150>
            // Incoming application frames

            // Reset the activity time (an idle connection will be stalled)
            self->transport_fifo.last_received_frame_ms = now;
 8014f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8015000 <valid_frame_received+0x170>)
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

            if (seq == self->transport_fifo.rn) {
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8014f9c:	7dba      	ldrb	r2, [r7, #22]
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d116      	bne.n	8014fd0 <valid_frame_received+0x140>
                // Accept this frame as matching the sequence number we were looking for

                // Now looking for the next one in the sequence
                self->transport_fifo.rn++;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8014fa8:	3301      	adds	r3, #1
 8014faa:	b2da      	uxtb	r2, r3
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                // Always send an ACK back for the frame we received
                // ACKs are short (should be about 9 microseconds to send on the wire) and
                // this will cut the latency down.
                // We also periodically send an ACK in case the ACK was lost, and in any case
                // frames are re-sent.
                send_ack(self);
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f7ff fe1a 	bl	8014bec <send_ack>

                // Now ready to pass this up to the application handlers

                // Pass frame up to application handler to deal with
//                min_debug_print("Incoming app transport frame seq=%d, id=%d, payload len=%d\n", seq, id_control & (uint8_t)0x3fU, payload_len);
                min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 8014fb8:	7f7b      	ldrb	r3, [r7, #29]
 8014fba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014fbe:	b2d8      	uxtb	r0, r3
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014fc6:	7dfa      	ldrb	r2, [r7, #23]
 8014fc8:	69b9      	ldr	r1, [r7, #24]
 8014fca:	f000 fb3f 	bl	801564c <min_application_handler>
        } else {
            // Not a transport frame
//            min_debug_print("Incoming app frame id=%d, payload len=%d\n", id_control & (uint8_t)0x3fU, payload_len);
            min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
        }
        break;
 8014fce:	e012      	b.n	8014ff6 <valid_frame_received+0x166>
                self->transport_fifo.sequence_mismatch_drop++;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8014fd6:	1c5a      	adds	r2, r3, #1
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        break;
 8014fde:	e00a      	b.n	8014ff6 <valid_frame_received+0x166>
            min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 8014fe0:	7f7b      	ldrb	r3, [r7, #29]
 8014fe2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014fe6:	b2d8      	uxtb	r0, r3
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014fee:	7dfa      	ldrb	r2, [r7, #23]
 8014ff0:	69b9      	ldr	r1, [r7, #24]
 8014ff2:	f000 fb2b 	bl	801564c <min_application_handler>
        break;
 8014ff6:	bf00      	nop
    }
#else  // TRANSPORT_PROTOCOL
    min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
#endif // TRANSPORT_PROTOCOL
}
 8014ff8:	bf00      	nop
 8014ffa:	3720      	adds	r7, #32
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}
 8015000:	2405a560 	.word	0x2405a560

08015004 <rx_byte>:

static void rx_byte(struct min_context *self, uint8_t byte)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b084      	sub	sp, #16
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
 801500c:	460b      	mov	r3, r1
 801500e:	70fb      	strb	r3, [r7, #3]
    // should reset the frame buffer and be ready to receive frame data
    //
    // Two in a row in over the frame means to expect a stuff byte.
    uint32_t crc;

    if (self->rx_header_bytes_seen == 2) {
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8015016:	2b02      	cmp	r3, #2
 8015018:	d114      	bne.n	8015044 <rx_byte+0x40>
        self->rx_header_bytes_seen = 0;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	2200      	movs	r2, #0
 801501e:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
        if (byte == HEADER_BYTE) {
 8015022:	78fb      	ldrb	r3, [r7, #3]
 8015024:	2baa      	cmp	r3, #170	@ 0xaa
 8015026:	d104      	bne.n	8015032 <rx_byte+0x2e>
            self->rx_frame_state = RECEIVING_ID_CONTROL;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2201      	movs	r2, #1
 801502c:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
            return;
 8015030:	e110      	b.n	8015254 <rx_byte+0x250>
        }
        if (byte == STUFF_BYTE) {
 8015032:	78fb      	ldrb	r3, [r7, #3]
 8015034:	2b55      	cmp	r3, #85	@ 0x55
 8015036:	f000 8108 	beq.w	801524a <rx_byte+0x246>
            /* Discard this byte; carry on receiving on the next character */
            return;
        } else {
            /* Something has gone wrong, give up on this frame and look for header again */
            self->rx_frame_state = SEARCHING_FOR_SOF;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2200      	movs	r2, #0
 801503e:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
            return;
 8015042:	e107      	b.n	8015254 <rx_byte+0x250>
        }
    }

    if (byte == HEADER_BYTE) {
 8015044:	78fb      	ldrb	r3, [r7, #3]
 8015046:	2baa      	cmp	r3, #170	@ 0xaa
 8015048:	d108      	bne.n	801505c <rx_byte+0x58>
        self->rx_header_bytes_seen++;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8015050:	3301      	adds	r3, #1
 8015052:	b2da      	uxtb	r2, r3
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
 801505a:	e003      	b.n	8015064 <rx_byte+0x60>
    } else {
        self->rx_header_bytes_seen = 0;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2200      	movs	r2, #0
 8015060:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
    }

    switch (self->rx_frame_state) {
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 801506a:	2b09      	cmp	r3, #9
 801506c:	f200 80e8 	bhi.w	8015240 <rx_byte+0x23c>
 8015070:	a201      	add	r2, pc, #4	@ (adr r2, 8015078 <rx_byte+0x74>)
 8015072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015076:	bf00      	nop
 8015078:	0801524f 	.word	0x0801524f
 801507c:	080150a1 	.word	0x080150a1
 8015080:	080150f1 	.word	0x080150f1
 8015084:	08015113 	.word	0x08015113
 8015088:	08015151 	.word	0x08015151
 801508c:	080151a1 	.word	0x080151a1
 8015090:	080151b5 	.word	0x080151b5
 8015094:	080151d1 	.word	0x080151d1
 8015098:	080151ed 	.word	0x080151ed
 801509c:	0801522b 	.word	0x0801522b
    case SEARCHING_FOR_SOF:
        break;
    case RECEIVING_ID_CONTROL:
        self->rx_frame_id_control = byte;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	78fa      	ldrb	r2, [r7, #3]
 80150a4:	f883 21fb 	strb.w	r2, [r3, #507]	@ 0x1fb
        self->rx_frame_payload_bytes = 0;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2200      	movs	r2, #0
 80150ac:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa
        crc32_init_context(&self->rx_checksum);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80150b6:	4618      	mov	r0, r3
 80150b8:	f7ff fb7e 	bl	80147b8 <crc32_init_context>
        crc32_step(&self->rx_checksum, byte);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80150c2:	78fa      	ldrb	r2, [r7, #3]
 80150c4:	4611      	mov	r1, r2
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7ff fb84 	bl	80147d4 <crc32_step>
        if (byte & 0x80U) {
 80150cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	da04      	bge.n	80150de <rx_byte+0xda>
#ifdef TRANSPORT_PROTOCOL
            self->rx_frame_state = RECEIVING_SEQ;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	2202      	movs	r2, #2
 80150d8:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
#endif // TRANSPORT_PROTOCOL
        } else {
            self->rx_frame_seq = 0;
            self->rx_frame_state = RECEIVING_LENGTH;
        }
        break;
 80150dc:	e0ba      	b.n	8015254 <rx_byte+0x250>
            self->rx_frame_seq = 0;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	2200      	movs	r2, #0
 80150e2:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
            self->rx_frame_state = RECEIVING_LENGTH;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	2203      	movs	r2, #3
 80150ea:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80150ee:	e0b1      	b.n	8015254 <rx_byte+0x250>
    case RECEIVING_SEQ:
        self->rx_frame_seq = byte;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	78fa      	ldrb	r2, [r7, #3]
 80150f4:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
        crc32_step(&self->rx_checksum, byte);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80150fe:	78fa      	ldrb	r2, [r7, #3]
 8015100:	4611      	mov	r1, r2
 8015102:	4618      	mov	r0, r3
 8015104:	f7ff fb66 	bl	80147d4 <crc32_step>
        self->rx_frame_state = RECEIVING_LENGTH;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2203      	movs	r2, #3
 801510c:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8015110:	e0a0      	b.n	8015254 <rx_byte+0x250>
    case RECEIVING_LENGTH:
        self->rx_frame_length = byte;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	78fa      	ldrb	r2, [r7, #3]
 8015116:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
        self->rx_control = byte;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	78fa      	ldrb	r2, [r7, #3]
 801511e:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
        crc32_step(&self->rx_checksum, byte);
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8015128:	78fa      	ldrb	r2, [r7, #3]
 801512a:	4611      	mov	r1, r2
 801512c:	4618      	mov	r0, r3
 801512e:	f7ff fb51 	bl	80147d4 <crc32_step>
        if (self->rx_frame_length > 0) {
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 8015138:	2b00      	cmp	r3, #0
 801513a:	d004      	beq.n	8015146 <rx_byte+0x142>
            // Can reduce the RAM size by compiling limits to frame sizes
            if (self->rx_frame_length <= MAX_PAYLOAD) {
                self->rx_frame_state = RECEIVING_PAYLOAD;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2204      	movs	r2, #4
 8015140:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
                self->rx_frame_state = SEARCHING_FOR_SOF;
            }
        } else {
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
        }
        break;
 8015144:	e086      	b.n	8015254 <rx_byte+0x250>
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	2205      	movs	r2, #5
 801514a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 801514e:	e081      	b.n	8015254 <rx_byte+0x250>
    case RECEIVING_PAYLOAD:
        self->rx_frame_payload_buf[self->rx_frame_payload_bytes++] = byte;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 8015156:	1c5a      	adds	r2, r3, #1
 8015158:	b2d1      	uxtb	r1, r2
 801515a:	687a      	ldr	r2, [r7, #4]
 801515c:	f882 11fa 	strb.w	r1, [r2, #506]	@ 0x1fa
 8015160:	461a      	mov	r2, r3
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	4413      	add	r3, r2
 8015166:	78fa      	ldrb	r2, [r7, #3]
 8015168:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        crc32_step(&self->rx_checksum, byte);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8015172:	78fa      	ldrb	r2, [r7, #3]
 8015174:	4611      	mov	r1, r2
 8015176:	4618      	mov	r0, r3
 8015178:	f7ff fb2c 	bl	80147d4 <crc32_step>
        if (--self->rx_frame_length == 0) {
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 8015182:	3b01      	subs	r3, #1
 8015184:	b2da      	uxtb	r2, r3
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 8015192:	2b00      	cmp	r3, #0
 8015194:	d15d      	bne.n	8015252 <rx_byte+0x24e>
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2205      	movs	r2, #5
 801519a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        }
        break;
 801519e:	e058      	b.n	8015252 <rx_byte+0x24e>
    case RECEIVING_CHECKSUM_3:
        self->rx_frame_checksum = ((uint32_t)byte) << 24;
 80151a0:	78fb      	ldrb	r3, [r7, #3]
 80151a2:	061a      	lsls	r2, r3, #24
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_2;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2206      	movs	r2, #6
 80151ae:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80151b2:	e04f      	b.n	8015254 <rx_byte+0x250>
    case RECEIVING_CHECKSUM_2:
        self->rx_frame_checksum |= ((uint32_t)byte) << 16;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 80151ba:	78fb      	ldrb	r3, [r7, #3]
 80151bc:	041b      	lsls	r3, r3, #16
 80151be:	431a      	orrs	r2, r3
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_1;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	2207      	movs	r2, #7
 80151ca:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80151ce:	e041      	b.n	8015254 <rx_byte+0x250>
    case RECEIVING_CHECKSUM_1:
        self->rx_frame_checksum |= ((uint32_t)byte) << 8;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 80151d6:	78fb      	ldrb	r3, [r7, #3]
 80151d8:	021b      	lsls	r3, r3, #8
 80151da:	431a      	orrs	r2, r3
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_0;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	2208      	movs	r2, #8
 80151e6:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80151ea:	e033      	b.n	8015254 <rx_byte+0x250>
    case RECEIVING_CHECKSUM_0:
        self->rx_frame_checksum |= byte;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 80151f2:	78fb      	ldrb	r3, [r7, #3]
 80151f4:	431a      	orrs	r2, r3
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        crc = crc32_finalize(&self->rx_checksum);
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8015202:	4618      	mov	r0, r3
 8015204:	f7ff fb14 	bl	8014830 <crc32_finalize>
 8015208:	60f8      	str	r0, [r7, #12]
        if (self->rx_frame_checksum != crc) {
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	@ 0x1ec
 8015210:	68fa      	ldr	r2, [r7, #12]
 8015212:	429a      	cmp	r2, r3
 8015214:	d004      	beq.n	8015220 <rx_byte+0x21c>
//            min_debug_print("Checksum failed, received 0x%08X, computed 0x%08X", self->rx_frame_checksum, crc);
            // Frame fails the checksum and so is dropped
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2200      	movs	r2, #0
 801521a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        } else {
            // Checksum passes, go on to check for the end-of-frame marker
            self->rx_frame_state = RECEIVING_EOF;
        }
        break;
 801521e:	e019      	b.n	8015254 <rx_byte+0x250>
            self->rx_frame_state = RECEIVING_EOF;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2209      	movs	r2, #9
 8015224:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8015228:	e014      	b.n	8015254 <rx_byte+0x250>
    case RECEIVING_EOF:
        if (byte == 0x55u) {
 801522a:	78fb      	ldrb	r3, [r7, #3]
 801522c:	2b55      	cmp	r3, #85	@ 0x55
 801522e:	d102      	bne.n	8015236 <rx_byte+0x232>
            // Frame received OK, pass up data to handler
            valid_frame_received(self);
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f7ff fe2d 	bl	8014e90 <valid_frame_received>
        } else {
            // else discard
//            min_debug_print("Received invalid EOF 0x%02X", byte);
        }
        // Look for next frame */
        self->rx_frame_state = SEARCHING_FOR_SOF;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2200      	movs	r2, #0
 801523a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 801523e:	e009      	b.n	8015254 <rx_byte+0x250>
    default:
        // Should never get here but in case we do then reset to a safe state
//        min_debug_print("Received byte 0x%02X in invalid state %d", byte, self->rx_frame_state);
        self->rx_frame_state = SEARCHING_FOR_SOF;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2200      	movs	r2, #0
 8015244:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8015248:	e004      	b.n	8015254 <rx_byte+0x250>
            return;
 801524a:	bf00      	nop
 801524c:	e002      	b.n	8015254 <rx_byte+0x250>
        break;
 801524e:	bf00      	nop
 8015250:	e000      	b.n	8015254 <rx_byte+0x250>
        break;
 8015252:	bf00      	nop
    }
}
 8015254:	3710      	adds	r7, #16
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop

0801525c <min_poll>:

// API call: sends received bytes into a MIN context and runs the transport timeouts
void min_poll(struct min_context *self, uint8_t const *buf, uint32_t buf_len)
{
 801525c:	b590      	push	{r4, r7, lr}
 801525e:	b089      	sub	sp, #36	@ 0x24
 8015260:	af00      	add	r7, sp, #0
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < buf_len; i++) {
 8015268:	2300      	movs	r3, #0
 801526a:	61fb      	str	r3, [r7, #28]
 801526c:	e00a      	b.n	8015284 <min_poll+0x28>
        rx_byte(self, buf[i]);
 801526e:	68ba      	ldr	r2, [r7, #8]
 8015270:	69fb      	ldr	r3, [r7, #28]
 8015272:	4413      	add	r3, r2
 8015274:	781b      	ldrb	r3, [r3, #0]
 8015276:	4619      	mov	r1, r3
 8015278:	68f8      	ldr	r0, [r7, #12]
 801527a:	f7ff fec3 	bl	8015004 <rx_byte>
    for (i = 0; i < buf_len; i++) {
 801527e:	69fb      	ldr	r3, [r7, #28]
 8015280:	3301      	adds	r3, #1
 8015282:	61fb      	str	r3, [r7, #28]
 8015284:	69fa      	ldr	r2, [r7, #28]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	429a      	cmp	r2, r3
 801528a:	d3f0      	bcc.n	801526e <min_poll+0x12>
    }

#ifdef TRANSPORT_PROTOCOL
    uint8_t window_size;

    now = min_time_ms();
 801528c:	f000 f8fa 	bl	8015484 <min_time_ms>
 8015290:	4603      	mov	r3, r0
 8015292:	4a44      	ldr	r2, [pc, #272]	@ (80153a4 <min_poll+0x148>)
 8015294:	6013      	str	r3, [r2, #0]

    bool remote_connected = (now - self->transport_fifo.last_received_anything_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 8015296:	4b43      	ldr	r3, [pc, #268]	@ (80153a4 <min_poll+0x148>)
 8015298:	681a      	ldr	r2, [r3, #0]
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80152a0:	1ad3      	subs	r3, r2, r3
 80152a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80152a6:	4293      	cmp	r3, r2
 80152a8:	bf94      	ite	ls
 80152aa:	2301      	movls	r3, #1
 80152ac:	2300      	movhi	r3, #0
 80152ae:	76fb      	strb	r3, [r7, #27]
    bool remote_active = (now - self->transport_fifo.last_received_frame_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 80152b0:	4b3c      	ldr	r3, [pc, #240]	@ (80153a4 <min_poll+0x148>)
 80152b2:	681a      	ldr	r2, [r3, #0]
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80152ba:	1ad3      	subs	r3, r2, r3
 80152bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80152c0:	4293      	cmp	r3, r2
 80152c2:	bf94      	ite	ls
 80152c4:	2301      	movls	r3, #1
 80152c6:	2300      	movhi	r3, #0
 80152c8:	76bb      	strb	r3, [r7, #26]

    // This sends one new frame or resends one old frame
    window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min; // Window size
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 80152d6:	1ad3      	subs	r3, r2, r3
 80152d8:	767b      	strb	r3, [r7, #25]
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 80152da:	7e7b      	ldrb	r3, [r7, #25]
 80152dc:	2b03      	cmp	r3, #3
 80152de:	d82a      	bhi.n	8015336 <min_poll+0xda>
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80152e6:	7e7a      	ldrb	r2, [r7, #25]
 80152e8:	429a      	cmp	r2, r3
 80152ea:	d224      	bcs.n	8015336 <min_poll+0xda>
        // There are new frames we can send; but don't even bother if there's no buffer space for them
        struct transport_frame *frame = transport_fifo_get(self, window_size);
 80152ec:	7e7b      	ldrb	r3, [r7, #25]
 80152ee:	4619      	mov	r1, r3
 80152f0:	68f8      	ldr	r0, [r7, #12]
 80152f2:	f7ff fc39 	bl	8014b68 <transport_fifo_get>
 80152f6:	6178      	str	r0, [r7, #20]
        if (ON_WIRE_SIZE(frame->payload_len) <= min_tx_space(self->port)) {
 80152f8:	697b      	ldr	r3, [r7, #20]
 80152fa:	799b      	ldrb	r3, [r3, #6]
 80152fc:	f103 040b 	add.w	r4, r3, #11
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015306:	4618      	mov	r0, r3
 8015308:	f000 f880 	bl	801540c <min_tx_space>
 801530c:	4603      	mov	r3, r0
 801530e:	429c      	cmp	r4, r3
 8015310:	d834      	bhi.n	801537c <min_poll+0x120>
            frame->seq = self->transport_fifo.sn_max;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	721a      	strb	r2, [r3, #8]
            transport_fifo_send(self, frame);
 801531c:	6979      	ldr	r1, [r7, #20]
 801531e:	68f8      	ldr	r0, [r7, #12]
 8015320:	f7ff fc3e 	bl	8014ba0 <transport_fifo_send>

            // Move window on
            self->transport_fifo.sn_max++;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 801532a:	3301      	adds	r3, #1
 801532c:	b2da      	uxtb	r2, r3
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 8015334:	e022      	b.n	801537c <min_poll+0x120>
        }
    } else {
        // Sender cannot send new frames so resend old ones (if there's anyone there)
        if ((window_size > 0) && remote_connected) {
 8015336:	7e7b      	ldrb	r3, [r7, #25]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d020      	beq.n	801537e <min_poll+0x122>
 801533c:	7efb      	ldrb	r3, [r7, #27]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d01d      	beq.n	801537e <min_poll+0x122>
            // There are unacknowledged frames. Can re-send an old frame. Pick the least recently sent one.
            struct transport_frame *oldest_frame = find_retransmit_frame(self);
 8015342:	68f8      	ldr	r0, [r7, #12]
 8015344:	f7ff fd4e 	bl	8014de4 <find_retransmit_frame>
 8015348:	6138      	str	r0, [r7, #16]
            if (now - oldest_frame->last_sent_time_ms >= TRANSPORT_FRAME_RETRANSMIT_TIMEOUT_MS) {
 801534a:	4b16      	ldr	r3, [pc, #88]	@ (80153a4 <min_poll+0x148>)
 801534c:	681a      	ldr	r2, [r3, #0]
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	1ad3      	subs	r3, r2, r3
 8015354:	2bf9      	cmp	r3, #249	@ 0xf9
 8015356:	d912      	bls.n	801537e <min_poll+0x122>
                // Resending oldest frame if there's a chance there's enough space to send it
                if (ON_WIRE_SIZE(oldest_frame->payload_len) <= min_tx_space(self->port)) {
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	799b      	ldrb	r3, [r3, #6]
 801535c:	f103 040b 	add.w	r4, r3, #11
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015366:	4618      	mov	r0, r3
 8015368:	f000 f850 	bl	801540c <min_tx_space>
 801536c:	4603      	mov	r3, r0
 801536e:	429c      	cmp	r4, r3
 8015370:	d805      	bhi.n	801537e <min_poll+0x122>
                    transport_fifo_send(self, oldest_frame);
 8015372:	6939      	ldr	r1, [r7, #16]
 8015374:	68f8      	ldr	r0, [r7, #12]
 8015376:	f7ff fc13 	bl	8014ba0 <transport_fifo_send>
 801537a:	e000      	b.n	801537e <min_poll+0x122>
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 801537c:	bf00      	nop
        }
    }

#ifndef DISABLE_TRANSPORT_ACK_RETRANSMIT
    // Periodically transmit the ACK with the rn value, unless the line has gone idle
    if (now - self->transport_fifo.last_sent_ack_time_ms > TRANSPORT_ACK_RETRANSMIT_TIMEOUT_MS) {
 801537e:	4b09      	ldr	r3, [pc, #36]	@ (80153a4 <min_poll+0x148>)
 8015380:	681a      	ldr	r2, [r3, #0]
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8015388:	1ad3      	subs	r3, r2, r3
 801538a:	2bfa      	cmp	r3, #250	@ 0xfa
 801538c:	d905      	bls.n	801539a <min_poll+0x13e>
        if (remote_active) {
 801538e:	7ebb      	ldrb	r3, [r7, #26]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d002      	beq.n	801539a <min_poll+0x13e>
            send_ack(self);
 8015394:	68f8      	ldr	r0, [r7, #12]
 8015396:	f7ff fc29 	bl	8014bec <send_ack>
        }
    }
#endif // DISABLE_TRANSPORT_ACK_RETRANSMIT
#endif // TRANSPORT_PROTOCOL
}
 801539a:	bf00      	nop
 801539c:	3724      	adds	r7, #36	@ 0x24
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd90      	pop	{r4, r7, pc}
 80153a2:	bf00      	nop
 80153a4:	2405a560 	.word	0x2405a560

080153a8 <min_init_context>:
#ifdef VALIDATE_MAX_PAYLOAD
void min_init_context_validate(struct min_context *self, uint8_t port, void *p_rx_frame_checksum)
#else
void min_init_context(struct min_context *self, uint8_t port)
#endif
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	460b      	mov	r3, r1
 80153b2:	70fb      	strb	r3, [r7, #3]
    // compiling calling code and this code.
    assert((void *)(self->rx_frame_payload_buf + MAX_PAYLOAD) <= p_rx_frame_checksum);
#endif
#endif
    // Initialize context
    self->rx_header_bytes_seen = 0;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	2200      	movs	r2, #0
 80153b8:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
    self->rx_frame_state = SEARCHING_FOR_SOF;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2200      	movs	r2, #0
 80153c0:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
    self->port = port;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	78fa      	ldrb	r2, [r7, #3]
 80153c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

#ifdef TRANSPORT_PROTOCOL
    // Counters for diagnosis purposes
    self->transport_fifo.spurious_acks = 0;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2200      	movs	r2, #0
 80153d0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    self->transport_fifo.sequence_mismatch_drop = 0;
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	2200      	movs	r2, #0
 80153d8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    self->transport_fifo.dropped_frames = 0;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2200      	movs	r2, #0
 80153e0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    self->transport_fifo.resets_received = 0;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2200      	movs	r2, #0
 80153e8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    self->transport_fifo.n_ring_buffer_bytes_max = 0;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2200      	movs	r2, #0
 80153f0:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
    self->transport_fifo.n_frames_max = 0;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2200      	movs	r2, #0
 80153f8:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
    transport_fifo_reset(self);
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f7ff fc3b 	bl	8014c78 <transport_fifo_reset>
#endif // TRANSPORT_PROTOCOL
//    min_debug_print("MIN init complete\n");
}
 8015402:	bf00      	nop
 8015404:	3708      	adds	r7, #8
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
	...

0801540c <min_tx_space>:
#include "uart_driver_dma.h"

static MIN_Context_t *registered_contexts[MAX_MIN_CONTEXTS] = {0};

uint16_t min_tx_space(uint8_t port)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b082      	sub	sp, #8
 8015410:	af00      	add	r7, sp, #0
 8015412:	4603      	mov	r3, r0
 8015414:	71fb      	strb	r3, [r7, #7]
    return UART_DMA_Driver_TXNumFreeSlots(UART_EXP);
 8015416:	4804      	ldr	r0, [pc, #16]	@ (8015428 <min_tx_space+0x1c>)
 8015418:	f7ed face 	bl	80029b8 <UART_DMA_Driver_TXNumFreeSlots>
 801541c:	4603      	mov	r3, r0
/*
 * Since the implementation uses UART TX in Blocking/IRQ mode, we assume that
 * the buffer always has enough space, so this function returns a constant value.
 */
}
 801541e:	4618      	mov	r0, r3
 8015420:	3708      	adds	r7, #8
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}
 8015426:	bf00      	nop
 8015428:	40007800 	.word	0x40007800

0801542c <min_tx_byte>:

void min_tx_byte(uint8_t port, uint8_t byte)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b082      	sub	sp, #8
 8015430:	af00      	add	r7, sp, #0
 8015432:	4603      	mov	r3, r0
 8015434:	460a      	mov	r2, r1
 8015436:	71fb      	strb	r3, [r7, #7]
 8015438:	4613      	mov	r3, r2
 801543a:	71bb      	strb	r3, [r7, #6]
    if (port == EXP_PORT)
 801543c:	79fb      	ldrb	r3, [r7, #7]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d104      	bne.n	801544c <min_tx_byte+0x20>
    {
    	UART_Driver_Write(UART_EXP, byte);
 8015442:	79bb      	ldrb	r3, [r7, #6]
 8015444:	4619      	mov	r1, r3
 8015446:	4803      	ldr	r0, [pc, #12]	@ (8015454 <min_tx_byte+0x28>)
 8015448:	f7ed f944 	bl	80026d4 <UART_Driver_Write>
#ifdef TEST_DEMO_MIN
        HAL_UART_Transmit(&huart6, &byte, 1, 10);
#endif
    }
}
 801544c:	bf00      	nop
 801544e:	3708      	adds	r7, #8
 8015450:	46bd      	mov	sp, r7
 8015452:	bd80      	pop	{r7, pc}
 8015454:	40007800 	.word	0x40007800

08015458 <min_tx_start>:
 * This function is called before sending data. It can be used to
 * perform actions such as disabling TX interrupts or preparing
 * the hardware for transmission.
 */
void min_tx_start(uint8_t port)
{
 8015458:	b480      	push	{r7}
 801545a:	b083      	sub	sp, #12
 801545c:	af00      	add	r7, sp, #0
 801545e:	4603      	mov	r3, r0
 8015460:	71fb      	strb	r3, [r7, #7]
    (void)port;
    // Example: Disable TX interrupt if needed (not required in this case)
}
 8015462:	bf00      	nop
 8015464:	370c      	adds	r7, #12
 8015466:	46bd      	mov	sp, r7
 8015468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546c:	4770      	bx	lr

0801546e <min_tx_finished>:
 * This function is called when data transmission is finished.
 * It can be used to restore the previous state if any changes
 * were made in `min_tx_start()`.
 */
void min_tx_finished(uint8_t port)
{
 801546e:	b480      	push	{r7}
 8015470:	b083      	sub	sp, #12
 8015472:	af00      	add	r7, sp, #0
 8015474:	4603      	mov	r3, r0
 8015476:	71fb      	strb	r3, [r7, #7]
    (void)port;
    // Example: Restore TX interrupt state if modified earlier
}
 8015478:	bf00      	nop
 801547a:	370c      	adds	r7, #12
 801547c:	46bd      	mov	sp, r7
 801547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015482:	4770      	bx	lr

08015484 <min_time_ms>:
 * a timestamp for timeout handling and scheduling.
 *
 * @return uint32_t The current system time in milliseconds.
 */
uint32_t min_time_ms(void)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	af00      	add	r7, sp, #0
    return HAL_GetTick(); // Uses HAL function to get system uptime
 8015488:	f003 ffbc 	bl	8019404 <HAL_GetTick>
 801548c:	4603      	mov	r3, r0
}
 801548e:	4618      	mov	r0, r3
 8015490:	bd80      	pop	{r7, pc}
	...

08015494 <MIN_Context_Init>:

void MIN_Context_Init(MIN_Context_t *ctx, uint8_t port) {
 8015494:	b580      	push	{r7, lr}
 8015496:	b082      	sub	sp, #8
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
 801549c:	460b      	mov	r3, r1
 801549e:	70fb      	strb	r3, [r7, #3]
    min_init_context(&ctx->min_ctx, port);
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	78fa      	ldrb	r2, [r7, #3]
 80154a4:	4611      	mov	r1, r2
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7ff ff7e 	bl	80153a8 <min_init_context>
    min_transport_reset(&ctx->min_ctx, true);
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2101      	movs	r1, #1
 80154b0:	4618      	mov	r0, r3
 80154b2:	f7ff fc1b 	bl	8014cec <min_transport_reset>
    ctx->last_poll_time = min_time_ms();
 80154b6:	f7ff ffe5 	bl	8015484 <min_time_ms>
 80154ba:	4602      	mov	r2, r0
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    ctx->timeout_triggered = false;
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2200      	movs	r2, #0
 80154c6:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
#ifdef AUTO_REINIT_ON_TIMEOUT
    ctx->auto_reinit = true;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2201      	movs	r2, #1
 80154ce:	f883 220d 	strb.w	r2, [r3, #525]	@ 0x20d
#endif
    if (port < MAX_MIN_CONTEXTS) {
 80154d2:	78fb      	ldrb	r3, [r7, #3]
 80154d4:	2b03      	cmp	r3, #3
 80154d6:	d804      	bhi.n	80154e2 <MIN_Context_Init+0x4e>
        registered_contexts[port] = ctx;
 80154d8:	78fb      	ldrb	r3, [r7, #3]
 80154da:	4904      	ldr	r1, [pc, #16]	@ (80154ec <MIN_Context_Init+0x58>)
 80154dc:	687a      	ldr	r2, [r7, #4]
 80154de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 80154e2:	bf00      	nop
 80154e4:	3708      	adds	r7, #8
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
 80154ea:	bf00      	nop
 80154ec:	2405a564 	.word	0x2405a564

080154f0 <MIN_ReInit>:

void MIN_ReInit(MIN_Context_t *ctx) {
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b082      	sub	sp, #8
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
    min_init_context(&ctx->min_ctx, ctx->min_ctx.port);
 80154f8:	687a      	ldr	r2, [r7, #4]
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015500:	4619      	mov	r1, r3
 8015502:	4610      	mov	r0, r2
 8015504:	f7ff ff50 	bl	80153a8 <min_init_context>
    min_transport_reset(&ctx->min_ctx, true);
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2101      	movs	r1, #1
 801550c:	4618      	mov	r0, r3
 801550e:	f7ff fbed 	bl	8014cec <min_transport_reset>
    ctx->last_poll_time = min_time_ms();
 8015512:	f7ff ffb7 	bl	8015484 <min_time_ms>
 8015516:	4602      	mov	r2, r0
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    ctx->timeout_triggered = false;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	2200      	movs	r2, #0
 8015522:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
}
 8015526:	bf00      	nop
 8015528:	3708      	adds	r7, #8
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}

0801552e <MIN_RegisterTimeoutCallback>:

void MIN_RegisterTimeoutCallback(MIN_Context_t *ctx, void (*callback)(MIN_Context_t *ctx)) {
 801552e:	b480      	push	{r7}
 8015530:	b083      	sub	sp, #12
 8015532:	af00      	add	r7, sp, #0
 8015534:	6078      	str	r0, [r7, #4]
 8015536:	6039      	str	r1, [r7, #0]
    ctx->timeout_callback = callback;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	683a      	ldr	r2, [r7, #0]
 801553c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
}
 8015540:	bf00      	nop
 8015542:	370c      	adds	r7, #12
 8015544:	46bd      	mov	sp, r7
 8015546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554a:	4770      	bx	lr

0801554c <MIN_App_Poll>:

void MIN_App_Poll(MIN_Context_t *ctx, const uint8_t *rx_data, uint32_t rx_len) {
 801554c:	b580      	push	{r7, lr}
 801554e:	b086      	sub	sp, #24
 8015550:	af00      	add	r7, sp, #0
 8015552:	60f8      	str	r0, [r7, #12]
 8015554:	60b9      	str	r1, [r7, #8]
 8015556:	607a      	str	r2, [r7, #4]
    min_poll(&ctx->min_ctx, rx_data, rx_len);
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	687a      	ldr	r2, [r7, #4]
 801555c:	68b9      	ldr	r1, [r7, #8]
 801555e:	4618      	mov	r0, r3
 8015560:	f7ff fe7c 	bl	801525c <min_poll>
    uint32_t now = min_time_ms();
 8015564:	f7ff ff8e 	bl	8015484 <min_time_ms>
 8015568:	6178      	str	r0, [r7, #20]
    if (ctx->min_ctx.transport_fifo.n_frames > 0) {
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8015570:	2b00      	cmp	r3, #0
 8015572:	d035      	beq.n	80155e0 <MIN_App_Poll+0x94>
        struct transport_frame *oldest = &ctx->min_ctx.transport_fifo.frames[ctx->min_ctx.transport_fifo.head_idx];
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 801557a:	461a      	mov	r2, r3
 801557c:	4613      	mov	r3, r2
 801557e:	005b      	lsls	r3, r3, #1
 8015580:	4413      	add	r3, r2
 8015582:	009b      	lsls	r3, r3, #2
 8015584:	68fa      	ldr	r2, [r7, #12]
 8015586:	4413      	add	r3, r2
 8015588:	613b      	str	r3, [r7, #16]
        if ((now - oldest->last_sent_time_ms) > MIN_FRAME_TIMEOUT_MS) {
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	697a      	ldr	r2, [r7, #20]
 8015590:	1ad3      	subs	r3, r2, r3
 8015592:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8015596:	4293      	cmp	r3, r2
 8015598:	d91e      	bls.n	80155d8 <MIN_App_Poll+0x8c>
            if (!ctx->timeout_triggered) {
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	f893 320c 	ldrb.w	r3, [r3, #524]	@ 0x20c
 80155a0:	f083 0301 	eor.w	r3, r3, #1
 80155a4:	b2db      	uxtb	r3, r3
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d01a      	beq.n	80155e0 <MIN_App_Poll+0x94>
                if (ctx->timeout_callback) {
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d004      	beq.n	80155be <MIN_App_Poll+0x72>
                    ctx->timeout_callback(ctx);
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80155ba:	68f8      	ldr	r0, [r7, #12]
 80155bc:	4798      	blx	r3
                }
                ctx->timeout_triggered = true;
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	2201      	movs	r2, #1
 80155c2:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
#ifdef AUTO_REINIT_ON_TIMEOUT
                if (ctx->auto_reinit) {
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	f893 320d 	ldrb.w	r3, [r3, #525]	@ 0x20d
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d007      	beq.n	80155e0 <MIN_App_Poll+0x94>
                    MIN_ReInit(ctx);
 80155d0:	68f8      	ldr	r0, [r7, #12]
 80155d2:	f7ff ff8d 	bl	80154f0 <MIN_ReInit>
 80155d6:	e003      	b.n	80155e0 <MIN_App_Poll+0x94>
                }
#endif
            }
        } else {
            ctx->timeout_triggered = false;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	2200      	movs	r2, #0
 80155dc:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
        }
    }
    ctx->last_poll_time = now;
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	697a      	ldr	r2, [r7, #20]
 80155e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
}
 80155e8:	bf00      	nop
 80155ea:	3718      	adds	r7, #24
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}

080155f0 <MIN_Send>:
void MIN_Send(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *payload, uint8_t len) {
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	60f8      	str	r0, [r7, #12]
 80155f8:	607a      	str	r2, [r7, #4]
 80155fa:	461a      	mov	r2, r3
 80155fc:	460b      	mov	r3, r1
 80155fe:	72fb      	strb	r3, [r7, #11]
 8015600:	4613      	mov	r3, r2
 8015602:	72bb      	strb	r3, [r7, #10]
    if (min_queue_has_space_for_frame(&ctx->min_ctx, len)) {
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	7aba      	ldrb	r2, [r7, #10]
 8015608:	4611      	mov	r1, r2
 801560a:	4618      	mov	r0, r3
 801560c:	f7ff fbca 	bl	8014da4 <min_queue_has_space_for_frame>
 8015610:	4603      	mov	r3, r0
 8015612:	2b00      	cmp	r3, #0
 8015614:	d005      	beq.n	8015622 <MIN_Send+0x32>
        min_queue_frame(&ctx->min_ctx, min_id, payload, len);
 8015616:	68f8      	ldr	r0, [r7, #12]
 8015618:	7abb      	ldrb	r3, [r7, #10]
 801561a:	7af9      	ldrb	r1, [r7, #11]
 801561c:	687a      	ldr	r2, [r7, #4]
 801561e:	f7ff fb79 	bl	8014d14 <min_queue_frame>
    }
}
 8015622:	bf00      	nop
 8015624:	3710      	adds	r7, #16
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}
	...

0801562c <MIN_RegisterResponseHandler>:
 *       to the appropriate handlers based on `min_id`.
 */

static MIN_ResponseHandler response_handler = NULL;

void MIN_RegisterResponseHandler(MIN_ResponseHandler handler) {
 801562c:	b480      	push	{r7}
 801562e:	b083      	sub	sp, #12
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
    response_handler = handler;
 8015634:	4a04      	ldr	r2, [pc, #16]	@ (8015648 <MIN_RegisterResponseHandler+0x1c>)
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	6013      	str	r3, [r2, #0]
}
 801563a:	bf00      	nop
 801563c:	370c      	adds	r7, #12
 801563e:	46bd      	mov	sp, r7
 8015640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015644:	4770      	bx	lr
 8015646:	bf00      	nop
 8015648:	2405a574 	.word	0x2405a574

0801564c <min_application_handler>:

void min_application_handler(uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload, uint8_t port) {
 801564c:	b580      	push	{r7, lr}
 801564e:	b086      	sub	sp, #24
 8015650:	af00      	add	r7, sp, #0
 8015652:	6039      	str	r1, [r7, #0]
 8015654:	4611      	mov	r1, r2
 8015656:	461a      	mov	r2, r3
 8015658:	4603      	mov	r3, r0
 801565a:	71fb      	strb	r3, [r7, #7]
 801565c:	460b      	mov	r3, r1
 801565e:	71bb      	strb	r3, [r7, #6]
 8015660:	4613      	mov	r3, r2
 8015662:	717b      	strb	r3, [r7, #5]
    if (port >= MAX_MIN_CONTEXTS) {
 8015664:	797b      	ldrb	r3, [r7, #5]
 8015666:	2b03      	cmp	r3, #3
 8015668:	d834      	bhi.n	80156d4 <min_application_handler+0x88>
        return;
    }
    MIN_Context_t *ctx = registered_contexts[port];
 801566a:	797b      	ldrb	r3, [r7, #5]
 801566c:	4a1c      	ldr	r2, [pc, #112]	@ (80156e0 <min_application_handler+0x94>)
 801566e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015672:	613b      	str	r3, [r7, #16]
    if (ctx == NULL) {
 8015674:	693b      	ldr	r3, [r7, #16]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d02e      	beq.n	80156d8 <min_application_handler+0x8c>
        return;
    }

    if (response_handler != NULL) {
 801567a:	4b1a      	ldr	r3, [pc, #104]	@ (80156e4 <min_application_handler+0x98>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d005      	beq.n	801568e <min_application_handler+0x42>
            response_handler(min_id, min_payload, len_payload);
 8015682:	4b18      	ldr	r3, [pc, #96]	@ (80156e4 <min_application_handler+0x98>)
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	79ba      	ldrb	r2, [r7, #6]
 8015688:	79f8      	ldrb	r0, [r7, #7]
 801568a:	6839      	ldr	r1, [r7, #0]
 801568c:	4798      	blx	r3
    }

    const MIN_Command_t *command_table = MIN_GetCommandTable();
 801568e:	f000 fca5 	bl	8015fdc <MIN_GetCommandTable>
 8015692:	60f8      	str	r0, [r7, #12]
    int table_size = MIN_GetCommandTableSize();
 8015694:	f000 fcac 	bl	8015ff0 <MIN_GetCommandTableSize>
 8015698:	60b8      	str	r0, [r7, #8]
    for (int i = 0; i < table_size; i++) {
 801569a:	2300      	movs	r3, #0
 801569c:	617b      	str	r3, [r7, #20]
 801569e:	e014      	b.n	80156ca <min_application_handler+0x7e>
        if (command_table[i].id == min_id) {
 80156a0:	697b      	ldr	r3, [r7, #20]
 80156a2:	00db      	lsls	r3, r3, #3
 80156a4:	68fa      	ldr	r2, [r7, #12]
 80156a6:	4413      	add	r3, r2
 80156a8:	781b      	ldrb	r3, [r3, #0]
 80156aa:	79fa      	ldrb	r2, [r7, #7]
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d109      	bne.n	80156c4 <min_application_handler+0x78>
            command_table[i].handler(ctx, min_payload, len_payload);
 80156b0:	697b      	ldr	r3, [r7, #20]
 80156b2:	00db      	lsls	r3, r3, #3
 80156b4:	68fa      	ldr	r2, [r7, #12]
 80156b6:	4413      	add	r3, r2
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	79ba      	ldrb	r2, [r7, #6]
 80156bc:	6839      	ldr	r1, [r7, #0]
 80156be:	6938      	ldr	r0, [r7, #16]
 80156c0:	4798      	blx	r3
            return;
 80156c2:	e00a      	b.n	80156da <min_application_handler+0x8e>
    for (int i = 0; i < table_size; i++) {
 80156c4:	697b      	ldr	r3, [r7, #20]
 80156c6:	3301      	adds	r3, #1
 80156c8:	617b      	str	r3, [r7, #20]
 80156ca:	697a      	ldr	r2, [r7, #20]
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	dbe6      	blt.n	80156a0 <min_application_handler+0x54>
 80156d2:	e002      	b.n	80156da <min_application_handler+0x8e>
        return;
 80156d4:	bf00      	nop
 80156d6:	e000      	b.n	80156da <min_application_handler+0x8e>
        return;
 80156d8:	bf00      	nop
        }
    }
    // Optional: Add default handler for unmatched commands
}
 80156da:	3718      	adds	r7, #24
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}
 80156e0:	2405a564 	.word	0x2405a564
 80156e4:	2405a574 	.word	0x2405a574

080156e8 <MIN_Handler_CONTROL_TEMP_ACK>:

// =================================================================
// Command Handlers
// =================================================================

static void MIN_Handler_CONTROL_TEMP_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b0c6      	sub	sp, #280	@ 0x118
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80156f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80156f6:	6018      	str	r0, [r3, #0]
 80156f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80156fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015700:	6019      	str	r1, [r3, #0]
 8015702:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015706:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801570a:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 801570c:	2300      	movs	r3, #0
 801570e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload (%u bytes):", len);
 8015712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015716:	f107 0210 	add.w	r2, r7, #16
 801571a:	18d0      	adds	r0, r2, r3
 801571c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015720:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015724:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015728:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801572c:	781b      	ldrb	r3, [r3, #0]
 801572e:	4a37      	ldr	r2, [pc, #220]	@ (801580c <MIN_Handler_CONTROL_TEMP_ACK+0x124>)
 8015730:	f00c fbe8 	bl	8021f04 <sniprintf>
 8015734:	4602      	mov	r2, r0
 8015736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801573a:	4413      	add	r3, r2
 801573c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015740:	2300      	movs	r3, #0
 8015742:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8015746:	e01f      	b.n	8015788 <MIN_Handler_CONTROL_TEMP_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 8015748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801574c:	f107 0210 	add.w	r2, r7, #16
 8015750:	18d0      	adds	r0, r2, r3
 8015752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015756:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 801575a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 801575e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8015762:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8015766:	6812      	ldr	r2, [r2, #0]
 8015768:	4413      	add	r3, r2
 801576a:	781b      	ldrb	r3, [r3, #0]
 801576c:	4a28      	ldr	r2, [pc, #160]	@ (8015810 <MIN_Handler_CONTROL_TEMP_ACK+0x128>)
 801576e:	f00c fbc9 	bl	8021f04 <sniprintf>
 8015772:	4602      	mov	r2, r0
 8015774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015778:	4413      	add	r3, r2
 801577a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 801577e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8015782:	3301      	adds	r3, #1
 8015784:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8015788:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801578c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015790:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8015794:	781b      	ldrb	r3, [r3, #0]
 8015796:	429a      	cmp	r2, r3
 8015798:	d203      	bcs.n	80157a2 <MIN_Handler_CONTROL_TEMP_ACK+0xba>
 801579a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801579e:	2bfb      	cmp	r3, #251	@ 0xfb
 80157a0:	d9d2      	bls.n	8015748 <MIN_Handler_CONTROL_TEMP_ACK+0x60>
    }

    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 80157a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157a6:	f107 0210 	add.w	r2, r7, #16
 80157aa:	18d0      	adds	r0, r2, r3
 80157ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157b0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80157b4:	4a17      	ldr	r2, [pc, #92]	@ (8015814 <MIN_Handler_CONTROL_TEMP_ACK+0x12c>)
 80157b6:	4619      	mov	r1, r3
 80157b8:	f00c fba4 	bl	8021f04 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 80157bc:	f107 0310 	add.w	r3, r7, #16
 80157c0:	4619      	mov	r1, r3
 80157c2:	4815      	ldr	r0, [pc, #84]	@ (8015818 <MIN_Handler_CONTROL_TEMP_ACK+0x130>)
 80157c4:	f7ec ffbc 	bl	8002740 <UART_Driver_SendString>

    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 80157c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80157cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80157d0:	f107 0010 	add.w	r0, r7, #16
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	4a11      	ldr	r2, [pc, #68]	@ (801581c <MIN_Handler_CONTROL_TEMP_ACK+0x134>)
 80157d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80157dc:	f00c fb92 	bl	8021f04 <sniprintf>

    UART_Driver_SendString(UART_DEBUG, buffer);
 80157e0:	f107 0310 	add.w	r3, r7, #16
 80157e4:	4619      	mov	r1, r3
 80157e6:	480c      	ldr	r0, [pc, #48]	@ (8015818 <MIN_Handler_CONTROL_TEMP_ACK+0x130>)
 80157e8:	f7ec ffaa 	bl	8002740 <UART_Driver_SendString>

    MIN_Send(ctx, CONTROL_TEMP_ACK, NULL, 0);
 80157ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80157f0:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80157f4:	2300      	movs	r3, #0
 80157f6:	2200      	movs	r2, #0
 80157f8:	2104      	movs	r1, #4
 80157fa:	6800      	ldr	r0, [r0, #0]
 80157fc:	f7ff fef8 	bl	80155f0 <MIN_Send>
}
 8015800:	bf00      	nop
 8015802:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}
 801580a:	bf00      	nop
 801580c:	080256f0 	.word	0x080256f0
 8015810:	08025704 	.word	0x08025704
 8015814:	0802570c 	.word	0x0802570c
 8015818:	40004400 	.word	0x40004400
 801581c:	08025710 	.word	0x08025710

08015820 <MIN_Handler_PRE_DATA>:

static void MIN_Handler_PRE_DATA(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015820:	b580      	push	{r7, lr}
 8015822:	b0c8      	sub	sp, #288	@ 0x120
 8015824:	af02      	add	r7, sp, #8
 8015826:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801582a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801582e:	6018      	str	r0, [r3, #0]
 8015830:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015834:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015838:	6019      	str	r1, [r3, #0]
 801583a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801583e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015842:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 8015844:	2300      	movs	r3, #0
 8015846:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    if (len < 1) {
 801584a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801584e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d10e      	bne.n	8015876 <MIN_Handler_PRE_DATA+0x56>
        snprintf(buffer, sizeof(buffer), "Invalid payload length.\r\n");
 8015858:	f107 0310 	add.w	r3, r7, #16
 801585c:	4a5b      	ldr	r2, [pc, #364]	@ (80159cc <MIN_Handler_PRE_DATA+0x1ac>)
 801585e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015862:	4618      	mov	r0, r3
 8015864:	f00c fb4e 	bl	8021f04 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 8015868:	f107 0310 	add.w	r3, r7, #16
 801586c:	4619      	mov	r1, r3
 801586e:	4858      	ldr	r0, [pc, #352]	@ (80159d0 <MIN_Handler_PRE_DATA+0x1b0>)
 8015870:	f7ec ff66 	bl	8002740 <UART_Driver_SendString>
        return;
 8015874:	e0a5      	b.n	80159c2 <MIN_Handler_PRE_DATA+0x1a2>
    }

    uint8_t num_chunks = payload[0];
 8015876:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801587a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	781b      	ldrb	r3, [r3, #0]
 8015882:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
    if (len != 1 + 2 * num_chunks) {
 8015886:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801588a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801588e:	781a      	ldrb	r2, [r3, #0]
 8015890:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8015894:	005b      	lsls	r3, r3, #1
 8015896:	3301      	adds	r3, #1
 8015898:	429a      	cmp	r2, r3
 801589a:	d018      	beq.n	80158ce <MIN_Handler_PRE_DATA+0xae>
        snprintf(buffer, sizeof(buffer),
                 "Payload length mismatch. Expected %u bytes, got %u.\r\n",
                 1 + 2 * num_chunks, len);
 801589c:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 80158a0:	005b      	lsls	r3, r3, #1
        snprintf(buffer, sizeof(buffer),
 80158a2:	1c5a      	adds	r2, r3, #1
 80158a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80158a8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	f107 0010 	add.w	r0, r7, #16
 80158b2:	9300      	str	r3, [sp, #0]
 80158b4:	4613      	mov	r3, r2
 80158b6:	4a47      	ldr	r2, [pc, #284]	@ (80159d4 <MIN_Handler_PRE_DATA+0x1b4>)
 80158b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80158bc:	f00c fb22 	bl	8021f04 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 80158c0:	f107 0310 	add.w	r3, r7, #16
 80158c4:	4619      	mov	r1, r3
 80158c6:	4842      	ldr	r0, [pc, #264]	@ (80159d0 <MIN_Handler_PRE_DATA+0x1b0>)
 80158c8:	f7ec ff3a 	bl	8002740 <UART_Driver_SendString>
        return;
 80158cc:	e079      	b.n	80159c2 <MIN_Handler_PRE_DATA+0x1a2>
    }

    snprintf(buffer, sizeof(buffer), "Pre Data Success: %u Chunks\r\n", num_chunks);
 80158ce:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 80158d2:	f107 0010 	add.w	r0, r7, #16
 80158d6:	4a40      	ldr	r2, [pc, #256]	@ (80159d8 <MIN_Handler_PRE_DATA+0x1b8>)
 80158d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80158dc:	f00c fb12 	bl	8021f04 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 80158e0:	f107 0310 	add.w	r3, r7, #16
 80158e4:	4619      	mov	r1, r3
 80158e6:	483a      	ldr	r0, [pc, #232]	@ (80159d0 <MIN_Handler_PRE_DATA+0x1b0>)
 80158e8:	f7ec ff2a 	bl	8002740 <UART_Driver_SendString>

    offset = 0;
 80158ec:	2300      	movs	r3, #0
 80158ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < num_chunks; i++) {
 80158f2:	2300      	movs	r3, #0
 80158f4:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 80158f8:	e049      	b.n	801598e <MIN_Handler_PRE_DATA+0x16e>
        uint16_t crc = (payload[1 + 2 * i] << 8) | payload[2 + 2 * i];
 80158fa:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80158fe:	005b      	lsls	r3, r3, #1
 8015900:	3301      	adds	r3, #1
 8015902:	461a      	mov	r2, r3
 8015904:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015908:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	4413      	add	r3, r2
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	b21b      	sxth	r3, r3
 8015914:	021b      	lsls	r3, r3, #8
 8015916:	b21a      	sxth	r2, r3
 8015918:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 801591c:	3301      	adds	r3, #1
 801591e:	005b      	lsls	r3, r3, #1
 8015920:	4619      	mov	r1, r3
 8015922:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015926:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	440b      	add	r3, r1
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	b21b      	sxth	r3, r3
 8015932:	4313      	orrs	r3, r2
 8015934:	b21b      	sxth	r3, r3
 8015936:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        offset += snprintf(buffer + offset, sizeof(buffer) - offset,
 801593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801593e:	f107 0210 	add.w	r2, r7, #16
 8015942:	18d0      	adds	r0, r2, r3
 8015944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015948:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 801594c:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8015950:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8015954:	9300      	str	r3, [sp, #0]
 8015956:	4613      	mov	r3, r2
 8015958:	4a20      	ldr	r2, [pc, #128]	@ (80159dc <MIN_Handler_PRE_DATA+0x1bc>)
 801595a:	f00c fad3 	bl	8021f04 <sniprintf>
 801595e:	4602      	mov	r2, r0
 8015960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015964:	4413      	add	r3, r2
 8015966:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                           "%u -> CRC16: 0x%04X\r\n", i, crc);
        if (offset >= sizeof(buffer) - 20) {
 801596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801596e:	2beb      	cmp	r3, #235	@ 0xeb
 8015970:	d908      	bls.n	8015984 <MIN_Handler_PRE_DATA+0x164>
            UART_Driver_SendString(UART_DEBUG, buffer);
 8015972:	f107 0310 	add.w	r3, r7, #16
 8015976:	4619      	mov	r1, r3
 8015978:	4815      	ldr	r0, [pc, #84]	@ (80159d0 <MIN_Handler_PRE_DATA+0x1b0>)
 801597a:	f7ec fee1 	bl	8002740 <UART_Driver_SendString>
            offset = 0;
 801597e:	2300      	movs	r3, #0
 8015980:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < num_chunks; i++) {
 8015984:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8015988:	3301      	adds	r3, #1
 801598a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 801598e:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8015992:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8015996:	429a      	cmp	r2, r3
 8015998:	d3af      	bcc.n	80158fa <MIN_Handler_PRE_DATA+0xda>
        }
    }

    if (offset > 0) {
 801599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801599e:	2b00      	cmp	r3, #0
 80159a0:	dd05      	ble.n	80159ae <MIN_Handler_PRE_DATA+0x18e>
        UART_Driver_SendString(UART_DEBUG, buffer);
 80159a2:	f107 0310 	add.w	r3, r7, #16
 80159a6:	4619      	mov	r1, r3
 80159a8:	4809      	ldr	r0, [pc, #36]	@ (80159d0 <MIN_Handler_PRE_DATA+0x1b0>)
 80159aa:	f7ec fec9 	bl	8002740 <UART_Driver_SendString>
    }
    MIN_Send(ctx, PRE_DATA_ACK, NULL, 0);
 80159ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80159b2:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80159b6:	2300      	movs	r3, #0
 80159b8:	2200      	movs	r2, #0
 80159ba:	2116      	movs	r1, #22
 80159bc:	6800      	ldr	r0, [r0, #0]
 80159be:	f7ff fe17 	bl	80155f0 <MIN_Send>
}
 80159c2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}
 80159ca:	bf00      	nop
 80159cc:	08025720 	.word	0x08025720
 80159d0:	40004400 	.word	0x40004400
 80159d4:	0802573c 	.word	0x0802573c
 80159d8:	08025774 	.word	0x08025774
 80159dc:	08025794 	.word	0x08025794

080159e0 <MIN_Handler_PRE_CHUNK>:

static void MIN_Handler_PRE_CHUNK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b0c6      	sub	sp, #280	@ 0x118
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80159ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80159ee:	6018      	str	r0, [r3, #0]
 80159f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80159f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80159f8:	6019      	str	r1, [r3, #0]
 80159fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80159fe:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015a02:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 8015a04:	2300      	movs	r3, #0
 8015a06:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    if (len != 2) {
 8015a0a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015a0e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	2b02      	cmp	r3, #2
 8015a16:	d012      	beq.n	8015a3e <MIN_Handler_PRE_CHUNK+0x5e>
        snprintf(buffer, sizeof(buffer), "Invalid payload length. Expected 2 bytes, got %u.\r\n", len);
 8015a18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015a1c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015a20:	781b      	ldrb	r3, [r3, #0]
 8015a22:	f107 0010 	add.w	r0, r7, #16
 8015a26:	4a4c      	ldr	r2, [pc, #304]	@ (8015b58 <MIN_Handler_PRE_CHUNK+0x178>)
 8015a28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015a2c:	f00c fa6a 	bl	8021f04 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 8015a30:	f107 0310 	add.w	r3, r7, #16
 8015a34:	4619      	mov	r1, r3
 8015a36:	4849      	ldr	r0, [pc, #292]	@ (8015b5c <MIN_Handler_PRE_CHUNK+0x17c>)
 8015a38:	f7ec fe82 	bl	8002740 <UART_Driver_SendString>
 8015a3c:	e088      	b.n	8015b50 <MIN_Handler_PRE_CHUNK+0x170>
        return;
    }

    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload (%u bytes):", len);
 8015a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a42:	f107 0210 	add.w	r2, r7, #16
 8015a46:	18d0      	adds	r0, r2, r3
 8015a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a4c:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015a50:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015a54:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015a58:	781b      	ldrb	r3, [r3, #0]
 8015a5a:	4a41      	ldr	r2, [pc, #260]	@ (8015b60 <MIN_Handler_PRE_CHUNK+0x180>)
 8015a5c:	f00c fa52 	bl	8021f04 <sniprintf>
 8015a60:	4602      	mov	r2, r0
 8015a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a66:	4413      	add	r3, r2
 8015a68:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8015a72:	e01f      	b.n	8015ab4 <MIN_Handler_PRE_CHUNK+0xd4>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 8015a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a78:	f107 0210 	add.w	r2, r7, #16
 8015a7c:	18d0      	adds	r0, r2, r3
 8015a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a82:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015a86:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8015a8a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8015a8e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8015a92:	6812      	ldr	r2, [r2, #0]
 8015a94:	4413      	add	r3, r2
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	4a32      	ldr	r2, [pc, #200]	@ (8015b64 <MIN_Handler_PRE_CHUNK+0x184>)
 8015a9a:	f00c fa33 	bl	8021f04 <sniprintf>
 8015a9e:	4602      	mov	r2, r0
 8015aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015aa4:	4413      	add	r3, r2
 8015aa6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015aaa:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8015aae:	3301      	adds	r3, #1
 8015ab0:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8015ab4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015ab8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015abc:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8015ac0:	781b      	ldrb	r3, [r3, #0]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d203      	bcs.n	8015ace <MIN_Handler_PRE_CHUNK+0xee>
 8015ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015aca:	2bfb      	cmp	r3, #251	@ 0xfb
 8015acc:	d9d2      	bls.n	8015a74 <MIN_Handler_PRE_CHUNK+0x94>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 8015ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ad2:	f107 0210 	add.w	r2, r7, #16
 8015ad6:	18d0      	adds	r0, r2, r3
 8015ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015adc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8015ae0:	4a21      	ldr	r2, [pc, #132]	@ (8015b68 <MIN_Handler_PRE_CHUNK+0x188>)
 8015ae2:	4619      	mov	r1, r3
 8015ae4:	f00c fa0e 	bl	8021f04 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015ae8:	f107 0310 	add.w	r3, r7, #16
 8015aec:	4619      	mov	r1, r3
 8015aee:	481b      	ldr	r0, [pc, #108]	@ (8015b5c <MIN_Handler_PRE_CHUNK+0x17c>)
 8015af0:	f7ec fe26 	bl	8002740 <UART_Driver_SendString>

    uint16_t crc = (payload[0] << 8) | payload[1];
 8015af4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015af8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	b21b      	sxth	r3, r3
 8015b02:	021b      	lsls	r3, r3, #8
 8015b04:	b21a      	sxth	r2, r3
 8015b06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015b0a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	3301      	adds	r3, #1
 8015b12:	781b      	ldrb	r3, [r3, #0]
 8015b14:	b21b      	sxth	r3, r3
 8015b16:	4313      	orrs	r3, r2
 8015b18:	b21b      	sxth	r3, r3
 8015b1a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    snprintf(buffer, sizeof(buffer), "Chunk CRC16: 0x%04X\r\n", crc);
 8015b1e:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8015b22:	f107 0010 	add.w	r0, r7, #16
 8015b26:	4a11      	ldr	r2, [pc, #68]	@ (8015b6c <MIN_Handler_PRE_CHUNK+0x18c>)
 8015b28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015b2c:	f00c f9ea 	bl	8021f04 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015b30:	f107 0310 	add.w	r3, r7, #16
 8015b34:	4619      	mov	r1, r3
 8015b36:	4809      	ldr	r0, [pc, #36]	@ (8015b5c <MIN_Handler_PRE_CHUNK+0x17c>)
 8015b38:	f7ec fe02 	bl	8002740 <UART_Driver_SendString>
    MIN_Send(ctx, PRE_CHUNK_ACK, NULL, 0);
 8015b3c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015b40:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8015b44:	2300      	movs	r3, #0
 8015b46:	2200      	movs	r2, #0
 8015b48:	2114      	movs	r1, #20
 8015b4a:	6800      	ldr	r0, [r0, #0]
 8015b4c:	f7ff fd50 	bl	80155f0 <MIN_Send>
}
 8015b50:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd80      	pop	{r7, pc}
 8015b58:	080257ac 	.word	0x080257ac
 8015b5c:	40004400 	.word	0x40004400
 8015b60:	080256f0 	.word	0x080256f0
 8015b64:	08025704 	.word	0x08025704
 8015b68:	0802570c 	.word	0x0802570c
 8015b6c:	080257e0 	.word	0x080257e0

08015b70 <MIN_Handler_COLLECT_PACKAGE>:

static void MIN_Handler_COLLECT_PACKAGE(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b0c6      	sub	sp, #280	@ 0x118
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015b7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015b7e:	6018      	str	r0, [r3, #0]
 8015b80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015b84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015b88:	6019      	str	r1, [r3, #0]
 8015b8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015b8e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015b92:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 8015b94:	2300      	movs	r3, #0
 8015b96:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    if (len != 2) {
 8015b9a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015b9e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015ba2:	781b      	ldrb	r3, [r3, #0]
 8015ba4:	2b02      	cmp	r3, #2
 8015ba6:	d012      	beq.n	8015bce <MIN_Handler_COLLECT_PACKAGE+0x5e>
        snprintf(buffer, sizeof(buffer), "Invalid payload length. Expected 2 bytes, got %u.\r\n", len);
 8015ba8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015bac:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015bb0:	781b      	ldrb	r3, [r3, #0]
 8015bb2:	f107 0010 	add.w	r0, r7, #16
 8015bb6:	4a4c      	ldr	r2, [pc, #304]	@ (8015ce8 <MIN_Handler_COLLECT_PACKAGE+0x178>)
 8015bb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015bbc:	f00c f9a2 	bl	8021f04 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 8015bc0:	f107 0310 	add.w	r3, r7, #16
 8015bc4:	4619      	mov	r1, r3
 8015bc6:	4849      	ldr	r0, [pc, #292]	@ (8015cec <MIN_Handler_COLLECT_PACKAGE+0x17c>)
 8015bc8:	f7ec fdba 	bl	8002740 <UART_Driver_SendString>
 8015bcc:	e088      	b.n	8015ce0 <MIN_Handler_COLLECT_PACKAGE+0x170>
        return;
    }

    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload (%u bytes):", len);
 8015bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bd2:	f107 0210 	add.w	r2, r7, #16
 8015bd6:	18d0      	adds	r0, r2, r3
 8015bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bdc:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015be0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015be4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	4a41      	ldr	r2, [pc, #260]	@ (8015cf0 <MIN_Handler_COLLECT_PACKAGE+0x180>)
 8015bec:	f00c f98a 	bl	8021f04 <sniprintf>
 8015bf0:	4602      	mov	r2, r0
 8015bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bf6:	4413      	add	r3, r2
 8015bf8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8015c02:	e01f      	b.n	8015c44 <MIN_Handler_COLLECT_PACKAGE+0xd4>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 8015c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c08:	f107 0210 	add.w	r2, r7, #16
 8015c0c:	18d0      	adds	r0, r2, r3
 8015c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c12:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015c16:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8015c1a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8015c1e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8015c22:	6812      	ldr	r2, [r2, #0]
 8015c24:	4413      	add	r3, r2
 8015c26:	781b      	ldrb	r3, [r3, #0]
 8015c28:	4a32      	ldr	r2, [pc, #200]	@ (8015cf4 <MIN_Handler_COLLECT_PACKAGE+0x184>)
 8015c2a:	f00c f96b 	bl	8021f04 <sniprintf>
 8015c2e:	4602      	mov	r2, r0
 8015c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c34:	4413      	add	r3, r2
 8015c36:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015c3a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8015c3e:	3301      	adds	r3, #1
 8015c40:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8015c44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015c48:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015c4c:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d203      	bcs.n	8015c5e <MIN_Handler_COLLECT_PACKAGE+0xee>
 8015c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c5a:	2bfb      	cmp	r3, #251	@ 0xfb
 8015c5c:	d9d2      	bls.n	8015c04 <MIN_Handler_COLLECT_PACKAGE+0x94>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 8015c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c62:	f107 0210 	add.w	r2, r7, #16
 8015c66:	18d0      	adds	r0, r2, r3
 8015c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c6c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8015c70:	4a21      	ldr	r2, [pc, #132]	@ (8015cf8 <MIN_Handler_COLLECT_PACKAGE+0x188>)
 8015c72:	4619      	mov	r1, r3
 8015c74:	f00c f946 	bl	8021f04 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015c78:	f107 0310 	add.w	r3, r7, #16
 8015c7c:	4619      	mov	r1, r3
 8015c7e:	481b      	ldr	r0, [pc, #108]	@ (8015cec <MIN_Handler_COLLECT_PACKAGE+0x17c>)
 8015c80:	f7ec fd5e 	bl	8002740 <UART_Driver_SendString>

    uint16_t crc = (payload[0] << 8) | payload[1];
 8015c84:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015c88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	781b      	ldrb	r3, [r3, #0]
 8015c90:	b21b      	sxth	r3, r3
 8015c92:	021b      	lsls	r3, r3, #8
 8015c94:	b21a      	sxth	r2, r3
 8015c96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015c9a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	3301      	adds	r3, #1
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	b21b      	sxth	r3, r3
 8015ca6:	4313      	orrs	r3, r2
 8015ca8:	b21b      	sxth	r3, r3
 8015caa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    snprintf(buffer, sizeof(buffer), "Package CRC16: 0x%04X\r\n", crc);
 8015cae:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8015cb2:	f107 0010 	add.w	r0, r7, #16
 8015cb6:	4a11      	ldr	r2, [pc, #68]	@ (8015cfc <MIN_Handler_COLLECT_PACKAGE+0x18c>)
 8015cb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015cbc:	f00c f922 	bl	8021f04 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015cc0:	f107 0310 	add.w	r3, r7, #16
 8015cc4:	4619      	mov	r1, r3
 8015cc6:	4809      	ldr	r0, [pc, #36]	@ (8015cec <MIN_Handler_COLLECT_PACKAGE+0x17c>)
 8015cc8:	f7ec fd3a 	bl	8002740 <UART_Driver_SendString>
    MIN_Send(ctx, COLLECT_PACKAGE_ACK, NULL, 0);
 8015ccc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015cd0:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	211b      	movs	r1, #27
 8015cda:	6800      	ldr	r0, [r0, #0]
 8015cdc:	f7ff fc88 	bl	80155f0 <MIN_Send>
}
 8015ce0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}
 8015ce8:	080257ac 	.word	0x080257ac
 8015cec:	40004400 	.word	0x40004400
 8015cf0:	080256f0 	.word	0x080256f0
 8015cf4:	08025704 	.word	0x08025704
 8015cf8:	0802570c 	.word	0x0802570c
 8015cfc:	080257f8 	.word	0x080257f8

08015d00 <MIN_Handler_SAMPLERATE_GET>:

static void MIN_Handler_SAMPLERATE_GET(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b0c8      	sub	sp, #288	@ 0x120
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8015d0e:	6018      	str	r0, [r3, #0]
 8015d10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015d18:	6019      	str	r1, [r3, #0]
 8015d1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d1e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8015d22:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 8015d24:	2300      	movs	r3, #0
 8015d26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    if (len != 4) {
 8015d2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d2e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	2b04      	cmp	r3, #4
 8015d36:	d012      	beq.n	8015d5e <MIN_Handler_SAMPLERATE_GET+0x5e>
        snprintf(buffer, sizeof(buffer), "Invalid payload length. Expected 4 bytes, got %u.\r\n", len);
 8015d38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d3c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8015d40:	781b      	ldrb	r3, [r3, #0]
 8015d42:	f107 0014 	add.w	r0, r7, #20
 8015d46:	4a53      	ldr	r2, [pc, #332]	@ (8015e94 <MIN_Handler_SAMPLERATE_GET+0x194>)
 8015d48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015d4c:	f00c f8da 	bl	8021f04 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 8015d50:	f107 0314 	add.w	r3, r7, #20
 8015d54:	4619      	mov	r1, r3
 8015d56:	4850      	ldr	r0, [pc, #320]	@ (8015e98 <MIN_Handler_SAMPLERATE_GET+0x198>)
 8015d58:	f7ec fcf2 	bl	8002740 <UART_Driver_SendString>
 8015d5c:	e096      	b.n	8015e8c <MIN_Handler_SAMPLERATE_GET+0x18c>
        return;
    }

    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload (%u bytes):", len);
 8015d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015d62:	f107 0214 	add.w	r2, r7, #20
 8015d66:	18d0      	adds	r0, r2, r3
 8015d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015d6c:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015d70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d74:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8015d78:	781b      	ldrb	r3, [r3, #0]
 8015d7a:	4a48      	ldr	r2, [pc, #288]	@ (8015e9c <MIN_Handler_SAMPLERATE_GET+0x19c>)
 8015d7c:	f00c f8c2 	bl	8021f04 <sniprintf>
 8015d80:	4602      	mov	r2, r0
 8015d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015d86:	4413      	add	r3, r2
 8015d88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 8015d92:	e01f      	b.n	8015dd4 <MIN_Handler_SAMPLERATE_GET+0xd4>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 8015d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015d98:	f107 0214 	add.w	r2, r7, #20
 8015d9c:	18d0      	adds	r0, r2, r3
 8015d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015da2:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015da6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8015daa:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8015dae:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8015db2:	6812      	ldr	r2, [r2, #0]
 8015db4:	4413      	add	r3, r2
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	4a39      	ldr	r2, [pc, #228]	@ (8015ea0 <MIN_Handler_SAMPLERATE_GET+0x1a0>)
 8015dba:	f00c f8a3 	bl	8021f04 <sniprintf>
 8015dbe:	4602      	mov	r2, r0
 8015dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015dc4:	4413      	add	r3, r2
 8015dc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015dca:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8015dce:	3301      	adds	r3, #1
 8015dd0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 8015dd4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015dd8:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8015ddc:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	429a      	cmp	r2, r3
 8015de4:	d203      	bcs.n	8015dee <MIN_Handler_SAMPLERATE_GET+0xee>
 8015de6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015dea:	2bfb      	cmp	r3, #251	@ 0xfb
 8015dec:	d9d2      	bls.n	8015d94 <MIN_Handler_SAMPLERATE_GET+0x94>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 8015dee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015df2:	f107 0214 	add.w	r2, r7, #20
 8015df6:	18d0      	adds	r0, r2, r3
 8015df8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015dfc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8015e00:	4a28      	ldr	r2, [pc, #160]	@ (8015ea4 <MIN_Handler_SAMPLERATE_GET+0x1a4>)
 8015e02:	4619      	mov	r1, r3
 8015e04:	f00c f87e 	bl	8021f04 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015e08:	f107 0314 	add.w	r3, r7, #20
 8015e0c:	4619      	mov	r1, r3
 8015e0e:	4822      	ldr	r0, [pc, #136]	@ (8015e98 <MIN_Handler_SAMPLERATE_GET+0x198>)
 8015e10:	f7ec fc96 	bl	8002740 <UART_Driver_SendString>

    uint32_t sample_rate = (payload[3] << 24) | (payload[2] << 16) | (payload[1] << 8) | payload[0];
 8015e14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015e18:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	3303      	adds	r3, #3
 8015e20:	781b      	ldrb	r3, [r3, #0]
 8015e22:	061a      	lsls	r2, r3, #24
 8015e24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015e28:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	3302      	adds	r3, #2
 8015e30:	781b      	ldrb	r3, [r3, #0]
 8015e32:	041b      	lsls	r3, r3, #16
 8015e34:	431a      	orrs	r2, r3
 8015e36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015e3a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	3301      	adds	r3, #1
 8015e42:	781b      	ldrb	r3, [r3, #0]
 8015e44:	021b      	lsls	r3, r3, #8
 8015e46:	4313      	orrs	r3, r2
 8015e48:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8015e4c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8015e50:	6812      	ldr	r2, [r2, #0]
 8015e52:	7812      	ldrb	r2, [r2, #0]
 8015e54:	4313      	orrs	r3, r2
 8015e56:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    snprintf(buffer, sizeof(buffer), "Sample rate: %lu Hz\r\n", (unsigned long)sample_rate);
 8015e5a:	f107 0014 	add.w	r0, r7, #20
 8015e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e62:	4a11      	ldr	r2, [pc, #68]	@ (8015ea8 <MIN_Handler_SAMPLERATE_GET+0x1a8>)
 8015e64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015e68:	f00c f84c 	bl	8021f04 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015e6c:	f107 0314 	add.w	r3, r7, #20
 8015e70:	4619      	mov	r1, r3
 8015e72:	4809      	ldr	r0, [pc, #36]	@ (8015e98 <MIN_Handler_SAMPLERATE_GET+0x198>)
 8015e74:	f7ec fc64 	bl	8002740 <UART_Driver_SendString>
    MIN_Send(ctx, SAMPLERATE_GET_ACK, NULL, 0);
 8015e78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015e7c:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8015e80:	2300      	movs	r3, #0
 8015e82:	2200      	movs	r2, #0
 8015e84:	2119      	movs	r1, #25
 8015e86:	6800      	ldr	r0, [r0, #0]
 8015e88:	f7ff fbb2 	bl	80155f0 <MIN_Send>
}
 8015e8c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}
 8015e94:	08025810 	.word	0x08025810
 8015e98:	40004400 	.word	0x40004400
 8015e9c:	080256f0 	.word	0x080256f0
 8015ea0:	08025704 	.word	0x08025704
 8015ea4:	0802570c 	.word	0x0802570c
 8015ea8:	08025844 	.word	0x08025844

08015eac <MIN_Handler_HEARTBEAT_CMD>:


static void MIN_Handler_HEARTBEAT_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b084      	sub	sp, #16
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	60f8      	str	r0, [r7, #12]
 8015eb4:	60b9      	str	r1, [r7, #8]
 8015eb6:	4613      	mov	r3, r2
 8015eb8:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "HB";
    MIN_Send(ctx, HEARTBEAT_ACK, response, sizeof(response) - 1);
 8015eba:	2302      	movs	r3, #2
 8015ebc:	4a04      	ldr	r2, [pc, #16]	@ (8015ed0 <MIN_Handler_HEARTBEAT_CMD+0x24>)
 8015ebe:	2106      	movs	r1, #6
 8015ec0:	68f8      	ldr	r0, [r7, #12]
 8015ec2:	f7ff fb95 	bl	80155f0 <MIN_Send>
}
 8015ec6:	bf00      	nop
 8015ec8:	3710      	adds	r7, #16
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}
 8015ece:	bf00      	nop
 8015ed0:	08026434 	.word	0x08026434

08015ed4 <MIN_Handler_GET_STATUS_CMD>:

static void MIN_Handler_GET_STATUS_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b084      	sub	sp, #16
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	60f8      	str	r0, [r7, #12]
 8015edc:	60b9      	str	r1, [r7, #8]
 8015ede:	4613      	mov	r3, r2
 8015ee0:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "OK";
    MIN_Send(ctx, STATUS_RESPONSE, response, sizeof(response) - 1);
 8015ee2:	2302      	movs	r3, #2
 8015ee4:	4a04      	ldr	r2, [pc, #16]	@ (8015ef8 <MIN_Handler_GET_STATUS_CMD+0x24>)
 8015ee6:	2108      	movs	r1, #8
 8015ee8:	68f8      	ldr	r0, [r7, #12]
 8015eea:	f7ff fb81 	bl	80155f0 <MIN_Send>
}
 8015eee:	bf00      	nop
 8015ef0:	3710      	adds	r7, #16
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	bf00      	nop
 8015ef8:	08026438 	.word	0x08026438

08015efc <MIN_Handler_RESET_CMD>:

static void MIN_Handler_RESET_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b084      	sub	sp, #16
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	60f8      	str	r0, [r7, #12]
 8015f04:	60b9      	str	r1, [r7, #8]
 8015f06:	4613      	mov	r3, r2
 8015f08:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    MIN_ReInit(ctx);
 8015f0a:	68f8      	ldr	r0, [r7, #12]
 8015f0c:	f7ff faf0 	bl	80154f0 <MIN_ReInit>
}
 8015f10:	bf00      	nop
 8015f12:	3710      	adds	r7, #16
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bd80      	pop	{r7, pc}

08015f18 <MIN_Handler_PING_CMD>:

static void MIN_Handler_PING_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b084      	sub	sp, #16
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	60f8      	str	r0, [r7, #12]
 8015f20:	60b9      	str	r1, [r7, #8]
 8015f22:	4613      	mov	r3, r2
 8015f24:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    MIN_Send(ctx, PONG_CMD, NULL, 0);
 8015f26:	2300      	movs	r3, #0
 8015f28:	2200      	movs	r2, #0
 8015f2a:	210b      	movs	r1, #11
 8015f2c:	68f8      	ldr	r0, [r7, #12]
 8015f2e:	f7ff fb5f 	bl	80155f0 <MIN_Send>
}
 8015f32:	bf00      	nop
 8015f34:	3710      	adds	r7, #16
 8015f36:	46bd      	mov	sp, r7
 8015f38:	bd80      	pop	{r7, pc}
	...

08015f3c <MIN_Handler_DUMMY_CMD_1>:

static void MIN_Handler_DUMMY_CMD_1(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b084      	sub	sp, #16
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	60f8      	str	r0, [r7, #12]
 8015f44:	60b9      	str	r1, [r7, #8]
 8015f46:	4613      	mov	r3, r2
 8015f48:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "D1";
    MIN_Send(ctx, DUMMY_CMD_1, response, sizeof(response) - 1);
 8015f4a:	2302      	movs	r3, #2
 8015f4c:	4a04      	ldr	r2, [pc, #16]	@ (8015f60 <MIN_Handler_DUMMY_CMD_1+0x24>)
 8015f4e:	210c      	movs	r1, #12
 8015f50:	68f8      	ldr	r0, [r7, #12]
 8015f52:	f7ff fb4d 	bl	80155f0 <MIN_Send>
}
 8015f56:	bf00      	nop
 8015f58:	3710      	adds	r7, #16
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}
 8015f5e:	bf00      	nop
 8015f60:	0802643c 	.word	0x0802643c

08015f64 <MIN_Handler_DUMMY_CMD_2>:

static void MIN_Handler_DUMMY_CMD_2(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b084      	sub	sp, #16
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	60f8      	str	r0, [r7, #12]
 8015f6c:	60b9      	str	r1, [r7, #8]
 8015f6e:	4613      	mov	r3, r2
 8015f70:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "D2";
    MIN_Send(ctx, DUMMY_CMD_2, response, sizeof(response) - 1);
 8015f72:	2302      	movs	r3, #2
 8015f74:	4a04      	ldr	r2, [pc, #16]	@ (8015f88 <MIN_Handler_DUMMY_CMD_2+0x24>)
 8015f76:	210d      	movs	r1, #13
 8015f78:	68f8      	ldr	r0, [r7, #12]
 8015f7a:	f7ff fb39 	bl	80155f0 <MIN_Send>
}
 8015f7e:	bf00      	nop
 8015f80:	3710      	adds	r7, #16
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}
 8015f86:	bf00      	nop
 8015f88:	08026440 	.word	0x08026440

08015f8c <MIN_Handler_CUSTOM_CMD_1>:

static void MIN_Handler_CUSTOM_CMD_1(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b084      	sub	sp, #16
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	60b9      	str	r1, [r7, #8]
 8015f96:	4613      	mov	r3, r2
 8015f98:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "C1";
    MIN_Send(ctx, CUSTOM_CMD_1_ACK, response, sizeof(response) - 1);
 8015f9a:	2302      	movs	r3, #2
 8015f9c:	4a04      	ldr	r2, [pc, #16]	@ (8015fb0 <MIN_Handler_CUSTOM_CMD_1+0x24>)
 8015f9e:	210f      	movs	r1, #15
 8015fa0:	68f8      	ldr	r0, [r7, #12]
 8015fa2:	f7ff fb25 	bl	80155f0 <MIN_Send>
}
 8015fa6:	bf00      	nop
 8015fa8:	3710      	adds	r7, #16
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}
 8015fae:	bf00      	nop
 8015fb0:	08026444 	.word	0x08026444

08015fb4 <MIN_Handler_CUSTOM_CMD_2>:

static void MIN_Handler_CUSTOM_CMD_2(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b084      	sub	sp, #16
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	60f8      	str	r0, [r7, #12]
 8015fbc:	60b9      	str	r1, [r7, #8]
 8015fbe:	4613      	mov	r3, r2
 8015fc0:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "C2";
    MIN_Send(ctx, CUSTOM_CMD_2_ACK, response, sizeof(response) - 1);
 8015fc2:	2302      	movs	r3, #2
 8015fc4:	4a04      	ldr	r2, [pc, #16]	@ (8015fd8 <MIN_Handler_CUSTOM_CMD_2+0x24>)
 8015fc6:	2111      	movs	r1, #17
 8015fc8:	68f8      	ldr	r0, [r7, #12]
 8015fca:	f7ff fb11 	bl	80155f0 <MIN_Send>
}
 8015fce:	bf00      	nop
 8015fd0:	3710      	adds	r7, #16
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	08026448 	.word	0x08026448

08015fdc <MIN_GetCommandTable>:

// =================================================================
// Helper Functions
// =================================================================

const MIN_Command_t *MIN_GetCommandTable(void) {
 8015fdc:	b480      	push	{r7}
 8015fde:	af00      	add	r7, sp, #0
    return command_table;
 8015fe0:	4b02      	ldr	r3, [pc, #8]	@ (8015fec <MIN_GetCommandTable+0x10>)
}
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fea:	4770      	bx	lr
 8015fec:	080263cc 	.word	0x080263cc

08015ff0 <MIN_GetCommandTableSize>:

int MIN_GetCommandTableSize(void) {
 8015ff0:	b480      	push	{r7}
 8015ff2:	af00      	add	r7, sp, #0
    return command_table_size;
 8015ff4:	230d      	movs	r3, #13
}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffe:	4770      	bx	lr

08016000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8016000:	b480      	push	{r7}
 8016002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8016004:	4b49      	ldr	r3, [pc, #292]	@ (801612c <SystemInit+0x12c>)
 8016006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801600a:	4a48      	ldr	r2, [pc, #288]	@ (801612c <SystemInit+0x12c>)
 801600c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016010:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8016014:	4b45      	ldr	r3, [pc, #276]	@ (801612c <SystemInit+0x12c>)
 8016016:	691b      	ldr	r3, [r3, #16]
 8016018:	4a44      	ldr	r2, [pc, #272]	@ (801612c <SystemInit+0x12c>)
 801601a:	f043 0310 	orr.w	r3, r3, #16
 801601e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8016020:	4b43      	ldr	r3, [pc, #268]	@ (8016130 <SystemInit+0x130>)
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	f003 030f 	and.w	r3, r3, #15
 8016028:	2b06      	cmp	r3, #6
 801602a:	d807      	bhi.n	801603c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 801602c:	4b40      	ldr	r3, [pc, #256]	@ (8016130 <SystemInit+0x130>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	f023 030f 	bic.w	r3, r3, #15
 8016034:	4a3e      	ldr	r2, [pc, #248]	@ (8016130 <SystemInit+0x130>)
 8016036:	f043 0307 	orr.w	r3, r3, #7
 801603a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 801603c:	4b3d      	ldr	r3, [pc, #244]	@ (8016134 <SystemInit+0x134>)
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	4a3c      	ldr	r2, [pc, #240]	@ (8016134 <SystemInit+0x134>)
 8016042:	f043 0301 	orr.w	r3, r3, #1
 8016046:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8016048:	4b3a      	ldr	r3, [pc, #232]	@ (8016134 <SystemInit+0x134>)
 801604a:	2200      	movs	r2, #0
 801604c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 801604e:	4b39      	ldr	r3, [pc, #228]	@ (8016134 <SystemInit+0x134>)
 8016050:	681a      	ldr	r2, [r3, #0]
 8016052:	4938      	ldr	r1, [pc, #224]	@ (8016134 <SystemInit+0x134>)
 8016054:	4b38      	ldr	r3, [pc, #224]	@ (8016138 <SystemInit+0x138>)
 8016056:	4013      	ands	r3, r2
 8016058:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 801605a:	4b35      	ldr	r3, [pc, #212]	@ (8016130 <SystemInit+0x130>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	f003 0308 	and.w	r3, r3, #8
 8016062:	2b00      	cmp	r3, #0
 8016064:	d007      	beq.n	8016076 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8016066:	4b32      	ldr	r3, [pc, #200]	@ (8016130 <SystemInit+0x130>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	f023 030f 	bic.w	r3, r3, #15
 801606e:	4a30      	ldr	r2, [pc, #192]	@ (8016130 <SystemInit+0x130>)
 8016070:	f043 0307 	orr.w	r3, r3, #7
 8016074:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8016076:	4b2f      	ldr	r3, [pc, #188]	@ (8016134 <SystemInit+0x134>)
 8016078:	2200      	movs	r2, #0
 801607a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 801607c:	4b2d      	ldr	r3, [pc, #180]	@ (8016134 <SystemInit+0x134>)
 801607e:	2200      	movs	r2, #0
 8016080:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8016082:	4b2c      	ldr	r3, [pc, #176]	@ (8016134 <SystemInit+0x134>)
 8016084:	2200      	movs	r2, #0
 8016086:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8016088:	4b2a      	ldr	r3, [pc, #168]	@ (8016134 <SystemInit+0x134>)
 801608a:	4a2c      	ldr	r2, [pc, #176]	@ (801613c <SystemInit+0x13c>)
 801608c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 801608e:	4b29      	ldr	r3, [pc, #164]	@ (8016134 <SystemInit+0x134>)
 8016090:	4a2b      	ldr	r2, [pc, #172]	@ (8016140 <SystemInit+0x140>)
 8016092:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8016094:	4b27      	ldr	r3, [pc, #156]	@ (8016134 <SystemInit+0x134>)
 8016096:	4a2b      	ldr	r2, [pc, #172]	@ (8016144 <SystemInit+0x144>)
 8016098:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 801609a:	4b26      	ldr	r3, [pc, #152]	@ (8016134 <SystemInit+0x134>)
 801609c:	2200      	movs	r2, #0
 801609e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80160a0:	4b24      	ldr	r3, [pc, #144]	@ (8016134 <SystemInit+0x134>)
 80160a2:	4a28      	ldr	r2, [pc, #160]	@ (8016144 <SystemInit+0x144>)
 80160a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80160a6:	4b23      	ldr	r3, [pc, #140]	@ (8016134 <SystemInit+0x134>)
 80160a8:	2200      	movs	r2, #0
 80160aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80160ac:	4b21      	ldr	r3, [pc, #132]	@ (8016134 <SystemInit+0x134>)
 80160ae:	4a25      	ldr	r2, [pc, #148]	@ (8016144 <SystemInit+0x144>)
 80160b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80160b2:	4b20      	ldr	r3, [pc, #128]	@ (8016134 <SystemInit+0x134>)
 80160b4:	2200      	movs	r2, #0
 80160b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80160b8:	4b1e      	ldr	r3, [pc, #120]	@ (8016134 <SystemInit+0x134>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	4a1d      	ldr	r2, [pc, #116]	@ (8016134 <SystemInit+0x134>)
 80160be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80160c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80160c4:	4b1b      	ldr	r3, [pc, #108]	@ (8016134 <SystemInit+0x134>)
 80160c6:	2200      	movs	r2, #0
 80160c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80160ca:	4b1f      	ldr	r3, [pc, #124]	@ (8016148 <SystemInit+0x148>)
 80160cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ce:	4a1e      	ldr	r2, [pc, #120]	@ (8016148 <SystemInit+0x148>)
 80160d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80160d4:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80160d6:	4b1d      	ldr	r3, [pc, #116]	@ (801614c <SystemInit+0x14c>)
 80160d8:	681a      	ldr	r2, [r3, #0]
 80160da:	4b1d      	ldr	r3, [pc, #116]	@ (8016150 <SystemInit+0x150>)
 80160dc:	4013      	ands	r3, r2
 80160de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80160e2:	d202      	bcs.n	80160ea <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80160e4:	4b1b      	ldr	r3, [pc, #108]	@ (8016154 <SystemInit+0x154>)
 80160e6:	2201      	movs	r2, #1
 80160e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80160ea:	4b12      	ldr	r3, [pc, #72]	@ (8016134 <SystemInit+0x134>)
 80160ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80160f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d113      	bne.n	8016120 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80160f8:	4b0e      	ldr	r3, [pc, #56]	@ (8016134 <SystemInit+0x134>)
 80160fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80160fe:	4a0d      	ldr	r2, [pc, #52]	@ (8016134 <SystemInit+0x134>)
 8016100:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8016104:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8016108:	4b13      	ldr	r3, [pc, #76]	@ (8016158 <SystemInit+0x158>)
 801610a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 801610e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8016110:	4b08      	ldr	r3, [pc, #32]	@ (8016134 <SystemInit+0x134>)
 8016112:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8016116:	4a07      	ldr	r2, [pc, #28]	@ (8016134 <SystemInit+0x134>)
 8016118:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801611c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8016120:	bf00      	nop
 8016122:	46bd      	mov	sp, r7
 8016124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016128:	4770      	bx	lr
 801612a:	bf00      	nop
 801612c:	e000ed00 	.word	0xe000ed00
 8016130:	52002000 	.word	0x52002000
 8016134:	58024400 	.word	0x58024400
 8016138:	eaf6ed7f 	.word	0xeaf6ed7f
 801613c:	02020200 	.word	0x02020200
 8016140:	01ff0000 	.word	0x01ff0000
 8016144:	01010280 	.word	0x01010280
 8016148:	580000c0 	.word	0x580000c0
 801614c:	5c001000 	.word	0x5c001000
 8016150:	ffff0000 	.word	0xffff0000
 8016154:	51008108 	.word	0x51008108
 8016158:	52004000 	.word	0x52004000

0801615c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 801615c:	b480      	push	{r7}
 801615e:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8016160:	4b0a      	ldr	r3, [pc, #40]	@ (801618c <ExitRun0Mode+0x30>)
 8016162:	68db      	ldr	r3, [r3, #12]
 8016164:	f023 0306 	bic.w	r3, r3, #6
 8016168:	4a08      	ldr	r2, [pc, #32]	@ (801618c <ExitRun0Mode+0x30>)
 801616a:	f043 0302 	orr.w	r3, r3, #2
 801616e:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8016170:	bf00      	nop
 8016172:	4b06      	ldr	r3, [pc, #24]	@ (801618c <ExitRun0Mode+0x30>)
 8016174:	685b      	ldr	r3, [r3, #4]
 8016176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801617a:	2b00      	cmp	r3, #0
 801617c:	d0f9      	beq.n	8016172 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 801617e:	bf00      	nop
 8016180:	bf00      	nop
 8016182:	46bd      	mov	sp, r7
 8016184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016188:	4770      	bx	lr
 801618a:	bf00      	nop
 801618c:	58024800 	.word	0x58024800

08016190 <__NVIC_GetPriorityGrouping>:
{
 8016190:	b480      	push	{r7}
 8016192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016194:	4b04      	ldr	r3, [pc, #16]	@ (80161a8 <__NVIC_GetPriorityGrouping+0x18>)
 8016196:	68db      	ldr	r3, [r3, #12]
 8016198:	0a1b      	lsrs	r3, r3, #8
 801619a:	f003 0307 	and.w	r3, r3, #7
}
 801619e:	4618      	mov	r0, r3
 80161a0:	46bd      	mov	sp, r7
 80161a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a6:	4770      	bx	lr
 80161a8:	e000ed00 	.word	0xe000ed00

080161ac <__NVIC_EnableIRQ>:
{
 80161ac:	b480      	push	{r7}
 80161ae:	b083      	sub	sp, #12
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	4603      	mov	r3, r0
 80161b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80161b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	db0b      	blt.n	80161d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80161be:	88fb      	ldrh	r3, [r7, #6]
 80161c0:	f003 021f 	and.w	r2, r3, #31
 80161c4:	4907      	ldr	r1, [pc, #28]	@ (80161e4 <__NVIC_EnableIRQ+0x38>)
 80161c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80161ca:	095b      	lsrs	r3, r3, #5
 80161cc:	2001      	movs	r0, #1
 80161ce:	fa00 f202 	lsl.w	r2, r0, r2
 80161d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80161d6:	bf00      	nop
 80161d8:	370c      	adds	r7, #12
 80161da:	46bd      	mov	sp, r7
 80161dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e0:	4770      	bx	lr
 80161e2:	bf00      	nop
 80161e4:	e000e100 	.word	0xe000e100

080161e8 <__NVIC_SetPriority>:
{
 80161e8:	b480      	push	{r7}
 80161ea:	b083      	sub	sp, #12
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	4603      	mov	r3, r0
 80161f0:	6039      	str	r1, [r7, #0]
 80161f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80161f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	db0a      	blt.n	8016212 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80161fc:	683b      	ldr	r3, [r7, #0]
 80161fe:	b2da      	uxtb	r2, r3
 8016200:	490c      	ldr	r1, [pc, #48]	@ (8016234 <__NVIC_SetPriority+0x4c>)
 8016202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016206:	0112      	lsls	r2, r2, #4
 8016208:	b2d2      	uxtb	r2, r2
 801620a:	440b      	add	r3, r1
 801620c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8016210:	e00a      	b.n	8016228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016212:	683b      	ldr	r3, [r7, #0]
 8016214:	b2da      	uxtb	r2, r3
 8016216:	4908      	ldr	r1, [pc, #32]	@ (8016238 <__NVIC_SetPriority+0x50>)
 8016218:	88fb      	ldrh	r3, [r7, #6]
 801621a:	f003 030f 	and.w	r3, r3, #15
 801621e:	3b04      	subs	r3, #4
 8016220:	0112      	lsls	r2, r2, #4
 8016222:	b2d2      	uxtb	r2, r2
 8016224:	440b      	add	r3, r1
 8016226:	761a      	strb	r2, [r3, #24]
}
 8016228:	bf00      	nop
 801622a:	370c      	adds	r7, #12
 801622c:	46bd      	mov	sp, r7
 801622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016232:	4770      	bx	lr
 8016234:	e000e100 	.word	0xe000e100
 8016238:	e000ed00 	.word	0xe000ed00

0801623c <NVIC_EncodePriority>:
{
 801623c:	b480      	push	{r7}
 801623e:	b089      	sub	sp, #36	@ 0x24
 8016240:	af00      	add	r7, sp, #0
 8016242:	60f8      	str	r0, [r7, #12]
 8016244:	60b9      	str	r1, [r7, #8]
 8016246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	f003 0307 	and.w	r3, r3, #7
 801624e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016250:	69fb      	ldr	r3, [r7, #28]
 8016252:	f1c3 0307 	rsb	r3, r3, #7
 8016256:	2b04      	cmp	r3, #4
 8016258:	bf28      	it	cs
 801625a:	2304      	movcs	r3, #4
 801625c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801625e:	69fb      	ldr	r3, [r7, #28]
 8016260:	3304      	adds	r3, #4
 8016262:	2b06      	cmp	r3, #6
 8016264:	d902      	bls.n	801626c <NVIC_EncodePriority+0x30>
 8016266:	69fb      	ldr	r3, [r7, #28]
 8016268:	3b03      	subs	r3, #3
 801626a:	e000      	b.n	801626e <NVIC_EncodePriority+0x32>
 801626c:	2300      	movs	r3, #0
 801626e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016270:	f04f 32ff 	mov.w	r2, #4294967295
 8016274:	69bb      	ldr	r3, [r7, #24]
 8016276:	fa02 f303 	lsl.w	r3, r2, r3
 801627a:	43da      	mvns	r2, r3
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	401a      	ands	r2, r3
 8016280:	697b      	ldr	r3, [r7, #20]
 8016282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016284:	f04f 31ff 	mov.w	r1, #4294967295
 8016288:	697b      	ldr	r3, [r7, #20]
 801628a:	fa01 f303 	lsl.w	r3, r1, r3
 801628e:	43d9      	mvns	r1, r3
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016294:	4313      	orrs	r3, r2
}
 8016296:	4618      	mov	r0, r3
 8016298:	3724      	adds	r7, #36	@ 0x24
 801629a:	46bd      	mov	sp, r7
 801629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a0:	4770      	bx	lr

080162a2 <LL_I2C_Disable>:
{
 80162a2:	b480      	push	{r7}
 80162a4:	b083      	sub	sp, #12
 80162a6:	af00      	add	r7, sp, #0
 80162a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	f023 0201 	bic.w	r2, r3, #1
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	601a      	str	r2, [r3, #0]
}
 80162b6:	bf00      	nop
 80162b8:	370c      	adds	r7, #12
 80162ba:	46bd      	mov	sp, r7
 80162bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c0:	4770      	bx	lr

080162c2 <LL_I2C_EnableClockStretching>:
{
 80162c2:	b480      	push	{r7}
 80162c4:	b083      	sub	sp, #12
 80162c6:	af00      	add	r7, sp, #0
 80162c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	601a      	str	r2, [r3, #0]
}
 80162d6:	bf00      	nop
 80162d8:	370c      	adds	r7, #12
 80162da:	46bd      	mov	sp, r7
 80162dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e0:	4770      	bx	lr

080162e2 <LL_I2C_DisableGeneralCall>:
{
 80162e2:	b480      	push	{r7}
 80162e4:	b083      	sub	sp, #12
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	601a      	str	r2, [r3, #0]
}
 80162f6:	bf00      	nop
 80162f8:	370c      	adds	r7, #12
 80162fa:	46bd      	mov	sp, r7
 80162fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016300:	4770      	bx	lr
	...

08016304 <LL_I2C_SetOwnAddress2>:
{
 8016304:	b480      	push	{r7}
 8016306:	b085      	sub	sp, #20
 8016308:	af00      	add	r7, sp, #0
 801630a:	60f8      	str	r0, [r7, #12]
 801630c:	60b9      	str	r1, [r7, #8]
 801630e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	68da      	ldr	r2, [r3, #12]
 8016314:	4b06      	ldr	r3, [pc, #24]	@ (8016330 <LL_I2C_SetOwnAddress2+0x2c>)
 8016316:	4013      	ands	r3, r2
 8016318:	68b9      	ldr	r1, [r7, #8]
 801631a:	687a      	ldr	r2, [r7, #4]
 801631c:	430a      	orrs	r2, r1
 801631e:	431a      	orrs	r2, r3
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	60da      	str	r2, [r3, #12]
}
 8016324:	bf00      	nop
 8016326:	3714      	adds	r7, #20
 8016328:	46bd      	mov	sp, r7
 801632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632e:	4770      	bx	lr
 8016330:	fffff801 	.word	0xfffff801

08016334 <LL_I2C_DisableOwnAddress2>:
{
 8016334:	b480      	push	{r7}
 8016336:	b083      	sub	sp, #12
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	68db      	ldr	r3, [r3, #12]
 8016340:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	60da      	str	r2, [r3, #12]
}
 8016348:	bf00      	nop
 801634a:	370c      	adds	r7, #12
 801634c:	46bd      	mov	sp, r7
 801634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016352:	4770      	bx	lr

08016354 <LL_I2C_EnableAutoEndMode>:
{
 8016354:	b480      	push	{r7}
 8016356:	b083      	sub	sp, #12
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	685b      	ldr	r3, [r3, #4]
 8016360:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	605a      	str	r2, [r3, #4]
}
 8016368:	bf00      	nop
 801636a:	370c      	adds	r7, #12
 801636c:	46bd      	mov	sp, r7
 801636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016372:	4770      	bx	lr

08016374 <LL_SPI_Enable>:
{
 8016374:	b480      	push	{r7}
 8016376:	b083      	sub	sp, #12
 8016378:	af00      	add	r7, sp, #0
 801637a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	f043 0201 	orr.w	r2, r3, #1
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	601a      	str	r2, [r3, #0]
}
 8016388:	bf00      	nop
 801638a:	370c      	adds	r7, #12
 801638c:	46bd      	mov	sp, r7
 801638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016392:	4770      	bx	lr

08016394 <LL_SPI_StartMasterTransfer>:
{
 8016394:	b480      	push	{r7}
 8016396:	b083      	sub	sp, #12
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	601a      	str	r2, [r3, #0]
}
 80163a8:	bf00      	nop
 80163aa:	370c      	adds	r7, #12
 80163ac:	46bd      	mov	sp, r7
 80163ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b2:	4770      	bx	lr

080163b4 <LL_SPI_SetStandard>:
{
 80163b4:	b480      	push	{r7}
 80163b6:	b083      	sub	sp, #12
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
 80163bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	68db      	ldr	r3, [r3, #12]
 80163c2:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 80163c6:	683b      	ldr	r3, [r7, #0]
 80163c8:	431a      	orrs	r2, r3
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	60da      	str	r2, [r3, #12]
}
 80163ce:	bf00      	nop
 80163d0:	370c      	adds	r7, #12
 80163d2:	46bd      	mov	sp, r7
 80163d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d8:	4770      	bx	lr

080163da <LL_SPI_SetFIFOThreshold>:
{
 80163da:	b480      	push	{r7}
 80163dc:	b083      	sub	sp, #12
 80163de:	af00      	add	r7, sp, #0
 80163e0:	6078      	str	r0, [r7, #4]
 80163e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	689b      	ldr	r3, [r3, #8]
 80163e8:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 80163ec:	683b      	ldr	r3, [r7, #0]
 80163ee:	431a      	orrs	r2, r3
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	609a      	str	r2, [r3, #8]
}
 80163f4:	bf00      	nop
 80163f6:	370c      	adds	r7, #12
 80163f8:	46bd      	mov	sp, r7
 80163fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fe:	4770      	bx	lr

08016400 <LL_SPI_EnableNSSPulseMgt>:
{
 8016400:	b480      	push	{r7}
 8016402:	b083      	sub	sp, #12
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	68db      	ldr	r3, [r3, #12]
 801640c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	60da      	str	r2, [r3, #12]
}
 8016414:	bf00      	nop
 8016416:	370c      	adds	r7, #12
 8016418:	46bd      	mov	sp, r7
 801641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641e:	4770      	bx	lr

08016420 <LL_SPI_DisableNSSPulseMgt>:
{
 8016420:	b480      	push	{r7}
 8016422:	b083      	sub	sp, #12
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	68db      	ldr	r3, [r3, #12]
 801642c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	60da      	str	r2, [r3, #12]
}
 8016434:	bf00      	nop
 8016436:	370c      	adds	r7, #12
 8016438:	46bd      	mov	sp, r7
 801643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801643e:	4770      	bx	lr

08016440 <LL_TIM_EnableCounter>:
{
 8016440:	b480      	push	{r7}
 8016442:	b083      	sub	sp, #12
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	f043 0201 	orr.w	r2, r3, #1
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	601a      	str	r2, [r3, #0]
}
 8016454:	bf00      	nop
 8016456:	370c      	adds	r7, #12
 8016458:	46bd      	mov	sp, r7
 801645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645e:	4770      	bx	lr

08016460 <LL_TIM_EnableUpdateEvent>:
{
 8016460:	b480      	push	{r7}
 8016462:	b083      	sub	sp, #12
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	f023 0202 	bic.w	r2, r3, #2
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	601a      	str	r2, [r3, #0]
}
 8016474:	bf00      	nop
 8016476:	370c      	adds	r7, #12
 8016478:	46bd      	mov	sp, r7
 801647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801647e:	4770      	bx	lr

08016480 <LL_TIM_DisableARRPreload>:
{
 8016480:	b480      	push	{r7}
 8016482:	b083      	sub	sp, #12
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	601a      	str	r2, [r3, #0]
}
 8016494:	bf00      	nop
 8016496:	370c      	adds	r7, #12
 8016498:	46bd      	mov	sp, r7
 801649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649e:	4770      	bx	lr

080164a0 <LL_TIM_SetClockSource>:
{
 80164a0:	b480      	push	{r7}
 80164a2:	b083      	sub	sp, #12
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	689a      	ldr	r2, [r3, #8]
 80164ae:	4b06      	ldr	r3, [pc, #24]	@ (80164c8 <LL_TIM_SetClockSource+0x28>)
 80164b0:	4013      	ands	r3, r2
 80164b2:	683a      	ldr	r2, [r7, #0]
 80164b4:	431a      	orrs	r2, r3
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	609a      	str	r2, [r3, #8]
}
 80164ba:	bf00      	nop
 80164bc:	370c      	adds	r7, #12
 80164be:	46bd      	mov	sp, r7
 80164c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c4:	4770      	bx	lr
 80164c6:	bf00      	nop
 80164c8:	fffebff8 	.word	0xfffebff8

080164cc <LL_TIM_SetTriggerOutput>:
{
 80164cc:	b480      	push	{r7}
 80164ce:	b083      	sub	sp, #12
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
 80164d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80164de:	683b      	ldr	r3, [r7, #0]
 80164e0:	431a      	orrs	r2, r3
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	605a      	str	r2, [r3, #4]
}
 80164e6:	bf00      	nop
 80164e8:	370c      	adds	r7, #12
 80164ea:	46bd      	mov	sp, r7
 80164ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f0:	4770      	bx	lr

080164f2 <LL_TIM_SetTriggerOutput2>:
{
 80164f2:	b480      	push	{r7}
 80164f4:	b083      	sub	sp, #12
 80164f6:	af00      	add	r7, sp, #0
 80164f8:	6078      	str	r0, [r7, #4]
 80164fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	685b      	ldr	r3, [r3, #4]
 8016500:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8016504:	683b      	ldr	r3, [r7, #0]
 8016506:	431a      	orrs	r2, r3
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	605a      	str	r2, [r3, #4]
}
 801650c:	bf00      	nop
 801650e:	370c      	adds	r7, #12
 8016510:	46bd      	mov	sp, r7
 8016512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016516:	4770      	bx	lr

08016518 <LL_TIM_DisableMasterSlaveMode>:
{
 8016518:	b480      	push	{r7}
 801651a:	b083      	sub	sp, #12
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	689b      	ldr	r3, [r3, #8]
 8016524:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	609a      	str	r2, [r3, #8]
}
 801652c:	bf00      	nop
 801652e:	370c      	adds	r7, #12
 8016530:	46bd      	mov	sp, r7
 8016532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016536:	4770      	bx	lr

08016538 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8016538:	b480      	push	{r7}
 801653a:	b083      	sub	sp, #12
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	68db      	ldr	r3, [r3, #12]
 8016544:	f043 0201 	orr.w	r2, r3, #1
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	60da      	str	r2, [r3, #12]
}
 801654c:	bf00      	nop
 801654e:	370c      	adds	r7, #12
 8016550:	46bd      	mov	sp, r7
 8016552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016556:	4770      	bx	lr

08016558 <LL_USART_Enable>:
{
 8016558:	b480      	push	{r7}
 801655a:	b083      	sub	sp, #12
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	f043 0201 	orr.w	r2, r3, #1
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	601a      	str	r2, [r3, #0]
}
 801656c:	bf00      	nop
 801656e:	370c      	adds	r7, #12
 8016570:	46bd      	mov	sp, r7
 8016572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016576:	4770      	bx	lr

08016578 <LL_USART_DisableFIFO>:
{
 8016578:	b480      	push	{r7}
 801657a:	b083      	sub	sp, #12
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	601a      	str	r2, [r3, #0]
}
 801658c:	bf00      	nop
 801658e:	370c      	adds	r7, #12
 8016590:	46bd      	mov	sp, r7
 8016592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016596:	4770      	bx	lr

08016598 <LL_USART_SetTXFIFOThreshold>:
{
 8016598:	b480      	push	{r7}
 801659a:	b089      	sub	sp, #36	@ 0x24
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
 80165a0:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	3308      	adds	r3, #8
 80165a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	e853 3f00 	ldrex	r3, [r3]
 80165ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	075b      	lsls	r3, r3, #29
 80165ba:	4313      	orrs	r3, r2
 80165bc:	61fb      	str	r3, [r7, #28]
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	3308      	adds	r3, #8
 80165c2:	69fa      	ldr	r2, [r7, #28]
 80165c4:	61ba      	str	r2, [r7, #24]
 80165c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165c8:	6979      	ldr	r1, [r7, #20]
 80165ca:	69ba      	ldr	r2, [r7, #24]
 80165cc:	e841 2300 	strex	r3, r2, [r1]
 80165d0:	613b      	str	r3, [r7, #16]
   return(result);
 80165d2:	693b      	ldr	r3, [r7, #16]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d1e4      	bne.n	80165a2 <LL_USART_SetTXFIFOThreshold+0xa>
}
 80165d8:	bf00      	nop
 80165da:	bf00      	nop
 80165dc:	3724      	adds	r7, #36	@ 0x24
 80165de:	46bd      	mov	sp, r7
 80165e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e4:	4770      	bx	lr

080165e6 <LL_USART_SetRXFIFOThreshold>:
{
 80165e6:	b480      	push	{r7}
 80165e8:	b089      	sub	sp, #36	@ 0x24
 80165ea:	af00      	add	r7, sp, #0
 80165ec:	6078      	str	r0, [r7, #4]
 80165ee:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	3308      	adds	r3, #8
 80165f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	e853 3f00 	ldrex	r3, [r3]
 80165fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80165fe:	68bb      	ldr	r3, [r7, #8]
 8016600:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8016604:	683b      	ldr	r3, [r7, #0]
 8016606:	065b      	lsls	r3, r3, #25
 8016608:	4313      	orrs	r3, r2
 801660a:	61fb      	str	r3, [r7, #28]
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	3308      	adds	r3, #8
 8016610:	69fa      	ldr	r2, [r7, #28]
 8016612:	61ba      	str	r2, [r7, #24]
 8016614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016616:	6979      	ldr	r1, [r7, #20]
 8016618:	69ba      	ldr	r2, [r7, #24]
 801661a:	e841 2300 	strex	r3, r2, [r1]
 801661e:	613b      	str	r3, [r7, #16]
   return(result);
 8016620:	693b      	ldr	r3, [r7, #16]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d1e4      	bne.n	80165f0 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8016626:	bf00      	nop
 8016628:	bf00      	nop
 801662a:	3724      	adds	r7, #36	@ 0x24
 801662c:	46bd      	mov	sp, r7
 801662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016632:	4770      	bx	lr

08016634 <LL_USART_ConfigAsyncMode>:
{
 8016634:	b480      	push	{r7}
 8016636:	b083      	sub	sp, #12
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	685b      	ldr	r3, [r3, #4]
 8016640:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	689b      	ldr	r3, [r3, #8]
 801664c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	609a      	str	r2, [r3, #8]
}
 8016654:	bf00      	nop
 8016656:	370c      	adds	r7, #12
 8016658:	46bd      	mov	sp, r7
 801665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665e:	4770      	bx	lr

08016660 <LL_USART_IsActiveFlag_TC>:
{
 8016660:	b480      	push	{r7}
 8016662:	b083      	sub	sp, #12
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	69db      	ldr	r3, [r3, #28]
 801666c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016670:	2b40      	cmp	r3, #64	@ 0x40
 8016672:	d101      	bne.n	8016678 <LL_USART_IsActiveFlag_TC+0x18>
 8016674:	2301      	movs	r3, #1
 8016676:	e000      	b.n	801667a <LL_USART_IsActiveFlag_TC+0x1a>
 8016678:	2300      	movs	r3, #0
}
 801667a:	4618      	mov	r0, r3
 801667c:	370c      	adds	r7, #12
 801667e:	46bd      	mov	sp, r7
 8016680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016684:	4770      	bx	lr

08016686 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8016686:	b480      	push	{r7}
 8016688:	b083      	sub	sp, #12
 801668a:	af00      	add	r7, sp, #0
 801668c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	69db      	ldr	r3, [r3, #28]
 8016692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016696:	2b80      	cmp	r3, #128	@ 0x80
 8016698:	d101      	bne.n	801669e <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 801669a:	2301      	movs	r3, #1
 801669c:	e000      	b.n	80166a0 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 801669e:	2300      	movs	r3, #0
}
 80166a0:	4618      	mov	r0, r3
 80166a2:	370c      	adds	r7, #12
 80166a4:	46bd      	mov	sp, r7
 80166a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166aa:	4770      	bx	lr

080166ac <LL_USART_IsActiveFlag_TEACK>:
{
 80166ac:	b480      	push	{r7}
 80166ae:	b083      	sub	sp, #12
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	69db      	ldr	r3, [r3, #28]
 80166b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80166bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80166c0:	d101      	bne.n	80166c6 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80166c2:	2301      	movs	r3, #1
 80166c4:	e000      	b.n	80166c8 <LL_USART_IsActiveFlag_TEACK+0x1c>
 80166c6:	2300      	movs	r3, #0
}
 80166c8:	4618      	mov	r0, r3
 80166ca:	370c      	adds	r7, #12
 80166cc:	46bd      	mov	sp, r7
 80166ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d2:	4770      	bx	lr

080166d4 <LL_USART_IsActiveFlag_REACK>:
{
 80166d4:	b480      	push	{r7}
 80166d6:	b083      	sub	sp, #12
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	69db      	ldr	r3, [r3, #28]
 80166e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80166e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80166e8:	d101      	bne.n	80166ee <LL_USART_IsActiveFlag_REACK+0x1a>
 80166ea:	2301      	movs	r3, #1
 80166ec:	e000      	b.n	80166f0 <LL_USART_IsActiveFlag_REACK+0x1c>
 80166ee:	2300      	movs	r3, #0
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	370c      	adds	r7, #12
 80166f4:	46bd      	mov	sp, r7
 80166f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fa:	4770      	bx	lr

080166fc <LL_USART_TransmitData8>:
{
 80166fc:	b480      	push	{r7}
 80166fe:	b083      	sub	sp, #12
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
 8016704:	460b      	mov	r3, r1
 8016706:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8016708:	78fa      	ldrb	r2, [r7, #3]
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801670e:	bf00      	nop
 8016710:	370c      	adds	r7, #12
 8016712:	46bd      	mov	sp, r7
 8016714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016718:	4770      	bx	lr

0801671a <LL_GPIO_SetOutputPin>:
{
 801671a:	b480      	push	{r7}
 801671c:	b083      	sub	sp, #12
 801671e:	af00      	add	r7, sp, #0
 8016720:	6078      	str	r0, [r7, #4]
 8016722:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	683a      	ldr	r2, [r7, #0]
 8016728:	619a      	str	r2, [r3, #24]
}
 801672a:	bf00      	nop
 801672c:	370c      	adds	r7, #12
 801672e:	46bd      	mov	sp, r7
 8016730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016734:	4770      	bx	lr

08016736 <LL_GPIO_ResetOutputPin>:
{
 8016736:	b480      	push	{r7}
 8016738:	b083      	sub	sp, #12
 801673a:	af00      	add	r7, sp, #0
 801673c:	6078      	str	r0, [r7, #4]
 801673e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	041a      	lsls	r2, r3, #16
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	619a      	str	r2, [r3, #24]
}
 8016748:	bf00      	nop
 801674a:	370c      	adds	r7, #12
 801674c:	46bd      	mov	sp, r7
 801674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016752:	4770      	bx	lr

08016754 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8016754:	b480      	push	{r7}
 8016756:	b085      	sub	sp, #20
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 801675c:	4b0a      	ldr	r3, [pc, #40]	@ (8016788 <LL_AHB4_GRP1_EnableClock+0x34>)
 801675e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8016762:	4909      	ldr	r1, [pc, #36]	@ (8016788 <LL_AHB4_GRP1_EnableClock+0x34>)
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	4313      	orrs	r3, r2
 8016768:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 801676c:	4b06      	ldr	r3, [pc, #24]	@ (8016788 <LL_AHB4_GRP1_EnableClock+0x34>)
 801676e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	4013      	ands	r3, r2
 8016776:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016778:	68fb      	ldr	r3, [r7, #12]
}
 801677a:	bf00      	nop
 801677c:	3714      	adds	r7, #20
 801677e:	46bd      	mov	sp, r7
 8016780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016784:	4770      	bx	lr
 8016786:	bf00      	nop
 8016788:	58024400 	.word	0x58024400

0801678c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 801678c:	b480      	push	{r7}
 801678e:	b085      	sub	sp, #20
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8016794:	4b0a      	ldr	r3, [pc, #40]	@ (80167c0 <LL_APB1_GRP1_EnableClock+0x34>)
 8016796:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 801679a:	4909      	ldr	r1, [pc, #36]	@ (80167c0 <LL_APB1_GRP1_EnableClock+0x34>)
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	4313      	orrs	r3, r2
 80167a0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80167a4:	4b06      	ldr	r3, [pc, #24]	@ (80167c0 <LL_APB1_GRP1_EnableClock+0x34>)
 80167a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	4013      	ands	r3, r2
 80167ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80167b0:	68fb      	ldr	r3, [r7, #12]
}
 80167b2:	bf00      	nop
 80167b4:	3714      	adds	r7, #20
 80167b6:	46bd      	mov	sp, r7
 80167b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167bc:	4770      	bx	lr
 80167be:	bf00      	nop
 80167c0:	58024400 	.word	0x58024400

080167c4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80167c4:	b480      	push	{r7}
 80167c6:	b085      	sub	sp, #20
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80167cc:	4b0a      	ldr	r3, [pc, #40]	@ (80167f8 <LL_APB2_GRP1_EnableClock+0x34>)
 80167ce:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80167d2:	4909      	ldr	r1, [pc, #36]	@ (80167f8 <LL_APB2_GRP1_EnableClock+0x34>)
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	4313      	orrs	r3, r2
 80167d8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80167dc:	4b06      	ldr	r3, [pc, #24]	@ (80167f8 <LL_APB2_GRP1_EnableClock+0x34>)
 80167de:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	4013      	ands	r3, r2
 80167e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80167e8:	68fb      	ldr	r3, [r7, #12]
}
 80167ea:	bf00      	nop
 80167ec:	3714      	adds	r7, #20
 80167ee:	46bd      	mov	sp, r7
 80167f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f4:	4770      	bx	lr
 80167f6:	bf00      	nop
 80167f8:	58024400 	.word	0x58024400

080167fc <LL_APB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_EnableClock(uint32_t Periphs)
{
 80167fc:	b480      	push	{r7}
 80167fe:	b085      	sub	sp, #20
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB4ENR, Periphs);
 8016804:	4b0a      	ldr	r3, [pc, #40]	@ (8016830 <LL_APB4_GRP1_EnableClock+0x34>)
 8016806:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 801680a:	4909      	ldr	r1, [pc, #36]	@ (8016830 <LL_APB4_GRP1_EnableClock+0x34>)
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	4313      	orrs	r3, r2
 8016810:	f8c1 30f4 	str.w	r3, [r1, #244]	@ 0xf4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB4ENR, Periphs);
 8016814:	4b06      	ldr	r3, [pc, #24]	@ (8016830 <LL_APB4_GRP1_EnableClock+0x34>)
 8016816:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	4013      	ands	r3, r2
 801681e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016820:	68fb      	ldr	r3, [r7, #12]
}
 8016822:	bf00      	nop
 8016824:	3714      	adds	r7, #20
 8016826:	46bd      	mov	sp, r7
 8016828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682c:	4770      	bx	lr
 801682e:	bf00      	nop
 8016830:	58024400 	.word	0x58024400

08016834 <LL_DMA_SetDataTransferDirection>:
{
 8016834:	b480      	push	{r7}
 8016836:	b087      	sub	sp, #28
 8016838:	af00      	add	r7, sp, #0
 801683a:	60f8      	str	r0, [r7, #12]
 801683c:	60b9      	str	r1, [r7, #8]
 801683e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8016844:	4a0d      	ldr	r2, [pc, #52]	@ (801687c <LL_DMA_SetDataTransferDirection+0x48>)
 8016846:	68bb      	ldr	r3, [r7, #8]
 8016848:	4413      	add	r3, r2
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	461a      	mov	r2, r3
 801684e:	697b      	ldr	r3, [r7, #20]
 8016850:	4413      	add	r3, r2
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8016858:	4908      	ldr	r1, [pc, #32]	@ (801687c <LL_DMA_SetDataTransferDirection+0x48>)
 801685a:	68bb      	ldr	r3, [r7, #8]
 801685c:	440b      	add	r3, r1
 801685e:	781b      	ldrb	r3, [r3, #0]
 8016860:	4619      	mov	r1, r3
 8016862:	697b      	ldr	r3, [r7, #20]
 8016864:	440b      	add	r3, r1
 8016866:	4619      	mov	r1, r3
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	4313      	orrs	r3, r2
 801686c:	600b      	str	r3, [r1, #0]
}
 801686e:	bf00      	nop
 8016870:	371c      	adds	r7, #28
 8016872:	46bd      	mov	sp, r7
 8016874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016878:	4770      	bx	lr
 801687a:	bf00      	nop
 801687c:	0802645c 	.word	0x0802645c

08016880 <LL_DMA_SetMode>:
{
 8016880:	b480      	push	{r7}
 8016882:	b087      	sub	sp, #28
 8016884:	af00      	add	r7, sp, #0
 8016886:	60f8      	str	r0, [r7, #12]
 8016888:	60b9      	str	r1, [r7, #8]
 801688a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8016890:	4a0d      	ldr	r2, [pc, #52]	@ (80168c8 <LL_DMA_SetMode+0x48>)
 8016892:	68bb      	ldr	r3, [r7, #8]
 8016894:	4413      	add	r3, r2
 8016896:	781b      	ldrb	r3, [r3, #0]
 8016898:	461a      	mov	r2, r3
 801689a:	697b      	ldr	r3, [r7, #20]
 801689c:	4413      	add	r3, r2
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 80168a4:	4908      	ldr	r1, [pc, #32]	@ (80168c8 <LL_DMA_SetMode+0x48>)
 80168a6:	68bb      	ldr	r3, [r7, #8]
 80168a8:	440b      	add	r3, r1
 80168aa:	781b      	ldrb	r3, [r3, #0]
 80168ac:	4619      	mov	r1, r3
 80168ae:	697b      	ldr	r3, [r7, #20]
 80168b0:	440b      	add	r3, r1
 80168b2:	4619      	mov	r1, r3
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	4313      	orrs	r3, r2
 80168b8:	600b      	str	r3, [r1, #0]
}
 80168ba:	bf00      	nop
 80168bc:	371c      	adds	r7, #28
 80168be:	46bd      	mov	sp, r7
 80168c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c4:	4770      	bx	lr
 80168c6:	bf00      	nop
 80168c8:	0802645c 	.word	0x0802645c

080168cc <LL_DMA_SetPeriphIncMode>:
{
 80168cc:	b480      	push	{r7}
 80168ce:	b087      	sub	sp, #28
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	60f8      	str	r0, [r7, #12]
 80168d4:	60b9      	str	r1, [r7, #8]
 80168d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 80168dc:	4a0d      	ldr	r2, [pc, #52]	@ (8016914 <LL_DMA_SetPeriphIncMode+0x48>)
 80168de:	68bb      	ldr	r3, [r7, #8]
 80168e0:	4413      	add	r3, r2
 80168e2:	781b      	ldrb	r3, [r3, #0]
 80168e4:	461a      	mov	r2, r3
 80168e6:	697b      	ldr	r3, [r7, #20]
 80168e8:	4413      	add	r3, r2
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80168f0:	4908      	ldr	r1, [pc, #32]	@ (8016914 <LL_DMA_SetPeriphIncMode+0x48>)
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	440b      	add	r3, r1
 80168f6:	781b      	ldrb	r3, [r3, #0]
 80168f8:	4619      	mov	r1, r3
 80168fa:	697b      	ldr	r3, [r7, #20]
 80168fc:	440b      	add	r3, r1
 80168fe:	4619      	mov	r1, r3
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	4313      	orrs	r3, r2
 8016904:	600b      	str	r3, [r1, #0]
}
 8016906:	bf00      	nop
 8016908:	371c      	adds	r7, #28
 801690a:	46bd      	mov	sp, r7
 801690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016910:	4770      	bx	lr
 8016912:	bf00      	nop
 8016914:	0802645c 	.word	0x0802645c

08016918 <LL_DMA_SetMemoryIncMode>:
{
 8016918:	b480      	push	{r7}
 801691a:	b087      	sub	sp, #28
 801691c:	af00      	add	r7, sp, #0
 801691e:	60f8      	str	r0, [r7, #12]
 8016920:	60b9      	str	r1, [r7, #8]
 8016922:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 8016928:	4a0d      	ldr	r2, [pc, #52]	@ (8016960 <LL_DMA_SetMemoryIncMode+0x48>)
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	4413      	add	r3, r2
 801692e:	781b      	ldrb	r3, [r3, #0]
 8016930:	461a      	mov	r2, r3
 8016932:	697b      	ldr	r3, [r7, #20]
 8016934:	4413      	add	r3, r2
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801693c:	4908      	ldr	r1, [pc, #32]	@ (8016960 <LL_DMA_SetMemoryIncMode+0x48>)
 801693e:	68bb      	ldr	r3, [r7, #8]
 8016940:	440b      	add	r3, r1
 8016942:	781b      	ldrb	r3, [r3, #0]
 8016944:	4619      	mov	r1, r3
 8016946:	697b      	ldr	r3, [r7, #20]
 8016948:	440b      	add	r3, r1
 801694a:	4619      	mov	r1, r3
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	4313      	orrs	r3, r2
 8016950:	600b      	str	r3, [r1, #0]
}
 8016952:	bf00      	nop
 8016954:	371c      	adds	r7, #28
 8016956:	46bd      	mov	sp, r7
 8016958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695c:	4770      	bx	lr
 801695e:	bf00      	nop
 8016960:	0802645c 	.word	0x0802645c

08016964 <LL_DMA_SetPeriphSize>:
{
 8016964:	b480      	push	{r7}
 8016966:	b087      	sub	sp, #28
 8016968:	af00      	add	r7, sp, #0
 801696a:	60f8      	str	r0, [r7, #12]
 801696c:	60b9      	str	r1, [r7, #8]
 801696e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 8016974:	4a0d      	ldr	r2, [pc, #52]	@ (80169ac <LL_DMA_SetPeriphSize+0x48>)
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	4413      	add	r3, r2
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	461a      	mov	r2, r3
 801697e:	697b      	ldr	r3, [r7, #20]
 8016980:	4413      	add	r3, r2
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8016988:	4908      	ldr	r1, [pc, #32]	@ (80169ac <LL_DMA_SetPeriphSize+0x48>)
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	440b      	add	r3, r1
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	4619      	mov	r1, r3
 8016992:	697b      	ldr	r3, [r7, #20]
 8016994:	440b      	add	r3, r1
 8016996:	4619      	mov	r1, r3
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	4313      	orrs	r3, r2
 801699c:	600b      	str	r3, [r1, #0]
}
 801699e:	bf00      	nop
 80169a0:	371c      	adds	r7, #28
 80169a2:	46bd      	mov	sp, r7
 80169a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a8:	4770      	bx	lr
 80169aa:	bf00      	nop
 80169ac:	0802645c 	.word	0x0802645c

080169b0 <LL_DMA_SetMemorySize>:
{
 80169b0:	b480      	push	{r7}
 80169b2:	b087      	sub	sp, #28
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	60f8      	str	r0, [r7, #12]
 80169b8:	60b9      	str	r1, [r7, #8]
 80169ba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 80169c0:	4a0d      	ldr	r2, [pc, #52]	@ (80169f8 <LL_DMA_SetMemorySize+0x48>)
 80169c2:	68bb      	ldr	r3, [r7, #8]
 80169c4:	4413      	add	r3, r2
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	461a      	mov	r2, r3
 80169ca:	697b      	ldr	r3, [r7, #20]
 80169cc:	4413      	add	r3, r2
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80169d4:	4908      	ldr	r1, [pc, #32]	@ (80169f8 <LL_DMA_SetMemorySize+0x48>)
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	440b      	add	r3, r1
 80169da:	781b      	ldrb	r3, [r3, #0]
 80169dc:	4619      	mov	r1, r3
 80169de:	697b      	ldr	r3, [r7, #20]
 80169e0:	440b      	add	r3, r1
 80169e2:	4619      	mov	r1, r3
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	4313      	orrs	r3, r2
 80169e8:	600b      	str	r3, [r1, #0]
}
 80169ea:	bf00      	nop
 80169ec:	371c      	adds	r7, #28
 80169ee:	46bd      	mov	sp, r7
 80169f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f4:	4770      	bx	lr
 80169f6:	bf00      	nop
 80169f8:	0802645c 	.word	0x0802645c

080169fc <LL_DMA_SetStreamPriorityLevel>:
{
 80169fc:	b480      	push	{r7}
 80169fe:	b087      	sub	sp, #28
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	60f8      	str	r0, [r7, #12]
 8016a04:	60b9      	str	r1, [r7, #8]
 8016a06:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 8016a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8016a44 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8016a0e:	68bb      	ldr	r3, [r7, #8]
 8016a10:	4413      	add	r3, r2
 8016a12:	781b      	ldrb	r3, [r3, #0]
 8016a14:	461a      	mov	r2, r3
 8016a16:	697b      	ldr	r3, [r7, #20]
 8016a18:	4413      	add	r3, r2
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8016a20:	4908      	ldr	r1, [pc, #32]	@ (8016a44 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	440b      	add	r3, r1
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	4619      	mov	r1, r3
 8016a2a:	697b      	ldr	r3, [r7, #20]
 8016a2c:	440b      	add	r3, r1
 8016a2e:	4619      	mov	r1, r3
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	4313      	orrs	r3, r2
 8016a34:	600b      	str	r3, [r1, #0]
}
 8016a36:	bf00      	nop
 8016a38:	371c      	adds	r7, #28
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a40:	4770      	bx	lr
 8016a42:	bf00      	nop
 8016a44:	0802645c 	.word	0x0802645c

08016a48 <LL_DMA_SetPeriphRequest>:
{
 8016a48:	b480      	push	{r7}
 8016a4a:	b085      	sub	sp, #20
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	60f8      	str	r0, [r7, #12]
 8016a50:	60b9      	str	r1, [r7, #8]
 8016a52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8016a54:	68ba      	ldr	r2, [r7, #8]
 8016a56:	4b12      	ldr	r3, [pc, #72]	@ (8016aa0 <LL_DMA_SetPeriphRequest+0x58>)
 8016a58:	4413      	add	r3, r2
 8016a5a:	009b      	lsls	r3, r3, #2
 8016a5c:	68fa      	ldr	r2, [r7, #12]
 8016a5e:	4911      	ldr	r1, [pc, #68]	@ (8016aa4 <LL_DMA_SetPeriphRequest+0x5c>)
 8016a60:	428a      	cmp	r2, r1
 8016a62:	d101      	bne.n	8016a68 <LL_DMA_SetPeriphRequest+0x20>
 8016a64:	2200      	movs	r2, #0
 8016a66:	e000      	b.n	8016a6a <LL_DMA_SetPeriphRequest+0x22>
 8016a68:	2220      	movs	r2, #32
 8016a6a:	4413      	add	r3, r2
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8016a72:	68b9      	ldr	r1, [r7, #8]
 8016a74:	4b0a      	ldr	r3, [pc, #40]	@ (8016aa0 <LL_DMA_SetPeriphRequest+0x58>)
 8016a76:	440b      	add	r3, r1
 8016a78:	009b      	lsls	r3, r3, #2
 8016a7a:	68f9      	ldr	r1, [r7, #12]
 8016a7c:	4809      	ldr	r0, [pc, #36]	@ (8016aa4 <LL_DMA_SetPeriphRequest+0x5c>)
 8016a7e:	4281      	cmp	r1, r0
 8016a80:	d101      	bne.n	8016a86 <LL_DMA_SetPeriphRequest+0x3e>
 8016a82:	2100      	movs	r1, #0
 8016a84:	e000      	b.n	8016a88 <LL_DMA_SetPeriphRequest+0x40>
 8016a86:	2120      	movs	r1, #32
 8016a88:	440b      	add	r3, r1
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	4313      	orrs	r3, r2
 8016a90:	600b      	str	r3, [r1, #0]
}
 8016a92:	bf00      	nop
 8016a94:	3714      	adds	r7, #20
 8016a96:	46bd      	mov	sp, r7
 8016a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9c:	4770      	bx	lr
 8016a9e:	bf00      	nop
 8016aa0:	10008200 	.word	0x10008200
 8016aa4:	40020000 	.word	0x40020000

08016aa8 <LL_DMA_DisableFifoMode>:
{
 8016aa8:	b480      	push	{r7}
 8016aaa:	b085      	sub	sp, #20
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
 8016ab0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 8016ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8016ae8 <LL_DMA_DisableFifoMode+0x40>)
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	4413      	add	r3, r2
 8016abc:	781b      	ldrb	r3, [r3, #0]
 8016abe:	461a      	mov	r2, r3
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	4413      	add	r3, r2
 8016ac4:	695b      	ldr	r3, [r3, #20]
 8016ac6:	4908      	ldr	r1, [pc, #32]	@ (8016ae8 <LL_DMA_DisableFifoMode+0x40>)
 8016ac8:	683a      	ldr	r2, [r7, #0]
 8016aca:	440a      	add	r2, r1
 8016acc:	7812      	ldrb	r2, [r2, #0]
 8016ace:	4611      	mov	r1, r2
 8016ad0:	68fa      	ldr	r2, [r7, #12]
 8016ad2:	440a      	add	r2, r1
 8016ad4:	f023 0304 	bic.w	r3, r3, #4
 8016ad8:	6153      	str	r3, [r2, #20]
}
 8016ada:	bf00      	nop
 8016adc:	3714      	adds	r7, #20
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae4:	4770      	bx	lr
 8016ae6:	bf00      	nop
 8016ae8:	0802645c 	.word	0x0802645c

08016aec <LL_BDMA_SetDataTransferDirection>:
{
 8016aec:	b480      	push	{r7}
 8016aee:	b087      	sub	sp, #28
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	60f8      	str	r0, [r7, #12]
 8016af4:	60b9      	str	r1, [r7, #8]
 8016af6:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR,
 8016afc:	4a0d      	ldr	r2, [pc, #52]	@ (8016b34 <LL_BDMA_SetDataTransferDirection+0x48>)
 8016afe:	68bb      	ldr	r3, [r7, #8]
 8016b00:	4413      	add	r3, r2
 8016b02:	781b      	ldrb	r3, [r3, #0]
 8016b04:	461a      	mov	r2, r3
 8016b06:	697b      	ldr	r3, [r7, #20]
 8016b08:	4413      	add	r3, r2
 8016b0a:	681a      	ldr	r2, [r3, #0]
 8016b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8016b38 <LL_BDMA_SetDataTransferDirection+0x4c>)
 8016b0e:	4013      	ands	r3, r2
 8016b10:	4908      	ldr	r1, [pc, #32]	@ (8016b34 <LL_BDMA_SetDataTransferDirection+0x48>)
 8016b12:	68ba      	ldr	r2, [r7, #8]
 8016b14:	440a      	add	r2, r1
 8016b16:	7812      	ldrb	r2, [r2, #0]
 8016b18:	4611      	mov	r1, r2
 8016b1a:	697a      	ldr	r2, [r7, #20]
 8016b1c:	440a      	add	r2, r1
 8016b1e:	4611      	mov	r1, r2
 8016b20:	687a      	ldr	r2, [r7, #4]
 8016b22:	4313      	orrs	r3, r2
 8016b24:	600b      	str	r3, [r1, #0]
}
 8016b26:	bf00      	nop
 8016b28:	371c      	adds	r7, #28
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr
 8016b32:	bf00      	nop
 8016b34:	08026464 	.word	0x08026464
 8016b38:	ffffbfef 	.word	0xffffbfef

08016b3c <LL_BDMA_SetMode>:
{
 8016b3c:	b480      	push	{r7}
 8016b3e:	b087      	sub	sp, #28
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	60f8      	str	r0, [r7, #12]
 8016b44:	60b9      	str	r1, [r7, #8]
 8016b46:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_CIRC,
 8016b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8016b84 <LL_BDMA_SetMode+0x48>)
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	4413      	add	r3, r2
 8016b52:	781b      	ldrb	r3, [r3, #0]
 8016b54:	461a      	mov	r2, r3
 8016b56:	697b      	ldr	r3, [r7, #20]
 8016b58:	4413      	add	r3, r2
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	f023 0220 	bic.w	r2, r3, #32
 8016b60:	4908      	ldr	r1, [pc, #32]	@ (8016b84 <LL_BDMA_SetMode+0x48>)
 8016b62:	68bb      	ldr	r3, [r7, #8]
 8016b64:	440b      	add	r3, r1
 8016b66:	781b      	ldrb	r3, [r3, #0]
 8016b68:	4619      	mov	r1, r3
 8016b6a:	697b      	ldr	r3, [r7, #20]
 8016b6c:	440b      	add	r3, r1
 8016b6e:	4619      	mov	r1, r3
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	4313      	orrs	r3, r2
 8016b74:	600b      	str	r3, [r1, #0]
}
 8016b76:	bf00      	nop
 8016b78:	371c      	adds	r7, #28
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b80:	4770      	bx	lr
 8016b82:	bf00      	nop
 8016b84:	08026464 	.word	0x08026464

08016b88 <LL_BDMA_SetPeriphIncMode>:
{
 8016b88:	b480      	push	{r7}
 8016b8a:	b087      	sub	sp, #28
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	60f8      	str	r0, [r7, #12]
 8016b90:	60b9      	str	r1, [r7, #8]
 8016b92:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_PINC,
 8016b98:	4a0d      	ldr	r2, [pc, #52]	@ (8016bd0 <LL_BDMA_SetPeriphIncMode+0x48>)
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	4413      	add	r3, r2
 8016b9e:	781b      	ldrb	r3, [r3, #0]
 8016ba0:	461a      	mov	r2, r3
 8016ba2:	697b      	ldr	r3, [r7, #20]
 8016ba4:	4413      	add	r3, r2
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8016bac:	4908      	ldr	r1, [pc, #32]	@ (8016bd0 <LL_BDMA_SetPeriphIncMode+0x48>)
 8016bae:	68bb      	ldr	r3, [r7, #8]
 8016bb0:	440b      	add	r3, r1
 8016bb2:	781b      	ldrb	r3, [r3, #0]
 8016bb4:	4619      	mov	r1, r3
 8016bb6:	697b      	ldr	r3, [r7, #20]
 8016bb8:	440b      	add	r3, r1
 8016bba:	4619      	mov	r1, r3
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	4313      	orrs	r3, r2
 8016bc0:	600b      	str	r3, [r1, #0]
}
 8016bc2:	bf00      	nop
 8016bc4:	371c      	adds	r7, #28
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bcc:	4770      	bx	lr
 8016bce:	bf00      	nop
 8016bd0:	08026464 	.word	0x08026464

08016bd4 <LL_BDMA_SetMemoryIncMode>:
{
 8016bd4:	b480      	push	{r7}
 8016bd6:	b087      	sub	sp, #28
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	60f8      	str	r0, [r7, #12]
 8016bdc:	60b9      	str	r1, [r7, #8]
 8016bde:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_MINC,
 8016be4:	4a0d      	ldr	r2, [pc, #52]	@ (8016c1c <LL_BDMA_SetMemoryIncMode+0x48>)
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	4413      	add	r3, r2
 8016bea:	781b      	ldrb	r3, [r3, #0]
 8016bec:	461a      	mov	r2, r3
 8016bee:	697b      	ldr	r3, [r7, #20]
 8016bf0:	4413      	add	r3, r2
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016bf8:	4908      	ldr	r1, [pc, #32]	@ (8016c1c <LL_BDMA_SetMemoryIncMode+0x48>)
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	440b      	add	r3, r1
 8016bfe:	781b      	ldrb	r3, [r3, #0]
 8016c00:	4619      	mov	r1, r3
 8016c02:	697b      	ldr	r3, [r7, #20]
 8016c04:	440b      	add	r3, r1
 8016c06:	4619      	mov	r1, r3
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	4313      	orrs	r3, r2
 8016c0c:	600b      	str	r3, [r1, #0]
}
 8016c0e:	bf00      	nop
 8016c10:	371c      	adds	r7, #28
 8016c12:	46bd      	mov	sp, r7
 8016c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c18:	4770      	bx	lr
 8016c1a:	bf00      	nop
 8016c1c:	08026464 	.word	0x08026464

08016c20 <LL_BDMA_SetPeriphSize>:
{
 8016c20:	b480      	push	{r7}
 8016c22:	b087      	sub	sp, #28
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	60f8      	str	r0, [r7, #12]
 8016c28:	60b9      	str	r1, [r7, #8]
 8016c2a:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_PSIZE,
 8016c30:	4a0d      	ldr	r2, [pc, #52]	@ (8016c68 <LL_BDMA_SetPeriphSize+0x48>)
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	4413      	add	r3, r2
 8016c36:	781b      	ldrb	r3, [r3, #0]
 8016c38:	461a      	mov	r2, r3
 8016c3a:	697b      	ldr	r3, [r7, #20]
 8016c3c:	4413      	add	r3, r2
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8016c44:	4908      	ldr	r1, [pc, #32]	@ (8016c68 <LL_BDMA_SetPeriphSize+0x48>)
 8016c46:	68bb      	ldr	r3, [r7, #8]
 8016c48:	440b      	add	r3, r1
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	4619      	mov	r1, r3
 8016c4e:	697b      	ldr	r3, [r7, #20]
 8016c50:	440b      	add	r3, r1
 8016c52:	4619      	mov	r1, r3
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	4313      	orrs	r3, r2
 8016c58:	600b      	str	r3, [r1, #0]
}
 8016c5a:	bf00      	nop
 8016c5c:	371c      	adds	r7, #28
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c64:	4770      	bx	lr
 8016c66:	bf00      	nop
 8016c68:	08026464 	.word	0x08026464

08016c6c <LL_BDMA_SetMemorySize>:
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b087      	sub	sp, #28
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	60f8      	str	r0, [r7, #12]
 8016c74:	60b9      	str	r1, [r7, #8]
 8016c76:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_MSIZE,
 8016c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8016cb4 <LL_BDMA_SetMemorySize+0x48>)
 8016c7e:	68bb      	ldr	r3, [r7, #8]
 8016c80:	4413      	add	r3, r2
 8016c82:	781b      	ldrb	r3, [r3, #0]
 8016c84:	461a      	mov	r2, r3
 8016c86:	697b      	ldr	r3, [r7, #20]
 8016c88:	4413      	add	r3, r2
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8016c90:	4908      	ldr	r1, [pc, #32]	@ (8016cb4 <LL_BDMA_SetMemorySize+0x48>)
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	440b      	add	r3, r1
 8016c96:	781b      	ldrb	r3, [r3, #0]
 8016c98:	4619      	mov	r1, r3
 8016c9a:	697b      	ldr	r3, [r7, #20]
 8016c9c:	440b      	add	r3, r1
 8016c9e:	4619      	mov	r1, r3
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	4313      	orrs	r3, r2
 8016ca4:	600b      	str	r3, [r1, #0]
}
 8016ca6:	bf00      	nop
 8016ca8:	371c      	adds	r7, #28
 8016caa:	46bd      	mov	sp, r7
 8016cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb0:	4770      	bx	lr
 8016cb2:	bf00      	nop
 8016cb4:	08026464 	.word	0x08026464

08016cb8 <LL_BDMA_SetChannelPriorityLevel>:
{
 8016cb8:	b480      	push	{r7}
 8016cba:	b087      	sub	sp, #28
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_PL,
 8016cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8016d00 <LL_BDMA_SetChannelPriorityLevel+0x48>)
 8016cca:	68bb      	ldr	r3, [r7, #8]
 8016ccc:	4413      	add	r3, r2
 8016cce:	781b      	ldrb	r3, [r3, #0]
 8016cd0:	461a      	mov	r2, r3
 8016cd2:	697b      	ldr	r3, [r7, #20]
 8016cd4:	4413      	add	r3, r2
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8016cdc:	4908      	ldr	r1, [pc, #32]	@ (8016d00 <LL_BDMA_SetChannelPriorityLevel+0x48>)
 8016cde:	68bb      	ldr	r3, [r7, #8]
 8016ce0:	440b      	add	r3, r1
 8016ce2:	781b      	ldrb	r3, [r3, #0]
 8016ce4:	4619      	mov	r1, r3
 8016ce6:	697b      	ldr	r3, [r7, #20]
 8016ce8:	440b      	add	r3, r1
 8016cea:	4619      	mov	r1, r3
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	4313      	orrs	r3, r2
 8016cf0:	600b      	str	r3, [r1, #0]
}
 8016cf2:	bf00      	nop
 8016cf4:	371c      	adds	r7, #28
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfc:	4770      	bx	lr
 8016cfe:	bf00      	nop
 8016d00:	08026464 	.word	0x08026464

08016d04 <LL_BDMA_SetPeriphRequest>:
{
 8016d04:	b480      	push	{r7}
 8016d06:	b085      	sub	sp, #20
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	60f8      	str	r0, [r7, #12]
 8016d0c:	60b9      	str	r1, [r7, #8]
 8016d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX2_Channel0 + (DMAMUX_CCR_SIZE * (Channel))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8016d10:	68ba      	ldr	r2, [r7, #8]
 8016d12:	4b0a      	ldr	r3, [pc, #40]	@ (8016d3c <LL_BDMA_SetPeriphRequest+0x38>)
 8016d14:	4413      	add	r3, r2
 8016d16:	009b      	lsls	r3, r3, #2
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8016d1e:	68b9      	ldr	r1, [r7, #8]
 8016d20:	4b06      	ldr	r3, [pc, #24]	@ (8016d3c <LL_BDMA_SetPeriphRequest+0x38>)
 8016d22:	440b      	add	r3, r1
 8016d24:	009b      	lsls	r3, r3, #2
 8016d26:	4619      	mov	r1, r3
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	4313      	orrs	r3, r2
 8016d2c:	600b      	str	r3, [r1, #0]
}
 8016d2e:	bf00      	nop
 8016d30:	3714      	adds	r7, #20
 8016d32:	46bd      	mov	sp, r7
 8016d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d38:	4770      	bx	lr
 8016d3a:	bf00      	nop
 8016d3c:	16009600 	.word	0x16009600

08016d40 <I2C_ReInit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_ReInit(I2C_TypeDef *I2Cx) {
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b082      	sub	sp, #8
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
    LL_I2C_Disable(I2Cx);
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f7ff faaa 	bl	80162a2 <LL_I2C_Disable>

    if (I2Cx == I2C2) {
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	4a04      	ldr	r2, [pc, #16]	@ (8016d64 <I2C_ReInit+0x24>)
 8016d52:	4293      	cmp	r3, r2
 8016d54:	d101      	bne.n	8016d5a <I2C_ReInit+0x1a>
        MX_I2C2_Init();
 8016d56:	f000 fcd9 	bl	801770c <MX_I2C2_Init>
    }
}
 8016d5a:	bf00      	nop
 8016d5c:	3708      	adds	r7, #8
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}
 8016d62:	bf00      	nop
 8016d64:	40005800 	.word	0x40005800

08016d68 <SDMMC1_ReInit>:

void SDMMC1_ReInit(void) {
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	af00      	add	r7, sp, #0
	HAL_MMC_DeInit(&hmmc1);
 8016d6c:	4803      	ldr	r0, [pc, #12]	@ (8016d7c <SDMMC1_ReInit+0x14>)
 8016d6e:	f003 fb5d 	bl	801a42c <HAL_MMC_DeInit>
	MX_SDMMC1_MMC_Init();
 8016d72:	f000 fd55 	bl	8017820 <MX_SDMMC1_MMC_Init>
}
 8016d76:	bf00      	nop
 8016d78:	bd80      	pop	{r7, pc}
 8016d7a:	bf00      	nop
 8016d7c:	2405a57c 	.word	0x2405a57c

08016d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8016d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d82:	f5ad 7d6b 	sub.w	sp, sp, #940	@ 0x3ac
 8016d86:	af00      	add	r7, sp, #0
  int32_t timeout;
#endif
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8016d88:	f001 fcde 	bl	8018748 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
#ifdef USE_CORE_M4
  timeout = 0xFFFF;
 8016d8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016d90:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8016d94:	bf00      	nop
 8016d96:	4bc2      	ldr	r3, [pc, #776]	@ (80170a0 <main+0x320>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d006      	beq.n	8016db0 <main+0x30>
 8016da2:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8016da6:	1e5a      	subs	r2, r3, #1
 8016da8:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	dcf2      	bgt.n	8016d96 <main+0x16>
  if ( timeout < 0 )
 8016db0:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	da01      	bge.n	8016dbc <main+0x3c>
  {
  Error_Handler();
 8016db8:	f001 fd04 	bl	80187c4 <Error_Handler>
#endif
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8016dbc:	f002 fad2 	bl	8019364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8016dc0:	f000 fc28 	bl	8017614 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
#ifdef USE_CORE_M4
__HAL_RCC_HSEM_CLK_ENABLE();
 8016dc4:	4bb6      	ldr	r3, [pc, #728]	@ (80170a0 <main+0x320>)
 8016dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016dca:	4ab5      	ldr	r2, [pc, #724]	@ (80170a0 <main+0x320>)
 8016dcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8016dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8016dd4:	4bb2      	ldr	r3, [pc, #712]	@ (80170a0 <main+0x320>)
 8016dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016dda:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8016dde:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8016de2:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8016de6:	601a      	str	r2, [r3, #0]
 8016de8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8016dec:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8016df0:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8016df2:	2000      	movs	r0, #0
 8016df4:	f002 ff86 	bl	8019d04 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8016df8:	2100      	movs	r1, #0
 8016dfa:	2000      	movs	r0, #0
 8016dfc:	f002 ff9c 	bl	8019d38 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8016e00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e04:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8016e08:	bf00      	nop
 8016e0a:	4ba5      	ldr	r3, [pc, #660]	@ (80170a0 <main+0x320>)
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d106      	bne.n	8016e24 <main+0xa4>
 8016e16:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8016e1a:	1e5a      	subs	r2, r3, #1
 8016e1c:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	dcf2      	bgt.n	8016e0a <main+0x8a>
if ( timeout < 0 )
 8016e24:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	da01      	bge.n	8016e30 <main+0xb0>
{
Error_Handler();
 8016e2c:	f001 fcca 	bl	80187c4 <Error_Handler>
  MX_TIM1_Init();
  MX_UART7_Init();
  /* USER CODE BEGIN 2 */
#else

  char boot_log[800] = {0};
 8016e30:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8016e34:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8016e3e:	461a      	mov	r2, r3
 8016e40:	2100      	movs	r1, #0
 8016e42:	f00b f924 	bl	802208e <memset>
  char temp[80];

  sprintf(boot_log, "\r\n-----> Booting STM32H7 - Cortex M7 on OBC ...\r\n");
 8016e46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016e4a:	4996      	ldr	r1, [pc, #600]	@ (80170a4 <main+0x324>)
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f00b f88f 	bl	8021f70 <siprintf>
  strcat(boot_log, "[ OK ] SystemClock: 240MHz, Initializing Peripherals...\r\n");
 8016e52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016e56:	4618      	mov	r0, r3
 8016e58:	f7e9 fa4c 	bl	80002f4 <strlen>
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	461a      	mov	r2, r3
 8016e60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016e64:	4413      	add	r3, r2
 8016e66:	4a90      	ldr	r2, [pc, #576]	@ (80170a8 <main+0x328>)
 8016e68:	4614      	mov	r4, r2
 8016e6a:	469c      	mov	ip, r3
 8016e6c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8016e70:	4665      	mov	r5, ip
 8016e72:	4626      	mov	r6, r4
 8016e74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016e76:	6028      	str	r0, [r5, #0]
 8016e78:	6069      	str	r1, [r5, #4]
 8016e7a:	60aa      	str	r2, [r5, #8]
 8016e7c:	60eb      	str	r3, [r5, #12]
 8016e7e:	3410      	adds	r4, #16
 8016e80:	f10c 0c10 	add.w	ip, ip, #16
 8016e84:	4574      	cmp	r4, lr
 8016e86:	d1f3      	bne.n	8016e70 <main+0xf0>
 8016e88:	4662      	mov	r2, ip
 8016e8a:	4623      	mov	r3, r4
 8016e8c:	cb03      	ldmia	r3!, {r0, r1}
 8016e8e:	6010      	str	r0, [r2, #0]
 8016e90:	6051      	str	r1, [r2, #4]
 8016e92:	881b      	ldrh	r3, [r3, #0]
 8016e94:	8113      	strh	r3, [r2, #8]
//  LL_mDelay(2);				//When use FreeRTOS, Sys-tick IRQ here is not enable
  HAL_Delay(2);
 8016e96:	2002      	movs	r0, #2
 8016e98:	f002 fac0 	bl	801941c <HAL_Delay>
  strcat(boot_log, "[ OK ] SYSCLK OK!, HAL OK!\r\n");
 8016e9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f7e9 fa27 	bl	80002f4 <strlen>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	461a      	mov	r2, r3
 8016eaa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016eae:	4413      	add	r3, r2
 8016eb0:	4a7e      	ldr	r2, [pc, #504]	@ (80170ac <main+0x32c>)
 8016eb2:	461d      	mov	r5, r3
 8016eb4:	4614      	mov	r4, r2
 8016eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016eb8:	6028      	str	r0, [r5, #0]
 8016eba:	6069      	str	r1, [r5, #4]
 8016ebc:	60aa      	str	r2, [r5, #8]
 8016ebe:	60eb      	str	r3, [r5, #12]
 8016ec0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8016ec2:	6128      	str	r0, [r5, #16]
 8016ec4:	6169      	str	r1, [r5, #20]
 8016ec6:	61aa      	str	r2, [r5, #24]
 8016ec8:	7823      	ldrb	r3, [r4, #0]
 8016eca:	772b      	strb	r3, [r5, #28]

  //--> GPIO Init --> GPIO Init --> GPIO Init --> GPIO Init --> GPIO Init
  MX_GPIO_Init();
 8016ecc:	f001 fb4e 	bl	801856c <MX_GPIO_Init>
  if(peripherals[0].errorCode == Sys_OK)
 8016ed0:	4b77      	ldr	r3, [pc, #476]	@ (80170b0 <main+0x330>)
 8016ed2:	7a9b      	ldrb	r3, [r3, #10]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d124      	bne.n	8016f22 <main+0x1a2>
  {
	  sprintf(temp, "[ OK ] GPIO Initialized.\r\n");
 8016ed8:	1d3b      	adds	r3, r7, #4
 8016eda:	4976      	ldr	r1, [pc, #472]	@ (80170b4 <main+0x334>)
 8016edc:	4618      	mov	r0, r3
 8016ede:	f00b f847 	bl	8021f70 <siprintf>
	  strcat(boot_log, temp);
 8016ee2:	1d3a      	adds	r2, r7, #4
 8016ee4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016ee8:	4611      	mov	r1, r2
 8016eea:	4618      	mov	r0, r3
 8016eec:	f00b f8d7 	bl	802209e <strcat>
	  LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED0_GPIO_Port, MCU_IO_DEBUG_LED0_Pin);
 8016ef0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016ef4:	4870      	ldr	r0, [pc, #448]	@ (80170b8 <main+0x338>)
 8016ef6:	f7ff fc10 	bl	801671a <LL_GPIO_SetOutputPin>
	  LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED1_GPIO_Port, MCU_IO_DEBUG_LED1_Pin);
 8016efa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8016efe:	486e      	ldr	r0, [pc, #440]	@ (80170b8 <main+0x338>)
 8016f00:	f7ff fc0b 	bl	801671a <LL_GPIO_SetOutputPin>
	  sprintf(temp, "[ OK ] DEBUG0: [+] | DEBUG1: [+]\r\n");
 8016f04:	1d3b      	adds	r3, r7, #4
 8016f06:	496d      	ldr	r1, [pc, #436]	@ (80170bc <main+0x33c>)
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f00b f831 	bl	8021f70 <siprintf>
	  strcat(boot_log, temp);
 8016f0e:	1d3a      	adds	r2, r7, #4
 8016f10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016f14:	4611      	mov	r1, r2
 8016f16:	4618      	mov	r0, r3
 8016f18:	f00b f8c1 	bl	802209e <strcat>
	  peripherals[0].state = PERIPH_STATE_INIT;
 8016f1c:	4b64      	ldr	r3, [pc, #400]	@ (80170b0 <main+0x330>)
 8016f1e:	2201      	movs	r2, #1
 8016f20:	721a      	strb	r2, [r3, #8]
  }

  //--> MDMA Init --> MDMA Init --> MDMA Init --> MDMA Init --> MDMA Init
  MX_MDMA_Init();
 8016f22:	f001 fabb 	bl	801849c <MX_MDMA_Init>
  if(peripherals[1].errorCode == Sys_OK)
 8016f26:	4b62      	ldr	r3, [pc, #392]	@ (80170b0 <main+0x330>)
 8016f28:	7f9b      	ldrb	r3, [r3, #30]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d10f      	bne.n	8016f4e <main+0x1ce>
  {
	  sprintf(temp, "[ OK ] MDMA Initialized.\r\n");
 8016f2e:	1d3b      	adds	r3, r7, #4
 8016f30:	4963      	ldr	r1, [pc, #396]	@ (80170c0 <main+0x340>)
 8016f32:	4618      	mov	r0, r3
 8016f34:	f00b f81c 	bl	8021f70 <siprintf>
	  strcat(boot_log, temp);
 8016f38:	1d3a      	adds	r2, r7, #4
 8016f3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016f3e:	4611      	mov	r1, r2
 8016f40:	4618      	mov	r0, r3
 8016f42:	f00b f8ac 	bl	802209e <strcat>
	  peripherals[1].state = PERIPH_STATE_INIT;
 8016f46:	4b5a      	ldr	r3, [pc, #360]	@ (80170b0 <main+0x330>)
 8016f48:	2201      	movs	r2, #1
 8016f4a:	771a      	strb	r2, [r3, #28]
 8016f4c:	e00e      	b.n	8016f6c <main+0x1ec>
  }else{
	  sprintf(temp, "[ ER ] MDMA Init Error!.\r\n");
 8016f4e:	1d3b      	adds	r3, r7, #4
 8016f50:	495c      	ldr	r1, [pc, #368]	@ (80170c4 <main+0x344>)
 8016f52:	4618      	mov	r0, r3
 8016f54:	f00b f80c 	bl	8021f70 <siprintf>
	  strcat(boot_log, temp);
 8016f58:	1d3a      	adds	r2, r7, #4
 8016f5a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016f5e:	4611      	mov	r1, r2
 8016f60:	4618      	mov	r0, r3
 8016f62:	f00b f89c 	bl	802209e <strcat>
	  peripherals[1].state = PERIPH_STATE_ERROR;
 8016f66:	4b52      	ldr	r3, [pc, #328]	@ (80170b0 <main+0x330>)
 8016f68:	2202      	movs	r2, #2
 8016f6a:	771a      	strb	r2, [r3, #28]
  }

  //--> DMA Init --> DMA Init --> DMA Init --> DMA Init --> DMA Init
  MX_DMA_Init();
 8016f6c:	f001 fa28 	bl	80183c0 <MX_DMA_Init>
  if(peripherals[2].errorCode == Sys_OK)
 8016f70:	4b4f      	ldr	r3, [pc, #316]	@ (80170b0 <main+0x330>)
 8016f72:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d10f      	bne.n	8016f9a <main+0x21a>
  {
	  sprintf(temp, "[ OK ] DMA Initialized.\r\n");
 8016f7a:	1d3b      	adds	r3, r7, #4
 8016f7c:	4952      	ldr	r1, [pc, #328]	@ (80170c8 <main+0x348>)
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f00a fff6 	bl	8021f70 <siprintf>
	  strcat(boot_log, temp);
 8016f84:	1d3a      	adds	r2, r7, #4
 8016f86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016f8a:	4611      	mov	r1, r2
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	f00b f886 	bl	802209e <strcat>
	  peripherals[2].state = PERIPH_STATE_INIT;
 8016f92:	4b47      	ldr	r3, [pc, #284]	@ (80170b0 <main+0x330>)
 8016f94:	2201      	movs	r2, #1
 8016f96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  //--> BDMA Init --> BDMA Init --> BDMA Init --> BDMA Init --> BDMA Init
  MX_BDMA_Init();
 8016f9a:	f001 f9d3 	bl	8018344 <MX_BDMA_Init>
  if(peripherals[3].errorCode == Sys_OK)
 8016f9e:	4b44      	ldr	r3, [pc, #272]	@ (80170b0 <main+0x330>)
 8016fa0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d10f      	bne.n	8016fc8 <main+0x248>
  {
	  sprintf(temp, "[ OK ] BDMA Initialized.\r\n");
 8016fa8:	1d3b      	adds	r3, r7, #4
 8016faa:	4948      	ldr	r1, [pc, #288]	@ (80170cc <main+0x34c>)
 8016fac:	4618      	mov	r0, r3
 8016fae:	f00a ffdf 	bl	8021f70 <siprintf>
      strcat(boot_log, temp);
 8016fb2:	1d3a      	adds	r2, r7, #4
 8016fb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016fb8:	4611      	mov	r1, r2
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f00b f86f 	bl	802209e <strcat>
	  peripherals[3].state = PERIPH_STATE_INIT;
 8016fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80170b0 <main+0x330>)
 8016fc2:	2201      	movs	r2, #1
 8016fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  }

  //--> USART1 Init --> USART1 Init--> USART1 Init--> USART1 Init--> USART1 Init
  MX_USART1_UART_Init();
 8016fc8:	f001 f814 	bl	8017ff4 <MX_USART1_UART_Init>
  if(peripherals[4].errorCode == Sys_OK)
 8016fcc:	4b38      	ldr	r3, [pc, #224]	@ (80170b0 <main+0x330>)
 8016fce:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d10f      	bne.n	8016ff6 <main+0x276>
  {
	  sprintf(temp, "[ OK ] USART1 Initialized, Baud Rate: 115200.\r\n");
 8016fd6:	1d3b      	adds	r3, r7, #4
 8016fd8:	493d      	ldr	r1, [pc, #244]	@ (80170d0 <main+0x350>)
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f00a ffc8 	bl	8021f70 <siprintf>
	  strcat(boot_log, temp);
 8016fe0:	1d3a      	adds	r2, r7, #4
 8016fe2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016fe6:	4611      	mov	r1, r2
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f00b f858 	bl	802209e <strcat>
	  peripherals[4].state = PERIPH_STATE_INIT;
 8016fee:	4b30      	ldr	r3, [pc, #192]	@ (80170b0 <main+0x330>)
 8016ff0:	2201      	movs	r2, #1
 8016ff2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  //--> USART2 Init --> USART2 Init--> USART2 Init--> USART2 Init--> USART2 Init
  MX_USART2_UART_Init();
 8016ff6:	f001 f8d1 	bl	801819c <MX_USART2_UART_Init>
  if(peripherals[5].errorCode == Sys_OK)
 8016ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80170b0 <main+0x330>)
 8016ffc:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8017000:	2b00      	cmp	r3, #0
 8017002:	d10f      	bne.n	8017024 <main+0x2a4>
  {
	  sprintf(temp, "[ OK ] USART2 Initialized, Baud Rate: 115200.\r\n");
 8017004:	1d3b      	adds	r3, r7, #4
 8017006:	4933      	ldr	r1, [pc, #204]	@ (80170d4 <main+0x354>)
 8017008:	4618      	mov	r0, r3
 801700a:	f00a ffb1 	bl	8021f70 <siprintf>
	  strcat(boot_log, temp);
 801700e:	1d3a      	adds	r2, r7, #4
 8017010:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8017014:	4611      	mov	r1, r2
 8017016:	4618      	mov	r0, r3
 8017018:	f00b f841 	bl	802209e <strcat>
	  peripherals[5].state = PERIPH_STATE_INIT;
 801701c:	4b24      	ldr	r3, [pc, #144]	@ (80170b0 <main+0x330>)
 801701e:	2201      	movs	r2, #1
 8017020:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  }

  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017024:	2300      	movs	r3, #0
 8017026:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 801702a:	e017      	b.n	801705c <main+0x2dc>
  {
      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 801702c:	bf00      	nop
 801702e:	482a      	ldr	r0, [pc, #168]	@ (80170d8 <main+0x358>)
 8017030:	f7ff fb29 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8017034:	4603      	mov	r3, r0
 8017036:	2b00      	cmp	r3, #0
 8017038:	d0f9      	beq.n	801702e <main+0x2ae>
      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 801703a:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801703e:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017042:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8017046:	4413      	add	r3, r2
 8017048:	781b      	ldrb	r3, [r3, #0]
 801704a:	4619      	mov	r1, r3
 801704c:	4822      	ldr	r0, [pc, #136]	@ (80170d8 <main+0x358>)
 801704e:	f7ff fb55 	bl	80166fc <LL_USART_TransmitData8>
  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017052:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8017056:	3301      	adds	r3, #1
 8017058:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 801705c:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017060:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017064:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8017068:	4413      	add	r3, r2
 801706a:	781b      	ldrb	r3, [r3, #0]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d1dd      	bne.n	801702c <main+0x2ac>
  }
  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 8017070:	bf00      	nop
 8017072:	4819      	ldr	r0, [pc, #100]	@ (80170d8 <main+0x358>)
 8017074:	f7ff faf4 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 8017078:	4603      	mov	r3, r0
 801707a:	2b00      	cmp	r3, #0
 801707c:	d0f9      	beq.n	8017072 <main+0x2f2>
//      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
//  }
//  while (!LL_USART_IsActiveFlag_TC(UART_USB));

  //--> I2C2 Init --> I2C2 Init --> I2C2 Init --> I2C2 Init --> I2C2 Init
  MX_I2C2_Init();
 801707e:	f000 fb45 	bl	801770c <MX_I2C2_Init>
  if(peripherals[6].errorCode == Sys_OK)
 8017082:	4b0b      	ldr	r3, [pc, #44]	@ (80170b0 <main+0x330>)
 8017084:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8017088:	2b00      	cmp	r3, #0
 801708a:	d156      	bne.n	801713a <main+0x3ba>
  {
	  sprintf(boot_log, "[ OK ] I2C2 -> RTC Initialized.\r\n");
 801708c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8017090:	4912      	ldr	r1, [pc, #72]	@ (80170dc <main+0x35c>)
 8017092:	4618      	mov	r0, r3
 8017094:	f00a ff6c 	bl	8021f70 <siprintf>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017098:	2300      	movs	r3, #0
 801709a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 801709e:	e037      	b.n	8017110 <main+0x390>
 80170a0:	58024400 	.word	0x58024400
 80170a4:	080258c0 	.word	0x080258c0
 80170a8:	080258f4 	.word	0x080258f4
 80170ac:	08025930 	.word	0x08025930
 80170b0:	240148e0 	.word	0x240148e0
 80170b4:	08025950 	.word	0x08025950
 80170b8:	58020c00 	.word	0x58020c00
 80170bc:	0802596c 	.word	0x0802596c
 80170c0:	08025990 	.word	0x08025990
 80170c4:	080259ac 	.word	0x080259ac
 80170c8:	080259c8 	.word	0x080259c8
 80170cc:	080259e4 	.word	0x080259e4
 80170d0:	08025a00 	.word	0x08025a00
 80170d4:	08025a30 	.word	0x08025a30
 80170d8:	40004400 	.word	0x40004400
 80170dc:	08025a60 	.word	0x08025a60
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 80170e0:	bf00      	nop
 80170e2:	48c1      	ldr	r0, [pc, #772]	@ (80173e8 <main+0x668>)
 80170e4:	f7ff facf 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80170e8:	4603      	mov	r3, r0
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d0f9      	beq.n	80170e2 <main+0x362>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 80170ee:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80170f2:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80170f6:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80170fa:	4413      	add	r3, r2
 80170fc:	781b      	ldrb	r3, [r3, #0]
 80170fe:	4619      	mov	r1, r3
 8017100:	48b9      	ldr	r0, [pc, #740]	@ (80173e8 <main+0x668>)
 8017102:	f7ff fafb 	bl	80166fc <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017106:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801710a:	3301      	adds	r3, #1
 801710c:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8017110:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017114:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017118:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801711c:	4413      	add	r3, r2
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d1dd      	bne.n	80170e0 <main+0x360>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 8017124:	bf00      	nop
 8017126:	48b0      	ldr	r0, [pc, #704]	@ (80173e8 <main+0x668>)
 8017128:	f7ff fa9a 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 801712c:	4603      	mov	r3, r0
 801712e:	2b00      	cmp	r3, #0
 8017130:	d0f9      	beq.n	8017126 <main+0x3a6>
//	  {
//	      while (!LL_USART_IsActiveFlag_TXE(UART_USB));
//	      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
	  peripherals[6].state = PERIPH_STATE_INIT;
 8017132:	4bae      	ldr	r3, [pc, #696]	@ (80173ec <main+0x66c>)
 8017134:	2201      	movs	r2, #1
 8017136:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  }

  //--> SDMMC1 Init --> SDMMC1 Init --> SDMMC1 Init --> SDMMC1 Init --> SDMMC1 Init
  MX_SDMMC1_MMC_Init();
 801713a:	f000 fb71 	bl	8017820 <MX_SDMMC1_MMC_Init>
  if(peripherals[7].errorCode == Sys_OK)
 801713e:	4bab      	ldr	r3, [pc, #684]	@ (80173ec <main+0x66c>)
 8017140:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8017144:	2b00      	cmp	r3, #0
 8017146:	d10a      	bne.n	801715e <main+0x3de>
  {
	  sprintf(boot_log, "[ OK ] SDMMC1 -> MainStorage Initialized.\r\n");
 8017148:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801714c:	49a8      	ldr	r1, [pc, #672]	@ (80173f0 <main+0x670>)
 801714e:	4618      	mov	r0, r3
 8017150:	f00a ff0e 	bl	8021f70 <siprintf>

	  peripherals[7].state = PERIPH_STATE_INIT;
 8017154:	4ba5      	ldr	r3, [pc, #660]	@ (80173ec <main+0x66c>)
 8017156:	2201      	movs	r2, #1
 8017158:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
 801715c:	e009      	b.n	8017172 <main+0x3f2>
  }else{
	  sprintf(boot_log, "[ ER ] SDMMC1 -> MainStorage Init Error!.\r\n");
 801715e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8017162:	49a4      	ldr	r1, [pc, #656]	@ (80173f4 <main+0x674>)
 8017164:	4618      	mov	r0, r3
 8017166:	f00a ff03 	bl	8021f70 <siprintf>
	  peripherals[7].state = PERIPH_STATE_ERROR;
 801716a:	4ba0      	ldr	r3, [pc, #640]	@ (80173ec <main+0x66c>)
 801716c:	2202      	movs	r2, #2
 801716e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
  }

  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017172:	2300      	movs	r3, #0
 8017174:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 8017178:	e017      	b.n	80171aa <main+0x42a>
  {
      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 801717a:	bf00      	nop
 801717c:	489a      	ldr	r0, [pc, #616]	@ (80173e8 <main+0x668>)
 801717e:	f7ff fa82 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8017182:	4603      	mov	r3, r0
 8017184:	2b00      	cmp	r3, #0
 8017186:	d0f9      	beq.n	801717c <main+0x3fc>
      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 8017188:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801718c:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017190:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8017194:	4413      	add	r3, r2
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	4619      	mov	r1, r3
 801719a:	4893      	ldr	r0, [pc, #588]	@ (80173e8 <main+0x668>)
 801719c:	f7ff faae 	bl	80166fc <LL_USART_TransmitData8>
  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80171a0:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80171a4:	3301      	adds	r3, #1
 80171a6:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 80171aa:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80171ae:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80171b2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80171b6:	4413      	add	r3, r2
 80171b8:	781b      	ldrb	r3, [r3, #0]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d1dd      	bne.n	801717a <main+0x3fa>
  }
  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 80171be:	bf00      	nop
 80171c0:	4889      	ldr	r0, [pc, #548]	@ (80173e8 <main+0x668>)
 80171c2:	f7ff fa4d 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 80171c6:	4603      	mov	r3, r0
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d0f9      	beq.n	80171c0 <main+0x440>
//      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
//  }
//  while (!LL_USART_IsActiveFlag_TC(UART_USB));

  //--> SPI4 Init --> SPI4 Init --> SPI4 Init --> SPI4 Init --> SPI4 Init
  MX_SPI4_Init();
 80171cc:	f000 fb50 	bl	8017870 <MX_SPI4_Init>
  if(peripherals[8].errorCode == Sys_OK)
 80171d0:	4b86      	ldr	r3, [pc, #536]	@ (80173ec <main+0x66c>)
 80171d2:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d136      	bne.n	8017248 <main+0x4c8>
  {
	  sprintf(boot_log, "[ OK ] SPI4 -> ExMemory Initialized.\r\n");
 80171da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80171de:	4986      	ldr	r1, [pc, #536]	@ (80173f8 <main+0x678>)
 80171e0:	4618      	mov	r0, r3
 80171e2:	f00a fec5 	bl	8021f70 <siprintf>
	  peripherals[8].state = PERIPH_STATE_INIT;
 80171e6:	4b81      	ldr	r3, [pc, #516]	@ (80173ec <main+0x66c>)
 80171e8:	2201      	movs	r2, #1
 80171ea:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80171ee:	2300      	movs	r3, #0
 80171f0:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80171f4:	e017      	b.n	8017226 <main+0x4a6>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 80171f6:	bf00      	nop
 80171f8:	487b      	ldr	r0, [pc, #492]	@ (80173e8 <main+0x668>)
 80171fa:	f7ff fa44 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80171fe:	4603      	mov	r3, r0
 8017200:	2b00      	cmp	r3, #0
 8017202:	d0f9      	beq.n	80171f8 <main+0x478>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 8017204:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017208:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 801720c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8017210:	4413      	add	r3, r2
 8017212:	781b      	ldrb	r3, [r3, #0]
 8017214:	4619      	mov	r1, r3
 8017216:	4874      	ldr	r0, [pc, #464]	@ (80173e8 <main+0x668>)
 8017218:	f7ff fa70 	bl	80166fc <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 801721c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8017220:	3301      	adds	r3, #1
 8017222:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8017226:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801722a:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 801722e:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8017232:	4413      	add	r3, r2
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d1dd      	bne.n	80171f6 <main+0x476>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 801723a:	bf00      	nop
 801723c:	486a      	ldr	r0, [pc, #424]	@ (80173e8 <main+0x668>)
 801723e:	f7ff fa0f 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 8017242:	4603      	mov	r3, r0
 8017244:	2b00      	cmp	r3, #0
 8017246:	d0f9      	beq.n	801723c <main+0x4bc>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> SPI5 Init --> SPI5 Init --> SPI5 Init --> SPI5 Init --> SPI5 Init
  MX_SPI5_Init();
 8017248:	f000 fbae 	bl	80179a8 <MX_SPI5_Init>
  if(peripherals[9].errorCode == Sys_OK)
 801724c:	4b67      	ldr	r3, [pc, #412]	@ (80173ec <main+0x66c>)
 801724e:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8017252:	2b00      	cmp	r3, #0
 8017254:	d136      	bne.n	80172c4 <main+0x544>
  {
	  sprintf(boot_log, "[ OK ] SPI5 -> Host Initialized.\r\n");
 8017256:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801725a:	4968      	ldr	r1, [pc, #416]	@ (80173fc <main+0x67c>)
 801725c:	4618      	mov	r0, r3
 801725e:	f00a fe87 	bl	8021f70 <siprintf>
	  peripherals[11].state = PERIPH_STATE_INIT;
 8017262:	4b62      	ldr	r3, [pc, #392]	@ (80173ec <main+0x66c>)
 8017264:	2201      	movs	r2, #1
 8017266:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 801726a:	2300      	movs	r3, #0
 801726c:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 8017270:	e017      	b.n	80172a2 <main+0x522>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 8017272:	bf00      	nop
 8017274:	485c      	ldr	r0, [pc, #368]	@ (80173e8 <main+0x668>)
 8017276:	f7ff fa06 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 801727a:	4603      	mov	r3, r0
 801727c:	2b00      	cmp	r3, #0
 801727e:	d0f9      	beq.n	8017274 <main+0x4f4>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 8017280:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017284:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017288:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801728c:	4413      	add	r3, r2
 801728e:	781b      	ldrb	r3, [r3, #0]
 8017290:	4619      	mov	r1, r3
 8017292:	4855      	ldr	r0, [pc, #340]	@ (80173e8 <main+0x668>)
 8017294:	f7ff fa32 	bl	80166fc <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017298:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801729c:	3301      	adds	r3, #1
 801729e:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 80172a2:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80172a6:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80172aa:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80172ae:	4413      	add	r3, r2
 80172b0:	781b      	ldrb	r3, [r3, #0]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d1dd      	bne.n	8017272 <main+0x4f2>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 80172b6:	bf00      	nop
 80172b8:	484b      	ldr	r0, [pc, #300]	@ (80173e8 <main+0x668>)
 80172ba:	f7ff f9d1 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 80172be:	4603      	mov	r3, r0
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d0f9      	beq.n	80172b8 <main+0x538>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> SPI6 Init --> SPI6 Init --> SPI6 Init --> SPI6 Init --> SPI6 Init
  MX_SPI6_Init();
 80172c4:	f000 fc40 	bl	8017b48 <MX_SPI6_Init>
  if(peripherals[10].errorCode == Sys_OK)
 80172c8:	4b48      	ldr	r3, [pc, #288]	@ (80173ec <main+0x66c>)
 80172ca:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d136      	bne.n	8017340 <main+0x5c0>
  {
	  sprintf(boot_log, "[ OK ] SPI6 -> EXP Initialized.\r\n");
 80172d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80172d6:	494a      	ldr	r1, [pc, #296]	@ (8017400 <main+0x680>)
 80172d8:	4618      	mov	r0, r3
 80172da:	f00a fe49 	bl	8021f70 <siprintf>
	  peripherals[10].state = PERIPH_STATE_INIT;
 80172de:	4b43      	ldr	r3, [pc, #268]	@ (80173ec <main+0x66c>)
 80172e0:	2201      	movs	r2, #1
 80172e2:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80172e6:	2300      	movs	r3, #0
 80172e8:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 80172ec:	e017      	b.n	801731e <main+0x59e>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 80172ee:	bf00      	nop
 80172f0:	483d      	ldr	r0, [pc, #244]	@ (80173e8 <main+0x668>)
 80172f2:	f7ff f9c8 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80172f6:	4603      	mov	r3, r0
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d0f9      	beq.n	80172f0 <main+0x570>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 80172fc:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017300:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017304:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8017308:	4413      	add	r3, r2
 801730a:	781b      	ldrb	r3, [r3, #0]
 801730c:	4619      	mov	r1, r3
 801730e:	4836      	ldr	r0, [pc, #216]	@ (80173e8 <main+0x668>)
 8017310:	f7ff f9f4 	bl	80166fc <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017314:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8017318:	3301      	adds	r3, #1
 801731a:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 801731e:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017322:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017326:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801732a:	4413      	add	r3, r2
 801732c:	781b      	ldrb	r3, [r3, #0]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d1dd      	bne.n	80172ee <main+0x56e>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 8017332:	bf00      	nop
 8017334:	482c      	ldr	r0, [pc, #176]	@ (80173e8 <main+0x668>)
 8017336:	f7ff f993 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 801733a:	4603      	mov	r3, r0
 801733c:	2b00      	cmp	r3, #0
 801733e:	d0f9      	beq.n	8017334 <main+0x5b4>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> TIM1 Init --> TIM1 Init --> TIM1 Init --> TIM1 Init --> TIM1 Init
  MX_TIM1_Init();
 8017340:	f000 fd2e 	bl	8017da0 <MX_TIM1_Init>
  if(peripherals[11].errorCode == Sys_OK)
 8017344:	4b29      	ldr	r3, [pc, #164]	@ (80173ec <main+0x66c>)
 8017346:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 801734a:	2b00      	cmp	r3, #0
 801734c:	d136      	bne.n	80173bc <main+0x63c>
  {
	  sprintf(boot_log, "[ OK ] Timer-Clock Ready.\r\n");
 801734e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8017352:	492c      	ldr	r1, [pc, #176]	@ (8017404 <main+0x684>)
 8017354:	4618      	mov	r0, r3
 8017356:	f00a fe0b 	bl	8021f70 <siprintf>
	  peripherals[13].state = PERIPH_STATE_INIT;
 801735a:	4b24      	ldr	r3, [pc, #144]	@ (80173ec <main+0x66c>)
 801735c:	2201      	movs	r2, #1
 801735e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017362:	2300      	movs	r3, #0
 8017364:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 8017368:	e017      	b.n	801739a <main+0x61a>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 801736a:	bf00      	nop
 801736c:	481e      	ldr	r0, [pc, #120]	@ (80173e8 <main+0x668>)
 801736e:	f7ff f98a 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8017372:	4603      	mov	r3, r0
 8017374:	2b00      	cmp	r3, #0
 8017376:	d0f9      	beq.n	801736c <main+0x5ec>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 8017378:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801737c:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017380:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8017384:	4413      	add	r3, r2
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	4619      	mov	r1, r3
 801738a:	4817      	ldr	r0, [pc, #92]	@ (80173e8 <main+0x668>)
 801738c:	f7ff f9b6 	bl	80166fc <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017390:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8017394:	3301      	adds	r3, #1
 8017396:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 801739a:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801739e:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80173a2:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80173a6:	4413      	add	r3, r2
 80173a8:	781b      	ldrb	r3, [r3, #0]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d1dd      	bne.n	801736a <main+0x5ea>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 80173ae:	bf00      	nop
 80173b0:	480d      	ldr	r0, [pc, #52]	@ (80173e8 <main+0x668>)
 80173b2:	f7ff f955 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 80173b6:	4603      	mov	r3, r0
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d0f9      	beq.n	80173b0 <main+0x630>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> UART7 Init --> UART7 Init --> UART7 Init --> UART7 Init --> UART7 Init
  MX_UART7_Init();
 80173bc:	f000 fd44 	bl	8017e48 <MX_UART7_Init>
  if(peripherals[12].errorCode == Sys_OK)
 80173c0:	4b0a      	ldr	r3, [pc, #40]	@ (80173ec <main+0x66c>)
 80173c2:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d149      	bne.n	801745e <main+0x6de>
  {
	  sprintf(boot_log, "[ OK ] UART7 Initialized, Baud Rate: 115200.\r\n");
 80173ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80173ce:	490e      	ldr	r1, [pc, #56]	@ (8017408 <main+0x688>)
 80173d0:	4618      	mov	r0, r3
 80173d2:	f00a fdcd 	bl	8021f70 <siprintf>
	  peripherals[12].state = PERIPH_STATE_INIT;
 80173d6:	4b05      	ldr	r3, [pc, #20]	@ (80173ec <main+0x66c>)
 80173d8:	2201      	movs	r2, #1
 80173da:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80173de:	2300      	movs	r3, #0
 80173e0:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 80173e4:	e02a      	b.n	801743c <main+0x6bc>
 80173e6:	bf00      	nop
 80173e8:	40004400 	.word	0x40004400
 80173ec:	240148e0 	.word	0x240148e0
 80173f0:	08025a84 	.word	0x08025a84
 80173f4:	08025ab0 	.word	0x08025ab0
 80173f8:	08025adc 	.word	0x08025adc
 80173fc:	08025b04 	.word	0x08025b04
 8017400:	08025b28 	.word	0x08025b28
 8017404:	08025b4c 	.word	0x08025b4c
 8017408:	08025b68 	.word	0x08025b68
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 801740c:	bf00      	nop
 801740e:	487c      	ldr	r0, [pc, #496]	@ (8017600 <main+0x880>)
 8017410:	f7ff f939 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8017414:	4603      	mov	r3, r0
 8017416:	2b00      	cmp	r3, #0
 8017418:	d0f9      	beq.n	801740e <main+0x68e>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 801741a:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801741e:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017422:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8017426:	4413      	add	r3, r2
 8017428:	781b      	ldrb	r3, [r3, #0]
 801742a:	4619      	mov	r1, r3
 801742c:	4874      	ldr	r0, [pc, #464]	@ (8017600 <main+0x880>)
 801742e:	f7ff f965 	bl	80166fc <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017432:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8017436:	3301      	adds	r3, #1
 8017438:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 801743c:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017440:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017444:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8017448:	4413      	add	r3, r2
 801744a:	781b      	ldrb	r3, [r3, #0]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d1dd      	bne.n	801740c <main+0x68c>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 8017450:	bf00      	nop
 8017452:	486b      	ldr	r0, [pc, #428]	@ (8017600 <main+0x880>)
 8017454:	f7ff f904 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 8017458:	4603      	mov	r3, r0
 801745a:	2b00      	cmp	r3, #0
 801745c:	d0f9      	beq.n	8017452 <main+0x6d2>
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

#endif

  if (Mgmt_HardwareSystemPreparing() != E_OK){
 801745e:	f7e9 f93d 	bl	80006dc <Mgmt_HardwareSystemPreparing>
 8017462:	4603      	mov	r3, r0
 8017464:	2b00      	cmp	r3, #0
 8017466:	d066      	beq.n	8017536 <main+0x7b6>
	  system_status.init_state = INIT_STATE_FAILED;
 8017468:	4b66      	ldr	r3, [pc, #408]	@ (8017604 <main+0x884>)
 801746a:	2207      	movs	r2, #7
 801746c:	701a      	strb	r2, [r3, #0]
      system_status.program_state = PROGRAM_STATE_ERROR;
 801746e:	4b65      	ldr	r3, [pc, #404]	@ (8017604 <main+0x884>)
 8017470:	2202      	movs	r2, #2
 8017472:	705a      	strb	r2, [r3, #1]
	  sprintf(boot_log, "[ ER ] System Hardware Preparing Fail!...\r\n[ ER ] Something wrong in Hardware Start-up\r\n");
 8017474:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8017478:	4963      	ldr	r1, [pc, #396]	@ (8017608 <main+0x888>)
 801747a:	4618      	mov	r0, r3
 801747c:	f00a fd78 	bl	8021f70 <siprintf>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017480:	2300      	movs	r3, #0
 8017482:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 8017486:	e017      	b.n	80174b8 <main+0x738>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 8017488:	bf00      	nop
 801748a:	485d      	ldr	r0, [pc, #372]	@ (8017600 <main+0x880>)
 801748c:	f7ff f8fb 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8017490:	4603      	mov	r3, r0
 8017492:	2b00      	cmp	r3, #0
 8017494:	d0f9      	beq.n	801748a <main+0x70a>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 8017496:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801749a:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 801749e:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80174a2:	4413      	add	r3, r2
 80174a4:	781b      	ldrb	r3, [r3, #0]
 80174a6:	4619      	mov	r1, r3
 80174a8:	4855      	ldr	r0, [pc, #340]	@ (8017600 <main+0x880>)
 80174aa:	f7ff f927 	bl	80166fc <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80174ae:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80174b2:	3301      	adds	r3, #1
 80174b4:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 80174b8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80174bc:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80174c0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80174c4:	4413      	add	r3, r2
 80174c6:	781b      	ldrb	r3, [r3, #0]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d1dd      	bne.n	8017488 <main+0x708>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 80174cc:	bf00      	nop
 80174ce:	484c      	ldr	r0, [pc, #304]	@ (8017600 <main+0x880>)
 80174d0:	f7ff f8c6 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 80174d4:	4603      	mov	r3, r0
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d0f9      	beq.n	80174ce <main+0x74e>

	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80174da:	2300      	movs	r3, #0
 80174dc:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 80174e0:	e017      	b.n	8017512 <main+0x792>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_USB));
 80174e2:	bf00      	nop
 80174e4:	4849      	ldr	r0, [pc, #292]	@ (801760c <main+0x88c>)
 80174e6:	f7ff f8ce 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80174ea:	4603      	mov	r3, r0
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d0f9      	beq.n	80174e4 <main+0x764>
	      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
 80174f0:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80174f4:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80174f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80174fc:	4413      	add	r3, r2
 80174fe:	781b      	ldrb	r3, [r3, #0]
 8017500:	4619      	mov	r1, r3
 8017502:	4842      	ldr	r0, [pc, #264]	@ (801760c <main+0x88c>)
 8017504:	f7ff f8fa 	bl	80166fc <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017508:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801750c:	3301      	adds	r3, #1
 801750e:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8017512:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017516:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 801751a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801751e:	4413      	add	r3, r2
 8017520:	781b      	ldrb	r3, [r3, #0]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d1dd      	bne.n	80174e2 <main+0x762>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
 8017526:	bf00      	nop
 8017528:	4838      	ldr	r0, [pc, #224]	@ (801760c <main+0x88c>)
 801752a:	f7ff f899 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 801752e:	4603      	mov	r3, r0
 8017530:	2b00      	cmp	r3, #0
 8017532:	d0f9      	beq.n	8017528 <main+0x7a8>
 8017534:	e05f      	b.n	80175f6 <main+0x876>
  }else{
	  sprintf(boot_log, "[ OK ] System Hardware Preparing Done...\r\n");
 8017536:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801753a:	4935      	ldr	r1, [pc, #212]	@ (8017610 <main+0x890>)
 801753c:	4618      	mov	r0, r3
 801753e:	f00a fd17 	bl	8021f70 <siprintf>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017542:	2300      	movs	r3, #0
 8017544:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 8017548:	e017      	b.n	801757a <main+0x7fa>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 801754a:	bf00      	nop
 801754c:	482c      	ldr	r0, [pc, #176]	@ (8017600 <main+0x880>)
 801754e:	f7ff f89a 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8017552:	4603      	mov	r3, r0
 8017554:	2b00      	cmp	r3, #0
 8017556:	d0f9      	beq.n	801754c <main+0x7cc>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 8017558:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801755c:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017560:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8017564:	4413      	add	r3, r2
 8017566:	781b      	ldrb	r3, [r3, #0]
 8017568:	4619      	mov	r1, r3
 801756a:	4825      	ldr	r0, [pc, #148]	@ (8017600 <main+0x880>)
 801756c:	f7ff f8c6 	bl	80166fc <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017570:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8017574:	3301      	adds	r3, #1
 8017576:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 801757a:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801757e:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017582:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8017586:	4413      	add	r3, r2
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d1dd      	bne.n	801754a <main+0x7ca>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 801758e:	bf00      	nop
 8017590:	481b      	ldr	r0, [pc, #108]	@ (8017600 <main+0x880>)
 8017592:	f7ff f865 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 8017596:	4603      	mov	r3, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	d0f9      	beq.n	8017590 <main+0x810>

	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 801759c:	2300      	movs	r3, #0
 801759e:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80175a2:	e017      	b.n	80175d4 <main+0x854>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_USB));
 80175a4:	bf00      	nop
 80175a6:	4819      	ldr	r0, [pc, #100]	@ (801760c <main+0x88c>)
 80175a8:	f7ff f86d 	bl	8016686 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80175ac:	4603      	mov	r3, r0
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d0f9      	beq.n	80175a6 <main+0x826>
	      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
 80175b2:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80175b6:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80175ba:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80175be:	4413      	add	r3, r2
 80175c0:	781b      	ldrb	r3, [r3, #0]
 80175c2:	4619      	mov	r1, r3
 80175c4:	4811      	ldr	r0, [pc, #68]	@ (801760c <main+0x88c>)
 80175c6:	f7ff f899 	bl	80166fc <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80175ca:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80175ce:	3301      	adds	r3, #1
 80175d0:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80175d4:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80175d8:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80175dc:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80175e0:	4413      	add	r3, r2
 80175e2:	781b      	ldrb	r3, [r3, #0]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d1dd      	bne.n	80175a4 <main+0x824>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
 80175e8:	bf00      	nop
 80175ea:	4808      	ldr	r0, [pc, #32]	@ (801760c <main+0x88c>)
 80175ec:	f7ff f838 	bl	8016660 <LL_USART_IsActiveFlag_TC>
 80175f0:	4603      	mov	r3, r0
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d0f9      	beq.n	80175ea <main+0x86a>
  }

  Mgmt_SystemStart();
 80175f6:	f7e9 f8b9 	bl	800076c <Mgmt_SystemStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80175fa:	bf00      	nop
 80175fc:	e7fd      	b.n	80175fa <main+0x87a>
 80175fe:	bf00      	nop
 8017600:	40004400 	.word	0x40004400
 8017604:	2405a578 	.word	0x2405a578
 8017608:	08025b98 	.word	0x08025b98
 801760c:	40011000 	.word	0x40011000
 8017610:	08025bf4 	.word	0x08025bf4

08017614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b09c      	sub	sp, #112	@ 0x70
 8017618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801761a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801761e:	224c      	movs	r2, #76	@ 0x4c
 8017620:	2100      	movs	r1, #0
 8017622:	4618      	mov	r0, r3
 8017624:	f00a fd33 	bl	802208e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017628:	1d3b      	adds	r3, r7, #4
 801762a:	2220      	movs	r2, #32
 801762c:	2100      	movs	r1, #0
 801762e:	4618      	mov	r0, r3
 8017630:	f00a fd2d 	bl	802208e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8017634:	2002      	movs	r0, #2
 8017636:	f004 f9e1 	bl	801b9fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801763a:	2300      	movs	r3, #0
 801763c:	603b      	str	r3, [r7, #0]
 801763e:	4b31      	ldr	r3, [pc, #196]	@ (8017704 <SystemClock_Config+0xf0>)
 8017640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017642:	4a30      	ldr	r2, [pc, #192]	@ (8017704 <SystemClock_Config+0xf0>)
 8017644:	f023 0301 	bic.w	r3, r3, #1
 8017648:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801764a:	4b2e      	ldr	r3, [pc, #184]	@ (8017704 <SystemClock_Config+0xf0>)
 801764c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801764e:	f003 0301 	and.w	r3, r3, #1
 8017652:	603b      	str	r3, [r7, #0]
 8017654:	4b2c      	ldr	r3, [pc, #176]	@ (8017708 <SystemClock_Config+0xf4>)
 8017656:	699b      	ldr	r3, [r3, #24]
 8017658:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 801765c:	4a2a      	ldr	r2, [pc, #168]	@ (8017708 <SystemClock_Config+0xf4>)
 801765e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017662:	6193      	str	r3, [r2, #24]
 8017664:	4b28      	ldr	r3, [pc, #160]	@ (8017708 <SystemClock_Config+0xf4>)
 8017666:	699b      	ldr	r3, [r3, #24]
 8017668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801766c:	603b      	str	r3, [r7, #0]
 801766e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8017670:	bf00      	nop
 8017672:	4b25      	ldr	r3, [pc, #148]	@ (8017708 <SystemClock_Config+0xf4>)
 8017674:	699b      	ldr	r3, [r3, #24]
 8017676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801767a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801767e:	d1f8      	bne.n	8017672 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8017680:	2301      	movs	r3, #1
 8017682:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8017684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017688:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801768a:	2302      	movs	r3, #2
 801768c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801768e:	2302      	movs	r3, #2
 8017690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8017692:	2305      	movs	r3, #5
 8017694:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8017696:	2360      	movs	r3, #96	@ 0x60
 8017698:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 801769a:	2302      	movs	r3, #2
 801769c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 801769e:	2308      	movs	r3, #8
 80176a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80176a2:	2302      	movs	r3, #2
 80176a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80176a6:	2308      	movs	r3, #8
 80176a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80176aa:	2300      	movs	r3, #0
 80176ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80176ae:	2300      	movs	r3, #0
 80176b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80176b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80176b6:	4618      	mov	r0, r3
 80176b8:	f004 f9fa 	bl	801bab0 <HAL_RCC_OscConfig>
 80176bc:	4603      	mov	r3, r0
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d001      	beq.n	80176c6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80176c2:	f001 f87f 	bl	80187c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80176c6:	233f      	movs	r3, #63	@ 0x3f
 80176c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80176ca:	2303      	movs	r3, #3
 80176cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80176ce:	2300      	movs	r3, #0
 80176d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80176d2:	2308      	movs	r3, #8
 80176d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80176d6:	2340      	movs	r3, #64	@ 0x40
 80176d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80176da:	2340      	movs	r3, #64	@ 0x40
 80176dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80176de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80176e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80176e4:	2340      	movs	r3, #64	@ 0x40
 80176e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80176e8:	1d3b      	adds	r3, r7, #4
 80176ea:	2102      	movs	r1, #2
 80176ec:	4618      	mov	r0, r3
 80176ee:	f004 fe39 	bl	801c364 <HAL_RCC_ClockConfig>
 80176f2:	4603      	mov	r3, r0
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d001      	beq.n	80176fc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80176f8:	f001 f864 	bl	80187c4 <Error_Handler>
  }
}
 80176fc:	bf00      	nop
 80176fe:	3770      	adds	r7, #112	@ 0x70
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}
 8017704:	58000400 	.word	0x58000400
 8017708:	58024800 	.word	0x58024800

0801770c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b0be      	sub	sp, #248	@ 0xf8
 8017710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8017712:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8017716:	2200      	movs	r2, #0
 8017718:	601a      	str	r2, [r3, #0]
 801771a:	605a      	str	r2, [r3, #4]
 801771c:	609a      	str	r2, [r3, #8]
 801771e:	60da      	str	r2, [r3, #12]
 8017720:	611a      	str	r2, [r3, #16]
 8017722:	615a      	str	r2, [r3, #20]
 8017724:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017726:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 801772a:	2200      	movs	r2, #0
 801772c:	601a      	str	r2, [r3, #0]
 801772e:	605a      	str	r2, [r3, #4]
 8017730:	609a      	str	r2, [r3, #8]
 8017732:	60da      	str	r2, [r3, #12]
 8017734:	611a      	str	r2, [r3, #16]
 8017736:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017738:	463b      	mov	r3, r7
 801773a:	22c0      	movs	r2, #192	@ 0xc0
 801773c:	2100      	movs	r1, #0
 801773e:	4618      	mov	r0, r3
 8017740:	f00a fca5 	bl	802208e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8017744:	f04f 0208 	mov.w	r2, #8
 8017748:	f04f 0300 	mov.w	r3, #0
 801774c:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8017750:	2300      	movs	r3, #0
 8017752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017756:	463b      	mov	r3, r7
 8017758:	4618      	mov	r0, r3
 801775a:	f005 f9bb 	bl	801cad4 <HAL_RCCEx_PeriphCLKConfig>
 801775e:	4603      	mov	r3, r0
 8017760:	2b00      	cmp	r3, #0
 8017762:	d001      	beq.n	8017768 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8017764:	f001 f82e 	bl	80187c4 <Error_Handler>
  }

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8017768:	2002      	movs	r0, #2
 801776a:	f7fe fff3 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 801776e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8017772:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8017776:	2302      	movs	r3, #2
 8017778:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 801777c:	2300      	movs	r3, #0
 801777e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8017782:	2301      	movs	r3, #1
 8017784:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8017788:	2300      	movs	r3, #0
 801778a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 801778e:	2304      	movs	r3, #4
 8017790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017794:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8017798:	4619      	mov	r1, r3
 801779a:	481d      	ldr	r0, [pc, #116]	@ (8017810 <MX_I2C2_Init+0x104>)
 801779c:	f008 fa3a 	bl	801fc14 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80177a0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80177a4:	f7fe fff2 	bl	801678c <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C2);
 80177a8:	481a      	ldr	r0, [pc, #104]	@ (8017814 <MX_I2C2_Init+0x108>)
 80177aa:	f7fe fdd3 	bl	8016354 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80177ae:	2200      	movs	r2, #0
 80177b0:	2100      	movs	r1, #0
 80177b2:	4818      	ldr	r0, [pc, #96]	@ (8017814 <MX_I2C2_Init+0x108>)
 80177b4:	f7fe fda6 	bl	8016304 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C2);
 80177b8:	4816      	ldr	r0, [pc, #88]	@ (8017814 <MX_I2C2_Init+0x108>)
 80177ba:	f7fe fdbb 	bl	8016334 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80177be:	4815      	ldr	r0, [pc, #84]	@ (8017814 <MX_I2C2_Init+0x108>)
 80177c0:	f7fe fd8f 	bl	80162e2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 80177c4:	4813      	ldr	r0, [pc, #76]	@ (8017814 <MX_I2C2_Init+0x108>)
 80177c6:	f7fe fd7c 	bl	80162c2 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80177ca:	2300      	movs	r3, #0
 80177cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  I2C_InitStruct.Timing = 0x00501E6C;
 80177d0:	4b11      	ldr	r3, [pc, #68]	@ (8017818 <MX_I2C2_Init+0x10c>)
 80177d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80177d6:	2300      	movs	r3, #0
 80177d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  I2C_InitStruct.DigitalFilter = 0;
 80177dc:	2300      	movs	r3, #0
 80177de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  I2C_InitStruct.OwnAddress1 = 0;
 80177e2:	2300      	movs	r3, #0
 80177e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80177e8:	2300      	movs	r3, #0
 80177ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80177ee:	2300      	movs	r3, #0
 80177f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 80177f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80177f8:	4619      	mov	r1, r3
 80177fa:	4806      	ldr	r0, [pc, #24]	@ (8017814 <MX_I2C2_Init+0x108>)
 80177fc:	f008 fb1c 	bl	801fe38 <LL_I2C_Init>
  /* USER CODE BEGIN I2C2_Init 2 */
  peripherals[7].errorCode = Sys_OK;
 8017800:	4b06      	ldr	r3, [pc, #24]	@ (801781c <MX_I2C2_Init+0x110>)
 8017802:	2200      	movs	r2, #0
 8017804:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
  /* USER CODE END I2C2_Init 2 */

}
 8017808:	bf00      	nop
 801780a:	37f8      	adds	r7, #248	@ 0xf8
 801780c:	46bd      	mov	sp, r7
 801780e:	bd80      	pop	{r7, pc}
 8017810:	58020400 	.word	0x58020400
 8017814:	40005800 	.word	0x40005800
 8017818:	00501e6c 	.word	0x00501e6c
 801781c:	240148e0 	.word	0x240148e0

08017820 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8017820:	b580      	push	{r7, lr}
 8017822:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8017824:	4b0f      	ldr	r3, [pc, #60]	@ (8017864 <MX_SDMMC1_MMC_Init+0x44>)
 8017826:	4a10      	ldr	r2, [pc, #64]	@ (8017868 <MX_SDMMC1_MMC_Init+0x48>)
 8017828:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801782a:	4b0e      	ldr	r3, [pc, #56]	@ (8017864 <MX_SDMMC1_MMC_Init+0x44>)
 801782c:	2200      	movs	r2, #0
 801782e:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8017830:	4b0c      	ldr	r3, [pc, #48]	@ (8017864 <MX_SDMMC1_MMC_Init+0x44>)
 8017832:	2200      	movs	r2, #0
 8017834:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8017836:	4b0b      	ldr	r3, [pc, #44]	@ (8017864 <MX_SDMMC1_MMC_Init+0x44>)
 8017838:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801783c:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801783e:	4b09      	ldr	r3, [pc, #36]	@ (8017864 <MX_SDMMC1_MMC_Init+0x44>)
 8017840:	2200      	movs	r2, #0
 8017842:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 4;
 8017844:	4b07      	ldr	r3, [pc, #28]	@ (8017864 <MX_SDMMC1_MMC_Init+0x44>)
 8017846:	2204      	movs	r2, #4
 8017848:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 801784a:	4806      	ldr	r0, [pc, #24]	@ (8017864 <MX_SDMMC1_MMC_Init+0x44>)
 801784c:	f002 fd12 	bl	801a274 <HAL_MMC_Init>
 8017850:	4603      	mov	r3, r0
 8017852:	2b00      	cmp	r3, #0
 8017854:	d104      	bne.n	8017860 <MX_SDMMC1_MMC_Init+0x40>
  {
    return;
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */
  peripherals[8].errorCode = Sys_OK;
 8017856:	4b05      	ldr	r3, [pc, #20]	@ (801786c <MX_SDMMC1_MMC_Init+0x4c>)
 8017858:	2200      	movs	r2, #0
 801785a:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 801785e:	e000      	b.n	8017862 <MX_SDMMC1_MMC_Init+0x42>
    return;
 8017860:	bf00      	nop
  /* USER CODE END SDMMC1_Init 2 */

}
 8017862:	bd80      	pop	{r7, pc}
 8017864:	2405a57c 	.word	0x2405a57c
 8017868:	52007000 	.word	0x52007000
 801786c:	240148e0 	.word	0x240148e0

08017870 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b0c0      	sub	sp, #256	@ 0x100
 8017874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 0 */

  /* USER CODE END SPI4_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8017876:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 801787a:	2228      	movs	r2, #40	@ 0x28
 801787c:	2100      	movs	r1, #0
 801787e:	4618      	mov	r0, r3
 8017880:	f00a fc05 	bl	802208e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017884:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017888:	2200      	movs	r2, #0
 801788a:	601a      	str	r2, [r3, #0]
 801788c:	605a      	str	r2, [r3, #4]
 801788e:	609a      	str	r2, [r3, #8]
 8017890:	60da      	str	r2, [r3, #12]
 8017892:	611a      	str	r2, [r3, #16]
 8017894:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017896:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801789a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801789e:	4618      	mov	r0, r3
 80178a0:	23c0      	movs	r3, #192	@ 0xc0
 80178a2:	461a      	mov	r2, r3
 80178a4:	2100      	movs	r1, #0
 80178a6:	f00a fbf2 	bl	802208e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80178aa:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80178ae:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 80178b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80178b6:	f04f 0300 	mov.w	r3, #0
 80178ba:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80178be:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80178c2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80178c6:	2200      	movs	r2, #0
 80178c8:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80178ca:	463b      	mov	r3, r7
 80178cc:	4618      	mov	r0, r3
 80178ce:	f005 f901 	bl	801cad4 <HAL_RCCEx_PeriphCLKConfig>
 80178d2:	4603      	mov	r3, r0
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d001      	beq.n	80178dc <MX_SPI4_Init+0x6c>
  {
    Error_Handler();
 80178d8:	f000 ff74 	bl	80187c4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 80178dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80178e0:	f7fe ff70 	bl	80167c4 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 80178e4:	2010      	movs	r0, #16
 80178e6:	f7fe ff35 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  /**SPI4 GPIO Configuration
  PE2   ------> SPI4_SCK
  PE5   ------> SPI4_MISO
  PE6   ------> SPI4_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 80178ea:	2364      	movs	r3, #100	@ 0x64
 80178ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80178f0:	2302      	movs	r3, #2
 80178f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80178f6:	2300      	movs	r3, #0
 80178f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80178fc:	2300      	movs	r3, #0
 80178fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8017902:	2300      	movs	r3, #0
 8017904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8017908:	2305      	movs	r3, #5
 801790a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801790e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017912:	4619      	mov	r1, r3
 8017914:	4821      	ldr	r0, [pc, #132]	@ (801799c <MX_SPI4_Init+0x12c>)
 8017916:	f008 f97d 	bl	801fc14 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 801791a:	2300      	movs	r3, #0
 801791c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8017920:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8017924:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8017928:	2307      	movs	r3, #7
 801792a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 801792e:	2300      	movs	r3, #0
 8017930:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8017934:	2300      	movs	r3, #0
 8017936:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 801793a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 801793e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8017942:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8017946:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 801794a:	2300      	movs	r3, #0
 801794c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8017950:	2300      	movs	r3, #0
 8017952:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  SPI_InitStruct.CRCPoly = 0x0;
 8017956:	2300      	movs	r3, #0
 8017958:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  LL_SPI_Init(SPI4, &SPI_InitStruct);
 801795c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017960:	4619      	mov	r1, r3
 8017962:	480f      	ldr	r0, [pc, #60]	@ (80179a0 <MX_SPI4_Init+0x130>)
 8017964:	f009 fe3a 	bl	80215dc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 8017968:	2100      	movs	r1, #0
 801796a:	480d      	ldr	r0, [pc, #52]	@ (80179a0 <MX_SPI4_Init+0x130>)
 801796c:	f7fe fd22 	bl	80163b4 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI4, LL_SPI_FIFO_TH_01DATA);
 8017970:	2100      	movs	r1, #0
 8017972:	480b      	ldr	r0, [pc, #44]	@ (80179a0 <MX_SPI4_Init+0x130>)
 8017974:	f7fe fd31 	bl	80163da <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI4);
 8017978:	4809      	ldr	r0, [pc, #36]	@ (80179a0 <MX_SPI4_Init+0x130>)
 801797a:	f7fe fd41 	bl	8016400 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI4_Init 2 */
  LL_SPI_Enable(SPI4);
 801797e:	4808      	ldr	r0, [pc, #32]	@ (80179a0 <MX_SPI4_Init+0x130>)
 8017980:	f7fe fcf8 	bl	8016374 <LL_SPI_Enable>
  LL_SPI_StartMasterTransfer(SPI4);
 8017984:	4806      	ldr	r0, [pc, #24]	@ (80179a0 <MX_SPI4_Init+0x130>)
 8017986:	f7fe fd05 	bl	8016394 <LL_SPI_StartMasterTransfer>
  peripherals[10].errorCode = Sys_OK;
 801798a:	4b06      	ldr	r3, [pc, #24]	@ (80179a4 <MX_SPI4_Init+0x134>)
 801798c:	2200      	movs	r2, #0
 801798e:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  /* USER CODE END SPI4_Init 2 */

}
 8017992:	bf00      	nop
 8017994:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}
 801799c:	58021000 	.word	0x58021000
 80179a0:	40013400 	.word	0x40013400
 80179a4:	240148e0 	.word	0x240148e0

080179a8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b0c0      	sub	sp, #256	@ 0x100
 80179ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 0 */

  /* USER CODE END SPI5_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80179ae:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80179b2:	2228      	movs	r2, #40	@ 0x28
 80179b4:	2100      	movs	r1, #0
 80179b6:	4618      	mov	r0, r3
 80179b8:	f00a fb69 	bl	802208e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80179bc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80179c0:	2200      	movs	r2, #0
 80179c2:	601a      	str	r2, [r3, #0]
 80179c4:	605a      	str	r2, [r3, #4]
 80179c6:	609a      	str	r2, [r3, #8]
 80179c8:	60da      	str	r2, [r3, #12]
 80179ca:	611a      	str	r2, [r3, #16]
 80179cc:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80179ce:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80179d2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80179d6:	4618      	mov	r0, r3
 80179d8:	23c0      	movs	r3, #192	@ 0xc0
 80179da:	461a      	mov	r2, r3
 80179dc:	2100      	movs	r1, #0
 80179de:	f00a fb56 	bl	802208e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80179e2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80179e6:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 80179ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80179ee:	f04f 0300 	mov.w	r3, #0
 80179f2:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80179f6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80179fa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80179fe:	2200      	movs	r2, #0
 8017a00:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017a02:	463b      	mov	r3, r7
 8017a04:	4618      	mov	r0, r3
 8017a06:	f005 f865 	bl	801cad4 <HAL_RCCEx_PeriphCLKConfig>
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d001      	beq.n	8017a14 <MX_SPI5_Init+0x6c>
  {
    Error_Handler();
 8017a10:	f000 fed8 	bl	80187c4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 8017a14:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8017a18:	f7fe fed4 	bl	80167c4 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 8017a1c:	2020      	movs	r0, #32
 8017a1e:	f7fe fe99 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  PF6   ------> SPI5_NSS
  PF7   ------> SPI5_SCK
  PF8   ------> SPI5_MISO
  PF9   ------> SPI5_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8017a22:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8017a26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8017a2a:	2302      	movs	r3, #2
 8017a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8017a30:	2300      	movs	r3, #0
 8017a32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8017a36:	2300      	movs	r3, #0
 8017a38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8017a42:	2305      	movs	r3, #5
 8017a44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8017a48:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017a4c:	4619      	mov	r1, r3
 8017a4e:	483a      	ldr	r0, [pc, #232]	@ (8017b38 <MX_SPI5_Init+0x190>)
 8017a50:	f008 f8e0 	bl	801fc14 <LL_GPIO_Init>

  /* SPI5 DMA Init */

  /* SPI5_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_7, LL_DMAMUX1_REQ_SPI5_TX);
 8017a54:	2256      	movs	r2, #86	@ 0x56
 8017a56:	2107      	movs	r1, #7
 8017a58:	4838      	ldr	r0, [pc, #224]	@ (8017b3c <MX_SPI5_Init+0x194>)
 8017a5a:	f7fe fff5 	bl	8016a48 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8017a5e:	2240      	movs	r2, #64	@ 0x40
 8017a60:	2107      	movs	r1, #7
 8017a62:	4836      	ldr	r0, [pc, #216]	@ (8017b3c <MX_SPI5_Init+0x194>)
 8017a64:	f7fe fee6 	bl	8016834 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
 8017a68:	2200      	movs	r2, #0
 8017a6a:	2107      	movs	r1, #7
 8017a6c:	4833      	ldr	r0, [pc, #204]	@ (8017b3c <MX_SPI5_Init+0x194>)
 8017a6e:	f7fe ffc5 	bl	80169fc <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_7, LL_DMA_MODE_NORMAL);
 8017a72:	2200      	movs	r2, #0
 8017a74:	2107      	movs	r1, #7
 8017a76:	4831      	ldr	r0, [pc, #196]	@ (8017b3c <MX_SPI5_Init+0x194>)
 8017a78:	f7fe ff02 	bl	8016880 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	2107      	movs	r1, #7
 8017a80:	482e      	ldr	r0, [pc, #184]	@ (8017b3c <MX_SPI5_Init+0x194>)
 8017a82:	f7fe ff23 	bl	80168cc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 8017a86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017a8a:	2107      	movs	r1, #7
 8017a8c:	482b      	ldr	r0, [pc, #172]	@ (8017b3c <MX_SPI5_Init+0x194>)
 8017a8e:	f7fe ff43 	bl	8016918 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 8017a92:	2200      	movs	r2, #0
 8017a94:	2107      	movs	r1, #7
 8017a96:	4829      	ldr	r0, [pc, #164]	@ (8017b3c <MX_SPI5_Init+0x194>)
 8017a98:	f7fe ff64 	bl	8016964 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	2107      	movs	r1, #7
 8017aa0:	4826      	ldr	r0, [pc, #152]	@ (8017b3c <MX_SPI5_Init+0x194>)
 8017aa2:	f7fe ff85 	bl	80169b0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_7);
 8017aa6:	2107      	movs	r1, #7
 8017aa8:	4824      	ldr	r0, [pc, #144]	@ (8017b3c <MX_SPI5_Init+0x194>)
 8017aaa:	f7fe fffd 	bl	8016aa8 <LL_DMA_DisableFifoMode>

  /* SPI5 interrupt Init */
  NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8017aae:	f7fe fb6f 	bl	8016190 <__NVIC_GetPriorityGrouping>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	2107      	movs	r1, #7
 8017ab8:	4618      	mov	r0, r3
 8017aba:	f7fe fbbf 	bl	801623c <NVIC_EncodePriority>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	4619      	mov	r1, r3
 8017ac2:	2055      	movs	r0, #85	@ 0x55
 8017ac4:	f7fe fb90 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI5_IRQn);
 8017ac8:	2055      	movs	r0, #85	@ 0x55
 8017aca:	f7fe fb6f 	bl	80161ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8017ace:	2300      	movs	r3, #0
 8017ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.Mode = LL_SPI_MODE_SLAVE;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8017ada:	2307      	movs	r3, #7
 8017adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_INPUT;
 8017aec:	2300      	movs	r3, #0
 8017aee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8017af2:	2300      	movs	r3, #0
 8017af4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8017af8:	2300      	movs	r3, #0
 8017afa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  SPI_InitStruct.CRCPoly = 0x0;
 8017afe:	2300      	movs	r3, #0
 8017b00:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  LL_SPI_Init(SPI5, &SPI_InitStruct);
 8017b04:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017b08:	4619      	mov	r1, r3
 8017b0a:	480d      	ldr	r0, [pc, #52]	@ (8017b40 <MX_SPI5_Init+0x198>)
 8017b0c:	f009 fd66 	bl	80215dc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 8017b10:	2100      	movs	r1, #0
 8017b12:	480b      	ldr	r0, [pc, #44]	@ (8017b40 <MX_SPI5_Init+0x198>)
 8017b14:	f7fe fc4e 	bl	80163b4 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI5, LL_SPI_FIFO_TH_01DATA);
 8017b18:	2100      	movs	r1, #0
 8017b1a:	4809      	ldr	r0, [pc, #36]	@ (8017b40 <MX_SPI5_Init+0x198>)
 8017b1c:	f7fe fc5d 	bl	80163da <LL_SPI_SetFIFOThreshold>
  LL_SPI_DisableNSSPulseMgt(SPI5);
 8017b20:	4807      	ldr	r0, [pc, #28]	@ (8017b40 <MX_SPI5_Init+0x198>)
 8017b22:	f7fe fc7d 	bl	8016420 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI5_Init 2 */

  peripherals[11].errorCode = Sys_OK;
 8017b26:	4b07      	ldr	r3, [pc, #28]	@ (8017b44 <MX_SPI5_Init+0x19c>)
 8017b28:	2200      	movs	r2, #0
 8017b2a:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
  /* USER CODE END SPI5_Init 2 */

}
 8017b2e:	bf00      	nop
 8017b30:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8017b34:	46bd      	mov	sp, r7
 8017b36:	bd80      	pop	{r7, pc}
 8017b38:	58021400 	.word	0x58021400
 8017b3c:	40020000 	.word	0x40020000
 8017b40:	40015000 	.word	0x40015000
 8017b44:	240148e0 	.word	0x240148e0

08017b48 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b0c0      	sub	sp, #256	@ 0x100
 8017b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 0 */

  /* USER CODE END SPI6_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8017b4e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017b52:	2228      	movs	r2, #40	@ 0x28
 8017b54:	2100      	movs	r1, #0
 8017b56:	4618      	mov	r0, r3
 8017b58:	f00a fa99 	bl	802208e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b5c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017b60:	2200      	movs	r2, #0
 8017b62:	601a      	str	r2, [r3, #0]
 8017b64:	605a      	str	r2, [r3, #4]
 8017b66:	609a      	str	r2, [r3, #8]
 8017b68:	60da      	str	r2, [r3, #12]
 8017b6a:	611a      	str	r2, [r3, #16]
 8017b6c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017b6e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017b72:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017b76:	4618      	mov	r0, r3
 8017b78:	23c0      	movs	r3, #192	@ 0xc0
 8017b7a:	461a      	mov	r2, r3
 8017b7c:	2100      	movs	r1, #0
 8017b7e:	f00a fa86 	bl	802208e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8017b82:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017b86:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 8017b8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8017b8e:	f04f 0300 	mov.w	r3, #0
 8017b92:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8017b96:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017b9a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017b9e:	2205      	movs	r2, #5
 8017ba0:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 48;
 8017ba2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017ba6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017baa:	2230      	movs	r2, #48	@ 0x30
 8017bac:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8017bae:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017bb2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017bb6:	2202      	movs	r2, #2
 8017bb8:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 6;
 8017bba:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017bbe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017bc2:	2206      	movs	r2, #6
 8017bc4:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 8017bc6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017bca:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017bce:	2204      	movs	r2, #4
 8017bd0:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8017bd2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017bd6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017bda:	2280      	movs	r2, #128	@ 0x80
 8017bdc:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8017bde:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017be2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017be6:	2200      	movs	r2, #0
 8017be8:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8017bea:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017bee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL2;
 8017bf6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017bfa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017c02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017c06:	463b      	mov	r3, r7
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f004 ff63 	bl	801cad4 <HAL_RCCEx_PeriphCLKConfig>
 8017c0e:	4603      	mov	r3, r0
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d001      	beq.n	8017c18 <MX_SPI6_Init+0xd0>
  {
    Error_Handler();
 8017c14:	f000 fdd6 	bl	80187c4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SPI6);
 8017c18:	2020      	movs	r0, #32
 8017c1a:	f7fe fdef 	bl	80167fc <LL_APB4_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8017c1e:	2001      	movs	r0, #1
 8017c20:	f7fe fd98 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  /**SPI6 GPIO Configuration
  PA5   ------> SPI6_SCK
  PA6   ------> SPI6_MISO
  PA7   ------> SPI6_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8017c24:	23e0      	movs	r3, #224	@ 0xe0
 8017c26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8017c2a:	2302      	movs	r3, #2
 8017c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8017c30:	2300      	movs	r3, #0
 8017c32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8017c36:	2300      	movs	r3, #0
 8017c38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8017c42:	2308      	movs	r3, #8
 8017c44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017c48:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017c4c:	4619      	mov	r1, r3
 8017c4e:	4850      	ldr	r0, [pc, #320]	@ (8017d90 <MX_SPI6_Init+0x248>)
 8017c50:	f007 ffe0 	bl	801fc14 <LL_GPIO_Init>

  /* SPI6 DMA Init */

  /* SPI6_RX Init */
  LL_BDMA_SetPeriphRequest(BDMA, LL_BDMA_CHANNEL_0, LL_DMAMUX2_REQ_SPI6_RX);
 8017c54:	220b      	movs	r2, #11
 8017c56:	2100      	movs	r1, #0
 8017c58:	484e      	ldr	r0, [pc, #312]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017c5a:	f7ff f853 	bl	8016d04 <LL_BDMA_SetPeriphRequest>

  LL_BDMA_SetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_DIRECTION_PERIPH_TO_MEMORY);
 8017c5e:	2200      	movs	r2, #0
 8017c60:	2100      	movs	r1, #0
 8017c62:	484c      	ldr	r0, [pc, #304]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017c64:	f7fe ff42 	bl	8016aec <LL_BDMA_SetDataTransferDirection>

  LL_BDMA_SetChannelPriorityLevel(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_PRIORITY_LOW);
 8017c68:	2200      	movs	r2, #0
 8017c6a:	2100      	movs	r1, #0
 8017c6c:	4849      	ldr	r0, [pc, #292]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017c6e:	f7ff f823 	bl	8016cb8 <LL_BDMA_SetChannelPriorityLevel>

  LL_BDMA_SetMode(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_MODE_NORMAL);
 8017c72:	2200      	movs	r2, #0
 8017c74:	2100      	movs	r1, #0
 8017c76:	4847      	ldr	r0, [pc, #284]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017c78:	f7fe ff60 	bl	8016b3c <LL_BDMA_SetMode>

  LL_BDMA_SetPeriphIncMode(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_PERIPH_NOINCREMENT);
 8017c7c:	2200      	movs	r2, #0
 8017c7e:	2100      	movs	r1, #0
 8017c80:	4844      	ldr	r0, [pc, #272]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017c82:	f7fe ff81 	bl	8016b88 <LL_BDMA_SetPeriphIncMode>

  LL_BDMA_SetMemoryIncMode(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_MEMORY_INCREMENT);
 8017c86:	2280      	movs	r2, #128	@ 0x80
 8017c88:	2100      	movs	r1, #0
 8017c8a:	4842      	ldr	r0, [pc, #264]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017c8c:	f7fe ffa2 	bl	8016bd4 <LL_BDMA_SetMemoryIncMode>

  LL_BDMA_SetPeriphSize(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_PDATAALIGN_BYTE);
 8017c90:	2200      	movs	r2, #0
 8017c92:	2100      	movs	r1, #0
 8017c94:	483f      	ldr	r0, [pc, #252]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017c96:	f7fe ffc3 	bl	8016c20 <LL_BDMA_SetPeriphSize>

  LL_BDMA_SetMemorySize(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_MDATAALIGN_BYTE);
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	2100      	movs	r1, #0
 8017c9e:	483d      	ldr	r0, [pc, #244]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017ca0:	f7fe ffe4 	bl	8016c6c <LL_BDMA_SetMemorySize>

  /* SPI6_TX Init */
  LL_BDMA_SetPeriphRequest(BDMA, LL_BDMA_CHANNEL_1, LL_DMAMUX2_REQ_SPI6_TX);
 8017ca4:	220c      	movs	r2, #12
 8017ca6:	2101      	movs	r1, #1
 8017ca8:	483a      	ldr	r0, [pc, #232]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017caa:	f7ff f82b 	bl	8016d04 <LL_BDMA_SetPeriphRequest>

  LL_BDMA_SetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_DIRECTION_MEMORY_TO_PERIPH);
 8017cae:	2210      	movs	r2, #16
 8017cb0:	2101      	movs	r1, #1
 8017cb2:	4838      	ldr	r0, [pc, #224]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017cb4:	f7fe ff1a 	bl	8016aec <LL_BDMA_SetDataTransferDirection>

  LL_BDMA_SetChannelPriorityLevel(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_PRIORITY_LOW);
 8017cb8:	2200      	movs	r2, #0
 8017cba:	2101      	movs	r1, #1
 8017cbc:	4835      	ldr	r0, [pc, #212]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017cbe:	f7fe fffb 	bl	8016cb8 <LL_BDMA_SetChannelPriorityLevel>

  LL_BDMA_SetMode(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_MODE_NORMAL);
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	2101      	movs	r1, #1
 8017cc6:	4833      	ldr	r0, [pc, #204]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017cc8:	f7fe ff38 	bl	8016b3c <LL_BDMA_SetMode>

  LL_BDMA_SetPeriphIncMode(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_PERIPH_NOINCREMENT);
 8017ccc:	2200      	movs	r2, #0
 8017cce:	2101      	movs	r1, #1
 8017cd0:	4830      	ldr	r0, [pc, #192]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017cd2:	f7fe ff59 	bl	8016b88 <LL_BDMA_SetPeriphIncMode>

  LL_BDMA_SetMemoryIncMode(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_MEMORY_NOINCREMENT);
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	2101      	movs	r1, #1
 8017cda:	482e      	ldr	r0, [pc, #184]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017cdc:	f7fe ff7a 	bl	8016bd4 <LL_BDMA_SetMemoryIncMode>

  LL_BDMA_SetPeriphSize(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_PDATAALIGN_BYTE);
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	2101      	movs	r1, #1
 8017ce4:	482b      	ldr	r0, [pc, #172]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017ce6:	f7fe ff9b 	bl	8016c20 <LL_BDMA_SetPeriphSize>

  LL_BDMA_SetMemorySize(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_MDATAALIGN_BYTE);
 8017cea:	2200      	movs	r2, #0
 8017cec:	2101      	movs	r1, #1
 8017cee:	4829      	ldr	r0, [pc, #164]	@ (8017d94 <MX_SPI6_Init+0x24c>)
 8017cf0:	f7fe ffbc 	bl	8016c6c <LL_BDMA_SetMemorySize>

  /* SPI6 interrupt Init */
  NVIC_SetPriority(SPI6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8017cf4:	f7fe fa4c 	bl	8016190 <__NVIC_GetPriorityGrouping>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	2107      	movs	r1, #7
 8017cfe:	4618      	mov	r0, r3
 8017d00:	f7fe fa9c 	bl	801623c <NVIC_EncodePriority>
 8017d04:	4603      	mov	r3, r0
 8017d06:	4619      	mov	r1, r3
 8017d08:	2056      	movs	r0, #86	@ 0x56
 8017d0a:	f7fe fa6d 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI6_IRQn);
 8017d0e:	2056      	movs	r0, #86	@ 0x56
 8017d10:	f7fe fa4c 	bl	80161ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8017d14:	2300      	movs	r3, #0
 8017d16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8017d1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8017d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8017d22:	2307      	movs	r3, #7
 8017d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8017d28:	2300      	movs	r3, #0
 8017d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8017d2e:	2300      	movs	r3, #0
 8017d30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8017d34:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8017d38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8017d3c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8017d40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8017d44:	2300      	movs	r3, #0
 8017d46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  SPI_InitStruct.CRCPoly = 0x0;
 8017d50:	2300      	movs	r3, #0
 8017d52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  LL_SPI_Init(SPI6, &SPI_InitStruct);
 8017d56:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017d5a:	4619      	mov	r1, r3
 8017d5c:	480e      	ldr	r0, [pc, #56]	@ (8017d98 <MX_SPI6_Init+0x250>)
 8017d5e:	f009 fc3d 	bl	80215dc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI6, LL_SPI_PROTOCOL_MOTOROLA);
 8017d62:	2100      	movs	r1, #0
 8017d64:	480c      	ldr	r0, [pc, #48]	@ (8017d98 <MX_SPI6_Init+0x250>)
 8017d66:	f7fe fb25 	bl	80163b4 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI6, LL_SPI_FIFO_TH_01DATA);
 8017d6a:	2100      	movs	r1, #0
 8017d6c:	480a      	ldr	r0, [pc, #40]	@ (8017d98 <MX_SPI6_Init+0x250>)
 8017d6e:	f7fe fb34 	bl	80163da <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI6);
 8017d72:	4809      	ldr	r0, [pc, #36]	@ (8017d98 <MX_SPI6_Init+0x250>)
 8017d74:	f7fe fb44 	bl	8016400 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI6_Init 2 */
  LL_SPI_Enable(SPI6);
 8017d78:	4807      	ldr	r0, [pc, #28]	@ (8017d98 <MX_SPI6_Init+0x250>)
 8017d7a:	f7fe fafb 	bl	8016374 <LL_SPI_Enable>
  peripherals[12].errorCode = Sys_OK;
 8017d7e:	4b07      	ldr	r3, [pc, #28]	@ (8017d9c <MX_SPI6_Init+0x254>)
 8017d80:	2200      	movs	r2, #0
 8017d82:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
  /* USER CODE END SPI6_Init 2 */

}
 8017d86:	bf00      	nop
 8017d88:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	bd80      	pop	{r7, pc}
 8017d90:	58020000 	.word	0x58020000
 8017d94:	58025400 	.word	0x58025400
 8017d98:	58001400 	.word	0x58001400
 8017d9c:	240148e0 	.word	0x240148e0

08017da0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b086      	sub	sp, #24
 8017da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8017da6:	1d3b      	adds	r3, r7, #4
 8017da8:	2200      	movs	r2, #0
 8017daa:	601a      	str	r2, [r3, #0]
 8017dac:	605a      	str	r2, [r3, #4]
 8017dae:	609a      	str	r2, [r3, #8]
 8017db0:	60da      	str	r2, [r3, #12]
 8017db2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8017db4:	2001      	movs	r0, #1
 8017db6:	f7fe fd05 	bl	80167c4 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8017dba:	f7fe f9e9 	bl	8016190 <__NVIC_GetPriorityGrouping>
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	210f      	movs	r1, #15
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	f7fe fa39 	bl	801623c <NVIC_EncodePriority>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	4619      	mov	r1, r3
 8017dce:	2019      	movs	r0, #25
 8017dd0:	f7fe fa0a 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 8017dd4:	2019      	movs	r0, #25
 8017dd6:	f7fe f9e9 	bl	80161ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 119;
 8017dda:	2377      	movs	r3, #119	@ 0x77
 8017ddc:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8017dde:	2300      	movs	r3, #0
 8017de0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8017de2:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8017de6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8017de8:	2300      	movs	r3, #0
 8017dea:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8017dec:	2300      	movs	r3, #0
 8017dee:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8017df0:	1d3b      	adds	r3, r7, #4
 8017df2:	4619      	mov	r1, r3
 8017df4:	4812      	ldr	r0, [pc, #72]	@ (8017e40 <MX_TIM1_Init+0xa0>)
 8017df6:	f009 fca9 	bl	802174c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8017dfa:	4811      	ldr	r0, [pc, #68]	@ (8017e40 <MX_TIM1_Init+0xa0>)
 8017dfc:	f7fe fb40 	bl	8016480 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8017e00:	2100      	movs	r1, #0
 8017e02:	480f      	ldr	r0, [pc, #60]	@ (8017e40 <MX_TIM1_Init+0xa0>)
 8017e04:	f7fe fb4c 	bl	80164a0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_UPDATE);
 8017e08:	2120      	movs	r1, #32
 8017e0a:	480d      	ldr	r0, [pc, #52]	@ (8017e40 <MX_TIM1_Init+0xa0>)
 8017e0c:	f7fe fb5e 	bl	80164cc <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8017e10:	2100      	movs	r1, #0
 8017e12:	480b      	ldr	r0, [pc, #44]	@ (8017e40 <MX_TIM1_Init+0xa0>)
 8017e14:	f7fe fb6d 	bl	80164f2 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8017e18:	4809      	ldr	r0, [pc, #36]	@ (8017e40 <MX_TIM1_Init+0xa0>)
 8017e1a:	f7fe fb7d 	bl	8016518 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8017e1e:	4808      	ldr	r0, [pc, #32]	@ (8017e40 <MX_TIM1_Init+0xa0>)
 8017e20:	f7fe fb8a 	bl	8016538 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableUpdateEvent(TIM1);
 8017e24:	4806      	ldr	r0, [pc, #24]	@ (8017e40 <MX_TIM1_Init+0xa0>)
 8017e26:	f7fe fb1b 	bl	8016460 <LL_TIM_EnableUpdateEvent>
  LL_TIM_EnableCounter(TIM1);
 8017e2a:	4805      	ldr	r0, [pc, #20]	@ (8017e40 <MX_TIM1_Init+0xa0>)
 8017e2c:	f7fe fb08 	bl	8016440 <LL_TIM_EnableCounter>
  peripherals[13].errorCode = Sys_OK;
 8017e30:	4b04      	ldr	r3, [pc, #16]	@ (8017e44 <MX_TIM1_Init+0xa4>)
 8017e32:	2200      	movs	r2, #0
 8017e34:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
  /* USER CODE END TIM1_Init 2 */

}
 8017e38:	bf00      	nop
 8017e3a:	3718      	adds	r7, #24
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}
 8017e40:	40010000 	.word	0x40010000
 8017e44:	240148e0 	.word	0x240148e0

08017e48 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b0be      	sub	sp, #248	@ 0xf8
 8017e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 0 */

  /* USER CODE END UART7_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8017e4e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017e52:	2220      	movs	r2, #32
 8017e54:	2100      	movs	r1, #0
 8017e56:	4618      	mov	r0, r3
 8017e58:	f00a f919 	bl	802208e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017e5c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017e60:	2200      	movs	r2, #0
 8017e62:	601a      	str	r2, [r3, #0]
 8017e64:	605a      	str	r2, [r3, #4]
 8017e66:	609a      	str	r2, [r3, #8]
 8017e68:	60da      	str	r2, [r3, #12]
 8017e6a:	611a      	str	r2, [r3, #16]
 8017e6c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017e6e:	463b      	mov	r3, r7
 8017e70:	22c0      	movs	r2, #192	@ 0xc0
 8017e72:	2100      	movs	r1, #0
 8017e74:	4618      	mov	r0, r3
 8017e76:	f00a f90a 	bl	802208e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8017e7a:	f04f 0202 	mov.w	r2, #2
 8017e7e:	f04f 0300 	mov.w	r3, #0
 8017e82:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8017e86:	2300      	movs	r3, #0
 8017e88:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017e8a:	463b      	mov	r3, r7
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	f004 fe21 	bl	801cad4 <HAL_RCCEx_PeriphCLKConfig>
 8017e92:	4603      	mov	r3, r0
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d001      	beq.n	8017e9c <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8017e98:	f000 fc94 	bl	80187c4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART7);
 8017e9c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8017ea0:	f7fe fc74 	bl	801678c <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8017ea4:	2010      	movs	r0, #16
 8017ea6:	f7fe fc55 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  /**UART7 GPIO Configuration
  PE7   ------> UART7_RX
  PE8   ------> UART7_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8017eaa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8017eae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8017eb2:	2302      	movs	r3, #2
 8017eb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8017eb8:	2300      	movs	r3, #0
 8017eba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8017eca:	2307      	movs	r3, #7
 8017ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8017ed0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017ed4:	4619      	mov	r1, r3
 8017ed6:	4843      	ldr	r0, [pc, #268]	@ (8017fe4 <MX_UART7_Init+0x19c>)
 8017ed8:	f007 fe9c 	bl	801fc14 <LL_GPIO_Init>

  /* UART7 DMA Init */

  /* UART7_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_STREAM_1, LL_DMAMUX1_REQ_UART7_RX);
 8017edc:	224f      	movs	r2, #79	@ 0x4f
 8017ede:	2101      	movs	r1, #1
 8017ee0:	4841      	ldr	r0, [pc, #260]	@ (8017fe8 <MX_UART7_Init+0x1a0>)
 8017ee2:	f7fe fdb1 	bl	8016a48 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	2101      	movs	r1, #1
 8017eea:	483f      	ldr	r0, [pc, #252]	@ (8017fe8 <MX_UART7_Init+0x1a0>)
 8017eec:	f7fe fca2 	bl	8016834 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	2101      	movs	r1, #1
 8017ef4:	483c      	ldr	r0, [pc, #240]	@ (8017fe8 <MX_UART7_Init+0x1a0>)
 8017ef6:	f7fe fd81 	bl	80169fc <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 8017efa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017efe:	2101      	movs	r1, #1
 8017f00:	4839      	ldr	r0, [pc, #228]	@ (8017fe8 <MX_UART7_Init+0x1a0>)
 8017f02:	f7fe fcbd 	bl	8016880 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8017f06:	2200      	movs	r2, #0
 8017f08:	2101      	movs	r1, #1
 8017f0a:	4837      	ldr	r0, [pc, #220]	@ (8017fe8 <MX_UART7_Init+0x1a0>)
 8017f0c:	f7fe fcde 	bl	80168cc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8017f10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017f14:	2101      	movs	r1, #1
 8017f16:	4834      	ldr	r0, [pc, #208]	@ (8017fe8 <MX_UART7_Init+0x1a0>)
 8017f18:	f7fe fcfe 	bl	8016918 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	2101      	movs	r1, #1
 8017f20:	4831      	ldr	r0, [pc, #196]	@ (8017fe8 <MX_UART7_Init+0x1a0>)
 8017f22:	f7fe fd1f 	bl	8016964 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 8017f26:	2200      	movs	r2, #0
 8017f28:	2101      	movs	r1, #1
 8017f2a:	482f      	ldr	r0, [pc, #188]	@ (8017fe8 <MX_UART7_Init+0x1a0>)
 8017f2c:	f7fe fd40 	bl	80169b0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_1);
 8017f30:	2101      	movs	r1, #1
 8017f32:	482d      	ldr	r0, [pc, #180]	@ (8017fe8 <MX_UART7_Init+0x1a0>)
 8017f34:	f7fe fdb8 	bl	8016aa8 <LL_DMA_DisableFifoMode>

  /* UART7 interrupt Init */
  NVIC_SetPriority(UART7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8017f38:	f7fe f92a 	bl	8016190 <__NVIC_GetPriorityGrouping>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	2200      	movs	r2, #0
 8017f40:	2107      	movs	r1, #7
 8017f42:	4618      	mov	r0, r3
 8017f44:	f7fe f97a 	bl	801623c <NVIC_EncodePriority>
 8017f48:	4603      	mov	r3, r0
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	2052      	movs	r0, #82	@ 0x52
 8017f4e:	f7fe f94b 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART7_IRQn);
 8017f52:	2052      	movs	r0, #82	@ 0x52
 8017f54:	f7fe f92a 	bl	80161ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8017f58:	2300      	movs	r3, #0
 8017f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.BaudRate = 115200;
 8017f5e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8017f62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8017f66:	2300      	movs	r3, #0
 8017f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8017f72:	2300      	movs	r3, #0
 8017f74:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8017f78:	230c      	movs	r3, #12
 8017f7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8017f7e:	2300      	movs	r3, #0
 8017f80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8017f84:	2300      	movs	r3, #0
 8017f86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(UART7, &UART_InitStruct);
 8017f8a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017f8e:	4619      	mov	r1, r3
 8017f90:	4816      	ldr	r0, [pc, #88]	@ (8017fec <MX_UART7_Init+0x1a4>)
 8017f92:	f009 fd0d 	bl	80219b0 <LL_USART_Init>
  LL_USART_DisableFIFO(UART7);
 8017f96:	4815      	ldr	r0, [pc, #84]	@ (8017fec <MX_UART7_Init+0x1a4>)
 8017f98:	f7fe faee 	bl	8016578 <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 8017f9c:	2100      	movs	r1, #0
 8017f9e:	4813      	ldr	r0, [pc, #76]	@ (8017fec <MX_UART7_Init+0x1a4>)
 8017fa0:	f7fe fafa 	bl	8016598 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 8017fa4:	2100      	movs	r1, #0
 8017fa6:	4811      	ldr	r0, [pc, #68]	@ (8017fec <MX_UART7_Init+0x1a4>)
 8017fa8:	f7fe fb1d 	bl	80165e6 <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART7);
 8017fac:	480f      	ldr	r0, [pc, #60]	@ (8017fec <MX_UART7_Init+0x1a4>)
 8017fae:	f7fe fb41 	bl	8016634 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART7 */

  /* USER CODE END WKUPType UART7 */

  LL_USART_Enable(UART7);
 8017fb2:	480e      	ldr	r0, [pc, #56]	@ (8017fec <MX_UART7_Init+0x1a4>)
 8017fb4:	f7fe fad0 	bl	8016558 <LL_USART_Enable>

  /* Polling UART7 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(UART7))) || (!(LL_USART_IsActiveFlag_REACK(UART7))))
 8017fb8:	bf00      	nop
 8017fba:	480c      	ldr	r0, [pc, #48]	@ (8017fec <MX_UART7_Init+0x1a4>)
 8017fbc:	f7fe fb76 	bl	80166ac <LL_USART_IsActiveFlag_TEACK>
 8017fc0:	4603      	mov	r3, r0
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d0f9      	beq.n	8017fba <MX_UART7_Init+0x172>
 8017fc6:	4809      	ldr	r0, [pc, #36]	@ (8017fec <MX_UART7_Init+0x1a4>)
 8017fc8:	f7fe fb84 	bl	80166d4 <LL_USART_IsActiveFlag_REACK>
 8017fcc:	4603      	mov	r3, r0
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d0f3      	beq.n	8017fba <MX_UART7_Init+0x172>
  {
  }
  /* USER CODE BEGIN UART7_Init 2 */
  peripherals[12].errorCode = Sys_OK;
 8017fd2:	4b07      	ldr	r3, [pc, #28]	@ (8017ff0 <MX_UART7_Init+0x1a8>)
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
  /* USER CODE END UART7_Init 2 */

}
 8017fda:	bf00      	nop
 8017fdc:	37f8      	adds	r7, #248	@ 0xf8
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bd80      	pop	{r7, pc}
 8017fe2:	bf00      	nop
 8017fe4:	58021000 	.word	0x58021000
 8017fe8:	40020400 	.word	0x40020400
 8017fec:	40007800 	.word	0x40007800
 8017ff0:	240148e0 	.word	0x240148e0

08017ff4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b0be      	sub	sp, #248	@ 0xf8
 8017ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8017ffa:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017ffe:	2220      	movs	r2, #32
 8018000:	2100      	movs	r1, #0
 8018002:	4618      	mov	r0, r3
 8018004:	f00a f843 	bl	802208e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018008:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801800c:	2200      	movs	r2, #0
 801800e:	601a      	str	r2, [r3, #0]
 8018010:	605a      	str	r2, [r3, #4]
 8018012:	609a      	str	r2, [r3, #8]
 8018014:	60da      	str	r2, [r3, #12]
 8018016:	611a      	str	r2, [r3, #16]
 8018018:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801801a:	463b      	mov	r3, r7
 801801c:	22c0      	movs	r2, #192	@ 0xc0
 801801e:	2100      	movs	r1, #0
 8018020:	4618      	mov	r0, r3
 8018022:	f00a f834 	bl	802208e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8018026:	f04f 0201 	mov.w	r2, #1
 801802a:	f04f 0300 	mov.w	r3, #0
 801802e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8018032:	2300      	movs	r3, #0
 8018034:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018036:	463b      	mov	r3, r7
 8018038:	4618      	mov	r0, r3
 801803a:	f004 fd4b 	bl	801cad4 <HAL_RCCEx_PeriphCLKConfig>
 801803e:	4603      	mov	r3, r0
 8018040:	2b00      	cmp	r3, #0
 8018042:	d001      	beq.n	8018048 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8018044:	f000 fbbe 	bl	80187c4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8018048:	2010      	movs	r0, #16
 801804a:	f7fe fbbb 	bl	80167c4 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 801804e:	2001      	movs	r0, #1
 8018050:	f7fe fb80 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8018054:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8018058:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 801805c:	2302      	movs	r3, #2
 801805e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8018062:	2300      	movs	r3, #0
 8018064:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8018068:	2300      	movs	r3, #0
 801806a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801806e:	2300      	movs	r3, #0
 8018070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8018074:	2307      	movs	r3, #7
 8018076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801807a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801807e:	4619      	mov	r1, r3
 8018080:	4842      	ldr	r0, [pc, #264]	@ (801818c <MX_USART1_UART_Init+0x198>)
 8018082:	f007 fdc7 	bl	801fc14 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_0, LL_DMAMUX1_REQ_USART1_RX);
 8018086:	2229      	movs	r2, #41	@ 0x29
 8018088:	2100      	movs	r1, #0
 801808a:	4841      	ldr	r0, [pc, #260]	@ (8018190 <MX_USART1_UART_Init+0x19c>)
 801808c:	f7fe fcdc 	bl	8016a48 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8018090:	2200      	movs	r2, #0
 8018092:	2100      	movs	r1, #0
 8018094:	483e      	ldr	r0, [pc, #248]	@ (8018190 <MX_USART1_UART_Init+0x19c>)
 8018096:	f7fe fbcd 	bl	8016834 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 801809a:	2200      	movs	r2, #0
 801809c:	2100      	movs	r1, #0
 801809e:	483c      	ldr	r0, [pc, #240]	@ (8018190 <MX_USART1_UART_Init+0x19c>)
 80180a0:	f7fe fcac 	bl	80169fc <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 80180a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80180a8:	2100      	movs	r1, #0
 80180aa:	4839      	ldr	r0, [pc, #228]	@ (8018190 <MX_USART1_UART_Init+0x19c>)
 80180ac:	f7fe fbe8 	bl	8016880 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 80180b0:	2200      	movs	r2, #0
 80180b2:	2100      	movs	r1, #0
 80180b4:	4836      	ldr	r0, [pc, #216]	@ (8018190 <MX_USART1_UART_Init+0x19c>)
 80180b6:	f7fe fc09 	bl	80168cc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 80180ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80180be:	2100      	movs	r1, #0
 80180c0:	4833      	ldr	r0, [pc, #204]	@ (8018190 <MX_USART1_UART_Init+0x19c>)
 80180c2:	f7fe fc29 	bl	8016918 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 80180c6:	2200      	movs	r2, #0
 80180c8:	2100      	movs	r1, #0
 80180ca:	4831      	ldr	r0, [pc, #196]	@ (8018190 <MX_USART1_UART_Init+0x19c>)
 80180cc:	f7fe fc4a 	bl	8016964 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 80180d0:	2200      	movs	r2, #0
 80180d2:	2100      	movs	r1, #0
 80180d4:	482e      	ldr	r0, [pc, #184]	@ (8018190 <MX_USART1_UART_Init+0x19c>)
 80180d6:	f7fe fc6b 	bl	80169b0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);
 80180da:	2100      	movs	r1, #0
 80180dc:	482c      	ldr	r0, [pc, #176]	@ (8018190 <MX_USART1_UART_Init+0x19c>)
 80180de:	f7fe fce3 	bl	8016aa8 <LL_DMA_DisableFifoMode>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 80180e2:	f7fe f855 	bl	8016190 <__NVIC_GetPriorityGrouping>
 80180e6:	4603      	mov	r3, r0
 80180e8:	2200      	movs	r2, #0
 80180ea:	2107      	movs	r1, #7
 80180ec:	4618      	mov	r0, r3
 80180ee:	f7fe f8a5 	bl	801623c <NVIC_EncodePriority>
 80180f2:	4603      	mov	r3, r0
 80180f4:	4619      	mov	r1, r3
 80180f6:	2025      	movs	r0, #37	@ 0x25
 80180f8:	f7fe f876 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80180fc:	2025      	movs	r0, #37	@ 0x25
 80180fe:	f7fe f855 	bl	80161ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8018102:	2300      	movs	r3, #0
 8018104:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 8018108:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 801810c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8018110:	2300      	movs	r3, #0
 8018112:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8018116:	2300      	movs	r3, #0
 8018118:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 801811c:	2300      	movs	r3, #0
 801811e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8018122:	230c      	movs	r3, #12
 8018124:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8018128:	2300      	movs	r3, #0
 801812a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 801812e:	2300      	movs	r3, #0
 8018130:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART1, &USART_InitStruct);
 8018134:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8018138:	4619      	mov	r1, r3
 801813a:	4816      	ldr	r0, [pc, #88]	@ (8018194 <MX_USART1_UART_Init+0x1a0>)
 801813c:	f009 fc38 	bl	80219b0 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8018140:	2100      	movs	r1, #0
 8018142:	4814      	ldr	r0, [pc, #80]	@ (8018194 <MX_USART1_UART_Init+0x1a0>)
 8018144:	f7fe fa28 	bl	8016598 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8018148:	2100      	movs	r1, #0
 801814a:	4812      	ldr	r0, [pc, #72]	@ (8018194 <MX_USART1_UART_Init+0x1a0>)
 801814c:	f7fe fa4b 	bl	80165e6 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8018150:	4810      	ldr	r0, [pc, #64]	@ (8018194 <MX_USART1_UART_Init+0x1a0>)
 8018152:	f7fe fa11 	bl	8016578 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8018156:	480f      	ldr	r0, [pc, #60]	@ (8018194 <MX_USART1_UART_Init+0x1a0>)
 8018158:	f7fe fa6c 	bl	8016634 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 801815c:	480d      	ldr	r0, [pc, #52]	@ (8018194 <MX_USART1_UART_Init+0x1a0>)
 801815e:	f7fe f9fb 	bl	8016558 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8018162:	bf00      	nop
 8018164:	480b      	ldr	r0, [pc, #44]	@ (8018194 <MX_USART1_UART_Init+0x1a0>)
 8018166:	f7fe faa1 	bl	80166ac <LL_USART_IsActiveFlag_TEACK>
 801816a:	4603      	mov	r3, r0
 801816c:	2b00      	cmp	r3, #0
 801816e:	d0f9      	beq.n	8018164 <MX_USART1_UART_Init+0x170>
 8018170:	4808      	ldr	r0, [pc, #32]	@ (8018194 <MX_USART1_UART_Init+0x1a0>)
 8018172:	f7fe faaf 	bl	80166d4 <LL_USART_IsActiveFlag_REACK>
 8018176:	4603      	mov	r3, r0
 8018178:	2b00      	cmp	r3, #0
 801817a:	d0f3      	beq.n	8018164 <MX_USART1_UART_Init+0x170>
  {
  }
  /* USER CODE BEGIN USART1_Init 2 */
  peripherals[4].errorCode = Sys_OK;
 801817c:	4b06      	ldr	r3, [pc, #24]	@ (8018198 <MX_USART1_UART_Init+0x1a4>)
 801817e:	2200      	movs	r2, #0
 8018180:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  /* USER CODE END USART1_Init 2 */

}
 8018184:	bf00      	nop
 8018186:	37f8      	adds	r7, #248	@ 0xf8
 8018188:	46bd      	mov	sp, r7
 801818a:	bd80      	pop	{r7, pc}
 801818c:	58020000 	.word	0x58020000
 8018190:	40020000 	.word	0x40020000
 8018194:	40011000 	.word	0x40011000
 8018198:	240148e0 	.word	0x240148e0

0801819c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 801819c:	b580      	push	{r7, lr}
 801819e:	b0be      	sub	sp, #248	@ 0xf8
 80181a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80181a2:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80181a6:	2220      	movs	r2, #32
 80181a8:	2100      	movs	r1, #0
 80181aa:	4618      	mov	r0, r3
 80181ac:	f009 ff6f 	bl	802208e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80181b0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80181b4:	2200      	movs	r2, #0
 80181b6:	601a      	str	r2, [r3, #0]
 80181b8:	605a      	str	r2, [r3, #4]
 80181ba:	609a      	str	r2, [r3, #8]
 80181bc:	60da      	str	r2, [r3, #12]
 80181be:	611a      	str	r2, [r3, #16]
 80181c0:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80181c2:	463b      	mov	r3, r7
 80181c4:	22c0      	movs	r2, #192	@ 0xc0
 80181c6:	2100      	movs	r1, #0
 80181c8:	4618      	mov	r0, r3
 80181ca:	f009 ff60 	bl	802208e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80181ce:	f04f 0202 	mov.w	r2, #2
 80181d2:	f04f 0300 	mov.w	r3, #0
 80181d6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80181da:	2300      	movs	r3, #0
 80181dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80181de:	463b      	mov	r3, r7
 80181e0:	4618      	mov	r0, r3
 80181e2:	f004 fc77 	bl	801cad4 <HAL_RCCEx_PeriphCLKConfig>
 80181e6:	4603      	mov	r3, r0
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d001      	beq.n	80181f0 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 80181ec:	f000 faea 	bl	80187c4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80181f0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80181f4:	f7fe faca 	bl	801678c <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 80181f8:	2001      	movs	r0, #1
 80181fa:	f7fe faab 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80181fe:	230c      	movs	r3, #12
 8018200:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8018204:	2302      	movs	r3, #2
 8018206:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 801820a:	2300      	movs	r3, #0
 801820c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8018210:	2300      	movs	r3, #0
 8018212:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8018216:	2300      	movs	r3, #0
 8018218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 801821c:	2307      	movs	r3, #7
 801821e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018222:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8018226:	4619      	mov	r1, r3
 8018228:	4842      	ldr	r0, [pc, #264]	@ (8018334 <MX_USART2_UART_Init+0x198>)
 801822a:	f007 fcf3 	bl	801fc14 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_1, LL_DMAMUX1_REQ_USART2_RX);
 801822e:	222b      	movs	r2, #43	@ 0x2b
 8018230:	2101      	movs	r1, #1
 8018232:	4841      	ldr	r0, [pc, #260]	@ (8018338 <MX_USART2_UART_Init+0x19c>)
 8018234:	f7fe fc08 	bl	8016a48 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8018238:	2200      	movs	r2, #0
 801823a:	2101      	movs	r1, #1
 801823c:	483e      	ldr	r0, [pc, #248]	@ (8018338 <MX_USART2_UART_Init+0x19c>)
 801823e:	f7fe faf9 	bl	8016834 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8018242:	2200      	movs	r2, #0
 8018244:	2101      	movs	r1, #1
 8018246:	483c      	ldr	r0, [pc, #240]	@ (8018338 <MX_USART2_UART_Init+0x19c>)
 8018248:	f7fe fbd8 	bl	80169fc <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 801824c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018250:	2101      	movs	r1, #1
 8018252:	4839      	ldr	r0, [pc, #228]	@ (8018338 <MX_USART2_UART_Init+0x19c>)
 8018254:	f7fe fb14 	bl	8016880 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8018258:	2200      	movs	r2, #0
 801825a:	2101      	movs	r1, #1
 801825c:	4836      	ldr	r0, [pc, #216]	@ (8018338 <MX_USART2_UART_Init+0x19c>)
 801825e:	f7fe fb35 	bl	80168cc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8018262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018266:	2101      	movs	r1, #1
 8018268:	4833      	ldr	r0, [pc, #204]	@ (8018338 <MX_USART2_UART_Init+0x19c>)
 801826a:	f7fe fb55 	bl	8016918 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 801826e:	2200      	movs	r2, #0
 8018270:	2101      	movs	r1, #1
 8018272:	4831      	ldr	r0, [pc, #196]	@ (8018338 <MX_USART2_UART_Init+0x19c>)
 8018274:	f7fe fb76 	bl	8016964 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 8018278:	2200      	movs	r2, #0
 801827a:	2101      	movs	r1, #1
 801827c:	482e      	ldr	r0, [pc, #184]	@ (8018338 <MX_USART2_UART_Init+0x19c>)
 801827e:	f7fe fb97 	bl	80169b0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 8018282:	2101      	movs	r1, #1
 8018284:	482c      	ldr	r0, [pc, #176]	@ (8018338 <MX_USART2_UART_Init+0x19c>)
 8018286:	f7fe fc0f 	bl	8016aa8 <LL_DMA_DisableFifoMode>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 801828a:	f7fd ff81 	bl	8016190 <__NVIC_GetPriorityGrouping>
 801828e:	4603      	mov	r3, r0
 8018290:	2200      	movs	r2, #0
 8018292:	2107      	movs	r1, #7
 8018294:	4618      	mov	r0, r3
 8018296:	f7fd ffd1 	bl	801623c <NVIC_EncodePriority>
 801829a:	4603      	mov	r3, r0
 801829c:	4619      	mov	r1, r3
 801829e:	2026      	movs	r0, #38	@ 0x26
 80182a0:	f7fd ffa2 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80182a4:	2026      	movs	r0, #38	@ 0x26
 80182a6:	f7fd ff81 	bl	80161ac <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80182aa:	2300      	movs	r3, #0
 80182ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 80182b0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80182b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80182b8:	2300      	movs	r3, #0
 80182ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80182be:	2300      	movs	r3, #0
 80182c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80182c4:	2300      	movs	r3, #0
 80182c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80182ca:	230c      	movs	r3, #12
 80182cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80182d0:	2300      	movs	r3, #0
 80182d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80182d6:	2300      	movs	r3, #0
 80182d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART2, &USART_InitStruct);
 80182dc:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80182e0:	4619      	mov	r1, r3
 80182e2:	4816      	ldr	r0, [pc, #88]	@ (801833c <MX_USART2_UART_Init+0x1a0>)
 80182e4:	f009 fb64 	bl	80219b0 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 80182e8:	2100      	movs	r1, #0
 80182ea:	4814      	ldr	r0, [pc, #80]	@ (801833c <MX_USART2_UART_Init+0x1a0>)
 80182ec:	f7fe f954 	bl	8016598 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 80182f0:	2100      	movs	r1, #0
 80182f2:	4812      	ldr	r0, [pc, #72]	@ (801833c <MX_USART2_UART_Init+0x1a0>)
 80182f4:	f7fe f977 	bl	80165e6 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 80182f8:	4810      	ldr	r0, [pc, #64]	@ (801833c <MX_USART2_UART_Init+0x1a0>)
 80182fa:	f7fe f93d 	bl	8016578 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 80182fe:	480f      	ldr	r0, [pc, #60]	@ (801833c <MX_USART2_UART_Init+0x1a0>)
 8018300:	f7fe f998 	bl	8016634 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8018304:	480d      	ldr	r0, [pc, #52]	@ (801833c <MX_USART2_UART_Init+0x1a0>)
 8018306:	f7fe f927 	bl	8016558 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 801830a:	bf00      	nop
 801830c:	480b      	ldr	r0, [pc, #44]	@ (801833c <MX_USART2_UART_Init+0x1a0>)
 801830e:	f7fe f9cd 	bl	80166ac <LL_USART_IsActiveFlag_TEACK>
 8018312:	4603      	mov	r3, r0
 8018314:	2b00      	cmp	r3, #0
 8018316:	d0f9      	beq.n	801830c <MX_USART2_UART_Init+0x170>
 8018318:	4808      	ldr	r0, [pc, #32]	@ (801833c <MX_USART2_UART_Init+0x1a0>)
 801831a:	f7fe f9db 	bl	80166d4 <LL_USART_IsActiveFlag_REACK>
 801831e:	4603      	mov	r3, r0
 8018320:	2b00      	cmp	r3, #0
 8018322:	d0f3      	beq.n	801830c <MX_USART2_UART_Init+0x170>
  {
  }
  /* USER CODE BEGIN USART2_Init 2 */
  peripherals[5].errorCode = Sys_OK;
 8018324:	4b06      	ldr	r3, [pc, #24]	@ (8018340 <MX_USART2_UART_Init+0x1a4>)
 8018326:	2200      	movs	r2, #0
 8018328:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
  /* USER CODE END USART2_Init 2 */

}
 801832c:	bf00      	nop
 801832e:	37f8      	adds	r7, #248	@ 0xf8
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}
 8018334:	58020000 	.word	0x58020000
 8018338:	40020000 	.word	0x40020000
 801833c:	40004400 	.word	0x40004400
 8018340:	240148e0 	.word	0x240148e0

08018344 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b082      	sub	sp, #8
 8018348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 801834a:	4b1b      	ldr	r3, [pc, #108]	@ (80183b8 <MX_BDMA_Init+0x74>)
 801834c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8018350:	4a19      	ldr	r2, [pc, #100]	@ (80183b8 <MX_BDMA_Init+0x74>)
 8018352:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8018356:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801835a:	4b17      	ldr	r3, [pc, #92]	@ (80183b8 <MX_BDMA_Init+0x74>)
 801835c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8018360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8018364:	607b      	str	r3, [r7, #4]
 8018366:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  NVIC_SetPriority(BDMA_Channel0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8018368:	f7fd ff12 	bl	8016190 <__NVIC_GetPriorityGrouping>
 801836c:	4603      	mov	r3, r0
 801836e:	2200      	movs	r2, #0
 8018370:	2107      	movs	r1, #7
 8018372:	4618      	mov	r0, r3
 8018374:	f7fd ff62 	bl	801623c <NVIC_EncodePriority>
 8018378:	4603      	mov	r3, r0
 801837a:	4619      	mov	r1, r3
 801837c:	2081      	movs	r0, #129	@ 0x81
 801837e:	f7fd ff33 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8018382:	2081      	movs	r0, #129	@ 0x81
 8018384:	f7fd ff12 	bl	80161ac <__NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(BDMA_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8018388:	f7fd ff02 	bl	8016190 <__NVIC_GetPriorityGrouping>
 801838c:	4603      	mov	r3, r0
 801838e:	2200      	movs	r2, #0
 8018390:	2100      	movs	r1, #0
 8018392:	4618      	mov	r0, r3
 8018394:	f7fd ff52 	bl	801623c <NVIC_EncodePriority>
 8018398:	4603      	mov	r3, r0
 801839a:	4619      	mov	r1, r3
 801839c:	2082      	movs	r0, #130	@ 0x82
 801839e:	f7fd ff23 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 80183a2:	2082      	movs	r0, #130	@ 0x82
 80183a4:	f7fd ff02 	bl	80161ac <__NVIC_EnableIRQ>

  peripherals[3].errorCode = Sys_OK;
 80183a8:	4b04      	ldr	r3, [pc, #16]	@ (80183bc <MX_BDMA_Init+0x78>)
 80183aa:	2200      	movs	r2, #0
 80183ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
}
 80183b0:	bf00      	nop
 80183b2:	3708      	adds	r7, #8
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd80      	pop	{r7, pc}
 80183b8:	58024400 	.word	0x58024400
 80183bc:	240148e0 	.word	0x240148e0

080183c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b082      	sub	sp, #8
 80183c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80183c6:	4b33      	ldr	r3, [pc, #204]	@ (8018494 <MX_DMA_Init+0xd4>)
 80183c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80183cc:	4a31      	ldr	r2, [pc, #196]	@ (8018494 <MX_DMA_Init+0xd4>)
 80183ce:	f043 0302 	orr.w	r3, r3, #2
 80183d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80183d6:	4b2f      	ldr	r3, [pc, #188]	@ (8018494 <MX_DMA_Init+0xd4>)
 80183d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80183dc:	f003 0302 	and.w	r3, r3, #2
 80183e0:	607b      	str	r3, [r7, #4]
 80183e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80183e4:	4b2b      	ldr	r3, [pc, #172]	@ (8018494 <MX_DMA_Init+0xd4>)
 80183e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80183ea:	4a2a      	ldr	r2, [pc, #168]	@ (8018494 <MX_DMA_Init+0xd4>)
 80183ec:	f043 0301 	orr.w	r3, r3, #1
 80183f0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80183f4:	4b27      	ldr	r3, [pc, #156]	@ (8018494 <MX_DMA_Init+0xd4>)
 80183f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80183fa:	f003 0301 	and.w	r3, r3, #1
 80183fe:	603b      	str	r3, [r7, #0]
 8018400:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8018402:	f7fd fec5 	bl	8016190 <__NVIC_GetPriorityGrouping>
 8018406:	4603      	mov	r3, r0
 8018408:	2200      	movs	r2, #0
 801840a:	2107      	movs	r1, #7
 801840c:	4618      	mov	r0, r3
 801840e:	f7fd ff15 	bl	801623c <NVIC_EncodePriority>
 8018412:	4603      	mov	r3, r0
 8018414:	4619      	mov	r1, r3
 8018416:	200b      	movs	r0, #11
 8018418:	f7fd fee6 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 801841c:	200b      	movs	r0, #11
 801841e:	f7fd fec5 	bl	80161ac <__NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8018422:	f7fd feb5 	bl	8016190 <__NVIC_GetPriorityGrouping>
 8018426:	4603      	mov	r3, r0
 8018428:	2200      	movs	r2, #0
 801842a:	2107      	movs	r1, #7
 801842c:	4618      	mov	r0, r3
 801842e:	f7fd ff05 	bl	801623c <NVIC_EncodePriority>
 8018432:	4603      	mov	r3, r0
 8018434:	4619      	mov	r1, r3
 8018436:	200c      	movs	r0, #12
 8018438:	f7fd fed6 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 801843c:	200c      	movs	r0, #12
 801843e:	f7fd feb5 	bl	80161ac <__NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8018442:	f7fd fea5 	bl	8016190 <__NVIC_GetPriorityGrouping>
 8018446:	4603      	mov	r3, r0
 8018448:	2200      	movs	r2, #0
 801844a:	2107      	movs	r1, #7
 801844c:	4618      	mov	r0, r3
 801844e:	f7fd fef5 	bl	801623c <NVIC_EncodePriority>
 8018452:	4603      	mov	r3, r0
 8018454:	4619      	mov	r1, r3
 8018456:	202f      	movs	r0, #47	@ 0x2f
 8018458:	f7fd fec6 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 801845c:	202f      	movs	r0, #47	@ 0x2f
 801845e:	f7fd fea5 	bl	80161ac <__NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8018462:	f7fd fe95 	bl	8016190 <__NVIC_GetPriorityGrouping>
 8018466:	4603      	mov	r3, r0
 8018468:	2200      	movs	r2, #0
 801846a:	2107      	movs	r1, #7
 801846c:	4618      	mov	r0, r3
 801846e:	f7fd fee5 	bl	801623c <NVIC_EncodePriority>
 8018472:	4603      	mov	r3, r0
 8018474:	4619      	mov	r1, r3
 8018476:	2039      	movs	r0, #57	@ 0x39
 8018478:	f7fd feb6 	bl	80161e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 801847c:	2039      	movs	r0, #57	@ 0x39
 801847e:	f7fd fe95 	bl	80161ac <__NVIC_EnableIRQ>

  peripherals[2].errorCode = Sys_OK;
 8018482:	4b05      	ldr	r3, [pc, #20]	@ (8018498 <MX_DMA_Init+0xd8>)
 8018484:	2200      	movs	r2, #0
 8018486:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 801848a:	bf00      	nop
 801848c:	3708      	adds	r7, #8
 801848e:	46bd      	mov	sp, r7
 8018490:	bd80      	pop	{r7, pc}
 8018492:	bf00      	nop
 8018494:	58024400 	.word	0x58024400
 8018498:	240148e0 	.word	0x240148e0

0801849c <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel0_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b082      	sub	sp, #8
 80184a0:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 80184a2:	4b2e      	ldr	r3, [pc, #184]	@ (801855c <MX_MDMA_Init+0xc0>)
 80184a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80184a8:	4a2c      	ldr	r2, [pc, #176]	@ (801855c <MX_MDMA_Init+0xc0>)
 80184aa:	f043 0301 	orr.w	r3, r3, #1
 80184ae:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80184b2:	4b2a      	ldr	r3, [pc, #168]	@ (801855c <MX_MDMA_Init+0xc0>)
 80184b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80184b8:	f003 0301 	and.w	r3, r3, #1
 80184bc:	607b      	str	r3, [r7, #4]
 80184be:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel0_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel0_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 80184c0:	4b27      	ldr	r3, [pc, #156]	@ (8018560 <MX_MDMA_Init+0xc4>)
 80184c2:	4a28      	ldr	r2, [pc, #160]	@ (8018564 <MX_MDMA_Init+0xc8>)
 80184c4:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 80184c6:	4b26      	ldr	r3, [pc, #152]	@ (8018560 <MX_MDMA_Init+0xc4>)
 80184c8:	221d      	movs	r2, #29
 80184ca:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80184cc:	4b24      	ldr	r3, [pc, #144]	@ (8018560 <MX_MDMA_Init+0xc4>)
 80184ce:	2200      	movs	r2, #0
 80184d0:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 80184d2:	4b23      	ldr	r3, [pc, #140]	@ (8018560 <MX_MDMA_Init+0xc4>)
 80184d4:	2200      	movs	r2, #0
 80184d6:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80184d8:	4b21      	ldr	r3, [pc, #132]	@ (8018560 <MX_MDMA_Init+0xc4>)
 80184da:	2200      	movs	r2, #0
 80184dc:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80184de:	4b20      	ldr	r3, [pc, #128]	@ (8018560 <MX_MDMA_Init+0xc4>)
 80184e0:	2202      	movs	r2, #2
 80184e2:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80184e4:	4b1e      	ldr	r3, [pc, #120]	@ (8018560 <MX_MDMA_Init+0xc4>)
 80184e6:	2208      	movs	r2, #8
 80184e8:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80184ea:	4b1d      	ldr	r3, [pc, #116]	@ (8018560 <MX_MDMA_Init+0xc4>)
 80184ec:	2200      	movs	r2, #0
 80184ee:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80184f0:	4b1b      	ldr	r3, [pc, #108]	@ (8018560 <MX_MDMA_Init+0xc4>)
 80184f2:	2200      	movs	r2, #0
 80184f4:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80184f6:	4b1a      	ldr	r3, [pc, #104]	@ (8018560 <MX_MDMA_Init+0xc4>)
 80184f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80184fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 80184fe:	4b18      	ldr	r3, [pc, #96]	@ (8018560 <MX_MDMA_Init+0xc4>)
 8018500:	2201      	movs	r2, #1
 8018502:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8018504:	4b16      	ldr	r3, [pc, #88]	@ (8018560 <MX_MDMA_Init+0xc4>)
 8018506:	2200      	movs	r2, #0
 8018508:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 801850a:	4b15      	ldr	r3, [pc, #84]	@ (8018560 <MX_MDMA_Init+0xc4>)
 801850c:	2200      	movs	r2, #0
 801850e:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8018510:	4b13      	ldr	r3, [pc, #76]	@ (8018560 <MX_MDMA_Init+0xc4>)
 8018512:	2200      	movs	r2, #0
 8018514:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8018516:	4b12      	ldr	r3, [pc, #72]	@ (8018560 <MX_MDMA_Init+0xc4>)
 8018518:	2200      	movs	r2, #0
 801851a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel0_sdmmc1_end_data_0) != HAL_OK)
 801851c:	4810      	ldr	r0, [pc, #64]	@ (8018560 <MX_MDMA_Init+0xc4>)
 801851e:	f001 fc1f 	bl	8019d60 <HAL_MDMA_Init>
 8018522:	4603      	mov	r3, r0
 8018524:	2b00      	cmp	r3, #0
 8018526:	d113      	bne.n	8018550 <MX_MDMA_Init+0xb4>
  {
    return;
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel0_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8018528:	2200      	movs	r2, #0
 801852a:	2100      	movs	r1, #0
 801852c:	480c      	ldr	r0, [pc, #48]	@ (8018560 <MX_MDMA_Init+0xc4>)
 801852e:	f001 fc63 	bl	8019df8 <HAL_MDMA_ConfigPostRequestMask>
 8018532:	4603      	mov	r3, r0
 8018534:	2b00      	cmp	r3, #0
 8018536:	d10d      	bne.n	8018554 <MX_MDMA_Init+0xb8>
    return;
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 7, 0);
 8018538:	2200      	movs	r2, #0
 801853a:	2107      	movs	r1, #7
 801853c:	207a      	movs	r0, #122	@ 0x7a
 801853e:	f001 f879 	bl	8019634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8018542:	207a      	movs	r0, #122	@ 0x7a
 8018544:	f001 f890 	bl	8019668 <HAL_NVIC_EnableIRQ>
  peripherals[1].errorCode = Sys_OK;
 8018548:	4b07      	ldr	r3, [pc, #28]	@ (8018568 <MX_MDMA_Init+0xcc>)
 801854a:	2200      	movs	r2, #0
 801854c:	779a      	strb	r2, [r3, #30]
 801854e:	e002      	b.n	8018556 <MX_MDMA_Init+0xba>
    return;
 8018550:	bf00      	nop
 8018552:	e000      	b.n	8018556 <MX_MDMA_Init+0xba>
    return;
 8018554:	bf00      	nop

}
 8018556:	3708      	adds	r7, #8
 8018558:	46bd      	mov	sp, r7
 801855a:	bd80      	pop	{r7, pc}
 801855c:	58024400 	.word	0x58024400
 8018560:	2405a7f4 	.word	0x2405a7f4
 8018564:	52000040 	.word	0x52000040
 8018568:	240148e0 	.word	0x240148e0

0801856c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b086      	sub	sp, #24
 8018570:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018572:	463b      	mov	r3, r7
 8018574:	2200      	movs	r2, #0
 8018576:	601a      	str	r2, [r3, #0]
 8018578:	605a      	str	r2, [r3, #4]
 801857a:	609a      	str	r2, [r3, #8]
 801857c:	60da      	str	r2, [r3, #12]
 801857e:	611a      	str	r2, [r3, #16]
 8018580:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8018582:	2010      	movs	r0, #16
 8018584:	f7fe f8e6 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8018588:	2004      	movs	r0, #4
 801858a:	f7fe f8e3 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 801858e:	2020      	movs	r0, #32
 8018590:	f7fe f8e0 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8018594:	2001      	movs	r0, #1
 8018596:	f7fe f8dd 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 801859a:	2002      	movs	r0, #2
 801859c:	f7fe f8da 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 80185a0:	2008      	movs	r0, #8
 80185a2:	f7fe f8d7 	bl	8016754 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 80185a6:	2040      	movs	r0, #64	@ 0x40
 80185a8:	f7fe f8d4 	bl	8016754 <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, SPI4_FLASH_CS_Pin|SPI4_FRAM_CS_Pin|MCU_SDMMC_SEL_Pin);
 80185ac:	f248 0118 	movw	r1, #32792	@ 0x8018
 80185b0:	485d      	ldr	r0, [pc, #372]	@ (8018728 <MX_GPIO_Init+0x1bc>)
 80185b2:	f7fe f8b2 	bl	801671a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPI6_EXP_CS_GPIO_Port, SPI6_EXP_CS_Pin);
 80185b6:	2110      	movs	r1, #16
 80185b8:	485c      	ldr	r0, [pc, #368]	@ (801872c <MX_GPIO_Init+0x1c0>)
 80185ba:	f7fe f8ae 	bl	801671a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOF, I2C4SCL_BUSY_STATE_Pin|I2C4SDA_READYSEND_STATE_Pin);
 80185be:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80185c2:	485b      	ldr	r0, [pc, #364]	@ (8018730 <MX_GPIO_Init+0x1c4>)
 80185c4:	f7fe f8a9 	bl	801671a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MCU_IO_RESET_CM4_GPIO_Port, MCU_IO_RESET_CM4_Pin);
 80185c8:	2180      	movs	r1, #128	@ 0x80
 80185ca:	485a      	ldr	r0, [pc, #360]	@ (8018734 <MX_GPIO_Init+0x1c8>)
 80185cc:	f7fe f8a5 	bl	801671a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MCU_IO_HUB_RESET_GPIO_Port, MCU_IO_HUB_RESET_Pin);
 80185d0:	2108      	movs	r1, #8
 80185d2:	4859      	ldr	r0, [pc, #356]	@ (8018738 <MX_GPIO_Init+0x1cc>)
 80185d4:	f7fe f8a1 	bl	801671a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Bootloader_DETECT_DOWN_GPIO_Port, Bootloader_DETECT_DOWN_Pin);
 80185d8:	2104      	movs	r1, #4
 80185da:	4858      	ldr	r0, [pc, #352]	@ (801873c <MX_GPIO_Init+0x1d0>)
 80185dc:	f7fe f8ab 	bl	8016736 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, MCU_IO_IRQ_CM4_D1_Pin|MCU_IO_IRQ_CM4_D0_Pin);
 80185e0:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80185e4:	4850      	ldr	r0, [pc, #320]	@ (8018728 <MX_GPIO_Init+0x1bc>)
 80185e6:	f7fe f8a6 	bl	8016736 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, MCU_IO_DEBUG_LED0_Pin|MCU_IO_DEBUG_LED1_Pin|MCU_DETECT_SD_Pin|MCU_WD_DONE_Pin);
 80185ea:	f44f 7164 	mov.w	r1, #912	@ 0x390
 80185ee:	4852      	ldr	r0, [pc, #328]	@ (8018738 <MX_GPIO_Init+0x1cc>)
 80185f0:	f7fe f8a1 	bl	8016736 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOG, Bootloader_DETECT_UPG6_Pin|MCU_IO_GLOBAL_EN_CM4_Pin);
 80185f4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80185f8:	484e      	ldr	r0, [pc, #312]	@ (8018734 <MX_GPIO_Init+0x1c8>)
 80185fa:	f7fe f89c 	bl	8016736 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SPI4_FLASH_CS_Pin|SPI4_FRAM_CS_Pin|MCU_IO_IRQ_CM4_D1_Pin|MCU_IO_IRQ_CM4_D0_Pin
 80185fe:	f648 4318 	movw	r3, #35864	@ 0x8c18
 8018602:	603b      	str	r3, [r7, #0]
                          |MCU_SDMMC_SEL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8018604:	2301      	movs	r3, #1
 8018606:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8018608:	2300      	movs	r3, #0
 801860a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 801860c:	2300      	movs	r3, #0
 801860e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8018610:	2300      	movs	r3, #0
 8018612:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8018614:	463b      	mov	r3, r7
 8018616:	4619      	mov	r1, r3
 8018618:	4843      	ldr	r0, [pc, #268]	@ (8018728 <MX_GPIO_Init+0x1bc>)
 801861a:	f007 fafb 	bl	801fc14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_WD_WAKE_Pin|MCU_IO_RTC_CLKOUT_Pin|MCU_IO_RTC_INT_Pin;
 801861e:	f242 0330 	movw	r3, #8240	@ 0x2030
 8018622:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8018624:	2300      	movs	r3, #0
 8018626:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8018628:	2300      	movs	r3, #0
 801862a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801862c:	463b      	mov	r3, r7
 801862e:	4619      	mov	r1, r3
 8018630:	4843      	ldr	r0, [pc, #268]	@ (8018740 <MX_GPIO_Init+0x1d4>)
 8018632:	f007 faef 	bl	801fc14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI6_EXP_CS_Pin;
 8018636:	2310      	movs	r3, #16
 8018638:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 801863a:	2301      	movs	r3, #1
 801863c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 801863e:	2300      	movs	r3, #0
 8018640:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8018642:	2300      	movs	r3, #0
 8018644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8018646:	2300      	movs	r3, #0
 8018648:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI6_EXP_CS_GPIO_Port, &GPIO_InitStruct);
 801864a:	463b      	mov	r3, r7
 801864c:	4619      	mov	r1, r3
 801864e:	4837      	ldr	r0, [pc, #220]	@ (801872c <MX_GPIO_Init+0x1c0>)
 8018650:	f007 fae0 	bl	801fc14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Bootloader_DETECT_DOWN_Pin;
 8018654:	2304      	movs	r3, #4
 8018656:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8018658:	2301      	movs	r3, #1
 801865a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 801865c:	2300      	movs	r3, #0
 801865e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8018660:	2300      	movs	r3, #0
 8018662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8018664:	2300      	movs	r3, #0
 8018666:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Bootloader_DETECT_DOWN_GPIO_Port, &GPIO_InitStruct);
 8018668:	463b      	mov	r3, r7
 801866a:	4619      	mov	r1, r3
 801866c:	4833      	ldr	r0, [pc, #204]	@ (801873c <MX_GPIO_Init+0x1d0>)
 801866e:	f007 fad1 	bl	801fc14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = I2C4SCL_BUSY_STATE_Pin|I2C4SDA_READYSEND_STATE_Pin;
 8018672:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8018676:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8018678:	2301      	movs	r3, #1
 801867a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 801867c:	2300      	movs	r3, #0
 801867e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8018680:	2300      	movs	r3, #0
 8018682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8018684:	2300      	movs	r3, #0
 8018686:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018688:	463b      	mov	r3, r7
 801868a:	4619      	mov	r1, r3
 801868c:	4828      	ldr	r0, [pc, #160]	@ (8018730 <MX_GPIO_Init+0x1c4>)
 801868e:	f007 fac1 	bl	801fc14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_IO_IRQ_EXP_D1_Pin|MCU_IO_IRQ_EXP_D0_Pin;
 8018692:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8018696:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8018698:	2300      	movs	r3, #0
 801869a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801869c:	2300      	movs	r3, #0
 801869e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80186a0:	463b      	mov	r3, r7
 80186a2:	4619      	mov	r1, r3
 80186a4:	4820      	ldr	r0, [pc, #128]	@ (8018728 <MX_GPIO_Init+0x1bc>)
 80186a6:	f007 fab5 	bl	801fc14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_IO_DEBUG_LED0_Pin|MCU_IO_DEBUG_LED1_Pin|MCU_IO_HUB_RESET_Pin|MCU_DETECT_SD_Pin
 80186aa:	f44f 7366 	mov.w	r3, #920	@ 0x398
 80186ae:	603b      	str	r3, [r7, #0]
                          |MCU_WD_DONE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80186b0:	2301      	movs	r3, #1
 80186b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80186b4:	2300      	movs	r3, #0
 80186b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80186b8:	2300      	movs	r3, #0
 80186ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80186bc:	2300      	movs	r3, #0
 80186be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80186c0:	463b      	mov	r3, r7
 80186c2:	4619      	mov	r1, r3
 80186c4:	481c      	ldr	r0, [pc, #112]	@ (8018738 <MX_GPIO_Init+0x1cc>)
 80186c6:	f007 faa5 	bl	801fc14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Bootloader_DETECT_DOWND11_Pin|Bootloader_DETECT_UP_Pin;
 80186ca:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80186ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80186d0:	2300      	movs	r3, #0
 80186d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80186d4:	2300      	movs	r3, #0
 80186d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80186d8:	463b      	mov	r3, r7
 80186da:	4619      	mov	r1, r3
 80186dc:	4816      	ldr	r0, [pc, #88]	@ (8018738 <MX_GPIO_Init+0x1cc>)
 80186de:	f007 fa99 	bl	801fc14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Bootloader_DETECT_UPG6_Pin|MCU_IO_RESET_CM4_Pin|MCU_IO_GLOBAL_EN_CM4_Pin;
 80186e2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80186e6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80186e8:	2301      	movs	r3, #1
 80186ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80186ec:	2300      	movs	r3, #0
 80186ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80186f0:	2300      	movs	r3, #0
 80186f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80186f4:	2300      	movs	r3, #0
 80186f6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80186f8:	463b      	mov	r3, r7
 80186fa:	4619      	mov	r1, r3
 80186fc:	480d      	ldr	r0, [pc, #52]	@ (8018734 <MX_GPIO_Init+0x1c8>)
 80186fe:	f007 fa89 	bl	801fc14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_I2C1_SCL_Pin|MCU_I2C1_SDA_Pin;
 8018702:	23c0      	movs	r3, #192	@ 0xc0
 8018704:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8018706:	2300      	movs	r3, #0
 8018708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801870a:	2300      	movs	r3, #0
 801870c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801870e:	463b      	mov	r3, r7
 8018710:	4619      	mov	r1, r3
 8018712:	480a      	ldr	r0, [pc, #40]	@ (801873c <MX_GPIO_Init+0x1d0>)
 8018714:	f007 fa7e 	bl	801fc14 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  peripherals[0].errorCode = Sys_OK;
 8018718:	4b0a      	ldr	r3, [pc, #40]	@ (8018744 <MX_GPIO_Init+0x1d8>)
 801871a:	2200      	movs	r2, #0
 801871c:	729a      	strb	r2, [r3, #10]
  /* USER CODE END MX_GPIO_Init_2 */
}
 801871e:	bf00      	nop
 8018720:	3718      	adds	r7, #24
 8018722:	46bd      	mov	sp, r7
 8018724:	bd80      	pop	{r7, pc}
 8018726:	bf00      	nop
 8018728:	58021000 	.word	0x58021000
 801872c:	58020000 	.word	0x58020000
 8018730:	58021400 	.word	0x58021400
 8018734:	58021800 	.word	0x58021800
 8018738:	58020c00 	.word	0x58020c00
 801873c:	58020400 	.word	0x58020400
 8018740:	58020800 	.word	0x58020800
 8018744:	240148e0 	.word	0x240148e0

08018748 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b084      	sub	sp, #16
 801874c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 801874e:	463b      	mov	r3, r7
 8018750:	2200      	movs	r2, #0
 8018752:	601a      	str	r2, [r3, #0]
 8018754:	605a      	str	r2, [r3, #4]
 8018756:	609a      	str	r2, [r3, #8]
 8018758:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 801875a:	f000 ffa1 	bl	80196a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801875e:	2301      	movs	r3, #1
 8018760:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8018762:	2300      	movs	r3, #0
 8018764:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8018766:	2300      	movs	r3, #0
 8018768:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 801876a:	231f      	movs	r3, #31
 801876c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 801876e:	2387      	movs	r3, #135	@ 0x87
 8018770:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8018772:	2300      	movs	r3, #0
 8018774:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8018776:	2300      	movs	r3, #0
 8018778:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 801877a:	2301      	movs	r3, #1
 801877c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 801877e:	2301      	movs	r3, #1
 8018780:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8018782:	2300      	movs	r3, #0
 8018784:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8018786:	2300      	movs	r3, #0
 8018788:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801878a:	463b      	mov	r3, r7
 801878c:	4618      	mov	r0, r3
 801878e:	f000 ffbf 	bl	8019710 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8018792:	2004      	movs	r0, #4
 8018794:	f000 ff9c 	bl	80196d0 <HAL_MPU_Enable>

}
 8018798:	bf00      	nop
 801879a:	3710      	adds	r7, #16
 801879c:	46bd      	mov	sp, r7
 801879e:	bd80      	pop	{r7, pc}

080187a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b082      	sub	sp, #8
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	4a04      	ldr	r2, [pc, #16]	@ (80187c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80187ae:	4293      	cmp	r3, r2
 80187b0:	d101      	bne.n	80187b6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80187b2:	f000 fe13 	bl	80193dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80187b6:	bf00      	nop
 80187b8:	3708      	adds	r7, #8
 80187ba:	46bd      	mov	sp, r7
 80187bc:	bd80      	pop	{r7, pc}
 80187be:	bf00      	nop
 80187c0:	40001400 	.word	0x40001400

080187c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80187c4:	b580      	push	{r7, lr}
 80187c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
	LL_GPIO_SetOutputPin(LED0_Port, LED0);
 80187c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80187cc:	4807      	ldr	r0, [pc, #28]	@ (80187ec <Error_Handler+0x28>)
 80187ce:	f7fd ffa4 	bl	801671a <LL_GPIO_SetOutputPin>
    HAL_Delay(50);
 80187d2:	2032      	movs	r0, #50	@ 0x32
 80187d4:	f000 fe22 	bl	801941c <HAL_Delay>
    LL_GPIO_ResetOutputPin(LED0_Port, LED0);
 80187d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80187dc:	4803      	ldr	r0, [pc, #12]	@ (80187ec <Error_Handler+0x28>)
 80187de:	f7fd ffaa 	bl	8016736 <LL_GPIO_ResetOutputPin>
    HAL_Delay(50);
 80187e2:	2032      	movs	r0, #50	@ 0x32
 80187e4:	f000 fe1a 	bl	801941c <HAL_Delay>
	LL_GPIO_SetOutputPin(LED0_Port, LED0);
 80187e8:	bf00      	nop
 80187ea:	e7ed      	b.n	80187c8 <Error_Handler+0x4>
 80187ec:	58020c00 	.word	0x58020c00

080187f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80187f0:	b480      	push	{r7}
 80187f2:	b083      	sub	sp, #12
 80187f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80187f6:	4b0a      	ldr	r3, [pc, #40]	@ (8018820 <HAL_MspInit+0x30>)
 80187f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80187fc:	4a08      	ldr	r2, [pc, #32]	@ (8018820 <HAL_MspInit+0x30>)
 80187fe:	f043 0302 	orr.w	r3, r3, #2
 8018802:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8018806:	4b06      	ldr	r3, [pc, #24]	@ (8018820 <HAL_MspInit+0x30>)
 8018808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801880c:	f003 0302 	and.w	r3, r3, #2
 8018810:	607b      	str	r3, [r7, #4]
 8018812:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8018814:	bf00      	nop
 8018816:	370c      	adds	r7, #12
 8018818:	46bd      	mov	sp, r7
 801881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881e:	4770      	bx	lr
 8018820:	58024400 	.word	0x58024400

08018824 <HAL_MMC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b0bc      	sub	sp, #240	@ 0xf0
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801882c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8018830:	2200      	movs	r2, #0
 8018832:	601a      	str	r2, [r3, #0]
 8018834:	605a      	str	r2, [r3, #4]
 8018836:	609a      	str	r2, [r3, #8]
 8018838:	60da      	str	r2, [r3, #12]
 801883a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801883c:	f107 0318 	add.w	r3, r7, #24
 8018840:	22c0      	movs	r2, #192	@ 0xc0
 8018842:	2100      	movs	r1, #0
 8018844:	4618      	mov	r0, r3
 8018846:	f009 fc22 	bl	802208e <memset>
  if(hmmc->Instance==SDMMC1)
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	4a4f      	ldr	r2, [pc, #316]	@ (801898c <HAL_MMC_MspInit+0x168>)
 8018850:	4293      	cmp	r3, r2
 8018852:	f040 8097 	bne.w	8018984 <HAL_MMC_MspInit+0x160>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8018856:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801885a:	f04f 0300 	mov.w	r3, #0
 801885e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8018862:	2300      	movs	r3, #0
 8018864:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018866:	f107 0318 	add.w	r3, r7, #24
 801886a:	4618      	mov	r0, r3
 801886c:	f004 f932 	bl	801cad4 <HAL_RCCEx_PeriphCLKConfig>
 8018870:	4603      	mov	r3, r0
 8018872:	2b00      	cmp	r3, #0
 8018874:	d001      	beq.n	801887a <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 8018876:	f7ff ffa5 	bl	80187c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801887a:	4b45      	ldr	r3, [pc, #276]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 801887c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8018880:	4a43      	ldr	r2, [pc, #268]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 8018882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8018886:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 801888a:	4b41      	ldr	r3, [pc, #260]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 801888c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8018890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018894:	617b      	str	r3, [r7, #20]
 8018896:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8018898:	4b3d      	ldr	r3, [pc, #244]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 801889a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801889e:	4a3c      	ldr	r2, [pc, #240]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 80188a0:	f043 0304 	orr.w	r3, r3, #4
 80188a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80188a8:	4b39      	ldr	r3, [pc, #228]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 80188aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80188ae:	f003 0304 	and.w	r3, r3, #4
 80188b2:	613b      	str	r3, [r7, #16]
 80188b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80188b6:	4b36      	ldr	r3, [pc, #216]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 80188b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80188bc:	4a34      	ldr	r2, [pc, #208]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 80188be:	f043 0308 	orr.w	r3, r3, #8
 80188c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80188c6:	4b32      	ldr	r3, [pc, #200]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 80188c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80188cc:	f003 0308 	and.w	r3, r3, #8
 80188d0:	60fb      	str	r3, [r7, #12]
 80188d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80188d4:	4b2e      	ldr	r3, [pc, #184]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 80188d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80188da:	4a2d      	ldr	r2, [pc, #180]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 80188dc:	f043 0302 	orr.w	r3, r3, #2
 80188e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80188e4:	4b2a      	ldr	r3, [pc, #168]	@ (8018990 <HAL_MMC_MspInit+0x16c>)
 80188e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80188ea:	f003 0302 	and.w	r3, r3, #2
 80188ee:	60bb      	str	r3, [r7, #8]
 80188f0:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_D4
    PB9     ------> SDMMC1_D5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80188f2:	f44f 53fe 	mov.w	r3, #8128	@ 0x1fc0
 80188f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80188fa:	2302      	movs	r3, #2
 80188fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018900:	2300      	movs	r3, #0
 8018902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018906:	2303      	movs	r3, #3
 8018908:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 801890c:	230c      	movs	r3, #12
 801890e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8018912:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8018916:	4619      	mov	r1, r3
 8018918:	481e      	ldr	r0, [pc, #120]	@ (8018994 <HAL_MMC_MspInit+0x170>)
 801891a:	f000 ff39 	bl	8019790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801891e:	2304      	movs	r3, #4
 8018920:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018924:	2302      	movs	r3, #2
 8018926:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801892a:	2300      	movs	r3, #0
 801892c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018930:	2303      	movs	r3, #3
 8018932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8018936:	230c      	movs	r3, #12
 8018938:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801893c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8018940:	4619      	mov	r1, r3
 8018942:	4815      	ldr	r0, [pc, #84]	@ (8018998 <HAL_MMC_MspInit+0x174>)
 8018944:	f000 ff24 	bl	8019790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8018948:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801894c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018950:	2302      	movs	r3, #2
 8018952:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018956:	2300      	movs	r3, #0
 8018958:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801895c:	2303      	movs	r3, #3
 801895e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8018962:	230c      	movs	r3, #12
 8018964:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018968:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 801896c:	4619      	mov	r1, r3
 801896e:	480b      	ldr	r0, [pc, #44]	@ (801899c <HAL_MMC_MspInit+0x178>)
 8018970:	f000 ff0e 	bl	8019790 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 8018974:	2200      	movs	r2, #0
 8018976:	2107      	movs	r1, #7
 8018978:	2031      	movs	r0, #49	@ 0x31
 801897a:	f000 fe5b 	bl	8019634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 801897e:	2031      	movs	r0, #49	@ 0x31
 8018980:	f000 fe72 	bl	8019668 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8018984:	bf00      	nop
 8018986:	37f0      	adds	r7, #240	@ 0xf0
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}
 801898c:	52007000 	.word	0x52007000
 8018990:	58024400 	.word	0x58024400
 8018994:	58020800 	.word	0x58020800
 8018998:	58020c00 	.word	0x58020c00
 801899c:	58020400 	.word	0x58020400

080189a0 <HAL_MMC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspDeInit(MMC_HandleTypeDef* hmmc)
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b082      	sub	sp, #8
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
  if(hmmc->Instance==SDMMC1)
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	4a0f      	ldr	r2, [pc, #60]	@ (80189ec <HAL_MMC_MspDeInit+0x4c>)
 80189ae:	4293      	cmp	r3, r2
 80189b0:	d118      	bne.n	80189e4 <HAL_MMC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

    /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 80189b2:	4b0f      	ldr	r3, [pc, #60]	@ (80189f0 <HAL_MMC_MspDeInit+0x50>)
 80189b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80189b8:	4a0d      	ldr	r2, [pc, #52]	@ (80189f0 <HAL_MMC_MspDeInit+0x50>)
 80189ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80189be:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_D4
    PB9     ------> SDMMC1_D5
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80189c2:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 80189c6:	480b      	ldr	r0, [pc, #44]	@ (80189f4 <HAL_MMC_MspDeInit+0x54>)
 80189c8:	f001 f892 	bl	8019af0 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80189cc:	2104      	movs	r1, #4
 80189ce:	480a      	ldr	r0, [pc, #40]	@ (80189f8 <HAL_MMC_MspDeInit+0x58>)
 80189d0:	f001 f88e 	bl	8019af0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80189d4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80189d8:	4808      	ldr	r0, [pc, #32]	@ (80189fc <HAL_MMC_MspDeInit+0x5c>)
 80189da:	f001 f889 	bl	8019af0 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 80189de:	2031      	movs	r0, #49	@ 0x31
 80189e0:	f000 fe50 	bl	8019684 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

    /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 80189e4:	bf00      	nop
 80189e6:	3708      	adds	r7, #8
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd80      	pop	{r7, pc}
 80189ec:	52007000 	.word	0x52007000
 80189f0:	58024400 	.word	0x58024400
 80189f4:	58020800 	.word	0x58020800
 80189f8:	58020c00 	.word	0x58020c00
 80189fc:	58020400 	.word	0x58020400

08018a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b090      	sub	sp, #64	@ 0x40
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	2b0f      	cmp	r3, #15
 8018a0c:	d827      	bhi.n	8018a5e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8018a0e:	2200      	movs	r2, #0
 8018a10:	6879      	ldr	r1, [r7, #4]
 8018a12:	2037      	movs	r0, #55	@ 0x37
 8018a14:	f000 fe0e 	bl	8019634 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8018a18:	2037      	movs	r0, #55	@ 0x37
 8018a1a:	f000 fe25 	bl	8019668 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8018a1e:	4a29      	ldr	r2, [pc, #164]	@ (8018ac4 <HAL_InitTick+0xc4>)
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8018a24:	4b28      	ldr	r3, [pc, #160]	@ (8018ac8 <HAL_InitTick+0xc8>)
 8018a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8018a2a:	4a27      	ldr	r2, [pc, #156]	@ (8018ac8 <HAL_InitTick+0xc8>)
 8018a2c:	f043 0320 	orr.w	r3, r3, #32
 8018a30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8018a34:	4b24      	ldr	r3, [pc, #144]	@ (8018ac8 <HAL_InitTick+0xc8>)
 8018a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8018a3a:	f003 0320 	and.w	r3, r3, #32
 8018a3e:	60fb      	str	r3, [r7, #12]
 8018a40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8018a42:	f107 0210 	add.w	r2, r7, #16
 8018a46:	f107 0314 	add.w	r3, r7, #20
 8018a4a:	4611      	mov	r1, r2
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	f003 ffff 	bl	801ca50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8018a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a54:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8018a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d106      	bne.n	8018a6a <HAL_InitTick+0x6a>
 8018a5c:	e001      	b.n	8018a62 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8018a5e:	2301      	movs	r3, #1
 8018a60:	e02b      	b.n	8018aba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8018a62:	f003 ffdf 	bl	801ca24 <HAL_RCC_GetPCLK1Freq>
 8018a66:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8018a68:	e004      	b.n	8018a74 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8018a6a:	f003 ffdb 	bl	801ca24 <HAL_RCC_GetPCLK1Freq>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	005b      	lsls	r3, r3, #1
 8018a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8018a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a76:	4a15      	ldr	r2, [pc, #84]	@ (8018acc <HAL_InitTick+0xcc>)
 8018a78:	fba2 2303 	umull	r2, r3, r2, r3
 8018a7c:	0c9b      	lsrs	r3, r3, #18
 8018a7e:	3b01      	subs	r3, #1
 8018a80:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8018a82:	4b13      	ldr	r3, [pc, #76]	@ (8018ad0 <HAL_InitTick+0xd0>)
 8018a84:	4a13      	ldr	r2, [pc, #76]	@ (8018ad4 <HAL_InitTick+0xd4>)
 8018a86:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8018a88:	4b11      	ldr	r3, [pc, #68]	@ (8018ad0 <HAL_InitTick+0xd0>)
 8018a8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8018a8e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8018a90:	4a0f      	ldr	r2, [pc, #60]	@ (8018ad0 <HAL_InitTick+0xd0>)
 8018a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a94:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8018a96:	4b0e      	ldr	r3, [pc, #56]	@ (8018ad0 <HAL_InitTick+0xd0>)
 8018a98:	2200      	movs	r2, #0
 8018a9a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8018ad0 <HAL_InitTick+0xd0>)
 8018a9e:	2200      	movs	r2, #0
 8018aa0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8018aa2:	480b      	ldr	r0, [pc, #44]	@ (8018ad0 <HAL_InitTick+0xd0>)
 8018aa4:	f006 fd14 	bl	801f4d0 <HAL_TIM_Base_Init>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d104      	bne.n	8018ab8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8018aae:	4808      	ldr	r0, [pc, #32]	@ (8018ad0 <HAL_InitTick+0xd0>)
 8018ab0:	f006 fd70 	bl	801f594 <HAL_TIM_Base_Start_IT>
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	e000      	b.n	8018aba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8018ab8:	2301      	movs	r3, #1
}
 8018aba:	4618      	mov	r0, r3
 8018abc:	3740      	adds	r7, #64	@ 0x40
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}
 8018ac2:	bf00      	nop
 8018ac4:	240149e4 	.word	0x240149e4
 8018ac8:	58024400 	.word	0x58024400
 8018acc:	431bde83 	.word	0x431bde83
 8018ad0:	2405a860 	.word	0x2405a860
 8018ad4:	40001400 	.word	0x40001400

08018ad8 <LL_USART_IsActiveFlag_IDLE>:
{
 8018ad8:	b480      	push	{r7}
 8018ada:	b083      	sub	sp, #12
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	69db      	ldr	r3, [r3, #28]
 8018ae4:	f003 0310 	and.w	r3, r3, #16
 8018ae8:	2b10      	cmp	r3, #16
 8018aea:	d101      	bne.n	8018af0 <LL_USART_IsActiveFlag_IDLE+0x18>
 8018aec:	2301      	movs	r3, #1
 8018aee:	e000      	b.n	8018af2 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8018af0:	2300      	movs	r3, #0
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	370c      	adds	r7, #12
 8018af6:	46bd      	mov	sp, r7
 8018af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018afc:	4770      	bx	lr

08018afe <LL_USART_ClearFlag_IDLE>:
{
 8018afe:	b480      	push	{r7}
 8018b00:	b083      	sub	sp, #12
 8018b02:	af00      	add	r7, sp, #0
 8018b04:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	2210      	movs	r2, #16
 8018b0a:	621a      	str	r2, [r3, #32]
}
 8018b0c:	bf00      	nop
 8018b0e:	370c      	adds	r7, #12
 8018b10:	46bd      	mov	sp, r7
 8018b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b16:	4770      	bx	lr

08018b18 <LL_USART_IsEnabledIT_IDLE>:
{
 8018b18:	b480      	push	{r7}
 8018b1a:	b083      	sub	sp, #12
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	f003 0310 	and.w	r3, r3, #16
 8018b28:	2b10      	cmp	r3, #16
 8018b2a:	d101      	bne.n	8018b30 <LL_USART_IsEnabledIT_IDLE+0x18>
 8018b2c:	2301      	movs	r3, #1
 8018b2e:	e000      	b.n	8018b32 <LL_USART_IsEnabledIT_IDLE+0x1a>
 8018b30:	2300      	movs	r3, #0
}
 8018b32:	4618      	mov	r0, r3
 8018b34:	370c      	adds	r7, #12
 8018b36:	46bd      	mov	sp, r7
 8018b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3c:	4770      	bx	lr
	...

08018b40 <LL_DMA_EnableStream>:
{
 8018b40:	b480      	push	{r7}
 8018b42:	b085      	sub	sp, #20
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
 8018b48:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8018b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8018b80 <LL_DMA_EnableStream+0x40>)
 8018b50:	683b      	ldr	r3, [r7, #0]
 8018b52:	4413      	add	r3, r2
 8018b54:	781b      	ldrb	r3, [r3, #0]
 8018b56:	461a      	mov	r2, r3
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	4413      	add	r3, r2
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	4908      	ldr	r1, [pc, #32]	@ (8018b80 <LL_DMA_EnableStream+0x40>)
 8018b60:	683a      	ldr	r2, [r7, #0]
 8018b62:	440a      	add	r2, r1
 8018b64:	7812      	ldrb	r2, [r2, #0]
 8018b66:	4611      	mov	r1, r2
 8018b68:	68fa      	ldr	r2, [r7, #12]
 8018b6a:	440a      	add	r2, r1
 8018b6c:	f043 0301 	orr.w	r3, r3, #1
 8018b70:	6013      	str	r3, [r2, #0]
}
 8018b72:	bf00      	nop
 8018b74:	3714      	adds	r7, #20
 8018b76:	46bd      	mov	sp, r7
 8018b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b7c:	4770      	bx	lr
 8018b7e:	bf00      	nop
 8018b80:	0802646c 	.word	0x0802646c

08018b84 <LL_DMA_IsActiveFlag_HT0>:
{
 8018b84:	b480      	push	{r7}
 8018b86:	b083      	sub	sp, #12
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	f003 0310 	and.w	r3, r3, #16
 8018b94:	2b10      	cmp	r3, #16
 8018b96:	d101      	bne.n	8018b9c <LL_DMA_IsActiveFlag_HT0+0x18>
 8018b98:	2301      	movs	r3, #1
 8018b9a:	e000      	b.n	8018b9e <LL_DMA_IsActiveFlag_HT0+0x1a>
 8018b9c:	2300      	movs	r3, #0
}
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	370c      	adds	r7, #12
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba8:	4770      	bx	lr

08018baa <LL_DMA_IsActiveFlag_HT1>:
{
 8018baa:	b480      	push	{r7}
 8018bac:	b083      	sub	sp, #12
 8018bae:	af00      	add	r7, sp, #0
 8018bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF1) == (DMA_LISR_HTIF1)) ? 1UL : 0UL);
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018bbe:	d101      	bne.n	8018bc4 <LL_DMA_IsActiveFlag_HT1+0x1a>
 8018bc0:	2301      	movs	r3, #1
 8018bc2:	e000      	b.n	8018bc6 <LL_DMA_IsActiveFlag_HT1+0x1c>
 8018bc4:	2300      	movs	r3, #0
}
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	370c      	adds	r7, #12
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd0:	4770      	bx	lr

08018bd2 <LL_DMA_IsActiveFlag_TC0>:
{
 8018bd2:	b480      	push	{r7}
 8018bd4:	b083      	sub	sp, #12
 8018bd6:	af00      	add	r7, sp, #0
 8018bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	f003 0320 	and.w	r3, r3, #32
 8018be2:	2b20      	cmp	r3, #32
 8018be4:	d101      	bne.n	8018bea <LL_DMA_IsActiveFlag_TC0+0x18>
 8018be6:	2301      	movs	r3, #1
 8018be8:	e000      	b.n	8018bec <LL_DMA_IsActiveFlag_TC0+0x1a>
 8018bea:	2300      	movs	r3, #0
}
 8018bec:	4618      	mov	r0, r3
 8018bee:	370c      	adds	r7, #12
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf6:	4770      	bx	lr

08018bf8 <LL_DMA_IsActiveFlag_TC1>:
{
 8018bf8:	b480      	push	{r7}
 8018bfa:	b083      	sub	sp, #12
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF1) == (DMA_LISR_TCIF1)) ? 1UL : 0UL);
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018c0c:	d101      	bne.n	8018c12 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8018c0e:	2301      	movs	r3, #1
 8018c10:	e000      	b.n	8018c14 <LL_DMA_IsActiveFlag_TC1+0x1c>
 8018c12:	2300      	movs	r3, #0
}
 8018c14:	4618      	mov	r0, r3
 8018c16:	370c      	adds	r7, #12
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1e:	4770      	bx	lr

08018c20 <LL_DMA_IsActiveFlag_TC7>:
{
 8018c20:	b480      	push	{r7}
 8018c22:	b083      	sub	sp, #12
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->HISR, DMA_HISR_TCIF7) == (DMA_HISR_TCIF7)) ? 1UL : 0UL);
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	685b      	ldr	r3, [r3, #4]
 8018c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018c30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018c34:	d101      	bne.n	8018c3a <LL_DMA_IsActiveFlag_TC7+0x1a>
 8018c36:	2301      	movs	r3, #1
 8018c38:	e000      	b.n	8018c3c <LL_DMA_IsActiveFlag_TC7+0x1c>
 8018c3a:	2300      	movs	r3, #0
}
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	370c      	adds	r7, #12
 8018c40:	46bd      	mov	sp, r7
 8018c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c46:	4770      	bx	lr

08018c48 <LL_DMA_IsActiveFlag_TE0>:
{
 8018c48:	b480      	push	{r7}
 8018c4a:	b083      	sub	sp, #12
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TEIF0) == (DMA_LISR_TEIF0)) ? 1UL : 0UL);
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	f003 0308 	and.w	r3, r3, #8
 8018c58:	2b08      	cmp	r3, #8
 8018c5a:	d101      	bne.n	8018c60 <LL_DMA_IsActiveFlag_TE0+0x18>
 8018c5c:	2301      	movs	r3, #1
 8018c5e:	e000      	b.n	8018c62 <LL_DMA_IsActiveFlag_TE0+0x1a>
 8018c60:	2300      	movs	r3, #0
}
 8018c62:	4618      	mov	r0, r3
 8018c64:	370c      	adds	r7, #12
 8018c66:	46bd      	mov	sp, r7
 8018c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6c:	4770      	bx	lr

08018c6e <LL_DMA_IsActiveFlag_TE1>:
{
 8018c6e:	b480      	push	{r7}
 8018c70:	b083      	sub	sp, #12
 8018c72:	af00      	add	r7, sp, #0
 8018c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TEIF1) == (DMA_LISR_TEIF1)) ? 1UL : 0UL);
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018c7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018c82:	d101      	bne.n	8018c88 <LL_DMA_IsActiveFlag_TE1+0x1a>
 8018c84:	2301      	movs	r3, #1
 8018c86:	e000      	b.n	8018c8a <LL_DMA_IsActiveFlag_TE1+0x1c>
 8018c88:	2300      	movs	r3, #0
}
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	370c      	adds	r7, #12
 8018c8e:	46bd      	mov	sp, r7
 8018c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c94:	4770      	bx	lr

08018c96 <LL_DMA_IsActiveFlag_TE7>:
{
 8018c96:	b480      	push	{r7}
 8018c98:	b083      	sub	sp, #12
 8018c9a:	af00      	add	r7, sp, #0
 8018c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->HISR, DMA_HISR_TEIF7) == (DMA_HISR_TEIF7)) ? 1UL : 0UL);
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	685b      	ldr	r3, [r3, #4]
 8018ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018ca6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8018caa:	d101      	bne.n	8018cb0 <LL_DMA_IsActiveFlag_TE7+0x1a>
 8018cac:	2301      	movs	r3, #1
 8018cae:	e000      	b.n	8018cb2 <LL_DMA_IsActiveFlag_TE7+0x1c>
 8018cb0:	2300      	movs	r3, #0
}
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	370c      	adds	r7, #12
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cbc:	4770      	bx	lr

08018cbe <LL_DMA_ClearFlag_HT0>:
{
 8018cbe:	b480      	push	{r7}
 8018cc0:	b083      	sub	sp, #12
 8018cc2:	af00      	add	r7, sp, #0
 8018cc4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	2210      	movs	r2, #16
 8018cca:	609a      	str	r2, [r3, #8]
}
 8018ccc:	bf00      	nop
 8018cce:	370c      	adds	r7, #12
 8018cd0:	46bd      	mov	sp, r7
 8018cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd6:	4770      	bx	lr

08018cd8 <LL_DMA_ClearFlag_HT1>:
{
 8018cd8:	b480      	push	{r7}
 8018cda:	b083      	sub	sp, #12
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018ce6:	609a      	str	r2, [r3, #8]
}
 8018ce8:	bf00      	nop
 8018cea:	370c      	adds	r7, #12
 8018cec:	46bd      	mov	sp, r7
 8018cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf2:	4770      	bx	lr

08018cf4 <LL_DMA_ClearFlag_TC0>:
{
 8018cf4:	b480      	push	{r7}
 8018cf6:	b083      	sub	sp, #12
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	2220      	movs	r2, #32
 8018d00:	609a      	str	r2, [r3, #8]
}
 8018d02:	bf00      	nop
 8018d04:	370c      	adds	r7, #12
 8018d06:	46bd      	mov	sp, r7
 8018d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d0c:	4770      	bx	lr

08018d0e <LL_DMA_ClearFlag_TC1>:
{
 8018d0e:	b480      	push	{r7}
 8018d10:	b083      	sub	sp, #12
 8018d12:	af00      	add	r7, sp, #0
 8018d14:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018d1c:	609a      	str	r2, [r3, #8]
}
 8018d1e:	bf00      	nop
 8018d20:	370c      	adds	r7, #12
 8018d22:	46bd      	mov	sp, r7
 8018d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d28:	4770      	bx	lr

08018d2a <LL_DMA_ClearFlag_TC7>:
{
 8018d2a:	b480      	push	{r7}
 8018d2c:	b083      	sub	sp, #12
 8018d2e:	af00      	add	r7, sp, #0
 8018d30:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTCIF7);
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8018d38:	60da      	str	r2, [r3, #12]
}
 8018d3a:	bf00      	nop
 8018d3c:	370c      	adds	r7, #12
 8018d3e:	46bd      	mov	sp, r7
 8018d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d44:	4770      	bx	lr

08018d46 <LL_DMA_ClearFlag_TE0>:
{
 8018d46:	b480      	push	{r7}
 8018d48:	b083      	sub	sp, #12
 8018d4a:	af00      	add	r7, sp, #0
 8018d4c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTEIF0);
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	2208      	movs	r2, #8
 8018d52:	609a      	str	r2, [r3, #8]
}
 8018d54:	bf00      	nop
 8018d56:	370c      	adds	r7, #12
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d5e:	4770      	bx	lr

08018d60 <LL_DMA_ClearFlag_TE1>:
{
 8018d60:	b480      	push	{r7}
 8018d62:	b083      	sub	sp, #12
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTEIF1);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018d6e:	609a      	str	r2, [r3, #8]
}
 8018d70:	bf00      	nop
 8018d72:	370c      	adds	r7, #12
 8018d74:	46bd      	mov	sp, r7
 8018d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7a:	4770      	bx	lr

08018d7c <LL_DMA_ClearFlag_TE7>:
{
 8018d7c:	b480      	push	{r7}
 8018d7e:	b083      	sub	sp, #12
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTEIF7);
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8018d8a:	60da      	str	r2, [r3, #12]
}
 8018d8c:	bf00      	nop
 8018d8e:	370c      	adds	r7, #12
 8018d90:	46bd      	mov	sp, r7
 8018d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d96:	4770      	bx	lr

08018d98 <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8018d98:	b480      	push	{r7}
 8018d9a:	b085      	sub	sp, #20
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	6078      	str	r0, [r7, #4]
 8018da0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE) == DMA_SxCR_HTIE) ? 1UL : 0UL);
 8018da6:	4a0a      	ldr	r2, [pc, #40]	@ (8018dd0 <LL_DMA_IsEnabledIT_HT+0x38>)
 8018da8:	683b      	ldr	r3, [r7, #0]
 8018daa:	4413      	add	r3, r2
 8018dac:	781b      	ldrb	r3, [r3, #0]
 8018dae:	461a      	mov	r2, r3
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	4413      	add	r3, r2
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	f003 0308 	and.w	r3, r3, #8
 8018dba:	2b08      	cmp	r3, #8
 8018dbc:	d101      	bne.n	8018dc2 <LL_DMA_IsEnabledIT_HT+0x2a>
 8018dbe:	2301      	movs	r3, #1
 8018dc0:	e000      	b.n	8018dc4 <LL_DMA_IsEnabledIT_HT+0x2c>
 8018dc2:	2300      	movs	r3, #0
}
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	3714      	adds	r7, #20
 8018dc8:	46bd      	mov	sp, r7
 8018dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dce:	4770      	bx	lr
 8018dd0:	0802646c 	.word	0x0802646c

08018dd4 <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8018dd4:	b480      	push	{r7}
 8018dd6:	b085      	sub	sp, #20
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	6078      	str	r0, [r7, #4]
 8018ddc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE) == DMA_SxCR_TEIE) ? 1UL : 0UL);
 8018de2:	4a0a      	ldr	r2, [pc, #40]	@ (8018e0c <LL_DMA_IsEnabledIT_TE+0x38>)
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	4413      	add	r3, r2
 8018de8:	781b      	ldrb	r3, [r3, #0]
 8018dea:	461a      	mov	r2, r3
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	4413      	add	r3, r2
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	f003 0304 	and.w	r3, r3, #4
 8018df6:	2b04      	cmp	r3, #4
 8018df8:	d101      	bne.n	8018dfe <LL_DMA_IsEnabledIT_TE+0x2a>
 8018dfa:	2301      	movs	r3, #1
 8018dfc:	e000      	b.n	8018e00 <LL_DMA_IsEnabledIT_TE+0x2c>
 8018dfe:	2300      	movs	r3, #0
}
 8018e00:	4618      	mov	r0, r3
 8018e02:	3714      	adds	r7, #20
 8018e04:	46bd      	mov	sp, r7
 8018e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0a:	4770      	bx	lr
 8018e0c:	0802646c 	.word	0x0802646c

08018e10 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8018e10:	b480      	push	{r7}
 8018e12:	b085      	sub	sp, #20
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
 8018e18:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE) ? 1UL : 0UL);
 8018e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8018e48 <LL_DMA_IsEnabledIT_TC+0x38>)
 8018e20:	683b      	ldr	r3, [r7, #0]
 8018e22:	4413      	add	r3, r2
 8018e24:	781b      	ldrb	r3, [r3, #0]
 8018e26:	461a      	mov	r2, r3
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	4413      	add	r3, r2
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	f003 0310 	and.w	r3, r3, #16
 8018e32:	2b10      	cmp	r3, #16
 8018e34:	d101      	bne.n	8018e3a <LL_DMA_IsEnabledIT_TC+0x2a>
 8018e36:	2301      	movs	r3, #1
 8018e38:	e000      	b.n	8018e3c <LL_DMA_IsEnabledIT_TC+0x2c>
 8018e3a:	2300      	movs	r3, #0
}
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	3714      	adds	r7, #20
 8018e40:	46bd      	mov	sp, r7
 8018e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e46:	4770      	bx	lr
 8018e48:	0802646c 	.word	0x0802646c

08018e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018e4c:	b480      	push	{r7}
 8018e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8018e50:	bf00      	nop
 8018e52:	e7fd      	b.n	8018e50 <NMI_Handler+0x4>

08018e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8018e54:	b480      	push	{r7}
 8018e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8018e58:	bf00      	nop
 8018e5a:	e7fd      	b.n	8018e58 <HardFault_Handler+0x4>

08018e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018e5c:	b480      	push	{r7}
 8018e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018e60:	bf00      	nop
 8018e62:	e7fd      	b.n	8018e60 <MemManage_Handler+0x4>

08018e64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8018e64:	b480      	push	{r7}
 8018e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8018e68:	bf00      	nop
 8018e6a:	e7fd      	b.n	8018e68 <BusFault_Handler+0x4>

08018e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8018e6c:	b480      	push	{r7}
 8018e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018e70:	bf00      	nop
 8018e72:	e7fd      	b.n	8018e70 <UsageFault_Handler+0x4>

08018e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018e74:	b480      	push	{r7}
 8018e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018e78:	bf00      	nop
 8018e7a:	46bd      	mov	sp, r7
 8018e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e80:	4770      	bx	lr
	...

08018e84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA1, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_HT0(DMA1))
 8018e88:	2100      	movs	r1, #0
 8018e8a:	481d      	ldr	r0, [pc, #116]	@ (8018f00 <DMA1_Stream0_IRQHandler+0x7c>)
 8018e8c:	f7ff ff84 	bl	8018d98 <LL_DMA_IsEnabledIT_HT>
 8018e90:	4603      	mov	r3, r0
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d00b      	beq.n	8018eae <DMA1_Stream0_IRQHandler+0x2a>
 8018e96:	481a      	ldr	r0, [pc, #104]	@ (8018f00 <DMA1_Stream0_IRQHandler+0x7c>)
 8018e98:	f7ff fe74 	bl	8018b84 <LL_DMA_IsActiveFlag_HT0>
 8018e9c:	4603      	mov	r3, r0
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d005      	beq.n	8018eae <DMA1_Stream0_IRQHandler+0x2a>
  {
     LL_DMA_ClearFlag_HT0(DMA1);
 8018ea2:	4817      	ldr	r0, [pc, #92]	@ (8018f00 <DMA1_Stream0_IRQHandler+0x7c>)
 8018ea4:	f7ff ff0b 	bl	8018cbe <LL_DMA_ClearFlag_HT0>
     UART_DMA_Rx_Check(USART1);
 8018ea8:	4816      	ldr	r0, [pc, #88]	@ (8018f04 <DMA1_Stream0_IRQHandler+0x80>)
 8018eaa:	f7e9 fcbd 	bl	8002828 <UART_DMA_Rx_Check>
  }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TC0(DMA1))
 8018eae:	2100      	movs	r1, #0
 8018eb0:	4813      	ldr	r0, [pc, #76]	@ (8018f00 <DMA1_Stream0_IRQHandler+0x7c>)
 8018eb2:	f7ff ffad 	bl	8018e10 <LL_DMA_IsEnabledIT_TC>
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d00b      	beq.n	8018ed4 <DMA1_Stream0_IRQHandler+0x50>
 8018ebc:	4810      	ldr	r0, [pc, #64]	@ (8018f00 <DMA1_Stream0_IRQHandler+0x7c>)
 8018ebe:	f7ff fe88 	bl	8018bd2 <LL_DMA_IsActiveFlag_TC0>
 8018ec2:	4603      	mov	r3, r0
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d005      	beq.n	8018ed4 <DMA1_Stream0_IRQHandler+0x50>
  {
     LL_DMA_ClearFlag_TC0(DMA1);
 8018ec8:	480d      	ldr	r0, [pc, #52]	@ (8018f00 <DMA1_Stream0_IRQHandler+0x7c>)
 8018eca:	f7ff ff13 	bl	8018cf4 <LL_DMA_ClearFlag_TC0>
     UART_DMA_Rx_Check(USART1);
 8018ece:	480d      	ldr	r0, [pc, #52]	@ (8018f04 <DMA1_Stream0_IRQHandler+0x80>)
 8018ed0:	f7e9 fcaa 	bl	8002828 <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TE0(DMA1))
 8018ed4:	2100      	movs	r1, #0
 8018ed6:	480a      	ldr	r0, [pc, #40]	@ (8018f00 <DMA1_Stream0_IRQHandler+0x7c>)
 8018ed8:	f7ff ff7c 	bl	8018dd4 <LL_DMA_IsEnabledIT_TE>
 8018edc:	4603      	mov	r3, r0
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d00c      	beq.n	8018efc <DMA1_Stream0_IRQHandler+0x78>
 8018ee2:	4807      	ldr	r0, [pc, #28]	@ (8018f00 <DMA1_Stream0_IRQHandler+0x7c>)
 8018ee4:	f7ff feb0 	bl	8018c48 <LL_DMA_IsActiveFlag_TE0>
 8018ee8:	4603      	mov	r3, r0
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d006      	beq.n	8018efc <DMA1_Stream0_IRQHandler+0x78>
  {
     LL_DMA_ClearFlag_TE0(DMA1);
 8018eee:	4804      	ldr	r0, [pc, #16]	@ (8018f00 <DMA1_Stream0_IRQHandler+0x7c>)
 8018ef0:	f7ff ff29 	bl	8018d46 <LL_DMA_ClearFlag_TE0>
     LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_0);
 8018ef4:	2100      	movs	r1, #0
 8018ef6:	4802      	ldr	r0, [pc, #8]	@ (8018f00 <DMA1_Stream0_IRQHandler+0x7c>)
 8018ef8:	f7ff fe22 	bl	8018b40 <LL_DMA_EnableStream>
  }

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8018efc:	bf00      	nop
 8018efe:	bd80      	pop	{r7, pc}
 8018f00:	40020000 	.word	0x40020000
 8018f04:	40011000 	.word	0x40011000

08018f08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_HT1(DMA1))
 8018f0c:	2101      	movs	r1, #1
 8018f0e:	481d      	ldr	r0, [pc, #116]	@ (8018f84 <DMA1_Stream1_IRQHandler+0x7c>)
 8018f10:	f7ff ff42 	bl	8018d98 <LL_DMA_IsEnabledIT_HT>
 8018f14:	4603      	mov	r3, r0
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d00b      	beq.n	8018f32 <DMA1_Stream1_IRQHandler+0x2a>
 8018f1a:	481a      	ldr	r0, [pc, #104]	@ (8018f84 <DMA1_Stream1_IRQHandler+0x7c>)
 8018f1c:	f7ff fe45 	bl	8018baa <LL_DMA_IsActiveFlag_HT1>
 8018f20:	4603      	mov	r3, r0
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d005      	beq.n	8018f32 <DMA1_Stream1_IRQHandler+0x2a>
  {
     LL_DMA_ClearFlag_HT1(DMA1);
 8018f26:	4817      	ldr	r0, [pc, #92]	@ (8018f84 <DMA1_Stream1_IRQHandler+0x7c>)
 8018f28:	f7ff fed6 	bl	8018cd8 <LL_DMA_ClearFlag_HT1>
     UART_DMA_Rx_Check(USART2);
 8018f2c:	4816      	ldr	r0, [pc, #88]	@ (8018f88 <DMA1_Stream1_IRQHandler+0x80>)
 8018f2e:	f7e9 fc7b 	bl	8002828 <UART_DMA_Rx_Check>
  }
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TC1(DMA1))
 8018f32:	2101      	movs	r1, #1
 8018f34:	4813      	ldr	r0, [pc, #76]	@ (8018f84 <DMA1_Stream1_IRQHandler+0x7c>)
 8018f36:	f7ff ff6b 	bl	8018e10 <LL_DMA_IsEnabledIT_TC>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d00b      	beq.n	8018f58 <DMA1_Stream1_IRQHandler+0x50>
 8018f40:	4810      	ldr	r0, [pc, #64]	@ (8018f84 <DMA1_Stream1_IRQHandler+0x7c>)
 8018f42:	f7ff fe59 	bl	8018bf8 <LL_DMA_IsActiveFlag_TC1>
 8018f46:	4603      	mov	r3, r0
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d005      	beq.n	8018f58 <DMA1_Stream1_IRQHandler+0x50>
  {
     LL_DMA_ClearFlag_TC1(DMA1);
 8018f4c:	480d      	ldr	r0, [pc, #52]	@ (8018f84 <DMA1_Stream1_IRQHandler+0x7c>)
 8018f4e:	f7ff fede 	bl	8018d0e <LL_DMA_ClearFlag_TC1>
     UART_DMA_Rx_Check(USART2);
 8018f52:	480d      	ldr	r0, [pc, #52]	@ (8018f88 <DMA1_Stream1_IRQHandler+0x80>)
 8018f54:	f7e9 fc68 	bl	8002828 <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TE1(DMA1))
 8018f58:	2101      	movs	r1, #1
 8018f5a:	480a      	ldr	r0, [pc, #40]	@ (8018f84 <DMA1_Stream1_IRQHandler+0x7c>)
 8018f5c:	f7ff ff3a 	bl	8018dd4 <LL_DMA_IsEnabledIT_TE>
 8018f60:	4603      	mov	r3, r0
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d00c      	beq.n	8018f80 <DMA1_Stream1_IRQHandler+0x78>
 8018f66:	4807      	ldr	r0, [pc, #28]	@ (8018f84 <DMA1_Stream1_IRQHandler+0x7c>)
 8018f68:	f7ff fe81 	bl	8018c6e <LL_DMA_IsActiveFlag_TE1>
 8018f6c:	4603      	mov	r3, r0
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d006      	beq.n	8018f80 <DMA1_Stream1_IRQHandler+0x78>
  {
     LL_DMA_ClearFlag_TE1(DMA1);
 8018f72:	4804      	ldr	r0, [pc, #16]	@ (8018f84 <DMA1_Stream1_IRQHandler+0x7c>)
 8018f74:	f7ff fef4 	bl	8018d60 <LL_DMA_ClearFlag_TE1>
     LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 8018f78:	2101      	movs	r1, #1
 8018f7a:	4802      	ldr	r0, [pc, #8]	@ (8018f84 <DMA1_Stream1_IRQHandler+0x7c>)
 8018f7c:	f7ff fde0 	bl	8018b40 <LL_DMA_EnableStream>
  }
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8018f80:	bf00      	nop
 8018f82:	bd80      	pop	{r7, pc}
 8018f84:	40020000 	.word	0x40020000
 8018f88:	40004400 	.word	0x40004400

08018f8c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	 TickTimer_IRQHandler();
 8018f90:	f7f1 fc46 	bl	800a820 <TickTimer_IRQHandler>
  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8018f94:	bf00      	nop
 8018f96:	bd80      	pop	{r7, pc}

08018f98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1))
 8018f9c:	480b      	ldr	r0, [pc, #44]	@ (8018fcc <USART1_IRQHandler+0x34>)
 8018f9e:	f7ff fdbb 	bl	8018b18 <LL_USART_IsEnabledIT_IDLE>
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d00b      	beq.n	8018fc0 <USART1_IRQHandler+0x28>
 8018fa8:	4808      	ldr	r0, [pc, #32]	@ (8018fcc <USART1_IRQHandler+0x34>)
 8018faa:	f7ff fd95 	bl	8018ad8 <LL_USART_IsActiveFlag_IDLE>
 8018fae:	4603      	mov	r3, r0
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d005      	beq.n	8018fc0 <USART1_IRQHandler+0x28>
  {
     LL_USART_ClearFlag_IDLE(USART1);
 8018fb4:	4805      	ldr	r0, [pc, #20]	@ (8018fcc <USART1_IRQHandler+0x34>)
 8018fb6:	f7ff fda2 	bl	8018afe <LL_USART_ClearFlag_IDLE>
     UART_DMA_Rx_Check(USART1);
 8018fba:	4804      	ldr	r0, [pc, #16]	@ (8018fcc <USART1_IRQHandler+0x34>)
 8018fbc:	f7e9 fc34 	bl	8002828 <UART_DMA_Rx_Check>
  }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Driver_TX_ISR(USART1);
 8018fc0:	4802      	ldr	r0, [pc, #8]	@ (8018fcc <USART1_IRQHandler+0x34>)
 8018fc2:	f7e9 fbdf 	bl	8002784 <UART_Driver_TX_ISR>
  /* USER CODE END USART1_IRQn 1 */
}
 8018fc6:	bf00      	nop
 8018fc8:	bd80      	pop	{r7, pc}
 8018fca:	bf00      	nop
 8018fcc:	40011000 	.word	0x40011000

08018fd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(USART2) && LL_USART_IsActiveFlag_IDLE(USART2))
 8018fd4:	480b      	ldr	r0, [pc, #44]	@ (8019004 <USART2_IRQHandler+0x34>)
 8018fd6:	f7ff fd9f 	bl	8018b18 <LL_USART_IsEnabledIT_IDLE>
 8018fda:	4603      	mov	r3, r0
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d00b      	beq.n	8018ff8 <USART2_IRQHandler+0x28>
 8018fe0:	4808      	ldr	r0, [pc, #32]	@ (8019004 <USART2_IRQHandler+0x34>)
 8018fe2:	f7ff fd79 	bl	8018ad8 <LL_USART_IsActiveFlag_IDLE>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d005      	beq.n	8018ff8 <USART2_IRQHandler+0x28>
  {
	 LL_USART_ClearFlag_IDLE(USART2);
 8018fec:	4805      	ldr	r0, [pc, #20]	@ (8019004 <USART2_IRQHandler+0x34>)
 8018fee:	f7ff fd86 	bl	8018afe <LL_USART_ClearFlag_IDLE>
     UART_DMA_Rx_Check(USART2);
 8018ff2:	4804      	ldr	r0, [pc, #16]	@ (8019004 <USART2_IRQHandler+0x34>)
 8018ff4:	f7e9 fc18 	bl	8002828 <UART_DMA_Rx_Check>
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */
  UART_Driver_TX_ISR(USART2);
 8018ff8:	4802      	ldr	r0, [pc, #8]	@ (8019004 <USART2_IRQHandler+0x34>)
 8018ffa:	f7e9 fbc3 	bl	8002784 <UART_Driver_TX_ISR>
  /* USER CODE END USART2_IRQn 1 */
}
 8018ffe:	bf00      	nop
 8019000:	bd80      	pop	{r7, pc}
 8019002:	bf00      	nop
 8019004:	40004400 	.word	0x40004400

08019008 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC7(DMA1))
 801900c:	480f      	ldr	r0, [pc, #60]	@ (801904c <DMA1_Stream7_IRQHandler+0x44>)
 801900e:	f7ff fe07 	bl	8018c20 <LL_DMA_IsActiveFlag_TC7>
 8019012:	4603      	mov	r3, r0
 8019014:	2b00      	cmp	r3, #0
 8019016:	d007      	beq.n	8019028 <DMA1_Stream7_IRQHandler+0x20>
  {
      LL_DMA_ClearFlag_TC7(DMA1);
 8019018:	480c      	ldr	r0, [pc, #48]	@ (801904c <DMA1_Stream7_IRQHandler+0x44>)
 801901a:	f7ff fe86 	bl	8018d2a <LL_DMA_ClearFlag_TC7>
      SPI_SlaveDevice_SetTransferState(SPI_TRANSFER_COMPLETE);
 801901e:	2001      	movs	r0, #1
 8019020:	f7f0 fdb6 	bl	8009b90 <SPI_SlaveDevice_SetTransferState>
      SPI_SlaveDevice_Disable();
 8019024:	f7f0 fd8a 	bl	8009b3c <SPI_SlaveDevice_Disable>
  }
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */
  if (LL_DMA_IsActiveFlag_TE7(DMA1))
 8019028:	4808      	ldr	r0, [pc, #32]	@ (801904c <DMA1_Stream7_IRQHandler+0x44>)
 801902a:	f7ff fe34 	bl	8018c96 <LL_DMA_IsActiveFlag_TE7>
 801902e:	4603      	mov	r3, r0
 8019030:	2b00      	cmp	r3, #0
 8019032:	d008      	beq.n	8019046 <DMA1_Stream7_IRQHandler+0x3e>
  {
      LL_DMA_ClearFlag_TE7(DMA1);
 8019034:	4805      	ldr	r0, [pc, #20]	@ (801904c <DMA1_Stream7_IRQHandler+0x44>)
 8019036:	f7ff fea1 	bl	8018d7c <LL_DMA_ClearFlag_TE7>
      SPI_SlaveDevice_SetTransferState(SPI_TRANSFER_ERROR);
 801903a:	2002      	movs	r0, #2
 801903c:	f7f0 fda8 	bl	8009b90 <SPI_SlaveDevice_SetTransferState>
      toCM4_SetState(TOCM4_ERROR);
 8019040:	2000      	movs	r0, #0
 8019042:	f7e7 fd15 	bl	8000a70 <toCM4_SetState>
  }
  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8019046:	bf00      	nop
 8019048:	bd80      	pop	{r7, pc}
 801904a:	bf00      	nop
 801904c:	40020000 	.word	0x40020000

08019050 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_MMC_IRQHandler(&hmmc1);
 8019054:	4802      	ldr	r0, [pc, #8]	@ (8019060 <SDMMC1_IRQHandler+0x10>)
 8019056:	f001 fb93 	bl	801a780 <HAL_MMC_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 801905a:	bf00      	nop
 801905c:	bd80      	pop	{r7, pc}
 801905e:	bf00      	nop
 8019060:	2405a57c 	.word	0x2405a57c

08019064 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8019064:	b580      	push	{r7, lr}
 8019066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8019068:	4802      	ldr	r0, [pc, #8]	@ (8019074 <TIM7_IRQHandler+0x10>)
 801906a:	f006 fb0b 	bl	801f684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 801906e:	bf00      	nop
 8019070:	bd80      	pop	{r7, pc}
 8019072:	bf00      	nop
 8019074:	2405a860 	.word	0x2405a860

08019078 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA2, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_HT1(DMA2))
 801907c:	2101      	movs	r1, #1
 801907e:	481d      	ldr	r0, [pc, #116]	@ (80190f4 <DMA2_Stream1_IRQHandler+0x7c>)
 8019080:	f7ff fe8a 	bl	8018d98 <LL_DMA_IsEnabledIT_HT>
 8019084:	4603      	mov	r3, r0
 8019086:	2b00      	cmp	r3, #0
 8019088:	d00b      	beq.n	80190a2 <DMA2_Stream1_IRQHandler+0x2a>
 801908a:	481a      	ldr	r0, [pc, #104]	@ (80190f4 <DMA2_Stream1_IRQHandler+0x7c>)
 801908c:	f7ff fd8d 	bl	8018baa <LL_DMA_IsActiveFlag_HT1>
 8019090:	4603      	mov	r3, r0
 8019092:	2b00      	cmp	r3, #0
 8019094:	d005      	beq.n	80190a2 <DMA2_Stream1_IRQHandler+0x2a>
  {
     LL_DMA_ClearFlag_HT1(DMA2);
 8019096:	4817      	ldr	r0, [pc, #92]	@ (80190f4 <DMA2_Stream1_IRQHandler+0x7c>)
 8019098:	f7ff fe1e 	bl	8018cd8 <LL_DMA_ClearFlag_HT1>
     UART_DMA_Rx_Check(UART7);
 801909c:	4816      	ldr	r0, [pc, #88]	@ (80190f8 <DMA2_Stream1_IRQHandler+0x80>)
 801909e:	f7e9 fbc3 	bl	8002828 <UART_DMA_Rx_Check>
  }
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  if (LL_DMA_IsEnabledIT_TC(DMA2, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TC1(DMA2))
 80190a2:	2101      	movs	r1, #1
 80190a4:	4813      	ldr	r0, [pc, #76]	@ (80190f4 <DMA2_Stream1_IRQHandler+0x7c>)
 80190a6:	f7ff feb3 	bl	8018e10 <LL_DMA_IsEnabledIT_TC>
 80190aa:	4603      	mov	r3, r0
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d00b      	beq.n	80190c8 <DMA2_Stream1_IRQHandler+0x50>
 80190b0:	4810      	ldr	r0, [pc, #64]	@ (80190f4 <DMA2_Stream1_IRQHandler+0x7c>)
 80190b2:	f7ff fda1 	bl	8018bf8 <LL_DMA_IsActiveFlag_TC1>
 80190b6:	4603      	mov	r3, r0
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d005      	beq.n	80190c8 <DMA2_Stream1_IRQHandler+0x50>
  {
     LL_DMA_ClearFlag_TC1(DMA2);
 80190bc:	480d      	ldr	r0, [pc, #52]	@ (80190f4 <DMA2_Stream1_IRQHandler+0x7c>)
 80190be:	f7ff fe26 	bl	8018d0e <LL_DMA_ClearFlag_TC1>
     UART_DMA_Rx_Check(UART7);
 80190c2:	480d      	ldr	r0, [pc, #52]	@ (80190f8 <DMA2_Stream1_IRQHandler+0x80>)
 80190c4:	f7e9 fbb0 	bl	8002828 <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA2, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TE1(DMA2))
 80190c8:	2101      	movs	r1, #1
 80190ca:	480a      	ldr	r0, [pc, #40]	@ (80190f4 <DMA2_Stream1_IRQHandler+0x7c>)
 80190cc:	f7ff fe82 	bl	8018dd4 <LL_DMA_IsEnabledIT_TE>
 80190d0:	4603      	mov	r3, r0
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d00c      	beq.n	80190f0 <DMA2_Stream1_IRQHandler+0x78>
 80190d6:	4807      	ldr	r0, [pc, #28]	@ (80190f4 <DMA2_Stream1_IRQHandler+0x7c>)
 80190d8:	f7ff fdc9 	bl	8018c6e <LL_DMA_IsActiveFlag_TE1>
 80190dc:	4603      	mov	r3, r0
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d006      	beq.n	80190f0 <DMA2_Stream1_IRQHandler+0x78>
  {
     LL_DMA_ClearFlag_TE1(DMA2);
 80190e2:	4804      	ldr	r0, [pc, #16]	@ (80190f4 <DMA2_Stream1_IRQHandler+0x7c>)
 80190e4:	f7ff fe3c 	bl	8018d60 <LL_DMA_ClearFlag_TE1>
     LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 80190e8:	2101      	movs	r1, #1
 80190ea:	4802      	ldr	r0, [pc, #8]	@ (80190f4 <DMA2_Stream1_IRQHandler+0x7c>)
 80190ec:	f7ff fd28 	bl	8018b40 <LL_DMA_EnableStream>
  }
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80190f0:	bf00      	nop
 80190f2:	bd80      	pop	{r7, pc}
 80190f4:	40020400 	.word	0x40020400
 80190f8:	40007800 	.word	0x40007800

080190fc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(UART7) && LL_USART_IsActiveFlag_IDLE(UART7))
 8019100:	480b      	ldr	r0, [pc, #44]	@ (8019130 <UART7_IRQHandler+0x34>)
 8019102:	f7ff fd09 	bl	8018b18 <LL_USART_IsEnabledIT_IDLE>
 8019106:	4603      	mov	r3, r0
 8019108:	2b00      	cmp	r3, #0
 801910a:	d00b      	beq.n	8019124 <UART7_IRQHandler+0x28>
 801910c:	4808      	ldr	r0, [pc, #32]	@ (8019130 <UART7_IRQHandler+0x34>)
 801910e:	f7ff fce3 	bl	8018ad8 <LL_USART_IsActiveFlag_IDLE>
 8019112:	4603      	mov	r3, r0
 8019114:	2b00      	cmp	r3, #0
 8019116:	d005      	beq.n	8019124 <UART7_IRQHandler+0x28>
  {
	 LL_USART_ClearFlag_IDLE(UART7);
 8019118:	4805      	ldr	r0, [pc, #20]	@ (8019130 <UART7_IRQHandler+0x34>)
 801911a:	f7ff fcf0 	bl	8018afe <LL_USART_ClearFlag_IDLE>
	 UART_DMA_Rx_Check(UART7);
 801911e:	4804      	ldr	r0, [pc, #16]	@ (8019130 <UART7_IRQHandler+0x34>)
 8019120:	f7e9 fb82 	bl	8002828 <UART_DMA_Rx_Check>
  }
  /* USER CODE END UART7_IRQn 0 */
  /* USER CODE BEGIN UART7_IRQn 1 */
  UART_Driver_TX_ISR(UART7);
 8019124:	4802      	ldr	r0, [pc, #8]	@ (8019130 <UART7_IRQHandler+0x34>)
 8019126:	f7e9 fb2d 	bl	8002784 <UART_Driver_TX_ISR>
  /* USER CODE END UART7_IRQn 1 */
}
 801912a:	bf00      	nop
 801912c:	bd80      	pop	{r7, pc}
 801912e:	bf00      	nop
 8019130:	40007800 	.word	0x40007800

08019134 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8019134:	b480      	push	{r7}
 8019136:	af00      	add	r7, sp, #0

  /* USER CODE END SPI5_IRQn 0 */
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8019138:	bf00      	nop
 801913a:	46bd      	mov	sp, r7
 801913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019140:	4770      	bx	lr

08019142 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8019142:	b480      	push	{r7}
 8019144:	af00      	add	r7, sp, #0

  /* USER CODE END SPI6_IRQn 0 */
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8019146:	bf00      	nop
 8019148:	46bd      	mov	sp, r7
 801914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914e:	4770      	bx	lr

08019150 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8019150:	b580      	push	{r7, lr}
 8019152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel0_sdmmc1_end_data_0);
 8019154:	4802      	ldr	r0, [pc, #8]	@ (8019160 <MDMA_IRQHandler+0x10>)
 8019156:	f000 fea1 	bl	8019e9c <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 801915a:	bf00      	nop
 801915c:	bd80      	pop	{r7, pc}
 801915e:	bf00      	nop
 8019160:	2405a7f4 	.word	0x2405a7f4

08019164 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8019164:	b580      	push	{r7, lr}
 8019166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */
  SPIMaster_IRQHandler();
 8019168:	f7f0 f990 	bl	800948c <SPIMaster_IRQHandler>
  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 801916c:	bf00      	nop
 801916e:	bd80      	pop	{r7, pc}

08019170 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8019170:	b480      	push	{r7}
 8019172:	af00      	add	r7, sp, #0

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8019174:	bf00      	nop
 8019176:	46bd      	mov	sp, r7
 8019178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801917c:	4770      	bx	lr

0801917e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801917e:	b480      	push	{r7}
 8019180:	af00      	add	r7, sp, #0
  return 1;
 8019182:	2301      	movs	r3, #1
}
 8019184:	4618      	mov	r0, r3
 8019186:	46bd      	mov	sp, r7
 8019188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801918c:	4770      	bx	lr

0801918e <_kill>:

int _kill(int pid, int sig)
{
 801918e:	b580      	push	{r7, lr}
 8019190:	b082      	sub	sp, #8
 8019192:	af00      	add	r7, sp, #0
 8019194:	6078      	str	r0, [r7, #4]
 8019196:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8019198:	f008 fff6 	bl	8022188 <__errno>
 801919c:	4603      	mov	r3, r0
 801919e:	2216      	movs	r2, #22
 80191a0:	601a      	str	r2, [r3, #0]
  return -1;
 80191a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80191a6:	4618      	mov	r0, r3
 80191a8:	3708      	adds	r7, #8
 80191aa:	46bd      	mov	sp, r7
 80191ac:	bd80      	pop	{r7, pc}

080191ae <_exit>:

void _exit (int status)
{
 80191ae:	b580      	push	{r7, lr}
 80191b0:	b082      	sub	sp, #8
 80191b2:	af00      	add	r7, sp, #0
 80191b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80191b6:	f04f 31ff 	mov.w	r1, #4294967295
 80191ba:	6878      	ldr	r0, [r7, #4]
 80191bc:	f7ff ffe7 	bl	801918e <_kill>
  while (1) {}    /* Make sure we hang here */
 80191c0:	bf00      	nop
 80191c2:	e7fd      	b.n	80191c0 <_exit+0x12>

080191c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b086      	sub	sp, #24
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	60f8      	str	r0, [r7, #12]
 80191cc:	60b9      	str	r1, [r7, #8]
 80191ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80191d0:	2300      	movs	r3, #0
 80191d2:	617b      	str	r3, [r7, #20]
 80191d4:	e00a      	b.n	80191ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80191d6:	f3af 8000 	nop.w
 80191da:	4601      	mov	r1, r0
 80191dc:	68bb      	ldr	r3, [r7, #8]
 80191de:	1c5a      	adds	r2, r3, #1
 80191e0:	60ba      	str	r2, [r7, #8]
 80191e2:	b2ca      	uxtb	r2, r1
 80191e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80191e6:	697b      	ldr	r3, [r7, #20]
 80191e8:	3301      	adds	r3, #1
 80191ea:	617b      	str	r3, [r7, #20]
 80191ec:	697a      	ldr	r2, [r7, #20]
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	429a      	cmp	r2, r3
 80191f2:	dbf0      	blt.n	80191d6 <_read+0x12>
  }

  return len;
 80191f4:	687b      	ldr	r3, [r7, #4]
}
 80191f6:	4618      	mov	r0, r3
 80191f8:	3718      	adds	r7, #24
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd80      	pop	{r7, pc}

080191fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80191fe:	b580      	push	{r7, lr}
 8019200:	b086      	sub	sp, #24
 8019202:	af00      	add	r7, sp, #0
 8019204:	60f8      	str	r0, [r7, #12]
 8019206:	60b9      	str	r1, [r7, #8]
 8019208:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801920a:	2300      	movs	r3, #0
 801920c:	617b      	str	r3, [r7, #20]
 801920e:	e009      	b.n	8019224 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8019210:	68bb      	ldr	r3, [r7, #8]
 8019212:	1c5a      	adds	r2, r3, #1
 8019214:	60ba      	str	r2, [r7, #8]
 8019216:	781b      	ldrb	r3, [r3, #0]
 8019218:	4618      	mov	r0, r3
 801921a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801921e:	697b      	ldr	r3, [r7, #20]
 8019220:	3301      	adds	r3, #1
 8019222:	617b      	str	r3, [r7, #20]
 8019224:	697a      	ldr	r2, [r7, #20]
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	429a      	cmp	r2, r3
 801922a:	dbf1      	blt.n	8019210 <_write+0x12>
  }
  return len;
 801922c:	687b      	ldr	r3, [r7, #4]
}
 801922e:	4618      	mov	r0, r3
 8019230:	3718      	adds	r7, #24
 8019232:	46bd      	mov	sp, r7
 8019234:	bd80      	pop	{r7, pc}

08019236 <_close>:

int _close(int file)
{
 8019236:	b480      	push	{r7}
 8019238:	b083      	sub	sp, #12
 801923a:	af00      	add	r7, sp, #0
 801923c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801923e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019242:	4618      	mov	r0, r3
 8019244:	370c      	adds	r7, #12
 8019246:	46bd      	mov	sp, r7
 8019248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801924c:	4770      	bx	lr

0801924e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801924e:	b480      	push	{r7}
 8019250:	b083      	sub	sp, #12
 8019252:	af00      	add	r7, sp, #0
 8019254:	6078      	str	r0, [r7, #4]
 8019256:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801925e:	605a      	str	r2, [r3, #4]
  return 0;
 8019260:	2300      	movs	r3, #0
}
 8019262:	4618      	mov	r0, r3
 8019264:	370c      	adds	r7, #12
 8019266:	46bd      	mov	sp, r7
 8019268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801926c:	4770      	bx	lr

0801926e <_isatty>:

int _isatty(int file)
{
 801926e:	b480      	push	{r7}
 8019270:	b083      	sub	sp, #12
 8019272:	af00      	add	r7, sp, #0
 8019274:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8019276:	2301      	movs	r3, #1
}
 8019278:	4618      	mov	r0, r3
 801927a:	370c      	adds	r7, #12
 801927c:	46bd      	mov	sp, r7
 801927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019282:	4770      	bx	lr

08019284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8019284:	b480      	push	{r7}
 8019286:	b085      	sub	sp, #20
 8019288:	af00      	add	r7, sp, #0
 801928a:	60f8      	str	r0, [r7, #12]
 801928c:	60b9      	str	r1, [r7, #8]
 801928e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8019290:	2300      	movs	r3, #0
}
 8019292:	4618      	mov	r0, r3
 8019294:	3714      	adds	r7, #20
 8019296:	46bd      	mov	sp, r7
 8019298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929c:	4770      	bx	lr
	...

080192a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b086      	sub	sp, #24
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80192a8:	4a14      	ldr	r2, [pc, #80]	@ (80192fc <_sbrk+0x5c>)
 80192aa:	4b15      	ldr	r3, [pc, #84]	@ (8019300 <_sbrk+0x60>)
 80192ac:	1ad3      	subs	r3, r2, r3
 80192ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80192b0:	697b      	ldr	r3, [r7, #20]
 80192b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80192b4:	4b13      	ldr	r3, [pc, #76]	@ (8019304 <_sbrk+0x64>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d102      	bne.n	80192c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80192bc:	4b11      	ldr	r3, [pc, #68]	@ (8019304 <_sbrk+0x64>)
 80192be:	4a12      	ldr	r2, [pc, #72]	@ (8019308 <_sbrk+0x68>)
 80192c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80192c2:	4b10      	ldr	r3, [pc, #64]	@ (8019304 <_sbrk+0x64>)
 80192c4:	681a      	ldr	r2, [r3, #0]
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	4413      	add	r3, r2
 80192ca:	693a      	ldr	r2, [r7, #16]
 80192cc:	429a      	cmp	r2, r3
 80192ce:	d207      	bcs.n	80192e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80192d0:	f008 ff5a 	bl	8022188 <__errno>
 80192d4:	4603      	mov	r3, r0
 80192d6:	220c      	movs	r2, #12
 80192d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80192da:	f04f 33ff 	mov.w	r3, #4294967295
 80192de:	e009      	b.n	80192f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80192e0:	4b08      	ldr	r3, [pc, #32]	@ (8019304 <_sbrk+0x64>)
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80192e6:	4b07      	ldr	r3, [pc, #28]	@ (8019304 <_sbrk+0x64>)
 80192e8:	681a      	ldr	r2, [r3, #0]
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	4413      	add	r3, r2
 80192ee:	4a05      	ldr	r2, [pc, #20]	@ (8019304 <_sbrk+0x64>)
 80192f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80192f2:	68fb      	ldr	r3, [r7, #12]
}
 80192f4:	4618      	mov	r0, r3
 80192f6:	3718      	adds	r7, #24
 80192f8:	46bd      	mov	sp, r7
 80192fa:	bd80      	pop	{r7, pc}
 80192fc:	24080000 	.word	0x24080000
 8019300:	00000800 	.word	0x00000800
 8019304:	2405a8ac 	.word	0x2405a8ac
 8019308:	2405aa00 	.word	0x2405aa00

0801930c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 801930c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8019348 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8019310:	f7fc ff24 	bl	801615c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8019314:	f7fc fe74 	bl	8016000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8019318:	480c      	ldr	r0, [pc, #48]	@ (801934c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801931a:	490d      	ldr	r1, [pc, #52]	@ (8019350 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801931c:	4a0d      	ldr	r2, [pc, #52]	@ (8019354 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801931e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019320:	e002      	b.n	8019328 <LoopCopyDataInit>

08019322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8019326:	3304      	adds	r3, #4

08019328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8019328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801932a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801932c:	d3f9      	bcc.n	8019322 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801932e:	4a0a      	ldr	r2, [pc, #40]	@ (8019358 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8019330:	4c0a      	ldr	r4, [pc, #40]	@ (801935c <LoopFillZerobss+0x22>)
  movs r3, #0
 8019332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019334:	e001      	b.n	801933a <LoopFillZerobss>

08019336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8019336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8019338:	3204      	adds	r2, #4

0801933a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801933a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801933c:	d3fb      	bcc.n	8019336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801933e:	f008 ff29 	bl	8022194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019342:	f7fd fd1d 	bl	8016d80 <main>
  bx  lr
 8019346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8019348:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801934c:	24014728 	.word	0x24014728
  ldr r1, =_edata
 8019350:	24014a48 	.word	0x24014a48
  ldr r2, =_sidata
 8019354:	080266a4 	.word	0x080266a4
  ldr r2, =_sbss
 8019358:	24014a48 	.word	0x24014a48
  ldr r4, =_ebss
 801935c:	2405aa00 	.word	0x2405aa00

08019360 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019360:	e7fe      	b.n	8019360 <ADC3_IRQHandler>
	...

08019364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b082      	sub	sp, #8
 8019368:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801936a:	2003      	movs	r0, #3
 801936c:	f000 f957 	bl	801961e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8019370:	f003 f9ae 	bl	801c6d0 <HAL_RCC_GetSysClockFreq>
 8019374:	4602      	mov	r2, r0
 8019376:	4b15      	ldr	r3, [pc, #84]	@ (80193cc <HAL_Init+0x68>)
 8019378:	699b      	ldr	r3, [r3, #24]
 801937a:	0a1b      	lsrs	r3, r3, #8
 801937c:	f003 030f 	and.w	r3, r3, #15
 8019380:	4913      	ldr	r1, [pc, #76]	@ (80193d0 <HAL_Init+0x6c>)
 8019382:	5ccb      	ldrb	r3, [r1, r3]
 8019384:	f003 031f 	and.w	r3, r3, #31
 8019388:	fa22 f303 	lsr.w	r3, r2, r3
 801938c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801938e:	4b0f      	ldr	r3, [pc, #60]	@ (80193cc <HAL_Init+0x68>)
 8019390:	699b      	ldr	r3, [r3, #24]
 8019392:	f003 030f 	and.w	r3, r3, #15
 8019396:	4a0e      	ldr	r2, [pc, #56]	@ (80193d0 <HAL_Init+0x6c>)
 8019398:	5cd3      	ldrb	r3, [r2, r3]
 801939a:	f003 031f 	and.w	r3, r3, #31
 801939e:	687a      	ldr	r2, [r7, #4]
 80193a0:	fa22 f303 	lsr.w	r3, r2, r3
 80193a4:	4a0b      	ldr	r2, [pc, #44]	@ (80193d4 <HAL_Init+0x70>)
 80193a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80193a8:	4a0b      	ldr	r2, [pc, #44]	@ (80193d8 <HAL_Init+0x74>)
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80193ae:	200f      	movs	r0, #15
 80193b0:	f7ff fb26 	bl	8018a00 <HAL_InitTick>
 80193b4:	4603      	mov	r3, r0
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d001      	beq.n	80193be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80193ba:	2301      	movs	r3, #1
 80193bc:	e002      	b.n	80193c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80193be:	f7ff fa17 	bl	80187f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80193c2:	2300      	movs	r3, #0
}
 80193c4:	4618      	mov	r0, r3
 80193c6:	3708      	adds	r7, #8
 80193c8:	46bd      	mov	sp, r7
 80193ca:	bd80      	pop	{r7, pc}
 80193cc:	58024400 	.word	0x58024400
 80193d0:	0802644c 	.word	0x0802644c
 80193d4:	240148dc 	.word	0x240148dc
 80193d8:	240148d8 	.word	0x240148d8

080193dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80193dc:	b480      	push	{r7}
 80193de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80193e0:	4b06      	ldr	r3, [pc, #24]	@ (80193fc <HAL_IncTick+0x20>)
 80193e2:	781b      	ldrb	r3, [r3, #0]
 80193e4:	461a      	mov	r2, r3
 80193e6:	4b06      	ldr	r3, [pc, #24]	@ (8019400 <HAL_IncTick+0x24>)
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	4413      	add	r3, r2
 80193ec:	4a04      	ldr	r2, [pc, #16]	@ (8019400 <HAL_IncTick+0x24>)
 80193ee:	6013      	str	r3, [r2, #0]
}
 80193f0:	bf00      	nop
 80193f2:	46bd      	mov	sp, r7
 80193f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f8:	4770      	bx	lr
 80193fa:	bf00      	nop
 80193fc:	240149e8 	.word	0x240149e8
 8019400:	2405a8b0 	.word	0x2405a8b0

08019404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019404:	b480      	push	{r7}
 8019406:	af00      	add	r7, sp, #0
  return uwTick;
 8019408:	4b03      	ldr	r3, [pc, #12]	@ (8019418 <HAL_GetTick+0x14>)
 801940a:	681b      	ldr	r3, [r3, #0]
}
 801940c:	4618      	mov	r0, r3
 801940e:	46bd      	mov	sp, r7
 8019410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019414:	4770      	bx	lr
 8019416:	bf00      	nop
 8019418:	2405a8b0 	.word	0x2405a8b0

0801941c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b084      	sub	sp, #16
 8019420:	af00      	add	r7, sp, #0
 8019422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019424:	f7ff ffee 	bl	8019404 <HAL_GetTick>
 8019428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019434:	d005      	beq.n	8019442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8019436:	4b0a      	ldr	r3, [pc, #40]	@ (8019460 <HAL_Delay+0x44>)
 8019438:	781b      	ldrb	r3, [r3, #0]
 801943a:	461a      	mov	r2, r3
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	4413      	add	r3, r2
 8019440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8019442:	bf00      	nop
 8019444:	f7ff ffde 	bl	8019404 <HAL_GetTick>
 8019448:	4602      	mov	r2, r0
 801944a:	68bb      	ldr	r3, [r7, #8]
 801944c:	1ad3      	subs	r3, r2, r3
 801944e:	68fa      	ldr	r2, [r7, #12]
 8019450:	429a      	cmp	r2, r3
 8019452:	d8f7      	bhi.n	8019444 <HAL_Delay+0x28>
  {
  }
}
 8019454:	bf00      	nop
 8019456:	bf00      	nop
 8019458:	3710      	adds	r7, #16
 801945a:	46bd      	mov	sp, r7
 801945c:	bd80      	pop	{r7, pc}
 801945e:	bf00      	nop
 8019460:	240149e8 	.word	0x240149e8

08019464 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8019464:	b480      	push	{r7}
 8019466:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8019468:	4b03      	ldr	r3, [pc, #12]	@ (8019478 <HAL_GetREVID+0x14>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	0c1b      	lsrs	r3, r3, #16
}
 801946e:	4618      	mov	r0, r3
 8019470:	46bd      	mov	sp, r7
 8019472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019476:	4770      	bx	lr
 8019478:	5c001000 	.word	0x5c001000

0801947c <__NVIC_SetPriorityGrouping>:
{
 801947c:	b480      	push	{r7}
 801947e:	b085      	sub	sp, #20
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	f003 0307 	and.w	r3, r3, #7
 801948a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801948c:	4b0b      	ldr	r3, [pc, #44]	@ (80194bc <__NVIC_SetPriorityGrouping+0x40>)
 801948e:	68db      	ldr	r3, [r3, #12]
 8019490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8019492:	68ba      	ldr	r2, [r7, #8]
 8019494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8019498:	4013      	ands	r3, r2
 801949a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80194a0:	68bb      	ldr	r3, [r7, #8]
 80194a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80194a4:	4b06      	ldr	r3, [pc, #24]	@ (80194c0 <__NVIC_SetPriorityGrouping+0x44>)
 80194a6:	4313      	orrs	r3, r2
 80194a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80194aa:	4a04      	ldr	r2, [pc, #16]	@ (80194bc <__NVIC_SetPriorityGrouping+0x40>)
 80194ac:	68bb      	ldr	r3, [r7, #8]
 80194ae:	60d3      	str	r3, [r2, #12]
}
 80194b0:	bf00      	nop
 80194b2:	3714      	adds	r7, #20
 80194b4:	46bd      	mov	sp, r7
 80194b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ba:	4770      	bx	lr
 80194bc:	e000ed00 	.word	0xe000ed00
 80194c0:	05fa0000 	.word	0x05fa0000

080194c4 <__NVIC_GetPriorityGrouping>:
{
 80194c4:	b480      	push	{r7}
 80194c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80194c8:	4b04      	ldr	r3, [pc, #16]	@ (80194dc <__NVIC_GetPriorityGrouping+0x18>)
 80194ca:	68db      	ldr	r3, [r3, #12]
 80194cc:	0a1b      	lsrs	r3, r3, #8
 80194ce:	f003 0307 	and.w	r3, r3, #7
}
 80194d2:	4618      	mov	r0, r3
 80194d4:	46bd      	mov	sp, r7
 80194d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194da:	4770      	bx	lr
 80194dc:	e000ed00 	.word	0xe000ed00

080194e0 <__NVIC_EnableIRQ>:
{
 80194e0:	b480      	push	{r7}
 80194e2:	b083      	sub	sp, #12
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	4603      	mov	r3, r0
 80194e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80194ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	db0b      	blt.n	801950a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80194f2:	88fb      	ldrh	r3, [r7, #6]
 80194f4:	f003 021f 	and.w	r2, r3, #31
 80194f8:	4907      	ldr	r1, [pc, #28]	@ (8019518 <__NVIC_EnableIRQ+0x38>)
 80194fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80194fe:	095b      	lsrs	r3, r3, #5
 8019500:	2001      	movs	r0, #1
 8019502:	fa00 f202 	lsl.w	r2, r0, r2
 8019506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801950a:	bf00      	nop
 801950c:	370c      	adds	r7, #12
 801950e:	46bd      	mov	sp, r7
 8019510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019514:	4770      	bx	lr
 8019516:	bf00      	nop
 8019518:	e000e100 	.word	0xe000e100

0801951c <__NVIC_DisableIRQ>:
{
 801951c:	b480      	push	{r7}
 801951e:	b083      	sub	sp, #12
 8019520:	af00      	add	r7, sp, #0
 8019522:	4603      	mov	r3, r0
 8019524:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801952a:	2b00      	cmp	r3, #0
 801952c:	db12      	blt.n	8019554 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801952e:	88fb      	ldrh	r3, [r7, #6]
 8019530:	f003 021f 	and.w	r2, r3, #31
 8019534:	490a      	ldr	r1, [pc, #40]	@ (8019560 <__NVIC_DisableIRQ+0x44>)
 8019536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801953a:	095b      	lsrs	r3, r3, #5
 801953c:	2001      	movs	r0, #1
 801953e:	fa00 f202 	lsl.w	r2, r0, r2
 8019542:	3320      	adds	r3, #32
 8019544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8019548:	f3bf 8f4f 	dsb	sy
}
 801954c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801954e:	f3bf 8f6f 	isb	sy
}
 8019552:	bf00      	nop
}
 8019554:	bf00      	nop
 8019556:	370c      	adds	r7, #12
 8019558:	46bd      	mov	sp, r7
 801955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955e:	4770      	bx	lr
 8019560:	e000e100 	.word	0xe000e100

08019564 <__NVIC_SetPriority>:
{
 8019564:	b480      	push	{r7}
 8019566:	b083      	sub	sp, #12
 8019568:	af00      	add	r7, sp, #0
 801956a:	4603      	mov	r3, r0
 801956c:	6039      	str	r1, [r7, #0]
 801956e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019574:	2b00      	cmp	r3, #0
 8019576:	db0a      	blt.n	801958e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019578:	683b      	ldr	r3, [r7, #0]
 801957a:	b2da      	uxtb	r2, r3
 801957c:	490c      	ldr	r1, [pc, #48]	@ (80195b0 <__NVIC_SetPriority+0x4c>)
 801957e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019582:	0112      	lsls	r2, r2, #4
 8019584:	b2d2      	uxtb	r2, r2
 8019586:	440b      	add	r3, r1
 8019588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801958c:	e00a      	b.n	80195a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801958e:	683b      	ldr	r3, [r7, #0]
 8019590:	b2da      	uxtb	r2, r3
 8019592:	4908      	ldr	r1, [pc, #32]	@ (80195b4 <__NVIC_SetPriority+0x50>)
 8019594:	88fb      	ldrh	r3, [r7, #6]
 8019596:	f003 030f 	and.w	r3, r3, #15
 801959a:	3b04      	subs	r3, #4
 801959c:	0112      	lsls	r2, r2, #4
 801959e:	b2d2      	uxtb	r2, r2
 80195a0:	440b      	add	r3, r1
 80195a2:	761a      	strb	r2, [r3, #24]
}
 80195a4:	bf00      	nop
 80195a6:	370c      	adds	r7, #12
 80195a8:	46bd      	mov	sp, r7
 80195aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ae:	4770      	bx	lr
 80195b0:	e000e100 	.word	0xe000e100
 80195b4:	e000ed00 	.word	0xe000ed00

080195b8 <NVIC_EncodePriority>:
{
 80195b8:	b480      	push	{r7}
 80195ba:	b089      	sub	sp, #36	@ 0x24
 80195bc:	af00      	add	r7, sp, #0
 80195be:	60f8      	str	r0, [r7, #12]
 80195c0:	60b9      	str	r1, [r7, #8]
 80195c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	f003 0307 	and.w	r3, r3, #7
 80195ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80195cc:	69fb      	ldr	r3, [r7, #28]
 80195ce:	f1c3 0307 	rsb	r3, r3, #7
 80195d2:	2b04      	cmp	r3, #4
 80195d4:	bf28      	it	cs
 80195d6:	2304      	movcs	r3, #4
 80195d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80195da:	69fb      	ldr	r3, [r7, #28]
 80195dc:	3304      	adds	r3, #4
 80195de:	2b06      	cmp	r3, #6
 80195e0:	d902      	bls.n	80195e8 <NVIC_EncodePriority+0x30>
 80195e2:	69fb      	ldr	r3, [r7, #28]
 80195e4:	3b03      	subs	r3, #3
 80195e6:	e000      	b.n	80195ea <NVIC_EncodePriority+0x32>
 80195e8:	2300      	movs	r3, #0
 80195ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80195ec:	f04f 32ff 	mov.w	r2, #4294967295
 80195f0:	69bb      	ldr	r3, [r7, #24]
 80195f2:	fa02 f303 	lsl.w	r3, r2, r3
 80195f6:	43da      	mvns	r2, r3
 80195f8:	68bb      	ldr	r3, [r7, #8]
 80195fa:	401a      	ands	r2, r3
 80195fc:	697b      	ldr	r3, [r7, #20]
 80195fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019600:	f04f 31ff 	mov.w	r1, #4294967295
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	fa01 f303 	lsl.w	r3, r1, r3
 801960a:	43d9      	mvns	r1, r3
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019610:	4313      	orrs	r3, r2
}
 8019612:	4618      	mov	r0, r3
 8019614:	3724      	adds	r7, #36	@ 0x24
 8019616:	46bd      	mov	sp, r7
 8019618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801961c:	4770      	bx	lr

0801961e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801961e:	b580      	push	{r7, lr}
 8019620:	b082      	sub	sp, #8
 8019622:	af00      	add	r7, sp, #0
 8019624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019626:	6878      	ldr	r0, [r7, #4]
 8019628:	f7ff ff28 	bl	801947c <__NVIC_SetPriorityGrouping>
}
 801962c:	bf00      	nop
 801962e:	3708      	adds	r7, #8
 8019630:	46bd      	mov	sp, r7
 8019632:	bd80      	pop	{r7, pc}

08019634 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b086      	sub	sp, #24
 8019638:	af00      	add	r7, sp, #0
 801963a:	4603      	mov	r3, r0
 801963c:	60b9      	str	r1, [r7, #8]
 801963e:	607a      	str	r2, [r7, #4]
 8019640:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019642:	f7ff ff3f 	bl	80194c4 <__NVIC_GetPriorityGrouping>
 8019646:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019648:	687a      	ldr	r2, [r7, #4]
 801964a:	68b9      	ldr	r1, [r7, #8]
 801964c:	6978      	ldr	r0, [r7, #20]
 801964e:	f7ff ffb3 	bl	80195b8 <NVIC_EncodePriority>
 8019652:	4602      	mov	r2, r0
 8019654:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019658:	4611      	mov	r1, r2
 801965a:	4618      	mov	r0, r3
 801965c:	f7ff ff82 	bl	8019564 <__NVIC_SetPriority>
}
 8019660:	bf00      	nop
 8019662:	3718      	adds	r7, #24
 8019664:	46bd      	mov	sp, r7
 8019666:	bd80      	pop	{r7, pc}

08019668 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b082      	sub	sp, #8
 801966c:	af00      	add	r7, sp, #0
 801966e:	4603      	mov	r3, r0
 8019670:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019676:	4618      	mov	r0, r3
 8019678:	f7ff ff32 	bl	80194e0 <__NVIC_EnableIRQ>
}
 801967c:	bf00      	nop
 801967e:	3708      	adds	r7, #8
 8019680:	46bd      	mov	sp, r7
 8019682:	bd80      	pop	{r7, pc}

08019684 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b082      	sub	sp, #8
 8019688:	af00      	add	r7, sp, #0
 801968a:	4603      	mov	r3, r0
 801968c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801968e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019692:	4618      	mov	r0, r3
 8019694:	f7ff ff42 	bl	801951c <__NVIC_DisableIRQ>
}
 8019698:	bf00      	nop
 801969a:	3708      	adds	r7, #8
 801969c:	46bd      	mov	sp, r7
 801969e:	bd80      	pop	{r7, pc}

080196a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80196a0:	b480      	push	{r7}
 80196a2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80196a4:	f3bf 8f5f 	dmb	sy
}
 80196a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80196aa:	4b07      	ldr	r3, [pc, #28]	@ (80196c8 <HAL_MPU_Disable+0x28>)
 80196ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196ae:	4a06      	ldr	r2, [pc, #24]	@ (80196c8 <HAL_MPU_Disable+0x28>)
 80196b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80196b4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80196b6:	4b05      	ldr	r3, [pc, #20]	@ (80196cc <HAL_MPU_Disable+0x2c>)
 80196b8:	2200      	movs	r2, #0
 80196ba:	605a      	str	r2, [r3, #4]
}
 80196bc:	bf00      	nop
 80196be:	46bd      	mov	sp, r7
 80196c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c4:	4770      	bx	lr
 80196c6:	bf00      	nop
 80196c8:	e000ed00 	.word	0xe000ed00
 80196cc:	e000ed90 	.word	0xe000ed90

080196d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80196d0:	b480      	push	{r7}
 80196d2:	b083      	sub	sp, #12
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80196d8:	4a0b      	ldr	r2, [pc, #44]	@ (8019708 <HAL_MPU_Enable+0x38>)
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	f043 0301 	orr.w	r3, r3, #1
 80196e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80196e2:	4b0a      	ldr	r3, [pc, #40]	@ (801970c <HAL_MPU_Enable+0x3c>)
 80196e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196e6:	4a09      	ldr	r2, [pc, #36]	@ (801970c <HAL_MPU_Enable+0x3c>)
 80196e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80196ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80196ee:	f3bf 8f4f 	dsb	sy
}
 80196f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80196f4:	f3bf 8f6f 	isb	sy
}
 80196f8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80196fa:	bf00      	nop
 80196fc:	370c      	adds	r7, #12
 80196fe:	46bd      	mov	sp, r7
 8019700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019704:	4770      	bx	lr
 8019706:	bf00      	nop
 8019708:	e000ed90 	.word	0xe000ed90
 801970c:	e000ed00 	.word	0xe000ed00

08019710 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8019710:	b480      	push	{r7}
 8019712:	b083      	sub	sp, #12
 8019714:	af00      	add	r7, sp, #0
 8019716:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	785a      	ldrb	r2, [r3, #1]
 801971c:	4b1b      	ldr	r3, [pc, #108]	@ (801978c <HAL_MPU_ConfigRegion+0x7c>)
 801971e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8019720:	4b1a      	ldr	r3, [pc, #104]	@ (801978c <HAL_MPU_ConfigRegion+0x7c>)
 8019722:	691b      	ldr	r3, [r3, #16]
 8019724:	4a19      	ldr	r2, [pc, #100]	@ (801978c <HAL_MPU_ConfigRegion+0x7c>)
 8019726:	f023 0301 	bic.w	r3, r3, #1
 801972a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801972c:	4a17      	ldr	r2, [pc, #92]	@ (801978c <HAL_MPU_ConfigRegion+0x7c>)
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	685b      	ldr	r3, [r3, #4]
 8019732:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	7b1b      	ldrb	r3, [r3, #12]
 8019738:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	7adb      	ldrb	r3, [r3, #11]
 801973e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019740:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	7a9b      	ldrb	r3, [r3, #10]
 8019746:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019748:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	7b5b      	ldrb	r3, [r3, #13]
 801974e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019750:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	7b9b      	ldrb	r3, [r3, #14]
 8019756:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019758:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	7bdb      	ldrb	r3, [r3, #15]
 801975e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019760:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	7a5b      	ldrb	r3, [r3, #9]
 8019766:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019768:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	7a1b      	ldrb	r3, [r3, #8]
 801976e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019770:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8019772:	687a      	ldr	r2, [r7, #4]
 8019774:	7812      	ldrb	r2, [r2, #0]
 8019776:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019778:	4a04      	ldr	r2, [pc, #16]	@ (801978c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801977a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801977c:	6113      	str	r3, [r2, #16]
}
 801977e:	bf00      	nop
 8019780:	370c      	adds	r7, #12
 8019782:	46bd      	mov	sp, r7
 8019784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019788:	4770      	bx	lr
 801978a:	bf00      	nop
 801978c:	e000ed90 	.word	0xe000ed90

08019790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8019790:	b480      	push	{r7}
 8019792:	b089      	sub	sp, #36	@ 0x24
 8019794:	af00      	add	r7, sp, #0
 8019796:	6078      	str	r0, [r7, #4]
 8019798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801979a:	2300      	movs	r3, #0
 801979c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801979e:	4b89      	ldr	r3, [pc, #548]	@ (80199c4 <HAL_GPIO_Init+0x234>)
 80197a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80197a2:	e194      	b.n	8019ace <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80197a4:	683b      	ldr	r3, [r7, #0]
 80197a6:	681a      	ldr	r2, [r3, #0]
 80197a8:	2101      	movs	r1, #1
 80197aa:	69fb      	ldr	r3, [r7, #28]
 80197ac:	fa01 f303 	lsl.w	r3, r1, r3
 80197b0:	4013      	ands	r3, r2
 80197b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80197b4:	693b      	ldr	r3, [r7, #16]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	f000 8186 	beq.w	8019ac8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80197bc:	683b      	ldr	r3, [r7, #0]
 80197be:	685b      	ldr	r3, [r3, #4]
 80197c0:	f003 0303 	and.w	r3, r3, #3
 80197c4:	2b01      	cmp	r3, #1
 80197c6:	d005      	beq.n	80197d4 <HAL_GPIO_Init+0x44>
 80197c8:	683b      	ldr	r3, [r7, #0]
 80197ca:	685b      	ldr	r3, [r3, #4]
 80197cc:	f003 0303 	and.w	r3, r3, #3
 80197d0:	2b02      	cmp	r3, #2
 80197d2:	d130      	bne.n	8019836 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	689b      	ldr	r3, [r3, #8]
 80197d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80197da:	69fb      	ldr	r3, [r7, #28]
 80197dc:	005b      	lsls	r3, r3, #1
 80197de:	2203      	movs	r2, #3
 80197e0:	fa02 f303 	lsl.w	r3, r2, r3
 80197e4:	43db      	mvns	r3, r3
 80197e6:	69ba      	ldr	r2, [r7, #24]
 80197e8:	4013      	ands	r3, r2
 80197ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80197ec:	683b      	ldr	r3, [r7, #0]
 80197ee:	68da      	ldr	r2, [r3, #12]
 80197f0:	69fb      	ldr	r3, [r7, #28]
 80197f2:	005b      	lsls	r3, r3, #1
 80197f4:	fa02 f303 	lsl.w	r3, r2, r3
 80197f8:	69ba      	ldr	r2, [r7, #24]
 80197fa:	4313      	orrs	r3, r2
 80197fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	69ba      	ldr	r2, [r7, #24]
 8019802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	685b      	ldr	r3, [r3, #4]
 8019808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801980a:	2201      	movs	r2, #1
 801980c:	69fb      	ldr	r3, [r7, #28]
 801980e:	fa02 f303 	lsl.w	r3, r2, r3
 8019812:	43db      	mvns	r3, r3
 8019814:	69ba      	ldr	r2, [r7, #24]
 8019816:	4013      	ands	r3, r2
 8019818:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801981a:	683b      	ldr	r3, [r7, #0]
 801981c:	685b      	ldr	r3, [r3, #4]
 801981e:	091b      	lsrs	r3, r3, #4
 8019820:	f003 0201 	and.w	r2, r3, #1
 8019824:	69fb      	ldr	r3, [r7, #28]
 8019826:	fa02 f303 	lsl.w	r3, r2, r3
 801982a:	69ba      	ldr	r2, [r7, #24]
 801982c:	4313      	orrs	r3, r2
 801982e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	69ba      	ldr	r2, [r7, #24]
 8019834:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	685b      	ldr	r3, [r3, #4]
 801983a:	f003 0303 	and.w	r3, r3, #3
 801983e:	2b03      	cmp	r3, #3
 8019840:	d017      	beq.n	8019872 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	68db      	ldr	r3, [r3, #12]
 8019846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8019848:	69fb      	ldr	r3, [r7, #28]
 801984a:	005b      	lsls	r3, r3, #1
 801984c:	2203      	movs	r2, #3
 801984e:	fa02 f303 	lsl.w	r3, r2, r3
 8019852:	43db      	mvns	r3, r3
 8019854:	69ba      	ldr	r2, [r7, #24]
 8019856:	4013      	ands	r3, r2
 8019858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	689a      	ldr	r2, [r3, #8]
 801985e:	69fb      	ldr	r3, [r7, #28]
 8019860:	005b      	lsls	r3, r3, #1
 8019862:	fa02 f303 	lsl.w	r3, r2, r3
 8019866:	69ba      	ldr	r2, [r7, #24]
 8019868:	4313      	orrs	r3, r2
 801986a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	69ba      	ldr	r2, [r7, #24]
 8019870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019872:	683b      	ldr	r3, [r7, #0]
 8019874:	685b      	ldr	r3, [r3, #4]
 8019876:	f003 0303 	and.w	r3, r3, #3
 801987a:	2b02      	cmp	r3, #2
 801987c:	d123      	bne.n	80198c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801987e:	69fb      	ldr	r3, [r7, #28]
 8019880:	08da      	lsrs	r2, r3, #3
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	3208      	adds	r2, #8
 8019886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801988a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801988c:	69fb      	ldr	r3, [r7, #28]
 801988e:	f003 0307 	and.w	r3, r3, #7
 8019892:	009b      	lsls	r3, r3, #2
 8019894:	220f      	movs	r2, #15
 8019896:	fa02 f303 	lsl.w	r3, r2, r3
 801989a:	43db      	mvns	r3, r3
 801989c:	69ba      	ldr	r2, [r7, #24]
 801989e:	4013      	ands	r3, r2
 80198a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	691a      	ldr	r2, [r3, #16]
 80198a6:	69fb      	ldr	r3, [r7, #28]
 80198a8:	f003 0307 	and.w	r3, r3, #7
 80198ac:	009b      	lsls	r3, r3, #2
 80198ae:	fa02 f303 	lsl.w	r3, r2, r3
 80198b2:	69ba      	ldr	r2, [r7, #24]
 80198b4:	4313      	orrs	r3, r2
 80198b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80198b8:	69fb      	ldr	r3, [r7, #28]
 80198ba:	08da      	lsrs	r2, r3, #3
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	3208      	adds	r2, #8
 80198c0:	69b9      	ldr	r1, [r7, #24]
 80198c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80198cc:	69fb      	ldr	r3, [r7, #28]
 80198ce:	005b      	lsls	r3, r3, #1
 80198d0:	2203      	movs	r2, #3
 80198d2:	fa02 f303 	lsl.w	r3, r2, r3
 80198d6:	43db      	mvns	r3, r3
 80198d8:	69ba      	ldr	r2, [r7, #24]
 80198da:	4013      	ands	r3, r2
 80198dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80198de:	683b      	ldr	r3, [r7, #0]
 80198e0:	685b      	ldr	r3, [r3, #4]
 80198e2:	f003 0203 	and.w	r2, r3, #3
 80198e6:	69fb      	ldr	r3, [r7, #28]
 80198e8:	005b      	lsls	r3, r3, #1
 80198ea:	fa02 f303 	lsl.w	r3, r2, r3
 80198ee:	69ba      	ldr	r2, [r7, #24]
 80198f0:	4313      	orrs	r3, r2
 80198f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	69ba      	ldr	r2, [r7, #24]
 80198f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80198fa:	683b      	ldr	r3, [r7, #0]
 80198fc:	685b      	ldr	r3, [r3, #4]
 80198fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8019902:	2b00      	cmp	r3, #0
 8019904:	f000 80e0 	beq.w	8019ac8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019908:	4b2f      	ldr	r3, [pc, #188]	@ (80199c8 <HAL_GPIO_Init+0x238>)
 801990a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801990e:	4a2e      	ldr	r2, [pc, #184]	@ (80199c8 <HAL_GPIO_Init+0x238>)
 8019910:	f043 0302 	orr.w	r3, r3, #2
 8019914:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8019918:	4b2b      	ldr	r3, [pc, #172]	@ (80199c8 <HAL_GPIO_Init+0x238>)
 801991a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801991e:	f003 0302 	and.w	r3, r3, #2
 8019922:	60fb      	str	r3, [r7, #12]
 8019924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8019926:	4a29      	ldr	r2, [pc, #164]	@ (80199cc <HAL_GPIO_Init+0x23c>)
 8019928:	69fb      	ldr	r3, [r7, #28]
 801992a:	089b      	lsrs	r3, r3, #2
 801992c:	3302      	adds	r3, #2
 801992e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8019934:	69fb      	ldr	r3, [r7, #28]
 8019936:	f003 0303 	and.w	r3, r3, #3
 801993a:	009b      	lsls	r3, r3, #2
 801993c:	220f      	movs	r2, #15
 801993e:	fa02 f303 	lsl.w	r3, r2, r3
 8019942:	43db      	mvns	r3, r3
 8019944:	69ba      	ldr	r2, [r7, #24]
 8019946:	4013      	ands	r3, r2
 8019948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	4a20      	ldr	r2, [pc, #128]	@ (80199d0 <HAL_GPIO_Init+0x240>)
 801994e:	4293      	cmp	r3, r2
 8019950:	d052      	beq.n	80199f8 <HAL_GPIO_Init+0x268>
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	4a1f      	ldr	r2, [pc, #124]	@ (80199d4 <HAL_GPIO_Init+0x244>)
 8019956:	4293      	cmp	r3, r2
 8019958:	d031      	beq.n	80199be <HAL_GPIO_Init+0x22e>
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	4a1e      	ldr	r2, [pc, #120]	@ (80199d8 <HAL_GPIO_Init+0x248>)
 801995e:	4293      	cmp	r3, r2
 8019960:	d02b      	beq.n	80199ba <HAL_GPIO_Init+0x22a>
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	4a1d      	ldr	r2, [pc, #116]	@ (80199dc <HAL_GPIO_Init+0x24c>)
 8019966:	4293      	cmp	r3, r2
 8019968:	d025      	beq.n	80199b6 <HAL_GPIO_Init+0x226>
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	4a1c      	ldr	r2, [pc, #112]	@ (80199e0 <HAL_GPIO_Init+0x250>)
 801996e:	4293      	cmp	r3, r2
 8019970:	d01f      	beq.n	80199b2 <HAL_GPIO_Init+0x222>
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	4a1b      	ldr	r2, [pc, #108]	@ (80199e4 <HAL_GPIO_Init+0x254>)
 8019976:	4293      	cmp	r3, r2
 8019978:	d019      	beq.n	80199ae <HAL_GPIO_Init+0x21e>
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	4a1a      	ldr	r2, [pc, #104]	@ (80199e8 <HAL_GPIO_Init+0x258>)
 801997e:	4293      	cmp	r3, r2
 8019980:	d013      	beq.n	80199aa <HAL_GPIO_Init+0x21a>
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	4a19      	ldr	r2, [pc, #100]	@ (80199ec <HAL_GPIO_Init+0x25c>)
 8019986:	4293      	cmp	r3, r2
 8019988:	d00d      	beq.n	80199a6 <HAL_GPIO_Init+0x216>
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	4a18      	ldr	r2, [pc, #96]	@ (80199f0 <HAL_GPIO_Init+0x260>)
 801998e:	4293      	cmp	r3, r2
 8019990:	d007      	beq.n	80199a2 <HAL_GPIO_Init+0x212>
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	4a17      	ldr	r2, [pc, #92]	@ (80199f4 <HAL_GPIO_Init+0x264>)
 8019996:	4293      	cmp	r3, r2
 8019998:	d101      	bne.n	801999e <HAL_GPIO_Init+0x20e>
 801999a:	2309      	movs	r3, #9
 801999c:	e02d      	b.n	80199fa <HAL_GPIO_Init+0x26a>
 801999e:	230a      	movs	r3, #10
 80199a0:	e02b      	b.n	80199fa <HAL_GPIO_Init+0x26a>
 80199a2:	2308      	movs	r3, #8
 80199a4:	e029      	b.n	80199fa <HAL_GPIO_Init+0x26a>
 80199a6:	2307      	movs	r3, #7
 80199a8:	e027      	b.n	80199fa <HAL_GPIO_Init+0x26a>
 80199aa:	2306      	movs	r3, #6
 80199ac:	e025      	b.n	80199fa <HAL_GPIO_Init+0x26a>
 80199ae:	2305      	movs	r3, #5
 80199b0:	e023      	b.n	80199fa <HAL_GPIO_Init+0x26a>
 80199b2:	2304      	movs	r3, #4
 80199b4:	e021      	b.n	80199fa <HAL_GPIO_Init+0x26a>
 80199b6:	2303      	movs	r3, #3
 80199b8:	e01f      	b.n	80199fa <HAL_GPIO_Init+0x26a>
 80199ba:	2302      	movs	r3, #2
 80199bc:	e01d      	b.n	80199fa <HAL_GPIO_Init+0x26a>
 80199be:	2301      	movs	r3, #1
 80199c0:	e01b      	b.n	80199fa <HAL_GPIO_Init+0x26a>
 80199c2:	bf00      	nop
 80199c4:	58000080 	.word	0x58000080
 80199c8:	58024400 	.word	0x58024400
 80199cc:	58000400 	.word	0x58000400
 80199d0:	58020000 	.word	0x58020000
 80199d4:	58020400 	.word	0x58020400
 80199d8:	58020800 	.word	0x58020800
 80199dc:	58020c00 	.word	0x58020c00
 80199e0:	58021000 	.word	0x58021000
 80199e4:	58021400 	.word	0x58021400
 80199e8:	58021800 	.word	0x58021800
 80199ec:	58021c00 	.word	0x58021c00
 80199f0:	58022000 	.word	0x58022000
 80199f4:	58022400 	.word	0x58022400
 80199f8:	2300      	movs	r3, #0
 80199fa:	69fa      	ldr	r2, [r7, #28]
 80199fc:	f002 0203 	and.w	r2, r2, #3
 8019a00:	0092      	lsls	r2, r2, #2
 8019a02:	4093      	lsls	r3, r2
 8019a04:	69ba      	ldr	r2, [r7, #24]
 8019a06:	4313      	orrs	r3, r2
 8019a08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019a0a:	4938      	ldr	r1, [pc, #224]	@ (8019aec <HAL_GPIO_Init+0x35c>)
 8019a0c:	69fb      	ldr	r3, [r7, #28]
 8019a0e:	089b      	lsrs	r3, r3, #2
 8019a10:	3302      	adds	r3, #2
 8019a12:	69ba      	ldr	r2, [r7, #24]
 8019a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8019a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8019a20:	693b      	ldr	r3, [r7, #16]
 8019a22:	43db      	mvns	r3, r3
 8019a24:	69ba      	ldr	r2, [r7, #24]
 8019a26:	4013      	ands	r3, r2
 8019a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019a2a:	683b      	ldr	r3, [r7, #0]
 8019a2c:	685b      	ldr	r3, [r3, #4]
 8019a2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d003      	beq.n	8019a3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8019a36:	69ba      	ldr	r2, [r7, #24]
 8019a38:	693b      	ldr	r3, [r7, #16]
 8019a3a:	4313      	orrs	r3, r2
 8019a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8019a3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8019a42:	69bb      	ldr	r3, [r7, #24]
 8019a44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8019a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8019a4a:	685b      	ldr	r3, [r3, #4]
 8019a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8019a4e:	693b      	ldr	r3, [r7, #16]
 8019a50:	43db      	mvns	r3, r3
 8019a52:	69ba      	ldr	r2, [r7, #24]
 8019a54:	4013      	ands	r3, r2
 8019a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d003      	beq.n	8019a6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019a64:	69ba      	ldr	r2, [r7, #24]
 8019a66:	693b      	ldr	r3, [r7, #16]
 8019a68:	4313      	orrs	r3, r2
 8019a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8019a6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8019a70:	69bb      	ldr	r3, [r7, #24]
 8019a72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8019a74:	697b      	ldr	r3, [r7, #20]
 8019a76:	685b      	ldr	r3, [r3, #4]
 8019a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8019a7a:	693b      	ldr	r3, [r7, #16]
 8019a7c:	43db      	mvns	r3, r3
 8019a7e:	69ba      	ldr	r2, [r7, #24]
 8019a80:	4013      	ands	r3, r2
 8019a82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019a84:	683b      	ldr	r3, [r7, #0]
 8019a86:	685b      	ldr	r3, [r3, #4]
 8019a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d003      	beq.n	8019a98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8019a90:	69ba      	ldr	r2, [r7, #24]
 8019a92:	693b      	ldr	r3, [r7, #16]
 8019a94:	4313      	orrs	r3, r2
 8019a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8019a98:	697b      	ldr	r3, [r7, #20]
 8019a9a:	69ba      	ldr	r2, [r7, #24]
 8019a9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8019a9e:	697b      	ldr	r3, [r7, #20]
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8019aa4:	693b      	ldr	r3, [r7, #16]
 8019aa6:	43db      	mvns	r3, r3
 8019aa8:	69ba      	ldr	r2, [r7, #24]
 8019aaa:	4013      	ands	r3, r2
 8019aac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019aae:	683b      	ldr	r3, [r7, #0]
 8019ab0:	685b      	ldr	r3, [r3, #4]
 8019ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d003      	beq.n	8019ac2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8019aba:	69ba      	ldr	r2, [r7, #24]
 8019abc:	693b      	ldr	r3, [r7, #16]
 8019abe:	4313      	orrs	r3, r2
 8019ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8019ac2:	697b      	ldr	r3, [r7, #20]
 8019ac4:	69ba      	ldr	r2, [r7, #24]
 8019ac6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8019ac8:	69fb      	ldr	r3, [r7, #28]
 8019aca:	3301      	adds	r3, #1
 8019acc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8019ace:	683b      	ldr	r3, [r7, #0]
 8019ad0:	681a      	ldr	r2, [r3, #0]
 8019ad2:	69fb      	ldr	r3, [r7, #28]
 8019ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	f47f ae63 	bne.w	80197a4 <HAL_GPIO_Init+0x14>
  }
}
 8019ade:	bf00      	nop
 8019ae0:	bf00      	nop
 8019ae2:	3724      	adds	r7, #36	@ 0x24
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aea:	4770      	bx	lr
 8019aec:	58000400 	.word	0x58000400

08019af0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8019af0:	b480      	push	{r7}
 8019af2:	b087      	sub	sp, #28
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	6078      	str	r0, [r7, #4]
 8019af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8019afa:	2300      	movs	r3, #0
 8019afc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8019afe:	4b75      	ldr	r3, [pc, #468]	@ (8019cd4 <HAL_GPIO_DeInit+0x1e4>)
 8019b00:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8019b02:	e0d9      	b.n	8019cb8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8019b04:	2201      	movs	r2, #1
 8019b06:	697b      	ldr	r3, [r7, #20]
 8019b08:	fa02 f303 	lsl.w	r3, r2, r3
 8019b0c:	683a      	ldr	r2, [r7, #0]
 8019b0e:	4013      	ands	r3, r2
 8019b10:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	f000 80cc 	beq.w	8019cb2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8019b1a:	4a6f      	ldr	r2, [pc, #444]	@ (8019cd8 <HAL_GPIO_DeInit+0x1e8>)
 8019b1c:	697b      	ldr	r3, [r7, #20]
 8019b1e:	089b      	lsrs	r3, r3, #2
 8019b20:	3302      	adds	r3, #2
 8019b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019b26:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	f003 0303 	and.w	r3, r3, #3
 8019b2e:	009b      	lsls	r3, r3, #2
 8019b30:	220f      	movs	r2, #15
 8019b32:	fa02 f303 	lsl.w	r3, r2, r3
 8019b36:	68ba      	ldr	r2, [r7, #8]
 8019b38:	4013      	ands	r3, r2
 8019b3a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	4a67      	ldr	r2, [pc, #412]	@ (8019cdc <HAL_GPIO_DeInit+0x1ec>)
 8019b40:	4293      	cmp	r3, r2
 8019b42:	d037      	beq.n	8019bb4 <HAL_GPIO_DeInit+0xc4>
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	4a66      	ldr	r2, [pc, #408]	@ (8019ce0 <HAL_GPIO_DeInit+0x1f0>)
 8019b48:	4293      	cmp	r3, r2
 8019b4a:	d031      	beq.n	8019bb0 <HAL_GPIO_DeInit+0xc0>
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	4a65      	ldr	r2, [pc, #404]	@ (8019ce4 <HAL_GPIO_DeInit+0x1f4>)
 8019b50:	4293      	cmp	r3, r2
 8019b52:	d02b      	beq.n	8019bac <HAL_GPIO_DeInit+0xbc>
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	4a64      	ldr	r2, [pc, #400]	@ (8019ce8 <HAL_GPIO_DeInit+0x1f8>)
 8019b58:	4293      	cmp	r3, r2
 8019b5a:	d025      	beq.n	8019ba8 <HAL_GPIO_DeInit+0xb8>
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	4a63      	ldr	r2, [pc, #396]	@ (8019cec <HAL_GPIO_DeInit+0x1fc>)
 8019b60:	4293      	cmp	r3, r2
 8019b62:	d01f      	beq.n	8019ba4 <HAL_GPIO_DeInit+0xb4>
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	4a62      	ldr	r2, [pc, #392]	@ (8019cf0 <HAL_GPIO_DeInit+0x200>)
 8019b68:	4293      	cmp	r3, r2
 8019b6a:	d019      	beq.n	8019ba0 <HAL_GPIO_DeInit+0xb0>
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	4a61      	ldr	r2, [pc, #388]	@ (8019cf4 <HAL_GPIO_DeInit+0x204>)
 8019b70:	4293      	cmp	r3, r2
 8019b72:	d013      	beq.n	8019b9c <HAL_GPIO_DeInit+0xac>
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	4a60      	ldr	r2, [pc, #384]	@ (8019cf8 <HAL_GPIO_DeInit+0x208>)
 8019b78:	4293      	cmp	r3, r2
 8019b7a:	d00d      	beq.n	8019b98 <HAL_GPIO_DeInit+0xa8>
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	4a5f      	ldr	r2, [pc, #380]	@ (8019cfc <HAL_GPIO_DeInit+0x20c>)
 8019b80:	4293      	cmp	r3, r2
 8019b82:	d007      	beq.n	8019b94 <HAL_GPIO_DeInit+0xa4>
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	4a5e      	ldr	r2, [pc, #376]	@ (8019d00 <HAL_GPIO_DeInit+0x210>)
 8019b88:	4293      	cmp	r3, r2
 8019b8a:	d101      	bne.n	8019b90 <HAL_GPIO_DeInit+0xa0>
 8019b8c:	2309      	movs	r3, #9
 8019b8e:	e012      	b.n	8019bb6 <HAL_GPIO_DeInit+0xc6>
 8019b90:	230a      	movs	r3, #10
 8019b92:	e010      	b.n	8019bb6 <HAL_GPIO_DeInit+0xc6>
 8019b94:	2308      	movs	r3, #8
 8019b96:	e00e      	b.n	8019bb6 <HAL_GPIO_DeInit+0xc6>
 8019b98:	2307      	movs	r3, #7
 8019b9a:	e00c      	b.n	8019bb6 <HAL_GPIO_DeInit+0xc6>
 8019b9c:	2306      	movs	r3, #6
 8019b9e:	e00a      	b.n	8019bb6 <HAL_GPIO_DeInit+0xc6>
 8019ba0:	2305      	movs	r3, #5
 8019ba2:	e008      	b.n	8019bb6 <HAL_GPIO_DeInit+0xc6>
 8019ba4:	2304      	movs	r3, #4
 8019ba6:	e006      	b.n	8019bb6 <HAL_GPIO_DeInit+0xc6>
 8019ba8:	2303      	movs	r3, #3
 8019baa:	e004      	b.n	8019bb6 <HAL_GPIO_DeInit+0xc6>
 8019bac:	2302      	movs	r3, #2
 8019bae:	e002      	b.n	8019bb6 <HAL_GPIO_DeInit+0xc6>
 8019bb0:	2301      	movs	r3, #1
 8019bb2:	e000      	b.n	8019bb6 <HAL_GPIO_DeInit+0xc6>
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	697a      	ldr	r2, [r7, #20]
 8019bb8:	f002 0203 	and.w	r2, r2, #3
 8019bbc:	0092      	lsls	r2, r2, #2
 8019bbe:	4093      	lsls	r3, r2
 8019bc0:	68ba      	ldr	r2, [r7, #8]
 8019bc2:	429a      	cmp	r2, r3
 8019bc4:	d136      	bne.n	8019c34 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8019bc6:	693b      	ldr	r3, [r7, #16]
 8019bc8:	681a      	ldr	r2, [r3, #0]
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	43db      	mvns	r3, r3
 8019bce:	401a      	ands	r2, r3
 8019bd0:	693b      	ldr	r3, [r7, #16]
 8019bd2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8019bd4:	693b      	ldr	r3, [r7, #16]
 8019bd6:	685a      	ldr	r2, [r3, #4]
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	43db      	mvns	r3, r3
 8019bdc:	401a      	ands	r2, r3
 8019bde:	693b      	ldr	r3, [r7, #16]
 8019be0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8019be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8019be6:	685a      	ldr	r2, [r3, #4]
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	43db      	mvns	r3, r3
 8019bec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8019bf0:	4013      	ands	r3, r2
 8019bf2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8019bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8019bf8:	681a      	ldr	r2, [r3, #0]
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	43db      	mvns	r3, r3
 8019bfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8019c02:	4013      	ands	r3, r2
 8019c04:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8019c06:	697b      	ldr	r3, [r7, #20]
 8019c08:	f003 0303 	and.w	r3, r3, #3
 8019c0c:	009b      	lsls	r3, r3, #2
 8019c0e:	220f      	movs	r2, #15
 8019c10:	fa02 f303 	lsl.w	r3, r2, r3
 8019c14:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8019c16:	4a30      	ldr	r2, [pc, #192]	@ (8019cd8 <HAL_GPIO_DeInit+0x1e8>)
 8019c18:	697b      	ldr	r3, [r7, #20]
 8019c1a:	089b      	lsrs	r3, r3, #2
 8019c1c:	3302      	adds	r3, #2
 8019c1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8019c22:	68bb      	ldr	r3, [r7, #8]
 8019c24:	43da      	mvns	r2, r3
 8019c26:	482c      	ldr	r0, [pc, #176]	@ (8019cd8 <HAL_GPIO_DeInit+0x1e8>)
 8019c28:	697b      	ldr	r3, [r7, #20]
 8019c2a:	089b      	lsrs	r3, r3, #2
 8019c2c:	400a      	ands	r2, r1
 8019c2e:	3302      	adds	r3, #2
 8019c30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	681a      	ldr	r2, [r3, #0]
 8019c38:	697b      	ldr	r3, [r7, #20]
 8019c3a:	005b      	lsls	r3, r3, #1
 8019c3c:	2103      	movs	r1, #3
 8019c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8019c42:	431a      	orrs	r2, r3
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8019c48:	697b      	ldr	r3, [r7, #20]
 8019c4a:	08da      	lsrs	r2, r3, #3
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	3208      	adds	r2, #8
 8019c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019c54:	697b      	ldr	r3, [r7, #20]
 8019c56:	f003 0307 	and.w	r3, r3, #7
 8019c5a:	009b      	lsls	r3, r3, #2
 8019c5c:	220f      	movs	r2, #15
 8019c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8019c62:	43db      	mvns	r3, r3
 8019c64:	697a      	ldr	r2, [r7, #20]
 8019c66:	08d2      	lsrs	r2, r2, #3
 8019c68:	4019      	ands	r1, r3
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	3208      	adds	r2, #8
 8019c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	68da      	ldr	r2, [r3, #12]
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	005b      	lsls	r3, r3, #1
 8019c7a:	2103      	movs	r1, #3
 8019c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8019c80:	43db      	mvns	r3, r3
 8019c82:	401a      	ands	r2, r3
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	685a      	ldr	r2, [r3, #4]
 8019c8c:	2101      	movs	r1, #1
 8019c8e:	697b      	ldr	r3, [r7, #20]
 8019c90:	fa01 f303 	lsl.w	r3, r1, r3
 8019c94:	43db      	mvns	r3, r3
 8019c96:	401a      	ands	r2, r3
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	689a      	ldr	r2, [r3, #8]
 8019ca0:	697b      	ldr	r3, [r7, #20]
 8019ca2:	005b      	lsls	r3, r3, #1
 8019ca4:	2103      	movs	r1, #3
 8019ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8019caa:	43db      	mvns	r3, r3
 8019cac:	401a      	ands	r2, r3
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8019cb2:	697b      	ldr	r3, [r7, #20]
 8019cb4:	3301      	adds	r3, #1
 8019cb6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8019cb8:	683a      	ldr	r2, [r7, #0]
 8019cba:	697b      	ldr	r3, [r7, #20]
 8019cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	f47f af1f 	bne.w	8019b04 <HAL_GPIO_DeInit+0x14>
  }
}
 8019cc6:	bf00      	nop
 8019cc8:	bf00      	nop
 8019cca:	371c      	adds	r7, #28
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd2:	4770      	bx	lr
 8019cd4:	58000080 	.word	0x58000080
 8019cd8:	58000400 	.word	0x58000400
 8019cdc:	58020000 	.word	0x58020000
 8019ce0:	58020400 	.word	0x58020400
 8019ce4:	58020800 	.word	0x58020800
 8019ce8:	58020c00 	.word	0x58020c00
 8019cec:	58021000 	.word	0x58021000
 8019cf0:	58021400 	.word	0x58021400
 8019cf4:	58021800 	.word	0x58021800
 8019cf8:	58021c00 	.word	0x58021c00
 8019cfc:	58022000 	.word	0x58022000
 8019d00:	58022400 	.word	0x58022400

08019d04 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8019d04:	b480      	push	{r7}
 8019d06:	b083      	sub	sp, #12
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8019d0c:	4a08      	ldr	r2, [pc, #32]	@ (8019d30 <HAL_HSEM_FastTake+0x2c>)
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	3320      	adds	r3, #32
 8019d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019d16:	4a07      	ldr	r2, [pc, #28]	@ (8019d34 <HAL_HSEM_FastTake+0x30>)
 8019d18:	4293      	cmp	r3, r2
 8019d1a:	d101      	bne.n	8019d20 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	e000      	b.n	8019d22 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8019d20:	2301      	movs	r3, #1
}
 8019d22:	4618      	mov	r0, r3
 8019d24:	370c      	adds	r7, #12
 8019d26:	46bd      	mov	sp, r7
 8019d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d2c:	4770      	bx	lr
 8019d2e:	bf00      	nop
 8019d30:	58026400 	.word	0x58026400
 8019d34:	80000300 	.word	0x80000300

08019d38 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8019d38:	b480      	push	{r7}
 8019d3a:	b083      	sub	sp, #12
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
 8019d40:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8019d42:	4906      	ldr	r1, [pc, #24]	@ (8019d5c <HAL_HSEM_Release+0x24>)
 8019d44:	683b      	ldr	r3, [r7, #0]
 8019d46:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8019d50:	bf00      	nop
 8019d52:	370c      	adds	r7, #12
 8019d54:	46bd      	mov	sp, r7
 8019d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5a:	4770      	bx	lr
 8019d5c:	58026400 	.word	0x58026400

08019d60 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b084      	sub	sp, #16
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019d68:	f7ff fb4c 	bl	8019404 <HAL_GetTick>
 8019d6c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d101      	bne.n	8019d78 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8019d74:	2301      	movs	r3, #1
 8019d76:	e03b      	b.n	8019df0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	2202      	movs	r2, #2
 8019d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	68da      	ldr	r2, [r3, #12]
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	f022 0201 	bic.w	r2, r2, #1
 8019d96:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8019d98:	e00f      	b.n	8019dba <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8019d9a:	f7ff fb33 	bl	8019404 <HAL_GetTick>
 8019d9e:	4602      	mov	r2, r0
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	1ad3      	subs	r3, r2, r3
 8019da4:	2b05      	cmp	r3, #5
 8019da6:	d908      	bls.n	8019dba <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2240      	movs	r2, #64	@ 0x40
 8019dac:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	2203      	movs	r2, #3
 8019db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8019db6:	2301      	movs	r3, #1
 8019db8:	e01a      	b.n	8019df0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	68db      	ldr	r3, [r3, #12]
 8019dc0:	f003 0301 	and.w	r3, r3, #1
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d1e8      	bne.n	8019d9a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8019dc8:	6878      	ldr	r0, [r7, #4]
 8019dca:	f000 f9bb 	bl	801a144 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	2200      	movs	r2, #0
 8019dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	2200      	movs	r2, #0
 8019dde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	2200      	movs	r2, #0
 8019de4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	2201      	movs	r2, #1
 8019dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8019dee:	2300      	movs	r3, #0
}
 8019df0:	4618      	mov	r0, r3
 8019df2:	3710      	adds	r7, #16
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd80      	pop	{r7, pc}

08019df8 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8019df8:	b480      	push	{r7}
 8019dfa:	b087      	sub	sp, #28
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	60f8      	str	r0, [r7, #12]
 8019e00:	60b9      	str	r1, [r7, #8]
 8019e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8019e04:	2300      	movs	r3, #0
 8019e06:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d101      	bne.n	8019e12 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8019e0e:	2301      	movs	r3, #1
 8019e10:	e03e      	b.n	8019e90 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8019e18:	2b01      	cmp	r3, #1
 8019e1a:	d101      	bne.n	8019e20 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8019e1c:	2302      	movs	r3, #2
 8019e1e:	e037      	b.n	8019e90 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	2201      	movs	r2, #1
 8019e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019e2e:	b2db      	uxtb	r3, r3
 8019e30:	2b01      	cmp	r3, #1
 8019e32:	d126      	bne.n	8019e82 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	691b      	ldr	r3, [r3, #16]
 8019e3a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d11c      	bne.n	8019e7c <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	68ba      	ldr	r2, [r7, #8]
 8019e48:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	687a      	ldr	r2, [r7, #4]
 8019e50:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8019e52:	68bb      	ldr	r3, [r7, #8]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d108      	bne.n	8019e6a <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	691a      	ldr	r2, [r3, #16]
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8019e66:	611a      	str	r2, [r3, #16]
 8019e68:	e00d      	b.n	8019e86 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	691a      	ldr	r2, [r3, #16]
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8019e78:	611a      	str	r2, [r3, #16]
 8019e7a:	e004      	b.n	8019e86 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8019e7c:	2301      	movs	r3, #1
 8019e7e:	75fb      	strb	r3, [r7, #23]
 8019e80:	e001      	b.n	8019e86 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8019e82:	2301      	movs	r3, #1
 8019e84:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	2200      	movs	r2, #0
 8019e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8019e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019e90:	4618      	mov	r0, r3
 8019e92:	371c      	adds	r7, #28
 8019e94:	46bd      	mov	sp, r7
 8019e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e9a:	4770      	bx	lr

08019e9c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b086      	sub	sp, #24
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8019ea4:	2300      	movs	r3, #0
 8019ea6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8019ea8:	4b91      	ldr	r3, [pc, #580]	@ (801a0f0 <HAL_MDMA_IRQHandler+0x254>)
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	4a91      	ldr	r2, [pc, #580]	@ (801a0f4 <HAL_MDMA_IRQHandler+0x258>)
 8019eae:	fba2 2303 	umull	r2, r3, r2, r3
 8019eb2:	0a9b      	lsrs	r3, r3, #10
 8019eb4:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	461a      	mov	r2, r3
 8019ebc:	4b8e      	ldr	r3, [pc, #568]	@ (801a0f8 <HAL_MDMA_IRQHandler+0x25c>)
 8019ebe:	4413      	add	r3, r2
 8019ec0:	099b      	lsrs	r3, r3, #6
 8019ec2:	f003 031f 	and.w	r3, r3, #31
 8019ec6:	2201      	movs	r2, #1
 8019ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8019ecc:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8019ece:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8019ed2:	681a      	ldr	r2, [r3, #0]
 8019ed4:	693b      	ldr	r3, [r7, #16]
 8019ed6:	4013      	ands	r3, r2
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	f000 812d 	beq.w	801a138 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	f003 0301 	and.w	r3, r3, #1
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d054      	beq.n	8019f96 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	68db      	ldr	r3, [r3, #12]
 8019ef2:	f003 0302 	and.w	r3, r3, #2
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d04d      	beq.n	8019f96 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	68da      	ldr	r2, [r3, #12]
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	f022 0202 	bic.w	r2, r2, #2
 8019f08:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	689b      	ldr	r3, [r3, #8]
 8019f10:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d106      	bne.n	8019f2a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019f20:	f043 0201 	orr.w	r2, r3, #1
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	669a      	str	r2, [r3, #104]	@ 0x68
 8019f28:	e005      	b.n	8019f36 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019f2e:	f043 0202 	orr.w	r2, r3, #2
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d005      	beq.n	8019f4c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019f44:	f043 0204 	orr.w	r2, r3, #4
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d005      	beq.n	8019f62 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019f5a:	f043 0208 	orr.w	r2, r3, #8
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d005      	beq.n	8019f78 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019f70:	f043 0210 	orr.w	r2, r3, #16
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8019f78:	68fb      	ldr	r3, [r7, #12]
 8019f7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d005      	beq.n	8019f8e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019f86:	f043 0220 	orr.w	r2, r3, #32
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	2201      	movs	r2, #1
 8019f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	f003 0310 	and.w	r3, r3, #16
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d012      	beq.n	8019fca <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	68db      	ldr	r3, [r3, #12]
 8019faa:	f003 0320 	and.w	r3, r3, #32
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d00b      	beq.n	8019fca <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	2210      	movs	r2, #16
 8019fb8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d003      	beq.n	8019fca <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019fc6:	6878      	ldr	r0, [r7, #4]
 8019fc8:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	f003 0308 	and.w	r3, r3, #8
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d012      	beq.n	8019ffe <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	68db      	ldr	r3, [r3, #12]
 8019fde:	f003 0310 	and.w	r3, r3, #16
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d00b      	beq.n	8019ffe <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	2208      	movs	r2, #8
 8019fec:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d003      	beq.n	8019ffe <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019ffa:	6878      	ldr	r0, [r7, #4]
 8019ffc:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	f003 0304 	and.w	r3, r3, #4
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d012      	beq.n	801a032 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	68db      	ldr	r3, [r3, #12]
 801a012:	f003 0308 	and.w	r3, r3, #8
 801a016:	2b00      	cmp	r3, #0
 801a018:	d00b      	beq.n	801a032 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	2204      	movs	r2, #4
 801a020:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a026:	2b00      	cmp	r3, #0
 801a028:	d003      	beq.n	801a032 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a02e:	6878      	ldr	r0, [r7, #4]
 801a030:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	f003 0302 	and.w	r3, r3, #2
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d039      	beq.n	801a0b4 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	68db      	ldr	r3, [r3, #12]
 801a046:	f003 0304 	and.w	r3, r3, #4
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d032      	beq.n	801a0b4 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	68da      	ldr	r2, [r3, #12]
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 801a05c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801a064:	b2db      	uxtb	r3, r3
 801a066:	2b04      	cmp	r3, #4
 801a068:	d110      	bne.n	801a08c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	2200      	movs	r2, #0
 801a06e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	2201      	movs	r2, #1
 801a076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d05c      	beq.n	801a13c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a086:	6878      	ldr	r0, [r7, #4]
 801a088:	4798      	blx	r3
        }
        return;
 801a08a:	e057      	b.n	801a13c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	2202      	movs	r2, #2
 801a092:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	2200      	movs	r2, #0
 801a098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	2201      	movs	r2, #1
 801a0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d003      	beq.n	801a0b4 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a0b0:	6878      	ldr	r0, [r7, #4]
 801a0b2:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d040      	beq.n	801a13e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	2204      	movs	r2, #4
 801a0c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	68da      	ldr	r2, [r3, #12]
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	f022 0201 	bic.w	r2, r2, #1
 801a0d2:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 801a0d4:	68bb      	ldr	r3, [r7, #8]
 801a0d6:	3301      	adds	r3, #1
 801a0d8:	60bb      	str	r3, [r7, #8]
 801a0da:	697a      	ldr	r2, [r7, #20]
 801a0dc:	429a      	cmp	r2, r3
 801a0de:	d30d      	bcc.n	801a0fc <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	68db      	ldr	r3, [r3, #12]
 801a0e6:	f003 0301 	and.w	r3, r3, #1
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d1f2      	bne.n	801a0d4 <HAL_MDMA_IRQHandler+0x238>
 801a0ee:	e006      	b.n	801a0fe <HAL_MDMA_IRQHandler+0x262>
 801a0f0:	240148d8 	.word	0x240148d8
 801a0f4:	1b4e81b5 	.word	0x1b4e81b5
 801a0f8:	adffffc0 	.word	0xadffffc0
        break;
 801a0fc:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	2200      	movs	r2, #0
 801a102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	68db      	ldr	r3, [r3, #12]
 801a10c:	f003 0301 	and.w	r3, r3, #1
 801a110:	2b00      	cmp	r3, #0
 801a112:	d004      	beq.n	801a11e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	2203      	movs	r2, #3
 801a118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801a11c:	e003      	b.n	801a126 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2201      	movs	r2, #1
 801a122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d007      	beq.n	801a13e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a132:	6878      	ldr	r0, [r7, #4]
 801a134:	4798      	blx	r3
 801a136:	e002      	b.n	801a13e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 801a138:	bf00      	nop
 801a13a:	e000      	b.n	801a13e <HAL_MDMA_IRQHandler+0x2a2>
        return;
 801a13c:	bf00      	nop
    }
  }
}
 801a13e:	3718      	adds	r7, #24
 801a140:	46bd      	mov	sp, r7
 801a142:	bd80      	pop	{r7, pc}

0801a144 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 801a144:	b480      	push	{r7}
 801a146:	b085      	sub	sp, #20
 801a148:	af00      	add	r7, sp, #0
 801a14a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	68d9      	ldr	r1, [r3, #12]
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	691a      	ldr	r2, [r3, #16]
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	430a      	orrs	r2, r1
 801a15a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	695a      	ldr	r2, [r3, #20]
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	699b      	ldr	r3, [r3, #24]
 801a164:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801a16a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	6a1b      	ldr	r3, [r3, #32]
 801a170:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801a176:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a17c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801a182:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a188:	3b01      	subs	r3, #1
 801a18a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 801a18c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801a198:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801a19a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	685b      	ldr	r3, [r3, #4]
 801a1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a1a4:	d107      	bne.n	801a1b6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	691a      	ldr	r2, [r3, #16]
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 801a1b4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	2200      	movs	r2, #0
 801a1bc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	da11      	bge.n	801a1ea <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	695a      	ldr	r2, [r3, #20]
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801a1d4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a1da:	425b      	negs	r3, r3
 801a1dc:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	68fa      	ldr	r2, [r7, #12]
 801a1e4:	b292      	uxth	r2, r2
 801a1e6:	621a      	str	r2, [r3, #32]
 801a1e8:	e006      	b.n	801a1f8 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a1ee:	461a      	mov	r2, r3
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	b292      	uxth	r2, r2
 801a1f6:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	da15      	bge.n	801a22c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	695a      	ldr	r2, [r3, #20]
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 801a20e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a214:	425b      	negs	r3, r3
 801a216:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	6a19      	ldr	r1, [r3, #32]
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	041a      	lsls	r2, r3, #16
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	430a      	orrs	r2, r1
 801a228:	621a      	str	r2, [r3, #32]
 801a22a:	e009      	b.n	801a240 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	6a19      	ldr	r1, [r3, #32]
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a236:	041a      	lsls	r2, r3, #16
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	430a      	orrs	r2, r1
 801a23e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	685b      	ldr	r3, [r3, #4]
 801a244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a248:	d006      	beq.n	801a258 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	685a      	ldr	r2, [r3, #4]
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	b2d2      	uxtb	r2, r2
 801a254:	629a      	str	r2, [r3, #40]	@ 0x28
 801a256:	e003      	b.n	801a260 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	2200      	movs	r2, #0
 801a25e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	2200      	movs	r2, #0
 801a266:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801a268:	bf00      	nop
 801a26a:	3714      	adds	r7, #20
 801a26c:	46bd      	mov	sp, r7
 801a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a272:	4770      	bx	lr

0801a274 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 801a274:	b580      	push	{r7, lr}
 801a276:	b082      	sub	sp, #8
 801a278:	af00      	add	r7, sp, #0
 801a27a:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d101      	bne.n	801a286 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 801a282:	2301      	movs	r3, #1
 801a284:	e031      	b.n	801a2ea <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a28c:	b2db      	uxtb	r3, r3
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d105      	bne.n	801a29e <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	2200      	movs	r2, #0
 801a296:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 801a298:	6878      	ldr	r0, [r7, #4]
 801a29a:	f7fe fac3 	bl	8018824 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	2203      	movs	r2, #3
 801a2a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 801a2a6:	6878      	ldr	r0, [r7, #4]
 801a2a8:	f000 f824 	bl	801a2f4 <HAL_MMC_InitCard>
 801a2ac:	4603      	mov	r3, r0
 801a2ae:	2b01      	cmp	r3, #1
 801a2b0:	d101      	bne.n	801a2b6 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 801a2b2:	2301      	movs	r3, #1
 801a2b4:	e019      	b.n	801a2ea <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	2200      	movs	r2, #0
 801a2ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	2200      	movs	r2, #0
 801a2c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	2201      	movs	r2, #1
 801a2c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	68db      	ldr	r3, [r3, #12]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d00a      	beq.n	801a2e8 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	68db      	ldr	r3, [r3, #12]
 801a2d6:	4619      	mov	r1, r3
 801a2d8:	6878      	ldr	r0, [r7, #4]
 801a2da:	f000 fed3 	bl	801b084 <HAL_MMC_ConfigWideBusOperation>
 801a2de:	4603      	mov	r3, r0
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d001      	beq.n	801a2e8 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 801a2e4:	2301      	movs	r3, #1
 801a2e6:	e000      	b.n	801a2ea <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 801a2e8:	2300      	movs	r3, #0
}
 801a2ea:	4618      	mov	r0, r3
 801a2ec:	3708      	adds	r7, #8
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	bd80      	pop	{r7, pc}
	...

0801a2f4 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 801a2f4:	b590      	push	{r4, r7, lr}
 801a2f6:	b08d      	sub	sp, #52	@ 0x34
 801a2f8:	af02      	add	r7, sp, #8
 801a2fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801a300:	2300      	movs	r3, #0
 801a302:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801a304:	2300      	movs	r3, #0
 801a306:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801a308:	2300      	movs	r3, #0
 801a30a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801a30c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801a310:	f04f 0100 	mov.w	r1, #0
 801a314:	f003 fde8 	bl	801dee8 <HAL_RCCEx_GetPeriphCLKFreq>
 801a318:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 801a31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d109      	bne.n	801a334 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	2201      	movs	r2, #1
 801a324:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801a32e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801a330:	2301      	movs	r3, #1
 801a332:	e070      	b.n	801a416 <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 801a334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a336:	0a1b      	lsrs	r3, r3, #8
 801a338:	4a39      	ldr	r2, [pc, #228]	@ (801a420 <HAL_MMC_InitCard+0x12c>)
 801a33a:	fba2 2303 	umull	r2, r3, r2, r3
 801a33e:	091b      	lsrs	r3, r3, #4
 801a340:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	681c      	ldr	r4, [r3, #0]
 801a346:	466a      	mov	r2, sp
 801a348:	f107 0318 	add.w	r3, r7, #24
 801a34c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a350:	e882 0003 	stmia.w	r2, {r0, r1}
 801a354:	f107 030c 	add.w	r3, r7, #12
 801a358:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a35a:	4620      	mov	r0, r4
 801a35c:	f006 fc4a 	bl	8020bf4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	4618      	mov	r0, r3
 801a366:	f006 fc8d 	bl	8020c84 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 801a36a:	69fb      	ldr	r3, [r7, #28]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d005      	beq.n	801a37c <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 801a370:	69fb      	ldr	r3, [r7, #28]
 801a372:	005b      	lsls	r3, r3, #1
 801a374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a376:	fbb2 f3f3 	udiv	r3, r2, r3
 801a37a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 801a37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d007      	beq.n	801a392 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 801a382:	4a28      	ldr	r2, [pc, #160]	@ (801a424 <HAL_MMC_InitCard+0x130>)
 801a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a386:	fbb2 f3f3 	udiv	r3, r2, r3
 801a38a:	3301      	adds	r3, #1
 801a38c:	4618      	mov	r0, r3
 801a38e:	f7ff f845 	bl	801941c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 801a392:	6878      	ldr	r0, [r7, #4]
 801a394:	f001 f860 	bl	801b458 <MMC_PowerON>
 801a398:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801a39a:	6a3b      	ldr	r3, [r7, #32]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d00b      	beq.n	801a3b8 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	2201      	movs	r2, #1
 801a3a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a3ac:	6a3b      	ldr	r3, [r7, #32]
 801a3ae:	431a      	orrs	r2, r3
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801a3b4:	2301      	movs	r3, #1
 801a3b6:	e02e      	b.n	801a416 <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 801a3b8:	6878      	ldr	r0, [r7, #4]
 801a3ba:	f000 ff4f 	bl	801b25c <MMC_InitCard>
 801a3be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801a3c0:	6a3b      	ldr	r3, [r7, #32]
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d00b      	beq.n	801a3de <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	2201      	movs	r2, #1
 801a3ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a3d2:	6a3b      	ldr	r3, [r7, #32]
 801a3d4:	431a      	orrs	r2, r3
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801a3da:	2301      	movs	r3, #1
 801a3dc:	e01b      	b.n	801a416 <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	f006 fcf2 	bl	8020dd0 <SDMMC_CmdBlockLength>
 801a3ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801a3ee:	6a3b      	ldr	r3, [r7, #32]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d00f      	beq.n	801a414 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	4a0b      	ldr	r2, [pc, #44]	@ (801a428 <HAL_MMC_InitCard+0x134>)
 801a3fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a400:	6a3b      	ldr	r3, [r7, #32]
 801a402:	431a      	orrs	r2, r3
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	2201      	movs	r2, #1
 801a40c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801a410:	2301      	movs	r3, #1
 801a412:	e000      	b.n	801a416 <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 801a414:	2300      	movs	r3, #0
}
 801a416:	4618      	mov	r0, r3
 801a418:	372c      	adds	r7, #44	@ 0x2c
 801a41a:	46bd      	mov	sp, r7
 801a41c:	bd90      	pop	{r4, r7, pc}
 801a41e:	bf00      	nop
 801a420:	014f8b59 	.word	0x014f8b59
 801a424:	00012110 	.word	0x00012110
 801a428:	1fe00fff 	.word	0x1fe00fff

0801a42c <HAL_MMC_DeInit>:
  * @brief  De-Initializes the MMC card.
  * @param  hmmc: Pointer to MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_DeInit(MMC_HandleTypeDef *hmmc)
{
 801a42c:	b580      	push	{r7, lr}
 801a42e:	b082      	sub	sp, #8
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d101      	bne.n	801a43e <HAL_MMC_DeInit+0x12>
  {
    return HAL_ERROR;
 801a43a:	2301      	movs	r3, #1
 801a43c:	e011      	b.n	801a462 <HAL_MMC_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hmmc->Instance));

  hmmc->State = HAL_MMC_STATE_BUSY;
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	2203      	movs	r2, #3
 801a442:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Set MMC power state to off */
  MMC_PowerOFF(hmmc);
 801a446:	6878      	ldr	r0, [r7, #4]
 801a448:	f001 f856 	bl	801b4f8 <MMC_PowerOFF>

  /* DeInit the low level hardware */
  hmmc->MspDeInitCallback(hmmc);
#else
  /* De-Initialize the MSP layer */
  HAL_MMC_MspDeInit(hmmc);
 801a44c:	6878      	ldr	r0, [r7, #4]
 801a44e:	f7fe faa7 	bl	80189a0 <HAL_MMC_MspDeInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	2200      	movs	r2, #0
 801a456:	635a      	str	r2, [r3, #52]	@ 0x34
  hmmc->State = HAL_MMC_STATE_RESET;
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	2200      	movs	r2, #0
 801a45c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 801a460:	2300      	movs	r3, #0
}
 801a462:	4618      	mov	r0, r3
 801a464:	3708      	adds	r7, #8
 801a466:	46bd      	mov	sp, r7
 801a468:	bd80      	pop	{r7, pc}
	...

0801a46c <HAL_MMC_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ReadBlocks_DMA(MMC_HandleTypeDef *hmmc, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 801a46c:	b580      	push	{r7, lr}
 801a46e:	b08c      	sub	sp, #48	@ 0x30
 801a470:	af00      	add	r7, sp, #0
 801a472:	60f8      	str	r0, [r7, #12]
 801a474:	60b9      	str	r1, [r7, #8]
 801a476:	607a      	str	r2, [r7, #4]
 801a478:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801a47e:	68bb      	ldr	r3, [r7, #8]
 801a480:	2b00      	cmp	r3, #0
 801a482:	d107      	bne.n	801a494 <HAL_MMC_ReadBlocks_DMA+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a488:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801a490:	2301      	movs	r3, #1
 801a492:	e0a8      	b.n	801a5e6 <HAL_MMC_ReadBlocks_DMA+0x17a>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a49a:	b2db      	uxtb	r3, r3
 801a49c:	2b01      	cmp	r3, #1
 801a49e:	f040 80a1 	bne.w	801a5e4 <HAL_MMC_ReadBlocks_DMA+0x178>
  {
    hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 801a4a8:	687a      	ldr	r2, [r7, #4]
 801a4aa:	683b      	ldr	r3, [r7, #0]
 801a4ac:	441a      	add	r2, r3
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a4b2:	429a      	cmp	r2, r3
 801a4b4:	d907      	bls.n	801a4c6 <HAL_MMC_ReadBlocks_DMA+0x5a>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a4ba:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801a4c2:	2301      	movs	r3, #1
 801a4c4:	e08f      	b.n	801a5e6 <HAL_MMC_ReadBlocks_DMA+0x17a>
    }

    /* Check the case of 4kB blocks (field DATA SECTOR SIZE of extended CSD register) */
    if (((hmmc->Ext_CSD[(MMC_EXT_CSD_DATA_SEC_SIZE_INDEX / 4)] >> MMC_EXT_CSD_DATA_SEC_SIZE_POS) & 0x000000FFU) != 0x0U)
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a4cc:	0a1b      	lsrs	r3, r3, #8
 801a4ce:	b2db      	uxtb	r3, r3
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d019      	beq.n	801a508 <HAL_MMC_ReadBlocks_DMA+0x9c>
    {
      if ((NumberOfBlocks % 8U) != 0U)
 801a4d4:	683b      	ldr	r3, [r7, #0]
 801a4d6:	f003 0307 	and.w	r3, r3, #7
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d007      	beq.n	801a4ee <HAL_MMC_ReadBlocks_DMA+0x82>
      {
        /* The number of blocks should be a multiple of 8 sectors of 512 bytes = 4 KBytes */
        hmmc->ErrorCode |= HAL_MMC_ERROR_BLOCK_LEN_ERR;
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a4e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 801a4ea:	2301      	movs	r3, #1
 801a4ec:	e07b      	b.n	801a5e6 <HAL_MMC_ReadBlocks_DMA+0x17a>
      }

      if ((BlockAdd % 8U) != 0U)
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	f003 0307 	and.w	r3, r3, #7
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d007      	beq.n	801a508 <HAL_MMC_ReadBlocks_DMA+0x9c>
      {
        /* The address should be aligned to 8 (corresponding to 4 KBytes blocks) */
        hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_MISALIGNED;
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a4fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 801a504:	2301      	movs	r3, #1
 801a506:	e06e      	b.n	801a5e6 <HAL_MMC_ReadBlocks_DMA+0x17a>
      }
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	2203      	movs	r2, #3
 801a50c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	2200      	movs	r2, #0
 801a516:	62da      	str	r2, [r3, #44]	@ 0x2c

    hmmc->pRxBuffPtr = pData;
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	68ba      	ldr	r2, [r7, #8]
 801a51c:	625a      	str	r2, [r3, #36]	@ 0x24
    hmmc->RxXferSize = MMC_BLOCKSIZE * NumberOfBlocks;
 801a51e:	683b      	ldr	r3, [r7, #0]
 801a520:	025a      	lsls	r2, r3, #9
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	629a      	str	r2, [r3, #40]	@ 0x28

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a52a:	2b01      	cmp	r3, #1
 801a52c:	d002      	beq.n	801a534 <HAL_MMC_ReadBlocks_DMA+0xc8>
    {
      add *= MMC_BLOCKSIZE;
 801a52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a530:	025b      	lsls	r3, r3, #9
 801a532:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801a534:	f04f 33ff 	mov.w	r3, #4294967295
 801a538:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE * NumberOfBlocks;
 801a53a:	683b      	ldr	r3, [r7, #0]
 801a53c:	025b      	lsls	r3, r3, #9
 801a53e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801a540:	2390      	movs	r3, #144	@ 0x90
 801a542:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801a544:	2302      	movs	r3, #2
 801a546:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801a548:	2300      	movs	r3, #0
 801a54a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801a54c:	2300      	movs	r3, #0
 801a54e:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	f107 0210 	add.w	r2, r7, #16
 801a558:	4611      	mov	r1, r2
 801a55a:	4618      	mov	r0, r3
 801a55c:	f006 fc0c 	bl	8020d78 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	68da      	ldr	r2, [r3, #12]
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801a56e:	60da      	str	r2, [r3, #12]
    hmmc->Instance->IDMABASE0 = (uint32_t) pData ;
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	68ba      	ldr	r2, [r7, #8]
 801a576:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	2201      	movs	r2, #1
 801a57e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 801a580:	683b      	ldr	r3, [r7, #0]
 801a582:	2b01      	cmp	r3, #1
 801a584:	d90a      	bls.n	801a59c <HAL_MMC_ReadBlocks_DMA+0x130>
    {
      hmmc->Context = (MMC_CONTEXT_READ_MULTIPLE_BLOCK | MMC_CONTEXT_DMA);
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	2282      	movs	r2, #130	@ 0x82
 801a58a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hmmc->Instance, add);
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a592:	4618      	mov	r0, r3
 801a594:	f006 fc62 	bl	8020e5c <SDMMC_CmdReadMultiBlock>
 801a598:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801a59a:	e009      	b.n	801a5b0 <HAL_MMC_ReadBlocks_DMA+0x144>
    }
    else
    {
      hmmc->Context = (MMC_CONTEXT_READ_SINGLE_BLOCK | MMC_CONTEXT_DMA);
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	2281      	movs	r2, #129	@ 0x81
 801a5a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hmmc->Instance, add);
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	f006 fc34 	bl	8020e16 <SDMMC_CmdReadSingleBlock>
 801a5ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_MMC_ERROR_NONE)
 801a5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d00c      	beq.n	801a5d0 <HAL_MMC_ReadBlocks_DMA+0x164>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	4a0d      	ldr	r2, [pc, #52]	@ (801a5f0 <HAL_MMC_ReadBlocks_DMA+0x184>)
 801a5bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode = errorstate;
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a5c2:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801a5c4:	68fb      	ldr	r3, [r7, #12]
 801a5c6:	2201      	movs	r2, #1
 801a5c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801a5cc:	2301      	movs	r3, #1
 801a5ce:	e00a      	b.n	801a5e6 <HAL_MMC_ReadBlocks_DMA+0x17a>
    }

    /* Enable transfer interrupts */
    __HAL_MMC_ENABLE_IT(hmmc, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 801a5de:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	e000      	b.n	801a5e6 <HAL_MMC_ReadBlocks_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 801a5e4:	2302      	movs	r3, #2
  }
}
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	3730      	adds	r7, #48	@ 0x30
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bd80      	pop	{r7, pc}
 801a5ee:	bf00      	nop
 801a5f0:	1fe00fff 	.word	0x1fe00fff

0801a5f4 <HAL_MMC_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_WriteBlocks_DMA(MMC_HandleTypeDef *hmmc, const uint8_t *pData,
                                          uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b08c      	sub	sp, #48	@ 0x30
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	60f8      	str	r0, [r7, #12]
 801a5fc:	60b9      	str	r1, [r7, #8]
 801a5fe:	607a      	str	r2, [r7, #4]
 801a600:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801a606:	68bb      	ldr	r3, [r7, #8]
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d107      	bne.n	801a61c <HAL_MMC_WriteBlocks_DMA+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 801a60c:	68fb      	ldr	r3, [r7, #12]
 801a60e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a610:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801a614:	68fb      	ldr	r3, [r7, #12]
 801a616:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801a618:	2301      	movs	r3, #1
 801a61a:	e0ab      	b.n	801a774 <HAL_MMC_WriteBlocks_DMA+0x180>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 801a61c:	68fb      	ldr	r3, [r7, #12]
 801a61e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a622:	b2db      	uxtb	r3, r3
 801a624:	2b01      	cmp	r3, #1
 801a626:	f040 80a4 	bne.w	801a772 <HAL_MMC_WriteBlocks_DMA+0x17e>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	2200      	movs	r2, #0
 801a62e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 801a630:	687a      	ldr	r2, [r7, #4]
 801a632:	683b      	ldr	r3, [r7, #0]
 801a634:	441a      	add	r2, r3
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a63a:	429a      	cmp	r2, r3
 801a63c:	d907      	bls.n	801a64e <HAL_MMC_WriteBlocks_DMA+0x5a>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a642:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801a64a:	2301      	movs	r3, #1
 801a64c:	e092      	b.n	801a774 <HAL_MMC_WriteBlocks_DMA+0x180>
    }

    /* Check the case of 4kB blocks (field DATA SECTOR SIZE of extended CSD register) */
    if (((hmmc->Ext_CSD[(MMC_EXT_CSD_DATA_SEC_SIZE_INDEX / 4)] >> MMC_EXT_CSD_DATA_SEC_SIZE_POS) & 0x000000FFU) != 0x0U)
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a654:	0a1b      	lsrs	r3, r3, #8
 801a656:	b2db      	uxtb	r3, r3
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d019      	beq.n	801a690 <HAL_MMC_WriteBlocks_DMA+0x9c>
    {
      if ((NumberOfBlocks % 8U) != 0U)
 801a65c:	683b      	ldr	r3, [r7, #0]
 801a65e:	f003 0307 	and.w	r3, r3, #7
 801a662:	2b00      	cmp	r3, #0
 801a664:	d007      	beq.n	801a676 <HAL_MMC_WriteBlocks_DMA+0x82>
      {
        /* The number of blocks should be a multiple of 8 sectors of 512 bytes = 4 KBytes */
        hmmc->ErrorCode |= HAL_MMC_ERROR_BLOCK_LEN_ERR;
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a66a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 801a672:	2301      	movs	r3, #1
 801a674:	e07e      	b.n	801a774 <HAL_MMC_WriteBlocks_DMA+0x180>
      }

      if ((BlockAdd % 8U) != 0U)
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	f003 0307 	and.w	r3, r3, #7
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d007      	beq.n	801a690 <HAL_MMC_WriteBlocks_DMA+0x9c>
      {
        /* The address should be aligned to 8 (corresponding to 4 KBytes blocks) */
        hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_MISALIGNED;
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a684:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 801a68c:	2301      	movs	r3, #1
 801a68e:	e071      	b.n	801a774 <HAL_MMC_WriteBlocks_DMA+0x180>
      }
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	2203      	movs	r2, #3
 801a694:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	2200      	movs	r2, #0
 801a69e:	62da      	str	r2, [r3, #44]	@ 0x2c

    hmmc->pTxBuffPtr = pData;
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	68ba      	ldr	r2, [r7, #8]
 801a6a4:	61da      	str	r2, [r3, #28]
    hmmc->TxXferSize = MMC_BLOCKSIZE * NumberOfBlocks;
 801a6a6:	683b      	ldr	r3, [r7, #0]
 801a6a8:	025a      	lsls	r2, r3, #9
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	621a      	str	r2, [r3, #32]

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a6b2:	2b01      	cmp	r3, #1
 801a6b4:	d002      	beq.n	801a6bc <HAL_MMC_WriteBlocks_DMA+0xc8>
    {
      add *= MMC_BLOCKSIZE;
 801a6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6b8:	025b      	lsls	r3, r3, #9
 801a6ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801a6bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a6c0:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE * NumberOfBlocks;
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	025b      	lsls	r3, r3, #9
 801a6c6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801a6c8:	2390      	movs	r3, #144	@ 0x90
 801a6ca:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801a6cc:	2300      	movs	r3, #0
 801a6ce:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801a6d0:	2300      	movs	r3, #0
 801a6d2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	f107 0210 	add.w	r2, r7, #16
 801a6e0:	4611      	mov	r1, r2
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	f006 fb48 	bl	8020d78 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	68da      	ldr	r2, [r3, #12]
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801a6f6:	60da      	str	r2, [r3, #12]

    hmmc->Instance->IDMABASE0 = (uint32_t) pData ;
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	68ba      	ldr	r2, [r7, #8]
 801a6fe:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	2201      	movs	r2, #1
 801a706:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 801a708:	683b      	ldr	r3, [r7, #0]
 801a70a:	2b01      	cmp	r3, #1
 801a70c:	d90a      	bls.n	801a724 <HAL_MMC_WriteBlocks_DMA+0x130>
    {
      hmmc->Context = (MMC_CONTEXT_WRITE_MULTIPLE_BLOCK | MMC_CONTEXT_DMA);
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	22a0      	movs	r2, #160	@ 0xa0
 801a712:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hmmc->Instance, add);
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a71a:	4618      	mov	r0, r3
 801a71c:	f006 fbe4 	bl	8020ee8 <SDMMC_CmdWriteMultiBlock>
 801a720:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801a722:	e009      	b.n	801a738 <HAL_MMC_WriteBlocks_DMA+0x144>
    }
    else
    {
      hmmc->Context = (MMC_CONTEXT_WRITE_SINGLE_BLOCK | MMC_CONTEXT_DMA);
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	2290      	movs	r2, #144	@ 0x90
 801a728:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hmmc->Instance, add);
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a730:	4618      	mov	r0, r3
 801a732:	f006 fbb6 	bl	8020ea2 <SDMMC_CmdWriteSingleBlock>
 801a736:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_MMC_ERROR_NONE)
 801a738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d00f      	beq.n	801a75e <HAL_MMC_WriteBlocks_DMA+0x16a>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801a73e:	68fb      	ldr	r3, [r7, #12]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	4a0e      	ldr	r2, [pc, #56]	@ (801a77c <HAL_MMC_WriteBlocks_DMA+0x188>)
 801a744:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a74c:	431a      	orrs	r2, r3
 801a74e:	68fb      	ldr	r3, [r7, #12]
 801a750:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	2201      	movs	r2, #1
 801a756:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801a75a:	2301      	movs	r3, #1
 801a75c:	e00a      	b.n	801a774 <HAL_MMC_WriteBlocks_DMA+0x180>
    }

    /* Enable transfer interrupts */
    __HAL_MMC_ENABLE_IT(hmmc, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 801a76c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 801a76e:	2300      	movs	r3, #0
 801a770:	e000      	b.n	801a774 <HAL_MMC_WriteBlocks_DMA+0x180>
  }
  else
  {
    return HAL_BUSY;
 801a772:	2302      	movs	r3, #2
  }
}
 801a774:	4618      	mov	r0, r3
 801a776:	3730      	adds	r7, #48	@ 0x30
 801a778:	46bd      	mov	sp, r7
 801a77a:	bd80      	pop	{r7, pc}
 801a77c:	1fe00fff 	.word	0x1fe00fff

0801a780 <HAL_MMC_IRQHandler>:
  * @brief  This function handles MMC card interrupt request.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
void HAL_MMC_IRQHandler(MMC_HandleTypeDef *hmmc)
{
 801a780:	b580      	push	{r7, lr}
 801a782:	b084      	sub	sp, #16
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hmmc->Context;
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a78c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a794:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d008      	beq.n	801a7ae <HAL_MMC_IRQHandler+0x2e>
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	f003 0308 	and.w	r3, r3, #8
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d003      	beq.n	801a7ae <HAL_MMC_IRQHandler+0x2e>
  {
    MMC_Read_IT(hmmc);
 801a7a6:	6878      	ldr	r0, [r7, #4]
 801a7a8:	f000 ffd0 	bl	801b74c <MMC_Read_IT>
 801a7ac:	e194      	b.n	801aad8 <HAL_MMC_IRQHandler+0x358>
  }

  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DATAEND) != RESET)
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a7b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	f000 80aa 	beq.w	801a912 <HAL_MMC_IRQHandler+0x192>
  {
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DATAEND);
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a7c6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	681a      	ldr	r2, [r3, #0]
 801a7d2:	4b9a      	ldr	r3, [pc, #616]	@ (801aa3c <HAL_MMC_IRQHandler+0x2bc>)
 801a7d4:	400b      	ands	r3, r1
 801a7d6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                         SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                         SDMMC_IT_RXFIFOHF);

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801a7e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	68da      	ldr	r2, [r3, #12]
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801a7f6:	60da      	str	r2, [r3, #12]

    if ((context & MMC_CONTEXT_DMA) != 0U)
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d04b      	beq.n	801a89a <HAL_MMC_IRQHandler+0x11a>
    {
      hmmc->Instance->DLEN = 0;
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	2200      	movs	r2, #0
 801a808:	629a      	str	r2, [r3, #40]	@ 0x28
      hmmc->Instance->DCTRL = 0;
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	2200      	movs	r2, #0
 801a810:	62da      	str	r2, [r3, #44]	@ 0x2c
      hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA ;
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	2200      	movs	r2, #0
 801a818:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Stop Transfer for Write Multi blocks or Read Multi blocks */
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	f003 0302 	and.w	r3, r3, #2
 801a820:	2b00      	cmp	r3, #0
 801a822:	d104      	bne.n	801a82e <HAL_MMC_IRQHandler+0xae>
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	f003 0320 	and.w	r3, r3, #32
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d011      	beq.n	801a852 <HAL_MMC_IRQHandler+0xd2>
      {
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	4618      	mov	r0, r3
 801a834:	f006 fb7c 	bl	8020f30 <SDMMC_CmdStopTransfer>
 801a838:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 801a83a:	68bb      	ldr	r3, [r7, #8]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d008      	beq.n	801a852 <HAL_MMC_IRQHandler+0xd2>
        {
          hmmc->ErrorCode |= errorstate;
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a844:	68bb      	ldr	r3, [r7, #8]
 801a846:	431a      	orrs	r2, r3
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
          hmmc->ErrorCallback(hmmc);
#else
          HAL_MMC_ErrorCallback(hmmc);
 801a84c:	6878      	ldr	r0, [r7, #4]
 801a84e:	f000 f947 	bl	801aae0 <HAL_MMC_ErrorCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	4a7a      	ldr	r2, [pc, #488]	@ (801aa40 <HAL_MMC_IRQHandler+0x2c0>)
 801a858:	639a      	str	r2, [r3, #56]	@ 0x38

      hmmc->State = HAL_MMC_STATE_READY;
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	2201      	movs	r2, #1
 801a85e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	f003 0310 	and.w	r3, r3, #16
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d104      	bne.n	801a876 <HAL_MMC_IRQHandler+0xf6>
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	f003 0320 	and.w	r3, r3, #32
 801a872:	2b00      	cmp	r3, #0
 801a874:	d002      	beq.n	801a87c <HAL_MMC_IRQHandler+0xfc>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->TxCpltCallback(hmmc);
#else
        HAL_MMC_TxCpltCallback(hmmc);
 801a876:	6878      	ldr	r0, [r7, #4]
 801a878:	f7e7 fa06 	bl	8001c88 <HAL_MMC_TxCpltCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
      }
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	f003 0301 	and.w	r3, r3, #1
 801a882:	2b00      	cmp	r3, #0
 801a884:	d105      	bne.n	801a892 <HAL_MMC_IRQHandler+0x112>
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	f003 0302 	and.w	r3, r3, #2
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	f000 8123 	beq.w	801aad8 <HAL_MMC_IRQHandler+0x358>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->RxCpltCallback(hmmc);
#else
        HAL_MMC_RxCpltCallback(hmmc);
 801a892:	6878      	ldr	r0, [r7, #4]
 801a894:	f7e7 fa03 	bl	8001c9e <HAL_MMC_RxCpltCallback>

  else
  {
    /* Nothing to do */
  }
}
 801a898:	e11e      	b.n	801aad8 <HAL_MMC_IRQHandler+0x358>
    else if ((context & MMC_CONTEXT_IT) != 0U)
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	f003 0308 	and.w	r3, r3, #8
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	f000 8119 	beq.w	801aad8 <HAL_MMC_IRQHandler+0x358>
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	f003 0302 	and.w	r3, r3, #2
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d104      	bne.n	801a8ba <HAL_MMC_IRQHandler+0x13a>
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	f003 0320 	and.w	r3, r3, #32
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d011      	beq.n	801a8de <HAL_MMC_IRQHandler+0x15e>
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	4618      	mov	r0, r3
 801a8c0:	f006 fb36 	bl	8020f30 <SDMMC_CmdStopTransfer>
 801a8c4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 801a8c6:	68bb      	ldr	r3, [r7, #8]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d008      	beq.n	801a8de <HAL_MMC_IRQHandler+0x15e>
          hmmc->ErrorCode |= errorstate;
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a8d0:	68bb      	ldr	r3, [r7, #8]
 801a8d2:	431a      	orrs	r2, r3
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_MMC_ErrorCallback(hmmc);
 801a8d8:	6878      	ldr	r0, [r7, #4]
 801a8da:	f000 f901 	bl	801aae0 <HAL_MMC_ErrorCallback>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	4a57      	ldr	r2, [pc, #348]	@ (801aa40 <HAL_MMC_IRQHandler+0x2c0>)
 801a8e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	2201      	movs	r2, #1
 801a8ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	f003 0301 	and.w	r3, r3, #1
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d104      	bne.n	801a902 <HAL_MMC_IRQHandler+0x182>
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	f003 0302 	and.w	r3, r3, #2
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d003      	beq.n	801a90a <HAL_MMC_IRQHandler+0x18a>
        HAL_MMC_RxCpltCallback(hmmc);
 801a902:	6878      	ldr	r0, [r7, #4]
 801a904:	f7e7 f9cb 	bl	8001c9e <HAL_MMC_RxCpltCallback>
 801a908:	e0e6      	b.n	801aad8 <HAL_MMC_IRQHandler+0x358>
        HAL_MMC_TxCpltCallback(hmmc);
 801a90a:	6878      	ldr	r0, [r7, #4]
 801a90c:	f7e7 f9bc 	bl	8001c88 <HAL_MMC_TxCpltCallback>
}
 801a910:	e0e2      	b.n	801aad8 <HAL_MMC_IRQHandler+0x358>
  else if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d008      	beq.n	801a932 <HAL_MMC_IRQHandler+0x1b2>
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	f003 0308 	and.w	r3, r3, #8
 801a926:	2b00      	cmp	r3, #0
 801a928:	d003      	beq.n	801a932 <HAL_MMC_IRQHandler+0x1b2>
    MMC_Write_IT(hmmc);
 801a92a:	6878      	ldr	r0, [r7, #4]
 801a92c:	f000 ff54 	bl	801b7d8 <MMC_Write_IT>
 801a930:	e0d2      	b.n	801aad8 <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL |
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a938:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	f000 809e 	beq.w	801aa7e <HAL_MMC_IRQHandler+0x2fe>
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DCRCFAIL) != RESET)
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a948:	f003 0302 	and.w	r3, r3, #2
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d005      	beq.n	801a95c <HAL_MMC_IRQHandler+0x1dc>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a954:	f043 0202 	orr.w	r2, r3, #2
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DTIMEOUT) != RESET)
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a962:	f003 0308 	and.w	r3, r3, #8
 801a966:	2b00      	cmp	r3, #0
 801a968:	d005      	beq.n	801a976 <HAL_MMC_IRQHandler+0x1f6>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a96e:	f043 0208 	orr.w	r2, r3, #8
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_RXOVERR) != RESET)
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a97c:	f003 0320 	and.w	r3, r3, #32
 801a980:	2b00      	cmp	r3, #0
 801a982:	d005      	beq.n	801a990 <HAL_MMC_IRQHandler+0x210>
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a988:	f043 0220 	orr.w	r2, r3, #32
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_TXUNDERR) != RESET)
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a996:	f003 0310 	and.w	r3, r3, #16
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d005      	beq.n	801a9aa <HAL_MMC_IRQHandler+0x22a>
      hmmc->ErrorCode |= HAL_MMC_ERROR_TX_UNDERRUN;
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a9a2:	f043 0210 	orr.w	r2, r3, #16
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	4a24      	ldr	r2, [pc, #144]	@ (801aa40 <HAL_MMC_IRQHandler+0x2c0>)
 801a9b0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 801a9c0:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	68da      	ldr	r2, [r3, #12]
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801a9d0:	60da      	str	r2, [r3, #12]
    hmmc->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801a9e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmmc->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	68da      	ldr	r2, [r3, #12]
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801a9f0:	60da      	str	r2, [r3, #12]
    hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	f006 fa9a 	bl	8020f30 <SDMMC_CmdStopTransfer>
 801a9fc:	4602      	mov	r2, r0
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa02:	431a      	orrs	r2, r3
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	68da      	ldr	r2, [r3, #12]
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801aa16:	60da      	str	r2, [r3, #12]
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DABORT);
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801aa20:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & MMC_CONTEXT_IT) != 0U)
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	f003 0308 	and.w	r3, r3, #8
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d00b      	beq.n	801aa44 <HAL_MMC_IRQHandler+0x2c4>
      hmmc->State = HAL_MMC_STATE_READY;
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	2201      	movs	r2, #1
 801aa30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      HAL_MMC_ErrorCallback(hmmc);
 801aa34:	6878      	ldr	r0, [r7, #4]
 801aa36:	f000 f853 	bl	801aae0 <HAL_MMC_ErrorCallback>
}
 801aa3a:	e04d      	b.n	801aad8 <HAL_MMC_IRQHandler+0x358>
 801aa3c:	ffff3ec5 	.word	0xffff3ec5
 801aa40:	18000f3a 	.word	0x18000f3a
    else if ((context & MMC_CONTEXT_DMA) != 0U)
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d044      	beq.n	801aad8 <HAL_MMC_IRQHandler+0x358>
      if (hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d040      	beq.n	801aad8 <HAL_MMC_IRQHandler+0x358>
        __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801aa64:	63da      	str	r2, [r3, #60]	@ 0x3c
        hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	651a      	str	r2, [r3, #80]	@ 0x50
        hmmc->State = HAL_MMC_STATE_READY;
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	2201      	movs	r2, #1
 801aa72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_MMC_ErrorCallback(hmmc);
 801aa76:	6878      	ldr	r0, [r7, #4]
 801aa78:	f000 f832 	bl	801aae0 <HAL_MMC_ErrorCallback>
}
 801aa7c:	e02c      	b.n	801aad8 <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_IDMABTC) != RESET)
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d025      	beq.n	801aad8 <HAL_MMC_IRQHandler+0x358>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_IT_IDMABTC);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801aa94:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hmmc->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801aa9c:	f003 0304 	and.w	r3, r3, #4
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d10c      	bne.n	801aabe <HAL_MMC_IRQHandler+0x33e>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	f003 0320 	and.w	r3, r3, #32
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d003      	beq.n	801aab6 <HAL_MMC_IRQHandler+0x336>
        HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(hmmc);
 801aaae:	6878      	ldr	r0, [r7, #4]
 801aab0:	f000 ff9a 	bl	801b9e8 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>
}
 801aab4:	e010      	b.n	801aad8 <HAL_MMC_IRQHandler+0x358>
        HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(hmmc);
 801aab6:	6878      	ldr	r0, [r7, #4]
 801aab8:	f000 ff82 	bl	801b9c0 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>
}
 801aabc:	e00c      	b.n	801aad8 <HAL_MMC_IRQHandler+0x358>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	f003 0320 	and.w	r3, r3, #32
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d003      	beq.n	801aad0 <HAL_MMC_IRQHandler+0x350>
        HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(hmmc);
 801aac8:	6878      	ldr	r0, [r7, #4]
 801aaca:	f000 ff83 	bl	801b9d4 <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>
}
 801aace:	e003      	b.n	801aad8 <HAL_MMC_IRQHandler+0x358>
        HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(hmmc);
 801aad0:	6878      	ldr	r0, [r7, #4]
 801aad2:	f000 ff6b 	bl	801b9ac <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>
}
 801aad6:	e7ff      	b.n	801aad8 <HAL_MMC_IRQHandler+0x358>
 801aad8:	bf00      	nop
 801aada:	3710      	adds	r7, #16
 801aadc:	46bd      	mov	sp, r7
 801aade:	bd80      	pop	{r7, pc}

0801aae0 <HAL_MMC_ErrorCallback>:
  * @brief MMC error callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_ErrorCallback(MMC_HandleTypeDef *hmmc)
{
 801aae0:	b480      	push	{r7}
 801aae2:	b083      	sub	sp, #12
 801aae4:	af00      	add	r7, sp, #0
 801aae6:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_ErrorCallback can be implemented in the user file
   */
}
 801aae8:	bf00      	nop
 801aaea:	370c      	adds	r7, #12
 801aaec:	46bd      	mov	sp, r7
 801aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf2:	4770      	bx	lr

0801aaf4 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b084      	sub	sp, #16
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	6078      	str	r0, [r7, #4]
 801aafc:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 801aafe:	2300      	movs	r3, #0
 801ab00:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ab06:	0f9b      	lsrs	r3, r3, #30
 801ab08:	b2da      	uxtb	r2, r3
 801ab0a:	683b      	ldr	r3, [r7, #0]
 801ab0c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ab12:	0e9b      	lsrs	r3, r3, #26
 801ab14:	b2db      	uxtb	r3, r3
 801ab16:	f003 030f 	and.w	r3, r3, #15
 801ab1a:	b2da      	uxtb	r2, r3
 801ab1c:	683b      	ldr	r3, [r7, #0]
 801ab1e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ab24:	0e1b      	lsrs	r3, r3, #24
 801ab26:	b2db      	uxtb	r3, r3
 801ab28:	f003 0303 	and.w	r3, r3, #3
 801ab2c:	b2da      	uxtb	r2, r3
 801ab2e:	683b      	ldr	r3, [r7, #0]
 801ab30:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ab36:	0c1b      	lsrs	r3, r3, #16
 801ab38:	b2da      	uxtb	r2, r3
 801ab3a:	683b      	ldr	r3, [r7, #0]
 801ab3c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ab42:	0a1b      	lsrs	r3, r3, #8
 801ab44:	b2da      	uxtb	r2, r3
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ab4e:	b2da      	uxtb	r2, r3
 801ab50:	683b      	ldr	r3, [r7, #0]
 801ab52:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ab58:	0d1b      	lsrs	r3, r3, #20
 801ab5a:	b29a      	uxth	r2, r3
 801ab5c:	683b      	ldr	r3, [r7, #0]
 801ab5e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ab64:	0c1b      	lsrs	r3, r3, #16
 801ab66:	b2db      	uxtb	r3, r3
 801ab68:	f003 030f 	and.w	r3, r3, #15
 801ab6c:	b2da      	uxtb	r2, r3
 801ab6e:	683b      	ldr	r3, [r7, #0]
 801ab70:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ab76:	0bdb      	lsrs	r3, r3, #15
 801ab78:	b2db      	uxtb	r3, r3
 801ab7a:	f003 0301 	and.w	r3, r3, #1
 801ab7e:	b2da      	uxtb	r2, r3
 801ab80:	683b      	ldr	r3, [r7, #0]
 801ab82:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ab88:	0b9b      	lsrs	r3, r3, #14
 801ab8a:	b2db      	uxtb	r3, r3
 801ab8c:	f003 0301 	and.w	r3, r3, #1
 801ab90:	b2da      	uxtb	r2, r3
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ab9a:	0b5b      	lsrs	r3, r3, #13
 801ab9c:	b2db      	uxtb	r3, r3
 801ab9e:	f003 0301 	and.w	r3, r3, #1
 801aba2:	b2da      	uxtb	r2, r3
 801aba4:	683b      	ldr	r3, [r7, #0]
 801aba6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801abac:	0b1b      	lsrs	r3, r3, #12
 801abae:	b2db      	uxtb	r3, r3
 801abb0:	f003 0301 	and.w	r3, r3, #1
 801abb4:	b2da      	uxtb	r2, r3
 801abb6:	683b      	ldr	r3, [r7, #0]
 801abb8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801abba:	683b      	ldr	r3, [r7, #0]
 801abbc:	2200      	movs	r2, #0
 801abbe:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 801abc0:	f107 010c 	add.w	r1, r7, #12
 801abc4:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 801abc8:	22d4      	movs	r2, #212	@ 0xd4
 801abca:	6878      	ldr	r0, [r7, #4]
 801abcc:	f000 fcca 	bl	801b564 <MMC_ReadExtCSD>
 801abd0:	4603      	mov	r3, r0
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d001      	beq.n	801abda <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 801abd6:	2301      	movs	r3, #1
 801abd8:	e129      	b.n	801ae2e <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d163      	bne.n	801acaa <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801abe6:	009a      	lsls	r2, r3, #2
 801abe8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 801abec:	4013      	ands	r3, r2
 801abee:	687a      	ldr	r2, [r7, #4]
 801abf0:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 801abf2:	0f92      	lsrs	r2, r2, #30
 801abf4:	431a      	orrs	r2, r3
 801abf6:	683b      	ldr	r3, [r7, #0]
 801abf8:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801abfe:	0edb      	lsrs	r3, r3, #27
 801ac00:	b2db      	uxtb	r3, r3
 801ac02:	f003 0307 	and.w	r3, r3, #7
 801ac06:	b2da      	uxtb	r2, r3
 801ac08:	683b      	ldr	r3, [r7, #0]
 801ac0a:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ac10:	0e1b      	lsrs	r3, r3, #24
 801ac12:	b2db      	uxtb	r3, r3
 801ac14:	f003 0307 	and.w	r3, r3, #7
 801ac18:	b2da      	uxtb	r2, r3
 801ac1a:	683b      	ldr	r3, [r7, #0]
 801ac1c:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ac22:	0d5b      	lsrs	r3, r3, #21
 801ac24:	b2db      	uxtb	r3, r3
 801ac26:	f003 0307 	and.w	r3, r3, #7
 801ac2a:	b2da      	uxtb	r2, r3
 801ac2c:	683b      	ldr	r3, [r7, #0]
 801ac2e:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ac34:	0c9b      	lsrs	r3, r3, #18
 801ac36:	b2db      	uxtb	r3, r3
 801ac38:	f003 0307 	and.w	r3, r3, #7
 801ac3c:	b2da      	uxtb	r2, r3
 801ac3e:	683b      	ldr	r3, [r7, #0]
 801ac40:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ac46:	0bdb      	lsrs	r3, r3, #15
 801ac48:	b2db      	uxtb	r3, r3
 801ac4a:	f003 0307 	and.w	r3, r3, #7
 801ac4e:	b2da      	uxtb	r2, r3
 801ac50:	683b      	ldr	r3, [r7, #0]
 801ac52:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801ac54:	683b      	ldr	r3, [r7, #0]
 801ac56:	691b      	ldr	r3, [r3, #16]
 801ac58:	1c5a      	adds	r2, r3, #1
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801ac5e:	683b      	ldr	r3, [r7, #0]
 801ac60:	7e1b      	ldrb	r3, [r3, #24]
 801ac62:	b2db      	uxtb	r3, r3
 801ac64:	f003 0307 	and.w	r3, r3, #7
 801ac68:	3302      	adds	r3, #2
 801ac6a:	2201      	movs	r2, #1
 801ac6c:	fa02 f303 	lsl.w	r3, r2, r3
 801ac70:	687a      	ldr	r2, [r7, #4]
 801ac72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801ac74:	fb03 f202 	mul.w	r2, r3, r2
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801ac7c:	683b      	ldr	r3, [r7, #0]
 801ac7e:	7a1b      	ldrb	r3, [r3, #8]
 801ac80:	b2db      	uxtb	r3, r3
 801ac82:	f003 030f 	and.w	r3, r3, #15
 801ac86:	2201      	movs	r2, #1
 801ac88:	409a      	lsls	r2, r3
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	64da      	str	r2, [r3, #76]	@ 0x4c

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ac92:	687a      	ldr	r2, [r7, #4]
 801ac94:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 801ac96:	0a52      	lsrs	r2, r2, #9
 801ac98:	fb03 f202 	mul.w	r2, r3, r2
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801aca6:	655a      	str	r2, [r3, #84]	@ 0x54
 801aca8:	e023      	b.n	801acf2 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801acae:	2b01      	cmp	r3, #1
 801acb0:	d10f      	bne.n	801acd2 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 801acb2:	68fa      	ldr	r2, [r7, #12]
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801acc6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	655a      	str	r2, [r3, #84]	@ 0x54
 801acd0:	e00f      	b.n	801acf2 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	4a58      	ldr	r2, [pc, #352]	@ (801ae38 <HAL_MMC_GetCardCSD+0x344>)
 801acd8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801acde:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	2201      	movs	r2, #1
 801acea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801acee:	2301      	movs	r3, #1
 801acf0:	e09d      	b.n	801ae2e <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801acf6:	0b9b      	lsrs	r3, r3, #14
 801acf8:	b2db      	uxtb	r3, r3
 801acfa:	f003 0301 	and.w	r3, r3, #1
 801acfe:	b2da      	uxtb	r2, r3
 801ad00:	683b      	ldr	r3, [r7, #0]
 801ad02:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ad08:	09db      	lsrs	r3, r3, #7
 801ad0a:	b2db      	uxtb	r3, r3
 801ad0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ad10:	b2da      	uxtb	r2, r3
 801ad12:	683b      	ldr	r3, [r7, #0]
 801ad14:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ad1a:	b2db      	uxtb	r3, r3
 801ad1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ad20:	b2da      	uxtb	r2, r3
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad2a:	0fdb      	lsrs	r3, r3, #31
 801ad2c:	b2da      	uxtb	r2, r3
 801ad2e:	683b      	ldr	r3, [r7, #0]
 801ad30:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad36:	0f5b      	lsrs	r3, r3, #29
 801ad38:	b2db      	uxtb	r3, r3
 801ad3a:	f003 0303 	and.w	r3, r3, #3
 801ad3e:	b2da      	uxtb	r2, r3
 801ad40:	683b      	ldr	r3, [r7, #0]
 801ad42:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad48:	0e9b      	lsrs	r3, r3, #26
 801ad4a:	b2db      	uxtb	r3, r3
 801ad4c:	f003 0307 	and.w	r3, r3, #7
 801ad50:	b2da      	uxtb	r2, r3
 801ad52:	683b      	ldr	r3, [r7, #0]
 801ad54:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad5a:	0d9b      	lsrs	r3, r3, #22
 801ad5c:	b2db      	uxtb	r3, r3
 801ad5e:	f003 030f 	and.w	r3, r3, #15
 801ad62:	b2da      	uxtb	r2, r3
 801ad64:	683b      	ldr	r3, [r7, #0]
 801ad66:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad6c:	0d5b      	lsrs	r3, r3, #21
 801ad6e:	b2db      	uxtb	r3, r3
 801ad70:	f003 0301 	and.w	r3, r3, #1
 801ad74:	b2da      	uxtb	r2, r3
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801ad7c:	683b      	ldr	r3, [r7, #0]
 801ad7e:	2200      	movs	r2, #0
 801ad80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad88:	0c1b      	lsrs	r3, r3, #16
 801ad8a:	b2db      	uxtb	r3, r3
 801ad8c:	f003 0301 	and.w	r3, r3, #1
 801ad90:	b2da      	uxtb	r2, r3
 801ad92:	683b      	ldr	r3, [r7, #0]
 801ad94:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad9c:	0bdb      	lsrs	r3, r3, #15
 801ad9e:	b2db      	uxtb	r3, r3
 801ada0:	f003 0301 	and.w	r3, r3, #1
 801ada4:	b2da      	uxtb	r2, r3
 801ada6:	683b      	ldr	r3, [r7, #0]
 801ada8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801adb0:	0b9b      	lsrs	r3, r3, #14
 801adb2:	b2db      	uxtb	r3, r3
 801adb4:	f003 0301 	and.w	r3, r3, #1
 801adb8:	b2da      	uxtb	r2, r3
 801adba:	683b      	ldr	r3, [r7, #0]
 801adbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801adc4:	0b5b      	lsrs	r3, r3, #13
 801adc6:	b2db      	uxtb	r3, r3
 801adc8:	f003 0301 	and.w	r3, r3, #1
 801adcc:	b2da      	uxtb	r2, r3
 801adce:	683b      	ldr	r3, [r7, #0]
 801add0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801add8:	0b1b      	lsrs	r3, r3, #12
 801adda:	b2db      	uxtb	r3, r3
 801addc:	f003 0301 	and.w	r3, r3, #1
 801ade0:	b2da      	uxtb	r2, r3
 801ade2:	683b      	ldr	r3, [r7, #0]
 801ade4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801adec:	0a9b      	lsrs	r3, r3, #10
 801adee:	b2db      	uxtb	r3, r3
 801adf0:	f003 0303 	and.w	r3, r3, #3
 801adf4:	b2da      	uxtb	r2, r3
 801adf6:	683b      	ldr	r3, [r7, #0]
 801adf8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ae00:	0a1b      	lsrs	r3, r3, #8
 801ae02:	b2db      	uxtb	r3, r3
 801ae04:	f003 0303 	and.w	r3, r3, #3
 801ae08:	b2da      	uxtb	r2, r3
 801ae0a:	683b      	ldr	r3, [r7, #0]
 801ae0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ae14:	085b      	lsrs	r3, r3, #1
 801ae16:	b2db      	uxtb	r3, r3
 801ae18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ae1c:	b2da      	uxtb	r2, r3
 801ae1e:	683b      	ldr	r3, [r7, #0]
 801ae20:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 801ae24:	683b      	ldr	r3, [r7, #0]
 801ae26:	2201      	movs	r2, #1
 801ae28:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 801ae2c:	2300      	movs	r3, #0
}
 801ae2e:	4618      	mov	r0, r3
 801ae30:	3710      	adds	r7, #16
 801ae32:	46bd      	mov	sp, r7
 801ae34:	bd80      	pop	{r7, pc}
 801ae36:	bf00      	nop
 801ae38:	1fe00fff 	.word	0x1fe00fff

0801ae3c <HAL_MMC_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_MMC_CardInfoTypeDef structure that
  *         will contain the MMC card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardInfo(const MMC_HandleTypeDef *hmmc, HAL_MMC_CardInfoTypeDef *pCardInfo)
{
 801ae3c:	b480      	push	{r7}
 801ae3e:	b083      	sub	sp, #12
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
 801ae44:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hmmc->MmcCard.CardType);
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	601a      	str	r2, [r3, #0]
  pCardInfo->Class        = (uint32_t)(hmmc->MmcCard.Class);
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ae52:	683b      	ldr	r3, [r7, #0]
 801ae54:	605a      	str	r2, [r3, #4]
  pCardInfo->RelCardAdd   = (uint32_t)(hmmc->MmcCard.RelCardAdd);
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ae5a:	683b      	ldr	r3, [r7, #0]
 801ae5c:	609a      	str	r2, [r3, #8]
  pCardInfo->BlockNbr     = (uint32_t)(hmmc->MmcCard.BlockNbr);
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801ae62:	683b      	ldr	r3, [r7, #0]
 801ae64:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockSize    = (uint32_t)(hmmc->MmcCard.BlockSize);
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801ae6a:	683b      	ldr	r3, [r7, #0]
 801ae6c:	611a      	str	r2, [r3, #16]
  pCardInfo->LogBlockNbr  = (uint32_t)(hmmc->MmcCard.LogBlockNbr);
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ae72:	683b      	ldr	r3, [r7, #0]
 801ae74:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockSize = (uint32_t)(hmmc->MmcCard.LogBlockSize);
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801ae7a:	683b      	ldr	r3, [r7, #0]
 801ae7c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 801ae7e:	2300      	movs	r3, #0
}
 801ae80:	4618      	mov	r0, r3
 801ae82:	370c      	adds	r7, #12
 801ae84:	46bd      	mov	sp, r7
 801ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae8a:	4770      	bx	lr

0801ae8c <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b08e      	sub	sp, #56	@ 0x38
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	60f8      	str	r0, [r7, #12]
 801ae94:	60b9      	str	r1, [r7, #8]
 801ae96:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801ae98:	f7fe fab4 	bl	8019404 <HAL_GetTick>
 801ae9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 801ae9e:	68bb      	ldr	r3, [r7, #8]
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	d107      	bne.n	801aeb4 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aea8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801aeb0:	2301      	movs	r3, #1
 801aeb2:	e0de      	b.n	801b072 <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801aeba:	b2db      	uxtb	r3, r3
 801aebc:	2b01      	cmp	r3, #1
 801aebe:	f040 80d7 	bne.w	801b070 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	2200      	movs	r2, #0
 801aec6:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 801aec8:	68fb      	ldr	r3, [r7, #12]
 801aeca:	2203      	movs	r2, #3
 801aecc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	2200      	movs	r2, #0
 801aed6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 801aed8:	68bb      	ldr	r3, [r7, #8]
 801aeda:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801aedc:	f04f 33ff 	mov.w	r3, #4294967295
 801aee0:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 801aee2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801aee6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801aee8:	2390      	movs	r3, #144	@ 0x90
 801aeea:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801aeec:	2302      	movs	r3, #2
 801aeee:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801aef0:	2300      	movs	r3, #0
 801aef2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801aef4:	2300      	movs	r3, #0
 801aef6:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	f107 0210 	add.w	r2, r7, #16
 801af00:	4611      	mov	r1, r2
 801af02:	4618      	mov	r0, r3
 801af04:	f005 ff38 	bl	8020d78 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	68da      	ldr	r2, [r3, #12]
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801af16:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	2100      	movs	r1, #0
 801af1e:	4618      	mov	r0, r3
 801af20:	f006 f94d 	bl	80211be <SDMMC_CmdSendEXTCSD>
 801af24:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 801af26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d045      	beq.n	801afb8 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	4a52      	ldr	r2, [pc, #328]	@ (801b07c <HAL_MMC_GetCardExtCSD+0x1f0>)
 801af32:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801af38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af3a:	431a      	orrs	r2, r3
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	2201      	movs	r2, #1
 801af44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801af48:	2301      	movs	r3, #1
 801af4a:	e092      	b.n	801b072 <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801af52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801af56:	2b00      	cmp	r3, #0
 801af58:	d013      	beq.n	801af82 <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801af5a:	2300      	movs	r3, #0
 801af5c:	637b      	str	r3, [r7, #52]	@ 0x34
 801af5e:	e00d      	b.n	801af7c <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	4618      	mov	r0, r3
 801af66:	f005 fe6f 	bl	8020c48 <SDMMC_ReadFIFO>
 801af6a:	4602      	mov	r2, r0
 801af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af6e:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 801af70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af72:	3304      	adds	r3, #4
 801af74:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801af76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801af78:	3301      	adds	r3, #1
 801af7a:	637b      	str	r3, [r7, #52]	@ 0x34
 801af7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801af7e:	2b07      	cmp	r3, #7
 801af80:	d9ee      	bls.n	801af60 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801af82:	f7fe fa3f 	bl	8019404 <HAL_GetTick>
 801af86:	4602      	mov	r2, r0
 801af88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af8a:	1ad3      	subs	r3, r2, r3
 801af8c:	687a      	ldr	r2, [r7, #4]
 801af8e:	429a      	cmp	r2, r3
 801af90:	d902      	bls.n	801af98 <HAL_MMC_GetCardExtCSD+0x10c>
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	2b00      	cmp	r3, #0
 801af96:	d10f      	bne.n	801afb8 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	4a37      	ldr	r2, [pc, #220]	@ (801b07c <HAL_MMC_GetCardExtCSD+0x1f0>)
 801af9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801afa4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	2201      	movs	r2, #1
 801afb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 801afb4:	2303      	movs	r3, #3
 801afb6:	e05c      	b.n	801b072 <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801afbe:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d0c2      	beq.n	801af4c <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	68da      	ldr	r2, [r3, #12]
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801afd4:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 801afd6:	68fb      	ldr	r3, [r7, #12]
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801afdc:	f003 0308 	and.w	r3, r3, #8
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d00f      	beq.n	801b004 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	4a24      	ldr	r2, [pc, #144]	@ (801b07c <HAL_MMC_GetCardExtCSD+0x1f0>)
 801afea:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aff0:	f043 0208 	orr.w	r2, r3, #8
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801aff8:	68fb      	ldr	r3, [r7, #12]
 801affa:	2201      	movs	r2, #1
 801affc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801b000:	2301      	movs	r3, #1
 801b002:	e036      	b.n	801b072 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b00a:	f003 0302 	and.w	r3, r3, #2
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d00f      	beq.n	801b032 <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	4a19      	ldr	r2, [pc, #100]	@ (801b07c <HAL_MMC_GetCardExtCSD+0x1f0>)
 801b018:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b01e:	f043 0202 	orr.w	r2, r3, #2
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	2201      	movs	r2, #1
 801b02a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801b02e:	2301      	movs	r3, #1
 801b030:	e01f      	b.n	801b072 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 801b032:	68fb      	ldr	r3, [r7, #12]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b038:	f003 0320 	and.w	r3, r3, #32
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d00f      	beq.n	801b060 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	4a0d      	ldr	r2, [pc, #52]	@ (801b07c <HAL_MMC_GetCardExtCSD+0x1f0>)
 801b046:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b04c:	f043 0220 	orr.w	r2, r3, #32
 801b050:	68fb      	ldr	r3, [r7, #12]
 801b052:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	2201      	movs	r2, #1
 801b058:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801b05c:	2301      	movs	r3, #1
 801b05e:	e008      	b.n	801b072 <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	4a06      	ldr	r2, [pc, #24]	@ (801b080 <HAL_MMC_GetCardExtCSD+0x1f4>)
 801b066:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	2201      	movs	r2, #1
 801b06c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 801b070:	2300      	movs	r3, #0
}
 801b072:	4618      	mov	r0, r3
 801b074:	3738      	adds	r7, #56	@ 0x38
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}
 801b07a:	bf00      	nop
 801b07c:	1fe00fff 	.word	0x1fe00fff
 801b080:	18000f3a 	.word	0x18000f3a

0801b084 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 801b084:	b5b0      	push	{r4, r5, r7, lr}
 801b086:	b08c      	sub	sp, #48	@ 0x30
 801b088:	af02      	add	r7, sp, #8
 801b08a:	6078      	str	r0, [r7, #4]
 801b08c:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 801b08e:	2300      	movs	r3, #0
 801b090:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	2203      	movs	r2, #3
 801b096:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	685b      	ldr	r3, [r3, #4]
 801b0a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d014      	beq.n	801b0d2 <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	685b      	ldr	r3, [r3, #4]
 801b0ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d006      	beq.n	801b0c4 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 801b0b6:	2204      	movs	r2, #4
 801b0b8:	6839      	ldr	r1, [r7, #0]
 801b0ba:	6878      	ldr	r0, [r7, #4]
 801b0bc:	f000 fbd6 	bl	801b86c <MMC_PwrClassUpdate>
 801b0c0:	6238      	str	r0, [r7, #32]
 801b0c2:	e00c      	b.n	801b0de <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 801b0c4:	2202      	movs	r2, #2
 801b0c6:	6839      	ldr	r1, [r7, #0]
 801b0c8:	6878      	ldr	r0, [r7, #4]
 801b0ca:	f000 fbcf 	bl	801b86c <MMC_PwrClassUpdate>
 801b0ce:	6238      	str	r0, [r7, #32]
 801b0d0:	e005      	b.n	801b0de <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 801b0d2:	2201      	movs	r2, #1
 801b0d4:	6839      	ldr	r1, [r7, #0]
 801b0d6:	6878      	ldr	r0, [r7, #4]
 801b0d8:	f000 fbc8 	bl	801b86c <MMC_PwrClassUpdate>
 801b0dc:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 801b0de:	6a3b      	ldr	r3, [r7, #32]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d17b      	bne.n	801b1dc <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 801b0e4:	683b      	ldr	r3, [r7, #0]
 801b0e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b0ea:	d107      	bne.n	801b0fc <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	4946      	ldr	r1, [pc, #280]	@ (801b20c <HAL_MMC_ConfigWideBusOperation+0x188>)
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	f006 f840 	bl	8021178 <SDMMC_CmdSwitch>
 801b0f8:	6238      	str	r0, [r7, #32]
 801b0fa:	e019      	b.n	801b130 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 801b0fc:	683b      	ldr	r3, [r7, #0]
 801b0fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b102:	d107      	bne.n	801b114 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	4941      	ldr	r1, [pc, #260]	@ (801b210 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 801b10a:	4618      	mov	r0, r3
 801b10c:	f006 f834 	bl	8021178 <SDMMC_CmdSwitch>
 801b110:	6238      	str	r0, [r7, #32]
 801b112:	e00d      	b.n	801b130 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 801b114:	683b      	ldr	r3, [r7, #0]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d107      	bne.n	801b12a <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	493d      	ldr	r1, [pc, #244]	@ (801b214 <HAL_MMC_ConfigWideBusOperation+0x190>)
 801b120:	4618      	mov	r0, r3
 801b122:	f006 f829 	bl	8021178 <SDMMC_CmdSwitch>
 801b126:	6238      	str	r0, [r7, #32]
 801b128:	e002      	b.n	801b130 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 801b12a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801b12e:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 801b130:	6a3b      	ldr	r3, [r7, #32]
 801b132:	2b00      	cmp	r3, #0
 801b134:	d152      	bne.n	801b1dc <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 801b136:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b13a:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	681a      	ldr	r2, [r3, #0]
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b144:	041b      	lsls	r3, r3, #16
 801b146:	4619      	mov	r1, r3
 801b148:	4610      	mov	r0, r2
 801b14a:	f005 ffd2 	bl	80210f2 <SDMMC_CmdSendStatus>
 801b14e:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 801b150:	6a3b      	ldr	r3, [r7, #32]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d112      	bne.n	801b17c <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	2100      	movs	r1, #0
 801b15c:	4618      	mov	r0, r3
 801b15e:	f005 fdf8 	bl	8020d52 <SDMMC_GetResponse>
 801b162:	61f8      	str	r0, [r7, #28]
        count--;
 801b164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b166:	3b01      	subs	r3, #1
 801b168:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 801b16a:	69fb      	ldr	r3, [r7, #28]
 801b16c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b170:	2b00      	cmp	r3, #0
 801b172:	d104      	bne.n	801b17e <HAL_MMC_ConfigWideBusOperation+0xfa>
 801b174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b176:	2b00      	cmp	r3, #0
 801b178:	d1e0      	bne.n	801b13c <HAL_MMC_ConfigWideBusOperation+0xb8>
 801b17a:	e000      	b.n	801b17e <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 801b17c:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 801b17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b180:	2b00      	cmp	r3, #0
 801b182:	d025      	beq.n	801b1d0 <HAL_MMC_ConfigWideBusOperation+0x14c>
 801b184:	6a3b      	ldr	r3, [r7, #32]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d122      	bne.n	801b1d0 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 801b18a:	69fb      	ldr	r3, [r7, #28]
 801b18c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b190:	2b00      	cmp	r3, #0
 801b192:	d003      	beq.n	801b19c <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801b194:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801b198:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 801b19a:	e01f      	b.n	801b1dc <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	f107 0408 	add.w	r4, r7, #8
 801b1a2:	1d1d      	adds	r5, r3, #4
 801b1a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b1a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b1a8:	682b      	ldr	r3, [r5, #0]
 801b1aa:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 801b1ac:	683b      	ldr	r3, [r7, #0]
 801b1ae:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	681c      	ldr	r4, [r3, #0]
 801b1b4:	466a      	mov	r2, sp
 801b1b6:	f107 0314 	add.w	r3, r7, #20
 801b1ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b1be:	e882 0003 	stmia.w	r2, {r0, r1}
 801b1c2:	f107 0308 	add.w	r3, r7, #8
 801b1c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b1c8:	4620      	mov	r0, r4
 801b1ca:	f005 fd13 	bl	8020bf4 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 801b1ce:	e005      	b.n	801b1dc <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 801b1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d102      	bne.n	801b1dc <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 801b1d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801b1da:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	2201      	movs	r2, #1
 801b1e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 801b1e4:	6a3b      	ldr	r3, [r7, #32]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d00b      	beq.n	801b202 <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	4a0a      	ldr	r2, [pc, #40]	@ (801b218 <HAL_MMC_ConfigWideBusOperation+0x194>)
 801b1f0:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b1f6:	6a3b      	ldr	r3, [r7, #32]
 801b1f8:	431a      	orrs	r2, r3
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801b1fe:	2301      	movs	r3, #1
 801b200:	e000      	b.n	801b204 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 801b202:	2300      	movs	r3, #0
}
 801b204:	4618      	mov	r0, r3
 801b206:	3728      	adds	r7, #40	@ 0x28
 801b208:	46bd      	mov	sp, r7
 801b20a:	bdb0      	pop	{r4, r5, r7, pc}
 801b20c:	03b70200 	.word	0x03b70200
 801b210:	03b70100 	.word	0x03b70100
 801b214:	03b70000 	.word	0x03b70000
 801b218:	1fe00fff 	.word	0x1fe00fff

0801b21c <HAL_MMC_GetCardState>:
  * @brief  Gets the current mmc card data state.
  * @param  hmmc: pointer to MMC handle
  * @retval Card state
  */
HAL_MMC_CardStateTypeDef HAL_MMC_GetCardState(MMC_HandleTypeDef *hmmc)
{
 801b21c:	b580      	push	{r7, lr}
 801b21e:	b086      	sub	sp, #24
 801b220:	af00      	add	r7, sp, #0
 801b222:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0U;
 801b224:	2300      	movs	r3, #0
 801b226:	60fb      	str	r3, [r7, #12]

  errorstate = MMC_SendStatus(hmmc, &resp1);
 801b228:	f107 030c 	add.w	r3, r7, #12
 801b22c:	4619      	mov	r1, r3
 801b22e:	6878      	ldr	r0, [r7, #4]
 801b230:	f000 f96f 	bl	801b512 <MMC_SendStatus>
 801b234:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b236:	697b      	ldr	r3, [r7, #20]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d005      	beq.n	801b248 <HAL_MMC_GetCardState+0x2c>
  {
    hmmc->ErrorCode |= errorstate;
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b240:	697b      	ldr	r3, [r7, #20]
 801b242:	431a      	orrs	r2, r3
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 801b248:	68fb      	ldr	r3, [r7, #12]
 801b24a:	0a5b      	lsrs	r3, r3, #9
 801b24c:	f003 030f 	and.w	r3, r3, #15
 801b250:	613b      	str	r3, [r7, #16]

  return (HAL_MMC_CardStateTypeDef)cardstate;
 801b252:	693b      	ldr	r3, [r7, #16]
}
 801b254:	4618      	mov	r0, r3
 801b256:	3718      	adds	r7, #24
 801b258:	46bd      	mov	sp, r7
 801b25a:	bd80      	pop	{r7, pc}

0801b25c <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 801b25c:	b5b0      	push	{r4, r5, r7, lr}
 801b25e:	b096      	sub	sp, #88	@ 0x58
 801b260:	af02      	add	r7, sp, #8
 801b262:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 801b264:	2302      	movs	r3, #2
 801b266:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	4618      	mov	r0, r3
 801b270:	f005 fd2a 	bl	8020cc8 <SDMMC_GetPowerState>
 801b274:	4603      	mov	r3, r0
 801b276:	2b00      	cmp	r3, #0
 801b278:	d102      	bne.n	801b280 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 801b27a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 801b27e:	e0e6      	b.n	801b44e <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	4618      	mov	r0, r3
 801b286:	f005 fed0 	bl	802102a <SDMMC_CmdSendCID>
 801b28a:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b28c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d001      	beq.n	801b296 <MMC_InitCard+0x3a>
  {
    return errorstate;
 801b292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b294:	e0db      	b.n	801b44e <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	2100      	movs	r1, #0
 801b29c:	4618      	mov	r0, r3
 801b29e:	f005 fd58 	bl	8020d52 <SDMMC_GetResponse>
 801b2a2:	4602      	mov	r2, r0
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	2104      	movs	r1, #4
 801b2ae:	4618      	mov	r0, r3
 801b2b0:	f005 fd4f 	bl	8020d52 <SDMMC_GetResponse>
 801b2b4:	4602      	mov	r2, r0
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	2108      	movs	r1, #8
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	f005 fd46 	bl	8020d52 <SDMMC_GetResponse>
 801b2c6:	4602      	mov	r2, r0
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	210c      	movs	r1, #12
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	f005 fd3d 	bl	8020d52 <SDMMC_GetResponse>
 801b2d8:	4602      	mov	r2, r0
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801b2e6:	4611      	mov	r1, r2
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	f005 fedd 	bl	80210a8 <SDMMC_CmdSetRelAddMmc>
 801b2ee:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b2f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d001      	beq.n	801b2fa <MMC_InitCard+0x9e>
  {
    return errorstate;
 801b2f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b2f8:	e0a9      	b.n	801b44e <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 801b2fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	681a      	ldr	r2, [r3, #0]
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b30a:	041b      	lsls	r3, r3, #16
 801b30c:	4619      	mov	r1, r3
 801b30e:	4610      	mov	r0, r2
 801b310:	f005 feaa 	bl	8021068 <SDMMC_CmdSendCSD>
 801b314:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d001      	beq.n	801b320 <MMC_InitCard+0xc4>
  {
    return errorstate;
 801b31c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b31e:	e096      	b.n	801b44e <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	2100      	movs	r1, #0
 801b326:	4618      	mov	r0, r3
 801b328:	f005 fd13 	bl	8020d52 <SDMMC_GetResponse>
 801b32c:	4602      	mov	r2, r0
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	2104      	movs	r1, #4
 801b338:	4618      	mov	r0, r3
 801b33a:	f005 fd0a 	bl	8020d52 <SDMMC_GetResponse>
 801b33e:	4602      	mov	r2, r0
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	2108      	movs	r1, #8
 801b34a:	4618      	mov	r0, r3
 801b34c:	f005 fd01 	bl	8020d52 <SDMMC_GetResponse>
 801b350:	4602      	mov	r2, r0
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	210c      	movs	r1, #12
 801b35c:	4618      	mov	r0, r3
 801b35e:	f005 fcf8 	bl	8020d52 <SDMMC_GetResponse>
 801b362:	4602      	mov	r2, r0
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	2104      	movs	r1, #4
 801b36e:	4618      	mov	r0, r3
 801b370:	f005 fcef 	bl	8020d52 <SDMMC_GetResponse>
 801b374:	4603      	mov	r3, r0
 801b376:	0d1a      	lsrs	r2, r3, #20
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	681a      	ldr	r2, [r3, #0]
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b384:	041b      	lsls	r3, r3, #16
 801b386:	4619      	mov	r1, r3
 801b388:	4610      	mov	r0, r2
 801b38a:	f005 fe0d 	bl	8020fa8 <SDMMC_CmdSelDesel>
 801b38e:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b392:	2b00      	cmp	r3, #0
 801b394:	d001      	beq.n	801b39a <MMC_InitCard+0x13e>
  {
    return errorstate;
 801b396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b398:	e059      	b.n	801b44e <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 801b39a:	f107 031c 	add.w	r3, r7, #28
 801b39e:	4619      	mov	r1, r3
 801b3a0:	6878      	ldr	r0, [r7, #4]
 801b3a2:	f7ff fba7 	bl	801aaf4 <HAL_MMC_GetCardCSD>
 801b3a6:	4603      	mov	r3, r0
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d002      	beq.n	801b3b2 <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b3b0:	e04d      	b.n	801b44e <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	681a      	ldr	r2, [r3, #0]
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b3ba:	041b      	lsls	r3, r3, #16
 801b3bc:	4619      	mov	r1, r3
 801b3be:	4610      	mov	r0, r2
 801b3c0:	f005 fe97 	bl	80210f2 <SDMMC_CmdSendStatus>
 801b3c4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b3c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d005      	beq.n	801b3d8 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b3d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b3d2:	431a      	orrs	r2, r3
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	3378      	adds	r3, #120	@ 0x78
 801b3dc:	f04f 32ff 	mov.w	r2, #4294967295
 801b3e0:	4619      	mov	r1, r3
 801b3e2:	6878      	ldr	r0, [r7, #4]
 801b3e4:	f7ff fd52 	bl	801ae8c <HAL_MMC_GetCardExtCSD>
 801b3e8:	4603      	mov	r3, r0
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d002      	beq.n	801b3f4 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b3f2:	e02c      	b.n	801b44e <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681a      	ldr	r2, [r3, #0]
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b3fc:	041b      	lsls	r3, r3, #16
 801b3fe:	4619      	mov	r1, r3
 801b400:	4610      	mov	r0, r2
 801b402:	f005 fe76 	bl	80210f2 <SDMMC_CmdSendStatus>
 801b406:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d005      	beq.n	801b41a <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b414:	431a      	orrs	r2, r3
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	f107 0408 	add.w	r4, r7, #8
 801b420:	1d1d      	adds	r5, r3, #4
 801b422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b426:	682b      	ldr	r3, [r5, #0]
 801b428:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 801b42a:	2300      	movs	r3, #0
 801b42c:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	681c      	ldr	r4, [r3, #0]
 801b432:	466a      	mov	r2, sp
 801b434:	f107 0314 	add.w	r3, r7, #20
 801b438:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b43c:	e882 0003 	stmia.w	r2, {r0, r1}
 801b440:	f107 0308 	add.w	r3, r7, #8
 801b444:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b446:	4620      	mov	r0, r4
 801b448:	f005 fbd4 	bl	8020bf4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 801b44c:	2300      	movs	r3, #0
}
 801b44e:	4618      	mov	r0, r3
 801b450:	3750      	adds	r7, #80	@ 0x50
 801b452:	46bd      	mov	sp, r7
 801b454:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b458 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 801b458:	b580      	push	{r7, lr}
 801b45a:	b086      	sub	sp, #24
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801b460:	2300      	movs	r3, #0
 801b462:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 801b464:	2300      	movs	r3, #0
 801b466:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 801b468:	2300      	movs	r3, #0
 801b46a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	4618      	mov	r0, r3
 801b472:	f005 fdbc 	bl	8020fee <SDMMC_CmdGoIdleState>
 801b476:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d027      	beq.n	801b4ce <MMC_PowerON+0x76>
  {
    return errorstate;
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	e034      	b.n	801b4ec <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 801b482:	68bb      	ldr	r3, [r7, #8]
 801b484:	1c5a      	adds	r2, r3, #1
 801b486:	60ba      	str	r2, [r7, #8]
 801b488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b48c:	4293      	cmp	r3, r2
 801b48e:	d102      	bne.n	801b496 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 801b490:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801b494:	e02a      	b.n	801b4ec <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	4916      	ldr	r1, [pc, #88]	@ (801b4f4 <MMC_PowerON+0x9c>)
 801b49c:	4618      	mov	r0, r3
 801b49e:	f005 fe4b 	bl	8021138 <SDMMC_CmdOpCondition>
 801b4a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d002      	beq.n	801b4b0 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 801b4aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801b4ae:	e01d      	b.n	801b4ec <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	2100      	movs	r1, #0
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	f005 fc4b 	bl	8020d52 <SDMMC_GetResponse>
 801b4bc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801b4be:	697b      	ldr	r3, [r7, #20]
 801b4c0:	0fdb      	lsrs	r3, r3, #31
 801b4c2:	2b01      	cmp	r3, #1
 801b4c4:	d101      	bne.n	801b4ca <MMC_PowerON+0x72>
 801b4c6:	2301      	movs	r3, #1
 801b4c8:	e000      	b.n	801b4cc <MMC_PowerON+0x74>
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 801b4ce:	693b      	ldr	r3, [r7, #16]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d0d6      	beq.n	801b482 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 801b4d4:	697b      	ldr	r3, [r7, #20]
 801b4d6:	0e1b      	lsrs	r3, r3, #24
 801b4d8:	2bc0      	cmp	r3, #192	@ 0xc0
 801b4da:	d103      	bne.n	801b4e4 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	2201      	movs	r2, #1
 801b4e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 801b4e2:	e002      	b.n	801b4ea <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 801b4ea:	2300      	movs	r3, #0
}
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	3718      	adds	r7, #24
 801b4f0:	46bd      	mov	sp, r7
 801b4f2:	bd80      	pop	{r7, pc}
 801b4f4:	c0ff8000 	.word	0xc0ff8000

0801b4f8 <MMC_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
static void MMC_PowerOFF(MMC_HandleTypeDef *hmmc)
{
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b082      	sub	sp, #8
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hmmc->Instance);
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	4618      	mov	r0, r3
 801b506:	f005 fbce 	bl	8020ca6 <SDMMC_PowerState_OFF>
}
 801b50a:	bf00      	nop
 801b50c:	3708      	adds	r7, #8
 801b50e:	46bd      	mov	sp, r7
 801b510:	bd80      	pop	{r7, pc}

0801b512 <MMC_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the MMC card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t MMC_SendStatus(MMC_HandleTypeDef *hmmc, uint32_t *pCardStatus)
{
 801b512:	b580      	push	{r7, lr}
 801b514:	b084      	sub	sp, #16
 801b516:	af00      	add	r7, sp, #0
 801b518:	6078      	str	r0, [r7, #4]
 801b51a:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 801b51c:	683b      	ldr	r3, [r7, #0]
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d102      	bne.n	801b528 <MMC_SendStatus+0x16>
  {
    return HAL_MMC_ERROR_PARAM;
 801b522:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801b526:	e018      	b.n	801b55a <MMC_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	681a      	ldr	r2, [r3, #0]
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b530:	041b      	lsls	r3, r3, #16
 801b532:	4619      	mov	r1, r3
 801b534:	4610      	mov	r0, r2
 801b536:	f005 fddc 	bl	80210f2 <SDMMC_CmdSendStatus>
 801b53a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	2b00      	cmp	r3, #0
 801b540:	d001      	beq.n	801b546 <MMC_SendStatus+0x34>
  {
    return errorstate;
 801b542:	68fb      	ldr	r3, [r7, #12]
 801b544:	e009      	b.n	801b55a <MMC_SendStatus+0x48>
  }

  /* Get MMC card status */
  *pCardStatus = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	2100      	movs	r1, #0
 801b54c:	4618      	mov	r0, r3
 801b54e:	f005 fc00 	bl	8020d52 <SDMMC_GetResponse>
 801b552:	4602      	mov	r2, r0
 801b554:	683b      	ldr	r3, [r7, #0]
 801b556:	601a      	str	r2, [r3, #0]

  return HAL_MMC_ERROR_NONE;
 801b558:	2300      	movs	r3, #0
}
 801b55a:	4618      	mov	r0, r3
 801b55c:	3710      	adds	r7, #16
 801b55e:	46bd      	mov	sp, r7
 801b560:	bd80      	pop	{r7, pc}
	...

0801b564 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 801b564:	b580      	push	{r7, lr}
 801b566:	b090      	sub	sp, #64	@ 0x40
 801b568:	af00      	add	r7, sp, #0
 801b56a:	60f8      	str	r0, [r7, #12]
 801b56c:	60b9      	str	r1, [r7, #8]
 801b56e:	603b      	str	r3, [r7, #0]
 801b570:	4613      	mov	r3, r2
 801b572:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801b574:	f7fd ff46 	bl	8019404 <HAL_GetTick>
 801b578:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 801b57a:	2300      	movs	r3, #0
 801b57c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	2200      	movs	r2, #0
 801b582:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	2200      	movs	r2, #0
 801b58a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801b58c:	f04f 33ff 	mov.w	r3, #4294967295
 801b590:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 801b592:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b596:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801b598:	2390      	movs	r3, #144	@ 0x90
 801b59a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801b59c:	2302      	movs	r3, #2
 801b59e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801b5a0:	2300      	movs	r3, #0
 801b5a2:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801b5a4:	2301      	movs	r3, #1
 801b5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	f107 0214 	add.w	r2, r7, #20
 801b5b0:	4611      	mov	r1, r2
 801b5b2:	4618      	mov	r0, r3
 801b5b4:	f005 fbe0 	bl	8020d78 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	2100      	movs	r1, #0
 801b5be:	4618      	mov	r0, r3
 801b5c0:	f005 fdfd 	bl	80211be <SDMMC_CmdSendEXTCSD>
 801b5c4:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d04e      	beq.n	801b66a <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	4a5c      	ldr	r2, [pc, #368]	@ (801b744 <MMC_ReadExtCSD+0x1e0>)
 801b5d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b5da:	431a      	orrs	r2, r3
 801b5dc:	68fb      	ldr	r3, [r7, #12]
 801b5de:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	2201      	movs	r2, #1
 801b5e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801b5e8:	2301      	movs	r3, #1
 801b5ea:	e0a6      	b.n	801b73a <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 801b5ec:	68fb      	ldr	r3, [r7, #12]
 801b5ee:	681b      	ldr	r3, [r3, #0]
 801b5f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b5f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d01c      	beq.n	801b634 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b5fa:	2300      	movs	r3, #0
 801b5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b5fe:	e013      	b.n	801b628 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	4618      	mov	r0, r3
 801b606:	f005 fb1f 	bl	8020c48 <SDMMC_ReadFIFO>
 801b60a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 801b60c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b610:	4413      	add	r3, r2
 801b612:	88fa      	ldrh	r2, [r7, #6]
 801b614:	0892      	lsrs	r2, r2, #2
 801b616:	b292      	uxth	r2, r2
 801b618:	4293      	cmp	r3, r2
 801b61a:	d102      	bne.n	801b622 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 801b61c:	68bb      	ldr	r3, [r7, #8]
 801b61e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b620:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b624:	3301      	adds	r3, #1
 801b626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b62a:	2b07      	cmp	r3, #7
 801b62c:	d9e8      	bls.n	801b600 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 801b62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b630:	3308      	adds	r3, #8
 801b632:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801b634:	f7fd fee6 	bl	8019404 <HAL_GetTick>
 801b638:	4602      	mov	r2, r0
 801b63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b63c:	1ad3      	subs	r3, r2, r3
 801b63e:	683a      	ldr	r2, [r7, #0]
 801b640:	429a      	cmp	r2, r3
 801b642:	d902      	bls.n	801b64a <MMC_ReadExtCSD+0xe6>
 801b644:	683b      	ldr	r3, [r7, #0]
 801b646:	2b00      	cmp	r3, #0
 801b648:	d10f      	bne.n	801b66a <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	4a3d      	ldr	r2, [pc, #244]	@ (801b744 <MMC_ReadExtCSD+0x1e0>)
 801b650:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 801b652:	68fb      	ldr	r3, [r7, #12]
 801b654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b656:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801b65a:	68fb      	ldr	r3, [r7, #12]
 801b65c:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801b65e:	68fb      	ldr	r3, [r7, #12]
 801b660:	2201      	movs	r2, #1
 801b662:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 801b666:	2303      	movs	r3, #3
 801b668:	e067      	b.n	801b73a <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 801b66a:	68fb      	ldr	r3, [r7, #12]
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b670:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 801b674:	2b00      	cmp	r3, #0
 801b676:	d0b9      	beq.n	801b5ec <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b67e:	f003 0308 	and.w	r3, r3, #8
 801b682:	2b00      	cmp	r3, #0
 801b684:	d00f      	beq.n	801b6a6 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b686:	68fb      	ldr	r3, [r7, #12]
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	4a2e      	ldr	r2, [pc, #184]	@ (801b744 <MMC_ReadExtCSD+0x1e0>)
 801b68c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b692:	f043 0208 	orr.w	r2, r3, #8
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	2201      	movs	r2, #1
 801b69e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801b6a2:	2301      	movs	r3, #1
 801b6a4:	e049      	b.n	801b73a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b6ac:	f003 0302 	and.w	r3, r3, #2
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d00f      	beq.n	801b6d4 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	4a22      	ldr	r2, [pc, #136]	@ (801b744 <MMC_ReadExtCSD+0x1e0>)
 801b6ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 801b6bc:	68fb      	ldr	r3, [r7, #12]
 801b6be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b6c0:	f043 0202 	orr.w	r2, r3, #2
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	2201      	movs	r2, #1
 801b6cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801b6d0:	2301      	movs	r3, #1
 801b6d2:	e032      	b.n	801b73a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 801b6d4:	68fb      	ldr	r3, [r7, #12]
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b6da:	f003 0320 	and.w	r3, r3, #32
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d00f      	beq.n	801b702 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b6e2:	68fb      	ldr	r3, [r7, #12]
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	4a17      	ldr	r2, [pc, #92]	@ (801b744 <MMC_ReadExtCSD+0x1e0>)
 801b6e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 801b6ea:	68fb      	ldr	r3, [r7, #12]
 801b6ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b6ee:	f043 0220 	orr.w	r2, r3, #32
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801b6f6:	68fb      	ldr	r3, [r7, #12]
 801b6f8:	2201      	movs	r2, #1
 801b6fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801b6fe:	2301      	movs	r3, #1
 801b700:	e01b      	b.n	801b73a <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	681a      	ldr	r2, [r3, #0]
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b70a:	041b      	lsls	r3, r3, #16
 801b70c:	4619      	mov	r1, r3
 801b70e:	4610      	mov	r0, r2
 801b710:	f005 fcef 	bl	80210f2 <SDMMC_CmdSendStatus>
 801b714:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d005      	beq.n	801b728 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 801b71c:	68fb      	ldr	r3, [r7, #12]
 801b71e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b722:	431a      	orrs	r2, r3
 801b724:	68fb      	ldr	r3, [r7, #12]
 801b726:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	4a06      	ldr	r2, [pc, #24]	@ (801b748 <MMC_ReadExtCSD+0x1e4>)
 801b72e:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 801b730:	68fb      	ldr	r3, [r7, #12]
 801b732:	2201      	movs	r2, #1
 801b734:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 801b738:	2300      	movs	r3, #0
}
 801b73a:	4618      	mov	r0, r3
 801b73c:	3740      	adds	r7, #64	@ 0x40
 801b73e:	46bd      	mov	sp, r7
 801b740:	bd80      	pop	{r7, pc}
 801b742:	bf00      	nop
 801b744:	1fe00fff 	.word	0x1fe00fff
 801b748:	18000f3a 	.word	0x18000f3a

0801b74c <MMC_Read_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Read_IT(MMC_HandleTypeDef *hmmc)
{
 801b74c:	b580      	push	{r7, lr}
 801b74e:	b086      	sub	sp, #24
 801b750:	af00      	add	r7, sp, #0
 801b752:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hmmc->pRxBuffPtr;
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b758:	613b      	str	r3, [r7, #16]

  if (hmmc->RxXferSize >= SDMMC_FIFO_SIZE)
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b75e:	2b1f      	cmp	r3, #31
 801b760:	d936      	bls.n	801b7d0 <MMC_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b762:	2300      	movs	r3, #0
 801b764:	617b      	str	r3, [r7, #20]
 801b766:	e027      	b.n	801b7b8 <MMC_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hmmc->Instance);
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	4618      	mov	r0, r3
 801b76e:	f005 fa6b 	bl	8020c48 <SDMMC_ReadFIFO>
 801b772:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	b2da      	uxtb	r2, r3
 801b778:	693b      	ldr	r3, [r7, #16]
 801b77a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801b77c:	693b      	ldr	r3, [r7, #16]
 801b77e:	3301      	adds	r3, #1
 801b780:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	0a1b      	lsrs	r3, r3, #8
 801b786:	b2da      	uxtb	r2, r3
 801b788:	693b      	ldr	r3, [r7, #16]
 801b78a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801b78c:	693b      	ldr	r3, [r7, #16]
 801b78e:	3301      	adds	r3, #1
 801b790:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	0c1b      	lsrs	r3, r3, #16
 801b796:	b2da      	uxtb	r2, r3
 801b798:	693b      	ldr	r3, [r7, #16]
 801b79a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801b79c:	693b      	ldr	r3, [r7, #16]
 801b79e:	3301      	adds	r3, #1
 801b7a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	0e1b      	lsrs	r3, r3, #24
 801b7a6:	b2da      	uxtb	r2, r3
 801b7a8:	693b      	ldr	r3, [r7, #16]
 801b7aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 801b7ac:	693b      	ldr	r3, [r7, #16]
 801b7ae:	3301      	adds	r3, #1
 801b7b0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b7b2:	697b      	ldr	r3, [r7, #20]
 801b7b4:	3301      	adds	r3, #1
 801b7b6:	617b      	str	r3, [r7, #20]
 801b7b8:	697b      	ldr	r3, [r7, #20]
 801b7ba:	2b07      	cmp	r3, #7
 801b7bc:	d9d4      	bls.n	801b768 <MMC_Read_IT+0x1c>
    }

    hmmc->pRxBuffPtr = tmp;
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	693a      	ldr	r2, [r7, #16]
 801b7c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hmmc->RxXferSize -= SDMMC_FIFO_SIZE;
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b7c8:	f1a3 0220 	sub.w	r2, r3, #32
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 801b7d0:	bf00      	nop
 801b7d2:	3718      	adds	r7, #24
 801b7d4:	46bd      	mov	sp, r7
 801b7d6:	bd80      	pop	{r7, pc}

0801b7d8 <MMC_Write_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Write_IT(MMC_HandleTypeDef *hmmc)
{
 801b7d8:	b580      	push	{r7, lr}
 801b7da:	b086      	sub	sp, #24
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hmmc->pTxBuffPtr;
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	69db      	ldr	r3, [r3, #28]
 801b7e4:	613b      	str	r3, [r7, #16]

  if (hmmc->TxXferSize >= SDMMC_FIFO_SIZE)
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	6a1b      	ldr	r3, [r3, #32]
 801b7ea:	2b1f      	cmp	r3, #31
 801b7ec:	d93a      	bls.n	801b864 <MMC_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b7ee:	2300      	movs	r3, #0
 801b7f0:	617b      	str	r3, [r7, #20]
 801b7f2:	e02b      	b.n	801b84c <MMC_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 801b7f4:	693b      	ldr	r3, [r7, #16]
 801b7f6:	781b      	ldrb	r3, [r3, #0]
 801b7f8:	60fb      	str	r3, [r7, #12]
      tmp++;
 801b7fa:	693b      	ldr	r3, [r7, #16]
 801b7fc:	3301      	adds	r3, #1
 801b7fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 801b800:	693b      	ldr	r3, [r7, #16]
 801b802:	781b      	ldrb	r3, [r3, #0]
 801b804:	021a      	lsls	r2, r3, #8
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	4313      	orrs	r3, r2
 801b80a:	60fb      	str	r3, [r7, #12]
      tmp++;
 801b80c:	693b      	ldr	r3, [r7, #16]
 801b80e:	3301      	adds	r3, #1
 801b810:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801b812:	693b      	ldr	r3, [r7, #16]
 801b814:	781b      	ldrb	r3, [r3, #0]
 801b816:	041a      	lsls	r2, r3, #16
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	4313      	orrs	r3, r2
 801b81c:	60fb      	str	r3, [r7, #12]
      tmp++;
 801b81e:	693b      	ldr	r3, [r7, #16]
 801b820:	3301      	adds	r3, #1
 801b822:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801b824:	693b      	ldr	r3, [r7, #16]
 801b826:	781b      	ldrb	r3, [r3, #0]
 801b828:	061a      	lsls	r2, r3, #24
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	4313      	orrs	r3, r2
 801b82e:	60fb      	str	r3, [r7, #12]
      tmp++;
 801b830:	693b      	ldr	r3, [r7, #16]
 801b832:	3301      	adds	r3, #1
 801b834:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hmmc->Instance, &data);
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	f107 020c 	add.w	r2, r7, #12
 801b83e:	4611      	mov	r1, r2
 801b840:	4618      	mov	r0, r3
 801b842:	f005 fa0e 	bl	8020c62 <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b846:	697b      	ldr	r3, [r7, #20]
 801b848:	3301      	adds	r3, #1
 801b84a:	617b      	str	r3, [r7, #20]
 801b84c:	697b      	ldr	r3, [r7, #20]
 801b84e:	2b07      	cmp	r3, #7
 801b850:	d9d0      	bls.n	801b7f4 <MMC_Write_IT+0x1c>
    }

    hmmc->pTxBuffPtr = tmp;
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	693a      	ldr	r2, [r7, #16]
 801b856:	61da      	str	r2, [r3, #28]
    hmmc->TxXferSize -= SDMMC_FIFO_SIZE;
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	6a1b      	ldr	r3, [r3, #32]
 801b85c:	f1a3 0220 	sub.w	r2, r3, #32
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	621a      	str	r2, [r3, #32]
  }
}
 801b864:	bf00      	nop
 801b866:	3718      	adds	r7, #24
 801b868:	46bd      	mov	sp, r7
 801b86a:	bd80      	pop	{r7, pc}

0801b86c <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 801b86c:	b580      	push	{r7, lr}
 801b86e:	b08a      	sub	sp, #40	@ 0x28
 801b870:	af00      	add	r7, sp, #0
 801b872:	60f8      	str	r0, [r7, #12]
 801b874:	60b9      	str	r1, [r7, #8]
 801b876:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 801b878:	2300      	movs	r3, #0
 801b87a:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 801b87c:	2300      	movs	r3, #0
 801b87e:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 801b880:	68bb      	ldr	r3, [r7, #8]
 801b882:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b886:	d004      	beq.n	801b892 <MMC_PwrClassUpdate+0x26>
 801b888:	68bb      	ldr	r3, [r7, #8]
 801b88a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b88e:	f040 8085 	bne.w	801b99c <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 801b892:	2300      	movs	r3, #0
 801b894:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 801b896:	f107 0114 	add.w	r1, r7, #20
 801b89a:	f04f 33ff 	mov.w	r3, #4294967295
 801b89e:	22bb      	movs	r2, #187	@ 0xbb
 801b8a0:	68f8      	ldr	r0, [r7, #12]
 801b8a2:	f7ff fe5f 	bl	801b564 <MMC_ReadExtCSD>
 801b8a6:	4603      	mov	r3, r0
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	d003      	beq.n	801b8b4 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801b8ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801b8b0:	61fb      	str	r3, [r7, #28]
 801b8b2:	e002      	b.n	801b8ba <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 801b8b4:	697b      	ldr	r3, [r7, #20]
 801b8b6:	0e1b      	lsrs	r3, r3, #24
 801b8b8:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	2b04      	cmp	r3, #4
 801b8be:	d105      	bne.n	801b8cc <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 801b8c6:	0e1b      	lsrs	r3, r3, #24
 801b8c8:	61bb      	str	r3, [r7, #24]
 801b8ca:	e00e      	b.n	801b8ea <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	2b02      	cmp	r3, #2
 801b8d0:	d106      	bne.n	801b8e0 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801b8d8:	0c1b      	lsrs	r3, r3, #16
 801b8da:	b2db      	uxtb	r3, r3
 801b8dc:	61bb      	str	r3, [r7, #24]
 801b8de:	e004      	b.n	801b8ea <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801b8e6:	0e1b      	lsrs	r3, r3, #24
 801b8e8:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 801b8ea:	69fb      	ldr	r3, [r7, #28]
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d155      	bne.n	801b99c <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 801b8f0:	68bb      	ldr	r3, [r7, #8]
 801b8f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b8f6:	d102      	bne.n	801b8fe <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 801b8f8:	69bb      	ldr	r3, [r7, #24]
 801b8fa:	091b      	lsrs	r3, r3, #4
 801b8fc:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 801b8fe:	697a      	ldr	r2, [r7, #20]
 801b900:	69bb      	ldr	r3, [r7, #24]
 801b902:	4053      	eors	r3, r2
 801b904:	f003 030f 	and.w	r3, r3, #15
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d047      	beq.n	801b99c <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	6818      	ldr	r0, [r3, #0]
 801b910:	69bb      	ldr	r3, [r7, #24]
 801b912:	021b      	lsls	r3, r3, #8
 801b914:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 801b918:	4b23      	ldr	r3, [pc, #140]	@ (801b9a8 <MMC_PwrClassUpdate+0x13c>)
 801b91a:	4313      	orrs	r3, r2
 801b91c:	4619      	mov	r1, r3
 801b91e:	f005 fc2b 	bl	8021178 <SDMMC_CmdSwitch>
 801b922:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 801b924:	69fb      	ldr	r3, [r7, #28]
 801b926:	2b00      	cmp	r3, #0
 801b928:	d138      	bne.n	801b99c <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 801b92a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b92e:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	681a      	ldr	r2, [r3, #0]
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b938:	041b      	lsls	r3, r3, #16
 801b93a:	4619      	mov	r1, r3
 801b93c:	4610      	mov	r0, r2
 801b93e:	f005 fbd8 	bl	80210f2 <SDMMC_CmdSendStatus>
 801b942:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 801b944:	69fb      	ldr	r3, [r7, #28]
 801b946:	2b00      	cmp	r3, #0
 801b948:	d112      	bne.n	801b970 <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	2100      	movs	r1, #0
 801b950:	4618      	mov	r0, r3
 801b952:	f005 f9fe 	bl	8020d52 <SDMMC_GetResponse>
 801b956:	6238      	str	r0, [r7, #32]
            count--;
 801b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b95a:	3b01      	subs	r3, #1
 801b95c:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 801b95e:	6a3b      	ldr	r3, [r7, #32]
 801b960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b964:	2b00      	cmp	r3, #0
 801b966:	d104      	bne.n	801b972 <MMC_PwrClassUpdate+0x106>
 801b968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d1e0      	bne.n	801b930 <MMC_PwrClassUpdate+0xc4>
 801b96e:	e000      	b.n	801b972 <MMC_PwrClassUpdate+0x106>
              break;
 801b970:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 801b972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b974:	2b00      	cmp	r3, #0
 801b976:	d00b      	beq.n	801b990 <MMC_PwrClassUpdate+0x124>
 801b978:	69fb      	ldr	r3, [r7, #28]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d108      	bne.n	801b990 <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 801b97e:	6a3b      	ldr	r3, [r7, #32]
 801b980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b984:	2b00      	cmp	r3, #0
 801b986:	d009      	beq.n	801b99c <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 801b988:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801b98c:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 801b98e:	e005      	b.n	801b99c <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 801b990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b992:	2b00      	cmp	r3, #0
 801b994:	d102      	bne.n	801b99c <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 801b996:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801b99a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 801b99c:	69fb      	ldr	r3, [r7, #28]
}
 801b99e:	4618      	mov	r0, r3
 801b9a0:	3728      	adds	r7, #40	@ 0x28
 801b9a2:	46bd      	mov	sp, r7
 801b9a4:	bd80      	pop	{r7, pc}
 801b9a6:	bf00      	nop
 801b9a8:	03bb0000 	.word	0x03bb0000

0801b9ac <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 801b9ac:	b480      	push	{r7}
 801b9ae:	b083      	sub	sp, #12
 801b9b0:	af00      	add	r7, sp, #0
 801b9b2:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801b9b4:	bf00      	nop
 801b9b6:	370c      	adds	r7, #12
 801b9b8:	46bd      	mov	sp, r7
 801b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9be:	4770      	bx	lr

0801b9c0 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 801b9c0:	b480      	push	{r7}
 801b9c2:	b083      	sub	sp, #12
 801b9c4:	af00      	add	r7, sp, #0
 801b9c6:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801b9c8:	bf00      	nop
 801b9ca:	370c      	adds	r7, #12
 801b9cc:	46bd      	mov	sp, r7
 801b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9d2:	4770      	bx	lr

0801b9d4 <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 801b9d4:	b480      	push	{r7}
 801b9d6:	b083      	sub	sp, #12
 801b9d8:	af00      	add	r7, sp, #0
 801b9da:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801b9dc:	bf00      	nop
 801b9de:	370c      	adds	r7, #12
 801b9e0:	46bd      	mov	sp, r7
 801b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9e6:	4770      	bx	lr

0801b9e8 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 801b9e8:	b480      	push	{r7}
 801b9ea:	b083      	sub	sp, #12
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801b9f0:	bf00      	nop
 801b9f2:	370c      	adds	r7, #12
 801b9f4:	46bd      	mov	sp, r7
 801b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9fa:	4770      	bx	lr

0801b9fc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	b084      	sub	sp, #16
 801ba00:	af00      	add	r7, sp, #0
 801ba02:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801ba04:	4b29      	ldr	r3, [pc, #164]	@ (801baac <HAL_PWREx_ConfigSupply+0xb0>)
 801ba06:	68db      	ldr	r3, [r3, #12]
 801ba08:	f003 0307 	and.w	r3, r3, #7
 801ba0c:	2b06      	cmp	r3, #6
 801ba0e:	d00a      	beq.n	801ba26 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801ba10:	4b26      	ldr	r3, [pc, #152]	@ (801baac <HAL_PWREx_ConfigSupply+0xb0>)
 801ba12:	68db      	ldr	r3, [r3, #12]
 801ba14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ba18:	687a      	ldr	r2, [r7, #4]
 801ba1a:	429a      	cmp	r2, r3
 801ba1c:	d001      	beq.n	801ba22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801ba1e:	2301      	movs	r3, #1
 801ba20:	e040      	b.n	801baa4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801ba22:	2300      	movs	r3, #0
 801ba24:	e03e      	b.n	801baa4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801ba26:	4b21      	ldr	r3, [pc, #132]	@ (801baac <HAL_PWREx_ConfigSupply+0xb0>)
 801ba28:	68db      	ldr	r3, [r3, #12]
 801ba2a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 801ba2e:	491f      	ldr	r1, [pc, #124]	@ (801baac <HAL_PWREx_ConfigSupply+0xb0>)
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	4313      	orrs	r3, r2
 801ba34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801ba36:	f7fd fce5 	bl	8019404 <HAL_GetTick>
 801ba3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801ba3c:	e009      	b.n	801ba52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801ba3e:	f7fd fce1 	bl	8019404 <HAL_GetTick>
 801ba42:	4602      	mov	r2, r0
 801ba44:	68fb      	ldr	r3, [r7, #12]
 801ba46:	1ad3      	subs	r3, r2, r3
 801ba48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ba4c:	d901      	bls.n	801ba52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801ba4e:	2301      	movs	r3, #1
 801ba50:	e028      	b.n	801baa4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801ba52:	4b16      	ldr	r3, [pc, #88]	@ (801baac <HAL_PWREx_ConfigSupply+0xb0>)
 801ba54:	685b      	ldr	r3, [r3, #4]
 801ba56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ba5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ba5e:	d1ee      	bne.n	801ba3e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	2b1e      	cmp	r3, #30
 801ba64:	d008      	beq.n	801ba78 <HAL_PWREx_ConfigSupply+0x7c>
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba6a:	d005      	beq.n	801ba78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	2b1d      	cmp	r3, #29
 801ba70:	d002      	beq.n	801ba78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	2b2d      	cmp	r3, #45	@ 0x2d
 801ba76:	d114      	bne.n	801baa2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 801ba78:	f7fd fcc4 	bl	8019404 <HAL_GetTick>
 801ba7c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801ba7e:	e009      	b.n	801ba94 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801ba80:	f7fd fcc0 	bl	8019404 <HAL_GetTick>
 801ba84:	4602      	mov	r2, r0
 801ba86:	68fb      	ldr	r3, [r7, #12]
 801ba88:	1ad3      	subs	r3, r2, r3
 801ba8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ba8e:	d901      	bls.n	801ba94 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 801ba90:	2301      	movs	r3, #1
 801ba92:	e007      	b.n	801baa4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801ba94:	4b05      	ldr	r3, [pc, #20]	@ (801baac <HAL_PWREx_ConfigSupply+0xb0>)
 801ba96:	68db      	ldr	r3, [r3, #12]
 801ba98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ba9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801baa0:	d1ee      	bne.n	801ba80 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801baa2:	2300      	movs	r3, #0
}
 801baa4:	4618      	mov	r0, r3
 801baa6:	3710      	adds	r7, #16
 801baa8:	46bd      	mov	sp, r7
 801baaa:	bd80      	pop	{r7, pc}
 801baac:	58024800 	.word	0x58024800

0801bab0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bab0:	b580      	push	{r7, lr}
 801bab2:	b08c      	sub	sp, #48	@ 0x30
 801bab4:	af00      	add	r7, sp, #0
 801bab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	2b00      	cmp	r3, #0
 801babc:	d102      	bne.n	801bac4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801babe:	2301      	movs	r3, #1
 801bac0:	f000 bc48 	b.w	801c354 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	f003 0301 	and.w	r3, r3, #1
 801bacc:	2b00      	cmp	r3, #0
 801bace:	f000 8088 	beq.w	801bbe2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bad2:	4b99      	ldr	r3, [pc, #612]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bad4:	691b      	ldr	r3, [r3, #16]
 801bad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801bada:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801badc:	4b96      	ldr	r3, [pc, #600]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801bae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bae4:	2b10      	cmp	r3, #16
 801bae6:	d007      	beq.n	801baf8 <HAL_RCC_OscConfig+0x48>
 801bae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801baea:	2b18      	cmp	r3, #24
 801baec:	d111      	bne.n	801bb12 <HAL_RCC_OscConfig+0x62>
 801baee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801baf0:	f003 0303 	and.w	r3, r3, #3
 801baf4:	2b02      	cmp	r3, #2
 801baf6:	d10c      	bne.n	801bb12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801baf8:	4b8f      	ldr	r3, [pc, #572]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d06d      	beq.n	801bbe0 <HAL_RCC_OscConfig+0x130>
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	685b      	ldr	r3, [r3, #4]
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	d169      	bne.n	801bbe0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801bb0c:	2301      	movs	r3, #1
 801bb0e:	f000 bc21 	b.w	801c354 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	685b      	ldr	r3, [r3, #4]
 801bb16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bb1a:	d106      	bne.n	801bb2a <HAL_RCC_OscConfig+0x7a>
 801bb1c:	4b86      	ldr	r3, [pc, #536]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	4a85      	ldr	r2, [pc, #532]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801bb26:	6013      	str	r3, [r2, #0]
 801bb28:	e02e      	b.n	801bb88 <HAL_RCC_OscConfig+0xd8>
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	685b      	ldr	r3, [r3, #4]
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d10c      	bne.n	801bb4c <HAL_RCC_OscConfig+0x9c>
 801bb32:	4b81      	ldr	r3, [pc, #516]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	4a80      	ldr	r2, [pc, #512]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801bb3c:	6013      	str	r3, [r2, #0]
 801bb3e:	4b7e      	ldr	r3, [pc, #504]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	4a7d      	ldr	r2, [pc, #500]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801bb48:	6013      	str	r3, [r2, #0]
 801bb4a:	e01d      	b.n	801bb88 <HAL_RCC_OscConfig+0xd8>
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	685b      	ldr	r3, [r3, #4]
 801bb50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801bb54:	d10c      	bne.n	801bb70 <HAL_RCC_OscConfig+0xc0>
 801bb56:	4b78      	ldr	r3, [pc, #480]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	4a77      	ldr	r2, [pc, #476]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801bb60:	6013      	str	r3, [r2, #0]
 801bb62:	4b75      	ldr	r3, [pc, #468]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	4a74      	ldr	r2, [pc, #464]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801bb6c:	6013      	str	r3, [r2, #0]
 801bb6e:	e00b      	b.n	801bb88 <HAL_RCC_OscConfig+0xd8>
 801bb70:	4b71      	ldr	r3, [pc, #452]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	4a70      	ldr	r2, [pc, #448]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801bb7a:	6013      	str	r3, [r2, #0]
 801bb7c:	4b6e      	ldr	r3, [pc, #440]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	4a6d      	ldr	r2, [pc, #436]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bb82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801bb86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	685b      	ldr	r3, [r3, #4]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d013      	beq.n	801bbb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb90:	f7fd fc38 	bl	8019404 <HAL_GetTick>
 801bb94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bb96:	e008      	b.n	801bbaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bb98:	f7fd fc34 	bl	8019404 <HAL_GetTick>
 801bb9c:	4602      	mov	r2, r0
 801bb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bba0:	1ad3      	subs	r3, r2, r3
 801bba2:	2b64      	cmp	r3, #100	@ 0x64
 801bba4:	d901      	bls.n	801bbaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801bba6:	2303      	movs	r3, #3
 801bba8:	e3d4      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bbaa:	4b63      	ldr	r3, [pc, #396]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d0f0      	beq.n	801bb98 <HAL_RCC_OscConfig+0xe8>
 801bbb6:	e014      	b.n	801bbe2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bbb8:	f7fd fc24 	bl	8019404 <HAL_GetTick>
 801bbbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801bbbe:	e008      	b.n	801bbd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bbc0:	f7fd fc20 	bl	8019404 <HAL_GetTick>
 801bbc4:	4602      	mov	r2, r0
 801bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbc8:	1ad3      	subs	r3, r2, r3
 801bbca:	2b64      	cmp	r3, #100	@ 0x64
 801bbcc:	d901      	bls.n	801bbd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801bbce:	2303      	movs	r3, #3
 801bbd0:	e3c0      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801bbd2:	4b59      	ldr	r3, [pc, #356]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d1f0      	bne.n	801bbc0 <HAL_RCC_OscConfig+0x110>
 801bbde:	e000      	b.n	801bbe2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bbe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	f003 0302 	and.w	r3, r3, #2
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	f000 80ca 	beq.w	801bd84 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bbf0:	4b51      	ldr	r3, [pc, #324]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bbf2:	691b      	ldr	r3, [r3, #16]
 801bbf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801bbf8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801bbfa:	4b4f      	ldr	r3, [pc, #316]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bbfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bbfe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801bc00:	6a3b      	ldr	r3, [r7, #32]
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d007      	beq.n	801bc16 <HAL_RCC_OscConfig+0x166>
 801bc06:	6a3b      	ldr	r3, [r7, #32]
 801bc08:	2b18      	cmp	r3, #24
 801bc0a:	d156      	bne.n	801bcba <HAL_RCC_OscConfig+0x20a>
 801bc0c:	69fb      	ldr	r3, [r7, #28]
 801bc0e:	f003 0303 	and.w	r3, r3, #3
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d151      	bne.n	801bcba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bc16:	4b48      	ldr	r3, [pc, #288]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	f003 0304 	and.w	r3, r3, #4
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d005      	beq.n	801bc2e <HAL_RCC_OscConfig+0x17e>
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	68db      	ldr	r3, [r3, #12]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d101      	bne.n	801bc2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801bc2a:	2301      	movs	r3, #1
 801bc2c:	e392      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801bc2e:	4b42      	ldr	r3, [pc, #264]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	f023 0219 	bic.w	r2, r3, #25
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	68db      	ldr	r3, [r3, #12]
 801bc3a:	493f      	ldr	r1, [pc, #252]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bc3c:	4313      	orrs	r3, r2
 801bc3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc40:	f7fd fbe0 	bl	8019404 <HAL_GetTick>
 801bc44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bc46:	e008      	b.n	801bc5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bc48:	f7fd fbdc 	bl	8019404 <HAL_GetTick>
 801bc4c:	4602      	mov	r2, r0
 801bc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc50:	1ad3      	subs	r3, r2, r3
 801bc52:	2b02      	cmp	r3, #2
 801bc54:	d901      	bls.n	801bc5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801bc56:	2303      	movs	r3, #3
 801bc58:	e37c      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bc5a:	4b37      	ldr	r3, [pc, #220]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	f003 0304 	and.w	r3, r3, #4
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d0f0      	beq.n	801bc48 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bc66:	f7fd fbfd 	bl	8019464 <HAL_GetREVID>
 801bc6a:	4603      	mov	r3, r0
 801bc6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801bc70:	4293      	cmp	r3, r2
 801bc72:	d817      	bhi.n	801bca4 <HAL_RCC_OscConfig+0x1f4>
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	691b      	ldr	r3, [r3, #16]
 801bc78:	2b40      	cmp	r3, #64	@ 0x40
 801bc7a:	d108      	bne.n	801bc8e <HAL_RCC_OscConfig+0x1de>
 801bc7c:	4b2e      	ldr	r3, [pc, #184]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bc7e:	685b      	ldr	r3, [r3, #4]
 801bc80:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801bc84:	4a2c      	ldr	r2, [pc, #176]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bc86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bc8a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bc8c:	e07a      	b.n	801bd84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bc8e:	4b2a      	ldr	r3, [pc, #168]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bc90:	685b      	ldr	r3, [r3, #4]
 801bc92:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	691b      	ldr	r3, [r3, #16]
 801bc9a:	031b      	lsls	r3, r3, #12
 801bc9c:	4926      	ldr	r1, [pc, #152]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bc9e:	4313      	orrs	r3, r2
 801bca0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bca2:	e06f      	b.n	801bd84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bca4:	4b24      	ldr	r3, [pc, #144]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bca6:	685b      	ldr	r3, [r3, #4]
 801bca8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	691b      	ldr	r3, [r3, #16]
 801bcb0:	061b      	lsls	r3, r3, #24
 801bcb2:	4921      	ldr	r1, [pc, #132]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bcb4:	4313      	orrs	r3, r2
 801bcb6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bcb8:	e064      	b.n	801bd84 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	68db      	ldr	r3, [r3, #12]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d047      	beq.n	801bd52 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801bcc2:	4b1d      	ldr	r3, [pc, #116]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	f023 0219 	bic.w	r2, r3, #25
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	68db      	ldr	r3, [r3, #12]
 801bcce:	491a      	ldr	r1, [pc, #104]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bcd0:	4313      	orrs	r3, r2
 801bcd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bcd4:	f7fd fb96 	bl	8019404 <HAL_GetTick>
 801bcd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bcda:	e008      	b.n	801bcee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bcdc:	f7fd fb92 	bl	8019404 <HAL_GetTick>
 801bce0:	4602      	mov	r2, r0
 801bce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bce4:	1ad3      	subs	r3, r2, r3
 801bce6:	2b02      	cmp	r3, #2
 801bce8:	d901      	bls.n	801bcee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801bcea:	2303      	movs	r3, #3
 801bcec:	e332      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bcee:	4b12      	ldr	r3, [pc, #72]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	f003 0304 	and.w	r3, r3, #4
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d0f0      	beq.n	801bcdc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bcfa:	f7fd fbb3 	bl	8019464 <HAL_GetREVID>
 801bcfe:	4603      	mov	r3, r0
 801bd00:	f241 0203 	movw	r2, #4099	@ 0x1003
 801bd04:	4293      	cmp	r3, r2
 801bd06:	d819      	bhi.n	801bd3c <HAL_RCC_OscConfig+0x28c>
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	691b      	ldr	r3, [r3, #16]
 801bd0c:	2b40      	cmp	r3, #64	@ 0x40
 801bd0e:	d108      	bne.n	801bd22 <HAL_RCC_OscConfig+0x272>
 801bd10:	4b09      	ldr	r3, [pc, #36]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bd12:	685b      	ldr	r3, [r3, #4]
 801bd14:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801bd18:	4a07      	ldr	r2, [pc, #28]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bd1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bd1e:	6053      	str	r3, [r2, #4]
 801bd20:	e030      	b.n	801bd84 <HAL_RCC_OscConfig+0x2d4>
 801bd22:	4b05      	ldr	r3, [pc, #20]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bd24:	685b      	ldr	r3, [r3, #4]
 801bd26:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	691b      	ldr	r3, [r3, #16]
 801bd2e:	031b      	lsls	r3, r3, #12
 801bd30:	4901      	ldr	r1, [pc, #4]	@ (801bd38 <HAL_RCC_OscConfig+0x288>)
 801bd32:	4313      	orrs	r3, r2
 801bd34:	604b      	str	r3, [r1, #4]
 801bd36:	e025      	b.n	801bd84 <HAL_RCC_OscConfig+0x2d4>
 801bd38:	58024400 	.word	0x58024400
 801bd3c:	4b9a      	ldr	r3, [pc, #616]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bd3e:	685b      	ldr	r3, [r3, #4]
 801bd40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	691b      	ldr	r3, [r3, #16]
 801bd48:	061b      	lsls	r3, r3, #24
 801bd4a:	4997      	ldr	r1, [pc, #604]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bd4c:	4313      	orrs	r3, r2
 801bd4e:	604b      	str	r3, [r1, #4]
 801bd50:	e018      	b.n	801bd84 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bd52:	4b95      	ldr	r3, [pc, #596]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	4a94      	ldr	r2, [pc, #592]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bd58:	f023 0301 	bic.w	r3, r3, #1
 801bd5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bd5e:	f7fd fb51 	bl	8019404 <HAL_GetTick>
 801bd62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801bd64:	e008      	b.n	801bd78 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bd66:	f7fd fb4d 	bl	8019404 <HAL_GetTick>
 801bd6a:	4602      	mov	r2, r0
 801bd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd6e:	1ad3      	subs	r3, r2, r3
 801bd70:	2b02      	cmp	r3, #2
 801bd72:	d901      	bls.n	801bd78 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801bd74:	2303      	movs	r3, #3
 801bd76:	e2ed      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801bd78:	4b8b      	ldr	r3, [pc, #556]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	f003 0304 	and.w	r3, r3, #4
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d1f0      	bne.n	801bd66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	681b      	ldr	r3, [r3, #0]
 801bd88:	f003 0310 	and.w	r3, r3, #16
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	f000 80a9 	beq.w	801bee4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bd92:	4b85      	ldr	r3, [pc, #532]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bd94:	691b      	ldr	r3, [r3, #16]
 801bd96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801bd9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801bd9c:	4b82      	ldr	r3, [pc, #520]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bd9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bda0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801bda2:	69bb      	ldr	r3, [r7, #24]
 801bda4:	2b08      	cmp	r3, #8
 801bda6:	d007      	beq.n	801bdb8 <HAL_RCC_OscConfig+0x308>
 801bda8:	69bb      	ldr	r3, [r7, #24]
 801bdaa:	2b18      	cmp	r3, #24
 801bdac:	d13a      	bne.n	801be24 <HAL_RCC_OscConfig+0x374>
 801bdae:	697b      	ldr	r3, [r7, #20]
 801bdb0:	f003 0303 	and.w	r3, r3, #3
 801bdb4:	2b01      	cmp	r3, #1
 801bdb6:	d135      	bne.n	801be24 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801bdb8:	4b7b      	ldr	r3, [pc, #492]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d005      	beq.n	801bdd0 <HAL_RCC_OscConfig+0x320>
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	69db      	ldr	r3, [r3, #28]
 801bdc8:	2b80      	cmp	r3, #128	@ 0x80
 801bdca:	d001      	beq.n	801bdd0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801bdcc:	2301      	movs	r3, #1
 801bdce:	e2c1      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801bdd0:	f7fd fb48 	bl	8019464 <HAL_GetREVID>
 801bdd4:	4603      	mov	r3, r0
 801bdd6:	f241 0203 	movw	r2, #4099	@ 0x1003
 801bdda:	4293      	cmp	r3, r2
 801bddc:	d817      	bhi.n	801be0e <HAL_RCC_OscConfig+0x35e>
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	6a1b      	ldr	r3, [r3, #32]
 801bde2:	2b20      	cmp	r3, #32
 801bde4:	d108      	bne.n	801bdf8 <HAL_RCC_OscConfig+0x348>
 801bde6:	4b70      	ldr	r3, [pc, #448]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bde8:	685b      	ldr	r3, [r3, #4]
 801bdea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801bdee:	4a6e      	ldr	r2, [pc, #440]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bdf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bdf4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801bdf6:	e075      	b.n	801bee4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801bdf8:	4b6b      	ldr	r3, [pc, #428]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bdfa:	685b      	ldr	r3, [r3, #4]
 801bdfc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	6a1b      	ldr	r3, [r3, #32]
 801be04:	069b      	lsls	r3, r3, #26
 801be06:	4968      	ldr	r1, [pc, #416]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801be08:	4313      	orrs	r3, r2
 801be0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801be0c:	e06a      	b.n	801bee4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801be0e:	4b66      	ldr	r3, [pc, #408]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801be10:	68db      	ldr	r3, [r3, #12]
 801be12:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	6a1b      	ldr	r3, [r3, #32]
 801be1a:	061b      	lsls	r3, r3, #24
 801be1c:	4962      	ldr	r1, [pc, #392]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801be1e:	4313      	orrs	r3, r2
 801be20:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801be22:	e05f      	b.n	801bee4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	69db      	ldr	r3, [r3, #28]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d042      	beq.n	801beb2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801be2c:	4b5e      	ldr	r3, [pc, #376]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	4a5d      	ldr	r2, [pc, #372]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801be32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801be36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801be38:	f7fd fae4 	bl	8019404 <HAL_GetTick>
 801be3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801be3e:	e008      	b.n	801be52 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801be40:	f7fd fae0 	bl	8019404 <HAL_GetTick>
 801be44:	4602      	mov	r2, r0
 801be46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be48:	1ad3      	subs	r3, r2, r3
 801be4a:	2b02      	cmp	r3, #2
 801be4c:	d901      	bls.n	801be52 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801be4e:	2303      	movs	r3, #3
 801be50:	e280      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801be52:	4b55      	ldr	r3, [pc, #340]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d0f0      	beq.n	801be40 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801be5e:	f7fd fb01 	bl	8019464 <HAL_GetREVID>
 801be62:	4603      	mov	r3, r0
 801be64:	f241 0203 	movw	r2, #4099	@ 0x1003
 801be68:	4293      	cmp	r3, r2
 801be6a:	d817      	bhi.n	801be9c <HAL_RCC_OscConfig+0x3ec>
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	6a1b      	ldr	r3, [r3, #32]
 801be70:	2b20      	cmp	r3, #32
 801be72:	d108      	bne.n	801be86 <HAL_RCC_OscConfig+0x3d6>
 801be74:	4b4c      	ldr	r3, [pc, #304]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801be76:	685b      	ldr	r3, [r3, #4]
 801be78:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801be7c:	4a4a      	ldr	r2, [pc, #296]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801be7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801be82:	6053      	str	r3, [r2, #4]
 801be84:	e02e      	b.n	801bee4 <HAL_RCC_OscConfig+0x434>
 801be86:	4b48      	ldr	r3, [pc, #288]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801be88:	685b      	ldr	r3, [r3, #4]
 801be8a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	6a1b      	ldr	r3, [r3, #32]
 801be92:	069b      	lsls	r3, r3, #26
 801be94:	4944      	ldr	r1, [pc, #272]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801be96:	4313      	orrs	r3, r2
 801be98:	604b      	str	r3, [r1, #4]
 801be9a:	e023      	b.n	801bee4 <HAL_RCC_OscConfig+0x434>
 801be9c:	4b42      	ldr	r3, [pc, #264]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801be9e:	68db      	ldr	r3, [r3, #12]
 801bea0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	6a1b      	ldr	r3, [r3, #32]
 801bea8:	061b      	lsls	r3, r3, #24
 801beaa:	493f      	ldr	r1, [pc, #252]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801beac:	4313      	orrs	r3, r2
 801beae:	60cb      	str	r3, [r1, #12]
 801beb0:	e018      	b.n	801bee4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801beb2:	4b3d      	ldr	r3, [pc, #244]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	4a3c      	ldr	r2, [pc, #240]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801beb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801bebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bebe:	f7fd faa1 	bl	8019404 <HAL_GetTick>
 801bec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801bec4:	e008      	b.n	801bed8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801bec6:	f7fd fa9d 	bl	8019404 <HAL_GetTick>
 801beca:	4602      	mov	r2, r0
 801becc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bece:	1ad3      	subs	r3, r2, r3
 801bed0:	2b02      	cmp	r3, #2
 801bed2:	d901      	bls.n	801bed8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801bed4:	2303      	movs	r3, #3
 801bed6:	e23d      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801bed8:	4b33      	ldr	r3, [pc, #204]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d1f0      	bne.n	801bec6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	f003 0308 	and.w	r3, r3, #8
 801beec:	2b00      	cmp	r3, #0
 801beee:	d036      	beq.n	801bf5e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	695b      	ldr	r3, [r3, #20]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d019      	beq.n	801bf2c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bef8:	4b2b      	ldr	r3, [pc, #172]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801befa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801befc:	4a2a      	ldr	r2, [pc, #168]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801befe:	f043 0301 	orr.w	r3, r3, #1
 801bf02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bf04:	f7fd fa7e 	bl	8019404 <HAL_GetTick>
 801bf08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801bf0a:	e008      	b.n	801bf1e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801bf0c:	f7fd fa7a 	bl	8019404 <HAL_GetTick>
 801bf10:	4602      	mov	r2, r0
 801bf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf14:	1ad3      	subs	r3, r2, r3
 801bf16:	2b02      	cmp	r3, #2
 801bf18:	d901      	bls.n	801bf1e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801bf1a:	2303      	movs	r3, #3
 801bf1c:	e21a      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801bf1e:	4b22      	ldr	r3, [pc, #136]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bf20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bf22:	f003 0302 	and.w	r3, r3, #2
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d0f0      	beq.n	801bf0c <HAL_RCC_OscConfig+0x45c>
 801bf2a:	e018      	b.n	801bf5e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bf2c:	4b1e      	ldr	r3, [pc, #120]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bf2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bf30:	4a1d      	ldr	r2, [pc, #116]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bf32:	f023 0301 	bic.w	r3, r3, #1
 801bf36:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bf38:	f7fd fa64 	bl	8019404 <HAL_GetTick>
 801bf3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801bf3e:	e008      	b.n	801bf52 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801bf40:	f7fd fa60 	bl	8019404 <HAL_GetTick>
 801bf44:	4602      	mov	r2, r0
 801bf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf48:	1ad3      	subs	r3, r2, r3
 801bf4a:	2b02      	cmp	r3, #2
 801bf4c:	d901      	bls.n	801bf52 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801bf4e:	2303      	movs	r3, #3
 801bf50:	e200      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801bf52:	4b15      	ldr	r3, [pc, #84]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bf54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bf56:	f003 0302 	and.w	r3, r3, #2
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d1f0      	bne.n	801bf40 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	f003 0320 	and.w	r3, r3, #32
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d039      	beq.n	801bfde <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	699b      	ldr	r3, [r3, #24]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d01c      	beq.n	801bfac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801bf72:	4b0d      	ldr	r3, [pc, #52]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bf74:	681b      	ldr	r3, [r3, #0]
 801bf76:	4a0c      	ldr	r2, [pc, #48]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bf78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801bf7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801bf7e:	f7fd fa41 	bl	8019404 <HAL_GetTick>
 801bf82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801bf84:	e008      	b.n	801bf98 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bf86:	f7fd fa3d 	bl	8019404 <HAL_GetTick>
 801bf8a:	4602      	mov	r2, r0
 801bf8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf8e:	1ad3      	subs	r3, r2, r3
 801bf90:	2b02      	cmp	r3, #2
 801bf92:	d901      	bls.n	801bf98 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801bf94:	2303      	movs	r3, #3
 801bf96:	e1dd      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801bf98:	4b03      	ldr	r3, [pc, #12]	@ (801bfa8 <HAL_RCC_OscConfig+0x4f8>)
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d0f0      	beq.n	801bf86 <HAL_RCC_OscConfig+0x4d6>
 801bfa4:	e01b      	b.n	801bfde <HAL_RCC_OscConfig+0x52e>
 801bfa6:	bf00      	nop
 801bfa8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801bfac:	4b9b      	ldr	r3, [pc, #620]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	4a9a      	ldr	r2, [pc, #616]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801bfb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bfb6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801bfb8:	f7fd fa24 	bl	8019404 <HAL_GetTick>
 801bfbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bfbe:	e008      	b.n	801bfd2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bfc0:	f7fd fa20 	bl	8019404 <HAL_GetTick>
 801bfc4:	4602      	mov	r2, r0
 801bfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfc8:	1ad3      	subs	r3, r2, r3
 801bfca:	2b02      	cmp	r3, #2
 801bfcc:	d901      	bls.n	801bfd2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801bfce:	2303      	movs	r3, #3
 801bfd0:	e1c0      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bfd2:	4b92      	ldr	r3, [pc, #584]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d1f0      	bne.n	801bfc0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	f003 0304 	and.w	r3, r3, #4
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	f000 8081 	beq.w	801c0ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801bfec:	4b8c      	ldr	r3, [pc, #560]	@ (801c220 <HAL_RCC_OscConfig+0x770>)
 801bfee:	681b      	ldr	r3, [r3, #0]
 801bff0:	4a8b      	ldr	r2, [pc, #556]	@ (801c220 <HAL_RCC_OscConfig+0x770>)
 801bff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801bff6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801bff8:	f7fd fa04 	bl	8019404 <HAL_GetTick>
 801bffc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bffe:	e008      	b.n	801c012 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c000:	f7fd fa00 	bl	8019404 <HAL_GetTick>
 801c004:	4602      	mov	r2, r0
 801c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c008:	1ad3      	subs	r3, r2, r3
 801c00a:	2b64      	cmp	r3, #100	@ 0x64
 801c00c:	d901      	bls.n	801c012 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801c00e:	2303      	movs	r3, #3
 801c010:	e1a0      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c012:	4b83      	ldr	r3, [pc, #524]	@ (801c220 <HAL_RCC_OscConfig+0x770>)
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d0f0      	beq.n	801c000 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	689b      	ldr	r3, [r3, #8]
 801c022:	2b01      	cmp	r3, #1
 801c024:	d106      	bne.n	801c034 <HAL_RCC_OscConfig+0x584>
 801c026:	4b7d      	ldr	r3, [pc, #500]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c02a:	4a7c      	ldr	r2, [pc, #496]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c02c:	f043 0301 	orr.w	r3, r3, #1
 801c030:	6713      	str	r3, [r2, #112]	@ 0x70
 801c032:	e02d      	b.n	801c090 <HAL_RCC_OscConfig+0x5e0>
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	689b      	ldr	r3, [r3, #8]
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d10c      	bne.n	801c056 <HAL_RCC_OscConfig+0x5a6>
 801c03c:	4b77      	ldr	r3, [pc, #476]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c03e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c040:	4a76      	ldr	r2, [pc, #472]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c042:	f023 0301 	bic.w	r3, r3, #1
 801c046:	6713      	str	r3, [r2, #112]	@ 0x70
 801c048:	4b74      	ldr	r3, [pc, #464]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c04a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c04c:	4a73      	ldr	r2, [pc, #460]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c04e:	f023 0304 	bic.w	r3, r3, #4
 801c052:	6713      	str	r3, [r2, #112]	@ 0x70
 801c054:	e01c      	b.n	801c090 <HAL_RCC_OscConfig+0x5e0>
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	689b      	ldr	r3, [r3, #8]
 801c05a:	2b05      	cmp	r3, #5
 801c05c:	d10c      	bne.n	801c078 <HAL_RCC_OscConfig+0x5c8>
 801c05e:	4b6f      	ldr	r3, [pc, #444]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c062:	4a6e      	ldr	r2, [pc, #440]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c064:	f043 0304 	orr.w	r3, r3, #4
 801c068:	6713      	str	r3, [r2, #112]	@ 0x70
 801c06a:	4b6c      	ldr	r3, [pc, #432]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c06c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c06e:	4a6b      	ldr	r2, [pc, #428]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c070:	f043 0301 	orr.w	r3, r3, #1
 801c074:	6713      	str	r3, [r2, #112]	@ 0x70
 801c076:	e00b      	b.n	801c090 <HAL_RCC_OscConfig+0x5e0>
 801c078:	4b68      	ldr	r3, [pc, #416]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c07a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c07c:	4a67      	ldr	r2, [pc, #412]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c07e:	f023 0301 	bic.w	r3, r3, #1
 801c082:	6713      	str	r3, [r2, #112]	@ 0x70
 801c084:	4b65      	ldr	r3, [pc, #404]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c088:	4a64      	ldr	r2, [pc, #400]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c08a:	f023 0304 	bic.w	r3, r3, #4
 801c08e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	689b      	ldr	r3, [r3, #8]
 801c094:	2b00      	cmp	r3, #0
 801c096:	d015      	beq.n	801c0c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c098:	f7fd f9b4 	bl	8019404 <HAL_GetTick>
 801c09c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c09e:	e00a      	b.n	801c0b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c0a0:	f7fd f9b0 	bl	8019404 <HAL_GetTick>
 801c0a4:	4602      	mov	r2, r0
 801c0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0a8:	1ad3      	subs	r3, r2, r3
 801c0aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c0ae:	4293      	cmp	r3, r2
 801c0b0:	d901      	bls.n	801c0b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801c0b2:	2303      	movs	r3, #3
 801c0b4:	e14e      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c0b6:	4b59      	ldr	r3, [pc, #356]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c0b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c0ba:	f003 0302 	and.w	r3, r3, #2
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d0ee      	beq.n	801c0a0 <HAL_RCC_OscConfig+0x5f0>
 801c0c2:	e014      	b.n	801c0ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c0c4:	f7fd f99e 	bl	8019404 <HAL_GetTick>
 801c0c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c0ca:	e00a      	b.n	801c0e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c0cc:	f7fd f99a 	bl	8019404 <HAL_GetTick>
 801c0d0:	4602      	mov	r2, r0
 801c0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0d4:	1ad3      	subs	r3, r2, r3
 801c0d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c0da:	4293      	cmp	r3, r2
 801c0dc:	d901      	bls.n	801c0e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801c0de:	2303      	movs	r3, #3
 801c0e0:	e138      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c0e2:	4b4e      	ldr	r3, [pc, #312]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c0e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c0e6:	f003 0302 	and.w	r3, r3, #2
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d1ee      	bne.n	801c0cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	f000 812d 	beq.w	801c352 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801c0f8:	4b48      	ldr	r3, [pc, #288]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c0fa:	691b      	ldr	r3, [r3, #16]
 801c0fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c100:	2b18      	cmp	r3, #24
 801c102:	f000 80bd 	beq.w	801c280 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c10a:	2b02      	cmp	r3, #2
 801c10c:	f040 809e 	bne.w	801c24c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c110:	4b42      	ldr	r3, [pc, #264]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c112:	681b      	ldr	r3, [r3, #0]
 801c114:	4a41      	ldr	r2, [pc, #260]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c11a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c11c:	f7fd f972 	bl	8019404 <HAL_GetTick>
 801c120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c122:	e008      	b.n	801c136 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c124:	f7fd f96e 	bl	8019404 <HAL_GetTick>
 801c128:	4602      	mov	r2, r0
 801c12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c12c:	1ad3      	subs	r3, r2, r3
 801c12e:	2b02      	cmp	r3, #2
 801c130:	d901      	bls.n	801c136 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801c132:	2303      	movs	r3, #3
 801c134:	e10e      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c136:	4b39      	ldr	r3, [pc, #228]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d1f0      	bne.n	801c124 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c142:	4b36      	ldr	r3, [pc, #216]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c146:	4b37      	ldr	r3, [pc, #220]	@ (801c224 <HAL_RCC_OscConfig+0x774>)
 801c148:	4013      	ands	r3, r2
 801c14a:	687a      	ldr	r2, [r7, #4]
 801c14c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801c14e:	687a      	ldr	r2, [r7, #4]
 801c150:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801c152:	0112      	lsls	r2, r2, #4
 801c154:	430a      	orrs	r2, r1
 801c156:	4931      	ldr	r1, [pc, #196]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c158:	4313      	orrs	r3, r2
 801c15a:	628b      	str	r3, [r1, #40]	@ 0x28
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c160:	3b01      	subs	r3, #1
 801c162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c16a:	3b01      	subs	r3, #1
 801c16c:	025b      	lsls	r3, r3, #9
 801c16e:	b29b      	uxth	r3, r3
 801c170:	431a      	orrs	r2, r3
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c176:	3b01      	subs	r3, #1
 801c178:	041b      	lsls	r3, r3, #16
 801c17a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801c17e:	431a      	orrs	r2, r3
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c184:	3b01      	subs	r3, #1
 801c186:	061b      	lsls	r3, r3, #24
 801c188:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801c18c:	4923      	ldr	r1, [pc, #140]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c18e:	4313      	orrs	r3, r2
 801c190:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801c192:	4b22      	ldr	r3, [pc, #136]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c196:	4a21      	ldr	r2, [pc, #132]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c198:	f023 0301 	bic.w	r3, r3, #1
 801c19c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c19e:	4b1f      	ldr	r3, [pc, #124]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c1a2:	4b21      	ldr	r3, [pc, #132]	@ (801c228 <HAL_RCC_OscConfig+0x778>)
 801c1a4:	4013      	ands	r3, r2
 801c1a6:	687a      	ldr	r2, [r7, #4]
 801c1a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c1aa:	00d2      	lsls	r2, r2, #3
 801c1ac:	491b      	ldr	r1, [pc, #108]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1ae:	4313      	orrs	r3, r2
 801c1b0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801c1b2:	4b1a      	ldr	r3, [pc, #104]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1b6:	f023 020c 	bic.w	r2, r3, #12
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c1be:	4917      	ldr	r1, [pc, #92]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1c0:	4313      	orrs	r3, r2
 801c1c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801c1c4:	4b15      	ldr	r3, [pc, #84]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1c8:	f023 0202 	bic.w	r2, r3, #2
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c1d0:	4912      	ldr	r1, [pc, #72]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1d2:	4313      	orrs	r3, r2
 801c1d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801c1d6:	4b11      	ldr	r3, [pc, #68]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1da:	4a10      	ldr	r2, [pc, #64]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c1e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c1e2:	4b0e      	ldr	r3, [pc, #56]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1e6:	4a0d      	ldr	r2, [pc, #52]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c1ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801c1ee:	4b0b      	ldr	r3, [pc, #44]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1f2:	4a0a      	ldr	r2, [pc, #40]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c1f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801c1fa:	4b08      	ldr	r3, [pc, #32]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1fe:	4a07      	ldr	r2, [pc, #28]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c200:	f043 0301 	orr.w	r3, r3, #1
 801c204:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c206:	4b05      	ldr	r3, [pc, #20]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	4a04      	ldr	r2, [pc, #16]	@ (801c21c <HAL_RCC_OscConfig+0x76c>)
 801c20c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c212:	f7fd f8f7 	bl	8019404 <HAL_GetTick>
 801c216:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c218:	e011      	b.n	801c23e <HAL_RCC_OscConfig+0x78e>
 801c21a:	bf00      	nop
 801c21c:	58024400 	.word	0x58024400
 801c220:	58024800 	.word	0x58024800
 801c224:	fffffc0c 	.word	0xfffffc0c
 801c228:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c22c:	f7fd f8ea 	bl	8019404 <HAL_GetTick>
 801c230:	4602      	mov	r2, r0
 801c232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c234:	1ad3      	subs	r3, r2, r3
 801c236:	2b02      	cmp	r3, #2
 801c238:	d901      	bls.n	801c23e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801c23a:	2303      	movs	r3, #3
 801c23c:	e08a      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c23e:	4b47      	ldr	r3, [pc, #284]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c246:	2b00      	cmp	r3, #0
 801c248:	d0f0      	beq.n	801c22c <HAL_RCC_OscConfig+0x77c>
 801c24a:	e082      	b.n	801c352 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c24c:	4b43      	ldr	r3, [pc, #268]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	4a42      	ldr	r2, [pc, #264]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c252:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c258:	f7fd f8d4 	bl	8019404 <HAL_GetTick>
 801c25c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c25e:	e008      	b.n	801c272 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c260:	f7fd f8d0 	bl	8019404 <HAL_GetTick>
 801c264:	4602      	mov	r2, r0
 801c266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c268:	1ad3      	subs	r3, r2, r3
 801c26a:	2b02      	cmp	r3, #2
 801c26c:	d901      	bls.n	801c272 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801c26e:	2303      	movs	r3, #3
 801c270:	e070      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c272:	4b3a      	ldr	r3, [pc, #232]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d1f0      	bne.n	801c260 <HAL_RCC_OscConfig+0x7b0>
 801c27e:	e068      	b.n	801c352 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801c280:	4b36      	ldr	r3, [pc, #216]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c284:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801c286:	4b35      	ldr	r3, [pc, #212]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c28a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c290:	2b01      	cmp	r3, #1
 801c292:	d031      	beq.n	801c2f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c294:	693b      	ldr	r3, [r7, #16]
 801c296:	f003 0203 	and.w	r2, r3, #3
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c29e:	429a      	cmp	r2, r3
 801c2a0:	d12a      	bne.n	801c2f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c2a2:	693b      	ldr	r3, [r7, #16]
 801c2a4:	091b      	lsrs	r3, r3, #4
 801c2a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c2ae:	429a      	cmp	r2, r3
 801c2b0:	d122      	bne.n	801c2f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c2b2:	68fb      	ldr	r3, [r7, #12]
 801c2b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c2bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c2be:	429a      	cmp	r2, r3
 801c2c0:	d11a      	bne.n	801c2f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	0a5b      	lsrs	r3, r3, #9
 801c2c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c2ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c2d0:	429a      	cmp	r2, r3
 801c2d2:	d111      	bne.n	801c2f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	0c1b      	lsrs	r3, r3, #16
 801c2d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c2e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c2e2:	429a      	cmp	r2, r3
 801c2e4:	d108      	bne.n	801c2f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	0e1b      	lsrs	r3, r3, #24
 801c2ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c2f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c2f4:	429a      	cmp	r2, r3
 801c2f6:	d001      	beq.n	801c2fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801c2f8:	2301      	movs	r3, #1
 801c2fa:	e02b      	b.n	801c354 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801c2fc:	4b17      	ldr	r3, [pc, #92]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c2fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c300:	08db      	lsrs	r3, r3, #3
 801c302:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c306:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c30c:	693a      	ldr	r2, [r7, #16]
 801c30e:	429a      	cmp	r2, r3
 801c310:	d01f      	beq.n	801c352 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801c312:	4b12      	ldr	r3, [pc, #72]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c316:	4a11      	ldr	r2, [pc, #68]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c318:	f023 0301 	bic.w	r3, r3, #1
 801c31c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c31e:	f7fd f871 	bl	8019404 <HAL_GetTick>
 801c322:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801c324:	bf00      	nop
 801c326:	f7fd f86d 	bl	8019404 <HAL_GetTick>
 801c32a:	4602      	mov	r2, r0
 801c32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c32e:	4293      	cmp	r3, r2
 801c330:	d0f9      	beq.n	801c326 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c332:	4b0a      	ldr	r3, [pc, #40]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c336:	4b0a      	ldr	r3, [pc, #40]	@ (801c360 <HAL_RCC_OscConfig+0x8b0>)
 801c338:	4013      	ands	r3, r2
 801c33a:	687a      	ldr	r2, [r7, #4]
 801c33c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c33e:	00d2      	lsls	r2, r2, #3
 801c340:	4906      	ldr	r1, [pc, #24]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c342:	4313      	orrs	r3, r2
 801c344:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801c346:	4b05      	ldr	r3, [pc, #20]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c34a:	4a04      	ldr	r2, [pc, #16]	@ (801c35c <HAL_RCC_OscConfig+0x8ac>)
 801c34c:	f043 0301 	orr.w	r3, r3, #1
 801c350:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801c352:	2300      	movs	r3, #0
}
 801c354:	4618      	mov	r0, r3
 801c356:	3730      	adds	r7, #48	@ 0x30
 801c358:	46bd      	mov	sp, r7
 801c35a:	bd80      	pop	{r7, pc}
 801c35c:	58024400 	.word	0x58024400
 801c360:	ffff0007 	.word	0xffff0007

0801c364 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c364:	b580      	push	{r7, lr}
 801c366:	b086      	sub	sp, #24
 801c368:	af00      	add	r7, sp, #0
 801c36a:	6078      	str	r0, [r7, #4]
 801c36c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d101      	bne.n	801c378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801c374:	2301      	movs	r3, #1
 801c376:	e19c      	b.n	801c6b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c378:	4b8a      	ldr	r3, [pc, #552]	@ (801c5a4 <HAL_RCC_ClockConfig+0x240>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	f003 030f 	and.w	r3, r3, #15
 801c380:	683a      	ldr	r2, [r7, #0]
 801c382:	429a      	cmp	r2, r3
 801c384:	d910      	bls.n	801c3a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c386:	4b87      	ldr	r3, [pc, #540]	@ (801c5a4 <HAL_RCC_ClockConfig+0x240>)
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	f023 020f 	bic.w	r2, r3, #15
 801c38e:	4985      	ldr	r1, [pc, #532]	@ (801c5a4 <HAL_RCC_ClockConfig+0x240>)
 801c390:	683b      	ldr	r3, [r7, #0]
 801c392:	4313      	orrs	r3, r2
 801c394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c396:	4b83      	ldr	r3, [pc, #524]	@ (801c5a4 <HAL_RCC_ClockConfig+0x240>)
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	f003 030f 	and.w	r3, r3, #15
 801c39e:	683a      	ldr	r2, [r7, #0]
 801c3a0:	429a      	cmp	r2, r3
 801c3a2:	d001      	beq.n	801c3a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801c3a4:	2301      	movs	r3, #1
 801c3a6:	e184      	b.n	801c6b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	f003 0304 	and.w	r3, r3, #4
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d010      	beq.n	801c3d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	691a      	ldr	r2, [r3, #16]
 801c3b8:	4b7b      	ldr	r3, [pc, #492]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c3ba:	699b      	ldr	r3, [r3, #24]
 801c3bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c3c0:	429a      	cmp	r2, r3
 801c3c2:	d908      	bls.n	801c3d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c3c4:	4b78      	ldr	r3, [pc, #480]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c3c6:	699b      	ldr	r3, [r3, #24]
 801c3c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	691b      	ldr	r3, [r3, #16]
 801c3d0:	4975      	ldr	r1, [pc, #468]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c3d2:	4313      	orrs	r3, r2
 801c3d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	f003 0308 	and.w	r3, r3, #8
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d010      	beq.n	801c404 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	695a      	ldr	r2, [r3, #20]
 801c3e6:	4b70      	ldr	r3, [pc, #448]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c3e8:	69db      	ldr	r3, [r3, #28]
 801c3ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c3ee:	429a      	cmp	r2, r3
 801c3f0:	d908      	bls.n	801c404 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c3f2:	4b6d      	ldr	r3, [pc, #436]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c3f4:	69db      	ldr	r3, [r3, #28]
 801c3f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	695b      	ldr	r3, [r3, #20]
 801c3fe:	496a      	ldr	r1, [pc, #424]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c400:	4313      	orrs	r3, r2
 801c402:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	f003 0310 	and.w	r3, r3, #16
 801c40c:	2b00      	cmp	r3, #0
 801c40e:	d010      	beq.n	801c432 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	699a      	ldr	r2, [r3, #24]
 801c414:	4b64      	ldr	r3, [pc, #400]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c416:	69db      	ldr	r3, [r3, #28]
 801c418:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c41c:	429a      	cmp	r2, r3
 801c41e:	d908      	bls.n	801c432 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c420:	4b61      	ldr	r3, [pc, #388]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c422:	69db      	ldr	r3, [r3, #28]
 801c424:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	699b      	ldr	r3, [r3, #24]
 801c42c:	495e      	ldr	r1, [pc, #376]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c42e:	4313      	orrs	r3, r2
 801c430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	f003 0320 	and.w	r3, r3, #32
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d010      	beq.n	801c460 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	69da      	ldr	r2, [r3, #28]
 801c442:	4b59      	ldr	r3, [pc, #356]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c444:	6a1b      	ldr	r3, [r3, #32]
 801c446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c44a:	429a      	cmp	r2, r3
 801c44c:	d908      	bls.n	801c460 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c44e:	4b56      	ldr	r3, [pc, #344]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c450:	6a1b      	ldr	r3, [r3, #32]
 801c452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	69db      	ldr	r3, [r3, #28]
 801c45a:	4953      	ldr	r1, [pc, #332]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c45c:	4313      	orrs	r3, r2
 801c45e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	f003 0302 	and.w	r3, r3, #2
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d010      	beq.n	801c48e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	68da      	ldr	r2, [r3, #12]
 801c470:	4b4d      	ldr	r3, [pc, #308]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c472:	699b      	ldr	r3, [r3, #24]
 801c474:	f003 030f 	and.w	r3, r3, #15
 801c478:	429a      	cmp	r2, r3
 801c47a:	d908      	bls.n	801c48e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c47c:	4b4a      	ldr	r3, [pc, #296]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c47e:	699b      	ldr	r3, [r3, #24]
 801c480:	f023 020f 	bic.w	r2, r3, #15
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	68db      	ldr	r3, [r3, #12]
 801c488:	4947      	ldr	r1, [pc, #284]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c48a:	4313      	orrs	r3, r2
 801c48c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	f003 0301 	and.w	r3, r3, #1
 801c496:	2b00      	cmp	r3, #0
 801c498:	d055      	beq.n	801c546 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801c49a:	4b43      	ldr	r3, [pc, #268]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c49c:	699b      	ldr	r3, [r3, #24]
 801c49e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	689b      	ldr	r3, [r3, #8]
 801c4a6:	4940      	ldr	r1, [pc, #256]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c4a8:	4313      	orrs	r3, r2
 801c4aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	685b      	ldr	r3, [r3, #4]
 801c4b0:	2b02      	cmp	r3, #2
 801c4b2:	d107      	bne.n	801c4c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c4b4:	4b3c      	ldr	r3, [pc, #240]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d121      	bne.n	801c504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c4c0:	2301      	movs	r3, #1
 801c4c2:	e0f6      	b.n	801c6b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	685b      	ldr	r3, [r3, #4]
 801c4c8:	2b03      	cmp	r3, #3
 801c4ca:	d107      	bne.n	801c4dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c4cc:	4b36      	ldr	r3, [pc, #216]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d115      	bne.n	801c504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c4d8:	2301      	movs	r3, #1
 801c4da:	e0ea      	b.n	801c6b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	685b      	ldr	r3, [r3, #4]
 801c4e0:	2b01      	cmp	r3, #1
 801c4e2:	d107      	bne.n	801c4f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c4e4:	4b30      	ldr	r3, [pc, #192]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d109      	bne.n	801c504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c4f0:	2301      	movs	r3, #1
 801c4f2:	e0de      	b.n	801c6b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c4f4:	4b2c      	ldr	r3, [pc, #176]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	f003 0304 	and.w	r3, r3, #4
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d101      	bne.n	801c504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c500:	2301      	movs	r3, #1
 801c502:	e0d6      	b.n	801c6b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c504:	4b28      	ldr	r3, [pc, #160]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c506:	691b      	ldr	r3, [r3, #16]
 801c508:	f023 0207 	bic.w	r2, r3, #7
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	685b      	ldr	r3, [r3, #4]
 801c510:	4925      	ldr	r1, [pc, #148]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c512:	4313      	orrs	r3, r2
 801c514:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c516:	f7fc ff75 	bl	8019404 <HAL_GetTick>
 801c51a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c51c:	e00a      	b.n	801c534 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c51e:	f7fc ff71 	bl	8019404 <HAL_GetTick>
 801c522:	4602      	mov	r2, r0
 801c524:	697b      	ldr	r3, [r7, #20]
 801c526:	1ad3      	subs	r3, r2, r3
 801c528:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c52c:	4293      	cmp	r3, r2
 801c52e:	d901      	bls.n	801c534 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801c530:	2303      	movs	r3, #3
 801c532:	e0be      	b.n	801c6b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c534:	4b1c      	ldr	r3, [pc, #112]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c536:	691b      	ldr	r3, [r3, #16]
 801c538:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	685b      	ldr	r3, [r3, #4]
 801c540:	00db      	lsls	r3, r3, #3
 801c542:	429a      	cmp	r2, r3
 801c544:	d1eb      	bne.n	801c51e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	f003 0302 	and.w	r3, r3, #2
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d010      	beq.n	801c574 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	68da      	ldr	r2, [r3, #12]
 801c556:	4b14      	ldr	r3, [pc, #80]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c558:	699b      	ldr	r3, [r3, #24]
 801c55a:	f003 030f 	and.w	r3, r3, #15
 801c55e:	429a      	cmp	r2, r3
 801c560:	d208      	bcs.n	801c574 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c562:	4b11      	ldr	r3, [pc, #68]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c564:	699b      	ldr	r3, [r3, #24]
 801c566:	f023 020f 	bic.w	r2, r3, #15
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	68db      	ldr	r3, [r3, #12]
 801c56e:	490e      	ldr	r1, [pc, #56]	@ (801c5a8 <HAL_RCC_ClockConfig+0x244>)
 801c570:	4313      	orrs	r3, r2
 801c572:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c574:	4b0b      	ldr	r3, [pc, #44]	@ (801c5a4 <HAL_RCC_ClockConfig+0x240>)
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	f003 030f 	and.w	r3, r3, #15
 801c57c:	683a      	ldr	r2, [r7, #0]
 801c57e:	429a      	cmp	r2, r3
 801c580:	d214      	bcs.n	801c5ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c582:	4b08      	ldr	r3, [pc, #32]	@ (801c5a4 <HAL_RCC_ClockConfig+0x240>)
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	f023 020f 	bic.w	r2, r3, #15
 801c58a:	4906      	ldr	r1, [pc, #24]	@ (801c5a4 <HAL_RCC_ClockConfig+0x240>)
 801c58c:	683b      	ldr	r3, [r7, #0]
 801c58e:	4313      	orrs	r3, r2
 801c590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c592:	4b04      	ldr	r3, [pc, #16]	@ (801c5a4 <HAL_RCC_ClockConfig+0x240>)
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	f003 030f 	and.w	r3, r3, #15
 801c59a:	683a      	ldr	r2, [r7, #0]
 801c59c:	429a      	cmp	r2, r3
 801c59e:	d005      	beq.n	801c5ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801c5a0:	2301      	movs	r3, #1
 801c5a2:	e086      	b.n	801c6b2 <HAL_RCC_ClockConfig+0x34e>
 801c5a4:	52002000 	.word	0x52002000
 801c5a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	f003 0304 	and.w	r3, r3, #4
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d010      	beq.n	801c5da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	691a      	ldr	r2, [r3, #16]
 801c5bc:	4b3f      	ldr	r3, [pc, #252]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c5be:	699b      	ldr	r3, [r3, #24]
 801c5c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c5c4:	429a      	cmp	r2, r3
 801c5c6:	d208      	bcs.n	801c5da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c5c8:	4b3c      	ldr	r3, [pc, #240]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c5ca:	699b      	ldr	r3, [r3, #24]
 801c5cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	691b      	ldr	r3, [r3, #16]
 801c5d4:	4939      	ldr	r1, [pc, #228]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c5d6:	4313      	orrs	r3, r2
 801c5d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	f003 0308 	and.w	r3, r3, #8
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d010      	beq.n	801c608 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	695a      	ldr	r2, [r3, #20]
 801c5ea:	4b34      	ldr	r3, [pc, #208]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c5ec:	69db      	ldr	r3, [r3, #28]
 801c5ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c5f2:	429a      	cmp	r2, r3
 801c5f4:	d208      	bcs.n	801c608 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c5f6:	4b31      	ldr	r3, [pc, #196]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c5f8:	69db      	ldr	r3, [r3, #28]
 801c5fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	695b      	ldr	r3, [r3, #20]
 801c602:	492e      	ldr	r1, [pc, #184]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c604:	4313      	orrs	r3, r2
 801c606:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	f003 0310 	and.w	r3, r3, #16
 801c610:	2b00      	cmp	r3, #0
 801c612:	d010      	beq.n	801c636 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	699a      	ldr	r2, [r3, #24]
 801c618:	4b28      	ldr	r3, [pc, #160]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c61a:	69db      	ldr	r3, [r3, #28]
 801c61c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c620:	429a      	cmp	r2, r3
 801c622:	d208      	bcs.n	801c636 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c624:	4b25      	ldr	r3, [pc, #148]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c626:	69db      	ldr	r3, [r3, #28]
 801c628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	699b      	ldr	r3, [r3, #24]
 801c630:	4922      	ldr	r1, [pc, #136]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c632:	4313      	orrs	r3, r2
 801c634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	f003 0320 	and.w	r3, r3, #32
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d010      	beq.n	801c664 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	69da      	ldr	r2, [r3, #28]
 801c646:	4b1d      	ldr	r3, [pc, #116]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c648:	6a1b      	ldr	r3, [r3, #32]
 801c64a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c64e:	429a      	cmp	r2, r3
 801c650:	d208      	bcs.n	801c664 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c652:	4b1a      	ldr	r3, [pc, #104]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c654:	6a1b      	ldr	r3, [r3, #32]
 801c656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	69db      	ldr	r3, [r3, #28]
 801c65e:	4917      	ldr	r1, [pc, #92]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c660:	4313      	orrs	r3, r2
 801c662:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801c664:	f000 f834 	bl	801c6d0 <HAL_RCC_GetSysClockFreq>
 801c668:	4602      	mov	r2, r0
 801c66a:	4b14      	ldr	r3, [pc, #80]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c66c:	699b      	ldr	r3, [r3, #24]
 801c66e:	0a1b      	lsrs	r3, r3, #8
 801c670:	f003 030f 	and.w	r3, r3, #15
 801c674:	4912      	ldr	r1, [pc, #72]	@ (801c6c0 <HAL_RCC_ClockConfig+0x35c>)
 801c676:	5ccb      	ldrb	r3, [r1, r3]
 801c678:	f003 031f 	and.w	r3, r3, #31
 801c67c:	fa22 f303 	lsr.w	r3, r2, r3
 801c680:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c682:	4b0e      	ldr	r3, [pc, #56]	@ (801c6bc <HAL_RCC_ClockConfig+0x358>)
 801c684:	699b      	ldr	r3, [r3, #24]
 801c686:	f003 030f 	and.w	r3, r3, #15
 801c68a:	4a0d      	ldr	r2, [pc, #52]	@ (801c6c0 <HAL_RCC_ClockConfig+0x35c>)
 801c68c:	5cd3      	ldrb	r3, [r2, r3]
 801c68e:	f003 031f 	and.w	r3, r3, #31
 801c692:	693a      	ldr	r2, [r7, #16]
 801c694:	fa22 f303 	lsr.w	r3, r2, r3
 801c698:	4a0a      	ldr	r2, [pc, #40]	@ (801c6c4 <HAL_RCC_ClockConfig+0x360>)
 801c69a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c69c:	4a0a      	ldr	r2, [pc, #40]	@ (801c6c8 <HAL_RCC_ClockConfig+0x364>)
 801c69e:	693b      	ldr	r3, [r7, #16]
 801c6a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801c6a2:	4b0a      	ldr	r3, [pc, #40]	@ (801c6cc <HAL_RCC_ClockConfig+0x368>)
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	4618      	mov	r0, r3
 801c6a8:	f7fc f9aa 	bl	8018a00 <HAL_InitTick>
 801c6ac:	4603      	mov	r3, r0
 801c6ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801c6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	3718      	adds	r7, #24
 801c6b6:	46bd      	mov	sp, r7
 801c6b8:	bd80      	pop	{r7, pc}
 801c6ba:	bf00      	nop
 801c6bc:	58024400 	.word	0x58024400
 801c6c0:	0802644c 	.word	0x0802644c
 801c6c4:	240148dc 	.word	0x240148dc
 801c6c8:	240148d8 	.word	0x240148d8
 801c6cc:	240149e4 	.word	0x240149e4

0801c6d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c6d0:	b480      	push	{r7}
 801c6d2:	b089      	sub	sp, #36	@ 0x24
 801c6d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c6d6:	4bb3      	ldr	r3, [pc, #716]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c6d8:	691b      	ldr	r3, [r3, #16]
 801c6da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c6de:	2b18      	cmp	r3, #24
 801c6e0:	f200 8155 	bhi.w	801c98e <HAL_RCC_GetSysClockFreq+0x2be>
 801c6e4:	a201      	add	r2, pc, #4	@ (adr r2, 801c6ec <HAL_RCC_GetSysClockFreq+0x1c>)
 801c6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6ea:	bf00      	nop
 801c6ec:	0801c751 	.word	0x0801c751
 801c6f0:	0801c98f 	.word	0x0801c98f
 801c6f4:	0801c98f 	.word	0x0801c98f
 801c6f8:	0801c98f 	.word	0x0801c98f
 801c6fc:	0801c98f 	.word	0x0801c98f
 801c700:	0801c98f 	.word	0x0801c98f
 801c704:	0801c98f 	.word	0x0801c98f
 801c708:	0801c98f 	.word	0x0801c98f
 801c70c:	0801c777 	.word	0x0801c777
 801c710:	0801c98f 	.word	0x0801c98f
 801c714:	0801c98f 	.word	0x0801c98f
 801c718:	0801c98f 	.word	0x0801c98f
 801c71c:	0801c98f 	.word	0x0801c98f
 801c720:	0801c98f 	.word	0x0801c98f
 801c724:	0801c98f 	.word	0x0801c98f
 801c728:	0801c98f 	.word	0x0801c98f
 801c72c:	0801c77d 	.word	0x0801c77d
 801c730:	0801c98f 	.word	0x0801c98f
 801c734:	0801c98f 	.word	0x0801c98f
 801c738:	0801c98f 	.word	0x0801c98f
 801c73c:	0801c98f 	.word	0x0801c98f
 801c740:	0801c98f 	.word	0x0801c98f
 801c744:	0801c98f 	.word	0x0801c98f
 801c748:	0801c98f 	.word	0x0801c98f
 801c74c:	0801c783 	.word	0x0801c783
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c750:	4b94      	ldr	r3, [pc, #592]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	f003 0320 	and.w	r3, r3, #32
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d009      	beq.n	801c770 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c75c:	4b91      	ldr	r3, [pc, #580]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	08db      	lsrs	r3, r3, #3
 801c762:	f003 0303 	and.w	r3, r3, #3
 801c766:	4a90      	ldr	r2, [pc, #576]	@ (801c9a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c768:	fa22 f303 	lsr.w	r3, r2, r3
 801c76c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801c76e:	e111      	b.n	801c994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801c770:	4b8d      	ldr	r3, [pc, #564]	@ (801c9a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c772:	61bb      	str	r3, [r7, #24]
      break;
 801c774:	e10e      	b.n	801c994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801c776:	4b8d      	ldr	r3, [pc, #564]	@ (801c9ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c778:	61bb      	str	r3, [r7, #24]
      break;
 801c77a:	e10b      	b.n	801c994 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801c77c:	4b8c      	ldr	r3, [pc, #560]	@ (801c9b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801c77e:	61bb      	str	r3, [r7, #24]
      break;
 801c780:	e108      	b.n	801c994 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801c782:	4b88      	ldr	r3, [pc, #544]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c786:	f003 0303 	and.w	r3, r3, #3
 801c78a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801c78c:	4b85      	ldr	r3, [pc, #532]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c790:	091b      	lsrs	r3, r3, #4
 801c792:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c796:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801c798:	4b82      	ldr	r3, [pc, #520]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c79c:	f003 0301 	and.w	r3, r3, #1
 801c7a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801c7a2:	4b80      	ldr	r3, [pc, #512]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c7a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c7a6:	08db      	lsrs	r3, r3, #3
 801c7a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c7ac:	68fa      	ldr	r2, [r7, #12]
 801c7ae:	fb02 f303 	mul.w	r3, r2, r3
 801c7b2:	ee07 3a90 	vmov	s15, r3
 801c7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c7ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801c7be:	693b      	ldr	r3, [r7, #16]
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	f000 80e1 	beq.w	801c988 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 801c7c6:	697b      	ldr	r3, [r7, #20]
 801c7c8:	2b02      	cmp	r3, #2
 801c7ca:	f000 8083 	beq.w	801c8d4 <HAL_RCC_GetSysClockFreq+0x204>
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	2b02      	cmp	r3, #2
 801c7d2:	f200 80a1 	bhi.w	801c918 <HAL_RCC_GetSysClockFreq+0x248>
 801c7d6:	697b      	ldr	r3, [r7, #20]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d003      	beq.n	801c7e4 <HAL_RCC_GetSysClockFreq+0x114>
 801c7dc:	697b      	ldr	r3, [r7, #20]
 801c7de:	2b01      	cmp	r3, #1
 801c7e0:	d056      	beq.n	801c890 <HAL_RCC_GetSysClockFreq+0x1c0>
 801c7e2:	e099      	b.n	801c918 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c7e4:	4b6f      	ldr	r3, [pc, #444]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	f003 0320 	and.w	r3, r3, #32
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d02d      	beq.n	801c84c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c7f0:	4b6c      	ldr	r3, [pc, #432]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c7f2:	681b      	ldr	r3, [r3, #0]
 801c7f4:	08db      	lsrs	r3, r3, #3
 801c7f6:	f003 0303 	and.w	r3, r3, #3
 801c7fa:	4a6b      	ldr	r2, [pc, #428]	@ (801c9a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c7fc:	fa22 f303 	lsr.w	r3, r2, r3
 801c800:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	ee07 3a90 	vmov	s15, r3
 801c808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c80c:	693b      	ldr	r3, [r7, #16]
 801c80e:	ee07 3a90 	vmov	s15, r3
 801c812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c81a:	4b62      	ldr	r3, [pc, #392]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c81c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c822:	ee07 3a90 	vmov	s15, r3
 801c826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c82a:	ed97 6a02 	vldr	s12, [r7, #8]
 801c82e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801c9b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c83a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c842:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c846:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801c84a:	e087      	b.n	801c95c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c84c:	693b      	ldr	r3, [r7, #16]
 801c84e:	ee07 3a90 	vmov	s15, r3
 801c852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c856:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801c9b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 801c85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c85e:	4b51      	ldr	r3, [pc, #324]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c866:	ee07 3a90 	vmov	s15, r3
 801c86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c86e:	ed97 6a02 	vldr	s12, [r7, #8]
 801c872:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801c9b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c87e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c886:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c88a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c88e:	e065      	b.n	801c95c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c890:	693b      	ldr	r3, [r7, #16]
 801c892:	ee07 3a90 	vmov	s15, r3
 801c896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c89a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801c9bc <HAL_RCC_GetSysClockFreq+0x2ec>
 801c89e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c8a2:	4b40      	ldr	r3, [pc, #256]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c8a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c8aa:	ee07 3a90 	vmov	s15, r3
 801c8ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c8b2:	ed97 6a02 	vldr	s12, [r7, #8]
 801c8b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801c9b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c8ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c8be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c8c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c8c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c8ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c8d2:	e043      	b.n	801c95c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c8d4:	693b      	ldr	r3, [r7, #16]
 801c8d6:	ee07 3a90 	vmov	s15, r3
 801c8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c8de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801c9c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 801c8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c8e6:	4b2f      	ldr	r3, [pc, #188]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c8ee:	ee07 3a90 	vmov	s15, r3
 801c8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c8f6:	ed97 6a02 	vldr	s12, [r7, #8]
 801c8fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801c9b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c916:	e021      	b.n	801c95c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c918:	693b      	ldr	r3, [r7, #16]
 801c91a:	ee07 3a90 	vmov	s15, r3
 801c91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c922:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801c9bc <HAL_RCC_GetSysClockFreq+0x2ec>
 801c926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c92a:	4b1e      	ldr	r3, [pc, #120]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c92c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c932:	ee07 3a90 	vmov	s15, r3
 801c936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c93a:	ed97 6a02 	vldr	s12, [r7, #8]
 801c93e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801c9b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c94a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c952:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c95a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801c95c:	4b11      	ldr	r3, [pc, #68]	@ (801c9a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c960:	0a5b      	lsrs	r3, r3, #9
 801c962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c966:	3301      	adds	r3, #1
 801c968:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801c96a:	683b      	ldr	r3, [r7, #0]
 801c96c:	ee07 3a90 	vmov	s15, r3
 801c970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c974:	edd7 6a07 	vldr	s13, [r7, #28]
 801c978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c97c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c980:	ee17 3a90 	vmov	r3, s15
 801c984:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801c986:	e005      	b.n	801c994 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801c988:	2300      	movs	r3, #0
 801c98a:	61bb      	str	r3, [r7, #24]
      break;
 801c98c:	e002      	b.n	801c994 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801c98e:	4b07      	ldr	r3, [pc, #28]	@ (801c9ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c990:	61bb      	str	r3, [r7, #24]
      break;
 801c992:	bf00      	nop
  }

  return sysclockfreq;
 801c994:	69bb      	ldr	r3, [r7, #24]
}
 801c996:	4618      	mov	r0, r3
 801c998:	3724      	adds	r7, #36	@ 0x24
 801c99a:	46bd      	mov	sp, r7
 801c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9a0:	4770      	bx	lr
 801c9a2:	bf00      	nop
 801c9a4:	58024400 	.word	0x58024400
 801c9a8:	03d09000 	.word	0x03d09000
 801c9ac:	003d0900 	.word	0x003d0900
 801c9b0:	017d7840 	.word	0x017d7840
 801c9b4:	46000000 	.word	0x46000000
 801c9b8:	4c742400 	.word	0x4c742400
 801c9bc:	4a742400 	.word	0x4a742400
 801c9c0:	4bbebc20 	.word	0x4bbebc20

0801c9c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c9c4:	b580      	push	{r7, lr}
 801c9c6:	b082      	sub	sp, #8
 801c9c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801c9ca:	f7ff fe81 	bl	801c6d0 <HAL_RCC_GetSysClockFreq>
 801c9ce:	4602      	mov	r2, r0
 801c9d0:	4b10      	ldr	r3, [pc, #64]	@ (801ca14 <HAL_RCC_GetHCLKFreq+0x50>)
 801c9d2:	699b      	ldr	r3, [r3, #24]
 801c9d4:	0a1b      	lsrs	r3, r3, #8
 801c9d6:	f003 030f 	and.w	r3, r3, #15
 801c9da:	490f      	ldr	r1, [pc, #60]	@ (801ca18 <HAL_RCC_GetHCLKFreq+0x54>)
 801c9dc:	5ccb      	ldrb	r3, [r1, r3]
 801c9de:	f003 031f 	and.w	r3, r3, #31
 801c9e2:	fa22 f303 	lsr.w	r3, r2, r3
 801c9e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c9e8:	4b0a      	ldr	r3, [pc, #40]	@ (801ca14 <HAL_RCC_GetHCLKFreq+0x50>)
 801c9ea:	699b      	ldr	r3, [r3, #24]
 801c9ec:	f003 030f 	and.w	r3, r3, #15
 801c9f0:	4a09      	ldr	r2, [pc, #36]	@ (801ca18 <HAL_RCC_GetHCLKFreq+0x54>)
 801c9f2:	5cd3      	ldrb	r3, [r2, r3]
 801c9f4:	f003 031f 	and.w	r3, r3, #31
 801c9f8:	687a      	ldr	r2, [r7, #4]
 801c9fa:	fa22 f303 	lsr.w	r3, r2, r3
 801c9fe:	4a07      	ldr	r2, [pc, #28]	@ (801ca1c <HAL_RCC_GetHCLKFreq+0x58>)
 801ca00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801ca02:	4a07      	ldr	r2, [pc, #28]	@ (801ca20 <HAL_RCC_GetHCLKFreq+0x5c>)
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801ca08:	4b04      	ldr	r3, [pc, #16]	@ (801ca1c <HAL_RCC_GetHCLKFreq+0x58>)
 801ca0a:	681b      	ldr	r3, [r3, #0]
}
 801ca0c:	4618      	mov	r0, r3
 801ca0e:	3708      	adds	r7, #8
 801ca10:	46bd      	mov	sp, r7
 801ca12:	bd80      	pop	{r7, pc}
 801ca14:	58024400 	.word	0x58024400
 801ca18:	0802644c 	.word	0x0802644c
 801ca1c:	240148dc 	.word	0x240148dc
 801ca20:	240148d8 	.word	0x240148d8

0801ca24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801ca24:	b580      	push	{r7, lr}
 801ca26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801ca28:	f7ff ffcc 	bl	801c9c4 <HAL_RCC_GetHCLKFreq>
 801ca2c:	4602      	mov	r2, r0
 801ca2e:	4b06      	ldr	r3, [pc, #24]	@ (801ca48 <HAL_RCC_GetPCLK1Freq+0x24>)
 801ca30:	69db      	ldr	r3, [r3, #28]
 801ca32:	091b      	lsrs	r3, r3, #4
 801ca34:	f003 0307 	and.w	r3, r3, #7
 801ca38:	4904      	ldr	r1, [pc, #16]	@ (801ca4c <HAL_RCC_GetPCLK1Freq+0x28>)
 801ca3a:	5ccb      	ldrb	r3, [r1, r3]
 801ca3c:	f003 031f 	and.w	r3, r3, #31
 801ca40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801ca44:	4618      	mov	r0, r3
 801ca46:	bd80      	pop	{r7, pc}
 801ca48:	58024400 	.word	0x58024400
 801ca4c:	0802644c 	.word	0x0802644c

0801ca50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801ca50:	b480      	push	{r7}
 801ca52:	b083      	sub	sp, #12
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]
 801ca58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	223f      	movs	r2, #63	@ 0x3f
 801ca5e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801ca60:	4b1a      	ldr	r3, [pc, #104]	@ (801cacc <HAL_RCC_GetClockConfig+0x7c>)
 801ca62:	691b      	ldr	r3, [r3, #16]
 801ca64:	f003 0207 	and.w	r2, r3, #7
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801ca6c:	4b17      	ldr	r3, [pc, #92]	@ (801cacc <HAL_RCC_GetClockConfig+0x7c>)
 801ca6e:	699b      	ldr	r3, [r3, #24]
 801ca70:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801ca78:	4b14      	ldr	r3, [pc, #80]	@ (801cacc <HAL_RCC_GetClockConfig+0x7c>)
 801ca7a:	699b      	ldr	r3, [r3, #24]
 801ca7c:	f003 020f 	and.w	r2, r3, #15
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801ca84:	4b11      	ldr	r3, [pc, #68]	@ (801cacc <HAL_RCC_GetClockConfig+0x7c>)
 801ca86:	699b      	ldr	r3, [r3, #24]
 801ca88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 801ca90:	4b0e      	ldr	r3, [pc, #56]	@ (801cacc <HAL_RCC_GetClockConfig+0x7c>)
 801ca92:	69db      	ldr	r3, [r3, #28]
 801ca94:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801ca9c:	4b0b      	ldr	r3, [pc, #44]	@ (801cacc <HAL_RCC_GetClockConfig+0x7c>)
 801ca9e:	69db      	ldr	r3, [r3, #28]
 801caa0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801caa8:	4b08      	ldr	r3, [pc, #32]	@ (801cacc <HAL_RCC_GetClockConfig+0x7c>)
 801caaa:	6a1b      	ldr	r3, [r3, #32]
 801caac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801cab4:	4b06      	ldr	r3, [pc, #24]	@ (801cad0 <HAL_RCC_GetClockConfig+0x80>)
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	f003 020f 	and.w	r2, r3, #15
 801cabc:	683b      	ldr	r3, [r7, #0]
 801cabe:	601a      	str	r2, [r3, #0]
}
 801cac0:	bf00      	nop
 801cac2:	370c      	adds	r7, #12
 801cac4:	46bd      	mov	sp, r7
 801cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caca:	4770      	bx	lr
 801cacc:	58024400 	.word	0x58024400
 801cad0:	52002000 	.word	0x52002000

0801cad4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801cad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cad8:	b0ca      	sub	sp, #296	@ 0x128
 801cada:	af00      	add	r7, sp, #0
 801cadc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801cae0:	2300      	movs	r3, #0
 801cae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801cae6:	2300      	movs	r3, #0
 801cae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801caec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801caf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caf4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801caf8:	2500      	movs	r5, #0
 801cafa:	ea54 0305 	orrs.w	r3, r4, r5
 801cafe:	d049      	beq.n	801cb94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801cb00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cb06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801cb0a:	d02f      	beq.n	801cb6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 801cb0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801cb10:	d828      	bhi.n	801cb64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801cb12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801cb16:	d01a      	beq.n	801cb4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801cb18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801cb1c:	d822      	bhi.n	801cb64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d003      	beq.n	801cb2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 801cb22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801cb26:	d007      	beq.n	801cb38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801cb28:	e01c      	b.n	801cb64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cb2a:	4bb8      	ldr	r3, [pc, #736]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb2e:	4ab7      	ldr	r2, [pc, #732]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cb30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cb34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801cb36:	e01a      	b.n	801cb6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cb38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb3c:	3308      	adds	r3, #8
 801cb3e:	2102      	movs	r1, #2
 801cb40:	4618      	mov	r0, r3
 801cb42:	f002 fb61 	bl	801f208 <RCCEx_PLL2_Config>
 801cb46:	4603      	mov	r3, r0
 801cb48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801cb4c:	e00f      	b.n	801cb6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb52:	3328      	adds	r3, #40	@ 0x28
 801cb54:	2102      	movs	r1, #2
 801cb56:	4618      	mov	r0, r3
 801cb58:	f002 fc08 	bl	801f36c <RCCEx_PLL3_Config>
 801cb5c:	4603      	mov	r3, r0
 801cb5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801cb62:	e004      	b.n	801cb6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cb64:	2301      	movs	r3, #1
 801cb66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cb6a:	e000      	b.n	801cb6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801cb6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cb6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d10a      	bne.n	801cb8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801cb76:	4ba5      	ldr	r3, [pc, #660]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cb78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cb7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801cb7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cb84:	4aa1      	ldr	r2, [pc, #644]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cb86:	430b      	orrs	r3, r1
 801cb88:	6513      	str	r3, [r2, #80]	@ 0x50
 801cb8a:	e003      	b.n	801cb94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cb90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801cb94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb9c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801cba0:	f04f 0900 	mov.w	r9, #0
 801cba4:	ea58 0309 	orrs.w	r3, r8, r9
 801cba8:	d047      	beq.n	801cc3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801cbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cbb0:	2b04      	cmp	r3, #4
 801cbb2:	d82a      	bhi.n	801cc0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 801cbb4:	a201      	add	r2, pc, #4	@ (adr r2, 801cbbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801cbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cbba:	bf00      	nop
 801cbbc:	0801cbd1 	.word	0x0801cbd1
 801cbc0:	0801cbdf 	.word	0x0801cbdf
 801cbc4:	0801cbf5 	.word	0x0801cbf5
 801cbc8:	0801cc13 	.word	0x0801cc13
 801cbcc:	0801cc13 	.word	0x0801cc13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cbd0:	4b8e      	ldr	r3, [pc, #568]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cbd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cbd4:	4a8d      	ldr	r2, [pc, #564]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cbd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cbda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cbdc:	e01a      	b.n	801cc14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cbde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbe2:	3308      	adds	r3, #8
 801cbe4:	2100      	movs	r1, #0
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	f002 fb0e 	bl	801f208 <RCCEx_PLL2_Config>
 801cbec:	4603      	mov	r3, r0
 801cbee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cbf2:	e00f      	b.n	801cc14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbf8:	3328      	adds	r3, #40	@ 0x28
 801cbfa:	2100      	movs	r1, #0
 801cbfc:	4618      	mov	r0, r3
 801cbfe:	f002 fbb5 	bl	801f36c <RCCEx_PLL3_Config>
 801cc02:	4603      	mov	r3, r0
 801cc04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cc08:	e004      	b.n	801cc14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cc0a:	2301      	movs	r3, #1
 801cc0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cc10:	e000      	b.n	801cc14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801cc12:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cc14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d10a      	bne.n	801cc32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801cc1c:	4b7b      	ldr	r3, [pc, #492]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cc1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cc20:	f023 0107 	bic.w	r1, r3, #7
 801cc24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cc2a:	4a78      	ldr	r2, [pc, #480]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cc2c:	430b      	orrs	r3, r1
 801cc2e:	6513      	str	r3, [r2, #80]	@ 0x50
 801cc30:	e003      	b.n	801cc3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cc36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801cc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc42:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801cc46:	f04f 0b00 	mov.w	fp, #0
 801cc4a:	ea5a 030b 	orrs.w	r3, sl, fp
 801cc4e:	d04c      	beq.n	801ccea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801cc50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cc56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cc5a:	d030      	beq.n	801ccbe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801cc5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cc60:	d829      	bhi.n	801ccb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801cc62:	2bc0      	cmp	r3, #192	@ 0xc0
 801cc64:	d02d      	beq.n	801ccc2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801cc66:	2bc0      	cmp	r3, #192	@ 0xc0
 801cc68:	d825      	bhi.n	801ccb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801cc6a:	2b80      	cmp	r3, #128	@ 0x80
 801cc6c:	d018      	beq.n	801cca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801cc6e:	2b80      	cmp	r3, #128	@ 0x80
 801cc70:	d821      	bhi.n	801ccb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d002      	beq.n	801cc7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801cc76:	2b40      	cmp	r3, #64	@ 0x40
 801cc78:	d007      	beq.n	801cc8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801cc7a:	e01c      	b.n	801ccb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cc7c:	4b63      	ldr	r3, [pc, #396]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc80:	4a62      	ldr	r2, [pc, #392]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cc82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cc86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801cc88:	e01c      	b.n	801ccc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cc8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc8e:	3308      	adds	r3, #8
 801cc90:	2100      	movs	r1, #0
 801cc92:	4618      	mov	r0, r3
 801cc94:	f002 fab8 	bl	801f208 <RCCEx_PLL2_Config>
 801cc98:	4603      	mov	r3, r0
 801cc9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801cc9e:	e011      	b.n	801ccc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cca4:	3328      	adds	r3, #40	@ 0x28
 801cca6:	2100      	movs	r1, #0
 801cca8:	4618      	mov	r0, r3
 801ccaa:	f002 fb5f 	bl	801f36c <RCCEx_PLL3_Config>
 801ccae:	4603      	mov	r3, r0
 801ccb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801ccb4:	e006      	b.n	801ccc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ccb6:	2301      	movs	r3, #1
 801ccb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ccbc:	e002      	b.n	801ccc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801ccbe:	bf00      	nop
 801ccc0:	e000      	b.n	801ccc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801ccc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ccc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d10a      	bne.n	801cce2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801cccc:	4b4f      	ldr	r3, [pc, #316]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ccce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ccd0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801ccd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ccda:	4a4c      	ldr	r2, [pc, #304]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ccdc:	430b      	orrs	r3, r1
 801ccde:	6513      	str	r3, [r2, #80]	@ 0x50
 801cce0:	e003      	b.n	801ccea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801ccea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccf2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801ccf6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801ccfa:	2300      	movs	r3, #0
 801ccfc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801cd00:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801cd04:	460b      	mov	r3, r1
 801cd06:	4313      	orrs	r3, r2
 801cd08:	d053      	beq.n	801cdb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801cd0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801cd12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cd16:	d035      	beq.n	801cd84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801cd18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cd1c:	d82e      	bhi.n	801cd7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801cd1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801cd22:	d031      	beq.n	801cd88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801cd24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801cd28:	d828      	bhi.n	801cd7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801cd2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801cd2e:	d01a      	beq.n	801cd66 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801cd30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801cd34:	d822      	bhi.n	801cd7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d003      	beq.n	801cd42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801cd3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801cd3e:	d007      	beq.n	801cd50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801cd40:	e01c      	b.n	801cd7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cd42:	4b32      	ldr	r3, [pc, #200]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd46:	4a31      	ldr	r2, [pc, #196]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cd48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cd4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cd4e:	e01c      	b.n	801cd8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cd50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd54:	3308      	adds	r3, #8
 801cd56:	2100      	movs	r1, #0
 801cd58:	4618      	mov	r0, r3
 801cd5a:	f002 fa55 	bl	801f208 <RCCEx_PLL2_Config>
 801cd5e:	4603      	mov	r3, r0
 801cd60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801cd64:	e011      	b.n	801cd8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cd66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd6a:	3328      	adds	r3, #40	@ 0x28
 801cd6c:	2100      	movs	r1, #0
 801cd6e:	4618      	mov	r0, r3
 801cd70:	f002 fafc 	bl	801f36c <RCCEx_PLL3_Config>
 801cd74:	4603      	mov	r3, r0
 801cd76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cd7a:	e006      	b.n	801cd8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801cd7c:	2301      	movs	r3, #1
 801cd7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cd82:	e002      	b.n	801cd8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801cd84:	bf00      	nop
 801cd86:	e000      	b.n	801cd8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801cd88:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	d10b      	bne.n	801cdaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801cd92:	4b1e      	ldr	r3, [pc, #120]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cd94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cd96:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801cd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801cda2:	4a1a      	ldr	r2, [pc, #104]	@ (801ce0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cda4:	430b      	orrs	r3, r1
 801cda6:	6593      	str	r3, [r2, #88]	@ 0x58
 801cda8:	e003      	b.n	801cdb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cdaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cdae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801cdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801cdbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801cdc8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801cdcc:	460b      	mov	r3, r1
 801cdce:	4313      	orrs	r3, r2
 801cdd0:	d056      	beq.n	801ce80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801cdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cdd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801cdda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801cdde:	d038      	beq.n	801ce52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801cde0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801cde4:	d831      	bhi.n	801ce4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801cde6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801cdea:	d034      	beq.n	801ce56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801cdec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801cdf0:	d82b      	bhi.n	801ce4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801cdf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801cdf6:	d01d      	beq.n	801ce34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801cdf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801cdfc:	d825      	bhi.n	801ce4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d006      	beq.n	801ce10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801ce02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ce06:	d00a      	beq.n	801ce1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801ce08:	e01f      	b.n	801ce4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801ce0a:	bf00      	nop
 801ce0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ce10:	4ba2      	ldr	r3, [pc, #648]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ce12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce14:	4aa1      	ldr	r2, [pc, #644]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ce16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ce1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801ce1c:	e01c      	b.n	801ce58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ce1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce22:	3308      	adds	r3, #8
 801ce24:	2100      	movs	r1, #0
 801ce26:	4618      	mov	r0, r3
 801ce28:	f002 f9ee 	bl	801f208 <RCCEx_PLL2_Config>
 801ce2c:	4603      	mov	r3, r0
 801ce2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801ce32:	e011      	b.n	801ce58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801ce34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce38:	3328      	adds	r3, #40	@ 0x28
 801ce3a:	2100      	movs	r1, #0
 801ce3c:	4618      	mov	r0, r3
 801ce3e:	f002 fa95 	bl	801f36c <RCCEx_PLL3_Config>
 801ce42:	4603      	mov	r3, r0
 801ce44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801ce48:	e006      	b.n	801ce58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801ce4a:	2301      	movs	r3, #1
 801ce4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ce50:	e002      	b.n	801ce58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801ce52:	bf00      	nop
 801ce54:	e000      	b.n	801ce58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801ce56:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ce58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	d10b      	bne.n	801ce78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801ce60:	4b8e      	ldr	r3, [pc, #568]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ce62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ce64:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801ce68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801ce70:	4a8a      	ldr	r2, [pc, #552]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ce72:	430b      	orrs	r3, r1
 801ce74:	6593      	str	r3, [r2, #88]	@ 0x58
 801ce76:	e003      	b.n	801ce80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ce7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801ce80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce88:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801ce8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801ce90:	2300      	movs	r3, #0
 801ce92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801ce96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801ce9a:	460b      	mov	r3, r1
 801ce9c:	4313      	orrs	r3, r2
 801ce9e:	d03a      	beq.n	801cf16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801cea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cea6:	2b30      	cmp	r3, #48	@ 0x30
 801cea8:	d01f      	beq.n	801ceea <HAL_RCCEx_PeriphCLKConfig+0x416>
 801ceaa:	2b30      	cmp	r3, #48	@ 0x30
 801ceac:	d819      	bhi.n	801cee2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801ceae:	2b20      	cmp	r3, #32
 801ceb0:	d00c      	beq.n	801cecc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801ceb2:	2b20      	cmp	r3, #32
 801ceb4:	d815      	bhi.n	801cee2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d019      	beq.n	801ceee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801ceba:	2b10      	cmp	r3, #16
 801cebc:	d111      	bne.n	801cee2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cebe:	4b77      	ldr	r3, [pc, #476]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cec2:	4a76      	ldr	r2, [pc, #472]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801ceca:	e011      	b.n	801cef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ced0:	3308      	adds	r3, #8
 801ced2:	2102      	movs	r1, #2
 801ced4:	4618      	mov	r0, r3
 801ced6:	f002 f997 	bl	801f208 <RCCEx_PLL2_Config>
 801ceda:	4603      	mov	r3, r0
 801cedc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801cee0:	e006      	b.n	801cef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801cee2:	2301      	movs	r3, #1
 801cee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cee8:	e002      	b.n	801cef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801ceea:	bf00      	nop
 801ceec:	e000      	b.n	801cef0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801ceee:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d10a      	bne.n	801cf0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801cef8:	4b68      	ldr	r3, [pc, #416]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cefa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cefc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801cf00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cf06:	4a65      	ldr	r2, [pc, #404]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cf08:	430b      	orrs	r3, r1
 801cf0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801cf0c:	e003      	b.n	801cf16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cf12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801cf16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf1e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801cf22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801cf26:	2300      	movs	r3, #0
 801cf28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801cf2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801cf30:	460b      	mov	r3, r1
 801cf32:	4313      	orrs	r3, r2
 801cf34:	d051      	beq.n	801cfda <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801cf36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cf3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801cf40:	d035      	beq.n	801cfae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801cf42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801cf46:	d82e      	bhi.n	801cfa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801cf48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801cf4c:	d031      	beq.n	801cfb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801cf4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801cf52:	d828      	bhi.n	801cfa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801cf54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801cf58:	d01a      	beq.n	801cf90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801cf5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801cf5e:	d822      	bhi.n	801cfa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801cf60:	2b00      	cmp	r3, #0
 801cf62:	d003      	beq.n	801cf6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 801cf64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801cf68:	d007      	beq.n	801cf7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801cf6a:	e01c      	b.n	801cfa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cf6c:	4b4b      	ldr	r3, [pc, #300]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cf6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cf70:	4a4a      	ldr	r2, [pc, #296]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cf72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cf76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801cf78:	e01c      	b.n	801cfb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cf7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf7e:	3308      	adds	r3, #8
 801cf80:	2100      	movs	r1, #0
 801cf82:	4618      	mov	r0, r3
 801cf84:	f002 f940 	bl	801f208 <RCCEx_PLL2_Config>
 801cf88:	4603      	mov	r3, r0
 801cf8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801cf8e:	e011      	b.n	801cfb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cf90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf94:	3328      	adds	r3, #40	@ 0x28
 801cf96:	2100      	movs	r1, #0
 801cf98:	4618      	mov	r0, r3
 801cf9a:	f002 f9e7 	bl	801f36c <RCCEx_PLL3_Config>
 801cf9e:	4603      	mov	r3, r0
 801cfa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801cfa4:	e006      	b.n	801cfb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cfa6:	2301      	movs	r3, #1
 801cfa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cfac:	e002      	b.n	801cfb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801cfae:	bf00      	nop
 801cfb0:	e000      	b.n	801cfb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801cfb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cfb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d10a      	bne.n	801cfd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801cfbc:	4b37      	ldr	r3, [pc, #220]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cfbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cfc0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801cfc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cfca:	4a34      	ldr	r2, [pc, #208]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cfcc:	430b      	orrs	r3, r1
 801cfce:	6513      	str	r3, [r2, #80]	@ 0x50
 801cfd0:	e003      	b.n	801cfda <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cfd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cfd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801cfda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfe2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801cfe6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801cfea:	2300      	movs	r3, #0
 801cfec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801cff0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801cff4:	460b      	mov	r3, r1
 801cff6:	4313      	orrs	r3, r2
 801cff8:	d056      	beq.n	801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801cffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cffe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d004:	d033      	beq.n	801d06e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801d006:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d00a:	d82c      	bhi.n	801d066 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d00c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d010:	d02f      	beq.n	801d072 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801d012:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d016:	d826      	bhi.n	801d066 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d018:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d01c:	d02b      	beq.n	801d076 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801d01e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d022:	d820      	bhi.n	801d066 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d024:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d028:	d012      	beq.n	801d050 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801d02a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d02e:	d81a      	bhi.n	801d066 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d030:	2b00      	cmp	r3, #0
 801d032:	d022      	beq.n	801d07a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801d034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d038:	d115      	bne.n	801d066 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d03e:	3308      	adds	r3, #8
 801d040:	2101      	movs	r1, #1
 801d042:	4618      	mov	r0, r3
 801d044:	f002 f8e0 	bl	801f208 <RCCEx_PLL2_Config>
 801d048:	4603      	mov	r3, r0
 801d04a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d04e:	e015      	b.n	801d07c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d054:	3328      	adds	r3, #40	@ 0x28
 801d056:	2101      	movs	r1, #1
 801d058:	4618      	mov	r0, r3
 801d05a:	f002 f987 	bl	801f36c <RCCEx_PLL3_Config>
 801d05e:	4603      	mov	r3, r0
 801d060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d064:	e00a      	b.n	801d07c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d066:	2301      	movs	r3, #1
 801d068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d06c:	e006      	b.n	801d07c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d06e:	bf00      	nop
 801d070:	e004      	b.n	801d07c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d072:	bf00      	nop
 801d074:	e002      	b.n	801d07c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d076:	bf00      	nop
 801d078:	e000      	b.n	801d07c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d07a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d07c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d080:	2b00      	cmp	r3, #0
 801d082:	d10d      	bne.n	801d0a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801d084:	4b05      	ldr	r3, [pc, #20]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d088:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801d08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d092:	4a02      	ldr	r2, [pc, #8]	@ (801d09c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d094:	430b      	orrs	r3, r1
 801d096:	6513      	str	r3, [r2, #80]	@ 0x50
 801d098:	e006      	b.n	801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801d09a:	bf00      	nop
 801d09c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d0a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d0a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801d0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0b0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801d0b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801d0b8:	2300      	movs	r3, #0
 801d0ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801d0be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801d0c2:	460b      	mov	r3, r1
 801d0c4:	4313      	orrs	r3, r2
 801d0c6:	d055      	beq.n	801d174 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801d0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d0d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d0d4:	d033      	beq.n	801d13e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801d0d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d0da:	d82c      	bhi.n	801d136 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d0dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d0e0:	d02f      	beq.n	801d142 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801d0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d0e6:	d826      	bhi.n	801d136 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d0e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d0ec:	d02b      	beq.n	801d146 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801d0ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d0f2:	d820      	bhi.n	801d136 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d0f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d0f8:	d012      	beq.n	801d120 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801d0fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d0fe:	d81a      	bhi.n	801d136 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d100:	2b00      	cmp	r3, #0
 801d102:	d022      	beq.n	801d14a <HAL_RCCEx_PeriphCLKConfig+0x676>
 801d104:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d108:	d115      	bne.n	801d136 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d10e:	3308      	adds	r3, #8
 801d110:	2101      	movs	r1, #1
 801d112:	4618      	mov	r0, r3
 801d114:	f002 f878 	bl	801f208 <RCCEx_PLL2_Config>
 801d118:	4603      	mov	r3, r0
 801d11a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d11e:	e015      	b.n	801d14c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d124:	3328      	adds	r3, #40	@ 0x28
 801d126:	2101      	movs	r1, #1
 801d128:	4618      	mov	r0, r3
 801d12a:	f002 f91f 	bl	801f36c <RCCEx_PLL3_Config>
 801d12e:	4603      	mov	r3, r0
 801d130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d134:	e00a      	b.n	801d14c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801d136:	2301      	movs	r3, #1
 801d138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d13c:	e006      	b.n	801d14c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d13e:	bf00      	nop
 801d140:	e004      	b.n	801d14c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d142:	bf00      	nop
 801d144:	e002      	b.n	801d14c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d146:	bf00      	nop
 801d148:	e000      	b.n	801d14c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d14a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d14c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d150:	2b00      	cmp	r3, #0
 801d152:	d10b      	bne.n	801d16c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801d154:	4ba3      	ldr	r3, [pc, #652]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d158:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d164:	4a9f      	ldr	r2, [pc, #636]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d166:	430b      	orrs	r3, r1
 801d168:	6593      	str	r3, [r2, #88]	@ 0x58
 801d16a:	e003      	b.n	801d174 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d16c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d170:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801d174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d17c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801d180:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801d184:	2300      	movs	r3, #0
 801d186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801d18a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801d18e:	460b      	mov	r3, r1
 801d190:	4313      	orrs	r3, r2
 801d192:	d037      	beq.n	801d204 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801d194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d19a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d19e:	d00e      	beq.n	801d1be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801d1a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d1a4:	d816      	bhi.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d018      	beq.n	801d1dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 801d1aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d1ae:	d111      	bne.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d1b0:	4b8c      	ldr	r3, [pc, #560]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d1b4:	4a8b      	ldr	r2, [pc, #556]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d1b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d1ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d1bc:	e00f      	b.n	801d1de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1c2:	3308      	adds	r3, #8
 801d1c4:	2101      	movs	r1, #1
 801d1c6:	4618      	mov	r0, r3
 801d1c8:	f002 f81e 	bl	801f208 <RCCEx_PLL2_Config>
 801d1cc:	4603      	mov	r3, r0
 801d1ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d1d2:	e004      	b.n	801d1de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d1d4:	2301      	movs	r3, #1
 801d1d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d1da:	e000      	b.n	801d1de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801d1dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d1de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d10a      	bne.n	801d1fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d1e6:	4b7f      	ldr	r3, [pc, #508]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d1e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d1ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801d1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d1f4:	4a7b      	ldr	r2, [pc, #492]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d1f6:	430b      	orrs	r3, r1
 801d1f8:	6513      	str	r3, [r2, #80]	@ 0x50
 801d1fa:	e003      	b.n	801d204 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d1fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801d204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d20c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801d210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801d214:	2300      	movs	r3, #0
 801d216:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801d21a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801d21e:	460b      	mov	r3, r1
 801d220:	4313      	orrs	r3, r2
 801d222:	d039      	beq.n	801d298 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801d224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d22a:	2b03      	cmp	r3, #3
 801d22c:	d81c      	bhi.n	801d268 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801d22e:	a201      	add	r2, pc, #4	@ (adr r2, 801d234 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801d230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d234:	0801d271 	.word	0x0801d271
 801d238:	0801d245 	.word	0x0801d245
 801d23c:	0801d253 	.word	0x0801d253
 801d240:	0801d271 	.word	0x0801d271
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d244:	4b67      	ldr	r3, [pc, #412]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d248:	4a66      	ldr	r2, [pc, #408]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d24a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d24e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d250:	e00f      	b.n	801d272 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d256:	3308      	adds	r3, #8
 801d258:	2102      	movs	r1, #2
 801d25a:	4618      	mov	r0, r3
 801d25c:	f001 ffd4 	bl	801f208 <RCCEx_PLL2_Config>
 801d260:	4603      	mov	r3, r0
 801d262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d266:	e004      	b.n	801d272 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d268:	2301      	movs	r3, #1
 801d26a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d26e:	e000      	b.n	801d272 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801d270:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d276:	2b00      	cmp	r3, #0
 801d278:	d10a      	bne.n	801d290 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801d27a:	4b5a      	ldr	r3, [pc, #360]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d27c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d27e:	f023 0103 	bic.w	r1, r3, #3
 801d282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d288:	4a56      	ldr	r2, [pc, #344]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d28a:	430b      	orrs	r3, r1
 801d28c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d28e:	e003      	b.n	801d298 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801d2a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801d2ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801d2b2:	460b      	mov	r3, r1
 801d2b4:	4313      	orrs	r3, r2
 801d2b6:	f000 809f 	beq.w	801d3f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d2ba:	4b4b      	ldr	r3, [pc, #300]	@ (801d3e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	4a4a      	ldr	r2, [pc, #296]	@ (801d3e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d2c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d2c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d2c6:	f7fc f89d 	bl	8019404 <HAL_GetTick>
 801d2ca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d2ce:	e00b      	b.n	801d2e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d2d0:	f7fc f898 	bl	8019404 <HAL_GetTick>
 801d2d4:	4602      	mov	r2, r0
 801d2d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801d2da:	1ad3      	subs	r3, r2, r3
 801d2dc:	2b64      	cmp	r3, #100	@ 0x64
 801d2de:	d903      	bls.n	801d2e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801d2e0:	2303      	movs	r3, #3
 801d2e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d2e6:	e005      	b.n	801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d2e8:	4b3f      	ldr	r3, [pc, #252]	@ (801d3e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d0ed      	beq.n	801d2d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801d2f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	d179      	bne.n	801d3f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801d2fc:	4b39      	ldr	r3, [pc, #228]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d2fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801d300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d304:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d308:	4053      	eors	r3, r2
 801d30a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d30e:	2b00      	cmp	r3, #0
 801d310:	d015      	beq.n	801d33e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d312:	4b34      	ldr	r3, [pc, #208]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801d31a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d31e:	4b31      	ldr	r3, [pc, #196]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d322:	4a30      	ldr	r2, [pc, #192]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d328:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d32a:	4b2e      	ldr	r3, [pc, #184]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d32c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d32e:	4a2d      	ldr	r2, [pc, #180]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d334:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801d336:	4a2b      	ldr	r2, [pc, #172]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801d33c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801d33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d342:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d34a:	d118      	bne.n	801d37e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d34c:	f7fc f85a 	bl	8019404 <HAL_GetTick>
 801d350:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d354:	e00d      	b.n	801d372 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d356:	f7fc f855 	bl	8019404 <HAL_GetTick>
 801d35a:	4602      	mov	r2, r0
 801d35c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801d360:	1ad2      	subs	r2, r2, r3
 801d362:	f241 3388 	movw	r3, #5000	@ 0x1388
 801d366:	429a      	cmp	r2, r3
 801d368:	d903      	bls.n	801d372 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801d36a:	2303      	movs	r3, #3
 801d36c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801d370:	e005      	b.n	801d37e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d372:	4b1c      	ldr	r3, [pc, #112]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d376:	f003 0302 	and.w	r3, r3, #2
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d0eb      	beq.n	801d356 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801d37e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d382:	2b00      	cmp	r3, #0
 801d384:	d129      	bne.n	801d3da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d38a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d38e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d396:	d10e      	bne.n	801d3b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801d398:	4b12      	ldr	r3, [pc, #72]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d39a:	691b      	ldr	r3, [r3, #16]
 801d39c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801d3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d3a8:	091a      	lsrs	r2, r3, #4
 801d3aa:	4b10      	ldr	r3, [pc, #64]	@ (801d3ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801d3ac:	4013      	ands	r3, r2
 801d3ae:	4a0d      	ldr	r2, [pc, #52]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d3b0:	430b      	orrs	r3, r1
 801d3b2:	6113      	str	r3, [r2, #16]
 801d3b4:	e005      	b.n	801d3c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801d3b6:	4b0b      	ldr	r3, [pc, #44]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d3b8:	691b      	ldr	r3, [r3, #16]
 801d3ba:	4a0a      	ldr	r2, [pc, #40]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d3bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801d3c0:	6113      	str	r3, [r2, #16]
 801d3c2:	4b08      	ldr	r3, [pc, #32]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d3c4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801d3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d3ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d3d2:	4a04      	ldr	r2, [pc, #16]	@ (801d3e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d3d4:	430b      	orrs	r3, r1
 801d3d6:	6713      	str	r3, [r2, #112]	@ 0x70
 801d3d8:	e00e      	b.n	801d3f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801d3da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d3de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801d3e2:	e009      	b.n	801d3f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801d3e4:	58024400 	.word	0x58024400
 801d3e8:	58024800 	.word	0x58024800
 801d3ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d3f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d3f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801d3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d400:	f002 0301 	and.w	r3, r2, #1
 801d404:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801d408:	2300      	movs	r3, #0
 801d40a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801d40e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801d412:	460b      	mov	r3, r1
 801d414:	4313      	orrs	r3, r2
 801d416:	f000 8089 	beq.w	801d52c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801d41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d41e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d420:	2b28      	cmp	r3, #40	@ 0x28
 801d422:	d86b      	bhi.n	801d4fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801d424:	a201      	add	r2, pc, #4	@ (adr r2, 801d42c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801d426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d42a:	bf00      	nop
 801d42c:	0801d505 	.word	0x0801d505
 801d430:	0801d4fd 	.word	0x0801d4fd
 801d434:	0801d4fd 	.word	0x0801d4fd
 801d438:	0801d4fd 	.word	0x0801d4fd
 801d43c:	0801d4fd 	.word	0x0801d4fd
 801d440:	0801d4fd 	.word	0x0801d4fd
 801d444:	0801d4fd 	.word	0x0801d4fd
 801d448:	0801d4fd 	.word	0x0801d4fd
 801d44c:	0801d4d1 	.word	0x0801d4d1
 801d450:	0801d4fd 	.word	0x0801d4fd
 801d454:	0801d4fd 	.word	0x0801d4fd
 801d458:	0801d4fd 	.word	0x0801d4fd
 801d45c:	0801d4fd 	.word	0x0801d4fd
 801d460:	0801d4fd 	.word	0x0801d4fd
 801d464:	0801d4fd 	.word	0x0801d4fd
 801d468:	0801d4fd 	.word	0x0801d4fd
 801d46c:	0801d4e7 	.word	0x0801d4e7
 801d470:	0801d4fd 	.word	0x0801d4fd
 801d474:	0801d4fd 	.word	0x0801d4fd
 801d478:	0801d4fd 	.word	0x0801d4fd
 801d47c:	0801d4fd 	.word	0x0801d4fd
 801d480:	0801d4fd 	.word	0x0801d4fd
 801d484:	0801d4fd 	.word	0x0801d4fd
 801d488:	0801d4fd 	.word	0x0801d4fd
 801d48c:	0801d505 	.word	0x0801d505
 801d490:	0801d4fd 	.word	0x0801d4fd
 801d494:	0801d4fd 	.word	0x0801d4fd
 801d498:	0801d4fd 	.word	0x0801d4fd
 801d49c:	0801d4fd 	.word	0x0801d4fd
 801d4a0:	0801d4fd 	.word	0x0801d4fd
 801d4a4:	0801d4fd 	.word	0x0801d4fd
 801d4a8:	0801d4fd 	.word	0x0801d4fd
 801d4ac:	0801d505 	.word	0x0801d505
 801d4b0:	0801d4fd 	.word	0x0801d4fd
 801d4b4:	0801d4fd 	.word	0x0801d4fd
 801d4b8:	0801d4fd 	.word	0x0801d4fd
 801d4bc:	0801d4fd 	.word	0x0801d4fd
 801d4c0:	0801d4fd 	.word	0x0801d4fd
 801d4c4:	0801d4fd 	.word	0x0801d4fd
 801d4c8:	0801d4fd 	.word	0x0801d4fd
 801d4cc:	0801d505 	.word	0x0801d505
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4d4:	3308      	adds	r3, #8
 801d4d6:	2101      	movs	r1, #1
 801d4d8:	4618      	mov	r0, r3
 801d4da:	f001 fe95 	bl	801f208 <RCCEx_PLL2_Config>
 801d4de:	4603      	mov	r3, r0
 801d4e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801d4e4:	e00f      	b.n	801d506 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4ea:	3328      	adds	r3, #40	@ 0x28
 801d4ec:	2101      	movs	r1, #1
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	f001 ff3c 	bl	801f36c <RCCEx_PLL3_Config>
 801d4f4:	4603      	mov	r3, r0
 801d4f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801d4fa:	e004      	b.n	801d506 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d4fc:	2301      	movs	r3, #1
 801d4fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d502:	e000      	b.n	801d506 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801d504:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d10a      	bne.n	801d524 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801d50e:	4bbf      	ldr	r3, [pc, #764]	@ (801d80c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d512:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801d516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d51a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d51c:	4abb      	ldr	r2, [pc, #748]	@ (801d80c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d51e:	430b      	orrs	r3, r1
 801d520:	6553      	str	r3, [r2, #84]	@ 0x54
 801d522:	e003      	b.n	801d52c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801d52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d530:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d534:	f002 0302 	and.w	r3, r2, #2
 801d538:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801d53c:	2300      	movs	r3, #0
 801d53e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801d542:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801d546:	460b      	mov	r3, r1
 801d548:	4313      	orrs	r3, r2
 801d54a:	d041      	beq.n	801d5d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801d54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d552:	2b05      	cmp	r3, #5
 801d554:	d824      	bhi.n	801d5a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801d556:	a201      	add	r2, pc, #4	@ (adr r2, 801d55c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801d558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d55c:	0801d5a9 	.word	0x0801d5a9
 801d560:	0801d575 	.word	0x0801d575
 801d564:	0801d58b 	.word	0x0801d58b
 801d568:	0801d5a9 	.word	0x0801d5a9
 801d56c:	0801d5a9 	.word	0x0801d5a9
 801d570:	0801d5a9 	.word	0x0801d5a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d578:	3308      	adds	r3, #8
 801d57a:	2101      	movs	r1, #1
 801d57c:	4618      	mov	r0, r3
 801d57e:	f001 fe43 	bl	801f208 <RCCEx_PLL2_Config>
 801d582:	4603      	mov	r3, r0
 801d584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d588:	e00f      	b.n	801d5aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d58e:	3328      	adds	r3, #40	@ 0x28
 801d590:	2101      	movs	r1, #1
 801d592:	4618      	mov	r0, r3
 801d594:	f001 feea 	bl	801f36c <RCCEx_PLL3_Config>
 801d598:	4603      	mov	r3, r0
 801d59a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d59e:	e004      	b.n	801d5aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d5a0:	2301      	movs	r3, #1
 801d5a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d5a6:	e000      	b.n	801d5aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801d5a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d5aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	d10a      	bne.n	801d5c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801d5b2:	4b96      	ldr	r3, [pc, #600]	@ (801d80c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d5b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d5b6:	f023 0107 	bic.w	r1, r3, #7
 801d5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d5c0:	4a92      	ldr	r2, [pc, #584]	@ (801d80c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d5c2:	430b      	orrs	r3, r1
 801d5c4:	6553      	str	r3, [r2, #84]	@ 0x54
 801d5c6:	e003      	b.n	801d5d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d5c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5d8:	f002 0304 	and.w	r3, r2, #4
 801d5dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801d5e0:	2300      	movs	r3, #0
 801d5e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801d5e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801d5ea:	460b      	mov	r3, r1
 801d5ec:	4313      	orrs	r3, r2
 801d5ee:	d044      	beq.n	801d67a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801d5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d5f8:	2b05      	cmp	r3, #5
 801d5fa:	d825      	bhi.n	801d648 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801d5fc:	a201      	add	r2, pc, #4	@ (adr r2, 801d604 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801d5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d602:	bf00      	nop
 801d604:	0801d651 	.word	0x0801d651
 801d608:	0801d61d 	.word	0x0801d61d
 801d60c:	0801d633 	.word	0x0801d633
 801d610:	0801d651 	.word	0x0801d651
 801d614:	0801d651 	.word	0x0801d651
 801d618:	0801d651 	.word	0x0801d651
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d620:	3308      	adds	r3, #8
 801d622:	2101      	movs	r1, #1
 801d624:	4618      	mov	r0, r3
 801d626:	f001 fdef 	bl	801f208 <RCCEx_PLL2_Config>
 801d62a:	4603      	mov	r3, r0
 801d62c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d630:	e00f      	b.n	801d652 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d636:	3328      	adds	r3, #40	@ 0x28
 801d638:	2101      	movs	r1, #1
 801d63a:	4618      	mov	r0, r3
 801d63c:	f001 fe96 	bl	801f36c <RCCEx_PLL3_Config>
 801d640:	4603      	mov	r3, r0
 801d642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d646:	e004      	b.n	801d652 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d648:	2301      	movs	r3, #1
 801d64a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d64e:	e000      	b.n	801d652 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801d650:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d656:	2b00      	cmp	r3, #0
 801d658:	d10b      	bne.n	801d672 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d65a:	4b6c      	ldr	r3, [pc, #432]	@ (801d80c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d65c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d65e:	f023 0107 	bic.w	r1, r3, #7
 801d662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d66a:	4a68      	ldr	r2, [pc, #416]	@ (801d80c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d66c:	430b      	orrs	r3, r1
 801d66e:	6593      	str	r3, [r2, #88]	@ 0x58
 801d670:	e003      	b.n	801d67a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d682:	f002 0320 	and.w	r3, r2, #32
 801d686:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801d68a:	2300      	movs	r3, #0
 801d68c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801d690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801d694:	460b      	mov	r3, r1
 801d696:	4313      	orrs	r3, r2
 801d698:	d055      	beq.n	801d746 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801d69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d69e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d6a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d6a6:	d033      	beq.n	801d710 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801d6a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d6ac:	d82c      	bhi.n	801d708 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d6b2:	d02f      	beq.n	801d714 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801d6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d6b8:	d826      	bhi.n	801d708 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d6ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d6be:	d02b      	beq.n	801d718 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801d6c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d6c4:	d820      	bhi.n	801d708 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d6c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d6ca:	d012      	beq.n	801d6f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801d6cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d6d0:	d81a      	bhi.n	801d708 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d022      	beq.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801d6d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d6da:	d115      	bne.n	801d708 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6e0:	3308      	adds	r3, #8
 801d6e2:	2100      	movs	r1, #0
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	f001 fd8f 	bl	801f208 <RCCEx_PLL2_Config>
 801d6ea:	4603      	mov	r3, r0
 801d6ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d6f0:	e015      	b.n	801d71e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6f6:	3328      	adds	r3, #40	@ 0x28
 801d6f8:	2102      	movs	r1, #2
 801d6fa:	4618      	mov	r0, r3
 801d6fc:	f001 fe36 	bl	801f36c <RCCEx_PLL3_Config>
 801d700:	4603      	mov	r3, r0
 801d702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d706:	e00a      	b.n	801d71e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d708:	2301      	movs	r3, #1
 801d70a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d70e:	e006      	b.n	801d71e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d710:	bf00      	nop
 801d712:	e004      	b.n	801d71e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d714:	bf00      	nop
 801d716:	e002      	b.n	801d71e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d718:	bf00      	nop
 801d71a:	e000      	b.n	801d71e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d71c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d71e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d722:	2b00      	cmp	r3, #0
 801d724:	d10b      	bne.n	801d73e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d726:	4b39      	ldr	r3, [pc, #228]	@ (801d80c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d72a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d736:	4a35      	ldr	r2, [pc, #212]	@ (801d80c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d738:	430b      	orrs	r3, r1
 801d73a:	6553      	str	r3, [r2, #84]	@ 0x54
 801d73c:	e003      	b.n	801d746 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d73e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801d746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d74e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801d752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801d756:	2300      	movs	r3, #0
 801d758:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801d75c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801d760:	460b      	mov	r3, r1
 801d762:	4313      	orrs	r3, r2
 801d764:	d058      	beq.n	801d818 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801d766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d76a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d76e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801d772:	d033      	beq.n	801d7dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801d774:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801d778:	d82c      	bhi.n	801d7d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d77a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d77e:	d02f      	beq.n	801d7e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801d780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d784:	d826      	bhi.n	801d7d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d786:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d78a:	d02b      	beq.n	801d7e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801d78c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d790:	d820      	bhi.n	801d7d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d792:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d796:	d012      	beq.n	801d7be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801d798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d79c:	d81a      	bhi.n	801d7d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d022      	beq.n	801d7e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801d7a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d7a6:	d115      	bne.n	801d7d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7ac:	3308      	adds	r3, #8
 801d7ae:	2100      	movs	r1, #0
 801d7b0:	4618      	mov	r0, r3
 801d7b2:	f001 fd29 	bl	801f208 <RCCEx_PLL2_Config>
 801d7b6:	4603      	mov	r3, r0
 801d7b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d7bc:	e015      	b.n	801d7ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7c2:	3328      	adds	r3, #40	@ 0x28
 801d7c4:	2102      	movs	r1, #2
 801d7c6:	4618      	mov	r0, r3
 801d7c8:	f001 fdd0 	bl	801f36c <RCCEx_PLL3_Config>
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d7d2:	e00a      	b.n	801d7ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d7d4:	2301      	movs	r3, #1
 801d7d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d7da:	e006      	b.n	801d7ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d7dc:	bf00      	nop
 801d7de:	e004      	b.n	801d7ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d7e0:	bf00      	nop
 801d7e2:	e002      	b.n	801d7ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d7e4:	bf00      	nop
 801d7e6:	e000      	b.n	801d7ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d7e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d10e      	bne.n	801d810 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801d7f2:	4b06      	ldr	r3, [pc, #24]	@ (801d80c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d7f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d7f6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801d7fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d802:	4a02      	ldr	r2, [pc, #8]	@ (801d80c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d804:	430b      	orrs	r3, r1
 801d806:	6593      	str	r3, [r2, #88]	@ 0x58
 801d808:	e006      	b.n	801d818 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801d80a:	bf00      	nop
 801d80c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d814:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801d818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d820:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801d824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801d828:	2300      	movs	r3, #0
 801d82a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801d82e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801d832:	460b      	mov	r3, r1
 801d834:	4313      	orrs	r3, r2
 801d836:	d055      	beq.n	801d8e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801d838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d83c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801d840:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801d844:	d033      	beq.n	801d8ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801d846:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801d84a:	d82c      	bhi.n	801d8a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d84c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801d850:	d02f      	beq.n	801d8b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801d852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801d856:	d826      	bhi.n	801d8a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d858:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801d85c:	d02b      	beq.n	801d8b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801d85e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801d862:	d820      	bhi.n	801d8a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d868:	d012      	beq.n	801d890 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801d86a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d86e:	d81a      	bhi.n	801d8a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d870:	2b00      	cmp	r3, #0
 801d872:	d022      	beq.n	801d8ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801d874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d878:	d115      	bne.n	801d8a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d87a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d87e:	3308      	adds	r3, #8
 801d880:	2100      	movs	r1, #0
 801d882:	4618      	mov	r0, r3
 801d884:	f001 fcc0 	bl	801f208 <RCCEx_PLL2_Config>
 801d888:	4603      	mov	r3, r0
 801d88a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d88e:	e015      	b.n	801d8bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d894:	3328      	adds	r3, #40	@ 0x28
 801d896:	2102      	movs	r1, #2
 801d898:	4618      	mov	r0, r3
 801d89a:	f001 fd67 	bl	801f36c <RCCEx_PLL3_Config>
 801d89e:	4603      	mov	r3, r0
 801d8a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d8a4:	e00a      	b.n	801d8bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d8a6:	2301      	movs	r3, #1
 801d8a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d8ac:	e006      	b.n	801d8bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d8ae:	bf00      	nop
 801d8b0:	e004      	b.n	801d8bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d8b2:	bf00      	nop
 801d8b4:	e002      	b.n	801d8bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d8b6:	bf00      	nop
 801d8b8:	e000      	b.n	801d8bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d8ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d8bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d10b      	bne.n	801d8dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801d8c4:	4ba1      	ldr	r3, [pc, #644]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d8c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d8c8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801d8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801d8d4:	4a9d      	ldr	r2, [pc, #628]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d8d6:	430b      	orrs	r3, r1
 801d8d8:	6593      	str	r3, [r2, #88]	@ 0x58
 801d8da:	e003      	b.n	801d8e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d8dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801d8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8ec:	f002 0308 	and.w	r3, r2, #8
 801d8f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801d8f4:	2300      	movs	r3, #0
 801d8f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801d8fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801d8fe:	460b      	mov	r3, r1
 801d900:	4313      	orrs	r3, r2
 801d902:	d01e      	beq.n	801d942 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801d904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d90c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d910:	d10c      	bne.n	801d92c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d916:	3328      	adds	r3, #40	@ 0x28
 801d918:	2102      	movs	r1, #2
 801d91a:	4618      	mov	r0, r3
 801d91c:	f001 fd26 	bl	801f36c <RCCEx_PLL3_Config>
 801d920:	4603      	mov	r3, r0
 801d922:	2b00      	cmp	r3, #0
 801d924:	d002      	beq.n	801d92c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801d926:	2301      	movs	r3, #1
 801d928:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801d92c:	4b87      	ldr	r3, [pc, #540]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d92e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d930:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801d934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d93c:	4a83      	ldr	r2, [pc, #524]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d93e:	430b      	orrs	r3, r1
 801d940:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d94a:	f002 0310 	and.w	r3, r2, #16
 801d94e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801d952:	2300      	movs	r3, #0
 801d954:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801d958:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801d95c:	460b      	mov	r3, r1
 801d95e:	4313      	orrs	r3, r2
 801d960:	d01e      	beq.n	801d9a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801d962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d96a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d96e:	d10c      	bne.n	801d98a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d974:	3328      	adds	r3, #40	@ 0x28
 801d976:	2102      	movs	r1, #2
 801d978:	4618      	mov	r0, r3
 801d97a:	f001 fcf7 	bl	801f36c <RCCEx_PLL3_Config>
 801d97e:	4603      	mov	r3, r0
 801d980:	2b00      	cmp	r3, #0
 801d982:	d002      	beq.n	801d98a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801d984:	2301      	movs	r3, #1
 801d986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d98a:	4b70      	ldr	r3, [pc, #448]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d98c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d98e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801d992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d996:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d99a:	4a6c      	ldr	r2, [pc, #432]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d99c:	430b      	orrs	r3, r1
 801d99e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d9a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9a8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801d9ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801d9b0:	2300      	movs	r3, #0
 801d9b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801d9b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801d9ba:	460b      	mov	r3, r1
 801d9bc:	4313      	orrs	r3, r2
 801d9be:	d03e      	beq.n	801da3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801d9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801d9c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d9cc:	d022      	beq.n	801da14 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801d9ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d9d2:	d81b      	bhi.n	801da0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	d003      	beq.n	801d9e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801d9d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d9dc:	d00b      	beq.n	801d9f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801d9de:	e015      	b.n	801da0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9e4:	3308      	adds	r3, #8
 801d9e6:	2100      	movs	r1, #0
 801d9e8:	4618      	mov	r0, r3
 801d9ea:	f001 fc0d 	bl	801f208 <RCCEx_PLL2_Config>
 801d9ee:	4603      	mov	r3, r0
 801d9f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801d9f4:	e00f      	b.n	801da16 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9fa:	3328      	adds	r3, #40	@ 0x28
 801d9fc:	2102      	movs	r1, #2
 801d9fe:	4618      	mov	r0, r3
 801da00:	f001 fcb4 	bl	801f36c <RCCEx_PLL3_Config>
 801da04:	4603      	mov	r3, r0
 801da06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801da0a:	e004      	b.n	801da16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801da0c:	2301      	movs	r3, #1
 801da0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801da12:	e000      	b.n	801da16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801da14:	bf00      	nop
    }

    if (ret == HAL_OK)
 801da16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	d10b      	bne.n	801da36 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801da1e:	4b4b      	ldr	r3, [pc, #300]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801da20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801da22:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801da26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801da2e:	4a47      	ldr	r2, [pc, #284]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801da30:	430b      	orrs	r3, r1
 801da32:	6593      	str	r3, [r2, #88]	@ 0x58
 801da34:	e003      	b.n	801da3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801da3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da46:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801da4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801da4c:	2300      	movs	r3, #0
 801da4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801da50:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801da54:	460b      	mov	r3, r1
 801da56:	4313      	orrs	r3, r2
 801da58:	d03b      	beq.n	801dad2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801da5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801da62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801da66:	d01f      	beq.n	801daa8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801da68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801da6c:	d818      	bhi.n	801daa0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801da6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801da72:	d003      	beq.n	801da7c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801da74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801da78:	d007      	beq.n	801da8a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801da7a:	e011      	b.n	801daa0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801da7c:	4b33      	ldr	r3, [pc, #204]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801da7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da80:	4a32      	ldr	r2, [pc, #200]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801da82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801da86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801da88:	e00f      	b.n	801daaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801da8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da8e:	3328      	adds	r3, #40	@ 0x28
 801da90:	2101      	movs	r1, #1
 801da92:	4618      	mov	r0, r3
 801da94:	f001 fc6a 	bl	801f36c <RCCEx_PLL3_Config>
 801da98:	4603      	mov	r3, r0
 801da9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801da9e:	e004      	b.n	801daaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801daa0:	2301      	movs	r3, #1
 801daa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801daa6:	e000      	b.n	801daaa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801daa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801daaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d10b      	bne.n	801daca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801dab2:	4b26      	ldr	r3, [pc, #152]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dab6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801daba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dabe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dac2:	4a22      	ldr	r2, [pc, #136]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dac4:	430b      	orrs	r3, r1
 801dac6:	6553      	str	r3, [r2, #84]	@ 0x54
 801dac8:	e003      	b.n	801dad2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801daca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801dad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dada:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801dade:	673b      	str	r3, [r7, #112]	@ 0x70
 801dae0:	2300      	movs	r3, #0
 801dae2:	677b      	str	r3, [r7, #116]	@ 0x74
 801dae4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801dae8:	460b      	mov	r3, r1
 801daea:	4313      	orrs	r3, r2
 801daec:	d034      	beq.n	801db58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801daee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d003      	beq.n	801db00 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801daf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801dafc:	d007      	beq.n	801db0e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801dafe:	e011      	b.n	801db24 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801db00:	4b12      	ldr	r3, [pc, #72]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801db02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db04:	4a11      	ldr	r2, [pc, #68]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801db06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801db0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801db0c:	e00e      	b.n	801db2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801db0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db12:	3308      	adds	r3, #8
 801db14:	2102      	movs	r1, #2
 801db16:	4618      	mov	r0, r3
 801db18:	f001 fb76 	bl	801f208 <RCCEx_PLL2_Config>
 801db1c:	4603      	mov	r3, r0
 801db1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801db22:	e003      	b.n	801db2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801db24:	2301      	movs	r3, #1
 801db26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801db2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801db2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db30:	2b00      	cmp	r3, #0
 801db32:	d10d      	bne.n	801db50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801db34:	4b05      	ldr	r3, [pc, #20]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801db36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801db38:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801db3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801db42:	4a02      	ldr	r2, [pc, #8]	@ (801db4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801db44:	430b      	orrs	r3, r1
 801db46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801db48:	e006      	b.n	801db58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801db4a:	bf00      	nop
 801db4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801db58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db60:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801db64:	66bb      	str	r3, [r7, #104]	@ 0x68
 801db66:	2300      	movs	r3, #0
 801db68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801db6a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801db6e:	460b      	mov	r3, r1
 801db70:	4313      	orrs	r3, r2
 801db72:	d00c      	beq.n	801db8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801db74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db78:	3328      	adds	r3, #40	@ 0x28
 801db7a:	2102      	movs	r1, #2
 801db7c:	4618      	mov	r0, r3
 801db7e:	f001 fbf5 	bl	801f36c <RCCEx_PLL3_Config>
 801db82:	4603      	mov	r3, r0
 801db84:	2b00      	cmp	r3, #0
 801db86:	d002      	beq.n	801db8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801db88:	2301      	movs	r3, #1
 801db8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801db8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db96:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801db9a:	663b      	str	r3, [r7, #96]	@ 0x60
 801db9c:	2300      	movs	r3, #0
 801db9e:	667b      	str	r3, [r7, #100]	@ 0x64
 801dba0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801dba4:	460b      	mov	r3, r1
 801dba6:	4313      	orrs	r3, r2
 801dba8:	d038      	beq.n	801dc1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801dbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801dbb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801dbb6:	d018      	beq.n	801dbea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801dbb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801dbbc:	d811      	bhi.n	801dbe2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801dbbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dbc2:	d014      	beq.n	801dbee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801dbc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dbc8:	d80b      	bhi.n	801dbe2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	d011      	beq.n	801dbf2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801dbce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dbd2:	d106      	bne.n	801dbe2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dbd4:	4bc3      	ldr	r3, [pc, #780]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dbd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbd8:	4ac2      	ldr	r2, [pc, #776]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dbda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dbde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801dbe0:	e008      	b.n	801dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dbe2:	2301      	movs	r3, #1
 801dbe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dbe8:	e004      	b.n	801dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801dbea:	bf00      	nop
 801dbec:	e002      	b.n	801dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801dbee:	bf00      	nop
 801dbf0:	e000      	b.n	801dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801dbf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dbf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbf8:	2b00      	cmp	r3, #0
 801dbfa:	d10b      	bne.n	801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801dbfc:	4bb9      	ldr	r3, [pc, #740]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dbfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dc00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801dc04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801dc0c:	4ab5      	ldr	r2, [pc, #724]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dc0e:	430b      	orrs	r3, r1
 801dc10:	6553      	str	r3, [r2, #84]	@ 0x54
 801dc12:	e003      	b.n	801dc1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dc14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801dc1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc24:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801dc28:	65bb      	str	r3, [r7, #88]	@ 0x58
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801dc2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801dc32:	460b      	mov	r3, r1
 801dc34:	4313      	orrs	r3, r2
 801dc36:	d009      	beq.n	801dc4c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801dc38:	4baa      	ldr	r3, [pc, #680]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dc3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dc3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801dc40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc46:	4aa7      	ldr	r2, [pc, #668]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dc48:	430b      	orrs	r3, r1
 801dc4a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801dc4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc54:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801dc58:	653b      	str	r3, [r7, #80]	@ 0x50
 801dc5a:	2300      	movs	r3, #0
 801dc5c:	657b      	str	r3, [r7, #84]	@ 0x54
 801dc5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801dc62:	460b      	mov	r3, r1
 801dc64:	4313      	orrs	r3, r2
 801dc66:	d00a      	beq.n	801dc7e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801dc68:	4b9e      	ldr	r3, [pc, #632]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dc6a:	691b      	ldr	r3, [r3, #16]
 801dc6c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801dc70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801dc78:	4a9a      	ldr	r2, [pc, #616]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dc7a:	430b      	orrs	r3, r1
 801dc7c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801dc7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc86:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801dc8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801dc8c:	2300      	movs	r3, #0
 801dc8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801dc90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801dc94:	460b      	mov	r3, r1
 801dc96:	4313      	orrs	r3, r2
 801dc98:	d009      	beq.n	801dcae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801dc9a:	4b92      	ldr	r3, [pc, #584]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dc9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dc9e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801dca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dca8:	4a8e      	ldr	r2, [pc, #568]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dcaa:	430b      	orrs	r3, r1
 801dcac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801dcae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcb6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801dcba:	643b      	str	r3, [r7, #64]	@ 0x40
 801dcbc:	2300      	movs	r3, #0
 801dcbe:	647b      	str	r3, [r7, #68]	@ 0x44
 801dcc0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801dcc4:	460b      	mov	r3, r1
 801dcc6:	4313      	orrs	r3, r2
 801dcc8:	d00e      	beq.n	801dce8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801dcca:	4b86      	ldr	r3, [pc, #536]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dccc:	691b      	ldr	r3, [r3, #16]
 801dcce:	4a85      	ldr	r2, [pc, #532]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dcd0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801dcd4:	6113      	str	r3, [r2, #16]
 801dcd6:	4b83      	ldr	r3, [pc, #524]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dcd8:	6919      	ldr	r1, [r3, #16]
 801dcda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801dce2:	4a80      	ldr	r2, [pc, #512]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dce4:	430b      	orrs	r3, r1
 801dce6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801dce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcf0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801dcf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dcf6:	2300      	movs	r3, #0
 801dcf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dcfa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801dcfe:	460b      	mov	r3, r1
 801dd00:	4313      	orrs	r3, r2
 801dd02:	d009      	beq.n	801dd18 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801dd04:	4b77      	ldr	r3, [pc, #476]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dd06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dd08:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801dd0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dd12:	4a74      	ldr	r2, [pc, #464]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dd14:	430b      	orrs	r3, r1
 801dd16:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801dd18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd20:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801dd24:	633b      	str	r3, [r7, #48]	@ 0x30
 801dd26:	2300      	movs	r3, #0
 801dd28:	637b      	str	r3, [r7, #52]	@ 0x34
 801dd2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801dd2e:	460b      	mov	r3, r1
 801dd30:	4313      	orrs	r3, r2
 801dd32:	d00a      	beq.n	801dd4a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801dd34:	4b6b      	ldr	r3, [pc, #428]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dd36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dd38:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801dd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801dd44:	4a67      	ldr	r2, [pc, #412]	@ (801dee4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dd46:	430b      	orrs	r3, r1
 801dd48:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801dd4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd52:	2100      	movs	r1, #0
 801dd54:	62b9      	str	r1, [r7, #40]	@ 0x28
 801dd56:	f003 0301 	and.w	r3, r3, #1
 801dd5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dd5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801dd60:	460b      	mov	r3, r1
 801dd62:	4313      	orrs	r3, r2
 801dd64:	d011      	beq.n	801dd8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dd66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd6a:	3308      	adds	r3, #8
 801dd6c:	2100      	movs	r1, #0
 801dd6e:	4618      	mov	r0, r3
 801dd70:	f001 fa4a 	bl	801f208 <RCCEx_PLL2_Config>
 801dd74:	4603      	mov	r3, r0
 801dd76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801dd7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d003      	beq.n	801dd8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dd82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801dd8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd92:	2100      	movs	r1, #0
 801dd94:	6239      	str	r1, [r7, #32]
 801dd96:	f003 0302 	and.w	r3, r3, #2
 801dd9a:	627b      	str	r3, [r7, #36]	@ 0x24
 801dd9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801dda0:	460b      	mov	r3, r1
 801dda2:	4313      	orrs	r3, r2
 801dda4:	d011      	beq.n	801ddca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddaa:	3308      	adds	r3, #8
 801ddac:	2101      	movs	r1, #1
 801ddae:	4618      	mov	r0, r3
 801ddb0:	f001 fa2a 	bl	801f208 <RCCEx_PLL2_Config>
 801ddb4:	4603      	mov	r3, r0
 801ddb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ddba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d003      	beq.n	801ddca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ddc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801ddca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddd2:	2100      	movs	r1, #0
 801ddd4:	61b9      	str	r1, [r7, #24]
 801ddd6:	f003 0304 	and.w	r3, r3, #4
 801ddda:	61fb      	str	r3, [r7, #28]
 801dddc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801dde0:	460b      	mov	r3, r1
 801dde2:	4313      	orrs	r3, r2
 801dde4:	d011      	beq.n	801de0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801dde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddea:	3308      	adds	r3, #8
 801ddec:	2102      	movs	r1, #2
 801ddee:	4618      	mov	r0, r3
 801ddf0:	f001 fa0a 	bl	801f208 <RCCEx_PLL2_Config>
 801ddf4:	4603      	mov	r3, r0
 801ddf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ddfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	d003      	beq.n	801de0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801de0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de12:	2100      	movs	r1, #0
 801de14:	6139      	str	r1, [r7, #16]
 801de16:	f003 0308 	and.w	r3, r3, #8
 801de1a:	617b      	str	r3, [r7, #20]
 801de1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801de20:	460b      	mov	r3, r1
 801de22:	4313      	orrs	r3, r2
 801de24:	d011      	beq.n	801de4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801de26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de2a:	3328      	adds	r3, #40	@ 0x28
 801de2c:	2100      	movs	r1, #0
 801de2e:	4618      	mov	r0, r3
 801de30:	f001 fa9c 	bl	801f36c <RCCEx_PLL3_Config>
 801de34:	4603      	mov	r3, r0
 801de36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801de3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d003      	beq.n	801de4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801de4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de52:	2100      	movs	r1, #0
 801de54:	60b9      	str	r1, [r7, #8]
 801de56:	f003 0310 	and.w	r3, r3, #16
 801de5a:	60fb      	str	r3, [r7, #12]
 801de5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801de60:	460b      	mov	r3, r1
 801de62:	4313      	orrs	r3, r2
 801de64:	d011      	beq.n	801de8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801de66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de6a:	3328      	adds	r3, #40	@ 0x28
 801de6c:	2101      	movs	r1, #1
 801de6e:	4618      	mov	r0, r3
 801de70:	f001 fa7c 	bl	801f36c <RCCEx_PLL3_Config>
 801de74:	4603      	mov	r3, r0
 801de76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801de7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d003      	beq.n	801de8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801de8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de92:	2100      	movs	r1, #0
 801de94:	6039      	str	r1, [r7, #0]
 801de96:	f003 0320 	and.w	r3, r3, #32
 801de9a:	607b      	str	r3, [r7, #4]
 801de9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801dea0:	460b      	mov	r3, r1
 801dea2:	4313      	orrs	r3, r2
 801dea4:	d011      	beq.n	801deca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801deaa:	3328      	adds	r3, #40	@ 0x28
 801deac:	2102      	movs	r1, #2
 801deae:	4618      	mov	r0, r3
 801deb0:	f001 fa5c 	bl	801f36c <RCCEx_PLL3_Config>
 801deb4:	4603      	mov	r3, r0
 801deb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801deba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d003      	beq.n	801deca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dec6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801deca:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801dece:	2b00      	cmp	r3, #0
 801ded0:	d101      	bne.n	801ded6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801ded2:	2300      	movs	r3, #0
 801ded4:	e000      	b.n	801ded8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801ded6:	2301      	movs	r3, #1
}
 801ded8:	4618      	mov	r0, r3
 801deda:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801dede:	46bd      	mov	sp, r7
 801dee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801dee4:	58024400 	.word	0x58024400

0801dee8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801dee8:	b580      	push	{r7, lr}
 801deea:	b090      	sub	sp, #64	@ 0x40
 801deec:	af00      	add	r7, sp, #0
 801deee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801def2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801def6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801defa:	430b      	orrs	r3, r1
 801defc:	f040 8094 	bne.w	801e028 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801df00:	4b9e      	ldr	r3, [pc, #632]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801df02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801df04:	f003 0307 	and.w	r3, r3, #7
 801df08:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801df0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df0c:	2b04      	cmp	r3, #4
 801df0e:	f200 8087 	bhi.w	801e020 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801df12:	a201      	add	r2, pc, #4	@ (adr r2, 801df18 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801df14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df18:	0801df2d 	.word	0x0801df2d
 801df1c:	0801df55 	.word	0x0801df55
 801df20:	0801df7d 	.word	0x0801df7d
 801df24:	0801e019 	.word	0x0801e019
 801df28:	0801dfa5 	.word	0x0801dfa5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801df2c:	4b93      	ldr	r3, [pc, #588]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801df2e:	681b      	ldr	r3, [r3, #0]
 801df30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801df34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801df38:	d108      	bne.n	801df4c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801df3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801df3e:	4618      	mov	r0, r3
 801df40:	f001 f810 	bl	801ef64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801df44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801df48:	f000 bd45 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801df4c:	2300      	movs	r3, #0
 801df4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801df50:	f000 bd41 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801df54:	4b89      	ldr	r3, [pc, #548]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801df5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801df60:	d108      	bne.n	801df74 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801df62:	f107 0318 	add.w	r3, r7, #24
 801df66:	4618      	mov	r0, r3
 801df68:	f000 fd54 	bl	801ea14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801df6c:	69bb      	ldr	r3, [r7, #24]
 801df6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801df70:	f000 bd31 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801df74:	2300      	movs	r3, #0
 801df76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801df78:	f000 bd2d 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801df7c:	4b7f      	ldr	r3, [pc, #508]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801df7e:	681b      	ldr	r3, [r3, #0]
 801df80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801df84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801df88:	d108      	bne.n	801df9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801df8a:	f107 030c 	add.w	r3, r7, #12
 801df8e:	4618      	mov	r0, r3
 801df90:	f000 fe94 	bl	801ecbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801df98:	f000 bd1d 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801df9c:	2300      	movs	r3, #0
 801df9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801dfa0:	f000 bd19 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801dfa4:	4b75      	ldr	r3, [pc, #468]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801dfa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dfa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801dfac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801dfae:	4b73      	ldr	r3, [pc, #460]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801dfb0:	681b      	ldr	r3, [r3, #0]
 801dfb2:	f003 0304 	and.w	r3, r3, #4
 801dfb6:	2b04      	cmp	r3, #4
 801dfb8:	d10c      	bne.n	801dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801dfba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dfbc:	2b00      	cmp	r3, #0
 801dfbe:	d109      	bne.n	801dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dfc0:	4b6e      	ldr	r3, [pc, #440]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	08db      	lsrs	r3, r3, #3
 801dfc6:	f003 0303 	and.w	r3, r3, #3
 801dfca:	4a6d      	ldr	r2, [pc, #436]	@ (801e180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801dfcc:	fa22 f303 	lsr.w	r3, r2, r3
 801dfd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dfd2:	e01f      	b.n	801e014 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801dfd4:	4b69      	ldr	r3, [pc, #420]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801dfdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dfe0:	d106      	bne.n	801dff0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801dfe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dfe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dfe8:	d102      	bne.n	801dff0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801dfea:	4b66      	ldr	r3, [pc, #408]	@ (801e184 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801dfec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dfee:	e011      	b.n	801e014 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801dff0:	4b62      	ldr	r3, [pc, #392]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801dff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801dffc:	d106      	bne.n	801e00c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801dffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e004:	d102      	bne.n	801e00c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e006:	4b60      	ldr	r3, [pc, #384]	@ (801e188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801e008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e00a:	e003      	b.n	801e014 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e00c:	2300      	movs	r3, #0
 801e00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e010:	f000 bce1 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e014:	f000 bcdf 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e018:	4b5c      	ldr	r3, [pc, #368]	@ (801e18c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801e01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e01c:	f000 bcdb 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801e020:	2300      	movs	r3, #0
 801e022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e024:	f000 bcd7 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801e028:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e02c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 801e030:	430b      	orrs	r3, r1
 801e032:	f040 80ad 	bne.w	801e190 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801e036:	4b51      	ldr	r3, [pc, #324]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e03a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 801e03e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801e040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e046:	d056      	beq.n	801e0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 801e048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e04a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e04e:	f200 8090 	bhi.w	801e172 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801e052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e054:	2bc0      	cmp	r3, #192	@ 0xc0
 801e056:	f000 8088 	beq.w	801e16a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 801e05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e05c:	2bc0      	cmp	r3, #192	@ 0xc0
 801e05e:	f200 8088 	bhi.w	801e172 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801e062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e064:	2b80      	cmp	r3, #128	@ 0x80
 801e066:	d032      	beq.n	801e0ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801e068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e06a:	2b80      	cmp	r3, #128	@ 0x80
 801e06c:	f200 8081 	bhi.w	801e172 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801e070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e072:	2b00      	cmp	r3, #0
 801e074:	d003      	beq.n	801e07e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801e076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e078:	2b40      	cmp	r3, #64	@ 0x40
 801e07a:	d014      	beq.n	801e0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 801e07c:	e079      	b.n	801e172 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e07e:	4b3f      	ldr	r3, [pc, #252]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e086:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e08a:	d108      	bne.n	801e09e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e08c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e090:	4618      	mov	r0, r3
 801e092:	f000 ff67 	bl	801ef64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e09a:	f000 bc9c 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e09e:	2300      	movs	r3, #0
 801e0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e0a2:	f000 bc98 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e0a6:	4b35      	ldr	r3, [pc, #212]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e0ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e0b2:	d108      	bne.n	801e0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e0b4:	f107 0318 	add.w	r3, r7, #24
 801e0b8:	4618      	mov	r0, r3
 801e0ba:	f000 fcab 	bl	801ea14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e0be:	69bb      	ldr	r3, [r7, #24]
 801e0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e0c2:	f000 bc88 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e0c6:	2300      	movs	r3, #0
 801e0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e0ca:	f000 bc84 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e0ce:	4b2b      	ldr	r3, [pc, #172]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e0d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e0da:	d108      	bne.n	801e0ee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e0dc:	f107 030c 	add.w	r3, r7, #12
 801e0e0:	4618      	mov	r0, r3
 801e0e2:	f000 fdeb 	bl	801ecbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801e0e6:	68fb      	ldr	r3, [r7, #12]
 801e0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e0ea:	f000 bc74 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e0ee:	2300      	movs	r3, #0
 801e0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e0f2:	f000 bc70 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e0f6:	4b21      	ldr	r3, [pc, #132]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e0f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e0fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e0fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e100:	4b1e      	ldr	r3, [pc, #120]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	f003 0304 	and.w	r3, r3, #4
 801e108:	2b04      	cmp	r3, #4
 801e10a:	d10c      	bne.n	801e126 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 801e10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d109      	bne.n	801e126 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e112:	4b1a      	ldr	r3, [pc, #104]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e114:	681b      	ldr	r3, [r3, #0]
 801e116:	08db      	lsrs	r3, r3, #3
 801e118:	f003 0303 	and.w	r3, r3, #3
 801e11c:	4a18      	ldr	r2, [pc, #96]	@ (801e180 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801e11e:	fa22 f303 	lsr.w	r3, r2, r3
 801e122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e124:	e01f      	b.n	801e166 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e126:	4b15      	ldr	r3, [pc, #84]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e128:	681b      	ldr	r3, [r3, #0]
 801e12a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e12e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e132:	d106      	bne.n	801e142 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 801e134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e13a:	d102      	bne.n	801e142 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e13c:	4b11      	ldr	r3, [pc, #68]	@ (801e184 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801e13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e140:	e011      	b.n	801e166 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e142:	4b0e      	ldr	r3, [pc, #56]	@ (801e17c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e144:	681b      	ldr	r3, [r3, #0]
 801e146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e14a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e14e:	d106      	bne.n	801e15e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 801e150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e156:	d102      	bne.n	801e15e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e158:	4b0b      	ldr	r3, [pc, #44]	@ (801e188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801e15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e15c:	e003      	b.n	801e166 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e15e:	2300      	movs	r3, #0
 801e160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e162:	f000 bc38 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e166:	f000 bc36 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e16a:	4b08      	ldr	r3, [pc, #32]	@ (801e18c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801e16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e16e:	f000 bc32 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801e172:	2300      	movs	r3, #0
 801e174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e176:	f000 bc2e 	b.w	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e17a:	bf00      	nop
 801e17c:	58024400 	.word	0x58024400
 801e180:	03d09000 	.word	0x03d09000
 801e184:	003d0900 	.word	0x003d0900
 801e188:	017d7840 	.word	0x017d7840
 801e18c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801e190:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e194:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 801e198:	430b      	orrs	r3, r1
 801e19a:	f040 809c 	bne.w	801e2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801e19e:	4b9e      	ldr	r3, [pc, #632]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e1a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e1a2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801e1a6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801e1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e1ae:	d054      	beq.n	801e25a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 801e1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e1b6:	f200 808b 	bhi.w	801e2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801e1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e1c0:	f000 8083 	beq.w	801e2ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 801e1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e1ca:	f200 8081 	bhi.w	801e2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801e1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e1d4:	d02f      	beq.n	801e236 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 801e1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e1dc:	d878      	bhi.n	801e2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801e1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d004      	beq.n	801e1ee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 801e1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e1ea:	d012      	beq.n	801e212 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 801e1ec:	e070      	b.n	801e2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e1ee:	4b8a      	ldr	r3, [pc, #552]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e1f0:	681b      	ldr	r3, [r3, #0]
 801e1f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e1f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e1fa:	d107      	bne.n	801e20c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e1fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e200:	4618      	mov	r0, r3
 801e202:	f000 feaf 	bl	801ef64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e20a:	e3e4      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e20c:	2300      	movs	r3, #0
 801e20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e210:	e3e1      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e212:	4b81      	ldr	r3, [pc, #516]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e214:	681b      	ldr	r3, [r3, #0]
 801e216:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e21a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e21e:	d107      	bne.n	801e230 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e220:	f107 0318 	add.w	r3, r7, #24
 801e224:	4618      	mov	r0, r3
 801e226:	f000 fbf5 	bl	801ea14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e22a:	69bb      	ldr	r3, [r7, #24]
 801e22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e22e:	e3d2      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e230:	2300      	movs	r3, #0
 801e232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e234:	e3cf      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e236:	4b78      	ldr	r3, [pc, #480]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e23e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e242:	d107      	bne.n	801e254 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e244:	f107 030c 	add.w	r3, r7, #12
 801e248:	4618      	mov	r0, r3
 801e24a:	f000 fd37 	bl	801ecbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801e24e:	68fb      	ldr	r3, [r7, #12]
 801e250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e252:	e3c0      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e254:	2300      	movs	r3, #0
 801e256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e258:	e3bd      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e25a:	4b6f      	ldr	r3, [pc, #444]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e25c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e25e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e262:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e264:	4b6c      	ldr	r3, [pc, #432]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e266:	681b      	ldr	r3, [r3, #0]
 801e268:	f003 0304 	and.w	r3, r3, #4
 801e26c:	2b04      	cmp	r3, #4
 801e26e:	d10c      	bne.n	801e28a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 801e270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e272:	2b00      	cmp	r3, #0
 801e274:	d109      	bne.n	801e28a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e276:	4b68      	ldr	r3, [pc, #416]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	08db      	lsrs	r3, r3, #3
 801e27c:	f003 0303 	and.w	r3, r3, #3
 801e280:	4a66      	ldr	r2, [pc, #408]	@ (801e41c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801e282:	fa22 f303 	lsr.w	r3, r2, r3
 801e286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e288:	e01e      	b.n	801e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e28a:	4b63      	ldr	r3, [pc, #396]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e296:	d106      	bne.n	801e2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 801e298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e29a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e29e:	d102      	bne.n	801e2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e2a0:	4b5f      	ldr	r3, [pc, #380]	@ (801e420 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801e2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e2a4:	e010      	b.n	801e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e2a6:	4b5c      	ldr	r3, [pc, #368]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e2ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e2b2:	d106      	bne.n	801e2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 801e2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e2b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e2ba:	d102      	bne.n	801e2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e2bc:	4b59      	ldr	r3, [pc, #356]	@ (801e424 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801e2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e2c0:	e002      	b.n	801e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e2c2:	2300      	movs	r3, #0
 801e2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e2c6:	e386      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e2c8:	e385      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e2ca:	4b57      	ldr	r3, [pc, #348]	@ (801e428 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801e2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e2ce:	e382      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801e2d0:	2300      	movs	r3, #0
 801e2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e2d4:	e37f      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801e2d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e2da:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801e2de:	430b      	orrs	r3, r1
 801e2e0:	f040 80a7 	bne.w	801e432 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801e2e4:	4b4c      	ldr	r3, [pc, #304]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e2e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e2e8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801e2ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801e2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e2f4:	d055      	beq.n	801e3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 801e2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e2fc:	f200 8096 	bhi.w	801e42c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801e300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e302:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e306:	f000 8084 	beq.w	801e412 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801e30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e30c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e310:	f200 808c 	bhi.w	801e42c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801e314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e31a:	d030      	beq.n	801e37e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 801e31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e31e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e322:	f200 8083 	bhi.w	801e42c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801e326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d004      	beq.n	801e336 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801e32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e32e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e332:	d012      	beq.n	801e35a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 801e334:	e07a      	b.n	801e42c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e336:	4b38      	ldr	r3, [pc, #224]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e33e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e342:	d107      	bne.n	801e354 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e348:	4618      	mov	r0, r3
 801e34a:	f000 fe0b 	bl	801ef64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e352:	e340      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e354:	2300      	movs	r3, #0
 801e356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e358:	e33d      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e35a:	4b2f      	ldr	r3, [pc, #188]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e366:	d107      	bne.n	801e378 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e368:	f107 0318 	add.w	r3, r7, #24
 801e36c:	4618      	mov	r0, r3
 801e36e:	f000 fb51 	bl	801ea14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e372:	69bb      	ldr	r3, [r7, #24]
 801e374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e376:	e32e      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e378:	2300      	movs	r3, #0
 801e37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e37c:	e32b      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e37e:	4b26      	ldr	r3, [pc, #152]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e38a:	d107      	bne.n	801e39c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e38c:	f107 030c 	add.w	r3, r7, #12
 801e390:	4618      	mov	r0, r3
 801e392:	f000 fc93 	bl	801ecbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801e396:	68fb      	ldr	r3, [r7, #12]
 801e398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e39a:	e31c      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e39c:	2300      	movs	r3, #0
 801e39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e3a0:	e319      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e3a2:	4b1d      	ldr	r3, [pc, #116]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e3a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e3a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e3aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e3ac:	4b1a      	ldr	r3, [pc, #104]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e3ae:	681b      	ldr	r3, [r3, #0]
 801e3b0:	f003 0304 	and.w	r3, r3, #4
 801e3b4:	2b04      	cmp	r3, #4
 801e3b6:	d10c      	bne.n	801e3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 801e3b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	d109      	bne.n	801e3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e3be:	4b16      	ldr	r3, [pc, #88]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	08db      	lsrs	r3, r3, #3
 801e3c4:	f003 0303 	and.w	r3, r3, #3
 801e3c8:	4a14      	ldr	r2, [pc, #80]	@ (801e41c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801e3ca:	fa22 f303 	lsr.w	r3, r2, r3
 801e3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e3d0:	e01e      	b.n	801e410 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e3d2:	4b11      	ldr	r3, [pc, #68]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e3d4:	681b      	ldr	r3, [r3, #0]
 801e3d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e3da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e3de:	d106      	bne.n	801e3ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801e3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e3e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e3e6:	d102      	bne.n	801e3ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e3e8:	4b0d      	ldr	r3, [pc, #52]	@ (801e420 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801e3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e3ec:	e010      	b.n	801e410 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e3ee:	4b0a      	ldr	r3, [pc, #40]	@ (801e418 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e3f0:	681b      	ldr	r3, [r3, #0]
 801e3f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e3f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e3fa:	d106      	bne.n	801e40a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 801e3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e3fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e402:	d102      	bne.n	801e40a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e404:	4b07      	ldr	r3, [pc, #28]	@ (801e424 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801e406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e408:	e002      	b.n	801e410 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e40a:	2300      	movs	r3, #0
 801e40c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e40e:	e2e2      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e410:	e2e1      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e412:	4b05      	ldr	r3, [pc, #20]	@ (801e428 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801e414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e416:	e2de      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e418:	58024400 	.word	0x58024400
 801e41c:	03d09000 	.word	0x03d09000
 801e420:	003d0900 	.word	0x003d0900
 801e424:	017d7840 	.word	0x017d7840
 801e428:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 801e42c:	2300      	movs	r3, #0
 801e42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e430:	e2d1      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801e432:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e436:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801e43a:	430b      	orrs	r3, r1
 801e43c:	f040 809c 	bne.w	801e578 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801e440:	4b93      	ldr	r3, [pc, #588]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e444:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801e448:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801e44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e44c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e450:	d054      	beq.n	801e4fc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 801e452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e454:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e458:	f200 808b 	bhi.w	801e572 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801e45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e45e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e462:	f000 8083 	beq.w	801e56c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 801e466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e468:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e46c:	f200 8081 	bhi.w	801e572 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801e470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e476:	d02f      	beq.n	801e4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 801e478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e47a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e47e:	d878      	bhi.n	801e572 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801e480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e482:	2b00      	cmp	r3, #0
 801e484:	d004      	beq.n	801e490 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801e486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e48c:	d012      	beq.n	801e4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 801e48e:	e070      	b.n	801e572 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e490:	4b7f      	ldr	r3, [pc, #508]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e49c:	d107      	bne.n	801e4ae <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e49e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e4a2:	4618      	mov	r0, r3
 801e4a4:	f000 fd5e 	bl	801ef64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e4ac:	e293      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e4ae:	2300      	movs	r3, #0
 801e4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e4b2:	e290      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e4b4:	4b76      	ldr	r3, [pc, #472]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e4bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e4c0:	d107      	bne.n	801e4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e4c2:	f107 0318 	add.w	r3, r7, #24
 801e4c6:	4618      	mov	r0, r3
 801e4c8:	f000 faa4 	bl	801ea14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e4cc:	69bb      	ldr	r3, [r7, #24]
 801e4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e4d0:	e281      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e4d2:	2300      	movs	r3, #0
 801e4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e4d6:	e27e      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e4d8:	4b6d      	ldr	r3, [pc, #436]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e4da:	681b      	ldr	r3, [r3, #0]
 801e4dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e4e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e4e4:	d107      	bne.n	801e4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e4e6:	f107 030c 	add.w	r3, r7, #12
 801e4ea:	4618      	mov	r0, r3
 801e4ec:	f000 fbe6 	bl	801ecbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801e4f0:	68fb      	ldr	r3, [r7, #12]
 801e4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e4f4:	e26f      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e4f6:	2300      	movs	r3, #0
 801e4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e4fa:	e26c      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e4fc:	4b64      	ldr	r3, [pc, #400]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e4fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e500:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e504:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e506:	4b62      	ldr	r3, [pc, #392]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	f003 0304 	and.w	r3, r3, #4
 801e50e:	2b04      	cmp	r3, #4
 801e510:	d10c      	bne.n	801e52c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 801e512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e514:	2b00      	cmp	r3, #0
 801e516:	d109      	bne.n	801e52c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e518:	4b5d      	ldr	r3, [pc, #372]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e51a:	681b      	ldr	r3, [r3, #0]
 801e51c:	08db      	lsrs	r3, r3, #3
 801e51e:	f003 0303 	and.w	r3, r3, #3
 801e522:	4a5c      	ldr	r2, [pc, #368]	@ (801e694 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801e524:	fa22 f303 	lsr.w	r3, r2, r3
 801e528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e52a:	e01e      	b.n	801e56a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e52c:	4b58      	ldr	r3, [pc, #352]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e538:	d106      	bne.n	801e548 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801e53a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e53c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e540:	d102      	bne.n	801e548 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e542:	4b55      	ldr	r3, [pc, #340]	@ (801e698 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801e544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e546:	e010      	b.n	801e56a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e548:	4b51      	ldr	r3, [pc, #324]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e554:	d106      	bne.n	801e564 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801e556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e55c:	d102      	bne.n	801e564 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e55e:	4b4f      	ldr	r3, [pc, #316]	@ (801e69c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801e560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e562:	e002      	b.n	801e56a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e564:	2300      	movs	r3, #0
 801e566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e568:	e235      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e56a:	e234      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e56c:	4b4c      	ldr	r3, [pc, #304]	@ (801e6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801e56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e570:	e231      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801e572:	2300      	movs	r3, #0
 801e574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e576:	e22e      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801e578:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e57c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801e580:	430b      	orrs	r3, r1
 801e582:	f040 808f 	bne.w	801e6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801e586:	4b42      	ldr	r3, [pc, #264]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e58a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801e58e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801e590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e592:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e596:	d06b      	beq.n	801e670 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 801e598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e59a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e59e:	d874      	bhi.n	801e68a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801e5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e5a6:	d056      	beq.n	801e656 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 801e5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e5ae:	d86c      	bhi.n	801e68a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801e5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e5b6:	d03b      	beq.n	801e630 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 801e5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e5be:	d864      	bhi.n	801e68a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801e5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e5c6:	d021      	beq.n	801e60c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801e5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e5ce:	d85c      	bhi.n	801e68a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801e5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	d004      	beq.n	801e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801e5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e5dc:	d004      	beq.n	801e5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801e5de:	e054      	b.n	801e68a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801e5e0:	f7fe fa20 	bl	801ca24 <HAL_RCC_GetPCLK1Freq>
 801e5e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801e5e6:	e1f6      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e5e8:	4b29      	ldr	r3, [pc, #164]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e5f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e5f4:	d107      	bne.n	801e606 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e5f6:	f107 0318 	add.w	r3, r7, #24
 801e5fa:	4618      	mov	r0, r3
 801e5fc:	f000 fa0a 	bl	801ea14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801e600:	69fb      	ldr	r3, [r7, #28]
 801e602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e604:	e1e7      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e606:	2300      	movs	r3, #0
 801e608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e60a:	e1e4      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e60c:	4b20      	ldr	r3, [pc, #128]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e60e:	681b      	ldr	r3, [r3, #0]
 801e610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e618:	d107      	bne.n	801e62a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e61a:	f107 030c 	add.w	r3, r7, #12
 801e61e:	4618      	mov	r0, r3
 801e620:	f000 fb4c 	bl	801ecbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801e624:	693b      	ldr	r3, [r7, #16]
 801e626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e628:	e1d5      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e62a:	2300      	movs	r3, #0
 801e62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e62e:	e1d2      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801e630:	4b17      	ldr	r3, [pc, #92]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	f003 0304 	and.w	r3, r3, #4
 801e638:	2b04      	cmp	r3, #4
 801e63a:	d109      	bne.n	801e650 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e63c:	4b14      	ldr	r3, [pc, #80]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e63e:	681b      	ldr	r3, [r3, #0]
 801e640:	08db      	lsrs	r3, r3, #3
 801e642:	f003 0303 	and.w	r3, r3, #3
 801e646:	4a13      	ldr	r2, [pc, #76]	@ (801e694 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801e648:	fa22 f303 	lsr.w	r3, r2, r3
 801e64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e64e:	e1c2      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e650:	2300      	movs	r3, #0
 801e652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e654:	e1bf      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801e656:	4b0e      	ldr	r3, [pc, #56]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e65e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e662:	d102      	bne.n	801e66a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 801e664:	4b0c      	ldr	r3, [pc, #48]	@ (801e698 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801e666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e668:	e1b5      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e66a:	2300      	movs	r3, #0
 801e66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e66e:	e1b2      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801e670:	4b07      	ldr	r3, [pc, #28]	@ (801e690 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e67c:	d102      	bne.n	801e684 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801e67e:	4b07      	ldr	r3, [pc, #28]	@ (801e69c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801e680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e682:	e1a8      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e684:	2300      	movs	r3, #0
 801e686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e688:	e1a5      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801e68a:	2300      	movs	r3, #0
 801e68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e68e:	e1a2      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e690:	58024400 	.word	0x58024400
 801e694:	03d09000 	.word	0x03d09000
 801e698:	003d0900 	.word	0x003d0900
 801e69c:	017d7840 	.word	0x017d7840
 801e6a0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801e6a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e6a8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801e6ac:	430b      	orrs	r3, r1
 801e6ae:	d173      	bne.n	801e798 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801e6b0:	4b9c      	ldr	r3, [pc, #624]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e6b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e6b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801e6b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801e6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e6c0:	d02f      	beq.n	801e722 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801e6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e6c8:	d863      	bhi.n	801e792 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801e6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6cc:	2b00      	cmp	r3, #0
 801e6ce:	d004      	beq.n	801e6da <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 801e6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e6d6:	d012      	beq.n	801e6fe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 801e6d8:	e05b      	b.n	801e792 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e6da:	4b92      	ldr	r3, [pc, #584]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e6dc:	681b      	ldr	r3, [r3, #0]
 801e6de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e6e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e6e6:	d107      	bne.n	801e6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e6e8:	f107 0318 	add.w	r3, r7, #24
 801e6ec:	4618      	mov	r0, r3
 801e6ee:	f000 f991 	bl	801ea14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e6f2:	69bb      	ldr	r3, [r7, #24]
 801e6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e6f6:	e16e      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e6f8:	2300      	movs	r3, #0
 801e6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e6fc:	e16b      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e6fe:	4b89      	ldr	r3, [pc, #548]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e706:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e70a:	d107      	bne.n	801e71c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e70c:	f107 030c 	add.w	r3, r7, #12
 801e710:	4618      	mov	r0, r3
 801e712:	f000 fad3 	bl	801ecbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801e716:	697b      	ldr	r3, [r7, #20]
 801e718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e71a:	e15c      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e71c:	2300      	movs	r3, #0
 801e71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e720:	e159      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e722:	4b80      	ldr	r3, [pc, #512]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e726:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e72a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e72c:	4b7d      	ldr	r3, [pc, #500]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	f003 0304 	and.w	r3, r3, #4
 801e734:	2b04      	cmp	r3, #4
 801e736:	d10c      	bne.n	801e752 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801e738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d109      	bne.n	801e752 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e73e:	4b79      	ldr	r3, [pc, #484]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e740:	681b      	ldr	r3, [r3, #0]
 801e742:	08db      	lsrs	r3, r3, #3
 801e744:	f003 0303 	and.w	r3, r3, #3
 801e748:	4a77      	ldr	r2, [pc, #476]	@ (801e928 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801e74a:	fa22 f303 	lsr.w	r3, r2, r3
 801e74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e750:	e01e      	b.n	801e790 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e752:	4b74      	ldr	r3, [pc, #464]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e75a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e75e:	d106      	bne.n	801e76e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 801e760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e766:	d102      	bne.n	801e76e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e768:	4b70      	ldr	r3, [pc, #448]	@ (801e92c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801e76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e76c:	e010      	b.n	801e790 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e76e:	4b6d      	ldr	r3, [pc, #436]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e770:	681b      	ldr	r3, [r3, #0]
 801e772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e776:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e77a:	d106      	bne.n	801e78a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 801e77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e77e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e782:	d102      	bne.n	801e78a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e784:	4b6a      	ldr	r3, [pc, #424]	@ (801e930 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801e786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e788:	e002      	b.n	801e790 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e78a:	2300      	movs	r3, #0
 801e78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e78e:	e122      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e790:	e121      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801e792:	2300      	movs	r3, #0
 801e794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e796:	e11e      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801e798:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e79c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801e7a0:	430b      	orrs	r3, r1
 801e7a2:	d133      	bne.n	801e80c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801e7a4:	4b5f      	ldr	r3, [pc, #380]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e7a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e7a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e7ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801e7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d004      	beq.n	801e7be <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801e7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e7ba:	d012      	beq.n	801e7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801e7bc:	e023      	b.n	801e806 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e7be:	4b59      	ldr	r3, [pc, #356]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e7c0:	681b      	ldr	r3, [r3, #0]
 801e7c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e7c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e7ca:	d107      	bne.n	801e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e7cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e7d0:	4618      	mov	r0, r3
 801e7d2:	f000 fbc7 	bl	801ef64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e7da:	e0fc      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e7dc:	2300      	movs	r3, #0
 801e7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e7e0:	e0f9      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e7e2:	4b50      	ldr	r3, [pc, #320]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e7e4:	681b      	ldr	r3, [r3, #0]
 801e7e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e7ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e7ee:	d107      	bne.n	801e800 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e7f0:	f107 0318 	add.w	r3, r7, #24
 801e7f4:	4618      	mov	r0, r3
 801e7f6:	f000 f90d 	bl	801ea14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801e7fa:	6a3b      	ldr	r3, [r7, #32]
 801e7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e7fe:	e0ea      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e800:	2300      	movs	r3, #0
 801e802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e804:	e0e7      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801e806:	2300      	movs	r3, #0
 801e808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e80a:	e0e4      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801e80c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e810:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801e814:	430b      	orrs	r3, r1
 801e816:	f040 808d 	bne.w	801e934 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801e81a:	4b42      	ldr	r3, [pc, #264]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e81c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e81e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801e822:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801e824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e82a:	d06b      	beq.n	801e904 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801e82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e82e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e832:	d874      	bhi.n	801e91e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801e834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e83a:	d056      	beq.n	801e8ea <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 801e83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e83e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e842:	d86c      	bhi.n	801e91e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801e844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e846:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e84a:	d03b      	beq.n	801e8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 801e84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e84e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e852:	d864      	bhi.n	801e91e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801e854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e85a:	d021      	beq.n	801e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 801e85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e85e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e862:	d85c      	bhi.n	801e91e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801e864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e866:	2b00      	cmp	r3, #0
 801e868:	d004      	beq.n	801e874 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801e86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e86c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e870:	d004      	beq.n	801e87c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801e872:	e054      	b.n	801e91e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801e874:	f000 f8b8 	bl	801e9e8 <HAL_RCCEx_GetD3PCLK1Freq>
 801e878:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801e87a:	e0ac      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e87c:	4b29      	ldr	r3, [pc, #164]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e888:	d107      	bne.n	801e89a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e88a:	f107 0318 	add.w	r3, r7, #24
 801e88e:	4618      	mov	r0, r3
 801e890:	f000 f8c0 	bl	801ea14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801e894:	69fb      	ldr	r3, [r7, #28]
 801e896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e898:	e09d      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e89a:	2300      	movs	r3, #0
 801e89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e89e:	e09a      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e8a0:	4b20      	ldr	r3, [pc, #128]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e8a2:	681b      	ldr	r3, [r3, #0]
 801e8a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e8a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e8ac:	d107      	bne.n	801e8be <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e8ae:	f107 030c 	add.w	r3, r7, #12
 801e8b2:	4618      	mov	r0, r3
 801e8b4:	f000 fa02 	bl	801ecbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801e8b8:	693b      	ldr	r3, [r7, #16]
 801e8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e8bc:	e08b      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e8be:	2300      	movs	r3, #0
 801e8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e8c2:	e088      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801e8c4:	4b17      	ldr	r3, [pc, #92]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	f003 0304 	and.w	r3, r3, #4
 801e8cc:	2b04      	cmp	r3, #4
 801e8ce:	d109      	bne.n	801e8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e8d0:	4b14      	ldr	r3, [pc, #80]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	08db      	lsrs	r3, r3, #3
 801e8d6:	f003 0303 	and.w	r3, r3, #3
 801e8da:	4a13      	ldr	r2, [pc, #76]	@ (801e928 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801e8dc:	fa22 f303 	lsr.w	r3, r2, r3
 801e8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e8e2:	e078      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e8e4:	2300      	movs	r3, #0
 801e8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e8e8:	e075      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801e8ea:	4b0e      	ldr	r3, [pc, #56]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e8ec:	681b      	ldr	r3, [r3, #0]
 801e8ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e8f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e8f6:	d102      	bne.n	801e8fe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 801e8f8:	4b0c      	ldr	r3, [pc, #48]	@ (801e92c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801e8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e8fc:	e06b      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e8fe:	2300      	movs	r3, #0
 801e900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e902:	e068      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801e904:	4b07      	ldr	r3, [pc, #28]	@ (801e924 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e90c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e910:	d102      	bne.n	801e918 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801e912:	4b07      	ldr	r3, [pc, #28]	@ (801e930 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801e914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e916:	e05e      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e918:	2300      	movs	r3, #0
 801e91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e91c:	e05b      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801e91e:	2300      	movs	r3, #0
 801e920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e922:	e058      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e924:	58024400 	.word	0x58024400
 801e928:	03d09000 	.word	0x03d09000
 801e92c:	003d0900 	.word	0x003d0900
 801e930:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801e934:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e938:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 801e93c:	430b      	orrs	r3, r1
 801e93e:	d148      	bne.n	801e9d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801e940:	4b27      	ldr	r3, [pc, #156]	@ (801e9e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801e942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e944:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e948:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801e94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e94c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e950:	d02a      	beq.n	801e9a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801e952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e958:	d838      	bhi.n	801e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801e95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d004      	beq.n	801e96a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 801e960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e962:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e966:	d00d      	beq.n	801e984 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 801e968:	e030      	b.n	801e9cc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801e96a:	4b1d      	ldr	r3, [pc, #116]	@ (801e9e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801e96c:	681b      	ldr	r3, [r3, #0]
 801e96e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e972:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e976:	d102      	bne.n	801e97e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 801e978:	4b1a      	ldr	r3, [pc, #104]	@ (801e9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 801e97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e97c:	e02b      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e97e:	2300      	movs	r3, #0
 801e980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e982:	e028      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e984:	4b16      	ldr	r3, [pc, #88]	@ (801e9e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801e986:	681b      	ldr	r3, [r3, #0]
 801e988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e98c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e990:	d107      	bne.n	801e9a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e996:	4618      	mov	r0, r3
 801e998:	f000 fae4 	bl	801ef64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e9a0:	e019      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e9a2:	2300      	movs	r3, #0
 801e9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e9a6:	e016      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e9a8:	4b0d      	ldr	r3, [pc, #52]	@ (801e9e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e9b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e9b4:	d107      	bne.n	801e9c6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e9b6:	f107 0318 	add.w	r3, r7, #24
 801e9ba:	4618      	mov	r0, r3
 801e9bc:	f000 f82a 	bl	801ea14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801e9c0:	69fb      	ldr	r3, [r7, #28]
 801e9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e9c4:	e007      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e9c6:	2300      	movs	r3, #0
 801e9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e9ca:	e004      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801e9cc:	2300      	movs	r3, #0
 801e9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e9d0:	e001      	b.n	801e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801e9d2:	2300      	movs	r3, #0
 801e9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801e9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801e9d8:	4618      	mov	r0, r3
 801e9da:	3740      	adds	r7, #64	@ 0x40
 801e9dc:	46bd      	mov	sp, r7
 801e9de:	bd80      	pop	{r7, pc}
 801e9e0:	58024400 	.word	0x58024400
 801e9e4:	017d7840 	.word	0x017d7840

0801e9e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801e9e8:	b580      	push	{r7, lr}
 801e9ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801e9ec:	f7fd ffea 	bl	801c9c4 <HAL_RCC_GetHCLKFreq>
 801e9f0:	4602      	mov	r2, r0
 801e9f2:	4b06      	ldr	r3, [pc, #24]	@ (801ea0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801e9f4:	6a1b      	ldr	r3, [r3, #32]
 801e9f6:	091b      	lsrs	r3, r3, #4
 801e9f8:	f003 0307 	and.w	r3, r3, #7
 801e9fc:	4904      	ldr	r1, [pc, #16]	@ (801ea10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801e9fe:	5ccb      	ldrb	r3, [r1, r3]
 801ea00:	f003 031f 	and.w	r3, r3, #31
 801ea04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801ea08:	4618      	mov	r0, r3
 801ea0a:	bd80      	pop	{r7, pc}
 801ea0c:	58024400 	.word	0x58024400
 801ea10:	0802644c 	.word	0x0802644c

0801ea14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801ea14:	b480      	push	{r7}
 801ea16:	b089      	sub	sp, #36	@ 0x24
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ea1c:	4ba1      	ldr	r3, [pc, #644]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ea20:	f003 0303 	and.w	r3, r3, #3
 801ea24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801ea26:	4b9f      	ldr	r3, [pc, #636]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ea2a:	0b1b      	lsrs	r3, r3, #12
 801ea2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ea30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801ea32:	4b9c      	ldr	r3, [pc, #624]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ea36:	091b      	lsrs	r3, r3, #4
 801ea38:	f003 0301 	and.w	r3, r3, #1
 801ea3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801ea3e:	4b99      	ldr	r3, [pc, #612]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ea42:	08db      	lsrs	r3, r3, #3
 801ea44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ea48:	693a      	ldr	r2, [r7, #16]
 801ea4a:	fb02 f303 	mul.w	r3, r2, r3
 801ea4e:	ee07 3a90 	vmov	s15, r3
 801ea52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801ea5a:	697b      	ldr	r3, [r7, #20]
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	f000 8111 	beq.w	801ec84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801ea62:	69bb      	ldr	r3, [r7, #24]
 801ea64:	2b02      	cmp	r3, #2
 801ea66:	f000 8083 	beq.w	801eb70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801ea6a:	69bb      	ldr	r3, [r7, #24]
 801ea6c:	2b02      	cmp	r3, #2
 801ea6e:	f200 80a1 	bhi.w	801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801ea72:	69bb      	ldr	r3, [r7, #24]
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	d003      	beq.n	801ea80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801ea78:	69bb      	ldr	r3, [r7, #24]
 801ea7a:	2b01      	cmp	r3, #1
 801ea7c:	d056      	beq.n	801eb2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801ea7e:	e099      	b.n	801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ea80:	4b88      	ldr	r3, [pc, #544]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea82:	681b      	ldr	r3, [r3, #0]
 801ea84:	f003 0320 	and.w	r3, r3, #32
 801ea88:	2b00      	cmp	r3, #0
 801ea8a:	d02d      	beq.n	801eae8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ea8c:	4b85      	ldr	r3, [pc, #532]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea8e:	681b      	ldr	r3, [r3, #0]
 801ea90:	08db      	lsrs	r3, r3, #3
 801ea92:	f003 0303 	and.w	r3, r3, #3
 801ea96:	4a84      	ldr	r2, [pc, #528]	@ (801eca8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801ea98:	fa22 f303 	lsr.w	r3, r2, r3
 801ea9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ea9e:	68bb      	ldr	r3, [r7, #8]
 801eaa0:	ee07 3a90 	vmov	s15, r3
 801eaa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eaa8:	697b      	ldr	r3, [r7, #20]
 801eaaa:	ee07 3a90 	vmov	s15, r3
 801eaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eab6:	4b7b      	ldr	r3, [pc, #492]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eaba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eabe:	ee07 3a90 	vmov	s15, r3
 801eac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eac6:	ed97 6a03 	vldr	s12, [r7, #12]
 801eaca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801ecac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801eace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ead2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ead6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eade:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eae2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801eae6:	e087      	b.n	801ebf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801eae8:	697b      	ldr	r3, [r7, #20]
 801eaea:	ee07 3a90 	vmov	s15, r3
 801eaee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eaf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801ecb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801eaf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eafa:	4b6a      	ldr	r3, [pc, #424]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eb02:	ee07 3a90 	vmov	s15, r3
 801eb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eb0a:	ed97 6a03 	vldr	s12, [r7, #12]
 801eb0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801ecac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801eb12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eb16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eb1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eb26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801eb2a:	e065      	b.n	801ebf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801eb2c:	697b      	ldr	r3, [r7, #20]
 801eb2e:	ee07 3a90 	vmov	s15, r3
 801eb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801ecb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801eb3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eb3e:	4b59      	ldr	r3, [pc, #356]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eb46:	ee07 3a90 	vmov	s15, r3
 801eb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eb4e:	ed97 6a03 	vldr	s12, [r7, #12]
 801eb52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801ecac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801eb56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eb5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eb5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eb62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eb66:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eb6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801eb6e:	e043      	b.n	801ebf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801eb70:	697b      	ldr	r3, [r7, #20]
 801eb72:	ee07 3a90 	vmov	s15, r3
 801eb76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801ecb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801eb7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eb82:	4b48      	ldr	r3, [pc, #288]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eb8a:	ee07 3a90 	vmov	s15, r3
 801eb8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eb92:	ed97 6a03 	vldr	s12, [r7, #12]
 801eb96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801ecac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801eb9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eb9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ebaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ebae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ebb2:	e021      	b.n	801ebf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ebb4:	697b      	ldr	r3, [r7, #20]
 801ebb6:	ee07 3a90 	vmov	s15, r3
 801ebba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ebbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ecb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801ebc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ebc6:	4b37      	ldr	r3, [pc, #220]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ebc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ebca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ebce:	ee07 3a90 	vmov	s15, r3
 801ebd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ebd6:	ed97 6a03 	vldr	s12, [r7, #12]
 801ebda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801ecac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ebde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ebe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ebe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ebea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ebee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ebf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ebf6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801ebf8:	4b2a      	ldr	r3, [pc, #168]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ebfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ebfc:	0a5b      	lsrs	r3, r3, #9
 801ebfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ec02:	ee07 3a90 	vmov	s15, r3
 801ec06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ec0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ec12:	edd7 6a07 	vldr	s13, [r7, #28]
 801ec16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ec1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ec1e:	ee17 2a90 	vmov	r2, s15
 801ec22:	687b      	ldr	r3, [r7, #4]
 801ec24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801ec26:	4b1f      	ldr	r3, [pc, #124]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ec28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec2a:	0c1b      	lsrs	r3, r3, #16
 801ec2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ec30:	ee07 3a90 	vmov	s15, r3
 801ec34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ec3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ec40:	edd7 6a07 	vldr	s13, [r7, #28]
 801ec44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ec48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ec4c:	ee17 2a90 	vmov	r2, s15
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801ec54:	4b13      	ldr	r3, [pc, #76]	@ (801eca4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ec56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec58:	0e1b      	lsrs	r3, r3, #24
 801ec5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ec5e:	ee07 3a90 	vmov	s15, r3
 801ec62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ec6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ec6e:	edd7 6a07 	vldr	s13, [r7, #28]
 801ec72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ec76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ec7a:	ee17 2a90 	vmov	r2, s15
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801ec82:	e008      	b.n	801ec96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	2200      	movs	r2, #0
 801ec88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	2200      	movs	r2, #0
 801ec8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	2200      	movs	r2, #0
 801ec94:	609a      	str	r2, [r3, #8]
}
 801ec96:	bf00      	nop
 801ec98:	3724      	adds	r7, #36	@ 0x24
 801ec9a:	46bd      	mov	sp, r7
 801ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eca0:	4770      	bx	lr
 801eca2:	bf00      	nop
 801eca4:	58024400 	.word	0x58024400
 801eca8:	03d09000 	.word	0x03d09000
 801ecac:	46000000 	.word	0x46000000
 801ecb0:	4c742400 	.word	0x4c742400
 801ecb4:	4a742400 	.word	0x4a742400
 801ecb8:	4bbebc20 	.word	0x4bbebc20

0801ecbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801ecbc:	b480      	push	{r7}
 801ecbe:	b089      	sub	sp, #36	@ 0x24
 801ecc0:	af00      	add	r7, sp, #0
 801ecc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ecc4:	4ba1      	ldr	r3, [pc, #644]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ecc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecc8:	f003 0303 	and.w	r3, r3, #3
 801eccc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801ecce:	4b9f      	ldr	r3, [pc, #636]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ecd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecd2:	0d1b      	lsrs	r3, r3, #20
 801ecd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ecd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801ecda:	4b9c      	ldr	r3, [pc, #624]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ecdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ecde:	0a1b      	lsrs	r3, r3, #8
 801ece0:	f003 0301 	and.w	r3, r3, #1
 801ece4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801ece6:	4b99      	ldr	r3, [pc, #612]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ece8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ecea:	08db      	lsrs	r3, r3, #3
 801ecec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ecf0:	693a      	ldr	r2, [r7, #16]
 801ecf2:	fb02 f303 	mul.w	r3, r2, r3
 801ecf6:	ee07 3a90 	vmov	s15, r3
 801ecfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801ed02:	697b      	ldr	r3, [r7, #20]
 801ed04:	2b00      	cmp	r3, #0
 801ed06:	f000 8111 	beq.w	801ef2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801ed0a:	69bb      	ldr	r3, [r7, #24]
 801ed0c:	2b02      	cmp	r3, #2
 801ed0e:	f000 8083 	beq.w	801ee18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801ed12:	69bb      	ldr	r3, [r7, #24]
 801ed14:	2b02      	cmp	r3, #2
 801ed16:	f200 80a1 	bhi.w	801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801ed1a:	69bb      	ldr	r3, [r7, #24]
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d003      	beq.n	801ed28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801ed20:	69bb      	ldr	r3, [r7, #24]
 801ed22:	2b01      	cmp	r3, #1
 801ed24:	d056      	beq.n	801edd4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801ed26:	e099      	b.n	801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ed28:	4b88      	ldr	r3, [pc, #544]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ed2a:	681b      	ldr	r3, [r3, #0]
 801ed2c:	f003 0320 	and.w	r3, r3, #32
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	d02d      	beq.n	801ed90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ed34:	4b85      	ldr	r3, [pc, #532]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	08db      	lsrs	r3, r3, #3
 801ed3a:	f003 0303 	and.w	r3, r3, #3
 801ed3e:	4a84      	ldr	r2, [pc, #528]	@ (801ef50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801ed40:	fa22 f303 	lsr.w	r3, r2, r3
 801ed44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ed46:	68bb      	ldr	r3, [r7, #8]
 801ed48:	ee07 3a90 	vmov	s15, r3
 801ed4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ed50:	697b      	ldr	r3, [r7, #20]
 801ed52:	ee07 3a90 	vmov	s15, r3
 801ed56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ed5e:	4b7b      	ldr	r3, [pc, #492]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ed60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ed62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ed66:	ee07 3a90 	vmov	s15, r3
 801ed6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ed6e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ed72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801ef54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ed76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ed7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ed7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ed82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ed86:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ed8e:	e087      	b.n	801eea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ed90:	697b      	ldr	r3, [r7, #20]
 801ed92:	ee07 3a90 	vmov	s15, r3
 801ed96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801ef58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801ed9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eda2:	4b6a      	ldr	r3, [pc, #424]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801edaa:	ee07 3a90 	vmov	s15, r3
 801edae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801edb2:	ed97 6a03 	vldr	s12, [r7, #12]
 801edb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801ef54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801edba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801edbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801edc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801edc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801edca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801edce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801edd2:	e065      	b.n	801eea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801edd4:	697b      	ldr	r3, [r7, #20]
 801edd6:	ee07 3a90 	vmov	s15, r3
 801edda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801edde:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801ef5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ede2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ede6:	4b59      	ldr	r3, [pc, #356]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ede8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801edea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801edee:	ee07 3a90 	vmov	s15, r3
 801edf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801edf6:	ed97 6a03 	vldr	s12, [r7, #12]
 801edfa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801ef54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801edfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ee02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ee06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ee0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ee0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ee16:	e043      	b.n	801eea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ee18:	697b      	ldr	r3, [r7, #20]
 801ee1a:	ee07 3a90 	vmov	s15, r3
 801ee1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801ef60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801ee26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ee2a:	4b48      	ldr	r3, [pc, #288]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ee2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ee32:	ee07 3a90 	vmov	s15, r3
 801ee36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ee3a:	ed97 6a03 	vldr	s12, [r7, #12]
 801ee3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801ef54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ee42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ee46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ee4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ee4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ee52:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ee5a:	e021      	b.n	801eea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ee5c:	697b      	ldr	r3, [r7, #20]
 801ee5e:	ee07 3a90 	vmov	s15, r3
 801ee62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ef5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ee6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ee6e:	4b37      	ldr	r3, [pc, #220]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ee70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ee76:	ee07 3a90 	vmov	s15, r3
 801ee7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ee7e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ee82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801ef54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ee86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ee8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ee8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ee92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ee96:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ee9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801eea0:	4b2a      	ldr	r3, [pc, #168]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eea4:	0a5b      	lsrs	r3, r3, #9
 801eea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801eeaa:	ee07 3a90 	vmov	s15, r3
 801eeae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eeb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eeb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eeba:	edd7 6a07 	vldr	s13, [r7, #28]
 801eebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eec6:	ee17 2a90 	vmov	r2, s15
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801eece:	4b1f      	ldr	r3, [pc, #124]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eed2:	0c1b      	lsrs	r3, r3, #16
 801eed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801eed8:	ee07 3a90 	vmov	s15, r3
 801eedc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eee0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eee4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eee8:	edd7 6a07 	vldr	s13, [r7, #28]
 801eeec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eef4:	ee17 2a90 	vmov	r2, s15
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801eefc:	4b13      	ldr	r3, [pc, #76]	@ (801ef4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eefe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ef00:	0e1b      	lsrs	r3, r3, #24
 801ef02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ef06:	ee07 3a90 	vmov	s15, r3
 801ef0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ef12:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ef16:	edd7 6a07 	vldr	s13, [r7, #28]
 801ef1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ef1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ef22:	ee17 2a90 	vmov	r2, s15
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801ef2a:	e008      	b.n	801ef3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	2200      	movs	r2, #0
 801ef30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	2200      	movs	r2, #0
 801ef36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	2200      	movs	r2, #0
 801ef3c:	609a      	str	r2, [r3, #8]
}
 801ef3e:	bf00      	nop
 801ef40:	3724      	adds	r7, #36	@ 0x24
 801ef42:	46bd      	mov	sp, r7
 801ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef48:	4770      	bx	lr
 801ef4a:	bf00      	nop
 801ef4c:	58024400 	.word	0x58024400
 801ef50:	03d09000 	.word	0x03d09000
 801ef54:	46000000 	.word	0x46000000
 801ef58:	4c742400 	.word	0x4c742400
 801ef5c:	4a742400 	.word	0x4a742400
 801ef60:	4bbebc20 	.word	0x4bbebc20

0801ef64 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801ef64:	b480      	push	{r7}
 801ef66:	b089      	sub	sp, #36	@ 0x24
 801ef68:	af00      	add	r7, sp, #0
 801ef6a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ef6c:	4ba0      	ldr	r3, [pc, #640]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ef6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef70:	f003 0303 	and.w	r3, r3, #3
 801ef74:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801ef76:	4b9e      	ldr	r3, [pc, #632]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ef78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef7a:	091b      	lsrs	r3, r3, #4
 801ef7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ef80:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801ef82:	4b9b      	ldr	r3, [pc, #620]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ef84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef86:	f003 0301 	and.w	r3, r3, #1
 801ef8a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801ef8c:	4b98      	ldr	r3, [pc, #608]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ef8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ef90:	08db      	lsrs	r3, r3, #3
 801ef92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ef96:	693a      	ldr	r2, [r7, #16]
 801ef98:	fb02 f303 	mul.w	r3, r2, r3
 801ef9c:	ee07 3a90 	vmov	s15, r3
 801efa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801efa4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801efa8:	697b      	ldr	r3, [r7, #20]
 801efaa:	2b00      	cmp	r3, #0
 801efac:	f000 8111 	beq.w	801f1d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801efb0:	69bb      	ldr	r3, [r7, #24]
 801efb2:	2b02      	cmp	r3, #2
 801efb4:	f000 8083 	beq.w	801f0be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801efb8:	69bb      	ldr	r3, [r7, #24]
 801efba:	2b02      	cmp	r3, #2
 801efbc:	f200 80a1 	bhi.w	801f102 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801efc0:	69bb      	ldr	r3, [r7, #24]
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	d003      	beq.n	801efce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801efc6:	69bb      	ldr	r3, [r7, #24]
 801efc8:	2b01      	cmp	r3, #1
 801efca:	d056      	beq.n	801f07a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801efcc:	e099      	b.n	801f102 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801efce:	4b88      	ldr	r3, [pc, #544]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801efd0:	681b      	ldr	r3, [r3, #0]
 801efd2:	f003 0320 	and.w	r3, r3, #32
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d02d      	beq.n	801f036 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801efda:	4b85      	ldr	r3, [pc, #532]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	08db      	lsrs	r3, r3, #3
 801efe0:	f003 0303 	and.w	r3, r3, #3
 801efe4:	4a83      	ldr	r2, [pc, #524]	@ (801f1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801efe6:	fa22 f303 	lsr.w	r3, r2, r3
 801efea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801efec:	68bb      	ldr	r3, [r7, #8]
 801efee:	ee07 3a90 	vmov	s15, r3
 801eff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eff6:	697b      	ldr	r3, [r7, #20]
 801eff8:	ee07 3a90 	vmov	s15, r3
 801effc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f004:	4b7a      	ldr	r3, [pc, #488]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f00c:	ee07 3a90 	vmov	s15, r3
 801f010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f014:	ed97 6a03 	vldr	s12, [r7, #12]
 801f018:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801f1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801f01c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f024:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f02c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f030:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f034:	e087      	b.n	801f146 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f036:	697b      	ldr	r3, [r7, #20]
 801f038:	ee07 3a90 	vmov	s15, r3
 801f03c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f040:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 801f1fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801f044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f048:	4b69      	ldr	r3, [pc, #420]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f04a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f04c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f050:	ee07 3a90 	vmov	s15, r3
 801f054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f058:	ed97 6a03 	vldr	s12, [r7, #12]
 801f05c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801f1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801f060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f068:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f06c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f070:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f074:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f078:	e065      	b.n	801f146 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f07a:	697b      	ldr	r3, [r7, #20]
 801f07c:	ee07 3a90 	vmov	s15, r3
 801f080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f084:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801f200 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801f088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f08c:	4b58      	ldr	r3, [pc, #352]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f094:	ee07 3a90 	vmov	s15, r3
 801f098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f09c:	ed97 6a03 	vldr	s12, [r7, #12]
 801f0a0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801f1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801f0a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f0a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f0ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f0b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f0b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f0bc:	e043      	b.n	801f146 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f0be:	697b      	ldr	r3, [r7, #20]
 801f0c0:	ee07 3a90 	vmov	s15, r3
 801f0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f0c8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 801f204 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801f0cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f0d0:	4b47      	ldr	r3, [pc, #284]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f0d8:	ee07 3a90 	vmov	s15, r3
 801f0dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f0e0:	ed97 6a03 	vldr	s12, [r7, #12]
 801f0e4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801f1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801f0e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f0ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f0f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f0f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f0f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f0fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f100:	e021      	b.n	801f146 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f102:	697b      	ldr	r3, [r7, #20]
 801f104:	ee07 3a90 	vmov	s15, r3
 801f108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f10c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801f1fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801f110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f114:	4b36      	ldr	r3, [pc, #216]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f11c:	ee07 3a90 	vmov	s15, r3
 801f120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f124:	ed97 6a03 	vldr	s12, [r7, #12]
 801f128:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801f1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801f12c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f134:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f13c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f140:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f144:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801f146:	4b2a      	ldr	r3, [pc, #168]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f14a:	0a5b      	lsrs	r3, r3, #9
 801f14c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f150:	ee07 3a90 	vmov	s15, r3
 801f154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f15c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f160:	edd7 6a07 	vldr	s13, [r7, #28]
 801f164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f16c:	ee17 2a90 	vmov	r2, s15
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801f174:	4b1e      	ldr	r3, [pc, #120]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f178:	0c1b      	lsrs	r3, r3, #16
 801f17a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f17e:	ee07 3a90 	vmov	s15, r3
 801f182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f18a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f18e:	edd7 6a07 	vldr	s13, [r7, #28]
 801f192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f19a:	ee17 2a90 	vmov	r2, s15
 801f19e:	687b      	ldr	r3, [r7, #4]
 801f1a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801f1a2:	4b13      	ldr	r3, [pc, #76]	@ (801f1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f1a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f1a6:	0e1b      	lsrs	r3, r3, #24
 801f1a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f1ac:	ee07 3a90 	vmov	s15, r3
 801f1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f1b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f1b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f1bc:	edd7 6a07 	vldr	s13, [r7, #28]
 801f1c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f1c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f1c8:	ee17 2a90 	vmov	r2, s15
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801f1d0:	e008      	b.n	801f1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	2200      	movs	r2, #0
 801f1d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801f1d8:	687b      	ldr	r3, [r7, #4]
 801f1da:	2200      	movs	r2, #0
 801f1dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801f1de:	687b      	ldr	r3, [r7, #4]
 801f1e0:	2200      	movs	r2, #0
 801f1e2:	609a      	str	r2, [r3, #8]
}
 801f1e4:	bf00      	nop
 801f1e6:	3724      	adds	r7, #36	@ 0x24
 801f1e8:	46bd      	mov	sp, r7
 801f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1ee:	4770      	bx	lr
 801f1f0:	58024400 	.word	0x58024400
 801f1f4:	03d09000 	.word	0x03d09000
 801f1f8:	46000000 	.word	0x46000000
 801f1fc:	4c742400 	.word	0x4c742400
 801f200:	4a742400 	.word	0x4a742400
 801f204:	4bbebc20 	.word	0x4bbebc20

0801f208 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801f208:	b580      	push	{r7, lr}
 801f20a:	b084      	sub	sp, #16
 801f20c:	af00      	add	r7, sp, #0
 801f20e:	6078      	str	r0, [r7, #4]
 801f210:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f212:	2300      	movs	r3, #0
 801f214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f216:	4b53      	ldr	r3, [pc, #332]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f21a:	f003 0303 	and.w	r3, r3, #3
 801f21e:	2b03      	cmp	r3, #3
 801f220:	d101      	bne.n	801f226 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801f222:	2301      	movs	r3, #1
 801f224:	e099      	b.n	801f35a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801f226:	4b4f      	ldr	r3, [pc, #316]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	4a4e      	ldr	r2, [pc, #312]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f22c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801f230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f232:	f7fa f8e7 	bl	8019404 <HAL_GetTick>
 801f236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f238:	e008      	b.n	801f24c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f23a:	f7fa f8e3 	bl	8019404 <HAL_GetTick>
 801f23e:	4602      	mov	r2, r0
 801f240:	68bb      	ldr	r3, [r7, #8]
 801f242:	1ad3      	subs	r3, r2, r3
 801f244:	2b02      	cmp	r3, #2
 801f246:	d901      	bls.n	801f24c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f248:	2303      	movs	r3, #3
 801f24a:	e086      	b.n	801f35a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f24c:	4b45      	ldr	r3, [pc, #276]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f254:	2b00      	cmp	r3, #0
 801f256:	d1f0      	bne.n	801f23a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801f258:	4b42      	ldr	r3, [pc, #264]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f25a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f25c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801f260:	687b      	ldr	r3, [r7, #4]
 801f262:	681b      	ldr	r3, [r3, #0]
 801f264:	031b      	lsls	r3, r3, #12
 801f266:	493f      	ldr	r1, [pc, #252]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f268:	4313      	orrs	r3, r2
 801f26a:	628b      	str	r3, [r1, #40]	@ 0x28
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	685b      	ldr	r3, [r3, #4]
 801f270:	3b01      	subs	r3, #1
 801f272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	689b      	ldr	r3, [r3, #8]
 801f27a:	3b01      	subs	r3, #1
 801f27c:	025b      	lsls	r3, r3, #9
 801f27e:	b29b      	uxth	r3, r3
 801f280:	431a      	orrs	r2, r3
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	68db      	ldr	r3, [r3, #12]
 801f286:	3b01      	subs	r3, #1
 801f288:	041b      	lsls	r3, r3, #16
 801f28a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f28e:	431a      	orrs	r2, r3
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	691b      	ldr	r3, [r3, #16]
 801f294:	3b01      	subs	r3, #1
 801f296:	061b      	lsls	r3, r3, #24
 801f298:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f29c:	4931      	ldr	r1, [pc, #196]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f29e:	4313      	orrs	r3, r2
 801f2a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801f2a2:	4b30      	ldr	r3, [pc, #192]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	695b      	ldr	r3, [r3, #20]
 801f2ae:	492d      	ldr	r1, [pc, #180]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2b0:	4313      	orrs	r3, r2
 801f2b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801f2b4:	4b2b      	ldr	r3, [pc, #172]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2b8:	f023 0220 	bic.w	r2, r3, #32
 801f2bc:	687b      	ldr	r3, [r7, #4]
 801f2be:	699b      	ldr	r3, [r3, #24]
 801f2c0:	4928      	ldr	r1, [pc, #160]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2c2:	4313      	orrs	r3, r2
 801f2c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801f2c6:	4b27      	ldr	r3, [pc, #156]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2ca:	4a26      	ldr	r2, [pc, #152]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2cc:	f023 0310 	bic.w	r3, r3, #16
 801f2d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801f2d2:	4b24      	ldr	r3, [pc, #144]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f2d6:	4b24      	ldr	r3, [pc, #144]	@ (801f368 <RCCEx_PLL2_Config+0x160>)
 801f2d8:	4013      	ands	r3, r2
 801f2da:	687a      	ldr	r2, [r7, #4]
 801f2dc:	69d2      	ldr	r2, [r2, #28]
 801f2de:	00d2      	lsls	r2, r2, #3
 801f2e0:	4920      	ldr	r1, [pc, #128]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2e2:	4313      	orrs	r3, r2
 801f2e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801f2e6:	4b1f      	ldr	r3, [pc, #124]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2ea:	4a1e      	ldr	r2, [pc, #120]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2ec:	f043 0310 	orr.w	r3, r3, #16
 801f2f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f2f2:	683b      	ldr	r3, [r7, #0]
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d106      	bne.n	801f306 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801f2f8:	4b1a      	ldr	r3, [pc, #104]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2fc:	4a19      	ldr	r2, [pc, #100]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f2fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f302:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f304:	e00f      	b.n	801f326 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f306:	683b      	ldr	r3, [r7, #0]
 801f308:	2b01      	cmp	r3, #1
 801f30a:	d106      	bne.n	801f31a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801f30c:	4b15      	ldr	r3, [pc, #84]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f310:	4a14      	ldr	r2, [pc, #80]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f316:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f318:	e005      	b.n	801f326 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801f31a:	4b12      	ldr	r3, [pc, #72]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f31e:	4a11      	ldr	r2, [pc, #68]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f320:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801f324:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801f326:	4b0f      	ldr	r3, [pc, #60]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f328:	681b      	ldr	r3, [r3, #0]
 801f32a:	4a0e      	ldr	r2, [pc, #56]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f32c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801f330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f332:	f7fa f867 	bl	8019404 <HAL_GetTick>
 801f336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f338:	e008      	b.n	801f34c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f33a:	f7fa f863 	bl	8019404 <HAL_GetTick>
 801f33e:	4602      	mov	r2, r0
 801f340:	68bb      	ldr	r3, [r7, #8]
 801f342:	1ad3      	subs	r3, r2, r3
 801f344:	2b02      	cmp	r3, #2
 801f346:	d901      	bls.n	801f34c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f348:	2303      	movs	r3, #3
 801f34a:	e006      	b.n	801f35a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f34c:	4b05      	ldr	r3, [pc, #20]	@ (801f364 <RCCEx_PLL2_Config+0x15c>)
 801f34e:	681b      	ldr	r3, [r3, #0]
 801f350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f354:	2b00      	cmp	r3, #0
 801f356:	d0f0      	beq.n	801f33a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801f358:	7bfb      	ldrb	r3, [r7, #15]
}
 801f35a:	4618      	mov	r0, r3
 801f35c:	3710      	adds	r7, #16
 801f35e:	46bd      	mov	sp, r7
 801f360:	bd80      	pop	{r7, pc}
 801f362:	bf00      	nop
 801f364:	58024400 	.word	0x58024400
 801f368:	ffff0007 	.word	0xffff0007

0801f36c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801f36c:	b580      	push	{r7, lr}
 801f36e:	b084      	sub	sp, #16
 801f370:	af00      	add	r7, sp, #0
 801f372:	6078      	str	r0, [r7, #4]
 801f374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f376:	2300      	movs	r3, #0
 801f378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f37a:	4b53      	ldr	r3, [pc, #332]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f37c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f37e:	f003 0303 	and.w	r3, r3, #3
 801f382:	2b03      	cmp	r3, #3
 801f384:	d101      	bne.n	801f38a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801f386:	2301      	movs	r3, #1
 801f388:	e099      	b.n	801f4be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801f38a:	4b4f      	ldr	r3, [pc, #316]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	4a4e      	ldr	r2, [pc, #312]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f390:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801f394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f396:	f7fa f835 	bl	8019404 <HAL_GetTick>
 801f39a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f39c:	e008      	b.n	801f3b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f39e:	f7fa f831 	bl	8019404 <HAL_GetTick>
 801f3a2:	4602      	mov	r2, r0
 801f3a4:	68bb      	ldr	r3, [r7, #8]
 801f3a6:	1ad3      	subs	r3, r2, r3
 801f3a8:	2b02      	cmp	r3, #2
 801f3aa:	d901      	bls.n	801f3b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f3ac:	2303      	movs	r3, #3
 801f3ae:	e086      	b.n	801f4be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f3b0:	4b45      	ldr	r3, [pc, #276]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f3b2:	681b      	ldr	r3, [r3, #0]
 801f3b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	d1f0      	bne.n	801f39e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801f3bc:	4b42      	ldr	r3, [pc, #264]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f3c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	051b      	lsls	r3, r3, #20
 801f3ca:	493f      	ldr	r1, [pc, #252]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f3cc:	4313      	orrs	r3, r2
 801f3ce:	628b      	str	r3, [r1, #40]	@ 0x28
 801f3d0:	687b      	ldr	r3, [r7, #4]
 801f3d2:	685b      	ldr	r3, [r3, #4]
 801f3d4:	3b01      	subs	r3, #1
 801f3d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f3da:	687b      	ldr	r3, [r7, #4]
 801f3dc:	689b      	ldr	r3, [r3, #8]
 801f3de:	3b01      	subs	r3, #1
 801f3e0:	025b      	lsls	r3, r3, #9
 801f3e2:	b29b      	uxth	r3, r3
 801f3e4:	431a      	orrs	r2, r3
 801f3e6:	687b      	ldr	r3, [r7, #4]
 801f3e8:	68db      	ldr	r3, [r3, #12]
 801f3ea:	3b01      	subs	r3, #1
 801f3ec:	041b      	lsls	r3, r3, #16
 801f3ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f3f2:	431a      	orrs	r2, r3
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	691b      	ldr	r3, [r3, #16]
 801f3f8:	3b01      	subs	r3, #1
 801f3fa:	061b      	lsls	r3, r3, #24
 801f3fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f400:	4931      	ldr	r1, [pc, #196]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f402:	4313      	orrs	r3, r2
 801f404:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801f406:	4b30      	ldr	r3, [pc, #192]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f40a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	695b      	ldr	r3, [r3, #20]
 801f412:	492d      	ldr	r1, [pc, #180]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f414:	4313      	orrs	r3, r2
 801f416:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801f418:	4b2b      	ldr	r3, [pc, #172]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f41c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801f420:	687b      	ldr	r3, [r7, #4]
 801f422:	699b      	ldr	r3, [r3, #24]
 801f424:	4928      	ldr	r1, [pc, #160]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f426:	4313      	orrs	r3, r2
 801f428:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801f42a:	4b27      	ldr	r3, [pc, #156]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f42e:	4a26      	ldr	r2, [pc, #152]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801f434:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801f436:	4b24      	ldr	r3, [pc, #144]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801f43a:	4b24      	ldr	r3, [pc, #144]	@ (801f4cc <RCCEx_PLL3_Config+0x160>)
 801f43c:	4013      	ands	r3, r2
 801f43e:	687a      	ldr	r2, [r7, #4]
 801f440:	69d2      	ldr	r2, [r2, #28]
 801f442:	00d2      	lsls	r2, r2, #3
 801f444:	4920      	ldr	r1, [pc, #128]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f446:	4313      	orrs	r3, r2
 801f448:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801f44a:	4b1f      	ldr	r3, [pc, #124]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f44e:	4a1e      	ldr	r2, [pc, #120]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f454:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f456:	683b      	ldr	r3, [r7, #0]
 801f458:	2b00      	cmp	r3, #0
 801f45a:	d106      	bne.n	801f46a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801f45c:	4b1a      	ldr	r3, [pc, #104]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f460:	4a19      	ldr	r2, [pc, #100]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f462:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801f466:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f468:	e00f      	b.n	801f48a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f46a:	683b      	ldr	r3, [r7, #0]
 801f46c:	2b01      	cmp	r3, #1
 801f46e:	d106      	bne.n	801f47e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801f470:	4b15      	ldr	r3, [pc, #84]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f474:	4a14      	ldr	r2, [pc, #80]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f476:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801f47a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f47c:	e005      	b.n	801f48a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801f47e:	4b12      	ldr	r3, [pc, #72]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f482:	4a11      	ldr	r2, [pc, #68]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f484:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f488:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801f48a:	4b0f      	ldr	r3, [pc, #60]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f48c:	681b      	ldr	r3, [r3, #0]
 801f48e:	4a0e      	ldr	r2, [pc, #56]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801f494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f496:	f7f9 ffb5 	bl	8019404 <HAL_GetTick>
 801f49a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f49c:	e008      	b.n	801f4b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f49e:	f7f9 ffb1 	bl	8019404 <HAL_GetTick>
 801f4a2:	4602      	mov	r2, r0
 801f4a4:	68bb      	ldr	r3, [r7, #8]
 801f4a6:	1ad3      	subs	r3, r2, r3
 801f4a8:	2b02      	cmp	r3, #2
 801f4aa:	d901      	bls.n	801f4b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f4ac:	2303      	movs	r3, #3
 801f4ae:	e006      	b.n	801f4be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f4b0:	4b05      	ldr	r3, [pc, #20]	@ (801f4c8 <RCCEx_PLL3_Config+0x15c>)
 801f4b2:	681b      	ldr	r3, [r3, #0]
 801f4b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	d0f0      	beq.n	801f49e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801f4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 801f4be:	4618      	mov	r0, r3
 801f4c0:	3710      	adds	r7, #16
 801f4c2:	46bd      	mov	sp, r7
 801f4c4:	bd80      	pop	{r7, pc}
 801f4c6:	bf00      	nop
 801f4c8:	58024400 	.word	0x58024400
 801f4cc:	ffff0007 	.word	0xffff0007

0801f4d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f4d0:	b580      	push	{r7, lr}
 801f4d2:	b082      	sub	sp, #8
 801f4d4:	af00      	add	r7, sp, #0
 801f4d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d101      	bne.n	801f4e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f4de:	2301      	movs	r3, #1
 801f4e0:	e049      	b.n	801f576 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f4e8:	b2db      	uxtb	r3, r3
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	d106      	bne.n	801f4fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f4ee:	687b      	ldr	r3, [r7, #4]
 801f4f0:	2200      	movs	r2, #0
 801f4f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f4f6:	6878      	ldr	r0, [r7, #4]
 801f4f8:	f000 f841 	bl	801f57e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	2202      	movs	r2, #2
 801f500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	681a      	ldr	r2, [r3, #0]
 801f508:	687b      	ldr	r3, [r7, #4]
 801f50a:	3304      	adds	r3, #4
 801f50c:	4619      	mov	r1, r3
 801f50e:	4610      	mov	r0, r2
 801f510:	f000 f9e8 	bl	801f8e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	2201      	movs	r2, #1
 801f518:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f51c:	687b      	ldr	r3, [r7, #4]
 801f51e:	2201      	movs	r2, #1
 801f520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801f524:	687b      	ldr	r3, [r7, #4]
 801f526:	2201      	movs	r2, #1
 801f528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	2201      	movs	r2, #1
 801f530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801f534:	687b      	ldr	r3, [r7, #4]
 801f536:	2201      	movs	r2, #1
 801f538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801f53c:	687b      	ldr	r3, [r7, #4]
 801f53e:	2201      	movs	r2, #1
 801f540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801f544:	687b      	ldr	r3, [r7, #4]
 801f546:	2201      	movs	r2, #1
 801f548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	2201      	movs	r2, #1
 801f550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	2201      	movs	r2, #1
 801f558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	2201      	movs	r2, #1
 801f560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	2201      	movs	r2, #1
 801f568:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f56c:	687b      	ldr	r3, [r7, #4]
 801f56e:	2201      	movs	r2, #1
 801f570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801f574:	2300      	movs	r3, #0
}
 801f576:	4618      	mov	r0, r3
 801f578:	3708      	adds	r7, #8
 801f57a:	46bd      	mov	sp, r7
 801f57c:	bd80      	pop	{r7, pc}

0801f57e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801f57e:	b480      	push	{r7}
 801f580:	b083      	sub	sp, #12
 801f582:	af00      	add	r7, sp, #0
 801f584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801f586:	bf00      	nop
 801f588:	370c      	adds	r7, #12
 801f58a:	46bd      	mov	sp, r7
 801f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f590:	4770      	bx	lr
	...

0801f594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801f594:	b480      	push	{r7}
 801f596:	b085      	sub	sp, #20
 801f598:	af00      	add	r7, sp, #0
 801f59a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f5a2:	b2db      	uxtb	r3, r3
 801f5a4:	2b01      	cmp	r3, #1
 801f5a6:	d001      	beq.n	801f5ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801f5a8:	2301      	movs	r3, #1
 801f5aa:	e054      	b.n	801f656 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f5ac:	687b      	ldr	r3, [r7, #4]
 801f5ae:	2202      	movs	r2, #2
 801f5b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801f5b4:	687b      	ldr	r3, [r7, #4]
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	68da      	ldr	r2, [r3, #12]
 801f5ba:	687b      	ldr	r3, [r7, #4]
 801f5bc:	681b      	ldr	r3, [r3, #0]
 801f5be:	f042 0201 	orr.w	r2, r2, #1
 801f5c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	681b      	ldr	r3, [r3, #0]
 801f5c8:	4a26      	ldr	r2, [pc, #152]	@ (801f664 <HAL_TIM_Base_Start_IT+0xd0>)
 801f5ca:	4293      	cmp	r3, r2
 801f5cc:	d022      	beq.n	801f614 <HAL_TIM_Base_Start_IT+0x80>
 801f5ce:	687b      	ldr	r3, [r7, #4]
 801f5d0:	681b      	ldr	r3, [r3, #0]
 801f5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f5d6:	d01d      	beq.n	801f614 <HAL_TIM_Base_Start_IT+0x80>
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	4a22      	ldr	r2, [pc, #136]	@ (801f668 <HAL_TIM_Base_Start_IT+0xd4>)
 801f5de:	4293      	cmp	r3, r2
 801f5e0:	d018      	beq.n	801f614 <HAL_TIM_Base_Start_IT+0x80>
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	681b      	ldr	r3, [r3, #0]
 801f5e6:	4a21      	ldr	r2, [pc, #132]	@ (801f66c <HAL_TIM_Base_Start_IT+0xd8>)
 801f5e8:	4293      	cmp	r3, r2
 801f5ea:	d013      	beq.n	801f614 <HAL_TIM_Base_Start_IT+0x80>
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	681b      	ldr	r3, [r3, #0]
 801f5f0:	4a1f      	ldr	r2, [pc, #124]	@ (801f670 <HAL_TIM_Base_Start_IT+0xdc>)
 801f5f2:	4293      	cmp	r3, r2
 801f5f4:	d00e      	beq.n	801f614 <HAL_TIM_Base_Start_IT+0x80>
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	681b      	ldr	r3, [r3, #0]
 801f5fa:	4a1e      	ldr	r2, [pc, #120]	@ (801f674 <HAL_TIM_Base_Start_IT+0xe0>)
 801f5fc:	4293      	cmp	r3, r2
 801f5fe:	d009      	beq.n	801f614 <HAL_TIM_Base_Start_IT+0x80>
 801f600:	687b      	ldr	r3, [r7, #4]
 801f602:	681b      	ldr	r3, [r3, #0]
 801f604:	4a1c      	ldr	r2, [pc, #112]	@ (801f678 <HAL_TIM_Base_Start_IT+0xe4>)
 801f606:	4293      	cmp	r3, r2
 801f608:	d004      	beq.n	801f614 <HAL_TIM_Base_Start_IT+0x80>
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	681b      	ldr	r3, [r3, #0]
 801f60e:	4a1b      	ldr	r2, [pc, #108]	@ (801f67c <HAL_TIM_Base_Start_IT+0xe8>)
 801f610:	4293      	cmp	r3, r2
 801f612:	d115      	bne.n	801f640 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	681b      	ldr	r3, [r3, #0]
 801f618:	689a      	ldr	r2, [r3, #8]
 801f61a:	4b19      	ldr	r3, [pc, #100]	@ (801f680 <HAL_TIM_Base_Start_IT+0xec>)
 801f61c:	4013      	ands	r3, r2
 801f61e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f620:	68fb      	ldr	r3, [r7, #12]
 801f622:	2b06      	cmp	r3, #6
 801f624:	d015      	beq.n	801f652 <HAL_TIM_Base_Start_IT+0xbe>
 801f626:	68fb      	ldr	r3, [r7, #12]
 801f628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f62c:	d011      	beq.n	801f652 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	681a      	ldr	r2, [r3, #0]
 801f634:	687b      	ldr	r3, [r7, #4]
 801f636:	681b      	ldr	r3, [r3, #0]
 801f638:	f042 0201 	orr.w	r2, r2, #1
 801f63c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f63e:	e008      	b.n	801f652 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f640:	687b      	ldr	r3, [r7, #4]
 801f642:	681b      	ldr	r3, [r3, #0]
 801f644:	681a      	ldr	r2, [r3, #0]
 801f646:	687b      	ldr	r3, [r7, #4]
 801f648:	681b      	ldr	r3, [r3, #0]
 801f64a:	f042 0201 	orr.w	r2, r2, #1
 801f64e:	601a      	str	r2, [r3, #0]
 801f650:	e000      	b.n	801f654 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f652:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f654:	2300      	movs	r3, #0
}
 801f656:	4618      	mov	r0, r3
 801f658:	3714      	adds	r7, #20
 801f65a:	46bd      	mov	sp, r7
 801f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f660:	4770      	bx	lr
 801f662:	bf00      	nop
 801f664:	40010000 	.word	0x40010000
 801f668:	40000400 	.word	0x40000400
 801f66c:	40000800 	.word	0x40000800
 801f670:	40000c00 	.word	0x40000c00
 801f674:	40010400 	.word	0x40010400
 801f678:	40001800 	.word	0x40001800
 801f67c:	40014000 	.word	0x40014000
 801f680:	00010007 	.word	0x00010007

0801f684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801f684:	b580      	push	{r7, lr}
 801f686:	b084      	sub	sp, #16
 801f688:	af00      	add	r7, sp, #0
 801f68a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	68db      	ldr	r3, [r3, #12]
 801f692:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	681b      	ldr	r3, [r3, #0]
 801f698:	691b      	ldr	r3, [r3, #16]
 801f69a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801f69c:	68bb      	ldr	r3, [r7, #8]
 801f69e:	f003 0302 	and.w	r3, r3, #2
 801f6a2:	2b00      	cmp	r3, #0
 801f6a4:	d020      	beq.n	801f6e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801f6a6:	68fb      	ldr	r3, [r7, #12]
 801f6a8:	f003 0302 	and.w	r3, r3, #2
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	d01b      	beq.n	801f6e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	681b      	ldr	r3, [r3, #0]
 801f6b4:	f06f 0202 	mvn.w	r2, #2
 801f6b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	2201      	movs	r2, #1
 801f6be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	681b      	ldr	r3, [r3, #0]
 801f6c4:	699b      	ldr	r3, [r3, #24]
 801f6c6:	f003 0303 	and.w	r3, r3, #3
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d003      	beq.n	801f6d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801f6ce:	6878      	ldr	r0, [r7, #4]
 801f6d0:	f000 f8e9 	bl	801f8a6 <HAL_TIM_IC_CaptureCallback>
 801f6d4:	e005      	b.n	801f6e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801f6d6:	6878      	ldr	r0, [r7, #4]
 801f6d8:	f000 f8db 	bl	801f892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f6dc:	6878      	ldr	r0, [r7, #4]
 801f6de:	f000 f8ec 	bl	801f8ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	2200      	movs	r2, #0
 801f6e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801f6e8:	68bb      	ldr	r3, [r7, #8]
 801f6ea:	f003 0304 	and.w	r3, r3, #4
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	d020      	beq.n	801f734 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801f6f2:	68fb      	ldr	r3, [r7, #12]
 801f6f4:	f003 0304 	and.w	r3, r3, #4
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	d01b      	beq.n	801f734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	681b      	ldr	r3, [r3, #0]
 801f700:	f06f 0204 	mvn.w	r2, #4
 801f704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	2202      	movs	r2, #2
 801f70a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801f70c:	687b      	ldr	r3, [r7, #4]
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	699b      	ldr	r3, [r3, #24]
 801f712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801f716:	2b00      	cmp	r3, #0
 801f718:	d003      	beq.n	801f722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f71a:	6878      	ldr	r0, [r7, #4]
 801f71c:	f000 f8c3 	bl	801f8a6 <HAL_TIM_IC_CaptureCallback>
 801f720:	e005      	b.n	801f72e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f722:	6878      	ldr	r0, [r7, #4]
 801f724:	f000 f8b5 	bl	801f892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f728:	6878      	ldr	r0, [r7, #4]
 801f72a:	f000 f8c6 	bl	801f8ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f72e:	687b      	ldr	r3, [r7, #4]
 801f730:	2200      	movs	r2, #0
 801f732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801f734:	68bb      	ldr	r3, [r7, #8]
 801f736:	f003 0308 	and.w	r3, r3, #8
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	d020      	beq.n	801f780 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801f73e:	68fb      	ldr	r3, [r7, #12]
 801f740:	f003 0308 	and.w	r3, r3, #8
 801f744:	2b00      	cmp	r3, #0
 801f746:	d01b      	beq.n	801f780 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801f748:	687b      	ldr	r3, [r7, #4]
 801f74a:	681b      	ldr	r3, [r3, #0]
 801f74c:	f06f 0208 	mvn.w	r2, #8
 801f750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	2204      	movs	r2, #4
 801f756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	681b      	ldr	r3, [r3, #0]
 801f75c:	69db      	ldr	r3, [r3, #28]
 801f75e:	f003 0303 	and.w	r3, r3, #3
 801f762:	2b00      	cmp	r3, #0
 801f764:	d003      	beq.n	801f76e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f766:	6878      	ldr	r0, [r7, #4]
 801f768:	f000 f89d 	bl	801f8a6 <HAL_TIM_IC_CaptureCallback>
 801f76c:	e005      	b.n	801f77a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f76e:	6878      	ldr	r0, [r7, #4]
 801f770:	f000 f88f 	bl	801f892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f774:	6878      	ldr	r0, [r7, #4]
 801f776:	f000 f8a0 	bl	801f8ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	2200      	movs	r2, #0
 801f77e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801f780:	68bb      	ldr	r3, [r7, #8]
 801f782:	f003 0310 	and.w	r3, r3, #16
 801f786:	2b00      	cmp	r3, #0
 801f788:	d020      	beq.n	801f7cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801f78a:	68fb      	ldr	r3, [r7, #12]
 801f78c:	f003 0310 	and.w	r3, r3, #16
 801f790:	2b00      	cmp	r3, #0
 801f792:	d01b      	beq.n	801f7cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	681b      	ldr	r3, [r3, #0]
 801f798:	f06f 0210 	mvn.w	r2, #16
 801f79c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f79e:	687b      	ldr	r3, [r7, #4]
 801f7a0:	2208      	movs	r2, #8
 801f7a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	681b      	ldr	r3, [r3, #0]
 801f7a8:	69db      	ldr	r3, [r3, #28]
 801f7aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	d003      	beq.n	801f7ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f7b2:	6878      	ldr	r0, [r7, #4]
 801f7b4:	f000 f877 	bl	801f8a6 <HAL_TIM_IC_CaptureCallback>
 801f7b8:	e005      	b.n	801f7c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f7ba:	6878      	ldr	r0, [r7, #4]
 801f7bc:	f000 f869 	bl	801f892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f7c0:	6878      	ldr	r0, [r7, #4]
 801f7c2:	f000 f87a 	bl	801f8ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	2200      	movs	r2, #0
 801f7ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801f7cc:	68bb      	ldr	r3, [r7, #8]
 801f7ce:	f003 0301 	and.w	r3, r3, #1
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	d00c      	beq.n	801f7f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801f7d6:	68fb      	ldr	r3, [r7, #12]
 801f7d8:	f003 0301 	and.w	r3, r3, #1
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	d007      	beq.n	801f7f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	681b      	ldr	r3, [r3, #0]
 801f7e4:	f06f 0201 	mvn.w	r2, #1
 801f7e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801f7ea:	6878      	ldr	r0, [r7, #4]
 801f7ec:	f7f8 ffd8 	bl	80187a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801f7f0:	68bb      	ldr	r3, [r7, #8]
 801f7f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801f7f6:	2b00      	cmp	r3, #0
 801f7f8:	d104      	bne.n	801f804 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801f7fa:	68bb      	ldr	r3, [r7, #8]
 801f7fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801f800:	2b00      	cmp	r3, #0
 801f802:	d00c      	beq.n	801f81e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801f804:	68fb      	ldr	r3, [r7, #12]
 801f806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d007      	beq.n	801f81e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	681b      	ldr	r3, [r3, #0]
 801f812:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801f816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801f818:	6878      	ldr	r0, [r7, #4]
 801f81a:	f000 f90d 	bl	801fa38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801f81e:	68bb      	ldr	r3, [r7, #8]
 801f820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f824:	2b00      	cmp	r3, #0
 801f826:	d00c      	beq.n	801f842 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801f828:	68fb      	ldr	r3, [r7, #12]
 801f82a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801f82e:	2b00      	cmp	r3, #0
 801f830:	d007      	beq.n	801f842 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f832:	687b      	ldr	r3, [r7, #4]
 801f834:	681b      	ldr	r3, [r3, #0]
 801f836:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801f83a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f83c:	6878      	ldr	r0, [r7, #4]
 801f83e:	f000 f905 	bl	801fa4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801f842:	68bb      	ldr	r3, [r7, #8]
 801f844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d00c      	beq.n	801f866 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f852:	2b00      	cmp	r3, #0
 801f854:	d007      	beq.n	801f866 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801f856:	687b      	ldr	r3, [r7, #4]
 801f858:	681b      	ldr	r3, [r3, #0]
 801f85a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801f85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f860:	6878      	ldr	r0, [r7, #4]
 801f862:	f000 f834 	bl	801f8ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801f866:	68bb      	ldr	r3, [r7, #8]
 801f868:	f003 0320 	and.w	r3, r3, #32
 801f86c:	2b00      	cmp	r3, #0
 801f86e:	d00c      	beq.n	801f88a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801f870:	68fb      	ldr	r3, [r7, #12]
 801f872:	f003 0320 	and.w	r3, r3, #32
 801f876:	2b00      	cmp	r3, #0
 801f878:	d007      	beq.n	801f88a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	681b      	ldr	r3, [r3, #0]
 801f87e:	f06f 0220 	mvn.w	r2, #32
 801f882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f884:	6878      	ldr	r0, [r7, #4]
 801f886:	f000 f8cd 	bl	801fa24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f88a:	bf00      	nop
 801f88c:	3710      	adds	r7, #16
 801f88e:	46bd      	mov	sp, r7
 801f890:	bd80      	pop	{r7, pc}

0801f892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f892:	b480      	push	{r7}
 801f894:	b083      	sub	sp, #12
 801f896:	af00      	add	r7, sp, #0
 801f898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f89a:	bf00      	nop
 801f89c:	370c      	adds	r7, #12
 801f89e:	46bd      	mov	sp, r7
 801f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8a4:	4770      	bx	lr

0801f8a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801f8a6:	b480      	push	{r7}
 801f8a8:	b083      	sub	sp, #12
 801f8aa:	af00      	add	r7, sp, #0
 801f8ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801f8ae:	bf00      	nop
 801f8b0:	370c      	adds	r7, #12
 801f8b2:	46bd      	mov	sp, r7
 801f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8b8:	4770      	bx	lr

0801f8ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f8ba:	b480      	push	{r7}
 801f8bc:	b083      	sub	sp, #12
 801f8be:	af00      	add	r7, sp, #0
 801f8c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f8c2:	bf00      	nop
 801f8c4:	370c      	adds	r7, #12
 801f8c6:	46bd      	mov	sp, r7
 801f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8cc:	4770      	bx	lr

0801f8ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f8ce:	b480      	push	{r7}
 801f8d0:	b083      	sub	sp, #12
 801f8d2:	af00      	add	r7, sp, #0
 801f8d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f8d6:	bf00      	nop
 801f8d8:	370c      	adds	r7, #12
 801f8da:	46bd      	mov	sp, r7
 801f8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8e0:	4770      	bx	lr
	...

0801f8e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801f8e4:	b480      	push	{r7}
 801f8e6:	b085      	sub	sp, #20
 801f8e8:	af00      	add	r7, sp, #0
 801f8ea:	6078      	str	r0, [r7, #4]
 801f8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	681b      	ldr	r3, [r3, #0]
 801f8f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f8f4:	687b      	ldr	r3, [r7, #4]
 801f8f6:	4a43      	ldr	r2, [pc, #268]	@ (801fa04 <TIM_Base_SetConfig+0x120>)
 801f8f8:	4293      	cmp	r3, r2
 801f8fa:	d013      	beq.n	801f924 <TIM_Base_SetConfig+0x40>
 801f8fc:	687b      	ldr	r3, [r7, #4]
 801f8fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f902:	d00f      	beq.n	801f924 <TIM_Base_SetConfig+0x40>
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	4a40      	ldr	r2, [pc, #256]	@ (801fa08 <TIM_Base_SetConfig+0x124>)
 801f908:	4293      	cmp	r3, r2
 801f90a:	d00b      	beq.n	801f924 <TIM_Base_SetConfig+0x40>
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	4a3f      	ldr	r2, [pc, #252]	@ (801fa0c <TIM_Base_SetConfig+0x128>)
 801f910:	4293      	cmp	r3, r2
 801f912:	d007      	beq.n	801f924 <TIM_Base_SetConfig+0x40>
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	4a3e      	ldr	r2, [pc, #248]	@ (801fa10 <TIM_Base_SetConfig+0x12c>)
 801f918:	4293      	cmp	r3, r2
 801f91a:	d003      	beq.n	801f924 <TIM_Base_SetConfig+0x40>
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	4a3d      	ldr	r2, [pc, #244]	@ (801fa14 <TIM_Base_SetConfig+0x130>)
 801f920:	4293      	cmp	r3, r2
 801f922:	d108      	bne.n	801f936 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f924:	68fb      	ldr	r3, [r7, #12]
 801f926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f92a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f92c:	683b      	ldr	r3, [r7, #0]
 801f92e:	685b      	ldr	r3, [r3, #4]
 801f930:	68fa      	ldr	r2, [r7, #12]
 801f932:	4313      	orrs	r3, r2
 801f934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	4a32      	ldr	r2, [pc, #200]	@ (801fa04 <TIM_Base_SetConfig+0x120>)
 801f93a:	4293      	cmp	r3, r2
 801f93c:	d01f      	beq.n	801f97e <TIM_Base_SetConfig+0x9a>
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f944:	d01b      	beq.n	801f97e <TIM_Base_SetConfig+0x9a>
 801f946:	687b      	ldr	r3, [r7, #4]
 801f948:	4a2f      	ldr	r2, [pc, #188]	@ (801fa08 <TIM_Base_SetConfig+0x124>)
 801f94a:	4293      	cmp	r3, r2
 801f94c:	d017      	beq.n	801f97e <TIM_Base_SetConfig+0x9a>
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	4a2e      	ldr	r2, [pc, #184]	@ (801fa0c <TIM_Base_SetConfig+0x128>)
 801f952:	4293      	cmp	r3, r2
 801f954:	d013      	beq.n	801f97e <TIM_Base_SetConfig+0x9a>
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	4a2d      	ldr	r2, [pc, #180]	@ (801fa10 <TIM_Base_SetConfig+0x12c>)
 801f95a:	4293      	cmp	r3, r2
 801f95c:	d00f      	beq.n	801f97e <TIM_Base_SetConfig+0x9a>
 801f95e:	687b      	ldr	r3, [r7, #4]
 801f960:	4a2c      	ldr	r2, [pc, #176]	@ (801fa14 <TIM_Base_SetConfig+0x130>)
 801f962:	4293      	cmp	r3, r2
 801f964:	d00b      	beq.n	801f97e <TIM_Base_SetConfig+0x9a>
 801f966:	687b      	ldr	r3, [r7, #4]
 801f968:	4a2b      	ldr	r2, [pc, #172]	@ (801fa18 <TIM_Base_SetConfig+0x134>)
 801f96a:	4293      	cmp	r3, r2
 801f96c:	d007      	beq.n	801f97e <TIM_Base_SetConfig+0x9a>
 801f96e:	687b      	ldr	r3, [r7, #4]
 801f970:	4a2a      	ldr	r2, [pc, #168]	@ (801fa1c <TIM_Base_SetConfig+0x138>)
 801f972:	4293      	cmp	r3, r2
 801f974:	d003      	beq.n	801f97e <TIM_Base_SetConfig+0x9a>
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	4a29      	ldr	r2, [pc, #164]	@ (801fa20 <TIM_Base_SetConfig+0x13c>)
 801f97a:	4293      	cmp	r3, r2
 801f97c:	d108      	bne.n	801f990 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f97e:	68fb      	ldr	r3, [r7, #12]
 801f980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801f984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f986:	683b      	ldr	r3, [r7, #0]
 801f988:	68db      	ldr	r3, [r3, #12]
 801f98a:	68fa      	ldr	r2, [r7, #12]
 801f98c:	4313      	orrs	r3, r2
 801f98e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f990:	68fb      	ldr	r3, [r7, #12]
 801f992:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801f996:	683b      	ldr	r3, [r7, #0]
 801f998:	695b      	ldr	r3, [r3, #20]
 801f99a:	4313      	orrs	r3, r2
 801f99c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f99e:	683b      	ldr	r3, [r7, #0]
 801f9a0:	689a      	ldr	r2, [r3, #8]
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f9a6:	683b      	ldr	r3, [r7, #0]
 801f9a8:	681a      	ldr	r2, [r3, #0]
 801f9aa:	687b      	ldr	r3, [r7, #4]
 801f9ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f9ae:	687b      	ldr	r3, [r7, #4]
 801f9b0:	4a14      	ldr	r2, [pc, #80]	@ (801fa04 <TIM_Base_SetConfig+0x120>)
 801f9b2:	4293      	cmp	r3, r2
 801f9b4:	d00f      	beq.n	801f9d6 <TIM_Base_SetConfig+0xf2>
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	4a16      	ldr	r2, [pc, #88]	@ (801fa14 <TIM_Base_SetConfig+0x130>)
 801f9ba:	4293      	cmp	r3, r2
 801f9bc:	d00b      	beq.n	801f9d6 <TIM_Base_SetConfig+0xf2>
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	4a15      	ldr	r2, [pc, #84]	@ (801fa18 <TIM_Base_SetConfig+0x134>)
 801f9c2:	4293      	cmp	r3, r2
 801f9c4:	d007      	beq.n	801f9d6 <TIM_Base_SetConfig+0xf2>
 801f9c6:	687b      	ldr	r3, [r7, #4]
 801f9c8:	4a14      	ldr	r2, [pc, #80]	@ (801fa1c <TIM_Base_SetConfig+0x138>)
 801f9ca:	4293      	cmp	r3, r2
 801f9cc:	d003      	beq.n	801f9d6 <TIM_Base_SetConfig+0xf2>
 801f9ce:	687b      	ldr	r3, [r7, #4]
 801f9d0:	4a13      	ldr	r2, [pc, #76]	@ (801fa20 <TIM_Base_SetConfig+0x13c>)
 801f9d2:	4293      	cmp	r3, r2
 801f9d4:	d103      	bne.n	801f9de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f9d6:	683b      	ldr	r3, [r7, #0]
 801f9d8:	691a      	ldr	r2, [r3, #16]
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	f043 0204 	orr.w	r2, r3, #4
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f9ea:	687b      	ldr	r3, [r7, #4]
 801f9ec:	2201      	movs	r2, #1
 801f9ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801f9f0:	687b      	ldr	r3, [r7, #4]
 801f9f2:	68fa      	ldr	r2, [r7, #12]
 801f9f4:	601a      	str	r2, [r3, #0]
}
 801f9f6:	bf00      	nop
 801f9f8:	3714      	adds	r7, #20
 801f9fa:	46bd      	mov	sp, r7
 801f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa00:	4770      	bx	lr
 801fa02:	bf00      	nop
 801fa04:	40010000 	.word	0x40010000
 801fa08:	40000400 	.word	0x40000400
 801fa0c:	40000800 	.word	0x40000800
 801fa10:	40000c00 	.word	0x40000c00
 801fa14:	40010400 	.word	0x40010400
 801fa18:	40014000 	.word	0x40014000
 801fa1c:	40014400 	.word	0x40014400
 801fa20:	40014800 	.word	0x40014800

0801fa24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801fa24:	b480      	push	{r7}
 801fa26:	b083      	sub	sp, #12
 801fa28:	af00      	add	r7, sp, #0
 801fa2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801fa2c:	bf00      	nop
 801fa2e:	370c      	adds	r7, #12
 801fa30:	46bd      	mov	sp, r7
 801fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa36:	4770      	bx	lr

0801fa38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801fa38:	b480      	push	{r7}
 801fa3a:	b083      	sub	sp, #12
 801fa3c:	af00      	add	r7, sp, #0
 801fa3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801fa40:	bf00      	nop
 801fa42:	370c      	adds	r7, #12
 801fa44:	46bd      	mov	sp, r7
 801fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa4a:	4770      	bx	lr

0801fa4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801fa4c:	b480      	push	{r7}
 801fa4e:	b083      	sub	sp, #12
 801fa50:	af00      	add	r7, sp, #0
 801fa52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801fa54:	bf00      	nop
 801fa56:	370c      	adds	r7, #12
 801fa58:	46bd      	mov	sp, r7
 801fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa5e:	4770      	bx	lr

0801fa60 <LL_GPIO_SetPinMode>:
{
 801fa60:	b480      	push	{r7}
 801fa62:	b085      	sub	sp, #20
 801fa64:	af00      	add	r7, sp, #0
 801fa66:	60f8      	str	r0, [r7, #12]
 801fa68:	60b9      	str	r1, [r7, #8]
 801fa6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 801fa6c:	68fb      	ldr	r3, [r7, #12]
 801fa6e:	6819      	ldr	r1, [r3, #0]
 801fa70:	68bb      	ldr	r3, [r7, #8]
 801fa72:	fb03 f203 	mul.w	r2, r3, r3
 801fa76:	4613      	mov	r3, r2
 801fa78:	005b      	lsls	r3, r3, #1
 801fa7a:	4413      	add	r3, r2
 801fa7c:	43db      	mvns	r3, r3
 801fa7e:	ea01 0203 	and.w	r2, r1, r3
 801fa82:	68bb      	ldr	r3, [r7, #8]
 801fa84:	fb03 f303 	mul.w	r3, r3, r3
 801fa88:	6879      	ldr	r1, [r7, #4]
 801fa8a:	fb01 f303 	mul.w	r3, r1, r3
 801fa8e:	431a      	orrs	r2, r3
 801fa90:	68fb      	ldr	r3, [r7, #12]
 801fa92:	601a      	str	r2, [r3, #0]
}
 801fa94:	bf00      	nop
 801fa96:	3714      	adds	r7, #20
 801fa98:	46bd      	mov	sp, r7
 801fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa9e:	4770      	bx	lr

0801faa0 <LL_GPIO_SetPinOutputType>:
{
 801faa0:	b480      	push	{r7}
 801faa2:	b085      	sub	sp, #20
 801faa4:	af00      	add	r7, sp, #0
 801faa6:	60f8      	str	r0, [r7, #12]
 801faa8:	60b9      	str	r1, [r7, #8]
 801faaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801faac:	68fb      	ldr	r3, [r7, #12]
 801faae:	685a      	ldr	r2, [r3, #4]
 801fab0:	68bb      	ldr	r3, [r7, #8]
 801fab2:	43db      	mvns	r3, r3
 801fab4:	401a      	ands	r2, r3
 801fab6:	68bb      	ldr	r3, [r7, #8]
 801fab8:	6879      	ldr	r1, [r7, #4]
 801faba:	fb01 f303 	mul.w	r3, r1, r3
 801fabe:	431a      	orrs	r2, r3
 801fac0:	68fb      	ldr	r3, [r7, #12]
 801fac2:	605a      	str	r2, [r3, #4]
}
 801fac4:	bf00      	nop
 801fac6:	3714      	adds	r7, #20
 801fac8:	46bd      	mov	sp, r7
 801faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801face:	4770      	bx	lr

0801fad0 <LL_GPIO_SetPinSpeed>:
{
 801fad0:	b480      	push	{r7}
 801fad2:	b085      	sub	sp, #20
 801fad4:	af00      	add	r7, sp, #0
 801fad6:	60f8      	str	r0, [r7, #12]
 801fad8:	60b9      	str	r1, [r7, #8]
 801fada:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801fadc:	68fb      	ldr	r3, [r7, #12]
 801fade:	6899      	ldr	r1, [r3, #8]
 801fae0:	68bb      	ldr	r3, [r7, #8]
 801fae2:	fb03 f203 	mul.w	r2, r3, r3
 801fae6:	4613      	mov	r3, r2
 801fae8:	005b      	lsls	r3, r3, #1
 801faea:	4413      	add	r3, r2
 801faec:	43db      	mvns	r3, r3
 801faee:	ea01 0203 	and.w	r2, r1, r3
 801faf2:	68bb      	ldr	r3, [r7, #8]
 801faf4:	fb03 f303 	mul.w	r3, r3, r3
 801faf8:	6879      	ldr	r1, [r7, #4]
 801fafa:	fb01 f303 	mul.w	r3, r1, r3
 801fafe:	431a      	orrs	r2, r3
 801fb00:	68fb      	ldr	r3, [r7, #12]
 801fb02:	609a      	str	r2, [r3, #8]
}
 801fb04:	bf00      	nop
 801fb06:	3714      	adds	r7, #20
 801fb08:	46bd      	mov	sp, r7
 801fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb0e:	4770      	bx	lr

0801fb10 <LL_GPIO_SetPinPull>:
{
 801fb10:	b480      	push	{r7}
 801fb12:	b085      	sub	sp, #20
 801fb14:	af00      	add	r7, sp, #0
 801fb16:	60f8      	str	r0, [r7, #12]
 801fb18:	60b9      	str	r1, [r7, #8]
 801fb1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 801fb1c:	68fb      	ldr	r3, [r7, #12]
 801fb1e:	68d9      	ldr	r1, [r3, #12]
 801fb20:	68bb      	ldr	r3, [r7, #8]
 801fb22:	fb03 f203 	mul.w	r2, r3, r3
 801fb26:	4613      	mov	r3, r2
 801fb28:	005b      	lsls	r3, r3, #1
 801fb2a:	4413      	add	r3, r2
 801fb2c:	43db      	mvns	r3, r3
 801fb2e:	ea01 0203 	and.w	r2, r1, r3
 801fb32:	68bb      	ldr	r3, [r7, #8]
 801fb34:	fb03 f303 	mul.w	r3, r3, r3
 801fb38:	6879      	ldr	r1, [r7, #4]
 801fb3a:	fb01 f303 	mul.w	r3, r1, r3
 801fb3e:	431a      	orrs	r2, r3
 801fb40:	68fb      	ldr	r3, [r7, #12]
 801fb42:	60da      	str	r2, [r3, #12]
}
 801fb44:	bf00      	nop
 801fb46:	3714      	adds	r7, #20
 801fb48:	46bd      	mov	sp, r7
 801fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb4e:	4770      	bx	lr

0801fb50 <LL_GPIO_SetAFPin_0_7>:
{
 801fb50:	b480      	push	{r7}
 801fb52:	b085      	sub	sp, #20
 801fb54:	af00      	add	r7, sp, #0
 801fb56:	60f8      	str	r0, [r7, #12]
 801fb58:	60b9      	str	r1, [r7, #8]
 801fb5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 801fb5c:	68fb      	ldr	r3, [r7, #12]
 801fb5e:	6a19      	ldr	r1, [r3, #32]
 801fb60:	68bb      	ldr	r3, [r7, #8]
 801fb62:	fb03 f303 	mul.w	r3, r3, r3
 801fb66:	68ba      	ldr	r2, [r7, #8]
 801fb68:	fb02 f303 	mul.w	r3, r2, r3
 801fb6c:	68ba      	ldr	r2, [r7, #8]
 801fb6e:	fb03 f202 	mul.w	r2, r3, r2
 801fb72:	4613      	mov	r3, r2
 801fb74:	011b      	lsls	r3, r3, #4
 801fb76:	1a9b      	subs	r3, r3, r2
 801fb78:	43db      	mvns	r3, r3
 801fb7a:	ea01 0203 	and.w	r2, r1, r3
 801fb7e:	68bb      	ldr	r3, [r7, #8]
 801fb80:	fb03 f303 	mul.w	r3, r3, r3
 801fb84:	68b9      	ldr	r1, [r7, #8]
 801fb86:	fb01 f303 	mul.w	r3, r1, r3
 801fb8a:	68b9      	ldr	r1, [r7, #8]
 801fb8c:	fb01 f303 	mul.w	r3, r1, r3
 801fb90:	6879      	ldr	r1, [r7, #4]
 801fb92:	fb01 f303 	mul.w	r3, r1, r3
 801fb96:	431a      	orrs	r2, r3
 801fb98:	68fb      	ldr	r3, [r7, #12]
 801fb9a:	621a      	str	r2, [r3, #32]
}
 801fb9c:	bf00      	nop
 801fb9e:	3714      	adds	r7, #20
 801fba0:	46bd      	mov	sp, r7
 801fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fba6:	4770      	bx	lr

0801fba8 <LL_GPIO_SetAFPin_8_15>:
{
 801fba8:	b480      	push	{r7}
 801fbaa:	b085      	sub	sp, #20
 801fbac:	af00      	add	r7, sp, #0
 801fbae:	60f8      	str	r0, [r7, #12]
 801fbb0:	60b9      	str	r1, [r7, #8]
 801fbb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 801fbb4:	68fb      	ldr	r3, [r7, #12]
 801fbb6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801fbb8:	68bb      	ldr	r3, [r7, #8]
 801fbba:	0a1b      	lsrs	r3, r3, #8
 801fbbc:	68ba      	ldr	r2, [r7, #8]
 801fbbe:	0a12      	lsrs	r2, r2, #8
 801fbc0:	fb02 f303 	mul.w	r3, r2, r3
 801fbc4:	68ba      	ldr	r2, [r7, #8]
 801fbc6:	0a12      	lsrs	r2, r2, #8
 801fbc8:	fb02 f303 	mul.w	r3, r2, r3
 801fbcc:	68ba      	ldr	r2, [r7, #8]
 801fbce:	0a12      	lsrs	r2, r2, #8
 801fbd0:	fb03 f202 	mul.w	r2, r3, r2
 801fbd4:	4613      	mov	r3, r2
 801fbd6:	011b      	lsls	r3, r3, #4
 801fbd8:	1a9b      	subs	r3, r3, r2
 801fbda:	43db      	mvns	r3, r3
 801fbdc:	ea01 0203 	and.w	r2, r1, r3
 801fbe0:	68bb      	ldr	r3, [r7, #8]
 801fbe2:	0a1b      	lsrs	r3, r3, #8
 801fbe4:	68b9      	ldr	r1, [r7, #8]
 801fbe6:	0a09      	lsrs	r1, r1, #8
 801fbe8:	fb01 f303 	mul.w	r3, r1, r3
 801fbec:	68b9      	ldr	r1, [r7, #8]
 801fbee:	0a09      	lsrs	r1, r1, #8
 801fbf0:	fb01 f303 	mul.w	r3, r1, r3
 801fbf4:	68b9      	ldr	r1, [r7, #8]
 801fbf6:	0a09      	lsrs	r1, r1, #8
 801fbf8:	fb01 f303 	mul.w	r3, r1, r3
 801fbfc:	6879      	ldr	r1, [r7, #4]
 801fbfe:	fb01 f303 	mul.w	r3, r1, r3
 801fc02:	431a      	orrs	r2, r3
 801fc04:	68fb      	ldr	r3, [r7, #12]
 801fc06:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801fc08:	bf00      	nop
 801fc0a:	3714      	adds	r7, #20
 801fc0c:	46bd      	mov	sp, r7
 801fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc12:	4770      	bx	lr

0801fc14 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801fc14:	b580      	push	{r7, lr}
 801fc16:	b088      	sub	sp, #32
 801fc18:	af00      	add	r7, sp, #0
 801fc1a:	6078      	str	r0, [r7, #4]
 801fc1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801fc1e:	683b      	ldr	r3, [r7, #0]
 801fc20:	681b      	ldr	r3, [r3, #0]
 801fc22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801fc24:	693b      	ldr	r3, [r7, #16]
 801fc26:	fa93 f3a3 	rbit	r3, r3
 801fc2a:	60fb      	str	r3, [r7, #12]
  return result;
 801fc2c:	68fb      	ldr	r3, [r7, #12]
 801fc2e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801fc30:	697b      	ldr	r3, [r7, #20]
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	d101      	bne.n	801fc3a <LL_GPIO_Init+0x26>
    return 32U;
 801fc36:	2320      	movs	r3, #32
 801fc38:	e003      	b.n	801fc42 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801fc3a:	697b      	ldr	r3, [r7, #20]
 801fc3c:	fab3 f383 	clz	r3, r3
 801fc40:	b2db      	uxtb	r3, r3
 801fc42:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801fc44:	e048      	b.n	801fcd8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 801fc46:	683b      	ldr	r3, [r7, #0]
 801fc48:	681a      	ldr	r2, [r3, #0]
 801fc4a:	2101      	movs	r1, #1
 801fc4c:	69fb      	ldr	r3, [r7, #28]
 801fc4e:	fa01 f303 	lsl.w	r3, r1, r3
 801fc52:	4013      	ands	r3, r2
 801fc54:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 801fc56:	69bb      	ldr	r3, [r7, #24]
 801fc58:	2b00      	cmp	r3, #0
 801fc5a:	d03a      	beq.n	801fcd2 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801fc5c:	683b      	ldr	r3, [r7, #0]
 801fc5e:	685b      	ldr	r3, [r3, #4]
 801fc60:	2b01      	cmp	r3, #1
 801fc62:	d003      	beq.n	801fc6c <LL_GPIO_Init+0x58>
 801fc64:	683b      	ldr	r3, [r7, #0]
 801fc66:	685b      	ldr	r3, [r3, #4]
 801fc68:	2b02      	cmp	r3, #2
 801fc6a:	d10e      	bne.n	801fc8a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801fc6c:	683b      	ldr	r3, [r7, #0]
 801fc6e:	689b      	ldr	r3, [r3, #8]
 801fc70:	461a      	mov	r2, r3
 801fc72:	69b9      	ldr	r1, [r7, #24]
 801fc74:	6878      	ldr	r0, [r7, #4]
 801fc76:	f7ff ff2b 	bl	801fad0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 801fc7a:	683b      	ldr	r3, [r7, #0]
 801fc7c:	6819      	ldr	r1, [r3, #0]
 801fc7e:	683b      	ldr	r3, [r7, #0]
 801fc80:	68db      	ldr	r3, [r3, #12]
 801fc82:	461a      	mov	r2, r3
 801fc84:	6878      	ldr	r0, [r7, #4]
 801fc86:	f7ff ff0b 	bl	801faa0 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801fc8a:	683b      	ldr	r3, [r7, #0]
 801fc8c:	691b      	ldr	r3, [r3, #16]
 801fc8e:	461a      	mov	r2, r3
 801fc90:	69b9      	ldr	r1, [r7, #24]
 801fc92:	6878      	ldr	r0, [r7, #4]
 801fc94:	f7ff ff3c 	bl	801fb10 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801fc98:	683b      	ldr	r3, [r7, #0]
 801fc9a:	685b      	ldr	r3, [r3, #4]
 801fc9c:	2b02      	cmp	r3, #2
 801fc9e:	d111      	bne.n	801fcc4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 801fca0:	69bb      	ldr	r3, [r7, #24]
 801fca2:	2bff      	cmp	r3, #255	@ 0xff
 801fca4:	d807      	bhi.n	801fcb6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801fca6:	683b      	ldr	r3, [r7, #0]
 801fca8:	695b      	ldr	r3, [r3, #20]
 801fcaa:	461a      	mov	r2, r3
 801fcac:	69b9      	ldr	r1, [r7, #24]
 801fcae:	6878      	ldr	r0, [r7, #4]
 801fcb0:	f7ff ff4e 	bl	801fb50 <LL_GPIO_SetAFPin_0_7>
 801fcb4:	e006      	b.n	801fcc4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801fcb6:	683b      	ldr	r3, [r7, #0]
 801fcb8:	695b      	ldr	r3, [r3, #20]
 801fcba:	461a      	mov	r2, r3
 801fcbc:	69b9      	ldr	r1, [r7, #24]
 801fcbe:	6878      	ldr	r0, [r7, #4]
 801fcc0:	f7ff ff72 	bl	801fba8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801fcc4:	683b      	ldr	r3, [r7, #0]
 801fcc6:	685b      	ldr	r3, [r3, #4]
 801fcc8:	461a      	mov	r2, r3
 801fcca:	69b9      	ldr	r1, [r7, #24]
 801fccc:	6878      	ldr	r0, [r7, #4]
 801fcce:	f7ff fec7 	bl	801fa60 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801fcd2:	69fb      	ldr	r3, [r7, #28]
 801fcd4:	3301      	adds	r3, #1
 801fcd6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801fcd8:	683b      	ldr	r3, [r7, #0]
 801fcda:	681a      	ldr	r2, [r3, #0]
 801fcdc:	69fb      	ldr	r3, [r7, #28]
 801fcde:	fa22 f303 	lsr.w	r3, r2, r3
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	d1af      	bne.n	801fc46 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 801fce6:	2300      	movs	r3, #0
}
 801fce8:	4618      	mov	r0, r3
 801fcea:	3720      	adds	r7, #32
 801fcec:	46bd      	mov	sp, r7
 801fcee:	bd80      	pop	{r7, pc}

0801fcf0 <LL_I2C_Enable>:
{
 801fcf0:	b480      	push	{r7}
 801fcf2:	b083      	sub	sp, #12
 801fcf4:	af00      	add	r7, sp, #0
 801fcf6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 801fcf8:	687b      	ldr	r3, [r7, #4]
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	f043 0201 	orr.w	r2, r3, #1
 801fd00:	687b      	ldr	r3, [r7, #4]
 801fd02:	601a      	str	r2, [r3, #0]
}
 801fd04:	bf00      	nop
 801fd06:	370c      	adds	r7, #12
 801fd08:	46bd      	mov	sp, r7
 801fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd0e:	4770      	bx	lr

0801fd10 <LL_I2C_Disable>:
{
 801fd10:	b480      	push	{r7}
 801fd12:	b083      	sub	sp, #12
 801fd14:	af00      	add	r7, sp, #0
 801fd16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	681b      	ldr	r3, [r3, #0]
 801fd1c:	f023 0201 	bic.w	r2, r3, #1
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	601a      	str	r2, [r3, #0]
}
 801fd24:	bf00      	nop
 801fd26:	370c      	adds	r7, #12
 801fd28:	46bd      	mov	sp, r7
 801fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd2e:	4770      	bx	lr

0801fd30 <LL_I2C_ConfigFilters>:
{
 801fd30:	b480      	push	{r7}
 801fd32:	b085      	sub	sp, #20
 801fd34:	af00      	add	r7, sp, #0
 801fd36:	60f8      	str	r0, [r7, #12]
 801fd38:	60b9      	str	r1, [r7, #8]
 801fd3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 801fd3c:	68fb      	ldr	r3, [r7, #12]
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 801fd44:	687b      	ldr	r3, [r7, #4]
 801fd46:	0219      	lsls	r1, r3, #8
 801fd48:	68bb      	ldr	r3, [r7, #8]
 801fd4a:	430b      	orrs	r3, r1
 801fd4c:	431a      	orrs	r2, r3
 801fd4e:	68fb      	ldr	r3, [r7, #12]
 801fd50:	601a      	str	r2, [r3, #0]
}
 801fd52:	bf00      	nop
 801fd54:	3714      	adds	r7, #20
 801fd56:	46bd      	mov	sp, r7
 801fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd5c:	4770      	bx	lr
	...

0801fd60 <LL_I2C_SetOwnAddress1>:
{
 801fd60:	b480      	push	{r7}
 801fd62:	b085      	sub	sp, #20
 801fd64:	af00      	add	r7, sp, #0
 801fd66:	60f8      	str	r0, [r7, #12]
 801fd68:	60b9      	str	r1, [r7, #8]
 801fd6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 801fd6c:	68fb      	ldr	r3, [r7, #12]
 801fd6e:	689a      	ldr	r2, [r3, #8]
 801fd70:	4b06      	ldr	r3, [pc, #24]	@ (801fd8c <LL_I2C_SetOwnAddress1+0x2c>)
 801fd72:	4013      	ands	r3, r2
 801fd74:	68b9      	ldr	r1, [r7, #8]
 801fd76:	687a      	ldr	r2, [r7, #4]
 801fd78:	430a      	orrs	r2, r1
 801fd7a:	431a      	orrs	r2, r3
 801fd7c:	68fb      	ldr	r3, [r7, #12]
 801fd7e:	609a      	str	r2, [r3, #8]
}
 801fd80:	bf00      	nop
 801fd82:	3714      	adds	r7, #20
 801fd84:	46bd      	mov	sp, r7
 801fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd8a:	4770      	bx	lr
 801fd8c:	fffff800 	.word	0xfffff800

0801fd90 <LL_I2C_EnableOwnAddress1>:
{
 801fd90:	b480      	push	{r7}
 801fd92:	b083      	sub	sp, #12
 801fd94:	af00      	add	r7, sp, #0
 801fd96:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 801fd98:	687b      	ldr	r3, [r7, #4]
 801fd9a:	689b      	ldr	r3, [r3, #8]
 801fd9c:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	609a      	str	r2, [r3, #8]
}
 801fda4:	bf00      	nop
 801fda6:	370c      	adds	r7, #12
 801fda8:	46bd      	mov	sp, r7
 801fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdae:	4770      	bx	lr

0801fdb0 <LL_I2C_DisableOwnAddress1>:
{
 801fdb0:	b480      	push	{r7}
 801fdb2:	b083      	sub	sp, #12
 801fdb4:	af00      	add	r7, sp, #0
 801fdb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 801fdb8:	687b      	ldr	r3, [r7, #4]
 801fdba:	689b      	ldr	r3, [r3, #8]
 801fdbc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801fdc0:	687b      	ldr	r3, [r7, #4]
 801fdc2:	609a      	str	r2, [r3, #8]
}
 801fdc4:	bf00      	nop
 801fdc6:	370c      	adds	r7, #12
 801fdc8:	46bd      	mov	sp, r7
 801fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdce:	4770      	bx	lr

0801fdd0 <LL_I2C_SetTiming>:
{
 801fdd0:	b480      	push	{r7}
 801fdd2:	b083      	sub	sp, #12
 801fdd4:	af00      	add	r7, sp, #0
 801fdd6:	6078      	str	r0, [r7, #4]
 801fdd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 801fdda:	687b      	ldr	r3, [r7, #4]
 801fddc:	683a      	ldr	r2, [r7, #0]
 801fdde:	611a      	str	r2, [r3, #16]
}
 801fde0:	bf00      	nop
 801fde2:	370c      	adds	r7, #12
 801fde4:	46bd      	mov	sp, r7
 801fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdea:	4770      	bx	lr

0801fdec <LL_I2C_SetMode>:
{
 801fdec:	b480      	push	{r7}
 801fdee:	b083      	sub	sp, #12
 801fdf0:	af00      	add	r7, sp, #0
 801fdf2:	6078      	str	r0, [r7, #4]
 801fdf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	681b      	ldr	r3, [r3, #0]
 801fdfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801fdfe:	683b      	ldr	r3, [r7, #0]
 801fe00:	431a      	orrs	r2, r3
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	601a      	str	r2, [r3, #0]
}
 801fe06:	bf00      	nop
 801fe08:	370c      	adds	r7, #12
 801fe0a:	46bd      	mov	sp, r7
 801fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe10:	4770      	bx	lr

0801fe12 <LL_I2C_AcknowledgeNextData>:
{
 801fe12:	b480      	push	{r7}
 801fe14:	b083      	sub	sp, #12
 801fe16:	af00      	add	r7, sp, #0
 801fe18:	6078      	str	r0, [r7, #4]
 801fe1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	685b      	ldr	r3, [r3, #4]
 801fe20:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801fe24:	683b      	ldr	r3, [r7, #0]
 801fe26:	431a      	orrs	r2, r3
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	605a      	str	r2, [r3, #4]
}
 801fe2c:	bf00      	nop
 801fe2e:	370c      	adds	r7, #12
 801fe30:	46bd      	mov	sp, r7
 801fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe36:	4770      	bx	lr

0801fe38 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 801fe38:	b580      	push	{r7, lr}
 801fe3a:	b082      	sub	sp, #8
 801fe3c:	af00      	add	r7, sp, #0
 801fe3e:	6078      	str	r0, [r7, #4]
 801fe40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 801fe42:	6878      	ldr	r0, [r7, #4]
 801fe44:	f7ff ff64 	bl	801fd10 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 801fe48:	683b      	ldr	r3, [r7, #0]
 801fe4a:	6899      	ldr	r1, [r3, #8]
 801fe4c:	683b      	ldr	r3, [r7, #0]
 801fe4e:	68db      	ldr	r3, [r3, #12]
 801fe50:	461a      	mov	r2, r3
 801fe52:	6878      	ldr	r0, [r7, #4]
 801fe54:	f7ff ff6c 	bl	801fd30 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 801fe58:	683b      	ldr	r3, [r7, #0]
 801fe5a:	685b      	ldr	r3, [r3, #4]
 801fe5c:	4619      	mov	r1, r3
 801fe5e:	6878      	ldr	r0, [r7, #4]
 801fe60:	f7ff ffb6 	bl	801fdd0 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 801fe64:	6878      	ldr	r0, [r7, #4]
 801fe66:	f7ff ff43 	bl	801fcf0 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 801fe6a:	6878      	ldr	r0, [r7, #4]
 801fe6c:	f7ff ffa0 	bl	801fdb0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 801fe70:	683b      	ldr	r3, [r7, #0]
 801fe72:	6919      	ldr	r1, [r3, #16]
 801fe74:	683b      	ldr	r3, [r7, #0]
 801fe76:	699b      	ldr	r3, [r3, #24]
 801fe78:	461a      	mov	r2, r3
 801fe7a:	6878      	ldr	r0, [r7, #4]
 801fe7c:	f7ff ff70 	bl	801fd60 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 801fe80:	683b      	ldr	r3, [r7, #0]
 801fe82:	691b      	ldr	r3, [r3, #16]
 801fe84:	2b00      	cmp	r3, #0
 801fe86:	d002      	beq.n	801fe8e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 801fe88:	6878      	ldr	r0, [r7, #4]
 801fe8a:	f7ff ff81 	bl	801fd90 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 801fe8e:	683b      	ldr	r3, [r7, #0]
 801fe90:	681b      	ldr	r3, [r3, #0]
 801fe92:	4619      	mov	r1, r3
 801fe94:	6878      	ldr	r0, [r7, #4]
 801fe96:	f7ff ffa9 	bl	801fdec <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 801fe9a:	683b      	ldr	r3, [r7, #0]
 801fe9c:	695b      	ldr	r3, [r3, #20]
 801fe9e:	4619      	mov	r1, r3
 801fea0:	6878      	ldr	r0, [r7, #4]
 801fea2:	f7ff ffb6 	bl	801fe12 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 801fea6:	2300      	movs	r3, #0
}
 801fea8:	4618      	mov	r0, r3
 801feaa:	3708      	adds	r7, #8
 801feac:	46bd      	mov	sp, r7
 801feae:	bd80      	pop	{r7, pc}

0801feb0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 801feb0:	b480      	push	{r7}
 801feb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801feb4:	4b07      	ldr	r3, [pc, #28]	@ (801fed4 <LL_RCC_HSE_IsReady+0x24>)
 801feb6:	681b      	ldr	r3, [r3, #0]
 801feb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801febc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801fec0:	d101      	bne.n	801fec6 <LL_RCC_HSE_IsReady+0x16>
 801fec2:	2301      	movs	r3, #1
 801fec4:	e000      	b.n	801fec8 <LL_RCC_HSE_IsReady+0x18>
 801fec6:	2300      	movs	r3, #0
}
 801fec8:	4618      	mov	r0, r3
 801feca:	46bd      	mov	sp, r7
 801fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fed0:	4770      	bx	lr
 801fed2:	bf00      	nop
 801fed4:	58024400 	.word	0x58024400

0801fed8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 801fed8:	b480      	push	{r7}
 801feda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801fedc:	4b06      	ldr	r3, [pc, #24]	@ (801fef8 <LL_RCC_HSI_IsReady+0x20>)
 801fede:	681b      	ldr	r3, [r3, #0]
 801fee0:	f003 0304 	and.w	r3, r3, #4
 801fee4:	2b04      	cmp	r3, #4
 801fee6:	d101      	bne.n	801feec <LL_RCC_HSI_IsReady+0x14>
 801fee8:	2301      	movs	r3, #1
 801feea:	e000      	b.n	801feee <LL_RCC_HSI_IsReady+0x16>
 801feec:	2300      	movs	r3, #0
}
 801feee:	4618      	mov	r0, r3
 801fef0:	46bd      	mov	sp, r7
 801fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fef6:	4770      	bx	lr
 801fef8:	58024400 	.word	0x58024400

0801fefc <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 801fefc:	b480      	push	{r7}
 801fefe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 801ff00:	4b04      	ldr	r3, [pc, #16]	@ (801ff14 <LL_RCC_HSI_GetDivider+0x18>)
 801ff02:	681b      	ldr	r3, [r3, #0]
 801ff04:	f003 0318 	and.w	r3, r3, #24
}
 801ff08:	4618      	mov	r0, r3
 801ff0a:	46bd      	mov	sp, r7
 801ff0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff10:	4770      	bx	lr
 801ff12:	bf00      	nop
 801ff14:	58024400 	.word	0x58024400

0801ff18 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 801ff18:	b480      	push	{r7}
 801ff1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 801ff1c:	4b07      	ldr	r3, [pc, #28]	@ (801ff3c <LL_RCC_CSI_IsReady+0x24>)
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ff24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ff28:	d101      	bne.n	801ff2e <LL_RCC_CSI_IsReady+0x16>
 801ff2a:	2301      	movs	r3, #1
 801ff2c:	e000      	b.n	801ff30 <LL_RCC_CSI_IsReady+0x18>
 801ff2e:	2300      	movs	r3, #0
}
 801ff30:	4618      	mov	r0, r3
 801ff32:	46bd      	mov	sp, r7
 801ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff38:	4770      	bx	lr
 801ff3a:	bf00      	nop
 801ff3c:	58024400 	.word	0x58024400

0801ff40 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 801ff40:	b480      	push	{r7}
 801ff42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801ff44:	4b06      	ldr	r3, [pc, #24]	@ (801ff60 <LL_RCC_LSE_IsReady+0x20>)
 801ff46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ff48:	f003 0302 	and.w	r3, r3, #2
 801ff4c:	2b02      	cmp	r3, #2
 801ff4e:	d101      	bne.n	801ff54 <LL_RCC_LSE_IsReady+0x14>
 801ff50:	2301      	movs	r3, #1
 801ff52:	e000      	b.n	801ff56 <LL_RCC_LSE_IsReady+0x16>
 801ff54:	2300      	movs	r3, #0
}
 801ff56:	4618      	mov	r0, r3
 801ff58:	46bd      	mov	sp, r7
 801ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff5e:	4770      	bx	lr
 801ff60:	58024400 	.word	0x58024400

0801ff64 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 801ff64:	b480      	push	{r7}
 801ff66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801ff68:	4b04      	ldr	r3, [pc, #16]	@ (801ff7c <LL_RCC_GetSysClkSource+0x18>)
 801ff6a:	691b      	ldr	r3, [r3, #16]
 801ff6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 801ff70:	4618      	mov	r0, r3
 801ff72:	46bd      	mov	sp, r7
 801ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff78:	4770      	bx	lr
 801ff7a:	bf00      	nop
 801ff7c:	58024400 	.word	0x58024400

0801ff80 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 801ff80:	b480      	push	{r7}
 801ff82:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 801ff84:	4b04      	ldr	r3, [pc, #16]	@ (801ff98 <LL_RCC_GetSysPrescaler+0x18>)
 801ff86:	699b      	ldr	r3, [r3, #24]
 801ff88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 801ff8c:	4618      	mov	r0, r3
 801ff8e:	46bd      	mov	sp, r7
 801ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff94:	4770      	bx	lr
 801ff96:	bf00      	nop
 801ff98:	58024400 	.word	0x58024400

0801ff9c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 801ff9c:	b480      	push	{r7}
 801ff9e:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 801ffa0:	4b04      	ldr	r3, [pc, #16]	@ (801ffb4 <LL_RCC_GetAHBPrescaler+0x18>)
 801ffa2:	699b      	ldr	r3, [r3, #24]
 801ffa4:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 801ffa8:	4618      	mov	r0, r3
 801ffaa:	46bd      	mov	sp, r7
 801ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffb0:	4770      	bx	lr
 801ffb2:	bf00      	nop
 801ffb4:	58024400 	.word	0x58024400

0801ffb8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 801ffb8:	b480      	push	{r7}
 801ffba:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 801ffbc:	4b04      	ldr	r3, [pc, #16]	@ (801ffd0 <LL_RCC_GetAPB1Prescaler+0x18>)
 801ffbe:	69db      	ldr	r3, [r3, #28]
 801ffc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 801ffc4:	4618      	mov	r0, r3
 801ffc6:	46bd      	mov	sp, r7
 801ffc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffcc:	4770      	bx	lr
 801ffce:	bf00      	nop
 801ffd0:	58024400 	.word	0x58024400

0801ffd4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 801ffd4:	b480      	push	{r7}
 801ffd6:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 801ffd8:	4b04      	ldr	r3, [pc, #16]	@ (801ffec <LL_RCC_GetAPB2Prescaler+0x18>)
 801ffda:	69db      	ldr	r3, [r3, #28]
 801ffdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 801ffe0:	4618      	mov	r0, r3
 801ffe2:	46bd      	mov	sp, r7
 801ffe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffe8:	4770      	bx	lr
 801ffea:	bf00      	nop
 801ffec:	58024400 	.word	0x58024400

0801fff0 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 801fff0:	b480      	push	{r7}
 801fff2:	b085      	sub	sp, #20
 801fff4:	af00      	add	r7, sp, #0
 801fff6:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	b2da      	uxtb	r2, r3
 801fffc:	4b0e      	ldr	r3, [pc, #56]	@ (8020038 <LL_RCC_GetClockSource+0x48>)
 801fffe:	4413      	add	r3, r2
 8020000:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8020002:	68fb      	ldr	r3, [r7, #12]
 8020004:	681a      	ldr	r2, [r3, #0]
 8020006:	687b      	ldr	r3, [r7, #4]
 8020008:	0e19      	lsrs	r1, r3, #24
 802000a:	687b      	ldr	r3, [r7, #4]
 802000c:	0a1b      	lsrs	r3, r3, #8
 802000e:	f003 031f 	and.w	r3, r3, #31
 8020012:	fa01 f303 	lsl.w	r3, r1, r3
 8020016:	401a      	ands	r2, r3
 8020018:	687b      	ldr	r3, [r7, #4]
 802001a:	0a1b      	lsrs	r3, r3, #8
 802001c:	f003 031f 	and.w	r3, r3, #31
 8020020:	fa22 f303 	lsr.w	r3, r2, r3
 8020024:	041a      	lsls	r2, r3, #16
 8020026:	687b      	ldr	r3, [r7, #4]
 8020028:	4313      	orrs	r3, r2
}
 802002a:	4618      	mov	r0, r3
 802002c:	3714      	adds	r7, #20
 802002e:	46bd      	mov	sp, r7
 8020030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020034:	4770      	bx	lr
 8020036:	bf00      	nop
 8020038:	5802444c 	.word	0x5802444c

0802003c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 802003c:	b580      	push	{r7, lr}
 802003e:	b082      	sub	sp, #8
 8020040:	af00      	add	r7, sp, #0
 8020042:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8020044:	6878      	ldr	r0, [r7, #4]
 8020046:	f7ff ffd3 	bl	801fff0 <LL_RCC_GetClockSource>
 802004a:	4603      	mov	r3, r0
}
 802004c:	4618      	mov	r0, r3
 802004e:	3708      	adds	r7, #8
 8020050:	46bd      	mov	sp, r7
 8020052:	bd80      	pop	{r7, pc}

08020054 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 8020054:	b480      	push	{r7}
 8020056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8020058:	4b04      	ldr	r3, [pc, #16]	@ (802006c <LL_RCC_PLL_GetSource+0x18>)
 802005a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802005c:	f003 0303 	and.w	r3, r3, #3
}
 8020060:	4618      	mov	r0, r3
 8020062:	46bd      	mov	sp, r7
 8020064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020068:	4770      	bx	lr
 802006a:	bf00      	nop
 802006c:	58024400 	.word	0x58024400

08020070 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8020070:	b480      	push	{r7}
 8020072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8020074:	4b07      	ldr	r3, [pc, #28]	@ (8020094 <LL_RCC_PLL1P_IsEnabled+0x24>)
 8020076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802007c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020080:	d101      	bne.n	8020086 <LL_RCC_PLL1P_IsEnabled+0x16>
 8020082:	2301      	movs	r3, #1
 8020084:	e000      	b.n	8020088 <LL_RCC_PLL1P_IsEnabled+0x18>
 8020086:	2300      	movs	r3, #0
}
 8020088:	4618      	mov	r0, r3
 802008a:	46bd      	mov	sp, r7
 802008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020090:	4770      	bx	lr
 8020092:	bf00      	nop
 8020094:	58024400 	.word	0x58024400

08020098 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 8020098:	b480      	push	{r7}
 802009a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 802009c:	4b07      	ldr	r3, [pc, #28]	@ (80200bc <LL_RCC_PLL1Q_IsEnabled+0x24>)
 802009e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80200a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80200a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80200a8:	d101      	bne.n	80200ae <LL_RCC_PLL1Q_IsEnabled+0x16>
 80200aa:	2301      	movs	r3, #1
 80200ac:	e000      	b.n	80200b0 <LL_RCC_PLL1Q_IsEnabled+0x18>
 80200ae:	2300      	movs	r3, #0
}
 80200b0:	4618      	mov	r0, r3
 80200b2:	46bd      	mov	sp, r7
 80200b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200b8:	4770      	bx	lr
 80200ba:	bf00      	nop
 80200bc:	58024400 	.word	0x58024400

080200c0 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 80200c0:	b480      	push	{r7}
 80200c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 80200c4:	4b07      	ldr	r3, [pc, #28]	@ (80200e4 <LL_RCC_PLL1R_IsEnabled+0x24>)
 80200c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80200c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80200cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80200d0:	d101      	bne.n	80200d6 <LL_RCC_PLL1R_IsEnabled+0x16>
 80200d2:	2301      	movs	r3, #1
 80200d4:	e000      	b.n	80200d8 <LL_RCC_PLL1R_IsEnabled+0x18>
 80200d6:	2300      	movs	r3, #0
}
 80200d8:	4618      	mov	r0, r3
 80200da:	46bd      	mov	sp, r7
 80200dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200e0:	4770      	bx	lr
 80200e2:	bf00      	nop
 80200e4:	58024400 	.word	0x58024400

080200e8 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 80200e8:	b480      	push	{r7}
 80200ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 80200ec:	4b06      	ldr	r3, [pc, #24]	@ (8020108 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 80200ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80200f0:	f003 0301 	and.w	r3, r3, #1
 80200f4:	2b01      	cmp	r3, #1
 80200f6:	d101      	bne.n	80200fc <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 80200f8:	2301      	movs	r3, #1
 80200fa:	e000      	b.n	80200fe <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 80200fc:	2300      	movs	r3, #0
}
 80200fe:	4618      	mov	r0, r3
 8020100:	46bd      	mov	sp, r7
 8020102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020106:	4770      	bx	lr
 8020108:	58024400 	.word	0x58024400

0802010c <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 802010c:	b480      	push	{r7}
 802010e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8020110:	4b04      	ldr	r3, [pc, #16]	@ (8020124 <LL_RCC_PLL1_GetN+0x18>)
 8020112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020118:	3301      	adds	r3, #1
}
 802011a:	4618      	mov	r0, r3
 802011c:	46bd      	mov	sp, r7
 802011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020122:	4770      	bx	lr
 8020124:	58024400 	.word	0x58024400

08020128 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 8020128:	b480      	push	{r7}
 802012a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 802012c:	4b04      	ldr	r3, [pc, #16]	@ (8020140 <LL_RCC_PLL1_GetM+0x18>)
 802012e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020130:	091b      	lsrs	r3, r3, #4
 8020132:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8020136:	4618      	mov	r0, r3
 8020138:	46bd      	mov	sp, r7
 802013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802013e:	4770      	bx	lr
 8020140:	58024400 	.word	0x58024400

08020144 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8020144:	b480      	push	{r7}
 8020146:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8020148:	4b05      	ldr	r3, [pc, #20]	@ (8020160 <LL_RCC_PLL1_GetP+0x1c>)
 802014a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802014c:	0a5b      	lsrs	r3, r3, #9
 802014e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020152:	3301      	adds	r3, #1
}
 8020154:	4618      	mov	r0, r3
 8020156:	46bd      	mov	sp, r7
 8020158:	f85d 7b04 	ldr.w	r7, [sp], #4
 802015c:	4770      	bx	lr
 802015e:	bf00      	nop
 8020160:	58024400 	.word	0x58024400

08020164 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 8020164:	b480      	push	{r7}
 8020166:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8020168:	4b05      	ldr	r3, [pc, #20]	@ (8020180 <LL_RCC_PLL1_GetQ+0x1c>)
 802016a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802016c:	0c1b      	lsrs	r3, r3, #16
 802016e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020172:	3301      	adds	r3, #1
}
 8020174:	4618      	mov	r0, r3
 8020176:	46bd      	mov	sp, r7
 8020178:	f85d 7b04 	ldr.w	r7, [sp], #4
 802017c:	4770      	bx	lr
 802017e:	bf00      	nop
 8020180:	58024400 	.word	0x58024400

08020184 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8020184:	b480      	push	{r7}
 8020186:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8020188:	4b05      	ldr	r3, [pc, #20]	@ (80201a0 <LL_RCC_PLL1_GetR+0x1c>)
 802018a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802018c:	0e1b      	lsrs	r3, r3, #24
 802018e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020192:	3301      	adds	r3, #1
}
 8020194:	4618      	mov	r0, r3
 8020196:	46bd      	mov	sp, r7
 8020198:	f85d 7b04 	ldr.w	r7, [sp], #4
 802019c:	4770      	bx	lr
 802019e:	bf00      	nop
 80201a0:	58024400 	.word	0x58024400

080201a4 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 80201a4:	b480      	push	{r7}
 80201a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 80201a8:	4b04      	ldr	r3, [pc, #16]	@ (80201bc <LL_RCC_PLL1_GetFRACN+0x18>)
 80201aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80201ac:	08db      	lsrs	r3, r3, #3
 80201ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80201b2:	4618      	mov	r0, r3
 80201b4:	46bd      	mov	sp, r7
 80201b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201ba:	4770      	bx	lr
 80201bc:	58024400 	.word	0x58024400

080201c0 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 80201c0:	b480      	push	{r7}
 80201c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 80201c4:	4b07      	ldr	r3, [pc, #28]	@ (80201e4 <LL_RCC_PLL2_IsReady+0x24>)
 80201c6:	681b      	ldr	r3, [r3, #0]
 80201c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80201cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80201d0:	d101      	bne.n	80201d6 <LL_RCC_PLL2_IsReady+0x16>
 80201d2:	2301      	movs	r3, #1
 80201d4:	e000      	b.n	80201d8 <LL_RCC_PLL2_IsReady+0x18>
 80201d6:	2300      	movs	r3, #0
}
 80201d8:	4618      	mov	r0, r3
 80201da:	46bd      	mov	sp, r7
 80201dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201e0:	4770      	bx	lr
 80201e2:	bf00      	nop
 80201e4:	58024400 	.word	0x58024400

080201e8 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 80201e8:	b480      	push	{r7}
 80201ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 80201ec:	4b07      	ldr	r3, [pc, #28]	@ (802020c <LL_RCC_PLL2P_IsEnabled+0x24>)
 80201ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80201f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80201f8:	d101      	bne.n	80201fe <LL_RCC_PLL2P_IsEnabled+0x16>
 80201fa:	2301      	movs	r3, #1
 80201fc:	e000      	b.n	8020200 <LL_RCC_PLL2P_IsEnabled+0x18>
 80201fe:	2300      	movs	r3, #0
}
 8020200:	4618      	mov	r0, r3
 8020202:	46bd      	mov	sp, r7
 8020204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020208:	4770      	bx	lr
 802020a:	bf00      	nop
 802020c:	58024400 	.word	0x58024400

08020210 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8020210:	b480      	push	{r7}
 8020212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8020214:	4b07      	ldr	r3, [pc, #28]	@ (8020234 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8020216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802021c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020220:	d101      	bne.n	8020226 <LL_RCC_PLL2Q_IsEnabled+0x16>
 8020222:	2301      	movs	r3, #1
 8020224:	e000      	b.n	8020228 <LL_RCC_PLL2Q_IsEnabled+0x18>
 8020226:	2300      	movs	r3, #0
}
 8020228:	4618      	mov	r0, r3
 802022a:	46bd      	mov	sp, r7
 802022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020230:	4770      	bx	lr
 8020232:	bf00      	nop
 8020234:	58024400 	.word	0x58024400

08020238 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8020238:	b480      	push	{r7}
 802023a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 802023c:	4b07      	ldr	r3, [pc, #28]	@ (802025c <LL_RCC_PLL2R_IsEnabled+0x24>)
 802023e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8020244:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8020248:	d101      	bne.n	802024e <LL_RCC_PLL2R_IsEnabled+0x16>
 802024a:	2301      	movs	r3, #1
 802024c:	e000      	b.n	8020250 <LL_RCC_PLL2R_IsEnabled+0x18>
 802024e:	2300      	movs	r3, #0
}
 8020250:	4618      	mov	r0, r3
 8020252:	46bd      	mov	sp, r7
 8020254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020258:	4770      	bx	lr
 802025a:	bf00      	nop
 802025c:	58024400 	.word	0x58024400

08020260 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8020260:	b480      	push	{r7}
 8020262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8020264:	4b06      	ldr	r3, [pc, #24]	@ (8020280 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8020266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020268:	f003 0310 	and.w	r3, r3, #16
 802026c:	2b10      	cmp	r3, #16
 802026e:	d101      	bne.n	8020274 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8020270:	2301      	movs	r3, #1
 8020272:	e000      	b.n	8020276 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8020274:	2300      	movs	r3, #0
}
 8020276:	4618      	mov	r0, r3
 8020278:	46bd      	mov	sp, r7
 802027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802027e:	4770      	bx	lr
 8020280:	58024400 	.word	0x58024400

08020284 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8020284:	b480      	push	{r7}
 8020286:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8020288:	4b04      	ldr	r3, [pc, #16]	@ (802029c <LL_RCC_PLL2_GetN+0x18>)
 802028a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802028c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020290:	3301      	adds	r3, #1
}
 8020292:	4618      	mov	r0, r3
 8020294:	46bd      	mov	sp, r7
 8020296:	f85d 7b04 	ldr.w	r7, [sp], #4
 802029a:	4770      	bx	lr
 802029c:	58024400 	.word	0x58024400

080202a0 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 80202a0:	b480      	push	{r7}
 80202a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 80202a4:	4b04      	ldr	r3, [pc, #16]	@ (80202b8 <LL_RCC_PLL2_GetM+0x18>)
 80202a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80202a8:	0b1b      	lsrs	r3, r3, #12
 80202aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80202ae:	4618      	mov	r0, r3
 80202b0:	46bd      	mov	sp, r7
 80202b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202b6:	4770      	bx	lr
 80202b8:	58024400 	.word	0x58024400

080202bc <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 80202bc:	b480      	push	{r7}
 80202be:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 80202c0:	4b05      	ldr	r3, [pc, #20]	@ (80202d8 <LL_RCC_PLL2_GetP+0x1c>)
 80202c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80202c4:	0a5b      	lsrs	r3, r3, #9
 80202c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80202ca:	3301      	adds	r3, #1
}
 80202cc:	4618      	mov	r0, r3
 80202ce:	46bd      	mov	sp, r7
 80202d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202d4:	4770      	bx	lr
 80202d6:	bf00      	nop
 80202d8:	58024400 	.word	0x58024400

080202dc <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 80202dc:	b480      	push	{r7}
 80202de:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 80202e0:	4b05      	ldr	r3, [pc, #20]	@ (80202f8 <LL_RCC_PLL2_GetQ+0x1c>)
 80202e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80202e4:	0c1b      	lsrs	r3, r3, #16
 80202e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80202ea:	3301      	adds	r3, #1
}
 80202ec:	4618      	mov	r0, r3
 80202ee:	46bd      	mov	sp, r7
 80202f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202f4:	4770      	bx	lr
 80202f6:	bf00      	nop
 80202f8:	58024400 	.word	0x58024400

080202fc <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 80202fc:	b480      	push	{r7}
 80202fe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8020300:	4b05      	ldr	r3, [pc, #20]	@ (8020318 <LL_RCC_PLL2_GetR+0x1c>)
 8020302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020304:	0e1b      	lsrs	r3, r3, #24
 8020306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802030a:	3301      	adds	r3, #1
}
 802030c:	4618      	mov	r0, r3
 802030e:	46bd      	mov	sp, r7
 8020310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020314:	4770      	bx	lr
 8020316:	bf00      	nop
 8020318:	58024400 	.word	0x58024400

0802031c <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 802031c:	b480      	push	{r7}
 802031e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8020320:	4b04      	ldr	r3, [pc, #16]	@ (8020334 <LL_RCC_PLL2_GetFRACN+0x18>)
 8020322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020324:	08db      	lsrs	r3, r3, #3
 8020326:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 802032a:	4618      	mov	r0, r3
 802032c:	46bd      	mov	sp, r7
 802032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020332:	4770      	bx	lr
 8020334:	58024400 	.word	0x58024400

08020338 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8020338:	b480      	push	{r7}
 802033a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 802033c:	4b07      	ldr	r3, [pc, #28]	@ (802035c <LL_RCC_PLL3_IsReady+0x24>)
 802033e:	681b      	ldr	r3, [r3, #0]
 8020340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8020344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020348:	d101      	bne.n	802034e <LL_RCC_PLL3_IsReady+0x16>
 802034a:	2301      	movs	r3, #1
 802034c:	e000      	b.n	8020350 <LL_RCC_PLL3_IsReady+0x18>
 802034e:	2300      	movs	r3, #0
}
 8020350:	4618      	mov	r0, r3
 8020352:	46bd      	mov	sp, r7
 8020354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020358:	4770      	bx	lr
 802035a:	bf00      	nop
 802035c:	58024400 	.word	0x58024400

08020360 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8020360:	b480      	push	{r7}
 8020362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8020364:	4b07      	ldr	r3, [pc, #28]	@ (8020384 <LL_RCC_PLL3P_IsEnabled+0x24>)
 8020366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802036c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8020370:	d101      	bne.n	8020376 <LL_RCC_PLL3P_IsEnabled+0x16>
 8020372:	2301      	movs	r3, #1
 8020374:	e000      	b.n	8020378 <LL_RCC_PLL3P_IsEnabled+0x18>
 8020376:	2300      	movs	r3, #0
}
 8020378:	4618      	mov	r0, r3
 802037a:	46bd      	mov	sp, r7
 802037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020380:	4770      	bx	lr
 8020382:	bf00      	nop
 8020384:	58024400 	.word	0x58024400

08020388 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8020388:	b480      	push	{r7}
 802038a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 802038c:	4b07      	ldr	r3, [pc, #28]	@ (80203ac <LL_RCC_PLL3Q_IsEnabled+0x24>)
 802038e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020390:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020394:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8020398:	d101      	bne.n	802039e <LL_RCC_PLL3Q_IsEnabled+0x16>
 802039a:	2301      	movs	r3, #1
 802039c:	e000      	b.n	80203a0 <LL_RCC_PLL3Q_IsEnabled+0x18>
 802039e:	2300      	movs	r3, #0
}
 80203a0:	4618      	mov	r0, r3
 80203a2:	46bd      	mov	sp, r7
 80203a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a8:	4770      	bx	lr
 80203aa:	bf00      	nop
 80203ac:	58024400 	.word	0x58024400

080203b0 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 80203b0:	b480      	push	{r7}
 80203b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 80203b4:	4b07      	ldr	r3, [pc, #28]	@ (80203d4 <LL_RCC_PLL3R_IsEnabled+0x24>)
 80203b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80203b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80203bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80203c0:	d101      	bne.n	80203c6 <LL_RCC_PLL3R_IsEnabled+0x16>
 80203c2:	2301      	movs	r3, #1
 80203c4:	e000      	b.n	80203c8 <LL_RCC_PLL3R_IsEnabled+0x18>
 80203c6:	2300      	movs	r3, #0
}
 80203c8:	4618      	mov	r0, r3
 80203ca:	46bd      	mov	sp, r7
 80203cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203d0:	4770      	bx	lr
 80203d2:	bf00      	nop
 80203d4:	58024400 	.word	0x58024400

080203d8 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 80203d8:	b480      	push	{r7}
 80203da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 80203dc:	4b07      	ldr	r3, [pc, #28]	@ (80203fc <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 80203de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80203e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80203e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80203e8:	d101      	bne.n	80203ee <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 80203ea:	2301      	movs	r3, #1
 80203ec:	e000      	b.n	80203f0 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 80203ee:	2300      	movs	r3, #0
}
 80203f0:	4618      	mov	r0, r3
 80203f2:	46bd      	mov	sp, r7
 80203f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203f8:	4770      	bx	lr
 80203fa:	bf00      	nop
 80203fc:	58024400 	.word	0x58024400

08020400 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8020400:	b480      	push	{r7}
 8020402:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8020404:	4b04      	ldr	r3, [pc, #16]	@ (8020418 <LL_RCC_PLL3_GetN+0x18>)
 8020406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802040c:	3301      	adds	r3, #1
}
 802040e:	4618      	mov	r0, r3
 8020410:	46bd      	mov	sp, r7
 8020412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020416:	4770      	bx	lr
 8020418:	58024400 	.word	0x58024400

0802041c <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 802041c:	b480      	push	{r7}
 802041e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8020420:	4b04      	ldr	r3, [pc, #16]	@ (8020434 <LL_RCC_PLL3_GetM+0x18>)
 8020422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020424:	0d1b      	lsrs	r3, r3, #20
 8020426:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 802042a:	4618      	mov	r0, r3
 802042c:	46bd      	mov	sp, r7
 802042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020432:	4770      	bx	lr
 8020434:	58024400 	.word	0x58024400

08020438 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8020438:	b480      	push	{r7}
 802043a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 802043c:	4b05      	ldr	r3, [pc, #20]	@ (8020454 <LL_RCC_PLL3_GetP+0x1c>)
 802043e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020440:	0a5b      	lsrs	r3, r3, #9
 8020442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020446:	3301      	adds	r3, #1
}
 8020448:	4618      	mov	r0, r3
 802044a:	46bd      	mov	sp, r7
 802044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020450:	4770      	bx	lr
 8020452:	bf00      	nop
 8020454:	58024400 	.word	0x58024400

08020458 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8020458:	b480      	push	{r7}
 802045a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 802045c:	4b05      	ldr	r3, [pc, #20]	@ (8020474 <LL_RCC_PLL3_GetQ+0x1c>)
 802045e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020460:	0c1b      	lsrs	r3, r3, #16
 8020462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020466:	3301      	adds	r3, #1
}
 8020468:	4618      	mov	r0, r3
 802046a:	46bd      	mov	sp, r7
 802046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020470:	4770      	bx	lr
 8020472:	bf00      	nop
 8020474:	58024400 	.word	0x58024400

08020478 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8020478:	b480      	push	{r7}
 802047a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 802047c:	4b05      	ldr	r3, [pc, #20]	@ (8020494 <LL_RCC_PLL3_GetR+0x1c>)
 802047e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020480:	0e1b      	lsrs	r3, r3, #24
 8020482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020486:	3301      	adds	r3, #1
}
 8020488:	4618      	mov	r0, r3
 802048a:	46bd      	mov	sp, r7
 802048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020490:	4770      	bx	lr
 8020492:	bf00      	nop
 8020494:	58024400 	.word	0x58024400

08020498 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8020498:	b480      	push	{r7}
 802049a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 802049c:	4b04      	ldr	r3, [pc, #16]	@ (80204b0 <LL_RCC_PLL3_GetFRACN+0x18>)
 802049e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80204a0:	08db      	lsrs	r3, r3, #3
 80204a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80204a6:	4618      	mov	r0, r3
 80204a8:	46bd      	mov	sp, r7
 80204aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204ae:	4770      	bx	lr
 80204b0:	58024400 	.word	0x58024400

080204b4 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 80204b4:	b580      	push	{r7, lr}
 80204b6:	b08a      	sub	sp, #40	@ 0x28
 80204b8:	af02      	add	r7, sp, #8
 80204ba:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 80204bc:	2300      	movs	r3, #0
 80204be:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 80204c0:	2300      	movs	r3, #0
 80204c2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 80204c4:	f7ff fdc6 	bl	8020054 <LL_RCC_PLL_GetSource>
 80204c8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 80204ca:	697b      	ldr	r3, [r7, #20]
 80204cc:	2b02      	cmp	r3, #2
 80204ce:	d01f      	beq.n	8020510 <LL_RCC_GetPLL1ClockFreq+0x5c>
 80204d0:	697b      	ldr	r3, [r7, #20]
 80204d2:	2b02      	cmp	r3, #2
 80204d4:	d824      	bhi.n	8020520 <LL_RCC_GetPLL1ClockFreq+0x6c>
 80204d6:	697b      	ldr	r3, [r7, #20]
 80204d8:	2b00      	cmp	r3, #0
 80204da:	d003      	beq.n	80204e4 <LL_RCC_GetPLL1ClockFreq+0x30>
 80204dc:	697b      	ldr	r3, [r7, #20]
 80204de:	2b01      	cmp	r3, #1
 80204e0:	d00e      	beq.n	8020500 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 80204e2:	e01d      	b.n	8020520 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 80204e4:	f7ff fcf8 	bl	801fed8 <LL_RCC_HSI_IsReady>
 80204e8:	4603      	mov	r3, r0
 80204ea:	2b00      	cmp	r3, #0
 80204ec:	d01a      	beq.n	8020524 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80204ee:	f7ff fd05 	bl	801fefc <LL_RCC_HSI_GetDivider>
 80204f2:	4603      	mov	r3, r0
 80204f4:	08db      	lsrs	r3, r3, #3
 80204f6:	4a38      	ldr	r2, [pc, #224]	@ (80205d8 <LL_RCC_GetPLL1ClockFreq+0x124>)
 80204f8:	fa22 f303 	lsr.w	r3, r2, r3
 80204fc:	61fb      	str	r3, [r7, #28]
      break;
 80204fe:	e011      	b.n	8020524 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8020500:	f7ff fd0a 	bl	801ff18 <LL_RCC_CSI_IsReady>
 8020504:	4603      	mov	r3, r0
 8020506:	2b00      	cmp	r3, #0
 8020508:	d00e      	beq.n	8020528 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 802050a:	4b34      	ldr	r3, [pc, #208]	@ (80205dc <LL_RCC_GetPLL1ClockFreq+0x128>)
 802050c:	61fb      	str	r3, [r7, #28]
      break;
 802050e:	e00b      	b.n	8020528 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8020510:	f7ff fcce 	bl	801feb0 <LL_RCC_HSE_IsReady>
 8020514:	4603      	mov	r3, r0
 8020516:	2b00      	cmp	r3, #0
 8020518:	d008      	beq.n	802052c <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 802051a:	4b31      	ldr	r3, [pc, #196]	@ (80205e0 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 802051c:	61fb      	str	r3, [r7, #28]
      break;
 802051e:	e005      	b.n	802052c <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8020520:	bf00      	nop
 8020522:	e004      	b.n	802052e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8020524:	bf00      	nop
 8020526:	e002      	b.n	802052e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8020528:	bf00      	nop
 802052a:	e000      	b.n	802052e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 802052c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 802052e:	687b      	ldr	r3, [r7, #4]
 8020530:	2200      	movs	r2, #0
 8020532:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8020534:	687b      	ldr	r3, [r7, #4]
 8020536:	2200      	movs	r2, #0
 8020538:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 802053a:	687b      	ldr	r3, [r7, #4]
 802053c:	2200      	movs	r2, #0
 802053e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8020540:	f7ff fdf2 	bl	8020128 <LL_RCC_PLL1_GetM>
 8020544:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8020546:	f7ff fde1 	bl	802010c <LL_RCC_PLL1_GetN>
 802054a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 802054c:	f7ff fdcc 	bl	80200e8 <LL_RCC_PLL1FRACN_IsEnabled>
 8020550:	4603      	mov	r3, r0
 8020552:	2b00      	cmp	r3, #0
 8020554:	d002      	beq.n	802055c <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8020556:	f7ff fe25 	bl	80201a4 <LL_RCC_PLL1_GetFRACN>
 802055a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 802055c:	693b      	ldr	r3, [r7, #16]
 802055e:	2b00      	cmp	r3, #0
 8020560:	d035      	beq.n	80205ce <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 8020562:	f7ff fd85 	bl	8020070 <LL_RCC_PLL1P_IsEnabled>
 8020566:	4603      	mov	r3, r0
 8020568:	2b00      	cmp	r3, #0
 802056a:	d00c      	beq.n	8020586 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 802056c:	f7ff fdea 	bl	8020144 <LL_RCC_PLL1_GetP>
 8020570:	4603      	mov	r3, r0
 8020572:	9300      	str	r3, [sp, #0]
 8020574:	69bb      	ldr	r3, [r7, #24]
 8020576:	68fa      	ldr	r2, [r7, #12]
 8020578:	6939      	ldr	r1, [r7, #16]
 802057a:	69f8      	ldr	r0, [r7, #28]
 802057c:	f000 f964 	bl	8020848 <LL_RCC_CalcPLLClockFreq>
 8020580:	4602      	mov	r2, r0
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 8020586:	f7ff fd87 	bl	8020098 <LL_RCC_PLL1Q_IsEnabled>
 802058a:	4603      	mov	r3, r0
 802058c:	2b00      	cmp	r3, #0
 802058e:	d00c      	beq.n	80205aa <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8020590:	f7ff fde8 	bl	8020164 <LL_RCC_PLL1_GetQ>
 8020594:	4603      	mov	r3, r0
 8020596:	9300      	str	r3, [sp, #0]
 8020598:	69bb      	ldr	r3, [r7, #24]
 802059a:	68fa      	ldr	r2, [r7, #12]
 802059c:	6939      	ldr	r1, [r7, #16]
 802059e:	69f8      	ldr	r0, [r7, #28]
 80205a0:	f000 f952 	bl	8020848 <LL_RCC_CalcPLLClockFreq>
 80205a4:	4602      	mov	r2, r0
 80205a6:	687b      	ldr	r3, [r7, #4]
 80205a8:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 80205aa:	f7ff fd89 	bl	80200c0 <LL_RCC_PLL1R_IsEnabled>
 80205ae:	4603      	mov	r3, r0
 80205b0:	2b00      	cmp	r3, #0
 80205b2:	d00c      	beq.n	80205ce <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 80205b4:	f7ff fde6 	bl	8020184 <LL_RCC_PLL1_GetR>
 80205b8:	4603      	mov	r3, r0
 80205ba:	9300      	str	r3, [sp, #0]
 80205bc:	69bb      	ldr	r3, [r7, #24]
 80205be:	68fa      	ldr	r2, [r7, #12]
 80205c0:	6939      	ldr	r1, [r7, #16]
 80205c2:	69f8      	ldr	r0, [r7, #28]
 80205c4:	f000 f940 	bl	8020848 <LL_RCC_CalcPLLClockFreq>
 80205c8:	4602      	mov	r2, r0
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	609a      	str	r2, [r3, #8]
    }
  }
}
 80205ce:	bf00      	nop
 80205d0:	3720      	adds	r7, #32
 80205d2:	46bd      	mov	sp, r7
 80205d4:	bd80      	pop	{r7, pc}
 80205d6:	bf00      	nop
 80205d8:	03d09000 	.word	0x03d09000
 80205dc:	003d0900 	.word	0x003d0900
 80205e0:	017d7840 	.word	0x017d7840

080205e4 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 80205e4:	b580      	push	{r7, lr}
 80205e6:	b08a      	sub	sp, #40	@ 0x28
 80205e8:	af02      	add	r7, sp, #8
 80205ea:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 80205ec:	2300      	movs	r3, #0
 80205ee:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 80205f0:	2300      	movs	r3, #0
 80205f2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 80205f4:	f7ff fd2e 	bl	8020054 <LL_RCC_PLL_GetSource>
 80205f8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 80205fa:	697b      	ldr	r3, [r7, #20]
 80205fc:	2b02      	cmp	r3, #2
 80205fe:	d01f      	beq.n	8020640 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8020600:	697b      	ldr	r3, [r7, #20]
 8020602:	2b02      	cmp	r3, #2
 8020604:	d824      	bhi.n	8020650 <LL_RCC_GetPLL2ClockFreq+0x6c>
 8020606:	697b      	ldr	r3, [r7, #20]
 8020608:	2b00      	cmp	r3, #0
 802060a:	d003      	beq.n	8020614 <LL_RCC_GetPLL2ClockFreq+0x30>
 802060c:	697b      	ldr	r3, [r7, #20]
 802060e:	2b01      	cmp	r3, #1
 8020610:	d00e      	beq.n	8020630 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8020612:	e01d      	b.n	8020650 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8020614:	f7ff fc60 	bl	801fed8 <LL_RCC_HSI_IsReady>
 8020618:	4603      	mov	r3, r0
 802061a:	2b00      	cmp	r3, #0
 802061c:	d01a      	beq.n	8020654 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 802061e:	f7ff fc6d 	bl	801fefc <LL_RCC_HSI_GetDivider>
 8020622:	4603      	mov	r3, r0
 8020624:	08db      	lsrs	r3, r3, #3
 8020626:	4a38      	ldr	r2, [pc, #224]	@ (8020708 <LL_RCC_GetPLL2ClockFreq+0x124>)
 8020628:	fa22 f303 	lsr.w	r3, r2, r3
 802062c:	61fb      	str	r3, [r7, #28]
      break;
 802062e:	e011      	b.n	8020654 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8020630:	f7ff fc72 	bl	801ff18 <LL_RCC_CSI_IsReady>
 8020634:	4603      	mov	r3, r0
 8020636:	2b00      	cmp	r3, #0
 8020638:	d00e      	beq.n	8020658 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 802063a:	4b34      	ldr	r3, [pc, #208]	@ (802070c <LL_RCC_GetPLL2ClockFreq+0x128>)
 802063c:	61fb      	str	r3, [r7, #28]
      break;
 802063e:	e00b      	b.n	8020658 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8020640:	f7ff fc36 	bl	801feb0 <LL_RCC_HSE_IsReady>
 8020644:	4603      	mov	r3, r0
 8020646:	2b00      	cmp	r3, #0
 8020648:	d008      	beq.n	802065c <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 802064a:	4b31      	ldr	r3, [pc, #196]	@ (8020710 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 802064c:	61fb      	str	r3, [r7, #28]
      break;
 802064e:	e005      	b.n	802065c <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8020650:	bf00      	nop
 8020652:	e004      	b.n	802065e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8020654:	bf00      	nop
 8020656:	e002      	b.n	802065e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8020658:	bf00      	nop
 802065a:	e000      	b.n	802065e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 802065c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 802065e:	687b      	ldr	r3, [r7, #4]
 8020660:	2200      	movs	r2, #0
 8020662:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	2200      	movs	r2, #0
 8020668:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 802066a:	687b      	ldr	r3, [r7, #4]
 802066c:	2200      	movs	r2, #0
 802066e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8020670:	f7ff fe16 	bl	80202a0 <LL_RCC_PLL2_GetM>
 8020674:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8020676:	f7ff fe05 	bl	8020284 <LL_RCC_PLL2_GetN>
 802067a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 802067c:	f7ff fdf0 	bl	8020260 <LL_RCC_PLL2FRACN_IsEnabled>
 8020680:	4603      	mov	r3, r0
 8020682:	2b00      	cmp	r3, #0
 8020684:	d002      	beq.n	802068c <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8020686:	f7ff fe49 	bl	802031c <LL_RCC_PLL2_GetFRACN>
 802068a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 802068c:	693b      	ldr	r3, [r7, #16]
 802068e:	2b00      	cmp	r3, #0
 8020690:	d035      	beq.n	80206fe <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8020692:	f7ff fda9 	bl	80201e8 <LL_RCC_PLL2P_IsEnabled>
 8020696:	4603      	mov	r3, r0
 8020698:	2b00      	cmp	r3, #0
 802069a:	d00c      	beq.n	80206b6 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 802069c:	f7ff fe0e 	bl	80202bc <LL_RCC_PLL2_GetP>
 80206a0:	4603      	mov	r3, r0
 80206a2:	9300      	str	r3, [sp, #0]
 80206a4:	69bb      	ldr	r3, [r7, #24]
 80206a6:	68fa      	ldr	r2, [r7, #12]
 80206a8:	6939      	ldr	r1, [r7, #16]
 80206aa:	69f8      	ldr	r0, [r7, #28]
 80206ac:	f000 f8cc 	bl	8020848 <LL_RCC_CalcPLLClockFreq>
 80206b0:	4602      	mov	r2, r0
 80206b2:	687b      	ldr	r3, [r7, #4]
 80206b4:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 80206b6:	f7ff fdab 	bl	8020210 <LL_RCC_PLL2Q_IsEnabled>
 80206ba:	4603      	mov	r3, r0
 80206bc:	2b00      	cmp	r3, #0
 80206be:	d00c      	beq.n	80206da <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 80206c0:	f7ff fe0c 	bl	80202dc <LL_RCC_PLL2_GetQ>
 80206c4:	4603      	mov	r3, r0
 80206c6:	9300      	str	r3, [sp, #0]
 80206c8:	69bb      	ldr	r3, [r7, #24]
 80206ca:	68fa      	ldr	r2, [r7, #12]
 80206cc:	6939      	ldr	r1, [r7, #16]
 80206ce:	69f8      	ldr	r0, [r7, #28]
 80206d0:	f000 f8ba 	bl	8020848 <LL_RCC_CalcPLLClockFreq>
 80206d4:	4602      	mov	r2, r0
 80206d6:	687b      	ldr	r3, [r7, #4]
 80206d8:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 80206da:	f7ff fdad 	bl	8020238 <LL_RCC_PLL2R_IsEnabled>
 80206de:	4603      	mov	r3, r0
 80206e0:	2b00      	cmp	r3, #0
 80206e2:	d00c      	beq.n	80206fe <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 80206e4:	f7ff fe0a 	bl	80202fc <LL_RCC_PLL2_GetR>
 80206e8:	4603      	mov	r3, r0
 80206ea:	9300      	str	r3, [sp, #0]
 80206ec:	69bb      	ldr	r3, [r7, #24]
 80206ee:	68fa      	ldr	r2, [r7, #12]
 80206f0:	6939      	ldr	r1, [r7, #16]
 80206f2:	69f8      	ldr	r0, [r7, #28]
 80206f4:	f000 f8a8 	bl	8020848 <LL_RCC_CalcPLLClockFreq>
 80206f8:	4602      	mov	r2, r0
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	609a      	str	r2, [r3, #8]
    }
  }
}
 80206fe:	bf00      	nop
 8020700:	3720      	adds	r7, #32
 8020702:	46bd      	mov	sp, r7
 8020704:	bd80      	pop	{r7, pc}
 8020706:	bf00      	nop
 8020708:	03d09000 	.word	0x03d09000
 802070c:	003d0900 	.word	0x003d0900
 8020710:	017d7840 	.word	0x017d7840

08020714 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8020714:	b580      	push	{r7, lr}
 8020716:	b08a      	sub	sp, #40	@ 0x28
 8020718:	af02      	add	r7, sp, #8
 802071a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 802071c:	2300      	movs	r3, #0
 802071e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8020720:	2300      	movs	r3, #0
 8020722:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8020724:	f7ff fc96 	bl	8020054 <LL_RCC_PLL_GetSource>
 8020728:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 802072a:	697b      	ldr	r3, [r7, #20]
 802072c:	2b02      	cmp	r3, #2
 802072e:	d01f      	beq.n	8020770 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8020730:	697b      	ldr	r3, [r7, #20]
 8020732:	2b02      	cmp	r3, #2
 8020734:	d824      	bhi.n	8020780 <LL_RCC_GetPLL3ClockFreq+0x6c>
 8020736:	697b      	ldr	r3, [r7, #20]
 8020738:	2b00      	cmp	r3, #0
 802073a:	d003      	beq.n	8020744 <LL_RCC_GetPLL3ClockFreq+0x30>
 802073c:	697b      	ldr	r3, [r7, #20]
 802073e:	2b01      	cmp	r3, #1
 8020740:	d00e      	beq.n	8020760 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8020742:	e01d      	b.n	8020780 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8020744:	f7ff fbc8 	bl	801fed8 <LL_RCC_HSI_IsReady>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	d01a      	beq.n	8020784 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 802074e:	f7ff fbd5 	bl	801fefc <LL_RCC_HSI_GetDivider>
 8020752:	4603      	mov	r3, r0
 8020754:	08db      	lsrs	r3, r3, #3
 8020756:	4a39      	ldr	r2, [pc, #228]	@ (802083c <LL_RCC_GetPLL3ClockFreq+0x128>)
 8020758:	fa22 f303 	lsr.w	r3, r2, r3
 802075c:	61fb      	str	r3, [r7, #28]
      break;
 802075e:	e011      	b.n	8020784 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8020760:	f7ff fbda 	bl	801ff18 <LL_RCC_CSI_IsReady>
 8020764:	4603      	mov	r3, r0
 8020766:	2b00      	cmp	r3, #0
 8020768:	d00e      	beq.n	8020788 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 802076a:	4b35      	ldr	r3, [pc, #212]	@ (8020840 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 802076c:	61fb      	str	r3, [r7, #28]
      break;
 802076e:	e00b      	b.n	8020788 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8020770:	f7ff fb9e 	bl	801feb0 <LL_RCC_HSE_IsReady>
 8020774:	4603      	mov	r3, r0
 8020776:	2b00      	cmp	r3, #0
 8020778:	d008      	beq.n	802078c <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 802077a:	4b32      	ldr	r3, [pc, #200]	@ (8020844 <LL_RCC_GetPLL3ClockFreq+0x130>)
 802077c:	61fb      	str	r3, [r7, #28]
      break;
 802077e:	e005      	b.n	802078c <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8020780:	bf00      	nop
 8020782:	e004      	b.n	802078e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8020784:	bf00      	nop
 8020786:	e002      	b.n	802078e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8020788:	bf00      	nop
 802078a:	e000      	b.n	802078e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 802078c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	2200      	movs	r2, #0
 8020792:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8020794:	687b      	ldr	r3, [r7, #4]
 8020796:	2200      	movs	r2, #0
 8020798:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 802079a:	687b      	ldr	r3, [r7, #4]
 802079c:	2200      	movs	r2, #0
 802079e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 80207a0:	f7ff fe3c 	bl	802041c <LL_RCC_PLL3_GetM>
 80207a4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 80207a6:	f7ff fe2b 	bl	8020400 <LL_RCC_PLL3_GetN>
 80207aa:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 80207ac:	f7ff fe14 	bl	80203d8 <LL_RCC_PLL3FRACN_IsEnabled>
 80207b0:	4603      	mov	r3, r0
 80207b2:	2b00      	cmp	r3, #0
 80207b4:	d002      	beq.n	80207bc <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 80207b6:	f7ff fe6f 	bl	8020498 <LL_RCC_PLL3_GetFRACN>
 80207ba:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 80207bc:	693b      	ldr	r3, [r7, #16]
 80207be:	2b00      	cmp	r3, #0
 80207c0:	d038      	beq.n	8020834 <LL_RCC_GetPLL3ClockFreq+0x120>
 80207c2:	69fb      	ldr	r3, [r7, #28]
 80207c4:	2b00      	cmp	r3, #0
 80207c6:	d035      	beq.n	8020834 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 80207c8:	f7ff fdca 	bl	8020360 <LL_RCC_PLL3P_IsEnabled>
 80207cc:	4603      	mov	r3, r0
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	d00c      	beq.n	80207ec <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 80207d2:	f7ff fe31 	bl	8020438 <LL_RCC_PLL3_GetP>
 80207d6:	4603      	mov	r3, r0
 80207d8:	9300      	str	r3, [sp, #0]
 80207da:	69bb      	ldr	r3, [r7, #24]
 80207dc:	68fa      	ldr	r2, [r7, #12]
 80207de:	6939      	ldr	r1, [r7, #16]
 80207e0:	69f8      	ldr	r0, [r7, #28]
 80207e2:	f000 f831 	bl	8020848 <LL_RCC_CalcPLLClockFreq>
 80207e6:	4602      	mov	r2, r0
 80207e8:	687b      	ldr	r3, [r7, #4]
 80207ea:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 80207ec:	f7ff fdcc 	bl	8020388 <LL_RCC_PLL3Q_IsEnabled>
 80207f0:	4603      	mov	r3, r0
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d00c      	beq.n	8020810 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 80207f6:	f7ff fe2f 	bl	8020458 <LL_RCC_PLL3_GetQ>
 80207fa:	4603      	mov	r3, r0
 80207fc:	9300      	str	r3, [sp, #0]
 80207fe:	69bb      	ldr	r3, [r7, #24]
 8020800:	68fa      	ldr	r2, [r7, #12]
 8020802:	6939      	ldr	r1, [r7, #16]
 8020804:	69f8      	ldr	r0, [r7, #28]
 8020806:	f000 f81f 	bl	8020848 <LL_RCC_CalcPLLClockFreq>
 802080a:	4602      	mov	r2, r0
 802080c:	687b      	ldr	r3, [r7, #4]
 802080e:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8020810:	f7ff fdce 	bl	80203b0 <LL_RCC_PLL3R_IsEnabled>
 8020814:	4603      	mov	r3, r0
 8020816:	2b00      	cmp	r3, #0
 8020818:	d00c      	beq.n	8020834 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 802081a:	f7ff fe2d 	bl	8020478 <LL_RCC_PLL3_GetR>
 802081e:	4603      	mov	r3, r0
 8020820:	9300      	str	r3, [sp, #0]
 8020822:	69bb      	ldr	r3, [r7, #24]
 8020824:	68fa      	ldr	r2, [r7, #12]
 8020826:	6939      	ldr	r1, [r7, #16]
 8020828:	69f8      	ldr	r0, [r7, #28]
 802082a:	f000 f80d 	bl	8020848 <LL_RCC_CalcPLLClockFreq>
 802082e:	4602      	mov	r2, r0
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	609a      	str	r2, [r3, #8]
    }
  }
}
 8020834:	bf00      	nop
 8020836:	3720      	adds	r7, #32
 8020838:	46bd      	mov	sp, r7
 802083a:	bd80      	pop	{r7, pc}
 802083c:	03d09000 	.word	0x03d09000
 8020840:	003d0900 	.word	0x003d0900
 8020844:	017d7840 	.word	0x017d7840

08020848 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8020848:	b480      	push	{r7}
 802084a:	b087      	sub	sp, #28
 802084c:	af00      	add	r7, sp, #0
 802084e:	60f8      	str	r0, [r7, #12]
 8020850:	60b9      	str	r1, [r7, #8]
 8020852:	607a      	str	r2, [r7, #4]
 8020854:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8020856:	68fb      	ldr	r3, [r7, #12]
 8020858:	ee07 3a90 	vmov	s15, r3
 802085c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020860:	68bb      	ldr	r3, [r7, #8]
 8020862:	ee07 3a90 	vmov	s15, r3
 8020866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802086a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802086e:	687b      	ldr	r3, [r7, #4]
 8020870:	ee07 3a90 	vmov	s15, r3
 8020874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020878:	683b      	ldr	r3, [r7, #0]
 802087a:	ee07 3a90 	vmov	s15, r3
 802087e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8020882:	eddf 5a10 	vldr	s11, [pc, #64]	@ 80208c4 <LL_RCC_CalcPLLClockFreq+0x7c>
 8020886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802088a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802088e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020892:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 8020896:	6a3b      	ldr	r3, [r7, #32]
 8020898:	ee07 3a90 	vmov	s15, r3
 802089c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80208a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80208a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80208a8:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 80208ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80208b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80208b4:	ee17 3a90 	vmov	r3, s15
}
 80208b8:	4618      	mov	r0, r3
 80208ba:	371c      	adds	r7, #28
 80208bc:	46bd      	mov	sp, r7
 80208be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208c2:	4770      	bx	lr
 80208c4:	46000000 	.word	0x46000000

080208c8 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80208c8:	b590      	push	{r4, r7, lr}
 80208ca:	b087      	sub	sp, #28
 80208cc:	af00      	add	r7, sp, #0
 80208ce:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80208d0:	2300      	movs	r3, #0
 80208d2:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80208d4:	6878      	ldr	r0, [r7, #4]
 80208d6:	f7ff fbb1 	bl	802003c <LL_RCC_GetUSARTClockSource>
 80208da:	4603      	mov	r3, r0
 80208dc:	4a62      	ldr	r2, [pc, #392]	@ (8020a68 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 80208de:	4293      	cmp	r3, r2
 80208e0:	f000 80a9 	beq.w	8020a36 <LL_RCC_GetUSARTClockFreq+0x16e>
 80208e4:	4a60      	ldr	r2, [pc, #384]	@ (8020a68 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 80208e6:	4293      	cmp	r3, r2
 80208e8:	f200 80ae 	bhi.w	8020a48 <LL_RCC_GetUSARTClockFreq+0x180>
 80208ec:	4a5f      	ldr	r2, [pc, #380]	@ (8020a6c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 80208ee:	4293      	cmp	r3, r2
 80208f0:	f000 80a1 	beq.w	8020a36 <LL_RCC_GetUSARTClockFreq+0x16e>
 80208f4:	4a5d      	ldr	r2, [pc, #372]	@ (8020a6c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 80208f6:	4293      	cmp	r3, r2
 80208f8:	f200 80a6 	bhi.w	8020a48 <LL_RCC_GetUSARTClockFreq+0x180>
 80208fc:	4a5c      	ldr	r2, [pc, #368]	@ (8020a70 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 80208fe:	4293      	cmp	r3, r2
 8020900:	f000 8091 	beq.w	8020a26 <LL_RCC_GetUSARTClockFreq+0x15e>
 8020904:	4a5a      	ldr	r2, [pc, #360]	@ (8020a70 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8020906:	4293      	cmp	r3, r2
 8020908:	f200 809e 	bhi.w	8020a48 <LL_RCC_GetUSARTClockFreq+0x180>
 802090c:	4a59      	ldr	r2, [pc, #356]	@ (8020a74 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 802090e:	4293      	cmp	r3, r2
 8020910:	f000 8089 	beq.w	8020a26 <LL_RCC_GetUSARTClockFreq+0x15e>
 8020914:	4a57      	ldr	r2, [pc, #348]	@ (8020a74 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8020916:	4293      	cmp	r3, r2
 8020918:	f200 8096 	bhi.w	8020a48 <LL_RCC_GetUSARTClockFreq+0x180>
 802091c:	4a56      	ldr	r2, [pc, #344]	@ (8020a78 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 802091e:	4293      	cmp	r3, r2
 8020920:	d073      	beq.n	8020a0a <LL_RCC_GetUSARTClockFreq+0x142>
 8020922:	4a55      	ldr	r2, [pc, #340]	@ (8020a78 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8020924:	4293      	cmp	r3, r2
 8020926:	f200 808f 	bhi.w	8020a48 <LL_RCC_GetUSARTClockFreq+0x180>
 802092a:	4a54      	ldr	r2, [pc, #336]	@ (8020a7c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 802092c:	4293      	cmp	r3, r2
 802092e:	d06c      	beq.n	8020a0a <LL_RCC_GetUSARTClockFreq+0x142>
 8020930:	4a52      	ldr	r2, [pc, #328]	@ (8020a7c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8020932:	4293      	cmp	r3, r2
 8020934:	f200 8088 	bhi.w	8020a48 <LL_RCC_GetUSARTClockFreq+0x180>
 8020938:	4a51      	ldr	r2, [pc, #324]	@ (8020a80 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 802093a:	4293      	cmp	r3, r2
 802093c:	d058      	beq.n	80209f0 <LL_RCC_GetUSARTClockFreq+0x128>
 802093e:	4a50      	ldr	r2, [pc, #320]	@ (8020a80 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8020940:	4293      	cmp	r3, r2
 8020942:	f200 8081 	bhi.w	8020a48 <LL_RCC_GetUSARTClockFreq+0x180>
 8020946:	4a4f      	ldr	r2, [pc, #316]	@ (8020a84 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8020948:	4293      	cmp	r3, r2
 802094a:	d051      	beq.n	80209f0 <LL_RCC_GetUSARTClockFreq+0x128>
 802094c:	4a4d      	ldr	r2, [pc, #308]	@ (8020a84 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 802094e:	4293      	cmp	r3, r2
 8020950:	d87a      	bhi.n	8020a48 <LL_RCC_GetUSARTClockFreq+0x180>
 8020952:	4a4d      	ldr	r2, [pc, #308]	@ (8020a88 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8020954:	4293      	cmp	r3, r2
 8020956:	d03e      	beq.n	80209d6 <LL_RCC_GetUSARTClockFreq+0x10e>
 8020958:	4a4b      	ldr	r2, [pc, #300]	@ (8020a88 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 802095a:	4293      	cmp	r3, r2
 802095c:	d874      	bhi.n	8020a48 <LL_RCC_GetUSARTClockFreq+0x180>
 802095e:	4a4b      	ldr	r2, [pc, #300]	@ (8020a8c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8020960:	4293      	cmp	r3, r2
 8020962:	d038      	beq.n	80209d6 <LL_RCC_GetUSARTClockFreq+0x10e>
 8020964:	4a49      	ldr	r2, [pc, #292]	@ (8020a8c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8020966:	4293      	cmp	r3, r2
 8020968:	d86e      	bhi.n	8020a48 <LL_RCC_GetUSARTClockFreq+0x180>
 802096a:	4a49      	ldr	r2, [pc, #292]	@ (8020a90 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 802096c:	4293      	cmp	r3, r2
 802096e:	d01a      	beq.n	80209a6 <LL_RCC_GetUSARTClockFreq+0xde>
 8020970:	4a48      	ldr	r2, [pc, #288]	@ (8020a94 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8020972:	4293      	cmp	r3, r2
 8020974:	d168      	bne.n	8020a48 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8020976:	f000 f895 	bl	8020aa4 <RCC_GetSystemClockFreq>
 802097a:	4604      	mov	r4, r0
 802097c:	f7ff fb00 	bl	801ff80 <LL_RCC_GetSysPrescaler>
 8020980:	4603      	mov	r3, r0
 8020982:	0a1b      	lsrs	r3, r3, #8
 8020984:	f003 030f 	and.w	r3, r3, #15
 8020988:	4a43      	ldr	r2, [pc, #268]	@ (8020a98 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 802098a:	5cd3      	ldrb	r3, [r2, r3]
 802098c:	f003 031f 	and.w	r3, r3, #31
 8020990:	fa24 f303 	lsr.w	r3, r4, r3
 8020994:	4618      	mov	r0, r3
 8020996:	f000 f8e7 	bl	8020b68 <RCC_GetHCLKClockFreq>
 802099a:	4603      	mov	r3, r0
 802099c:	4618      	mov	r0, r3
 802099e:	f000 f911 	bl	8020bc4 <RCC_GetPCLK2ClockFreq>
 80209a2:	6178      	str	r0, [r7, #20]
      break;
 80209a4:	e05b      	b.n	8020a5e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80209a6:	f000 f87d 	bl	8020aa4 <RCC_GetSystemClockFreq>
 80209aa:	4604      	mov	r4, r0
 80209ac:	f7ff fae8 	bl	801ff80 <LL_RCC_GetSysPrescaler>
 80209b0:	4603      	mov	r3, r0
 80209b2:	0a1b      	lsrs	r3, r3, #8
 80209b4:	f003 030f 	and.w	r3, r3, #15
 80209b8:	4a37      	ldr	r2, [pc, #220]	@ (8020a98 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80209ba:	5cd3      	ldrb	r3, [r2, r3]
 80209bc:	f003 031f 	and.w	r3, r3, #31
 80209c0:	fa24 f303 	lsr.w	r3, r4, r3
 80209c4:	4618      	mov	r0, r3
 80209c6:	f000 f8cf 	bl	8020b68 <RCC_GetHCLKClockFreq>
 80209ca:	4603      	mov	r3, r0
 80209cc:	4618      	mov	r0, r3
 80209ce:	f000 f8e1 	bl	8020b94 <RCC_GetPCLK1ClockFreq>
 80209d2:	6178      	str	r0, [r7, #20]
      break;
 80209d4:	e043      	b.n	8020a5e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 80209d6:	f7ff fbf3 	bl	80201c0 <LL_RCC_PLL2_IsReady>
 80209da:	4603      	mov	r3, r0
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d035      	beq.n	8020a4c <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 80209e0:	f107 0308 	add.w	r3, r7, #8
 80209e4:	4618      	mov	r0, r3
 80209e6:	f7ff fdfd 	bl	80205e4 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80209ea:	68fb      	ldr	r3, [r7, #12]
 80209ec:	617b      	str	r3, [r7, #20]
      }
      break;
 80209ee:	e02d      	b.n	8020a4c <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 80209f0:	f7ff fca2 	bl	8020338 <LL_RCC_PLL3_IsReady>
 80209f4:	4603      	mov	r3, r0
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	d02a      	beq.n	8020a50 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 80209fa:	f107 0308 	add.w	r3, r7, #8
 80209fe:	4618      	mov	r0, r3
 8020a00:	f7ff fe88 	bl	8020714 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8020a04:	68fb      	ldr	r3, [r7, #12]
 8020a06:	617b      	str	r3, [r7, #20]
      }
      break;
 8020a08:	e022      	b.n	8020a50 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8020a0a:	f7ff fa65 	bl	801fed8 <LL_RCC_HSI_IsReady>
 8020a0e:	4603      	mov	r3, r0
 8020a10:	2b00      	cmp	r3, #0
 8020a12:	d01f      	beq.n	8020a54 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8020a14:	f7ff fa72 	bl	801fefc <LL_RCC_HSI_GetDivider>
 8020a18:	4603      	mov	r3, r0
 8020a1a:	08db      	lsrs	r3, r3, #3
 8020a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8020a9c <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8020a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8020a22:	617b      	str	r3, [r7, #20]
      }
      break;
 8020a24:	e016      	b.n	8020a54 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8020a26:	f7ff fa77 	bl	801ff18 <LL_RCC_CSI_IsReady>
 8020a2a:	4603      	mov	r3, r0
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d013      	beq.n	8020a58 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8020a30:	4b1b      	ldr	r3, [pc, #108]	@ (8020aa0 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8020a32:	617b      	str	r3, [r7, #20]
      }
      break;
 8020a34:	e010      	b.n	8020a58 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 8020a36:	f7ff fa83 	bl	801ff40 <LL_RCC_LSE_IsReady>
 8020a3a:	4603      	mov	r3, r0
 8020a3c:	2b00      	cmp	r3, #0
 8020a3e:	d00d      	beq.n	8020a5c <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8020a40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020a44:	617b      	str	r3, [r7, #20]
      }
      break;
 8020a46:	e009      	b.n	8020a5c <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8020a48:	bf00      	nop
 8020a4a:	e008      	b.n	8020a5e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8020a4c:	bf00      	nop
 8020a4e:	e006      	b.n	8020a5e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8020a50:	bf00      	nop
 8020a52:	e004      	b.n	8020a5e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8020a54:	bf00      	nop
 8020a56:	e002      	b.n	8020a5e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8020a58:	bf00      	nop
 8020a5a:	e000      	b.n	8020a5e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8020a5c:	bf00      	nop
  }

  return usart_frequency;
 8020a5e:	697b      	ldr	r3, [r7, #20]
}
 8020a60:	4618      	mov	r0, r3
 8020a62:	371c      	adds	r7, #28
 8020a64:	46bd      	mov	sp, r7
 8020a66:	bd90      	pop	{r4, r7, pc}
 8020a68:	07050308 	.word	0x07050308
 8020a6c:	07050008 	.word	0x07050008
 8020a70:	07040308 	.word	0x07040308
 8020a74:	07040008 	.word	0x07040008
 8020a78:	07030308 	.word	0x07030308
 8020a7c:	07030008 	.word	0x07030008
 8020a80:	07020308 	.word	0x07020308
 8020a84:	07020008 	.word	0x07020008
 8020a88:	07010308 	.word	0x07010308
 8020a8c:	07010008 	.word	0x07010008
 8020a90:	07000008 	.word	0x07000008
 8020a94:	07000308 	.word	0x07000308
 8020a98:	08026474 	.word	0x08026474
 8020a9c:	03d09000 	.word	0x03d09000
 8020aa0:	003d0900 	.word	0x003d0900

08020aa4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8020aa4:	b580      	push	{r7, lr}
 8020aa6:	b084      	sub	sp, #16
 8020aa8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8020aaa:	2300      	movs	r3, #0
 8020aac:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8020aae:	f7ff fa59 	bl	801ff64 <LL_RCC_GetSysClkSource>
 8020ab2:	4603      	mov	r3, r0
 8020ab4:	2b18      	cmp	r3, #24
 8020ab6:	d84b      	bhi.n	8020b50 <RCC_GetSystemClockFreq+0xac>
 8020ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8020ac0 <RCC_GetSystemClockFreq+0x1c>)
 8020aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020abe:	bf00      	nop
 8020ac0:	08020b25 	.word	0x08020b25
 8020ac4:	08020b51 	.word	0x08020b51
 8020ac8:	08020b51 	.word	0x08020b51
 8020acc:	08020b51 	.word	0x08020b51
 8020ad0:	08020b51 	.word	0x08020b51
 8020ad4:	08020b51 	.word	0x08020b51
 8020ad8:	08020b51 	.word	0x08020b51
 8020adc:	08020b51 	.word	0x08020b51
 8020ae0:	08020b37 	.word	0x08020b37
 8020ae4:	08020b51 	.word	0x08020b51
 8020ae8:	08020b51 	.word	0x08020b51
 8020aec:	08020b51 	.word	0x08020b51
 8020af0:	08020b51 	.word	0x08020b51
 8020af4:	08020b51 	.word	0x08020b51
 8020af8:	08020b51 	.word	0x08020b51
 8020afc:	08020b51 	.word	0x08020b51
 8020b00:	08020b3d 	.word	0x08020b3d
 8020b04:	08020b51 	.word	0x08020b51
 8020b08:	08020b51 	.word	0x08020b51
 8020b0c:	08020b51 	.word	0x08020b51
 8020b10:	08020b51 	.word	0x08020b51
 8020b14:	08020b51 	.word	0x08020b51
 8020b18:	08020b51 	.word	0x08020b51
 8020b1c:	08020b51 	.word	0x08020b51
 8020b20:	08020b43 	.word	0x08020b43
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8020b24:	f7ff f9ea 	bl	801fefc <LL_RCC_HSI_GetDivider>
 8020b28:	4603      	mov	r3, r0
 8020b2a:	08db      	lsrs	r3, r3, #3
 8020b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8020b5c <RCC_GetSystemClockFreq+0xb8>)
 8020b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8020b32:	60fb      	str	r3, [r7, #12]
      break;
 8020b34:	e00d      	b.n	8020b52 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8020b36:	4b0a      	ldr	r3, [pc, #40]	@ (8020b60 <RCC_GetSystemClockFreq+0xbc>)
 8020b38:	60fb      	str	r3, [r7, #12]
      break;
 8020b3a:	e00a      	b.n	8020b52 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8020b3c:	4b09      	ldr	r3, [pc, #36]	@ (8020b64 <RCC_GetSystemClockFreq+0xc0>)
 8020b3e:	60fb      	str	r3, [r7, #12]
      break;
 8020b40:	e007      	b.n	8020b52 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8020b42:	463b      	mov	r3, r7
 8020b44:	4618      	mov	r0, r3
 8020b46:	f7ff fcb5 	bl	80204b4 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8020b4a:	683b      	ldr	r3, [r7, #0]
 8020b4c:	60fb      	str	r3, [r7, #12]
      break;
 8020b4e:	e000      	b.n	8020b52 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8020b50:	bf00      	nop
  }

  return frequency;
 8020b52:	68fb      	ldr	r3, [r7, #12]
}
 8020b54:	4618      	mov	r0, r3
 8020b56:	3710      	adds	r7, #16
 8020b58:	46bd      	mov	sp, r7
 8020b5a:	bd80      	pop	{r7, pc}
 8020b5c:	03d09000 	.word	0x03d09000
 8020b60:	003d0900 	.word	0x003d0900
 8020b64:	017d7840 	.word	0x017d7840

08020b68 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8020b68:	b580      	push	{r7, lr}
 8020b6a:	b082      	sub	sp, #8
 8020b6c:	af00      	add	r7, sp, #0
 8020b6e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8020b70:	f7ff fa14 	bl	801ff9c <LL_RCC_GetAHBPrescaler>
 8020b74:	4603      	mov	r3, r0
 8020b76:	f003 030f 	and.w	r3, r3, #15
 8020b7a:	4a05      	ldr	r2, [pc, #20]	@ (8020b90 <RCC_GetHCLKClockFreq+0x28>)
 8020b7c:	5cd3      	ldrb	r3, [r2, r3]
 8020b7e:	f003 031f 	and.w	r3, r3, #31
 8020b82:	687a      	ldr	r2, [r7, #4]
 8020b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020b88:	4618      	mov	r0, r3
 8020b8a:	3708      	adds	r7, #8
 8020b8c:	46bd      	mov	sp, r7
 8020b8e:	bd80      	pop	{r7, pc}
 8020b90:	08026474 	.word	0x08026474

08020b94 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8020b94:	b580      	push	{r7, lr}
 8020b96:	b082      	sub	sp, #8
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8020b9c:	f7ff fa0c 	bl	801ffb8 <LL_RCC_GetAPB1Prescaler>
 8020ba0:	4603      	mov	r3, r0
 8020ba2:	091b      	lsrs	r3, r3, #4
 8020ba4:	f003 0307 	and.w	r3, r3, #7
 8020ba8:	4a05      	ldr	r2, [pc, #20]	@ (8020bc0 <RCC_GetPCLK1ClockFreq+0x2c>)
 8020baa:	5cd3      	ldrb	r3, [r2, r3]
 8020bac:	f003 031f 	and.w	r3, r3, #31
 8020bb0:	687a      	ldr	r2, [r7, #4]
 8020bb2:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020bb6:	4618      	mov	r0, r3
 8020bb8:	3708      	adds	r7, #8
 8020bba:	46bd      	mov	sp, r7
 8020bbc:	bd80      	pop	{r7, pc}
 8020bbe:	bf00      	nop
 8020bc0:	08026474 	.word	0x08026474

08020bc4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8020bc4:	b580      	push	{r7, lr}
 8020bc6:	b082      	sub	sp, #8
 8020bc8:	af00      	add	r7, sp, #0
 8020bca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8020bcc:	f7ff fa02 	bl	801ffd4 <LL_RCC_GetAPB2Prescaler>
 8020bd0:	4603      	mov	r3, r0
 8020bd2:	0a1b      	lsrs	r3, r3, #8
 8020bd4:	f003 0307 	and.w	r3, r3, #7
 8020bd8:	4a05      	ldr	r2, [pc, #20]	@ (8020bf0 <RCC_GetPCLK2ClockFreq+0x2c>)
 8020bda:	5cd3      	ldrb	r3, [r2, r3]
 8020bdc:	f003 031f 	and.w	r3, r3, #31
 8020be0:	687a      	ldr	r2, [r7, #4]
 8020be2:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020be6:	4618      	mov	r0, r3
 8020be8:	3708      	adds	r7, #8
 8020bea:	46bd      	mov	sp, r7
 8020bec:	bd80      	pop	{r7, pc}
 8020bee:	bf00      	nop
 8020bf0:	08026474 	.word	0x08026474

08020bf4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8020bf4:	b084      	sub	sp, #16
 8020bf6:	b480      	push	{r7}
 8020bf8:	b085      	sub	sp, #20
 8020bfa:	af00      	add	r7, sp, #0
 8020bfc:	6078      	str	r0, [r7, #4]
 8020bfe:	f107 001c 	add.w	r0, r7, #28
 8020c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8020c06:	2300      	movs	r3, #0
 8020c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8020c0a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8020c0c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8020c0e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8020c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8020c12:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8020c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8020c16:	431a      	orrs	r2, r3
             Init.ClockDiv
 8020c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8020c1a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8020c1c:	68fa      	ldr	r2, [r7, #12]
 8020c1e:	4313      	orrs	r3, r2
 8020c20:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8020c22:	687b      	ldr	r3, [r7, #4]
 8020c24:	685a      	ldr	r2, [r3, #4]
 8020c26:	4b07      	ldr	r3, [pc, #28]	@ (8020c44 <SDMMC_Init+0x50>)
 8020c28:	4013      	ands	r3, r2
 8020c2a:	68fa      	ldr	r2, [r7, #12]
 8020c2c:	431a      	orrs	r2, r3
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8020c32:	2300      	movs	r3, #0
}
 8020c34:	4618      	mov	r0, r3
 8020c36:	3714      	adds	r7, #20
 8020c38:	46bd      	mov	sp, r7
 8020c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c3e:	b004      	add	sp, #16
 8020c40:	4770      	bx	lr
 8020c42:	bf00      	nop
 8020c44:	ffc02c00 	.word	0xffc02c00

08020c48 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8020c48:	b480      	push	{r7}
 8020c4a:	b083      	sub	sp, #12
 8020c4c:	af00      	add	r7, sp, #0
 8020c4e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8020c50:	687b      	ldr	r3, [r7, #4]
 8020c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8020c56:	4618      	mov	r0, r3
 8020c58:	370c      	adds	r7, #12
 8020c5a:	46bd      	mov	sp, r7
 8020c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c60:	4770      	bx	lr

08020c62 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8020c62:	b480      	push	{r7}
 8020c64:	b083      	sub	sp, #12
 8020c66:	af00      	add	r7, sp, #0
 8020c68:	6078      	str	r0, [r7, #4]
 8020c6a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8020c6c:	683b      	ldr	r3, [r7, #0]
 8020c6e:	681a      	ldr	r2, [r3, #0]
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8020c76:	2300      	movs	r3, #0
}
 8020c78:	4618      	mov	r0, r3
 8020c7a:	370c      	adds	r7, #12
 8020c7c:	46bd      	mov	sp, r7
 8020c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c82:	4770      	bx	lr

08020c84 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8020c84:	b480      	push	{r7}
 8020c86:	b083      	sub	sp, #12
 8020c88:	af00      	add	r7, sp, #0
 8020c8a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	681b      	ldr	r3, [r3, #0]
 8020c90:	f043 0203 	orr.w	r2, r3, #3
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8020c98:	2300      	movs	r3, #0
}
 8020c9a:	4618      	mov	r0, r3
 8020c9c:	370c      	adds	r7, #12
 8020c9e:	46bd      	mov	sp, r7
 8020ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ca4:	4770      	bx	lr

08020ca6 <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8020ca6:	b480      	push	{r7}
 8020ca8:	b083      	sub	sp, #12
 8020caa:	af00      	add	r7, sp, #0
 8020cac:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8020cae:	687b      	ldr	r3, [r7, #4]
 8020cb0:	681b      	ldr	r3, [r3, #0]
 8020cb2:	f023 0203 	bic.w	r2, r3, #3
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8020cba:	2300      	movs	r3, #0
}
 8020cbc:	4618      	mov	r0, r3
 8020cbe:	370c      	adds	r7, #12
 8020cc0:	46bd      	mov	sp, r7
 8020cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cc6:	4770      	bx	lr

08020cc8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8020cc8:	b480      	push	{r7}
 8020cca:	b083      	sub	sp, #12
 8020ccc:	af00      	add	r7, sp, #0
 8020cce:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	681b      	ldr	r3, [r3, #0]
 8020cd4:	f003 0303 	and.w	r3, r3, #3
}
 8020cd8:	4618      	mov	r0, r3
 8020cda:	370c      	adds	r7, #12
 8020cdc:	46bd      	mov	sp, r7
 8020cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ce2:	4770      	bx	lr

08020ce4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8020ce4:	b480      	push	{r7}
 8020ce6:	b085      	sub	sp, #20
 8020ce8:	af00      	add	r7, sp, #0
 8020cea:	6078      	str	r0, [r7, #4]
 8020cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8020cee:	2300      	movs	r3, #0
 8020cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8020cf2:	683b      	ldr	r3, [r7, #0]
 8020cf4:	681a      	ldr	r2, [r3, #0]
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8020cfa:	683b      	ldr	r3, [r7, #0]
 8020cfc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8020cfe:	683b      	ldr	r3, [r7, #0]
 8020d00:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8020d02:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8020d04:	683b      	ldr	r3, [r7, #0]
 8020d06:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8020d08:	431a      	orrs	r2, r3
                       Command->CPSM);
 8020d0a:	683b      	ldr	r3, [r7, #0]
 8020d0c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8020d0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8020d10:	68fa      	ldr	r2, [r7, #12]
 8020d12:	4313      	orrs	r3, r2
 8020d14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8020d16:	687b      	ldr	r3, [r7, #4]
 8020d18:	68da      	ldr	r2, [r3, #12]
 8020d1a:	4b06      	ldr	r3, [pc, #24]	@ (8020d34 <SDMMC_SendCommand+0x50>)
 8020d1c:	4013      	ands	r3, r2
 8020d1e:	68fa      	ldr	r2, [r7, #12]
 8020d20:	431a      	orrs	r2, r3
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8020d26:	2300      	movs	r3, #0
}
 8020d28:	4618      	mov	r0, r3
 8020d2a:	3714      	adds	r7, #20
 8020d2c:	46bd      	mov	sp, r7
 8020d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d32:	4770      	bx	lr
 8020d34:	fffee0c0 	.word	0xfffee0c0

08020d38 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8020d38:	b480      	push	{r7}
 8020d3a:	b083      	sub	sp, #12
 8020d3c:	af00      	add	r7, sp, #0
 8020d3e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	691b      	ldr	r3, [r3, #16]
 8020d44:	b2db      	uxtb	r3, r3
}
 8020d46:	4618      	mov	r0, r3
 8020d48:	370c      	adds	r7, #12
 8020d4a:	46bd      	mov	sp, r7
 8020d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d50:	4770      	bx	lr

08020d52 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8020d52:	b480      	push	{r7}
 8020d54:	b085      	sub	sp, #20
 8020d56:	af00      	add	r7, sp, #0
 8020d58:	6078      	str	r0, [r7, #4]
 8020d5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8020d5c:	687b      	ldr	r3, [r7, #4]
 8020d5e:	3314      	adds	r3, #20
 8020d60:	461a      	mov	r2, r3
 8020d62:	683b      	ldr	r3, [r7, #0]
 8020d64:	4413      	add	r3, r2
 8020d66:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8020d68:	68fb      	ldr	r3, [r7, #12]
 8020d6a:	681b      	ldr	r3, [r3, #0]
}
 8020d6c:	4618      	mov	r0, r3
 8020d6e:	3714      	adds	r7, #20
 8020d70:	46bd      	mov	sp, r7
 8020d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d76:	4770      	bx	lr

08020d78 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8020d78:	b480      	push	{r7}
 8020d7a:	b085      	sub	sp, #20
 8020d7c:	af00      	add	r7, sp, #0
 8020d7e:	6078      	str	r0, [r7, #4]
 8020d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8020d82:	2300      	movs	r3, #0
 8020d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8020d86:	683b      	ldr	r3, [r7, #0]
 8020d88:	681a      	ldr	r2, [r3, #0]
 8020d8a:	687b      	ldr	r3, [r7, #4]
 8020d8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8020d8e:	683b      	ldr	r3, [r7, #0]
 8020d90:	685a      	ldr	r2, [r3, #4]
 8020d92:	687b      	ldr	r3, [r7, #4]
 8020d94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8020d96:	683b      	ldr	r3, [r7, #0]
 8020d98:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8020d9a:	683b      	ldr	r3, [r7, #0]
 8020d9c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8020d9e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8020da0:	683b      	ldr	r3, [r7, #0]
 8020da2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8020da4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8020da6:	683b      	ldr	r3, [r7, #0]
 8020da8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8020daa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8020dac:	68fa      	ldr	r2, [r7, #12]
 8020dae:	4313      	orrs	r3, r2
 8020db0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8020db2:	687b      	ldr	r3, [r7, #4]
 8020db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020db6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8020dba:	68fb      	ldr	r3, [r7, #12]
 8020dbc:	431a      	orrs	r2, r3
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8020dc2:	2300      	movs	r3, #0

}
 8020dc4:	4618      	mov	r0, r3
 8020dc6:	3714      	adds	r7, #20
 8020dc8:	46bd      	mov	sp, r7
 8020dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dce:	4770      	bx	lr

08020dd0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8020dd0:	b580      	push	{r7, lr}
 8020dd2:	b088      	sub	sp, #32
 8020dd4:	af00      	add	r7, sp, #0
 8020dd6:	6078      	str	r0, [r7, #4]
 8020dd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8020dda:	683b      	ldr	r3, [r7, #0]
 8020ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8020dde:	2310      	movs	r3, #16
 8020de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020de2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020de6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020de8:	2300      	movs	r3, #0
 8020dea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020dec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020df0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020df2:	f107 0308 	add.w	r3, r7, #8
 8020df6:	4619      	mov	r1, r3
 8020df8:	6878      	ldr	r0, [r7, #4]
 8020dfa:	f7ff ff73 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8020dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020e02:	2110      	movs	r1, #16
 8020e04:	6878      	ldr	r0, [r7, #4]
 8020e06:	f000 f9fd 	bl	8021204 <SDMMC_GetCmdResp1>
 8020e0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020e0c:	69fb      	ldr	r3, [r7, #28]
}
 8020e0e:	4618      	mov	r0, r3
 8020e10:	3720      	adds	r7, #32
 8020e12:	46bd      	mov	sp, r7
 8020e14:	bd80      	pop	{r7, pc}

08020e16 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8020e16:	b580      	push	{r7, lr}
 8020e18:	b088      	sub	sp, #32
 8020e1a:	af00      	add	r7, sp, #0
 8020e1c:	6078      	str	r0, [r7, #4]
 8020e1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8020e20:	683b      	ldr	r3, [r7, #0]
 8020e22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8020e24:	2311      	movs	r3, #17
 8020e26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020e28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020e2e:	2300      	movs	r3, #0
 8020e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020e36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020e38:	f107 0308 	add.w	r3, r7, #8
 8020e3c:	4619      	mov	r1, r3
 8020e3e:	6878      	ldr	r0, [r7, #4]
 8020e40:	f7ff ff50 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8020e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020e48:	2111      	movs	r1, #17
 8020e4a:	6878      	ldr	r0, [r7, #4]
 8020e4c:	f000 f9da 	bl	8021204 <SDMMC_GetCmdResp1>
 8020e50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020e52:	69fb      	ldr	r3, [r7, #28]
}
 8020e54:	4618      	mov	r0, r3
 8020e56:	3720      	adds	r7, #32
 8020e58:	46bd      	mov	sp, r7
 8020e5a:	bd80      	pop	{r7, pc}

08020e5c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8020e5c:	b580      	push	{r7, lr}
 8020e5e:	b088      	sub	sp, #32
 8020e60:	af00      	add	r7, sp, #0
 8020e62:	6078      	str	r0, [r7, #4]
 8020e64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8020e66:	683b      	ldr	r3, [r7, #0]
 8020e68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8020e6a:	2312      	movs	r3, #18
 8020e6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020e6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020e74:	2300      	movs	r3, #0
 8020e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020e7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020e7e:	f107 0308 	add.w	r3, r7, #8
 8020e82:	4619      	mov	r1, r3
 8020e84:	6878      	ldr	r0, [r7, #4]
 8020e86:	f7ff ff2d 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8020e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020e8e:	2112      	movs	r1, #18
 8020e90:	6878      	ldr	r0, [r7, #4]
 8020e92:	f000 f9b7 	bl	8021204 <SDMMC_GetCmdResp1>
 8020e96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020e98:	69fb      	ldr	r3, [r7, #28]
}
 8020e9a:	4618      	mov	r0, r3
 8020e9c:	3720      	adds	r7, #32
 8020e9e:	46bd      	mov	sp, r7
 8020ea0:	bd80      	pop	{r7, pc}

08020ea2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8020ea2:	b580      	push	{r7, lr}
 8020ea4:	b088      	sub	sp, #32
 8020ea6:	af00      	add	r7, sp, #0
 8020ea8:	6078      	str	r0, [r7, #4]
 8020eaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8020eac:	683b      	ldr	r3, [r7, #0]
 8020eae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8020eb0:	2318      	movs	r3, #24
 8020eb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020eb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020eb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020eba:	2300      	movs	r3, #0
 8020ebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020ebe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020ec2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020ec4:	f107 0308 	add.w	r3, r7, #8
 8020ec8:	4619      	mov	r1, r3
 8020eca:	6878      	ldr	r0, [r7, #4]
 8020ecc:	f7ff ff0a 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8020ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020ed4:	2118      	movs	r1, #24
 8020ed6:	6878      	ldr	r0, [r7, #4]
 8020ed8:	f000 f994 	bl	8021204 <SDMMC_GetCmdResp1>
 8020edc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020ede:	69fb      	ldr	r3, [r7, #28]
}
 8020ee0:	4618      	mov	r0, r3
 8020ee2:	3720      	adds	r7, #32
 8020ee4:	46bd      	mov	sp, r7
 8020ee6:	bd80      	pop	{r7, pc}

08020ee8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8020ee8:	b580      	push	{r7, lr}
 8020eea:	b088      	sub	sp, #32
 8020eec:	af00      	add	r7, sp, #0
 8020eee:	6078      	str	r0, [r7, #4]
 8020ef0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8020ef2:	683b      	ldr	r3, [r7, #0]
 8020ef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8020ef6:	2319      	movs	r3, #25
 8020ef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020efa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020efe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020f00:	2300      	movs	r3, #0
 8020f02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020f08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020f0a:	f107 0308 	add.w	r3, r7, #8
 8020f0e:	4619      	mov	r1, r3
 8020f10:	6878      	ldr	r0, [r7, #4]
 8020f12:	f7ff fee7 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8020f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020f1a:	2119      	movs	r1, #25
 8020f1c:	6878      	ldr	r0, [r7, #4]
 8020f1e:	f000 f971 	bl	8021204 <SDMMC_GetCmdResp1>
 8020f22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020f24:	69fb      	ldr	r3, [r7, #28]
}
 8020f26:	4618      	mov	r0, r3
 8020f28:	3720      	adds	r7, #32
 8020f2a:	46bd      	mov	sp, r7
 8020f2c:	bd80      	pop	{r7, pc}
	...

08020f30 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8020f30:	b580      	push	{r7, lr}
 8020f32:	b088      	sub	sp, #32
 8020f34:	af00      	add	r7, sp, #0
 8020f36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8020f38:	2300      	movs	r3, #0
 8020f3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8020f3c:	230c      	movs	r3, #12
 8020f3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020f40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020f44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020f46:	2300      	movs	r3, #0
 8020f48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020f4e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8020f50:	687b      	ldr	r3, [r7, #4]
 8020f52:	68db      	ldr	r3, [r3, #12]
 8020f54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8020f58:	687b      	ldr	r3, [r7, #4]
 8020f5a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8020f5c:	687b      	ldr	r3, [r7, #4]
 8020f5e:	68db      	ldr	r3, [r3, #12]
 8020f60:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8020f64:	687b      	ldr	r3, [r7, #4]
 8020f66:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020f68:	f107 0308 	add.w	r3, r7, #8
 8020f6c:	4619      	mov	r1, r3
 8020f6e:	6878      	ldr	r0, [r7, #4]
 8020f70:	f7ff feb8 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8020f74:	4a0b      	ldr	r2, [pc, #44]	@ (8020fa4 <SDMMC_CmdStopTransfer+0x74>)
 8020f76:	210c      	movs	r1, #12
 8020f78:	6878      	ldr	r0, [r7, #4]
 8020f7a:	f000 f943 	bl	8021204 <SDMMC_GetCmdResp1>
 8020f7e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	68db      	ldr	r3, [r3, #12]
 8020f84:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8020f8c:	69fb      	ldr	r3, [r7, #28]
 8020f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020f92:	d101      	bne.n	8020f98 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8020f94:	2300      	movs	r3, #0
 8020f96:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8020f98:	69fb      	ldr	r3, [r7, #28]
}
 8020f9a:	4618      	mov	r0, r3
 8020f9c:	3720      	adds	r7, #32
 8020f9e:	46bd      	mov	sp, r7
 8020fa0:	bd80      	pop	{r7, pc}
 8020fa2:	bf00      	nop
 8020fa4:	05f5e100 	.word	0x05f5e100

08020fa8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8020fa8:	b580      	push	{r7, lr}
 8020faa:	b088      	sub	sp, #32
 8020fac:	af00      	add	r7, sp, #0
 8020fae:	6078      	str	r0, [r7, #4]
 8020fb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8020fb2:	683b      	ldr	r3, [r7, #0]
 8020fb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8020fb6:	2307      	movs	r3, #7
 8020fb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020fba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020fbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020fc0:	2300      	movs	r3, #0
 8020fc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020fc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020fca:	f107 0308 	add.w	r3, r7, #8
 8020fce:	4619      	mov	r1, r3
 8020fd0:	6878      	ldr	r0, [r7, #4]
 8020fd2:	f7ff fe87 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8020fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020fda:	2107      	movs	r1, #7
 8020fdc:	6878      	ldr	r0, [r7, #4]
 8020fde:	f000 f911 	bl	8021204 <SDMMC_GetCmdResp1>
 8020fe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020fe4:	69fb      	ldr	r3, [r7, #28]
}
 8020fe6:	4618      	mov	r0, r3
 8020fe8:	3720      	adds	r7, #32
 8020fea:	46bd      	mov	sp, r7
 8020fec:	bd80      	pop	{r7, pc}

08020fee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8020fee:	b580      	push	{r7, lr}
 8020ff0:	b088      	sub	sp, #32
 8020ff2:	af00      	add	r7, sp, #0
 8020ff4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8020ff6:	2300      	movs	r3, #0
 8020ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8020ffa:	2300      	movs	r3, #0
 8020ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8020ffe:	2300      	movs	r3, #0
 8021000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021002:	2300      	movs	r3, #0
 8021004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021006:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802100a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802100c:	f107 0308 	add.w	r3, r7, #8
 8021010:	4619      	mov	r1, r3
 8021012:	6878      	ldr	r0, [r7, #4]
 8021014:	f7ff fe66 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8021018:	6878      	ldr	r0, [r7, #4]
 802101a:	f000 fa6f 	bl	80214fc <SDMMC_GetCmdError>
 802101e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021020:	69fb      	ldr	r3, [r7, #28]
}
 8021022:	4618      	mov	r0, r3
 8021024:	3720      	adds	r7, #32
 8021026:	46bd      	mov	sp, r7
 8021028:	bd80      	pop	{r7, pc}

0802102a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 802102a:	b580      	push	{r7, lr}
 802102c:	b088      	sub	sp, #32
 802102e:	af00      	add	r7, sp, #0
 8021030:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8021032:	2300      	movs	r3, #0
 8021034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8021036:	2302      	movs	r3, #2
 8021038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802103a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802103e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021040:	2300      	movs	r3, #0
 8021042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802104a:	f107 0308 	add.w	r3, r7, #8
 802104e:	4619      	mov	r1, r3
 8021050:	6878      	ldr	r0, [r7, #4]
 8021052:	f7ff fe47 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8021056:	6878      	ldr	r0, [r7, #4]
 8021058:	f000 f9c6 	bl	80213e8 <SDMMC_GetCmdResp2>
 802105c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802105e:	69fb      	ldr	r3, [r7, #28]
}
 8021060:	4618      	mov	r0, r3
 8021062:	3720      	adds	r7, #32
 8021064:	46bd      	mov	sp, r7
 8021066:	bd80      	pop	{r7, pc}

08021068 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021068:	b580      	push	{r7, lr}
 802106a:	b088      	sub	sp, #32
 802106c:	af00      	add	r7, sp, #0
 802106e:	6078      	str	r0, [r7, #4]
 8021070:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8021072:	683b      	ldr	r3, [r7, #0]
 8021074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8021076:	2309      	movs	r3, #9
 8021078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802107a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802107e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021080:	2300      	movs	r3, #0
 8021082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021088:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802108a:	f107 0308 	add.w	r3, r7, #8
 802108e:	4619      	mov	r1, r3
 8021090:	6878      	ldr	r0, [r7, #4]
 8021092:	f7ff fe27 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8021096:	6878      	ldr	r0, [r7, #4]
 8021098:	f000 f9a6 	bl	80213e8 <SDMMC_GetCmdResp2>
 802109c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802109e:	69fb      	ldr	r3, [r7, #28]
}
 80210a0:	4618      	mov	r0, r3
 80210a2:	3720      	adds	r7, #32
 80210a4:	46bd      	mov	sp, r7
 80210a6:	bd80      	pop	{r7, pc}

080210a8 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 80210a8:	b580      	push	{r7, lr}
 80210aa:	b088      	sub	sp, #32
 80210ac:	af00      	add	r7, sp, #0
 80210ae:	6078      	str	r0, [r7, #4]
 80210b0:	460b      	mov	r3, r1
 80210b2:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 80210b4:	887b      	ldrh	r3, [r7, #2]
 80210b6:	041b      	lsls	r3, r3, #16
 80210b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80210ba:	2303      	movs	r3, #3
 80210bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80210be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80210c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80210c4:	2300      	movs	r3, #0
 80210c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80210c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80210cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80210ce:	f107 0308 	add.w	r3, r7, #8
 80210d2:	4619      	mov	r1, r3
 80210d4:	6878      	ldr	r0, [r7, #4]
 80210d6:	f7ff fe05 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 80210da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80210de:	2103      	movs	r1, #3
 80210e0:	6878      	ldr	r0, [r7, #4]
 80210e2:	f000 f88f 	bl	8021204 <SDMMC_GetCmdResp1>
 80210e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80210e8:	69fb      	ldr	r3, [r7, #28]
}
 80210ea:	4618      	mov	r0, r3
 80210ec:	3720      	adds	r7, #32
 80210ee:	46bd      	mov	sp, r7
 80210f0:	bd80      	pop	{r7, pc}

080210f2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80210f2:	b580      	push	{r7, lr}
 80210f4:	b088      	sub	sp, #32
 80210f6:	af00      	add	r7, sp, #0
 80210f8:	6078      	str	r0, [r7, #4]
 80210fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80210fc:	683b      	ldr	r3, [r7, #0]
 80210fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8021100:	230d      	movs	r3, #13
 8021102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802110a:	2300      	movs	r3, #0
 802110c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802110e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021114:	f107 0308 	add.w	r3, r7, #8
 8021118:	4619      	mov	r1, r3
 802111a:	6878      	ldr	r0, [r7, #4]
 802111c:	f7ff fde2 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8021120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021124:	210d      	movs	r1, #13
 8021126:	6878      	ldr	r0, [r7, #4]
 8021128:	f000 f86c 	bl	8021204 <SDMMC_GetCmdResp1>
 802112c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802112e:	69fb      	ldr	r3, [r7, #28]
}
 8021130:	4618      	mov	r0, r3
 8021132:	3720      	adds	r7, #32
 8021134:	46bd      	mov	sp, r7
 8021136:	bd80      	pop	{r7, pc}

08021138 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021138:	b580      	push	{r7, lr}
 802113a:	b088      	sub	sp, #32
 802113c:	af00      	add	r7, sp, #0
 802113e:	6078      	str	r0, [r7, #4]
 8021140:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8021142:	683b      	ldr	r3, [r7, #0]
 8021144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8021146:	2301      	movs	r3, #1
 8021148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802114a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802114e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021150:	2300      	movs	r3, #0
 8021152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021158:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802115a:	f107 0308 	add.w	r3, r7, #8
 802115e:	4619      	mov	r1, r3
 8021160:	6878      	ldr	r0, [r7, #4]
 8021162:	f7ff fdbf 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8021166:	6878      	ldr	r0, [r7, #4]
 8021168:	f000 f988 	bl	802147c <SDMMC_GetCmdResp3>
 802116c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802116e:	69fb      	ldr	r3, [r7, #28]
}
 8021170:	4618      	mov	r0, r3
 8021172:	3720      	adds	r7, #32
 8021174:	46bd      	mov	sp, r7
 8021176:	bd80      	pop	{r7, pc}

08021178 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021178:	b580      	push	{r7, lr}
 802117a:	b088      	sub	sp, #32
 802117c:	af00      	add	r7, sp, #0
 802117e:	6078      	str	r0, [r7, #4]
 8021180:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 8021182:	683b      	ldr	r3, [r7, #0]
 8021184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8021186:	2306      	movs	r3, #6
 8021188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802118a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802118e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021190:	2300      	movs	r3, #0
 8021192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021198:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802119a:	f107 0308 	add.w	r3, r7, #8
 802119e:	4619      	mov	r1, r3
 80211a0:	6878      	ldr	r0, [r7, #4]
 80211a2:	f7ff fd9f 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 80211a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80211aa:	2106      	movs	r1, #6
 80211ac:	6878      	ldr	r0, [r7, #4]
 80211ae:	f000 f829 	bl	8021204 <SDMMC_GetCmdResp1>
 80211b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80211b4:	69fb      	ldr	r3, [r7, #28]
}
 80211b6:	4618      	mov	r0, r3
 80211b8:	3720      	adds	r7, #32
 80211ba:	46bd      	mov	sp, r7
 80211bc:	bd80      	pop	{r7, pc}

080211be <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80211be:	b580      	push	{r7, lr}
 80211c0:	b088      	sub	sp, #32
 80211c2:	af00      	add	r7, sp, #0
 80211c4:	6078      	str	r0, [r7, #4]
 80211c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80211c8:	683b      	ldr	r3, [r7, #0]
 80211ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80211cc:	2308      	movs	r3, #8
 80211ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80211d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80211d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80211d6:	2300      	movs	r3, #0
 80211d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80211da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80211de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80211e0:	f107 0308 	add.w	r3, r7, #8
 80211e4:	4619      	mov	r1, r3
 80211e6:	6878      	ldr	r0, [r7, #4]
 80211e8:	f7ff fd7c 	bl	8020ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 80211ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80211f0:	2108      	movs	r1, #8
 80211f2:	6878      	ldr	r0, [r7, #4]
 80211f4:	f000 f806 	bl	8021204 <SDMMC_GetCmdResp1>
 80211f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80211fa:	69fb      	ldr	r3, [r7, #28]
}
 80211fc:	4618      	mov	r0, r3
 80211fe:	3720      	adds	r7, #32
 8021200:	46bd      	mov	sp, r7
 8021202:	bd80      	pop	{r7, pc}

08021204 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8021204:	b580      	push	{r7, lr}
 8021206:	b088      	sub	sp, #32
 8021208:	af00      	add	r7, sp, #0
 802120a:	60f8      	str	r0, [r7, #12]
 802120c:	460b      	mov	r3, r1
 802120e:	607a      	str	r2, [r7, #4]
 8021210:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8021212:	4b70      	ldr	r3, [pc, #448]	@ (80213d4 <SDMMC_GetCmdResp1+0x1d0>)
 8021214:	681b      	ldr	r3, [r3, #0]
 8021216:	4a70      	ldr	r2, [pc, #448]	@ (80213d8 <SDMMC_GetCmdResp1+0x1d4>)
 8021218:	fba2 2303 	umull	r2, r3, r2, r3
 802121c:	0a5a      	lsrs	r2, r3, #9
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	fb02 f303 	mul.w	r3, r2, r3
 8021224:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8021226:	69fb      	ldr	r3, [r7, #28]
 8021228:	1e5a      	subs	r2, r3, #1
 802122a:	61fa      	str	r2, [r7, #28]
 802122c:	2b00      	cmp	r3, #0
 802122e:	d102      	bne.n	8021236 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8021230:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021234:	e0c9      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8021236:	68fb      	ldr	r3, [r7, #12]
 8021238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802123a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 802123c:	69ba      	ldr	r2, [r7, #24]
 802123e:	4b67      	ldr	r3, [pc, #412]	@ (80213dc <SDMMC_GetCmdResp1+0x1d8>)
 8021240:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8021242:	2b00      	cmp	r3, #0
 8021244:	d0ef      	beq.n	8021226 <SDMMC_GetCmdResp1+0x22>
 8021246:	69bb      	ldr	r3, [r7, #24]
 8021248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 802124c:	2b00      	cmp	r3, #0
 802124e:	d1ea      	bne.n	8021226 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8021250:	68fb      	ldr	r3, [r7, #12]
 8021252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021254:	f003 0304 	and.w	r3, r3, #4
 8021258:	2b00      	cmp	r3, #0
 802125a:	d004      	beq.n	8021266 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802125c:	68fb      	ldr	r3, [r7, #12]
 802125e:	2204      	movs	r2, #4
 8021260:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8021262:	2304      	movs	r3, #4
 8021264:	e0b1      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8021266:	68fb      	ldr	r3, [r7, #12]
 8021268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802126a:	f003 0301 	and.w	r3, r3, #1
 802126e:	2b00      	cmp	r3, #0
 8021270:	d004      	beq.n	802127c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8021272:	68fb      	ldr	r3, [r7, #12]
 8021274:	2201      	movs	r2, #1
 8021276:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8021278:	2301      	movs	r3, #1
 802127a:	e0a6      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802127c:	68fb      	ldr	r3, [r7, #12]
 802127e:	4a58      	ldr	r2, [pc, #352]	@ (80213e0 <SDMMC_GetCmdResp1+0x1dc>)
 8021280:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8021282:	68f8      	ldr	r0, [r7, #12]
 8021284:	f7ff fd58 	bl	8020d38 <SDMMC_GetCommandResponse>
 8021288:	4603      	mov	r3, r0
 802128a:	461a      	mov	r2, r3
 802128c:	7afb      	ldrb	r3, [r7, #11]
 802128e:	4293      	cmp	r3, r2
 8021290:	d001      	beq.n	8021296 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8021292:	2301      	movs	r3, #1
 8021294:	e099      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8021296:	2100      	movs	r1, #0
 8021298:	68f8      	ldr	r0, [r7, #12]
 802129a:	f7ff fd5a 	bl	8020d52 <SDMMC_GetResponse>
 802129e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80212a0:	697a      	ldr	r2, [r7, #20]
 80212a2:	4b50      	ldr	r3, [pc, #320]	@ (80213e4 <SDMMC_GetCmdResp1+0x1e0>)
 80212a4:	4013      	ands	r3, r2
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d101      	bne.n	80212ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80212aa:	2300      	movs	r3, #0
 80212ac:	e08d      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80212ae:	697b      	ldr	r3, [r7, #20]
 80212b0:	2b00      	cmp	r3, #0
 80212b2:	da02      	bge.n	80212ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80212b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80212b8:	e087      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80212ba:	697b      	ldr	r3, [r7, #20]
 80212bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80212c0:	2b00      	cmp	r3, #0
 80212c2:	d001      	beq.n	80212c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80212c4:	2340      	movs	r3, #64	@ 0x40
 80212c6:	e080      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80212c8:	697b      	ldr	r3, [r7, #20]
 80212ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	d001      	beq.n	80212d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80212d2:	2380      	movs	r3, #128	@ 0x80
 80212d4:	e079      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80212d6:	697b      	ldr	r3, [r7, #20]
 80212d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80212dc:	2b00      	cmp	r3, #0
 80212de:	d002      	beq.n	80212e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80212e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80212e4:	e071      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80212e6:	697b      	ldr	r3, [r7, #20]
 80212e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	d002      	beq.n	80212f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80212f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80212f4:	e069      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80212f6:	697b      	ldr	r3, [r7, #20]
 80212f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	d002      	beq.n	8021306 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8021300:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021304:	e061      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8021306:	697b      	ldr	r3, [r7, #20]
 8021308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802130c:	2b00      	cmp	r3, #0
 802130e:	d002      	beq.n	8021316 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8021310:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021314:	e059      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8021316:	697b      	ldr	r3, [r7, #20]
 8021318:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 802131c:	2b00      	cmp	r3, #0
 802131e:	d002      	beq.n	8021326 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8021320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021324:	e051      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8021326:	697b      	ldr	r3, [r7, #20]
 8021328:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802132c:	2b00      	cmp	r3, #0
 802132e:	d002      	beq.n	8021336 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8021330:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8021334:	e049      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8021336:	697b      	ldr	r3, [r7, #20]
 8021338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 802133c:	2b00      	cmp	r3, #0
 802133e:	d002      	beq.n	8021346 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8021340:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8021344:	e041      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8021346:	697b      	ldr	r3, [r7, #20]
 8021348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802134c:	2b00      	cmp	r3, #0
 802134e:	d002      	beq.n	8021356 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8021350:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021354:	e039      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8021356:	697b      	ldr	r3, [r7, #20]
 8021358:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 802135c:	2b00      	cmp	r3, #0
 802135e:	d002      	beq.n	8021366 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8021360:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8021364:	e031      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8021366:	697b      	ldr	r3, [r7, #20]
 8021368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802136c:	2b00      	cmp	r3, #0
 802136e:	d002      	beq.n	8021376 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8021370:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8021374:	e029      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8021376:	697b      	ldr	r3, [r7, #20]
 8021378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802137c:	2b00      	cmp	r3, #0
 802137e:	d002      	beq.n	8021386 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8021380:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8021384:	e021      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8021386:	697b      	ldr	r3, [r7, #20]
 8021388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 802138c:	2b00      	cmp	r3, #0
 802138e:	d002      	beq.n	8021396 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8021390:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8021394:	e019      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8021396:	697b      	ldr	r3, [r7, #20]
 8021398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802139c:	2b00      	cmp	r3, #0
 802139e:	d002      	beq.n	80213a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80213a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80213a4:	e011      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80213a6:	697b      	ldr	r3, [r7, #20]
 80213a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80213ac:	2b00      	cmp	r3, #0
 80213ae:	d002      	beq.n	80213b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80213b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80213b4:	e009      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80213b6:	697b      	ldr	r3, [r7, #20]
 80213b8:	f003 0308 	and.w	r3, r3, #8
 80213bc:	2b00      	cmp	r3, #0
 80213be:	d002      	beq.n	80213c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80213c0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80213c4:	e001      	b.n	80213ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80213c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80213ca:	4618      	mov	r0, r3
 80213cc:	3720      	adds	r7, #32
 80213ce:	46bd      	mov	sp, r7
 80213d0:	bd80      	pop	{r7, pc}
 80213d2:	bf00      	nop
 80213d4:	240148d8 	.word	0x240148d8
 80213d8:	10624dd3 	.word	0x10624dd3
 80213dc:	00200045 	.word	0x00200045
 80213e0:	002000c5 	.word	0x002000c5
 80213e4:	fdffe008 	.word	0xfdffe008

080213e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80213e8:	b480      	push	{r7}
 80213ea:	b085      	sub	sp, #20
 80213ec:	af00      	add	r7, sp, #0
 80213ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80213f0:	4b1f      	ldr	r3, [pc, #124]	@ (8021470 <SDMMC_GetCmdResp2+0x88>)
 80213f2:	681b      	ldr	r3, [r3, #0]
 80213f4:	4a1f      	ldr	r2, [pc, #124]	@ (8021474 <SDMMC_GetCmdResp2+0x8c>)
 80213f6:	fba2 2303 	umull	r2, r3, r2, r3
 80213fa:	0a5b      	lsrs	r3, r3, #9
 80213fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021400:	fb02 f303 	mul.w	r3, r2, r3
 8021404:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8021406:	68fb      	ldr	r3, [r7, #12]
 8021408:	1e5a      	subs	r2, r3, #1
 802140a:	60fa      	str	r2, [r7, #12]
 802140c:	2b00      	cmp	r3, #0
 802140e:	d102      	bne.n	8021416 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8021410:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021414:	e026      	b.n	8021464 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8021416:	687b      	ldr	r3, [r7, #4]
 8021418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802141a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802141c:	68bb      	ldr	r3, [r7, #8]
 802141e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8021422:	2b00      	cmp	r3, #0
 8021424:	d0ef      	beq.n	8021406 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8021426:	68bb      	ldr	r3, [r7, #8]
 8021428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802142c:	2b00      	cmp	r3, #0
 802142e:	d1ea      	bne.n	8021406 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8021430:	687b      	ldr	r3, [r7, #4]
 8021432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021434:	f003 0304 	and.w	r3, r3, #4
 8021438:	2b00      	cmp	r3, #0
 802143a:	d004      	beq.n	8021446 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802143c:	687b      	ldr	r3, [r7, #4]
 802143e:	2204      	movs	r2, #4
 8021440:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8021442:	2304      	movs	r3, #4
 8021444:	e00e      	b.n	8021464 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8021446:	687b      	ldr	r3, [r7, #4]
 8021448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802144a:	f003 0301 	and.w	r3, r3, #1
 802144e:	2b00      	cmp	r3, #0
 8021450:	d004      	beq.n	802145c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8021452:	687b      	ldr	r3, [r7, #4]
 8021454:	2201      	movs	r2, #1
 8021456:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8021458:	2301      	movs	r3, #1
 802145a:	e003      	b.n	8021464 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802145c:	687b      	ldr	r3, [r7, #4]
 802145e:	4a06      	ldr	r2, [pc, #24]	@ (8021478 <SDMMC_GetCmdResp2+0x90>)
 8021460:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8021462:	2300      	movs	r3, #0
}
 8021464:	4618      	mov	r0, r3
 8021466:	3714      	adds	r7, #20
 8021468:	46bd      	mov	sp, r7
 802146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802146e:	4770      	bx	lr
 8021470:	240148d8 	.word	0x240148d8
 8021474:	10624dd3 	.word	0x10624dd3
 8021478:	002000c5 	.word	0x002000c5

0802147c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 802147c:	b480      	push	{r7}
 802147e:	b085      	sub	sp, #20
 8021480:	af00      	add	r7, sp, #0
 8021482:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8021484:	4b1a      	ldr	r3, [pc, #104]	@ (80214f0 <SDMMC_GetCmdResp3+0x74>)
 8021486:	681b      	ldr	r3, [r3, #0]
 8021488:	4a1a      	ldr	r2, [pc, #104]	@ (80214f4 <SDMMC_GetCmdResp3+0x78>)
 802148a:	fba2 2303 	umull	r2, r3, r2, r3
 802148e:	0a5b      	lsrs	r3, r3, #9
 8021490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021494:	fb02 f303 	mul.w	r3, r2, r3
 8021498:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 802149a:	68fb      	ldr	r3, [r7, #12]
 802149c:	1e5a      	subs	r2, r3, #1
 802149e:	60fa      	str	r2, [r7, #12]
 80214a0:	2b00      	cmp	r3, #0
 80214a2:	d102      	bne.n	80214aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80214a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80214a8:	e01b      	b.n	80214e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80214aa:	687b      	ldr	r3, [r7, #4]
 80214ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80214ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80214b0:	68bb      	ldr	r3, [r7, #8]
 80214b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80214b6:	2b00      	cmp	r3, #0
 80214b8:	d0ef      	beq.n	802149a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80214ba:	68bb      	ldr	r3, [r7, #8]
 80214bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80214c0:	2b00      	cmp	r3, #0
 80214c2:	d1ea      	bne.n	802149a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80214c4:	687b      	ldr	r3, [r7, #4]
 80214c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80214c8:	f003 0304 	and.w	r3, r3, #4
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	d004      	beq.n	80214da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80214d0:	687b      	ldr	r3, [r7, #4]
 80214d2:	2204      	movs	r2, #4
 80214d4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80214d6:	2304      	movs	r3, #4
 80214d8:	e003      	b.n	80214e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80214da:	687b      	ldr	r3, [r7, #4]
 80214dc:	4a06      	ldr	r2, [pc, #24]	@ (80214f8 <SDMMC_GetCmdResp3+0x7c>)
 80214de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80214e0:	2300      	movs	r3, #0
}
 80214e2:	4618      	mov	r0, r3
 80214e4:	3714      	adds	r7, #20
 80214e6:	46bd      	mov	sp, r7
 80214e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ec:	4770      	bx	lr
 80214ee:	bf00      	nop
 80214f0:	240148d8 	.word	0x240148d8
 80214f4:	10624dd3 	.word	0x10624dd3
 80214f8:	002000c5 	.word	0x002000c5

080214fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80214fc:	b480      	push	{r7}
 80214fe:	b085      	sub	sp, #20
 8021500:	af00      	add	r7, sp, #0
 8021502:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8021504:	4b11      	ldr	r3, [pc, #68]	@ (802154c <SDMMC_GetCmdError+0x50>)
 8021506:	681b      	ldr	r3, [r3, #0]
 8021508:	4a11      	ldr	r2, [pc, #68]	@ (8021550 <SDMMC_GetCmdError+0x54>)
 802150a:	fba2 2303 	umull	r2, r3, r2, r3
 802150e:	0a5b      	lsrs	r3, r3, #9
 8021510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021514:	fb02 f303 	mul.w	r3, r2, r3
 8021518:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 802151a:	68fb      	ldr	r3, [r7, #12]
 802151c:	1e5a      	subs	r2, r3, #1
 802151e:	60fa      	str	r2, [r7, #12]
 8021520:	2b00      	cmp	r3, #0
 8021522:	d102      	bne.n	802152a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8021524:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021528:	e009      	b.n	802153e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 802152a:	687b      	ldr	r3, [r7, #4]
 802152c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802152e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021532:	2b00      	cmp	r3, #0
 8021534:	d0f1      	beq.n	802151a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8021536:	687b      	ldr	r3, [r7, #4]
 8021538:	4a06      	ldr	r2, [pc, #24]	@ (8021554 <SDMMC_GetCmdError+0x58>)
 802153a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 802153c:	2300      	movs	r3, #0
}
 802153e:	4618      	mov	r0, r3
 8021540:	3714      	adds	r7, #20
 8021542:	46bd      	mov	sp, r7
 8021544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021548:	4770      	bx	lr
 802154a:	bf00      	nop
 802154c:	240148d8 	.word	0x240148d8
 8021550:	10624dd3 	.word	0x10624dd3
 8021554:	002000c5 	.word	0x002000c5

08021558 <LL_SPI_IsEnabled>:
{
 8021558:	b480      	push	{r7}
 802155a:	b083      	sub	sp, #12
 802155c:	af00      	add	r7, sp, #0
 802155e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8021560:	687b      	ldr	r3, [r7, #4]
 8021562:	681b      	ldr	r3, [r3, #0]
 8021564:	f003 0301 	and.w	r3, r3, #1
 8021568:	2b01      	cmp	r3, #1
 802156a:	d101      	bne.n	8021570 <LL_SPI_IsEnabled+0x18>
 802156c:	2301      	movs	r3, #1
 802156e:	e000      	b.n	8021572 <LL_SPI_IsEnabled+0x1a>
 8021570:	2300      	movs	r3, #0
}
 8021572:	4618      	mov	r0, r3
 8021574:	370c      	adds	r7, #12
 8021576:	46bd      	mov	sp, r7
 8021578:	f85d 7b04 	ldr.w	r7, [sp], #4
 802157c:	4770      	bx	lr

0802157e <LL_SPI_SetInternalSSLevel>:
{
 802157e:	b480      	push	{r7}
 8021580:	b083      	sub	sp, #12
 8021582:	af00      	add	r7, sp, #0
 8021584:	6078      	str	r0, [r7, #4]
 8021586:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 8021588:	687b      	ldr	r3, [r7, #4]
 802158a:	681b      	ldr	r3, [r3, #0]
 802158c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8021590:	683b      	ldr	r3, [r7, #0]
 8021592:	431a      	orrs	r2, r3
 8021594:	687b      	ldr	r3, [r7, #4]
 8021596:	601a      	str	r2, [r3, #0]
}
 8021598:	bf00      	nop
 802159a:	370c      	adds	r7, #12
 802159c:	46bd      	mov	sp, r7
 802159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215a2:	4770      	bx	lr

080215a4 <LL_SPI_GetNSSPolarity>:
{
 80215a4:	b480      	push	{r7}
 80215a6:	b083      	sub	sp, #12
 80215a8:	af00      	add	r7, sp, #0
 80215aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	68db      	ldr	r3, [r3, #12]
 80215b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 80215b4:	4618      	mov	r0, r3
 80215b6:	370c      	adds	r7, #12
 80215b8:	46bd      	mov	sp, r7
 80215ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215be:	4770      	bx	lr

080215c0 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80215c0:	b480      	push	{r7}
 80215c2:	b083      	sub	sp, #12
 80215c4:	af00      	add	r7, sp, #0
 80215c6:	6078      	str	r0, [r7, #4]
 80215c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	683a      	ldr	r2, [r7, #0]
 80215ce:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80215d0:	bf00      	nop
 80215d2:	370c      	adds	r7, #12
 80215d4:	46bd      	mov	sp, r7
 80215d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215da:	4770      	bx	lr

080215dc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80215dc:	b580      	push	{r7, lr}
 80215de:	b086      	sub	sp, #24
 80215e0:	af00      	add	r7, sp, #0
 80215e2:	6078      	str	r0, [r7, #4]
 80215e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80215e6:	2301      	movs	r3, #1
 80215e8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 80215ea:	6878      	ldr	r0, [r7, #4]
 80215ec:	f7ff ffb4 	bl	8021558 <LL_SPI_IsEnabled>
 80215f0:	4603      	mov	r3, r0
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d167      	bne.n	80216c6 <LL_SPI_Init+0xea>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	689a      	ldr	r2, [r3, #8]
 80215fa:	4b35      	ldr	r3, [pc, #212]	@ (80216d0 <LL_SPI_Init+0xf4>)
 80215fc:	4013      	ands	r3, r2
 80215fe:	683a      	ldr	r2, [r7, #0]
 8021600:	6991      	ldr	r1, [r2, #24]
 8021602:	683a      	ldr	r2, [r7, #0]
 8021604:	6a12      	ldr	r2, [r2, #32]
 8021606:	4311      	orrs	r1, r2
 8021608:	683a      	ldr	r2, [r7, #0]
 802160a:	6892      	ldr	r2, [r2, #8]
 802160c:	430a      	orrs	r2, r1
 802160e:	431a      	orrs	r2, r3
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 8021614:	683b      	ldr	r3, [r7, #0]
 8021616:	695b      	ldr	r3, [r3, #20]
 8021618:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 802161a:	683b      	ldr	r3, [r7, #0]
 802161c:	685b      	ldr	r3, [r3, #4]
 802161e:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 8021620:	6878      	ldr	r0, [r7, #4]
 8021622:	f7ff ffbf 	bl	80215a4 <LL_SPI_GetNSSPolarity>
 8021626:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 8021628:	693b      	ldr	r3, [r7, #16]
 802162a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 802162e:	d112      	bne.n	8021656 <LL_SPI_Init+0x7a>
 8021630:	68bb      	ldr	r3, [r7, #8]
 8021632:	2b00      	cmp	r3, #0
 8021634:	d103      	bne.n	802163e <LL_SPI_Init+0x62>
 8021636:	68fb      	ldr	r3, [r7, #12]
 8021638:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802163c:	d006      	beq.n	802164c <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 802163e:	68bb      	ldr	r3, [r7, #8]
 8021640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021644:	d107      	bne.n	8021656 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 8021646:	68fb      	ldr	r3, [r7, #12]
 8021648:	2b00      	cmp	r3, #0
 802164a:	d104      	bne.n	8021656 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 802164c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8021650:	6878      	ldr	r0, [r7, #4]
 8021652:	f7ff ff94 	bl	802157e <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 8021656:	687b      	ldr	r3, [r7, #4]
 8021658:	68da      	ldr	r2, [r3, #12]
 802165a:	4b1e      	ldr	r3, [pc, #120]	@ (80216d4 <LL_SPI_Init+0xf8>)
 802165c:	4013      	ands	r3, r2
 802165e:	683a      	ldr	r2, [r7, #0]
 8021660:	6951      	ldr	r1, [r2, #20]
 8021662:	683a      	ldr	r2, [r7, #0]
 8021664:	68d2      	ldr	r2, [r2, #12]
 8021666:	4311      	orrs	r1, r2
 8021668:	683a      	ldr	r2, [r7, #0]
 802166a:	6912      	ldr	r2, [r2, #16]
 802166c:	4311      	orrs	r1, r2
 802166e:	683a      	ldr	r2, [r7, #0]
 8021670:	69d2      	ldr	r2, [r2, #28]
 8021672:	4311      	orrs	r1, r2
 8021674:	683a      	ldr	r2, [r7, #0]
 8021676:	6852      	ldr	r2, [r2, #4]
 8021678:	4311      	orrs	r1, r2
 802167a:	683a      	ldr	r2, [r7, #0]
 802167c:	6812      	ldr	r2, [r2, #0]
 802167e:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 8021682:	430a      	orrs	r2, r1
 8021684:	431a      	orrs	r2, r3
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 802168a:	687b      	ldr	r3, [r7, #4]
 802168c:	681b      	ldr	r3, [r3, #0]
 802168e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8021692:	683b      	ldr	r3, [r7, #0]
 8021694:	681b      	ldr	r3, [r3, #0]
 8021696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802169a:	431a      	orrs	r2, r3
 802169c:	687b      	ldr	r3, [r7, #4]
 802169e:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80216a0:	683b      	ldr	r3, [r7, #0]
 80216a2:	6a1b      	ldr	r3, [r3, #32]
 80216a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80216a8:	d105      	bne.n	80216b6 <LL_SPI_Init+0xda>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80216aa:	683b      	ldr	r3, [r7, #0]
 80216ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80216ae:	4619      	mov	r1, r3
 80216b0:	6878      	ldr	r0, [r7, #4]
 80216b2:	f7ff ff85 	bl	80215c0 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80216b6:	687b      	ldr	r3, [r7, #4]
 80216b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80216ba:	f023 0201 	bic.w	r2, r3, #1
 80216be:	687b      	ldr	r3, [r7, #4]
 80216c0:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 80216c2:	2300      	movs	r3, #0
 80216c4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80216c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80216c8:	4618      	mov	r0, r3
 80216ca:	3718      	adds	r7, #24
 80216cc:	46bd      	mov	sp, r7
 80216ce:	bd80      	pop	{r7, pc}
 80216d0:	8fbfffe0 	.word	0x8fbfffe0
 80216d4:	d839ffff 	.word	0xd839ffff

080216d8 <LL_TIM_SetPrescaler>:
{
 80216d8:	b480      	push	{r7}
 80216da:	b083      	sub	sp, #12
 80216dc:	af00      	add	r7, sp, #0
 80216de:	6078      	str	r0, [r7, #4]
 80216e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80216e2:	687b      	ldr	r3, [r7, #4]
 80216e4:	683a      	ldr	r2, [r7, #0]
 80216e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80216e8:	bf00      	nop
 80216ea:	370c      	adds	r7, #12
 80216ec:	46bd      	mov	sp, r7
 80216ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216f2:	4770      	bx	lr

080216f4 <LL_TIM_SetAutoReload>:
{
 80216f4:	b480      	push	{r7}
 80216f6:	b083      	sub	sp, #12
 80216f8:	af00      	add	r7, sp, #0
 80216fa:	6078      	str	r0, [r7, #4]
 80216fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80216fe:	687b      	ldr	r3, [r7, #4]
 8021700:	683a      	ldr	r2, [r7, #0]
 8021702:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8021704:	bf00      	nop
 8021706:	370c      	adds	r7, #12
 8021708:	46bd      	mov	sp, r7
 802170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802170e:	4770      	bx	lr

08021710 <LL_TIM_SetRepetitionCounter>:
{
 8021710:	b480      	push	{r7}
 8021712:	b083      	sub	sp, #12
 8021714:	af00      	add	r7, sp, #0
 8021716:	6078      	str	r0, [r7, #4]
 8021718:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 802171a:	687b      	ldr	r3, [r7, #4]
 802171c:	683a      	ldr	r2, [r7, #0]
 802171e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8021720:	bf00      	nop
 8021722:	370c      	adds	r7, #12
 8021724:	46bd      	mov	sp, r7
 8021726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802172a:	4770      	bx	lr

0802172c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 802172c:	b480      	push	{r7}
 802172e:	b083      	sub	sp, #12
 8021730:	af00      	add	r7, sp, #0
 8021732:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8021734:	687b      	ldr	r3, [r7, #4]
 8021736:	695b      	ldr	r3, [r3, #20]
 8021738:	f043 0201 	orr.w	r2, r3, #1
 802173c:	687b      	ldr	r3, [r7, #4]
 802173e:	615a      	str	r2, [r3, #20]
}
 8021740:	bf00      	nop
 8021742:	370c      	adds	r7, #12
 8021744:	46bd      	mov	sp, r7
 8021746:	f85d 7b04 	ldr.w	r7, [sp], #4
 802174a:	4770      	bx	lr

0802174c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 802174c:	b580      	push	{r7, lr}
 802174e:	b084      	sub	sp, #16
 8021750:	af00      	add	r7, sp, #0
 8021752:	6078      	str	r0, [r7, #4]
 8021754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8021756:	687b      	ldr	r3, [r7, #4]
 8021758:	681b      	ldr	r3, [r3, #0]
 802175a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802175c:	687b      	ldr	r3, [r7, #4]
 802175e:	4a3d      	ldr	r2, [pc, #244]	@ (8021854 <LL_TIM_Init+0x108>)
 8021760:	4293      	cmp	r3, r2
 8021762:	d013      	beq.n	802178c <LL_TIM_Init+0x40>
 8021764:	687b      	ldr	r3, [r7, #4]
 8021766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802176a:	d00f      	beq.n	802178c <LL_TIM_Init+0x40>
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	4a3a      	ldr	r2, [pc, #232]	@ (8021858 <LL_TIM_Init+0x10c>)
 8021770:	4293      	cmp	r3, r2
 8021772:	d00b      	beq.n	802178c <LL_TIM_Init+0x40>
 8021774:	687b      	ldr	r3, [r7, #4]
 8021776:	4a39      	ldr	r2, [pc, #228]	@ (802185c <LL_TIM_Init+0x110>)
 8021778:	4293      	cmp	r3, r2
 802177a:	d007      	beq.n	802178c <LL_TIM_Init+0x40>
 802177c:	687b      	ldr	r3, [r7, #4]
 802177e:	4a38      	ldr	r2, [pc, #224]	@ (8021860 <LL_TIM_Init+0x114>)
 8021780:	4293      	cmp	r3, r2
 8021782:	d003      	beq.n	802178c <LL_TIM_Init+0x40>
 8021784:	687b      	ldr	r3, [r7, #4]
 8021786:	4a37      	ldr	r2, [pc, #220]	@ (8021864 <LL_TIM_Init+0x118>)
 8021788:	4293      	cmp	r3, r2
 802178a:	d106      	bne.n	802179a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 802178c:	68fb      	ldr	r3, [r7, #12]
 802178e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8021792:	683b      	ldr	r3, [r7, #0]
 8021794:	685b      	ldr	r3, [r3, #4]
 8021796:	4313      	orrs	r3, r2
 8021798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802179a:	687b      	ldr	r3, [r7, #4]
 802179c:	4a2d      	ldr	r2, [pc, #180]	@ (8021854 <LL_TIM_Init+0x108>)
 802179e:	4293      	cmp	r3, r2
 80217a0:	d01f      	beq.n	80217e2 <LL_TIM_Init+0x96>
 80217a2:	687b      	ldr	r3, [r7, #4]
 80217a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80217a8:	d01b      	beq.n	80217e2 <LL_TIM_Init+0x96>
 80217aa:	687b      	ldr	r3, [r7, #4]
 80217ac:	4a2a      	ldr	r2, [pc, #168]	@ (8021858 <LL_TIM_Init+0x10c>)
 80217ae:	4293      	cmp	r3, r2
 80217b0:	d017      	beq.n	80217e2 <LL_TIM_Init+0x96>
 80217b2:	687b      	ldr	r3, [r7, #4]
 80217b4:	4a29      	ldr	r2, [pc, #164]	@ (802185c <LL_TIM_Init+0x110>)
 80217b6:	4293      	cmp	r3, r2
 80217b8:	d013      	beq.n	80217e2 <LL_TIM_Init+0x96>
 80217ba:	687b      	ldr	r3, [r7, #4]
 80217bc:	4a28      	ldr	r2, [pc, #160]	@ (8021860 <LL_TIM_Init+0x114>)
 80217be:	4293      	cmp	r3, r2
 80217c0:	d00f      	beq.n	80217e2 <LL_TIM_Init+0x96>
 80217c2:	687b      	ldr	r3, [r7, #4]
 80217c4:	4a27      	ldr	r2, [pc, #156]	@ (8021864 <LL_TIM_Init+0x118>)
 80217c6:	4293      	cmp	r3, r2
 80217c8:	d00b      	beq.n	80217e2 <LL_TIM_Init+0x96>
 80217ca:	687b      	ldr	r3, [r7, #4]
 80217cc:	4a26      	ldr	r2, [pc, #152]	@ (8021868 <LL_TIM_Init+0x11c>)
 80217ce:	4293      	cmp	r3, r2
 80217d0:	d007      	beq.n	80217e2 <LL_TIM_Init+0x96>
 80217d2:	687b      	ldr	r3, [r7, #4]
 80217d4:	4a25      	ldr	r2, [pc, #148]	@ (802186c <LL_TIM_Init+0x120>)
 80217d6:	4293      	cmp	r3, r2
 80217d8:	d003      	beq.n	80217e2 <LL_TIM_Init+0x96>
 80217da:	687b      	ldr	r3, [r7, #4]
 80217dc:	4a24      	ldr	r2, [pc, #144]	@ (8021870 <LL_TIM_Init+0x124>)
 80217de:	4293      	cmp	r3, r2
 80217e0:	d106      	bne.n	80217f0 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80217e2:	68fb      	ldr	r3, [r7, #12]
 80217e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80217e8:	683b      	ldr	r3, [r7, #0]
 80217ea:	68db      	ldr	r3, [r3, #12]
 80217ec:	4313      	orrs	r3, r2
 80217ee:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	68fa      	ldr	r2, [r7, #12]
 80217f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80217f6:	683b      	ldr	r3, [r7, #0]
 80217f8:	689b      	ldr	r3, [r3, #8]
 80217fa:	4619      	mov	r1, r3
 80217fc:	6878      	ldr	r0, [r7, #4]
 80217fe:	f7ff ff79 	bl	80216f4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8021802:	683b      	ldr	r3, [r7, #0]
 8021804:	881b      	ldrh	r3, [r3, #0]
 8021806:	4619      	mov	r1, r3
 8021808:	6878      	ldr	r0, [r7, #4]
 802180a:	f7ff ff65 	bl	80216d8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802180e:	687b      	ldr	r3, [r7, #4]
 8021810:	4a10      	ldr	r2, [pc, #64]	@ (8021854 <LL_TIM_Init+0x108>)
 8021812:	4293      	cmp	r3, r2
 8021814:	d00f      	beq.n	8021836 <LL_TIM_Init+0xea>
 8021816:	687b      	ldr	r3, [r7, #4]
 8021818:	4a12      	ldr	r2, [pc, #72]	@ (8021864 <LL_TIM_Init+0x118>)
 802181a:	4293      	cmp	r3, r2
 802181c:	d00b      	beq.n	8021836 <LL_TIM_Init+0xea>
 802181e:	687b      	ldr	r3, [r7, #4]
 8021820:	4a11      	ldr	r2, [pc, #68]	@ (8021868 <LL_TIM_Init+0x11c>)
 8021822:	4293      	cmp	r3, r2
 8021824:	d007      	beq.n	8021836 <LL_TIM_Init+0xea>
 8021826:	687b      	ldr	r3, [r7, #4]
 8021828:	4a10      	ldr	r2, [pc, #64]	@ (802186c <LL_TIM_Init+0x120>)
 802182a:	4293      	cmp	r3, r2
 802182c:	d003      	beq.n	8021836 <LL_TIM_Init+0xea>
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	4a0f      	ldr	r2, [pc, #60]	@ (8021870 <LL_TIM_Init+0x124>)
 8021832:	4293      	cmp	r3, r2
 8021834:	d105      	bne.n	8021842 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8021836:	683b      	ldr	r3, [r7, #0]
 8021838:	691b      	ldr	r3, [r3, #16]
 802183a:	4619      	mov	r1, r3
 802183c:	6878      	ldr	r0, [r7, #4]
 802183e:	f7ff ff67 	bl	8021710 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8021842:	6878      	ldr	r0, [r7, #4]
 8021844:	f7ff ff72 	bl	802172c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8021848:	2300      	movs	r3, #0
}
 802184a:	4618      	mov	r0, r3
 802184c:	3710      	adds	r7, #16
 802184e:	46bd      	mov	sp, r7
 8021850:	bd80      	pop	{r7, pc}
 8021852:	bf00      	nop
 8021854:	40010000 	.word	0x40010000
 8021858:	40000400 	.word	0x40000400
 802185c:	40000800 	.word	0x40000800
 8021860:	40000c00 	.word	0x40000c00
 8021864:	40010400 	.word	0x40010400
 8021868:	40014000 	.word	0x40014000
 802186c:	40014400 	.word	0x40014400
 8021870:	40014800 	.word	0x40014800

08021874 <LL_USART_IsEnabled>:
{
 8021874:	b480      	push	{r7}
 8021876:	b083      	sub	sp, #12
 8021878:	af00      	add	r7, sp, #0
 802187a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 802187c:	687b      	ldr	r3, [r7, #4]
 802187e:	681b      	ldr	r3, [r3, #0]
 8021880:	f003 0301 	and.w	r3, r3, #1
 8021884:	2b01      	cmp	r3, #1
 8021886:	d101      	bne.n	802188c <LL_USART_IsEnabled+0x18>
 8021888:	2301      	movs	r3, #1
 802188a:	e000      	b.n	802188e <LL_USART_IsEnabled+0x1a>
 802188c:	2300      	movs	r3, #0
}
 802188e:	4618      	mov	r0, r3
 8021890:	370c      	adds	r7, #12
 8021892:	46bd      	mov	sp, r7
 8021894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021898:	4770      	bx	lr

0802189a <LL_USART_SetPrescaler>:
{
 802189a:	b480      	push	{r7}
 802189c:	b083      	sub	sp, #12
 802189e:	af00      	add	r7, sp, #0
 80218a0:	6078      	str	r0, [r7, #4]
 80218a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80218a4:	687b      	ldr	r3, [r7, #4]
 80218a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80218a8:	f023 030f 	bic.w	r3, r3, #15
 80218ac:	683a      	ldr	r2, [r7, #0]
 80218ae:	b292      	uxth	r2, r2
 80218b0:	431a      	orrs	r2, r3
 80218b2:	687b      	ldr	r3, [r7, #4]
 80218b4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80218b6:	bf00      	nop
 80218b8:	370c      	adds	r7, #12
 80218ba:	46bd      	mov	sp, r7
 80218bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218c0:	4770      	bx	lr

080218c2 <LL_USART_SetStopBitsLength>:
{
 80218c2:	b480      	push	{r7}
 80218c4:	b083      	sub	sp, #12
 80218c6:	af00      	add	r7, sp, #0
 80218c8:	6078      	str	r0, [r7, #4]
 80218ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	685b      	ldr	r3, [r3, #4]
 80218d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80218d4:	683b      	ldr	r3, [r7, #0]
 80218d6:	431a      	orrs	r2, r3
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	605a      	str	r2, [r3, #4]
}
 80218dc:	bf00      	nop
 80218de:	370c      	adds	r7, #12
 80218e0:	46bd      	mov	sp, r7
 80218e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218e6:	4770      	bx	lr

080218e8 <LL_USART_SetHWFlowCtrl>:
{
 80218e8:	b480      	push	{r7}
 80218ea:	b083      	sub	sp, #12
 80218ec:	af00      	add	r7, sp, #0
 80218ee:	6078      	str	r0, [r7, #4]
 80218f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80218f2:	687b      	ldr	r3, [r7, #4]
 80218f4:	689b      	ldr	r3, [r3, #8]
 80218f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80218fa:	683b      	ldr	r3, [r7, #0]
 80218fc:	431a      	orrs	r2, r3
 80218fe:	687b      	ldr	r3, [r7, #4]
 8021900:	609a      	str	r2, [r3, #8]
}
 8021902:	bf00      	nop
 8021904:	370c      	adds	r7, #12
 8021906:	46bd      	mov	sp, r7
 8021908:	f85d 7b04 	ldr.w	r7, [sp], #4
 802190c:	4770      	bx	lr
	...

08021910 <LL_USART_SetBaudRate>:
{
 8021910:	b480      	push	{r7}
 8021912:	b087      	sub	sp, #28
 8021914:	af00      	add	r7, sp, #0
 8021916:	60f8      	str	r0, [r7, #12]
 8021918:	60b9      	str	r1, [r7, #8]
 802191a:	607a      	str	r2, [r7, #4]
 802191c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	2b0b      	cmp	r3, #11
 8021922:	d83c      	bhi.n	802199e <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8021924:	6a3b      	ldr	r3, [r7, #32]
 8021926:	2b00      	cmp	r3, #0
 8021928:	d039      	beq.n	802199e <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 802192a:	683b      	ldr	r3, [r7, #0]
 802192c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021930:	d122      	bne.n	8021978 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	b2db      	uxtb	r3, r3
 8021936:	461a      	mov	r2, r3
 8021938:	4b1c      	ldr	r3, [pc, #112]	@ (80219ac <LL_USART_SetBaudRate+0x9c>)
 802193a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802193e:	68ba      	ldr	r2, [r7, #8]
 8021940:	fbb2 f3f3 	udiv	r3, r2, r3
 8021944:	005a      	lsls	r2, r3, #1
 8021946:	6a3b      	ldr	r3, [r7, #32]
 8021948:	085b      	lsrs	r3, r3, #1
 802194a:	441a      	add	r2, r3
 802194c:	6a3b      	ldr	r3, [r7, #32]
 802194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021952:	b29b      	uxth	r3, r3
 8021954:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8021956:	697a      	ldr	r2, [r7, #20]
 8021958:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 802195c:	4013      	ands	r3, r2
 802195e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8021960:	697b      	ldr	r3, [r7, #20]
 8021962:	085b      	lsrs	r3, r3, #1
 8021964:	b29b      	uxth	r3, r3
 8021966:	f003 0307 	and.w	r3, r3, #7
 802196a:	693a      	ldr	r2, [r7, #16]
 802196c:	4313      	orrs	r3, r2
 802196e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8021970:	68fb      	ldr	r3, [r7, #12]
 8021972:	693a      	ldr	r2, [r7, #16]
 8021974:	60da      	str	r2, [r3, #12]
}
 8021976:	e012      	b.n	802199e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8021978:	687b      	ldr	r3, [r7, #4]
 802197a:	b2db      	uxtb	r3, r3
 802197c:	461a      	mov	r2, r3
 802197e:	4b0b      	ldr	r3, [pc, #44]	@ (80219ac <LL_USART_SetBaudRate+0x9c>)
 8021980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021984:	68ba      	ldr	r2, [r7, #8]
 8021986:	fbb2 f2f3 	udiv	r2, r2, r3
 802198a:	6a3b      	ldr	r3, [r7, #32]
 802198c:	085b      	lsrs	r3, r3, #1
 802198e:	441a      	add	r2, r3
 8021990:	6a3b      	ldr	r3, [r7, #32]
 8021992:	fbb2 f3f3 	udiv	r3, r2, r3
 8021996:	b29b      	uxth	r3, r3
 8021998:	461a      	mov	r2, r3
 802199a:	68fb      	ldr	r3, [r7, #12]
 802199c:	60da      	str	r2, [r3, #12]
}
 802199e:	bf00      	nop
 80219a0:	371c      	adds	r7, #28
 80219a2:	46bd      	mov	sp, r7
 80219a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219a8:	4770      	bx	lr
 80219aa:	bf00      	nop
 80219ac:	08026484 	.word	0x08026484

080219b0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80219b0:	b580      	push	{r7, lr}
 80219b2:	b086      	sub	sp, #24
 80219b4:	af02      	add	r7, sp, #8
 80219b6:	6078      	str	r0, [r7, #4]
 80219b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80219ba:	2301      	movs	r3, #1
 80219bc:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80219be:	2300      	movs	r3, #0
 80219c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80219c2:	6878      	ldr	r0, [r7, #4]
 80219c4:	f7ff ff56 	bl	8021874 <LL_USART_IsEnabled>
 80219c8:	4603      	mov	r3, r0
 80219ca:	2b00      	cmp	r3, #0
 80219cc:	d17f      	bne.n	8021ace <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80219ce:	687b      	ldr	r3, [r7, #4]
 80219d0:	681a      	ldr	r2, [r3, #0]
 80219d2:	4b41      	ldr	r3, [pc, #260]	@ (8021ad8 <LL_USART_Init+0x128>)
 80219d4:	4013      	ands	r3, r2
 80219d6:	683a      	ldr	r2, [r7, #0]
 80219d8:	6891      	ldr	r1, [r2, #8]
 80219da:	683a      	ldr	r2, [r7, #0]
 80219dc:	6912      	ldr	r2, [r2, #16]
 80219de:	4311      	orrs	r1, r2
 80219e0:	683a      	ldr	r2, [r7, #0]
 80219e2:	6952      	ldr	r2, [r2, #20]
 80219e4:	4311      	orrs	r1, r2
 80219e6:	683a      	ldr	r2, [r7, #0]
 80219e8:	69d2      	ldr	r2, [r2, #28]
 80219ea:	430a      	orrs	r2, r1
 80219ec:	431a      	orrs	r2, r3
 80219ee:	687b      	ldr	r3, [r7, #4]
 80219f0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80219f2:	683b      	ldr	r3, [r7, #0]
 80219f4:	68db      	ldr	r3, [r3, #12]
 80219f6:	4619      	mov	r1, r3
 80219f8:	6878      	ldr	r0, [r7, #4]
 80219fa:	f7ff ff62 	bl	80218c2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80219fe:	683b      	ldr	r3, [r7, #0]
 8021a00:	699b      	ldr	r3, [r3, #24]
 8021a02:	4619      	mov	r1, r3
 8021a04:	6878      	ldr	r0, [r7, #4]
 8021a06:	f7ff ff6f 	bl	80218e8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8021a0a:	687b      	ldr	r3, [r7, #4]
 8021a0c:	4a33      	ldr	r2, [pc, #204]	@ (8021adc <LL_USART_Init+0x12c>)
 8021a0e:	4293      	cmp	r3, r2
 8021a10:	d104      	bne.n	8021a1c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8021a12:	4833      	ldr	r0, [pc, #204]	@ (8021ae0 <LL_USART_Init+0x130>)
 8021a14:	f7fe ff58 	bl	80208c8 <LL_RCC_GetUSARTClockFreq>
 8021a18:	60b8      	str	r0, [r7, #8]
 8021a1a:	e03d      	b.n	8021a98 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 8021a1c:	687b      	ldr	r3, [r7, #4]
 8021a1e:	4a31      	ldr	r2, [pc, #196]	@ (8021ae4 <LL_USART_Init+0x134>)
 8021a20:	4293      	cmp	r3, r2
 8021a22:	d104      	bne.n	8021a2e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8021a24:	4830      	ldr	r0, [pc, #192]	@ (8021ae8 <LL_USART_Init+0x138>)
 8021a26:	f7fe ff4f 	bl	80208c8 <LL_RCC_GetUSARTClockFreq>
 8021a2a:	60b8      	str	r0, [r7, #8]
 8021a2c:	e034      	b.n	8021a98 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 8021a2e:	687b      	ldr	r3, [r7, #4]
 8021a30:	4a2e      	ldr	r2, [pc, #184]	@ (8021aec <LL_USART_Init+0x13c>)
 8021a32:	4293      	cmp	r3, r2
 8021a34:	d104      	bne.n	8021a40 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8021a36:	482c      	ldr	r0, [pc, #176]	@ (8021ae8 <LL_USART_Init+0x138>)
 8021a38:	f7fe ff46 	bl	80208c8 <LL_RCC_GetUSARTClockFreq>
 8021a3c:	60b8      	str	r0, [r7, #8]
 8021a3e:	e02b      	b.n	8021a98 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	4a2b      	ldr	r2, [pc, #172]	@ (8021af0 <LL_USART_Init+0x140>)
 8021a44:	4293      	cmp	r3, r2
 8021a46:	d104      	bne.n	8021a52 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8021a48:	4827      	ldr	r0, [pc, #156]	@ (8021ae8 <LL_USART_Init+0x138>)
 8021a4a:	f7fe ff3d 	bl	80208c8 <LL_RCC_GetUSARTClockFreq>
 8021a4e:	60b8      	str	r0, [r7, #8]
 8021a50:	e022      	b.n	8021a98 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 8021a52:	687b      	ldr	r3, [r7, #4]
 8021a54:	4a27      	ldr	r2, [pc, #156]	@ (8021af4 <LL_USART_Init+0x144>)
 8021a56:	4293      	cmp	r3, r2
 8021a58:	d104      	bne.n	8021a64 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8021a5a:	4823      	ldr	r0, [pc, #140]	@ (8021ae8 <LL_USART_Init+0x138>)
 8021a5c:	f7fe ff34 	bl	80208c8 <LL_RCC_GetUSARTClockFreq>
 8021a60:	60b8      	str	r0, [r7, #8]
 8021a62:	e019      	b.n	8021a98 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	4a24      	ldr	r2, [pc, #144]	@ (8021af8 <LL_USART_Init+0x148>)
 8021a68:	4293      	cmp	r3, r2
 8021a6a:	d104      	bne.n	8021a76 <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8021a6c:	481c      	ldr	r0, [pc, #112]	@ (8021ae0 <LL_USART_Init+0x130>)
 8021a6e:	f7fe ff2b 	bl	80208c8 <LL_RCC_GetUSARTClockFreq>
 8021a72:	60b8      	str	r0, [r7, #8]
 8021a74:	e010      	b.n	8021a98 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 8021a76:	687b      	ldr	r3, [r7, #4]
 8021a78:	4a20      	ldr	r2, [pc, #128]	@ (8021afc <LL_USART_Init+0x14c>)
 8021a7a:	4293      	cmp	r3, r2
 8021a7c:	d104      	bne.n	8021a88 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8021a7e:	481a      	ldr	r0, [pc, #104]	@ (8021ae8 <LL_USART_Init+0x138>)
 8021a80:	f7fe ff22 	bl	80208c8 <LL_RCC_GetUSARTClockFreq>
 8021a84:	60b8      	str	r0, [r7, #8]
 8021a86:	e007      	b.n	8021a98 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8021b00 <LL_USART_Init+0x150>)
 8021a8c:	4293      	cmp	r3, r2
 8021a8e:	d103      	bne.n	8021a98 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8021a90:	4815      	ldr	r0, [pc, #84]	@ (8021ae8 <LL_USART_Init+0x138>)
 8021a92:	f7fe ff19 	bl	80208c8 <LL_RCC_GetUSARTClockFreq>
 8021a96:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8021a98:	68bb      	ldr	r3, [r7, #8]
 8021a9a:	2b00      	cmp	r3, #0
 8021a9c:	d011      	beq.n	8021ac2 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8021a9e:	683b      	ldr	r3, [r7, #0]
 8021aa0:	685b      	ldr	r3, [r3, #4]
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	d00d      	beq.n	8021ac2 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8021aa6:	2300      	movs	r3, #0
 8021aa8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8021aaa:	683b      	ldr	r3, [r7, #0]
 8021aac:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8021aae:	683b      	ldr	r3, [r7, #0]
 8021ab0:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8021ab2:	683b      	ldr	r3, [r7, #0]
 8021ab4:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8021ab6:	9300      	str	r3, [sp, #0]
 8021ab8:	460b      	mov	r3, r1
 8021aba:	68b9      	ldr	r1, [r7, #8]
 8021abc:	6878      	ldr	r0, [r7, #4]
 8021abe:	f7ff ff27 	bl	8021910 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8021ac2:	683b      	ldr	r3, [r7, #0]
 8021ac4:	681b      	ldr	r3, [r3, #0]
 8021ac6:	4619      	mov	r1, r3
 8021ac8:	6878      	ldr	r0, [r7, #4]
 8021aca:	f7ff fee6 	bl	802189a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8021ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8021ad0:	4618      	mov	r0, r3
 8021ad2:	3710      	adds	r7, #16
 8021ad4:	46bd      	mov	sp, r7
 8021ad6:	bd80      	pop	{r7, pc}
 8021ad8:	efff69f3 	.word	0xefff69f3
 8021adc:	40011000 	.word	0x40011000
 8021ae0:	07000308 	.word	0x07000308
 8021ae4:	40004400 	.word	0x40004400
 8021ae8:	07000008 	.word	0x07000008
 8021aec:	40004800 	.word	0x40004800
 8021af0:	40004c00 	.word	0x40004c00
 8021af4:	40005000 	.word	0x40005000
 8021af8:	40011400 	.word	0x40011400
 8021afc:	40007800 	.word	0x40007800
 8021b00:	40007c00 	.word	0x40007c00

08021b04 <atoi>:
 8021b04:	220a      	movs	r2, #10
 8021b06:	2100      	movs	r1, #0
 8021b08:	f000 b8b8 	b.w	8021c7c <strtol>

08021b0c <rand>:
 8021b0c:	4b16      	ldr	r3, [pc, #88]	@ (8021b68 <rand+0x5c>)
 8021b0e:	b510      	push	{r4, lr}
 8021b10:	681c      	ldr	r4, [r3, #0]
 8021b12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021b14:	b9b3      	cbnz	r3, 8021b44 <rand+0x38>
 8021b16:	2018      	movs	r0, #24
 8021b18:	f000 fbda 	bl	80222d0 <malloc>
 8021b1c:	4602      	mov	r2, r0
 8021b1e:	6320      	str	r0, [r4, #48]	@ 0x30
 8021b20:	b920      	cbnz	r0, 8021b2c <rand+0x20>
 8021b22:	4b12      	ldr	r3, [pc, #72]	@ (8021b6c <rand+0x60>)
 8021b24:	4812      	ldr	r0, [pc, #72]	@ (8021b70 <rand+0x64>)
 8021b26:	2152      	movs	r1, #82	@ 0x52
 8021b28:	f000 fb6a 	bl	8022200 <__assert_func>
 8021b2c:	4911      	ldr	r1, [pc, #68]	@ (8021b74 <rand+0x68>)
 8021b2e:	4b12      	ldr	r3, [pc, #72]	@ (8021b78 <rand+0x6c>)
 8021b30:	e9c0 1300 	strd	r1, r3, [r0]
 8021b34:	4b11      	ldr	r3, [pc, #68]	@ (8021b7c <rand+0x70>)
 8021b36:	6083      	str	r3, [r0, #8]
 8021b38:	230b      	movs	r3, #11
 8021b3a:	8183      	strh	r3, [r0, #12]
 8021b3c:	2100      	movs	r1, #0
 8021b3e:	2001      	movs	r0, #1
 8021b40:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021b44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021b46:	480e      	ldr	r0, [pc, #56]	@ (8021b80 <rand+0x74>)
 8021b48:	690b      	ldr	r3, [r1, #16]
 8021b4a:	694c      	ldr	r4, [r1, #20]
 8021b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8021b84 <rand+0x78>)
 8021b4e:	4358      	muls	r0, r3
 8021b50:	fb02 0004 	mla	r0, r2, r4, r0
 8021b54:	fba3 3202 	umull	r3, r2, r3, r2
 8021b58:	3301      	adds	r3, #1
 8021b5a:	eb40 0002 	adc.w	r0, r0, r2
 8021b5e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021b62:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021b66:	bd10      	pop	{r4, pc}
 8021b68:	240149f8 	.word	0x240149f8
 8021b6c:	080264b4 	.word	0x080264b4
 8021b70:	080264cb 	.word	0x080264cb
 8021b74:	abcd330e 	.word	0xabcd330e
 8021b78:	e66d1234 	.word	0xe66d1234
 8021b7c:	0005deec 	.word	0x0005deec
 8021b80:	5851f42d 	.word	0x5851f42d
 8021b84:	4c957f2d 	.word	0x4c957f2d

08021b88 <_strtol_l.isra.0>:
 8021b88:	2b24      	cmp	r3, #36	@ 0x24
 8021b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b8e:	4686      	mov	lr, r0
 8021b90:	4690      	mov	r8, r2
 8021b92:	d801      	bhi.n	8021b98 <_strtol_l.isra.0+0x10>
 8021b94:	2b01      	cmp	r3, #1
 8021b96:	d106      	bne.n	8021ba6 <_strtol_l.isra.0+0x1e>
 8021b98:	f000 faf6 	bl	8022188 <__errno>
 8021b9c:	2316      	movs	r3, #22
 8021b9e:	6003      	str	r3, [r0, #0]
 8021ba0:	2000      	movs	r0, #0
 8021ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ba6:	4834      	ldr	r0, [pc, #208]	@ (8021c78 <_strtol_l.isra.0+0xf0>)
 8021ba8:	460d      	mov	r5, r1
 8021baa:	462a      	mov	r2, r5
 8021bac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021bb0:	5d06      	ldrb	r6, [r0, r4]
 8021bb2:	f016 0608 	ands.w	r6, r6, #8
 8021bb6:	d1f8      	bne.n	8021baa <_strtol_l.isra.0+0x22>
 8021bb8:	2c2d      	cmp	r4, #45	@ 0x2d
 8021bba:	d110      	bne.n	8021bde <_strtol_l.isra.0+0x56>
 8021bbc:	782c      	ldrb	r4, [r5, #0]
 8021bbe:	2601      	movs	r6, #1
 8021bc0:	1c95      	adds	r5, r2, #2
 8021bc2:	f033 0210 	bics.w	r2, r3, #16
 8021bc6:	d115      	bne.n	8021bf4 <_strtol_l.isra.0+0x6c>
 8021bc8:	2c30      	cmp	r4, #48	@ 0x30
 8021bca:	d10d      	bne.n	8021be8 <_strtol_l.isra.0+0x60>
 8021bcc:	782a      	ldrb	r2, [r5, #0]
 8021bce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8021bd2:	2a58      	cmp	r2, #88	@ 0x58
 8021bd4:	d108      	bne.n	8021be8 <_strtol_l.isra.0+0x60>
 8021bd6:	786c      	ldrb	r4, [r5, #1]
 8021bd8:	3502      	adds	r5, #2
 8021bda:	2310      	movs	r3, #16
 8021bdc:	e00a      	b.n	8021bf4 <_strtol_l.isra.0+0x6c>
 8021bde:	2c2b      	cmp	r4, #43	@ 0x2b
 8021be0:	bf04      	itt	eq
 8021be2:	782c      	ldrbeq	r4, [r5, #0]
 8021be4:	1c95      	addeq	r5, r2, #2
 8021be6:	e7ec      	b.n	8021bc2 <_strtol_l.isra.0+0x3a>
 8021be8:	2b00      	cmp	r3, #0
 8021bea:	d1f6      	bne.n	8021bda <_strtol_l.isra.0+0x52>
 8021bec:	2c30      	cmp	r4, #48	@ 0x30
 8021bee:	bf14      	ite	ne
 8021bf0:	230a      	movne	r3, #10
 8021bf2:	2308      	moveq	r3, #8
 8021bf4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8021bf8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021bfc:	2200      	movs	r2, #0
 8021bfe:	fbbc f9f3 	udiv	r9, ip, r3
 8021c02:	4610      	mov	r0, r2
 8021c04:	fb03 ca19 	mls	sl, r3, r9, ip
 8021c08:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8021c0c:	2f09      	cmp	r7, #9
 8021c0e:	d80f      	bhi.n	8021c30 <_strtol_l.isra.0+0xa8>
 8021c10:	463c      	mov	r4, r7
 8021c12:	42a3      	cmp	r3, r4
 8021c14:	dd1b      	ble.n	8021c4e <_strtol_l.isra.0+0xc6>
 8021c16:	1c57      	adds	r7, r2, #1
 8021c18:	d007      	beq.n	8021c2a <_strtol_l.isra.0+0xa2>
 8021c1a:	4581      	cmp	r9, r0
 8021c1c:	d314      	bcc.n	8021c48 <_strtol_l.isra.0+0xc0>
 8021c1e:	d101      	bne.n	8021c24 <_strtol_l.isra.0+0x9c>
 8021c20:	45a2      	cmp	sl, r4
 8021c22:	db11      	blt.n	8021c48 <_strtol_l.isra.0+0xc0>
 8021c24:	fb00 4003 	mla	r0, r0, r3, r4
 8021c28:	2201      	movs	r2, #1
 8021c2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021c2e:	e7eb      	b.n	8021c08 <_strtol_l.isra.0+0x80>
 8021c30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8021c34:	2f19      	cmp	r7, #25
 8021c36:	d801      	bhi.n	8021c3c <_strtol_l.isra.0+0xb4>
 8021c38:	3c37      	subs	r4, #55	@ 0x37
 8021c3a:	e7ea      	b.n	8021c12 <_strtol_l.isra.0+0x8a>
 8021c3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8021c40:	2f19      	cmp	r7, #25
 8021c42:	d804      	bhi.n	8021c4e <_strtol_l.isra.0+0xc6>
 8021c44:	3c57      	subs	r4, #87	@ 0x57
 8021c46:	e7e4      	b.n	8021c12 <_strtol_l.isra.0+0x8a>
 8021c48:	f04f 32ff 	mov.w	r2, #4294967295
 8021c4c:	e7ed      	b.n	8021c2a <_strtol_l.isra.0+0xa2>
 8021c4e:	1c53      	adds	r3, r2, #1
 8021c50:	d108      	bne.n	8021c64 <_strtol_l.isra.0+0xdc>
 8021c52:	2322      	movs	r3, #34	@ 0x22
 8021c54:	f8ce 3000 	str.w	r3, [lr]
 8021c58:	4660      	mov	r0, ip
 8021c5a:	f1b8 0f00 	cmp.w	r8, #0
 8021c5e:	d0a0      	beq.n	8021ba2 <_strtol_l.isra.0+0x1a>
 8021c60:	1e69      	subs	r1, r5, #1
 8021c62:	e006      	b.n	8021c72 <_strtol_l.isra.0+0xea>
 8021c64:	b106      	cbz	r6, 8021c68 <_strtol_l.isra.0+0xe0>
 8021c66:	4240      	negs	r0, r0
 8021c68:	f1b8 0f00 	cmp.w	r8, #0
 8021c6c:	d099      	beq.n	8021ba2 <_strtol_l.isra.0+0x1a>
 8021c6e:	2a00      	cmp	r2, #0
 8021c70:	d1f6      	bne.n	8021c60 <_strtol_l.isra.0+0xd8>
 8021c72:	f8c8 1000 	str.w	r1, [r8]
 8021c76:	e794      	b.n	8021ba2 <_strtol_l.isra.0+0x1a>
 8021c78:	08026593 	.word	0x08026593

08021c7c <strtol>:
 8021c7c:	4613      	mov	r3, r2
 8021c7e:	460a      	mov	r2, r1
 8021c80:	4601      	mov	r1, r0
 8021c82:	4802      	ldr	r0, [pc, #8]	@ (8021c8c <strtol+0x10>)
 8021c84:	6800      	ldr	r0, [r0, #0]
 8021c86:	f7ff bf7f 	b.w	8021b88 <_strtol_l.isra.0>
 8021c8a:	bf00      	nop
 8021c8c:	240149f8 	.word	0x240149f8

08021c90 <_strtoul_l.isra.0>:
 8021c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021c94:	4e34      	ldr	r6, [pc, #208]	@ (8021d68 <_strtoul_l.isra.0+0xd8>)
 8021c96:	4686      	mov	lr, r0
 8021c98:	460d      	mov	r5, r1
 8021c9a:	4628      	mov	r0, r5
 8021c9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021ca0:	5d37      	ldrb	r7, [r6, r4]
 8021ca2:	f017 0708 	ands.w	r7, r7, #8
 8021ca6:	d1f8      	bne.n	8021c9a <_strtoul_l.isra.0+0xa>
 8021ca8:	2c2d      	cmp	r4, #45	@ 0x2d
 8021caa:	d110      	bne.n	8021cce <_strtoul_l.isra.0+0x3e>
 8021cac:	782c      	ldrb	r4, [r5, #0]
 8021cae:	2701      	movs	r7, #1
 8021cb0:	1c85      	adds	r5, r0, #2
 8021cb2:	f033 0010 	bics.w	r0, r3, #16
 8021cb6:	d115      	bne.n	8021ce4 <_strtoul_l.isra.0+0x54>
 8021cb8:	2c30      	cmp	r4, #48	@ 0x30
 8021cba:	d10d      	bne.n	8021cd8 <_strtoul_l.isra.0+0x48>
 8021cbc:	7828      	ldrb	r0, [r5, #0]
 8021cbe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8021cc2:	2858      	cmp	r0, #88	@ 0x58
 8021cc4:	d108      	bne.n	8021cd8 <_strtoul_l.isra.0+0x48>
 8021cc6:	786c      	ldrb	r4, [r5, #1]
 8021cc8:	3502      	adds	r5, #2
 8021cca:	2310      	movs	r3, #16
 8021ccc:	e00a      	b.n	8021ce4 <_strtoul_l.isra.0+0x54>
 8021cce:	2c2b      	cmp	r4, #43	@ 0x2b
 8021cd0:	bf04      	itt	eq
 8021cd2:	782c      	ldrbeq	r4, [r5, #0]
 8021cd4:	1c85      	addeq	r5, r0, #2
 8021cd6:	e7ec      	b.n	8021cb2 <_strtoul_l.isra.0+0x22>
 8021cd8:	2b00      	cmp	r3, #0
 8021cda:	d1f6      	bne.n	8021cca <_strtoul_l.isra.0+0x3a>
 8021cdc:	2c30      	cmp	r4, #48	@ 0x30
 8021cde:	bf14      	ite	ne
 8021ce0:	230a      	movne	r3, #10
 8021ce2:	2308      	moveq	r3, #8
 8021ce4:	f04f 38ff 	mov.w	r8, #4294967295
 8021ce8:	2600      	movs	r6, #0
 8021cea:	fbb8 f8f3 	udiv	r8, r8, r3
 8021cee:	fb03 f908 	mul.w	r9, r3, r8
 8021cf2:	ea6f 0909 	mvn.w	r9, r9
 8021cf6:	4630      	mov	r0, r6
 8021cf8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8021cfc:	f1bc 0f09 	cmp.w	ip, #9
 8021d00:	d810      	bhi.n	8021d24 <_strtoul_l.isra.0+0x94>
 8021d02:	4664      	mov	r4, ip
 8021d04:	42a3      	cmp	r3, r4
 8021d06:	dd1e      	ble.n	8021d46 <_strtoul_l.isra.0+0xb6>
 8021d08:	f1b6 3fff 	cmp.w	r6, #4294967295
 8021d0c:	d007      	beq.n	8021d1e <_strtoul_l.isra.0+0x8e>
 8021d0e:	4580      	cmp	r8, r0
 8021d10:	d316      	bcc.n	8021d40 <_strtoul_l.isra.0+0xb0>
 8021d12:	d101      	bne.n	8021d18 <_strtoul_l.isra.0+0x88>
 8021d14:	45a1      	cmp	r9, r4
 8021d16:	db13      	blt.n	8021d40 <_strtoul_l.isra.0+0xb0>
 8021d18:	fb00 4003 	mla	r0, r0, r3, r4
 8021d1c:	2601      	movs	r6, #1
 8021d1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021d22:	e7e9      	b.n	8021cf8 <_strtoul_l.isra.0+0x68>
 8021d24:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021d28:	f1bc 0f19 	cmp.w	ip, #25
 8021d2c:	d801      	bhi.n	8021d32 <_strtoul_l.isra.0+0xa2>
 8021d2e:	3c37      	subs	r4, #55	@ 0x37
 8021d30:	e7e8      	b.n	8021d04 <_strtoul_l.isra.0+0x74>
 8021d32:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8021d36:	f1bc 0f19 	cmp.w	ip, #25
 8021d3a:	d804      	bhi.n	8021d46 <_strtoul_l.isra.0+0xb6>
 8021d3c:	3c57      	subs	r4, #87	@ 0x57
 8021d3e:	e7e1      	b.n	8021d04 <_strtoul_l.isra.0+0x74>
 8021d40:	f04f 36ff 	mov.w	r6, #4294967295
 8021d44:	e7eb      	b.n	8021d1e <_strtoul_l.isra.0+0x8e>
 8021d46:	1c73      	adds	r3, r6, #1
 8021d48:	d106      	bne.n	8021d58 <_strtoul_l.isra.0+0xc8>
 8021d4a:	2322      	movs	r3, #34	@ 0x22
 8021d4c:	f8ce 3000 	str.w	r3, [lr]
 8021d50:	4630      	mov	r0, r6
 8021d52:	b932      	cbnz	r2, 8021d62 <_strtoul_l.isra.0+0xd2>
 8021d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021d58:	b107      	cbz	r7, 8021d5c <_strtoul_l.isra.0+0xcc>
 8021d5a:	4240      	negs	r0, r0
 8021d5c:	2a00      	cmp	r2, #0
 8021d5e:	d0f9      	beq.n	8021d54 <_strtoul_l.isra.0+0xc4>
 8021d60:	b106      	cbz	r6, 8021d64 <_strtoul_l.isra.0+0xd4>
 8021d62:	1e69      	subs	r1, r5, #1
 8021d64:	6011      	str	r1, [r2, #0]
 8021d66:	e7f5      	b.n	8021d54 <_strtoul_l.isra.0+0xc4>
 8021d68:	08026593 	.word	0x08026593

08021d6c <strtoul>:
 8021d6c:	4613      	mov	r3, r2
 8021d6e:	460a      	mov	r2, r1
 8021d70:	4601      	mov	r1, r0
 8021d72:	4802      	ldr	r0, [pc, #8]	@ (8021d7c <strtoul+0x10>)
 8021d74:	6800      	ldr	r0, [r0, #0]
 8021d76:	f7ff bf8b 	b.w	8021c90 <_strtoul_l.isra.0>
 8021d7a:	bf00      	nop
 8021d7c:	240149f8 	.word	0x240149f8

08021d80 <std>:
 8021d80:	2300      	movs	r3, #0
 8021d82:	b510      	push	{r4, lr}
 8021d84:	4604      	mov	r4, r0
 8021d86:	e9c0 3300 	strd	r3, r3, [r0]
 8021d8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021d8e:	6083      	str	r3, [r0, #8]
 8021d90:	8181      	strh	r1, [r0, #12]
 8021d92:	6643      	str	r3, [r0, #100]	@ 0x64
 8021d94:	81c2      	strh	r2, [r0, #14]
 8021d96:	6183      	str	r3, [r0, #24]
 8021d98:	4619      	mov	r1, r3
 8021d9a:	2208      	movs	r2, #8
 8021d9c:	305c      	adds	r0, #92	@ 0x5c
 8021d9e:	f000 f976 	bl	802208e <memset>
 8021da2:	4b0d      	ldr	r3, [pc, #52]	@ (8021dd8 <std+0x58>)
 8021da4:	6263      	str	r3, [r4, #36]	@ 0x24
 8021da6:	4b0d      	ldr	r3, [pc, #52]	@ (8021ddc <std+0x5c>)
 8021da8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021daa:	4b0d      	ldr	r3, [pc, #52]	@ (8021de0 <std+0x60>)
 8021dac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021dae:	4b0d      	ldr	r3, [pc, #52]	@ (8021de4 <std+0x64>)
 8021db0:	6323      	str	r3, [r4, #48]	@ 0x30
 8021db2:	4b0d      	ldr	r3, [pc, #52]	@ (8021de8 <std+0x68>)
 8021db4:	6224      	str	r4, [r4, #32]
 8021db6:	429c      	cmp	r4, r3
 8021db8:	d006      	beq.n	8021dc8 <std+0x48>
 8021dba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021dbe:	4294      	cmp	r4, r2
 8021dc0:	d002      	beq.n	8021dc8 <std+0x48>
 8021dc2:	33d0      	adds	r3, #208	@ 0xd0
 8021dc4:	429c      	cmp	r4, r3
 8021dc6:	d105      	bne.n	8021dd4 <std+0x54>
 8021dc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021dd0:	f000 ba04 	b.w	80221dc <__retarget_lock_init_recursive>
 8021dd4:	bd10      	pop	{r4, pc}
 8021dd6:	bf00      	nop
 8021dd8:	08021fb5 	.word	0x08021fb5
 8021ddc:	08021fd7 	.word	0x08021fd7
 8021de0:	0802200f 	.word	0x0802200f
 8021de4:	08022033 	.word	0x08022033
 8021de8:	2405a8b4 	.word	0x2405a8b4

08021dec <stdio_exit_handler>:
 8021dec:	4a02      	ldr	r2, [pc, #8]	@ (8021df8 <stdio_exit_handler+0xc>)
 8021dee:	4903      	ldr	r1, [pc, #12]	@ (8021dfc <stdio_exit_handler+0x10>)
 8021df0:	4803      	ldr	r0, [pc, #12]	@ (8021e00 <stdio_exit_handler+0x14>)
 8021df2:	f000 b869 	b.w	8021ec8 <_fwalk_sglue>
 8021df6:	bf00      	nop
 8021df8:	240149ec 	.word	0x240149ec
 8021dfc:	08022b0d 	.word	0x08022b0d
 8021e00:	240149fc 	.word	0x240149fc

08021e04 <cleanup_stdio>:
 8021e04:	6841      	ldr	r1, [r0, #4]
 8021e06:	4b0c      	ldr	r3, [pc, #48]	@ (8021e38 <cleanup_stdio+0x34>)
 8021e08:	4299      	cmp	r1, r3
 8021e0a:	b510      	push	{r4, lr}
 8021e0c:	4604      	mov	r4, r0
 8021e0e:	d001      	beq.n	8021e14 <cleanup_stdio+0x10>
 8021e10:	f000 fe7c 	bl	8022b0c <_fflush_r>
 8021e14:	68a1      	ldr	r1, [r4, #8]
 8021e16:	4b09      	ldr	r3, [pc, #36]	@ (8021e3c <cleanup_stdio+0x38>)
 8021e18:	4299      	cmp	r1, r3
 8021e1a:	d002      	beq.n	8021e22 <cleanup_stdio+0x1e>
 8021e1c:	4620      	mov	r0, r4
 8021e1e:	f000 fe75 	bl	8022b0c <_fflush_r>
 8021e22:	68e1      	ldr	r1, [r4, #12]
 8021e24:	4b06      	ldr	r3, [pc, #24]	@ (8021e40 <cleanup_stdio+0x3c>)
 8021e26:	4299      	cmp	r1, r3
 8021e28:	d004      	beq.n	8021e34 <cleanup_stdio+0x30>
 8021e2a:	4620      	mov	r0, r4
 8021e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e30:	f000 be6c 	b.w	8022b0c <_fflush_r>
 8021e34:	bd10      	pop	{r4, pc}
 8021e36:	bf00      	nop
 8021e38:	2405a8b4 	.word	0x2405a8b4
 8021e3c:	2405a91c 	.word	0x2405a91c
 8021e40:	2405a984 	.word	0x2405a984

08021e44 <global_stdio_init.part.0>:
 8021e44:	b510      	push	{r4, lr}
 8021e46:	4b0b      	ldr	r3, [pc, #44]	@ (8021e74 <global_stdio_init.part.0+0x30>)
 8021e48:	4c0b      	ldr	r4, [pc, #44]	@ (8021e78 <global_stdio_init.part.0+0x34>)
 8021e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8021e7c <global_stdio_init.part.0+0x38>)
 8021e4c:	601a      	str	r2, [r3, #0]
 8021e4e:	4620      	mov	r0, r4
 8021e50:	2200      	movs	r2, #0
 8021e52:	2104      	movs	r1, #4
 8021e54:	f7ff ff94 	bl	8021d80 <std>
 8021e58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021e5c:	2201      	movs	r2, #1
 8021e5e:	2109      	movs	r1, #9
 8021e60:	f7ff ff8e 	bl	8021d80 <std>
 8021e64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021e68:	2202      	movs	r2, #2
 8021e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e6e:	2112      	movs	r1, #18
 8021e70:	f7ff bf86 	b.w	8021d80 <std>
 8021e74:	2405a9ec 	.word	0x2405a9ec
 8021e78:	2405a8b4 	.word	0x2405a8b4
 8021e7c:	08021ded 	.word	0x08021ded

08021e80 <__sfp_lock_acquire>:
 8021e80:	4801      	ldr	r0, [pc, #4]	@ (8021e88 <__sfp_lock_acquire+0x8>)
 8021e82:	f000 b9ac 	b.w	80221de <__retarget_lock_acquire_recursive>
 8021e86:	bf00      	nop
 8021e88:	2405a9f5 	.word	0x2405a9f5

08021e8c <__sfp_lock_release>:
 8021e8c:	4801      	ldr	r0, [pc, #4]	@ (8021e94 <__sfp_lock_release+0x8>)
 8021e8e:	f000 b9a7 	b.w	80221e0 <__retarget_lock_release_recursive>
 8021e92:	bf00      	nop
 8021e94:	2405a9f5 	.word	0x2405a9f5

08021e98 <__sinit>:
 8021e98:	b510      	push	{r4, lr}
 8021e9a:	4604      	mov	r4, r0
 8021e9c:	f7ff fff0 	bl	8021e80 <__sfp_lock_acquire>
 8021ea0:	6a23      	ldr	r3, [r4, #32]
 8021ea2:	b11b      	cbz	r3, 8021eac <__sinit+0x14>
 8021ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ea8:	f7ff bff0 	b.w	8021e8c <__sfp_lock_release>
 8021eac:	4b04      	ldr	r3, [pc, #16]	@ (8021ec0 <__sinit+0x28>)
 8021eae:	6223      	str	r3, [r4, #32]
 8021eb0:	4b04      	ldr	r3, [pc, #16]	@ (8021ec4 <__sinit+0x2c>)
 8021eb2:	681b      	ldr	r3, [r3, #0]
 8021eb4:	2b00      	cmp	r3, #0
 8021eb6:	d1f5      	bne.n	8021ea4 <__sinit+0xc>
 8021eb8:	f7ff ffc4 	bl	8021e44 <global_stdio_init.part.0>
 8021ebc:	e7f2      	b.n	8021ea4 <__sinit+0xc>
 8021ebe:	bf00      	nop
 8021ec0:	08021e05 	.word	0x08021e05
 8021ec4:	2405a9ec 	.word	0x2405a9ec

08021ec8 <_fwalk_sglue>:
 8021ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ecc:	4607      	mov	r7, r0
 8021ece:	4688      	mov	r8, r1
 8021ed0:	4614      	mov	r4, r2
 8021ed2:	2600      	movs	r6, #0
 8021ed4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021ed8:	f1b9 0901 	subs.w	r9, r9, #1
 8021edc:	d505      	bpl.n	8021eea <_fwalk_sglue+0x22>
 8021ede:	6824      	ldr	r4, [r4, #0]
 8021ee0:	2c00      	cmp	r4, #0
 8021ee2:	d1f7      	bne.n	8021ed4 <_fwalk_sglue+0xc>
 8021ee4:	4630      	mov	r0, r6
 8021ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021eea:	89ab      	ldrh	r3, [r5, #12]
 8021eec:	2b01      	cmp	r3, #1
 8021eee:	d907      	bls.n	8021f00 <_fwalk_sglue+0x38>
 8021ef0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021ef4:	3301      	adds	r3, #1
 8021ef6:	d003      	beq.n	8021f00 <_fwalk_sglue+0x38>
 8021ef8:	4629      	mov	r1, r5
 8021efa:	4638      	mov	r0, r7
 8021efc:	47c0      	blx	r8
 8021efe:	4306      	orrs	r6, r0
 8021f00:	3568      	adds	r5, #104	@ 0x68
 8021f02:	e7e9      	b.n	8021ed8 <_fwalk_sglue+0x10>

08021f04 <sniprintf>:
 8021f04:	b40c      	push	{r2, r3}
 8021f06:	b530      	push	{r4, r5, lr}
 8021f08:	4b18      	ldr	r3, [pc, #96]	@ (8021f6c <sniprintf+0x68>)
 8021f0a:	1e0c      	subs	r4, r1, #0
 8021f0c:	681d      	ldr	r5, [r3, #0]
 8021f0e:	b09d      	sub	sp, #116	@ 0x74
 8021f10:	da08      	bge.n	8021f24 <sniprintf+0x20>
 8021f12:	238b      	movs	r3, #139	@ 0x8b
 8021f14:	602b      	str	r3, [r5, #0]
 8021f16:	f04f 30ff 	mov.w	r0, #4294967295
 8021f1a:	b01d      	add	sp, #116	@ 0x74
 8021f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021f20:	b002      	add	sp, #8
 8021f22:	4770      	bx	lr
 8021f24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8021f28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021f2c:	f04f 0300 	mov.w	r3, #0
 8021f30:	931b      	str	r3, [sp, #108]	@ 0x6c
 8021f32:	bf14      	ite	ne
 8021f34:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021f38:	4623      	moveq	r3, r4
 8021f3a:	9304      	str	r3, [sp, #16]
 8021f3c:	9307      	str	r3, [sp, #28]
 8021f3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021f42:	9002      	str	r0, [sp, #8]
 8021f44:	9006      	str	r0, [sp, #24]
 8021f46:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021f4a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021f4c:	ab21      	add	r3, sp, #132	@ 0x84
 8021f4e:	a902      	add	r1, sp, #8
 8021f50:	4628      	mov	r0, r5
 8021f52:	9301      	str	r3, [sp, #4]
 8021f54:	f000 face 	bl	80224f4 <_svfiprintf_r>
 8021f58:	1c43      	adds	r3, r0, #1
 8021f5a:	bfbc      	itt	lt
 8021f5c:	238b      	movlt	r3, #139	@ 0x8b
 8021f5e:	602b      	strlt	r3, [r5, #0]
 8021f60:	2c00      	cmp	r4, #0
 8021f62:	d0da      	beq.n	8021f1a <sniprintf+0x16>
 8021f64:	9b02      	ldr	r3, [sp, #8]
 8021f66:	2200      	movs	r2, #0
 8021f68:	701a      	strb	r2, [r3, #0]
 8021f6a:	e7d6      	b.n	8021f1a <sniprintf+0x16>
 8021f6c:	240149f8 	.word	0x240149f8

08021f70 <siprintf>:
 8021f70:	b40e      	push	{r1, r2, r3}
 8021f72:	b510      	push	{r4, lr}
 8021f74:	b09d      	sub	sp, #116	@ 0x74
 8021f76:	ab1f      	add	r3, sp, #124	@ 0x7c
 8021f78:	9002      	str	r0, [sp, #8]
 8021f7a:	9006      	str	r0, [sp, #24]
 8021f7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8021f80:	480a      	ldr	r0, [pc, #40]	@ (8021fac <siprintf+0x3c>)
 8021f82:	9107      	str	r1, [sp, #28]
 8021f84:	9104      	str	r1, [sp, #16]
 8021f86:	490a      	ldr	r1, [pc, #40]	@ (8021fb0 <siprintf+0x40>)
 8021f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8021f8c:	9105      	str	r1, [sp, #20]
 8021f8e:	2400      	movs	r4, #0
 8021f90:	a902      	add	r1, sp, #8
 8021f92:	6800      	ldr	r0, [r0, #0]
 8021f94:	9301      	str	r3, [sp, #4]
 8021f96:	941b      	str	r4, [sp, #108]	@ 0x6c
 8021f98:	f000 faac 	bl	80224f4 <_svfiprintf_r>
 8021f9c:	9b02      	ldr	r3, [sp, #8]
 8021f9e:	701c      	strb	r4, [r3, #0]
 8021fa0:	b01d      	add	sp, #116	@ 0x74
 8021fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021fa6:	b003      	add	sp, #12
 8021fa8:	4770      	bx	lr
 8021faa:	bf00      	nop
 8021fac:	240149f8 	.word	0x240149f8
 8021fb0:	ffff0208 	.word	0xffff0208

08021fb4 <__sread>:
 8021fb4:	b510      	push	{r4, lr}
 8021fb6:	460c      	mov	r4, r1
 8021fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021fbc:	f000 f8c0 	bl	8022140 <_read_r>
 8021fc0:	2800      	cmp	r0, #0
 8021fc2:	bfab      	itete	ge
 8021fc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8021fc8:	181b      	addge	r3, r3, r0
 8021fca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021fce:	bfac      	ite	ge
 8021fd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021fd2:	81a3      	strhlt	r3, [r4, #12]
 8021fd4:	bd10      	pop	{r4, pc}

08021fd6 <__swrite>:
 8021fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021fda:	461f      	mov	r7, r3
 8021fdc:	898b      	ldrh	r3, [r1, #12]
 8021fde:	05db      	lsls	r3, r3, #23
 8021fe0:	4605      	mov	r5, r0
 8021fe2:	460c      	mov	r4, r1
 8021fe4:	4616      	mov	r6, r2
 8021fe6:	d505      	bpl.n	8021ff4 <__swrite+0x1e>
 8021fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021fec:	2302      	movs	r3, #2
 8021fee:	2200      	movs	r2, #0
 8021ff0:	f000 f894 	bl	802211c <_lseek_r>
 8021ff4:	89a3      	ldrh	r3, [r4, #12]
 8021ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021ffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021ffe:	81a3      	strh	r3, [r4, #12]
 8022000:	4632      	mov	r2, r6
 8022002:	463b      	mov	r3, r7
 8022004:	4628      	mov	r0, r5
 8022006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802200a:	f000 b8ab 	b.w	8022164 <_write_r>

0802200e <__sseek>:
 802200e:	b510      	push	{r4, lr}
 8022010:	460c      	mov	r4, r1
 8022012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022016:	f000 f881 	bl	802211c <_lseek_r>
 802201a:	1c43      	adds	r3, r0, #1
 802201c:	89a3      	ldrh	r3, [r4, #12]
 802201e:	bf15      	itete	ne
 8022020:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022022:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022026:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802202a:	81a3      	strheq	r3, [r4, #12]
 802202c:	bf18      	it	ne
 802202e:	81a3      	strhne	r3, [r4, #12]
 8022030:	bd10      	pop	{r4, pc}

08022032 <__sclose>:
 8022032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022036:	f000 b861 	b.w	80220fc <_close_r>

0802203a <memcmp>:
 802203a:	b510      	push	{r4, lr}
 802203c:	3901      	subs	r1, #1
 802203e:	4402      	add	r2, r0
 8022040:	4290      	cmp	r0, r2
 8022042:	d101      	bne.n	8022048 <memcmp+0xe>
 8022044:	2000      	movs	r0, #0
 8022046:	e005      	b.n	8022054 <memcmp+0x1a>
 8022048:	7803      	ldrb	r3, [r0, #0]
 802204a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802204e:	42a3      	cmp	r3, r4
 8022050:	d001      	beq.n	8022056 <memcmp+0x1c>
 8022052:	1b18      	subs	r0, r3, r4
 8022054:	bd10      	pop	{r4, pc}
 8022056:	3001      	adds	r0, #1
 8022058:	e7f2      	b.n	8022040 <memcmp+0x6>

0802205a <memmove>:
 802205a:	4288      	cmp	r0, r1
 802205c:	b510      	push	{r4, lr}
 802205e:	eb01 0402 	add.w	r4, r1, r2
 8022062:	d902      	bls.n	802206a <memmove+0x10>
 8022064:	4284      	cmp	r4, r0
 8022066:	4623      	mov	r3, r4
 8022068:	d807      	bhi.n	802207a <memmove+0x20>
 802206a:	1e43      	subs	r3, r0, #1
 802206c:	42a1      	cmp	r1, r4
 802206e:	d008      	beq.n	8022082 <memmove+0x28>
 8022070:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022074:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022078:	e7f8      	b.n	802206c <memmove+0x12>
 802207a:	4402      	add	r2, r0
 802207c:	4601      	mov	r1, r0
 802207e:	428a      	cmp	r2, r1
 8022080:	d100      	bne.n	8022084 <memmove+0x2a>
 8022082:	bd10      	pop	{r4, pc}
 8022084:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022088:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802208c:	e7f7      	b.n	802207e <memmove+0x24>

0802208e <memset>:
 802208e:	4402      	add	r2, r0
 8022090:	4603      	mov	r3, r0
 8022092:	4293      	cmp	r3, r2
 8022094:	d100      	bne.n	8022098 <memset+0xa>
 8022096:	4770      	bx	lr
 8022098:	f803 1b01 	strb.w	r1, [r3], #1
 802209c:	e7f9      	b.n	8022092 <memset+0x4>

0802209e <strcat>:
 802209e:	b510      	push	{r4, lr}
 80220a0:	4602      	mov	r2, r0
 80220a2:	7814      	ldrb	r4, [r2, #0]
 80220a4:	4613      	mov	r3, r2
 80220a6:	3201      	adds	r2, #1
 80220a8:	2c00      	cmp	r4, #0
 80220aa:	d1fa      	bne.n	80220a2 <strcat+0x4>
 80220ac:	3b01      	subs	r3, #1
 80220ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80220b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80220b6:	2a00      	cmp	r2, #0
 80220b8:	d1f9      	bne.n	80220ae <strcat+0x10>
 80220ba:	bd10      	pop	{r4, pc}

080220bc <strchr>:
 80220bc:	b2c9      	uxtb	r1, r1
 80220be:	4603      	mov	r3, r0
 80220c0:	4618      	mov	r0, r3
 80220c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80220c6:	b112      	cbz	r2, 80220ce <strchr+0x12>
 80220c8:	428a      	cmp	r2, r1
 80220ca:	d1f9      	bne.n	80220c0 <strchr+0x4>
 80220cc:	4770      	bx	lr
 80220ce:	2900      	cmp	r1, #0
 80220d0:	bf18      	it	ne
 80220d2:	2000      	movne	r0, #0
 80220d4:	4770      	bx	lr

080220d6 <strncpy>:
 80220d6:	b510      	push	{r4, lr}
 80220d8:	3901      	subs	r1, #1
 80220da:	4603      	mov	r3, r0
 80220dc:	b132      	cbz	r2, 80220ec <strncpy+0x16>
 80220de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80220e2:	f803 4b01 	strb.w	r4, [r3], #1
 80220e6:	3a01      	subs	r2, #1
 80220e8:	2c00      	cmp	r4, #0
 80220ea:	d1f7      	bne.n	80220dc <strncpy+0x6>
 80220ec:	441a      	add	r2, r3
 80220ee:	2100      	movs	r1, #0
 80220f0:	4293      	cmp	r3, r2
 80220f2:	d100      	bne.n	80220f6 <strncpy+0x20>
 80220f4:	bd10      	pop	{r4, pc}
 80220f6:	f803 1b01 	strb.w	r1, [r3], #1
 80220fa:	e7f9      	b.n	80220f0 <strncpy+0x1a>

080220fc <_close_r>:
 80220fc:	b538      	push	{r3, r4, r5, lr}
 80220fe:	4d06      	ldr	r5, [pc, #24]	@ (8022118 <_close_r+0x1c>)
 8022100:	2300      	movs	r3, #0
 8022102:	4604      	mov	r4, r0
 8022104:	4608      	mov	r0, r1
 8022106:	602b      	str	r3, [r5, #0]
 8022108:	f7f7 f895 	bl	8019236 <_close>
 802210c:	1c43      	adds	r3, r0, #1
 802210e:	d102      	bne.n	8022116 <_close_r+0x1a>
 8022110:	682b      	ldr	r3, [r5, #0]
 8022112:	b103      	cbz	r3, 8022116 <_close_r+0x1a>
 8022114:	6023      	str	r3, [r4, #0]
 8022116:	bd38      	pop	{r3, r4, r5, pc}
 8022118:	2405a9f0 	.word	0x2405a9f0

0802211c <_lseek_r>:
 802211c:	b538      	push	{r3, r4, r5, lr}
 802211e:	4d07      	ldr	r5, [pc, #28]	@ (802213c <_lseek_r+0x20>)
 8022120:	4604      	mov	r4, r0
 8022122:	4608      	mov	r0, r1
 8022124:	4611      	mov	r1, r2
 8022126:	2200      	movs	r2, #0
 8022128:	602a      	str	r2, [r5, #0]
 802212a:	461a      	mov	r2, r3
 802212c:	f7f7 f8aa 	bl	8019284 <_lseek>
 8022130:	1c43      	adds	r3, r0, #1
 8022132:	d102      	bne.n	802213a <_lseek_r+0x1e>
 8022134:	682b      	ldr	r3, [r5, #0]
 8022136:	b103      	cbz	r3, 802213a <_lseek_r+0x1e>
 8022138:	6023      	str	r3, [r4, #0]
 802213a:	bd38      	pop	{r3, r4, r5, pc}
 802213c:	2405a9f0 	.word	0x2405a9f0

08022140 <_read_r>:
 8022140:	b538      	push	{r3, r4, r5, lr}
 8022142:	4d07      	ldr	r5, [pc, #28]	@ (8022160 <_read_r+0x20>)
 8022144:	4604      	mov	r4, r0
 8022146:	4608      	mov	r0, r1
 8022148:	4611      	mov	r1, r2
 802214a:	2200      	movs	r2, #0
 802214c:	602a      	str	r2, [r5, #0]
 802214e:	461a      	mov	r2, r3
 8022150:	f7f7 f838 	bl	80191c4 <_read>
 8022154:	1c43      	adds	r3, r0, #1
 8022156:	d102      	bne.n	802215e <_read_r+0x1e>
 8022158:	682b      	ldr	r3, [r5, #0]
 802215a:	b103      	cbz	r3, 802215e <_read_r+0x1e>
 802215c:	6023      	str	r3, [r4, #0]
 802215e:	bd38      	pop	{r3, r4, r5, pc}
 8022160:	2405a9f0 	.word	0x2405a9f0

08022164 <_write_r>:
 8022164:	b538      	push	{r3, r4, r5, lr}
 8022166:	4d07      	ldr	r5, [pc, #28]	@ (8022184 <_write_r+0x20>)
 8022168:	4604      	mov	r4, r0
 802216a:	4608      	mov	r0, r1
 802216c:	4611      	mov	r1, r2
 802216e:	2200      	movs	r2, #0
 8022170:	602a      	str	r2, [r5, #0]
 8022172:	461a      	mov	r2, r3
 8022174:	f7f7 f843 	bl	80191fe <_write>
 8022178:	1c43      	adds	r3, r0, #1
 802217a:	d102      	bne.n	8022182 <_write_r+0x1e>
 802217c:	682b      	ldr	r3, [r5, #0]
 802217e:	b103      	cbz	r3, 8022182 <_write_r+0x1e>
 8022180:	6023      	str	r3, [r4, #0]
 8022182:	bd38      	pop	{r3, r4, r5, pc}
 8022184:	2405a9f0 	.word	0x2405a9f0

08022188 <__errno>:
 8022188:	4b01      	ldr	r3, [pc, #4]	@ (8022190 <__errno+0x8>)
 802218a:	6818      	ldr	r0, [r3, #0]
 802218c:	4770      	bx	lr
 802218e:	bf00      	nop
 8022190:	240149f8 	.word	0x240149f8

08022194 <__libc_init_array>:
 8022194:	b570      	push	{r4, r5, r6, lr}
 8022196:	4d0d      	ldr	r5, [pc, #52]	@ (80221cc <__libc_init_array+0x38>)
 8022198:	4c0d      	ldr	r4, [pc, #52]	@ (80221d0 <__libc_init_array+0x3c>)
 802219a:	1b64      	subs	r4, r4, r5
 802219c:	10a4      	asrs	r4, r4, #2
 802219e:	2600      	movs	r6, #0
 80221a0:	42a6      	cmp	r6, r4
 80221a2:	d109      	bne.n	80221b8 <__libc_init_array+0x24>
 80221a4:	4d0b      	ldr	r5, [pc, #44]	@ (80221d4 <__libc_init_array+0x40>)
 80221a6:	4c0c      	ldr	r4, [pc, #48]	@ (80221d8 <__libc_init_array+0x44>)
 80221a8:	f000 ffd4 	bl	8023154 <_init>
 80221ac:	1b64      	subs	r4, r4, r5
 80221ae:	10a4      	asrs	r4, r4, #2
 80221b0:	2600      	movs	r6, #0
 80221b2:	42a6      	cmp	r6, r4
 80221b4:	d105      	bne.n	80221c2 <__libc_init_array+0x2e>
 80221b6:	bd70      	pop	{r4, r5, r6, pc}
 80221b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80221bc:	4798      	blx	r3
 80221be:	3601      	adds	r6, #1
 80221c0:	e7ee      	b.n	80221a0 <__libc_init_array+0xc>
 80221c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80221c6:	4798      	blx	r3
 80221c8:	3601      	adds	r6, #1
 80221ca:	e7f2      	b.n	80221b2 <__libc_init_array+0x1e>
 80221cc:	0802669c 	.word	0x0802669c
 80221d0:	0802669c 	.word	0x0802669c
 80221d4:	0802669c 	.word	0x0802669c
 80221d8:	080266a0 	.word	0x080266a0

080221dc <__retarget_lock_init_recursive>:
 80221dc:	4770      	bx	lr

080221de <__retarget_lock_acquire_recursive>:
 80221de:	4770      	bx	lr

080221e0 <__retarget_lock_release_recursive>:
 80221e0:	4770      	bx	lr

080221e2 <memcpy>:
 80221e2:	440a      	add	r2, r1
 80221e4:	4291      	cmp	r1, r2
 80221e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80221ea:	d100      	bne.n	80221ee <memcpy+0xc>
 80221ec:	4770      	bx	lr
 80221ee:	b510      	push	{r4, lr}
 80221f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80221f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80221f8:	4291      	cmp	r1, r2
 80221fa:	d1f9      	bne.n	80221f0 <memcpy+0xe>
 80221fc:	bd10      	pop	{r4, pc}
	...

08022200 <__assert_func>:
 8022200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022202:	4614      	mov	r4, r2
 8022204:	461a      	mov	r2, r3
 8022206:	4b09      	ldr	r3, [pc, #36]	@ (802222c <__assert_func+0x2c>)
 8022208:	681b      	ldr	r3, [r3, #0]
 802220a:	4605      	mov	r5, r0
 802220c:	68d8      	ldr	r0, [r3, #12]
 802220e:	b14c      	cbz	r4, 8022224 <__assert_func+0x24>
 8022210:	4b07      	ldr	r3, [pc, #28]	@ (8022230 <__assert_func+0x30>)
 8022212:	9100      	str	r1, [sp, #0]
 8022214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022218:	4906      	ldr	r1, [pc, #24]	@ (8022234 <__assert_func+0x34>)
 802221a:	462b      	mov	r3, r5
 802221c:	f000 fc9e 	bl	8022b5c <fiprintf>
 8022220:	f000 fcbe 	bl	8022ba0 <abort>
 8022224:	4b04      	ldr	r3, [pc, #16]	@ (8022238 <__assert_func+0x38>)
 8022226:	461c      	mov	r4, r3
 8022228:	e7f3      	b.n	8022212 <__assert_func+0x12>
 802222a:	bf00      	nop
 802222c:	240149f8 	.word	0x240149f8
 8022230:	08026523 	.word	0x08026523
 8022234:	08026530 	.word	0x08026530
 8022238:	0802655e 	.word	0x0802655e

0802223c <_free_r>:
 802223c:	b538      	push	{r3, r4, r5, lr}
 802223e:	4605      	mov	r5, r0
 8022240:	2900      	cmp	r1, #0
 8022242:	d041      	beq.n	80222c8 <_free_r+0x8c>
 8022244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022248:	1f0c      	subs	r4, r1, #4
 802224a:	2b00      	cmp	r3, #0
 802224c:	bfb8      	it	lt
 802224e:	18e4      	addlt	r4, r4, r3
 8022250:	f000 f8e8 	bl	8022424 <__malloc_lock>
 8022254:	4a1d      	ldr	r2, [pc, #116]	@ (80222cc <_free_r+0x90>)
 8022256:	6813      	ldr	r3, [r2, #0]
 8022258:	b933      	cbnz	r3, 8022268 <_free_r+0x2c>
 802225a:	6063      	str	r3, [r4, #4]
 802225c:	6014      	str	r4, [r2, #0]
 802225e:	4628      	mov	r0, r5
 8022260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022264:	f000 b8e4 	b.w	8022430 <__malloc_unlock>
 8022268:	42a3      	cmp	r3, r4
 802226a:	d908      	bls.n	802227e <_free_r+0x42>
 802226c:	6820      	ldr	r0, [r4, #0]
 802226e:	1821      	adds	r1, r4, r0
 8022270:	428b      	cmp	r3, r1
 8022272:	bf01      	itttt	eq
 8022274:	6819      	ldreq	r1, [r3, #0]
 8022276:	685b      	ldreq	r3, [r3, #4]
 8022278:	1809      	addeq	r1, r1, r0
 802227a:	6021      	streq	r1, [r4, #0]
 802227c:	e7ed      	b.n	802225a <_free_r+0x1e>
 802227e:	461a      	mov	r2, r3
 8022280:	685b      	ldr	r3, [r3, #4]
 8022282:	b10b      	cbz	r3, 8022288 <_free_r+0x4c>
 8022284:	42a3      	cmp	r3, r4
 8022286:	d9fa      	bls.n	802227e <_free_r+0x42>
 8022288:	6811      	ldr	r1, [r2, #0]
 802228a:	1850      	adds	r0, r2, r1
 802228c:	42a0      	cmp	r0, r4
 802228e:	d10b      	bne.n	80222a8 <_free_r+0x6c>
 8022290:	6820      	ldr	r0, [r4, #0]
 8022292:	4401      	add	r1, r0
 8022294:	1850      	adds	r0, r2, r1
 8022296:	4283      	cmp	r3, r0
 8022298:	6011      	str	r1, [r2, #0]
 802229a:	d1e0      	bne.n	802225e <_free_r+0x22>
 802229c:	6818      	ldr	r0, [r3, #0]
 802229e:	685b      	ldr	r3, [r3, #4]
 80222a0:	6053      	str	r3, [r2, #4]
 80222a2:	4408      	add	r0, r1
 80222a4:	6010      	str	r0, [r2, #0]
 80222a6:	e7da      	b.n	802225e <_free_r+0x22>
 80222a8:	d902      	bls.n	80222b0 <_free_r+0x74>
 80222aa:	230c      	movs	r3, #12
 80222ac:	602b      	str	r3, [r5, #0]
 80222ae:	e7d6      	b.n	802225e <_free_r+0x22>
 80222b0:	6820      	ldr	r0, [r4, #0]
 80222b2:	1821      	adds	r1, r4, r0
 80222b4:	428b      	cmp	r3, r1
 80222b6:	bf04      	itt	eq
 80222b8:	6819      	ldreq	r1, [r3, #0]
 80222ba:	685b      	ldreq	r3, [r3, #4]
 80222bc:	6063      	str	r3, [r4, #4]
 80222be:	bf04      	itt	eq
 80222c0:	1809      	addeq	r1, r1, r0
 80222c2:	6021      	streq	r1, [r4, #0]
 80222c4:	6054      	str	r4, [r2, #4]
 80222c6:	e7ca      	b.n	802225e <_free_r+0x22>
 80222c8:	bd38      	pop	{r3, r4, r5, pc}
 80222ca:	bf00      	nop
 80222cc:	2405a9fc 	.word	0x2405a9fc

080222d0 <malloc>:
 80222d0:	4b02      	ldr	r3, [pc, #8]	@ (80222dc <malloc+0xc>)
 80222d2:	4601      	mov	r1, r0
 80222d4:	6818      	ldr	r0, [r3, #0]
 80222d6:	f000 b825 	b.w	8022324 <_malloc_r>
 80222da:	bf00      	nop
 80222dc:	240149f8 	.word	0x240149f8

080222e0 <sbrk_aligned>:
 80222e0:	b570      	push	{r4, r5, r6, lr}
 80222e2:	4e0f      	ldr	r6, [pc, #60]	@ (8022320 <sbrk_aligned+0x40>)
 80222e4:	460c      	mov	r4, r1
 80222e6:	6831      	ldr	r1, [r6, #0]
 80222e8:	4605      	mov	r5, r0
 80222ea:	b911      	cbnz	r1, 80222f2 <sbrk_aligned+0x12>
 80222ec:	f000 fc48 	bl	8022b80 <_sbrk_r>
 80222f0:	6030      	str	r0, [r6, #0]
 80222f2:	4621      	mov	r1, r4
 80222f4:	4628      	mov	r0, r5
 80222f6:	f000 fc43 	bl	8022b80 <_sbrk_r>
 80222fa:	1c43      	adds	r3, r0, #1
 80222fc:	d103      	bne.n	8022306 <sbrk_aligned+0x26>
 80222fe:	f04f 34ff 	mov.w	r4, #4294967295
 8022302:	4620      	mov	r0, r4
 8022304:	bd70      	pop	{r4, r5, r6, pc}
 8022306:	1cc4      	adds	r4, r0, #3
 8022308:	f024 0403 	bic.w	r4, r4, #3
 802230c:	42a0      	cmp	r0, r4
 802230e:	d0f8      	beq.n	8022302 <sbrk_aligned+0x22>
 8022310:	1a21      	subs	r1, r4, r0
 8022312:	4628      	mov	r0, r5
 8022314:	f000 fc34 	bl	8022b80 <_sbrk_r>
 8022318:	3001      	adds	r0, #1
 802231a:	d1f2      	bne.n	8022302 <sbrk_aligned+0x22>
 802231c:	e7ef      	b.n	80222fe <sbrk_aligned+0x1e>
 802231e:	bf00      	nop
 8022320:	2405a9f8 	.word	0x2405a9f8

08022324 <_malloc_r>:
 8022324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022328:	1ccd      	adds	r5, r1, #3
 802232a:	f025 0503 	bic.w	r5, r5, #3
 802232e:	3508      	adds	r5, #8
 8022330:	2d0c      	cmp	r5, #12
 8022332:	bf38      	it	cc
 8022334:	250c      	movcc	r5, #12
 8022336:	2d00      	cmp	r5, #0
 8022338:	4606      	mov	r6, r0
 802233a:	db01      	blt.n	8022340 <_malloc_r+0x1c>
 802233c:	42a9      	cmp	r1, r5
 802233e:	d904      	bls.n	802234a <_malloc_r+0x26>
 8022340:	230c      	movs	r3, #12
 8022342:	6033      	str	r3, [r6, #0]
 8022344:	2000      	movs	r0, #0
 8022346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802234a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022420 <_malloc_r+0xfc>
 802234e:	f000 f869 	bl	8022424 <__malloc_lock>
 8022352:	f8d8 3000 	ldr.w	r3, [r8]
 8022356:	461c      	mov	r4, r3
 8022358:	bb44      	cbnz	r4, 80223ac <_malloc_r+0x88>
 802235a:	4629      	mov	r1, r5
 802235c:	4630      	mov	r0, r6
 802235e:	f7ff ffbf 	bl	80222e0 <sbrk_aligned>
 8022362:	1c43      	adds	r3, r0, #1
 8022364:	4604      	mov	r4, r0
 8022366:	d158      	bne.n	802241a <_malloc_r+0xf6>
 8022368:	f8d8 4000 	ldr.w	r4, [r8]
 802236c:	4627      	mov	r7, r4
 802236e:	2f00      	cmp	r7, #0
 8022370:	d143      	bne.n	80223fa <_malloc_r+0xd6>
 8022372:	2c00      	cmp	r4, #0
 8022374:	d04b      	beq.n	802240e <_malloc_r+0xea>
 8022376:	6823      	ldr	r3, [r4, #0]
 8022378:	4639      	mov	r1, r7
 802237a:	4630      	mov	r0, r6
 802237c:	eb04 0903 	add.w	r9, r4, r3
 8022380:	f000 fbfe 	bl	8022b80 <_sbrk_r>
 8022384:	4581      	cmp	r9, r0
 8022386:	d142      	bne.n	802240e <_malloc_r+0xea>
 8022388:	6821      	ldr	r1, [r4, #0]
 802238a:	1a6d      	subs	r5, r5, r1
 802238c:	4629      	mov	r1, r5
 802238e:	4630      	mov	r0, r6
 8022390:	f7ff ffa6 	bl	80222e0 <sbrk_aligned>
 8022394:	3001      	adds	r0, #1
 8022396:	d03a      	beq.n	802240e <_malloc_r+0xea>
 8022398:	6823      	ldr	r3, [r4, #0]
 802239a:	442b      	add	r3, r5
 802239c:	6023      	str	r3, [r4, #0]
 802239e:	f8d8 3000 	ldr.w	r3, [r8]
 80223a2:	685a      	ldr	r2, [r3, #4]
 80223a4:	bb62      	cbnz	r2, 8022400 <_malloc_r+0xdc>
 80223a6:	f8c8 7000 	str.w	r7, [r8]
 80223aa:	e00f      	b.n	80223cc <_malloc_r+0xa8>
 80223ac:	6822      	ldr	r2, [r4, #0]
 80223ae:	1b52      	subs	r2, r2, r5
 80223b0:	d420      	bmi.n	80223f4 <_malloc_r+0xd0>
 80223b2:	2a0b      	cmp	r2, #11
 80223b4:	d917      	bls.n	80223e6 <_malloc_r+0xc2>
 80223b6:	1961      	adds	r1, r4, r5
 80223b8:	42a3      	cmp	r3, r4
 80223ba:	6025      	str	r5, [r4, #0]
 80223bc:	bf18      	it	ne
 80223be:	6059      	strne	r1, [r3, #4]
 80223c0:	6863      	ldr	r3, [r4, #4]
 80223c2:	bf08      	it	eq
 80223c4:	f8c8 1000 	streq.w	r1, [r8]
 80223c8:	5162      	str	r2, [r4, r5]
 80223ca:	604b      	str	r3, [r1, #4]
 80223cc:	4630      	mov	r0, r6
 80223ce:	f000 f82f 	bl	8022430 <__malloc_unlock>
 80223d2:	f104 000b 	add.w	r0, r4, #11
 80223d6:	1d23      	adds	r3, r4, #4
 80223d8:	f020 0007 	bic.w	r0, r0, #7
 80223dc:	1ac2      	subs	r2, r0, r3
 80223de:	bf1c      	itt	ne
 80223e0:	1a1b      	subne	r3, r3, r0
 80223e2:	50a3      	strne	r3, [r4, r2]
 80223e4:	e7af      	b.n	8022346 <_malloc_r+0x22>
 80223e6:	6862      	ldr	r2, [r4, #4]
 80223e8:	42a3      	cmp	r3, r4
 80223ea:	bf0c      	ite	eq
 80223ec:	f8c8 2000 	streq.w	r2, [r8]
 80223f0:	605a      	strne	r2, [r3, #4]
 80223f2:	e7eb      	b.n	80223cc <_malloc_r+0xa8>
 80223f4:	4623      	mov	r3, r4
 80223f6:	6864      	ldr	r4, [r4, #4]
 80223f8:	e7ae      	b.n	8022358 <_malloc_r+0x34>
 80223fa:	463c      	mov	r4, r7
 80223fc:	687f      	ldr	r7, [r7, #4]
 80223fe:	e7b6      	b.n	802236e <_malloc_r+0x4a>
 8022400:	461a      	mov	r2, r3
 8022402:	685b      	ldr	r3, [r3, #4]
 8022404:	42a3      	cmp	r3, r4
 8022406:	d1fb      	bne.n	8022400 <_malloc_r+0xdc>
 8022408:	2300      	movs	r3, #0
 802240a:	6053      	str	r3, [r2, #4]
 802240c:	e7de      	b.n	80223cc <_malloc_r+0xa8>
 802240e:	230c      	movs	r3, #12
 8022410:	6033      	str	r3, [r6, #0]
 8022412:	4630      	mov	r0, r6
 8022414:	f000 f80c 	bl	8022430 <__malloc_unlock>
 8022418:	e794      	b.n	8022344 <_malloc_r+0x20>
 802241a:	6005      	str	r5, [r0, #0]
 802241c:	e7d6      	b.n	80223cc <_malloc_r+0xa8>
 802241e:	bf00      	nop
 8022420:	2405a9fc 	.word	0x2405a9fc

08022424 <__malloc_lock>:
 8022424:	4801      	ldr	r0, [pc, #4]	@ (802242c <__malloc_lock+0x8>)
 8022426:	f7ff beda 	b.w	80221de <__retarget_lock_acquire_recursive>
 802242a:	bf00      	nop
 802242c:	2405a9f4 	.word	0x2405a9f4

08022430 <__malloc_unlock>:
 8022430:	4801      	ldr	r0, [pc, #4]	@ (8022438 <__malloc_unlock+0x8>)
 8022432:	f7ff bed5 	b.w	80221e0 <__retarget_lock_release_recursive>
 8022436:	bf00      	nop
 8022438:	2405a9f4 	.word	0x2405a9f4

0802243c <__ssputs_r>:
 802243c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022440:	688e      	ldr	r6, [r1, #8]
 8022442:	461f      	mov	r7, r3
 8022444:	42be      	cmp	r6, r7
 8022446:	680b      	ldr	r3, [r1, #0]
 8022448:	4682      	mov	sl, r0
 802244a:	460c      	mov	r4, r1
 802244c:	4690      	mov	r8, r2
 802244e:	d82d      	bhi.n	80224ac <__ssputs_r+0x70>
 8022450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022454:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8022458:	d026      	beq.n	80224a8 <__ssputs_r+0x6c>
 802245a:	6965      	ldr	r5, [r4, #20]
 802245c:	6909      	ldr	r1, [r1, #16]
 802245e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022462:	eba3 0901 	sub.w	r9, r3, r1
 8022466:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802246a:	1c7b      	adds	r3, r7, #1
 802246c:	444b      	add	r3, r9
 802246e:	106d      	asrs	r5, r5, #1
 8022470:	429d      	cmp	r5, r3
 8022472:	bf38      	it	cc
 8022474:	461d      	movcc	r5, r3
 8022476:	0553      	lsls	r3, r2, #21
 8022478:	d527      	bpl.n	80224ca <__ssputs_r+0x8e>
 802247a:	4629      	mov	r1, r5
 802247c:	f7ff ff52 	bl	8022324 <_malloc_r>
 8022480:	4606      	mov	r6, r0
 8022482:	b360      	cbz	r0, 80224de <__ssputs_r+0xa2>
 8022484:	6921      	ldr	r1, [r4, #16]
 8022486:	464a      	mov	r2, r9
 8022488:	f7ff feab 	bl	80221e2 <memcpy>
 802248c:	89a3      	ldrh	r3, [r4, #12]
 802248e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8022492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022496:	81a3      	strh	r3, [r4, #12]
 8022498:	6126      	str	r6, [r4, #16]
 802249a:	6165      	str	r5, [r4, #20]
 802249c:	444e      	add	r6, r9
 802249e:	eba5 0509 	sub.w	r5, r5, r9
 80224a2:	6026      	str	r6, [r4, #0]
 80224a4:	60a5      	str	r5, [r4, #8]
 80224a6:	463e      	mov	r6, r7
 80224a8:	42be      	cmp	r6, r7
 80224aa:	d900      	bls.n	80224ae <__ssputs_r+0x72>
 80224ac:	463e      	mov	r6, r7
 80224ae:	6820      	ldr	r0, [r4, #0]
 80224b0:	4632      	mov	r2, r6
 80224b2:	4641      	mov	r1, r8
 80224b4:	f7ff fdd1 	bl	802205a <memmove>
 80224b8:	68a3      	ldr	r3, [r4, #8]
 80224ba:	1b9b      	subs	r3, r3, r6
 80224bc:	60a3      	str	r3, [r4, #8]
 80224be:	6823      	ldr	r3, [r4, #0]
 80224c0:	4433      	add	r3, r6
 80224c2:	6023      	str	r3, [r4, #0]
 80224c4:	2000      	movs	r0, #0
 80224c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224ca:	462a      	mov	r2, r5
 80224cc:	f000 fb6f 	bl	8022bae <_realloc_r>
 80224d0:	4606      	mov	r6, r0
 80224d2:	2800      	cmp	r0, #0
 80224d4:	d1e0      	bne.n	8022498 <__ssputs_r+0x5c>
 80224d6:	6921      	ldr	r1, [r4, #16]
 80224d8:	4650      	mov	r0, sl
 80224da:	f7ff feaf 	bl	802223c <_free_r>
 80224de:	230c      	movs	r3, #12
 80224e0:	f8ca 3000 	str.w	r3, [sl]
 80224e4:	89a3      	ldrh	r3, [r4, #12]
 80224e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80224ea:	81a3      	strh	r3, [r4, #12]
 80224ec:	f04f 30ff 	mov.w	r0, #4294967295
 80224f0:	e7e9      	b.n	80224c6 <__ssputs_r+0x8a>
	...

080224f4 <_svfiprintf_r>:
 80224f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224f8:	4698      	mov	r8, r3
 80224fa:	898b      	ldrh	r3, [r1, #12]
 80224fc:	061b      	lsls	r3, r3, #24
 80224fe:	b09d      	sub	sp, #116	@ 0x74
 8022500:	4607      	mov	r7, r0
 8022502:	460d      	mov	r5, r1
 8022504:	4614      	mov	r4, r2
 8022506:	d510      	bpl.n	802252a <_svfiprintf_r+0x36>
 8022508:	690b      	ldr	r3, [r1, #16]
 802250a:	b973      	cbnz	r3, 802252a <_svfiprintf_r+0x36>
 802250c:	2140      	movs	r1, #64	@ 0x40
 802250e:	f7ff ff09 	bl	8022324 <_malloc_r>
 8022512:	6028      	str	r0, [r5, #0]
 8022514:	6128      	str	r0, [r5, #16]
 8022516:	b930      	cbnz	r0, 8022526 <_svfiprintf_r+0x32>
 8022518:	230c      	movs	r3, #12
 802251a:	603b      	str	r3, [r7, #0]
 802251c:	f04f 30ff 	mov.w	r0, #4294967295
 8022520:	b01d      	add	sp, #116	@ 0x74
 8022522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022526:	2340      	movs	r3, #64	@ 0x40
 8022528:	616b      	str	r3, [r5, #20]
 802252a:	2300      	movs	r3, #0
 802252c:	9309      	str	r3, [sp, #36]	@ 0x24
 802252e:	2320      	movs	r3, #32
 8022530:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022534:	f8cd 800c 	str.w	r8, [sp, #12]
 8022538:	2330      	movs	r3, #48	@ 0x30
 802253a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80226d8 <_svfiprintf_r+0x1e4>
 802253e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022542:	f04f 0901 	mov.w	r9, #1
 8022546:	4623      	mov	r3, r4
 8022548:	469a      	mov	sl, r3
 802254a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802254e:	b10a      	cbz	r2, 8022554 <_svfiprintf_r+0x60>
 8022550:	2a25      	cmp	r2, #37	@ 0x25
 8022552:	d1f9      	bne.n	8022548 <_svfiprintf_r+0x54>
 8022554:	ebba 0b04 	subs.w	fp, sl, r4
 8022558:	d00b      	beq.n	8022572 <_svfiprintf_r+0x7e>
 802255a:	465b      	mov	r3, fp
 802255c:	4622      	mov	r2, r4
 802255e:	4629      	mov	r1, r5
 8022560:	4638      	mov	r0, r7
 8022562:	f7ff ff6b 	bl	802243c <__ssputs_r>
 8022566:	3001      	adds	r0, #1
 8022568:	f000 80a7 	beq.w	80226ba <_svfiprintf_r+0x1c6>
 802256c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802256e:	445a      	add	r2, fp
 8022570:	9209      	str	r2, [sp, #36]	@ 0x24
 8022572:	f89a 3000 	ldrb.w	r3, [sl]
 8022576:	2b00      	cmp	r3, #0
 8022578:	f000 809f 	beq.w	80226ba <_svfiprintf_r+0x1c6>
 802257c:	2300      	movs	r3, #0
 802257e:	f04f 32ff 	mov.w	r2, #4294967295
 8022582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022586:	f10a 0a01 	add.w	sl, sl, #1
 802258a:	9304      	str	r3, [sp, #16]
 802258c:	9307      	str	r3, [sp, #28]
 802258e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022592:	931a      	str	r3, [sp, #104]	@ 0x68
 8022594:	4654      	mov	r4, sl
 8022596:	2205      	movs	r2, #5
 8022598:	f814 1b01 	ldrb.w	r1, [r4], #1
 802259c:	484e      	ldr	r0, [pc, #312]	@ (80226d8 <_svfiprintf_r+0x1e4>)
 802259e:	f7dd feb7 	bl	8000310 <memchr>
 80225a2:	9a04      	ldr	r2, [sp, #16]
 80225a4:	b9d8      	cbnz	r0, 80225de <_svfiprintf_r+0xea>
 80225a6:	06d0      	lsls	r0, r2, #27
 80225a8:	bf44      	itt	mi
 80225aa:	2320      	movmi	r3, #32
 80225ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80225b0:	0711      	lsls	r1, r2, #28
 80225b2:	bf44      	itt	mi
 80225b4:	232b      	movmi	r3, #43	@ 0x2b
 80225b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80225ba:	f89a 3000 	ldrb.w	r3, [sl]
 80225be:	2b2a      	cmp	r3, #42	@ 0x2a
 80225c0:	d015      	beq.n	80225ee <_svfiprintf_r+0xfa>
 80225c2:	9a07      	ldr	r2, [sp, #28]
 80225c4:	4654      	mov	r4, sl
 80225c6:	2000      	movs	r0, #0
 80225c8:	f04f 0c0a 	mov.w	ip, #10
 80225cc:	4621      	mov	r1, r4
 80225ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80225d2:	3b30      	subs	r3, #48	@ 0x30
 80225d4:	2b09      	cmp	r3, #9
 80225d6:	d94b      	bls.n	8022670 <_svfiprintf_r+0x17c>
 80225d8:	b1b0      	cbz	r0, 8022608 <_svfiprintf_r+0x114>
 80225da:	9207      	str	r2, [sp, #28]
 80225dc:	e014      	b.n	8022608 <_svfiprintf_r+0x114>
 80225de:	eba0 0308 	sub.w	r3, r0, r8
 80225e2:	fa09 f303 	lsl.w	r3, r9, r3
 80225e6:	4313      	orrs	r3, r2
 80225e8:	9304      	str	r3, [sp, #16]
 80225ea:	46a2      	mov	sl, r4
 80225ec:	e7d2      	b.n	8022594 <_svfiprintf_r+0xa0>
 80225ee:	9b03      	ldr	r3, [sp, #12]
 80225f0:	1d19      	adds	r1, r3, #4
 80225f2:	681b      	ldr	r3, [r3, #0]
 80225f4:	9103      	str	r1, [sp, #12]
 80225f6:	2b00      	cmp	r3, #0
 80225f8:	bfbb      	ittet	lt
 80225fa:	425b      	neglt	r3, r3
 80225fc:	f042 0202 	orrlt.w	r2, r2, #2
 8022600:	9307      	strge	r3, [sp, #28]
 8022602:	9307      	strlt	r3, [sp, #28]
 8022604:	bfb8      	it	lt
 8022606:	9204      	strlt	r2, [sp, #16]
 8022608:	7823      	ldrb	r3, [r4, #0]
 802260a:	2b2e      	cmp	r3, #46	@ 0x2e
 802260c:	d10a      	bne.n	8022624 <_svfiprintf_r+0x130>
 802260e:	7863      	ldrb	r3, [r4, #1]
 8022610:	2b2a      	cmp	r3, #42	@ 0x2a
 8022612:	d132      	bne.n	802267a <_svfiprintf_r+0x186>
 8022614:	9b03      	ldr	r3, [sp, #12]
 8022616:	1d1a      	adds	r2, r3, #4
 8022618:	681b      	ldr	r3, [r3, #0]
 802261a:	9203      	str	r2, [sp, #12]
 802261c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022620:	3402      	adds	r4, #2
 8022622:	9305      	str	r3, [sp, #20]
 8022624:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80226e8 <_svfiprintf_r+0x1f4>
 8022628:	7821      	ldrb	r1, [r4, #0]
 802262a:	2203      	movs	r2, #3
 802262c:	4650      	mov	r0, sl
 802262e:	f7dd fe6f 	bl	8000310 <memchr>
 8022632:	b138      	cbz	r0, 8022644 <_svfiprintf_r+0x150>
 8022634:	9b04      	ldr	r3, [sp, #16]
 8022636:	eba0 000a 	sub.w	r0, r0, sl
 802263a:	2240      	movs	r2, #64	@ 0x40
 802263c:	4082      	lsls	r2, r0
 802263e:	4313      	orrs	r3, r2
 8022640:	3401      	adds	r4, #1
 8022642:	9304      	str	r3, [sp, #16]
 8022644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022648:	4824      	ldr	r0, [pc, #144]	@ (80226dc <_svfiprintf_r+0x1e8>)
 802264a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802264e:	2206      	movs	r2, #6
 8022650:	f7dd fe5e 	bl	8000310 <memchr>
 8022654:	2800      	cmp	r0, #0
 8022656:	d036      	beq.n	80226c6 <_svfiprintf_r+0x1d2>
 8022658:	4b21      	ldr	r3, [pc, #132]	@ (80226e0 <_svfiprintf_r+0x1ec>)
 802265a:	bb1b      	cbnz	r3, 80226a4 <_svfiprintf_r+0x1b0>
 802265c:	9b03      	ldr	r3, [sp, #12]
 802265e:	3307      	adds	r3, #7
 8022660:	f023 0307 	bic.w	r3, r3, #7
 8022664:	3308      	adds	r3, #8
 8022666:	9303      	str	r3, [sp, #12]
 8022668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802266a:	4433      	add	r3, r6
 802266c:	9309      	str	r3, [sp, #36]	@ 0x24
 802266e:	e76a      	b.n	8022546 <_svfiprintf_r+0x52>
 8022670:	fb0c 3202 	mla	r2, ip, r2, r3
 8022674:	460c      	mov	r4, r1
 8022676:	2001      	movs	r0, #1
 8022678:	e7a8      	b.n	80225cc <_svfiprintf_r+0xd8>
 802267a:	2300      	movs	r3, #0
 802267c:	3401      	adds	r4, #1
 802267e:	9305      	str	r3, [sp, #20]
 8022680:	4619      	mov	r1, r3
 8022682:	f04f 0c0a 	mov.w	ip, #10
 8022686:	4620      	mov	r0, r4
 8022688:	f810 2b01 	ldrb.w	r2, [r0], #1
 802268c:	3a30      	subs	r2, #48	@ 0x30
 802268e:	2a09      	cmp	r2, #9
 8022690:	d903      	bls.n	802269a <_svfiprintf_r+0x1a6>
 8022692:	2b00      	cmp	r3, #0
 8022694:	d0c6      	beq.n	8022624 <_svfiprintf_r+0x130>
 8022696:	9105      	str	r1, [sp, #20]
 8022698:	e7c4      	b.n	8022624 <_svfiprintf_r+0x130>
 802269a:	fb0c 2101 	mla	r1, ip, r1, r2
 802269e:	4604      	mov	r4, r0
 80226a0:	2301      	movs	r3, #1
 80226a2:	e7f0      	b.n	8022686 <_svfiprintf_r+0x192>
 80226a4:	ab03      	add	r3, sp, #12
 80226a6:	9300      	str	r3, [sp, #0]
 80226a8:	462a      	mov	r2, r5
 80226aa:	4b0e      	ldr	r3, [pc, #56]	@ (80226e4 <_svfiprintf_r+0x1f0>)
 80226ac:	a904      	add	r1, sp, #16
 80226ae:	4638      	mov	r0, r7
 80226b0:	f3af 8000 	nop.w
 80226b4:	1c42      	adds	r2, r0, #1
 80226b6:	4606      	mov	r6, r0
 80226b8:	d1d6      	bne.n	8022668 <_svfiprintf_r+0x174>
 80226ba:	89ab      	ldrh	r3, [r5, #12]
 80226bc:	065b      	lsls	r3, r3, #25
 80226be:	f53f af2d 	bmi.w	802251c <_svfiprintf_r+0x28>
 80226c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80226c4:	e72c      	b.n	8022520 <_svfiprintf_r+0x2c>
 80226c6:	ab03      	add	r3, sp, #12
 80226c8:	9300      	str	r3, [sp, #0]
 80226ca:	462a      	mov	r2, r5
 80226cc:	4b05      	ldr	r3, [pc, #20]	@ (80226e4 <_svfiprintf_r+0x1f0>)
 80226ce:	a904      	add	r1, sp, #16
 80226d0:	4638      	mov	r0, r7
 80226d2:	f000 f879 	bl	80227c8 <_printf_i>
 80226d6:	e7ed      	b.n	80226b4 <_svfiprintf_r+0x1c0>
 80226d8:	0802655f 	.word	0x0802655f
 80226dc:	08026569 	.word	0x08026569
 80226e0:	00000000 	.word	0x00000000
 80226e4:	0802243d 	.word	0x0802243d
 80226e8:	08026565 	.word	0x08026565

080226ec <_printf_common>:
 80226ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80226f0:	4616      	mov	r6, r2
 80226f2:	4698      	mov	r8, r3
 80226f4:	688a      	ldr	r2, [r1, #8]
 80226f6:	690b      	ldr	r3, [r1, #16]
 80226f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80226fc:	4293      	cmp	r3, r2
 80226fe:	bfb8      	it	lt
 8022700:	4613      	movlt	r3, r2
 8022702:	6033      	str	r3, [r6, #0]
 8022704:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022708:	4607      	mov	r7, r0
 802270a:	460c      	mov	r4, r1
 802270c:	b10a      	cbz	r2, 8022712 <_printf_common+0x26>
 802270e:	3301      	adds	r3, #1
 8022710:	6033      	str	r3, [r6, #0]
 8022712:	6823      	ldr	r3, [r4, #0]
 8022714:	0699      	lsls	r1, r3, #26
 8022716:	bf42      	ittt	mi
 8022718:	6833      	ldrmi	r3, [r6, #0]
 802271a:	3302      	addmi	r3, #2
 802271c:	6033      	strmi	r3, [r6, #0]
 802271e:	6825      	ldr	r5, [r4, #0]
 8022720:	f015 0506 	ands.w	r5, r5, #6
 8022724:	d106      	bne.n	8022734 <_printf_common+0x48>
 8022726:	f104 0a19 	add.w	sl, r4, #25
 802272a:	68e3      	ldr	r3, [r4, #12]
 802272c:	6832      	ldr	r2, [r6, #0]
 802272e:	1a9b      	subs	r3, r3, r2
 8022730:	42ab      	cmp	r3, r5
 8022732:	dc26      	bgt.n	8022782 <_printf_common+0x96>
 8022734:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022738:	6822      	ldr	r2, [r4, #0]
 802273a:	3b00      	subs	r3, #0
 802273c:	bf18      	it	ne
 802273e:	2301      	movne	r3, #1
 8022740:	0692      	lsls	r2, r2, #26
 8022742:	d42b      	bmi.n	802279c <_printf_common+0xb0>
 8022744:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022748:	4641      	mov	r1, r8
 802274a:	4638      	mov	r0, r7
 802274c:	47c8      	blx	r9
 802274e:	3001      	adds	r0, #1
 8022750:	d01e      	beq.n	8022790 <_printf_common+0xa4>
 8022752:	6823      	ldr	r3, [r4, #0]
 8022754:	6922      	ldr	r2, [r4, #16]
 8022756:	f003 0306 	and.w	r3, r3, #6
 802275a:	2b04      	cmp	r3, #4
 802275c:	bf02      	ittt	eq
 802275e:	68e5      	ldreq	r5, [r4, #12]
 8022760:	6833      	ldreq	r3, [r6, #0]
 8022762:	1aed      	subeq	r5, r5, r3
 8022764:	68a3      	ldr	r3, [r4, #8]
 8022766:	bf0c      	ite	eq
 8022768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802276c:	2500      	movne	r5, #0
 802276e:	4293      	cmp	r3, r2
 8022770:	bfc4      	itt	gt
 8022772:	1a9b      	subgt	r3, r3, r2
 8022774:	18ed      	addgt	r5, r5, r3
 8022776:	2600      	movs	r6, #0
 8022778:	341a      	adds	r4, #26
 802277a:	42b5      	cmp	r5, r6
 802277c:	d11a      	bne.n	80227b4 <_printf_common+0xc8>
 802277e:	2000      	movs	r0, #0
 8022780:	e008      	b.n	8022794 <_printf_common+0xa8>
 8022782:	2301      	movs	r3, #1
 8022784:	4652      	mov	r2, sl
 8022786:	4641      	mov	r1, r8
 8022788:	4638      	mov	r0, r7
 802278a:	47c8      	blx	r9
 802278c:	3001      	adds	r0, #1
 802278e:	d103      	bne.n	8022798 <_printf_common+0xac>
 8022790:	f04f 30ff 	mov.w	r0, #4294967295
 8022794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022798:	3501      	adds	r5, #1
 802279a:	e7c6      	b.n	802272a <_printf_common+0x3e>
 802279c:	18e1      	adds	r1, r4, r3
 802279e:	1c5a      	adds	r2, r3, #1
 80227a0:	2030      	movs	r0, #48	@ 0x30
 80227a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80227a6:	4422      	add	r2, r4
 80227a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80227ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80227b0:	3302      	adds	r3, #2
 80227b2:	e7c7      	b.n	8022744 <_printf_common+0x58>
 80227b4:	2301      	movs	r3, #1
 80227b6:	4622      	mov	r2, r4
 80227b8:	4641      	mov	r1, r8
 80227ba:	4638      	mov	r0, r7
 80227bc:	47c8      	blx	r9
 80227be:	3001      	adds	r0, #1
 80227c0:	d0e6      	beq.n	8022790 <_printf_common+0xa4>
 80227c2:	3601      	adds	r6, #1
 80227c4:	e7d9      	b.n	802277a <_printf_common+0x8e>
	...

080227c8 <_printf_i>:
 80227c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80227cc:	7e0f      	ldrb	r7, [r1, #24]
 80227ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80227d0:	2f78      	cmp	r7, #120	@ 0x78
 80227d2:	4691      	mov	r9, r2
 80227d4:	4680      	mov	r8, r0
 80227d6:	460c      	mov	r4, r1
 80227d8:	469a      	mov	sl, r3
 80227da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80227de:	d807      	bhi.n	80227f0 <_printf_i+0x28>
 80227e0:	2f62      	cmp	r7, #98	@ 0x62
 80227e2:	d80a      	bhi.n	80227fa <_printf_i+0x32>
 80227e4:	2f00      	cmp	r7, #0
 80227e6:	f000 80d1 	beq.w	802298c <_printf_i+0x1c4>
 80227ea:	2f58      	cmp	r7, #88	@ 0x58
 80227ec:	f000 80b8 	beq.w	8022960 <_printf_i+0x198>
 80227f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80227f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80227f8:	e03a      	b.n	8022870 <_printf_i+0xa8>
 80227fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80227fe:	2b15      	cmp	r3, #21
 8022800:	d8f6      	bhi.n	80227f0 <_printf_i+0x28>
 8022802:	a101      	add	r1, pc, #4	@ (adr r1, 8022808 <_printf_i+0x40>)
 8022804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022808:	08022861 	.word	0x08022861
 802280c:	08022875 	.word	0x08022875
 8022810:	080227f1 	.word	0x080227f1
 8022814:	080227f1 	.word	0x080227f1
 8022818:	080227f1 	.word	0x080227f1
 802281c:	080227f1 	.word	0x080227f1
 8022820:	08022875 	.word	0x08022875
 8022824:	080227f1 	.word	0x080227f1
 8022828:	080227f1 	.word	0x080227f1
 802282c:	080227f1 	.word	0x080227f1
 8022830:	080227f1 	.word	0x080227f1
 8022834:	08022973 	.word	0x08022973
 8022838:	0802289f 	.word	0x0802289f
 802283c:	0802292d 	.word	0x0802292d
 8022840:	080227f1 	.word	0x080227f1
 8022844:	080227f1 	.word	0x080227f1
 8022848:	08022995 	.word	0x08022995
 802284c:	080227f1 	.word	0x080227f1
 8022850:	0802289f 	.word	0x0802289f
 8022854:	080227f1 	.word	0x080227f1
 8022858:	080227f1 	.word	0x080227f1
 802285c:	08022935 	.word	0x08022935
 8022860:	6833      	ldr	r3, [r6, #0]
 8022862:	1d1a      	adds	r2, r3, #4
 8022864:	681b      	ldr	r3, [r3, #0]
 8022866:	6032      	str	r2, [r6, #0]
 8022868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802286c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022870:	2301      	movs	r3, #1
 8022872:	e09c      	b.n	80229ae <_printf_i+0x1e6>
 8022874:	6833      	ldr	r3, [r6, #0]
 8022876:	6820      	ldr	r0, [r4, #0]
 8022878:	1d19      	adds	r1, r3, #4
 802287a:	6031      	str	r1, [r6, #0]
 802287c:	0606      	lsls	r6, r0, #24
 802287e:	d501      	bpl.n	8022884 <_printf_i+0xbc>
 8022880:	681d      	ldr	r5, [r3, #0]
 8022882:	e003      	b.n	802288c <_printf_i+0xc4>
 8022884:	0645      	lsls	r5, r0, #25
 8022886:	d5fb      	bpl.n	8022880 <_printf_i+0xb8>
 8022888:	f9b3 5000 	ldrsh.w	r5, [r3]
 802288c:	2d00      	cmp	r5, #0
 802288e:	da03      	bge.n	8022898 <_printf_i+0xd0>
 8022890:	232d      	movs	r3, #45	@ 0x2d
 8022892:	426d      	negs	r5, r5
 8022894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022898:	4858      	ldr	r0, [pc, #352]	@ (80229fc <_printf_i+0x234>)
 802289a:	230a      	movs	r3, #10
 802289c:	e011      	b.n	80228c2 <_printf_i+0xfa>
 802289e:	6821      	ldr	r1, [r4, #0]
 80228a0:	6833      	ldr	r3, [r6, #0]
 80228a2:	0608      	lsls	r0, r1, #24
 80228a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80228a8:	d402      	bmi.n	80228b0 <_printf_i+0xe8>
 80228aa:	0649      	lsls	r1, r1, #25
 80228ac:	bf48      	it	mi
 80228ae:	b2ad      	uxthmi	r5, r5
 80228b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80228b2:	4852      	ldr	r0, [pc, #328]	@ (80229fc <_printf_i+0x234>)
 80228b4:	6033      	str	r3, [r6, #0]
 80228b6:	bf14      	ite	ne
 80228b8:	230a      	movne	r3, #10
 80228ba:	2308      	moveq	r3, #8
 80228bc:	2100      	movs	r1, #0
 80228be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80228c2:	6866      	ldr	r6, [r4, #4]
 80228c4:	60a6      	str	r6, [r4, #8]
 80228c6:	2e00      	cmp	r6, #0
 80228c8:	db05      	blt.n	80228d6 <_printf_i+0x10e>
 80228ca:	6821      	ldr	r1, [r4, #0]
 80228cc:	432e      	orrs	r6, r5
 80228ce:	f021 0104 	bic.w	r1, r1, #4
 80228d2:	6021      	str	r1, [r4, #0]
 80228d4:	d04b      	beq.n	802296e <_printf_i+0x1a6>
 80228d6:	4616      	mov	r6, r2
 80228d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80228dc:	fb03 5711 	mls	r7, r3, r1, r5
 80228e0:	5dc7      	ldrb	r7, [r0, r7]
 80228e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80228e6:	462f      	mov	r7, r5
 80228e8:	42bb      	cmp	r3, r7
 80228ea:	460d      	mov	r5, r1
 80228ec:	d9f4      	bls.n	80228d8 <_printf_i+0x110>
 80228ee:	2b08      	cmp	r3, #8
 80228f0:	d10b      	bne.n	802290a <_printf_i+0x142>
 80228f2:	6823      	ldr	r3, [r4, #0]
 80228f4:	07df      	lsls	r7, r3, #31
 80228f6:	d508      	bpl.n	802290a <_printf_i+0x142>
 80228f8:	6923      	ldr	r3, [r4, #16]
 80228fa:	6861      	ldr	r1, [r4, #4]
 80228fc:	4299      	cmp	r1, r3
 80228fe:	bfde      	ittt	le
 8022900:	2330      	movle	r3, #48	@ 0x30
 8022902:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022906:	f106 36ff 	addle.w	r6, r6, #4294967295
 802290a:	1b92      	subs	r2, r2, r6
 802290c:	6122      	str	r2, [r4, #16]
 802290e:	f8cd a000 	str.w	sl, [sp]
 8022912:	464b      	mov	r3, r9
 8022914:	aa03      	add	r2, sp, #12
 8022916:	4621      	mov	r1, r4
 8022918:	4640      	mov	r0, r8
 802291a:	f7ff fee7 	bl	80226ec <_printf_common>
 802291e:	3001      	adds	r0, #1
 8022920:	d14a      	bne.n	80229b8 <_printf_i+0x1f0>
 8022922:	f04f 30ff 	mov.w	r0, #4294967295
 8022926:	b004      	add	sp, #16
 8022928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802292c:	6823      	ldr	r3, [r4, #0]
 802292e:	f043 0320 	orr.w	r3, r3, #32
 8022932:	6023      	str	r3, [r4, #0]
 8022934:	4832      	ldr	r0, [pc, #200]	@ (8022a00 <_printf_i+0x238>)
 8022936:	2778      	movs	r7, #120	@ 0x78
 8022938:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802293c:	6823      	ldr	r3, [r4, #0]
 802293e:	6831      	ldr	r1, [r6, #0]
 8022940:	061f      	lsls	r7, r3, #24
 8022942:	f851 5b04 	ldr.w	r5, [r1], #4
 8022946:	d402      	bmi.n	802294e <_printf_i+0x186>
 8022948:	065f      	lsls	r7, r3, #25
 802294a:	bf48      	it	mi
 802294c:	b2ad      	uxthmi	r5, r5
 802294e:	6031      	str	r1, [r6, #0]
 8022950:	07d9      	lsls	r1, r3, #31
 8022952:	bf44      	itt	mi
 8022954:	f043 0320 	orrmi.w	r3, r3, #32
 8022958:	6023      	strmi	r3, [r4, #0]
 802295a:	b11d      	cbz	r5, 8022964 <_printf_i+0x19c>
 802295c:	2310      	movs	r3, #16
 802295e:	e7ad      	b.n	80228bc <_printf_i+0xf4>
 8022960:	4826      	ldr	r0, [pc, #152]	@ (80229fc <_printf_i+0x234>)
 8022962:	e7e9      	b.n	8022938 <_printf_i+0x170>
 8022964:	6823      	ldr	r3, [r4, #0]
 8022966:	f023 0320 	bic.w	r3, r3, #32
 802296a:	6023      	str	r3, [r4, #0]
 802296c:	e7f6      	b.n	802295c <_printf_i+0x194>
 802296e:	4616      	mov	r6, r2
 8022970:	e7bd      	b.n	80228ee <_printf_i+0x126>
 8022972:	6833      	ldr	r3, [r6, #0]
 8022974:	6825      	ldr	r5, [r4, #0]
 8022976:	6961      	ldr	r1, [r4, #20]
 8022978:	1d18      	adds	r0, r3, #4
 802297a:	6030      	str	r0, [r6, #0]
 802297c:	062e      	lsls	r6, r5, #24
 802297e:	681b      	ldr	r3, [r3, #0]
 8022980:	d501      	bpl.n	8022986 <_printf_i+0x1be>
 8022982:	6019      	str	r1, [r3, #0]
 8022984:	e002      	b.n	802298c <_printf_i+0x1c4>
 8022986:	0668      	lsls	r0, r5, #25
 8022988:	d5fb      	bpl.n	8022982 <_printf_i+0x1ba>
 802298a:	8019      	strh	r1, [r3, #0]
 802298c:	2300      	movs	r3, #0
 802298e:	6123      	str	r3, [r4, #16]
 8022990:	4616      	mov	r6, r2
 8022992:	e7bc      	b.n	802290e <_printf_i+0x146>
 8022994:	6833      	ldr	r3, [r6, #0]
 8022996:	1d1a      	adds	r2, r3, #4
 8022998:	6032      	str	r2, [r6, #0]
 802299a:	681e      	ldr	r6, [r3, #0]
 802299c:	6862      	ldr	r2, [r4, #4]
 802299e:	2100      	movs	r1, #0
 80229a0:	4630      	mov	r0, r6
 80229a2:	f7dd fcb5 	bl	8000310 <memchr>
 80229a6:	b108      	cbz	r0, 80229ac <_printf_i+0x1e4>
 80229a8:	1b80      	subs	r0, r0, r6
 80229aa:	6060      	str	r0, [r4, #4]
 80229ac:	6863      	ldr	r3, [r4, #4]
 80229ae:	6123      	str	r3, [r4, #16]
 80229b0:	2300      	movs	r3, #0
 80229b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80229b6:	e7aa      	b.n	802290e <_printf_i+0x146>
 80229b8:	6923      	ldr	r3, [r4, #16]
 80229ba:	4632      	mov	r2, r6
 80229bc:	4649      	mov	r1, r9
 80229be:	4640      	mov	r0, r8
 80229c0:	47d0      	blx	sl
 80229c2:	3001      	adds	r0, #1
 80229c4:	d0ad      	beq.n	8022922 <_printf_i+0x15a>
 80229c6:	6823      	ldr	r3, [r4, #0]
 80229c8:	079b      	lsls	r3, r3, #30
 80229ca:	d413      	bmi.n	80229f4 <_printf_i+0x22c>
 80229cc:	68e0      	ldr	r0, [r4, #12]
 80229ce:	9b03      	ldr	r3, [sp, #12]
 80229d0:	4298      	cmp	r0, r3
 80229d2:	bfb8      	it	lt
 80229d4:	4618      	movlt	r0, r3
 80229d6:	e7a6      	b.n	8022926 <_printf_i+0x15e>
 80229d8:	2301      	movs	r3, #1
 80229da:	4632      	mov	r2, r6
 80229dc:	4649      	mov	r1, r9
 80229de:	4640      	mov	r0, r8
 80229e0:	47d0      	blx	sl
 80229e2:	3001      	adds	r0, #1
 80229e4:	d09d      	beq.n	8022922 <_printf_i+0x15a>
 80229e6:	3501      	adds	r5, #1
 80229e8:	68e3      	ldr	r3, [r4, #12]
 80229ea:	9903      	ldr	r1, [sp, #12]
 80229ec:	1a5b      	subs	r3, r3, r1
 80229ee:	42ab      	cmp	r3, r5
 80229f0:	dcf2      	bgt.n	80229d8 <_printf_i+0x210>
 80229f2:	e7eb      	b.n	80229cc <_printf_i+0x204>
 80229f4:	2500      	movs	r5, #0
 80229f6:	f104 0619 	add.w	r6, r4, #25
 80229fa:	e7f5      	b.n	80229e8 <_printf_i+0x220>
 80229fc:	08026570 	.word	0x08026570
 8022a00:	08026581 	.word	0x08026581

08022a04 <__sflush_r>:
 8022a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a0c:	0716      	lsls	r6, r2, #28
 8022a0e:	4605      	mov	r5, r0
 8022a10:	460c      	mov	r4, r1
 8022a12:	d454      	bmi.n	8022abe <__sflush_r+0xba>
 8022a14:	684b      	ldr	r3, [r1, #4]
 8022a16:	2b00      	cmp	r3, #0
 8022a18:	dc02      	bgt.n	8022a20 <__sflush_r+0x1c>
 8022a1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022a1c:	2b00      	cmp	r3, #0
 8022a1e:	dd48      	ble.n	8022ab2 <__sflush_r+0xae>
 8022a20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022a22:	2e00      	cmp	r6, #0
 8022a24:	d045      	beq.n	8022ab2 <__sflush_r+0xae>
 8022a26:	2300      	movs	r3, #0
 8022a28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022a2c:	682f      	ldr	r7, [r5, #0]
 8022a2e:	6a21      	ldr	r1, [r4, #32]
 8022a30:	602b      	str	r3, [r5, #0]
 8022a32:	d030      	beq.n	8022a96 <__sflush_r+0x92>
 8022a34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022a36:	89a3      	ldrh	r3, [r4, #12]
 8022a38:	0759      	lsls	r1, r3, #29
 8022a3a:	d505      	bpl.n	8022a48 <__sflush_r+0x44>
 8022a3c:	6863      	ldr	r3, [r4, #4]
 8022a3e:	1ad2      	subs	r2, r2, r3
 8022a40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022a42:	b10b      	cbz	r3, 8022a48 <__sflush_r+0x44>
 8022a44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022a46:	1ad2      	subs	r2, r2, r3
 8022a48:	2300      	movs	r3, #0
 8022a4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022a4c:	6a21      	ldr	r1, [r4, #32]
 8022a4e:	4628      	mov	r0, r5
 8022a50:	47b0      	blx	r6
 8022a52:	1c43      	adds	r3, r0, #1
 8022a54:	89a3      	ldrh	r3, [r4, #12]
 8022a56:	d106      	bne.n	8022a66 <__sflush_r+0x62>
 8022a58:	6829      	ldr	r1, [r5, #0]
 8022a5a:	291d      	cmp	r1, #29
 8022a5c:	d82b      	bhi.n	8022ab6 <__sflush_r+0xb2>
 8022a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8022b08 <__sflush_r+0x104>)
 8022a60:	40ca      	lsrs	r2, r1
 8022a62:	07d6      	lsls	r6, r2, #31
 8022a64:	d527      	bpl.n	8022ab6 <__sflush_r+0xb2>
 8022a66:	2200      	movs	r2, #0
 8022a68:	6062      	str	r2, [r4, #4]
 8022a6a:	04d9      	lsls	r1, r3, #19
 8022a6c:	6922      	ldr	r2, [r4, #16]
 8022a6e:	6022      	str	r2, [r4, #0]
 8022a70:	d504      	bpl.n	8022a7c <__sflush_r+0x78>
 8022a72:	1c42      	adds	r2, r0, #1
 8022a74:	d101      	bne.n	8022a7a <__sflush_r+0x76>
 8022a76:	682b      	ldr	r3, [r5, #0]
 8022a78:	b903      	cbnz	r3, 8022a7c <__sflush_r+0x78>
 8022a7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8022a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022a7e:	602f      	str	r7, [r5, #0]
 8022a80:	b1b9      	cbz	r1, 8022ab2 <__sflush_r+0xae>
 8022a82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022a86:	4299      	cmp	r1, r3
 8022a88:	d002      	beq.n	8022a90 <__sflush_r+0x8c>
 8022a8a:	4628      	mov	r0, r5
 8022a8c:	f7ff fbd6 	bl	802223c <_free_r>
 8022a90:	2300      	movs	r3, #0
 8022a92:	6363      	str	r3, [r4, #52]	@ 0x34
 8022a94:	e00d      	b.n	8022ab2 <__sflush_r+0xae>
 8022a96:	2301      	movs	r3, #1
 8022a98:	4628      	mov	r0, r5
 8022a9a:	47b0      	blx	r6
 8022a9c:	4602      	mov	r2, r0
 8022a9e:	1c50      	adds	r0, r2, #1
 8022aa0:	d1c9      	bne.n	8022a36 <__sflush_r+0x32>
 8022aa2:	682b      	ldr	r3, [r5, #0]
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	d0c6      	beq.n	8022a36 <__sflush_r+0x32>
 8022aa8:	2b1d      	cmp	r3, #29
 8022aaa:	d001      	beq.n	8022ab0 <__sflush_r+0xac>
 8022aac:	2b16      	cmp	r3, #22
 8022aae:	d11e      	bne.n	8022aee <__sflush_r+0xea>
 8022ab0:	602f      	str	r7, [r5, #0]
 8022ab2:	2000      	movs	r0, #0
 8022ab4:	e022      	b.n	8022afc <__sflush_r+0xf8>
 8022ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022aba:	b21b      	sxth	r3, r3
 8022abc:	e01b      	b.n	8022af6 <__sflush_r+0xf2>
 8022abe:	690f      	ldr	r7, [r1, #16]
 8022ac0:	2f00      	cmp	r7, #0
 8022ac2:	d0f6      	beq.n	8022ab2 <__sflush_r+0xae>
 8022ac4:	0793      	lsls	r3, r2, #30
 8022ac6:	680e      	ldr	r6, [r1, #0]
 8022ac8:	bf08      	it	eq
 8022aca:	694b      	ldreq	r3, [r1, #20]
 8022acc:	600f      	str	r7, [r1, #0]
 8022ace:	bf18      	it	ne
 8022ad0:	2300      	movne	r3, #0
 8022ad2:	eba6 0807 	sub.w	r8, r6, r7
 8022ad6:	608b      	str	r3, [r1, #8]
 8022ad8:	f1b8 0f00 	cmp.w	r8, #0
 8022adc:	dde9      	ble.n	8022ab2 <__sflush_r+0xae>
 8022ade:	6a21      	ldr	r1, [r4, #32]
 8022ae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022ae2:	4643      	mov	r3, r8
 8022ae4:	463a      	mov	r2, r7
 8022ae6:	4628      	mov	r0, r5
 8022ae8:	47b0      	blx	r6
 8022aea:	2800      	cmp	r0, #0
 8022aec:	dc08      	bgt.n	8022b00 <__sflush_r+0xfc>
 8022aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022af6:	81a3      	strh	r3, [r4, #12]
 8022af8:	f04f 30ff 	mov.w	r0, #4294967295
 8022afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b00:	4407      	add	r7, r0
 8022b02:	eba8 0800 	sub.w	r8, r8, r0
 8022b06:	e7e7      	b.n	8022ad8 <__sflush_r+0xd4>
 8022b08:	20400001 	.word	0x20400001

08022b0c <_fflush_r>:
 8022b0c:	b538      	push	{r3, r4, r5, lr}
 8022b0e:	690b      	ldr	r3, [r1, #16]
 8022b10:	4605      	mov	r5, r0
 8022b12:	460c      	mov	r4, r1
 8022b14:	b913      	cbnz	r3, 8022b1c <_fflush_r+0x10>
 8022b16:	2500      	movs	r5, #0
 8022b18:	4628      	mov	r0, r5
 8022b1a:	bd38      	pop	{r3, r4, r5, pc}
 8022b1c:	b118      	cbz	r0, 8022b26 <_fflush_r+0x1a>
 8022b1e:	6a03      	ldr	r3, [r0, #32]
 8022b20:	b90b      	cbnz	r3, 8022b26 <_fflush_r+0x1a>
 8022b22:	f7ff f9b9 	bl	8021e98 <__sinit>
 8022b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022b2a:	2b00      	cmp	r3, #0
 8022b2c:	d0f3      	beq.n	8022b16 <_fflush_r+0xa>
 8022b2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022b30:	07d0      	lsls	r0, r2, #31
 8022b32:	d404      	bmi.n	8022b3e <_fflush_r+0x32>
 8022b34:	0599      	lsls	r1, r3, #22
 8022b36:	d402      	bmi.n	8022b3e <_fflush_r+0x32>
 8022b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022b3a:	f7ff fb50 	bl	80221de <__retarget_lock_acquire_recursive>
 8022b3e:	4628      	mov	r0, r5
 8022b40:	4621      	mov	r1, r4
 8022b42:	f7ff ff5f 	bl	8022a04 <__sflush_r>
 8022b46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022b48:	07da      	lsls	r2, r3, #31
 8022b4a:	4605      	mov	r5, r0
 8022b4c:	d4e4      	bmi.n	8022b18 <_fflush_r+0xc>
 8022b4e:	89a3      	ldrh	r3, [r4, #12]
 8022b50:	059b      	lsls	r3, r3, #22
 8022b52:	d4e1      	bmi.n	8022b18 <_fflush_r+0xc>
 8022b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022b56:	f7ff fb43 	bl	80221e0 <__retarget_lock_release_recursive>
 8022b5a:	e7dd      	b.n	8022b18 <_fflush_r+0xc>

08022b5c <fiprintf>:
 8022b5c:	b40e      	push	{r1, r2, r3}
 8022b5e:	b503      	push	{r0, r1, lr}
 8022b60:	4601      	mov	r1, r0
 8022b62:	ab03      	add	r3, sp, #12
 8022b64:	4805      	ldr	r0, [pc, #20]	@ (8022b7c <fiprintf+0x20>)
 8022b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8022b6a:	6800      	ldr	r0, [r0, #0]
 8022b6c:	9301      	str	r3, [sp, #4]
 8022b6e:	f000 f875 	bl	8022c5c <_vfiprintf_r>
 8022b72:	b002      	add	sp, #8
 8022b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8022b78:	b003      	add	sp, #12
 8022b7a:	4770      	bx	lr
 8022b7c:	240149f8 	.word	0x240149f8

08022b80 <_sbrk_r>:
 8022b80:	b538      	push	{r3, r4, r5, lr}
 8022b82:	4d06      	ldr	r5, [pc, #24]	@ (8022b9c <_sbrk_r+0x1c>)
 8022b84:	2300      	movs	r3, #0
 8022b86:	4604      	mov	r4, r0
 8022b88:	4608      	mov	r0, r1
 8022b8a:	602b      	str	r3, [r5, #0]
 8022b8c:	f7f6 fb88 	bl	80192a0 <_sbrk>
 8022b90:	1c43      	adds	r3, r0, #1
 8022b92:	d102      	bne.n	8022b9a <_sbrk_r+0x1a>
 8022b94:	682b      	ldr	r3, [r5, #0]
 8022b96:	b103      	cbz	r3, 8022b9a <_sbrk_r+0x1a>
 8022b98:	6023      	str	r3, [r4, #0]
 8022b9a:	bd38      	pop	{r3, r4, r5, pc}
 8022b9c:	2405a9f0 	.word	0x2405a9f0

08022ba0 <abort>:
 8022ba0:	b508      	push	{r3, lr}
 8022ba2:	2006      	movs	r0, #6
 8022ba4:	f000 fa2e 	bl	8023004 <raise>
 8022ba8:	2001      	movs	r0, #1
 8022baa:	f7f6 fb00 	bl	80191ae <_exit>

08022bae <_realloc_r>:
 8022bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022bb2:	4607      	mov	r7, r0
 8022bb4:	4614      	mov	r4, r2
 8022bb6:	460d      	mov	r5, r1
 8022bb8:	b921      	cbnz	r1, 8022bc4 <_realloc_r+0x16>
 8022bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022bbe:	4611      	mov	r1, r2
 8022bc0:	f7ff bbb0 	b.w	8022324 <_malloc_r>
 8022bc4:	b92a      	cbnz	r2, 8022bd2 <_realloc_r+0x24>
 8022bc6:	f7ff fb39 	bl	802223c <_free_r>
 8022bca:	4625      	mov	r5, r4
 8022bcc:	4628      	mov	r0, r5
 8022bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022bd2:	f000 fa33 	bl	802303c <_malloc_usable_size_r>
 8022bd6:	4284      	cmp	r4, r0
 8022bd8:	4606      	mov	r6, r0
 8022bda:	d802      	bhi.n	8022be2 <_realloc_r+0x34>
 8022bdc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8022be0:	d8f4      	bhi.n	8022bcc <_realloc_r+0x1e>
 8022be2:	4621      	mov	r1, r4
 8022be4:	4638      	mov	r0, r7
 8022be6:	f7ff fb9d 	bl	8022324 <_malloc_r>
 8022bea:	4680      	mov	r8, r0
 8022bec:	b908      	cbnz	r0, 8022bf2 <_realloc_r+0x44>
 8022bee:	4645      	mov	r5, r8
 8022bf0:	e7ec      	b.n	8022bcc <_realloc_r+0x1e>
 8022bf2:	42b4      	cmp	r4, r6
 8022bf4:	4622      	mov	r2, r4
 8022bf6:	4629      	mov	r1, r5
 8022bf8:	bf28      	it	cs
 8022bfa:	4632      	movcs	r2, r6
 8022bfc:	f7ff faf1 	bl	80221e2 <memcpy>
 8022c00:	4629      	mov	r1, r5
 8022c02:	4638      	mov	r0, r7
 8022c04:	f7ff fb1a 	bl	802223c <_free_r>
 8022c08:	e7f1      	b.n	8022bee <_realloc_r+0x40>

08022c0a <__sfputc_r>:
 8022c0a:	6893      	ldr	r3, [r2, #8]
 8022c0c:	3b01      	subs	r3, #1
 8022c0e:	2b00      	cmp	r3, #0
 8022c10:	b410      	push	{r4}
 8022c12:	6093      	str	r3, [r2, #8]
 8022c14:	da08      	bge.n	8022c28 <__sfputc_r+0x1e>
 8022c16:	6994      	ldr	r4, [r2, #24]
 8022c18:	42a3      	cmp	r3, r4
 8022c1a:	db01      	blt.n	8022c20 <__sfputc_r+0x16>
 8022c1c:	290a      	cmp	r1, #10
 8022c1e:	d103      	bne.n	8022c28 <__sfputc_r+0x1e>
 8022c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c24:	f000 b932 	b.w	8022e8c <__swbuf_r>
 8022c28:	6813      	ldr	r3, [r2, #0]
 8022c2a:	1c58      	adds	r0, r3, #1
 8022c2c:	6010      	str	r0, [r2, #0]
 8022c2e:	7019      	strb	r1, [r3, #0]
 8022c30:	4608      	mov	r0, r1
 8022c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c36:	4770      	bx	lr

08022c38 <__sfputs_r>:
 8022c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c3a:	4606      	mov	r6, r0
 8022c3c:	460f      	mov	r7, r1
 8022c3e:	4614      	mov	r4, r2
 8022c40:	18d5      	adds	r5, r2, r3
 8022c42:	42ac      	cmp	r4, r5
 8022c44:	d101      	bne.n	8022c4a <__sfputs_r+0x12>
 8022c46:	2000      	movs	r0, #0
 8022c48:	e007      	b.n	8022c5a <__sfputs_r+0x22>
 8022c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c4e:	463a      	mov	r2, r7
 8022c50:	4630      	mov	r0, r6
 8022c52:	f7ff ffda 	bl	8022c0a <__sfputc_r>
 8022c56:	1c43      	adds	r3, r0, #1
 8022c58:	d1f3      	bne.n	8022c42 <__sfputs_r+0xa>
 8022c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022c5c <_vfiprintf_r>:
 8022c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c60:	460d      	mov	r5, r1
 8022c62:	b09d      	sub	sp, #116	@ 0x74
 8022c64:	4614      	mov	r4, r2
 8022c66:	4698      	mov	r8, r3
 8022c68:	4606      	mov	r6, r0
 8022c6a:	b118      	cbz	r0, 8022c74 <_vfiprintf_r+0x18>
 8022c6c:	6a03      	ldr	r3, [r0, #32]
 8022c6e:	b90b      	cbnz	r3, 8022c74 <_vfiprintf_r+0x18>
 8022c70:	f7ff f912 	bl	8021e98 <__sinit>
 8022c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022c76:	07d9      	lsls	r1, r3, #31
 8022c78:	d405      	bmi.n	8022c86 <_vfiprintf_r+0x2a>
 8022c7a:	89ab      	ldrh	r3, [r5, #12]
 8022c7c:	059a      	lsls	r2, r3, #22
 8022c7e:	d402      	bmi.n	8022c86 <_vfiprintf_r+0x2a>
 8022c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022c82:	f7ff faac 	bl	80221de <__retarget_lock_acquire_recursive>
 8022c86:	89ab      	ldrh	r3, [r5, #12]
 8022c88:	071b      	lsls	r3, r3, #28
 8022c8a:	d501      	bpl.n	8022c90 <_vfiprintf_r+0x34>
 8022c8c:	692b      	ldr	r3, [r5, #16]
 8022c8e:	b99b      	cbnz	r3, 8022cb8 <_vfiprintf_r+0x5c>
 8022c90:	4629      	mov	r1, r5
 8022c92:	4630      	mov	r0, r6
 8022c94:	f000 f938 	bl	8022f08 <__swsetup_r>
 8022c98:	b170      	cbz	r0, 8022cb8 <_vfiprintf_r+0x5c>
 8022c9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022c9c:	07dc      	lsls	r4, r3, #31
 8022c9e:	d504      	bpl.n	8022caa <_vfiprintf_r+0x4e>
 8022ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8022ca4:	b01d      	add	sp, #116	@ 0x74
 8022ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022caa:	89ab      	ldrh	r3, [r5, #12]
 8022cac:	0598      	lsls	r0, r3, #22
 8022cae:	d4f7      	bmi.n	8022ca0 <_vfiprintf_r+0x44>
 8022cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022cb2:	f7ff fa95 	bl	80221e0 <__retarget_lock_release_recursive>
 8022cb6:	e7f3      	b.n	8022ca0 <_vfiprintf_r+0x44>
 8022cb8:	2300      	movs	r3, #0
 8022cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8022cbc:	2320      	movs	r3, #32
 8022cbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8022cc6:	2330      	movs	r3, #48	@ 0x30
 8022cc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022e78 <_vfiprintf_r+0x21c>
 8022ccc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022cd0:	f04f 0901 	mov.w	r9, #1
 8022cd4:	4623      	mov	r3, r4
 8022cd6:	469a      	mov	sl, r3
 8022cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022cdc:	b10a      	cbz	r2, 8022ce2 <_vfiprintf_r+0x86>
 8022cde:	2a25      	cmp	r2, #37	@ 0x25
 8022ce0:	d1f9      	bne.n	8022cd6 <_vfiprintf_r+0x7a>
 8022ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8022ce6:	d00b      	beq.n	8022d00 <_vfiprintf_r+0xa4>
 8022ce8:	465b      	mov	r3, fp
 8022cea:	4622      	mov	r2, r4
 8022cec:	4629      	mov	r1, r5
 8022cee:	4630      	mov	r0, r6
 8022cf0:	f7ff ffa2 	bl	8022c38 <__sfputs_r>
 8022cf4:	3001      	adds	r0, #1
 8022cf6:	f000 80a7 	beq.w	8022e48 <_vfiprintf_r+0x1ec>
 8022cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022cfc:	445a      	add	r2, fp
 8022cfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8022d00:	f89a 3000 	ldrb.w	r3, [sl]
 8022d04:	2b00      	cmp	r3, #0
 8022d06:	f000 809f 	beq.w	8022e48 <_vfiprintf_r+0x1ec>
 8022d0a:	2300      	movs	r3, #0
 8022d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8022d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022d14:	f10a 0a01 	add.w	sl, sl, #1
 8022d18:	9304      	str	r3, [sp, #16]
 8022d1a:	9307      	str	r3, [sp, #28]
 8022d1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022d20:	931a      	str	r3, [sp, #104]	@ 0x68
 8022d22:	4654      	mov	r4, sl
 8022d24:	2205      	movs	r2, #5
 8022d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d2a:	4853      	ldr	r0, [pc, #332]	@ (8022e78 <_vfiprintf_r+0x21c>)
 8022d2c:	f7dd faf0 	bl	8000310 <memchr>
 8022d30:	9a04      	ldr	r2, [sp, #16]
 8022d32:	b9d8      	cbnz	r0, 8022d6c <_vfiprintf_r+0x110>
 8022d34:	06d1      	lsls	r1, r2, #27
 8022d36:	bf44      	itt	mi
 8022d38:	2320      	movmi	r3, #32
 8022d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022d3e:	0713      	lsls	r3, r2, #28
 8022d40:	bf44      	itt	mi
 8022d42:	232b      	movmi	r3, #43	@ 0x2b
 8022d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022d48:	f89a 3000 	ldrb.w	r3, [sl]
 8022d4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8022d4e:	d015      	beq.n	8022d7c <_vfiprintf_r+0x120>
 8022d50:	9a07      	ldr	r2, [sp, #28]
 8022d52:	4654      	mov	r4, sl
 8022d54:	2000      	movs	r0, #0
 8022d56:	f04f 0c0a 	mov.w	ip, #10
 8022d5a:	4621      	mov	r1, r4
 8022d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022d60:	3b30      	subs	r3, #48	@ 0x30
 8022d62:	2b09      	cmp	r3, #9
 8022d64:	d94b      	bls.n	8022dfe <_vfiprintf_r+0x1a2>
 8022d66:	b1b0      	cbz	r0, 8022d96 <_vfiprintf_r+0x13a>
 8022d68:	9207      	str	r2, [sp, #28]
 8022d6a:	e014      	b.n	8022d96 <_vfiprintf_r+0x13a>
 8022d6c:	eba0 0308 	sub.w	r3, r0, r8
 8022d70:	fa09 f303 	lsl.w	r3, r9, r3
 8022d74:	4313      	orrs	r3, r2
 8022d76:	9304      	str	r3, [sp, #16]
 8022d78:	46a2      	mov	sl, r4
 8022d7a:	e7d2      	b.n	8022d22 <_vfiprintf_r+0xc6>
 8022d7c:	9b03      	ldr	r3, [sp, #12]
 8022d7e:	1d19      	adds	r1, r3, #4
 8022d80:	681b      	ldr	r3, [r3, #0]
 8022d82:	9103      	str	r1, [sp, #12]
 8022d84:	2b00      	cmp	r3, #0
 8022d86:	bfbb      	ittet	lt
 8022d88:	425b      	neglt	r3, r3
 8022d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8022d8e:	9307      	strge	r3, [sp, #28]
 8022d90:	9307      	strlt	r3, [sp, #28]
 8022d92:	bfb8      	it	lt
 8022d94:	9204      	strlt	r2, [sp, #16]
 8022d96:	7823      	ldrb	r3, [r4, #0]
 8022d98:	2b2e      	cmp	r3, #46	@ 0x2e
 8022d9a:	d10a      	bne.n	8022db2 <_vfiprintf_r+0x156>
 8022d9c:	7863      	ldrb	r3, [r4, #1]
 8022d9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8022da0:	d132      	bne.n	8022e08 <_vfiprintf_r+0x1ac>
 8022da2:	9b03      	ldr	r3, [sp, #12]
 8022da4:	1d1a      	adds	r2, r3, #4
 8022da6:	681b      	ldr	r3, [r3, #0]
 8022da8:	9203      	str	r2, [sp, #12]
 8022daa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022dae:	3402      	adds	r4, #2
 8022db0:	9305      	str	r3, [sp, #20]
 8022db2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8022e88 <_vfiprintf_r+0x22c>
 8022db6:	7821      	ldrb	r1, [r4, #0]
 8022db8:	2203      	movs	r2, #3
 8022dba:	4650      	mov	r0, sl
 8022dbc:	f7dd faa8 	bl	8000310 <memchr>
 8022dc0:	b138      	cbz	r0, 8022dd2 <_vfiprintf_r+0x176>
 8022dc2:	9b04      	ldr	r3, [sp, #16]
 8022dc4:	eba0 000a 	sub.w	r0, r0, sl
 8022dc8:	2240      	movs	r2, #64	@ 0x40
 8022dca:	4082      	lsls	r2, r0
 8022dcc:	4313      	orrs	r3, r2
 8022dce:	3401      	adds	r4, #1
 8022dd0:	9304      	str	r3, [sp, #16]
 8022dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022dd6:	4829      	ldr	r0, [pc, #164]	@ (8022e7c <_vfiprintf_r+0x220>)
 8022dd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022ddc:	2206      	movs	r2, #6
 8022dde:	f7dd fa97 	bl	8000310 <memchr>
 8022de2:	2800      	cmp	r0, #0
 8022de4:	d03f      	beq.n	8022e66 <_vfiprintf_r+0x20a>
 8022de6:	4b26      	ldr	r3, [pc, #152]	@ (8022e80 <_vfiprintf_r+0x224>)
 8022de8:	bb1b      	cbnz	r3, 8022e32 <_vfiprintf_r+0x1d6>
 8022dea:	9b03      	ldr	r3, [sp, #12]
 8022dec:	3307      	adds	r3, #7
 8022dee:	f023 0307 	bic.w	r3, r3, #7
 8022df2:	3308      	adds	r3, #8
 8022df4:	9303      	str	r3, [sp, #12]
 8022df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022df8:	443b      	add	r3, r7
 8022dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8022dfc:	e76a      	b.n	8022cd4 <_vfiprintf_r+0x78>
 8022dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8022e02:	460c      	mov	r4, r1
 8022e04:	2001      	movs	r0, #1
 8022e06:	e7a8      	b.n	8022d5a <_vfiprintf_r+0xfe>
 8022e08:	2300      	movs	r3, #0
 8022e0a:	3401      	adds	r4, #1
 8022e0c:	9305      	str	r3, [sp, #20]
 8022e0e:	4619      	mov	r1, r3
 8022e10:	f04f 0c0a 	mov.w	ip, #10
 8022e14:	4620      	mov	r0, r4
 8022e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022e1a:	3a30      	subs	r2, #48	@ 0x30
 8022e1c:	2a09      	cmp	r2, #9
 8022e1e:	d903      	bls.n	8022e28 <_vfiprintf_r+0x1cc>
 8022e20:	2b00      	cmp	r3, #0
 8022e22:	d0c6      	beq.n	8022db2 <_vfiprintf_r+0x156>
 8022e24:	9105      	str	r1, [sp, #20]
 8022e26:	e7c4      	b.n	8022db2 <_vfiprintf_r+0x156>
 8022e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8022e2c:	4604      	mov	r4, r0
 8022e2e:	2301      	movs	r3, #1
 8022e30:	e7f0      	b.n	8022e14 <_vfiprintf_r+0x1b8>
 8022e32:	ab03      	add	r3, sp, #12
 8022e34:	9300      	str	r3, [sp, #0]
 8022e36:	462a      	mov	r2, r5
 8022e38:	4b12      	ldr	r3, [pc, #72]	@ (8022e84 <_vfiprintf_r+0x228>)
 8022e3a:	a904      	add	r1, sp, #16
 8022e3c:	4630      	mov	r0, r6
 8022e3e:	f3af 8000 	nop.w
 8022e42:	4607      	mov	r7, r0
 8022e44:	1c78      	adds	r0, r7, #1
 8022e46:	d1d6      	bne.n	8022df6 <_vfiprintf_r+0x19a>
 8022e48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022e4a:	07d9      	lsls	r1, r3, #31
 8022e4c:	d405      	bmi.n	8022e5a <_vfiprintf_r+0x1fe>
 8022e4e:	89ab      	ldrh	r3, [r5, #12]
 8022e50:	059a      	lsls	r2, r3, #22
 8022e52:	d402      	bmi.n	8022e5a <_vfiprintf_r+0x1fe>
 8022e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022e56:	f7ff f9c3 	bl	80221e0 <__retarget_lock_release_recursive>
 8022e5a:	89ab      	ldrh	r3, [r5, #12]
 8022e5c:	065b      	lsls	r3, r3, #25
 8022e5e:	f53f af1f 	bmi.w	8022ca0 <_vfiprintf_r+0x44>
 8022e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022e64:	e71e      	b.n	8022ca4 <_vfiprintf_r+0x48>
 8022e66:	ab03      	add	r3, sp, #12
 8022e68:	9300      	str	r3, [sp, #0]
 8022e6a:	462a      	mov	r2, r5
 8022e6c:	4b05      	ldr	r3, [pc, #20]	@ (8022e84 <_vfiprintf_r+0x228>)
 8022e6e:	a904      	add	r1, sp, #16
 8022e70:	4630      	mov	r0, r6
 8022e72:	f7ff fca9 	bl	80227c8 <_printf_i>
 8022e76:	e7e4      	b.n	8022e42 <_vfiprintf_r+0x1e6>
 8022e78:	0802655f 	.word	0x0802655f
 8022e7c:	08026569 	.word	0x08026569
 8022e80:	00000000 	.word	0x00000000
 8022e84:	08022c39 	.word	0x08022c39
 8022e88:	08026565 	.word	0x08026565

08022e8c <__swbuf_r>:
 8022e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e8e:	460e      	mov	r6, r1
 8022e90:	4614      	mov	r4, r2
 8022e92:	4605      	mov	r5, r0
 8022e94:	b118      	cbz	r0, 8022e9e <__swbuf_r+0x12>
 8022e96:	6a03      	ldr	r3, [r0, #32]
 8022e98:	b90b      	cbnz	r3, 8022e9e <__swbuf_r+0x12>
 8022e9a:	f7fe fffd 	bl	8021e98 <__sinit>
 8022e9e:	69a3      	ldr	r3, [r4, #24]
 8022ea0:	60a3      	str	r3, [r4, #8]
 8022ea2:	89a3      	ldrh	r3, [r4, #12]
 8022ea4:	071a      	lsls	r2, r3, #28
 8022ea6:	d501      	bpl.n	8022eac <__swbuf_r+0x20>
 8022ea8:	6923      	ldr	r3, [r4, #16]
 8022eaa:	b943      	cbnz	r3, 8022ebe <__swbuf_r+0x32>
 8022eac:	4621      	mov	r1, r4
 8022eae:	4628      	mov	r0, r5
 8022eb0:	f000 f82a 	bl	8022f08 <__swsetup_r>
 8022eb4:	b118      	cbz	r0, 8022ebe <__swbuf_r+0x32>
 8022eb6:	f04f 37ff 	mov.w	r7, #4294967295
 8022eba:	4638      	mov	r0, r7
 8022ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022ebe:	6823      	ldr	r3, [r4, #0]
 8022ec0:	6922      	ldr	r2, [r4, #16]
 8022ec2:	1a98      	subs	r0, r3, r2
 8022ec4:	6963      	ldr	r3, [r4, #20]
 8022ec6:	b2f6      	uxtb	r6, r6
 8022ec8:	4283      	cmp	r3, r0
 8022eca:	4637      	mov	r7, r6
 8022ecc:	dc05      	bgt.n	8022eda <__swbuf_r+0x4e>
 8022ece:	4621      	mov	r1, r4
 8022ed0:	4628      	mov	r0, r5
 8022ed2:	f7ff fe1b 	bl	8022b0c <_fflush_r>
 8022ed6:	2800      	cmp	r0, #0
 8022ed8:	d1ed      	bne.n	8022eb6 <__swbuf_r+0x2a>
 8022eda:	68a3      	ldr	r3, [r4, #8]
 8022edc:	3b01      	subs	r3, #1
 8022ede:	60a3      	str	r3, [r4, #8]
 8022ee0:	6823      	ldr	r3, [r4, #0]
 8022ee2:	1c5a      	adds	r2, r3, #1
 8022ee4:	6022      	str	r2, [r4, #0]
 8022ee6:	701e      	strb	r6, [r3, #0]
 8022ee8:	6962      	ldr	r2, [r4, #20]
 8022eea:	1c43      	adds	r3, r0, #1
 8022eec:	429a      	cmp	r2, r3
 8022eee:	d004      	beq.n	8022efa <__swbuf_r+0x6e>
 8022ef0:	89a3      	ldrh	r3, [r4, #12]
 8022ef2:	07db      	lsls	r3, r3, #31
 8022ef4:	d5e1      	bpl.n	8022eba <__swbuf_r+0x2e>
 8022ef6:	2e0a      	cmp	r6, #10
 8022ef8:	d1df      	bne.n	8022eba <__swbuf_r+0x2e>
 8022efa:	4621      	mov	r1, r4
 8022efc:	4628      	mov	r0, r5
 8022efe:	f7ff fe05 	bl	8022b0c <_fflush_r>
 8022f02:	2800      	cmp	r0, #0
 8022f04:	d0d9      	beq.n	8022eba <__swbuf_r+0x2e>
 8022f06:	e7d6      	b.n	8022eb6 <__swbuf_r+0x2a>

08022f08 <__swsetup_r>:
 8022f08:	b538      	push	{r3, r4, r5, lr}
 8022f0a:	4b29      	ldr	r3, [pc, #164]	@ (8022fb0 <__swsetup_r+0xa8>)
 8022f0c:	4605      	mov	r5, r0
 8022f0e:	6818      	ldr	r0, [r3, #0]
 8022f10:	460c      	mov	r4, r1
 8022f12:	b118      	cbz	r0, 8022f1c <__swsetup_r+0x14>
 8022f14:	6a03      	ldr	r3, [r0, #32]
 8022f16:	b90b      	cbnz	r3, 8022f1c <__swsetup_r+0x14>
 8022f18:	f7fe ffbe 	bl	8021e98 <__sinit>
 8022f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022f20:	0719      	lsls	r1, r3, #28
 8022f22:	d422      	bmi.n	8022f6a <__swsetup_r+0x62>
 8022f24:	06da      	lsls	r2, r3, #27
 8022f26:	d407      	bmi.n	8022f38 <__swsetup_r+0x30>
 8022f28:	2209      	movs	r2, #9
 8022f2a:	602a      	str	r2, [r5, #0]
 8022f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022f30:	81a3      	strh	r3, [r4, #12]
 8022f32:	f04f 30ff 	mov.w	r0, #4294967295
 8022f36:	e033      	b.n	8022fa0 <__swsetup_r+0x98>
 8022f38:	0758      	lsls	r0, r3, #29
 8022f3a:	d512      	bpl.n	8022f62 <__swsetup_r+0x5a>
 8022f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022f3e:	b141      	cbz	r1, 8022f52 <__swsetup_r+0x4a>
 8022f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022f44:	4299      	cmp	r1, r3
 8022f46:	d002      	beq.n	8022f4e <__swsetup_r+0x46>
 8022f48:	4628      	mov	r0, r5
 8022f4a:	f7ff f977 	bl	802223c <_free_r>
 8022f4e:	2300      	movs	r3, #0
 8022f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8022f52:	89a3      	ldrh	r3, [r4, #12]
 8022f54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022f58:	81a3      	strh	r3, [r4, #12]
 8022f5a:	2300      	movs	r3, #0
 8022f5c:	6063      	str	r3, [r4, #4]
 8022f5e:	6923      	ldr	r3, [r4, #16]
 8022f60:	6023      	str	r3, [r4, #0]
 8022f62:	89a3      	ldrh	r3, [r4, #12]
 8022f64:	f043 0308 	orr.w	r3, r3, #8
 8022f68:	81a3      	strh	r3, [r4, #12]
 8022f6a:	6923      	ldr	r3, [r4, #16]
 8022f6c:	b94b      	cbnz	r3, 8022f82 <__swsetup_r+0x7a>
 8022f6e:	89a3      	ldrh	r3, [r4, #12]
 8022f70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022f78:	d003      	beq.n	8022f82 <__swsetup_r+0x7a>
 8022f7a:	4621      	mov	r1, r4
 8022f7c:	4628      	mov	r0, r5
 8022f7e:	f000 f88b 	bl	8023098 <__smakebuf_r>
 8022f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022f86:	f013 0201 	ands.w	r2, r3, #1
 8022f8a:	d00a      	beq.n	8022fa2 <__swsetup_r+0x9a>
 8022f8c:	2200      	movs	r2, #0
 8022f8e:	60a2      	str	r2, [r4, #8]
 8022f90:	6962      	ldr	r2, [r4, #20]
 8022f92:	4252      	negs	r2, r2
 8022f94:	61a2      	str	r2, [r4, #24]
 8022f96:	6922      	ldr	r2, [r4, #16]
 8022f98:	b942      	cbnz	r2, 8022fac <__swsetup_r+0xa4>
 8022f9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022f9e:	d1c5      	bne.n	8022f2c <__swsetup_r+0x24>
 8022fa0:	bd38      	pop	{r3, r4, r5, pc}
 8022fa2:	0799      	lsls	r1, r3, #30
 8022fa4:	bf58      	it	pl
 8022fa6:	6962      	ldrpl	r2, [r4, #20]
 8022fa8:	60a2      	str	r2, [r4, #8]
 8022faa:	e7f4      	b.n	8022f96 <__swsetup_r+0x8e>
 8022fac:	2000      	movs	r0, #0
 8022fae:	e7f7      	b.n	8022fa0 <__swsetup_r+0x98>
 8022fb0:	240149f8 	.word	0x240149f8

08022fb4 <_raise_r>:
 8022fb4:	291f      	cmp	r1, #31
 8022fb6:	b538      	push	{r3, r4, r5, lr}
 8022fb8:	4605      	mov	r5, r0
 8022fba:	460c      	mov	r4, r1
 8022fbc:	d904      	bls.n	8022fc8 <_raise_r+0x14>
 8022fbe:	2316      	movs	r3, #22
 8022fc0:	6003      	str	r3, [r0, #0]
 8022fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8022fc6:	bd38      	pop	{r3, r4, r5, pc}
 8022fc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022fca:	b112      	cbz	r2, 8022fd2 <_raise_r+0x1e>
 8022fcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022fd0:	b94b      	cbnz	r3, 8022fe6 <_raise_r+0x32>
 8022fd2:	4628      	mov	r0, r5
 8022fd4:	f000 f830 	bl	8023038 <_getpid_r>
 8022fd8:	4622      	mov	r2, r4
 8022fda:	4601      	mov	r1, r0
 8022fdc:	4628      	mov	r0, r5
 8022fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022fe2:	f000 b817 	b.w	8023014 <_kill_r>
 8022fe6:	2b01      	cmp	r3, #1
 8022fe8:	d00a      	beq.n	8023000 <_raise_r+0x4c>
 8022fea:	1c59      	adds	r1, r3, #1
 8022fec:	d103      	bne.n	8022ff6 <_raise_r+0x42>
 8022fee:	2316      	movs	r3, #22
 8022ff0:	6003      	str	r3, [r0, #0]
 8022ff2:	2001      	movs	r0, #1
 8022ff4:	e7e7      	b.n	8022fc6 <_raise_r+0x12>
 8022ff6:	2100      	movs	r1, #0
 8022ff8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022ffc:	4620      	mov	r0, r4
 8022ffe:	4798      	blx	r3
 8023000:	2000      	movs	r0, #0
 8023002:	e7e0      	b.n	8022fc6 <_raise_r+0x12>

08023004 <raise>:
 8023004:	4b02      	ldr	r3, [pc, #8]	@ (8023010 <raise+0xc>)
 8023006:	4601      	mov	r1, r0
 8023008:	6818      	ldr	r0, [r3, #0]
 802300a:	f7ff bfd3 	b.w	8022fb4 <_raise_r>
 802300e:	bf00      	nop
 8023010:	240149f8 	.word	0x240149f8

08023014 <_kill_r>:
 8023014:	b538      	push	{r3, r4, r5, lr}
 8023016:	4d07      	ldr	r5, [pc, #28]	@ (8023034 <_kill_r+0x20>)
 8023018:	2300      	movs	r3, #0
 802301a:	4604      	mov	r4, r0
 802301c:	4608      	mov	r0, r1
 802301e:	4611      	mov	r1, r2
 8023020:	602b      	str	r3, [r5, #0]
 8023022:	f7f6 f8b4 	bl	801918e <_kill>
 8023026:	1c43      	adds	r3, r0, #1
 8023028:	d102      	bne.n	8023030 <_kill_r+0x1c>
 802302a:	682b      	ldr	r3, [r5, #0]
 802302c:	b103      	cbz	r3, 8023030 <_kill_r+0x1c>
 802302e:	6023      	str	r3, [r4, #0]
 8023030:	bd38      	pop	{r3, r4, r5, pc}
 8023032:	bf00      	nop
 8023034:	2405a9f0 	.word	0x2405a9f0

08023038 <_getpid_r>:
 8023038:	f7f6 b8a1 	b.w	801917e <_getpid>

0802303c <_malloc_usable_size_r>:
 802303c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023040:	1f18      	subs	r0, r3, #4
 8023042:	2b00      	cmp	r3, #0
 8023044:	bfbc      	itt	lt
 8023046:	580b      	ldrlt	r3, [r1, r0]
 8023048:	18c0      	addlt	r0, r0, r3
 802304a:	4770      	bx	lr

0802304c <__swhatbuf_r>:
 802304c:	b570      	push	{r4, r5, r6, lr}
 802304e:	460c      	mov	r4, r1
 8023050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023054:	2900      	cmp	r1, #0
 8023056:	b096      	sub	sp, #88	@ 0x58
 8023058:	4615      	mov	r5, r2
 802305a:	461e      	mov	r6, r3
 802305c:	da0d      	bge.n	802307a <__swhatbuf_r+0x2e>
 802305e:	89a3      	ldrh	r3, [r4, #12]
 8023060:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023064:	f04f 0100 	mov.w	r1, #0
 8023068:	bf14      	ite	ne
 802306a:	2340      	movne	r3, #64	@ 0x40
 802306c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023070:	2000      	movs	r0, #0
 8023072:	6031      	str	r1, [r6, #0]
 8023074:	602b      	str	r3, [r5, #0]
 8023076:	b016      	add	sp, #88	@ 0x58
 8023078:	bd70      	pop	{r4, r5, r6, pc}
 802307a:	466a      	mov	r2, sp
 802307c:	f000 f848 	bl	8023110 <_fstat_r>
 8023080:	2800      	cmp	r0, #0
 8023082:	dbec      	blt.n	802305e <__swhatbuf_r+0x12>
 8023084:	9901      	ldr	r1, [sp, #4]
 8023086:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802308a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802308e:	4259      	negs	r1, r3
 8023090:	4159      	adcs	r1, r3
 8023092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023096:	e7eb      	b.n	8023070 <__swhatbuf_r+0x24>

08023098 <__smakebuf_r>:
 8023098:	898b      	ldrh	r3, [r1, #12]
 802309a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802309c:	079d      	lsls	r5, r3, #30
 802309e:	4606      	mov	r6, r0
 80230a0:	460c      	mov	r4, r1
 80230a2:	d507      	bpl.n	80230b4 <__smakebuf_r+0x1c>
 80230a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80230a8:	6023      	str	r3, [r4, #0]
 80230aa:	6123      	str	r3, [r4, #16]
 80230ac:	2301      	movs	r3, #1
 80230ae:	6163      	str	r3, [r4, #20]
 80230b0:	b003      	add	sp, #12
 80230b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80230b4:	ab01      	add	r3, sp, #4
 80230b6:	466a      	mov	r2, sp
 80230b8:	f7ff ffc8 	bl	802304c <__swhatbuf_r>
 80230bc:	9f00      	ldr	r7, [sp, #0]
 80230be:	4605      	mov	r5, r0
 80230c0:	4639      	mov	r1, r7
 80230c2:	4630      	mov	r0, r6
 80230c4:	f7ff f92e 	bl	8022324 <_malloc_r>
 80230c8:	b948      	cbnz	r0, 80230de <__smakebuf_r+0x46>
 80230ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80230ce:	059a      	lsls	r2, r3, #22
 80230d0:	d4ee      	bmi.n	80230b0 <__smakebuf_r+0x18>
 80230d2:	f023 0303 	bic.w	r3, r3, #3
 80230d6:	f043 0302 	orr.w	r3, r3, #2
 80230da:	81a3      	strh	r3, [r4, #12]
 80230dc:	e7e2      	b.n	80230a4 <__smakebuf_r+0xc>
 80230de:	89a3      	ldrh	r3, [r4, #12]
 80230e0:	6020      	str	r0, [r4, #0]
 80230e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80230e6:	81a3      	strh	r3, [r4, #12]
 80230e8:	9b01      	ldr	r3, [sp, #4]
 80230ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80230ee:	b15b      	cbz	r3, 8023108 <__smakebuf_r+0x70>
 80230f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80230f4:	4630      	mov	r0, r6
 80230f6:	f000 f81d 	bl	8023134 <_isatty_r>
 80230fa:	b128      	cbz	r0, 8023108 <__smakebuf_r+0x70>
 80230fc:	89a3      	ldrh	r3, [r4, #12]
 80230fe:	f023 0303 	bic.w	r3, r3, #3
 8023102:	f043 0301 	orr.w	r3, r3, #1
 8023106:	81a3      	strh	r3, [r4, #12]
 8023108:	89a3      	ldrh	r3, [r4, #12]
 802310a:	431d      	orrs	r5, r3
 802310c:	81a5      	strh	r5, [r4, #12]
 802310e:	e7cf      	b.n	80230b0 <__smakebuf_r+0x18>

08023110 <_fstat_r>:
 8023110:	b538      	push	{r3, r4, r5, lr}
 8023112:	4d07      	ldr	r5, [pc, #28]	@ (8023130 <_fstat_r+0x20>)
 8023114:	2300      	movs	r3, #0
 8023116:	4604      	mov	r4, r0
 8023118:	4608      	mov	r0, r1
 802311a:	4611      	mov	r1, r2
 802311c:	602b      	str	r3, [r5, #0]
 802311e:	f7f6 f896 	bl	801924e <_fstat>
 8023122:	1c43      	adds	r3, r0, #1
 8023124:	d102      	bne.n	802312c <_fstat_r+0x1c>
 8023126:	682b      	ldr	r3, [r5, #0]
 8023128:	b103      	cbz	r3, 802312c <_fstat_r+0x1c>
 802312a:	6023      	str	r3, [r4, #0]
 802312c:	bd38      	pop	{r3, r4, r5, pc}
 802312e:	bf00      	nop
 8023130:	2405a9f0 	.word	0x2405a9f0

08023134 <_isatty_r>:
 8023134:	b538      	push	{r3, r4, r5, lr}
 8023136:	4d06      	ldr	r5, [pc, #24]	@ (8023150 <_isatty_r+0x1c>)
 8023138:	2300      	movs	r3, #0
 802313a:	4604      	mov	r4, r0
 802313c:	4608      	mov	r0, r1
 802313e:	602b      	str	r3, [r5, #0]
 8023140:	f7f6 f895 	bl	801926e <_isatty>
 8023144:	1c43      	adds	r3, r0, #1
 8023146:	d102      	bne.n	802314e <_isatty_r+0x1a>
 8023148:	682b      	ldr	r3, [r5, #0]
 802314a:	b103      	cbz	r3, 802314e <_isatty_r+0x1a>
 802314c:	6023      	str	r3, [r4, #0]
 802314e:	bd38      	pop	{r3, r4, r5, pc}
 8023150:	2405a9f0 	.word	0x2405a9f0

08023154 <_init>:
 8023154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023156:	bf00      	nop
 8023158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802315a:	bc08      	pop	{r3}
 802315c:	469e      	mov	lr, r3
 802315e:	4770      	bx	lr

08023160 <_fini>:
 8023160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023162:	bf00      	nop
 8023164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023166:	bc08      	pop	{r3}
 8023168:	469e      	mov	lr, r3
 802316a:	4770      	bx	lr
