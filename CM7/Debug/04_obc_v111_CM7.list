
04_obc_v111_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .dma_buffer   000004a8  24000000  24000000  00028000  2**3
                  ALLOC
  1 .fs_buffer    00014280  240004a8  240004a8  00028000  2**2
                  ALLOC
  2 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00022ddc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00003510  0802307c  0802307c  0002407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0802658c  0802658c  00027a48  2**0
                  CONTENTS, READONLY
  6 .ARM          00000008  0802658c  0802658c  0002758c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08026594  08026594  00027a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08026594  08026594  00027594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  08026598  08026598  00027598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         00000320  24014728  0802659c  00027728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00045fb8  24014a48  080268bc  00027a48  2**2
                  ALLOC
 12 ._user_heap_stack 00000a00  2405aa00  080268bc  00028a00  2**0
                  ALLOC
 13 .dmesg_buffer 00018000  20000000  20000000  00028000  2**0
                  ALLOC
 14 .custom_data  00032000  30000000  30000000  00028000  2**0
                  ALLOC
 15 .shared_mem   00000000  3800f800  3800f800  00027a48  2**0
                  CONTENTS
 16 .ARM.attributes 0000002e  00000000  00000000  00027a48  2**0
                  CONTENTS, READONLY
 17 .debug_info   0003b67c  00000000  00000000  00027a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00009300  00000000  00000000  000630f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003650  00000000  00000000  0006c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002999  00000000  00000000  0006fa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0004e681  00000000  00000000  000723e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004dac8  00000000  00000000  000c0a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001c6872  00000000  00000000  0010e52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  002d4d9c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000f1b8  00000000  00000000  002d4de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000068  00000000  00000000  002e3f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24014a48 	.word	0x24014a48
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023064 	.word	0x08023064

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24014a4c 	.word	0x24014a4c
 80002dc:	08023064 	.word	0x08023064

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <Mgmt_HardwareSystemPreparing>:
#include "SPI_MasterOfEXP/spi_master.h"

SystemStatus_t Mgmt_GetSystemStatus(void);

Std_ReturnType Mgmt_HardwareSystemPreparing(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	Std_ReturnType ret = E_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	71fb      	strb	r3, [r7, #7]
	system_status.init_state = INIT_STATE_STEP_PREPARING;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <Mgmt_HardwareSystemPreparing+0x78>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]

	RV3129_Driver_Init(I2C_RTC);
 80006ec:	481a      	ldr	r0, [pc, #104]	@ (8000758 <Mgmt_HardwareSystemPreparing+0x7c>)
 80006ee:	f008 f88b 	bl	8008808 <RV3129_Driver_Init>
	FRAM_SPI_Driver_Init(SPI_MEM, FRAM_CS_Port, FRAM_CS);
 80006f2:	2210      	movs	r2, #16
 80006f4:	4919      	ldr	r1, [pc, #100]	@ (800075c <Mgmt_HardwareSystemPreparing+0x80>)
 80006f6:	481a      	ldr	r0, [pc, #104]	@ (8000760 <Mgmt_HardwareSystemPreparing+0x84>)
 80006f8:	f008 f9de 	bl	8008ab8 <FRAM_SPI_Driver_Init>
	ret = UART_DMA_Driver_Init();
 80006fc:	f001 fdfe 	bl	80022fc <UART_DMA_Driver_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	71fb      	strb	r3, [r7, #7]

    Watchdog_Device_Init();
 8000704:	f008 f978 	bl	80089f8 <Watchdog_Device_Init>

	Utils_SoftTime_Init();
 8000708:	f009 fcfe 	bl	800a108 <Utils_SoftTime_Init>

	Sys_Debugcast(E_OK,	LOG_NOTICE , 	"OBC OS Preparing!");
 800070c:	4a15      	ldr	r2, [pc, #84]	@ (8000764 <Mgmt_HardwareSystemPreparing+0x88>)
 800070e:	2102      	movs	r1, #2
 8000710:	2000      	movs	r0, #0
 8000712:	f007 fdad 	bl	8008270 <Sys_Debugcast>
	Sys_Debugcast(E_OK,	LOG_INFOR ,  	"OBC OS Preparing!");
 8000716:	4a13      	ldr	r2, [pc, #76]	@ (8000764 <Mgmt_HardwareSystemPreparing+0x88>)
 8000718:	2100      	movs	r1, #0
 800071a:	2000      	movs	r0, #0
 800071c:	f007 fda8 	bl	8008270 <Sys_Debugcast>
	Sys_Debugcast(E_OK,	LOG_DEBUG, 		"OBC OS Preparing!");
 8000720:	4a10      	ldr	r2, [pc, #64]	@ (8000764 <Mgmt_HardwareSystemPreparing+0x88>)
 8000722:	2101      	movs	r1, #1
 8000724:	2000      	movs	r0, #0
 8000726:	f007 fda3 	bl	8008270 <Sys_Debugcast>
	Sys_Debugcast(E_OK, LOG_WARN, 		"OBC OS Preparing!");
 800072a:	4a0e      	ldr	r2, [pc, #56]	@ (8000764 <Mgmt_HardwareSystemPreparing+0x88>)
 800072c:	2103      	movs	r1, #3
 800072e:	2000      	movs	r0, #0
 8000730:	f007 fd9e 	bl	8008270 <Sys_Debugcast>
	Sys_Debugcast(E_OK, LOG_ERROR, 		"OBC OS Preparing!");
 8000734:	4a0b      	ldr	r2, [pc, #44]	@ (8000764 <Mgmt_HardwareSystemPreparing+0x88>)
 8000736:	2104      	movs	r1, #4
 8000738:	2000      	movs	r0, #0
 800073a:	f007 fd99 	bl	8008270 <Sys_Debugcast>
	Sys_Debugcast(E_OK, LOG_FATAL, 		"OBC OS Preparing!");
 800073e:	4a09      	ldr	r2, [pc, #36]	@ (8000764 <Mgmt_HardwareSystemPreparing+0x88>)
 8000740:	2105      	movs	r1, #5
 8000742:	2000      	movs	r0, #0
 8000744:	f007 fd94 	bl	8008270 <Sys_Debugcast>
	return ret;
 8000748:	79fb      	ldrb	r3, [r7, #7]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	24014a64 	.word	0x24014a64
 8000758:	40005800 	.word	0x40005800
 800075c:	58021000 	.word	0x58021000
 8000760:	40013400 	.word	0x40013400
 8000764:	0802307c 	.word	0x0802307c

08000768 <Mgmt_SystemStart>:

void Mgmt_SystemStart(void){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	Sys_Debugcast(E_OK,	LOG_NOTICE , 	"OBC OS Starting!");
 800076c:	4a04      	ldr	r2, [pc, #16]	@ (8000780 <Mgmt_SystemStart+0x18>)
 800076e:	2102      	movs	r1, #2
 8000770:	2000      	movs	r0, #0
 8000772:	f007 fd7d 	bl	8008270 <Sys_Debugcast>

	OBC_RTOS_Start();
 8000776:	f000 f8ed 	bl	8000954 <OBC_RTOS_Start>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08023090 	.word	0x08023090

08000784 <Mgmt_SystemInitStepZero>:

/*************************************************
 *                   RTOS Control                *
 *************************************************/
Std_ReturnType Mgmt_SystemInitStepZero(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
	Std_ReturnType ret = E_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	71fb      	strb	r3, [r7, #7]
	system_status.init_state = INIT_STATE_STEP_ZERO;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <Mgmt_SystemInitStepZero+0x50>)
 8000790:	2202      	movs	r2, #2
 8000792:	701a      	strb	r2, [r3, #0]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step Zero: Pending...");
 8000794:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <Mgmt_SystemInitStepZero+0x54>)
 8000796:	2100      	movs	r1, #0
 8000798:	2000      	movs	r0, #0
 800079a:	f007 fd69 	bl	8008270 <Sys_Debugcast>

	ret = Utils_SoftTime_Sync();
 800079e:	f009 fe89 	bl	800a4b4 <Utils_SoftTime_Sync>
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	if(Utils_SoftTime_Sync() == E_OK){
 80007a6:	f009 fe85 	bl	800a4b4 <Utils_SoftTime_Sync>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d105      	bne.n	80007bc <Mgmt_SystemInitStepZero+0x38>
		Sys_Boardcast(E_OK,	LOG_NOTICE, "[Sync Time!]");
 80007b0:	4a0a      	ldr	r2, [pc, #40]	@ (80007dc <Mgmt_SystemInitStepZero+0x58>)
 80007b2:	2102      	movs	r1, #2
 80007b4:	2000      	movs	r0, #0
 80007b6:	f007 fc4d 	bl	8008054 <Sys_Boardcast>
 80007ba:	e005      	b.n	80007c8 <Mgmt_SystemInitStepZero+0x44>
	}else{
		system_status.last_error = ret;
 80007bc:	4a05      	ldr	r2, [pc, #20]	@ (80007d4 <Mgmt_SystemInitStepZero+0x50>)
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 80007c2:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <Mgmt_SystemInitStepZero+0x50>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 80007c8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	24014a64 	.word	0x24014a64
 80007d8:	080230a4 	.word	0x080230a4
 80007dc:	080230bc 	.word	0x080230bc

080007e0 <Mgmt_SystemInitStepOne>:

Std_ReturnType Mgmt_SystemInitStepOne(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
	system_status.init_state = INIT_STATE_STEP_ONE;
 80007e6:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <Mgmt_SystemInitStepOne+0x88>)
 80007e8:	2203      	movs	r2, #3
 80007ea:	701a      	strb	r2, [r3, #0]
	Std_ReturnType ret = E_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	71fb      	strb	r3, [r7, #7]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step One: Pending...");
 80007f0:	4a1e      	ldr	r2, [pc, #120]	@ (800086c <Mgmt_SystemInitStepOne+0x8c>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	2000      	movs	r0, #0
 80007f6:	f007 fd3b 	bl	8008270 <Sys_Debugcast>

	ret = SystemCLI_Init();
 80007fa:	f004 fc17 	bl	800502c <SystemCLI_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00b      	beq.n	8000820 <Mgmt_SystemInitStepOne+0x40>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[CLI-Interface Init Fail]");
 8000808:	4a19      	ldr	r2, [pc, #100]	@ (8000870 <Mgmt_SystemInitStepOne+0x90>)
 800080a:	2104      	movs	r1, #4
 800080c:	2001      	movs	r0, #1
 800080e:	f007 fc21 	bl	8008054 <Sys_Boardcast>
		system_status.last_error = ret;
 8000812:	4a15      	ldr	r2, [pc, #84]	@ (8000868 <Mgmt_SystemInitStepOne+0x88>)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <Mgmt_SystemInitStepOne+0x88>)
 800081a:	2207      	movs	r2, #7
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e004      	b.n	800082a <Mgmt_SystemInitStepOne+0x4a>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[CLI-Interface Init Done]");
 8000820:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <Mgmt_SystemInitStepOne+0x94>)
 8000822:	2102      	movs	r1, #2
 8000824:	2000      	movs	r0, #0
 8000826:	f007 fc15 	bl	8008054 <Sys_Boardcast>
	}

	ret = Link_SDFS_Driver();
 800082a:	f006 fe4f 	bl	80074cc <Link_SDFS_Driver>
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00b      	beq.n	8000850 <Mgmt_SystemInitStepOne+0x70>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[Link FATFS Fail]");
 8000838:	4a0f      	ldr	r2, [pc, #60]	@ (8000878 <Mgmt_SystemInitStepOne+0x98>)
 800083a:	2104      	movs	r1, #4
 800083c:	2001      	movs	r0, #1
 800083e:	f007 fc09 	bl	8008054 <Sys_Boardcast>
		system_status.last_error = ret;
 8000842:	4a09      	ldr	r2, [pc, #36]	@ (8000868 <Mgmt_SystemInitStepOne+0x88>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <Mgmt_SystemInitStepOne+0x88>)
 800084a:	2207      	movs	r2, #7
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e004      	b.n	800085a <Mgmt_SystemInitStepOne+0x7a>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[Link FATFS Success]");
 8000850:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <Mgmt_SystemInitStepOne+0x9c>)
 8000852:	2102      	movs	r1, #2
 8000854:	2000      	movs	r0, #0
 8000856:	f007 fbfd 	bl	8008054 <Sys_Boardcast>
	}

	SysLogQueue_Init();
 800085a:	f007 fea7 	bl	80085ac <SysLogQueue_Init>

	return ret;
 800085e:	79fb      	ldrb	r3, [r7, #7]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	24014a64 	.word	0x24014a64
 800086c:	080230cc 	.word	0x080230cc
 8000870:	080230e4 	.word	0x080230e4
 8000874:	08023100 	.word	0x08023100
 8000878:	0802311c 	.word	0x0802311c
 800087c:	08023130 	.word	0x08023130

08000880 <Mgmt_SystemInitStepTwo>:

Std_ReturnType Mgmt_SystemInitStepTwo(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	system_status.init_state = INIT_STATE_STEP_TWO;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <Mgmt_SystemInitStepTwo+0x8c>)
 8000888:	2204      	movs	r2, #4
 800088a:	701a      	strb	r2, [r3, #0]
	Std_ReturnType ret = E_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	71fb      	strb	r3, [r7, #7]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step Two: Pending...");
 8000890:	4a1f      	ldr	r2, [pc, #124]	@ (8000910 <Mgmt_SystemInitStepTwo+0x90>)
 8000892:	2100      	movs	r1, #0
 8000894:	2000      	movs	r0, #0
 8000896:	f007 fceb 	bl	8008270 <Sys_Debugcast>

	ret = SPI_SlaveDevice_Init();
 800089a:	f008 ffb1 	bl	8009800 <SPI_SlaveDevice_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d00b      	beq.n	80008c0 <Mgmt_SystemInitStepTwo+0x40>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[SPI Device Init Fail]");
 80008a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000914 <Mgmt_SystemInitStepTwo+0x94>)
 80008aa:	2104      	movs	r1, #4
 80008ac:	2001      	movs	r0, #1
 80008ae:	f007 fbd1 	bl	8008054 <Sys_Boardcast>
		system_status.last_error = ret;
 80008b2:	4a16      	ldr	r2, [pc, #88]	@ (800090c <Mgmt_SystemInitStepTwo+0x8c>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 80008b8:	4b14      	ldr	r3, [pc, #80]	@ (800090c <Mgmt_SystemInitStepTwo+0x8c>)
 80008ba:	2207      	movs	r2, #7
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e004      	b.n	80008ca <Mgmt_SystemInitStepTwo+0x4a>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[SPI Device Init Done]");
 80008c0:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <Mgmt_SystemInitStepTwo+0x98>)
 80008c2:	2102      	movs	r1, #2
 80008c4:	2000      	movs	r0, #0
 80008c6:	f007 fbc5 	bl	8008054 <Sys_Boardcast>
	}

	ret = SPI_MasterDevice_Init(SPI6, SPI6_EXP_CS_GPIO_Port, SPI6_EXP_CS_Pin);
 80008ca:	2210      	movs	r2, #16
 80008cc:	4913      	ldr	r1, [pc, #76]	@ (800091c <Mgmt_SystemInitStepTwo+0x9c>)
 80008ce:	4814      	ldr	r0, [pc, #80]	@ (8000920 <Mgmt_SystemInitStepTwo+0xa0>)
 80008d0:	f008 fc5c 	bl	800918c <SPI_MasterDevice_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
	if(ret != E_OK){
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00b      	beq.n	80008f6 <Mgmt_SystemInitStepTwo+0x76>
		Sys_Boardcast(E_ERROR, LOG_ERROR, "[SPI Master Init Fail]");
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <Mgmt_SystemInitStepTwo+0xa4>)
 80008e0:	2104      	movs	r1, #4
 80008e2:	2001      	movs	r0, #1
 80008e4:	f007 fbb6 	bl	8008054 <Sys_Boardcast>
		system_status.last_error = ret;
 80008e8:	4a08      	ldr	r2, [pc, #32]	@ (800090c <Mgmt_SystemInitStepTwo+0x8c>)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	7093      	strb	r3, [r2, #2]
		system_status.init_state = INIT_STATE_FAILED;
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <Mgmt_SystemInitStepTwo+0x8c>)
 80008f0:	2207      	movs	r2, #7
 80008f2:	701a      	strb	r2, [r3, #0]
 80008f4:	e004      	b.n	8000900 <Mgmt_SystemInitStepTwo+0x80>
	}else{
		Sys_Boardcast(E_OK, LOG_NOTICE, "[SPI Master Init Done]");
 80008f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000928 <Mgmt_SystemInitStepTwo+0xa8>)
 80008f8:	2102      	movs	r1, #2
 80008fa:	2000      	movs	r0, #0
 80008fc:	f007 fbaa 	bl	8008054 <Sys_Boardcast>
	}

	return ret;
 8000900:	79fb      	ldrb	r3, [r7, #7]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	24014a64 	.word	0x24014a64
 8000910:	08023148 	.word	0x08023148
 8000914:	08023160 	.word	0x08023160
 8000918:	08023178 	.word	0x08023178
 800091c:	58020000 	.word	0x58020000
 8000920:	58001400 	.word	0x58001400
 8000924:	08023190 	.word	0x08023190
 8000928:	080231a8 	.word	0x080231a8

0800092c <Mgmt_SystemInitFinal>:

Std_ReturnType Mgmt_SystemInitFinal(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	system_status.init_state = INIT_STATE_FINAL;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <Mgmt_SystemInitFinal+0x20>)
 8000932:	2205      	movs	r2, #5
 8000934:	701a      	strb	r2, [r3, #0]
	system_status.init_state = INIT_STATE_COMPLETED;
 8000936:	4b05      	ldr	r3, [pc, #20]	@ (800094c <Mgmt_SystemInitFinal+0x20>)
 8000938:	2206      	movs	r2, #6
 800093a:	701a      	strb	r2, [r3, #0]
	Sys_Debugcast(E_OK, LOG_INFOR, "Step Final: Pending...");
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <Mgmt_SystemInitFinal+0x24>)
 800093e:	2100      	movs	r1, #0
 8000940:	2000      	movs	r0, #0
 8000942:	f007 fc95 	bl	8008270 <Sys_Debugcast>
	return E_OK;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	bd80      	pop	{r7, pc}
 800094c:	24014a64 	.word	0x24014a64
 8000950:	080231c0 	.word	0x080231c0

08000954 <OBC_RTOS_Start>:
#include "SysLog/syslog.h"
#include "stdio.h"

/*--------------------Star RTOS--------------*/
void OBC_RTOS_Start(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	OBC_RootGrowUp();
 8000958:	f000 f9e6 	bl	8000d28 <OBC_RootGrowUp>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <vApplicationStackOverflowHook>:

/*--------------------RTOS Task List--------------*/

/* Hook prototypes */
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b0c2      	sub	sp, #264	@ 0x108
 8000964:	af00      	add	r7, sp, #0
 8000966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800096a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800096e:	6018      	str	r0, [r3, #0]
 8000970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000978:	6019      	str	r1, [r3, #0]
    char buffer[256];
    snprintf(buffer, sizeof(buffer), "Stack Overflow -> Task %s", pcTaskName);
 800097a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800097e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000982:	f107 0008 	add.w	r0, r7, #8
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <vApplicationStackOverflowHook+0x4c>)
 800098a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800098e:	f021 fa41 	bl	8021e14 <sniprintf>
	SYSLOG_FATAL_POLL(buffer);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	2201      	movs	r2, #1
 8000998:	4619      	mov	r1, r3
 800099a:	2005      	movs	r0, #5
 800099c:	f007 fd0c 	bl	80083b8 <syslog_log>
}
 80009a0:	bf00      	nop
 80009a2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	080231d8 	.word	0x080231d8

080009b0 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0c0      	sub	sp, #256	@ 0x100
 80009b4:	af00      	add	r7, sp, #0
    char buffer[256];
    snprintf(buffer, sizeof(buffer), "Malloc Hook Overflow");
 80009b6:	463b      	mov	r3, r7
 80009b8:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <vApplicationMallocFailedHook+0x2c>)
 80009ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009be:	4618      	mov	r0, r3
 80009c0:	f021 fa28 	bl	8021e14 <sniprintf>
	SYSLOG_FATAL_POLL(buffer);
 80009c4:	463b      	mov	r3, r7
 80009c6:	2201      	movs	r2, #1
 80009c8:	4619      	mov	r1, r3
 80009ca:	2005      	movs	r0, #5
 80009cc:	f007 fcf4 	bl	80083b8 <syslog_log>
}
 80009d0:	bf00      	nop
 80009d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	080231f4 	.word	0x080231f4

080009e0 <LL_GPIO_IsOutputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(const GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->ODR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	695a      	ldr	r2, [r3, #20]
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	4013      	ands	r3, r2
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d101      	bne.n	80009fc <LL_GPIO_IsOutputPinSet+0x1c>
 80009f8:	2301      	movs	r3, #1
 80009fa:	e000      	b.n	80009fe <LL_GPIO_IsOutputPinSet+0x1e>
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	619a      	str	r2, [r3, #24]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	041a      	lsls	r2, r3, #16
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	619a      	str	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <toCM4_Init>:
#include "utils.h"
#include "main.h"
#include "board.h"
#include "gpio_state.h"

void toCM4_Init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	GPIO_SetHigh(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000a48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4c:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <toCM4_Init+0x24>)
 8000a4e:	f7ff ffdc 	bl	8000a0a <LL_GPIO_SetOutputPin>
	GPIO_SetHigh(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000a52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a56:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <toCM4_Init+0x24>)
 8000a58:	f7ff ffd7 	bl	8000a0a <LL_GPIO_SetOutputPin>
    toCM4_SetState(TOCM4_IDLE);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f805 	bl	8000a6c <toCM4_SetState>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	58021400 	.word	0x58021400

08000a6c <toCM4_SetState>:

void toCM4_SetState(toCM4_State_t state) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d837      	bhi.n	8000aec <toCM4_SetState+0x80>
 8000a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a84 <toCM4_SetState+0x18>)
 8000a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a82:	bf00      	nop
 8000a84:	08000a95 	.word	0x08000a95
 8000a88:	08000aab 	.word	0x08000aab
 8000a8c:	08000ac1 	.word	0x08000ac1
 8000a90:	08000ad7 	.word	0x08000ad7
        case TOCM4_ERROR:
            GPIO_SetLow(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000a94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a98:	481c      	ldr	r0, [pc, #112]	@ (8000b0c <toCM4_SetState+0xa0>)
 8000a9a:	f7ff ffc4 	bl	8000a26 <LL_GPIO_ResetOutputPin>
            GPIO_SetLow(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000a9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa2:	481a      	ldr	r0, [pc, #104]	@ (8000b0c <toCM4_SetState+0xa0>)
 8000aa4:	f7ff ffbf 	bl	8000a26 <LL_GPIO_ResetOutputPin>
            break;
 8000aa8:	e02b      	b.n	8000b02 <toCM4_SetState+0x96>
        case TOCM4_READYSEND:
            GPIO_SetLow(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000aaa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aae:	4817      	ldr	r0, [pc, #92]	@ (8000b0c <toCM4_SetState+0xa0>)
 8000ab0:	f7ff ffb9 	bl	8000a26 <LL_GPIO_ResetOutputPin>
            GPIO_SetHigh(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000ab4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ab8:	4814      	ldr	r0, [pc, #80]	@ (8000b0c <toCM4_SetState+0xa0>)
 8000aba:	f7ff ffa6 	bl	8000a0a <LL_GPIO_SetOutputPin>
            break;
 8000abe:	e020      	b.n	8000b02 <toCM4_SetState+0x96>
        case TOCM4_BUSY:
            GPIO_SetHigh(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000ac0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ac4:	4811      	ldr	r0, [pc, #68]	@ (8000b0c <toCM4_SetState+0xa0>)
 8000ac6:	f7ff ffa0 	bl	8000a0a <LL_GPIO_SetOutputPin>
            GPIO_SetLow(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000aca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ace:	480f      	ldr	r0, [pc, #60]	@ (8000b0c <toCM4_SetState+0xa0>)
 8000ad0:	f7ff ffa9 	bl	8000a26 <LL_GPIO_ResetOutputPin>
            break;
 8000ad4:	e015      	b.n	8000b02 <toCM4_SetState+0x96>
        case TOCM4_IDLE:
            GPIO_SetHigh(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000ad6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ada:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <toCM4_SetState+0xa0>)
 8000adc:	f7ff ff95 	bl	8000a0a <LL_GPIO_SetOutputPin>
            GPIO_SetHigh(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000ae0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae4:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <toCM4_SetState+0xa0>)
 8000ae6:	f7ff ff90 	bl	8000a0a <LL_GPIO_SetOutputPin>
            break;
 8000aea:	e00a      	b.n	8000b02 <toCM4_SetState+0x96>
        default:
            GPIO_SetLow(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000aec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000af0:	4806      	ldr	r0, [pc, #24]	@ (8000b0c <toCM4_SetState+0xa0>)
 8000af2:	f7ff ff98 	bl	8000a26 <LL_GPIO_ResetOutputPin>
            GPIO_SetLow(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000af6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000afa:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <toCM4_SetState+0xa0>)
 8000afc:	f7ff ff93 	bl	8000a26 <LL_GPIO_ResetOutputPin>
            break;
 8000b00:	bf00      	nop
    }
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	58021400 	.word	0x58021400

08000b10 <toCM4_GetState>:

toCM4_State_t toCM4_GetState(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
    uint8_t busy_state = GPIO_IsOutHigh(STATE_toCM4_BUSY_Port, STATE_toCM4_BUSY);
 8000b16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b1a:	4819      	ldr	r0, [pc, #100]	@ (8000b80 <toCM4_GetState+0x70>)
 8000b1c:	f7ff ff60 	bl	80009e0 <LL_GPIO_IsOutputPinSet>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf14      	ite	ne
 8000b26:	2301      	movne	r3, #1
 8000b28:	2300      	moveq	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	71fb      	strb	r3, [r7, #7]
    uint8_t readysend_state = GPIO_IsOutHigh(STATE_toCM4_READYSEND_Port, STATE_toCM4_READYSEND);
 8000b2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b32:	4813      	ldr	r0, [pc, #76]	@ (8000b80 <toCM4_GetState+0x70>)
 8000b34:	f7ff ff54 	bl	80009e0 <LL_GPIO_IsOutputPinSet>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf14      	ite	ne
 8000b3e:	2301      	movne	r3, #1
 8000b40:	2300      	moveq	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	71bb      	strb	r3, [r7, #6]

    if (busy_state == 0 && readysend_state == 0) {
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d104      	bne.n	8000b56 <toCM4_GetState+0x46>
 8000b4c:	79bb      	ldrb	r3, [r7, #6]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <toCM4_GetState+0x46>
        return TOCM4_ERROR;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e010      	b.n	8000b78 <toCM4_GetState+0x68>
    } else if (busy_state == 0 && readysend_state == 1) {
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d104      	bne.n	8000b66 <toCM4_GetState+0x56>
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d101      	bne.n	8000b66 <toCM4_GetState+0x56>
        return TOCM4_READYSEND;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e008      	b.n	8000b78 <toCM4_GetState+0x68>
    } else if (busy_state == 1 && readysend_state == 0) {
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d104      	bne.n	8000b76 <toCM4_GetState+0x66>
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <toCM4_GetState+0x66>
        return TOCM4_BUSY;
 8000b72:	2302      	movs	r3, #2
 8000b74:	e000      	b.n	8000b78 <toCM4_GetState+0x68>
    } else { // busy_state == 1 && readysend_state == 1
        return TOCM4_IDLE;
 8000b76:	2303      	movs	r3, #3
    }
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	58021400 	.word	0x58021400

08000b84 <ForwardMode_Set>:
#include <stdio.h>

static ForwardMode_t currentMode = FORWARD_MODE_NORMAL;
static uint8_t backslashCount = 0;

void ForwardMode_Set(ForwardMode_t mode) {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
    currentMode = mode;
 8000b8e:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <ForwardMode_Set+0x24>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	7013      	strb	r3, [r2, #0]
    backslashCount = 0;
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <ForwardMode_Set+0x28>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	24014a67 	.word	0x24014a67
 8000bac:	24014a68 	.word	0x24014a68

08000bb0 <ForwardMode_Get>:

ForwardMode_t ForwardMode_Get(void) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
    return currentMode;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	@ (8000bc4 <ForwardMode_Get+0x14>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	24014a67 	.word	0x24014a67

08000bc8 <ForwardMode_ProcessReceivedByte>:

_Bool ForwardMode_ProcessReceivedByte(uint8_t byte) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
    if ((char)byte == '\\') {
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b5c      	cmp	r3, #92	@ 0x5c
 8000bd6:	d106      	bne.n	8000be6 <ForwardMode_ProcessReceivedByte+0x1e>
        backslashCount++;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <ForwardMode_ProcessReceivedByte+0x4c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <ForwardMode_ProcessReceivedByte+0x4c>)
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	e002      	b.n	8000bec <ForwardMode_ProcessReceivedByte+0x24>
    } else {
        backslashCount = 0;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <ForwardMode_ProcessReceivedByte+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
    }
    if (backslashCount >= 10) {
 8000bec:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <ForwardMode_ProcessReceivedByte+0x4c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b09      	cmp	r3, #9
 8000bf2:	d907      	bls.n	8000c04 <ForwardMode_ProcessReceivedByte+0x3c>
        currentMode = FORWARD_MODE_NORMAL;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <ForwardMode_ProcessReceivedByte+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
        backslashCount = 0;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <ForwardMode_ProcessReceivedByte+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
        return true;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <ForwardMode_ProcessReceivedByte+0x3e>
    }
    return false;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	24014a68 	.word	0x24014a68
 8000c18:	24014a67 	.word	0x24014a67

08000c1c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c2c:	2b40      	cmp	r3, #64	@ 0x40
 8000c2e:	d101      	bne.n	8000c34 <LL_USART_IsActiveFlag_TC+0x18>
 8000c30:	2301      	movs	r3, #1
 8000c32:	e000      	b.n	8000c36 <LL_USART_IsActiveFlag_TC+0x1a>
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c52:	2b80      	cmp	r3, #128	@ 0x80
 8000c54:	d101      	bne.n	8000c5a <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8000c56:	2301      	movs	r3, #1
 8000c58:	e000      	b.n	8000c5c <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000c74:	78fa      	ldrb	r2, [r7, #3]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <LL_GPIO_SetOutputPin>:
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	619a      	str	r2, [r3, #24]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_GPIO_ResetOutputPin>:
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	041a      	lsls	r2, r3, #16
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <writeChar_auth_USB>:
/*************************************************
 *                    Header                     *
 *************************************************/
ShieldInstance_t auth_usb;

static void writeChar_auth_USB(char c) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
    uint8_t c_to_send = c;
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	73fb      	strb	r3, [r7, #15]
    UART_Driver_Write(UART_USB, c_to_send);
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <writeChar_auth_USB+0x20>)
 8000cd4:	f001 fcc8 	bl	8002668 <UART_Driver_Write>
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40011000 	.word	0x40011000

08000ce4 <OBC_RootTask>:
 *               	Root Task	                 *
 *************************************************/
void OBC_RootTask(void *pvParameters);

void OBC_RootTask(void *pvParameters)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	Sys_Debugcast(E_OK, LOG_NOTICE, "Root task started");
 8000cec:	4a0b      	ldr	r2, [pc, #44]	@ (8000d1c <OBC_RootTask+0x38>)
 8000cee:	2102      	movs	r1, #2
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f007 fabd 	bl	8008270 <Sys_Debugcast>
    if (OBC_AppInit() != E_OK)
 8000cf6:	f000 f843 	bl	8000d80 <OBC_AppInit>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d007      	beq.n	8000d10 <OBC_RootTask+0x2c>
    {
        Sys_Boardcast(E_ERROR, LOG_ERROR, "!!! Application Initialization Failed");
 8000d00:	4a07      	ldr	r2, [pc, #28]	@ (8000d20 <OBC_RootTask+0x3c>)
 8000d02:	2104      	movs	r1, #4
 8000d04:	2001      	movs	r0, #1
 8000d06:	f007 f9a5 	bl	8008054 <Sys_Boardcast>
        system_status.program_state = PROGRAM_STATE_ERROR;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <OBC_RootTask+0x40>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	705a      	strb	r2, [r3, #1]
    }

    vTaskDelete(NULL);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f010 ff1b 	bl	8011b4c <vTaskDelete>
    while(1){
 8000d16:	bf00      	nop
 8000d18:	e7fd      	b.n	8000d16 <OBC_RootTask+0x32>
 8000d1a:	bf00      	nop
 8000d1c:	0802320c 	.word	0x0802320c
 8000d20:	08023220 	.word	0x08023220
 8000d24:	24014a6c 	.word	0x24014a6c

08000d28 <OBC_RootGrowUp>:
    	// Should not go here
    }
}

void OBC_RootGrowUp(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af04      	add	r7, sp, #16
    TaskHandle_t task_handle = xTaskCreateStatic(
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <OBC_RootGrowUp+0x44>)
 8000d30:	9302      	str	r3, [sp, #8]
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <OBC_RootGrowUp+0x48>)
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	2305      	movs	r3, #5
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000d40:	490c      	ldr	r1, [pc, #48]	@ (8000d74 <OBC_RootGrowUp+0x4c>)
 8000d42:	480d      	ldr	r0, [pc, #52]	@ (8000d78 <OBC_RootGrowUp+0x50>)
 8000d44:	f010 fd4f 	bl	80117e6 <xTaskCreateStatic>
 8000d48:	6078      	str	r0, [r7, #4]
        ROOT_PRIORITY,
        root_stack,
        &root_tcb
    );

    if (task_handle == NULL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d106      	bne.n	8000d5e <OBC_RootGrowUp+0x36>
    {
        Sys_Boardcast(E_ERROR, LOG_FATAL, "Cannot Start Root-Task!!!");
 8000d50:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <OBC_RootGrowUp+0x54>)
 8000d52:	2105      	movs	r1, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	f007 f97d 	bl	8008054 <Sys_Boardcast>
        while (1);
 8000d5a:	bf00      	nop
 8000d5c:	e7fd      	b.n	8000d5a <OBC_RootGrowUp+0x32>
    }

    vTaskStartScheduler();
 8000d5e:	f011 f89b 	bl	8011e98 <vTaskStartScheduler>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	24015ecc 	.word	0x24015ecc
 8000d70:	24014acc 	.word	0x24014acc
 8000d74:	08023248 	.word	0x08023248
 8000d78:	08000ce5 	.word	0x08000ce5
 8000d7c:	08023258 	.word	0x08023258

08000d80 <OBC_AppInit>:
/*************************************************
 *               	TASK INIT	                 *
 *************************************************/

Std_ReturnType OBC_AppInit(void)
{
 8000d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d82:	b0cf      	sub	sp, #316	@ 0x13c
 8000d84:	af06      	add	r7, sp, #24

	Std_ReturnType ret = E_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	ret = Mgmt_SystemInitStepZero();
 8000d8c:	f7ff fcfa 	bl	8000784 <Mgmt_SystemInitStepZero>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8000d96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <OBC_AppInit+0x2a>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Step Zero Failed!!!");
 8000d9e:	4ac9      	ldr	r2, [pc, #804]	@ (80010c4 <OBC_AppInit+0x344>)
 8000da0:	2105      	movs	r1, #5
 8000da2:	2001      	movs	r0, #1
 8000da4:	f007 f956 	bl	8008054 <Sys_Boardcast>
 8000da8:	e004      	b.n	8000db4 <OBC_AppInit+0x34>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step Zero: PASS!");
 8000daa:	4ac7      	ldr	r2, [pc, #796]	@ (80010c8 <OBC_AppInit+0x348>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	2000      	movs	r0, #0
 8000db0:	f007 f950 	bl	8008054 <Sys_Boardcast>
	}

	ret = Mgmt_SystemInitStepOne();
 8000db4:	f7ff fd14 	bl	80007e0 <Mgmt_SystemInitStepOne>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8000dbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d005      	beq.n	8000dd2 <OBC_AppInit+0x52>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Step One Failed!!!");
 8000dc6:	4ac1      	ldr	r2, [pc, #772]	@ (80010cc <OBC_AppInit+0x34c>)
 8000dc8:	2105      	movs	r1, #5
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f007 f942 	bl	8008054 <Sys_Boardcast>
 8000dd0:	e004      	b.n	8000ddc <OBC_AppInit+0x5c>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step One: PASS!");
 8000dd2:	4abf      	ldr	r2, [pc, #764]	@ (80010d0 <OBC_AppInit+0x350>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f007 f93c 	bl	8008054 <Sys_Boardcast>
	}

	ret = Mgmt_SystemInitStepTwo();
 8000ddc:	f7ff fd50 	bl	8000880 <Mgmt_SystemInitStepTwo>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8000de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <OBC_AppInit+0x7a>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Step Two Failed!!!");
 8000dee:	4ab9      	ldr	r2, [pc, #740]	@ (80010d4 <OBC_AppInit+0x354>)
 8000df0:	2105      	movs	r1, #5
 8000df2:	2001      	movs	r0, #1
 8000df4:	f007 f92e 	bl	8008054 <Sys_Boardcast>
 8000df8:	e004      	b.n	8000e04 <OBC_AppInit+0x84>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step Two: PASS!");
 8000dfa:	4ab7      	ldr	r2, [pc, #732]	@ (80010d8 <OBC_AppInit+0x358>)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f007 f928 	bl	8008054 <Sys_Boardcast>
	}

	ret = Mgmt_SystemInitFinal();
 8000e04:	f7ff fd92 	bl	800092c <Mgmt_SystemInitFinal>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	if (ret != E_OK){
 8000e0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d005      	beq.n	8000e22 <OBC_AppInit+0xa2>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Init Final Failed!!!");
 8000e16:	4ab1      	ldr	r2, [pc, #708]	@ (80010dc <OBC_AppInit+0x35c>)
 8000e18:	2105      	movs	r1, #5
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f007 f91a 	bl	8008054 <Sys_Boardcast>
 8000e20:	e004      	b.n	8000e2c <OBC_AppInit+0xac>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "Step Final: PASS!");
 8000e22:	4aaf      	ldr	r2, [pc, #700]	@ (80010e0 <OBC_AppInit+0x360>)
 8000e24:	2100      	movs	r1, #0
 8000e26:	2000      	movs	r0, #0
 8000e28:	f007 f914 	bl	8008054 <Sys_Boardcast>
	}

	FS_Init();
 8000e2c:	f006 f9fe 	bl	800722c <FS_Init>

	MIN_Process_Init();
 8000e30:	f006 fe62 	bl	8007af8 <MIN_Process_Init>

	if (ret != E_OK){
 8000e34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d005      	beq.n	8000e48 <OBC_AppInit+0xc8>
		Sys_Boardcast(E_ERROR, LOG_FATAL, "System Failed!!!");
 8000e3c:	4aa9      	ldr	r2, [pc, #676]	@ (80010e4 <OBC_AppInit+0x364>)
 8000e3e:	2105      	movs	r1, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	f007 f907 	bl	8008054 <Sys_Boardcast>
 8000e46:	e004      	b.n	8000e52 <OBC_AppInit+0xd2>
	}else{
    	Sys_Boardcast(E_OK, LOG_INFOR, "[WELCOME]");
 8000e48:	4aa7      	ldr	r2, [pc, #668]	@ (80010e8 <OBC_AppInit+0x368>)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f007 f901 	bl	8008054 <Sys_Boardcast>
	}

	char boot_log[256] = {0};
 8000e52:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e56:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e60:	461a      	mov	r2, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	f021 f89b 	bl	8021f9e <memset>
    int offset = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    s_DateTime rtc;
    Utils_GetRTC(&rtc);
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	4618      	mov	r0, r3
 8000e74:	f009 f98c 	bl	800a190 <Utils_GetRTC>
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000e78:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e7c:	f107 0210 	add.w	r2, r7, #16
 8000e80:	18d0      	adds	r0, r2, r3
 8000e82:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e86:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
                "\r\nHardtime: 20%02d-%02d-%02d %02d:%02d:%02d ",
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000e8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e8e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e92:	789b      	ldrb	r3, [r3, #2]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000e94:	469c      	mov	ip, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000e96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e9a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e9e:	785b      	ldrb	r3, [r3, #1]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000ea0:	461a      	mov	r2, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000ea2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ea6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000eaa:	781b      	ldrb	r3, [r3, #0]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000eac:	461c      	mov	r4, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000eae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000eb2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000eb6:	78db      	ldrb	r3, [r3, #3]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000eb8:	461d      	mov	r5, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000eba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ebe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000ec2:	791b      	ldrb	r3, [r3, #4]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000ec4:	461e      	mov	r6, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8000ec6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000eca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000ece:	795b      	ldrb	r3, [r3, #5]
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000ed0:	9304      	str	r3, [sp, #16]
 8000ed2:	9603      	str	r6, [sp, #12]
 8000ed4:	9502      	str	r5, [sp, #8]
 8000ed6:	9401      	str	r4, [sp, #4]
 8000ed8:	9200      	str	r2, [sp, #0]
 8000eda:	4663      	mov	r3, ip
 8000edc:	4a83      	ldr	r2, [pc, #524]	@ (80010ec <OBC_AppInit+0x36c>)
 8000ede:	f020 ff99 	bl	8021e14 <sniprintf>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ee8:	4413      	add	r3, r2
 8000eea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    uint8_t hours = 0, minutes = 0, seconds = 0;
 8000eee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ef2:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000efe:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f0a:	f2a3 131b 	subw	r3, r3, #283	@ 0x11b
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
    Utils_GetWorkingTime(NULL, &hours, &minutes, &seconds);
 8000f12:	1d7b      	adds	r3, r7, #5
 8000f14:	1dba      	adds	r2, r7, #6
 8000f16:	1df9      	adds	r1, r7, #7
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f009 f993 	bl	800a244 <Utils_GetWorkingTime>
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000f1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f22:	f107 0210 	add.w	r2, r7, #16
 8000f26:	18d0      	adds	r0, r2, r3
 8000f28:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f2c:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8000f30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f34:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f40:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f4c:	f2a3 131b 	subw	r3, r3, #283	@ 0x11b
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	9200      	str	r2, [sp, #0]
 8000f56:	4623      	mov	r3, r4
 8000f58:	4a65      	ldr	r2, [pc, #404]	@ (80010f0 <OBC_AppInit+0x370>)
 8000f5a:	f020 ff5b 	bl	8021e14 <sniprintf>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f64:	4413      	add	r3, r2
 8000f66:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
                    "\r\nUptime: %02u:%02u:%02u",
                    hours, minutes, seconds);
    offset += snprintf(boot_log + offset, sizeof(boot_log) - offset,
 8000f6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f6e:	f107 0210 	add.w	r2, r7, #16
 8000f72:	18d0      	adds	r0, r2, r3
 8000f74:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f78:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80010f4 <OBC_AppInit+0x374>)
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f020 ff48 	bl	8021e14 <sniprintf>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
                    "\r\nWelcome to SpaceLiinTech - SLT BEE-PC1 OBC \r\n\r\n");

	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000f96:	e017      	b.n	8000fc8 <OBC_AppInit+0x248>
	{
	    while (!LL_USART_IsActiveFlag_TXE(USART1));
 8000f98:	bf00      	nop
 8000f9a:	4857      	ldr	r0, [pc, #348]	@ (80010f8 <OBC_AppInit+0x378>)
 8000f9c:	f7ff fe51 	bl	8000c42 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f9      	beq.n	8000f9a <OBC_AppInit+0x21a>
	    LL_USART_TransmitData8(USART1, (uint8_t)boot_log[i]);
 8000fa6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000faa:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000fb2:	4413      	add	r3, r2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	484f      	ldr	r0, [pc, #316]	@ (80010f8 <OBC_AppInit+0x378>)
 8000fba:	f7ff fe55 	bl	8000c68 <LL_USART_TransmitData8>
	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8000fbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000fc8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000fcc:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1dd      	bne.n	8000f98 <OBC_AppInit+0x218>
	}
	while (!LL_USART_IsActiveFlag_TC(USART1));
 8000fdc:	bf00      	nop
 8000fde:	4846      	ldr	r0, [pc, #280]	@ (80010f8 <OBC_AppInit+0x378>)
 8000fe0:	f7ff fe1c 	bl	8000c1c <LL_USART_IsActiveFlag_TC>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f9      	beq.n	8000fde <OBC_AppInit+0x25e>

	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000ff0:	e017      	b.n	8001022 <OBC_AppInit+0x2a2>
	{
	    while (!LL_USART_IsActiveFlag_TXE(USART2));
 8000ff2:	bf00      	nop
 8000ff4:	4841      	ldr	r0, [pc, #260]	@ (80010fc <OBC_AppInit+0x37c>)
 8000ff6:	f7ff fe24 	bl	8000c42 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f9      	beq.n	8000ff4 <OBC_AppInit+0x274>
	    LL_USART_TransmitData8(USART2, (uint8_t)boot_log[i]);
 8001000:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001004:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8001008:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	483a      	ldr	r0, [pc, #232]	@ (80010fc <OBC_AppInit+0x37c>)
 8001014:	f7ff fe28 	bl	8000c68 <LL_USART_TransmitData8>
	for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8001018:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800101c:	3301      	adds	r3, #1
 800101e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001022:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001026:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800102a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1dd      	bne.n	8000ff2 <OBC_AppInit+0x272>
	}
	while (!LL_USART_IsActiveFlag_TC(USART2));
 8001036:	bf00      	nop
 8001038:	4830      	ldr	r0, [pc, #192]	@ (80010fc <OBC_AppInit+0x37c>)
 800103a:	f7ff fdef 	bl	8000c1c <LL_USART_IsActiveFlag_TC>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f9      	beq.n	8001038 <OBC_AppInit+0x2b8>


    CREATE_TASK(FS_Gatekeeper_Task, 	"FS_Gatekeeper", 	MIN_STACK_SIZE * 20, 	NULL, 									2, NULL);
 8001044:	2300      	movs	r3, #0
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	2302      	movs	r3, #2
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001052:	492b      	ldr	r1, [pc, #172]	@ (8001100 <OBC_AppInit+0x380>)
 8001054:	482b      	ldr	r0, [pc, #172]	@ (8001104 <OBC_AppInit+0x384>)
 8001056:	f010 fc2a 	bl	80118ae <xTaskCreate>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d001      	beq.n	8001064 <OBC_AppInit+0x2e4>
 8001060:	2301      	movs	r3, #1
 8001062:	e0ed      	b.n	8001240 <OBC_AppInit+0x4c0>

    CREATE_TASK(MIN_Process_Task, 		"MIN_Process", 		MIN_STACK_SIZE * 20, 	NULL, 									1, NULL);
 8001064:	2300      	movs	r3, #0
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	2301      	movs	r3, #1
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2300      	movs	r3, #0
 800106e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001072:	4925      	ldr	r1, [pc, #148]	@ (8001108 <OBC_AppInit+0x388>)
 8001074:	4825      	ldr	r0, [pc, #148]	@ (800110c <OBC_AppInit+0x38c>)
 8001076:	f010 fc1a 	bl	80118ae <xTaskCreate>
 800107a:	4603      	mov	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d001      	beq.n	8001084 <OBC_AppInit+0x304>
 8001080:	2301      	movs	r3, #1
 8001082:	e0dd      	b.n	8001240 <OBC_AppInit+0x4c0>

    CREATE_TASK(SysLog_Task, 			"SysLog_Task", 		MIN_STACK_SIZE * 10, 	NULL, 									1, NULL);	// Syslog Queue from syslog_queue.c
 8001084:	2300      	movs	r3, #0
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	2301      	movs	r3, #1
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2300      	movs	r3, #0
 800108e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001092:	491f      	ldr	r1, [pc, #124]	@ (8001110 <OBC_AppInit+0x390>)
 8001094:	481f      	ldr	r0, [pc, #124]	@ (8001114 <OBC_AppInit+0x394>)
 8001096:	f010 fc0a 	bl	80118ae <xTaskCreate>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d001      	beq.n	80010a4 <OBC_AppInit+0x324>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0cd      	b.n	8001240 <OBC_AppInit+0x4c0>

    CREATE_TASK(vSoft_RTC_Task, 		"Soft_RTC_Task", 	MIN_STACK_SIZE * 5, 	NULL, 									1, NULL);
 80010a4:	2300      	movs	r3, #0
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	2301      	movs	r3, #1
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2300      	movs	r3, #0
 80010ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80010b2:	4919      	ldr	r1, [pc, #100]	@ (8001118 <OBC_AppInit+0x398>)
 80010b4:	4819      	ldr	r0, [pc, #100]	@ (800111c <OBC_AppInit+0x39c>)
 80010b6:	f010 fbfa 	bl	80118ae <xTaskCreate>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d02f      	beq.n	8001120 <OBC_AppInit+0x3a0>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e0bd      	b.n	8001240 <OBC_AppInit+0x4c0>
 80010c4:	08023274 	.word	0x08023274
 80010c8:	08023294 	.word	0x08023294
 80010cc:	080232a8 	.word	0x080232a8
 80010d0:	080232c8 	.word	0x080232c8
 80010d4:	080232d8 	.word	0x080232d8
 80010d8:	080232f8 	.word	0x080232f8
 80010dc:	08023308 	.word	0x08023308
 80010e0:	08023324 	.word	0x08023324
 80010e4:	08023338 	.word	0x08023338
 80010e8:	0802334c 	.word	0x0802334c
 80010ec:	08023358 	.word	0x08023358
 80010f0:	08023388 	.word	0x08023388
 80010f4:	080233a4 	.word	0x080233a4
 80010f8:	40011000 	.word	0x40011000
 80010fc:	40004400 	.word	0x40004400
 8001100:	080233d8 	.word	0x080233d8
 8001104:	080072b1 	.word	0x080072b1
 8001108:	080233e8 	.word	0x080233e8
 800110c:	080015e1 	.word	0x080015e1
 8001110:	080233f4 	.word	0x080233f4
 8001114:	080085c9 	.word	0x080085c9
 8001118:	08023400 	.word	0x08023400
 800111c:	080012a1 	.word	0x080012a1

    CREATE_TASK(UART_DEBUG_DMA_RX_Task, "DEBUG_RX_Task", 	MIN_STACK_SIZE * 20, 	(void*)UART_DMA_Driver_Get(UART_DEBUG), 1, NULL);
 8001120:	484a      	ldr	r0, [pc, #296]	@ (800124c <OBC_AppInit+0x4cc>)
 8001122:	f001 f8c1 	bl	80022a8 <UART_DMA_Driver_Get>
 8001126:	4603      	mov	r3, r0
 8001128:	2200      	movs	r2, #0
 800112a:	9201      	str	r2, [sp, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	9200      	str	r2, [sp, #0]
 8001130:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001134:	4946      	ldr	r1, [pc, #280]	@ (8001250 <OBC_AppInit+0x4d0>)
 8001136:	4847      	ldr	r0, [pc, #284]	@ (8001254 <OBC_AppInit+0x4d4>)
 8001138:	f010 fbb9 	bl	80118ae <xTaskCreate>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d001      	beq.n	8001146 <OBC_AppInit+0x3c6>
 8001142:	2301      	movs	r3, #1
 8001144:	e07c      	b.n	8001240 <OBC_AppInit+0x4c0>

    CREATE_TASK(UART_EXP_DMA_RX_Task, 	"EXP_RX_Task",	 	MIN_STACK_SIZE * 20, 	(void*)UART_DMA_Driver_Get(UART_EXP), 	1, NULL);
 8001146:	4844      	ldr	r0, [pc, #272]	@ (8001258 <OBC_AppInit+0x4d8>)
 8001148:	f001 f8ae 	bl	80022a8 <UART_DMA_Driver_Get>
 800114c:	4603      	mov	r3, r0
 800114e:	2200      	movs	r2, #0
 8001150:	9201      	str	r2, [sp, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	9200      	str	r2, [sp, #0]
 8001156:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800115a:	4940      	ldr	r1, [pc, #256]	@ (800125c <OBC_AppInit+0x4dc>)
 800115c:	4840      	ldr	r0, [pc, #256]	@ (8001260 <OBC_AppInit+0x4e0>)
 800115e:	f010 fba6 	bl	80118ae <xTaskCreate>
 8001162:	4603      	mov	r3, r0
 8001164:	2b01      	cmp	r3, #1
 8001166:	d001      	beq.n	800116c <OBC_AppInit+0x3ec>
 8001168:	2301      	movs	r3, #1
 800116a:	e069      	b.n	8001240 <OBC_AppInit+0x4c0>

    CREATE_TASK(CLI_Handle_Task, 		"CLI_Handle_Task", 	MIN_STACK_SIZE * 10, 	NULL, 									1, NULL);
 800116c:	2300      	movs	r3, #0
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	2301      	movs	r3, #1
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2300      	movs	r3, #0
 8001176:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800117a:	493a      	ldr	r1, [pc, #232]	@ (8001264 <OBC_AppInit+0x4e4>)
 800117c:	483a      	ldr	r0, [pc, #232]	@ (8001268 <OBC_AppInit+0x4e8>)
 800117e:	f010 fb96 	bl	80118ae <xTaskCreate>
 8001182:	4603      	mov	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d001      	beq.n	800118c <OBC_AppInit+0x40c>
 8001188:	2301      	movs	r3, #1
 800118a:	e059      	b.n	8001240 <OBC_AppInit+0x4c0>

    CREATE_TASK(vTask1_handler, 		"vTask1", 			MIN_STACK_SIZE, 		NULL, 									1, NULL);
 800118c:	2300      	movs	r3, #0
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2301      	movs	r3, #1
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	2280      	movs	r2, #128	@ 0x80
 8001198:	4934      	ldr	r1, [pc, #208]	@ (800126c <OBC_AppInit+0x4ec>)
 800119a:	4835      	ldr	r0, [pc, #212]	@ (8001270 <OBC_AppInit+0x4f0>)
 800119c:	f010 fb87 	bl	80118ae <xTaskCreate>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d001      	beq.n	80011aa <OBC_AppInit+0x42a>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e04a      	b.n	8001240 <OBC_AppInit+0x4c0>

    CREATE_TASK(vTask2_handler, 		"vTask2", 			MIN_STACK_SIZE, 		NULL, 									1, NULL);
 80011aa:	2300      	movs	r3, #0
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	2280      	movs	r2, #128	@ 0x80
 80011b6:	492f      	ldr	r1, [pc, #188]	@ (8001274 <OBC_AppInit+0x4f4>)
 80011b8:	482f      	ldr	r0, [pc, #188]	@ (8001278 <OBC_AppInit+0x4f8>)
 80011ba:	f010 fb78 	bl	80118ae <xTaskCreate>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d001      	beq.n	80011c8 <OBC_AppInit+0x448>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e03b      	b.n	8001240 <OBC_AppInit+0x4c0>

    CREATE_TASK(vTask3_handler, 		"vTask3", 			MIN_STACK_SIZE * 5, 	NULL, 									1, NULL);
 80011c8:	2300      	movs	r3, #0
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	2301      	movs	r3, #1
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80011d6:	4929      	ldr	r1, [pc, #164]	@ (800127c <OBC_AppInit+0x4fc>)
 80011d8:	4829      	ldr	r0, [pc, #164]	@ (8001280 <OBC_AppInit+0x500>)
 80011da:	f010 fb68 	bl	80118ae <xTaskCreate>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d001      	beq.n	80011e8 <OBC_AppInit+0x468>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e02b      	b.n	8001240 <OBC_AppInit+0x4c0>

    CREATE_TASK(UART_USB_DMA_RX_TASK, 	"UART_USB_RX_Task", MIN_STACK_SIZE * 20, 	(void*)UART_DMA_Driver_Get(UART_USB),	1, NULL);
 80011e8:	4826      	ldr	r0, [pc, #152]	@ (8001284 <OBC_AppInit+0x504>)
 80011ea:	f001 f85d 	bl	80022a8 <UART_DMA_Driver_Get>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2200      	movs	r2, #0
 80011f2:	9201      	str	r2, [sp, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	9200      	str	r2, [sp, #0]
 80011f8:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80011fc:	4922      	ldr	r1, [pc, #136]	@ (8001288 <OBC_AppInit+0x508>)
 80011fe:	4823      	ldr	r0, [pc, #140]	@ (800128c <OBC_AppInit+0x50c>)
 8001200:	f010 fb55 	bl	80118ae <xTaskCreate>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d001      	beq.n	800120e <OBC_AppInit+0x48e>
 800120a:	2301      	movs	r3, #1
 800120c:	e018      	b.n	8001240 <OBC_AppInit+0x4c0>

    CREATE_TASK(vWatchdogTask, 			"Watchdog_Task", 	MIN_STACK_SIZE, 		NULL, 									1, NULL);
 800120e:	2300      	movs	r3, #0
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	2301      	movs	r3, #1
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2300      	movs	r3, #0
 8001218:	2280      	movs	r2, #128	@ 0x80
 800121a:	491d      	ldr	r1, [pc, #116]	@ (8001290 <OBC_AppInit+0x510>)
 800121c:	481d      	ldr	r0, [pc, #116]	@ (8001294 <OBC_AppInit+0x514>)
 800121e:	f010 fb46 	bl	80118ae <xTaskCreate>
 8001222:	4603      	mov	r3, r0
 8001224:	2b01      	cmp	r3, #1
 8001226:	d001      	beq.n	800122c <OBC_AppInit+0x4ac>
 8001228:	2301      	movs	r3, #1
 800122a:	e009      	b.n	8001240 <OBC_AppInit+0x4c0>

    vTaskDelay(pdMS_TO_TICKS(1));
 800122c:	2001      	movs	r0, #1
 800122e:	f010 fd31 	bl	8011c94 <vTaskDelay>

	Shield_Init(&auth_usb, writeChar_auth_USB);
 8001232:	4919      	ldr	r1, [pc, #100]	@ (8001298 <OBC_AppInit+0x518>)
 8001234:	4819      	ldr	r0, [pc, #100]	@ (800129c <OBC_AppInit+0x51c>)
 8001236:	f001 fcd9 	bl	8002bec <Shield_Init>

	Dmesg_Init();
 800123a:	f005 fd9d 	bl	8006d78 <Dmesg_Init>

    return E_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8001246:	46bd      	mov	sp, r7
 8001248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124a:	bf00      	nop
 800124c:	40004400 	.word	0x40004400
 8001250:	08023410 	.word	0x08023410
 8001254:	080014fd 	.word	0x080014fd
 8001258:	40007800 	.word	0x40007800
 800125c:	08023420 	.word	0x08023420
 8001260:	08001461 	.word	0x08001461
 8001264:	0802342c 	.word	0x0802342c
 8001268:	080012ed 	.word	0x080012ed
 800126c:	0802343c 	.word	0x0802343c
 8001270:	080015f9 	.word	0x080015f9
 8001274:	08023444 	.word	0x08023444
 8001278:	0800162d 	.word	0x0800162d
 800127c:	0802344c 	.word	0x0802344c
 8001280:	08001661 	.word	0x08001661
 8001284:	40011000 	.word	0x40011000
 8001288:	08023454 	.word	0x08023454
 800128c:	08001351 	.word	0x08001351
 8001290:	08023468 	.word	0x08023468
 8001294:	080016a5 	.word	0x080016a5
 8001298:	08000cc1 	.word	0x08000cc1
 800129c:	24014a70 	.word	0x24014a70

080012a0 <vSoft_RTC_Task>:

/*************************************************
 *               TASK LIST                       *
 *************************************************/
void vSoft_RTC_Task(void *pvParameters)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    static uint32_t countingSyncTime = 1;

    while(1)
    {
        Utils_SoftTime_Update();
 80012a8:	f008 fd5e 	bl	8009d68 <Utils_SoftTime_Update>
        countingSyncTime++;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <vSoft_RTC_Task+0x44>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a0c      	ldr	r2, [pc, #48]	@ (80012e4 <vSoft_RTC_Task+0x44>)
 80012b4:	6013      	str	r3, [r2, #0]
        if(countingSyncTime > 7200)
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <vSoft_RTC_Task+0x44>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f5b3 5fe1 	cmp.w	r3, #7200	@ 0x1c20
 80012be:	d90c      	bls.n	80012da <vSoft_RTC_Task+0x3a>
        {
            countingSyncTime = 0;
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <vSoft_RTC_Task+0x44>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
            if(Utils_SoftTime_Sync() == E_OK)
 80012c6:	f009 f8f5 	bl	800a4b4 <Utils_SoftTime_Sync>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d104      	bne.n	80012da <vSoft_RTC_Task+0x3a>
            {
                SYSLOG_NOTICE("[Sync Time!]");
 80012d0:	2200      	movs	r2, #0
 80012d2:	4905      	ldr	r1, [pc, #20]	@ (80012e8 <vSoft_RTC_Task+0x48>)
 80012d4:	2002      	movs	r0, #2
 80012d6:	f007 f86f 	bl	80083b8 <syslog_log>
            }
        }

        vTaskDelay(1000);
 80012da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012de:	f010 fcd9 	bl	8011c94 <vTaskDelay>
        Utils_SoftTime_Update();
 80012e2:	e7e1      	b.n	80012a8 <vSoft_RTC_Task+0x8>
 80012e4:	24014728 	.word	0x24014728
 80012e8:	08023478 	.word	0x08023478

080012ec <CLI_Handle_Task>:
    }
}

void CLI_Handle_Task(void *pvParameters)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	while (1)
	{
    	ShieldAuthState_t auth_state;
        embeddedCliProcess(getUartCm4CliPointer());
 80012f4:	f003 ff32 	bl	800515c <getUartCm4CliPointer>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 f847 	bl	800538e <embeddedCliProcess>

    	auth_state = Shield_GetState(&auth_usb);
 8001300:	4811      	ldr	r0, [pc, #68]	@ (8001348 <CLI_Handle_Task+0x5c>)
 8001302:	f001 ff07 	bl	8003114 <Shield_GetState>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
    	if(auth_state == AUTH_ADMIN || auth_state == AUTH_USER){
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d002      	beq.n	8001316 <CLI_Handle_Task+0x2a>
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b04      	cmp	r3, #4
 8001314:	d113      	bne.n	800133e <CLI_Handle_Task+0x52>
        	if(auth_usb.initreset == 1){
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <CLI_Handle_Task+0x5c>)
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d109      	bne.n	8001332 <CLI_Handle_Task+0x46>
                embeddedCliPrint(getUsbCdcCliPointer(), "");
 800131e:	f003 ff11 	bl	8005144 <getUsbCdcCliPointer>
 8001322:	4603      	mov	r3, r0
 8001324:	4909      	ldr	r1, [pc, #36]	@ (800134c <CLI_Handle_Task+0x60>)
 8001326:	4618      	mov	r0, r3
 8001328:	f004 f8c2 	bl	80054b0 <embeddedCliPrint>
                auth_usb.initreset = 0;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <CLI_Handle_Task+0x5c>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
        	}
			embeddedCliProcess(getUsbCdcCliPointer());
 8001332:	f003 ff07 	bl	8005144 <getUsbCdcCliPointer>
 8001336:	4603      	mov	r3, r0
 8001338:	4618      	mov	r0, r3
 800133a:	f004 f828 	bl	800538e <embeddedCliProcess>
//			embeddedCliProcess(getUartCm4CliPointer());
    	}

		vTaskDelay(500);
 800133e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001342:	f010 fca7 	bl	8011c94 <vTaskDelay>
	{
 8001346:	e7d5      	b.n	80012f4 <CLI_Handle_Task+0x8>
 8001348:	24014a70 	.word	0x24014a70
 800134c:	08023488 	.word	0x08023488

08001350 <UART_USB_DMA_RX_TASK>:
	}
}

void UART_USB_DMA_RX_TASK(void *pvParameters)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = (UART_DMA_Driver_t *)pvParameters;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	617b      	str	r3, [r7, #20]
    for (;;)
    {
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	4618      	mov	r0, r3
 8001366:	f00f fdd7 	bl	8010f18 <xQueueSemaphoreTake>
 800136a:	4603      	mov	r3, r0
 800136c:	2b01      	cmp	r3, #1
 800136e:	d16d      	bne.n	800144c <UART_USB_DMA_RX_TASK+0xfc>
        {
            int c;
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 8001370:	e062      	b.n	8001438 <UART_USB_DMA_RX_TASK+0xe8>
            {
                ForwardMode_t mode = ForwardMode_Get();
 8001372:	f7ff fc1d 	bl	8000bb0 <ForwardMode_Get>
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
                if (mode == FORWARD_MODE_USB) {
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d115      	bne.n	80013ac <UART_USB_DMA_RX_TASK+0x5c>
                    // Forward mode: USART2 (rx) - UART7 (tx)
//                    UART_Driver_Write(UART7, (uint8_t)c);
                    UART_Driver_Write(UART_EXP, (uint8_t)c);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4619      	mov	r1, r3
 8001386:	4833      	ldr	r0, [pc, #204]	@ (8001454 <UART_USB_DMA_RX_TASK+0x104>)
 8001388:	f001 f96e 	bl	8002668 <UART_Driver_Write>

                    if (ForwardMode_ProcessReceivedByte((uint8_t)c)) {
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fc19 	bl	8000bc8 <ForwardMode_ProcessReceivedByte>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d04d      	beq.n	8001438 <UART_USB_DMA_RX_TASK+0xe8>
                        embeddedCliPrint(getUsbCdcCliPointer(), "Forward mode disabled due to 10 consecutive '\\'.");
 800139c:	f003 fed2 	bl	8005144 <getUsbCdcCliPointer>
 80013a0:	4603      	mov	r3, r0
 80013a2:	492d      	ldr	r1, [pc, #180]	@ (8001458 <UART_USB_DMA_RX_TASK+0x108>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 f883 	bl	80054b0 <embeddedCliPrint>
 80013aa:	e045      	b.n	8001438 <UART_USB_DMA_RX_TASK+0xe8>
                    }
                } else if (mode == FORWARD_MODE_LISTEN_USB) {
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d11e      	bne.n	80013f0 <UART_USB_DMA_RX_TASK+0xa0>
                    if (ForwardMode_ProcessReceivedByte((uint8_t)c)) {
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fc06 	bl	8000bc8 <ForwardMode_ProcessReceivedByte>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <UART_USB_DMA_RX_TASK+0x80>
                        embeddedCliPrint(getUsbCdcCliPointer(), "Forward mode disabled due to 10 consecutive '\\'.");
 80013c2:	f003 febf 	bl	8005144 <getUsbCdcCliPointer>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4923      	ldr	r1, [pc, #140]	@ (8001458 <UART_USB_DMA_RX_TASK+0x108>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 f870 	bl	80054b0 <embeddedCliPrint>
                    }
                    embeddedCliReceiveChar(getUsbCdcCliPointer(), (char)c);
 80013d0:	f003 feb8 	bl	8005144 <getUsbCdcCliPointer>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	4610      	mov	r0, r2
 80013de:	f003 ffb3 	bl	8005348 <embeddedCliReceiveChar>
                    embeddedCliProcess(getUsbCdcCliPointer());
 80013e2:	f003 feaf 	bl	8005144 <getUsbCdcCliPointer>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 ffd0 	bl	800538e <embeddedCliProcess>
 80013ee:	e023      	b.n	8001438 <UART_USB_DMA_RX_TASK+0xe8>
                } else {
                    // Mode NORMAL: CLI
                	ShieldAuthState_t auth_state = Shield_GetState(&auth_usb);
 80013f0:	481a      	ldr	r0, [pc, #104]	@ (800145c <UART_USB_DMA_RX_TASK+0x10c>)
 80013f2:	f001 fe8f 	bl	8003114 <Shield_GetState>
 80013f6:	4603      	mov	r3, r0
 80013f8:	73bb      	strb	r3, [r7, #14]
                	if(auth_state == AUTH_ADMIN || auth_state == AUTH_USER){
 80013fa:	7bbb      	ldrb	r3, [r7, #14]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d002      	beq.n	8001406 <UART_USB_DMA_RX_TASK+0xb6>
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	2b04      	cmp	r3, #4
 8001404:	d112      	bne.n	800142c <UART_USB_DMA_RX_TASK+0xdc>
                		Shield_ResetTimer(&auth_usb);
 8001406:	4815      	ldr	r0, [pc, #84]	@ (800145c <UART_USB_DMA_RX_TASK+0x10c>)
 8001408:	f001 fbde 	bl	8002bc8 <Shield_ResetTimer>
                        embeddedCliReceiveChar(getUsbCdcCliPointer(), (char)c);
 800140c:	f003 fe9a 	bl	8005144 <getUsbCdcCliPointer>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4619      	mov	r1, r3
 8001418:	4610      	mov	r0, r2
 800141a:	f003 ff95 	bl	8005348 <embeddedCliReceiveChar>
                        embeddedCliProcess(getUsbCdcCliPointer());
 800141e:	f003 fe91 	bl	8005144 <getUsbCdcCliPointer>
 8001422:	4603      	mov	r3, r0
 8001424:	4618      	mov	r0, r3
 8001426:	f003 ffb2 	bl	800538e <embeddedCliProcess>
 800142a:	e005      	b.n	8001438 <UART_USB_DMA_RX_TASK+0xe8>
                	}else{
                		Shield_ReceiveChar(&auth_usb, (char)c);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4619      	mov	r1, r3
 8001432:	480a      	ldr	r0, [pc, #40]	@ (800145c <UART_USB_DMA_RX_TASK+0x10c>)
 8001434:	f001 fcea 	bl	8002e0c <Shield_ReceiveChar>
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f001 fa4d 	bl	80028dc <UART_DMA_Driver_Read>
 8001442:	6138      	str	r0, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144a:	d192      	bne.n	8001372 <UART_USB_DMA_RX_TASK+0x22>
                	}
                }
            }
        }

        vTaskDelay(pdMS_TO_TICKS(1));
 800144c:	2001      	movs	r0, #1
 800144e:	f010 fc21 	bl	8011c94 <vTaskDelay>
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 8001452:	e783      	b.n	800135c <UART_USB_DMA_RX_TASK+0xc>
 8001454:	40007800 	.word	0x40007800
 8001458:	0802348c 	.word	0x0802348c
 800145c:	24014a70 	.word	0x24014a70

08001460 <UART_EXP_DMA_RX_Task>:
    }
}

void UART_EXP_DMA_RX_Task(void *pvParameters)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = (UART_DMA_Driver_t *)pvParameters;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	617b      	str	r3, [r7, #20]
    for (;;)
    {
        if (xSemaphoreTake(driver->rxSemaphore, 0) == pdTRUE)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f00f fd50 	bl	8010f18 <xQueueSemaphoreTake>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d135      	bne.n	80014ea <UART_EXP_DMA_RX_Task+0x8a>
        {
            int c;
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 800147e:	e02a      	b.n	80014d6 <UART_EXP_DMA_RX_Task+0x76>
            {
                ForwardMode_t mode = ForwardMode_Get();
 8001480:	f7ff fb96 	bl	8000bb0 <ForwardMode_Get>
 8001484:	4603      	mov	r3, r0
 8001486:	73fb      	strb	r3, [r7, #15]
                if (mode == FORWARD_MODE_UART) {
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d106      	bne.n	800149c <UART_EXP_DMA_RX_Task+0x3c>
                    // Forward mode (CM4): UART7 RX -> UART_DEBUG
                    UART_Driver_Write(UART_DEBUG, (uint8_t)c);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4619      	mov	r1, r3
 8001494:	4817      	ldr	r0, [pc, #92]	@ (80014f4 <UART_EXP_DMA_RX_Task+0x94>)
 8001496:	f001 f8e7 	bl	8002668 <UART_Driver_Write>
 800149a:	e01c      	b.n	80014d6 <UART_EXP_DMA_RX_Task+0x76>
//                    embeddedCliReceiveChar(getUartCm4CliPointer(), (char)c);
                } else if (mode == FORWARD_MODE_USB) {
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d106      	bne.n	80014b0 <UART_EXP_DMA_RX_Task+0x50>
                    // Forward mode (USB): UART7 -> to CDC
                    UART_Driver_Write(UART_USB, (uint8_t)c);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4619      	mov	r1, r3
 80014a8:	4813      	ldr	r0, [pc, #76]	@ (80014f8 <UART_EXP_DMA_RX_Task+0x98>)
 80014aa:	f001 f8dd 	bl	8002668 <UART_Driver_Write>
 80014ae:	e012      	b.n	80014d6 <UART_EXP_DMA_RX_Task+0x76>
                } else if (mode == FORWARD_MODE_LISTEN_CM4) {
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d106      	bne.n	80014c4 <UART_EXP_DMA_RX_Task+0x64>
                    // Listen mode (CM4): UART7 RX -> UART_DEBUG
                    UART_Driver_Write(UART_DEBUG, (uint8_t)c);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4619      	mov	r1, r3
 80014bc:	480d      	ldr	r0, [pc, #52]	@ (80014f4 <UART_EXP_DMA_RX_Task+0x94>)
 80014be:	f001 f8d3 	bl	8002668 <UART_Driver_Write>
 80014c2:	e008      	b.n	80014d6 <UART_EXP_DMA_RX_Task+0x76>
                } else if (mode == FORWARD_MODE_LISTEN_USB) {
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d105      	bne.n	80014d6 <UART_EXP_DMA_RX_Task+0x76>
                    // Listen mode (USB):UART7 RX -> CDC
                    UART_Driver_Write(UART_USB, (uint8_t)c);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <UART_EXP_DMA_RX_Task+0x98>)
 80014d2:	f001 f8c9 	bl	8002668 <UART_Driver_Write>
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 f9fe 	bl	80028dc <UART_DMA_Driver_Read>
 80014e0:	6138      	str	r0, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e8:	d1ca      	bne.n	8001480 <UART_EXP_DMA_RX_Task+0x20>
//                        embeddedCliPrint(getUsbCdcCliPointer(), "Listen/Forward mode disabled due to 10 consecutive '\\'.");
//                    }
//                }
            }
        }
        vTaskDelay(pdMS_TO_TICKS(1));
 80014ea:	2001      	movs	r0, #1
 80014ec:	f010 fbd2 	bl	8011c94 <vTaskDelay>
        if (xSemaphoreTake(driver->rxSemaphore, 0) == pdTRUE)
 80014f0:	e7bc      	b.n	800146c <UART_EXP_DMA_RX_Task+0xc>
 80014f2:	bf00      	nop
 80014f4:	40004400 	.word	0x40004400
 80014f8:	40011000 	.word	0x40011000

080014fc <UART_DEBUG_DMA_RX_Task>:
    }
}


void UART_DEBUG_DMA_RX_Task(void *pvParameters)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = (UART_DMA_Driver_t *)pvParameters;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	617b      	str	r3, [r7, #20]
    for (;;)
    {
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	4618      	mov	r0, r3
 8001512:	f00f fd01 	bl	8010f18 <xQueueSemaphoreTake>
 8001516:	4603      	mov	r3, r0
 8001518:	2b01      	cmp	r3, #1
 800151a:	d158      	bne.n	80015ce <UART_DEBUG_DMA_RX_Task+0xd2>
        {
            int c;
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 800151c:	e04d      	b.n	80015ba <UART_DEBUG_DMA_RX_Task+0xbe>
            {
                ForwardMode_t mode = ForwardMode_Get();
 800151e:	f7ff fb47 	bl	8000bb0 <ForwardMode_Get>
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]
                if (mode == FORWARD_MODE_UART) {
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d115      	bne.n	8001558 <UART_DEBUG_DMA_RX_Task+0x5c>
                    // Forward mode: USART2 (rx) - UART7 (tx)
//                    UART_Driver_Write(UART7, (uint8_t)c);
                    UART_Driver_Write(UART_EXP, (uint8_t)c);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	4829      	ldr	r0, [pc, #164]	@ (80015d8 <UART_DEBUG_DMA_RX_Task+0xdc>)
 8001534:	f001 f898 	bl	8002668 <UART_Driver_Write>

                    if (ForwardMode_ProcessReceivedByte((uint8_t)c)) {
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fb43 	bl	8000bc8 <ForwardMode_ProcessReceivedByte>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d038      	beq.n	80015ba <UART_DEBUG_DMA_RX_Task+0xbe>
                        embeddedCliPrint(getUartCm4CliPointer(), "Forward mode disabled due to 10 consecutive '\\'.");
 8001548:	f003 fe08 	bl	800515c <getUartCm4CliPointer>
 800154c:	4603      	mov	r3, r0
 800154e:	4923      	ldr	r1, [pc, #140]	@ (80015dc <UART_DEBUG_DMA_RX_Task+0xe0>)
 8001550:	4618      	mov	r0, r3
 8001552:	f003 ffad 	bl	80054b0 <embeddedCliPrint>
 8001556:	e030      	b.n	80015ba <UART_DEBUG_DMA_RX_Task+0xbe>
                    }
                } else if (mode == FORWARD_MODE_LISTEN_CM4) {
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d11e      	bne.n	800159c <UART_DEBUG_DMA_RX_Task+0xa0>
                    if (ForwardMode_ProcessReceivedByte((uint8_t)c)) {
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb30 	bl	8000bc8 <ForwardMode_ProcessReceivedByte>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <UART_DEBUG_DMA_RX_Task+0x80>
                        embeddedCliPrint(getUartCm4CliPointer(), "Forward mode disabled due to 10 consecutive '\\'.");
 800156e:	f003 fdf5 	bl	800515c <getUartCm4CliPointer>
 8001572:	4603      	mov	r3, r0
 8001574:	4919      	ldr	r1, [pc, #100]	@ (80015dc <UART_DEBUG_DMA_RX_Task+0xe0>)
 8001576:	4618      	mov	r0, r3
 8001578:	f003 ff9a 	bl	80054b0 <embeddedCliPrint>
                    }
                    embeddedCliReceiveChar(getUartCm4CliPointer(), (char)c);
 800157c:	f003 fdee 	bl	800515c <getUartCm4CliPointer>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f003 fedd 	bl	8005348 <embeddedCliReceiveChar>
                    embeddedCliProcess(getUartCm4CliPointer());
 800158e:	f003 fde5 	bl	800515c <getUartCm4CliPointer>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fefa 	bl	800538e <embeddedCliProcess>
 800159a:	e00e      	b.n	80015ba <UART_DEBUG_DMA_RX_Task+0xbe>
                } else {
                    // Mode NORMAL: CLI
                    embeddedCliReceiveChar(getUartCm4CliPointer(), (char)c);
 800159c:	f003 fdde 	bl	800515c <getUartCm4CliPointer>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4619      	mov	r1, r3
 80015a8:	4610      	mov	r0, r2
 80015aa:	f003 fecd 	bl	8005348 <embeddedCliReceiveChar>
                    embeddedCliProcess(getUartCm4CliPointer());
 80015ae:	f003 fdd5 	bl	800515c <getUartCm4CliPointer>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 feea 	bl	800538e <embeddedCliProcess>
            while ((c = UART_DMA_Driver_Read(driver->uart)) != -1)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 f98c 	bl	80028dc <UART_DMA_Driver_Read>
 80015c4:	6138      	str	r0, [r7, #16]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d1a7      	bne.n	800151e <UART_DEBUG_DMA_RX_Task+0x22>
                }
            }
        }

        vTaskDelay(pdMS_TO_TICKS(1));
 80015ce:	2001      	movs	r0, #1
 80015d0:	f010 fb60 	bl	8011c94 <vTaskDelay>
        if (xSemaphoreTake(driver->rxSemaphore, portMAX_DELAY) == pdTRUE)
 80015d4:	e798      	b.n	8001508 <UART_DEBUG_DMA_RX_Task+0xc>
 80015d6:	bf00      	nop
 80015d8:	40007800 	.word	0x40007800
 80015dc:	0802348c 	.word	0x0802348c

080015e0 <MIN_Process_Task>:
    }
}


void MIN_Process_Task(void *pvParameters)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	while(1){
		MIN_Processing();
 80015e8:	f006 fab6 	bl	8007b58 <MIN_Processing>
	    vTaskDelay(pdMS_TO_TICKS(1));
 80015ec:	2001      	movs	r0, #1
 80015ee:	f010 fb51 	bl	8011c94 <vTaskDelay>
		MIN_Processing();
 80015f2:	bf00      	nop
 80015f4:	e7f8      	b.n	80015e8 <MIN_Process_Task+0x8>
	...

080015f8 <vTask1_handler>:
	}
}

void vTask1_handler(void *pvParameters)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	while (1)
	{
		GPIO_SetLow(LED0_Port, LED0);
 8001600:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001604:	4808      	ldr	r0, [pc, #32]	@ (8001628 <vTask1_handler+0x30>)
 8001606:	f7ff fb4c 	bl	8000ca2 <LL_GPIO_ResetOutputPin>
		vTaskDelay(1000);
 800160a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800160e:	f010 fb41 	bl	8011c94 <vTaskDelay>

		GPIO_SetHigh(LED0_Port, LED0);
 8001612:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001616:	4804      	ldr	r0, [pc, #16]	@ (8001628 <vTask1_handler+0x30>)
 8001618:	f7ff fb35 	bl	8000c86 <LL_GPIO_SetOutputPin>
		vTaskDelay(1000);
 800161c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001620:	f010 fb38 	bl	8011c94 <vTaskDelay>
		GPIO_SetLow(LED0_Port, LED0);
 8001624:	bf00      	nop
 8001626:	e7eb      	b.n	8001600 <vTask1_handler+0x8>
 8001628:	58020c00 	.word	0x58020c00

0800162c <vTask2_handler>:
	}
}

void vTask2_handler(void *pvParameters)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	while (1)
	{
		GPIO_SetHigh(LED1_Port, LED1);
 8001634:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001638:	4808      	ldr	r0, [pc, #32]	@ (800165c <vTask2_handler+0x30>)
 800163a:	f7ff fb24 	bl	8000c86 <LL_GPIO_SetOutputPin>
		vTaskDelay(1000);
 800163e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001642:	f010 fb27 	bl	8011c94 <vTaskDelay>
		GPIO_SetLow(LED1_Port, LED1);
 8001646:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800164a:	4804      	ldr	r0, [pc, #16]	@ (800165c <vTask2_handler+0x30>)
 800164c:	f7ff fb29 	bl	8000ca2 <LL_GPIO_ResetOutputPin>
		vTaskDelay(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001654:	f010 fb1e 	bl	8011c94 <vTaskDelay>
		GPIO_SetHigh(LED1_Port, LED1);
 8001658:	bf00      	nop
 800165a:	e7eb      	b.n	8001634 <vTask2_handler+0x8>
 800165c:	58020c00 	.word	0x58020c00

08001660 <vTask3_handler>:
	}
}

void vTask3_handler(void *pvParameters)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b092      	sub	sp, #72	@ 0x48
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	static uint8_t counting = 0;
	while (1)
	{
		char buffer[64];
	    snprintf(buffer, sizeof(buffer), "60s Cycle Heartbeat: %d", counting++);
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <vTask3_handler+0x3c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	b2d1      	uxtb	r1, r2
 8001670:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <vTask3_handler+0x3c>)
 8001672:	7011      	strb	r1, [r2, #0]
 8001674:	f107 0008 	add.w	r0, r7, #8
 8001678:	4a09      	ldr	r2, [pc, #36]	@ (80016a0 <vTask3_handler+0x40>)
 800167a:	2140      	movs	r1, #64	@ 0x40
 800167c:	f020 fbca 	bl	8021e14 <sniprintf>
		SYSLOG_NOTICE(buffer);
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	2002      	movs	r0, #2
 800168a:	f006 fe95 	bl	80083b8 <syslog_log>
		vTaskDelay(60000);
 800168e:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001692:	f010 faff 	bl	8011c94 <vTaskDelay>
	{
 8001696:	bf00      	nop
 8001698:	e7e6      	b.n	8001668 <vTask3_handler+0x8>
 800169a:	bf00      	nop
 800169c:	24015f28 	.word	0x24015f28
 80016a0:	080234c0 	.word	0x080234c0

080016a4 <vWatchdogTask>:
	}
}

void vWatchdogTask(void *pvParameters)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
    for (;;) {
        Watchdog_Device_Update();
 80016ac:	f007 f9b4 	bl	8008a18 <Watchdog_Device_Update>

        if(Watchdog_Device_GetState() == WATCHDOG_STATE_HIGH)
 80016b0:	f007 f9ce 	bl	8008a50 <Watchdog_Device_GetState>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d103      	bne.n	80016c2 <vWatchdogTask+0x1e>
        {
            vTaskDelay(pdMS_TO_TICKS(HIGH_PERIOD));
 80016ba:	20c8      	movs	r0, #200	@ 0xc8
 80016bc:	f010 faea 	bl	8011c94 <vTaskDelay>
 80016c0:	e7f4      	b.n	80016ac <vWatchdogTask+0x8>
        }
        else
        {
            vTaskDelay(pdMS_TO_TICKS(LOW_PERIOD));
 80016c2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80016c6:	f010 fae5 	bl	8011c94 <vTaskDelay>
        Watchdog_Device_Update();
 80016ca:	e7ef      	b.n	80016ac <vWatchdogTask+0x8>

080016cc <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(const I2C_TypeDef *I2Cx)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <LL_I2C_IsActiveFlag_TXE+0x18>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <LL_I2C_IsActiveFlag_TXE+0x1a>
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b02      	cmp	r3, #2
 8001704:	d101      	bne.n	800170a <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b04      	cmp	r3, #4
 800172a:	d101      	bne.n	8001730 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_I2C_IsActiveFlag_NACK>:
  * @rmtoll ISR          NACKF         LL_I2C_IsActiveFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_NACK(const I2C_TypeDef *I2Cx)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b10      	cmp	r3, #16
 8001750:	d101      	bne.n	8001756 <LL_I2C_IsActiveFlag_NACK+0x18>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <LL_I2C_IsActiveFlag_NACK+0x1a>
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(const I2C_TypeDef *I2Cx)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001778:	d101      	bne.n	800177e <LL_I2C_IsActiveFlag_BUSY+0x1a>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <LL_I2C_IsActiveFlag_BUSY+0x1c>
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	605a      	str	r2, [r3, #4]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80017ce:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	041b      	lsls	r3, r3, #16
 80017d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80017d8:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	4313      	orrs	r3, r2
 80017e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ee:	0d5b      	lsrs	r3, r3, #21
 80017f0:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <LL_I2C_HandleTransfer+0x5c>)
 80017f6:	430b      	orrs	r3, r1
 80017f8:	43db      	mvns	r3, r3
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	431a      	orrs	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	03ff7bff 	.word	0x03ff7bff

08001814 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	b2db      	uxtb	r3, r3
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <I2C_Write>:
#include "reinit.h"

#define I2C_TIMEOUT     10      /* 10ms */

Std_ReturnType I2C_Write(LL_I2C_HandleTypeDef *i2c, uint8_t Slave_address, uint8_t Reg_address, uint8_t *pData, uint8_t Length)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	72fb      	strb	r3, [r7, #11]
 800185a:	4613      	mov	r3, r2
 800185c:	72bb      	strb	r3, [r7, #10]
    uint32_t tickstart;

    tickstart = Utils_GetTick();
 800185e:	f008 ff9d 	bl	800a79c <Utils_GetTick>
 8001862:	6138      	str	r0, [r7, #16]
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8001864:	e00d      	b.n	8001882 <I2C_Write+0x36>
    {
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8001866:	f008 ff99 	bl	800a79c <Utils_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b0a      	cmp	r3, #10
 8001872:	d906      	bls.n	8001882 <I2C_Write+0x36>
        	I2C_ReInit(i2c->Instance);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f015 fa01 	bl	8016c80 <I2C_ReInit>
            return E_BUSY;
 800187e:	2302      	movs	r3, #2
 8001880:	e096      	b.n	80019b0 <I2C_Write+0x164>
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff6c 	bl	8001764 <LL_I2C_IsActiveFlag_BUSY>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1e9      	bne.n	8001866 <I2C_Write+0x1a>
        }
    }

    LL_I2C_HandleTransfer(i2c->Instance, (Slave_address << 1), LL_I2C_ADDRSLAVE_7BIT, Length + 1,
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	0059      	lsls	r1, r3, #1
 800189a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800189e:	3301      	adds	r3, #1
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b45      	ldr	r3, [pc, #276]	@ (80019b8 <I2C_Write+0x16c>)
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	4613      	mov	r3, r2
 80018ae:	2200      	movs	r2, #0
 80018b0:	f7ff ff80 	bl	80017b4 <LL_I2C_HandleTransfer>
                          LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);

    tickstart = Utils_GetTick();
 80018b4:	f008 ff72 	bl	800a79c <Utils_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 80018ba:	e017      	b.n	80018ec <I2C_Write+0xa0>
    {
        if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff3c 	bl	800173e <LL_I2C_IsActiveFlag_NACK>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <I2C_Write+0x84>
            return E_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e06f      	b.n	80019b0 <I2C_Write+0x164>
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 80018d0:	f008 ff64 	bl	800a79c <Utils_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b0a      	cmp	r3, #10
 80018dc:	d906      	bls.n	80018ec <I2C_Write+0xa0>
        	I2C_ReInit(i2c->Instance);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f015 f9cc 	bl	8016c80 <I2C_ReInit>
            return E_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e061      	b.n	80019b0 <I2C_Write+0x164>
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fefe 	bl	80016f2 <LL_I2C_IsActiveFlag_TXIS>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0df      	beq.n	80018bc <I2C_Write+0x70>
        }
    }
    LL_I2C_TransmitData8(i2c->Instance, Reg_address);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	7aba      	ldrb	r2, [r7, #10]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff92 	bl	800182e <LL_I2C_TransmitData8>

    for(uint8_t i = 0; i < Length; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	75fb      	strb	r3, [r7, #23]
 800190e:	e02f      	b.n	8001970 <I2C_Write+0x124>
    {
        tickstart = Utils_GetTick();
 8001910:	f008 ff44 	bl	800a79c <Utils_GetTick>
 8001914:	6138      	str	r0, [r7, #16]
        while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8001916:	e017      	b.n	8001948 <I2C_Write+0xfc>
        {
            if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff0e 	bl	800173e <LL_I2C_IsActiveFlag_NACK>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <I2C_Write+0xe0>
                return E_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e041      	b.n	80019b0 <I2C_Write+0x164>
            if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 800192c:	f008 ff36 	bl	800a79c <Utils_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b0a      	cmp	r3, #10
 8001938:	d906      	bls.n	8001948 <I2C_Write+0xfc>
            	I2C_ReInit(i2c->Instance);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f015 f99e 	bl	8016c80 <I2C_ReInit>
                return E_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e033      	b.n	80019b0 <I2C_Write+0x164>
        while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fed0 	bl	80016f2 <LL_I2C_IsActiveFlag_TXIS>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0df      	beq.n	8001918 <I2C_Write+0xcc>
            }
        }
        LL_I2C_TransmitData8(i2c->Instance, pData[i]);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff ff62 	bl	800182e <LL_I2C_TransmitData8>
    for(uint8_t i = 0; i < Length; i++)
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	3301      	adds	r3, #1
 800196e:	75fb      	strb	r3, [r7, #23]
 8001970:	7dfa      	ldrb	r2, [r7, #23]
 8001972:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001976:	429a      	cmp	r2, r3
 8001978:	d3ca      	bcc.n	8001910 <I2C_Write+0xc4>
    }

    tickstart = Utils_GetTick();
 800197a:	f008 ff0f 	bl	800a79c <Utils_GetTick>
 800197e:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 8001980:	e00d      	b.n	800199e <I2C_Write+0x152>
    {
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8001982:	f008 ff0b 	bl	800a79c <Utils_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b0a      	cmp	r3, #10
 800198e:	d906      	bls.n	800199e <I2C_Write+0x152>
        	I2C_ReInit(i2c->Instance);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f015 f973 	bl	8016c80 <I2C_ReInit>
            return E_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e008      	b.n	80019b0 <I2C_Write+0x164>
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fe92 	bl	80016cc <LL_I2C_IsActiveFlag_TXE>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0e9      	beq.n	8001982 <I2C_Write+0x136>
        }
    }
    return E_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	80002000 	.word	0x80002000

080019bc <I2C_Read>:

Std_ReturnType I2C_Read(LL_I2C_HandleTypeDef *i2c, uint8_t Slave_address, uint8_t Reg_address,
                                  uint8_t *pData, uint8_t Length)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b089      	sub	sp, #36	@ 0x24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	460b      	mov	r3, r1
 80019c8:	72fb      	strb	r3, [r7, #11]
 80019ca:	4613      	mov	r3, r2
 80019cc:	72bb      	strb	r3, [r7, #10]
    uint32_t tickstart;

    tickstart = Utils_GetTick();
 80019ce:	f008 fee5 	bl	800a79c <Utils_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 80019d4:	e00d      	b.n	80019f2 <I2C_Read+0x36>
    {
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 80019d6:	f008 fee1 	bl	800a79c <Utils_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b0a      	cmp	r3, #10
 80019e2:	d906      	bls.n	80019f2 <I2C_Read+0x36>
        	I2C_ReInit(i2c->Instance);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f015 f949 	bl	8016c80 <I2C_ReInit>
            return E_BUSY;
 80019ee:	2302      	movs	r3, #2
 80019f0:	e0b8      	b.n	8001b64 <I2C_Read+0x1a8>
    while(LL_I2C_IsActiveFlag_BUSY(i2c->Instance))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff feb4 	bl	8001764 <LL_I2C_IsActiveFlag_BUSY>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1e9      	bne.n	80019d6 <I2C_Read+0x1a>
        }
    }

    LL_I2C_HandleTransfer(i2c->Instance, (Slave_address << 1), LL_I2C_ADDRSLAVE_7BIT, 1,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	0059      	lsls	r1, r3, #1
 8001a0a:	4b58      	ldr	r3, [pc, #352]	@ (8001b6c <I2C_Read+0x1b0>)
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2301      	movs	r3, #1
 8001a14:	2200      	movs	r2, #0
 8001a16:	f7ff fecd 	bl	80017b4 <LL_I2C_HandleTransfer>
                          LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);

    tickstart = Utils_GetTick();
 8001a1a:	f008 febf 	bl	800a79c <Utils_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8001a20:	e017      	b.n	8001a52 <I2C_Read+0x96>
    {
        if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fe89 	bl	800173e <LL_I2C_IsActiveFlag_NACK>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <I2C_Read+0x7a>
            return E_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e096      	b.n	8001b64 <I2C_Read+0x1a8>
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8001a36:	f008 feb1 	bl	800a79c <Utils_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b0a      	cmp	r3, #10
 8001a42:	d906      	bls.n	8001a52 <I2C_Read+0x96>
        	I2C_ReInit(i2c->Instance);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f015 f919 	bl	8016c80 <I2C_ReInit>
            return E_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e088      	b.n	8001b64 <I2C_Read+0x1a8>
    while(!LL_I2C_IsActiveFlag_TXIS(i2c->Instance))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fe4b 	bl	80016f2 <LL_I2C_IsActiveFlag_TXIS>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0df      	beq.n	8001a22 <I2C_Read+0x66>
        }
    }
    LL_I2C_TransmitData8(i2c->Instance, Reg_address);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	7aba      	ldrb	r2, [r7, #10]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fedf 	bl	800182e <LL_I2C_TransmitData8>

    tickstart = Utils_GetTick();
 8001a70:	f008 fe94 	bl	800a79c <Utils_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 8001a76:	e017      	b.n	8001aa8 <I2C_Read+0xec>
    {
        if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fe5e 	bl	800173e <LL_I2C_IsActiveFlag_NACK>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <I2C_Read+0xd0>
            return E_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e06b      	b.n	8001b64 <I2C_Read+0x1a8>
        if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8001a8c:	f008 fe86 	bl	800a79c <Utils_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b0a      	cmp	r3, #10
 8001a98:	d906      	bls.n	8001aa8 <I2C_Read+0xec>
        	I2C_ReInit(i2c->Instance);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f015 f8ee 	bl	8016c80 <I2C_ReInit>
            return E_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e05d      	b.n	8001b64 <I2C_Read+0x1a8>
    while(!LL_I2C_IsActiveFlag_TXE(i2c->Instance))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fe0d 	bl	80016cc <LL_I2C_IsActiveFlag_TXE>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0df      	beq.n	8001a78 <I2C_Read+0xbc>
        }
    }

    LL_I2C_AcknowledgeNextData(i2c->Instance, LL_I2C_ACK);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fe64 	bl	800178c <LL_I2C_AcknowledgeNextData>

    LL_I2C_HandleTransfer(i2c->Instance, (Slave_address << 1), ((Slave_address << 1) | 1),
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	0059      	lsls	r1, r3, #1
 8001acc:	7afb      	ldrb	r3, [r7, #11]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	461c      	mov	r4, r3
 8001ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ada:	4a25      	ldr	r2, [pc, #148]	@ (8001b70 <I2C_Read+0x1b4>)
 8001adc:	9201      	str	r2, [sp, #4]
 8001ade:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ae2:	9200      	str	r2, [sp, #0]
 8001ae4:	4622      	mov	r2, r4
 8001ae6:	f7ff fe65 	bl	80017b4 <LL_I2C_HandleTransfer>
                          Length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);

    tickstart = Utils_GetTick();
 8001aea:	f008 fe57 	bl	800a79c <Utils_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]
    for(uint8_t i = 0; i < Length; i++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	75fb      	strb	r3, [r7, #23]
 8001af4:	e030      	b.n	8001b58 <I2C_Read+0x19c>
    {
        tickstart = Utils_GetTick();
 8001af6:	f008 fe51 	bl	800a79c <Utils_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]
        while(!LL_I2C_IsActiveFlag_RXNE(i2c->Instance))
 8001afc:	e017      	b.n	8001b2e <I2C_Read+0x172>
        {
            if(LL_I2C_IsActiveFlag_NACK(i2c->Instance))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fe1b 	bl	800173e <LL_I2C_IsActiveFlag_NACK>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <I2C_Read+0x156>
                return E_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e028      	b.n	8001b64 <I2C_Read+0x1a8>
            if(Utils_GetTick() - tickstart > I2C_TIMEOUT){
 8001b12:	f008 fe43 	bl	800a79c <Utils_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b0a      	cmp	r3, #10
 8001b1e:	d906      	bls.n	8001b2e <I2C_Read+0x172>
            	I2C_ReInit(i2c->Instance);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f015 f8ab 	bl	8016c80 <I2C_ReInit>
                return E_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e01a      	b.n	8001b64 <I2C_Read+0x1a8>
        while(!LL_I2C_IsActiveFlag_RXNE(i2c->Instance))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fdf0 	bl	8001718 <LL_I2C_IsActiveFlag_RXNE>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0df      	beq.n	8001afe <I2C_Read+0x142>
            }
        }
        pData[i] = LL_I2C_ReceiveData8(i2c->Instance);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	18d4      	adds	r4, r2, r3
 8001b48:	4608      	mov	r0, r1
 8001b4a:	f7ff fe63 	bl	8001814 <LL_I2C_ReceiveData8>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	7023      	strb	r3, [r4, #0]
    for(uint8_t i = 0; i < Length; i++)
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	3301      	adds	r3, #1
 8001b56:	75fb      	strb	r3, [r7, #23]
 8001b58:	7dfa      	ldrb	r2, [r7, #23]
 8001b5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d3c9      	bcc.n	8001af6 <I2C_Read+0x13a>
    }
    return E_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}
 8001b6c:	80002000 	.word	0x80002000
 8001b70:	80002400 	.word	0x80002400

08001b74 <BSP_MMC_Init>:
  * @brief  Initializes the MMC card device.
  * @param  Instance      SDMMC Instance
  * @retval BSP status
  */
int32_t BSP_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_MMC_REGISTER_CALLBACKS == 0)
    /* Msp MMC initialization */

    MMC_MspInit(hmmc);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f895 	bl	8001cb0 <MMC_MspInit>
    if(ret == BSP_ERROR_NONE)
    {
#endif
      /* HAL MMC initialization */

      if(MX_MMC_SD_Init(hmmc) != HAL_OK)
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f80b 	bl	8001ba2 <MX_MMC_SD_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <BSP_MMC_Init+0x24>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001b92:	f06f 0303 	mvn.w	r3, #3
 8001b96:	60fb      	str	r3, [r7, #12]
      }
    }
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */


  return  ret;
 8001b98:	68fb      	ldr	r3, [r7, #12]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <MX_MMC_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hmmc SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_MMC_SD_Init(MMC_HandleTypeDef *hmmc)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
//  hmmc->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
//  hmmc->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
//  hmmc->Init.BusWide             = SDMMC_BUS_WIDE_4B;

  /* HAL SD initialization */
  if(HAL_MMC_Init(hmmc) != HAL_OK)
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f018 fae8 	bl	801a184 <HAL_MMC_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_MMC_SD_Init+0x1c>
  {
    ret = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <BSP_MMC_ReadBlocks_DMA>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of MMC blocks to read
  * @retval BSP status
  */
int32_t BSP_MMC_ReadBlocks_DMA(MMC_HandleTypeDef *hmmc, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
  int32_t ret;

  if(HAL_MMC_ReadBlocks_DMA(hmmc, (uint8_t *)pData, BlockIdx, BlocksNbr) != HAL_OK)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f018 fbcd 	bl	801a37c <HAL_MMC_ReadBlocks_DMA>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <BSP_MMC_ReadBlocks_DMA+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001be8:	f06f 0303 	mvn.w	r3, #3
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e001      	b.n	8001bf4 <BSP_MMC_ReadBlocks_DMA+0x2c>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  }
  /* Return BSP status */
  return ret;
 8001bf4:	697b      	ldr	r3, [r7, #20]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <BSP_MMC_WriteBlocks_DMA>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of MMC blocks to write
  * @retval BSP status
  */
int32_t BSP_MMC_WriteBlocks_DMA(MMC_HandleTypeDef *hmmc, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	603b      	str	r3, [r7, #0]
  int32_t ret;

  if(HAL_MMC_WriteBlocks_DMA(hmmc, (uint8_t *)pData, BlockIdx, BlocksNbr) != HAL_OK)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f018 fc76 	bl	801a504 <HAL_MMC_WriteBlocks_DMA>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <BSP_MMC_WriteBlocks_DMA+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001c1e:	f06f 0303 	mvn.w	r3, #3
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e001      	b.n	8001c2a <BSP_MMC_WriteBlocks_DMA+0x2c>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  }
  /* Return BSP status */
  return ret;
 8001c2a:	697b      	ldr	r3, [r7, #20]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <BSP_MMC_GetCardState>:
  *            @arg  MMC_TRANSFER_OK: No data transfer is acting
  *            @arg  MMC_TRANSFER_BUSY: Data transfer is acting
  *            @arg  MMC_TRANSFER_ERROR: Data transfer error
  */
int32_t BSP_MMC_GetCardState(MMC_HandleTypeDef *hmmc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return((HAL_MMC_GetCardState(hmmc) == HAL_MMC_CARD_TRANSFER ) ? MMC_TRANSFER_OK : MMC_TRANSFER_BUSY);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f019 fa75 	bl	801b12c <HAL_MMC_GetCardState>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <BSP_MMC_GetCardInfo>:
  * @param  Instance   MMC Instance
  * @param  CardInfo : Pointer to HAL_MMC_CardInfoTypedef structure
  * @retval None
  */
int32_t BSP_MMC_GetCardInfo(MMC_HandleTypeDef *hmmc, BSP_MMC_CardInfo *CardInfo)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(HAL_MMC_GetCardInfo(hmmc, CardInfo) != HAL_OK)
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f019 f872 	bl	801ad4c <HAL_MMC_GetCardInfo>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <BSP_MMC_GetCardInfo+0x20>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001c6e:	f06f 0303 	mvn.w	r3, #3
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e001      	b.n	8001c7a <BSP_MMC_GetCardInfo+0x24>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  }
  /* Return BSP status */
  return ret;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_MMC_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
void HAL_MMC_TxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  BSP_MMC_WriteCpltCallback(hmmc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f00e fa2b 	bl	80100e8 <BSP_MMC_WriteCpltCallback>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_MMC_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
void HAL_MMC_RxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  BSP_MMC_ReadCpltCallback(hmmc);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f00e fa4a 	bl	801013c <BSP_MMC_ReadCpltCallback>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <MMC_MspInit>:
  * @brief  Initializes the MMC MSP.
  * @param  hmmc  MMC handle
  * @retval None
  */
static void MMC_MspInit(MMC_HandleTypeDef *hmmc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hmmc);

  /* __weak function can be modified by the application */
  HAL_MMC_MspInit(hmmc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f016 fd3b 	bl	8018734 <HAL_MMC_MspInit>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(const SPI_TypeDef *SPIx)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <LL_SPI_IsEnabled+0x18>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_SPI_IsEnabled+0x1a>
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_SPI_IsActiveFlag_RXP>:
  * @rmtoll SR           RXP           LL_SPI_IsActiveFlag_RXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(const SPI_TypeDef *SPIx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <LL_SPI_IsActiveFlag_RXP+0x18>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <LL_SPI_IsActiveFlag_RXP+0x1a>
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_SPI_IsActiveFlag_TXC>:
  * @rmtoll SR           TXC           LL_SPI_IsActiveFlag_TXC
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXC(const SPI_TypeDef *SPIx)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXC) == (SPI_SR_TXC)) ? 1UL : 0UL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d26:	d101      	bne.n	8001d2c <LL_SPI_IsActiveFlag_TXC+0x1a>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <LL_SPI_IsActiveFlag_TXC+0x1c>
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3330      	adds	r3, #48	@ 0x30
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3320      	adds	r3, #32
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <SPI_Driver_Transmit8>:
#include "spi_driver.h"
#include "uart_driver_dma.h"

#define SPI_TIMEOUT_MS 10  // 10ms timeout

Std_ReturnType SPI_Driver_Transmit8(SPI_TypeDef *SPIx, uint8_t data, uint8_t *receivedData) {
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	72fb      	strb	r3, [r7, #11]
    if (!LL_SPI_IsEnabled(SPIx)) return E_ERROR;
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7ff ff9e 	bl	8001cc6 <LL_SPI_IsEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <SPI_Driver_Transmit8+0x1e>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e035      	b.n	8001e00 <SPI_Driver_Transmit8+0x8a>

    uint32_t startTick = Utils_GetTick();
 8001d94:	f008 fd02 	bl	800a79c <Utils_GetTick>
 8001d98:	6178      	str	r0, [r7, #20]
    LL_SPI_TransmitData8(SPIx, data);
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff ffd9 	bl	8001d56 <LL_SPI_TransmitData8>

    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8001da4:	e008      	b.n	8001db8 <SPI_Driver_Transmit8+0x42>
        if ((Utils_GetTick() - startTick) > SPI_TIMEOUT_MS) {
 8001da6:	f008 fcf9 	bl	800a79c <Utils_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b0a      	cmp	r3, #10
 8001db2:	d901      	bls.n	8001db8 <SPI_Driver_Transmit8+0x42>
            return E_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e023      	b.n	8001e00 <SPI_Driver_Transmit8+0x8a>
    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f7ff ffaa 	bl	8001d12 <LL_SPI_IsActiveFlag_TXC>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <SPI_Driver_Transmit8+0x30>
        }
    }

    startTick = Utils_GetTick();
 8001dc4:	f008 fcea 	bl	800a79c <Utils_GetTick>
 8001dc8:	6178      	str	r0, [r7, #20]
    while (!LL_SPI_IsActiveFlag_RXP(SPIx)) {
 8001dca:	e008      	b.n	8001dde <SPI_Driver_Transmit8+0x68>
        if ((Utils_GetTick() - startTick) > SPI_TIMEOUT_MS) {
 8001dcc:	f008 fce6 	bl	800a79c <Utils_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d901      	bls.n	8001dde <SPI_Driver_Transmit8+0x68>
            return E_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e010      	b.n	8001e00 <SPI_Driver_Transmit8+0x8a>
    while (!LL_SPI_IsActiveFlag_RXP(SPIx)) {
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff ff84 	bl	8001cec <LL_SPI_IsActiveFlag_RXP>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <SPI_Driver_Transmit8+0x56>
        }
    }

    if (receivedData) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d006      	beq.n	8001dfe <SPI_Driver_Transmit8+0x88>
        *receivedData = LL_SPI_ReceiveData8(SPIx);
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff ffa2 	bl	8001d3a <LL_SPI_ReceiveData8>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	701a      	strb	r2, [r3, #0]
    }

    return E_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <SPI_Driver_Write>:
    }

    return E_OK;
}

Std_ReturnType SPI_Driver_Write(SPI_TypeDef *SPIx, uint8_t data) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
    if (!LL_SPI_IsEnabled(SPIx)) return E_ERROR;
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff56 	bl	8001cc6 <LL_SPI_IsEnabled>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <SPI_Driver_Write+0x1c>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e01b      	b.n	8001e5c <SPI_Driver_Write+0x54>

    uint32_t startTick = Utils_GetTick();
 8001e24:	f008 fcba 	bl	800a79c <Utils_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]
    LL_SPI_TransmitData8(SPIx, data);
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff91 	bl	8001d56 <LL_SPI_TransmitData8>

    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8001e34:	e008      	b.n	8001e48 <SPI_Driver_Write+0x40>
        if ((Utils_GetTick() - startTick) > SPI_TIMEOUT_MS) {
 8001e36:	f008 fcb1 	bl	800a79c <Utils_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b0a      	cmp	r3, #10
 8001e42:	d901      	bls.n	8001e48 <SPI_Driver_Write+0x40>
            return E_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e009      	b.n	8001e5c <SPI_Driver_Write+0x54>
    while (!LL_SPI_IsActiveFlag_TXC(SPIx)) {
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff62 	bl	8001d12 <LL_SPI_IsActiveFlag_TXC>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <SPI_Driver_Write+0x2e>
        }
    }

    LL_SPI_ReceiveData8(SPIx);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff70 	bl	8001d3a <LL_SPI_ReceiveData8>
    return E_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <LL_USART_Enable>:
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	601a      	str	r2, [r3, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_USART_Disable>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 0201 	bic.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	601a      	str	r2, [r3, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_USART_IsActiveFlag_TC>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb4:	2b40      	cmp	r3, #64	@ 0x40
 8001eb6:	d101      	bne.n	8001ebc <LL_USART_IsActiveFlag_TC+0x18>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <LL_USART_IsActiveFlag_TC+0x1a>
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eda:	2b80      	cmp	r3, #128	@ 0x80
 8001edc:	d101      	bne.n	8001ee2 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_USART_EnableIT_IDLE>:
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	@ 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	e853 3f00 	ldrex	r3, [r3]
 8001f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f043 0310 	orr.w	r3, r3, #16
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	61ba      	str	r2, [r7, #24]
 8001f12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f14:	6979      	ldr	r1, [r7, #20]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	e841 2300 	strex	r3, r2, [r1]
 8001f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e9      	bne.n	8001ef8 <LL_USART_EnableIT_IDLE+0x8>
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3724      	adds	r7, #36	@ 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_USART_EnableIT_TXE_TXFNF>:
{
 8001f32:	b480      	push	{r7}
 8001f34:	b089      	sub	sp, #36	@ 0x24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	e853 3f00 	ldrex	r3, [r3]
 8001f44:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	61ba      	str	r2, [r7, #24]
 8001f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f56:	6979      	ldr	r1, [r7, #20]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	e841 2300 	strex	r3, r2, [r1]
 8001f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1e9      	bne.n	8001f3a <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
 8001f6a:	3724      	adds	r7, #36	@ 0x24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_USART_DisableIT_TXE_TXFNF>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	@ 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	e853 3f00 	ldrex	r3, [r3]
 8001f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	61ba      	str	r2, [r7, #24]
 8001f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f98:	6979      	ldr	r1, [r7, #20]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	e841 2300 	strex	r3, r2, [r1]
 8001fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1e9      	bne.n	8001f7c <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3724      	adds	r7, #36	@ 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_USART_IsEnabledIT_TXE_TXFNF>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc6:	2b80      	cmp	r3, #128	@ 0x80
 8001fc8:	d101      	bne.n	8001fce <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_USART_EnableDMAReq_RX>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	@ 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3308      	adds	r3, #8
 8001fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	e853 3f00 	ldrex	r3, [r3]
 8001ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3308      	adds	r3, #8
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	61ba      	str	r2, [r7, #24]
 8002002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002004:	6979      	ldr	r1, [r7, #20]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	e841 2300 	strex	r3, r2, [r1]
 800200c:	613b      	str	r3, [r7, #16]
   return(result);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e7      	bne.n	8001fe4 <LL_USART_EnableDMAReq_RX+0x8>
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_USART_DMA_GetRegAddr>:
{
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d103      	bne.n	800203a <LL_USART_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3328      	adds	r3, #40	@ 0x28
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e002      	b.n	8002040 <LL_USART_DMA_GetRegAddr+0x1e>
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3324      	adds	r3, #36	@ 0x24
 800203e:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8002040:	68fb      	ldr	r3, [r7, #12]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_USART_TransmitData8>:
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 800207a:	4a0c      	ldr	r2, [pc, #48]	@ (80020ac <LL_DMA_EnableStream+0x40>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4908      	ldr	r1, [pc, #32]	@ (80020ac <LL_DMA_EnableStream+0x40>)
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	440a      	add	r2, r1
 8002090:	7812      	ldrb	r2, [r2, #0]
 8002092:	4611      	mov	r1, r2
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	440a      	add	r2, r1
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6013      	str	r3, [r2, #0]
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	08025b18 	.word	0x08025b18

080020b0 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80020be:	4a0c      	ldr	r2, [pc, #48]	@ (80020f0 <LL_DMA_DisableStream+0x40>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4908      	ldr	r1, [pc, #32]	@ (80020f0 <LL_DMA_DisableStream+0x40>)
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	440a      	add	r2, r1
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	4611      	mov	r1, r2
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	440a      	add	r2, r1
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	6013      	str	r3, [r2, #0]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	08025b18 	.word	0x08025b18

080020f4 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t NbData)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8002104:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <LL_DMA_SetDataLength+0x48>)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4413      	add	r3, r2
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <LL_DMA_SetDataLength+0x4c>)
 8002116:	4013      	ands	r3, r2
 8002118:	4908      	ldr	r1, [pc, #32]	@ (800213c <LL_DMA_SetDataLength+0x48>)
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	440a      	add	r2, r1
 800211e:	7812      	ldrb	r2, [r2, #0]
 8002120:	4611      	mov	r1, r2
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	440a      	add	r2, r1
 8002126:	4611      	mov	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	08025b18 	.word	0x08025b18
 8002140:	ffff0000 	.word	0xffff0000

08002144 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  return (READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT));
 8002152:	4a07      	ldr	r2, [pc, #28]	@ (8002170 <LL_DMA_GetDataLength+0x2c>)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	b29b      	uxth	r3, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	08025b18 	.word	0x08025b18

08002174 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 8002184:	4a07      	ldr	r2, [pc, #28]	@ (80021a4 <LL_DMA_SetMemoryAddress+0x30>)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4413      	add	r3, r2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4413      	add	r3, r2
 8002192:	461a      	mov	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	60d3      	str	r3, [r2, #12]
}
 8002198:	bf00      	nop
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	08025b18 	.word	0x08025b18

080021a8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 80021b8:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <LL_DMA_SetPeriphAddress+0x30>)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	4413      	add	r3, r2
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	4413      	add	r3, r2
 80021c6:	461a      	mov	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6093      	str	r3, [r2, #8]
}
 80021cc:	bf00      	nop
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	08025b18 	.word	0x08025b18

080021dc <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 80021ea:	4a0c      	ldr	r2, [pc, #48]	@ (800221c <LL_DMA_EnableIT_HT+0x40>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4908      	ldr	r1, [pc, #32]	@ (800221c <LL_DMA_EnableIT_HT+0x40>)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	440a      	add	r2, r1
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	4611      	mov	r1, r2
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	440a      	add	r2, r1
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	6013      	str	r3, [r2, #0]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	08025b18 	.word	0x08025b18

08002220 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE);
 800222e:	4a0c      	ldr	r2, [pc, #48]	@ (8002260 <LL_DMA_EnableIT_TE+0x40>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4908      	ldr	r1, [pc, #32]	@ (8002260 <LL_DMA_EnableIT_TE+0x40>)
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	440a      	add	r2, r1
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	4611      	mov	r1, r2
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	440a      	add	r2, r1
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6013      	str	r3, [r2, #0]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	08025b18 	.word	0x08025b18

08002264 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8002272:	4a0c      	ldr	r2, [pc, #48]	@ (80022a4 <LL_DMA_EnableIT_TC+0x40>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4908      	ldr	r1, [pc, #32]	@ (80022a4 <LL_DMA_EnableIT_TC+0x40>)
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	440a      	add	r2, r1
 8002288:	7812      	ldrb	r2, [r2, #0]
 800228a:	4611      	mov	r1, r2
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	440a      	add	r2, r1
 8002290:	f043 0310 	orr.w	r3, r3, #16
 8002294:	6013      	str	r3, [r2, #0]
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	08025b18 	.word	0x08025b18

080022a8 <UART_DMA_Driver_Get>:
#ifndef RESET
#define RESET 						    0U
#endif

UART_DMA_Driver_t* UART_DMA_Driver_Get(USART_TypeDef *uart)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e015      	b.n	80022e2 <UART_DMA_Driver_Get+0x3a>
        if (uart_dma_drivers[i].uart == uart) {
 80022b6:	4910      	ldr	r1, [pc, #64]	@ (80022f8 <UART_DMA_Driver_Get+0x50>)
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4613      	mov	r3, r2
 80022bc:	015b      	lsls	r3, r3, #5
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d107      	bne.n	80022dc <UART_DMA_Driver_Get+0x34>
            return &uart_dma_drivers[i];
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4613      	mov	r3, r2
 80022d0:	015b      	lsls	r3, r3, #5
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4a08      	ldr	r2, [pc, #32]	@ (80022f8 <UART_DMA_Driver_Get+0x50>)
 80022d8:	4413      	add	r3, r2
 80022da:	e006      	b.n	80022ea <UART_DMA_Driver_Get+0x42>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3301      	adds	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	dde6      	ble.n	80022b6 <UART_DMA_Driver_Get+0xe>
        }
    }
    return NULL;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2401472c 	.word	0x2401472c

080022fc <UART_DMA_Driver_Init>:

/*************************************************
 *                    Init                       *
 *************************************************/
Std_ReturnType UART_DMA_Driver_Init(void)
{
 80022fc:	b5b0      	push	{r4, r5, r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af02      	add	r7, sp, #8
    // USART1 (index 0)
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	e022      	b.n	800234e <UART_DMA_Driver_Init+0x52>
        LL_USART_Disable(uart_dma_drivers[i].uart);
 8002308:	49b5      	ldr	r1, [pc, #724]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	015b      	lsls	r3, r3, #5
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fdb3 	bl	8001e84 <LL_USART_Disable>
        LL_DMA_DisableStream(uart_dma_drivers[i].dma_rx_instance, uart_dma_drivers[i].dma_rx_channel);
 800231e:	49b0      	ldr	r1, [pc, #704]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	015b      	lsls	r3, r3, #5
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3368      	adds	r3, #104	@ 0x68
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	49ab      	ldr	r1, [pc, #684]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	015b      	lsls	r3, r3, #5
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	336c      	adds	r3, #108	@ 0x6c
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4619      	mov	r1, r3
 8002344:	f7ff feb4 	bl	80020b0 <LL_DMA_DisableStream>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3301      	adds	r3, #1
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b02      	cmp	r3, #2
 8002352:	ddd9      	ble.n	8002308 <UART_DMA_Driver_Init+0xc>
    }

    RingBuffer_Create(&uart_dma_drivers[0].rx_buffer, 1, "UART1_RX", uart1_rx_data, UART1_BUFFER_SIZE);
 8002354:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4ba2      	ldr	r3, [pc, #648]	@ (80025e4 <UART_DMA_Driver_Init+0x2e8>)
 800235c:	4aa2      	ldr	r2, [pc, #648]	@ (80025e8 <UART_DMA_Driver_Init+0x2ec>)
 800235e:	2101      	movs	r1, #1
 8002360:	48a2      	ldr	r0, [pc, #648]	@ (80025ec <UART_DMA_Driver_Init+0x2f0>)
 8002362:	f008 f8c2 	bl	800a4ea <RingBuffer_Create>
    RingBuffer_Create(&uart_dma_drivers[0].tx_buffer, 2, "UART1_TX", uart1_tx_data, UART1_BUFFER_SIZE);
 8002366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4ba0      	ldr	r3, [pc, #640]	@ (80025f0 <UART_DMA_Driver_Init+0x2f4>)
 800236e:	4aa1      	ldr	r2, [pc, #644]	@ (80025f4 <UART_DMA_Driver_Init+0x2f8>)
 8002370:	2102      	movs	r1, #2
 8002372:	48a1      	ldr	r0, [pc, #644]	@ (80025f8 <UART_DMA_Driver_Init+0x2fc>)
 8002374:	f008 f8b9 	bl	800a4ea <RingBuffer_Create>
    uart_dma_drivers[0].rxSemaphore = xSemaphoreCreateBinary();
 8002378:	2203      	movs	r2, #3
 800237a:	2100      	movs	r1, #0
 800237c:	2001      	movs	r0, #1
 800237e:	f00e fa7c 	bl	801087a <xQueueGenericCreate>
 8002382:	4603      	mov	r3, r0
 8002384:	4a96      	ldr	r2, [pc, #600]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002386:	6653      	str	r3, [r2, #100]	@ 0x64

    LL_DMA_SetPeriphAddress(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 8002388:	4b95      	ldr	r3, [pc, #596]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800238a:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
 800238c:	4b94      	ldr	r3, [pc, #592]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800238e:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 8002390:	2101      	movs	r1, #1
 8002392:	489a      	ldr	r0, [pc, #616]	@ (80025fc <UART_DMA_Driver_Init+0x300>)
 8002394:	f7ff fe45 	bl	8002022 <LL_USART_DMA_GetRegAddr>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	4629      	mov	r1, r5
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff ff02 	bl	80021a8 <LL_DMA_SetPeriphAddress>
                           LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetDataLength(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 80023a4:	4b8e      	ldr	r3, [pc, #568]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023a8:	4a8d      	ldr	r2, [pc, #564]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023aa:	6ed1      	ldr	r1, [r2, #108]	@ 0x6c
                         uart_dma_drivers[0].dma_rx_buffer_size);
 80023ac:	4a8c      	ldr	r2, [pc, #560]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023ae:	f8b2 2074 	ldrh.w	r2, [r2, #116]	@ 0x74
    LL_DMA_SetDataLength(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fe9e 	bl	80020f4 <LL_DMA_SetDataLength>
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 80023b8:	4b89      	ldr	r3, [pc, #548]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023bc:	4a88      	ldr	r2, [pc, #544]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023be:	6ed1      	ldr	r1, [r2, #108]	@ 0x6c
                            (uint32_t)uart_dma_drivers[0].dma_rx_buffer);
 80023c0:	4a87      	ldr	r2, [pc, #540]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023c2:	6f12      	ldr	r2, [r2, #112]	@ 0x70
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel,
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fed5 	bl	8002174 <LL_DMA_SetMemoryAddress>
    LL_DMA_EnableIT_TC(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 80023ca:	4b85      	ldr	r3, [pc, #532]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023ce:	4a84      	ldr	r2, [pc, #528]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023d0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff45 	bl	8002264 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 80023da:	4b81      	ldr	r3, [pc, #516]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023de:	4a80      	ldr	r2, [pc, #512]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023e0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fef9 	bl	80021dc <LL_DMA_EnableIT_HT>
    LL_DMA_EnableIT_TE(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 80023ea:	4b7d      	ldr	r3, [pc, #500]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023ee:	4a7c      	ldr	r2, [pc, #496]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80023f0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff13 	bl	8002220 <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(USART1);
 80023fa:	4880      	ldr	r0, [pc, #512]	@ (80025fc <UART_DMA_Driver_Init+0x300>)
 80023fc:	f7ff fdee 	bl	8001fdc <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableStream(uart_dma_drivers[0].dma_rx_instance, uart_dma_drivers[0].dma_rx_channel);
 8002400:	4b77      	ldr	r3, [pc, #476]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002404:	4a76      	ldr	r2, [pc, #472]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002406:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fe2e 	bl	800206c <LL_DMA_EnableStream>

    LL_USART_EnableIT_IDLE(USART1);
 8002410:	487a      	ldr	r0, [pc, #488]	@ (80025fc <UART_DMA_Driver_Init+0x300>)
 8002412:	f7ff fd6d 	bl	8001ef0 <LL_USART_EnableIT_IDLE>
//    LL_USART_EnableIT_RXNE(USART1);

    // USART2 (index 1)
    RingBuffer_Create(&uart_dma_drivers[1].rx_buffer, 5, "UART2_RX", uart2_rx_data, UART2_BUFFER_SIZE);
 8002416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	4b78      	ldr	r3, [pc, #480]	@ (8002600 <UART_DMA_Driver_Init+0x304>)
 800241e:	4a79      	ldr	r2, [pc, #484]	@ (8002604 <UART_DMA_Driver_Init+0x308>)
 8002420:	2105      	movs	r1, #5
 8002422:	4879      	ldr	r0, [pc, #484]	@ (8002608 <UART_DMA_Driver_Init+0x30c>)
 8002424:	f008 f861 	bl	800a4ea <RingBuffer_Create>
    RingBuffer_Create(&uart_dma_drivers[1].tx_buffer, 6, "UART2_TX", uart2_tx_data, UART2_BUFFER_SIZE);
 8002428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	4b77      	ldr	r3, [pc, #476]	@ (800260c <UART_DMA_Driver_Init+0x310>)
 8002430:	4a77      	ldr	r2, [pc, #476]	@ (8002610 <UART_DMA_Driver_Init+0x314>)
 8002432:	2106      	movs	r1, #6
 8002434:	4877      	ldr	r0, [pc, #476]	@ (8002614 <UART_DMA_Driver_Init+0x318>)
 8002436:	f008 f858 	bl	800a4ea <RingBuffer_Create>
    uart_dma_drivers[1].rxSemaphore = xSemaphoreCreateBinary();
 800243a:	2203      	movs	r2, #3
 800243c:	2100      	movs	r1, #0
 800243e:	2001      	movs	r0, #1
 8002440:	f00e fa1b 	bl	801087a <xQueueGenericCreate>
 8002444:	4603      	mov	r3, r0
 8002446:	4a66      	ldr	r2, [pc, #408]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002448:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

    LL_DMA_SetPeriphAddress(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 800244c:	4b64      	ldr	r3, [pc, #400]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800244e:	f8d3 40e4 	ldr.w	r4, [r3, #228]	@ 0xe4
 8002452:	4b63      	ldr	r3, [pc, #396]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002454:	f8d3 50e8 	ldr.w	r5, [r3, #232]	@ 0xe8
 8002458:	2101      	movs	r1, #1
 800245a:	486f      	ldr	r0, [pc, #444]	@ (8002618 <UART_DMA_Driver_Init+0x31c>)
 800245c:	f7ff fde1 	bl	8002022 <LL_USART_DMA_GetRegAddr>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	4629      	mov	r1, r5
 8002466:	4620      	mov	r0, r4
 8002468:	f7ff fe9e 	bl	80021a8 <LL_DMA_SetPeriphAddress>
                           LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetDataLength(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 800246c:	4b5c      	ldr	r3, [pc, #368]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800246e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002472:	4a5b      	ldr	r2, [pc, #364]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002474:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
                         uart_dma_drivers[1].dma_rx_buffer_size);
 8002478:	4a59      	ldr	r2, [pc, #356]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800247a:	f8b2 20f0 	ldrh.w	r2, [r2, #240]	@ 0xf0
    LL_DMA_SetDataLength(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fe38 	bl	80020f4 <LL_DMA_SetDataLength>
    LL_DMA_SetMemoryAddress(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 8002484:	4b56      	ldr	r3, [pc, #344]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002486:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800248a:	4a55      	ldr	r2, [pc, #340]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800248c:	f8d2 10e8 	ldr.w	r1, [r2, #232]	@ 0xe8
                            (uint32_t)uart_dma_drivers[1].dma_rx_buffer);
 8002490:	4a53      	ldr	r2, [pc, #332]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002492:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
    LL_DMA_SetMemoryAddress(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel,
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fe6c 	bl	8002174 <LL_DMA_SetMemoryAddress>
    LL_DMA_EnableIT_TC(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 800249c:	4b50      	ldr	r3, [pc, #320]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800249e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80024a2:	4a4f      	ldr	r2, [pc, #316]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80024a4:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff feda 	bl	8002264 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 80024b0:	4b4b      	ldr	r3, [pc, #300]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80024b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80024b6:	4a4a      	ldr	r2, [pc, #296]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80024b8:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fe8c 	bl	80021dc <LL_DMA_EnableIT_HT>
    LL_DMA_EnableIT_TE(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 80024c4:	4b46      	ldr	r3, [pc, #280]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80024c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80024ca:	4a45      	ldr	r2, [pc, #276]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80024cc:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fea4 	bl	8002220 <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(USART2);
 80024d8:	484f      	ldr	r0, [pc, #316]	@ (8002618 <UART_DMA_Driver_Init+0x31c>)
 80024da:	f7ff fd7f 	bl	8001fdc <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableStream(uart_dma_drivers[1].dma_rx_instance, uart_dma_drivers[1].dma_rx_channel);
 80024de:	4b40      	ldr	r3, [pc, #256]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80024e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80024e4:	4a3e      	ldr	r2, [pc, #248]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80024e6:	f8d2 20e8 	ldr.w	r2, [r2, #232]	@ 0xe8
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fdbd 	bl	800206c <LL_DMA_EnableStream>

    LL_USART_EnableIT_IDLE(USART2);
 80024f2:	4849      	ldr	r0, [pc, #292]	@ (8002618 <UART_DMA_Driver_Init+0x31c>)
 80024f4:	f7ff fcfc 	bl	8001ef0 <LL_USART_EnableIT_IDLE>
//    LL_USART_EnableIT_RXNE(USART2);

    // UART7 (index 2)
    RingBuffer_Create(&uart_dma_drivers[2].rx_buffer, 7, "UART7_RX", uart7_rx_data, UART7_BUFFER_SIZE);
 80024f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4b47      	ldr	r3, [pc, #284]	@ (800261c <UART_DMA_Driver_Init+0x320>)
 8002500:	4a47      	ldr	r2, [pc, #284]	@ (8002620 <UART_DMA_Driver_Init+0x324>)
 8002502:	2107      	movs	r1, #7
 8002504:	4847      	ldr	r0, [pc, #284]	@ (8002624 <UART_DMA_Driver_Init+0x328>)
 8002506:	f007 fff0 	bl	800a4ea <RingBuffer_Create>
    RingBuffer_Create(&uart_dma_drivers[2].tx_buffer, 8, "UART7_TX", uart7_tx_data, UART7_BUFFER_SIZE);
 800250a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	4b45      	ldr	r3, [pc, #276]	@ (8002628 <UART_DMA_Driver_Init+0x32c>)
 8002512:	4a46      	ldr	r2, [pc, #280]	@ (800262c <UART_DMA_Driver_Init+0x330>)
 8002514:	2108      	movs	r1, #8
 8002516:	4846      	ldr	r0, [pc, #280]	@ (8002630 <UART_DMA_Driver_Init+0x334>)
 8002518:	f007 ffe7 	bl	800a4ea <RingBuffer_Create>
    uart_dma_drivers[2].rxSemaphore = xSemaphoreCreateBinary();
 800251c:	2203      	movs	r2, #3
 800251e:	2100      	movs	r1, #0
 8002520:	2001      	movs	r0, #1
 8002522:	f00e f9aa 	bl	801087a <xQueueGenericCreate>
 8002526:	4603      	mov	r3, r0
 8002528:	4a2d      	ldr	r2, [pc, #180]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800252a:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c

    LL_DMA_SetPeriphAddress(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 800252e:	4b2c      	ldr	r3, [pc, #176]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002530:	f8d3 4160 	ldr.w	r4, [r3, #352]	@ 0x160
 8002534:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002536:	f8d3 5164 	ldr.w	r5, [r3, #356]	@ 0x164
 800253a:	2101      	movs	r1, #1
 800253c:	483d      	ldr	r0, [pc, #244]	@ (8002634 <UART_DMA_Driver_Init+0x338>)
 800253e:	f7ff fd70 	bl	8002022 <LL_USART_DMA_GetRegAddr>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	4629      	mov	r1, r5
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fe2d 	bl	80021a8 <LL_DMA_SetPeriphAddress>
                           LL_USART_DMA_GetRegAddr(UART7, LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetDataLength(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 800254e:	4b24      	ldr	r3, [pc, #144]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002550:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002554:	4a22      	ldr	r2, [pc, #136]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002556:	f8d2 1164 	ldr.w	r1, [r2, #356]	@ 0x164
                         uart_dma_drivers[2].dma_rx_buffer_size);
 800255a:	4a21      	ldr	r2, [pc, #132]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800255c:	f8b2 216c 	ldrh.w	r2, [r2, #364]	@ 0x16c
    LL_DMA_SetDataLength(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fdc7 	bl	80020f4 <LL_DMA_SetDataLength>
    LL_DMA_SetMemoryAddress(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 8002566:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002568:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800256c:	4a1c      	ldr	r2, [pc, #112]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800256e:	f8d2 1164 	ldr.w	r1, [r2, #356]	@ 0x164
                            (uint32_t)uart_dma_drivers[2].dma_rx_buffer);
 8002572:	4a1b      	ldr	r2, [pc, #108]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002574:	f8d2 2168 	ldr.w	r2, [r2, #360]	@ 0x168
    LL_DMA_SetMemoryAddress(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel,
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fdfb 	bl	8002174 <LL_DMA_SetMemoryAddress>
    LL_DMA_EnableIT_TC(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 800257e:	4b18      	ldr	r3, [pc, #96]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002580:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002584:	4a16      	ldr	r2, [pc, #88]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002586:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fe69 	bl	8002264 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 8002594:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002598:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 800259a:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fe1b 	bl	80021dc <LL_DMA_EnableIT_HT>
    LL_DMA_EnableIT_TE(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 80025a6:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80025a8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80025ac:	4a0c      	ldr	r2, [pc, #48]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80025ae:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fe33 	bl	8002220 <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(UART7);
 80025ba:	481e      	ldr	r0, [pc, #120]	@ (8002634 <UART_DMA_Driver_Init+0x338>)
 80025bc:	f7ff fd0e 	bl	8001fdc <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableStream(uart_dma_drivers[2].dma_rx_instance, uart_dma_drivers[2].dma_rx_channel);
 80025c0:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80025c2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80025c6:	4a06      	ldr	r2, [pc, #24]	@ (80025e0 <UART_DMA_Driver_Init+0x2e4>)
 80025c8:	f8d2 2164 	ldr.w	r2, [r2, #356]	@ 0x164
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fd4c 	bl	800206c <LL_DMA_EnableStream>

    LL_USART_EnableIT_IDLE(UART7);
 80025d4:	4817      	ldr	r0, [pc, #92]	@ (8002634 <UART_DMA_Driver_Init+0x338>)
 80025d6:	f7ff fc8b 	bl	8001ef0 <LL_USART_EnableIT_IDLE>
//    LL_USART_EnableIT_RXNE(UART7);

    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 80025da:	2300      	movs	r3, #0
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	e039      	b.n	8002654 <UART_DMA_Driver_Init+0x358>
 80025e0:	2401472c 	.word	0x2401472c
 80025e4:	2401632c 	.word	0x2401632c
 80025e8:	080234d8 	.word	0x080234d8
 80025ec:	24014730 	.word	0x24014730
 80025f0:	2401672c 	.word	0x2401672c
 80025f4:	080234e4 	.word	0x080234e4
 80025f8:	24014760 	.word	0x24014760
 80025fc:	40011000 	.word	0x40011000
 8002600:	24016f2c 	.word	0x24016f2c
 8002604:	080234f0 	.word	0x080234f0
 8002608:	240147ac 	.word	0x240147ac
 800260c:	2401732c 	.word	0x2401732c
 8002610:	080234fc 	.word	0x080234fc
 8002614:	240147dc 	.word	0x240147dc
 8002618:	40004400 	.word	0x40004400
 800261c:	24017b2c 	.word	0x24017b2c
 8002620:	08023508 	.word	0x08023508
 8002624:	24014828 	.word	0x24014828
 8002628:	24017f2c 	.word	0x24017f2c
 800262c:	08023514 	.word	0x08023514
 8002630:	24014858 	.word	0x24014858
 8002634:	40007800 	.word	0x40007800
        LL_USART_Enable(uart_dma_drivers[i].uart);
 8002638:	490a      	ldr	r1, [pc, #40]	@ (8002664 <UART_DMA_Driver_Init+0x368>)
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	015b      	lsls	r3, r3, #5
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fc0b 	bl	8001e64 <LL_USART_Enable>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2b02      	cmp	r3, #2
 8002658:	ddee      	ble.n	8002638 <UART_DMA_Driver_Init+0x33c>
    }
    return E_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bdb0      	pop	{r4, r5, r7, pc}
 8002664:	2401472c 	.word	0x2401472c

08002668 <UART_Driver_Write>:
////    if (!LL_USART_IsEnabledIT_TXE(uart)) {
//        LL_USART_EnableIT_TXE(uart);
////    }
//}
void UART_Driver_Write(USART_TypeDef *uart, uint8_t data)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fe17 	bl	80022a8 <UART_DMA_Driver_Get>
 800267a:	60b8      	str	r0, [r7, #8]
    if (driver == NULL)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01f      	beq.n	80026c2 <UART_Driver_Write+0x5a>
        return;

    uint32_t timeout = 500000;
 8002682:	4b13      	ldr	r3, [pc, #76]	@ (80026d0 <UART_Driver_Write+0x68>)
 8002684:	60fb      	str	r3, [r7, #12]

    while (!RingBuffer_Put(&driver->tx_buffer, data))
 8002686:	e005      	b.n	8002694 <UART_Driver_Write+0x2c>
    {
        if (--timeout == 0)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3b01      	subs	r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d018      	beq.n	80026c6 <UART_Driver_Write+0x5e>
    while (!RingBuffer_Put(&driver->tx_buffer, data))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	3334      	adds	r3, #52	@ 0x34
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f007 ff57 	bl	800a550 <RingBuffer_Put>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f083 0301 	eor.w	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ec      	bne.n	8002688 <UART_Driver_Write+0x20>
        {
            return;
        }
    }

    if (!LL_USART_IsEnabledIT_TXE(uart)) {
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fc81 	bl	8001fb6 <LL_USART_IsEnabledIT_TXE_TXFNF>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <UART_Driver_Write+0x60>
        LL_USART_EnableIT_TXE(uart);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fc39 	bl	8001f32 <LL_USART_EnableIT_TXE_TXFNF>
 80026c0:	e002      	b.n	80026c8 <UART_Driver_Write+0x60>
        return;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <UART_Driver_Write+0x60>
            return;
 80026c6:	bf00      	nop
    }
}
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	0007a120 	.word	0x0007a120

080026d4 <UART_Driver_SendString>:

void UART_Driver_SendString(USART_TypeDef *uart, const char *str)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fde2 	bl	80022a8 <UART_DMA_Driver_Get>
 80026e4:	60f8      	str	r0, [r7, #12]
    if (driver == NULL || str == NULL)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d011      	beq.n	8002710 <UART_Driver_SendString+0x3c>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00e      	beq.n	8002710 <UART_Driver_SendString+0x3c>
        return;


    while (*str)
 80026f2:	e008      	b.n	8002706 <UART_Driver_SendString+0x32>
        {
            UART_Driver_Write(uart, (uint8_t)(*str));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ffb4 	bl	8002668 <UART_Driver_Write>
            str++;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	603b      	str	r3, [r7, #0]
    while (*str)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f2      	bne.n	80026f4 <UART_Driver_SendString+0x20>
 800270e:	e000      	b.n	8002712 <UART_Driver_SendString+0x3e>
        return;
 8002710:	bf00      	nop
        }
}
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <UART_Driver_TX_ISR>:
    atomic_store_explicit(&driver->tx_buffer.head, 0U, memory_order_release);
    atomic_store_explicit(&driver->tx_buffer.tail, 0U, memory_order_release);
}

void UART_Driver_TX_ISR(USART_TypeDef *uart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fdc1 	bl	80022a8 <UART_DMA_Driver_Get>
 8002726:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d042      	beq.n	80027b4 <UART_Driver_TX_ISR+0x9c>
        return;

    if (driver->uart->ISR & USART_ISR_FE) {
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <UART_Driver_TX_ISR+0x2c>
        driver->uart->ICR = USART_ICR_FECF;  // Clear Framing Error Flag
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2202      	movs	r2, #2
 8002742:	621a      	str	r2, [r3, #32]
    }

    if (driver->uart->ISR & USART_ISR_NE) {
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <UART_Driver_TX_ISR+0x42>
        driver->uart->ICR = USART_ICR_NECF;  // Clear Noise Error Flag
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2204      	movs	r2, #4
 8002758:	621a      	str	r2, [r3, #32]

//    if (driver->uart->ISR & USART_ISR_EOBF) {
//        driver->uart->ICR = USART_ICR_EOBCF; // Clear End of Block Flag
//    }

    if (driver->uart->ISR & USART_ISR_CMF) {
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <UART_Driver_TX_ISR+0x5a>
        driver->uart->ICR = USART_ICR_CMCF;  // Clear Character Match Flag
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002770:	621a      	str	r2, [r3, #32]
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fba9 	bl	8001eca <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01b      	beq.n	80027b6 <UART_Driver_TX_ISR+0x9e>
        (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fc19 	bl	8001fb6 <LL_USART_IsEnabledIT_TXE_TXFNF>
 8002784:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	d015      	beq.n	80027b6 <UART_Driver_TX_ISR+0x9e>
    {
        uint8_t tx_data;
        if (RingBuffer_Get(&driver->tx_buffer, &tx_data))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3334      	adds	r3, #52	@ 0x34
 800278e:	f107 020b 	add.w	r2, r7, #11
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f007 ff21 	bl	800a5dc <RingBuffer_Get>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <UART_Driver_TX_ISR+0x94>
        {
            LL_USART_TransmitData8(uart, tx_data);
 80027a0:	7afb      	ldrb	r3, [r7, #11]
 80027a2:	4619      	mov	r1, r3
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff fc52 	bl	800204e <LL_USART_TransmitData8>
 80027aa:	e004      	b.n	80027b6 <UART_Driver_TX_ISR+0x9e>
        }
        else
        {
            LL_USART_DisableIT_TXE(uart);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff fbe1 	bl	8001f74 <LL_USART_DisableIT_TXE_TXFNF>
 80027b2:	e000      	b.n	80027b6 <UART_Driver_TX_ISR+0x9e>
        return;
 80027b4:	bf00      	nop
        }
    }
}
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <UART_DMA_Rx_Check>:

/************************************************
 *                    DMA RX                    *
 ************************************************/
void UART_DMA_Rx_Check(USART_TypeDef *uart) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	@ 0x28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff fd6d 	bl	80022a8 <UART_DMA_Driver_Get>
 80027ce:	61b8      	str	r0, [r7, #24]
    if (driver == NULL)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d07c      	beq.n	80028d0 <UART_DMA_Rx_Check+0x114>
        return;

    size_t old_pos = driver->old_dma_pos;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027da:	617b      	str	r3, [r7, #20]
    size_t pos;

    uint16_t remaining = LL_DMA_GetDataLength(driver->dma_rx_instance, driver->dma_rx_channel);
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f7ff fcac 	bl	8002144 <LL_DMA_GetDataLength>
 80027ec:	4603      	mov	r3, r0
 80027ee:	827b      	strh	r3, [r7, #18]
    pos = driver->dma_rx_buffer_size - remaining;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80027f6:	461a      	mov	r2, r3
 80027f8:	8a7b      	ldrh	r3, [r7, #18]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	60fb      	str	r3, [r7, #12]
//    if (driver->uart->ISR & USART_ISR_ORE) {
//        driver->uart->ICR = USART_ICR_ORECF;
//        UART_Driver_Polling_SendString(USART1, "Overrun Error detected!\r\n");
//    }

    if (pos != old_pos) {
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	429a      	cmp	r2, r3
 8002804:	d065      	beq.n	80028d2 <UART_DMA_Rx_Check+0x116>
        if (pos > old_pos) {
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	429a      	cmp	r2, r3
 800280c:	d914      	bls.n	8002838 <UART_DMA_Rx_Check+0x7c>
            for (size_t i = old_pos; i < pos; i++) {
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
 8002812:	e00c      	b.n	800282e <UART_DMA_Rx_Check+0x72>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1d18      	adds	r0, r3, #4
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	4413      	add	r3, r2
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	4619      	mov	r1, r3
 8002824:	f007 fe94 	bl	800a550 <RingBuffer_Put>
            for (size_t i = old_pos; i < pos; i++) {
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	3301      	adds	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
 800282e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	429a      	cmp	r2, r3
 8002834:	d3ee      	bcc.n	8002814 <UART_DMA_Rx_Check+0x58>
 8002836:	e02a      	b.n	800288e <UART_DMA_Rx_Check+0xd2>
            }
        } else {
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	e00c      	b.n	8002858 <UART_DMA_Rx_Check+0x9c>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	1d18      	adds	r0, r3, #4
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	f007 fe7f 	bl	800a550 <RingBuffer_Put>
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	3301      	adds	r3, #1
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800285e:	461a      	mov	r2, r3
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	4293      	cmp	r3, r2
 8002864:	d3eb      	bcc.n	800283e <UART_DMA_Rx_Check+0x82>
            }
            for (size_t i = 0; i < pos; i++) {
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	e00c      	b.n	8002886 <UART_DMA_Rx_Check+0xca>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1d18      	adds	r0, r3, #4
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4413      	add	r3, r2
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4619      	mov	r1, r3
 800287c:	f007 fe68 	bl	800a550 <RingBuffer_Put>
            for (size_t i = 0; i < pos; i++) {
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	3301      	adds	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	429a      	cmp	r2, r3
 800288c:	d3ee      	bcc.n	800286c <UART_DMA_Rx_Check+0xb0>
            }
        }
        xSemaphoreGiveFromISR(driver->rxSemaphore, &xHigherPriorityTaskWoken);
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002892:	f107 0208 	add.w	r2, r7, #8
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f00e f9a3 	bl	8010be4 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <UART_DMA_Rx_Check+0xf8>
 80028a4:	4b0c      	ldr	r3, [pc, #48]	@ (80028d8 <UART_DMA_Rx_Check+0x11c>)
 80028a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	f3bf 8f6f 	isb	sy

        driver->old_dma_pos = pos;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	679a      	str	r2, [r3, #120]	@ 0x78
        if (driver->old_dma_pos == driver->dma_rx_buffer_size) {
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	f8b2 2074 	ldrh.w	r2, [r2, #116]	@ 0x74
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d104      	bne.n	80028d2 <UART_DMA_Rx_Check+0x116>
            driver->old_dma_pos = 0;
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2200      	movs	r2, #0
 80028cc:	679a      	str	r2, [r3, #120]	@ 0x78
 80028ce:	e000      	b.n	80028d2 <UART_DMA_Rx_Check+0x116>
        return;
 80028d0:	bf00      	nop
        }
    }
}
 80028d2:	3728      	adds	r7, #40	@ 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	e000ed04 	.word	0xe000ed04

080028dc <UART_DMA_Driver_Read>:



int UART_DMA_Driver_Read(USART_TypeDef *uart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff fcdf 	bl	80022a8 <UART_DMA_Driver_Get>
 80028ea:	60f8      	str	r0, [r7, #12]
    if(driver == NULL)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <UART_DMA_Driver_Read+0x1c>
        return -1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	e00e      	b.n	8002916 <UART_DMA_Driver_Read+0x3a>

    RingBufElement data;
    if(RingBuffer_Get(&driver->rx_buffer, &data)){
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3304      	adds	r3, #4
 80028fc:	f107 020b 	add.w	r2, r7, #11
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f007 fe6a 	bl	800a5dc <RingBuffer_Get>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <UART_DMA_Driver_Read+0x36>
        return data;
 800290e:	7afb      	ldrb	r3, [r7, #11]
 8002910:	e001      	b.n	8002916 <UART_DMA_Driver_Read+0x3a>
    }
    return -1;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <UART_DMA_Driver_IsDataAvailable>:

_Bool UART_DMA_Driver_IsDataAvailable(USART_TypeDef *uart)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fcbe 	bl	80022a8 <UART_DMA_Driver_Get>
 800292c:	60f8      	str	r0, [r7, #12]
    if(driver == NULL)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <UART_DMA_Driver_IsDataAvailable+0x1a>
        return false;
 8002934:	2300      	movs	r3, #0
 8002936:	e005      	b.n	8002944 <UART_DMA_Driver_IsDataAvailable+0x26>

    return RingBuffer_IsDataAvailable(&driver->rx_buffer);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3304      	adds	r3, #4
 800293c:	4618      	mov	r0, r3
 800293e:	f007 feca 	bl	800a6d6 <RingBuffer_IsDataAvailable>
 8002942:	4603      	mov	r3, r0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <UART_DMA_Driver_TXNumFreeSlots>:

uint16_t UART_DMA_Driver_TXNumFreeSlots(USART_TypeDef *uart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff fca7 	bl	80022a8 <UART_DMA_Driver_Get>
 800295a:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <UART_DMA_Driver_TXNumFreeSlots+0x1a>
        return 0;
 8002962:	2300      	movs	r3, #0
 8002964:	e006      	b.n	8002974 <UART_DMA_Driver_TXNumFreeSlots+0x28>

    return (uint16_t)RingBuffer_NumFreeSlots(&driver->tx_buffer);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3334      	adds	r3, #52	@ 0x34
 800296a:	4618      	mov	r0, r3
 800296c:	f007 fe77 	bl	800a65e <RingBuffer_NumFreeSlots>
 8002970:	4603      	mov	r3, r0
 8002972:	bf00      	nop
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <UART_Driver_Polling_Write>:

/************************************************************************************************
 *                    						EXPAND FUNCTION                    					*
 ***********************************************************************************************/
void UART_Driver_Polling_Write(USART_TypeDef *uart, uint8_t data)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
    while (!LL_USART_IsActiveFlag_TXE(uart))
 8002988:	bf00      	nop
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fa9d 	bl	8001eca <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f9      	beq.n	800298a <UART_Driver_Polling_Write+0xe>
    {
    }
    LL_USART_TransmitData8(uart, data);
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fb57 	bl	800204e <LL_USART_TransmitData8>
    while (!LL_USART_IsActiveFlag_TC(uart))
 80029a0:	bf00      	nop
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fa7e 	bl	8001ea4 <LL_USART_IsActiveFlag_TC>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f9      	beq.n	80029a2 <UART_Driver_Polling_Write+0x26>
    {
    }
}
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_Driver_Polling_SendString>:

void UART_Driver_Polling_SendString(USART_TypeDef *uart, const char *str)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
    if (str == NULL)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <UART_Driver_Polling_SendString+0x2e>
        return;
    while (*str)
 80029c8:	e008      	b.n	80029dc <UART_Driver_Polling_SendString+0x24>
    {
    	UART_Driver_Polling_Write(uart, (uint8_t)(*str));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4619      	mov	r1, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ffd3 	bl	800297c <UART_Driver_Polling_Write>
        str++;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	603b      	str	r3, [r7, #0]
    while (*str)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f2      	bne.n	80029ca <UART_Driver_Polling_SendString+0x12>
 80029e4:	e000      	b.n	80029e8 <UART_Driver_Polling_SendString+0x30>
        return;
 80029e6:	bf00      	nop
    }
}
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <fnv1a32>:
static int FRAM_PASSWORD_FAIL = 0;

#define FRAM_USER_PWD_LEN_ADDR  0x0000
#define FRAM_USER_PWD_ADDR      0x0001

static uint32_t fnv1a32(const char *s) {
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
    uint32_t h = 0x811C9DC5u;
 80029f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <fnv1a32+0x40>)
 80029fa:	60fb      	str	r3, [r7, #12]
    while (*s) {
 80029fc:	e00c      	b.n	8002a18 <fnv1a32+0x28>
        h ^= (uint8_t)(*s++);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4053      	eors	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
        h *= 0x01000193u;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a08      	ldr	r2, [pc, #32]	@ (8002a34 <fnv1a32+0x44>)
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	60fb      	str	r3, [r7, #12]
    while (*s) {
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ee      	bne.n	80029fe <fnv1a32+0xe>
    }
    return h;
 8002a20:	68fb      	ldr	r3, [r7, #12]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	811c9dc5 	.word	0x811c9dc5
 8002a34:	01000193 	.word	0x01000193

08002a38 <hash_equal>:
static int hash_equal(uint32_t a, uint32_t b) {
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
    uint32_t diff = a ^ b;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4053      	eors	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
    diff |= diff >> 16;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
    diff |= diff >> 8;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
    return (diff & 0xFFu) == 0;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <verify_password>:

int verify_password(const char *input_password) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
    uint32_t input_hash = fnv1a32(input_password);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ffb5 	bl	80029f0 <fnv1a32>
 8002a86:	60f8      	str	r0, [r7, #12]
    uint32_t stored_hash = itwasmeulrich;
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <verify_password+0x28>)
 8002a8a:	60bb      	str	r3, [r7, #8]
    return hash_equal(input_hash, stored_hash);
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff ffd2 	bl	8002a38 <hash_equal>
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	c5477ba3 	.word	0xc5477ba3

08002aa4 <load_user_password>:

static void load_user_password(ShieldInstance_t *instance) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
    FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 8002aac:	f005 fffa 	bl	8008aa4 <FRAM_SPI_GetHandle>
 8002ab0:	60f8      	str	r0, [r7, #12]
    uint8_t pwd_len = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	72fb      	strb	r3, [r7, #11]

    if (FRAM_SPI_ReadMem(hfram, FRAM_USER_PWD_LEN_ADDR, &pwd_len, 1) != E_OK || pwd_len > MAX_PASSWORD_LEN) {
 8002ab6:	f107 020b 	add.w	r2, r7, #11
 8002aba:	2301      	movs	r3, #1
 8002abc:	2100      	movs	r1, #0
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f006 f8e7 	bl	8008c92 <FRAM_SPI_ReadMem>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <load_user_password+0x2c>
 8002aca:	7afb      	ldrb	r3, [r7, #11]
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d907      	bls.n	8002ae0 <load_user_password+0x3c>
        Shield_WriteString(instance, "Could not load user-pwd, please use admin-pwd instead!\r\n");
 8002ad0:	4915      	ldr	r1, [pc, #84]	@ (8002b28 <load_user_password+0x84>)
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f920 	bl	8002d18 <Shield_WriteString>
    	FRAM_PASSWORD_FAIL = 1;
 8002ad8:	4b14      	ldr	r3, [pc, #80]	@ (8002b2c <load_user_password+0x88>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e020      	b.n	8002b22 <load_user_password+0x7e>
        return;
    }

    if (pwd_len > 0) {
 8002ae0:	7afb      	ldrb	r3, [r7, #11]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <load_user_password+0x70>
        if (FRAM_SPI_ReadMem(hfram, FRAM_USER_PWD_ADDR, (uint8_t *)user_password, pwd_len) == E_OK) {
 8002ae6:	7afb      	ldrb	r3, [r7, #11]
 8002ae8:	4a11      	ldr	r2, [pc, #68]	@ (8002b30 <load_user_password+0x8c>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f006 f8d0 	bl	8008c92 <FRAM_SPI_ReadMem>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <load_user_password+0x60>
            user_password[pwd_len] = '\0';
 8002af8:	7afb      	ldrb	r3, [r7, #11]
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <load_user_password+0x8c>)
 8002afe:	2100      	movs	r1, #0
 8002b00:	5499      	strb	r1, [r3, r2]
 8002b02:	e00e      	b.n	8002b22 <load_user_password+0x7e>
        } else {
            Shield_WriteString(instance, "Could not load user-pwd, please use admin-pwd instead!\r\n");
 8002b04:	4908      	ldr	r1, [pc, #32]	@ (8002b28 <load_user_password+0x84>)
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f906 	bl	8002d18 <Shield_WriteString>
        	FRAM_PASSWORD_FAIL = 1;
 8002b0c:	4b07      	ldr	r3, [pc, #28]	@ (8002b2c <load_user_password+0x88>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e006      	b.n	8002b22 <load_user_password+0x7e>
        }
    } else {
        Shield_WriteString(instance, "Could not load user-pwd, please use admin-pwd instead!\r\n");
 8002b14:	4904      	ldr	r1, [pc, #16]	@ (8002b28 <load_user_password+0x84>)
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f8fe 	bl	8002d18 <Shield_WriteString>
    	FRAM_PASSWORD_FAIL = 1;
 8002b1c:	4b03      	ldr	r3, [pc, #12]	@ (8002b2c <load_user_password+0x88>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    }
}
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	08023520 	.word	0x08023520
 8002b2c:	24018340 	.word	0x24018340
 8002b30:	2401832c 	.word	0x2401832c

08002b34 <verify_user_password>:

static int verify_user_password(const char *input_password){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	if(FRAM_PASSWORD_FAIL == 1){
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <verify_user_password+0x44>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d10b      	bne.n	8002b5c <verify_user_password+0x28>
	    uint32_t input_hash = fnv1a32(input_password);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff53 	bl	80029f0 <fnv1a32>
 8002b4a:	60f8      	str	r0, [r7, #12]
	    uint32_t stored_hash = itwasmeulrich;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <verify_user_password+0x48>)
 8002b4e:	60bb      	str	r3, [r7, #8]
	    return hash_equal(input_hash, stored_hash);
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff ff70 	bl	8002a38 <hash_equal>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	e009      	b.n	8002b70 <verify_user_password+0x3c>
	}else{
		if(strcmp(input_password, user_password) == 0){
 8002b5c:	4908      	ldr	r1, [pc, #32]	@ (8002b80 <verify_user_password+0x4c>)
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fd fbbe 	bl	80002e0 <strcmp>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <verify_user_password+0x3a>
			return 1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <verify_user_password+0x3c>
		}else{
			return 0;
 8002b6e:	2300      	movs	r3, #0
		}
	}
	return 0;
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	24018340 	.word	0x24018340
 8002b7c:	c5477ba3 	.word	0xc5477ba3
 8002b80:	2401832c 	.word	0x2401832c

08002b84 <Shield_UpdateTimer>:

void Shield_UpdateTimer(ShieldInstance_t *instance){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	if(instance->state == AUTH_USER){
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d110      	bne.n	8002bb8 <Shield_UpdateTimer+0x34>
		instance->last_activity_time++;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	@ 0x54
		if(instance->last_activity_time >= USER_TIMEOUT){
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba4:	4a06      	ldr	r2, [pc, #24]	@ (8002bc0 <Shield_UpdateTimer+0x3c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d306      	bcc.n	8002bb8 <Shield_UpdateTimer+0x34>
			Shield_Reset(instance);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f868 	bl	8002c80 <Shield_Reset>
		    Shield_WriteString(instance, "\r\nSession timed out due to inactivity.\r\n");
 8002bb0:	4904      	ldr	r1, [pc, #16]	@ (8002bc4 <Shield_UpdateTimer+0x40>)
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8b0 	bl	8002d18 <Shield_WriteString>
		}
	}
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	000493e0 	.word	0x000493e0
 8002bc4:	0802355c 	.word	0x0802355c

08002bc8 <Shield_ResetTimer>:
void Shield_ResetTimer(ShieldInstance_t *instance){
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	if(instance->state == AUTH_USER){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d102      	bne.n	8002be0 <Shield_ResetTimer+0x18>
		instance->last_activity_time = 0;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	655a      	str	r2, [r3, #84]	@ 0x54
	}
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <Shield_Init>:

void Shield_Init(ShieldInstance_t *instance, void (*write_char_func)(char c)) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
    instance->write_char = write_char_func;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	659a      	str	r2, [r3, #88]	@ 0x58
    instance->initreset = 0;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	621a      	str	r2, [r3, #32]
    instance->pos = 0;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24
    instance->state = UNAUTHORIZED;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    instance->login_attempts = 0;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	62da      	str	r2, [r3, #44]	@ 0x2c
    instance->password_pos = 0;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	651a      	str	r2, [r3, #80]	@ 0x50
    instance->last_activity_time = 0; // User should set this with actual time if needed
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	655a      	str	r2, [r3, #84]	@ 0x54
    memset(instance->buffer, 0, SHIELD_BUFFER_SIZE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f01f f9b8 	bl	8021f9e <memset>
    memset(instance->password_buffer, 0, SHIELD_BUFFER_SIZE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3330      	adds	r3, #48	@ 0x30
 8002c32:	2220      	movs	r2, #32
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f01f f9b1 	bl	8021f9e <memset>
    Shield_WriteString(instance, "\33[2J");         // Clear screen
 8002c3c:	490b      	ldr	r1, [pc, #44]	@ (8002c6c <Shield_Init+0x80>)
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f86a 	bl	8002d18 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;0H");     // Move to 0:0
 8002c44:	490a      	ldr	r1, [pc, #40]	@ (8002c70 <Shield_Init+0x84>)
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f866 	bl	8002d18 <Shield_WriteString>
    Shield_WriteString(instance, "OBC: [CM4 -> OBC]");
 8002c4c:	4909      	ldr	r1, [pc, #36]	@ (8002c74 <Shield_Init+0x88>)
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f862 	bl	8002d18 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;1H");
 8002c54:	4908      	ldr	r1, [pc, #32]	@ (8002c78 <Shield_Init+0x8c>)
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f85e 	bl	8002d18 <Shield_WriteString>
    Shield_WriteString(instance, SHIELD_NEWLINE);
 8002c5c:	4907      	ldr	r1, [pc, #28]	@ (8002c7c <Shield_Init+0x90>)
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f85a 	bl	8002d18 <Shield_WriteString>
//    Shield_WriteString(instance, SHIELD_INITATION);
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	08023588 	.word	0x08023588
 8002c70:	08023590 	.word	0x08023590
 8002c74:	08023598 	.word	0x08023598
 8002c78:	080235ac 	.word	0x080235ac
 8002c7c:	080235b4 	.word	0x080235b4

08002c80 <Shield_Reset>:

void Shield_Reset(ShieldInstance_t *instance) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
    instance->initreset = 1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	621a      	str	r2, [r3, #32]
    instance->pos = 0;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	625a      	str	r2, [r3, #36]	@ 0x24
    instance->state = UNAUTHORIZED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    instance->login_attempts = 0;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
    instance->password_pos = 0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	651a      	str	r2, [r3, #80]	@ 0x50
    instance->last_activity_time = 0;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	655a      	str	r2, [r3, #84]	@ 0x54
    memset(instance->buffer, 0, SHIELD_BUFFER_SIZE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f01f f972 	bl	8021f9e <memset>
    memset(instance->password_buffer, 0, SHIELD_BUFFER_SIZE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3330      	adds	r3, #48	@ 0x30
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f01f f96b 	bl	8021f9e <memset>
    Shield_WriteString(instance, "\33[2J");         // Clear screen
 8002cc8:	490d      	ldr	r1, [pc, #52]	@ (8002d00 <Shield_Reset+0x80>)
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f824 	bl	8002d18 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;0H");     // Move to 0:0
 8002cd0:	490c      	ldr	r1, [pc, #48]	@ (8002d04 <Shield_Reset+0x84>)
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f820 	bl	8002d18 <Shield_WriteString>
    Shield_WriteString(instance, "OBC: [CM4 -> OBC]");
 8002cd8:	490b      	ldr	r1, [pc, #44]	@ (8002d08 <Shield_Reset+0x88>)
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f81c 	bl	8002d18 <Shield_WriteString>
    Shield_WriteString(instance, "\033[0;1H");
 8002ce0:	490a      	ldr	r1, [pc, #40]	@ (8002d0c <Shield_Reset+0x8c>)
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f818 	bl	8002d18 <Shield_WriteString>
    Shield_WriteString(instance, SHIELD_NEWLINE);
 8002ce8:	4909      	ldr	r1, [pc, #36]	@ (8002d10 <Shield_Reset+0x90>)
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f814 	bl	8002d18 <Shield_WriteString>
    Shield_WriteString(instance, SHIELD_INITATION);
 8002cf0:	4908      	ldr	r1, [pc, #32]	@ (8002d14 <Shield_Reset+0x94>)
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f810 	bl	8002d18 <Shield_WriteString>
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	08023588 	.word	0x08023588
 8002d04:	08023590 	.word	0x08023590
 8002d08:	08023598 	.word	0x08023598
 8002d0c:	080235ac 	.word	0x080235ac
 8002d10:	080235b4 	.word	0x080235b4
 8002d14:	080235b8 	.word	0x080235b8

08002d18 <Shield_WriteString>:

void Shield_WriteString(ShieldInstance_t *instance, const char *str) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
    while (*str) {
 8002d22:	e007      	b.n	8002d34 <Shield_WriteString+0x1c>
        instance->write_char(*str++);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	1c59      	adds	r1, r3, #1
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	4790      	blx	r2
    while (*str) {
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f3      	bne.n	8002d24 <Shield_WriteString+0xc>
    }
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <Shield_Process>:

static void Shield_Process(ShieldInstance_t *instance) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
    if (instance->state == UNAUTHORIZED) {
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d137      	bne.n	8002dca <Shield_Process+0x82>
        if (strcmp(instance->buffer, "admin") == 0) {
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4924      	ldr	r1, [pc, #144]	@ (8002df0 <Shield_Process+0xa8>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fabe 	bl	80002e0 <strcmp>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <Shield_Process+0x3a>
            instance->state = LOGIN_ADMIN;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            instance->login_attempts = 0;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	62da      	str	r2, [r3, #44]	@ 0x2c
            Shield_WriteString(instance, "Password: ");
 8002d78:	491e      	ldr	r1, [pc, #120]	@ (8002df4 <Shield_Process+0xac>)
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ffcc 	bl	8002d18 <Shield_WriteString>
            Shield_WriteString(instance, "Login as [admin/user]: ");
        }
    } else if (instance->state == AUTH_ADMIN || instance->state == AUTH_USER) {
        Shield_WriteString(instance, "HelloWorld\r\n");
    }
}
 8002d80:	e031      	b.n	8002de6 <Shield_Process+0x9e>
        } else if (strcmp(instance->buffer, "user") == 0) {
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	491c      	ldr	r1, [pc, #112]	@ (8002df8 <Shield_Process+0xb0>)
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd faaa 	bl	80002e0 <strcmp>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10e      	bne.n	8002db0 <Shield_Process+0x68>
        	load_user_password(instance);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fe86 	bl	8002aa4 <load_user_password>
            instance->state = LOGIN_USER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            instance->login_attempts = 0;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	62da      	str	r2, [r3, #44]	@ 0x2c
            Shield_WriteString(instance, "Password: ");
 8002da6:	4913      	ldr	r1, [pc, #76]	@ (8002df4 <Shield_Process+0xac>)
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ffb5 	bl	8002d18 <Shield_WriteString>
}
 8002dae:	e01a      	b.n	8002de6 <Shield_Process+0x9e>
            Shield_WriteString(instance, "Unsupported this user name. [admin/user]\r\n");
 8002db0:	4912      	ldr	r1, [pc, #72]	@ (8002dfc <Shield_Process+0xb4>)
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ffb0 	bl	8002d18 <Shield_WriteString>
            Shield_WriteString(instance, SHIELD_NEWLINE);
 8002db8:	4911      	ldr	r1, [pc, #68]	@ (8002e00 <Shield_Process+0xb8>)
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ffac 	bl	8002d18 <Shield_WriteString>
            Shield_WriteString(instance, "Login as [admin/user]: ");
 8002dc0:	4910      	ldr	r1, [pc, #64]	@ (8002e04 <Shield_Process+0xbc>)
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ffa8 	bl	8002d18 <Shield_WriteString>
}
 8002dc8:	e00d      	b.n	8002de6 <Shield_Process+0x9e>
    } else if (instance->state == AUTH_ADMIN || instance->state == AUTH_USER) {
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d004      	beq.n	8002dde <Shield_Process+0x96>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d103      	bne.n	8002de6 <Shield_Process+0x9e>
        Shield_WriteString(instance, "HelloWorld\r\n");
 8002dde:	490a      	ldr	r1, [pc, #40]	@ (8002e08 <Shield_Process+0xc0>)
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff99 	bl	8002d18 <Shield_WriteString>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	080235d0 	.word	0x080235d0
 8002df4:	080235d8 	.word	0x080235d8
 8002df8:	080235e4 	.word	0x080235e4
 8002dfc:	080235ec 	.word	0x080235ec
 8002e00:	080235b4 	.word	0x080235b4
 8002e04:	080235b8 	.word	0x080235b8
 8002e08:	08023618 	.word	0x08023618

08002e0c <Shield_ReceiveChar>:

void Shield_ReceiveChar(ShieldInstance_t *instance, char ch) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	70fb      	strb	r3, [r7, #3]
#ifdef DEBUG_SHIELD
    char hex[6];
    snprintf(hex, sizeof(hex), "0x%02X ", ch);
    Shield_WriteString(instance, hex);
#endif
    if (instance->state == LOGIN_ADMIN || instance->state == LOGIN_USER) {
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d005      	beq.n	8002e2e <Shield_ReceiveChar+0x22>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	f040 80ed 	bne.w	8003008 <Shield_ReceiveChar+0x1fc>
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 8002e2e:	220a      	movs	r2, #10
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <Shield_ReceiveChar+0x34>
 8002e36:	220d      	movs	r2, #13
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	f040 80b6 	bne.w	8002fac <Shield_ReceiveChar+0x1a0>
            instance->password_buffer[instance->password_pos] = '\0';
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            if (instance->state == LOGIN_ADMIN && verify_password(instance->password_buffer) == 1) {
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d138      	bne.n	8002eca <Shield_ReceiveChar+0xbe>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3330      	adds	r3, #48	@ 0x30
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fe0b 	bl	8002a78 <verify_password>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d130      	bne.n	8002eca <Shield_ReceiveChar+0xbe>
                instance->state = AUTH_ADMIN;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002e70:	499a      	ldr	r1, [pc, #616]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ff50 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\r\n");
 8002e78:	4999      	ldr	r1, [pc, #612]	@ (80030e0 <Shield_ReceiveChar+0x2d4>)
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ff4c 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "Logged in as admin: SLT-OBC v1.2.0");
 8002e80:	4998      	ldr	r1, [pc, #608]	@ (80030e4 <Shield_ReceiveChar+0x2d8>)
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ff48 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002e88:	4994      	ldr	r1, [pc, #592]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ff44 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 8002e90:	4995      	ldr	r1, [pc, #596]	@ (80030e8 <Shield_ReceiveChar+0x2dc>)
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ff40 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "   ______ _______ ____  ___  _____\r\n");
 8002e98:	4994      	ldr	r1, [pc, #592]	@ (80030ec <Shield_ReceiveChar+0x2e0>)
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ff3c 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "  / __/ //_  __(_) __ \\/ _ )/ ___/\r\n");
 8002ea0:	4993      	ldr	r1, [pc, #588]	@ (80030f0 <Shield_ReceiveChar+0x2e4>)
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ff38 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, " _\\ \\/ /__/ / _ / /_/ / _  / /__  \r\n");
 8002ea8:	4992      	ldr	r1, [pc, #584]	@ (80030f4 <Shield_ReceiveChar+0x2e8>)
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ff34 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "/___/____/_/ (_)\\____/____/\\___/  \r\n");
 8002eb0:	4991      	ldr	r1, [pc, #580]	@ (80030f8 <Shield_ReceiveChar+0x2ec>)
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff ff30 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 8002eb8:	498b      	ldr	r1, [pc, #556]	@ (80030e8 <Shield_ReceiveChar+0x2dc>)
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ff2c 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002ec0:	4986      	ldr	r1, [pc, #536]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ff28 	bl	8002d18 <Shield_WriteString>
 8002ec8:	e06c      	b.n	8002fa4 <Shield_ReceiveChar+0x198>
            } else if (instance->state == LOGIN_USER && verify_user_password(instance->password_buffer) == 1) {
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d138      	bne.n	8002f46 <Shield_ReceiveChar+0x13a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3330      	adds	r3, #48	@ 0x30
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fe2b 	bl	8002b34 <verify_user_password>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d130      	bne.n	8002f46 <Shield_ReceiveChar+0x13a>
                instance->state = AUTH_USER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002eec:	497b      	ldr	r1, [pc, #492]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ff12 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\r\n");
 8002ef4:	497a      	ldr	r1, [pc, #488]	@ (80030e0 <Shield_ReceiveChar+0x2d4>)
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ff0e 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "Logged in as user: SLT-OBC v1.2.0");
 8002efc:	497f      	ldr	r1, [pc, #508]	@ (80030fc <Shield_ReceiveChar+0x2f0>)
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ff0a 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002f04:	4975      	ldr	r1, [pc, #468]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff06 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 8002f0c:	4976      	ldr	r1, [pc, #472]	@ (80030e8 <Shield_ReceiveChar+0x2dc>)
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff ff02 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "   ______ _______ ____  ___  _____\r\n");
 8002f14:	4975      	ldr	r1, [pc, #468]	@ (80030ec <Shield_ReceiveChar+0x2e0>)
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fefe 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "  / __/ //_  __(_) __ \\/ _ )/ ___/\r\n");
 8002f1c:	4974      	ldr	r1, [pc, #464]	@ (80030f0 <Shield_ReceiveChar+0x2e4>)
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff fefa 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, " _\\ \\/ /__/ / _ / /_/ / _  / /__  \r\n");
 8002f24:	4973      	ldr	r1, [pc, #460]	@ (80030f4 <Shield_ReceiveChar+0x2e8>)
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff fef6 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "/___/____/_/ (_)\\____/____/\\___/  \r\n");
 8002f2c:	4972      	ldr	r1, [pc, #456]	@ (80030f8 <Shield_ReceiveChar+0x2ec>)
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fef2 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, "__________________________________\r\n");
 8002f34:	496c      	ldr	r1, [pc, #432]	@ (80030e8 <Shield_ReceiveChar+0x2dc>)
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff feee 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002f3c:	4967      	ldr	r1, [pc, #412]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff feea 	bl	8002d18 <Shield_WriteString>
 8002f44:	e02e      	b.n	8002fa4 <Shield_ReceiveChar+0x198>
            } else {
                instance->login_attempts++;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8002f50:	4962      	ldr	r1, [pc, #392]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff fee0 	bl	8002d18 <Shield_WriteString>
                if (instance->login_attempts >= MAX_LOGIN_ATTEMPTS) {
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	db14      	blt.n	8002f8c <Shield_ReceiveChar+0x180>
                    instance->state = UNAUTHORIZED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                    Shield_WriteString(instance, "Too many failed attempts. Please try again.");
 8002f6a:	4965      	ldr	r1, [pc, #404]	@ (8003100 <Shield_ReceiveChar+0x2f4>)
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff fed3 	bl	8002d18 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_NEWLINE);
 8002f72:	495a      	ldr	r1, [pc, #360]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff fecf 	bl	8002d18 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_NEWLINE);
 8002f7a:	4958      	ldr	r1, [pc, #352]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff fecb 	bl	8002d18 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_INITATION);
 8002f82:	4960      	ldr	r1, [pc, #384]	@ (8003104 <Shield_ReceiveChar+0x2f8>)
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff fec7 	bl	8002d18 <Shield_WriteString>
 8002f8a:	e00b      	b.n	8002fa4 <Shield_ReceiveChar+0x198>
                } else {
                    Shield_WriteString(instance, "Incorrect password. Please try again.");
 8002f8c:	495e      	ldr	r1, [pc, #376]	@ (8003108 <Shield_ReceiveChar+0x2fc>)
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fec2 	bl	8002d18 <Shield_WriteString>
                    Shield_WriteString(instance, SHIELD_NEWLINE);
 8002f94:	4951      	ldr	r1, [pc, #324]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff febe 	bl	8002d18 <Shield_WriteString>
                    Shield_WriteString(instance, "Password: ");
 8002f9c:	495b      	ldr	r1, [pc, #364]	@ (800310c <Shield_ReceiveChar+0x300>)
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff feba 	bl	8002d18 <Shield_WriteString>
                }
            }
            instance->password_pos = 0;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	651a      	str	r2, [r3, #80]	@ 0x50
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 8002faa:	e092      	b.n	80030d2 <Shield_ReceiveChar+0x2c6>
        } else if (ch == BACKSPACE) {
 8002fac:	227f      	movs	r2, #127	@ 0x7f
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d116      	bne.n	8002fe2 <Shield_ReceiveChar+0x1d6>
            if (instance->password_pos > 0) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f340 808a 	ble.w	80030d2 <Shield_ReceiveChar+0x2c6>
                instance->password_pos--;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc2:	1e5a      	subs	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	651a      	str	r2, [r3, #80]	@ 0x50
                instance->write_char('\b');
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	2008      	movs	r0, #8
 8002fce:	4798      	blx	r3
                instance->write_char(' ');
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd4:	2020      	movs	r0, #32
 8002fd6:	4798      	blx	r3
                instance->write_char('\b');
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fdc:	2008      	movs	r0, #8
 8002fde:	4798      	blx	r3
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 8002fe0:	e077      	b.n	80030d2 <Shield_ReceiveChar+0x2c6>
            }
        } else if (instance->password_pos < SHIELD_BUFFER_SIZE - 1) {
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe6:	2b1e      	cmp	r3, #30
 8002fe8:	dc73      	bgt.n	80030d2 <Shield_ReceiveChar+0x2c6>
            instance->password_buffer[instance->password_pos++] = ch;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fee:	1c59      	adds	r1, r3, #1
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6511      	str	r1, [r2, #80]	@ 0x50
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            instance->write_char('*'); // Mask password with *
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003002:	202a      	movs	r0, #42	@ 0x2a
 8003004:	4798      	blx	r3
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 8003006:	e064      	b.n	80030d2 <Shield_ReceiveChar+0x2c6>
        }
    } else if (instance->state == AUTH_ADMIN || instance->state == AUTH_USER) {
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800300e:	2b03      	cmp	r3, #3
 8003010:	d004      	beq.n	800301c <Shield_ReceiveChar+0x210>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003018:	2b04      	cmp	r3, #4
 800301a:	d104      	bne.n	8003026 <Shield_ReceiveChar+0x21a>
        Shield_WriteString(instance, "Hello123\r\n"); // Placeholder for command processing
 800301c:	493c      	ldr	r1, [pc, #240]	@ (8003110 <Shield_ReceiveChar+0x304>)
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff fe7a 	bl	8002d18 <Shield_WriteString>
 8003024:	e056      	b.n	80030d4 <Shield_ReceiveChar+0x2c8>
    } else {
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 8003026:	220a      	movs	r2, #10
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	4293      	cmp	r3, r2
 800302c:	d003      	beq.n	8003036 <Shield_ReceiveChar+0x22a>
 800302e:	220d      	movs	r2, #13
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	4293      	cmp	r3, r2
 8003034:	d11c      	bne.n	8003070 <Shield_ReceiveChar+0x264>
            instance->buffer[instance->pos] = '\0';
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	2100      	movs	r1, #0
 800303e:	54d1      	strb	r1, [r2, r3]
            if (instance->pos > 0) {
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	2b00      	cmp	r3, #0
 8003046:	dd0a      	ble.n	800305e <Shield_ReceiveChar+0x252>
                Shield_WriteString(instance, SHIELD_NEWLINE);
 8003048:	4924      	ldr	r1, [pc, #144]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff fe64 	bl	8002d18 <Shield_WriteString>
                Shield_Process(instance);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff fe79 	bl	8002d48 <Shield_Process>
                instance->pos = 0;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	625a      	str	r2, [r3, #36]	@ 0x24
            if (instance->pos > 0) {
 800305c:	e03a      	b.n	80030d4 <Shield_ReceiveChar+0x2c8>
            } else {
                Shield_WriteString(instance, SHIELD_NEWLINE);
 800305e:	491f      	ldr	r1, [pc, #124]	@ (80030dc <Shield_ReceiveChar+0x2d0>)
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff fe59 	bl	8002d18 <Shield_WriteString>
                Shield_WriteString(instance, SHIELD_INITATION);
 8003066:	4927      	ldr	r1, [pc, #156]	@ (8003104 <Shield_ReceiveChar+0x2f8>)
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff fe55 	bl	8002d18 <Shield_WriteString>
            if (instance->pos > 0) {
 800306e:	e031      	b.n	80030d4 <Shield_ReceiveChar+0x2c8>
            }
        } else if (ch == BACKSPACE) {
 8003070:	227f      	movs	r2, #127	@ 0x7f
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	4293      	cmp	r3, r2
 8003076:	d11a      	bne.n	80030ae <Shield_ReceiveChar+0x2a2>
            if (instance->pos > 0) {
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	dd29      	ble.n	80030d4 <Shield_ReceiveChar+0x2c8>
                instance->pos--;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	1e5a      	subs	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	625a      	str	r2, [r3, #36]	@ 0x24
                instance->buffer[instance->pos] = '\0';
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	2100      	movs	r1, #0
 8003092:	54d1      	strb	r1, [r2, r3]
                instance->write_char('\b');
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	2008      	movs	r0, #8
 800309a:	4798      	blx	r3
                instance->write_char(' ');
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a0:	2020      	movs	r0, #32
 80030a2:	4798      	blx	r3
                instance->write_char('\b');
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	2008      	movs	r0, #8
 80030aa:	4798      	blx	r3
        } else if (instance->pos < SHIELD_BUFFER_SIZE - 1) {
            instance->buffer[instance->pos++] = ch;
            instance->write_char(ch);
        }
    }
}
 80030ac:	e012      	b.n	80030d4 <Shield_ReceiveChar+0x2c8>
        } else if (instance->pos < SHIELD_BUFFER_SIZE - 1) {
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	2b1e      	cmp	r3, #30
 80030b4:	dc0e      	bgt.n	80030d4 <Shield_ReceiveChar+0x2c8>
            instance->buffer[instance->pos++] = ch;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	1c59      	adds	r1, r3, #1
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6251      	str	r1, [r2, #36]	@ 0x24
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	78f9      	ldrb	r1, [r7, #3]
 80030c4:	54d1      	strb	r1, [r2, r3]
            instance->write_char(ch);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	4610      	mov	r0, r2
 80030ce:	4798      	blx	r3
}
 80030d0:	e000      	b.n	80030d4 <Shield_ReceiveChar+0x2c8>
        if (ch == LINE_BREAK || ch == CARRIAGE_RETURN) {
 80030d2:	bf00      	nop
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	080235b4 	.word	0x080235b4
 80030e0:	08023628 	.word	0x08023628
 80030e4:	08023694 	.word	0x08023694
 80030e8:	080236b8 	.word	0x080236b8
 80030ec:	080236e0 	.word	0x080236e0
 80030f0:	08023708 	.word	0x08023708
 80030f4:	08023730 	.word	0x08023730
 80030f8:	08023758 	.word	0x08023758
 80030fc:	08023780 	.word	0x08023780
 8003100:	080237a4 	.word	0x080237a4
 8003104:	080235b8 	.word	0x080235b8
 8003108:	080237d0 	.word	0x080237d0
 800310c:	080235d8 	.word	0x080235d8
 8003110:	080237f8 	.word	0x080237f8

08003114 <Shield_GetState>:

ShieldAuthState_t Shield_GetState(ShieldInstance_t *instance) {
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
    return instance->state;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003134:	f3bf 8f4f 	dsb	sy
}
 8003138:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <__NVIC_SystemReset+0x24>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003142:	4904      	ldr	r1, [pc, #16]	@ (8003154 <__NVIC_SystemReset+0x24>)
 8003144:	4b04      	ldr	r3, [pc, #16]	@ (8003158 <__NVIC_SystemReset+0x28>)
 8003146:	4313      	orrs	r3, r2
 8003148:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800314a:	f3bf 8f4f 	dsb	sy
}
 800314e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <__NVIC_SystemReset+0x20>
 8003154:	e000ed00 	.word	0xe000ed00
 8003158:	05fa0004 	.word	0x05fa0004

0800315c <LL_GPIO_SetOutputPin>:
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	619a      	str	r2, [r3, #24]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_GPIO_ResetOutputPin>:
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	041a      	lsls	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	619a      	str	r2, [r3, #24]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <UpdateCRC16_XMODEM>:
extern uint32_t _ecustom_data;
#define RAM_D2_200KB_START ((uint8_t*)&_scustom_data)
#define RAM_D3_START ((uint8_t*)0x38000000)
#define RAM_D2_200KB_SIZE  (200 * 1024)  // 200KB

static uint16_t UpdateCRC16_XMODEM(uint16_t crc, uint8_t byte) {
 8003196:	b480      	push	{r7}
 8003198:	b085      	sub	sp, #20
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	460a      	mov	r2, r1
 80031a0:	80fb      	strh	r3, [r7, #6]
 80031a2:	4613      	mov	r3, r2
 80031a4:	717b      	strb	r3, [r7, #5]
    const uint16_t polynomial = 0x1021; // CRC16 XMODEM
 80031a6:	f241 0321 	movw	r3, #4129	@ 0x1021
 80031aa:	81bb      	strh	r3, [r7, #12]
    crc ^= (uint16_t)byte << 8;
 80031ac:	797b      	ldrb	r3, [r7, #5]
 80031ae:	b21b      	sxth	r3, r3
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	b21a      	sxth	r2, r3
 80031b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b8:	4053      	eors	r3, r2
 80031ba:	b21b      	sxth	r3, r3
 80031bc:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
 80031c2:	e013      	b.n	80031ec <UpdateCRC16_XMODEM+0x56>
        if (crc & 0x8000) {
 80031c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da09      	bge.n	80031e0 <UpdateCRC16_XMODEM+0x4a>
            crc = (crc << 1) ^ polynomial;
 80031cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	b21a      	sxth	r2, r3
 80031d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031d8:	4053      	eors	r3, r2
 80031da:	b21b      	sxth	r3, r3
 80031dc:	80fb      	strh	r3, [r7, #6]
 80031de:	e002      	b.n	80031e6 <UpdateCRC16_XMODEM+0x50>
        } else {
            crc <<= 1;
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	3301      	adds	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b07      	cmp	r3, #7
 80031f0:	d9e8      	bls.n	80031c4 <UpdateCRC16_XMODEM+0x2e>
        }
    }
    return crc;
 80031f2:	88fb      	ldrh	r3, [r7, #6]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <CMD_Test>:

static void CMD_Test(EmbeddedCli *cli, char *args, void *context) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 800320c:	2101      	movs	r1, #1
 800320e:	68b8      	ldr	r0, [r7, #8]
 8003210:	f002 fa10 	bl	8005634 <embeddedCliGetToken>
 8003214:	6178      	str	r0, [r7, #20]
//    char buffer[100];

    if (arg1 == NULL) {
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <CMD_Test+0x26>
        embeddedCliPrint(cli, "Usage: test <arg>");
 800321c:	493f      	ldr	r1, [pc, #252]	@ (800331c <CMD_Test+0x11c>)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f002 f946 	bl	80054b0 <embeddedCliPrint>
        return;
 8003224:	e076      	b.n	8003314 <CMD_Test+0x114>
    }

    int option = atoi(arg1);
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f01e fbf4 	bl	8021a14 <atoi>
 800322c:	6138      	str	r0, [r7, #16]

    switch (option){
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b1e      	cmp	r3, #30
 8003232:	d86a      	bhi.n	800330a <CMD_Test+0x10a>
 8003234:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <CMD_Test+0x3c>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	080032b9 	.word	0x080032b9
 8003240:	080032c1 	.word	0x080032c1
 8003244:	080032cb 	.word	0x080032cb
 8003248:	0800330b 	.word	0x0800330b
 800324c:	0800330b 	.word	0x0800330b
 8003250:	0800330b 	.word	0x0800330b
 8003254:	0800330b 	.word	0x0800330b
 8003258:	0800330b 	.word	0x0800330b
 800325c:	0800330b 	.word	0x0800330b
 8003260:	0800330b 	.word	0x0800330b
 8003264:	080032d5 	.word	0x080032d5
 8003268:	080032dd 	.word	0x080032dd
 800326c:	080032e5 	.word	0x080032e5
 8003270:	080032ed 	.word	0x080032ed
 8003274:	0800330b 	.word	0x0800330b
 8003278:	0800330b 	.word	0x0800330b
 800327c:	0800330b 	.word	0x0800330b
 8003280:	0800330b 	.word	0x0800330b
 8003284:	0800330b 	.word	0x0800330b
 8003288:	0800330b 	.word	0x0800330b
 800328c:	080032f5 	.word	0x080032f5
 8003290:	080032ff 	.word	0x080032ff
 8003294:	0800330b 	.word	0x0800330b
 8003298:	0800330b 	.word	0x0800330b
 800329c:	0800330b 	.word	0x0800330b
 80032a0:	0800330b 	.word	0x0800330b
 80032a4:	0800330b 	.word	0x0800330b
 80032a8:	0800330b 	.word	0x0800330b
 80032ac:	0800330b 	.word	0x0800330b
 80032b0:	0800330b 	.word	0x0800330b
 80032b4:	08003305 	.word	0x08003305
		case 0:
			Min_Send_CONTROL_TEMP_CMD(30);
 80032b8:	201e      	movs	r0, #30
 80032ba:	f004 fc75 	bl	8007ba8 <Min_Send_CONTROL_TEMP_CMD>
			break;
 80032be:	e025      	b.n	800330c <CMD_Test+0x10c>
		case 1:
			Min_Send_COLLECT_DATA(1024);
 80032c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80032c4:	f004 fcb2 	bl	8007c2c <Min_Send_COLLECT_DATA>
			break;
 80032c8:	e020      	b.n	800330c <CMD_Test+0x10c>
		case 2:
			Min_Send_PRE_DATA(512);
 80032ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80032ce:	f004 fcfd 	bl	8007ccc <Min_Send_PRE_DATA>
			break;
 80032d2:	e01b      	b.n	800330c <CMD_Test+0x10c>
		case 10:
			Min_Send_PRE_CHUNK(0);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f004 fd43 	bl	8007d60 <Min_Send_PRE_CHUNK>
			break;
 80032da:	e017      	b.n	800330c <CMD_Test+0x10c>
		case 11:
			Min_Send_PRE_CHUNK(1);
 80032dc:	2001      	movs	r0, #1
 80032de:	f004 fd3f 	bl	8007d60 <Min_Send_PRE_CHUNK>
			break;
 80032e2:	e013      	b.n	800330c <CMD_Test+0x10c>
		case 12:
			Min_Send_PRE_CHUNK(2);
 80032e4:	2002      	movs	r0, #2
 80032e6:	f004 fd3b 	bl	8007d60 <Min_Send_PRE_CHUNK>
			break;
 80032ea:	e00f      	b.n	800330c <CMD_Test+0x10c>
		case 13:
			Min_Send_PRE_CHUNK(3);
 80032ec:	2003      	movs	r0, #3
 80032ee:	f004 fd37 	bl	8007d60 <Min_Send_PRE_CHUNK>
			break;
 80032f2:	e00b      	b.n	800330c <CMD_Test+0x10c>
		case 20:
			Min_Send_SAMPLERATE_SET(0xABCD);
 80032f4:	f64a 30cd 	movw	r0, #43981	@ 0xabcd
 80032f8:	f004 fd74 	bl	8007de4 <Min_Send_SAMPLERATE_SET>
			break;
 80032fc:	e006      	b.n	800330c <CMD_Test+0x10c>
		case 21:
			Min_Send_SAMPLERATE_GET();
 80032fe:	f004 fdc1 	bl	8007e84 <Min_Send_SAMPLERATE_GET>
			break;
 8003302:	e003      	b.n	800330c <CMD_Test+0x10c>
		case 30:
			Min_Send_COLLECT_PACKAGE();
 8003304:	f004 fdfa 	bl	8007efc <Min_Send_COLLECT_PACKAGE>
			break;
 8003308:	e000      	b.n	800330c <CMD_Test+0x10c>


		default:

			break;
 800330a:	bf00      	nop
    }

//    snprintf(buffer, sizeof(buffer), "");
//    embeddedCliPrint(cli, buffer);

    embeddedCliPrint(cli, "");
 800330c:	4904      	ldr	r1, [pc, #16]	@ (8003320 <CMD_Test+0x120>)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f002 f8ce 	bl	80054b0 <embeddedCliPrint>
}
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	08023e88 	.word	0x08023e88
 8003320:	08023e9c 	.word	0x08023e9c

08003324 <CMD_RamFill>:

static void CMD_RamFill(EmbeddedCli *cli, char *args, void *context) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b0a8      	sub	sp, #160	@ 0xa0
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // option (1, 2, 3)
 8003330:	2101      	movs	r1, #1
 8003332:	68b8      	ldr	r0, [r7, #8]
 8003334:	f002 f97e 	bl	8005634 <embeddedCliGetToken>
 8003338:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    const char *arg2 = embeddedCliGetToken(args, 2); // size (byte)
 800333c:	2102      	movs	r1, #2
 800333e:	68b8      	ldr	r0, [r7, #8]
 8003340:	f002 f978 	bl	8005634 <embeddedCliGetToken>
 8003344:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    char buffer[100];
    uint16_t crc = 0x0000;
 8003348:	2300      	movs	r3, #0
 800334a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (arg1 == NULL || arg2 == NULL) {
 800334e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <CMD_RamFill+0x3a>
 8003356:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800335a:	2b00      	cmp	r3, #0
 800335c:	d104      	bne.n	8003368 <CMD_RamFill+0x44>
        embeddedCliPrint(cli, "Usage: ram_fill <1|2|3> <size> (1: 0-255, 2: ASCII, 3: random, size: 1-200KB)");
 800335e:	49a0      	ldr	r1, [pc, #640]	@ (80035e0 <CMD_RamFill+0x2bc>)
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f002 f8a5 	bl	80054b0 <embeddedCliPrint>
        return;
 8003366:	e138      	b.n	80035da <CMD_RamFill+0x2b6>
    }

    int option = atoi(arg1);
 8003368:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800336c:	f01e fb52 	bl	8021a14 <atoi>
 8003370:	67f8      	str	r0, [r7, #124]	@ 0x7c
    uint32_t size = (uint32_t)strtoul(arg2, NULL, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800337a:	f01e fc7f 	bl	8021c7c <strtoul>
 800337e:	67b8      	str	r0, [r7, #120]	@ 0x78

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 8003380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <CMD_RamFill+0x6a>
 8003386:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003388:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 800338c:	d90e      	bls.n	80033ac <CMD_RamFill+0x88>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)RAM_D2_200KB_SIZE);
 800338e:	f107 0010 	add.w	r0, r7, #16
 8003392:	f44f 3348 	mov.w	r3, #204800	@ 0x32000
 8003396:	4a93      	ldr	r2, [pc, #588]	@ (80035e4 <CMD_RamFill+0x2c0>)
 8003398:	2164      	movs	r1, #100	@ 0x64
 800339a:	f01e fd3b 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800339e:	f107 0310 	add.w	r3, r7, #16
 80033a2:	4619      	mov	r1, r3
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f002 f883 	bl	80054b0 <embeddedCliPrint>
        return;
 80033aa:	e116      	b.n	80035da <CMD_RamFill+0x2b6>
    }

    if (toCM4_GetState() != TOCM4_IDLE) {
 80033ac:	f7fd fbb0 	bl	8000b10 <toCM4_GetState>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d01b      	beq.n	80033ee <CMD_RamFill+0xca>
        snprintf(buffer, sizeof(buffer), "Cannot fill RAM. Current state: %s",
                 toCM4_GetState() == TOCM4_BUSY ? "BUSY" :
 80033b6:	f7fd fbab 	bl	8000b10 <toCM4_GetState>
 80033ba:	4603      	mov	r3, r0
        snprintf(buffer, sizeof(buffer), "Cannot fill RAM. Current state: %s",
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d008      	beq.n	80033d2 <CMD_RamFill+0xae>
                 toCM4_GetState() == TOCM4_READYSEND ? "READYSEND" : "ERROR");
 80033c0:	f7fd fba6 	bl	8000b10 <toCM4_GetState>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <CMD_RamFill+0xaa>
 80033ca:	4b87      	ldr	r3, [pc, #540]	@ (80035e8 <CMD_RamFill+0x2c4>)
 80033cc:	e002      	b.n	80033d4 <CMD_RamFill+0xb0>
 80033ce:	4b87      	ldr	r3, [pc, #540]	@ (80035ec <CMD_RamFill+0x2c8>)
 80033d0:	e000      	b.n	80033d4 <CMD_RamFill+0xb0>
        snprintf(buffer, sizeof(buffer), "Cannot fill RAM. Current state: %s",
 80033d2:	4b87      	ldr	r3, [pc, #540]	@ (80035f0 <CMD_RamFill+0x2cc>)
 80033d4:	f107 0010 	add.w	r0, r7, #16
 80033d8:	4a86      	ldr	r2, [pc, #536]	@ (80035f4 <CMD_RamFill+0x2d0>)
 80033da:	2164      	movs	r1, #100	@ 0x64
 80033dc:	f01e fd1a 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80033e0:	f107 0310 	add.w	r3, r7, #16
 80033e4:	4619      	mov	r1, r3
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f002 f862 	bl	80054b0 <embeddedCliPrint>
        return;
 80033ec:	e0f5      	b.n	80035da <CMD_RamFill+0x2b6>
    }

    toCM4_SetState(TOCM4_BUSY);
 80033ee:	2002      	movs	r0, #2
 80033f0:	f7fd fb3c 	bl	8000a6c <toCM4_SetState>

    switch (option) {
 80033f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d06d      	beq.n	80034d6 <CMD_RamFill+0x1b2>
 80033fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	f300 809c 	bgt.w	800353a <CMD_RamFill+0x216>
 8003402:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003404:	2b01      	cmp	r3, #1
 8003406:	d003      	beq.n	8003410 <CMD_RamFill+0xec>
 8003408:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800340a:	2b02      	cmp	r3, #2
 800340c:	d02c      	beq.n	8003468 <CMD_RamFill+0x144>
 800340e:	e094      	b.n	800353a <CMD_RamFill+0x216>
        case 1:  // 0-255
            for (uint32_t i = 0; i < size; i++) {
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003416:	e01a      	b.n	800344e <CMD_RamFill+0x12a>
                uint8_t value = (uint8_t)(i % 256);
 8003418:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800341c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
                RAM_D2_200KB_START[i] = value;
 8003420:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003424:	4a74      	ldr	r2, [pc, #464]	@ (80035f8 <CMD_RamFill+0x2d4>)
 8003426:	4413      	add	r3, r2
 8003428:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 800342c:	701a      	strb	r2, [r3, #0]
                crc = UpdateCRC16_XMODEM(crc, value);
 800342e:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 8003432:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff feac 	bl	8003196 <UpdateCRC16_XMODEM>
 800343e:	4603      	mov	r3, r0
 8003440:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            for (uint32_t i = 0; i < size; i++) {
 8003444:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003448:	3301      	adds	r3, #1
 800344a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800344e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003452:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003454:	429a      	cmp	r2, r3
 8003456:	d3df      	bcc.n	8003418 <CMD_RamFill+0xf4>
            }
            snprintf(buffer, sizeof(buffer), "Filled %lu bytes with pattern 0-255 repeating", (unsigned long)size);
 8003458:	f107 0010 	add.w	r0, r7, #16
 800345c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800345e:	4a67      	ldr	r2, [pc, #412]	@ (80035fc <CMD_RamFill+0x2d8>)
 8003460:	2164      	movs	r1, #100	@ 0x64
 8003462:	f01e fcd7 	bl	8021e14 <sniprintf>
            break;
 8003466:	e070      	b.n	800354a <CMD_RamFill+0x226>

        case 2:  // ASCII 0x20-0x7F
            for (uint32_t i = 0; i < size; i++) {
 8003468:	2300      	movs	r3, #0
 800346a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800346e:	e025      	b.n	80034bc <CMD_RamFill+0x198>
                uint8_t value = (uint8_t)(0x20 + (i % (0x7F - 0x20 + 1)));
 8003470:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003474:	4b62      	ldr	r3, [pc, #392]	@ (8003600 <CMD_RamFill+0x2dc>)
 8003476:	fba3 2301 	umull	r2, r3, r3, r1
 800347a:	099a      	lsrs	r2, r3, #6
 800347c:	4613      	mov	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4413      	add	r3, r2
 8003482:	015b      	lsls	r3, r3, #5
 8003484:	1aca      	subs	r2, r1, r3
 8003486:	b2d3      	uxtb	r3, r2
 8003488:	3320      	adds	r3, #32
 800348a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
                RAM_D2_200KB_START[i] = value;
 800348e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003492:	4a59      	ldr	r2, [pc, #356]	@ (80035f8 <CMD_RamFill+0x2d4>)
 8003494:	4413      	add	r3, r2
 8003496:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 800349a:	701a      	strb	r2, [r3, #0]
                crc = UpdateCRC16_XMODEM(crc, value);
 800349c:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 80034a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fe75 	bl	8003196 <UpdateCRC16_XMODEM>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            for (uint32_t i = 0; i < size; i++) {
 80034b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034b6:	3301      	adds	r3, #1
 80034b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80034c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d3d4      	bcc.n	8003470 <CMD_RamFill+0x14c>
            }
            snprintf(buffer, sizeof(buffer), "Filled %lu bytes with ASCII pattern (0x20-0x7F)", (unsigned long)size);
 80034c6:	f107 0010 	add.w	r0, r7, #16
 80034ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034cc:	4a4d      	ldr	r2, [pc, #308]	@ (8003604 <CMD_RamFill+0x2e0>)
 80034ce:	2164      	movs	r1, #100	@ 0x64
 80034d0:	f01e fca0 	bl	8021e14 <sniprintf>
            break;
 80034d4:	e039      	b.n	800354a <CMD_RamFill+0x226>

        case 3:  // Random
            for (uint32_t i = 0; i < size; i++) {
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034dc:	e020      	b.n	8003520 <CMD_RamFill+0x1fc>
                uint8_t value = (uint8_t)(rand() % 256);
 80034de:	f01e fa9d 	bl	8021a1c <rand>
 80034e2:	4603      	mov	r3, r0
 80034e4:	425a      	negs	r2, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	bf58      	it	pl
 80034ec:	4253      	negpl	r3, r2
 80034ee:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                RAM_D2_200KB_START[i] = value;
 80034f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034f6:	4a40      	ldr	r2, [pc, #256]	@ (80035f8 <CMD_RamFill+0x2d4>)
 80034f8:	4413      	add	r3, r2
 80034fa:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80034fe:	701a      	strb	r2, [r3, #0]
                crc = UpdateCRC16_XMODEM(crc, value);
 8003500:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8003504:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003508:	4611      	mov	r1, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fe43 	bl	8003196 <UpdateCRC16_XMODEM>
 8003510:	4603      	mov	r3, r0
 8003512:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            for (uint32_t i = 0; i < size; i++) {
 8003516:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800351a:	3301      	adds	r3, #1
 800351c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003520:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003526:	429a      	cmp	r2, r3
 8003528:	d3d9      	bcc.n	80034de <CMD_RamFill+0x1ba>
            }
            snprintf(buffer, sizeof(buffer), "Filled %lu bytes with random bytes", (unsigned long)size);
 800352a:	f107 0010 	add.w	r0, r7, #16
 800352e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003530:	4a35      	ldr	r2, [pc, #212]	@ (8003608 <CMD_RamFill+0x2e4>)
 8003532:	2164      	movs	r1, #100	@ 0x64
 8003534:	f01e fc6e 	bl	8021e14 <sniprintf>
            break;
 8003538:	e007      	b.n	800354a <CMD_RamFill+0x226>

        default:
            embeddedCliPrint(cli, "Invalid option. Use: ram_fill <1|2|3> <size>");
 800353a:	4934      	ldr	r1, [pc, #208]	@ (800360c <CMD_RamFill+0x2e8>)
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f001 ffb7 	bl	80054b0 <embeddedCliPrint>
            toCM4_SetState(TOCM4_IDLE);
 8003542:	2003      	movs	r0, #3
 8003544:	f7fd fa92 	bl	8000a6c <toCM4_SetState>
            return;
 8003548:	e047      	b.n	80035da <CMD_RamFill+0x2b6>
    }

    vTaskDelay(pdMS_TO_TICKS(1000));
 800354a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800354e:	f00e fba1 	bl	8011c94 <vTaskDelay>

    toCM4_SetState(TOCM4_READYSEND);
 8003552:	2001      	movs	r0, #1
 8003554:	f7fd fa8a 	bl	8000a6c <toCM4_SetState>

    embeddedCliPrint(cli, buffer);
 8003558:	f107 0310 	add.w	r3, r7, #16
 800355c:	4619      	mov	r1, r3
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f001 ffa6 	bl	80054b0 <embeddedCliPrint>
    snprintf(buffer, sizeof(buffer), "Start of RAM_D2 (0x%08lX): 0x%02X",
 8003564:	4a24      	ldr	r2, [pc, #144]	@ (80035f8 <CMD_RamFill+0x2d4>)
             (uint32_t)RAM_D2_200KB_START, RAM_D2_200KB_START[0]);
 8003566:	4b24      	ldr	r3, [pc, #144]	@ (80035f8 <CMD_RamFill+0x2d4>)
 8003568:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer), "Start of RAM_D2 (0x%08lX): 0x%02X",
 800356a:	f107 0010 	add.w	r0, r7, #16
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	4a27      	ldr	r2, [pc, #156]	@ (8003610 <CMD_RamFill+0x2ec>)
 8003574:	2164      	movs	r1, #100	@ 0x64
 8003576:	f01e fc4d 	bl	8021e14 <sniprintf>
    embeddedCliPrint(cli, buffer);
 800357a:	f107 0310 	add.w	r3, r7, #16
 800357e:	4619      	mov	r1, r3
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f001 ff95 	bl	80054b0 <embeddedCliPrint>
    snprintf(buffer, sizeof(buffer), "End of RAM_D2 (0x%08lX): 0x%02X",
             (uint32_t)(RAM_D2_200KB_START + size - 1),
 8003586:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003588:	3b01      	subs	r3, #1
 800358a:	4a1b      	ldr	r2, [pc, #108]	@ (80035f8 <CMD_RamFill+0x2d4>)
 800358c:	4413      	add	r3, r2
    snprintf(buffer, sizeof(buffer), "End of RAM_D2 (0x%08lX): 0x%02X",
 800358e:	4619      	mov	r1, r3
             RAM_D2_200KB_START[size - 1]);
 8003590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003592:	3b01      	subs	r3, #1
 8003594:	4a18      	ldr	r2, [pc, #96]	@ (80035f8 <CMD_RamFill+0x2d4>)
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer), "End of RAM_D2 (0x%08lX): 0x%02X",
 800359a:	f107 0010 	add.w	r0, r7, #16
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	460b      	mov	r3, r1
 80035a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003614 <CMD_RamFill+0x2f0>)
 80035a4:	2164      	movs	r1, #100	@ 0x64
 80035a6:	f01e fc35 	bl	8021e14 <sniprintf>
    embeddedCliPrint(cli, buffer);
 80035aa:	f107 0310 	add.w	r3, r7, #16
 80035ae:	4619      	mov	r1, r3
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f001 ff7d 	bl	80054b0 <embeddedCliPrint>
    snprintf(buffer, sizeof(buffer), "CRC16-XMODEM: 0x%04X", crc);
 80035b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80035ba:	f107 0010 	add.w	r0, r7, #16
 80035be:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <CMD_RamFill+0x2f4>)
 80035c0:	2164      	movs	r1, #100	@ 0x64
 80035c2:	f01e fc27 	bl	8021e14 <sniprintf>
    embeddedCliPrint(cli, buffer);
 80035c6:	f107 0310 	add.w	r3, r7, #16
 80035ca:	4619      	mov	r1, r3
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f001 ff6f 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80035d2:	4912      	ldr	r1, [pc, #72]	@ (800361c <CMD_RamFill+0x2f8>)
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f001 ff6b 	bl	80054b0 <embeddedCliPrint>
}
 80035da:	3798      	adds	r7, #152	@ 0x98
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	08023ea0 	.word	0x08023ea0
 80035e4:	08023ef0 	.word	0x08023ef0
 80035e8:	08023f18 	.word	0x08023f18
 80035ec:	08023f24 	.word	0x08023f24
 80035f0:	08023f2c 	.word	0x08023f2c
 80035f4:	08023f34 	.word	0x08023f34
 80035f8:	30000000 	.word	0x30000000
 80035fc:	08023f58 	.word	0x08023f58
 8003600:	aaaaaaab 	.word	0xaaaaaaab
 8003604:	08023f88 	.word	0x08023f88
 8003608:	08023fb8 	.word	0x08023fb8
 800360c:	08023fdc 	.word	0x08023fdc
 8003610:	0802400c 	.word	0x0802400c
 8003614:	08024030 	.word	0x08024030
 8003618:	08024050 	.word	0x08024050
 800361c:	08023e9c 	.word	0x08023e9c

08003620 <CMD_RamDump>:

static void CMD_RamDump(EmbeddedCli *cli, char *args, void *context) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b0aa      	sub	sp, #168	@ 0xa8
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // size
 800362c:	2101      	movs	r1, #1
 800362e:	68b8      	ldr	r0, [r7, #8]
 8003630:	f002 f800 	bl	8005634 <embeddedCliGetToken>
 8003634:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    char buffer[100];
    const uint32_t bytes_per_line = 16;
 8003638:	2310      	movs	r3, #16
 800363a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t byte_count = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint16_t crc = 0x0000;
 8003644:	2300      	movs	r3, #0
 8003646:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

    if (arg1 == NULL) {
 800364a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <CMD_RamDump+0x3c>
        embeddedCliPrint(cli, "Usage: ram_dump <size> (size: 1-200KB)");
 8003652:	4980      	ldr	r1, [pc, #512]	@ (8003854 <CMD_RamDump+0x234>)
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f001 ff2b 	bl	80054b0 <embeddedCliPrint>
        return;
 800365a:	e0f7      	b.n	800384c <CMD_RamDump+0x22c>
    }

    uint32_t size = (uint32_t)strtoul(arg1, NULL, 0);
 800365c:	2200      	movs	r2, #0
 800365e:	2100      	movs	r1, #0
 8003660:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003664:	f01e fb0a 	bl	8021c7c <strtoul>
 8003668:	67f8      	str	r0, [r7, #124]	@ 0x7c

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 800366a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <CMD_RamDump+0x58>
 8003670:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003672:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8003676:	d90e      	bls.n	8003696 <CMD_RamDump+0x76>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)RAM_D2_200KB_SIZE);
 8003678:	f107 0014 	add.w	r0, r7, #20
 800367c:	f44f 3348 	mov.w	r3, #204800	@ 0x32000
 8003680:	4a75      	ldr	r2, [pc, #468]	@ (8003858 <CMD_RamDump+0x238>)
 8003682:	2164      	movs	r1, #100	@ 0x64
 8003684:	f01e fbc6 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	4619      	mov	r1, r3
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f001 ff0e 	bl	80054b0 <embeddedCliPrint>
        return;
 8003694:	e0da      	b.n	800384c <CMD_RamDump+0x22c>
    }

    snprintf(buffer, sizeof(buffer), "Dumping %lu bytes of RAM_D3 contents:", (unsigned long)size);
 8003696:	f107 0014 	add.w	r0, r7, #20
 800369a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800369c:	4a6f      	ldr	r2, [pc, #444]	@ (800385c <CMD_RamDump+0x23c>)
 800369e:	2164      	movs	r1, #100	@ 0x64
 80036a0:	f01e fbb8 	bl	8021e14 <sniprintf>
    embeddedCliPrint(cli, buffer);
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	4619      	mov	r1, r3
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f001 ff00 	bl	80054b0 <embeddedCliPrint>

    for (uint32_t i = 0; i < size; i += bytes_per_line) {
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036b6:	e0ae      	b.n	8003816 <CMD_RamDump+0x1f6>
        snprintf(buffer, sizeof(buffer), "0x%08lX: ", (uint32_t)(0x38000000 + i));
 80036b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036bc:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 80036c0:	f107 0014 	add.w	r0, r7, #20
 80036c4:	4a66      	ldr	r2, [pc, #408]	@ (8003860 <CMD_RamDump+0x240>)
 80036c6:	2164      	movs	r1, #100	@ 0x64
 80036c8:	f01e fba4 	bl	8021e14 <sniprintf>
        char *ptr = buffer + strlen(buffer);
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fc fe0f 	bl	80002f4 <strlen>
 80036d6:	4602      	mov	r2, r0
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4413      	add	r3, r2
 80036de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 80036e2:	2300      	movs	r3, #0
 80036e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80036e8:	e031      	b.n	800374e <CMD_RamDump+0x12e>
            uint8_t value = RAM_D3_START[i + j];
 80036ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f2:	4413      	add	r3, r2
 80036f4:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
            snprintf(ptr, sizeof(buffer) - (ptr - buffer), "%02X ", value);
 80036fe:	f107 0314 	add.w	r3, r7, #20
 8003702:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f1c3 0164 	rsb	r1, r3, #100	@ 0x64
 800370c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003710:	4a54      	ldr	r2, [pc, #336]	@ (8003864 <CMD_RamDump+0x244>)
 8003712:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003716:	f01e fb7d 	bl	8021e14 <sniprintf>
            ptr += 3;
 800371a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800371e:	3303      	adds	r3, #3
 8003720:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            byte_count++;
 8003724:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003728:	3301      	adds	r3, #1
 800372a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            crc = UpdateCRC16_XMODEM(crc, value);
 800372e:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 8003732:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fd2c 	bl	8003196 <UpdateCRC16_XMODEM>
 800373e:	4603      	mov	r3, r0
 8003740:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 8003744:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003748:	3301      	adds	r3, #1
 800374a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800374e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003752:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003756:	429a      	cmp	r2, r3
 8003758:	d207      	bcs.n	800376a <CMD_RamDump+0x14a>
 800375a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800375e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003762:	4413      	add	r3, r2
 8003764:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003766:	429a      	cmp	r2, r3
 8003768:	d8bf      	bhi.n	80036ea <CMD_RamDump+0xca>
        }

        *ptr++ = ' ';
 800376a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003774:	2220      	movs	r2, #32
 8003776:	701a      	strb	r2, [r3, #0]
        *ptr++ = '|';
 8003778:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003782:	227c      	movs	r2, #124	@ 0x7c
 8003784:	701a      	strb	r2, [r3, #0]
        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 8003786:	2300      	movs	r3, #0
 8003788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800378c:	e021      	b.n	80037d2 <CMD_RamDump+0x1b2>
            uint8_t c = RAM_D3_START[i + j];
 800378e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003792:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003796:	4413      	add	r3, r2
 8003798:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
            *ptr++ = (c >= 32 && c <= 126) ? c : '.';
 80037a2:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 80037a6:	2b1f      	cmp	r3, #31
 80037a8:	d906      	bls.n	80037b8 <CMD_RamDump+0x198>
 80037aa:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 80037ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80037b0:	d802      	bhi.n	80037b8 <CMD_RamDump+0x198>
 80037b2:	f897 107a 	ldrb.w	r1, [r7, #122]	@ 0x7a
 80037b6:	e000      	b.n	80037ba <CMD_RamDump+0x19a>
 80037b8:	212e      	movs	r1, #46	@ 0x2e
 80037ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80037c4:	460a      	mov	r2, r1
 80037c6:	701a      	strb	r2, [r3, #0]
        for (uint32_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 80037c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037cc:	3301      	adds	r3, #1
 80037ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80037d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037da:	429a      	cmp	r2, r3
 80037dc:	d207      	bcs.n	80037ee <CMD_RamDump+0x1ce>
 80037de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037e6:	4413      	add	r3, r2
 80037e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d8cf      	bhi.n	800378e <CMD_RamDump+0x16e>
        }
        *ptr = '\0';
 80037ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80037f2:	2200      	movs	r2, #0
 80037f4:	701a      	strb	r2, [r3, #0]

        embeddedCliPrint(cli, buffer);
 80037f6:	f107 0314 	add.w	r3, r7, #20
 80037fa:	4619      	mov	r1, r3
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f001 fe57 	bl	80054b0 <embeddedCliPrint>

        vTaskDelay(pdMS_TO_TICKS(1));
 8003802:	2001      	movs	r0, #1
 8003804:	f00e fa46 	bl	8011c94 <vTaskDelay>
    for (uint32_t i = 0; i < size; i += bytes_per_line) {
 8003808:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800380c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003810:	4413      	add	r3, r2
 8003812:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003816:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800381a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800381c:	429a      	cmp	r2, r3
 800381e:	f4ff af4b 	bcc.w	80036b8 <CMD_RamDump+0x98>
    }

    snprintf(buffer, sizeof(buffer), "Dump complete. Counted bytes: %lu, CRC16-XMODEM: 0x%04X",
 8003822:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8003826:	f107 0014 	add.w	r0, r7, #20
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003830:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <CMD_RamDump+0x248>)
 8003832:	2164      	movs	r1, #100	@ 0x64
 8003834:	f01e faee 	bl	8021e14 <sniprintf>
             (unsigned long)byte_count, crc);
    embeddedCliPrint(cli, buffer);
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	4619      	mov	r1, r3
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f001 fe36 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8003844:	4909      	ldr	r1, [pc, #36]	@ (800386c <CMD_RamDump+0x24c>)
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f001 fe32 	bl	80054b0 <embeddedCliPrint>
}
 800384c:	37a0      	adds	r7, #160	@ 0xa0
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	08024068 	.word	0x08024068
 8003858:	08023ef0 	.word	0x08023ef0
 800385c:	08024090 	.word	0x08024090
 8003860:	080240b8 	.word	0x080240b8
 8003864:	080240c4 	.word	0x080240c4
 8003868:	080240cc 	.word	0x080240cc
 800386c:	08023e9c 	.word	0x08023e9c

08003870 <CMD_StateToCM4>:

static void CMD_StateToCM4(EmbeddedCli *cli, char *args, void *context) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b0a0      	sub	sp, #128	@ 0x80
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 800387c:	2101      	movs	r1, #1
 800387e:	68b8      	ldr	r0, [r7, #8]
 8003880:	f001 fed8 	bl	8005634 <embeddedCliGetToken>
 8003884:	67f8      	str	r0, [r7, #124]	@ 0x7c
    char buffer[100];

    if (arg1 == NULL) {
 8003886:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d104      	bne.n	8003896 <CMD_StateToCM4+0x26>
        embeddedCliPrint(cli, "Usage: state_tocm4 <get|reset>");
 800388c:	4934      	ldr	r1, [pc, #208]	@ (8003960 <CMD_StateToCM4+0xf0>)
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f001 fe0e 	bl	80054b0 <embeddedCliPrint>
 8003894:	e060      	b.n	8003958 <CMD_StateToCM4+0xe8>
        return;
    }

    if (strcmp(arg1, "get") == 0) {
 8003896:	4933      	ldr	r1, [pc, #204]	@ (8003964 <CMD_StateToCM4+0xf4>)
 8003898:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800389a:	f7fc fd21 	bl	80002e0 <strcmp>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d142      	bne.n	800392a <CMD_StateToCM4+0xba>
        toCM4_State_t state = toCM4_GetState();
 80038a4:	f7fd f934 	bl	8000b10 <toCM4_GetState>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        switch (state) {
 80038ae:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d82a      	bhi.n	800390c <CMD_StateToCM4+0x9c>
 80038b6:	a201      	add	r2, pc, #4	@ (adr r2, 80038bc <CMD_StateToCM4+0x4c>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038cd 	.word	0x080038cd
 80038c0:	080038dd 	.word	0x080038dd
 80038c4:	080038ed 	.word	0x080038ed
 80038c8:	080038fd 	.word	0x080038fd
            case TOCM4_ERROR:
                snprintf(buffer, sizeof(buffer), "toCM4 State: ERROR");
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	4a25      	ldr	r2, [pc, #148]	@ (8003968 <CMD_StateToCM4+0xf8>)
 80038d2:	2164      	movs	r1, #100	@ 0x64
 80038d4:	4618      	mov	r0, r3
 80038d6:	f01e fa9d 	bl	8021e14 <sniprintf>
                break;
 80038da:	e01f      	b.n	800391c <CMD_StateToCM4+0xac>
            case TOCM4_READYSEND:
                snprintf(buffer, sizeof(buffer), "toCM4 State: READYSEND");
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	4a22      	ldr	r2, [pc, #136]	@ (800396c <CMD_StateToCM4+0xfc>)
 80038e2:	2164      	movs	r1, #100	@ 0x64
 80038e4:	4618      	mov	r0, r3
 80038e6:	f01e fa95 	bl	8021e14 <sniprintf>
                break;
 80038ea:	e017      	b.n	800391c <CMD_StateToCM4+0xac>
            case TOCM4_BUSY:
                snprintf(buffer, sizeof(buffer), "toCM4 State: BUSY");
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003970 <CMD_StateToCM4+0x100>)
 80038f2:	2164      	movs	r1, #100	@ 0x64
 80038f4:	4618      	mov	r0, r3
 80038f6:	f01e fa8d 	bl	8021e14 <sniprintf>
                break;
 80038fa:	e00f      	b.n	800391c <CMD_StateToCM4+0xac>
            case TOCM4_IDLE:
                snprintf(buffer, sizeof(buffer), "toCM4 State: IDLE");
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	4a1c      	ldr	r2, [pc, #112]	@ (8003974 <CMD_StateToCM4+0x104>)
 8003902:	2164      	movs	r1, #100	@ 0x64
 8003904:	4618      	mov	r0, r3
 8003906:	f01e fa85 	bl	8021e14 <sniprintf>
                break;
 800390a:	e007      	b.n	800391c <CMD_StateToCM4+0xac>
            default:
                snprintf(buffer, sizeof(buffer), "toCM4 State: UNKNOWN");
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	4a19      	ldr	r2, [pc, #100]	@ (8003978 <CMD_StateToCM4+0x108>)
 8003912:	2164      	movs	r1, #100	@ 0x64
 8003914:	4618      	mov	r0, r3
 8003916:	f01e fa7d 	bl	8021e14 <sniprintf>
                break;
 800391a:	bf00      	nop
        }
        embeddedCliPrint(cli, buffer);
 800391c:	f107 0314 	add.w	r3, r7, #20
 8003920:	4619      	mov	r1, r3
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f001 fdc4 	bl	80054b0 <embeddedCliPrint>
 8003928:	e012      	b.n	8003950 <CMD_StateToCM4+0xe0>
    } else if (strcmp(arg1, "reset") == 0) {
 800392a:	4914      	ldr	r1, [pc, #80]	@ (800397c <CMD_StateToCM4+0x10c>)
 800392c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800392e:	f7fc fcd7 	bl	80002e0 <strcmp>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <CMD_StateToCM4+0xd8>
        toCM4_SetState(TOCM4_IDLE);
 8003938:	2003      	movs	r0, #3
 800393a:	f7fd f897 	bl	8000a6c <toCM4_SetState>
        embeddedCliPrint(cli, "toCM4 State reset to IDLE");
 800393e:	4910      	ldr	r1, [pc, #64]	@ (8003980 <CMD_StateToCM4+0x110>)
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f001 fdb5 	bl	80054b0 <embeddedCliPrint>
 8003946:	e003      	b.n	8003950 <CMD_StateToCM4+0xe0>
    } else {
        embeddedCliPrint(cli, "Invalid option. Usage: state_tocm4 <get|reset>");
 8003948:	490e      	ldr	r1, [pc, #56]	@ (8003984 <CMD_StateToCM4+0x114>)
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f001 fdb0 	bl	80054b0 <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 8003950:	490d      	ldr	r1, [pc, #52]	@ (8003988 <CMD_StateToCM4+0x118>)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f001 fdac 	bl	80054b0 <embeddedCliPrint>
}
 8003958:	3780      	adds	r7, #128	@ 0x80
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	08024104 	.word	0x08024104
 8003964:	08024124 	.word	0x08024124
 8003968:	08024128 	.word	0x08024128
 800396c:	0802413c 	.word	0x0802413c
 8003970:	08024154 	.word	0x08024154
 8003974:	08024168 	.word	0x08024168
 8003978:	0802417c 	.word	0x0802417c
 800397c:	08023cc0 	.word	0x08023cc0
 8003980:	08024194 	.word	0x08024194
 8003984:	080241b0 	.word	0x080241b0
 8003988:	08023e9c 	.word	0x08023e9c

0800398c <CMD_SPISlaveRST>:

static void CMD_SPISlaveRST(EmbeddedCli *cli, char *args, void *context) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b0a0      	sub	sp, #128	@ 0x80
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
    char buffer[100];

    SPI_SlaveDevice_t *device = SPI_SlaveDevice_GetHandle();
 8003998:	f005 ff28 	bl	80097ec <SPI_SlaveDevice_GetHandle>
 800399c:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (!device->is_initialized) {
 800399e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039a0:	7d1b      	ldrb	r3, [r3, #20]
 80039a2:	f083 0301 	eor.w	r3, r3, #1
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <CMD_SPISlaveRST+0x2a>
        embeddedCliPrint(cli, "SPI Slave Device not initialized");
 80039ac:	4917      	ldr	r1, [pc, #92]	@ (8003a0c <CMD_SPISlaveRST+0x80>)
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f001 fd7e 	bl	80054b0 <embeddedCliPrint>
 80039b4:	e027      	b.n	8003a06 <CMD_SPISlaveRST+0x7a>
        return;
    }

    Std_ReturnType ret = SPI_SlaveDevice_Disable();
 80039b6:	f006 f863 	bl	8009a80 <SPI_SlaveDevice_Disable>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    if (ret == E_OK) {
 80039c0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10d      	bne.n	80039e4 <CMD_SPISlaveRST+0x58>
        snprintf(buffer, sizeof(buffer), "SPI Slave Device reset to IDLE state");
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	4a10      	ldr	r2, [pc, #64]	@ (8003a10 <CMD_SPISlaveRST+0x84>)
 80039ce:	2164      	movs	r1, #100	@ 0x64
 80039d0:	4618      	mov	r0, r3
 80039d2:	f01e fa1f 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80039d6:	f107 0314 	add.w	r3, r7, #20
 80039da:	4619      	mov	r1, r3
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f001 fd67 	bl	80054b0 <embeddedCliPrint>
 80039e2:	e00c      	b.n	80039fe <CMD_SPISlaveRST+0x72>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to reset SPI Slave Device");
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003a14 <CMD_SPISlaveRST+0x88>)
 80039ea:	2164      	movs	r1, #100	@ 0x64
 80039ec:	4618      	mov	r0, r3
 80039ee:	f01e fa11 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80039f2:	f107 0314 	add.w	r3, r7, #20
 80039f6:	4619      	mov	r1, r3
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f001 fd59 	bl	80054b0 <embeddedCliPrint>
    }

    embeddedCliPrint(cli, "");
 80039fe:	4906      	ldr	r1, [pc, #24]	@ (8003a18 <CMD_SPISlaveRST+0x8c>)
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f001 fd55 	bl	80054b0 <embeddedCliPrint>
}
 8003a06:	3780      	adds	r7, #128	@ 0x80
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	080241e0 	.word	0x080241e0
 8003a10:	08024204 	.word	0x08024204
 8003a14:	0802422c 	.word	0x0802422c
 8003a18:	08023e9c 	.word	0x08023e9c

08003a1c <CMD_CollectData>:

static void CMD_CollectData(EmbeddedCli *cli, char *args, void *context) {
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b0ab      	sub	sp, #172	@ 0xac
 8003a20:	af04      	add	r7, sp, #16
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // type
 8003a28:	2101      	movs	r1, #1
 8003a2a:	68b8      	ldr	r0, [r7, #8]
 8003a2c:	f001 fe02 	bl	8005634 <embeddedCliGetToken>
 8003a30:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    const char *arg2 = embeddedCliGetToken(args, 2); // sample
 8003a34:	2102      	movs	r1, #2
 8003a36:	68b8      	ldr	r0, [r7, #8]
 8003a38:	f001 fdfc 	bl	8005634 <embeddedCliGetToken>
 8003a3c:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    char buffer[100];

    if (arg1 == NULL || arg2 == NULL) {
 8003a40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <CMD_CollectData+0x34>
 8003a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <CMD_CollectData+0x3e>
        embeddedCliPrint(cli, "Usage: collect_data <type> <sample>");
 8003a50:	4934      	ldr	r1, [pc, #208]	@ (8003b24 <CMD_CollectData+0x108>)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f001 fd2c 	bl	80054b0 <embeddedCliPrint>
 8003a58:	e061      	b.n	8003b1e <CMD_CollectData+0x102>
        return;
    }

    uint8_t type = (uint8_t)atoi(arg1);
 8003a5a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003a5e:	f01d ffd9 	bl	8021a14 <atoi>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint32_t sample = (uint32_t)strtoul(arg2, NULL, 0);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003a70:	f01e f904 	bl	8021c7c <strtoul>
 8003a74:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

    Std_ReturnType ret = SPI_SlaveDevice_CollectData(type, sample, (uint32_t)RAM_D2_200KB_START);
 8003a78:	4a2b      	ldr	r2, [pc, #172]	@ (8003b28 <CMD_CollectData+0x10c>)
 8003a7a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003a7e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003a82:	4618      	mov	r0, r3
 8003a84:	f005 feea 	bl	800985c <SPI_SlaveDevice_CollectData>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (ret == E_OK) {
 8003a8e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d11e      	bne.n	8003ad4 <CMD_CollectData+0xb8>
        DataProcessContext_t ctx;
        if (SPI_SlaveDevice_GetDataInfo(&ctx) == E_OK) {
 8003a96:	f107 0310 	add.w	r3, r7, #16
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f005 ff7a 	bl	8009994 <SPI_SlaveDevice_GetDataInfo>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d137      	bne.n	8003b16 <CMD_CollectData+0xfa>
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
                     (unsigned long)ctx.sample, ctx.type, (unsigned long)ctx.data_size, ctx.crc);
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	7c3b      	ldrb	r3, [r7, #16]
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
 8003aaa:	4619      	mov	r1, r3
                     (unsigned long)ctx.sample, ctx.type, (unsigned long)ctx.data_size, ctx.crc);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	8bb8      	ldrh	r0, [r7, #28]
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	f107 0020 	add.w	r0, r7, #32
 8003ab6:	9402      	str	r4, [sp, #8]
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	9100      	str	r1, [sp, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	4a1b      	ldr	r2, [pc, #108]	@ (8003b2c <CMD_CollectData+0x110>)
 8003ac0:	2164      	movs	r1, #100	@ 0x64
 8003ac2:	f01e f9a7 	bl	8021e14 <sniprintf>
            embeddedCliPrint(cli, buffer);
 8003ac6:	f107 0320 	add.w	r3, r7, #32
 8003aca:	4619      	mov	r1, r3
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f001 fcef 	bl	80054b0 <embeddedCliPrint>
 8003ad2:	e020      	b.n	8003b16 <CMD_CollectData+0xfa>
        }
    } else if (ret == E_BUSY) {
 8003ad4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d10e      	bne.n	8003afa <CMD_CollectData+0xde>
        snprintf(buffer, sizeof(buffer), "Type %d not implemented yet.", type);
 8003adc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8003ae0:	f107 0020 	add.w	r0, r7, #32
 8003ae4:	4a12      	ldr	r2, [pc, #72]	@ (8003b30 <CMD_CollectData+0x114>)
 8003ae6:	2164      	movs	r1, #100	@ 0x64
 8003ae8:	f01e f994 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003aec:	f107 0320 	add.w	r3, r7, #32
 8003af0:	4619      	mov	r1, r3
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f001 fcdc 	bl	80054b0 <embeddedCliPrint>
 8003af8:	e00d      	b.n	8003b16 <CMD_CollectData+0xfa>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to collect data. Error code: %d", ret);
 8003afa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003afe:	f107 0020 	add.w	r0, r7, #32
 8003b02:	4a0c      	ldr	r2, [pc, #48]	@ (8003b34 <CMD_CollectData+0x118>)
 8003b04:	2164      	movs	r1, #100	@ 0x64
 8003b06:	f01e f985 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003b0a:	f107 0320 	add.w	r3, r7, #32
 8003b0e:	4619      	mov	r1, r3
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f001 fccd 	bl	80054b0 <embeddedCliPrint>
    }

    embeddedCliPrint(cli, "");
 8003b16:	4908      	ldr	r1, [pc, #32]	@ (8003b38 <CMD_CollectData+0x11c>)
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f001 fcc9 	bl	80054b0 <embeddedCliPrint>
}
 8003b1e:	379c      	adds	r7, #156	@ 0x9c
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd90      	pop	{r4, r7, pc}
 8003b24:	08024250 	.word	0x08024250
 8003b28:	30000000 	.word	0x30000000
 8003b2c:	08024274 	.word	0x08024274
 8003b30:	080242b4 	.word	0x080242b4
 8003b34:	080242d4 	.word	0x080242d4
 8003b38:	08023e9c 	.word	0x08023e9c

08003b3c <CMD_PullData>:

static void CMD_PullData(EmbeddedCli *cli, char *args, void *context) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b0a4      	sub	sp, #144	@ 0x90
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
    char buffer[100];
    toCM4_State_t state = SPI_SlaveDevice_GetCM4State();
 8003b48:	f005 ffd4 	bl	8009af4 <SPI_SlaveDevice_GetCM4State>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    switch (state) {
 8003b52:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d838      	bhi.n	8003bcc <CMD_PullData+0x90>
 8003b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <CMD_PullData+0x24>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003bc3 	.word	0x08003bc3
 8003b64:	08003b85 	.word	0x08003b85
 8003b68:	08003b7b 	.word	0x08003b7b
 8003b6c:	08003b71 	.word	0x08003b71
        case TOCM4_IDLE:
            embeddedCliPrint(cli, "State: IDLE");
 8003b70:	491d      	ldr	r1, [pc, #116]	@ (8003be8 <CMD_PullData+0xac>)
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f001 fc9c 	bl	80054b0 <embeddedCliPrint>
            break;
 8003b78:	e02d      	b.n	8003bd6 <CMD_PullData+0x9a>
        case TOCM4_BUSY:
            embeddedCliPrint(cli, "State: BUSY");
 8003b7a:	491c      	ldr	r1, [pc, #112]	@ (8003bec <CMD_PullData+0xb0>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f001 fc97 	bl	80054b0 <embeddedCliPrint>
            break;
 8003b82:	e028      	b.n	8003bd6 <CMD_PullData+0x9a>
        case TOCM4_READYSEND:
        {
            DataProcessContext_t ctx;
            if (SPI_SlaveDevice_GetDataInfo(&ctx) == E_OK) {
 8003b84:	f107 0310 	add.w	r3, r7, #16
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f005 ff03 	bl	8009994 <SPI_SlaveDevice_GetDataInfo>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d111      	bne.n	8003bb8 <CMD_PullData+0x7c>
                snprintf(buffer, sizeof(buffer), "State: READYSEND, CRC: 0x%04X, Size: %lu bytes",
                         ctx.crc, (unsigned long)ctx.data_size);
 8003b94:	8bbb      	ldrh	r3, [r7, #28]
                snprintf(buffer, sizeof(buffer), "State: READYSEND, CRC: 0x%04X, Size: %lu bytes",
 8003b96:	461a      	mov	r2, r3
                         ctx.crc, (unsigned long)ctx.data_size);
 8003b98:	69bb      	ldr	r3, [r7, #24]
                snprintf(buffer, sizeof(buffer), "State: READYSEND, CRC: 0x%04X, Size: %lu bytes",
 8003b9a:	f107 0020 	add.w	r0, r7, #32
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	4a13      	ldr	r2, [pc, #76]	@ (8003bf0 <CMD_PullData+0xb4>)
 8003ba4:	2164      	movs	r1, #100	@ 0x64
 8003ba6:	f01e f935 	bl	8021e14 <sniprintf>
                embeddedCliPrint(cli, buffer);
 8003baa:	f107 0320 	add.w	r3, r7, #32
 8003bae:	4619      	mov	r1, r3
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f001 fc7d 	bl	80054b0 <embeddedCliPrint>
            } else {
                embeddedCliPrint(cli, "State: READYSEND, but no valid data context");
            }
            break;
 8003bb6:	e00e      	b.n	8003bd6 <CMD_PullData+0x9a>
                embeddedCliPrint(cli, "State: READYSEND, but no valid data context");
 8003bb8:	490e      	ldr	r1, [pc, #56]	@ (8003bf4 <CMD_PullData+0xb8>)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f001 fc78 	bl	80054b0 <embeddedCliPrint>
            break;
 8003bc0:	e009      	b.n	8003bd6 <CMD_PullData+0x9a>
        }
        case TOCM4_ERROR:
            embeddedCliPrint(cli, "State: ERROR");
 8003bc2:	490d      	ldr	r1, [pc, #52]	@ (8003bf8 <CMD_PullData+0xbc>)
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f001 fc73 	bl	80054b0 <embeddedCliPrint>
            break;
 8003bca:	e004      	b.n	8003bd6 <CMD_PullData+0x9a>
        default:
            embeddedCliPrint(cli, "State: UNKNOWN");
 8003bcc:	490b      	ldr	r1, [pc, #44]	@ (8003bfc <CMD_PullData+0xc0>)
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f001 fc6e 	bl	80054b0 <embeddedCliPrint>
            break;
 8003bd4:	bf00      	nop
    }

    embeddedCliPrint(cli, "");
 8003bd6:	490a      	ldr	r1, [pc, #40]	@ (8003c00 <CMD_PullData+0xc4>)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f001 fc69 	bl	80054b0 <embeddedCliPrint>
}
 8003bde:	bf00      	nop
 8003be0:	3788      	adds	r7, #136	@ 0x88
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	080242fc 	.word	0x080242fc
 8003bec:	08024308 	.word	0x08024308
 8003bf0:	08024314 	.word	0x08024314
 8003bf4:	08024344 	.word	0x08024344
 8003bf8:	08024370 	.word	0x08024370
 8003bfc:	08024380 	.word	0x08024380
 8003c00:	08023e9c 	.word	0x08023e9c

08003c04 <CMD_MasterRead>:

static void CMD_MasterRead(EmbeddedCli *cli, char *args, void *context) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b0a6      	sub	sp, #152	@ 0x98
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // size
 8003c10:	2101      	movs	r1, #1
 8003c12:	68b8      	ldr	r0, [r7, #8]
 8003c14:	f001 fd0e 	bl	8005634 <embeddedCliGetToken>
 8003c18:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    char buffer[100];

    if (arg1 == NULL) {
 8003c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d104      	bne.n	8003c2e <CMD_MasterRead+0x2a>
        embeddedCliPrint(cli, "Usage: master_read <size> (size: 1-200KB)");
 8003c24:	4943      	ldr	r1, [pc, #268]	@ (8003d34 <CMD_MasterRead+0x130>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f001 fc42 	bl	80054b0 <embeddedCliPrint>
        return;
 8003c2c:	e07f      	b.n	8003d2e <CMD_MasterRead+0x12a>
    }

    uint32_t size = (uint32_t)strtoul(arg1, NULL, 0);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003c36:	f01e f821 	bl	8021c7c <strtoul>
 8003c3a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 8003c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d004      	beq.n	8003c50 <CMD_MasterRead+0x4c>
 8003c46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c4a:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8003c4e:	d90e      	bls.n	8003c6e <CMD_MasterRead+0x6a>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)RAM_D2_200KB_SIZE);
 8003c50:	f107 0014 	add.w	r0, r7, #20
 8003c54:	f44f 3348 	mov.w	r3, #204800	@ 0x32000
 8003c58:	4a37      	ldr	r2, [pc, #220]	@ (8003d38 <CMD_MasterRead+0x134>)
 8003c5a:	2164      	movs	r1, #100	@ 0x64
 8003c5c:	f01e f8da 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003c60:	f107 0314 	add.w	r3, r7, #20
 8003c64:	4619      	mov	r1, r3
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f001 fc22 	bl	80054b0 <embeddedCliPrint>
        return;
 8003c6c:	e05f      	b.n	8003d2e <CMD_MasterRead+0x12a>
//                 toCM4_GetState() == TOCM4_READYSEND ? "READYSEND" : "ERROR");
//        embeddedCliPrint(cli, buffer);
//        return;
//    }

    SPI_MasterDevice_t *device = SPI_MasterDevice_GetHandle();
 8003c6e:	f005 fa83 	bl	8009178 <SPI_MasterDevice_GetHandle>
 8003c72:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (!device->is_initialized) {
 8003c74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c76:	7adb      	ldrb	r3, [r3, #11]
 8003c78:	f083 0301 	eor.w	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <CMD_MasterRead+0x88>
        embeddedCliPrint(cli, "SPI Master Device not initialized");
 8003c82:	492e      	ldr	r1, [pc, #184]	@ (8003d3c <CMD_MasterRead+0x138>)
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f001 fc13 	bl	80054b0 <embeddedCliPrint>
        return;
 8003c8a:	e050      	b.n	8003d2e <CMD_MasterRead+0x12a>
    }

    Std_ReturnType ret = SPI_MasterDevice_ReadDMA(0x38000000, size);
 8003c8c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003c90:	f04f 5060 	mov.w	r0, #939524096	@ 0x38000000
 8003c94:	f005 fabc 	bl	8009210 <SPI_MasterDevice_ReadDMA>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    if (ret == E_OK) {
 8003c9e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d131      	bne.n	8003d0a <CMD_MasterRead+0x106>
        uint16_t crc = 0x0000;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        for (uint32_t i = 0; i < size; i++) {
 8003cac:	2300      	movs	r3, #0
 8003cae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cb2:	e012      	b.n	8003cda <CMD_MasterRead+0xd6>
            crc = UpdateCRC16_XMODEM(crc, RAM_D3_START[i]);
 8003cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cb8:	f103 5360 	add.w	r3, r3, #939524096	@ 0x38000000
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fa66 	bl	8003196 <UpdateCRC16_XMODEM>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        for (uint32_t i = 0; i < size; i++) {
 8003cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cda:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d3e6      	bcc.n	8003cb4 <CMD_MasterRead+0xb0>
        }
        snprintf(buffer, sizeof(buffer), "Read %lu bytes via SPI6 Master, CRC: 0x%04X",
 8003ce6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003cea:	f107 0014 	add.w	r0, r7, #20
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cf4:	4a12      	ldr	r2, [pc, #72]	@ (8003d40 <CMD_MasterRead+0x13c>)
 8003cf6:	2164      	movs	r1, #100	@ 0x64
 8003cf8:	f01e f88c 	bl	8021e14 <sniprintf>
                 (unsigned long)size, crc);
        embeddedCliPrint(cli, buffer);
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	4619      	mov	r1, r3
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f001 fbd4 	bl	80054b0 <embeddedCliPrint>
 8003d08:	e00d      	b.n	8003d26 <CMD_MasterRead+0x122>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to read data. Error code: %d", ret);
 8003d0a:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8003d0e:	f107 0014 	add.w	r0, r7, #20
 8003d12:	4a0c      	ldr	r2, [pc, #48]	@ (8003d44 <CMD_MasterRead+0x140>)
 8003d14:	2164      	movs	r1, #100	@ 0x64
 8003d16:	f01e f87d 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003d1a:	f107 0314 	add.w	r3, r7, #20
 8003d1e:	4619      	mov	r1, r3
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f001 fbc5 	bl	80054b0 <embeddedCliPrint>
    }

    embeddedCliPrint(cli, "");
 8003d26:	4908      	ldr	r1, [pc, #32]	@ (8003d48 <CMD_MasterRead+0x144>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f001 fbc1 	bl	80054b0 <embeddedCliPrint>
}
 8003d2e:	3790      	adds	r7, #144	@ 0x90
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	08024390 	.word	0x08024390
 8003d38:	08023ef0 	.word	0x08023ef0
 8003d3c:	080243bc 	.word	0x080243bc
 8003d40:	080243e0 	.word	0x080243e0
 8003d44:	0802440c 	.word	0x0802440c
 8003d48:	08023e9c 	.word	0x08023e9c

08003d4c <CMD_ClearCLI>:

static void CMD_ClearCLI(EmbeddedCli *cli, char *args, void *context) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "\33[2J");
 8003d58:	f107 0314 	add.w	r3, r7, #20
 8003d5c:	4a07      	ldr	r2, [pc, #28]	@ (8003d7c <CMD_ClearCLI+0x30>)
 8003d5e:	210a      	movs	r1, #10
 8003d60:	4618      	mov	r0, r3
 8003d62:	f01e f857 	bl	8021e14 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8003d66:	f107 0314 	add.w	r3, r7, #20
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f001 fb9f 	bl	80054b0 <embeddedCliPrint>
}
 8003d72:	bf00      	nop
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08024430 	.word	0x08024430

08003d80 <CMD_RtcSet>:

static void CMD_RtcSet(EmbeddedCli *cli, char *args, void *context) {
 8003d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d82:	b0b3      	sub	sp, #204	@ 0xcc
 8003d84:	af06      	add	r7, sp, #24
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // hour
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	68b8      	ldr	r0, [r7, #8]
 8003d90:	f001 fc50 	bl	8005634 <embeddedCliGetToken>
 8003d94:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    const char *arg2 = embeddedCliGetToken(args, 2); // minute
 8003d98:	2102      	movs	r1, #2
 8003d9a:	68b8      	ldr	r0, [r7, #8]
 8003d9c:	f001 fc4a 	bl	8005634 <embeddedCliGetToken>
 8003da0:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    const char *arg3 = embeddedCliGetToken(args, 3); // second
 8003da4:	2103      	movs	r1, #3
 8003da6:	68b8      	ldr	r0, [r7, #8]
 8003da8:	f001 fc44 	bl	8005634 <embeddedCliGetToken>
 8003dac:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    const char *arg4 = embeddedCliGetToken(args, 4); // day
 8003db0:	2104      	movs	r1, #4
 8003db2:	68b8      	ldr	r0, [r7, #8]
 8003db4:	f001 fc3e 	bl	8005634 <embeddedCliGetToken>
 8003db8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    const char *arg5 = embeddedCliGetToken(args, 5); // month
 8003dbc:	2105      	movs	r1, #5
 8003dbe:	68b8      	ldr	r0, [r7, #8]
 8003dc0:	f001 fc38 	bl	8005634 <embeddedCliGetToken>
 8003dc4:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    const char *arg6 = embeddedCliGetToken(args, 6); // year
 8003dc8:	2106      	movs	r1, #6
 8003dca:	68b8      	ldr	r0, [r7, #8]
 8003dcc:	f001 fc32 	bl	8005634 <embeddedCliGetToken>
 8003dd0:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    char buffer[100];
    if (arg1 == NULL || arg2 == NULL || arg3 == NULL ||
 8003dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <CMD_RtcSet+0x84>
 8003ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00f      	beq.n	8003e04 <CMD_RtcSet+0x84>
 8003de4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <CMD_RtcSet+0x84>
 8003dec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <CMD_RtcSet+0x84>
        arg4 == NULL || arg5 == NULL || arg6 == NULL) {
 8003df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <CMD_RtcSet+0x84>
 8003dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10d      	bne.n	8003e20 <CMD_RtcSet+0xa0>
        snprintf(buffer, sizeof(buffer),
 8003e04:	f107 0318 	add.w	r3, r7, #24
 8003e08:	4a62      	ldr	r2, [pc, #392]	@ (8003f94 <CMD_RtcSet+0x214>)
 8003e0a:	2164      	movs	r1, #100	@ 0x64
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f01e f801 	bl	8021e14 <sniprintf>
                 "Usage: rtc_set <hour> <minute> <second> <day> <month> <year>");
        embeddedCliPrint(cli, buffer);
 8003e12:	f107 0318 	add.w	r3, r7, #24
 8003e16:	4619      	mov	r1, r3
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f001 fb49 	bl	80054b0 <embeddedCliPrint>
        return;
 8003e1e:	e0b6      	b.n	8003f8e <CMD_RtcSet+0x20e>
    }

    int hour   = atoi(arg1);
 8003e20:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003e24:	f01d fdf6 	bl	8021a14 <atoi>
 8003e28:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    int minute = atoi(arg2);
 8003e2c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8003e30:	f01d fdf0 	bl	8021a14 <atoi>
 8003e34:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    int second = atoi(arg3);
 8003e38:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003e3c:	f01d fdea 	bl	8021a14 <atoi>
 8003e40:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    int day    = atoi(arg4);
 8003e44:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003e48:	f01d fde4 	bl	8021a14 <atoi>
 8003e4c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    int month  = atoi(arg5);
 8003e50:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003e54:	f01d fdde 	bl	8021a14 <atoi>
 8003e58:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    int year   = atoi(arg6);
 8003e5c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003e60:	f01d fdd8 	bl	8021a14 <atoi>
 8003e64:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    if (hour < 0 || hour > 23) {
 8003e68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	db03      	blt.n	8003e78 <CMD_RtcSet+0xf8>
 8003e70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e74:	2b17      	cmp	r3, #23
 8003e76:	dd04      	ble.n	8003e82 <CMD_RtcSet+0x102>
        embeddedCliPrint(cli, "Invalid hour (must be 0-23). Please enter again.");
 8003e78:	4947      	ldr	r1, [pc, #284]	@ (8003f98 <CMD_RtcSet+0x218>)
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f001 fb18 	bl	80054b0 <embeddedCliPrint>
        return;
 8003e80:	e085      	b.n	8003f8e <CMD_RtcSet+0x20e>
    }
    if (minute < 0 || minute > 59) {
 8003e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	db03      	blt.n	8003e92 <CMD_RtcSet+0x112>
 8003e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e8e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003e90:	dd04      	ble.n	8003e9c <CMD_RtcSet+0x11c>
        embeddedCliPrint(cli, "Invalid minute (must be 0-59). Please enter again.");
 8003e92:	4942      	ldr	r1, [pc, #264]	@ (8003f9c <CMD_RtcSet+0x21c>)
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f001 fb0b 	bl	80054b0 <embeddedCliPrint>
        return;
 8003e9a:	e078      	b.n	8003f8e <CMD_RtcSet+0x20e>
    }
    if (second < 0 || second > 59) {
 8003e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	db03      	blt.n	8003eac <CMD_RtcSet+0x12c>
 8003ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea8:	2b3b      	cmp	r3, #59	@ 0x3b
 8003eaa:	dd04      	ble.n	8003eb6 <CMD_RtcSet+0x136>
        embeddedCliPrint(cli, "Invalid second (must be 0-59). Please enter again.");
 8003eac:	493c      	ldr	r1, [pc, #240]	@ (8003fa0 <CMD_RtcSet+0x220>)
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f001 fafe 	bl	80054b0 <embeddedCliPrint>
        return;
 8003eb4:	e06b      	b.n	8003f8e <CMD_RtcSet+0x20e>
    }
    if (day < 1 || day > 31) {
 8003eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	dd03      	ble.n	8003ec6 <CMD_RtcSet+0x146>
 8003ebe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ec2:	2b1f      	cmp	r3, #31
 8003ec4:	dd04      	ble.n	8003ed0 <CMD_RtcSet+0x150>
        embeddedCliPrint(cli, "Invalid day (must be 1-31). Please enter again.");
 8003ec6:	4937      	ldr	r1, [pc, #220]	@ (8003fa4 <CMD_RtcSet+0x224>)
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f001 faf1 	bl	80054b0 <embeddedCliPrint>
        return;
 8003ece:	e05e      	b.n	8003f8e <CMD_RtcSet+0x20e>
    }
    if (month < 1 || month > 12) {
 8003ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	dd03      	ble.n	8003ee0 <CMD_RtcSet+0x160>
 8003ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003edc:	2b0c      	cmp	r3, #12
 8003ede:	dd04      	ble.n	8003eea <CMD_RtcSet+0x16a>
        embeddedCliPrint(cli, "Invalid month (must be 1-12). Please enter again.");
 8003ee0:	4931      	ldr	r1, [pc, #196]	@ (8003fa8 <CMD_RtcSet+0x228>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f001 fae4 	bl	80054b0 <embeddedCliPrint>
        return;
 8003ee8:	e051      	b.n	8003f8e <CMD_RtcSet+0x20e>
    }
    if (year < 0 || year > 99) {
 8003eea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	db03      	blt.n	8003efa <CMD_RtcSet+0x17a>
 8003ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ef6:	2b63      	cmp	r3, #99	@ 0x63
 8003ef8:	dd04      	ble.n	8003f04 <CMD_RtcSet+0x184>
        embeddedCliPrint(cli, "Invalid year (must be 2 digits, e.g., 25 for 2025). Please enter again.");
 8003efa:	492c      	ldr	r1, [pc, #176]	@ (8003fac <CMD_RtcSet+0x22c>)
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f001 fad7 	bl	80054b0 <embeddedCliPrint>
        return;
 8003f02:	e044      	b.n	8003f8e <CMD_RtcSet+0x20e>
    }

    s_DateTime dt;
    dt.hour   = (uint8_t)hour;
 8003f04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	74fb      	strb	r3, [r7, #19]
    dt.minute = (uint8_t)minute;
 8003f0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	753b      	strb	r3, [r7, #20]
    dt.second = (uint8_t)second;
 8003f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	757b      	strb	r3, [r7, #21]
    dt.day    = (uint8_t)day;
 8003f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	743b      	strb	r3, [r7, #16]
    dt.month  = (uint8_t)month;
 8003f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	747b      	strb	r3, [r7, #17]
    dt.year   = (uint8_t)year;
 8003f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	74bb      	strb	r3, [r7, #18]

    Utils_SetRTC(&dt);
 8003f34:	f107 0310 	add.w	r3, r7, #16
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f006 f93f 	bl	800a1bc <Utils_SetRTC>
    RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 8003f3e:	f004 fc81 	bl	8008844 <RV3129_GetHandle>
 8003f42:	67f8      	str	r0, [r7, #124]	@ 0x7c
    RV3129_SetTime(hrtc, &dt);
 8003f44:	f107 0310 	add.w	r3, r7, #16
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003f4c:	f004 fcd0 	bl	80088f0 <RV3129_SetTime>

    snprintf(buffer, sizeof(buffer),
             "--> RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
    snprintf(buffer, sizeof(buffer),
 8003f52:	461e      	mov	r6, r3
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8003f54:	7d3b      	ldrb	r3, [r7, #20]
 8003f56:	7d7a      	ldrb	r2, [r7, #21]
 8003f58:	7c39      	ldrb	r1, [r7, #16]
 8003f5a:	7c78      	ldrb	r0, [r7, #17]
    snprintf(buffer, sizeof(buffer),
 8003f5c:	4604      	mov	r4, r0
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8003f5e:	7cb8      	ldrb	r0, [r7, #18]
    snprintf(buffer, sizeof(buffer),
 8003f60:	4605      	mov	r5, r0
 8003f62:	f107 0018 	add.w	r0, r7, #24
 8003f66:	9504      	str	r5, [sp, #16]
 8003f68:	9403      	str	r4, [sp, #12]
 8003f6a:	9102      	str	r1, [sp, #8]
 8003f6c:	9201      	str	r2, [sp, #4]
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	4633      	mov	r3, r6
 8003f72:	4a0f      	ldr	r2, [pc, #60]	@ (8003fb0 <CMD_RtcSet+0x230>)
 8003f74:	2164      	movs	r1, #100	@ 0x64
 8003f76:	f01d ff4d 	bl	8021e14 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8003f7a:	f107 0318 	add.w	r3, r7, #24
 8003f7e:	4619      	mov	r1, r3
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f001 fa95 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8003f86:	490b      	ldr	r1, [pc, #44]	@ (8003fb4 <CMD_RtcSet+0x234>)
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f001 fa91 	bl	80054b0 <embeddedCliPrint>
}
 8003f8e:	37b4      	adds	r7, #180	@ 0xb4
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f94:	08024438 	.word	0x08024438
 8003f98:	08024478 	.word	0x08024478
 8003f9c:	080244ac 	.word	0x080244ac
 8003fa0:	080244e0 	.word	0x080244e0
 8003fa4:	08024514 	.word	0x08024514
 8003fa8:	08024544 	.word	0x08024544
 8003fac:	08024578 	.word	0x08024578
 8003fb0:	080245c0 	.word	0x080245c0
 8003fb4:	08023e9c 	.word	0x08023e9c

08003fb8 <CMD_RtcGet>:

static void CMD_RtcGet(EmbeddedCli *cli, char *args, void *context) {
 8003fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fba:	b0b5      	sub	sp, #212	@ 0xd4
 8003fbc:	af06      	add	r7, sp, #24
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
    const char *mode = embeddedCliGetToken(args, 1);
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	68b8      	ldr	r0, [r7, #8]
 8003fc8:	f001 fb34 	bl	8005634 <embeddedCliGetToken>
 8003fcc:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    char buffer[100];

    if (mode == NULL) {
 8003fd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10d      	bne.n	8003ff4 <CMD_RtcGet+0x3c>
        snprintf(buffer, sizeof(buffer), "Usage: rtc_get <hard|soft|work|all>");
 8003fd8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003fdc:	4ab9      	ldr	r2, [pc, #740]	@ (80042c4 <CMD_RtcGet+0x30c>)
 8003fde:	2164      	movs	r1, #100	@ 0x64
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f01d ff17 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8003fe6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003fea:	4619      	mov	r1, r3
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f001 fa5f 	bl	80054b0 <embeddedCliPrint>
 8003ff2:	e163      	b.n	80042bc <CMD_RtcGet+0x304>
        return;
    }

    //Hard
    if (strcmp(mode, "hard") == 0) {
 8003ff4:	49b4      	ldr	r1, [pc, #720]	@ (80042c8 <CMD_RtcGet+0x310>)
 8003ff6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8003ffa:	f7fc f971 	bl	80002e0 <strcmp>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d13f      	bne.n	8004084 <CMD_RtcGet+0xcc>
        s_DateTime currentTime;
        RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 8004004:	f004 fc1e 	bl	8008844 <RV3129_GetHandle>
 8004008:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
        if (RV3129_GetTime(hrtc, &currentTime) == E_OK) {
 800400c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004010:	4619      	mov	r1, r3
 8004012:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8004016:	f004 fc1f 	bl	8008858 <RV3129_GetTime>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d12c      	bne.n	800407a <CMD_RtcGet+0xc2>
            int16_t temp;
            RV3129_GetTemp(hrtc, &temp);
 8004020:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8004024:	4619      	mov	r1, r3
 8004026:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800402a:	f004 fca5 	bl	8008978 <RV3129_GetTemp>
            snprintf(buffer, sizeof(buffer),
                     "--> Hard RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d, Temp: %d",
                     currentTime.hour, currentTime.minute, currentTime.second,
 800402e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
            snprintf(buffer, sizeof(buffer),
 8004032:	469c      	mov	ip, r3
                     currentTime.hour, currentTime.minute, currentTime.second,
 8004034:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004038:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
                     currentTime.day, currentTime.month, currentTime.year, temp);
 800403c:	f897 103c 	ldrb.w	r1, [r7, #60]	@ 0x3c
 8004040:	f897 003d 	ldrb.w	r0, [r7, #61]	@ 0x3d
            snprintf(buffer, sizeof(buffer),
 8004044:	4604      	mov	r4, r0
                     currentTime.day, currentTime.month, currentTime.year, temp);
 8004046:	f897 003e 	ldrb.w	r0, [r7, #62]	@ 0x3e
            snprintf(buffer, sizeof(buffer),
 800404a:	4605      	mov	r5, r0
 800404c:	f9b7 003a 	ldrsh.w	r0, [r7, #58]	@ 0x3a
 8004050:	4606      	mov	r6, r0
 8004052:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8004056:	9605      	str	r6, [sp, #20]
 8004058:	9504      	str	r5, [sp, #16]
 800405a:	9403      	str	r4, [sp, #12]
 800405c:	9102      	str	r1, [sp, #8]
 800405e:	9201      	str	r2, [sp, #4]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	4663      	mov	r3, ip
 8004064:	4a99      	ldr	r2, [pc, #612]	@ (80042cc <CMD_RtcGet+0x314>)
 8004066:	2164      	movs	r1, #100	@ 0x64
 8004068:	f01d fed4 	bl	8021e14 <sniprintf>
            embeddedCliPrint(cli, buffer);
 800406c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004070:	4619      	mov	r1, r3
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f001 fa1c 	bl	80054b0 <embeddedCliPrint>
 8004078:	e11c      	b.n	80042b4 <CMD_RtcGet+0x2fc>
        } else {
            embeddedCliPrint(cli, "Failed to get hard RTC\r\n");
 800407a:	4995      	ldr	r1, [pc, #596]	@ (80042d0 <CMD_RtcGet+0x318>)
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f001 fa17 	bl	80054b0 <embeddedCliPrint>
 8004082:	e117      	b.n	80042b4 <CMD_RtcGet+0x2fc>
        }
    } else if (strcmp(mode, "soft") == 0) {
 8004084:	4993      	ldr	r1, [pc, #588]	@ (80042d4 <CMD_RtcGet+0x31c>)
 8004086:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 800408a:	f7fc f929 	bl	80002e0 <strcmp>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d126      	bne.n	80040e2 <CMD_RtcGet+0x12a>
        s_DateTime rtc;
        Utils_GetRTC(&rtc);
 8004094:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004098:	4618      	mov	r0, r3
 800409a:	f006 f879 	bl	800a190 <Utils_GetRTC>
        snprintf(buffer, sizeof(buffer),
                 "--> Soft RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d",
                 rtc.hour, rtc.minute, rtc.second,
 800409e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
        snprintf(buffer, sizeof(buffer),
 80040a2:	461e      	mov	r6, r3
                 rtc.hour, rtc.minute, rtc.second,
 80040a4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80040a8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
                 rtc.day, rtc.month, rtc.year);
 80040ac:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 80040b0:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
        snprintf(buffer, sizeof(buffer),
 80040b4:	4604      	mov	r4, r0
                 rtc.day, rtc.month, rtc.year);
 80040b6:	f897 0036 	ldrb.w	r0, [r7, #54]	@ 0x36
        snprintf(buffer, sizeof(buffer),
 80040ba:	4605      	mov	r5, r0
 80040bc:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80040c0:	9504      	str	r5, [sp, #16]
 80040c2:	9403      	str	r4, [sp, #12]
 80040c4:	9102      	str	r1, [sp, #8]
 80040c6:	9201      	str	r2, [sp, #4]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	4633      	mov	r3, r6
 80040cc:	4a82      	ldr	r2, [pc, #520]	@ (80042d8 <CMD_RtcGet+0x320>)
 80040ce:	2164      	movs	r1, #100	@ 0x64
 80040d0:	f01d fea0 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80040d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80040d8:	4619      	mov	r1, r3
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f001 f9e8 	bl	80054b0 <embeddedCliPrint>
 80040e0:	e0e8      	b.n	80042b4 <CMD_RtcGet+0x2fc>
    } else if (strcmp(mode, "work") == 0) {
 80040e2:	497e      	ldr	r1, [pc, #504]	@ (80042dc <CMD_RtcGet+0x324>)
 80040e4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80040e8:	f7fc f8fa 	bl	80002e0 <strcmp>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d12e      	bne.n	8004150 <CMD_RtcGet+0x198>
        uint32_t days = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t hours = 0, minutes = 0, seconds = 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004102:	2300      	movs	r3, #0
 8004104:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 8004108:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800410c:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 8004110:	f107 012f 	add.w	r1, r7, #47	@ 0x2f
 8004114:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8004118:	f006 f894 	bl	800a244 <Utils_GetWorkingTime>
        snprintf(buffer, sizeof(buffer),
 800411c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004120:	461c      	mov	r4, r3
 8004122:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004126:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
                        "--> Working Uptime: Time: %02d:%02d:%02d, Days: %d",
                        hours, minutes, seconds, (uint8_t)days);
 800412a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800412c:	b2c9      	uxtb	r1, r1
        snprintf(buffer, sizeof(buffer),
 800412e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8004132:	9102      	str	r1, [sp, #8]
 8004134:	9201      	str	r2, [sp, #4]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	4623      	mov	r3, r4
 800413a:	4a69      	ldr	r2, [pc, #420]	@ (80042e0 <CMD_RtcGet+0x328>)
 800413c:	2164      	movs	r1, #100	@ 0x64
 800413e:	f01d fe69 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004142:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004146:	4619      	mov	r1, r3
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f001 f9b1 	bl	80054b0 <embeddedCliPrint>
 800414e:	e0b1      	b.n	80042b4 <CMD_RtcGet+0x2fc>
    } else if (strcmp(mode, "all") == 0) {
 8004150:	4964      	ldr	r1, [pc, #400]	@ (80042e4 <CMD_RtcGet+0x32c>)
 8004152:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8004156:	f7fc f8c3 	bl	80002e0 <strcmp>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 809c 	bne.w	800429a <CMD_RtcGet+0x2e2>
        s_DateTime currentTime;
        RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 8004162:	f004 fb6f 	bl	8008844 <RV3129_GetHandle>
 8004166:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        if (RV3129_GetTime(hrtc, &currentTime) == E_OK) {
 800416a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800416e:	4619      	mov	r1, r3
 8004170:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8004174:	f004 fb70 	bl	8008858 <RV3129_GetTime>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d12c      	bne.n	80041d8 <CMD_RtcGet+0x220>
            int16_t temp;
            RV3129_GetTemp(hrtc, &temp);
 800417e:	f107 0312 	add.w	r3, r7, #18
 8004182:	4619      	mov	r1, r3
 8004184:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8004188:	f004 fbf6 	bl	8008978 <RV3129_GetTemp>
            snprintf(buffer, sizeof(buffer),
                     "--> Hard RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d, Temp: %d",
                     currentTime.hour, currentTime.minute, currentTime.second,
 800418c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
            snprintf(buffer, sizeof(buffer),
 8004190:	469c      	mov	ip, r3
                     currentTime.hour, currentTime.minute, currentTime.second,
 8004192:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004196:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
                     currentTime.day, currentTime.month, currentTime.year, temp);
 800419a:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800419e:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
            snprintf(buffer, sizeof(buffer),
 80041a2:	4604      	mov	r4, r0
                     currentTime.day, currentTime.month, currentTime.year, temp);
 80041a4:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
            snprintf(buffer, sizeof(buffer),
 80041a8:	4605      	mov	r5, r0
 80041aa:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 80041ae:	4606      	mov	r6, r0
 80041b0:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80041b4:	9605      	str	r6, [sp, #20]
 80041b6:	9504      	str	r5, [sp, #16]
 80041b8:	9403      	str	r4, [sp, #12]
 80041ba:	9102      	str	r1, [sp, #8]
 80041bc:	9201      	str	r2, [sp, #4]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	4663      	mov	r3, ip
 80041c2:	4a42      	ldr	r2, [pc, #264]	@ (80042cc <CMD_RtcGet+0x314>)
 80041c4:	2164      	movs	r1, #100	@ 0x64
 80041c6:	f01d fe25 	bl	8021e14 <sniprintf>
            embeddedCliPrint(cli, buffer);
 80041ca:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80041ce:	4619      	mov	r1, r3
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f001 f96d 	bl	80054b0 <embeddedCliPrint>
 80041d6:	e003      	b.n	80041e0 <CMD_RtcGet+0x228>
        } else {
            embeddedCliPrint(cli, "Failed to get hard RTC");
 80041d8:	4943      	ldr	r1, [pc, #268]	@ (80042e8 <CMD_RtcGet+0x330>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f001 f968 	bl	80054b0 <embeddedCliPrint>
        }
        // Soft RTC
        s_DateTime rtc;
        Utils_GetRTC(&rtc);
 80041e0:	f107 031c 	add.w	r3, r7, #28
 80041e4:	4618      	mov	r0, r3
 80041e6:	f005 ffd3 	bl	800a190 <Utils_GetRTC>
        snprintf(buffer, sizeof(buffer),
                 "--> Soft RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d",
                 rtc.hour, rtc.minute, rtc.second,
 80041ea:	7ffb      	ldrb	r3, [r7, #31]
        snprintf(buffer, sizeof(buffer),
 80041ec:	461e      	mov	r6, r3
                 rtc.hour, rtc.minute, rtc.second,
 80041ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041f2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
                 rtc.day, rtc.month, rtc.year);
 80041f6:	7f39      	ldrb	r1, [r7, #28]
 80041f8:	7f78      	ldrb	r0, [r7, #29]
        snprintf(buffer, sizeof(buffer),
 80041fa:	4604      	mov	r4, r0
                 rtc.day, rtc.month, rtc.year);
 80041fc:	7fb8      	ldrb	r0, [r7, #30]
        snprintf(buffer, sizeof(buffer),
 80041fe:	4605      	mov	r5, r0
 8004200:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8004204:	9504      	str	r5, [sp, #16]
 8004206:	9403      	str	r4, [sp, #12]
 8004208:	9102      	str	r1, [sp, #8]
 800420a:	9201      	str	r2, [sp, #4]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	4633      	mov	r3, r6
 8004210:	4a31      	ldr	r2, [pc, #196]	@ (80042d8 <CMD_RtcGet+0x320>)
 8004212:	2164      	movs	r1, #100	@ 0x64
 8004214:	f01d fdfe 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004218:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800421c:	4619      	mov	r1, r3
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f001 f946 	bl	80054b0 <embeddedCliPrint>
        // Working uptime:
        uint32_t days = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	61bb      	str	r3, [r7, #24]
        uint8_t hours = 0, minutes = 0, seconds = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	75fb      	strb	r3, [r7, #23]
 800422c:	2300      	movs	r3, #0
 800422e:	75bb      	strb	r3, [r7, #22]
 8004230:	2300      	movs	r3, #0
 8004232:	757b      	strb	r3, [r7, #21]
        Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 8004234:	f107 0315 	add.w	r3, r7, #21
 8004238:	f107 0216 	add.w	r2, r7, #22
 800423c:	f107 0117 	add.w	r1, r7, #23
 8004240:	f107 0018 	add.w	r0, r7, #24
 8004244:	f005 fffe 	bl	800a244 <Utils_GetWorkingTime>
        snprintf(buffer, sizeof(buffer),
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	461c      	mov	r4, r3
 800424c:	7dbb      	ldrb	r3, [r7, #22]
 800424e:	7d7a      	ldrb	r2, [r7, #21]
                        "--> Working Uptime: Time: %02d:%02d:%02d, Days: %d",
                        hours, minutes, seconds, (uint8_t)days);
 8004250:	69b9      	ldr	r1, [r7, #24]
 8004252:	b2c9      	uxtb	r1, r1
        snprintf(buffer, sizeof(buffer),
 8004254:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8004258:	9102      	str	r1, [sp, #8]
 800425a:	9201      	str	r2, [sp, #4]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	4623      	mov	r3, r4
 8004260:	4a1f      	ldr	r2, [pc, #124]	@ (80042e0 <CMD_RtcGet+0x328>)
 8004262:	2164      	movs	r1, #100	@ 0x64
 8004264:	f01d fdd6 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004268:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800426c:	4619      	mov	r1, r3
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f001 f91e 	bl	80054b0 <embeddedCliPrint>
        // Epoch
        uint32_t epoch = Utils_GetEpoch();
 8004274:	f005 ffd8 	bl	800a228 <Utils_GetEpoch>
 8004278:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
        snprintf(buffer, sizeof(buffer), "--> Epoch: %lu", (unsigned long)epoch);
 800427c:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8004280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004284:	4a19      	ldr	r2, [pc, #100]	@ (80042ec <CMD_RtcGet+0x334>)
 8004286:	2164      	movs	r1, #100	@ 0x64
 8004288:	f01d fdc4 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800428c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004290:	4619      	mov	r1, r3
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f001 f90c 	bl	80054b0 <embeddedCliPrint>
 8004298:	e00c      	b.n	80042b4 <CMD_RtcGet+0x2fc>
    } else {
        snprintf(buffer, sizeof(buffer), "Unknown mode. Use: rtc_get <hard|soft|work|all>");
 800429a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800429e:	4a14      	ldr	r2, [pc, #80]	@ (80042f0 <CMD_RtcGet+0x338>)
 80042a0:	2164      	movs	r1, #100	@ 0x64
 80042a2:	4618      	mov	r0, r3
 80042a4:	f01d fdb6 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80042a8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80042ac:	4619      	mov	r1, r3
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f001 f8fe 	bl	80054b0 <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 80042b4:	490f      	ldr	r1, [pc, #60]	@ (80042f4 <CMD_RtcGet+0x33c>)
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f001 f8fa 	bl	80054b0 <embeddedCliPrint>
}
 80042bc:	37bc      	adds	r7, #188	@ 0xbc
 80042be:	46bd      	mov	sp, r7
 80042c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c2:	bf00      	nop
 80042c4:	080245f0 	.word	0x080245f0
 80042c8:	08024614 	.word	0x08024614
 80042cc:	0802461c 	.word	0x0802461c
 80042d0:	08024664 	.word	0x08024664
 80042d4:	08024680 	.word	0x08024680
 80042d8:	08024688 	.word	0x08024688
 80042dc:	080246c4 	.word	0x080246c4
 80042e0:	080246cc 	.word	0x080246cc
 80042e4:	08024700 	.word	0x08024700
 80042e8:	08024704 	.word	0x08024704
 80042ec:	0802471c 	.word	0x0802471c
 80042f0:	0802472c 	.word	0x0802472c
 80042f4:	08023e9c 	.word	0x08023e9c

080042f8 <CMD_RtcSetEpoch>:

static void CMD_RtcSetEpoch(EmbeddedCli *cli, char *args, void *context) {
 80042f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fa:	b0a9      	sub	sp, #164	@ 0xa4
 80042fc:	af06      	add	r7, sp, #24
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 8004304:	2101      	movs	r1, #1
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	f001 f994 	bl	8005634 <embeddedCliGetToken>
 800430c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    char buffer[100];
    if (arg1 == NULL) {
 8004310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10d      	bne.n	8004334 <CMD_RtcSetEpoch+0x3c>
        snprintf(buffer, sizeof(buffer), "Usage: rtc_setepoch <epoch>");
 8004318:	f107 031c 	add.w	r3, r7, #28
 800431c:	4a2b      	ldr	r2, [pc, #172]	@ (80043cc <CMD_RtcSetEpoch+0xd4>)
 800431e:	2164      	movs	r1, #100	@ 0x64
 8004320:	4618      	mov	r0, r3
 8004322:	f01d fd77 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004326:	f107 031c 	add.w	r3, r7, #28
 800432a:	4619      	mov	r1, r3
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f001 f8bf 	bl	80054b0 <embeddedCliPrint>
        return;
 8004332:	e047      	b.n	80043c4 <CMD_RtcSetEpoch+0xcc>
    }

    uint32_t epoch = (uint32_t)strtoul(arg1, NULL, 0);
 8004334:	2200      	movs	r2, #0
 8004336:	2100      	movs	r1, #0
 8004338:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800433c:	f01d fc9e 	bl	8021c7c <strtoul>
 8004340:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    if (epoch < EPOCH_OFFSET_UNIX) {
 8004344:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004348:	4a21      	ldr	r2, [pc, #132]	@ (80043d0 <CMD_RtcSetEpoch+0xd8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d80d      	bhi.n	800436a <CMD_RtcSetEpoch+0x72>
        snprintf(buffer, sizeof(buffer), "Invalid epoch. Must be >= %lu", (unsigned long)EPOCH_OFFSET_UNIX);
 800434e:	f107 001c 	add.w	r0, r7, #28
 8004352:	4b20      	ldr	r3, [pc, #128]	@ (80043d4 <CMD_RtcSetEpoch+0xdc>)
 8004354:	4a20      	ldr	r2, [pc, #128]	@ (80043d8 <CMD_RtcSetEpoch+0xe0>)
 8004356:	2164      	movs	r1, #100	@ 0x64
 8004358:	f01d fd5c 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800435c:	f107 031c 	add.w	r3, r7, #28
 8004360:	4619      	mov	r1, r3
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f001 f8a4 	bl	80054b0 <embeddedCliPrint>
        return;
 8004368:	e02c      	b.n	80043c4 <CMD_RtcSetEpoch+0xcc>
    }

    Utils_SetEpoch(epoch);
 800436a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800436e:	f005 ff3b 	bl	800a1e8 <Utils_SetEpoch>

    s_DateTime dt;
    EpochToDateTime(epoch - EPOCH_OFFSET_UNIX, &dt);
 8004372:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004376:	4b19      	ldr	r3, [pc, #100]	@ (80043dc <CMD_RtcSetEpoch+0xe4>)
 8004378:	4413      	add	r3, r2
 800437a:	f107 0214 	add.w	r2, r7, #20
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f005 fc69 	bl	8009c58 <EpochToDateTime>
    snprintf(buffer, sizeof(buffer),
             "--> RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8004386:	7dfb      	ldrb	r3, [r7, #23]
    snprintf(buffer, sizeof(buffer),
 8004388:	461e      	mov	r6, r3
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 800438a:	7e3b      	ldrb	r3, [r7, #24]
 800438c:	7e7a      	ldrb	r2, [r7, #25]
 800438e:	7d39      	ldrb	r1, [r7, #20]
 8004390:	7d78      	ldrb	r0, [r7, #21]
    snprintf(buffer, sizeof(buffer),
 8004392:	4604      	mov	r4, r0
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8004394:	7db8      	ldrb	r0, [r7, #22]
    snprintf(buffer, sizeof(buffer),
 8004396:	4605      	mov	r5, r0
 8004398:	f107 001c 	add.w	r0, r7, #28
 800439c:	9504      	str	r5, [sp, #16]
 800439e:	9403      	str	r4, [sp, #12]
 80043a0:	9102      	str	r1, [sp, #8]
 80043a2:	9201      	str	r2, [sp, #4]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	4633      	mov	r3, r6
 80043a8:	4a0d      	ldr	r2, [pc, #52]	@ (80043e0 <CMD_RtcSetEpoch+0xe8>)
 80043aa:	2164      	movs	r1, #100	@ 0x64
 80043ac:	f01d fd32 	bl	8021e14 <sniprintf>
    embeddedCliPrint(cli, buffer);
 80043b0:	f107 031c 	add.w	r3, r7, #28
 80043b4:	4619      	mov	r1, r3
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f001 f87a 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80043bc:	4909      	ldr	r1, [pc, #36]	@ (80043e4 <CMD_RtcSetEpoch+0xec>)
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f001 f876 	bl	80054b0 <embeddedCliPrint>
}
 80043c4:	378c      	adds	r7, #140	@ 0x8c
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ca:	bf00      	nop
 80043cc:	0802475c 	.word	0x0802475c
 80043d0:	386d437f 	.word	0x386d437f
 80043d4:	386d4380 	.word	0x386d4380
 80043d8:	08024778 	.word	0x08024778
 80043dc:	c792bc80 	.word	0xc792bc80
 80043e0:	080245c0 	.word	0x080245c0
 80043e4:	08023e9c 	.word	0x08023e9c

080043e8 <CMD_FramWrite>:


static void CMD_FramWrite(EmbeddedCli *cli, char *args, void *context) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b0a4      	sub	sp, #144	@ 0x90
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // Address
 80043f4:	2101      	movs	r1, #1
 80043f6:	68b8      	ldr	r0, [r7, #8]
 80043f8:	f001 f91c 	bl	8005634 <embeddedCliGetToken>
 80043fc:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    const char *arg2 = embeddedCliGetToken(args, 2); // Value
 8004400:	2102      	movs	r1, #2
 8004402:	68b8      	ldr	r0, [r7, #8]
 8004404:	f001 f916 	bl	8005634 <embeddedCliGetToken>
 8004408:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    char buffer[100];

    if (arg1 == NULL || arg2 == NULL) {
 800440c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <CMD_FramWrite+0x34>
 8004414:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10d      	bne.n	8004438 <CMD_FramWrite+0x50>
        snprintf(buffer, sizeof(buffer), "Usage: fram_write [address] [value]");
 800441c:	f107 0314 	add.w	r3, r7, #20
 8004420:	4a25      	ldr	r2, [pc, #148]	@ (80044b8 <CMD_FramWrite+0xd0>)
 8004422:	2164      	movs	r1, #100	@ 0x64
 8004424:	4618      	mov	r0, r3
 8004426:	f01d fcf5 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800442a:	f107 0314 	add.w	r3, r7, #20
 800442e:	4619      	mov	r1, r3
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f001 f83d 	bl	80054b0 <embeddedCliPrint>
 8004436:	e03c      	b.n	80044b2 <CMD_FramWrite+0xca>
        return;
    }

    uint16_t address = (uint16_t)strtol(arg1, NULL, 0);
 8004438:	2200      	movs	r2, #0
 800443a:	2100      	movs	r1, #0
 800443c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8004440:	f01d fba4 	bl	8021b8c <strtol>
 8004444:	4603      	mov	r3, r0
 8004446:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    uint8_t value = (uint8_t)strtol(arg2, NULL, 0);
 800444a:	2200      	movs	r2, #0
 800444c:	2100      	movs	r1, #0
 800444e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004452:	f01d fb9b 	bl	8021b8c <strtol>
 8004456:	4603      	mov	r3, r0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	74fb      	strb	r3, [r7, #19]

    FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 800445c:	f004 fb22 	bl	8008aa4 <FRAM_SPI_GetHandle>
 8004460:	67b8      	str	r0, [r7, #120]	@ 0x78
    if (FRAM_SPI_WriteMem(hfram, address, &value, 1) == E_OK) {
 8004462:	f8b7 107e 	ldrh.w	r1, [r7, #126]	@ 0x7e
 8004466:	f107 0213 	add.w	r2, r7, #19
 800446a:	2301      	movs	r3, #1
 800446c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800446e:	f004 fb81 	bl	8008b74 <FRAM_SPI_WriteMem>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <CMD_FramWrite+0xa6>
        snprintf(buffer, sizeof(buffer), "Write OK: Addr 0x%04X = 0x%02X", address, value);
 8004478:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800447c:	7cfa      	ldrb	r2, [r7, #19]
 800447e:	f107 0014 	add.w	r0, r7, #20
 8004482:	9200      	str	r2, [sp, #0]
 8004484:	4a0d      	ldr	r2, [pc, #52]	@ (80044bc <CMD_FramWrite+0xd4>)
 8004486:	2164      	movs	r1, #100	@ 0x64
 8004488:	f01d fcc4 	bl	8021e14 <sniprintf>
 800448c:	e007      	b.n	800449e <CMD_FramWrite+0xb6>
    } else {
        snprintf(buffer, sizeof(buffer), "FRAM Write Error at 0x%04X", address);
 800448e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004492:	f107 0014 	add.w	r0, r7, #20
 8004496:	4a0a      	ldr	r2, [pc, #40]	@ (80044c0 <CMD_FramWrite+0xd8>)
 8004498:	2164      	movs	r1, #100	@ 0x64
 800449a:	f01d fcbb 	bl	8021e14 <sniprintf>
    }

    embeddedCliPrint(cli, buffer);
 800449e:	f107 0314 	add.w	r3, r7, #20
 80044a2:	4619      	mov	r1, r3
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f001 f803 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80044aa:	4906      	ldr	r1, [pc, #24]	@ (80044c4 <CMD_FramWrite+0xdc>)
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 ffff 	bl	80054b0 <embeddedCliPrint>
}
 80044b2:	3788      	adds	r7, #136	@ 0x88
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	08024798 	.word	0x08024798
 80044bc:	080247bc 	.word	0x080247bc
 80044c0:	080247dc 	.word	0x080247dc
 80044c4:	08023e9c 	.word	0x08023e9c

080044c8 <CMD_FramRead>:

static void CMD_FramRead(EmbeddedCli *cli, char *args, void *context) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b0a4      	sub	sp, #144	@ 0x90
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // Address
 80044d4:	2101      	movs	r1, #1
 80044d6:	68b8      	ldr	r0, [r7, #8]
 80044d8:	f001 f8ac 	bl	8005634 <embeddedCliGetToken>
 80044dc:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    char buffer[100];

    if (arg1 == NULL) {
 80044e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10d      	bne.n	8004504 <CMD_FramRead+0x3c>
        snprintf(buffer, sizeof(buffer), "Usage: fram_read [address]");
 80044e8:	f107 0318 	add.w	r3, r7, #24
 80044ec:	4a22      	ldr	r2, [pc, #136]	@ (8004578 <CMD_FramRead+0xb0>)
 80044ee:	2164      	movs	r1, #100	@ 0x64
 80044f0:	4618      	mov	r0, r3
 80044f2:	f01d fc8f 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80044f6:	f107 0318 	add.w	r3, r7, #24
 80044fa:	4619      	mov	r1, r3
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 ffd7 	bl	80054b0 <embeddedCliPrint>
 8004502:	e035      	b.n	8004570 <CMD_FramRead+0xa8>
        return;
    }

    uint16_t address = (uint16_t)strtol(arg1, NULL, 0);
 8004504:	2200      	movs	r2, #0
 8004506:	2100      	movs	r1, #0
 8004508:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800450c:	f01d fb3e 	bl	8021b8c <strtol>
 8004510:	4603      	mov	r3, r0
 8004512:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    uint8_t readData = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	75fb      	strb	r3, [r7, #23]

    FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 800451a:	f004 fac3 	bl	8008aa4 <FRAM_SPI_GetHandle>
 800451e:	67f8      	str	r0, [r7, #124]	@ 0x7c
    if (FRAM_SPI_ReadMem(hfram, address, &readData, 1) == E_OK) {
 8004520:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 8004524:	f107 0217 	add.w	r2, r7, #23
 8004528:	2301      	movs	r3, #1
 800452a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800452c:	f004 fbb1 	bl	8008c92 <FRAM_SPI_ReadMem>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10a      	bne.n	800454c <CMD_FramRead+0x84>
        snprintf(buffer, sizeof(buffer), "Read OK: Addr 0x%04X = 0x%02X", address, readData);
 8004536:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800453a:	7dfa      	ldrb	r2, [r7, #23]
 800453c:	f107 0018 	add.w	r0, r7, #24
 8004540:	9200      	str	r2, [sp, #0]
 8004542:	4a0e      	ldr	r2, [pc, #56]	@ (800457c <CMD_FramRead+0xb4>)
 8004544:	2164      	movs	r1, #100	@ 0x64
 8004546:	f01d fc65 	bl	8021e14 <sniprintf>
 800454a:	e007      	b.n	800455c <CMD_FramRead+0x94>
    } else {
        snprintf(buffer, sizeof(buffer), "FRAM Read Error at 0x%04X", address);
 800454c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004550:	f107 0018 	add.w	r0, r7, #24
 8004554:	4a0a      	ldr	r2, [pc, #40]	@ (8004580 <CMD_FramRead+0xb8>)
 8004556:	2164      	movs	r1, #100	@ 0x64
 8004558:	f01d fc5c 	bl	8021e14 <sniprintf>
    }

    embeddedCliPrint(cli, buffer);
 800455c:	f107 0318 	add.w	r3, r7, #24
 8004560:	4619      	mov	r1, r3
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 ffa4 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8004568:	4906      	ldr	r1, [pc, #24]	@ (8004584 <CMD_FramRead+0xbc>)
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 ffa0 	bl	80054b0 <embeddedCliPrint>
}
 8004570:	3788      	adds	r7, #136	@ 0x88
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	080247f8 	.word	0x080247f8
 800457c:	08024814 	.word	0x08024814
 8004580:	08024834 	.word	0x08024834
 8004584:	08023e9c 	.word	0x08023e9c

08004588 <CMD_ls>:

static void CMD_ls(EmbeddedCli *cli, char *args, void *context) {
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
    FS_ListFiles_path(cli);
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f003 f981 	bl	800789c <FS_ListFiles_path>
    embeddedCliPrint(cli, "");
 800459a:	4904      	ldr	r1, [pc, #16]	@ (80045ac <CMD_ls+0x24>)
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 ff87 	bl	80054b0 <embeddedCliPrint>
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	08023e9c 	.word	0x08023e9c

080045b0 <CMD_sd_lockin>:

static void CMD_sd_lockin(EmbeddedCli *cli, char *args, void *context) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
    SD_Lockin();
 80045bc:	f002 fe12 	bl	80071e4 <SD_Lockin>
    embeddedCliPrint(cli, "SD filesystem locked-in");
 80045c0:	490d      	ldr	r1, [pc, #52]	@ (80045f8 <CMD_sd_lockin+0x48>)
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 ff74 	bl	80054b0 <embeddedCliPrint>
	Std_ReturnType ret = Link_SDFS_Driver();
 80045c8:	f002 ff80 	bl	80074cc <Link_SDFS_Driver>
 80045cc:	4603      	mov	r3, r0
 80045ce:	75fb      	strb	r3, [r7, #23]
	if(ret != E_OK){
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <CMD_sd_lockin+0x30>
        embeddedCliPrint(cli, "[Link FATFS Fail]");
 80045d6:	4909      	ldr	r1, [pc, #36]	@ (80045fc <CMD_sd_lockin+0x4c>)
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 ff69 	bl	80054b0 <embeddedCliPrint>
 80045de:	e003      	b.n	80045e8 <CMD_sd_lockin+0x38>
	}else{
        embeddedCliPrint(cli, "[Link FATFS Successfully]");
 80045e0:	4907      	ldr	r1, [pc, #28]	@ (8004600 <CMD_sd_lockin+0x50>)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 ff64 	bl	80054b0 <embeddedCliPrint>
	}
    embeddedCliPrint(cli, "");
 80045e8:	4906      	ldr	r1, [pc, #24]	@ (8004604 <CMD_sd_lockin+0x54>)
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 ff60 	bl	80054b0 <embeddedCliPrint>
}
 80045f0:	bf00      	nop
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	08024850 	.word	0x08024850
 80045fc:	08024868 	.word	0x08024868
 8004600:	0802487c 	.word	0x0802487c
 8004604:	08023e9c 	.word	0x08023e9c

08004608 <CMD_sd_release>:

static void CMD_sd_release(EmbeddedCli *cli, char *args, void *context) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
    SD_Release();
 8004614:	f002 fdf8 	bl	8007208 <SD_Release>
    embeddedCliPrint(cli, "SD filesystem released");
 8004618:	4905      	ldr	r1, [pc, #20]	@ (8004630 <CMD_sd_release+0x28>)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 ff48 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8004620:	4904      	ldr	r1, [pc, #16]	@ (8004634 <CMD_sd_release+0x2c>)
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 ff44 	bl	80054b0 <embeddedCliPrint>
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	08024898 	.word	0x08024898
 8004634:	08023e9c 	.word	0x08023e9c

08004638 <CMD_vim_bypass>:

static void CMD_vim_bypass(EmbeddedCli *cli, char *args, void *context) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b0a6      	sub	sp, #152	@ 0x98
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
    const char *filename = embeddedCliGetToken(args, 1);
 8004644:	2101      	movs	r1, #1
 8004646:	68b8      	ldr	r0, [r7, #8]
 8004648:	f000 fff4 	bl	8005634 <embeddedCliGetToken>
 800464c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    const char *content = embeddedCliGetToken(args, 2);
 8004650:	2102      	movs	r1, #2
 8004652:	68b8      	ldr	r0, [r7, #8]
 8004654:	f000 ffee 	bl	8005634 <embeddedCliGetToken>
 8004658:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    char buffer[128];

    if (filename == NULL || content == NULL) {
 800465c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <CMD_vim_bypass+0x34>
 8004664:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004668:	2b00      	cmp	r3, #0
 800466a:	d104      	bne.n	8004676 <CMD_vim_bypass+0x3e>
        embeddedCliPrint(cli, "Usage: vim <filename> \"content\"");
 800466c:	4911      	ldr	r1, [pc, #68]	@ (80046b4 <CMD_vim_bypass+0x7c>)
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 ff1e 	bl	80054b0 <embeddedCliPrint>
 8004674:	e01b      	b.n	80046ae <CMD_vim_bypass+0x76>
        return;
    }

    if (Vim_SDFS(cli, filename, content) == 0) {
 8004676:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800467a:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f003 f820 	bl	80076c4 <Vim_SDFS>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10d      	bne.n	80046a6 <CMD_vim_bypass+0x6e>
        snprintf(buffer, sizeof(buffer), "Content written to %s", filename);
 800468a:	f107 0010 	add.w	r0, r7, #16
 800468e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004692:	4a09      	ldr	r2, [pc, #36]	@ (80046b8 <CMD_vim_bypass+0x80>)
 8004694:	2180      	movs	r1, #128	@ 0x80
 8004696:	f01d fbbd 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800469a:	f107 0310 	add.w	r3, r7, #16
 800469e:	4619      	mov	r1, r3
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 ff05 	bl	80054b0 <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 80046a6:	4905      	ldr	r1, [pc, #20]	@ (80046bc <CMD_vim_bypass+0x84>)
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 ff01 	bl	80054b0 <embeddedCliPrint>
}
 80046ae:	3798      	adds	r7, #152	@ 0x98
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	080248b0 	.word	0x080248b0
 80046b8:	080248d0 	.word	0x080248d0
 80046bc:	08023e9c 	.word	0x08023e9c

080046c0 <CMD_vim>:

static void CMD_vim(EmbeddedCli *cli, char *args, void *context) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b0a8      	sub	sp, #160	@ 0xa0
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
    const char *filename = embeddedCliGetToken(args, 1);
 80046cc:	2101      	movs	r1, #1
 80046ce:	68b8      	ldr	r0, [r7, #8]
 80046d0:	f000 ffb0 	bl	8005634 <embeddedCliGetToken>
 80046d4:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    const char *content = embeddedCliGetToken(args, 2);
 80046d8:	2102      	movs	r1, #2
 80046da:	68b8      	ldr	r0, [r7, #8]
 80046dc:	f000 ffaa 	bl	8005634 <embeddedCliGetToken>
 80046e0:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    char buffer[128];

    if (filename == NULL || content == NULL) {
 80046e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <CMD_vim+0x34>
 80046ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d104      	bne.n	80046fe <CMD_vim+0x3e>
        embeddedCliPrint(cli, "Usage: vim <filename> \"content\"");
 80046f4:	491c      	ldr	r1, [pc, #112]	@ (8004768 <CMD_vim+0xa8>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 feda 	bl	80054b0 <embeddedCliPrint>
        return;
 80046fc:	e031      	b.n	8004762 <CMD_vim+0xa2>
    }

    size_t content_len = strlen(content);
 80046fe:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8004702:	f7fb fdf7 	bl	80002f4 <strlen>
 8004706:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if (content_len > (8 * 1024) ){
 800470a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800470e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004712:	d904      	bls.n	800471e <CMD_vim+0x5e>
        embeddedCliPrint(cli, "Content exceeds 8KB limit");
 8004714:	4915      	ldr	r1, [pc, #84]	@ (800476c <CMD_vim+0xac>)
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 feca 	bl	80054b0 <embeddedCliPrint>
        return;
 800471c:	e021      	b.n	8004762 <CMD_vim+0xa2>
    }

    if (FS_Request_Write(filename, (uint8_t*)content, content_len) == E_OK) {
 800471e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004722:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8004726:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800472a:	f002 fe27 	bl	800737c <FS_Request_Write>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10e      	bne.n	8004752 <CMD_vim+0x92>
        snprintf(buffer, sizeof(buffer), "Content written to %s", filename);
 8004734:	f107 0014 	add.w	r0, r7, #20
 8004738:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800473c:	4a0c      	ldr	r2, [pc, #48]	@ (8004770 <CMD_vim+0xb0>)
 800473e:	2180      	movs	r1, #128	@ 0x80
 8004740:	f01d fb68 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004744:	f107 0314 	add.w	r3, r7, #20
 8004748:	4619      	mov	r1, r3
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 feb0 	bl	80054b0 <embeddedCliPrint>
 8004750:	e003      	b.n	800475a <CMD_vim+0x9a>
    } else {
        embeddedCliPrint(cli, "Failed to write to file");
 8004752:	4908      	ldr	r1, [pc, #32]	@ (8004774 <CMD_vim+0xb4>)
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 feab 	bl	80054b0 <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 800475a:	4907      	ldr	r1, [pc, #28]	@ (8004778 <CMD_vim+0xb8>)
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fea7 	bl	80054b0 <embeddedCliPrint>
}
 8004762:	37a0      	adds	r7, #160	@ 0xa0
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	080248b0 	.word	0x080248b0
 800476c:	080248e8 	.word	0x080248e8
 8004770:	080248d0 	.word	0x080248d0
 8004774:	08024904 	.word	0x08024904
 8004778:	08023e9c 	.word	0x08023e9c

0800477c <CMD_cat>:

static void CMD_cat(EmbeddedCli *cli, char *args, void *context) {
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
    const char *filename = embeddedCliGetToken(args, 1);
 8004788:	2101      	movs	r1, #1
 800478a:	68b8      	ldr	r0, [r7, #8]
 800478c:	f000 ff52 	bl	8005634 <embeddedCliGetToken>
 8004790:	6178      	str	r0, [r7, #20]

    if (filename == NULL) {
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d104      	bne.n	80047a2 <CMD_cat+0x26>
        embeddedCliPrint(cli, "Usage: cat <filename>");
 8004798:	4907      	ldr	r1, [pc, #28]	@ (80047b8 <CMD_cat+0x3c>)
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fe88 	bl	80054b0 <embeddedCliPrint>
        return;
 80047a0:	e007      	b.n	80047b2 <CMD_cat+0x36>
    }

    Cat_SDFS(cli, filename);
 80047a2:	6979      	ldr	r1, [r7, #20]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f002 feb3 	bl	8007510 <Cat_SDFS>
    embeddedCliPrint(cli, "");
 80047aa:	4904      	ldr	r1, [pc, #16]	@ (80047bc <CMD_cat+0x40>)
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fe7f 	bl	80054b0 <embeddedCliPrint>
}
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	0802491c 	.word	0x0802491c
 80047bc:	08023e9c 	.word	0x08023e9c

080047c0 <CMD_Cm4Rst>:

static void CMD_Cm4Rst(EmbeddedCli *cli, char *args, void *context) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
    GPIO_SetLow(CM4_RST_Port, CM4_RST_Pin);
 80047cc:	2180      	movs	r1, #128	@ 0x80
 80047ce:	480b      	ldr	r0, [pc, #44]	@ (80047fc <CMD_Cm4Rst+0x3c>)
 80047d0:	f7fe fcd2 	bl	8003178 <LL_GPIO_ResetOutputPin>
    vTaskDelay(pdMS_TO_TICKS(100));
 80047d4:	2064      	movs	r0, #100	@ 0x64
 80047d6:	f00d fa5d 	bl	8011c94 <vTaskDelay>
    GPIO_SetHigh(CM4_RST_Port, CM4_RST_Pin);
 80047da:	2180      	movs	r1, #128	@ 0x80
 80047dc:	4807      	ldr	r0, [pc, #28]	@ (80047fc <CMD_Cm4Rst+0x3c>)
 80047de:	f7fe fcbd 	bl	800315c <LL_GPIO_SetOutputPin>
    embeddedCliPrint(cli, "CM4 reset pulse triggered.");
 80047e2:	4907      	ldr	r1, [pc, #28]	@ (8004800 <CMD_Cm4Rst+0x40>)
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fe63 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80047ea:	4906      	ldr	r1, [pc, #24]	@ (8004804 <CMD_Cm4Rst+0x44>)
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fe5f 	bl	80054b0 <embeddedCliPrint>
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	58021800 	.word	0x58021800
 8004800:	08024934 	.word	0x08024934
 8004804:	08023e9c 	.word	0x08023e9c

08004808 <CMD_Cm4Dis>:

static void CMD_Cm4Dis(EmbeddedCli *cli, char *args, void *context) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
    GPIO_SetLow(CM4_ENA_Port, CM4_ENA_Pin);
 8004814:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004818:	4807      	ldr	r0, [pc, #28]	@ (8004838 <CMD_Cm4Dis+0x30>)
 800481a:	f7fe fcad 	bl	8003178 <LL_GPIO_ResetOutputPin>
    embeddedCliPrint(cli, "CM4 power disabled (enable driven low).");
 800481e:	4907      	ldr	r1, [pc, #28]	@ (800483c <CMD_Cm4Dis+0x34>)
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fe45 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8004826:	4906      	ldr	r1, [pc, #24]	@ (8004840 <CMD_Cm4Dis+0x38>)
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fe41 	bl	80054b0 <embeddedCliPrint>
}
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	58021800 	.word	0x58021800
 800483c:	08024950 	.word	0x08024950
 8004840:	08023e9c 	.word	0x08023e9c

08004844 <CMD_Cm4Ena>:

static void CMD_Cm4Ena(EmbeddedCli *cli, char *args, void *context) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
    GPIO_SetHigh(CM4_ENA_Port, CM4_ENA_Pin);
 8004850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004854:	4807      	ldr	r0, [pc, #28]	@ (8004874 <CMD_Cm4Ena+0x30>)
 8004856:	f7fe fc81 	bl	800315c <LL_GPIO_SetOutputPin>
    embeddedCliPrint(cli, "CM4 power enabled (enable driven high).");
 800485a:	4907      	ldr	r1, [pc, #28]	@ (8004878 <CMD_Cm4Ena+0x34>)
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 fe27 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8004862:	4906      	ldr	r1, [pc, #24]	@ (800487c <CMD_Cm4Ena+0x38>)
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fe23 	bl	80054b0 <embeddedCliPrint>
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	58021800 	.word	0x58021800
 8004878:	08024978 	.word	0x08024978
 800487c:	08023e9c 	.word	0x08023e9c

08004880 <CMD_ExpForward>:

static void CMD_ExpForward(EmbeddedCli *cli, char *args, void *context) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
    const char *param = embeddedCliGetToken(args, 1);
 800488c:	2101      	movs	r1, #1
 800488e:	68b8      	ldr	r0, [r7, #8]
 8004890:	f000 fed0 	bl	8005634 <embeddedCliGetToken>
 8004894:	6178      	str	r0, [r7, #20]
    if (param == NULL) {
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d104      	bne.n	80048a6 <CMD_ExpForward+0x26>
        embeddedCliPrint(cli, "Usage: exp_forward <cm4|usb|normal>");
 800489c:	491e      	ldr	r1, [pc, #120]	@ (8004918 <CMD_ExpForward+0x98>)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fe06 	bl	80054b0 <embeddedCliPrint>
        return;
 80048a4:	e035      	b.n	8004912 <CMD_ExpForward+0x92>
    }

    if (strcmp(param, "cm4") == 0) {
 80048a6:	491d      	ldr	r1, [pc, #116]	@ (800491c <CMD_ExpForward+0x9c>)
 80048a8:	6978      	ldr	r0, [r7, #20]
 80048aa:	f7fb fd19 	bl	80002e0 <strcmp>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <CMD_ExpForward+0x44>
        embeddedCliPrint(cli, "Forward mode enabled: CM4 <-> EXP forwarding.");
 80048b4:	491a      	ldr	r1, [pc, #104]	@ (8004920 <CMD_ExpForward+0xa0>)
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fdfa 	bl	80054b0 <embeddedCliPrint>
        ForwardMode_Set(FORWARD_MODE_UART);
 80048bc:	2001      	movs	r0, #1
 80048be:	f7fc f961 	bl	8000b84 <ForwardMode_Set>
 80048c2:	e022      	b.n	800490a <CMD_ExpForward+0x8a>
    } else if (strcmp(param, "usb") == 0) {
 80048c4:	4917      	ldr	r1, [pc, #92]	@ (8004924 <CMD_ExpForward+0xa4>)
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	f7fb fd0a 	bl	80002e0 <strcmp>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d107      	bne.n	80048e2 <CMD_ExpForward+0x62>
        embeddedCliPrint(cli, "Forward mode enabled: CDC <-> EXP forwarding.");
 80048d2:	4915      	ldr	r1, [pc, #84]	@ (8004928 <CMD_ExpForward+0xa8>)
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 fdeb 	bl	80054b0 <embeddedCliPrint>
        ForwardMode_Set(FORWARD_MODE_USB);
 80048da:	2002      	movs	r0, #2
 80048dc:	f7fc f952 	bl	8000b84 <ForwardMode_Set>
 80048e0:	e013      	b.n	800490a <CMD_ExpForward+0x8a>
    } else if (strcmp(param, "normal") == 0) {
 80048e2:	4912      	ldr	r1, [pc, #72]	@ (800492c <CMD_ExpForward+0xac>)
 80048e4:	6978      	ldr	r0, [r7, #20]
 80048e6:	f7fb fcfb 	bl	80002e0 <strcmp>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d107      	bne.n	8004900 <CMD_ExpForward+0x80>
        embeddedCliPrint(cli, "Forward mode disabled. Operating in NORMAL mode.");
 80048f0:	490f      	ldr	r1, [pc, #60]	@ (8004930 <CMD_ExpForward+0xb0>)
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fddc 	bl	80054b0 <embeddedCliPrint>
        ForwardMode_Set(FORWARD_MODE_NORMAL);
 80048f8:	2000      	movs	r0, #0
 80048fa:	f7fc f943 	bl	8000b84 <ForwardMode_Set>
 80048fe:	e004      	b.n	800490a <CMD_ExpForward+0x8a>
    } else {
        embeddedCliPrint(cli, "Invalid parameter. Usage: exp_forward <cm4|usb|normal>");
 8004900:	490c      	ldr	r1, [pc, #48]	@ (8004934 <CMD_ExpForward+0xb4>)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fdd4 	bl	80054b0 <embeddedCliPrint>
        return;
 8004908:	e003      	b.n	8004912 <CMD_ExpForward+0x92>
    }

    embeddedCliPrint(cli, "");
 800490a:	490b      	ldr	r1, [pc, #44]	@ (8004938 <CMD_ExpForward+0xb8>)
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fdcf 	bl	80054b0 <embeddedCliPrint>
}
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	080249a0 	.word	0x080249a0
 800491c:	080249c4 	.word	0x080249c4
 8004920:	080249c8 	.word	0x080249c8
 8004924:	080249f8 	.word	0x080249f8
 8004928:	080249fc 	.word	0x080249fc
 800492c:	08024a2c 	.word	0x08024a2c
 8004930:	08024a34 	.word	0x08024a34
 8004934:	08024a68 	.word	0x08024a68
 8004938:	08023e9c 	.word	0x08023e9c

0800493c <CMD_ExpListen>:

static void CMD_ExpListen(EmbeddedCli *cli, char *args, void *context) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
    const char *param = embeddedCliGetToken(args, 1);
 8004948:	2101      	movs	r1, #1
 800494a:	68b8      	ldr	r0, [r7, #8]
 800494c:	f000 fe72 	bl	8005634 <embeddedCliGetToken>
 8004950:	6178      	str	r0, [r7, #20]
    if (param == NULL) {
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <CMD_ExpListen+0x26>
        embeddedCliPrint(cli, "Usage: exp_listen <cm4|usb|off>");
 8004958:	491e      	ldr	r1, [pc, #120]	@ (80049d4 <CMD_ExpListen+0x98>)
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fda8 	bl	80054b0 <embeddedCliPrint>
        return;
 8004960:	e034      	b.n	80049cc <CMD_ExpListen+0x90>
    }

    if (strcmp(param, "cm4") == 0) {
 8004962:	491d      	ldr	r1, [pc, #116]	@ (80049d8 <CMD_ExpListen+0x9c>)
 8004964:	6978      	ldr	r0, [r7, #20]
 8004966:	f7fb fcbb 	bl	80002e0 <strcmp>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d107      	bne.n	8004980 <CMD_ExpListen+0x44>
        ForwardMode_Set(FORWARD_MODE_LISTEN_CM4);
 8004970:	2003      	movs	r0, #3
 8004972:	f7fc f907 	bl	8000b84 <ForwardMode_Set>
        embeddedCliPrint(cli, "Listen mode enabled: EXP data from UART7 will be sent to UART_DEBUG.");
 8004976:	4919      	ldr	r1, [pc, #100]	@ (80049dc <CMD_ExpListen+0xa0>)
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fd99 	bl	80054b0 <embeddedCliPrint>
 800497e:	e021      	b.n	80049c4 <CMD_ExpListen+0x88>
    } else if (strcmp(param, "usb") == 0) {
 8004980:	4917      	ldr	r1, [pc, #92]	@ (80049e0 <CMD_ExpListen+0xa4>)
 8004982:	6978      	ldr	r0, [r7, #20]
 8004984:	f7fb fcac 	bl	80002e0 <strcmp>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d107      	bne.n	800499e <CMD_ExpListen+0x62>
        ForwardMode_Set(FORWARD_MODE_LISTEN_USB);
 800498e:	2004      	movs	r0, #4
 8004990:	f7fc f8f8 	bl	8000b84 <ForwardMode_Set>
        embeddedCliPrint(cli, "Listen mode enabled: EXP data from UART7 will be sent to CDC.");
 8004994:	4913      	ldr	r1, [pc, #76]	@ (80049e4 <CMD_ExpListen+0xa8>)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fd8a 	bl	80054b0 <embeddedCliPrint>
 800499c:	e012      	b.n	80049c4 <CMD_ExpListen+0x88>
    } else if (strcmp(param, "off") == 0) {
 800499e:	4912      	ldr	r1, [pc, #72]	@ (80049e8 <CMD_ExpListen+0xac>)
 80049a0:	6978      	ldr	r0, [r7, #20]
 80049a2:	f7fb fc9d 	bl	80002e0 <strcmp>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <CMD_ExpListen+0x80>
        ForwardMode_Set(FORWARD_MODE_NORMAL);
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7fc f8e9 	bl	8000b84 <ForwardMode_Set>
        embeddedCliPrint(cli, "Listen mode disabled. Operating in NORMAL mode.");
 80049b2:	490e      	ldr	r1, [pc, #56]	@ (80049ec <CMD_ExpListen+0xb0>)
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fd7b 	bl	80054b0 <embeddedCliPrint>
 80049ba:	e003      	b.n	80049c4 <CMD_ExpListen+0x88>
    } else {
        embeddedCliPrint(cli, "Invalid parameter. Usage: exp_listen <cm4|usb|off>");
 80049bc:	490c      	ldr	r1, [pc, #48]	@ (80049f0 <CMD_ExpListen+0xb4>)
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fd76 	bl	80054b0 <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 80049c4:	490b      	ldr	r1, [pc, #44]	@ (80049f4 <CMD_ExpListen+0xb8>)
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fd72 	bl	80054b0 <embeddedCliPrint>
}
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	08024aa0 	.word	0x08024aa0
 80049d8:	080249c4 	.word	0x080249c4
 80049dc:	08024ac0 	.word	0x08024ac0
 80049e0:	080249f8 	.word	0x080249f8
 80049e4:	08024b08 	.word	0x08024b08
 80049e8:	08024b48 	.word	0x08024b48
 80049ec:	08024b4c 	.word	0x08024b4c
 80049f0:	08024b7c 	.word	0x08024b7c
 80049f4:	08023e9c 	.word	0x08023e9c

080049f8 <CMD_ExpSend>:

static void CMD_ExpSend(EmbeddedCli *cli, char *args, void *context) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
    const char *msg = embeddedCliGetToken(args, 1);
 8004a04:	2101      	movs	r1, #1
 8004a06:	68b8      	ldr	r0, [r7, #8]
 8004a08:	f000 fe14 	bl	8005634 <embeddedCliGetToken>
 8004a0c:	61b8      	str	r0, [r7, #24]
    if (msg == NULL) {
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <CMD_ExpSend+0x26>
        embeddedCliPrint(cli, "Usage: exp_send \"message\"");
 8004a14:	4916      	ldr	r1, [pc, #88]	@ (8004a70 <CMD_ExpSend+0x78>)
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fd4a 	bl	80054b0 <embeddedCliPrint>
        return;
 8004a1c:	e025      	b.n	8004a6a <CMD_ExpSend+0x72>
    }
    size_t len = strlen(msg);
 8004a1e:	69b8      	ldr	r0, [r7, #24]
 8004a20:	f7fb fc68 	bl	80002f4 <strlen>
 8004a24:	6178      	str	r0, [r7, #20]
    UART_Driver_Write(UART_EXP, '\r');
 8004a26:	210d      	movs	r1, #13
 8004a28:	4812      	ldr	r0, [pc, #72]	@ (8004a74 <CMD_ExpSend+0x7c>)
 8004a2a:	f7fd fe1d 	bl	8002668 <UART_Driver_Write>
    for (size_t i = 0; i < len; i++) {
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
 8004a32:	e00a      	b.n	8004a4a <CMD_ExpSend+0x52>
        UART_Driver_Write(UART_EXP, (uint8_t)msg[i]);
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	480d      	ldr	r0, [pc, #52]	@ (8004a74 <CMD_ExpSend+0x7c>)
 8004a40:	f7fd fe12 	bl	8002668 <UART_Driver_Write>
    for (size_t i = 0; i < len; i++) {
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	3301      	adds	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3f0      	bcc.n	8004a34 <CMD_ExpSend+0x3c>
    }
    UART_Driver_Write(UART_EXP, '\r');
 8004a52:	210d      	movs	r1, #13
 8004a54:	4807      	ldr	r0, [pc, #28]	@ (8004a74 <CMD_ExpSend+0x7c>)
 8004a56:	f7fd fe07 	bl	8002668 <UART_Driver_Write>
    embeddedCliPrint(cli, "Message sent to EXP via UART7.");
 8004a5a:	4907      	ldr	r1, [pc, #28]	@ (8004a78 <CMD_ExpSend+0x80>)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fd27 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8004a62:	4906      	ldr	r1, [pc, #24]	@ (8004a7c <CMD_ExpSend+0x84>)
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 fd23 	bl	80054b0 <embeddedCliPrint>
}
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	08024bb0 	.word	0x08024bb0
 8004a74:	40007800 	.word	0x40007800
 8004a78:	08024bcc 	.word	0x08024bcc
 8004a7c:	08023e9c 	.word	0x08023e9c

08004a80 <callback_every>:

void callback_every(void *context) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = (EmbeddedCli *)context;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]
    embeddedCliPrint(cli, "Callback Every");
 8004a8c:	4903      	ldr	r1, [pc, #12]	@ (8004a9c <callback_every+0x1c>)
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 fd0e 	bl	80054b0 <embeddedCliPrint>
}
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	08024bec 	.word	0x08024bec

08004aa0 <callback_moment>:

void callback_moment(void *context) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = (EmbeddedCli *)context;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60fb      	str	r3, [r7, #12]
    embeddedCliPrint(cli, "Callback Moment");
 8004aac:	4903      	ldr	r1, [pc, #12]	@ (8004abc <callback_moment+0x1c>)
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fcfe 	bl	80054b0 <embeddedCliPrint>
}
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	08024bfc 	.word	0x08024bfc

08004ac0 <callback_countdown>:

void callback_countdown(void *context) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = (EmbeddedCli *)context;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60fb      	str	r3, [r7, #12]
    embeddedCliPrint(cli, "Callback Countdown");
 8004acc:	4903      	ldr	r1, [pc, #12]	@ (8004adc <callback_countdown+0x1c>)
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fcee 	bl	80054b0 <embeddedCliPrint>
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	08024c0c 	.word	0x08024c0c

08004ae0 <CMD_AliveCheck>:

static void CMD_AliveCheck(EmbeddedCli *cli, char *args, void *context) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af04      	add	r7, sp, #16
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
	Utils_Cronjob_SetEvery(EVERY_SECOND, 10, 0, callback_every, cli, 0);
 8004aec:	2300      	movs	r3, #0
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4b16      	ldr	r3, [pc, #88]	@ (8004b50 <CMD_AliveCheck+0x70>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	210a      	movs	r1, #10
 8004afa:	2002      	movs	r0, #2
 8004afc:	f005 fc6e 	bl	800a3dc <Utils_Cronjob_SetEvery>
	Utils_Cronjob_SetMoment(10, 20, 30, 0, callback_moment, cli, 1);
 8004b00:	2301      	movs	r3, #1
 8004b02:	9302      	str	r3, [sp, #8]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	4b12      	ldr	r3, [pc, #72]	@ (8004b54 <CMD_AliveCheck+0x74>)
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	221e      	movs	r2, #30
 8004b10:	2114      	movs	r1, #20
 8004b12:	200a      	movs	r0, #10
 8004b14:	f005 fbc2 	bl	800a29c <Utils_Cronjob_SetMoment>
	Utils_Cronjob_SetCountdown(20, 0, callback_countdown, cli, 2);
 8004b18:	2302      	movs	r3, #2
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004b58 <CMD_AliveCheck+0x78>)
 8004b20:	2100      	movs	r1, #0
 8004b22:	2014      	movs	r0, #20
 8004b24:	f005 fc10 	bl	800a348 <Utils_Cronjob_SetCountdown>

    embeddedCliPrint(cli, "Hello from OBC-STM32. Status: OK");
 8004b28:	490c      	ldr	r1, [pc, #48]	@ (8004b5c <CMD_AliveCheck+0x7c>)
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fcc0 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "Sparrow call Eagle. Code: OK");
 8004b30:	490b      	ldr	r1, [pc, #44]	@ (8004b60 <CMD_AliveCheck+0x80>)
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fcbc 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "Eagle clear, end. Code: OK");
 8004b38:	490a      	ldr	r1, [pc, #40]	@ (8004b64 <CMD_AliveCheck+0x84>)
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fcb8 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8004b40:	4909      	ldr	r1, [pc, #36]	@ (8004b68 <CMD_AliveCheck+0x88>)
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fcb4 	bl	80054b0 <embeddedCliPrint>
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	08004a81 	.word	0x08004a81
 8004b54:	08004aa1 	.word	0x08004aa1
 8004b58:	08004ac1 	.word	0x08004ac1
 8004b5c:	08024c20 	.word	0x08024c20
 8004b60:	08024c44 	.word	0x08024c44
 8004b64:	08024c64 	.word	0x08024c64
 8004b68:	08023e9c 	.word	0x08023e9c

08004b6c <CMD_RtosCheck>:

static void CMD_RtosCheck(EmbeddedCli *cli, char *args, void *context) {
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	f2ad 4d0c 	subw	sp, sp, #1036	@ 0x40c
 8004b72:	af04      	add	r7, sp, #16
 8004b74:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004b78:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004b7c:	6018      	str	r0, [r3, #0]
 8004b7e:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004b82:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 8004b86:	6019      	str	r1, [r3, #0]
 8004b88:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004b8c:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8004b90:	601a      	str	r2, [r3, #0]
    TaskStatus_t taskStatusArray[20];
    UBaseType_t arraySize = 20;
 8004b92:	2314      	movs	r3, #20
 8004b94:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    UBaseType_t totalTasks;
    char buffer[256];

    UBaseType_t numTasks = uxTaskGetNumberOfTasks();
 8004b98:	f00d faee 	bl	8012178 <uxTaskGetNumberOfTasks>
 8004b9c:	f8c7 03e8 	str.w	r0, [r7, #1000]	@ 0x3e8
        snprintf(buffer, sizeof(buffer), "Number of tasks running: %lu", (unsigned long)numTasks);
 8004ba0:	f107 0014 	add.w	r0, r7, #20
 8004ba4:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8004ba8:	4a73      	ldr	r2, [pc, #460]	@ (8004d78 <CMD_RtosCheck+0x20c>)
 8004baa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004bae:	f01d f931 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004bb2:	f107 0214 	add.w	r2, r7, #20
 8004bb6:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004bba:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	f000 fc75 	bl	80054b0 <embeddedCliPrint>

    totalTasks = uxTaskGetSystemState(taskStatusArray, arraySize, NULL);
 8004bc6:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f00d fadd 	bl	8012190 <uxTaskGetSystemState>
 8004bd6:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4

    if (totalTasks == 0) {
 8004bda:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d110      	bne.n	8004c04 <CMD_RtosCheck+0x98>
        embeddedCliPrint(cli, "No tasks found or error occurred.");
 8004be2:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004be6:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004bea:	4964      	ldr	r1, [pc, #400]	@ (8004d7c <CMD_RtosCheck+0x210>)
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	f000 fc5f 	bl	80054b0 <embeddedCliPrint>
        embeddedCliPrint(cli, "");
 8004bf2:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004bf6:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004bfa:	4961      	ldr	r1, [pc, #388]	@ (8004d80 <CMD_RtosCheck+0x214>)
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	f000 fc57 	bl	80054b0 <embeddedCliPrint>
 8004c02:	e0b4      	b.n	8004d6e <CMD_RtosCheck+0x202>
        return;
    }

    snprintf(buffer, sizeof(buffer), "Total Tasks: %lu", (unsigned long)totalTasks);
 8004c04:	f107 0014 	add.w	r0, r7, #20
 8004c08:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8004c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8004d84 <CMD_RtosCheck+0x218>)
 8004c0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c12:	f01d f8ff 	bl	8021e14 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8004c16:	f107 0214 	add.w	r2, r7, #20
 8004c1a:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004c1e:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004c22:	4611      	mov	r1, r2
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	f000 fc43 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "Task Name          State     Prio  Stack Left");
 8004c2a:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004c2e:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004c32:	4955      	ldr	r1, [pc, #340]	@ (8004d88 <CMD_RtosCheck+0x21c>)
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	f000 fc3b 	bl	80054b0 <embeddedCliPrint>
    embeddedCliPrint(cli, "----------------------------------------");
 8004c3a:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004c3e:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004c42:	4952      	ldr	r1, [pc, #328]	@ (8004d8c <CMD_RtosCheck+0x220>)
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	f000 fc33 	bl	80054b0 <embeddedCliPrint>

	for (UBaseType_t i = 0; i < totalTasks; i++) {
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8004c50:	e077      	b.n	8004d42 <CMD_RtosCheck+0x1d6>
		const char *stateStr;
		switch (taskStatusArray[i].eCurrentState) {
 8004c52:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004c56:	f5a3 7139 	sub.w	r1, r3, #740	@ 0x2e4
 8004c5a:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	@ 0x3f4
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	330c      	adds	r3, #12
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d821      	bhi.n	8004cb4 <CMD_RtosCheck+0x148>
 8004c70:	a201      	add	r2, pc, #4	@ (adr r2, 8004c78 <CMD_RtosCheck+0x10c>)
 8004c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c76:	bf00      	nop
 8004c78:	08004c8d 	.word	0x08004c8d
 8004c7c:	08004c95 	.word	0x08004c95
 8004c80:	08004c9d 	.word	0x08004c9d
 8004c84:	08004ca5 	.word	0x08004ca5
 8004c88:	08004cad 	.word	0x08004cad
		case eRunning:
			stateStr = "Running";
 8004c8c:	4b40      	ldr	r3, [pc, #256]	@ (8004d90 <CMD_RtosCheck+0x224>)
 8004c8e:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004c92:	e013      	b.n	8004cbc <CMD_RtosCheck+0x150>
		case eReady:
			stateStr = "Ready";
 8004c94:	4b3f      	ldr	r3, [pc, #252]	@ (8004d94 <CMD_RtosCheck+0x228>)
 8004c96:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004c9a:	e00f      	b.n	8004cbc <CMD_RtosCheck+0x150>
		case eBlocked:
			stateStr = "Blocked";
 8004c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004d98 <CMD_RtosCheck+0x22c>)
 8004c9e:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004ca2:	e00b      	b.n	8004cbc <CMD_RtosCheck+0x150>
		case eSuspended:
			stateStr = "Suspend";
 8004ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8004d9c <CMD_RtosCheck+0x230>)
 8004ca6:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004caa:	e007      	b.n	8004cbc <CMD_RtosCheck+0x150>
		case eDeleted:
			stateStr = "Deleted";
 8004cac:	4b3c      	ldr	r3, [pc, #240]	@ (8004da0 <CMD_RtosCheck+0x234>)
 8004cae:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004cb2:	e003      	b.n	8004cbc <CMD_RtosCheck+0x150>
		default:
			stateStr = "Unknown";
 8004cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8004da4 <CMD_RtosCheck+0x238>)
 8004cb6:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
			break;
 8004cba:	bf00      	nop
		}

		snprintf(buffer, sizeof(buffer), "%-18s %-10s %-4lu %10lu",
 8004cbc:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004cc0:	f5a3 7139 	sub.w	r1, r3, #740	@ 0x2e4
 8004cc4:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	@ 0x3f4
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	681c      	ldr	r4, [r3, #0]
 8004cd6:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004cda:	f5a3 7139 	sub.w	r1, r3, #740	@ 0x2e4
 8004cde:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	@ 0x3f4
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	3310      	adds	r3, #16
 8004cee:	6819      	ldr	r1, [r3, #0]
 8004cf0:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004cf4:	f5a3 7039 	sub.w	r0, r3, #740	@ 0x2e4
 8004cf8:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	@ 0x3f4
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4403      	add	r3, r0
 8004d06:	3320      	adds	r3, #32
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f107 0014 	add.w	r0, r7, #20
 8004d0e:	9302      	str	r3, [sp, #8]
 8004d10:	9101      	str	r1, [sp, #4]
 8004d12:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4623      	mov	r3, r4
 8004d1a:	4a23      	ldr	r2, [pc, #140]	@ (8004da8 <CMD_RtosCheck+0x23c>)
 8004d1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d20:	f01d f878 	bl	8021e14 <sniprintf>
				taskStatusArray[i].pcTaskName, stateStr,
				taskStatusArray[i].uxCurrentPriority,
				taskStatusArray[i].usStackHighWaterMark);
		embeddedCliPrint(cli, buffer);
 8004d24:	f107 0214 	add.w	r2, r7, #20
 8004d28:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004d2c:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004d30:	4611      	mov	r1, r2
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	f000 fbbc 	bl	80054b0 <embeddedCliPrint>
	for (UBaseType_t i = 0; i < totalTasks; i++) {
 8004d38:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8004d42:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	@ 0x3f4
 8004d46:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d381      	bcc.n	8004c52 <CMD_RtosCheck+0xe6>
	}

	embeddedCliPrint(cli, "----------------------------------------");
 8004d4e:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004d52:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004d56:	490d      	ldr	r1, [pc, #52]	@ (8004d8c <CMD_RtosCheck+0x220>)
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	f000 fba9 	bl	80054b0 <embeddedCliPrint>
	embeddedCliPrint(cli, "");
 8004d5e:	f507 737e 	add.w	r3, r7, #1016	@ 0x3f8
 8004d62:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8004d66:	4906      	ldr	r1, [pc, #24]	@ (8004d80 <CMD_RtosCheck+0x214>)
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	f000 fba1 	bl	80054b0 <embeddedCliPrint>
}
 8004d6e:	f507 777f 	add.w	r7, r7, #1020	@ 0x3fc
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd90      	pop	{r4, r7, pc}
 8004d76:	bf00      	nop
 8004d78:	08024c80 	.word	0x08024c80
 8004d7c:	08024ca0 	.word	0x08024ca0
 8004d80:	08023e9c 	.word	0x08023e9c
 8004d84:	08024cc4 	.word	0x08024cc4
 8004d88:	08024cd8 	.word	0x08024cd8
 8004d8c:	08024d08 	.word	0x08024d08
 8004d90:	08024d34 	.word	0x08024d34
 8004d94:	08024d3c 	.word	0x08024d3c
 8004d98:	08024d44 	.word	0x08024d44
 8004d9c:	08024d4c 	.word	0x08024d4c
 8004da0:	08024d54 	.word	0x08024d54
 8004da4:	08024d5c 	.word	0x08024d5c
 8004da8:	08024d64 	.word	0x08024d64

08004dac <LogoutTimerCallback>:

static TimerHandle_t logoutTimer = NULL;
static void LogoutTimerCallback(TimerHandle_t xTimer) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
    Shield_Reset(&auth_usb);
 8004db4:	4803      	ldr	r0, [pc, #12]	@ (8004dc4 <LogoutTimerCallback+0x18>)
 8004db6:	f7fd ff63 	bl	8002c80 <Shield_Reset>
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	24014a70 	.word	0x24014a70

08004dc8 <CMD_LogOut>:
static void CMD_LogOut(EmbeddedCli *cli, char *args, void *context) {
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
    embeddedCliPrint(cli, "Logging out...");
 8004dd4:	4913      	ldr	r1, [pc, #76]	@ (8004e24 <CMD_LogOut+0x5c>)
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fb6a 	bl	80054b0 <embeddedCliPrint>
    if (logoutTimer == NULL) {
 8004ddc:	4b12      	ldr	r3, [pc, #72]	@ (8004e28 <CMD_LogOut+0x60>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <CMD_LogOut+0x32>
        logoutTimer = xTimerCreate("LogoutTimer", pdMS_TO_TICKS(100), pdFALSE, NULL, LogoutTimerCallback);
 8004de4:	4b11      	ldr	r3, [pc, #68]	@ (8004e2c <CMD_LogOut+0x64>)
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	2300      	movs	r3, #0
 8004dea:	2200      	movs	r2, #0
 8004dec:	2164      	movs	r1, #100	@ 0x64
 8004dee:	4810      	ldr	r0, [pc, #64]	@ (8004e30 <CMD_LogOut+0x68>)
 8004df0:	f00e fc3a 	bl	8013668 <xTimerCreate>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a0c      	ldr	r2, [pc, #48]	@ (8004e28 <CMD_LogOut+0x60>)
 8004df8:	6013      	str	r3, [r2, #0]
    }
    if (logoutTimer != NULL) {
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004e28 <CMD_LogOut+0x60>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <CMD_LogOut+0x52>
        xTimerStart(logoutTimer, 0);
 8004e02:	4b09      	ldr	r3, [pc, #36]	@ (8004e28 <CMD_LogOut+0x60>)
 8004e04:	681c      	ldr	r4, [r3, #0]
 8004e06:	f00d f9a7 	bl	8012158 <xTaskGetTickCount>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2300      	movs	r3, #0
 8004e12:	2101      	movs	r1, #1
 8004e14:	4620      	mov	r0, r4
 8004e16:	f00e fc83 	bl	8013720 <xTimerGenericCommandFromTask>
    }
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	08024d7c 	.word	0x08024d7c
 8004e28:	24018344 	.word	0x24018344
 8004e2c:	08004dad 	.word	0x08004dad
 8004e30:	08024d8c 	.word	0x08024d8c

08004e34 <CMD_PwdChange>:

static void CMD_PwdChange(EmbeddedCli *cli, char *args, void *context) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	@ 0x28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
    const char *new_password = embeddedCliGetToken(args, 1);
 8004e40:	2101      	movs	r1, #1
 8004e42:	68b8      	ldr	r0, [r7, #8]
 8004e44:	f000 fbf6 	bl	8005634 <embeddedCliGetToken>
 8004e48:	6278      	str	r0, [r7, #36]	@ 0x24
    if (new_password == NULL) {
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <CMD_PwdChange+0x26>
        embeddedCliPrint(cli, "Usage: pwd_change <new_password>");
 8004e50:	4929      	ldr	r1, [pc, #164]	@ (8004ef8 <CMD_PwdChange+0xc4>)
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fb2c 	bl	80054b0 <embeddedCliPrint>
        return;
 8004e58:	e04a      	b.n	8004ef0 <CMD_PwdChange+0xbc>
    }

	ShieldAuthState_t auth_state;
	auth_state = Shield_GetState(&auth_usb);
 8004e5a:	4828      	ldr	r0, [pc, #160]	@ (8004efc <CMD_PwdChange+0xc8>)
 8004e5c:	f7fe f95a 	bl	8003114 <Shield_GetState>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (auth_state == AUTH_ADMIN) {
 8004e66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d13b      	bne.n	8004ee6 <CMD_PwdChange+0xb2>
    	size_t pwd_len = strlen(new_password);
 8004e6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e70:	f7fb fa40 	bl	80002f4 <strlen>
 8004e74:	61f8      	str	r0, [r7, #28]
        if (pwd_len > MAX_PASSWORD_LEN) {
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d904      	bls.n	8004e86 <CMD_PwdChange+0x52>
        	embeddedCliPrint(cli, "Password too long (max 16 characters).");
 8004e7c:	4920      	ldr	r1, [pc, #128]	@ (8004f00 <CMD_PwdChange+0xcc>)
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fb16 	bl	80054b0 <embeddedCliPrint>
            return;
 8004e84:	e034      	b.n	8004ef0 <CMD_PwdChange+0xbc>
        }
        FRAM_SPI_HandleTypeDef *hfram = FRAM_SPI_GetHandle();
 8004e86:	f003 fe0d 	bl	8008aa4 <FRAM_SPI_GetHandle>
 8004e8a:	61b8      	str	r0, [r7, #24]
        uint8_t len = (uint8_t)pwd_len;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	75fb      	strb	r3, [r7, #23]
        if (FRAM_SPI_WriteMem(hfram, FRAM_USER_PWD_LEN_ADDR, &len, 1) != E_OK) {
 8004e92:	f107 0217 	add.w	r2, r7, #23
 8004e96:	2301      	movs	r3, #1
 8004e98:	2100      	movs	r1, #0
 8004e9a:	69b8      	ldr	r0, [r7, #24]
 8004e9c:	f003 fe6a 	bl	8008b74 <FRAM_SPI_WriteMem>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d004      	beq.n	8004eb0 <CMD_PwdChange+0x7c>
        	embeddedCliPrint(cli, "Failed to write password length to FRAM.\r\n");
 8004ea6:	4917      	ldr	r1, [pc, #92]	@ (8004f04 <CMD_PwdChange+0xd0>)
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fb01 	bl	80054b0 <embeddedCliPrint>
            return;
 8004eae:	e01f      	b.n	8004ef0 <CMD_PwdChange+0xbc>
        }
        if (pwd_len > 0) {
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00e      	beq.n	8004ed4 <CMD_PwdChange+0xa0>
            if (FRAM_SPI_WriteMem(hfram, FRAM_USER_PWD_ADDR, (uint8_t *)new_password, pwd_len) != E_OK) {
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	69b8      	ldr	r0, [r7, #24]
 8004ec0:	f003 fe58 	bl	8008b74 <FRAM_SPI_WriteMem>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <CMD_PwdChange+0xa0>
            	embeddedCliPrint(cli, "Failed to write password to FRAM.\r\n");
 8004eca:	490f      	ldr	r1, [pc, #60]	@ (8004f08 <CMD_PwdChange+0xd4>)
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 faef 	bl	80054b0 <embeddedCliPrint>
                return;
 8004ed2:	e00d      	b.n	8004ef0 <CMD_PwdChange+0xbc>
            }
        }
        embeddedCliPrint(cli, "User password updated successfully.");
 8004ed4:	490d      	ldr	r1, [pc, #52]	@ (8004f0c <CMD_PwdChange+0xd8>)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 faea 	bl	80054b0 <embeddedCliPrint>
    } else {
        embeddedCliPrint(cli, "Must be logged in as admin to change password.");
        return;
    }
    embeddedCliPrint(cli, "");
 8004edc:	490c      	ldr	r1, [pc, #48]	@ (8004f10 <CMD_PwdChange+0xdc>)
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 fae6 	bl	80054b0 <embeddedCliPrint>
 8004ee4:	e004      	b.n	8004ef0 <CMD_PwdChange+0xbc>
        embeddedCliPrint(cli, "Must be logged in as admin to change password.");
 8004ee6:	490b      	ldr	r1, [pc, #44]	@ (8004f14 <CMD_PwdChange+0xe0>)
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fae1 	bl	80054b0 <embeddedCliPrint>
        return;
 8004eee:	bf00      	nop
}
 8004ef0:	3728      	adds	r7, #40	@ 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	08024d98 	.word	0x08024d98
 8004efc:	24014a70 	.word	0x24014a70
 8004f00:	08024dbc 	.word	0x08024dbc
 8004f04:	08024de4 	.word	0x08024de4
 8004f08:	08024e10 	.word	0x08024e10
 8004f0c:	08024e34 	.word	0x08024e34
 8004f10:	08023e9c 	.word	0x08023e9c
 8004f14:	08024e58 	.word	0x08024e58

08004f18 <CMD_Dmesg>:

static void CMD_Dmesg(EmbeddedCli *cli, char *args, void *context) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b096      	sub	sp, #88	@ 0x58
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 8004f24:	2101      	movs	r1, #1
 8004f26:	68b8      	ldr	r0, [r7, #8]
 8004f28:	f000 fb84 	bl	8005634 <embeddedCliGetToken>
 8004f2c:	6578      	str	r0, [r7, #84]	@ 0x54
    char buffer[64];
    embeddedCliPrint(cli, "Dmesg - Logger Message:");
 8004f2e:	4919      	ldr	r1, [pc, #100]	@ (8004f94 <CMD_Dmesg+0x7c>)
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fabd 	bl	80054b0 <embeddedCliPrint>

    if (arg1 == NULL) {
 8004f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <CMD_Dmesg+0x3c>
        embeddedCliPrint(cli, "--> Oldest >>");
 8004f3c:	4916      	ldr	r1, [pc, #88]	@ (8004f98 <CMD_Dmesg+0x80>)
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 fab6 	bl	80054b0 <embeddedCliPrint>
        Dmesg_GetLogs(cli);
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f002 f86b 	bl	8007020 <Dmesg_GetLogs>
        embeddedCliPrint(cli, "--> Latest <<");
 8004f4a:	4914      	ldr	r1, [pc, #80]	@ (8004f9c <CMD_Dmesg+0x84>)
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 faaf 	bl	80054b0 <embeddedCliPrint>
 8004f52:	e016      	b.n	8004f82 <CMD_Dmesg+0x6a>
    } else {
        size_t N = (size_t)strtoul(arg1, NULL, 10);
 8004f54:	220a      	movs	r2, #10
 8004f56:	2100      	movs	r1, #0
 8004f58:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004f5a:	f01c fe8f 	bl	8021c7c <strtoul>
 8004f5e:	6538      	str	r0, [r7, #80]	@ 0x50
        snprintf(buffer, sizeof(buffer), "Latest %lu Logs:", (unsigned long)N);
 8004f60:	f107 0010 	add.w	r0, r7, #16
 8004f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f66:	4a0e      	ldr	r2, [pc, #56]	@ (8004fa0 <CMD_Dmesg+0x88>)
 8004f68:	2140      	movs	r1, #64	@ 0x40
 8004f6a:	f01c ff53 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8004f6e:	f107 0310 	add.w	r3, r7, #16
 8004f72:	4619      	mov	r1, r3
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fa9b 	bl	80054b0 <embeddedCliPrint>
        Dmesg_GetLatestN(N, cli);
 8004f7a:	68f9      	ldr	r1, [r7, #12]
 8004f7c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004f7e:	f002 f883 	bl	8007088 <Dmesg_GetLatestN>
    }

    embeddedCliPrint(cli, "");
 8004f82:	4908      	ldr	r1, [pc, #32]	@ (8004fa4 <CMD_Dmesg+0x8c>)
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fa93 	bl	80054b0 <embeddedCliPrint>
}
 8004f8a:	bf00      	nop
 8004f8c:	3758      	adds	r7, #88	@ 0x58
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	08024e88 	.word	0x08024e88
 8004f98:	08024ea0 	.word	0x08024ea0
 8004f9c:	08024eb0 	.word	0x08024eb0
 8004fa0:	08024ec0 	.word	0x08024ec0
 8004fa4:	08023e9c 	.word	0x08023e9c

08004fa8 <CMD_Reset>:
static void CMD_Reset(EmbeddedCli *cli, char *args, void *context) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
	NVIC_SystemReset();
 8004fb4:	f7fe f8bc 	bl	8003130 <__NVIC_SystemReset>

08004fb8 <getCliStaticBindings>:
 *************************************************/

/*************************************************
 *                Getter - Helper                *
 *************************************************/
const CliCommandBinding *getCliStaticBindings(void) {
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
    return cliStaticBindings_internal;
 8004fbc:	4b02      	ldr	r3, [pc, #8]	@ (8004fc8 <getCliStaticBindings+0x10>)
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	08025b20 	.word	0x08025b20

08004fcc <getCliStaticBindingCount>:

uint16_t getCliStaticBindingCount(void) {
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
    return sizeof(cliStaticBindings_internal) / sizeof(cliStaticBindings_internal[0]);
 8004fd0:	2322      	movs	r3, #34	@ 0x22
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <writeCharToCli_USBCDC>:

/*************************************************
 *          Tx Transmit CLI Byte Buffer          *
 *************************************************/

static void writeCharToCli_USBCDC(EmbeddedCli *embeddedCli, char c) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
    uint8_t c_to_send = c;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	73fb      	strb	r3, [r7, #15]
    UART_Driver_Write(UART_USB, c_to_send);
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4803      	ldr	r0, [pc, #12]	@ (8005000 <writeCharToCli_USBCDC+0x24>)
 8004ff2:	f7fd fb39 	bl	8002668 <UART_Driver_Write>
}
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40011000 	.word	0x40011000

08005004 <writeCharToCli_UARTCM4>:

static void writeCharToCli_UARTCM4(EmbeddedCli *embeddedCli, char c) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
    uint8_t c_to_send = c;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	73fb      	strb	r3, [r7, #15]
    UART_Driver_Write(UART_DEBUG, c_to_send);
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	4619      	mov	r1, r3
 8005018:	4803      	ldr	r0, [pc, #12]	@ (8005028 <writeCharToCli_UARTCM4+0x24>)
 800501a:	f7fd fb25 	bl	8002668 <UART_Driver_Write>
}
 800501e:	bf00      	nop
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40004400 	.word	0x40004400

0800502c <SystemCLI_Init>:

//Call before FREERTOS be initialized
//Call After UART Driver Init (or Peripheral use CLI)

Std_ReturnType SystemCLI_Init() {
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
    // Initialize the CLI configuration settings
    // Initialize USB CDC CLI
    EmbeddedCliConfig *usbcdc_config = embeddedCliDefaultConfig();
 8005032:	f000 f89f 	bl	8005174 <embeddedCliDefaultConfig>
 8005036:	6078      	str	r0, [r7, #4]
    usbcdc_config->cliBuffer = usbcdc_cliStaticBuffer;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a39      	ldr	r2, [pc, #228]	@ (8005120 <SystemCLI_Init+0xf4>)
 800503c:	60da      	str	r2, [r3, #12]
    usbcdc_config->cliBufferSize = USBCDC_CLI_BUFFER_SIZE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005044:	821a      	strh	r2, [r3, #16]
    usbcdc_config->rxBufferSize = CLI_RX_BUFFER_SIZE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2210      	movs	r2, #16
 800504a:	809a      	strh	r2, [r3, #4]
    usbcdc_config->cmdBufferSize = CLI_CMD_BUFFER_SIZE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2240      	movs	r2, #64	@ 0x40
 8005050:	80da      	strh	r2, [r3, #6]
    usbcdc_config->historyBufferSize = CLI_HISTORY_SIZE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2280      	movs	r2, #128	@ 0x80
 8005056:	811a      	strh	r2, [r3, #8]
    usbcdc_config->maxBindingCount = CLI_MAX_BINDING_COUNT;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	815a      	strh	r2, [r3, #10]
    usbcdc_config->enableAutoComplete = CLI_AUTO_COMPLETE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	749a      	strb	r2, [r3, #18]
    usbcdc_config->invitation = CLI_INITATION_USB;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a2f      	ldr	r2, [pc, #188]	@ (8005124 <SystemCLI_Init+0xf8>)
 8005068:	601a      	str	r2, [r3, #0]
    usbcdc_config->staticBindings = getCliStaticBindings();
 800506a:	f7ff ffa5 	bl	8004fb8 <getCliStaticBindings>
 800506e:	4602      	mov	r2, r0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	615a      	str	r2, [r3, #20]
    usbcdc_config->staticBindingCount = getCliStaticBindingCount();
 8005074:	f7ff ffaa 	bl	8004fcc <getCliStaticBindingCount>
 8005078:	4603      	mov	r3, r0
 800507a:	461a      	mov	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	831a      	strh	r2, [r3, #24]

    cli_usbcdc = embeddedCliNew(usbcdc_config);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f8d2 	bl	800522a <embeddedCliNew>
 8005086:	4603      	mov	r3, r0
 8005088:	4a27      	ldr	r2, [pc, #156]	@ (8005128 <SystemCLI_Init+0xfc>)
 800508a:	6013      	str	r3, [r2, #0]
    if (cli_usbcdc == NULL) {
 800508c:	4b26      	ldr	r3, [pc, #152]	@ (8005128 <SystemCLI_Init+0xfc>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <SystemCLI_Init+0x6c>
        return E_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e03e      	b.n	8005116 <SystemCLI_Init+0xea>
    }
    cli_usbcdc->writeChar = writeCharToCli_USBCDC;
 8005098:	4b23      	ldr	r3, [pc, #140]	@ (8005128 <SystemCLI_Init+0xfc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a23      	ldr	r2, [pc, #140]	@ (800512c <SystemCLI_Init+0x100>)
 800509e:	601a      	str	r2, [r3, #0]

    // Initialize UART CM4 CLI
    EmbeddedCliConfig *uartcm4_config = embeddedCliDefaultConfig();
 80050a0:	f000 f868 	bl	8005174 <embeddedCliDefaultConfig>
 80050a4:	6038      	str	r0, [r7, #0]
    uartcm4_config->cliBuffer = uartcm4_cliStaticBuffer;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	4a21      	ldr	r2, [pc, #132]	@ (8005130 <SystemCLI_Init+0x104>)
 80050aa:	60da      	str	r2, [r3, #12]
    uartcm4_config->cliBufferSize = UARTCM4_CLI_BUFFER_SIZE;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050b2:	821a      	strh	r2, [r3, #16]
    uartcm4_config->rxBufferSize = CLI_RX_BUFFER_SIZE;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2210      	movs	r2, #16
 80050b8:	809a      	strh	r2, [r3, #4]
    uartcm4_config->cmdBufferSize = CLI_CMD_BUFFER_SIZE;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2240      	movs	r2, #64	@ 0x40
 80050be:	80da      	strh	r2, [r3, #6]
    uartcm4_config->historyBufferSize = CLI_HISTORY_SIZE;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2280      	movs	r2, #128	@ 0x80
 80050c4:	811a      	strh	r2, [r3, #8]
    uartcm4_config->maxBindingCount = CLI_MAX_BINDING_COUNT;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2220      	movs	r2, #32
 80050ca:	815a      	strh	r2, [r3, #10]
    uartcm4_config->enableAutoComplete = CLI_AUTO_COMPLETE;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2201      	movs	r2, #1
 80050d0:	749a      	strb	r2, [r3, #18]
    uartcm4_config->invitation = CLI_INITATION_CM4;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	4a17      	ldr	r2, [pc, #92]	@ (8005134 <SystemCLI_Init+0x108>)
 80050d6:	601a      	str	r2, [r3, #0]
    uartcm4_config->staticBindings = getCliStaticBindings();
 80050d8:	f7ff ff6e 	bl	8004fb8 <getCliStaticBindings>
 80050dc:	4602      	mov	r2, r0
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	615a      	str	r2, [r3, #20]
    uartcm4_config->staticBindingCount = getCliStaticBindingCount();
 80050e2:	f7ff ff73 	bl	8004fcc <getCliStaticBindingCount>
 80050e6:	4603      	mov	r3, r0
 80050e8:	461a      	mov	r2, r3
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	831a      	strh	r2, [r3, #24]

    cli_uartcm4 = embeddedCliNew(uartcm4_config);
 80050ee:	6838      	ldr	r0, [r7, #0]
 80050f0:	f000 f89b 	bl	800522a <embeddedCliNew>
 80050f4:	4603      	mov	r3, r0
 80050f6:	4a10      	ldr	r2, [pc, #64]	@ (8005138 <SystemCLI_Init+0x10c>)
 80050f8:	6013      	str	r3, [r2, #0]
    if (cli_uartcm4 == NULL) {
 80050fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005138 <SystemCLI_Init+0x10c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <SystemCLI_Init+0xda>
        return E_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e007      	b.n	8005116 <SystemCLI_Init+0xea>
    }
    cli_uartcm4->writeChar = writeCharToCli_UARTCM4;
 8005106:	4b0c      	ldr	r3, [pc, #48]	@ (8005138 <SystemCLI_Init+0x10c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a0c      	ldr	r2, [pc, #48]	@ (800513c <SystemCLI_Init+0x110>)
 800510c:	601a      	str	r2, [r3, #0]

    // Init the CLI with blank screen
//    onClearCLI(cli, NULL, NULL);

    // CLI has now been initialized, set bool to true to enable interrupts.
    cliIsReady = true;
 800510e:	4b0c      	ldr	r3, [pc, #48]	@ (8005140 <SystemCLI_Init+0x114>)
 8005110:	2201      	movs	r2, #1
 8005112:	701a      	strb	r2, [r3, #0]

    return E_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	24018348 	.word	0x24018348
 8005124:	08024ed4 	.word	0x08024ed4
 8005128:	24019348 	.word	0x24019348
 800512c:	08004fdd 	.word	0x08004fdd
 8005130:	24018b48 	.word	0x24018b48
 8005134:	08024ee8 	.word	0x08024ee8
 8005138:	2401934c 	.word	0x2401934c
 800513c:	08005005 	.word	0x08005005
 8005140:	24019350 	.word	0x24019350

08005144 <getUsbCdcCliPointer>:


/*************************************************
 *             Get CLI Pointers                  *
 *************************************************/
EmbeddedCli *getUsbCdcCliPointer() {
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
    return cli_usbcdc;
 8005148:	4b03      	ldr	r3, [pc, #12]	@ (8005158 <getUsbCdcCliPointer+0x14>)
 800514a:	681b      	ldr	r3, [r3, #0]
}
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	24019348 	.word	0x24019348

0800515c <getUartCm4CliPointer>:

EmbeddedCli *getUartCm4CliPointer() {
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
    return cli_uartcm4;
 8005160:	4b03      	ldr	r3, [pc, #12]	@ (8005170 <getUartCm4CliPointer+0x14>)
 8005162:	681b      	ldr	r3, [r3, #0]
}
 8005164:	4618      	mov	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	2401934c 	.word	0x2401934c

08005174 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8005178:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <embeddedCliDefaultConfig+0x4c>)
 800517a:	2240      	movs	r2, #64	@ 0x40
 800517c:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 800517e:	4b10      	ldr	r3, [pc, #64]	@ (80051c0 <embeddedCliDefaultConfig+0x4c>)
 8005180:	2240      	movs	r2, #64	@ 0x40
 8005182:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8005184:	4b0e      	ldr	r3, [pc, #56]	@ (80051c0 <embeddedCliDefaultConfig+0x4c>)
 8005186:	2280      	movs	r2, #128	@ 0x80
 8005188:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 800518a:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <embeddedCliDefaultConfig+0x4c>)
 800518c:	2200      	movs	r2, #0
 800518e:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8005190:	4b0b      	ldr	r3, [pc, #44]	@ (80051c0 <embeddedCliDefaultConfig+0x4c>)
 8005192:	2200      	movs	r2, #0
 8005194:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 8;
 8005196:	4b0a      	ldr	r3, [pc, #40]	@ (80051c0 <embeddedCliDefaultConfig+0x4c>)
 8005198:	2208      	movs	r2, #8
 800519a:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 800519c:	4b08      	ldr	r3, [pc, #32]	@ (80051c0 <embeddedCliDefaultConfig+0x4c>)
 800519e:	2201      	movs	r2, #1
 80051a0:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 80051a2:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <embeddedCliDefaultConfig+0x4c>)
 80051a4:	4a07      	ldr	r2, [pc, #28]	@ (80051c4 <embeddedCliDefaultConfig+0x50>)
 80051a6:	601a      	str	r2, [r3, #0]
    defaultConfig.staticBindingCount = 0;
 80051a8:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <embeddedCliDefaultConfig+0x4c>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	831a      	strh	r2, [r3, #24]
    defaultConfig.staticBindings = NULL;
 80051ae:	4b04      	ldr	r3, [pc, #16]	@ (80051c0 <embeddedCliDefaultConfig+0x4c>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	615a      	str	r2, [r3, #20]
    return &defaultConfig;
 80051b4:	4b02      	ldr	r3, [pc, #8]	@ (80051c0 <embeddedCliDefaultConfig+0x4c>)
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	24019354 	.word	0x24019354
 80051c4:	08024f18 	.word	0x08024f18

080051c8 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (config->staticBindings == NULL) ?
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d102      	bne.n	80051de <embeddedCliRequiredSize+0x16>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	895b      	ldrh	r3, [r3, #10]
 80051dc:	e000      	b.n	80051e0 <embeddedCliRequiredSize+0x18>
 80051de:	2300      	movs	r3, #0
 80051e0:	81fb      	strh	r3, [r7, #14]
                            (config->maxBindingCount) : 0;
    return (CLI_UINT_SIZE * (
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	889b      	ldrh	r3, [r3, #4]
 80051e6:	3303      	adds	r3, #3
 80051e8:	089a      	lsrs	r2, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	88db      	ldrh	r3, [r3, #6]
 80051ee:	3303      	adds	r3, #3
 80051f0:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80051f2:	441a      	add	r2, r3
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	891b      	ldrh	r3, [r3, #8]
 80051f8:	3303      	adds	r3, #3
 80051fa:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80051fc:	18d1      	adds	r1, r2, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80051fe:	89fa      	ldrh	r2, [r7, #14]
 8005200:	4613      	mov	r3, r2
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	4413      	add	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	3303      	adds	r3, #3
 800520a:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 800520c:	18ca      	adds	r2, r1, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))
 800520e:	89fb      	ldrh	r3, [r7, #14]
 8005210:	3303      	adds	r3, #3
 8005212:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8005214:	4413      	add	r3, r2
 8005216:	3312      	adds	r3, #18
    return (CLI_UINT_SIZE * (
 8005218:	b29b      	uxth	r3, r3
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	b29b      	uxth	r3, r3
    ));
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 800522a:	b580      	push	{r7, lr}
 800522c:	b088      	sub	sp, #32
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]

    size_t totalSize = embeddedCliRequiredSize(config);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ffc6 	bl	80051c8 <embeddedCliRequiredSize>
 800523c:	4603      	mov	r3, r0
 800523e:	61bb      	str	r3, [r7, #24]

    _Bool allocated = false;
 8005240:	2300      	movs	r3, #0
 8005242:	75fb      	strb	r3, [r7, #23]

    if (config->cliBuffer == NULL || config->cliBufferSize < totalSize) {
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <embeddedCliNew+0x2e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8a1b      	ldrh	r3, [r3, #16]
 8005250:	461a      	mov	r2, r3
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	4293      	cmp	r3, r2
 8005256:	d901      	bls.n	800525c <embeddedCliNew+0x32>
        return NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	e071      	b.n	8005340 <embeddedCliNew+0x116>
    }

    CLI_UINT *buf = config->cliBuffer;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	613b      	str	r3, [r7, #16]

    memset(buf, 0, totalSize);
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	2100      	movs	r1, #0
 8005266:	6938      	ldr	r0, [r7, #16]
 8005268:	f01c fe99 	bl	8021f9e <memset>

    cli = (EmbeddedCli *) buf;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	61fb      	str	r3, [r7, #28]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	3310      	adds	r3, #16
 8005274:	613b      	str	r3, [r7, #16]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3338      	adds	r3, #56	@ 0x38
 8005280:	613b      	str	r3, [r7, #16]

    PREPARE_IMPL(cli);
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60fb      	str	r3, [r7, #12]
    impl->rxBuffer.buf = (char *) buf;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	889b      	ldrh	r3, [r3, #4]
 8005292:	3303      	adds	r3, #3
 8005294:	f023 0303 	bic.w	r3, r3, #3
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4413      	add	r3, r2
 800529c:	613b      	str	r3, [r7, #16]

    impl->cmdBuffer = (char *) buf;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	88db      	ldrh	r3, [r3, #6]
 80052a8:	3303      	adds	r3, #3
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4413      	add	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]


    impl->bindings = (CliCommandBinding *) config->staticBindings;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	625a      	str	r2, [r3, #36]	@ 0x24
    impl->bindingsCount = config->staticBindingCount;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8b1a      	ldrh	r2, [r3, #24]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = config->staticBindingCount;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8b1a      	ldrh	r2, [r3, #24]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	85da      	strh	r2, [r3, #46]	@ 0x2e


    impl->history.buf = (char *) buf;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	891a      	ldrh	r2, [r3, #8]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	811a      	strh	r2, [r3, #8]

    if (allocated)
 80052da:	7dfb      	ldrb	r3, [r7, #23]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <embeddedCliNew+0xc8>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80052e6:	f043 0304 	orr.w	r3, r3, #4
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	7c9b      	ldrb	r3, [r3, #18]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <embeddedCliNew+0xe2>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005300:	f043 0320 	orr.w	r3, r3, #32
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	889a      	ldrh	r2, [r3, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	88da      	ldrh	r2, [r3, #6]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->lastChar = '\0';
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]
    impl->cursorPos = 0;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	869a      	strh	r2, [r3, #52]	@ 0x34

    return cli;
 800533e:	69fb      	ldr	r3, [r7, #28]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3310      	adds	r3, #16
 800535e:	78fa      	ldrb	r2, [r7, #3]
 8005360:	4611      	mov	r1, r2
 8005362:	4618      	mov	r0, r3
 8005364:	f000 ff8a 	bl	800627c <fifoBufPush>
 8005368:	4603      	mov	r3, r0
 800536a:	f083 0301 	eor.w	r3, r3, #1
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	b2da      	uxtb	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 8083 	beq.w	80054a6 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d155      	bne.n	8005460 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80053ba:	f043 0302 	orr.w	r3, r3, #2
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fe7e 	bl	80060ce <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 80053d2:	e045      	b.n	8005460 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3310      	adds	r3, #16
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 ff27 	bl	800622c <fifoBufPop>
 80053de:	4603      	mov	r3, r0
 80053e0:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 80053f0:	7afb      	ldrb	r3, [r7, #11]
 80053f2:	4619      	mov	r1, r3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f9f5 	bl	80057e4 <onEscapedInput>
 80053fa:	e02a      	b.n	8005452 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005402:	2b1b      	cmp	r3, #27
 8005404:	d10c      	bne.n	8005420 <embeddedCliProcess+0x92>
 8005406:	7afb      	ldrb	r3, [r7, #11]
 8005408:	2b5b      	cmp	r3, #91	@ 0x5b
 800540a:	d109      	bne.n	8005420 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005412:	f043 0308 	orr.w	r3, r3, #8
 8005416:	b2da      	uxtb	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 800541e:	e018      	b.n	8005452 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8005420:	7afb      	ldrb	r3, [r7, #11]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 feaa 	bl	800617c <isControlChar>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 800542e:	7afb      	ldrb	r3, [r7, #11]
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa86 	bl	8005944 <onControlInput>
 8005438:	e00b      	b.n	8005452 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 800543a:	7afb      	ldrb	r3, [r7, #11]
 800543c:	4618      	mov	r0, r3
 800543e:	f000 febd 	bl	80061bc <isDisplayableChar>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8005448:	7afb      	ldrb	r3, [r7, #11]
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fa27 	bl	80058a0 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fd12 	bl	8005e7c <printLiveAutocompletion>

        impl->lastChar = c;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	7afa      	ldrb	r2, [r7, #11]
 800545c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3310      	adds	r3, #16
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fec0 	bl	80061ea <fifoBufAvailable>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1b1      	bne.n	80053d4 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d014      	beq.n	80054a8 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	8c12      	ldrh	r2, [r2, #32]
 800548c:	4413      	add	r3, r2
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	b2da      	uxtb	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80054a4:	e000      	b.n	80054a8 <embeddedCliProcess+0x11a>
        return;
 80054a6:	bf00      	nop
    }
}
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d03e      	beq.n	8005540 <embeddedCliPrint+0x90>
        return;

    PREPARE_IMPL(cli);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	60fb      	str	r3, [r7, #12]

    // Save cursor position
    uint16_t cursorPosSave = impl->cursorPos;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80054cc:	817b      	strh	r3, [r7, #10]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d102      	bne.n	80054e2 <embeddedCliPrint+0x32>
        clearCurrentLine(cli);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fdc1 	bl	8006064 <clearCurrentLine>

    // Restore cursor position
    impl->cursorPos = cursorPosSave;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	897a      	ldrh	r2, [r7, #10]
 80054e6:	869a      	strh	r2, [r3, #52]	@ 0x34

    // print provided string
    writeToOutput(cli, string);
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fdef 	bl	80060ce <writeToOutput>
    writeToOutput(cli, lineBreak);
 80054f0:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <embeddedCliPrint+0x98>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fde9 	bl	80060ce <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11b      	bne.n	8005542 <embeddedCliPrint+0x92>
        writeToOutput(cli, impl->invitation);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fddc 	bl	80060ce <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fdd6 	bl	80060ce <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8c1a      	ldrh	r2, [r3, #32]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	861a      	strh	r2, [r3, #48]	@ 0x30
        moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_BACKWARD);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800552e:	2200      	movs	r2, #0
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fdec 	bl	8006110 <moveCursor>

        printLiveAutocompletion(cli);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fc9f 	bl	8005e7c <printLiveAutocompletion>
 800553e:	e000      	b.n	8005542 <embeddedCliPrint+0x92>
        return;
 8005540:	bf00      	nop
    }
}
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	240148a0 	.word	0x240148a0

0800554c <embeddedCliTokenizeArgs>:

void embeddedCliTokenizeArgs(char *args) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d066      	beq.n	8005628 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 800555a:	4b35      	ldr	r3, [pc, #212]	@ (8005630 <embeddedCliTokenizeArgs+0xe4>)
 800555c:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 800555e:	2300      	movs	r3, #0
 8005560:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8005562:	2300      	movs	r3, #0
 8005564:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	61bb      	str	r3, [r7, #24]

    int i = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 800556e:	e047      	b.n	8005600 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	3301      	adds	r3, #1
 8005574:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8005576:	7fbb      	ldrb	r3, [r7, #30]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 800557c:	2300      	movs	r3, #0
 800557e:	77bb      	strb	r3, [r7, #30]
 8005580:	e029      	b.n	80055d6 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8005582:	7cfb      	ldrb	r3, [r7, #19]
 8005584:	2b5c      	cmp	r3, #92	@ 0x5c
 8005586:	d102      	bne.n	800558e <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8005588:	2301      	movs	r3, #1
 800558a:	77bb      	strb	r3, [r7, #30]
            continue;
 800558c:	e038      	b.n	8005600 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	2b22      	cmp	r3, #34	@ 0x22
 8005592:	d110      	bne.n	80055b6 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8005594:	7ffb      	ldrb	r3, [r7, #31]
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f083 0301 	eor.w	r3, r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	7ffb      	ldrb	r3, [r7, #31]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 80055b0:	2300      	movs	r3, #0
 80055b2:	74fb      	strb	r3, [r7, #19]
 80055b4:	e00f      	b.n	80055d6 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 80055b6:	7ffb      	ldrb	r3, [r7, #31]
 80055b8:	f083 0301 	eor.w	r3, r3, #1
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <embeddedCliTokenizeArgs+0x8a>
 80055c2:	7cfb      	ldrb	r3, [r7, #19]
 80055c4:	4619      	mov	r1, r3
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f01c fd00 	bl	8021fcc <strchr>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 80055d2:	2300      	movs	r3, #0
 80055d4:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 80055d6:	7cfb      	ldrb	r3, [r7, #19]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <embeddedCliTokenizeArgs+0xa4>
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	dd0e      	ble.n	8005600 <embeddedCliTokenizeArgs+0xb4>
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	4413      	add	r3, r2
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	4413      	add	r3, r2
 80055f6:	7cfa      	ldrb	r2, [r7, #19]
 80055f8:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	3301      	adds	r3, #1
 80055fe:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	74fb      	strb	r3, [r7, #19]
 800560a:	7cfb      	ldrb	r3, [r7, #19]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1af      	bne.n	8005570 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4413      	add	r3, r2
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	3301      	adds	r3, #1
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e000      	b.n	800562a <embeddedCliTokenizeArgs+0xde>
        return;
 8005628:	bf00      	nop
}
 800562a:	3720      	adds	r7, #32
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	08024f1c 	.word	0x08024f1c

08005634 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8005640:	887b      	ldrh	r3, [r7, #2]
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 ff20 	bl	800648a <getTokenPosition>
 800564a:	4603      	mov	r3, r0
 800564c:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8005658:	89fb      	ldrh	r3, [r7, #14]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	e000      	b.n	8005662 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8005676:	887b      	ldrh	r3, [r7, #2]
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 ff05 	bl	800648a <getTokenPosition>
 8005680:	4603      	mov	r3, r0
 8005682:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8005684:	89fb      	ldrh	r3, [r7, #14]
 8005686:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800568a:	4293      	cmp	r3, r2
 800568c:	d003      	beq.n	8005696 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 800568e:	89fb      	ldrh	r3, [r7, #14]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	4413      	add	r3, r2
 8005694:	e000      	b.n	8005698 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <embeddedCliGetTokenCount+0x16>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <embeddedCliGetTokenCount+0x1a>
        return 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e019      	b.n	80056ee <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 80056be:	2301      	movs	r3, #1
 80056c0:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	4413      	add	r3, r2
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3301      	adds	r3, #1
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 80056dc:	897b      	ldrh	r3, [r7, #10]
 80056de:	3301      	adds	r3, #1
 80056e0:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3301      	adds	r3, #1
 80056e6:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 80056e8:	e7eb      	b.n	80056c2 <embeddedCliGetTokenCount+0x22>
                break;
 80056ea:	bf00      	nop
    }

    return tokenCount;
 80056ec:	897b      	ldrh	r3, [r7, #10]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	899b      	ldrh	r3, [r3, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d05f      	beq.n	80057d6 <navigateHistory+0xda>
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	895a      	ldrh	r2, [r3, #10]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	899b      	ldrh	r3, [r3, #12]
 8005724:	429a      	cmp	r2, r3
 8005726:	d056      	beq.n	80057d6 <navigateHistory+0xda>
        (!navigateUp && impl->history.current == 0))
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	f083 0301 	eor.w	r3, r3, #1
 800572e:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	895b      	ldrh	r3, [r3, #10]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d04c      	beq.n	80057d6 <navigateHistory+0xda>
        return;

    clearCurrentLine(cli);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fc91 	bl	8006064 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fcc0 	bl	80060ce <writeToOutput>

    if (navigateUp)
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d006      	beq.n	8005762 <navigateHistory+0x66>
        ++impl->history.current;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	895b      	ldrh	r3, [r3, #10]
 8005758:	3301      	adds	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	815a      	strh	r2, [r3, #10]
 8005760:	e005      	b.n	800576e <navigateHistory+0x72>
    else
        --impl->history.current;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	895b      	ldrh	r3, [r3, #10]
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1d1a      	adds	r2, r3, #4
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	895b      	ldrh	r3, [r3, #10]
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f000 fe0d 	bl	8006398 <historyGet>
 800577e:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <navigateHistory+0x8e>
        item = "";
 8005786:	4b16      	ldr	r3, [pc, #88]	@ (80057e0 <navigateHistory+0xe4>)
 8005788:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 800578a:	6978      	ldr	r0, [r7, #20]
 800578c:	f7fa fdb2 	bl	80002f4 <strlen>
 8005790:	4603      	mov	r3, r0
 8005792:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	89fa      	ldrh	r2, [r7, #14]
 800579a:	6979      	ldr	r1, [r7, #20]
 800579c:	4618      	mov	r0, r3
 800579e:	f01c fca8 	bl	80220f2 <memcpy>
    impl->cmdBuffer[len] = '\0';
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	89fb      	ldrh	r3, [r7, #14]
 80057a8:	4413      	add	r3, r2
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	89fa      	ldrh	r2, [r7, #14]
 80057b2:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	4619      	mov	r1, r3
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fc87 	bl	80060ce <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	8c1a      	ldrh	r2, [r3, #32]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cursorPos = 0;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2200      	movs	r2, #0
 80057cc:	869a      	strh	r2, [r3, #52]	@ 0x34

    printLiveAutocompletion(cli);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fb54 	bl	8005e7c <printLiveAutocompletion>
 80057d4:	e000      	b.n	80057d8 <navigateHistory+0xdc>
        return;
 80057d6:	bf00      	nop
}
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	08024f20 	.word	0x08024f20

080057e4 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 80057e4:	b590      	push	{r4, r7, lr}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80057fa:	d948      	bls.n	800588e <onEscapedInput+0xaa>
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	2b7e      	cmp	r3, #126	@ 0x7e
 8005800:	d845      	bhi.n	800588e <onEscapedInput+0xaa>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005808:	f023 0308 	bic.w	r3, r3, #8
 800580c:	b2da      	uxtb	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	2b41      	cmp	r3, #65	@ 0x41
 8005818:	d002      	beq.n	8005820 <onEscapedInput+0x3c>
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	2b42      	cmp	r3, #66	@ 0x42
 800581e:	d109      	bne.n	8005834 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	2b41      	cmp	r3, #65	@ 0x41
 8005824:	bf0c      	ite	eq
 8005826:	2301      	moveq	r3, #1
 8005828:	2300      	movne	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ff64 	bl	80056fc <navigateHistory>
        }

        if (c == 'C' && impl->cursorPos > 0) {
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	2b43      	cmp	r3, #67	@ 0x43
 8005838:	d10f      	bne.n	800585a <onEscapedInput+0x76>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <onEscapedInput+0x76>
            impl->cursorPos--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorRight);
 800584e:	4b12      	ldr	r3, [pc, #72]	@ (8005898 <onEscapedInput+0xb4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fc3a 	bl	80060ce <writeToOutput>
        }

        if (c == 'D' && impl->cursorPos < strlen(impl->cmdBuffer)) {
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	2b44      	cmp	r3, #68	@ 0x44
 800585e:	d116      	bne.n	800588e <onEscapedInput+0xaa>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005864:	461c      	mov	r4, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	4618      	mov	r0, r3
 800586c:	f7fa fd42 	bl	80002f4 <strlen>
 8005870:	4603      	mov	r3, r0
 8005872:	429c      	cmp	r4, r3
 8005874:	d20b      	bcs.n	800588e <onEscapedInput+0xaa>
            impl->cursorPos++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800587a:	3301      	adds	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorLeft);
 8005882:	4b06      	ldr	r3, [pc, #24]	@ (800589c <onEscapedInput+0xb8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fc20 	bl	80060ce <writeToOutput>
        }
    }
}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	bd90      	pop	{r4, r7, pc}
 8005896:	bf00      	nop
 8005898:	240148a4 	.word	0x240148a4
 800589c:	240148a8 	.word	0x240148a8

080058a0 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8c1b      	ldrh	r3, [r3, #32]
 80058b6:	3302      	adds	r3, #2
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80058bc:	4293      	cmp	r3, r2
 80058be:	da3b      	bge.n	8005938 <onCharInput+0x98>
        return;

    size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fa fd15 	bl	80002f4 <strlen>
 80058ca:	4602      	mov	r2, r0
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	60bb      	str	r3, [r7, #8]

    memmove(&impl->cmdBuffer[insertPos + 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	3301      	adds	r3, #1
 80058dc:	18d0      	adds	r0, r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	69da      	ldr	r2, [r3, #28]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	18d1      	adds	r1, r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80058ea:	3301      	adds	r3, #1
 80058ec:	461a      	mov	r2, r3
 80058ee:	f01c fb3c 	bl	8021f6a <memmove>

    ++impl->cmdSize;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8c1b      	ldrh	r3, [r3, #32]
 80058f6:	3301      	adds	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	841a      	strh	r2, [r3, #32]
    ++impl->inputLineLength;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005902:	3301      	adds	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cmdBuffer[insertPos] = c;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4413      	add	r3, r2
 8005912:	78fa      	ldrb	r2, [r7, #3]
 8005914:	701a      	strb	r2, [r3, #0]

    if (impl->cursorPos > 0)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <onCharInput+0x8a>
        writeToOutput(cli, escSeqInsertChar); // Insert Character
 800591e:	4b08      	ldr	r3, [pc, #32]	@ (8005940 <onCharInput+0xa0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fbd2 	bl	80060ce <writeToOutput>

    cli->writeChar(cli, c);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	78fa      	ldrb	r2, [r7, #3]
 8005930:	4611      	mov	r1, r2
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	4798      	blx	r3
 8005936:	e000      	b.n	800593a <onCharInput+0x9a>
        return;
 8005938:	bf00      	nop
}
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	240148b4 	.word	0x240148b4

08005944 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800595c:	2b0d      	cmp	r3, #13
 800595e:	d102      	bne.n	8005966 <onControlInput+0x22>
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	2b0a      	cmp	r3, #10
 8005964:	d078      	beq.n	8005a58 <onControlInput+0x114>
        (impl->lastChar == '\n' && c == '\r'))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 800596c:	2b0a      	cmp	r3, #10
 800596e:	d102      	bne.n	8005976 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	2b0d      	cmp	r3, #13
 8005974:	d070      	beq.n	8005a58 <onControlInput+0x114>
        return;

    if (c == '\r' || c == '\n') {
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	2b0d      	cmp	r3, #13
 800597a:	d002      	beq.n	8005982 <onControlInput+0x3e>
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	2b0a      	cmp	r3, #10
 8005980:	d129      	bne.n	80059d6 <onControlInput+0x92>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fadc 	bl	8005f40 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8005988:	4b35      	ldr	r3, [pc, #212]	@ (8005a60 <onControlInput+0x11c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fb9d 	bl	80060ce <writeToOutput>

        if (impl->cmdSize > 0)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8c1b      	ldrh	r3, [r3, #32]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <onControlInput+0x5e>
            parseCommand(cli);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f865 	bl	8005a6c <parseCommand>
        impl->cmdSize = 0;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	8c12      	ldrh	r2, [r2, #32]
 80059b0:	4413      	add	r3, r2
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	815a      	strh	r2, [r3, #10]
        impl->cursorPos = 0;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	869a      	strh	r2, [r3, #52]	@ 0x34

        writeToOutput(cli, impl->invitation);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fb7d 	bl	80060ce <writeToOutput>
 80059d4:	e041      	b.n	8005a5a <onControlInput+0x116>
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d002      	beq.n	80059e2 <onControlInput+0x9e>
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	2b7f      	cmp	r3, #127	@ 0x7f
 80059e0:	d133      	bne.n	8005a4a <onControlInput+0x106>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8c1b      	ldrh	r3, [r3, #32]
 80059e6:	461a      	mov	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	dd2b      	ble.n	8005a4a <onControlInput+0x106>
        // remove char from screen
        writeToOutput(cli, escSeqCursorLeft); // Move cursor to left
 80059f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005a64 <onControlInput+0x120>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fb68 	bl	80060ce <writeToOutput>
        writeToOutput(cli, escSeqDeleteChar); // And remove character
 80059fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005a68 <onControlInput+0x124>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fb62 	bl	80060ce <writeToOutput>
        // and from buffer
        size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fa fc70 	bl	80002f4 <strlen>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	60bb      	str	r3, [r7, #8]
        memmove(&impl->cmdBuffer[insertPos - 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	69da      	ldr	r2, [r3, #28]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	18d0      	adds	r0, r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	18d1      	adds	r1, r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005a34:	3301      	adds	r3, #1
 8005a36:	461a      	mov	r2, r3
 8005a38:	f01c fa97 	bl	8021f6a <memmove>
        --impl->cmdSize;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8c1b      	ldrh	r3, [r3, #32]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	841a      	strh	r2, [r3, #32]
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 8005a48:	e007      	b.n	8005a5a <onControlInput+0x116>
    } else if (c == '\t') {
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d104      	bne.n	8005a5a <onControlInput+0x116>
        onAutocompleteRequest(cli);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa75 	bl	8005f40 <onAutocompleteRequest>
 8005a56:	e000      	b.n	8005a5a <onControlInput+0x116>
        return;
 8005a58:	bf00      	nop
    }

}
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	240148a0 	.word	0x240148a0
 8005a64:	240148a8 	.word	0x240148a8
 8005a68:	240148b8 	.word	0x240148b8

08005a6c <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8005a6c:	b590      	push	{r4, r7, lr}
 8005a6e:	b08f      	sub	sp, #60	@ 0x3c
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8005a80:	2300      	movs	r3, #0
 8005a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a84:	e00d      	b.n	8005aa2 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	4413      	add	r3, r2
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d003      	beq.n	8005a9c <parseCommand+0x30>
            isEmpty = false;
 8005a94:	2300      	movs	r3, #0
 8005a96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8005a9a:	e008      	b.n	8005aae <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	8c1b      	ldrh	r3, [r3, #32]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	dbeb      	blt.n	8005a86 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8005aae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 80fa 	bne.w	8005cac <parseCommand+0x240>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	1d1a      	adds	r2, r3, #4
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f000 fc04 	bl	80062d0 <historyPut>

    char *cmdName = NULL;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	623b      	str	r3, [r7, #32]
 8005ada:	e030      	b.n	8005b3e <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	d10f      	bne.n	8005b0e <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8005aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	69da      	ldr	r2, [r3, #28]
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	4413      	add	r3, r2
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8005b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d018      	beq.n	8005b38 <parseCommand+0xcc>
                nameFinished = true;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005b0c:	e014      	b.n	8005b38 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8005b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d105      	bne.n	8005b20 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b1e:	e00b      	b.n	8005b38 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d108      	bne.n	8005b38 <parseCommand+0xcc>
 8005b26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d004      	beq.n	8005b38 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	69da      	ldr	r2, [r3, #28]
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	4413      	add	r3, r2
 8005b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	623b      	str	r3, [r7, #32]
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	8c1b      	ldrh	r3, [r3, #32]
 8005b42:	461a      	mov	r2, r3
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	4293      	cmp	r3, r2
 8005b48:	dbc8      	blt.n	8005adc <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	69da      	ldr	r2, [r3, #28]
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	8c1b      	ldrh	r3, [r3, #32]
 8005b52:	3301      	adds	r3, #1
 8005b54:	4413      	add	r3, r2
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8005b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80a7 	beq.w	8005cb0 <parseCommand+0x244>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	e072      	b.n	8005c4e <parseCommand+0x1e2>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	4413      	add	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	440b      	add	r3, r1
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b7e:	f7fa fbaf 	bl	80002e0 <strcmp>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d15f      	bne.n	8005c48 <parseCommand+0x1dc>
            if (impl->bindings[i].binding == NULL)
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	4413      	add	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	440b      	add	r3, r1
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d05e      	beq.n	8005c5c <parseCommand+0x1f0>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4413      	add	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	440b      	add	r3, r1
 8005bae:	7b1b      	ldrb	r3, [r3, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8005bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bb6:	f7ff fcc9 	bl	800554c <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005bc0:	f043 0310 	orr.w	r3, r3, #16
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            // check if help was requested (help is printed when no other options are set)
            if (cmdArgs != NULL && (strcmp(cmdArgs, "-h") == 0 || strcmp(cmdArgs, "--help") == 0)) {
 8005bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01a      	beq.n	8005c08 <parseCommand+0x19c>
 8005bd2:	4939      	ldr	r1, [pc, #228]	@ (8005cb8 <parseCommand+0x24c>)
 8005bd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bd6:	f7fa fb83 	bl	80002e0 <strcmp>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d006      	beq.n	8005bee <parseCommand+0x182>
 8005be0:	4936      	ldr	r1, [pc, #216]	@ (8005cbc <parseCommand+0x250>)
 8005be2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005be4:	f7fa fb7c 	bl	80002e0 <strcmp>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10c      	bne.n	8005c08 <parseCommand+0x19c>
                printBindingHelp(cli, &impl->bindings[i]);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	4413      	add	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	440b      	add	r3, r1
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f85d 	bl	8005cc0 <printBindingHelp>
 8005c06:	e015      	b.n	8005c34 <parseCommand+0x1c8>
            } else {
                impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	4413      	add	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	440b      	add	r3, r1
 8005c18:	695c      	ldr	r4, [r3, #20]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	4613      	mov	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	440b      	add	r3, r1
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	47a0      	blx	r4
            }
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005c3a:	f023 0310 	bic.w	r3, r3, #16
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8005c46:	e034      	b.n	8005cb2 <parseCommand+0x246>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c52:	461a      	mov	r2, r3
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4293      	cmp	r3, r2
 8005c58:	db86      	blt.n	8005b68 <parseCommand+0xfc>
 8005c5a:	e000      	b.n	8005c5e <parseCommand+0x1f2>
                break;
 8005c5c:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d01d      	beq.n	8005ca2 <parseCommand+0x236>
        CliCommand command;
        command.name = cmdName;
 8005c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c68:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8005c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6c:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005c74:	f043 0310 	orr.w	r3, r3, #16
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f107 020c 	add.w	r2, r7, #12
 8005c88:	4611      	mov	r1, r2
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005c94:	f023 0310 	bic.w	r3, r3, #16
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8005ca0:	e007      	b.n	8005cb2 <parseCommand+0x246>
    } else {
        onUnknownCommand(cli, cmdName);
 8005ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 f845 	bl	8006d34 <onUnknownCommand>
 8005caa:	e002      	b.n	8005cb2 <parseCommand+0x246>
        return;
 8005cac:	bf00      	nop
 8005cae:	e000      	b.n	8005cb2 <parseCommand+0x246>
        return;
 8005cb0:	bf00      	nop
    }
}
 8005cb2:	373c      	adds	r7, #60	@ 0x3c
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd90      	pop	{r4, r7, pc}
 8005cb8:	08024f24 	.word	0x08024f24
 8005cbc:	08024f28 	.word	0x08024f28

08005cc0 <printBindingHelp>:

static void printBindingHelp(EmbeddedCli *cli, CliCommandBinding *binding) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
    if (binding->help != NULL) {
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d010      	beq.n	8005cf4 <printBindingHelp+0x34>
        cli->writeChar(cli, '\t');
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2109      	movs	r1, #9
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	4798      	blx	r3
        writeToOutput(cli, binding->help);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f9f3 	bl	80060ce <writeToOutput>
        writeToOutput(cli, lineBreak);
 8005ce8:	4b04      	ldr	r3, [pc, #16]	@ (8005cfc <printBindingHelp+0x3c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f9ed 	bl	80060ce <writeToOutput>
    }
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	240148a0 	.word	0x240148a0

08005d00 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08e      	sub	sp, #56	@ 0x38
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	2300      	movs	r3, #0
 8005d12:	82bb      	strh	r3, [r7, #20]
 8005d14:	2300      	movs	r3, #0
 8005d16:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7fa faeb 	bl	80002f4 <strlen>
 8005d1e:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <getAutocompletedCommand+0x34>
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d108      	bne.n	8005d46 <getAutocompletedCommand+0x46>
        return cmd;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f107 0310 	add.w	r3, r7, #16
 8005d3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d40:	e882 0003 	stmia.w	r2, {r0, r1}
 8005d44:	e095      	b.n	8005e72 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8005d46:	2300      	movs	r3, #0
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d4a:	e083      	b.n	8005e54 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005d50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d52:	4613      	mov	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8005d60:	69f8      	ldr	r0, [r7, #28]
 8005d62:	f7fa fac7 	bl	80002f4 <strlen>
 8005d66:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6e:	4413      	add	r3, r2
 8005d70:	781a      	ldrb	r2, [r3, #0]
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d78:	440b      	add	r3, r1
 8005d7a:	f022 0201 	bic.w	r2, r2, #1
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d35e      	bcc.n	8005e48 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8005d90:	2300      	movs	r3, #0
 8005d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d94:	e010      	b.n	8005db8 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d9a:	4413      	add	r3, r2
 8005d9c:	781a      	ldrb	r2, [r3, #0]
 8005d9e:	69f9      	ldr	r1, [r7, #28]
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	440b      	add	r3, r1
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d003      	beq.n	8005db2 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 8005daa:	2300      	movs	r3, #0
 8005dac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8005db0:	e006      	b.n	8005dc0 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8005db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db4:	3301      	adds	r3, #1
 8005db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005db8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d3ea      	bcc.n	8005d96 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8005dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005dc4:	f083 0301 	eor.w	r3, r3, #1
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d13e      	bne.n	8005e4c <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd4:	4413      	add	r3, r2
 8005dd6:	781a      	ldrb	r2, [r3, #0]
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dde:	440b      	add	r3, r1
 8005de0:	f042 0201 	orr.w	r2, r2, #1
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8005de8:	8afb      	ldrh	r3, [r7, #22]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <getAutocompletedCommand+0xf8>
 8005dee:	8abb      	ldrh	r3, [r7, #20]
 8005df0:	461a      	mov	r2, r3
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d202      	bcs.n	8005dfe <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8005dfe:	8afb      	ldrh	r3, [r7, #22]
 8005e00:	3301      	adds	r3, #1
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8005e06:	8afb      	ldrh	r3, [r7, #22]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d102      	bne.n	8005e12 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	613b      	str	r3, [r7, #16]
            continue;
 8005e10:	e01d      	b.n	8005e4e <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	8c1b      	ldrh	r3, [r3, #32]
 8005e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e18:	e010      	b.n	8005e3c <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1e:	4413      	add	r3, r2
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	69f9      	ldr	r1, [r7, #28]
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	440b      	add	r3, r1
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d003      	beq.n	8005e36 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	82bb      	strh	r3, [r7, #20]
                break;
 8005e34:	e00b      	b.n	8005e4e <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8005e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e38:	3301      	adds	r3, #1
 8005e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e3c:	8abb      	ldrh	r3, [r7, #20]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d3e9      	bcc.n	8005e1a <getAutocompletedCommand+0x11a>
 8005e46:	e002      	b.n	8005e4e <getAutocompletedCommand+0x14e>
            continue;
 8005e48:	bf00      	nop
 8005e4a:	e000      	b.n	8005e4e <getAutocompletedCommand+0x14e>
            continue;
 8005e4c:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e50:	3301      	adds	r3, #1
 8005e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e58:	461a      	mov	r2, r3
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	f6ff af75 	blt.w	8005d4c <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	461a      	mov	r2, r3
 8005e66:	f107 0310 	add.w	r3, r7, #16
 8005e6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005e6e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	3738      	adds	r7, #56	@ 0x38
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d04a      	beq.n	8005f2e <printLiveAutocompletion+0xb2>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	f107 030c 	add.w	r3, r7, #12
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff ff2c 	bl	8005d00 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8005ea8:	8a7b      	ldrh	r3, [r7, #18]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	8c1b      	ldrh	r3, [r3, #32]
 8005eb2:	823b      	strh	r3, [r7, #16]
    }

    // save cursor location
    writeToOutput(cli, escSeqCursorSave);
 8005eb4:	4b20      	ldr	r3, [pc, #128]	@ (8005f38 <printLiveAutocompletion+0xbc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f907 	bl	80060ce <writeToOutput>

    moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_FORWARD);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f921 	bl	8006110 <moveCursor>

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	8c1b      	ldrh	r3, [r3, #32]
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	e00b      	b.n	8005eee <printLiveAutocompletion+0x72>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68f9      	ldr	r1, [r7, #12]
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	440a      	add	r2, r1
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	3301      	adds	r3, #1
 8005eec:	61fb      	str	r3, [r7, #28]
 8005eee:	8a3b      	ldrh	r3, [r7, #16]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d3ee      	bcc.n	8005ed6 <printLiveAutocompletion+0x5a>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8005ef8:	8a3b      	ldrh	r3, [r7, #16]
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	e007      	b.n	8005f0e <printLiveAutocompletion+0x92>
        cli->writeChar(cli, ' ');
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2120      	movs	r1, #32
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	61bb      	str	r3, [r7, #24]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005f12:	461a      	mov	r2, r3
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d3f1      	bcc.n	8005efe <printLiveAutocompletion+0x82>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8005f1a:	8a3a      	ldrh	r2, [r7, #16]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	861a      	strh	r2, [r3, #48]	@ 0x30

    // restore cursor
    writeToOutput(cli, escSeqCursorRestore);
 8005f20:	4b06      	ldr	r3, [pc, #24]	@ (8005f3c <printLiveAutocompletion+0xc0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8d1 	bl	80060ce <writeToOutput>
 8005f2c:	e000      	b.n	8005f30 <printLiveAutocompletion+0xb4>
        return;
 8005f2e:	bf00      	nop
}
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	240148ac 	.word	0x240148ac
 8005f3c:	240148b0 	.word	0x240148b0

08005f40 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	69da      	ldr	r2, [r3, #28]
 8005f52:	f107 030c 	add.w	r3, r7, #12
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fed1 	bl	8005d00 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8005f5e:	8a7b      	ldrh	r3, [r7, #18]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d078      	beq.n	8006056 <onAutocompleteRequest+0x116>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8005f64:	8a7b      	ldrh	r3, [r7, #18]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d004      	beq.n	8005f74 <onAutocompleteRequest+0x34>
 8005f6a:	8a3a      	ldrh	r2, [r7, #16]
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	8c1b      	ldrh	r3, [r3, #32]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d931      	bls.n	8005fd8 <onAutocompleteRequest+0x98>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	68f9      	ldr	r1, [r7, #12]
 8005f7a:	8a3a      	ldrh	r2, [r7, #16]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f01c f8b8 	bl	80220f2 <memcpy>
        if (cmd.candidateCount == 1) {
 8005f82:	8a7b      	ldrh	r3, [r7, #18]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d109      	bne.n	8005f9c <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	8a3a      	ldrh	r2, [r7, #16]
 8005f8e:	4413      	add	r3, r2
 8005f90:	2220      	movs	r2, #32
 8005f92:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8005f94:	8a3b      	ldrh	r3, [r7, #16]
 8005f96:	3301      	adds	r3, #1
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	8a3a      	ldrh	r2, [r7, #16]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize - impl->cursorPos]);
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	8c12      	ldrh	r2, [r2, #32]
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8005fb6:	1a8a      	subs	r2, r1, r2
 8005fb8:	4413      	add	r3, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f886 	bl	80060ce <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8005fc2:	8a3a      	ldrh	r2, [r7, #16]
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	8c1a      	ldrh	r2, [r3, #32]
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->cursorPos = 0; // Cursor has been moved to the end
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	869a      	strh	r2, [r3, #52]	@ 0x34
        return;
 8005fd6:	e03f      	b.n	8006058 <onAutocompleteRequest+0x118>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f843 	bl	8006064 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	e021      	b.n	8006028 <onAutocompleteRequest+0xe8>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	4413      	add	r3, r2
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d014      	beq.n	8006020 <onAutocompleteRequest+0xe0>
            continue;

        const char *name = impl->bindings[i].name;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	4413      	add	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	440b      	add	r3, r1
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 800600a:	6979      	ldr	r1, [r7, #20]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f85e 	bl	80060ce <writeToOutput>
        writeToOutput(cli, lineBreak);
 8006012:	4b13      	ldr	r3, [pc, #76]	@ (8006060 <onAutocompleteRequest+0x120>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f858 	bl	80060ce <writeToOutput>
 800601e:	e000      	b.n	8006022 <onAutocompleteRequest+0xe2>
            continue;
 8006020:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3301      	adds	r3, #1
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800602c:	461a      	mov	r2, r3
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4293      	cmp	r3, r2
 8006032:	dbd7      	blt.n	8005fe4 <onAutocompleteRequest+0xa4>
    }

    writeToOutput(cli, impl->invitation);
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f847 	bl	80060ce <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f841 	bl	80060ce <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	8c1a      	ldrh	r2, [r3, #32]
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	861a      	strh	r2, [r3, #48]	@ 0x30
 8006054:	e000      	b.n	8006058 <onAutocompleteRequest+0x118>
        return;
 8006056:	bf00      	nop
}
 8006058:	3720      	adds	r7, #32
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	240148a0 	.word	0x240148a0

08006064 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006076:	461c      	mov	r4, r3
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f7fa f939 	bl	80002f4 <strlen>
 8006082:	4603      	mov	r3, r0
 8006084:	4423      	add	r3, r4
 8006086:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	210d      	movs	r1, #13
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	e007      	b.n	80060a8 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2120      	movs	r1, #32
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	3301      	adds	r3, #1
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d3f3      	bcc.n	8006098 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	210d      	movs	r1, #13
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4798      	blx	r3
    impl->inputLineLength = 0;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2200      	movs	r2, #0
 80060be:	861a      	strh	r2, [r3, #48]	@ 0x30

    impl->cursorPos = 0;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	2200      	movs	r2, #0
 80060c4:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd90      	pop	{r4, r7, pc}

080060ce <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80060d8:	6838      	ldr	r0, [r7, #0]
 80060da:	f7fa f90b 	bl	80002f4 <strlen>
 80060de:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	e00b      	b.n	80060fe <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	440a      	add	r2, r1
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	4611      	mov	r1, r2
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	429a      	cmp	r2, r3
 8006104:	d3ef      	bcc.n	80060e6 <writeToOutput+0x18>
    }
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <moveCursor>:

static void moveCursor(EmbeddedCli* cli, uint16_t count, bool direction) {
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	807b      	strh	r3, [r7, #2]
 800611c:	4613      	mov	r3, r2
 800611e:	707b      	strb	r3, [r7, #1]
    // Check if we need to send any command
    if (count == 0)
 8006120:	887b      	ldrh	r3, [r7, #2]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d020      	beq.n	8006168 <moveCursor+0x58>
        return;

    // 5 = uint16_t max, 3 = escape sequence, 1 = string termination
    char escBuffer[5 + 3 + 1] = { 0 };
 8006126:	f107 030c 	add.w	r3, r7, #12
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	605a      	str	r2, [r3, #4]
 8006130:	721a      	strb	r2, [r3, #8]
    char dirChar = direction ? escSeqCursorRight[2] : escSeqCursorLeft[2];
 8006132:	787b      	ldrb	r3, [r7, #1]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <moveCursor+0x32>
 8006138:	4b0d      	ldr	r3, [pc, #52]	@ (8006170 <moveCursor+0x60>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3302      	adds	r3, #2
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	e003      	b.n	800614a <moveCursor+0x3a>
 8006142:	4b0c      	ldr	r3, [pc, #48]	@ (8006174 <moveCursor+0x64>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3302      	adds	r3, #2
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	75fb      	strb	r3, [r7, #23]
    sprintf(escBuffer, "\x1B[%u%c", count, dirChar);
 800614c:	887a      	ldrh	r2, [r7, #2]
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	f107 000c 	add.w	r0, r7, #12
 8006154:	4908      	ldr	r1, [pc, #32]	@ (8006178 <moveCursor+0x68>)
 8006156:	f01b fe93 	bl	8021e80 <siprintf>
    writeToOutput(cli, escBuffer);
 800615a:	f107 030c 	add.w	r3, r7, #12
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ffb4 	bl	80060ce <writeToOutput>
 8006166:	e000      	b.n	800616a <moveCursor+0x5a>
        return;
 8006168:	bf00      	nop
}
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	240148a4 	.word	0x240148a4
 8006174:	240148a8 	.word	0x240148a8
 8006178:	08024f30 	.word	0x08024f30

0800617c <isControlChar>:

static bool isControlChar(char c) {
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	2b0d      	cmp	r3, #13
 800618a:	d00b      	beq.n	80061a4 <isControlChar+0x28>
 800618c:	79fb      	ldrb	r3, [r7, #7]
 800618e:	2b0a      	cmp	r3, #10
 8006190:	d008      	beq.n	80061a4 <isControlChar+0x28>
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	2b08      	cmp	r3, #8
 8006196:	d005      	beq.n	80061a4 <isControlChar+0x28>
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	2b09      	cmp	r3, #9
 800619c:	d002      	beq.n	80061a4 <isControlChar+0x28>
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80061a2:	d101      	bne.n	80061a8 <isControlChar+0x2c>
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <isControlChar+0x2e>
 80061a8:	2300      	movs	r3, #0
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	b2db      	uxtb	r3, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	2b1f      	cmp	r3, #31
 80061ca:	d904      	bls.n	80061d6 <isDisplayableChar+0x1a>
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	2b7e      	cmp	r3, #126	@ 0x7e
 80061d0:	d801      	bhi.n	80061d6 <isDisplayableChar+0x1a>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <isDisplayableChar+0x1c>
 80061d6:	2300      	movs	r3, #0
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	b2db      	uxtb	r3, r3
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	88da      	ldrh	r2, [r3, #6]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	889b      	ldrh	r3, [r3, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d306      	bcc.n	800620c <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	88da      	ldrh	r2, [r3, #6]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	889b      	ldrh	r3, [r3, #4]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	b29b      	uxth	r3, r3
 800620a:	e009      	b.n	8006220 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	891a      	ldrh	r2, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	889b      	ldrh	r3, [r3, #4]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	88db      	ldrh	r3, [r3, #6]
 800621c:	4413      	add	r3, r2
 800621e:	b29b      	uxth	r3, r3
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	889a      	ldrh	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	88db      	ldrh	r3, [r3, #6]
 8006240:	429a      	cmp	r2, r3
 8006242:	d014      	beq.n	800626e <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	8892      	ldrh	r2, [r2, #4]
 800624c:	4413      	add	r3, r2
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	889b      	ldrh	r3, [r3, #4]
 8006256:	3301      	adds	r3, #1
 8006258:	b29b      	uxth	r3, r3
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	8912      	ldrh	r2, [r2, #8]
 800625e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006262:	fb01 f202 	mul.w	r2, r1, r2
 8006266:	1a9b      	subs	r3, r3, r2
 8006268:	b29a      	uxth	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	809a      	strh	r2, [r3, #4]
    }
    return a;
 800626e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	88db      	ldrh	r3, [r3, #6]
 800628c:	3301      	adds	r3, #1
 800628e:	b29b      	uxth	r3, r3
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	8912      	ldrh	r2, [r2, #8]
 8006294:	fbb3 f1f2 	udiv	r1, r3, r2
 8006298:	fb01 f202 	mul.w	r2, r1, r2
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	889b      	ldrh	r3, [r3, #4]
 80062a4:	89fa      	ldrh	r2, [r7, #14]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d00b      	beq.n	80062c2 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	88d2      	ldrh	r2, [r2, #6]
 80062b2:	4413      	add	r3, r2
 80062b4:	78fa      	ldrb	r2, [r7, #3]
 80062b6:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	89fa      	ldrh	r2, [r7, #14]
 80062bc:	80da      	strh	r2, [r3, #6]
        return true;
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <fifoBufPush+0x48>
    }
    return false;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80062da:	6838      	ldr	r0, [r7, #0]
 80062dc:	f7fa f80a 	bl	80002f4 <strlen>
 80062e0:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	889b      	ldrh	r3, [r3, #4]
 80062e6:	461a      	mov	r2, r3
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	3301      	adds	r3, #1
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d201      	bcs.n	80062f4 <historyPut+0x24>
        return false;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e04d      	b.n	8006390 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f86a 	bl	80063d0 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 80062fc:	e024      	b.n	8006348 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	891b      	ldrh	r3, [r3, #8]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f847 	bl	8006398 <historyGet>
 800630a:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 800630c:	6978      	ldr	r0, [r7, #20]
 800630e:	f7f9 fff1 	bl	80002f4 <strlen>
 8006312:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	461a      	mov	r2, r3
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	4413      	add	r3, r2
 8006322:	3301      	adds	r3, #1
 8006324:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	889b      	ldrh	r3, [r3, #4]
 800632a:	461a      	mov	r2, r3
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	3301      	adds	r3, #1
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	429a      	cmp	r2, r3
 800633a:	d20a      	bcs.n	8006352 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	891b      	ldrh	r3, [r3, #8]
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	891b      	ldrh	r3, [r3, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1d6      	bne.n	80062fe <historyPut+0x2e>
 8006350:	e000      	b.n	8006354 <historyPut+0x84>
            break;
 8006352:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	891b      	ldrh	r3, [r3, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	3301      	adds	r3, #1
 8006364:	18d0      	adds	r0, r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	4619      	mov	r1, r3
 800636e:	f01b fdfc 	bl	8021f6a <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	3301      	adds	r3, #1
 800637a:	461a      	mov	r2, r3
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	f01b feb8 	bl	80220f2 <memcpy>
    ++history->itemsCount;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	891b      	ldrh	r3, [r3, #8]
 8006386:	3301      	adds	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	811a      	strh	r2, [r3, #8]

    return true;
 800638e:	2301      	movs	r3, #1
}
 8006390:	4618      	mov	r0, r3
 8006392:	3720      	adds	r7, #32
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 80063a4:	887b      	ldrh	r3, [r7, #2]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d004      	beq.n	80063b4 <historyGet+0x1c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	891b      	ldrh	r3, [r3, #8]
 80063ae:	887a      	ldrh	r2, [r7, #2]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d901      	bls.n	80063b8 <historyGet+0x20>
        return NULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e007      	b.n	80063c8 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	887a      	ldrh	r2, [r7, #2]
 80063be:	4611      	mov	r1, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff f937 	bl	8005634 <embeddedCliGetToken>
 80063c6:	4603      	mov	r3, r0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d04c      	beq.n	800647a <historyRemove+0xaa>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	891b      	ldrh	r3, [r3, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d048      	beq.n	800647a <historyRemove+0xaa>
        return;
    char *item = NULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80063ec:	2301      	movs	r3, #1
 80063ee:	827b      	strh	r3, [r7, #18]
 80063f0:	e013      	b.n	800641a <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	8a7a      	ldrh	r2, [r7, #18]
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff f935 	bl	800566a <embeddedCliGetTokenVariable>
 8006400:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6978      	ldr	r0, [r7, #20]
 8006406:	f7f9 ff6b 	bl	80002e0 <strcmp>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <historyRemove+0x56>
            break;
        }
        item = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8006414:	8a7b      	ldrh	r3, [r7, #18]
 8006416:	3301      	adds	r3, #1
 8006418:	827b      	strh	r3, [r7, #18]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	891b      	ldrh	r3, [r3, #8]
 800641e:	8a7a      	ldrh	r2, [r7, #18]
 8006420:	429a      	cmp	r2, r3
 8006422:	d9e6      	bls.n	80063f2 <historyRemove+0x22>
 8006424:	e000      	b.n	8006428 <historyRemove+0x58>
            break;
 8006426:	bf00      	nop
    }
    if (item == NULL)
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d027      	beq.n	800647e <historyRemove+0xae>
        return;

    --history->itemsCount;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	891b      	ldrh	r3, [r3, #8]
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 800643a:	8a7a      	ldrh	r2, [r7, #18]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	891b      	ldrh	r3, [r3, #8]
 8006440:	3301      	adds	r3, #1
 8006442:	429a      	cmp	r2, r3
 8006444:	d01d      	beq.n	8006482 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8006446:	6978      	ldr	r0, [r7, #20]
 8006448:	f7f9 ff54 	bl	80002f4 <strlen>
 800644c:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	889b      	ldrh	r3, [r3, #4]
 8006452:	4619      	mov	r1, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3301      	adds	r3, #1
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	441a      	add	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	1acb      	subs	r3, r1, r3
 8006464:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	3301      	adds	r3, #1
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4413      	add	r3, r2
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	4619      	mov	r1, r3
 8006472:	6978      	ldr	r0, [r7, #20]
 8006474:	f01b fd79 	bl	8021f6a <memmove>
 8006478:	e004      	b.n	8006484 <historyRemove+0xb4>
        return;
 800647a:	bf00      	nop
 800647c:	e002      	b.n	8006484 <historyRemove+0xb4>
        return;
 800647e:	bf00      	nop
 8006480:	e000      	b.n	8006484 <historyRemove+0xb4>
        return;
 8006482:	bf00      	nop
}
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	460b      	mov	r3, r1
 8006494:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <getTokenPosition+0x18>
 800649c:	887b      	ldrh	r3, [r7, #2]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 80064a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80064a6:	e028      	b.n	80064fa <getTokenPosition+0x70>
    uint16_t i = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 80064ac:	2301      	movs	r3, #1
 80064ae:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 80064b0:	89ba      	ldrh	r2, [r7, #12]
 80064b2:	887b      	ldrh	r3, [r7, #2]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d013      	beq.n	80064e0 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 80064b8:	89fb      	ldrh	r3, [r7, #14]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	4413      	add	r3, r2
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <getTokenPosition+0x4e>
            ++tokenCount;
 80064c4:	89bb      	ldrh	r3, [r7, #12]
 80064c6:	3301      	adds	r3, #1
 80064c8:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 80064ca:	89fb      	ldrh	r3, [r7, #14]
 80064cc:	3301      	adds	r3, #1
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	4413      	add	r3, r2
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 80064d8:	89fb      	ldrh	r3, [r7, #14]
 80064da:	3301      	adds	r3, #1
 80064dc:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 80064de:	e7e7      	b.n	80064b0 <getTokenPosition+0x26>
            break;
 80064e0:	bf00      	nop
 80064e2:	e000      	b.n	80064e6 <getTokenPosition+0x5c>
                break;
 80064e4:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 80064e6:	89fb      	ldrh	r3, [r7, #14]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	4413      	add	r3, r2
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <getTokenPosition+0x6c>
        return i;
 80064f2:	89fb      	ldrh	r3, [r7, #14]
 80064f4:	e001      	b.n	80064fa <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 80064f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <findCategoryIndex>:

/*************************************************
 *                   Helper API                  *
 *************************************************/
static int findCategoryIndex(const char* cat, const char* categories[], int catCount) {
 8006506:	b580      	push	{r7, lr}
 8006508:	b086      	sub	sp, #24
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < catCount; i++) {
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	e010      	b.n	800653a <findCategoryIndex+0x34>
        if (strcmp(cat, categories[i]) == 0) {
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	4413      	add	r3, r2
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7f9 fedb 	bl	80002e0 <strcmp>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <findCategoryIndex+0x2e>
            return i;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	e008      	b.n	8006546 <findCategoryIndex+0x40>
    for (int i = 0; i < catCount; i++) {
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	3301      	adds	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	429a      	cmp	r2, r3
 8006540:	dbea      	blt.n	8006518 <findCategoryIndex+0x12>
        }
    }
    return -1;
 8006542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <printAlignedColumn>:

static void printAlignedColumn(EmbeddedCli *cli, const char *str, int colWidth) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
    int len = strlen(str);
 800655c:	68b8      	ldr	r0, [r7, #8]
 800655e:	f7f9 fec9 	bl	80002f4 <strlen>
 8006562:	4603      	mov	r3, r0
 8006564:	613b      	str	r3, [r7, #16]
    writeToOutput(cli, str);
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f7ff fdb0 	bl	80060ce <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	e006      	b.n	8006582 <printAlignedColumn+0x32>
        writeToOutput(cli, " ");
 8006574:	4908      	ldr	r1, [pc, #32]	@ (8006598 <printAlignedColumn+0x48>)
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f7ff fda9 	bl	80060ce <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	3301      	adds	r3, #1
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	429a      	cmp	r2, r3
 800658c:	dbf2      	blt.n	8006574 <printAlignedColumn+0x24>
    }
}
 800658e:	bf00      	nop
 8006590:	bf00      	nop
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	08024f1c 	.word	0x08024f1c

0800659c <CMD_Help>:

void CMD_Help(EmbeddedCli *cli, char *tokens, void *context) {
 800659c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065a0:	b095      	sub	sp, #84	@ 0x54
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	637b      	str	r3, [r7, #52]	@ 0x34

    if (impl->bindingsCount == 0) {
 80065b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10a      	bne.n	80065ce <CMD_Help+0x32>
        writeToOutput(cli, "Help is not available");
 80065b8:	4982      	ldr	r1, [pc, #520]	@ (80067c4 <CMD_Help+0x228>)
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f7ff fd87 	bl	80060ce <writeToOutput>
        writeToOutput(cli, lineBreak);
 80065c0:	4b81      	ldr	r3, [pc, #516]	@ (80067c8 <CMD_Help+0x22c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4619      	mov	r1, r3
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff fd81 	bl	80060ce <writeToOutput>
        return;
 80065cc:	e1a3      	b.n	8006916 <CMD_Help+0x37a>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 80065ce:	68b8      	ldr	r0, [r7, #8]
 80065d0:	f7ff f866 	bl	80056a0 <embeddedCliGetTokenCount>
 80065d4:	4603      	mov	r3, r0
 80065d6:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (tokenCount == 0) {
 80065d8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f040 80e2 	bne.w	80067a4 <CMD_Help+0x208>
 80065e0:	466b      	mov	r3, sp
 80065e2:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 80065e4:	2320      	movs	r3, #32
 80065e6:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char* categories[MAX_CAT];
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ea:	3b01      	subs	r3, #1
 80065ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f0:	2200      	movs	r2, #0
 80065f2:	4698      	mov	r8, r3
 80065f4:	4691      	mov	r9, r2
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8006602:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8006606:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800660a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660c:	2200      	movs	r2, #0
 800660e:	461c      	mov	r4, r3
 8006610:	4615      	mov	r5, r2
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	f04f 0300 	mov.w	r3, #0
 800661a:	016b      	lsls	r3, r5, #5
 800661c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006620:	0162      	lsls	r2, r4, #5
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	3307      	adds	r3, #7
 8006628:	08db      	lsrs	r3, r3, #3
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	ebad 0d03 	sub.w	sp, sp, r3
 8006630:	466b      	mov	r3, sp
 8006632:	3303      	adds	r3, #3
 8006634:	089b      	lsrs	r3, r3, #2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	623b      	str	r3, [r7, #32]
        int catCount = 0;
 800663a:	2300      	movs	r3, #0
 800663c:	64fb      	str	r3, [r7, #76]	@ 0x4c

        for (int i = 0; i < impl->bindingsCount; i++) {
 800663e:	2300      	movs	r3, #0
 8006640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006642:	e023      	b.n	800668c <CMD_Help+0xf0>
            const char* cat = impl->bindings[i].category;
 8006644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006646:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006648:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800664a:	4613      	mov	r3, r2
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	4413      	add	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	440b      	add	r3, r1
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	61bb      	str	r3, [r7, #24]
            if (cat != NULL) {
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d013      	beq.n	8006686 <CMD_Help+0xea>
                int idx = findCategoryIndex(cat, categories, catCount);
 800665e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006660:	6a39      	ldr	r1, [r7, #32]
 8006662:	69b8      	ldr	r0, [r7, #24]
 8006664:	f7ff ff4f 	bl	8006506 <findCategoryIndex>
 8006668:	6178      	str	r0, [r7, #20]
                if (idx < 0 && catCount < MAX_CAT) {
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	da0a      	bge.n	8006686 <CMD_Help+0xea>
 8006670:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	429a      	cmp	r2, r3
 8006676:	da06      	bge.n	8006686 <CMD_Help+0xea>
                    categories[catCount++] = cat;
 8006678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800667e:	6a3a      	ldr	r2, [r7, #32]
 8006680:	69b9      	ldr	r1, [r7, #24]
 8006682:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < impl->bindingsCount; i++) {
 8006686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006688:	3301      	adds	r3, #1
 800668a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800668c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006690:	461a      	mov	r2, r3
 8006692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006694:	4293      	cmp	r3, r2
 8006696:	dbd5      	blt.n	8006644 <CMD_Help+0xa8>
                }
            }
        }

        for (int c = 0; c < catCount; c++) {
 8006698:	2300      	movs	r3, #0
 800669a:	647b      	str	r3, [r7, #68]	@ 0x44
 800669c:	e07b      	b.n	8006796 <CMD_Help+0x1fa>
            writeToOutput(cli, "[");
 800669e:	494b      	ldr	r1, [pc, #300]	@ (80067cc <CMD_Help+0x230>)
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff fd14 	bl	80060ce <writeToOutput>
            writeToOutput(cli, categories[c]);
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ae:	4619      	mov	r1, r3
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f7ff fd0c 	bl	80060ce <writeToOutput>
            writeToOutput(cli, "]");
 80066b6:	4946      	ldr	r1, [pc, #280]	@ (80067d0 <CMD_Help+0x234>)
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff fd08 	bl	80060ce <writeToOutput>
            writeToOutput(cli, lineBreak);
 80066be:	4b42      	ldr	r3, [pc, #264]	@ (80067c8 <CMD_Help+0x22c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff fd02 	bl	80060ce <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 80066ca:	2300      	movs	r3, #0
 80066cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ce:	e053      	b.n	8006778 <CMD_Help+0x1dc>
                const char* cmdCat = impl->bindings[i].category;
 80066d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80066d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066d6:	4613      	mov	r3, r2
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	4413      	add	r3, r2
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	440b      	add	r3, r1
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	61fb      	str	r3, [r7, #28]
                if (cmdCat != NULL && strcmp(cmdCat, categories[c]) == 0) {
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d043      	beq.n	8006772 <CMD_Help+0x1d6>
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	4619      	mov	r1, r3
 80066f4:	69f8      	ldr	r0, [r7, #28]
 80066f6:	f7f9 fdf3 	bl	80002e0 <strcmp>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d138      	bne.n	8006772 <CMD_Help+0x1d6>
                    writeToOutput(cli, "    ");
 8006700:	4934      	ldr	r1, [pc, #208]	@ (80067d4 <CMD_Help+0x238>)
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7ff fce3 	bl	80060ce <writeToOutput>
                    printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 8006708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800670c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800670e:	4613      	mov	r3, r2
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	4413      	add	r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	440b      	add	r3, r1
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2210      	movs	r2, #16
 800671c:	4619      	mov	r1, r3
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff ff16 	bl	8006550 <printAlignedColumn>
                    writeToOutput(cli, "| ");
 8006724:	492c      	ldr	r1, [pc, #176]	@ (80067d8 <CMD_Help+0x23c>)
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff fcd1 	bl	80060ce <writeToOutput>
                    if (impl->bindings[i].help) {
 800672c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800672e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006730:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006732:	4613      	mov	r3, r2
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	4413      	add	r3, r2
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	440b      	add	r3, r1
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00d      	beq.n	800675e <CMD_Help+0x1c2>
                        writeToOutput(cli, impl->bindings[i].help);
 8006742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006744:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006746:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006748:	4613      	mov	r3, r2
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	4413      	add	r3, r2
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	440b      	add	r3, r1
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	4619      	mov	r1, r3
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f7ff fcb9 	bl	80060ce <writeToOutput>
 800675c:	e003      	b.n	8006766 <CMD_Help+0x1ca>
                    } else {
                        writeToOutput(cli, "(no help)");
 800675e:	491f      	ldr	r1, [pc, #124]	@ (80067dc <CMD_Help+0x240>)
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7ff fcb4 	bl	80060ce <writeToOutput>
                    }
                    writeToOutput(cli, lineBreak);
 8006766:	4b18      	ldr	r3, [pc, #96]	@ (80067c8 <CMD_Help+0x22c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4619      	mov	r1, r3
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff fcae 	bl	80060ce <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 8006772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006774:	3301      	adds	r3, #1
 8006776:	643b      	str	r3, [r7, #64]	@ 0x40
 8006778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800677c:	461a      	mov	r2, r3
 800677e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006780:	4293      	cmp	r3, r2
 8006782:	dba5      	blt.n	80066d0 <CMD_Help+0x134>
                }
            }
            writeToOutput(cli, lineBreak);
 8006784:	4b10      	ldr	r3, [pc, #64]	@ (80067c8 <CMD_Help+0x22c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4619      	mov	r1, r3
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff fc9f 	bl	80060ce <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 8006790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006792:	3301      	adds	r3, #1
 8006794:	647b      	str	r3, [r7, #68]	@ 0x44
 8006796:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800679a:	429a      	cmp	r2, r3
 800679c:	f6ff af7f 	blt.w	800669e <CMD_Help+0x102>
 80067a0:	46b5      	mov	sp, r6
 80067a2:	e0b8      	b.n	8006916 <CMD_Help+0x37a>
        }
    } else if (tokenCount == 1) {
 80067a4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	f040 80ab 	bne.w	8006902 <CMD_Help+0x366>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 80067ac:	2101      	movs	r1, #1
 80067ae:	68b8      	ldr	r0, [r7, #8]
 80067b0:	f7fe ff40 	bl	8005634 <embeddedCliGetToken>
 80067b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool found = false;
 80067b6:	2300      	movs	r3, #0
 80067b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80067bc:	2300      	movs	r3, #0
 80067be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067c0:	e08c      	b.n	80068dc <CMD_Help+0x340>
 80067c2:	bf00      	nop
 80067c4:	08024f38 	.word	0x08024f38
 80067c8:	240148a0 	.word	0x240148a0
 80067cc:	08024f50 	.word	0x08024f50
 80067d0:	08024f54 	.word	0x08024f54
 80067d4:	08024f58 	.word	0x08024f58
 80067d8:	08024f60 	.word	0x08024f60
 80067dc:	08024f64 	.word	0x08024f64
            if (impl->bindings[i].category == NULL) continue;
 80067e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80067e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067e6:	4613      	mov	r3, r2
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	4413      	add	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	440b      	add	r3, r1
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d06e      	beq.n	80068d4 <CMD_Help+0x338>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 80067f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80067fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067fc:	4613      	mov	r3, r2
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	4413      	add	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	440b      	add	r3, r1
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800680a:	4618      	mov	r0, r3
 800680c:	f7f9 fd68 	bl	80002e0 <strcmp>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d15f      	bne.n	80068d6 <CMD_Help+0x33a>
                found = true;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                writeToOutput(cli, "Command: ");
 800681c:	4940      	ldr	r1, [pc, #256]	@ (8006920 <CMD_Help+0x384>)
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f7ff fc55 	bl	80060ce <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 8006824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006826:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800682a:	4613      	mov	r3, r2
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	4413      	add	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	440b      	add	r3, r1
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4619      	mov	r1, r3
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f7ff fc48 	bl	80060ce <writeToOutput>
                writeToOutput(cli, lineBreak);
 800683e:	4b39      	ldr	r3, [pc, #228]	@ (8006924 <CMD_Help+0x388>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4619      	mov	r1, r3
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f7ff fc42 	bl	80060ce <writeToOutput>

                writeToOutput(cli, "Category: ");
 800684a:	4937      	ldr	r1, [pc, #220]	@ (8006928 <CMD_Help+0x38c>)
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff fc3e 	bl	80060ce <writeToOutput>
                writeToOutput(cli, impl->bindings[i].category);
 8006852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006854:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006856:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006858:	4613      	mov	r3, r2
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	4413      	add	r3, r2
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	440b      	add	r3, r1
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4619      	mov	r1, r3
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff fc31 	bl	80060ce <writeToOutput>
                writeToOutput(cli, lineBreak);
 800686c:	4b2d      	ldr	r3, [pc, #180]	@ (8006924 <CMD_Help+0x388>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4619      	mov	r1, r3
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7ff fc2b 	bl	80060ce <writeToOutput>

                if (impl->bindings[i].help) {
 8006878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800687c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800687e:	4613      	mov	r3, r2
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	4413      	add	r3, r2
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	440b      	add	r3, r1
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d017      	beq.n	80068be <CMD_Help+0x322>
                    writeToOutput(cli, "Help: ");
 800688e:	4927      	ldr	r1, [pc, #156]	@ (800692c <CMD_Help+0x390>)
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7ff fc1c 	bl	80060ce <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 8006896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006898:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800689a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800689c:	4613      	mov	r3, r2
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	4413      	add	r3, r2
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	440b      	add	r3, r1
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	4619      	mov	r1, r3
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f7ff fc0f 	bl	80060ce <writeToOutput>
                    writeToOutput(cli, lineBreak);
 80068b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006924 <CMD_Help+0x388>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4619      	mov	r1, r3
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff fc09 	bl	80060ce <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 80068bc:	e015      	b.n	80068ea <CMD_Help+0x34e>
                    writeToOutput(cli, "(no help)");
 80068be:	491c      	ldr	r1, [pc, #112]	@ (8006930 <CMD_Help+0x394>)
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff fc04 	bl	80060ce <writeToOutput>
                    writeToOutput(cli, lineBreak);
 80068c6:	4b17      	ldr	r3, [pc, #92]	@ (8006924 <CMD_Help+0x388>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4619      	mov	r1, r3
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f7ff fbfe 	bl	80060ce <writeToOutput>
                break;
 80068d2:	e00a      	b.n	80068ea <CMD_Help+0x34e>
            if (impl->bindings[i].category == NULL) continue;
 80068d4:	bf00      	nop
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80068d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d8:	3301      	adds	r3, #1
 80068da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068e0:	461a      	mov	r2, r3
 80068e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e4:	4293      	cmp	r3, r2
 80068e6:	f6ff af7b 	blt.w	80067e0 <CMD_Help+0x244>
            }
        }
        if (!found) {
 80068ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80068ee:	f083 0301 	eor.w	r3, r3, #1
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00e      	beq.n	8006916 <CMD_Help+0x37a>
            onUnknownCommand(cli, cmdName);
 80068f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 fa1a 	bl	8006d34 <onUnknownCommand>
 8006900:	e009      	b.n	8006916 <CMD_Help+0x37a>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8006902:	490c      	ldr	r1, [pc, #48]	@ (8006934 <CMD_Help+0x398>)
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff fbe2 	bl	80060ce <writeToOutput>
        writeToOutput(cli, lineBreak);
 800690a:	4b06      	ldr	r3, [pc, #24]	@ (8006924 <CMD_Help+0x388>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4619      	mov	r1, r3
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7ff fbdc 	bl	80060ce <writeToOutput>
    }
}
 8006916:	3754      	adds	r7, #84	@ 0x54
 8006918:	46bd      	mov	sp, r7
 800691a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800691e:	bf00      	nop
 8006920:	08024f70 	.word	0x08024f70
 8006924:	240148a0 	.word	0x240148a0
 8006928:	08024f7c 	.word	0x08024f7c
 800692c:	08024f88 	.word	0x08024f88
 8006930:	08024f64 	.word	0x08024f64
 8006934:	08024f90 	.word	0x08024f90

08006938 <CMD_Dev>:

void CMD_Dev(EmbeddedCli *cli, char *tokens, void *context) {
 8006938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800693c:	b097      	sub	sp, #92	@ 0x5c
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (impl->bindingsCount == 0) {
 800694c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800694e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <CMD_Dev+0x32>
        writeToOutput(cli, "No development commands available");
 8006954:	4993      	ldr	r1, [pc, #588]	@ (8006ba4 <CMD_Dev+0x26c>)
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff fbb9 	bl	80060ce <writeToOutput>
        writeToOutput(cli, lineBreak);
 800695c:	4b92      	ldr	r3, [pc, #584]	@ (8006ba8 <CMD_Dev+0x270>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4619      	mov	r1, r3
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff fbb3 	bl	80060ce <writeToOutput>
        return;
 8006968:	e1cf      	b.n	8006d0a <CMD_Dev+0x3d2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 800696a:	68b8      	ldr	r0, [r7, #8]
 800696c:	f7fe fe98 	bl	80056a0 <embeddedCliGetTokenCount>
 8006970:	4603      	mov	r3, r0
 8006972:	877b      	strh	r3, [r7, #58]	@ 0x3a
    if (tokenCount == 0) {
 8006974:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006976:	2b00      	cmp	r3, #0
 8006978:	f040 8105 	bne.w	8006b86 <CMD_Dev+0x24e>
 800697c:	466b      	mov	r3, sp
 800697e:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 8006980:	2320      	movs	r3, #32
 8006982:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const char* categories[MAX_CAT];
 8006984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006986:	3b01      	subs	r3, #1
 8006988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800698a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698c:	2200      	movs	r2, #0
 800698e:	4698      	mov	r8, r3
 8006990:	4691      	mov	r9, r2
 8006992:	f04f 0200 	mov.w	r2, #0
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800699e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80069a2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80069a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a8:	2200      	movs	r2, #0
 80069aa:	461c      	mov	r4, r3
 80069ac:	4615      	mov	r5, r2
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	016b      	lsls	r3, r5, #5
 80069b8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80069bc:	0162      	lsls	r2, r4, #5
 80069be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	3307      	adds	r3, #7
 80069c4:	08db      	lsrs	r3, r3, #3
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	ebad 0d03 	sub.w	sp, sp, r3
 80069cc:	466b      	mov	r3, sp
 80069ce:	3303      	adds	r3, #3
 80069d0:	089b      	lsrs	r3, r3, #2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	627b      	str	r3, [r7, #36]	@ 0x24
        int catCount = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	657b      	str	r3, [r7, #84]	@ 0x54

        for (int i = 0; i < impl->bindingsCount; i++) {
 80069da:	2300      	movs	r3, #0
 80069dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80069de:	e033      	b.n	8006a48 <CMD_Dev+0x110>
            const char* cat = impl->bindings[i].category;
 80069e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80069e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80069e6:	4613      	mov	r3, r2
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	4413      	add	r3, r2
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	440b      	add	r3, r1
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	61bb      	str	r3, [r7, #24]
            if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d006      	beq.n	8006a08 <CMD_Dev+0xd0>
 80069fa:	496c      	ldr	r1, [pc, #432]	@ (8006bac <CMD_Dev+0x274>)
 80069fc:	69b8      	ldr	r0, [r7, #24]
 80069fe:	f7f9 fc6f 	bl	80002e0 <strcmp>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11b      	bne.n	8006a40 <CMD_Dev+0x108>
            const char* display_cat = (cat == NULL) ? "Deployment" : cat;
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <CMD_Dev+0xda>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	e000      	b.n	8006a14 <CMD_Dev+0xdc>
 8006a12:	4b67      	ldr	r3, [pc, #412]	@ (8006bb0 <CMD_Dev+0x278>)
 8006a14:	617b      	str	r3, [r7, #20]
            int idx = findCategoryIndex(display_cat, categories, catCount);
 8006a16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a1a:	6978      	ldr	r0, [r7, #20]
 8006a1c:	f7ff fd73 	bl	8006506 <findCategoryIndex>
 8006a20:	6138      	str	r0, [r7, #16]
            if (idx < 0 && catCount < MAX_CAT) {
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	da0c      	bge.n	8006a42 <CMD_Dev+0x10a>
 8006a28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	da08      	bge.n	8006a42 <CMD_Dev+0x10a>
                categories[catCount++] = display_cat;
 8006a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	657a      	str	r2, [r7, #84]	@ 0x54
 8006a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a38:	6979      	ldr	r1, [r7, #20]
 8006a3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8006a3e:	e000      	b.n	8006a42 <CMD_Dev+0x10a>
            if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 8006a40:	bf00      	nop
        for (int i = 0; i < impl->bindingsCount; i++) {
 8006a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a44:	3301      	adds	r3, #1
 8006a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a50:	4293      	cmp	r3, r2
 8006a52:	dbc5      	blt.n	80069e0 <CMD_Dev+0xa8>
            }
        }

        if (catCount == 0) {
 8006a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <CMD_Dev+0x13a>
            writeToOutput(cli, "No development commands available");
 8006a5a:	4952      	ldr	r1, [pc, #328]	@ (8006ba4 <CMD_Dev+0x26c>)
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f7ff fb36 	bl	80060ce <writeToOutput>
            writeToOutput(cli, lineBreak);
 8006a62:	4b51      	ldr	r3, [pc, #324]	@ (8006ba8 <CMD_Dev+0x270>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4619      	mov	r1, r3
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f7ff fb30 	bl	80060ce <writeToOutput>
            return;
 8006a6e:	46b5      	mov	sp, r6
 8006a70:	e14b      	b.n	8006d0a <CMD_Dev+0x3d2>
        }

        for (int c = 0; c < catCount; c++) {
 8006a72:	2300      	movs	r3, #0
 8006a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a76:	e07f      	b.n	8006b78 <CMD_Dev+0x240>
            writeToOutput(cli, "[");
 8006a78:	494e      	ldr	r1, [pc, #312]	@ (8006bb4 <CMD_Dev+0x27c>)
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7ff fb27 	bl	80060ce <writeToOutput>
            writeToOutput(cli, categories[c]);
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff fb1f 	bl	80060ce <writeToOutput>
            writeToOutput(cli, "]");
 8006a90:	4949      	ldr	r1, [pc, #292]	@ (8006bb8 <CMD_Dev+0x280>)
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7ff fb1b 	bl	80060ce <writeToOutput>
            writeToOutput(cli, lineBreak);
 8006a98:	4b43      	ldr	r3, [pc, #268]	@ (8006ba8 <CMD_Dev+0x270>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7ff fb15 	bl	80060ce <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa8:	e057      	b.n	8006b5a <CMD_Dev+0x222>
                const char* cmdCat = impl->bindings[i].category;
 8006aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	4413      	add	r3, r2
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	440b      	add	r3, r1
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	623b      	str	r3, [r7, #32]
                const char* display_cmdCat = (cmdCat == NULL) ? "Deployment" : cmdCat;
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <CMD_Dev+0x190>
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	e000      	b.n	8006aca <CMD_Dev+0x192>
 8006ac8:	4b39      	ldr	r3, [pc, #228]	@ (8006bb0 <CMD_Dev+0x278>)
 8006aca:	61fb      	str	r3, [r7, #28]
                if (strcmp(display_cmdCat, categories[c]) == 0) {
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	69f8      	ldr	r0, [r7, #28]
 8006ad8:	f7f9 fc02 	bl	80002e0 <strcmp>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d138      	bne.n	8006b54 <CMD_Dev+0x21c>
                    writeToOutput(cli, "    ");
 8006ae2:	4936      	ldr	r1, [pc, #216]	@ (8006bbc <CMD_Dev+0x284>)
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff faf2 	bl	80060ce <writeToOutput>
                    printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 8006aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006af0:	4613      	mov	r3, r2
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	4413      	add	r3, r2
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	440b      	add	r3, r1
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2210      	movs	r2, #16
 8006afe:	4619      	mov	r1, r3
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f7ff fd25 	bl	8006550 <printAlignedColumn>
                    writeToOutput(cli, "| ");
 8006b06:	492e      	ldr	r1, [pc, #184]	@ (8006bc0 <CMD_Dev+0x288>)
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff fae0 	bl	80060ce <writeToOutput>
                    if (impl->bindings[i].help) {
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b10:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b14:	4613      	mov	r3, r2
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	4413      	add	r3, r2
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	440b      	add	r3, r1
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00d      	beq.n	8006b40 <CMD_Dev+0x208>
                        writeToOutput(cli, impl->bindings[i].help);
 8006b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b26:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006b28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	440b      	add	r3, r1
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	4619      	mov	r1, r3
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7ff fac8 	bl	80060ce <writeToOutput>
 8006b3e:	e003      	b.n	8006b48 <CMD_Dev+0x210>
                    } else {
                        writeToOutput(cli, "(no help)");
 8006b40:	4920      	ldr	r1, [pc, #128]	@ (8006bc4 <CMD_Dev+0x28c>)
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7ff fac3 	bl	80060ce <writeToOutput>
                    }
                    writeToOutput(cli, lineBreak);
 8006b48:	4b17      	ldr	r3, [pc, #92]	@ (8006ba8 <CMD_Dev+0x270>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f7ff fabd 	bl	80060ce <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 8006b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b56:	3301      	adds	r3, #1
 8006b58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b62:	4293      	cmp	r3, r2
 8006b64:	dba1      	blt.n	8006aaa <CMD_Dev+0x172>
                }
            }
            writeToOutput(cli, lineBreak);
 8006b66:	4b10      	ldr	r3, [pc, #64]	@ (8006ba8 <CMD_Dev+0x270>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff faae 	bl	80060ce <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 8006b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b74:	3301      	adds	r3, #1
 8006b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	f6ff af7b 	blt.w	8006a78 <CMD_Dev+0x140>
 8006b82:	46b5      	mov	sp, r6
 8006b84:	e0c1      	b.n	8006d0a <CMD_Dev+0x3d2>
        }
    } else if (tokenCount == 1) {
 8006b86:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	f040 80b4 	bne.w	8006cf6 <CMD_Dev+0x3be>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8006b8e:	2101      	movs	r1, #1
 8006b90:	68b8      	ldr	r0, [r7, #8]
 8006b92:	f7fe fd4f 	bl	8005634 <embeddedCliGetToken>
 8006b96:	6378      	str	r0, [r7, #52]	@ 0x34
        bool found = false;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ba2:	e095      	b.n	8006cd0 <CMD_Dev+0x398>
 8006ba4:	08024fc0 	.word	0x08024fc0
 8006ba8:	240148a0 	.word	0x240148a0
 8006bac:	08024fe4 	.word	0x08024fe4
 8006bb0:	08024fe8 	.word	0x08024fe8
 8006bb4:	08024f50 	.word	0x08024f50
 8006bb8:	08024f54 	.word	0x08024f54
 8006bbc:	08024f58 	.word	0x08024f58
 8006bc0:	08024f60 	.word	0x08024f60
 8006bc4:	08024f64 	.word	0x08024f64
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8006bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006bcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bce:	4613      	mov	r3, r2
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4413      	add	r3, r2
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	440b      	add	r3, r1
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7f9 fb7f 	bl	80002e0 <strcmp>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d170      	bne.n	8006cca <CMD_Dev+0x392>
                const char* cat = impl->bindings[i].category;
 8006be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006bec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bee:	4613      	mov	r3, r2
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	4413      	add	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	440b      	add	r3, r1
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	633b      	str	r3, [r7, #48]	@ 0x30
                if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d006      	beq.n	8006c10 <CMD_Dev+0x2d8>
 8006c02:	4944      	ldr	r1, [pc, #272]	@ (8006d14 <CMD_Dev+0x3dc>)
 8006c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c06:	f7f9 fb6b 	bl	80002e0 <strcmp>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d15b      	bne.n	8006cc8 <CMD_Dev+0x390>
                found = true;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                writeToOutput(cli, "Command: ");
 8006c16:	4940      	ldr	r1, [pc, #256]	@ (8006d18 <CMD_Dev+0x3e0>)
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7ff fa58 	bl	80060ce <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 8006c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c20:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c24:	4613      	mov	r3, r2
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	4413      	add	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	440b      	add	r3, r1
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4619      	mov	r1, r3
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff fa4b 	bl	80060ce <writeToOutput>
                writeToOutput(cli, lineBreak);
 8006c38:	4b38      	ldr	r3, [pc, #224]	@ (8006d1c <CMD_Dev+0x3e4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff fa45 	bl	80060ce <writeToOutput>

                writeToOutput(cli, "Category: ");
 8006c44:	4936      	ldr	r1, [pc, #216]	@ (8006d20 <CMD_Dev+0x3e8>)
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff fa41 	bl	80060ce <writeToOutput>
                writeToOutput(cli, cat ? cat : "Deployment");
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <CMD_Dev+0x31e>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	e000      	b.n	8006c58 <CMD_Dev+0x320>
 8006c56:	4b33      	ldr	r3, [pc, #204]	@ (8006d24 <CMD_Dev+0x3ec>)
 8006c58:	4619      	mov	r1, r3
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f7ff fa37 	bl	80060ce <writeToOutput>
                writeToOutput(cli, lineBreak);
 8006c60:	4b2e      	ldr	r3, [pc, #184]	@ (8006d1c <CMD_Dev+0x3e4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4619      	mov	r1, r3
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff fa31 	bl	80060ce <writeToOutput>

                if (impl->bindings[i].help) {
 8006c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c6e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c72:	4613      	mov	r3, r2
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	4413      	add	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	440b      	add	r3, r1
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d017      	beq.n	8006cb2 <CMD_Dev+0x37a>
                    writeToOutput(cli, "Help: ");
 8006c82:	4929      	ldr	r1, [pc, #164]	@ (8006d28 <CMD_Dev+0x3f0>)
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff fa22 	bl	80060ce <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 8006c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c8c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006c8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c90:	4613      	mov	r3, r2
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	4413      	add	r3, r2
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	440b      	add	r3, r1
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff fa15 	bl	80060ce <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8006ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d1c <CMD_Dev+0x3e4>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7ff fa0f 	bl	80060ce <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 8006cb0:	e015      	b.n	8006cde <CMD_Dev+0x3a6>
                    writeToOutput(cli, "(no help)");
 8006cb2:	491e      	ldr	r1, [pc, #120]	@ (8006d2c <CMD_Dev+0x3f4>)
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7ff fa0a 	bl	80060ce <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8006cba:	4b18      	ldr	r3, [pc, #96]	@ (8006d1c <CMD_Dev+0x3e4>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f7ff fa04 	bl	80060ce <writeToOutput>
                break;
 8006cc6:	e00a      	b.n	8006cde <CMD_Dev+0x3a6>
                if (cat != NULL && strcmp(cat, "Dev") != 0) continue;
 8006cc8:	bf00      	nop
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8006cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ccc:	3301      	adds	r3, #1
 8006cce:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	f6ff af75 	blt.w	8006bc8 <CMD_Dev+0x290>
            }
        }
        if (!found) {
 8006cde:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006ce2:	f083 0301 	eor.w	r3, r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00e      	beq.n	8006d0a <CMD_Dev+0x3d2>
            onUnknownCommand(cli, cmdName);
 8006cec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f820 	bl	8006d34 <onUnknownCommand>
 8006cf4:	e009      	b.n	8006d0a <CMD_Dev+0x3d2>
        }
    } else {
        writeToOutput(cli, "Command \"dev\" receives one or zero arguments");
 8006cf6:	490e      	ldr	r1, [pc, #56]	@ (8006d30 <CMD_Dev+0x3f8>)
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f7ff f9e8 	bl	80060ce <writeToOutput>
        writeToOutput(cli, lineBreak);
 8006cfe:	4b07      	ldr	r3, [pc, #28]	@ (8006d1c <CMD_Dev+0x3e4>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4619      	mov	r1, r3
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f7ff f9e2 	bl	80060ce <writeToOutput>
    }
}
 8006d0a:	375c      	adds	r7, #92	@ 0x5c
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d12:	bf00      	nop
 8006d14:	08024fe4 	.word	0x08024fe4
 8006d18:	08024f70 	.word	0x08024f70
 8006d1c:	240148a0 	.word	0x240148a0
 8006d20:	08024f7c 	.word	0x08024f7c
 8006d24:	08024fe8 	.word	0x08024fe8
 8006d28:	08024f88 	.word	0x08024f88
 8006d2c:	08024f64 	.word	0x08024f64
 8006d30:	08024ff4 	.word	0x08024ff4

08006d34 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8006d3e:	490b      	ldr	r1, [pc, #44]	@ (8006d6c <onUnknownCommand+0x38>)
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff f9c4 	bl	80060ce <writeToOutput>
    writeToOutput(cli, name);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff f9c0 	bl	80060ce <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8006d4e:	4908      	ldr	r1, [pc, #32]	@ (8006d70 <onUnknownCommand+0x3c>)
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff f9bc 	bl	80060ce <writeToOutput>
    writeToOutput(cli, lineBreak);
 8006d56:	4b07      	ldr	r3, [pc, #28]	@ (8006d74 <onUnknownCommand+0x40>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff f9b6 	bl	80060ce <writeToOutput>
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	08025024 	.word	0x08025024
 8006d70:	08025038 	.word	0x08025038
 8006d74:	240148a0 	.word	0x240148a0

08006d78 <Dmesg_Init>:
static uint8_t *write_ptr = &_sdmesg_buffer;
static uint8_t *read_ptr = &_sdmesg_buffer;
static size_t log_count = 0;
static SemaphoreHandle_t dmesg_mutex = NULL;

void Dmesg_Init(void) {
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
    write_ptr = &_sdmesg_buffer;
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006dac <Dmesg_Init+0x34>)
 8006d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006db0 <Dmesg_Init+0x38>)
 8006d80:	601a      	str	r2, [r3, #0]
    read_ptr = &_sdmesg_buffer;
 8006d82:	4b0c      	ldr	r3, [pc, #48]	@ (8006db4 <Dmesg_Init+0x3c>)
 8006d84:	4a0a      	ldr	r2, [pc, #40]	@ (8006db0 <Dmesg_Init+0x38>)
 8006d86:	601a      	str	r2, [r3, #0]
    log_count = 0;
 8006d88:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <Dmesg_Init+0x40>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
    dmesg_mutex = xSemaphoreCreateMutex();
 8006d8e:	2001      	movs	r0, #1
 8006d90:	f009 fe05 	bl	801099e <xQueueCreateMutex>
 8006d94:	4603      	mov	r3, r0
 8006d96:	4a09      	ldr	r2, [pc, #36]	@ (8006dbc <Dmesg_Init+0x44>)
 8006d98:	6013      	str	r3, [r2, #0]
    if (dmesg_mutex == NULL) {
 8006d9a:	4b08      	ldr	r3, [pc, #32]	@ (8006dbc <Dmesg_Init+0x44>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <Dmesg_Init+0x2e>
        while (1);
 8006da2:	bf00      	nop
 8006da4:	e7fd      	b.n	8006da2 <Dmesg_Init+0x2a>
    }
}
 8006da6:	bf00      	nop
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	240148bc 	.word	0x240148bc
 8006db0:	20000000 	.word	0x20000000
 8006db4:	240148c0 	.word	0x240148c0
 8006db8:	24019370 	.word	0x24019370
 8006dbc:	24019374 	.word	0x24019374

08006dc0 <dmesg_write>:

static void dmesg_write(const char *msg, uint32_t len) {
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
    if (len > DMESG_MSG_MAX_LENGTH) len = DMESG_MSG_MAX_LENGTH;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b80      	cmp	r3, #128	@ 0x80
 8006dce:	d901      	bls.n	8006dd4 <dmesg_write+0x14>
 8006dd0:	2380      	movs	r3, #128	@ 0x80
 8006dd2:	603b      	str	r3, [r7, #0]
    if (len > 255) len = 255;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2bff      	cmp	r3, #255	@ 0xff
 8006dd8:	d901      	bls.n	8006dde <dmesg_write+0x1e>
 8006dda:	23ff      	movs	r3, #255	@ 0xff
 8006ddc:	603b      	str	r3, [r7, #0]

    uint32_t required_space = len + 1;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	3301      	adds	r3, #1
 8006de2:	60fb      	str	r3, [r7, #12]
    uint32_t space_left = (read_ptr <= write_ptr) ?
 8006de4:	4b42      	ldr	r3, [pc, #264]	@ (8006ef0 <dmesg_write+0x130>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	4b42      	ldr	r3, [pc, #264]	@ (8006ef4 <dmesg_write+0x134>)
 8006dea:	681b      	ldr	r3, [r3, #0]
                          (DMESG_BUFFER_SIZE - (write_ptr - read_ptr)) :
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d807      	bhi.n	8006e00 <dmesg_write+0x40>
 8006df0:	4b40      	ldr	r3, [pc, #256]	@ (8006ef4 <dmesg_write+0x134>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef0 <dmesg_write+0x130>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f5c3 33c0 	rsb	r3, r3, #98304	@ 0x18000
 8006dfe:	e004      	b.n	8006e0a <dmesg_write+0x4a>
                          (read_ptr - write_ptr);
 8006e00:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef0 <dmesg_write+0x130>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef4 <dmesg_write+0x134>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	1ad3      	subs	r3, r2, r3
    uint32_t space_left = (read_ptr <= write_ptr) ?
 8006e0a:	617b      	str	r3, [r7, #20]
    while (space_left < required_space && log_count > 0) {
 8006e0c:	e031      	b.n	8006e72 <dmesg_write+0xb2>
        uint8_t old_len = *read_ptr;
 8006e0e:	4b38      	ldr	r3, [pc, #224]	@ (8006ef0 <dmesg_write+0x130>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	72fb      	strb	r3, [r7, #11]
        read_ptr += old_len + 1;
 8006e16:	4b36      	ldr	r3, [pc, #216]	@ (8006ef0 <dmesg_write+0x130>)
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	4413      	add	r3, r2
 8006e20:	4a33      	ldr	r2, [pc, #204]	@ (8006ef0 <dmesg_write+0x130>)
 8006e22:	6013      	str	r3, [r2, #0]
        if (read_ptr >= &_edmesg_buffer) {
 8006e24:	4b32      	ldr	r3, [pc, #200]	@ (8006ef0 <dmesg_write+0x130>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a33      	ldr	r2, [pc, #204]	@ (8006ef8 <dmesg_write+0x138>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d308      	bcc.n	8006e40 <dmesg_write+0x80>
            read_ptr = &_sdmesg_buffer + (read_ptr - &_edmesg_buffer);
 8006e2e:	4b30      	ldr	r3, [pc, #192]	@ (8006ef0 <dmesg_write+0x130>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a31      	ldr	r2, [pc, #196]	@ (8006ef8 <dmesg_write+0x138>)
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	461a      	mov	r2, r3
 8006e38:	4b30      	ldr	r3, [pc, #192]	@ (8006efc <dmesg_write+0x13c>)
 8006e3a:	4413      	add	r3, r2
 8006e3c:	4a2c      	ldr	r2, [pc, #176]	@ (8006ef0 <dmesg_write+0x130>)
 8006e3e:	6013      	str	r3, [r2, #0]
        }
        log_count--;
 8006e40:	4b2f      	ldr	r3, [pc, #188]	@ (8006f00 <dmesg_write+0x140>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	4a2e      	ldr	r2, [pc, #184]	@ (8006f00 <dmesg_write+0x140>)
 8006e48:	6013      	str	r3, [r2, #0]
        space_left = (read_ptr <= write_ptr) ?
 8006e4a:	4b29      	ldr	r3, [pc, #164]	@ (8006ef0 <dmesg_write+0x130>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b29      	ldr	r3, [pc, #164]	@ (8006ef4 <dmesg_write+0x134>)
 8006e50:	681b      	ldr	r3, [r3, #0]
                     (DMESG_BUFFER_SIZE - (write_ptr - read_ptr)) :
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d807      	bhi.n	8006e66 <dmesg_write+0xa6>
 8006e56:	4b27      	ldr	r3, [pc, #156]	@ (8006ef4 <dmesg_write+0x134>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	4b25      	ldr	r3, [pc, #148]	@ (8006ef0 <dmesg_write+0x130>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	f5c3 33c0 	rsb	r3, r3, #98304	@ 0x18000
 8006e64:	e004      	b.n	8006e70 <dmesg_write+0xb0>
                     (read_ptr - write_ptr);
 8006e66:	4b22      	ldr	r3, [pc, #136]	@ (8006ef0 <dmesg_write+0x130>)
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	4b22      	ldr	r3, [pc, #136]	@ (8006ef4 <dmesg_write+0x134>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	1ad3      	subs	r3, r2, r3
        space_left = (read_ptr <= write_ptr) ?
 8006e70:	617b      	str	r3, [r7, #20]
    while (space_left < required_space && log_count > 0) {
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d203      	bcs.n	8006e82 <dmesg_write+0xc2>
 8006e7a:	4b21      	ldr	r3, [pc, #132]	@ (8006f00 <dmesg_write+0x140>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1c5      	bne.n	8006e0e <dmesg_write+0x4e>
    }

    *write_ptr++ = (uint8_t)len;
 8006e82:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef4 <dmesg_write+0x134>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	491a      	ldr	r1, [pc, #104]	@ (8006ef4 <dmesg_write+0x134>)
 8006e8a:	600a      	str	r2, [r1, #0]
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]
    if (write_ptr >= &_edmesg_buffer) {
 8006e92:	4b18      	ldr	r3, [pc, #96]	@ (8006ef4 <dmesg_write+0x134>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a18      	ldr	r2, [pc, #96]	@ (8006ef8 <dmesg_write+0x138>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d302      	bcc.n	8006ea2 <dmesg_write+0xe2>
        write_ptr = &_sdmesg_buffer;
 8006e9c:	4b15      	ldr	r3, [pc, #84]	@ (8006ef4 <dmesg_write+0x134>)
 8006e9e:	4a17      	ldr	r2, [pc, #92]	@ (8006efc <dmesg_write+0x13c>)
 8006ea0:	601a      	str	r2, [r3, #0]
    }

    for (uint32_t i = 0; i < len; i++) {
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	613b      	str	r3, [r7, #16]
 8006ea6:	e014      	b.n	8006ed2 <dmesg_write+0x112>
        *write_ptr++ = msg[i];
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	441a      	add	r2, r3
 8006eae:	4b11      	ldr	r3, [pc, #68]	@ (8006ef4 <dmesg_write+0x134>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	1c59      	adds	r1, r3, #1
 8006eb4:	480f      	ldr	r0, [pc, #60]	@ (8006ef4 <dmesg_write+0x134>)
 8006eb6:	6001      	str	r1, [r0, #0]
 8006eb8:	7812      	ldrb	r2, [r2, #0]
 8006eba:	701a      	strb	r2, [r3, #0]
        if (write_ptr >= &_edmesg_buffer) {
 8006ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef4 <dmesg_write+0x134>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8006ef8 <dmesg_write+0x138>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d302      	bcc.n	8006ecc <dmesg_write+0x10c>
            write_ptr = &_sdmesg_buffer;
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef4 <dmesg_write+0x134>)
 8006ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8006efc <dmesg_write+0x13c>)
 8006eca:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++) {
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d3e6      	bcc.n	8006ea8 <dmesg_write+0xe8>
        }
    }
    log_count++;
 8006eda:	4b09      	ldr	r3, [pc, #36]	@ (8006f00 <dmesg_write+0x140>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	4a07      	ldr	r2, [pc, #28]	@ (8006f00 <dmesg_write+0x140>)
 8006ee2:	6013      	str	r3, [r2, #0]
}
 8006ee4:	bf00      	nop
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	240148c0 	.word	0x240148c0
 8006ef4:	240148bc 	.word	0x240148bc
 8006ef8:	20018000 	.word	0x20018000
 8006efc:	20000000 	.word	0x20000000
 8006f00:	24019370 	.word	0x24019370

08006f04 <Dmesg_HardWrite>:

void Dmesg_HardWrite(const char *msg) {
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
    uint32_t len = strlen(msg);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7f9 f9f1 	bl	80002f4 <strlen>
 8006f12:	60f8      	str	r0, [r7, #12]
    dmesg_write(msg, len);
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff ff52 	bl	8006dc0 <dmesg_write>
}
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <Dmesg_SafeWrite>:

void Dmesg_SafeWrite(const char *msg) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
    if (dmesg_mutex != NULL && xSemaphoreTake(dmesg_mutex, portMAX_DELAY) == pdTRUE) {
 8006f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <Dmesg_SafeWrite+0x40>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d013      	beq.n	8006f5c <Dmesg_SafeWrite+0x38>
 8006f34:	4b0b      	ldr	r3, [pc, #44]	@ (8006f64 <Dmesg_SafeWrite+0x40>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f04f 31ff 	mov.w	r1, #4294967295
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f009 ffeb 	bl	8010f18 <xQueueSemaphoreTake>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d109      	bne.n	8006f5c <Dmesg_SafeWrite+0x38>
        Dmesg_HardWrite(msg);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff ffdb 	bl	8006f04 <Dmesg_HardWrite>
        xSemaphoreGive(dmesg_mutex);
 8006f4e:	4b05      	ldr	r3, [pc, #20]	@ (8006f64 <Dmesg_SafeWrite+0x40>)
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	2300      	movs	r3, #0
 8006f54:	2200      	movs	r2, #0
 8006f56:	2100      	movs	r1, #0
 8006f58:	f009 fd3a 	bl	80109d0 <xQueueGenericSend>
    }
}
 8006f5c:	bf00      	nop
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	24019374 	.word	0x24019374

08006f68 <dmesg_print_entry>:

static void dmesg_print_entry(uint8_t **ptr, EmbeddedCli *cli) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b0a6      	sub	sp, #152	@ 0x98
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
    uint8_t len = **ptr;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    (*ptr)++;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	601a      	str	r2, [r3, #0]
    if (*ptr >= &_edmesg_buffer) {
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a23      	ldr	r2, [pc, #140]	@ (8007018 <dmesg_print_entry+0xb0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d302      	bcc.n	8006f96 <dmesg_print_entry+0x2e>
        *ptr = &_sdmesg_buffer;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a22      	ldr	r2, [pc, #136]	@ (800701c <dmesg_print_entry+0xb4>)
 8006f94:	601a      	str	r2, [r3, #0]
    }
    char buffer[DMESG_MSG_MAX_LENGTH + 1];
    size_t copy_len = (len < sizeof(buffer) - 1) ? len : sizeof(buffer) - 1;
 8006f96:	f997 3093 	ldrsb.w	r3, [r7, #147]	@ 0x93
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	db02      	blt.n	8006fa4 <dmesg_print_entry+0x3c>
 8006f9e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8006fa2:	e000      	b.n	8006fa6 <dmesg_print_entry+0x3e>
 8006fa4:	2380      	movs	r3, #128	@ 0x80
 8006fa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    for (size_t i = 0; i < copy_len; i++) {
 8006faa:	2300      	movs	r3, #0
 8006fac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006fb0:	e01b      	b.n	8006fea <dmesg_print_entry+0x82>
        buffer[i] = **ptr;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	7819      	ldrb	r1, [r3, #0]
 8006fb8:	f107 0208 	add.w	r2, r7, #8
 8006fbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006fc0:	4413      	add	r3, r2
 8006fc2:	460a      	mov	r2, r1
 8006fc4:	701a      	strb	r2, [r3, #0]
        (*ptr)++;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	601a      	str	r2, [r3, #0]
        if (*ptr >= &_edmesg_buffer) {
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a10      	ldr	r2, [pc, #64]	@ (8007018 <dmesg_print_entry+0xb0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d302      	bcc.n	8006fe0 <dmesg_print_entry+0x78>
            *ptr = &_sdmesg_buffer;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a0f      	ldr	r2, [pc, #60]	@ (800701c <dmesg_print_entry+0xb4>)
 8006fde:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < copy_len; i++) {
 8006fe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006fea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d3dd      	bcc.n	8006fb2 <dmesg_print_entry+0x4a>
        }
    }
    buffer[copy_len] = '\0';
 8006ff6:	f107 0208 	add.w	r2, r7, #8
 8006ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ffe:	4413      	add	r3, r2
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
    embeddedCliPrint(cli, buffer);
 8007004:	f107 0308 	add.w	r3, r7, #8
 8007008:	4619      	mov	r1, r3
 800700a:	6838      	ldr	r0, [r7, #0]
 800700c:	f7fe fa50 	bl	80054b0 <embeddedCliPrint>
}
 8007010:	bf00      	nop
 8007012:	3798      	adds	r7, #152	@ 0x98
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20018000 	.word	0x20018000
 800701c:	20000000 	.word	0x20000000

08007020 <Dmesg_GetLogs>:

void Dmesg_GetLogs(EmbeddedCli *cli) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
    if (dmesg_mutex == NULL || xSemaphoreTake(dmesg_mutex, portMAX_DELAY) != pdTRUE) {
 8007028:	4b14      	ldr	r3, [pc, #80]	@ (800707c <Dmesg_GetLogs+0x5c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d020      	beq.n	8007072 <Dmesg_GetLogs+0x52>
 8007030:	4b12      	ldr	r3, [pc, #72]	@ (800707c <Dmesg_GetLogs+0x5c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f04f 31ff 	mov.w	r1, #4294967295
 8007038:	4618      	mov	r0, r3
 800703a:	f009 ff6d 	bl	8010f18 <xQueueSemaphoreTake>
 800703e:	4603      	mov	r3, r0
 8007040:	2b01      	cmp	r3, #1
 8007042:	d116      	bne.n	8007072 <Dmesg_GetLogs+0x52>
        return;
    }

    uint8_t *ptr = read_ptr;
 8007044:	4b0e      	ldr	r3, [pc, #56]	@ (8007080 <Dmesg_GetLogs+0x60>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	60fb      	str	r3, [r7, #12]
    while (ptr != write_ptr) {
 800704a:	e005      	b.n	8007058 <Dmesg_GetLogs+0x38>
        dmesg_print_entry(&ptr, cli);
 800704c:	f107 030c 	add.w	r3, r7, #12
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff ff88 	bl	8006f68 <dmesg_print_entry>
    while (ptr != write_ptr) {
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4b0a      	ldr	r3, [pc, #40]	@ (8007084 <Dmesg_GetLogs+0x64>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	d1f4      	bne.n	800704c <Dmesg_GetLogs+0x2c>
    }
    xSemaphoreGive(dmesg_mutex);
 8007062:	4b06      	ldr	r3, [pc, #24]	@ (800707c <Dmesg_GetLogs+0x5c>)
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	2300      	movs	r3, #0
 8007068:	2200      	movs	r2, #0
 800706a:	2100      	movs	r1, #0
 800706c:	f009 fcb0 	bl	80109d0 <xQueueGenericSend>
 8007070:	e000      	b.n	8007074 <Dmesg_GetLogs+0x54>
        return;
 8007072:	bf00      	nop
}
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	24019374 	.word	0x24019374
 8007080:	240148c0 	.word	0x240148c0
 8007084:	240148bc 	.word	0x240148bc

08007088 <Dmesg_GetLatestN>:

void Dmesg_GetLatestN(size_t N, EmbeddedCli *cli) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
    if (dmesg_mutex == NULL || xSemaphoreTake(dmesg_mutex, portMAX_DELAY) != pdTRUE) {
 8007092:	4b31      	ldr	r3, [pc, #196]	@ (8007158 <Dmesg_GetLatestN+0xd0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d059      	beq.n	800714e <Dmesg_GetLatestN+0xc6>
 800709a:	4b2f      	ldr	r3, [pc, #188]	@ (8007158 <Dmesg_GetLatestN+0xd0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f04f 31ff 	mov.w	r1, #4294967295
 80070a2:	4618      	mov	r0, r3
 80070a4:	f009 ff38 	bl	8010f18 <xQueueSemaphoreTake>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d14f      	bne.n	800714e <Dmesg_GetLatestN+0xc6>
        return;
    }

    if (N > log_count) N = log_count;
 80070ae:	4b2b      	ldr	r3, [pc, #172]	@ (800715c <Dmesg_GetLatestN+0xd4>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d902      	bls.n	80070be <Dmesg_GetLatestN+0x36>
 80070b8:	4b28      	ldr	r3, [pc, #160]	@ (800715c <Dmesg_GetLatestN+0xd4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	607b      	str	r3, [r7, #4]
    if (N == 0) {
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d107      	bne.n	80070d4 <Dmesg_GetLatestN+0x4c>
        xSemaphoreGive(dmesg_mutex);
 80070c4:	4b24      	ldr	r3, [pc, #144]	@ (8007158 <Dmesg_GetLatestN+0xd0>)
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	2300      	movs	r3, #0
 80070ca:	2200      	movs	r2, #0
 80070cc:	2100      	movs	r1, #0
 80070ce:	f009 fc7f 	bl	80109d0 <xQueueGenericSend>
        return;
 80070d2:	e03d      	b.n	8007150 <Dmesg_GetLatestN+0xc8>
    }

    size_t skip = log_count - N;
 80070d4:	4b21      	ldr	r3, [pc, #132]	@ (800715c <Dmesg_GetLatestN+0xd4>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	617b      	str	r3, [r7, #20]
    uint8_t *ptr = read_ptr;
 80070de:	4b20      	ldr	r3, [pc, #128]	@ (8007160 <Dmesg_GetLatestN+0xd8>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; i < skip; i++) {
 80070e4:	2300      	movs	r3, #0
 80070e6:	61fb      	str	r3, [r7, #28]
 80070e8:	e015      	b.n	8007116 <Dmesg_GetLatestN+0x8e>
        uint8_t len = *ptr;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	74fb      	strb	r3, [r7, #19]
        ptr += (len + 1);
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	7cfb      	ldrb	r3, [r7, #19]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4413      	add	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
        if (ptr >= &_edmesg_buffer) {
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4a19      	ldr	r2, [pc, #100]	@ (8007164 <Dmesg_GetLatestN+0xdc>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d306      	bcc.n	8007110 <Dmesg_GetLatestN+0x88>
            ptr = &_sdmesg_buffer + (ptr - &_edmesg_buffer);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4a17      	ldr	r2, [pc, #92]	@ (8007164 <Dmesg_GetLatestN+0xdc>)
 8007106:	1a9b      	subs	r3, r3, r2
 8007108:	461a      	mov	r2, r3
 800710a:	4b17      	ldr	r3, [pc, #92]	@ (8007168 <Dmesg_GetLatestN+0xe0>)
 800710c:	4413      	add	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < skip; i++) {
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	3301      	adds	r3, #1
 8007114:	61fb      	str	r3, [r7, #28]
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	429a      	cmp	r2, r3
 800711c:	d3e5      	bcc.n	80070ea <Dmesg_GetLatestN+0x62>
        }
    }

    for (size_t i = 0; i < N; i++) {
 800711e:	2300      	movs	r3, #0
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	e008      	b.n	8007136 <Dmesg_GetLatestN+0xae>
        dmesg_print_entry(&ptr, cli);
 8007124:	f107 030c 	add.w	r3, r7, #12
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff ff1c 	bl	8006f68 <dmesg_print_entry>
    for (size_t i = 0; i < N; i++) {
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	3301      	adds	r3, #1
 8007134:	61bb      	str	r3, [r7, #24]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	429a      	cmp	r2, r3
 800713c:	d3f2      	bcc.n	8007124 <Dmesg_GetLatestN+0x9c>
    }
    xSemaphoreGive(dmesg_mutex);
 800713e:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <Dmesg_GetLatestN+0xd0>)
 8007140:	6818      	ldr	r0, [r3, #0]
 8007142:	2300      	movs	r3, #0
 8007144:	2200      	movs	r2, #0
 8007146:	2100      	movs	r1, #0
 8007148:	f009 fc42 	bl	80109d0 <xQueueGenericSend>
 800714c:	e000      	b.n	8007150 <Dmesg_GetLatestN+0xc8>
        return;
 800714e:	bf00      	nop
}
 8007150:	3720      	adds	r7, #32
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	24019374 	.word	0x24019374
 800715c:	24019370 	.word	0x24019370
 8007160:	240148c0 	.word	0x240148c0
 8007164:	20018000 	.word	0x20018000
 8007168:	20000000 	.word	0x20000000

0800716c <LL_GPIO_SetOutputPin>:
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	619a      	str	r2, [r3, #24]
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <LL_GPIO_ResetOutputPin>:
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	041a      	lsls	r2, r3, #16
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	619a      	str	r2, [r3, #24]
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
	...

080071a8 <FindFreeSlot>:
//__attribute__((section(".fs_buffer"))) static uint8_t fsQueueBuffer[90640]; // 10 slot * 8240 bytes + 1 backup
__attribute__((section(".fs_buffer"))) static uint8_t fsQueueBuffer[NUM_SLOTS * 64]; 			// 10 slot * 64 bytes = 640 bytes
__attribute__((section(".fs_buffer"))) static uint8_t fsDataBuffer[NUM_SLOTS][MAX_DATA_SIZE];   // 10 slot * 8KB = 80KB
static uint8_t slotInUse[NUM_SLOTS] = {0};

static int FindFreeSlot(void) {
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_SLOTS; i++) {
 80071ae:	2300      	movs	r3, #0
 80071b0:	607b      	str	r3, [r7, #4]
 80071b2:	e00a      	b.n	80071ca <FindFreeSlot+0x22>
        if (slotInUse[i] == 0) return i;
 80071b4:	4a0a      	ldr	r2, [pc, #40]	@ (80071e0 <FindFreeSlot+0x38>)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <FindFreeSlot+0x1c>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	e007      	b.n	80071d4 <FindFreeSlot+0x2c>
    for (int i = 0; i < NUM_SLOTS; i++) {
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3301      	adds	r3, #1
 80071c8:	607b      	str	r3, [r7, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b09      	cmp	r3, #9
 80071ce:	ddf1      	ble.n	80071b4 <FindFreeSlot+0xc>
    }
    return -1;
 80071d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	240193d8 	.word	0x240193d8

080071e4 <SD_Lockin>:
 *              Physical Status SDMMC            *
 *************************************************/
SDFS_StateTypedef SDFS_State = SDFS_READY;

void SD_Lockin(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
    GPIO_SetHigh(SD_InOut_Port, SD_InOut);
 80071e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071ec:	4804      	ldr	r0, [pc, #16]	@ (8007200 <SD_Lockin+0x1c>)
 80071ee:	f7ff ffbd 	bl	800716c <LL_GPIO_SetOutputPin>
    GPIO_SetHigh(SD_Detect_Port, SD_Detect);
 80071f2:	2110      	movs	r1, #16
 80071f4:	4803      	ldr	r0, [pc, #12]	@ (8007204 <SD_Lockin+0x20>)
 80071f6:	f7ff ffb9 	bl	800716c <LL_GPIO_SetOutputPin>
}
 80071fa:	bf00      	nop
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	58021000 	.word	0x58021000
 8007204:	58020c00 	.word	0x58020c00

08007208 <SD_Release>:
void SD_Release(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
    GPIO_SetLow(SD_InOut_Port, SD_InOut);
 800720c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007210:	4804      	ldr	r0, [pc, #16]	@ (8007224 <SD_Release+0x1c>)
 8007212:	f7ff ffb9 	bl	8007188 <LL_GPIO_ResetOutputPin>
    GPIO_SetLow(SD_Detect_Port, SD_Detect);
 8007216:	2110      	movs	r1, #16
 8007218:	4803      	ldr	r0, [pc, #12]	@ (8007228 <SD_Release+0x20>)
 800721a:	f7ff ffb5 	bl	8007188 <LL_GPIO_ResetOutputPin>
}
 800721e:	bf00      	nop
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	58021000 	.word	0x58021000
 8007228:	58020c00 	.word	0x58020c00

0800722c <FS_Init>:

/*************************************************
 *                 Queue implement               *
 *************************************************/
void FS_Init(void) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af02      	add	r7, sp, #8
    fsMutex = xSemaphoreCreateMutex();
 8007232:	2001      	movs	r0, #1
 8007234:	f009 fbb3 	bl	801099e <xQueueCreateMutex>
 8007238:	4603      	mov	r3, r0
 800723a:	4a16      	ldr	r2, [pc, #88]	@ (8007294 <FS_Init+0x68>)
 800723c:	6013      	str	r3, [r2, #0]
    fsSlotMutex = xSemaphoreCreateMutex();
 800723e:	2001      	movs	r0, #1
 8007240:	f009 fbad 	bl	801099e <xQueueCreateMutex>
 8007244:	4603      	mov	r3, r0
 8007246:	4a14      	ldr	r2, [pc, #80]	@ (8007298 <FS_Init+0x6c>)
 8007248:	6013      	str	r3, [r2, #0]
    if (fsMutex == NULL || fsSlotMutex == NULL) {
 800724a:	4b12      	ldr	r3, [pc, #72]	@ (8007294 <FS_Init+0x68>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <FS_Init+0x2e>
 8007252:	4b11      	ldr	r3, [pc, #68]	@ (8007298 <FS_Init+0x6c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d105      	bne.n	8007266 <FS_Init+0x3a>
        SYSLOG_ERROR_POLL("Failed to create mutexes");
 800725a:	2201      	movs	r2, #1
 800725c:	490f      	ldr	r1, [pc, #60]	@ (800729c <FS_Init+0x70>)
 800725e:	2004      	movs	r0, #4
 8007260:	f001 f8aa 	bl	80083b8 <syslog_log>
        return;
 8007264:	e014      	b.n	8007290 <FS_Init+0x64>
    }

    fsWriteQueue = xQueueCreateStatic(NUM_SLOTS, sizeof(FS_WriteRequest_t), fsQueueBuffer, &fsWriteQueueStruct);
 8007266:	2300      	movs	r3, #0
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	4b0d      	ldr	r3, [pc, #52]	@ (80072a0 <FS_Init+0x74>)
 800726c:	4a0d      	ldr	r2, [pc, #52]	@ (80072a4 <FS_Init+0x78>)
 800726e:	2130      	movs	r1, #48	@ 0x30
 8007270:	200a      	movs	r0, #10
 8007272:	f009 fa9b 	bl	80107ac <xQueueGenericCreateStatic>
 8007276:	4603      	mov	r3, r0
 8007278:	4a0b      	ldr	r2, [pc, #44]	@ (80072a8 <FS_Init+0x7c>)
 800727a:	6013      	str	r3, [r2, #0]
    if (fsWriteQueue == NULL) {
 800727c:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <FS_Init+0x7c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d105      	bne.n	8007290 <FS_Init+0x64>
        SYSLOG_ERROR_POLL("Failed to create FS write queue");
 8007284:	2201      	movs	r2, #1
 8007286:	4909      	ldr	r1, [pc, #36]	@ (80072ac <FS_Init+0x80>)
 8007288:	2004      	movs	r0, #4
 800728a:	f001 f895 	bl	80083b8 <syslog_log>
        return;
 800728e:	bf00      	nop
    }
}
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	24019378 	.word	0x24019378
 8007298:	2401937c 	.word	0x2401937c
 800729c:	0802506c 	.word	0x0802506c
 80072a0:	24019388 	.word	0x24019388
 80072a4:	240004a8 	.word	0x240004a8
 80072a8:	24019384 	.word	0x24019384
 80072ac:	08025088 	.word	0x08025088

080072b0 <FS_Gatekeeper_Task>:

void FS_Gatekeeper_Task(void *pvParameters) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	f5ad 7d28 	sub.w	sp, sp, #672	@ 0x2a0
 80072b6:	af02      	add	r7, sp, #8
 80072b8:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80072bc:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80072c0:	6018      	str	r0, [r3, #0]
    FS_WriteRequest_t request;

    for (;;) {
        if (xQueueReceive(fsWriteQueue, &request, portMAX_DELAY) == pdTRUE) {
 80072c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007374 <FS_Gatekeeper_Task+0xc4>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f507 7119 	add.w	r1, r7, #612	@ 0x264
 80072ca:	f04f 32ff 	mov.w	r2, #4294967295
 80072ce:	4618      	mov	r0, r3
 80072d0:	f009 fd3a 	bl	8010d48 <xQueueReceive>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d1f3      	bne.n	80072c2 <FS_Gatekeeper_Task+0x12>
            Std_ReturnType result = E_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
            FIL file;
            FRESULT res;
            UINT byteswritten;

            if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) == pdTRUE) {
 80072e0:	4b25      	ldr	r3, [pc, #148]	@ (8007378 <FS_Gatekeeper_Task+0xc8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80072e8:	4618      	mov	r0, r3
 80072ea:	f009 fe15 	bl	8010f18 <xQueueSemaphoreTake>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d134      	bne.n	800735e <FS_Gatekeeper_Task+0xae>
                res = f_open(&file, request.filename, FA_OPEN_APPEND | FA_WRITE);
 80072f4:	f507 7119 	add.w	r1, r7, #612	@ 0x264
 80072f8:	f107 0308 	add.w	r3, r7, #8
 80072fc:	2232      	movs	r2, #50	@ 0x32
 80072fe:	4618      	mov	r0, r3
 8007300:	f007 fa62 	bl	800e7c8 <f_open>
 8007304:	4603      	mov	r3, r0
 8007306:	f887 3296 	strb.w	r3, [r7, #662]	@ 0x296
                if (res == FR_OK) {
 800730a:	f897 3296 	ldrb.w	r3, [r7, #662]	@ 0x296
 800730e:	2b00      	cmp	r3, #0
 8007310:	d11e      	bne.n	8007350 <FS_Gatekeeper_Task+0xa0>
                    res = f_write(&file, request.data, request.size, &byteswritten);
 8007312:	f8d7 1284 	ldr.w	r1, [r7, #644]	@ 0x284
 8007316:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 800731a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800731e:	f107 0008 	add.w	r0, r7, #8
 8007322:	f007 ffa2 	bl	800f26a <f_write>
 8007326:	4603      	mov	r3, r0
 8007328:	f887 3296 	strb.w	r3, [r7, #662]	@ 0x296
                    f_close(&file);
 800732c:	f107 0308 	add.w	r3, r7, #8
 8007330:	4618      	mov	r0, r3
 8007332:	f008 fb33 	bl	800f99c <f_close>
                    if (res == FR_OK && byteswritten == request.size) {
 8007336:	f897 3296 	ldrb.w	r3, [r7, #662]	@ 0x296
 800733a:	2b00      	cmp	r3, #0
 800733c:	d108      	bne.n	8007350 <FS_Gatekeeper_Task+0xa0>
 800733e:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8007342:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8007346:	429a      	cmp	r2, r3
 8007348:	d102      	bne.n	8007350 <FS_Gatekeeper_Task+0xa0>
                        result = E_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
                    }
                }
                xSemaphoreGive(fsMutex);
 8007350:	4b09      	ldr	r3, [pc, #36]	@ (8007378 <FS_Gatekeeper_Task+0xc8>)
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	2300      	movs	r3, #0
 8007356:	2200      	movs	r2, #0
 8007358:	2100      	movs	r1, #0
 800735a:	f009 fb39 	bl	80109d0 <xQueueGenericSend>
            }
            xTaskNotify(request.requester, result, eSetValueWithOverwrite);
 800735e:	f8d7 028c 	ldr.w	r0, [r7, #652]	@ 0x28c
 8007362:	f897 2297 	ldrb.w	r2, [r7, #663]	@ 0x297
 8007366:	2300      	movs	r3, #0
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	2303      	movs	r3, #3
 800736c:	2100      	movs	r1, #0
 800736e:	f00b ff6d 	bl	801324c <xTaskGenericNotify>
        if (xQueueReceive(fsWriteQueue, &request, portMAX_DELAY) == pdTRUE) {
 8007372:	e7a6      	b.n	80072c2 <FS_Gatekeeper_Task+0x12>
 8007374:	24019384 	.word	0x24019384
 8007378:	24019378 	.word	0x24019378

0800737c <FS_Request_Write>:
        }
    }
}

Std_ReturnType FS_Request_Write(const char* filename, uint8_t* buffer, uint32_t size) {
 800737c:	b580      	push	{r7, lr}
 800737e:	b094      	sub	sp, #80	@ 0x50
 8007380:	af02      	add	r7, sp, #8
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
    if (size > MAX_DATA_SIZE) {
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800738e:	d901      	bls.n	8007394 <FS_Request_Write+0x18>
        return E_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e08f      	b.n	80074b4 <FS_Request_Write+0x138>
    }

    if (xSemaphoreTake(fsSlotMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 8007394:	4b49      	ldr	r3, [pc, #292]	@ (80074bc <FS_Request_Write+0x140>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800739c:	4618      	mov	r0, r3
 800739e:	f009 fdbb 	bl	8010f18 <xQueueSemaphoreTake>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d001      	beq.n	80073ac <FS_Request_Write+0x30>
        return E_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e083      	b.n	80074b4 <FS_Request_Write+0x138>
    }

    int slot = FindFreeSlot();
 80073ac:	f7ff fefc 	bl	80071a8 <FindFreeSlot>
 80073b0:	6478      	str	r0, [r7, #68]	@ 0x44
    if (slot == -1) {
 80073b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b8:	d108      	bne.n	80073cc <FS_Request_Write+0x50>
        xSemaphoreGive(fsSlotMutex);
 80073ba:	4b40      	ldr	r3, [pc, #256]	@ (80074bc <FS_Request_Write+0x140>)
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	2300      	movs	r3, #0
 80073c0:	2200      	movs	r2, #0
 80073c2:	2100      	movs	r1, #0
 80073c4:	f009 fb04 	bl	80109d0 <xQueueGenericSend>
        return E_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e073      	b.n	80074b4 <FS_Request_Write+0x138>
    }
    slotInUse[slot] = 1;
 80073cc:	4a3c      	ldr	r2, [pc, #240]	@ (80074c0 <FS_Request_Write+0x144>)
 80073ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d0:	4413      	add	r3, r2
 80073d2:	2201      	movs	r2, #1
 80073d4:	701a      	strb	r2, [r3, #0]
    xSemaphoreGive(fsSlotMutex);
 80073d6:	4b39      	ldr	r3, [pc, #228]	@ (80074bc <FS_Request_Write+0x140>)
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	2300      	movs	r3, #0
 80073dc:	2200      	movs	r2, #0
 80073de:	2100      	movs	r1, #0
 80073e0:	f009 faf6 	bl	80109d0 <xQueueGenericSend>

    FS_WriteRequest_t req = {
 80073e4:	f107 0314 	add.w	r3, r7, #20
 80073e8:	2230      	movs	r2, #48	@ 0x30
 80073ea:	2100      	movs	r1, #0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f01a fdd6 	bl	8021f9e <memset>
        .data = fsDataBuffer[slot],
 80073f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f4:	035b      	lsls	r3, r3, #13
 80073f6:	4a33      	ldr	r2, [pc, #204]	@ (80074c4 <FS_Request_Write+0x148>)
 80073f8:	4413      	add	r3, r2
    FS_WriteRequest_t req = {
 80073fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        .size = size,
        .requester = xTaskGetCurrentTaskHandle()
 8007400:	f00b fc36 	bl	8012c70 <xTaskGetCurrentTaskHandle>
 8007404:	4603      	mov	r3, r0
    FS_WriteRequest_t req = {
 8007406:	63fb      	str	r3, [r7, #60]	@ 0x3c
    };
    strncpy(req.filename, filename, sizeof(req.filename) - 1);
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	221f      	movs	r2, #31
 800740e:	68f9      	ldr	r1, [r7, #12]
 8007410:	4618      	mov	r0, r3
 8007412:	f01a fde8 	bl	8021fe6 <strncpy>
    memcpy(fsDataBuffer[slot], buffer, size);
 8007416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007418:	035b      	lsls	r3, r3, #13
 800741a:	4a2a      	ldr	r2, [pc, #168]	@ (80074c4 <FS_Request_Write+0x148>)
 800741c:	4413      	add	r3, r2
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	68b9      	ldr	r1, [r7, #8]
 8007422:	4618      	mov	r0, r3
 8007424:	f01a fe65 	bl	80220f2 <memcpy>

    if (xQueueSend(fsWriteQueue, &req, pdMS_TO_TICKS(1000)) != pdPASS) {
 8007428:	4b27      	ldr	r3, [pc, #156]	@ (80074c8 <FS_Request_Write+0x14c>)
 800742a:	6818      	ldr	r0, [r3, #0]
 800742c:	f107 0114 	add.w	r1, r7, #20
 8007430:	2300      	movs	r3, #0
 8007432:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007436:	f009 facb 	bl	80109d0 <xQueueGenericSend>
 800743a:	4603      	mov	r3, r0
 800743c:	2b01      	cmp	r3, #1
 800743e:	d017      	beq.n	8007470 <FS_Request_Write+0xf4>
        if (xSemaphoreTake(fsSlotMutex, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007440:	4b1e      	ldr	r3, [pc, #120]	@ (80074bc <FS_Request_Write+0x140>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007448:	4618      	mov	r0, r3
 800744a:	f009 fd65 	bl	8010f18 <xQueueSemaphoreTake>
 800744e:	4603      	mov	r3, r0
 8007450:	2b01      	cmp	r3, #1
 8007452:	d10b      	bne.n	800746c <FS_Request_Write+0xf0>
            slotInUse[slot] = 0;
 8007454:	4a1a      	ldr	r2, [pc, #104]	@ (80074c0 <FS_Request_Write+0x144>)
 8007456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007458:	4413      	add	r3, r2
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]
            xSemaphoreGive(fsSlotMutex);
 800745e:	4b17      	ldr	r3, [pc, #92]	@ (80074bc <FS_Request_Write+0x140>)
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	2300      	movs	r3, #0
 8007464:	2200      	movs	r2, #0
 8007466:	2100      	movs	r1, #0
 8007468:	f009 fab2 	bl	80109d0 <xQueueGenericSend>
        }
        return E_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e021      	b.n	80074b4 <FS_Request_Write+0x138>
    }

    uint32_t result;
    xTaskNotifyWait(0, 0, &result, pdMS_TO_TICKS(5000));
 8007470:	f107 0310 	add.w	r3, r7, #16
 8007474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007478:	9200      	str	r2, [sp, #0]
 800747a:	2200      	movs	r2, #0
 800747c:	2100      	movs	r1, #0
 800747e:	2000      	movs	r0, #0
 8007480:	f00b fe4a 	bl	8013118 <xTaskGenericNotifyWait>

    if (xSemaphoreTake(fsSlotMutex, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007484:	4b0d      	ldr	r3, [pc, #52]	@ (80074bc <FS_Request_Write+0x140>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800748c:	4618      	mov	r0, r3
 800748e:	f009 fd43 	bl	8010f18 <xQueueSemaphoreTake>
 8007492:	4603      	mov	r3, r0
 8007494:	2b01      	cmp	r3, #1
 8007496:	d10b      	bne.n	80074b0 <FS_Request_Write+0x134>
        slotInUse[slot] = 0;
 8007498:	4a09      	ldr	r2, [pc, #36]	@ (80074c0 <FS_Request_Write+0x144>)
 800749a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800749c:	4413      	add	r3, r2
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
        xSemaphoreGive(fsSlotMutex);
 80074a2:	4b06      	ldr	r3, [pc, #24]	@ (80074bc <FS_Request_Write+0x140>)
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	2300      	movs	r3, #0
 80074a8:	2200      	movs	r2, #0
 80074aa:	2100      	movs	r1, #0
 80074ac:	f009 fa90 	bl	80109d0 <xQueueGenericSend>
    }

    return (Std_ReturnType)result;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	b2db      	uxtb	r3, r3
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3748      	adds	r7, #72	@ 0x48
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	2401937c 	.word	0x2401937c
 80074c0:	240193d8 	.word	0x240193d8
 80074c4:	24000728 	.word	0x24000728
 80074c8:	24019384 	.word	0x24019384

080074cc <Link_SDFS_Driver>:

/*************************************************
 *                   Low layer API               *
 *************************************************/
Std_ReturnType Link_SDFS_Driver(void) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    const Diskio_drvTypeDef *mmc1_driver = MMC1_GetDriver();
 80074d2:	f008 fec1 	bl	8010258 <MMC1_GetDriver>
 80074d6:	6078      	str	r0, [r7, #4]
    if (FATFS_LinkDriver(mmc1_driver, MMC1Path) == 0) {
 80074d8:	490b      	ldr	r1, [pc, #44]	@ (8007508 <Link_SDFS_Driver+0x3c>)
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f008 fcae 	bl	800fe3c <FATFS_LinkDriver>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10b      	bne.n	80074fe <Link_SDFS_Driver+0x32>
        int ret1 = f_mount(&MMC1FatFs, (TCHAR const*)MMC1Path, 1);
 80074e6:	2201      	movs	r2, #1
 80074e8:	4907      	ldr	r1, [pc, #28]	@ (8007508 <Link_SDFS_Driver+0x3c>)
 80074ea:	4808      	ldr	r0, [pc, #32]	@ (800750c <Link_SDFS_Driver+0x40>)
 80074ec:	f007 f8f6 	bl	800e6dc <f_mount>
 80074f0:	4603      	mov	r3, r0
 80074f2:	603b      	str	r3, [r7, #0]
        if (ret1 != FR_OK) {
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <Link_SDFS_Driver+0x32>
            return E_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e000      	b.n	8007500 <Link_SDFS_Driver+0x34>
        if (ret2 != FR_OK) {
            return E_ERROR;
        }
    }
#endif
    return E_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	24019380 	.word	0x24019380
 800750c:	24000000 	.word	0x24000000

08007510 <Cat_SDFS>:

int Cat_SDFS(EmbeddedCli *cli, const char *filename) {
 8007510:	b590      	push	{r4, r7, lr}
 8007512:	f5ad 7d5d 	sub.w	sp, sp, #884	@ 0x374
 8007516:	af02      	add	r7, sp, #8
 8007518:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800751c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8007520:	6018      	str	r0, [r3, #0]
 8007522:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007526:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800752a:	6019      	str	r1, [r3, #0]
 800752c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007530:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8007534:	331f      	adds	r3, #31
 8007536:	095b      	lsrs	r3, r3, #5
 8007538:	015c      	lsls	r4, r3, #5
    FRESULT res;
    ALIGN_32BYTES(uint8_t rtext[96]);
    UINT bytesread;
    char buffer[128];

    if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 800753a:	4b5d      	ldr	r3, [pc, #372]	@ (80076b0 <Cat_SDFS+0x1a0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007542:	4618      	mov	r0, r3
 8007544:	f009 fce8 	bl	8010f18 <xQueueSemaphoreTake>
 8007548:	4603      	mov	r3, r0
 800754a:	2b01      	cmp	r3, #1
 800754c:	d00a      	beq.n	8007564 <Cat_SDFS+0x54>
        embeddedCliPrint(cli, "Failed to acquire FS mutex");
 800754e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007552:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8007556:	4957      	ldr	r1, [pc, #348]	@ (80076b4 <Cat_SDFS+0x1a4>)
 8007558:	6818      	ldr	r0, [r3, #0]
 800755a:	f7fd ffa9 	bl	80054b0 <embeddedCliPrint>
        return -1;
 800755e:	f04f 33ff 	mov.w	r3, #4294967295
 8007562:	e0a0      	b.n	80076a6 <Cat_SDFS+0x196>
    }

    res = f_open(&file, filename, FA_READ);
 8007564:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007568:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800756c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007570:	2201      	movs	r2, #1
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	f007 f928 	bl	800e7c8 <f_open>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3367 	strb.w	r3, [r7, #871]	@ 0x367
    if (res != FR_OK) {
 800757e:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 8007582:	2b00      	cmp	r3, #0
 8007584:	d021      	beq.n	80075ca <Cat_SDFS+0xba>
        snprintf(buffer, sizeof(buffer), "Failed to open file %s: %d", filename, res);
 8007586:	f897 2367 	ldrb.w	r2, [r7, #871]	@ 0x367
 800758a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800758e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8007592:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8007596:	9200      	str	r2, [sp, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a47      	ldr	r2, [pc, #284]	@ (80076b8 <Cat_SDFS+0x1a8>)
 800759c:	2180      	movs	r1, #128	@ 0x80
 800759e:	f01a fc39 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80075a2:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 80075a6:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80075aa:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80075ae:	4611      	mov	r1, r2
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	f7fd ff7d 	bl	80054b0 <embeddedCliPrint>
        xSemaphoreGive(fsMutex);
 80075b6:	4b3e      	ldr	r3, [pc, #248]	@ (80076b0 <Cat_SDFS+0x1a0>)
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	2300      	movs	r3, #0
 80075bc:	2200      	movs	r2, #0
 80075be:	2100      	movs	r1, #0
 80075c0:	f009 fa06 	bl	80109d0 <xQueueGenericSend>
        return -1;
 80075c4:	f04f 33ff 	mov.w	r3, #4294967295
 80075c8:	e06d      	b.n	80076a6 <Cat_SDFS+0x196>
    }

    embeddedCliPrint(cli, "");
 80075ca:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80075ce:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80075d2:	493a      	ldr	r1, [pc, #232]	@ (80076bc <Cat_SDFS+0x1ac>)
 80075d4:	6818      	ldr	r0, [r3, #0]
 80075d6:	f7fd ff6b 	bl	80054b0 <embeddedCliPrint>
    do {
        memset(rtext, 0, sizeof(rtext));
 80075da:	2260      	movs	r2, #96	@ 0x60
 80075dc:	2100      	movs	r1, #0
 80075de:	4620      	mov	r0, r4
 80075e0:	f01a fcdd 	bl	8021f9e <memset>
        res = f_read(&file, rtext, sizeof(rtext) - 1, &bytesread);
 80075e4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80075e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075ec:	225f      	movs	r2, #95	@ 0x5f
 80075ee:	4621      	mov	r1, r4
 80075f0:	f007 fc94 	bl	800ef1c <f_read>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f887 3367 	strb.w	r3, [r7, #871]	@ 0x367
        if (res != FR_OK) {
 80075fa:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d026      	beq.n	8007650 <Cat_SDFS+0x140>
            snprintf(buffer, sizeof(buffer), "Failed to read file %s: %d", filename, res);
 8007602:	f897 2367 	ldrb.w	r2, [r7, #871]	@ 0x367
 8007606:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800760a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800760e:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8007612:	9200      	str	r2, [sp, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a2a      	ldr	r2, [pc, #168]	@ (80076c0 <Cat_SDFS+0x1b0>)
 8007618:	2180      	movs	r1, #128	@ 0x80
 800761a:	f01a fbfb 	bl	8021e14 <sniprintf>
            embeddedCliPrint(cli, buffer);
 800761e:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8007622:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007626:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 800762a:	4611      	mov	r1, r2
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	f7fd ff3f 	bl	80054b0 <embeddedCliPrint>
            f_close(&file);
 8007632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007636:	4618      	mov	r0, r3
 8007638:	f008 f9b0 	bl	800f99c <f_close>
            xSemaphoreGive(fsMutex);
 800763c:	4b1c      	ldr	r3, [pc, #112]	@ (80076b0 <Cat_SDFS+0x1a0>)
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	2300      	movs	r3, #0
 8007642:	2200      	movs	r2, #0
 8007644:	2100      	movs	r1, #0
 8007646:	f009 f9c3 	bl	80109d0 <xQueueGenericSend>
            return -1;
 800764a:	f04f 33ff 	mov.w	r3, #4294967295
 800764e:	e02a      	b.n	80076a6 <Cat_SDFS+0x196>
        }
        rtext[bytesread] = '\0';
 8007650:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007654:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2200      	movs	r2, #0
 800765c:	54e2      	strb	r2, [r4, r3]
        embeddedCliPrint(cli, (char *)rtext);
 800765e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007662:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8007666:	4621      	mov	r1, r4
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	f7fd ff21 	bl	80054b0 <embeddedCliPrint>
    } while (bytesread > 0);
 800766e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007672:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1ae      	bne.n	80075da <Cat_SDFS+0xca>

    embeddedCliPrint(cli, "");
 800767c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8007680:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8007684:	490d      	ldr	r1, [pc, #52]	@ (80076bc <Cat_SDFS+0x1ac>)
 8007686:	6818      	ldr	r0, [r3, #0]
 8007688:	f7fd ff12 	bl	80054b0 <embeddedCliPrint>
    f_close(&file);
 800768c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007690:	4618      	mov	r0, r3
 8007692:	f008 f983 	bl	800f99c <f_close>
    xSemaphoreGive(fsMutex);
 8007696:	4b06      	ldr	r3, [pc, #24]	@ (80076b0 <Cat_SDFS+0x1a0>)
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	2300      	movs	r3, #0
 800769c:	2200      	movs	r2, #0
 800769e:	2100      	movs	r1, #0
 80076a0:	f009 f996 	bl	80109d0 <xQueueGenericSend>
    return 0;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	f507 775b 	add.w	r7, r7, #876	@ 0x36c
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd90      	pop	{r4, r7, pc}
 80076b0:	24019378 	.word	0x24019378
 80076b4:	080250a8 	.word	0x080250a8
 80076b8:	080250c4 	.word	0x080250c4
 80076bc:	080250e0 	.word	0x080250e0
 80076c0:	080250e4 	.word	0x080250e4

080076c4 <Vim_SDFS>:

int Vim_SDFS(EmbeddedCli *cli, const char *filename, const char *content) {
 80076c4:	b590      	push	{r4, r7, lr}
 80076c6:	f5ad 7d41 	sub.w	sp, sp, #772	@ 0x304
 80076ca:	af02      	add	r7, sp, #8
 80076cc:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80076d0:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80076d4:	6018      	str	r0, [r3, #0]
 80076d6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80076da:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80076de:	6019      	str	r1, [r3, #0]
 80076e0:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80076e4:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80076e8:	601a      	str	r2, [r3, #0]
    FIL file;
    FRESULT res;
    char buffer[128];
    UINT byteswritten;

    if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 80076ea:	4b67      	ldr	r3, [pc, #412]	@ (8007888 <Vim_SDFS+0x1c4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80076f2:	4618      	mov	r0, r3
 80076f4:	f009 fc10 	bl	8010f18 <xQueueSemaphoreTake>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d00a      	beq.n	8007714 <Vim_SDFS+0x50>
        embeddedCliPrint(cli, "Failed to acquire FS mutex");
 80076fe:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8007702:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8007706:	4961      	ldr	r1, [pc, #388]	@ (800788c <Vim_SDFS+0x1c8>)
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	f7fd fed1 	bl	80054b0 <embeddedCliPrint>
        return -1;
 800770e:	f04f 33ff 	mov.w	r3, #4294967295
 8007712:	e0b4      	b.n	800787e <Vim_SDFS+0x1ba>
    }

    res = f_open(&file, filename, FA_OPEN_APPEND | FA_WRITE);
 8007714:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8007718:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 800771c:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8007720:	2232      	movs	r2, #50	@ 0x32
 8007722:	6819      	ldr	r1, [r3, #0]
 8007724:	f007 f850 	bl	800e7c8 <f_open>
 8007728:	4603      	mov	r3, r0
 800772a:	f887 32f7 	strb.w	r3, [r7, #759]	@ 0x2f7
    if (res != FR_OK) {
 800772e:	f897 32f7 	ldrb.w	r3, [r7, #759]	@ 0x2f7
 8007732:	2b00      	cmp	r3, #0
 8007734:	d021      	beq.n	800777a <Vim_SDFS+0xb6>
        snprintf(buffer, sizeof(buffer), "Failed to open or create file %s: %d", filename, res);
 8007736:	f897 22f7 	ldrb.w	r2, [r7, #759]	@ 0x2f7
 800773a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800773e:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8007742:	f107 0018 	add.w	r0, r7, #24
 8007746:	9200      	str	r2, [sp, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a51      	ldr	r2, [pc, #324]	@ (8007890 <Vim_SDFS+0x1cc>)
 800774c:	2180      	movs	r1, #128	@ 0x80
 800774e:	f01a fb61 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8007752:	f107 0218 	add.w	r2, r7, #24
 8007756:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800775a:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 800775e:	4611      	mov	r1, r2
 8007760:	6818      	ldr	r0, [r3, #0]
 8007762:	f7fd fea5 	bl	80054b0 <embeddedCliPrint>
        xSemaphoreGive(fsMutex);
 8007766:	4b48      	ldr	r3, [pc, #288]	@ (8007888 <Vim_SDFS+0x1c4>)
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	2300      	movs	r3, #0
 800776c:	2200      	movs	r2, #0
 800776e:	2100      	movs	r1, #0
 8007770:	f009 f92e 	bl	80109d0 <xQueueGenericSend>
        return -1;
 8007774:	f04f 33ff 	mov.w	r3, #4294967295
 8007778:	e081      	b.n	800787e <Vim_SDFS+0x1ba>
    }

    if (content && strlen(content) > 0) {
 800777a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800777e:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d058      	beq.n	800783a <Vim_SDFS+0x176>
 8007788:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800778c:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d050      	beq.n	800783a <Vim_SDFS+0x176>
        res = f_write(&file, content, strlen(content), &byteswritten);
 8007798:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 800779c:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f7f8 fda7 	bl	80002f4 <strlen>
 80077a6:	4604      	mov	r4, r0
 80077a8:	f107 0314 	add.w	r3, r7, #20
 80077ac:	f507 723e 	add.w	r2, r7, #760	@ 0x2f8
 80077b0:	f5a2 713d 	sub.w	r1, r2, #756	@ 0x2f4
 80077b4:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80077b8:	4622      	mov	r2, r4
 80077ba:	6809      	ldr	r1, [r1, #0]
 80077bc:	f007 fd55 	bl	800f26a <f_write>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 32f7 	strb.w	r3, [r7, #759]	@ 0x2f7
        if (res != FR_OK || byteswritten != strlen(content)) {
 80077c6:	f897 32f7 	ldrb.w	r3, [r7, #759]	@ 0x2f7
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10e      	bne.n	80077ec <Vim_SDFS+0x128>
 80077ce:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80077d2:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	f7f8 fd8c 	bl	80002f4 <strlen>
 80077dc:	4602      	mov	r2, r0
 80077de:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80077e2:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d026      	beq.n	800783a <Vim_SDFS+0x176>
            snprintf(buffer, sizeof(buffer), "Failed to write to file %s: %d", filename, res);
 80077ec:	f897 22f7 	ldrb.w	r2, [r7, #759]	@ 0x2f7
 80077f0:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80077f4:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80077f8:	f107 0018 	add.w	r0, r7, #24
 80077fc:	9200      	str	r2, [sp, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a24      	ldr	r2, [pc, #144]	@ (8007894 <Vim_SDFS+0x1d0>)
 8007802:	2180      	movs	r1, #128	@ 0x80
 8007804:	f01a fb06 	bl	8021e14 <sniprintf>
            embeddedCliPrint(cli, buffer);
 8007808:	f107 0218 	add.w	r2, r7, #24
 800780c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8007810:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8007814:	4611      	mov	r1, r2
 8007816:	6818      	ldr	r0, [r3, #0]
 8007818:	f7fd fe4a 	bl	80054b0 <embeddedCliPrint>
            f_close(&file);
 800781c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007820:	4618      	mov	r0, r3
 8007822:	f008 f8bb 	bl	800f99c <f_close>
            xSemaphoreGive(fsMutex);
 8007826:	4b18      	ldr	r3, [pc, #96]	@ (8007888 <Vim_SDFS+0x1c4>)
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	2300      	movs	r3, #0
 800782c:	2200      	movs	r2, #0
 800782e:	2100      	movs	r1, #0
 8007830:	f009 f8ce 	bl	80109d0 <xQueueGenericSend>
            return -1;
 8007834:	f04f 33ff 	mov.w	r3, #4294967295
 8007838:	e021      	b.n	800787e <Vim_SDFS+0x1ba>
        }
    }

    f_close(&file);
 800783a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800783e:	4618      	mov	r0, r3
 8007840:	f008 f8ac 	bl	800f99c <f_close>
    xSemaphoreGive(fsMutex);
 8007844:	4b10      	ldr	r3, [pc, #64]	@ (8007888 <Vim_SDFS+0x1c4>)
 8007846:	6818      	ldr	r0, [r3, #0]
 8007848:	2300      	movs	r3, #0
 800784a:	2200      	movs	r2, #0
 800784c:	2100      	movs	r1, #0
 800784e:	f009 f8bf 	bl	80109d0 <xQueueGenericSend>
    snprintf(buffer, sizeof(buffer), "Successfully wrote to %s", filename);
 8007852:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8007856:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 800785a:	f107 0018 	add.w	r0, r7, #24
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a0d      	ldr	r2, [pc, #52]	@ (8007898 <Vim_SDFS+0x1d4>)
 8007862:	2180      	movs	r1, #128	@ 0x80
 8007864:	f01a fad6 	bl	8021e14 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8007868:	f107 0218 	add.w	r2, r7, #24
 800786c:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8007870:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8007874:	4611      	mov	r1, r2
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	f7fd fe1a 	bl	80054b0 <embeddedCliPrint>
    return 0;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	f507 773f 	add.w	r7, r7, #764	@ 0x2fc
 8007884:	46bd      	mov	sp, r7
 8007886:	bd90      	pop	{r4, r7, pc}
 8007888:	24019378 	.word	0x24019378
 800788c:	080250a8 	.word	0x080250a8
 8007890:	08025100 	.word	0x08025100
 8007894:	08025128 	.word	0x08025128
 8007898:	08025148 	.word	0x08025148

0800789c <FS_ListFiles_path>:

void FS_ListFiles_path(EmbeddedCli *cli) {
 800789c:	b580      	push	{r7, lr}
 800789e:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
 80078a2:	af02      	add	r7, sp, #8
 80078a4:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80078a8:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80078ac:	6018      	str	r0, [r3, #0]
    FRESULT res;
    DIR dir;
    FILINFO fno;
    char *path = MMC1Path;
 80078ae:	4b57      	ldr	r3, [pc, #348]	@ (8007a0c <FS_ListFiles_path+0x170>)
 80078b0:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
    char buffer[384];

    if (xSemaphoreTake(fsMutex, pdMS_TO_TICKS(1000)) != pdTRUE) {
 80078b4:	4b56      	ldr	r3, [pc, #344]	@ (8007a10 <FS_ListFiles_path+0x174>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80078bc:	4618      	mov	r0, r3
 80078be:	f009 fb2b 	bl	8010f18 <xQueueSemaphoreTake>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d008      	beq.n	80078da <FS_ListFiles_path+0x3e>
        embeddedCliPrint(cli, "Failed to acquire FS mutex");
 80078c8:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80078cc:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80078d0:	4950      	ldr	r1, [pc, #320]	@ (8007a14 <FS_ListFiles_path+0x178>)
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	f7fd fdec 	bl	80054b0 <embeddedCliPrint>
 80078d8:	e093      	b.n	8007a02 <FS_ListFiles_path+0x166>
        return;
    }

    snprintf(buffer, sizeof(buffer), "Listing files in %s...", path);
 80078da:	f107 0008 	add.w	r0, r7, #8
 80078de:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80078e2:	4a4d      	ldr	r2, [pc, #308]	@ (8007a18 <FS_ListFiles_path+0x17c>)
 80078e4:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80078e8:	f01a fa94 	bl	8021e14 <sniprintf>
    embeddedCliPrint(cli, buffer);
 80078ec:	f107 0208 	add.w	r2, r7, #8
 80078f0:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80078f4:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80078f8:	4611      	mov	r1, r2
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	f7fd fdd8 	bl	80054b0 <embeddedCliPrint>

    res = f_opendir(&dir, path);
 8007900:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8007904:	f8d7 12fc 	ldr.w	r1, [r7, #764]	@ 0x2fc
 8007908:	4618      	mov	r0, r3
 800790a:	f008 f876 	bl	800f9fa <f_opendir>
 800790e:	4603      	mov	r3, r0
 8007910:	f887 32fb 	strb.w	r3, [r7, #763]	@ 0x2fb
    if (res == FR_OK) {
 8007914:	f897 32fb 	ldrb.w	r3, [r7, #763]	@ 0x2fb
 8007918:	2b00      	cmp	r3, #0
 800791a:	d155      	bne.n	80079c8 <FS_ListFiles_path+0x12c>
        while (1) {
            res = f_readdir(&dir, &fno);
 800791c:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 8007920:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8007924:	4611      	mov	r1, r2
 8007926:	4618      	mov	r0, r3
 8007928:	f008 f9b1 	bl	800fc8e <f_readdir>
 800792c:	4603      	mov	r3, r0
 800792e:	f887 32fb 	strb.w	r3, [r7, #763]	@ 0x2fb
            if (res != FR_OK || fno.fname[0] == 0) break;
 8007932:	f897 32fb 	ldrb.w	r3, [r7, #763]	@ 0x2fb
 8007936:	2b00      	cmp	r3, #0
 8007938:	d140      	bne.n	80079bc <FS_ListFiles_path+0x120>
 800793a:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 800793e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8007942:	7e9b      	ldrb	r3, [r3, #26]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d039      	beq.n	80079bc <FS_ListFiles_path+0x120>
            if (fno.fattrib & AM_DIR) {
 8007948:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 800794c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8007950:	7b1b      	ldrb	r3, [r3, #12]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2b00      	cmp	r3, #0
 8007958:	d014      	beq.n	8007984 <FS_ListFiles_path+0xe8>
                snprintf(buffer, sizeof(buffer), "  [DIR]  %s", fno.fname);
 800795a:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 800795e:	331a      	adds	r3, #26
 8007960:	f107 0008 	add.w	r0, r7, #8
 8007964:	4a2d      	ldr	r2, [pc, #180]	@ (8007a1c <FS_ListFiles_path+0x180>)
 8007966:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800796a:	f01a fa53 	bl	8021e14 <sniprintf>
                embeddedCliPrint(cli, buffer);
 800796e:	f107 0208 	add.w	r2, r7, #8
 8007972:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8007976:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 800797a:	4611      	mov	r1, r2
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	f7fd fd97 	bl	80054b0 <embeddedCliPrint>
 8007982:	e7cb      	b.n	800791c <FS_ListFiles_path+0x80>
            } else {
                snprintf(buffer, sizeof(buffer), "  [FILE] %s  %lu bytes",
                         fno.fname, (unsigned long)fno.fsize);
 8007984:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 8007988:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
                snprintf(buffer, sizeof(buffer), "  [FILE] %s  %lu bytes",
 8007990:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8007994:	331a      	adds	r3, #26
 8007996:	f107 0008 	add.w	r0, r7, #8
 800799a:	9200      	str	r2, [sp, #0]
 800799c:	4a20      	ldr	r2, [pc, #128]	@ (8007a20 <FS_ListFiles_path+0x184>)
 800799e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80079a2:	f01a fa37 	bl	8021e14 <sniprintf>
                embeddedCliPrint(cli, buffer);
 80079a6:	f107 0208 	add.w	r2, r7, #8
 80079aa:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80079ae:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80079b2:	4611      	mov	r1, r2
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	f7fd fd7b 	bl	80054b0 <embeddedCliPrint>
            res = f_readdir(&dir, &fno);
 80079ba:	e7af      	b.n	800791c <FS_ListFiles_path+0x80>
            }
        }
        f_closedir(&dir);
 80079bc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80079c0:	4618      	mov	r0, r3
 80079c2:	f008 f939 	bl	800fc38 <f_closedir>
 80079c6:	e015      	b.n	80079f4 <FS_ListFiles_path+0x158>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to open directory %s: %d", path, res);
 80079c8:	f897 32fb 	ldrb.w	r3, [r7, #763]	@ 0x2fb
 80079cc:	f107 0008 	add.w	r0, r7, #8
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80079d6:	4a13      	ldr	r2, [pc, #76]	@ (8007a24 <FS_ListFiles_path+0x188>)
 80079d8:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80079dc:	f01a fa1a 	bl	8021e14 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80079e0:	f107 0208 	add.w	r2, r7, #8
 80079e4:	f507 7340 	add.w	r3, r7, #768	@ 0x300
 80079e8:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80079ec:	4611      	mov	r1, r2
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	f7fd fd5e 	bl	80054b0 <embeddedCliPrint>
    }
    xSemaphoreGive(fsMutex);
 80079f4:	4b06      	ldr	r3, [pc, #24]	@ (8007a10 <FS_ListFiles_path+0x174>)
 80079f6:	6818      	ldr	r0, [r3, #0]
 80079f8:	2300      	movs	r3, #0
 80079fa:	2200      	movs	r2, #0
 80079fc:	2100      	movs	r1, #0
 80079fe:	f008 ffe7 	bl	80109d0 <xQueueGenericSend>
}
 8007a02:	f507 7740 	add.w	r7, r7, #768	@ 0x300
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	24019380 	.word	0x24019380
 8007a10:	24019378 	.word	0x24019378
 8007a14:	080250a8 	.word	0x080250a8
 8007a18:	08025164 	.word	0x08025164
 8007a1c:	0802517c 	.word	0x0802517c
 8007a20:	08025188 	.word	0x08025188
 8007a24:	080251a0 	.word	0x080251a0

08007a28 <MIN_ResponseCallback>:
typedef struct {
    uint8_t cmdId;
    uint8_t expectedResponseId;
} CommandInfo_t;

void MIN_ResponseCallback(uint8_t min_id, const uint8_t *payload, uint8_t len) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	71fb      	strb	r3, [r7, #7]
 8007a34:	4613      	mov	r3, r2
 8007a36:	71bb      	strb	r3, [r7, #6]
    CommandInfo_t cmdInfo;
    if (xQueuePeek(pendingCommandsQueue, &cmdInfo, 0) == pdTRUE) {
 8007a38:	4b10      	ldr	r3, [pc, #64]	@ (8007a7c <MIN_ResponseCallback+0x54>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f107 010c 	add.w	r1, r7, #12
 8007a40:	2200      	movs	r2, #0
 8007a42:	4618      	mov	r0, r3
 8007a44:	f009 fb6e 	bl	8011124 <xQueuePeek>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d112      	bne.n	8007a74 <MIN_ResponseCallback+0x4c>
        if (min_id == cmdInfo.expectedResponseId) {
 8007a4e:	7b7b      	ldrb	r3, [r7, #13]
 8007a50:	79fa      	ldrb	r2, [r7, #7]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d10e      	bne.n	8007a74 <MIN_ResponseCallback+0x4c>
            xQueueReceive(pendingCommandsQueue, &cmdInfo, 0);
 8007a56:	4b09      	ldr	r3, [pc, #36]	@ (8007a7c <MIN_ResponseCallback+0x54>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f107 010c 	add.w	r1, r7, #12
 8007a5e:	2200      	movs	r2, #0
 8007a60:	4618      	mov	r0, r3
 8007a62:	f009 f971 	bl	8010d48 <xQueueReceive>
            xSemaphoreGive(responseSemaphore);
 8007a66:	4b06      	ldr	r3, [pc, #24]	@ (8007a80 <MIN_ResponseCallback+0x58>)
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2100      	movs	r1, #0
 8007a70:	f008 ffae 	bl	80109d0 <xQueueGenericSend>
        }
    }
}
 8007a74:	bf00      	nop
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	240195f8 	.word	0x240195f8
 8007a80:	240195f4 	.word	0x240195f4

08007a84 <ClearPendingCommand>:

static void ClearPendingCommand(void) {
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b09c      	sub	sp, #112	@ 0x70
 8007a88:	af02      	add	r7, sp, #8
    CommandInfo_t cmdInfo;
    if (xQueueReceive(pendingCommandsQueue, &cmdInfo, 0) == pdTRUE) {
 8007a8a:	4b10      	ldr	r3, [pc, #64]	@ (8007acc <ClearPendingCommand+0x48>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8007a92:	2200      	movs	r2, #0
 8007a94:	4618      	mov	r0, r3
 8007a96:	f009 f957 	bl	8010d48 <xQueueReceive>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d110      	bne.n	8007ac2 <ClearPendingCommand+0x3e>
        char buffer[100];
        snprintf(buffer, sizeof(buffer), "Cleared pending command: ID 0x%02X, Expected 0x%02X\r\n",
                 cmdInfo.cmdId, cmdInfo.expectedResponseId);
 8007aa0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
        snprintf(buffer, sizeof(buffer), "Cleared pending command: ID 0x%02X, Expected 0x%02X\r\n",
 8007aa4:	461a      	mov	r2, r3
                 cmdInfo.cmdId, cmdInfo.expectedResponseId);
 8007aa6:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
        snprintf(buffer, sizeof(buffer), "Cleared pending command: ID 0x%02X, Expected 0x%02X\r\n",
 8007aaa:	4638      	mov	r0, r7
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	4a07      	ldr	r2, [pc, #28]	@ (8007ad0 <ClearPendingCommand+0x4c>)
 8007ab2:	2164      	movs	r1, #100	@ 0x64
 8007ab4:	f01a f9ae 	bl	8021e14 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 8007ab8:	463b      	mov	r3, r7
 8007aba:	4619      	mov	r1, r3
 8007abc:	4805      	ldr	r0, [pc, #20]	@ (8007ad4 <ClearPendingCommand+0x50>)
 8007abe:	f7fa fe09 	bl	80026d4 <UART_Driver_SendString>
    }
}
 8007ac2:	bf00      	nop
 8007ac4:	3768      	adds	r7, #104	@ 0x68
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	240195f8 	.word	0x240195f8
 8007ad0:	080251c0 	.word	0x080251c0
 8007ad4:	40004400 	.word	0x40004400

08007ad8 <MIN_Timeout_Handler>:

void MIN_Timeout_Handler(MIN_Context_t *ctx) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
    SYSLOG_ERROR_POLL("MIN-Timeout!");
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	4904      	ldr	r1, [pc, #16]	@ (8007af4 <MIN_Timeout_Handler+0x1c>)
 8007ae4:	2004      	movs	r0, #4
 8007ae6:	f000 fc67 	bl	80083b8 <syslog_log>
}
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	080251f8 	.word	0x080251f8

08007af8 <MIN_Process_Init>:

void MIN_Process_Init(void){
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
	MIN_Context_Init(&OBC_MinCtx, EXP_PORT);
 8007afc:	2100      	movs	r1, #0
 8007afe:	4810      	ldr	r0, [pc, #64]	@ (8007b40 <MIN_Process_Init+0x48>)
 8007b00:	f00d fc68 	bl	80153d4 <MIN_Context_Init>
	MIN_RegisterTimeoutCallback(&OBC_MinCtx, MIN_Timeout_Handler);
 8007b04:	490f      	ldr	r1, [pc, #60]	@ (8007b44 <MIN_Process_Init+0x4c>)
 8007b06:	480e      	ldr	r0, [pc, #56]	@ (8007b40 <MIN_Process_Init+0x48>)
 8007b08:	f00d fcb1 	bl	801546e <MIN_RegisterTimeoutCallback>

	responseSemaphore = xSemaphoreCreateBinary();
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	2100      	movs	r1, #0
 8007b10:	2001      	movs	r0, #1
 8007b12:	f008 feb2 	bl	801087a <xQueueGenericCreate>
 8007b16:	4603      	mov	r3, r0
 8007b18:	4a0b      	ldr	r2, [pc, #44]	@ (8007b48 <MIN_Process_Init+0x50>)
 8007b1a:	6013      	str	r3, [r2, #0]
	pendingCommandsQueue = xQueueCreate(10, sizeof(CommandInfo_t));
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2102      	movs	r1, #2
 8007b20:	200a      	movs	r0, #10
 8007b22:	f008 feaa 	bl	801087a <xQueueGenericCreate>
 8007b26:	4603      	mov	r3, r0
 8007b28:	4a08      	ldr	r2, [pc, #32]	@ (8007b4c <MIN_Process_Init+0x54>)
 8007b2a:	6013      	str	r3, [r2, #0]
	MIN_RegisterResponseHandler(MIN_ResponseCallback);
 8007b2c:	4808      	ldr	r0, [pc, #32]	@ (8007b50 <MIN_Process_Init+0x58>)
 8007b2e:	f00d fd1d 	bl	801556c <MIN_RegisterResponseHandler>

	Sys_Boardcast(E_OK, LOG_INFOR, "MIN Process Init!");
 8007b32:	4a08      	ldr	r2, [pc, #32]	@ (8007b54 <MIN_Process_Init+0x5c>)
 8007b34:	2100      	movs	r1, #0
 8007b36:	2000      	movs	r0, #0
 8007b38:	f000 fa8c 	bl	8008054 <Sys_Boardcast>
}
 8007b3c:	bf00      	nop
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	240193e4 	.word	0x240193e4
 8007b44:	08007ad9 	.word	0x08007ad9
 8007b48:	240195f4 	.word	0x240195f4
 8007b4c:	240195f8 	.word	0x240195f8
 8007b50:	08007a29 	.word	0x08007a29
 8007b54:	08025208 	.word	0x08025208

08007b58 <MIN_Processing>:

void MIN_Processing(void){
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
    while (UART_DMA_Driver_IsDataAvailable(UART_EXP)) {
 8007b5e:	e00f      	b.n	8007b80 <MIN_Processing+0x28>
        int data = UART_DMA_Driver_Read(UART_EXP);
 8007b60:	480f      	ldr	r0, [pc, #60]	@ (8007ba0 <MIN_Processing+0x48>)
 8007b62:	f7fa febb 	bl	80028dc <UART_DMA_Driver_Read>
 8007b66:	6078      	str	r0, [r7, #4]
        if (data >= 0) {
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	db08      	blt.n	8007b80 <MIN_Processing+0x28>
            uint8_t byte = (uint8_t)data;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	70fb      	strb	r3, [r7, #3]
            MIN_App_Poll(&OBC_MinCtx, &byte, 1);
 8007b74:	1cfb      	adds	r3, r7, #3
 8007b76:	2201      	movs	r2, #1
 8007b78:	4619      	mov	r1, r3
 8007b7a:	480a      	ldr	r0, [pc, #40]	@ (8007ba4 <MIN_Processing+0x4c>)
 8007b7c:	f00d fc86 	bl	801548c <MIN_App_Poll>
    while (UART_DMA_Driver_IsDataAvailable(UART_EXP)) {
 8007b80:	4807      	ldr	r0, [pc, #28]	@ (8007ba0 <MIN_Processing+0x48>)
 8007b82:	f7fa fecc 	bl	800291e <UART_DMA_Driver_IsDataAvailable>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e9      	bne.n	8007b60 <MIN_Processing+0x8>
        }
    }
	MIN_App_Poll(&OBC_MinCtx, NULL, 0);
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2100      	movs	r1, #0
 8007b90:	4804      	ldr	r0, [pc, #16]	@ (8007ba4 <MIN_Processing+0x4c>)
 8007b92:	f00d fc7b 	bl	801548c <MIN_App_Poll>
}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40007800 	.word	0x40007800
 8007ba4:	240193e4 	.word	0x240193e4

08007ba8 <Min_Send_CONTROL_TEMP_CMD>:

// =================================================================
// Command Sending Functions
// =================================================================

void Min_Send_CONTROL_TEMP_CMD(uint8_t temperature) {
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	71fb      	strb	r3, [r7, #7]
    uint8_t payload[1] = {temperature};
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	733b      	strb	r3, [r7, #12]
    MIN_Send(&OBC_MinCtx, CONTROL_TEMP_CMD, payload, 1);
 8007bb6:	f107 020c 	add.w	r2, r7, #12
 8007bba:	2301      	movs	r3, #1
 8007bbc:	2103      	movs	r1, #3
 8007bbe:	4815      	ldr	r0, [pc, #84]	@ (8007c14 <Min_Send_CONTROL_TEMP_CMD+0x6c>)
 8007bc0:	f00d fcb6 	bl	8015530 <MIN_Send>

    CommandInfo_t cmdInfo = {CONTROL_TEMP_CMD, CONTROL_TEMP_ACK};
 8007bc4:	4b14      	ldr	r3, [pc, #80]	@ (8007c18 <Min_Send_CONTROL_TEMP_CMD+0x70>)
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007bca:	4b14      	ldr	r3, [pc, #80]	@ (8007c1c <Min_Send_CONTROL_TEMP_CMD+0x74>)
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	f107 0108 	add.w	r1, r7, #8
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd8:	f008 fefa 	bl	80109d0 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007bdc:	4b10      	ldr	r3, [pc, #64]	@ (8007c20 <Min_Send_CONTROL_TEMP_CMD+0x78>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007be4:	4618      	mov	r0, r3
 8007be6:	f009 f997 	bl	8010f18 <xQueueSemaphoreTake>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d105      	bne.n	8007bfc <Min_Send_CONTROL_TEMP_CMD+0x54>
        SYSLOG_NOTICE("Response OK - CONTROL_TEMP_CMD");
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	490c      	ldr	r1, [pc, #48]	@ (8007c24 <Min_Send_CONTROL_TEMP_CMD+0x7c>)
 8007bf4:	2002      	movs	r0, #2
 8007bf6:	f000 fbdf 	bl	80083b8 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout CONTROL_TEMP_CMD");
        ClearPendingCommand();
    }
}
 8007bfa:	e006      	b.n	8007c0a <Min_Send_CONTROL_TEMP_CMD+0x62>
        SYSLOG_ERROR("Timeout CONTROL_TEMP_CMD");
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	490a      	ldr	r1, [pc, #40]	@ (8007c28 <Min_Send_CONTROL_TEMP_CMD+0x80>)
 8007c00:	2004      	movs	r0, #4
 8007c02:	f000 fbd9 	bl	80083b8 <syslog_log>
        ClearPendingCommand();
 8007c06:	f7ff ff3d 	bl	8007a84 <ClearPendingCommand>
}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	240193e4 	.word	0x240193e4
 8007c18:	08025258 	.word	0x08025258
 8007c1c:	240195f8 	.word	0x240195f8
 8007c20:	240195f4 	.word	0x240195f4
 8007c24:	0802521c 	.word	0x0802521c
 8007c28:	0802523c 	.word	0x0802523c

08007c2c <Min_Send_COLLECT_DATA>:

void Min_Send_COLLECT_DATA(uint32_t sample) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]

    uint8_t payload[4] = {0};
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
    // Big-endian packing [3210]
    payload[3] = (uint8_t)((sample >> 24) & 0xFF);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	0e1b      	lsrs	r3, r3, #24
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	73fb      	strb	r3, [r7, #15]
    payload[2] = (uint8_t)((sample >> 16) & 0xFF);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	0c1b      	lsrs	r3, r3, #16
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	73bb      	strb	r3, [r7, #14]
    payload[1] = (uint8_t)((sample >> 8	) & 0xFF);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	0a1b      	lsrs	r3, r3, #8
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	737b      	strb	r3, [r7, #13]
    payload[0] = (uint8_t)((sample & 0xFF));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	733b      	strb	r3, [r7, #12]

    MIN_Send(&OBC_MinCtx, COLLECT_DATA_CMD, payload, sizeof(payload));
 8007c56:	f107 020c 	add.w	r2, r7, #12
 8007c5a:	2304      	movs	r3, #4
 8007c5c:	2112      	movs	r1, #18
 8007c5e:	4815      	ldr	r0, [pc, #84]	@ (8007cb4 <Min_Send_COLLECT_DATA+0x88>)
 8007c60:	f00d fc66 	bl	8015530 <MIN_Send>

    CommandInfo_t cmdInfo = {COLLECT_DATA_CMD, DONE};
 8007c64:	4b14      	ldr	r3, [pc, #80]	@ (8007cb8 <Min_Send_COLLECT_DATA+0x8c>)
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007c6a:	4b14      	ldr	r3, [pc, #80]	@ (8007cbc <Min_Send_COLLECT_DATA+0x90>)
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	f107 0108 	add.w	r1, r7, #8
 8007c72:	2300      	movs	r3, #0
 8007c74:	f04f 32ff 	mov.w	r2, #4294967295
 8007c78:	f008 feaa 	bl	80109d0 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007c7c:	4b10      	ldr	r3, [pc, #64]	@ (8007cc0 <Min_Send_COLLECT_DATA+0x94>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007c84:	4618      	mov	r0, r3
 8007c86:	f009 f947 	bl	8010f18 <xQueueSemaphoreTake>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d105      	bne.n	8007c9c <Min_Send_COLLECT_DATA+0x70>
        SYSLOG_NOTICE("Response OK - COLLECT_DATA");
 8007c90:	2200      	movs	r2, #0
 8007c92:	490c      	ldr	r1, [pc, #48]	@ (8007cc4 <Min_Send_COLLECT_DATA+0x98>)
 8007c94:	2002      	movs	r0, #2
 8007c96:	f000 fb8f 	bl	80083b8 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout COLLECT_DATA");
        ClearPendingCommand();
    }
}
 8007c9a:	e006      	b.n	8007caa <Min_Send_COLLECT_DATA+0x7e>
        SYSLOG_ERROR("Timeout COLLECT_DATA");
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	490a      	ldr	r1, [pc, #40]	@ (8007cc8 <Min_Send_COLLECT_DATA+0x9c>)
 8007ca0:	2004      	movs	r0, #4
 8007ca2:	f000 fb89 	bl	80083b8 <syslog_log>
        ClearPendingCommand();
 8007ca6:	f7ff feed 	bl	8007a84 <ClearPendingCommand>
}
 8007caa:	bf00      	nop
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	240193e4 	.word	0x240193e4
 8007cb8:	08025290 	.word	0x08025290
 8007cbc:	240195f8 	.word	0x240195f8
 8007cc0:	240195f4 	.word	0x240195f4
 8007cc4:	0802525c 	.word	0x0802525c
 8007cc8:	08025278 	.word	0x08025278

08007ccc <Min_Send_PRE_DATA>:

void Min_Send_PRE_DATA(uint16_t chunk_size) {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	80fb      	strh	r3, [r7, #6]
    uint8_t payload[2] = {0};
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	81bb      	strh	r3, [r7, #12]

    payload[1] = (uint8_t)((chunk_size >> 8) & 0xFF);
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	0a1b      	lsrs	r3, r3, #8
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	737b      	strb	r3, [r7, #13]
    payload[0] = (uint8_t)((chunk_size & 0xFF));
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	733b      	strb	r3, [r7, #12]

    MIN_Send(&OBC_MinCtx, PRE_DATA_CMD, payload, sizeof(payload));
 8007cea:	f107 020c 	add.w	r2, r7, #12
 8007cee:	2302      	movs	r3, #2
 8007cf0:	2115      	movs	r1, #21
 8007cf2:	4815      	ldr	r0, [pc, #84]	@ (8007d48 <Min_Send_PRE_DATA+0x7c>)
 8007cf4:	f00d fc1c 	bl	8015530 <MIN_Send>

    CommandInfo_t cmdInfo = {PRE_DATA_CMD, PRE_DATA_ACK};
 8007cf8:	4b14      	ldr	r3, [pc, #80]	@ (8007d4c <Min_Send_PRE_DATA+0x80>)
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007cfe:	4b14      	ldr	r3, [pc, #80]	@ (8007d50 <Min_Send_PRE_DATA+0x84>)
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	f107 0108 	add.w	r1, r7, #8
 8007d06:	2300      	movs	r3, #0
 8007d08:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0c:	f008 fe60 	bl	80109d0 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007d10:	4b10      	ldr	r3, [pc, #64]	@ (8007d54 <Min_Send_PRE_DATA+0x88>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f009 f8fd 	bl	8010f18 <xQueueSemaphoreTake>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d105      	bne.n	8007d30 <Min_Send_PRE_DATA+0x64>
        SYSLOG_NOTICE("Response OK - PRE_DATA_CMD");
 8007d24:	2200      	movs	r2, #0
 8007d26:	490c      	ldr	r1, [pc, #48]	@ (8007d58 <Min_Send_PRE_DATA+0x8c>)
 8007d28:	2002      	movs	r0, #2
 8007d2a:	f000 fb45 	bl	80083b8 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout PRE_DATA_CMD");
        ClearPendingCommand();
    }
}
 8007d2e:	e006      	b.n	8007d3e <Min_Send_PRE_DATA+0x72>
        SYSLOG_ERROR("Timeout PRE_DATA_CMD");
 8007d30:	2200      	movs	r2, #0
 8007d32:	490a      	ldr	r1, [pc, #40]	@ (8007d5c <Min_Send_PRE_DATA+0x90>)
 8007d34:	2004      	movs	r0, #4
 8007d36:	f000 fb3f 	bl	80083b8 <syslog_log>
        ClearPendingCommand();
 8007d3a:	f7ff fea3 	bl	8007a84 <ClearPendingCommand>
}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	240193e4 	.word	0x240193e4
 8007d4c:	080252c8 	.word	0x080252c8
 8007d50:	240195f8 	.word	0x240195f8
 8007d54:	240195f4 	.word	0x240195f4
 8007d58:	08025294 	.word	0x08025294
 8007d5c:	080252b0 	.word	0x080252b0

08007d60 <Min_Send_PRE_CHUNK>:

void Min_Send_PRE_CHUNK(uint8_t chunk) {
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	71fb      	strb	r3, [r7, #7]
    uint8_t payload[1] = {chunk};
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	733b      	strb	r3, [r7, #12]
    MIN_Send(&OBC_MinCtx, PRE_CHUNK_CMD, payload, 1);
 8007d6e:	f107 020c 	add.w	r2, r7, #12
 8007d72:	2301      	movs	r3, #1
 8007d74:	2113      	movs	r1, #19
 8007d76:	4815      	ldr	r0, [pc, #84]	@ (8007dcc <Min_Send_PRE_CHUNK+0x6c>)
 8007d78:	f00d fbda 	bl	8015530 <MIN_Send>

    CommandInfo_t cmdInfo = {PRE_CHUNK_CMD, PRE_CHUNK_ACK};
 8007d7c:	4b14      	ldr	r3, [pc, #80]	@ (8007dd0 <Min_Send_PRE_CHUNK+0x70>)
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007d82:	4b14      	ldr	r3, [pc, #80]	@ (8007dd4 <Min_Send_PRE_CHUNK+0x74>)
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	f107 0108 	add.w	r1, r7, #8
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d90:	f008 fe1e 	bl	80109d0 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007d94:	4b10      	ldr	r3, [pc, #64]	@ (8007dd8 <Min_Send_PRE_CHUNK+0x78>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f009 f8bb 	bl	8010f18 <xQueueSemaphoreTake>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d105      	bne.n	8007db4 <Min_Send_PRE_CHUNK+0x54>
        SYSLOG_NOTICE("Response OK - PRE_CHUNK_CMD");
 8007da8:	2200      	movs	r2, #0
 8007daa:	490c      	ldr	r1, [pc, #48]	@ (8007ddc <Min_Send_PRE_CHUNK+0x7c>)
 8007dac:	2002      	movs	r0, #2
 8007dae:	f000 fb03 	bl	80083b8 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout PRE_CHUNK_CMD");
        ClearPendingCommand();
    }
}
 8007db2:	e006      	b.n	8007dc2 <Min_Send_PRE_CHUNK+0x62>
        SYSLOG_ERROR("Timeout PRE_CHUNK_CMD");
 8007db4:	2200      	movs	r2, #0
 8007db6:	490a      	ldr	r1, [pc, #40]	@ (8007de0 <Min_Send_PRE_CHUNK+0x80>)
 8007db8:	2004      	movs	r0, #4
 8007dba:	f000 fafd 	bl	80083b8 <syslog_log>
        ClearPendingCommand();
 8007dbe:	f7ff fe61 	bl	8007a84 <ClearPendingCommand>
}
 8007dc2:	bf00      	nop
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	240193e4 	.word	0x240193e4
 8007dd0:	08025300 	.word	0x08025300
 8007dd4:	240195f8 	.word	0x240195f8
 8007dd8:	240195f4 	.word	0x240195f4
 8007ddc:	080252cc 	.word	0x080252cc
 8007de0:	080252e8 	.word	0x080252e8

08007de4 <Min_Send_SAMPLERATE_SET>:

void Min_Send_SAMPLERATE_SET(uint32_t sample_rate) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
    uint8_t payload[4] = {0};
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]

    payload[3] = (uint8_t)((sample_rate >> 24) & 0xFF);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	0e1b      	lsrs	r3, r3, #24
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	73fb      	strb	r3, [r7, #15]
    payload[2] = (uint8_t)((sample_rate >> 16) & 0xFF);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	0c1b      	lsrs	r3, r3, #16
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	73bb      	strb	r3, [r7, #14]
    payload[1] = (uint8_t)((sample_rate >> 8) & 0xFF);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	0a1b      	lsrs	r3, r3, #8
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	737b      	strb	r3, [r7, #13]
    payload[0] = (uint8_t)(sample_rate & 0xFF);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	733b      	strb	r3, [r7, #12]

    MIN_Send(&OBC_MinCtx, SAMPLERATE_SET_CMD, payload, sizeof(payload));
 8007e0e:	f107 020c 	add.w	r2, r7, #12
 8007e12:	2304      	movs	r3, #4
 8007e14:	2117      	movs	r1, #23
 8007e16:	4815      	ldr	r0, [pc, #84]	@ (8007e6c <Min_Send_SAMPLERATE_SET+0x88>)
 8007e18:	f00d fb8a 	bl	8015530 <MIN_Send>

    CommandInfo_t cmdInfo = {SAMPLERATE_SET_CMD, DONE};
 8007e1c:	4b14      	ldr	r3, [pc, #80]	@ (8007e70 <Min_Send_SAMPLERATE_SET+0x8c>)
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	813b      	strh	r3, [r7, #8]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007e22:	4b14      	ldr	r3, [pc, #80]	@ (8007e74 <Min_Send_SAMPLERATE_SET+0x90>)
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	f107 0108 	add.w	r1, r7, #8
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e30:	f008 fdce 	bl	80109d0 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007e34:	4b10      	ldr	r3, [pc, #64]	@ (8007e78 <Min_Send_SAMPLERATE_SET+0x94>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f009 f86b 	bl	8010f18 <xQueueSemaphoreTake>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d105      	bne.n	8007e54 <Min_Send_SAMPLERATE_SET+0x70>
        SYSLOG_NOTICE("Response OK - SAMPLERATE_SET_CMD");
 8007e48:	2200      	movs	r2, #0
 8007e4a:	490c      	ldr	r1, [pc, #48]	@ (8007e7c <Min_Send_SAMPLERATE_SET+0x98>)
 8007e4c:	2002      	movs	r0, #2
 8007e4e:	f000 fab3 	bl	80083b8 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout SAMPLERATE_SET_CMD");
        ClearPendingCommand();
    }
}
 8007e52:	e006      	b.n	8007e62 <Min_Send_SAMPLERATE_SET+0x7e>
        SYSLOG_ERROR("Timeout SAMPLERATE_SET_CMD");
 8007e54:	2200      	movs	r2, #0
 8007e56:	490a      	ldr	r1, [pc, #40]	@ (8007e80 <Min_Send_SAMPLERATE_SET+0x9c>)
 8007e58:	2004      	movs	r0, #4
 8007e5a:	f000 faad 	bl	80083b8 <syslog_log>
        ClearPendingCommand();
 8007e5e:	f7ff fe11 	bl	8007a84 <ClearPendingCommand>
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	240193e4 	.word	0x240193e4
 8007e70:	08025344 	.word	0x08025344
 8007e74:	240195f8 	.word	0x240195f8
 8007e78:	240195f4 	.word	0x240195f4
 8007e7c:	08025304 	.word	0x08025304
 8007e80:	08025328 	.word	0x08025328

08007e84 <Min_Send_SAMPLERATE_GET>:

void Min_Send_SAMPLERATE_GET(void) {
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
    MIN_Send(&OBC_MinCtx, SAMPLERATE_GET_CMD, NULL, 0);
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2118      	movs	r1, #24
 8007e90:	4814      	ldr	r0, [pc, #80]	@ (8007ee4 <Min_Send_SAMPLERATE_GET+0x60>)
 8007e92:	f00d fb4d 	bl	8015530 <MIN_Send>

    CommandInfo_t cmdInfo = {SAMPLERATE_GET_CMD, SAMPLERATE_GET_ACK};
 8007e96:	4b14      	ldr	r3, [pc, #80]	@ (8007ee8 <Min_Send_SAMPLERATE_GET+0x64>)
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	80bb      	strh	r3, [r7, #4]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007e9c:	4b13      	ldr	r3, [pc, #76]	@ (8007eec <Min_Send_SAMPLERATE_GET+0x68>)
 8007e9e:	6818      	ldr	r0, [r3, #0]
 8007ea0:	1d39      	adds	r1, r7, #4
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea8:	f008 fd92 	bl	80109d0 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007eac:	4b10      	ldr	r3, [pc, #64]	@ (8007ef0 <Min_Send_SAMPLERATE_GET+0x6c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f009 f82f 	bl	8010f18 <xQueueSemaphoreTake>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d105      	bne.n	8007ecc <Min_Send_SAMPLERATE_GET+0x48>
        SYSLOG_NOTICE("Response OK - SAMPLERATE_GET_CMD");
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	490c      	ldr	r1, [pc, #48]	@ (8007ef4 <Min_Send_SAMPLERATE_GET+0x70>)
 8007ec4:	2002      	movs	r0, #2
 8007ec6:	f000 fa77 	bl	80083b8 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout SAMPLERATE_GET_CMD");
        ClearPendingCommand();
    }
}
 8007eca:	e006      	b.n	8007eda <Min_Send_SAMPLERATE_GET+0x56>
        SYSLOG_ERROR("Timeout SAMPLERATE_GET_CMD");
 8007ecc:	2200      	movs	r2, #0
 8007ece:	490a      	ldr	r1, [pc, #40]	@ (8007ef8 <Min_Send_SAMPLERATE_GET+0x74>)
 8007ed0:	2004      	movs	r0, #4
 8007ed2:	f000 fa71 	bl	80083b8 <syslog_log>
        ClearPendingCommand();
 8007ed6:	f7ff fdd5 	bl	8007a84 <ClearPendingCommand>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	240193e4 	.word	0x240193e4
 8007ee8:	08025388 	.word	0x08025388
 8007eec:	240195f8 	.word	0x240195f8
 8007ef0:	240195f4 	.word	0x240195f4
 8007ef4:	08025348 	.word	0x08025348
 8007ef8:	0802536c 	.word	0x0802536c

08007efc <Min_Send_COLLECT_PACKAGE>:

void Min_Send_COLLECT_PACKAGE(void) {
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
    MIN_Send(&OBC_MinCtx, COLLECT_PACKAGE_CMD, NULL, 0);
 8007f02:	2300      	movs	r3, #0
 8007f04:	2200      	movs	r2, #0
 8007f06:	211a      	movs	r1, #26
 8007f08:	4814      	ldr	r0, [pc, #80]	@ (8007f5c <Min_Send_COLLECT_PACKAGE+0x60>)
 8007f0a:	f00d fb11 	bl	8015530 <MIN_Send>

    CommandInfo_t cmdInfo = {COLLECT_PACKAGE_CMD, COLLECT_PACKAGE_ACK};
 8007f0e:	4b14      	ldr	r3, [pc, #80]	@ (8007f60 <Min_Send_COLLECT_PACKAGE+0x64>)
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	80bb      	strh	r3, [r7, #4]
    xQueueSend(pendingCommandsQueue, &cmdInfo, portMAX_DELAY);
 8007f14:	4b13      	ldr	r3, [pc, #76]	@ (8007f64 <Min_Send_COLLECT_PACKAGE+0x68>)
 8007f16:	6818      	ldr	r0, [r3, #0]
 8007f18:	1d39      	adds	r1, r7, #4
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f20:	f008 fd56 	bl	80109d0 <xQueueGenericSend>

    if (xSemaphoreTake(responseSemaphore, pdMS_TO_TICKS(1000)) == pdTRUE) {
 8007f24:	4b10      	ldr	r3, [pc, #64]	@ (8007f68 <Min_Send_COLLECT_PACKAGE+0x6c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f008 fff3 	bl	8010f18 <xQueueSemaphoreTake>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d105      	bne.n	8007f44 <Min_Send_COLLECT_PACKAGE+0x48>
        SYSLOG_NOTICE("Response OK - COLLECT_PACKAGE_CMD");
 8007f38:	2200      	movs	r2, #0
 8007f3a:	490c      	ldr	r1, [pc, #48]	@ (8007f6c <Min_Send_COLLECT_PACKAGE+0x70>)
 8007f3c:	2002      	movs	r0, #2
 8007f3e:	f000 fa3b 	bl	80083b8 <syslog_log>
    } else {
        SYSLOG_ERROR("Timeout COLLECT_PACKAGE_CMD");
        ClearPendingCommand();
    }
}
 8007f42:	e006      	b.n	8007f52 <Min_Send_COLLECT_PACKAGE+0x56>
        SYSLOG_ERROR("Timeout COLLECT_PACKAGE_CMD");
 8007f44:	2200      	movs	r2, #0
 8007f46:	490a      	ldr	r1, [pc, #40]	@ (8007f70 <Min_Send_COLLECT_PACKAGE+0x74>)
 8007f48:	2004      	movs	r0, #4
 8007f4a:	f000 fa35 	bl	80083b8 <syslog_log>
        ClearPendingCommand();
 8007f4e:	f7ff fd99 	bl	8007a84 <ClearPendingCommand>
}
 8007f52:	bf00      	nop
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	240193e4 	.word	0x240193e4
 8007f60:	080253cc 	.word	0x080253cc
 8007f64:	240195f8 	.word	0x240195f8
 8007f68:	240195f4 	.word	0x240195f4
 8007f6c:	0802538c 	.word	0x0802538c
 8007f70:	080253b0 	.word	0x080253b0

08007f74 <LL_USART_IsActiveFlag_TC>:
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f84:	2b40      	cmp	r3, #64	@ 0x40
 8007f86:	d101      	bne.n	8007f8c <LL_USART_IsActiveFlag_TC+0x18>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e000      	b.n	8007f8e <LL_USART_IsActiveFlag_TC+0x1a>
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007faa:	2b80      	cmp	r3, #128	@ 0x80
 8007fac:	d101      	bne.n	8007fb2 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <LL_USART_TransmitData8>:
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8007fcc:	78fa      	ldrb	r2, [r7, #3]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <syslog_level_to_str>:
#include "Dmesg/dmesg.h"

static USART_TypeDef* syslog_uarts[SYSLOG_OUTPUT_UART_COUNT] = SYSLOG_OUTPUT_UARTS;

static const char* syslog_level_to_str(syslog_level_t level)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	71fb      	strb	r3, [r7, #7]
    switch(level) {
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	2b05      	cmp	r3, #5
 8007fee:	d81b      	bhi.n	8008028 <syslog_level_to_str+0x48>
 8007ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff8 <syslog_level_to_str+0x18>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	08008011 	.word	0x08008011
 8007ffc:	08008015 	.word	0x08008015
 8008000:	08008019 	.word	0x08008019
 8008004:	0800801d 	.word	0x0800801d
 8008008:	08008021 	.word	0x08008021
 800800c:	08008025 	.word	0x08008025
        case LOG_INFOR:  return "[INFO]  ";
 8008010:	4b09      	ldr	r3, [pc, #36]	@ (8008038 <syslog_level_to_str+0x58>)
 8008012:	e00a      	b.n	800802a <syslog_level_to_str+0x4a>
        case LOG_DEBUG:  return "[DEBUG] ";
 8008014:	4b09      	ldr	r3, [pc, #36]	@ (800803c <syslog_level_to_str+0x5c>)
 8008016:	e008      	b.n	800802a <syslog_level_to_str+0x4a>
        case LOG_NOTICE: return "[NOTICE]";
 8008018:	4b09      	ldr	r3, [pc, #36]	@ (8008040 <syslog_level_to_str+0x60>)
 800801a:	e006      	b.n	800802a <syslog_level_to_str+0x4a>
        case LOG_WARN:   return "[WARN]  ";
 800801c:	4b09      	ldr	r3, [pc, #36]	@ (8008044 <syslog_level_to_str+0x64>)
 800801e:	e004      	b.n	800802a <syslog_level_to_str+0x4a>
        case LOG_ERROR:  return "[ERROR] ";
 8008020:	4b09      	ldr	r3, [pc, #36]	@ (8008048 <syslog_level_to_str+0x68>)
 8008022:	e002      	b.n	800802a <syslog_level_to_str+0x4a>
        case LOG_FATAL:  return "[FATAL] ";
 8008024:	4b09      	ldr	r3, [pc, #36]	@ (800804c <syslog_level_to_str+0x6c>)
 8008026:	e000      	b.n	800802a <syslog_level_to_str+0x4a>
        default:         return "[UNK]   ";
 8008028:	4b09      	ldr	r3, [pc, #36]	@ (8008050 <syslog_level_to_str+0x70>)
    }
}
 800802a:	4618      	mov	r0, r3
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	080253d0 	.word	0x080253d0
 800803c:	080253dc 	.word	0x080253dc
 8008040:	080253e8 	.word	0x080253e8
 8008044:	080253f4 	.word	0x080253f4
 8008048:	08025400 	.word	0x08025400
 800804c:	0802540c 	.word	0x0802540c
 8008050:	08025418 	.word	0x08025418

08008054 <Sys_Boardcast>:

void Sys_Boardcast(bool status, syslog_level_t level, const char *msg)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b0a8      	sub	sp, #160	@ 0xa0
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	603a      	str	r2, [r7, #0]
 800805e:	71fb      	strb	r3, [r7, #7]
 8008060:	460b      	mov	r3, r1
 8008062:	71bb      	strb	r3, [r7, #6]
    switch(level) {
 8008064:	79bb      	ldrb	r3, [r7, #6]
 8008066:	2b05      	cmp	r3, #5
 8008068:	f200 80ee 	bhi.w	8008248 <Sys_Boardcast+0x1f4>
 800806c:	a201      	add	r2, pc, #4	@ (adr r2, 8008074 <Sys_Boardcast+0x20>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	0800808d 	.word	0x0800808d
 8008078:	0800808d 	.word	0x0800808d
 800807c:	0800808d 	.word	0x0800808d
 8008080:	0800808d 	.word	0x0800808d
 8008084:	0800808d 	.word	0x0800808d
 8008088:	0800808d 	.word	0x0800808d
        case LOG_INFOR:  if (!LOG_INFOR_ENABLED)  return; break;
 800808c:	bf00      	nop
    }

    char log_buffer[128];
    int offset;

    offset = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    const char* status_str = status ? "[ ER ] " : "[ OK ] ";
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <Sys_Boardcast+0x4a>
 800809a:	4b6d      	ldr	r3, [pc, #436]	@ (8008250 <Sys_Boardcast+0x1fc>)
 800809c:	e000      	b.n	80080a0 <Sys_Boardcast+0x4c>
 800809e:	4b6d      	ldr	r3, [pc, #436]	@ (8008254 <Sys_Boardcast+0x200>)
 80080a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s", status_str);
 80080a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080a8:	f107 020c 	add.w	r2, r7, #12
 80080ac:	18d0      	adds	r0, r2, r3
 80080ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080b2:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80080b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80080ba:	4a67      	ldr	r2, [pc, #412]	@ (8008258 <Sys_Boardcast+0x204>)
 80080bc:	f019 feaa 	bl	8021e14 <sniprintf>
 80080c0:	4602      	mov	r2, r0
 80080c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080c6:	4413      	add	r3, r2
 80080c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    const char* level_str = syslog_level_to_str(level);
 80080cc:	79bb      	ldrb	r3, [r7, #6]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff ff86 	bl	8007fe0 <syslog_level_to_str>
 80080d4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s->[OBC-STM32] ", level_str);
 80080d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080dc:	f107 020c 	add.w	r2, r7, #12
 80080e0:	18d0      	adds	r0, r2, r3
 80080e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080e6:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80080ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080ee:	4a5b      	ldr	r2, [pc, #364]	@ (800825c <Sys_Boardcast+0x208>)
 80080f0:	f019 fe90 	bl	8021e14 <sniprintf>
 80080f4:	4602      	mov	r2, r0
 80080f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080fa:	4413      	add	r3, r2
 80080fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "\"%s\"\r\n", msg);
 8008100:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008104:	f107 020c 	add.w	r2, r7, #12
 8008108:	18d0      	adds	r0, r2, r3
 800810a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800810e:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	4a52      	ldr	r2, [pc, #328]	@ (8008260 <Sys_Boardcast+0x20c>)
 8008116:	f019 fe7d 	bl	8021e14 <sniprintf>
 800811a:	4602      	mov	r2, r0
 800811c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008120:	4413      	add	r3, r2
 8008122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 8008126:	2300      	movs	r3, #0
 8008128:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800812c:	e015      	b.n	800815a <Sys_Boardcast+0x106>
    {
        while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 800812e:	bf00      	nop
 8008130:	484c      	ldr	r0, [pc, #304]	@ (8008264 <Sys_Boardcast+0x210>)
 8008132:	f7ff ff32 	bl	8007f9a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d0f9      	beq.n	8008130 <Sys_Boardcast+0xdc>
        LL_USART_TransmitData8(UART_DEBUG, (uint8_t)log_buffer[i]);
 800813c:	f107 020c 	add.w	r2, r7, #12
 8008140:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008144:	4413      	add	r3, r2
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	4619      	mov	r1, r3
 800814a:	4846      	ldr	r0, [pc, #280]	@ (8008264 <Sys_Boardcast+0x210>)
 800814c:	f7ff ff38 	bl	8007fc0 <LL_USART_TransmitData8>
    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 8008150:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008154:	3301      	adds	r3, #1
 8008156:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800815a:	f107 020c 	add.w	r2, r7, #12
 800815e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008162:	4413      	add	r3, r2
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e1      	bne.n	800812e <Sys_Boardcast+0xda>
    }
    while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 800816a:	bf00      	nop
 800816c:	483d      	ldr	r0, [pc, #244]	@ (8008264 <Sys_Boardcast+0x210>)
 800816e:	f7ff ff01 	bl	8007f74 <LL_USART_IsActiveFlag_TC>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0f9      	beq.n	800816c <Sys_Boardcast+0x118>

    offset = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s", status_str);
 800817e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008182:	f107 020c 	add.w	r2, r7, #12
 8008186:	18d0      	adds	r0, r2, r3
 8008188:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800818c:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 8008190:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008194:	4a30      	ldr	r2, [pc, #192]	@ (8008258 <Sys_Boardcast+0x204>)
 8008196:	f019 fe3d 	bl	8021e14 <sniprintf>
 800819a:	4602      	mov	r2, r0
 800819c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081a0:	4413      	add	r3, r2
 80081a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s->[USB-STM32] ", level_str);
 80081a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081aa:	f107 020c 	add.w	r2, r7, #12
 80081ae:	18d0      	adds	r0, r2, r3
 80081b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081b4:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80081b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081bc:	4a2a      	ldr	r2, [pc, #168]	@ (8008268 <Sys_Boardcast+0x214>)
 80081be:	f019 fe29 	bl	8021e14 <sniprintf>
 80081c2:	4602      	mov	r2, r0
 80081c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081c8:	4413      	add	r3, r2
 80081ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "\"%s\"\r\n", msg);
 80081ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081d2:	f107 020c 	add.w	r2, r7, #12
 80081d6:	18d0      	adds	r0, r2, r3
 80081d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081dc:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008260 <Sys_Boardcast+0x20c>)
 80081e4:	f019 fe16 	bl	8021e14 <sniprintf>
 80081e8:	4602      	mov	r2, r0
 80081ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80081ee:	4413      	add	r3, r2
 80081f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 80081f4:	2300      	movs	r3, #0
 80081f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081fa:	e015      	b.n	8008228 <Sys_Boardcast+0x1d4>
    {
        while (!LL_USART_IsActiveFlag_TXE(UART_USB));
 80081fc:	bf00      	nop
 80081fe:	481b      	ldr	r0, [pc, #108]	@ (800826c <Sys_Boardcast+0x218>)
 8008200:	f7ff fecb 	bl	8007f9a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0f9      	beq.n	80081fe <Sys_Boardcast+0x1aa>
        LL_USART_TransmitData8(UART_USB, (uint8_t)log_buffer[i]);
 800820a:	f107 020c 	add.w	r2, r7, #12
 800820e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008212:	4413      	add	r3, r2
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	4619      	mov	r1, r3
 8008218:	4814      	ldr	r0, [pc, #80]	@ (800826c <Sys_Boardcast+0x218>)
 800821a:	f7ff fed1 	bl	8007fc0 <LL_USART_TransmitData8>
    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 800821e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008222:	3301      	adds	r3, #1
 8008224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008228:	f107 020c 	add.w	r2, r7, #12
 800822c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008230:	4413      	add	r3, r2
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e1      	bne.n	80081fc <Sys_Boardcast+0x1a8>
    }
    while (!LL_USART_IsActiveFlag_TC(UART_USB));
 8008238:	bf00      	nop
 800823a:	480c      	ldr	r0, [pc, #48]	@ (800826c <Sys_Boardcast+0x218>)
 800823c:	f7ff fe9a 	bl	8007f74 <LL_USART_IsActiveFlag_TC>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0f9      	beq.n	800823a <Sys_Boardcast+0x1e6>
 8008246:	e000      	b.n	800824a <Sys_Boardcast+0x1f6>
        default:         return; // unknown level
 8008248:	bf00      	nop
}
 800824a:	37a0      	adds	r7, #160	@ 0xa0
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	08025424 	.word	0x08025424
 8008254:	0802542c 	.word	0x0802542c
 8008258:	08025434 	.word	0x08025434
 800825c:	08025438 	.word	0x08025438
 8008260:	0802544c 	.word	0x0802544c
 8008264:	40004400 	.word	0x40004400
 8008268:	08025454 	.word	0x08025454
 800826c:	40011000 	.word	0x40011000

08008270 <Sys_Debugcast>:

void Sys_Debugcast(bool status, syslog_level_t level, const char *msg)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b0a6      	sub	sp, #152	@ 0x98
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	603a      	str	r2, [r7, #0]
 800827a:	71fb      	strb	r3, [r7, #7]
 800827c:	460b      	mov	r3, r1
 800827e:	71bb      	strb	r3, [r7, #6]
    switch(level) {
 8008280:	79bb      	ldrb	r3, [r7, #6]
 8008282:	2b05      	cmp	r3, #5
 8008284:	f200 8087 	bhi.w	8008396 <Sys_Debugcast+0x126>
 8008288:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <Sys_Debugcast+0x20>)
 800828a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828e:	bf00      	nop
 8008290:	080082a9 	.word	0x080082a9
 8008294:	080082a9 	.word	0x080082a9
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082a9 	.word	0x080082a9
 80082a0:	080082a9 	.word	0x080082a9
 80082a4:	080082a9 	.word	0x080082a9
        case LOG_INFOR:  if (!LOG_INFOR_ENABLED)  return; break;
 80082a8:	bf00      	nop
    }

    char log_buffer[128];
    int offset;

    offset = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    const char* status_str = status ? "[ ER ] " : "[ OK ] ";
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <Sys_Debugcast+0x4a>
 80082b6:	4b3a      	ldr	r3, [pc, #232]	@ (80083a0 <Sys_Debugcast+0x130>)
 80082b8:	e000      	b.n	80082bc <Sys_Debugcast+0x4c>
 80082ba:	4b3a      	ldr	r3, [pc, #232]	@ (80083a4 <Sys_Debugcast+0x134>)
 80082bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s", status_str);
 80082c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082c4:	f107 0208 	add.w	r2, r7, #8
 80082c8:	18d0      	adds	r0, r2, r3
 80082ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082ce:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80082d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082d6:	4a34      	ldr	r2, [pc, #208]	@ (80083a8 <Sys_Debugcast+0x138>)
 80082d8:	f019 fd9c 	bl	8021e14 <sniprintf>
 80082dc:	4602      	mov	r2, r0
 80082de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082e2:	4413      	add	r3, r2
 80082e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    const char* level_str = syslog_level_to_str(level);
 80082e8:	79bb      	ldrb	r3, [r7, #6]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff fe78 	bl	8007fe0 <syslog_level_to_str>
 80082f0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "%s->[OBC-STM32] ", level_str);
 80082f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082f8:	f107 0208 	add.w	r2, r7, #8
 80082fc:	18d0      	adds	r0, r2, r3
 80082fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008302:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 8008306:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800830a:	4a28      	ldr	r2, [pc, #160]	@ (80083ac <Sys_Debugcast+0x13c>)
 800830c:	f019 fd82 	bl	8021e14 <sniprintf>
 8008310:	4602      	mov	r2, r0
 8008312:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008316:	4413      	add	r3, r2
 8008318:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset, "\"%s\"\r\n", msg);
 800831c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008320:	f107 0208 	add.w	r2, r7, #8
 8008324:	18d0      	adds	r0, r2, r3
 8008326:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800832a:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	4a1f      	ldr	r2, [pc, #124]	@ (80083b0 <Sys_Debugcast+0x140>)
 8008332:	f019 fd6f 	bl	8021e14 <sniprintf>
 8008336:	4602      	mov	r2, r0
 8008338:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800833c:	4413      	add	r3, r2
 800833e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 8008342:	2300      	movs	r3, #0
 8008344:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008348:	e015      	b.n	8008376 <Sys_Debugcast+0x106>
    {
        while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 800834a:	bf00      	nop
 800834c:	4819      	ldr	r0, [pc, #100]	@ (80083b4 <Sys_Debugcast+0x144>)
 800834e:	f7ff fe24 	bl	8007f9a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0f9      	beq.n	800834c <Sys_Debugcast+0xdc>
        LL_USART_TransmitData8(UART_DEBUG, (uint8_t)log_buffer[i]);
 8008358:	f107 0208 	add.w	r2, r7, #8
 800835c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008360:	4413      	add	r3, r2
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	4619      	mov	r1, r3
 8008366:	4813      	ldr	r0, [pc, #76]	@ (80083b4 <Sys_Debugcast+0x144>)
 8008368:	f7ff fe2a 	bl	8007fc0 <LL_USART_TransmitData8>
    for (uint32_t i = 0; log_buffer[i] != '\0'; i++)
 800836c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008370:	3301      	adds	r3, #1
 8008372:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008376:	f107 0208 	add.w	r2, r7, #8
 800837a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800837e:	4413      	add	r3, r2
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e1      	bne.n	800834a <Sys_Debugcast+0xda>
    }
    while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 8008386:	bf00      	nop
 8008388:	480a      	ldr	r0, [pc, #40]	@ (80083b4 <Sys_Debugcast+0x144>)
 800838a:	f7ff fdf3 	bl	8007f74 <LL_USART_IsActiveFlag_TC>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0f9      	beq.n	8008388 <Sys_Debugcast+0x118>
 8008394:	e000      	b.n	8008398 <Sys_Debugcast+0x128>
        default:         return; // unknown level
 8008396:	bf00      	nop
}
 8008398:	3798      	adds	r7, #152	@ 0x98
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	08025424 	.word	0x08025424
 80083a4:	0802542c 	.word	0x0802542c
 80083a8:	08025434 	.word	0x08025434
 80083ac:	08025438 	.word	0x08025438
 80083b0:	0802544c 	.word	0x0802544c
 80083b4:	40004400 	.word	0x40004400

080083b8 <syslog_log>:
 * - Finally, it appends the message content enclosed in quotes, followed by a newline.
 * Example output:
 *    2024-02-22 23:40:03 0:05:03 [NOTICE] [OBC-STM32] "Start up"
 */
void syslog_log(syslog_level_t level, const char *msg, int use_polling)
{
 80083b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ba:	b0af      	sub	sp, #188	@ 0xbc
 80083bc:	af06      	add	r7, sp, #24
 80083be:	4603      	mov	r3, r0
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	73fb      	strb	r3, [r7, #15]
    char log_buffer[128];
    int offset = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

#if SYSLOG_USE_RTC
    s_DateTime rtc;
    Utils_GetRTC(&rtc);
 80083cc:	f107 0314 	add.w	r3, r7, #20
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 fedd 	bl	800a190 <Utils_GetRTC>
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 80083d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083da:	f107 021c 	add.w	r2, r7, #28
 80083de:	18d0      	adds	r0, r2, r3
 80083e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083e4:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
                "20%02d-%02d-%02d %02d:%02d:%02d ",
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 80083e8:	7dbb      	ldrb	r3, [r7, #22]
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 80083ea:	469c      	mov	ip, r3
                rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 80083ec:	7d7b      	ldrb	r3, [r7, #21]
 80083ee:	7d3a      	ldrb	r2, [r7, #20]
 80083f0:	7dfc      	ldrb	r4, [r7, #23]
 80083f2:	7e3d      	ldrb	r5, [r7, #24]
 80083f4:	7e7e      	ldrb	r6, [r7, #25]
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 80083f6:	9604      	str	r6, [sp, #16]
 80083f8:	9503      	str	r5, [sp, #12]
 80083fa:	9402      	str	r4, [sp, #8]
 80083fc:	9201      	str	r2, [sp, #4]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	4663      	mov	r3, ip
 8008402:	4a45      	ldr	r2, [pc, #276]	@ (8008518 <syslog_log+0x160>)
 8008404:	f019 fd06 	bl	8021e14 <sniprintf>
 8008408:	4602      	mov	r2, r0
 800840a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800840e:	4413      	add	r3, r2
 8008410:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
#endif

#if SYSLOG_USE_WORKING_TIME
    uint8_t hours = 0, minutes = 0, seconds = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	74fb      	strb	r3, [r7, #19]
 8008418:	2300      	movs	r3, #0
 800841a:	74bb      	strb	r3, [r7, #18]
 800841c:	2300      	movs	r3, #0
 800841e:	747b      	strb	r3, [r7, #17]
    Utils_GetWorkingTime(NULL, &hours, &minutes, &seconds);
 8008420:	f107 0311 	add.w	r3, r7, #17
 8008424:	f107 0212 	add.w	r2, r7, #18
 8008428:	f107 0113 	add.w	r1, r7, #19
 800842c:	2000      	movs	r0, #0
 800842e:	f001 ff09 	bl	800a244 <Utils_GetWorkingTime>
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 8008432:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008436:	f107 021c 	add.w	r2, r7, #28
 800843a:	18d0      	adds	r0, r2, r3
 800843c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008440:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 8008444:	7cfb      	ldrb	r3, [r7, #19]
 8008446:	461c      	mov	r4, r3
 8008448:	7cbb      	ldrb	r3, [r7, #18]
 800844a:	7c7a      	ldrb	r2, [r7, #17]
 800844c:	9201      	str	r2, [sp, #4]
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	4623      	mov	r3, r4
 8008452:	4a32      	ldr	r2, [pc, #200]	@ (800851c <syslog_log+0x164>)
 8008454:	f019 fcde 	bl	8021e14 <sniprintf>
 8008458:	4602      	mov	r2, r0
 800845a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800845e:	4413      	add	r3, r2
 8008460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    "%02u:%02u:%02u ",
                    hours, minutes, seconds);
#endif

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 8008464:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008468:	f107 021c 	add.w	r2, r7, #28
 800846c:	18d4      	adds	r4, r2, r3
 800846e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008472:	f1c3 0580 	rsb	r5, r3, #128	@ 0x80
 8008476:	7bfb      	ldrb	r3, [r7, #15]
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff fdb1 	bl	8007fe0 <syslog_level_to_str>
 800847e:	4603      	mov	r3, r0
 8008480:	4a27      	ldr	r2, [pc, #156]	@ (8008520 <syslog_log+0x168>)
 8008482:	4629      	mov	r1, r5
 8008484:	4620      	mov	r0, r4
 8008486:	f019 fcc5 	bl	8021e14 <sniprintf>
 800848a:	4602      	mov	r2, r0
 800848c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008490:	4413      	add	r3, r2
 8008492:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                "%s ", syslog_level_to_str(level));

#ifdef SYSLOG_SOURCE
    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 8008496:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800849a:	f107 021c 	add.w	r2, r7, #28
 800849e:	18d0      	adds	r0, r2, r3
 80084a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084a4:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80084a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008524 <syslog_log+0x16c>)
 80084aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008528 <syslog_log+0x170>)
 80084ac:	f019 fcb2 	bl	8021e14 <sniprintf>
 80084b0:	4602      	mov	r2, r0
 80084b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084b6:	4413      	add	r3, r2
 80084b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                "[%s] ", SYSLOG_SOURCE);
#endif

    offset += snprintf(log_buffer + offset, sizeof(log_buffer) - offset,
 80084bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084c0:	f107 021c 	add.w	r2, r7, #28
 80084c4:	18d0      	adds	r0, r2, r3
 80084c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084ca:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	4a16      	ldr	r2, [pc, #88]	@ (800852c <syslog_log+0x174>)
 80084d2:	f019 fc9f 	bl	8021e14 <sniprintf>
 80084d6:	4602      	mov	r2, r0
 80084d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084dc:	4413      	add	r3, r2
 80084de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                "\"%s", msg);

#ifdef DEBUG_USE_UART
        if (use_polling) {
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00e      	beq.n	8008506 <syslog_log+0x14e>
            UART_Driver_Polling_SendString(syslog_uarts[0], log_buffer);
 80084e8:	4b11      	ldr	r3, [pc, #68]	@ (8008530 <syslog_log+0x178>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f107 021c 	add.w	r2, r7, #28
 80084f0:	4611      	mov	r1, r2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fa fa60 	bl	80029b8 <UART_Driver_Polling_SendString>
            UART_Driver_Polling_SendString(syslog_uarts[0], "\r\n");
 80084f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008530 <syslog_log+0x178>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	490d      	ldr	r1, [pc, #52]	@ (8008534 <syslog_log+0x17c>)
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fa fa5a 	bl	80029b8 <UART_Driver_Polling_SendString>
        } else {
            Dmesg_SafeWrite(log_buffer);
        }
#endif
}
 8008504:	e004      	b.n	8008510 <syslog_log+0x158>
            Dmesg_SafeWrite(log_buffer);
 8008506:	f107 031c 	add.w	r3, r7, #28
 800850a:	4618      	mov	r0, r3
 800850c:	f7fe fd0a 	bl	8006f24 <Dmesg_SafeWrite>
}
 8008510:	bf00      	nop
 8008512:	37a4      	adds	r7, #164	@ 0xa4
 8008514:	46bd      	mov	sp, r7
 8008516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008518:	08025468 	.word	0x08025468
 800851c:	0802548c 	.word	0x0802548c
 8008520:	0802549c 	.word	0x0802549c
 8008524:	080254a0 	.word	0x080254a0
 8008528:	080254a4 	.word	0x080254a4
 800852c:	080254ac 	.word	0x080254ac
 8008530:	240148c4 	.word	0x240148c4
 8008534:	080254b0 	.word	0x080254b0

08008538 <syslog_level_to_str>:

//static USART_TypeDef* syslog_uarts[SYSLOG_OUTPUT_UART_COUNT] = SYSLOG_OUTPUT_UARTS;
//static const int syslog_uart_count = sizeof(syslog_uarts) / sizeof(syslog_uarts[0]);

static const char* syslog_level_to_str(syslog_level_t level)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	71fb      	strb	r3, [r7, #7]
    switch(level) {
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	2b05      	cmp	r3, #5
 8008546:	d81b      	bhi.n	8008580 <syslog_level_to_str+0x48>
 8008548:	a201      	add	r2, pc, #4	@ (adr r2, 8008550 <syslog_level_to_str+0x18>)
 800854a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854e:	bf00      	nop
 8008550:	08008569 	.word	0x08008569
 8008554:	0800856d 	.word	0x0800856d
 8008558:	08008571 	.word	0x08008571
 800855c:	08008575 	.word	0x08008575
 8008560:	08008579 	.word	0x08008579
 8008564:	0800857d 	.word	0x0800857d
        case LOG_INFOR:  return "[INFO]  ";
 8008568:	4b09      	ldr	r3, [pc, #36]	@ (8008590 <syslog_level_to_str+0x58>)
 800856a:	e00a      	b.n	8008582 <syslog_level_to_str+0x4a>
        case LOG_DEBUG:  return "[DEBUG] ";
 800856c:	4b09      	ldr	r3, [pc, #36]	@ (8008594 <syslog_level_to_str+0x5c>)
 800856e:	e008      	b.n	8008582 <syslog_level_to_str+0x4a>
        case LOG_NOTICE: return "[NOTICE]";
 8008570:	4b09      	ldr	r3, [pc, #36]	@ (8008598 <syslog_level_to_str+0x60>)
 8008572:	e006      	b.n	8008582 <syslog_level_to_str+0x4a>
        case LOG_WARN:   return "[WARN]  ";
 8008574:	4b09      	ldr	r3, [pc, #36]	@ (800859c <syslog_level_to_str+0x64>)
 8008576:	e004      	b.n	8008582 <syslog_level_to_str+0x4a>
        case LOG_ERROR:  return "[ERROR] ";
 8008578:	4b09      	ldr	r3, [pc, #36]	@ (80085a0 <syslog_level_to_str+0x68>)
 800857a:	e002      	b.n	8008582 <syslog_level_to_str+0x4a>
        case LOG_FATAL:  return "[FATAL] ";
 800857c:	4b09      	ldr	r3, [pc, #36]	@ (80085a4 <syslog_level_to_str+0x6c>)
 800857e:	e000      	b.n	8008582 <syslog_level_to_str+0x4a>
        default:         return "[UNK]   ";
 8008580:	4b09      	ldr	r3, [pc, #36]	@ (80085a8 <syslog_level_to_str+0x70>)
    }
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	080254b4 	.word	0x080254b4
 8008594:	080254c0 	.word	0x080254c0
 8008598:	080254cc 	.word	0x080254cc
 800859c:	080254d8 	.word	0x080254d8
 80085a0:	080254e4 	.word	0x080254e4
 80085a4:	080254f0 	.word	0x080254f0
 80085a8:	080254fc 	.word	0x080254fc

080085ac <SysLogQueue_Init>:

void SysLogQueue_Init(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
    syslogQueue = xQueueCreate(SYSLOG_QUEUE_SLOT, sizeof(syslog_msg_t));
 80085b0:	2200      	movs	r2, #0
 80085b2:	2141      	movs	r1, #65	@ 0x41
 80085b4:	2010      	movs	r0, #16
 80085b6:	f008 f960 	bl	801087a <xQueueGenericCreate>
 80085ba:	4603      	mov	r3, r0
 80085bc:	4a01      	ldr	r2, [pc, #4]	@ (80085c4 <SysLogQueue_Init+0x18>)
 80085be:	6013      	str	r3, [r2, #0]
}
 80085c0:	bf00      	nop
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	240195fc 	.word	0x240195fc

080085c8 <SysLog_Task>:
        xQueueSend(syslogQueue, &logMsg, 0);
    }
}

void SysLog_Task(void *parameters)
{
 80085c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ca:	b0bf      	sub	sp, #252	@ 0xfc
 80085cc:	af06      	add	r7, sp, #24
 80085ce:	6078      	str	r0, [r7, #4]
    syslog_msg_t logMsg;
    char outputBuffer[SYSLOG_OUTPUT_BUFFER_SIZE];
    for(;;)
    {
        if(xQueueReceive(syslogQueue, &logMsg, portMAX_DELAY) == pdTRUE)
 80085d0:	4b65      	ldr	r3, [pc, #404]	@ (8008768 <SysLog_Task+0x1a0>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80085d8:	f04f 32ff 	mov.w	r2, #4294967295
 80085dc:	4618      	mov	r0, r3
 80085de:	f008 fbb3 	bl	8010d48 <xQueueReceive>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d1f3      	bne.n	80085d0 <SysLog_Task+0x8>
        {
            int offset = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  #if SYSLOG_USE_RTC
            s_DateTime rtc;
            Utils_GetRTC(&rtc);
 80085ee:	f107 0310 	add.w	r3, r7, #16
 80085f2:	4618      	mov	r0, r3
 80085f4:	f001 fdcc 	bl	800a190 <Utils_GetRTC>
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 80085f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085fc:	f107 0218 	add.w	r2, r7, #24
 8008600:	18d0      	adds	r0, r2, r3
 8008602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008606:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800860a:	461e      	mov	r6, r3
                               "20%02d-%02d-%02d %02d:%02d:%02d ",
                               rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 800860c:	7cbb      	ldrb	r3, [r7, #18]
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 800860e:	469c      	mov	ip, r3
                               rtc.year, rtc.month, rtc.day, rtc.hour, rtc.minute, rtc.second);
 8008610:	7c7b      	ldrb	r3, [r7, #17]
 8008612:	7c3a      	ldrb	r2, [r7, #16]
 8008614:	7cf9      	ldrb	r1, [r7, #19]
 8008616:	7d3c      	ldrb	r4, [r7, #20]
 8008618:	7d7d      	ldrb	r5, [r7, #21]
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 800861a:	9504      	str	r5, [sp, #16]
 800861c:	9403      	str	r4, [sp, #12]
 800861e:	9102      	str	r1, [sp, #8]
 8008620:	9201      	str	r2, [sp, #4]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	4663      	mov	r3, ip
 8008626:	4a51      	ldr	r2, [pc, #324]	@ (800876c <SysLog_Task+0x1a4>)
 8008628:	4631      	mov	r1, r6
 800862a:	f019 fbf3 	bl	8021e14 <sniprintf>
 800862e:	4602      	mov	r2, r0
 8008630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008634:	4413      	add	r3, r2
 8008636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  #endif

  #if SYSLOG_USE_WORKING_TIME
            uint32_t days = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	60fb      	str	r3, [r7, #12]
            uint8_t hours = 0, minutes = 0, seconds = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	72fb      	strb	r3, [r7, #11]
 8008642:	2300      	movs	r3, #0
 8008644:	72bb      	strb	r3, [r7, #10]
 8008646:	2300      	movs	r3, #0
 8008648:	727b      	strb	r3, [r7, #9]
            Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 800864a:	f107 0309 	add.w	r3, r7, #9
 800864e:	f107 020a 	add.w	r2, r7, #10
 8008652:	f107 010b 	add.w	r1, r7, #11
 8008656:	f107 000c 	add.w	r0, r7, #12
 800865a:	f001 fdf3 	bl	800a244 <Utils_GetWorkingTime>
            if (days > 0)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01b      	beq.n	800869c <SysLog_Task+0xd4>
            {
                offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 8008664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008668:	f107 0218 	add.w	r2, r7, #24
 800866c:	18d0      	adds	r0, r2, r3
 800866e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008672:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8008676:	461d      	mov	r5, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	7afa      	ldrb	r2, [r7, #11]
 800867c:	7ab9      	ldrb	r1, [r7, #10]
 800867e:	7a7c      	ldrb	r4, [r7, #9]
 8008680:	9402      	str	r4, [sp, #8]
 8008682:	9101      	str	r1, [sp, #4]
 8008684:	9200      	str	r2, [sp, #0]
 8008686:	4a3a      	ldr	r2, [pc, #232]	@ (8008770 <SysLog_Task+0x1a8>)
 8008688:	4629      	mov	r1, r5
 800868a:	f019 fbc3 	bl	8021e14 <sniprintf>
 800868e:	4602      	mov	r2, r0
 8008690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008694:	4413      	add	r3, r2
 8008696:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800869a:	e019      	b.n	80086d0 <SysLog_Task+0x108>
                                   "%lu+%02u:%02u:%02u ",
                                   days, hours, minutes, seconds);
            }
            else
            {
                offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 800869c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086a0:	f107 0218 	add.w	r2, r7, #24
 80086a4:	18d0      	adds	r0, r2, r3
 80086a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086aa:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80086ae:	4619      	mov	r1, r3
 80086b0:	7afb      	ldrb	r3, [r7, #11]
 80086b2:	461c      	mov	r4, r3
 80086b4:	7abb      	ldrb	r3, [r7, #10]
 80086b6:	7a7a      	ldrb	r2, [r7, #9]
 80086b8:	9201      	str	r2, [sp, #4]
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	4623      	mov	r3, r4
 80086be:	4a2d      	ldr	r2, [pc, #180]	@ (8008774 <SysLog_Task+0x1ac>)
 80086c0:	f019 fba8 	bl	8021e14 <sniprintf>
 80086c4:	4602      	mov	r2, r0
 80086c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ca:	4413      	add	r3, r2
 80086cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                                   "%02u:%02u:%02u ",
                                   hours, minutes, seconds);
            }
  #endif

            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 80086d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086d4:	f107 0218 	add.w	r2, r7, #24
 80086d8:	18d4      	adds	r4, r2, r3
 80086da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086de:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80086e2:	461d      	mov	r5, r3
 80086e4:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff ff25 	bl	8008538 <syslog_level_to_str>
 80086ee:	4603      	mov	r3, r0
 80086f0:	4a21      	ldr	r2, [pc, #132]	@ (8008778 <SysLog_Task+0x1b0>)
 80086f2:	4629      	mov	r1, r5
 80086f4:	4620      	mov	r0, r4
 80086f6:	f019 fb8d 	bl	8021e14 <sniprintf>
 80086fa:	4602      	mov	r2, r0
 80086fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008700:	4413      	add	r3, r2
 8008702:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                               "%s ", syslog_level_to_str(logMsg.level));

  #ifdef SYSLOG_SOURCE
            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 8008706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800870a:	f107 0218 	add.w	r2, r7, #24
 800870e:	18d0      	adds	r0, r2, r3
 8008710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008714:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8008718:	4619      	mov	r1, r3
 800871a:	4b18      	ldr	r3, [pc, #96]	@ (800877c <SysLog_Task+0x1b4>)
 800871c:	4a18      	ldr	r2, [pc, #96]	@ (8008780 <SysLog_Task+0x1b8>)
 800871e:	f019 fb79 	bl	8021e14 <sniprintf>
 8008722:	4602      	mov	r2, r0
 8008724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008728:	4413      	add	r3, r2
 800872a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                               "[%s] ", SYSLOG_SOURCE);
  #endif

            offset += snprintf(outputBuffer + offset, SYSLOG_OUTPUT_BUFFER_SIZE - offset,
 800872e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008732:	f107 0218 	add.w	r2, r7, #24
 8008736:	18d0      	adds	r0, r2, r3
 8008738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800873c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8008740:	4619      	mov	r1, r3
 8008742:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008746:	3301      	adds	r3, #1
 8008748:	4a0e      	ldr	r2, [pc, #56]	@ (8008784 <SysLog_Task+0x1bc>)
 800874a:	f019 fb63 	bl	8021e14 <sniprintf>
 800874e:	4602      	mov	r2, r0
 8008750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008754:	4413      	add	r3, r2
 8008756:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                               "\"%s", logMsg.msg);

  #ifdef DEBUG_USE_UART
            Dmesg_SafeWrite(outputBuffer);
 800875a:	f107 0318 	add.w	r3, r7, #24
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fbe0 	bl	8006f24 <Dmesg_SafeWrite>
        if(xQueueReceive(syslogQueue, &logMsg, portMAX_DELAY) == pdTRUE)
 8008764:	e734      	b.n	80085d0 <SysLog_Task+0x8>
 8008766:	bf00      	nop
 8008768:	240195fc 	.word	0x240195fc
 800876c:	08025508 	.word	0x08025508
 8008770:	0802552c 	.word	0x0802552c
 8008774:	08025540 	.word	0x08025540
 8008778:	08025550 	.word	0x08025550
 800877c:	08025554 	.word	0x08025554
 8008780:	08025558 	.word	0x08025558
 8008784:	08025560 	.word	0x08025560

08008788 <bcd2dec>:
/************************************************
 *                   Helper                     *
 ************************************************/

static inline uint8_t bcd2dec(uint8_t bcd)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	091b      	lsrs	r3, r3, #4
 8008796:	b2db      	uxtb	r3, r3
 8008798:	461a      	mov	r2, r3
 800879a:	0092      	lsls	r2, r2, #2
 800879c:	4413      	add	r3, r2
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	4413      	add	r3, r2
 80087ac:	b2db      	uxtb	r3, r3
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <dec2bcd>:

static inline uint8_t dec2bcd(uint8_t dec)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	71fb      	strb	r3, [r7, #7]
    return ((dec / 10) << 4) | (dec % 10);
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008804 <dec2bcd+0x48>)
 80087ca:	fba2 2303 	umull	r2, r3, r2, r3
 80087ce:	08db      	lsrs	r3, r3, #3
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	b25b      	sxtb	r3, r3
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	b258      	sxtb	r0, r3
 80087d8:	79fa      	ldrb	r2, [r7, #7]
 80087da:	4b0a      	ldr	r3, [pc, #40]	@ (8008804 <dec2bcd+0x48>)
 80087dc:	fba3 1302 	umull	r1, r3, r3, r2
 80087e0:	08d9      	lsrs	r1, r3, #3
 80087e2:	460b      	mov	r3, r1
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	440b      	add	r3, r1
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	b25b      	sxtb	r3, r3
 80087f0:	4303      	orrs	r3, r0
 80087f2:	b25b      	sxtb	r3, r3
 80087f4:	b2db      	uxtb	r3, r3
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	cccccccd 	.word	0xcccccccd

08008808 <RV3129_Driver_Init>:


RV3129_HandleTypeDef* RV3129_Driver_Init(I2C_TypeDef *i2c_instance)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
    static LL_I2C_HandleTypeDef ll_i2c_handle;
    ll_i2c_handle.Instance = i2c_instance;
 8008810:	4a0a      	ldr	r2, [pc, #40]	@ (800883c <RV3129_Driver_Init+0x34>)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6013      	str	r3, [r2, #0]
    ll_i2c_handle.State = I2C_STATE_READY;
 8008816:	4b09      	ldr	r3, [pc, #36]	@ (800883c <RV3129_Driver_Init+0x34>)
 8008818:	2201      	movs	r2, #1
 800881a:	729a      	strb	r2, [r3, #10]
    ll_i2c_handle.Process = I2C_DONE;
 800881c:	4b07      	ldr	r3, [pc, #28]	@ (800883c <RV3129_Driver_Init+0x34>)
 800881e:	2210      	movs	r2, #16
 8008820:	72da      	strb	r2, [r3, #11]

    hrtc_local.rtc_i2c = &ll_i2c_handle;
 8008822:	4b07      	ldr	r3, [pc, #28]	@ (8008840 <RV3129_Driver_Init+0x38>)
 8008824:	4a05      	ldr	r2, [pc, #20]	@ (800883c <RV3129_Driver_Init+0x34>)
 8008826:	601a      	str	r2, [r3, #0]
    hrtc_local.address = RV3129_ADDR;
 8008828:	4b05      	ldr	r3, [pc, #20]	@ (8008840 <RV3129_Driver_Init+0x38>)
 800882a:	2256      	movs	r2, #86	@ 0x56
 800882c:	711a      	strb	r2, [r3, #4]

    return &hrtc_local;
 800882e:	4b04      	ldr	r3, [pc, #16]	@ (8008840 <RV3129_Driver_Init+0x38>)
}
 8008830:	4618      	mov	r0, r3
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	24019608 	.word	0x24019608
 8008840:	24019600 	.word	0x24019600

08008844 <RV3129_GetHandle>:

RV3129_HandleTypeDef* RV3129_GetHandle(void)
{
 8008844:	b480      	push	{r7}
 8008846:	af00      	add	r7, sp, #0
    return &hrtc_local;
 8008848:	4b02      	ldr	r3, [pc, #8]	@ (8008854 <RV3129_GetHandle+0x10>)
}
 800884a:	4618      	mov	r0, r3
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	24019600 	.word	0x24019600

08008858 <RV3129_GetTime>:

Std_ReturnType RV3129_GetTime(RV3129_HandleTypeDef *hrtc, s_DateTime *datetime)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af02      	add	r7, sp, #8
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
    uint8_t buffer[7];
    Std_ReturnType status;

    status = I2C_Read(hrtc->rtc_i2c, hrtc->address, RV3129_SECONDS, buffer, 7);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6818      	ldr	r0, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	7919      	ldrb	r1, [r3, #4]
 800886a:	f107 0308 	add.w	r3, r7, #8
 800886e:	2207      	movs	r2, #7
 8008870:	9200      	str	r2, [sp, #0]
 8008872:	2208      	movs	r2, #8
 8008874:	f7f9 f8a2 	bl	80019bc <I2C_Read>
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]
    if (status != E_OK)
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <RV3129_GetTime+0x2e>
    {
        return status;
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	e030      	b.n	80088e8 <RV3129_GetTime+0x90>
    }

    datetime->second = bcd2dec(buffer[0]);
 8008886:	7a3b      	ldrb	r3, [r7, #8]
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff ff7d 	bl	8008788 <bcd2dec>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	715a      	strb	r2, [r3, #5]
    datetime->minute = bcd2dec(buffer[1]);
 8008896:	7a7b      	ldrb	r3, [r7, #9]
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff ff75 	bl	8008788 <bcd2dec>
 800889e:	4603      	mov	r3, r0
 80088a0:	461a      	mov	r2, r3
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	711a      	strb	r2, [r3, #4]
    datetime->hour   = bcd2dec(buffer[2]);
 80088a6:	7abb      	ldrb	r3, [r7, #10]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff ff6d 	bl	8008788 <bcd2dec>
 80088ae:	4603      	mov	r3, r0
 80088b0:	461a      	mov	r2, r3
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	70da      	strb	r2, [r3, #3]
    datetime->day    = bcd2dec(buffer[3]);
 80088b6:	7afb      	ldrb	r3, [r7, #11]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff ff65 	bl	8008788 <bcd2dec>
 80088be:	4603      	mov	r3, r0
 80088c0:	461a      	mov	r2, r3
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	701a      	strb	r2, [r3, #0]
    datetime->month  = bcd2dec(buffer[5]);
 80088c6:	7b7b      	ldrb	r3, [r7, #13]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff ff5d 	bl	8008788 <bcd2dec>
 80088ce:	4603      	mov	r3, r0
 80088d0:	461a      	mov	r2, r3
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	705a      	strb	r2, [r3, #1]
    datetime->year   = bcd2dec(buffer[6]);
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	4618      	mov	r0, r3
 80088da:	f7ff ff55 	bl	8008788 <bcd2dec>
 80088de:	4603      	mov	r3, r0
 80088e0:	461a      	mov	r2, r3
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	709a      	strb	r2, [r3, #2]

    return E_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <RV3129_SetTime>:

Std_ReturnType RV3129_SetTime(RV3129_HandleTypeDef *hrtc, s_DateTime *datetime)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
    uint8_t buffer[7];

    buffer[0] = dec2bcd(datetime->second);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	795b      	ldrb	r3, [r3, #5]
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff ff5c 	bl	80087bc <dec2bcd>
 8008904:	4603      	mov	r3, r0
 8008906:	723b      	strb	r3, [r7, #8]
    buffer[1] = dec2bcd(datetime->minute);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	791b      	ldrb	r3, [r3, #4]
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff ff55 	bl	80087bc <dec2bcd>
 8008912:	4603      	mov	r3, r0
 8008914:	727b      	strb	r3, [r7, #9]
    buffer[2] = dec2bcd(datetime->hour);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	78db      	ldrb	r3, [r3, #3]
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff ff4e 	bl	80087bc <dec2bcd>
 8008920:	4603      	mov	r3, r0
 8008922:	72bb      	strb	r3, [r7, #10]
    buffer[3] = dec2bcd(datetime->day);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff ff47 	bl	80087bc <dec2bcd>
 800892e:	4603      	mov	r3, r0
 8008930:	72fb      	strb	r3, [r7, #11]
    buffer[4] = dec2bcd(1);
 8008932:	2001      	movs	r0, #1
 8008934:	f7ff ff42 	bl	80087bc <dec2bcd>
 8008938:	4603      	mov	r3, r0
 800893a:	733b      	strb	r3, [r7, #12]
    buffer[5] = dec2bcd(datetime->month);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff ff3b 	bl	80087bc <dec2bcd>
 8008946:	4603      	mov	r3, r0
 8008948:	737b      	strb	r3, [r7, #13]
    buffer[6] = dec2bcd(datetime->year);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	789b      	ldrb	r3, [r3, #2]
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff ff34 	bl	80087bc <dec2bcd>
 8008954:	4603      	mov	r3, r0
 8008956:	73bb      	strb	r3, [r7, #14]

    return I2C_Write(hrtc->rtc_i2c, hrtc->address, RV3129_SECONDS, buffer, 7);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6818      	ldr	r0, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7919      	ldrb	r1, [r3, #4]
 8008960:	f107 0308 	add.w	r3, r7, #8
 8008964:	2207      	movs	r2, #7
 8008966:	9200      	str	r2, [sp, #0]
 8008968:	2208      	movs	r2, #8
 800896a:	f7f8 ff6f 	bl	800184c <I2C_Write>
 800896e:	4603      	mov	r3, r0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <RV3129_GetTemp>:

Std_ReturnType RV3129_GetTemp(RV3129_HandleTypeDef *hrtc, int16_t *pTemp)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af02      	add	r7, sp, #8
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
    uint8_t temp;
    Std_ReturnType status;

    status = I2C_Read(hrtc->rtc_i2c, hrtc->address, RV3129_TEMP, &temp, 1);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	7919      	ldrb	r1, [r3, #4]
 800898a:	f107 030e 	add.w	r3, r7, #14
 800898e:	2201      	movs	r2, #1
 8008990:	9200      	str	r2, [sp, #0]
 8008992:	2220      	movs	r2, #32
 8008994:	f7f9 f812 	bl	80019bc <I2C_Read>
 8008998:	4603      	mov	r3, r0
 800899a:	73fb      	strb	r3, [r7, #15]
    if (status != E_OK)
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <RV3129_GetTemp+0x2e>
    {
        return status;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	e007      	b.n	80089b6 <RV3129_GetTemp+0x3e>
    }
    *pTemp = (int8_t)(temp - OFFSET_TEMP);
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	3b3c      	subs	r3, #60	@ 0x3c
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	b25b      	sxtb	r3, r3
 80089ae:	461a      	mov	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	801a      	strh	r2, [r3, #0]
    return E_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <LL_GPIO_SetOutputPin>:
{
 80089be:	b480      	push	{r7}
 80089c0:	b083      	sub	sp, #12
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	619a      	str	r2, [r3, #24]
}
 80089ce:	bf00      	nop
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <LL_GPIO_ResetOutputPin>:
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	041a      	lsls	r2, r3, #16
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	619a      	str	r2, [r3, #24]
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <Watchdog_Device_Init>:
#include "wd_tpl5010.h"

static Watchdog_StateEnum currentState = WATCHDOG_STATE_LOW;

Std_ReturnType Watchdog_Device_Init(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0
    currentState = WATCHDOG_STATE_LOW;
 80089fc:	4b04      	ldr	r3, [pc, #16]	@ (8008a10 <Watchdog_Device_Init+0x18>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
    LL_GPIO_ResetOutputPin(WD_Done_Port, WD_Done_Pin);
 8008a02:	2180      	movs	r1, #128	@ 0x80
 8008a04:	4803      	ldr	r0, [pc, #12]	@ (8008a14 <Watchdog_Device_Init+0x1c>)
 8008a06:	f7ff ffe8 	bl	80089da <LL_GPIO_ResetOutputPin>
    return E_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	24019618 	.word	0x24019618
 8008a14:	58020c00 	.word	0x58020c00

08008a18 <Watchdog_Device_Update>:

void Watchdog_Device_Update(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
    if(currentState == WATCHDOG_STATE_LOW)
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a48 <Watchdog_Device_Update+0x30>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d107      	bne.n	8008a34 <Watchdog_Device_Update+0x1c>
    {
        currentState = WATCHDOG_STATE_HIGH;
 8008a24:	4b08      	ldr	r3, [pc, #32]	@ (8008a48 <Watchdog_Device_Update+0x30>)
 8008a26:	2201      	movs	r2, #1
 8008a28:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(WD_Done_Port, WD_Done_Pin);
 8008a2a:	2180      	movs	r1, #128	@ 0x80
 8008a2c:	4807      	ldr	r0, [pc, #28]	@ (8008a4c <Watchdog_Device_Update+0x34>)
 8008a2e:	f7ff ffc6 	bl	80089be <LL_GPIO_SetOutputPin>
    else
    {
        currentState = WATCHDOG_STATE_LOW;
        LL_GPIO_ResetOutputPin(WD_Done_Port, WD_Done_Pin);
    }
}
 8008a32:	e006      	b.n	8008a42 <Watchdog_Device_Update+0x2a>
        currentState = WATCHDOG_STATE_LOW;
 8008a34:	4b04      	ldr	r3, [pc, #16]	@ (8008a48 <Watchdog_Device_Update+0x30>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(WD_Done_Port, WD_Done_Pin);
 8008a3a:	2180      	movs	r1, #128	@ 0x80
 8008a3c:	4803      	ldr	r0, [pc, #12]	@ (8008a4c <Watchdog_Device_Update+0x34>)
 8008a3e:	f7ff ffcc 	bl	80089da <LL_GPIO_ResetOutputPin>
}
 8008a42:	bf00      	nop
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	24019618 	.word	0x24019618
 8008a4c:	58020c00 	.word	0x58020c00

08008a50 <Watchdog_Device_GetState>:

Watchdog_StateEnum Watchdog_Device_GetState(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
    return currentState;
 8008a54:	4b03      	ldr	r3, [pc, #12]	@ (8008a64 <Watchdog_Device_GetState+0x14>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	24019618 	.word	0x24019618

08008a68 <LL_GPIO_SetOutputPin>:
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	619a      	str	r2, [r3, #24]
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <LL_GPIO_ResetOutputPin>:
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	041a      	lsls	r2, r3, #16
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	619a      	str	r2, [r3, #24]
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
	...

08008aa4 <FRAM_SPI_GetHandle>:
#define FRAM_SLEEP  0xB9   // Sleep mode

static FRAM_SPI_HandleTypeDef hfram_instance;

FRAM_SPI_HandleTypeDef* FRAM_SPI_GetHandle(void)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
    return &hfram_instance;
 8008aa8:	4b02      	ldr	r3, [pc, #8]	@ (8008ab4 <FRAM_SPI_GetHandle+0x10>)
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	2401961c 	.word	0x2401961c

08008ab8 <FRAM_SPI_Driver_Init>:

void FRAM_SPI_Driver_Init(SPI_TypeDef *SPIx, GPIO_TypeDef *CS_Port, uint16_t CS_Pin)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	80fb      	strh	r3, [r7, #6]
    hfram_instance.SPIx = SPIx;
 8008ac6:	4a09      	ldr	r2, [pc, #36]	@ (8008aec <FRAM_SPI_Driver_Init+0x34>)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6013      	str	r3, [r2, #0]
    hfram_instance.CS_Port = CS_Port;
 8008acc:	4a07      	ldr	r2, [pc, #28]	@ (8008aec <FRAM_SPI_Driver_Init+0x34>)
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6053      	str	r3, [r2, #4]
    hfram_instance.CS_Pin = CS_Pin;
 8008ad2:	4a06      	ldr	r2, [pc, #24]	@ (8008aec <FRAM_SPI_Driver_Init+0x34>)
 8008ad4:	88fb      	ldrh	r3, [r7, #6]
 8008ad6:	8113      	strh	r3, [r2, #8]

    LL_GPIO_SetOutputPin(CS_Port, CS_Pin);
 8008ad8:	88fb      	ldrh	r3, [r7, #6]
 8008ada:	4619      	mov	r1, r3
 8008adc:	68b8      	ldr	r0, [r7, #8]
 8008ade:	f7ff ffc3 	bl	8008a68 <LL_GPIO_SetOutputPin>
}
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	2401961c 	.word	0x2401961c

08008af0 <FRAM_SPI_WriteEnable>:

Std_ReturnType FRAM_SPI_WriteEnable(FRAM_SPI_HandleTypeDef *hfram)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
    Std_ReturnType status;

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	891b      	ldrh	r3, [r3, #8]
 8008b00:	4619      	mov	r1, r3
 8008b02:	4610      	mov	r0, r2
 8008b04:	f7ff ffbe 	bl	8008a84 <LL_GPIO_ResetOutputPin>
    status = SPI_Driver_Write(hfram->SPIx, FRAM_WREN);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2106      	movs	r1, #6
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7f9 f97a 	bl	8001e08 <SPI_Driver_Write>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73fb      	strb	r3, [r7, #15]
    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	891b      	ldrh	r3, [r3, #8]
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f7ff ffa0 	bl	8008a68 <LL_GPIO_SetOutputPin>

    return status;
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <FRAM_SPI_WriteDisable>:

Std_ReturnType FRAM_SPI_WriteDisable(FRAM_SPI_HandleTypeDef *hfram)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
    Std_ReturnType status;

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	891b      	ldrh	r3, [r3, #8]
 8008b42:	4619      	mov	r1, r3
 8008b44:	4610      	mov	r0, r2
 8008b46:	f7ff ff9d 	bl	8008a84 <LL_GPIO_ResetOutputPin>
    status = SPI_Driver_Write(hfram->SPIx, FRAM_WRDI);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2104      	movs	r1, #4
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7f9 f959 	bl	8001e08 <SPI_Driver_Write>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]
    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	891b      	ldrh	r3, [r3, #8]
 8008b62:	4619      	mov	r1, r3
 8008b64:	4610      	mov	r0, r2
 8008b66:	f7ff ff7f 	bl	8008a68 <LL_GPIO_SetOutputPin>

    return status;
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <FRAM_SPI_WriteMem>:

Std_ReturnType FRAM_SPI_WriteMem(FRAM_SPI_HandleTypeDef *hfram, uint32_t addr, uint8_t *pData, uint16_t len)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	807b      	strh	r3, [r7, #2]
    Std_ReturnType status;
    uint8_t addr_bytes[3] = {
        (uint8_t)((addr >> 16) & 0xFF),
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	0c1b      	lsrs	r3, r3, #16
 8008b86:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008b88:	753b      	strb	r3, [r7, #20]
        (uint8_t)((addr >> 8) & 0xFF),
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	0a1b      	lsrs	r3, r3, #8
 8008b8e:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008b90:	757b      	strb	r3, [r7, #21]
        (uint8_t)(addr & 0xFF)
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008b96:	75bb      	strb	r3, [r7, #22]
    };

    status = FRAM_SPI_WriteEnable(hfram);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7ff ffa9 	bl	8008af0 <FRAM_SPI_WriteEnable>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]
    if(status != E_OK) return status;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <FRAM_SPI_WriteMem+0x38>
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	e06e      	b.n	8008c8a <FRAM_SPI_WriteMem+0x116>

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	891b      	ldrh	r3, [r3, #8]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f7ff ff64 	bl	8008a84 <LL_GPIO_ResetOutputPin>

    status = SPI_Driver_Write(hfram->SPIx, FRAM_WRITE);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2102      	movs	r1, #2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f9 f920 	bl	8001e08 <SPI_Driver_Write>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	75fb      	strb	r3, [r7, #23]
    if(status != E_OK) {
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d009      	beq.n	8008be6 <FRAM_SPI_WriteMem+0x72>
        LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	891b      	ldrh	r3, [r3, #8]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f7ff ff43 	bl	8008a68 <LL_GPIO_SetOutputPin>
        return status;
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	e051      	b.n	8008c8a <FRAM_SPI_WriteMem+0x116>
    }

    for (int i = 0; i < 3; i++)
 8008be6:	2300      	movs	r3, #0
 8008be8:	61fb      	str	r3, [r7, #28]
 8008bea:	e01b      	b.n	8008c24 <FRAM_SPI_WriteMem+0xb0>
    {
        status = SPI_Driver_Write(hfram->SPIx, addr_bytes[i]);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6818      	ldr	r0, [r3, #0]
 8008bf0:	f107 0214 	add.w	r2, r7, #20
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	f7f9 f904 	bl	8001e08 <SPI_Driver_Write>
 8008c00:	4603      	mov	r3, r0
 8008c02:	75fb      	strb	r3, [r7, #23]
        if(status != E_OK) {
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d009      	beq.n	8008c1e <FRAM_SPI_WriteMem+0xaa>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	891b      	ldrh	r3, [r3, #8]
 8008c12:	4619      	mov	r1, r3
 8008c14:	4610      	mov	r0, r2
 8008c16:	f7ff ff27 	bl	8008a68 <LL_GPIO_SetOutputPin>
            return status;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	e035      	b.n	8008c8a <FRAM_SPI_WriteMem+0x116>
    for (int i = 0; i < 3; i++)
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	3301      	adds	r3, #1
 8008c22:	61fb      	str	r3, [r7, #28]
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	dde0      	ble.n	8008bec <FRAM_SPI_WriteMem+0x78>
        }
    }

    for (int i = 0; i < len; i++)
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61bb      	str	r3, [r7, #24]
 8008c2e:	e01a      	b.n	8008c66 <FRAM_SPI_WriteMem+0xf2>
    {
        status = SPI_Driver_Write(hfram->SPIx, pData[i]);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	f7f9 f8e3 	bl	8001e08 <SPI_Driver_Write>
 8008c42:	4603      	mov	r3, r0
 8008c44:	75fb      	strb	r3, [r7, #23]
        if(status != E_OK) {
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d009      	beq.n	8008c60 <FRAM_SPI_WriteMem+0xec>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	891b      	ldrh	r3, [r3, #8]
 8008c54:	4619      	mov	r1, r3
 8008c56:	4610      	mov	r0, r2
 8008c58:	f7ff ff06 	bl	8008a68 <LL_GPIO_SetOutputPin>
            return status;
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	e014      	b.n	8008c8a <FRAM_SPI_WriteMem+0x116>
    for (int i = 0; i < len; i++)
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	3301      	adds	r3, #1
 8008c64:	61bb      	str	r3, [r7, #24]
 8008c66:	887b      	ldrh	r3, [r7, #2]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	dbe0      	blt.n	8008c30 <FRAM_SPI_WriteMem+0xbc>
        }
    }

    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	891b      	ldrh	r3, [r3, #8]
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f7ff fef5 	bl	8008a68 <LL_GPIO_SetOutputPin>

    status = FRAM_SPI_WriteDisable(hfram);
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f7ff ff57 	bl	8008b32 <FRAM_SPI_WriteDisable>
 8008c84:	4603      	mov	r3, r0
 8008c86:	75fb      	strb	r3, [r7, #23]

    return status;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3720      	adds	r7, #32
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <FRAM_SPI_ReadMem>:

Std_ReturnType FRAM_SPI_ReadMem(FRAM_SPI_HandleTypeDef *hfram, uint32_t addr, uint8_t *pData, uint16_t len)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b088      	sub	sp, #32
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	607a      	str	r2, [r7, #4]
 8008c9e:	807b      	strh	r3, [r7, #2]
    Std_ReturnType status;
    uint8_t addr_bytes[3] = {
        (uint8_t)((addr >> 16) & 0xFF),
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	0c1b      	lsrs	r3, r3, #16
 8008ca4:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008ca6:	743b      	strb	r3, [r7, #16]
        (uint8_t)((addr >> 8) & 0xFF),
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	0a1b      	lsrs	r3, r3, #8
 8008cac:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008cae:	747b      	strb	r3, [r7, #17]
        (uint8_t)(addr & 0xFF)
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	b2db      	uxtb	r3, r3
    uint8_t addr_bytes[3] = {
 8008cb4:	74bb      	strb	r3, [r7, #18]
    };

    LL_GPIO_ResetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	891b      	ldrh	r3, [r3, #8]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f7ff fedf 	bl	8008a84 <LL_GPIO_ResetOutputPin>

    status = SPI_Driver_Write(hfram->SPIx, FRAM_READ);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2103      	movs	r1, #3
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7f9 f89b 	bl	8001e08 <SPI_Driver_Write>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	77fb      	strb	r3, [r7, #31]
    if(status != E_OK) {
 8008cd6:	7ffb      	ldrb	r3, [r7, #31]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d009      	beq.n	8008cf0 <FRAM_SPI_ReadMem+0x5e>
        LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	891b      	ldrh	r3, [r3, #8]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7ff febe 	bl	8008a68 <LL_GPIO_SetOutputPin>
        return status;
 8008cec:	7ffb      	ldrb	r3, [r7, #31]
 8008cee:	e04c      	b.n	8008d8a <FRAM_SPI_ReadMem+0xf8>
    }

    for (int i = 0; i < 3; i++)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61bb      	str	r3, [r7, #24]
 8008cf4:	e01b      	b.n	8008d2e <FRAM_SPI_ReadMem+0x9c>
    {
        status = SPI_Driver_Write(hfram->SPIx, addr_bytes[i]);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	f107 0210 	add.w	r2, r7, #16
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	4413      	add	r3, r2
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	4619      	mov	r1, r3
 8008d06:	f7f9 f87f 	bl	8001e08 <SPI_Driver_Write>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	77fb      	strb	r3, [r7, #31]
        if(status != E_OK) {
 8008d0e:	7ffb      	ldrb	r3, [r7, #31]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d009      	beq.n	8008d28 <FRAM_SPI_ReadMem+0x96>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	685a      	ldr	r2, [r3, #4]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	891b      	ldrh	r3, [r3, #8]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f7ff fea2 	bl	8008a68 <LL_GPIO_SetOutputPin>
            return status;
 8008d24:	7ffb      	ldrb	r3, [r7, #31]
 8008d26:	e030      	b.n	8008d8a <FRAM_SPI_ReadMem+0xf8>
    for (int i = 0; i < 3; i++)
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	61bb      	str	r3, [r7, #24]
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	dde0      	ble.n	8008cf6 <FRAM_SPI_ReadMem+0x64>
        }
    }

    for (int i = 0; i < len; i++)
 8008d34:	2300      	movs	r3, #0
 8008d36:	617b      	str	r3, [r7, #20]
 8008d38:	e01a      	b.n	8008d70 <FRAM_SPI_ReadMem+0xde>
    {
        status = SPI_Driver_Transmit8(hfram->SPIx, 0x00, &pData[i]);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6818      	ldr	r0, [r3, #0]
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	4413      	add	r3, r2
 8008d44:	461a      	mov	r2, r3
 8008d46:	2100      	movs	r1, #0
 8008d48:	f7f9 f815 	bl	8001d76 <SPI_Driver_Transmit8>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	77fb      	strb	r3, [r7, #31]
        if(status != E_OK) {
 8008d50:	7ffb      	ldrb	r3, [r7, #31]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <FRAM_SPI_ReadMem+0xd8>
            LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	891b      	ldrh	r3, [r3, #8]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f7ff fe81 	bl	8008a68 <LL_GPIO_SetOutputPin>
            return status;
 8008d66:	7ffb      	ldrb	r3, [r7, #31]
 8008d68:	e00f      	b.n	8008d8a <FRAM_SPI_ReadMem+0xf8>
    for (int i = 0; i < len; i++)
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	617b      	str	r3, [r7, #20]
 8008d70:	887b      	ldrh	r3, [r7, #2]
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	dbe0      	blt.n	8008d3a <FRAM_SPI_ReadMem+0xa8>
        }
    }

    LL_GPIO_SetOutputPin(hfram->CS_Port, hfram->CS_Pin);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	891b      	ldrh	r3, [r3, #8]
 8008d80:	4619      	mov	r1, r3
 8008d82:	4610      	mov	r0, r2
 8008d84:	f7ff fe70 	bl	8008a68 <LL_GPIO_SetOutputPin>

    return status;
 8008d88:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3720      	adds	r7, #32
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <LL_SPI_Enable>:
{
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f043 0201 	orr.w	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	601a      	str	r2, [r3, #0]
}
 8008da6:	bf00      	nop
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <LL_SPI_Disable>:
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f023 0201 	bic.w	r2, r3, #1
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	601a      	str	r2, [r3, #0]
}
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <LL_SPI_StartMasterTransfer>:
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	601a      	str	r2, [r3, #0]
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <LL_SPI_EnableDMAReq_RX>:
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG1, SPI_CFG1_RXDMAEN);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	609a      	str	r2, [r3, #8]
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <LL_SPI_DisableDMAReq_RX>:
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG1, SPI_CFG1_RXDMAEN);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	609a      	str	r2, [r3, #8]
}
 8008e26:	bf00      	nop
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <LL_SPI_EnableDMAReq_TX>:
{
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	609a      	str	r2, [r3, #8]
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <LL_SPI_DisableDMAReq_TX>:
{
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	609a      	str	r2, [r3, #8]
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <LL_GPIO_SetOutputPin>:
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	619a      	str	r2, [r3, #24]
}
 8008e82:	bf00      	nop
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <LL_GPIO_ResetOutputPin>:
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	041a      	lsls	r2, r3, #16
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	619a      	str	r2, [r3, #24]
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <LL_BDMA_EnableChannel>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_EnableChannel(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60fb      	str	r3, [r7, #12]

  SET_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_EN);
 8008eba:	4a0c      	ldr	r2, [pc, #48]	@ (8008eec <LL_BDMA_EnableChannel+0x40>)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4908      	ldr	r1, [pc, #32]	@ (8008eec <LL_BDMA_EnableChannel+0x40>)
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	440a      	add	r2, r1
 8008ed0:	7812      	ldrb	r2, [r2, #0]
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	f043 0301 	orr.w	r3, r3, #1
 8008edc:	6013      	str	r3, [r2, #0]
}
 8008ede:	bf00      	nop
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	08025e50 	.word	0x08025e50

08008ef0 <LL_BDMA_DisableChannel>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_DisableChannel(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_EN);
 8008efe:	4a0c      	ldr	r2, [pc, #48]	@ (8008f30 <LL_BDMA_DisableChannel+0x40>)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	4413      	add	r3, r2
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4908      	ldr	r1, [pc, #32]	@ (8008f30 <LL_BDMA_DisableChannel+0x40>)
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	440a      	add	r2, r1
 8008f14:	7812      	ldrb	r2, [r2, #0]
 8008f16:	4611      	mov	r1, r2
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	440a      	add	r2, r1
 8008f1c:	f023 0301 	bic.w	r3, r3, #1
 8008f20:	6013      	str	r3, [r2, #0]
}
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	08025e50 	.word	0x08025e50

08008f34 <LL_BDMA_GetDataTransferDirection>:
  *         @arg @ref LL_BDMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_BDMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_BDMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_BDMA_GetDataTransferDirection(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	60fb      	str	r3, [r7, #12]

  return (READ_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR,
 8008f42:	4a08      	ldr	r2, [pc, #32]	@ (8008f64 <LL_BDMA_GetDataTransferDirection+0x30>)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	4413      	add	r3, r2
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4413      	add	r3, r2
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	f244 0310 	movw	r3, #16400	@ 0x4010
 8008f56:	4013      	ands	r3, r2
                   BDMA_CCR_DIR | BDMA_CCR_MEM2MEM));
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	08025e50 	.word	0x08025e50

08008f68 <LL_BDMA_SetDataLength>:
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_SetDataLength(const BDMA_TypeDef *BDMAx, uint32_t Channel, uint32_t NbData)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CNDTR,
 8008f78:	4a0d      	ldr	r2, [pc, #52]	@ (8008fb0 <LL_BDMA_SetDataLength+0x48>)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	4413      	add	r3, r2
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	4b0a      	ldr	r3, [pc, #40]	@ (8008fb4 <LL_BDMA_SetDataLength+0x4c>)
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	4908      	ldr	r1, [pc, #32]	@ (8008fb0 <LL_BDMA_SetDataLength+0x48>)
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	440a      	add	r2, r1
 8008f92:	7812      	ldrb	r2, [r2, #0]
 8008f94:	4611      	mov	r1, r2
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	440a      	add	r2, r1
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	604b      	str	r3, [r1, #4]
             BDMA_CNDTR_NDT, NbData);
}
 8008fa2:	bf00      	nop
 8008fa4:	371c      	adds	r7, #28
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	08025e50 	.word	0x08025e50
 8008fb4:	ffff0000 	.word	0xffff0000

08008fb8 <LL_BDMA_ConfigAddresses>:
  *         @arg @ref LL_BDMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_ConfigAddresses(const BDMA_TypeDef *BDMAx, uint32_t Channel, uint32_t SrcAddress,
                                             uint32_t DstAddress, uint32_t Direction)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	603b      	str	r3, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_BDMA_DIRECTION_MEMORY_TO_PERIPH)
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	2b10      	cmp	r3, #16
 8008fce:	d114      	bne.n	8008ffa <LL_BDMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CM0AR, SrcAddress);
 8008fd0:	4a17      	ldr	r2, [pc, #92]	@ (8009030 <LL_BDMA_ConfigAddresses+0x78>)
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	4413      	add	r3, r2
 8008fde:	461a      	mov	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8008fe4:	4a12      	ldr	r2, [pc, #72]	@ (8009030 <LL_BDMA_ConfigAddresses+0x78>)
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	4413      	add	r3, r2
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	461a      	mov	r2, r3
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CM0AR, DstAddress);
  }
}
 8008ff8:	e013      	b.n	8009022 <LL_BDMA_ConfigAddresses+0x6a>
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8008ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8009030 <LL_BDMA_ConfigAddresses+0x78>)
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4413      	add	r3, r2
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	4413      	add	r3, r2
 8009008:	461a      	mov	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CM0AR, DstAddress);
 800900e:	4a08      	ldr	r2, [pc, #32]	@ (8009030 <LL_BDMA_ConfigAddresses+0x78>)
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	4413      	add	r3, r2
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	4413      	add	r3, r2
 800901c:	461a      	mov	r2, r3
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	60d3      	str	r3, [r2, #12]
}
 8009022:	bf00      	nop
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	08025e50 	.word	0x08025e50

08009034 <LL_BDMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_SetPeriphRequest(const BDMA_TypeDef *BDMAx, uint32_t Channel, uint32_t Request)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  UNUSED(BDMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX2_Channel0 + (DMAMUX_CCR_SIZE * (Channel))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	4b0a      	ldr	r3, [pc, #40]	@ (800906c <LL_BDMA_SetPeriphRequest+0x38>)
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	4b06      	ldr	r3, [pc, #24]	@ (800906c <LL_BDMA_SetPeriphRequest+0x38>)
 8009052:	440b      	add	r3, r1
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4619      	mov	r1, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4313      	orrs	r3, r2
 800905c:	600b      	str	r3, [r1, #0]
}
 800905e:	bf00      	nop
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	16009600 	.word	0x16009600

08009070 <LL_BDMA_IsActiveFlag_TC0>:
  * @rmtoll ISR          TCIF0         LL_BDMA_IsActiveFlag_TC0
  * @param  BDMAx BDMA Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_BDMA_IsActiveFlag_TC0(const BDMA_TypeDef *BDMAx)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BDMAx->ISR, BDMA_ISR_TCIF0) == (BDMA_ISR_TCIF0)) ? 1UL : 0UL);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b02      	cmp	r3, #2
 8009082:	d101      	bne.n	8009088 <LL_BDMA_IsActiveFlag_TC0+0x18>
 8009084:	2301      	movs	r3, #1
 8009086:	e000      	b.n	800908a <LL_BDMA_IsActiveFlag_TC0+0x1a>
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <LL_BDMA_IsActiveFlag_TE0>:
  * @rmtoll ISR          TEIF0         LL_BDMA_IsActiveFlag_TE0
  * @param  BDMAx BDMA Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_BDMA_IsActiveFlag_TE0(const BDMA_TypeDef *BDMAx)
{
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BDMAx->ISR, BDMA_ISR_TEIF0) == (BDMA_ISR_TEIF0)) ? 1UL : 0UL);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0308 	and.w	r3, r3, #8
 80090a6:	2b08      	cmp	r3, #8
 80090a8:	d101      	bne.n	80090ae <LL_BDMA_IsActiveFlag_TE0+0x18>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e000      	b.n	80090b0 <LL_BDMA_IsActiveFlag_TE0+0x1a>
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <LL_BDMA_ClearFlag_TC0>:
  * @rmtoll IFCR         CTCIF0        LL_BDMA_ClearFlag_TC0
  * @param  BDMAx BDMA Instance
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_ClearFlag_TC0(BDMA_TypeDef *BDMAx)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(BDMAx->IFCR, BDMA_IFCR_CTCIF0);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	605a      	str	r2, [r3, #4]
}
 80090ca:	bf00      	nop
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <LL_BDMA_ClearFlag_TE0>:
  * @rmtoll IFCR         CTEIF0        LL_BDMA_ClearFlag_TE0
  * @param  BDMAx BDMA Instance
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_ClearFlag_TE0(BDMA_TypeDef *BDMAx)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(BDMAx->IFCR, BDMA_IFCR_CTEIF0);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2208      	movs	r2, #8
 80090e2:	605a      	str	r2, [r3, #4]
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <LL_BDMA_EnableIT_TC>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_EnableIT_TC(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60fb      	str	r3, [r7, #12]

  SET_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_TCIE);
 80090fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009130 <LL_BDMA_EnableIT_TC+0x40>)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	4413      	add	r3, r2
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4908      	ldr	r1, [pc, #32]	@ (8009130 <LL_BDMA_EnableIT_TC+0x40>)
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	440a      	add	r2, r1
 8009114:	7812      	ldrb	r2, [r2, #0]
 8009116:	4611      	mov	r1, r2
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	440a      	add	r2, r1
 800911c:	f043 0302 	orr.w	r3, r3, #2
 8009120:	6013      	str	r3, [r2, #0]
}
 8009122:	bf00      	nop
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	08025e50 	.word	0x08025e50

08009134 <LL_BDMA_EnableIT_TE>:
  *         @arg @ref LL_BDMA_CHANNEL_6
  *         @arg @ref LL_BDMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_BDMA_EnableIT_TE(const BDMA_TypeDef *BDMAx, uint32_t Channel)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60fb      	str	r3, [r7, #12]

  SET_BIT(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_TEIE);
 8009142:	4a0c      	ldr	r2, [pc, #48]	@ (8009174 <LL_BDMA_EnableIT_TE+0x40>)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	4413      	add	r3, r2
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4908      	ldr	r1, [pc, #32]	@ (8009174 <LL_BDMA_EnableIT_TE+0x40>)
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	440a      	add	r2, r1
 8009158:	7812      	ldrb	r2, [r2, #0]
 800915a:	4611      	mov	r1, r2
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	440a      	add	r2, r1
 8009160:	f043 0308 	orr.w	r3, r3, #8
 8009164:	6013      	str	r3, [r2, #0]
}
 8009166:	bf00      	nop
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	08025e50 	.word	0x08025e50

08009178 <SPI_MasterDevice_GetHandle>:
    .transfer_state = SPI_MASTER_TRANSFER_IDLE,
    .is_initialized = false,
};

SPI_MasterDevice_t* SPI_MasterDevice_GetHandle(void)
{
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0
    return &spi_master_instance;
 800917c:	4b02      	ldr	r3, [pc, #8]	@ (8009188 <SPI_MasterDevice_GetHandle+0x10>)
}
 800917e:	4618      	mov	r0, r3
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	2401962c 	.word	0x2401962c

0800918c <SPI_MasterDevice_Init>:

Std_ReturnType SPI_MasterDevice_Init(SPI_TypeDef *SPIx, GPIO_TypeDef *CS_Port, uint16_t CS_Pin)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	4613      	mov	r3, r2
 8009198:	80fb      	strh	r3, [r7, #6]
    if (spi_master_instance.is_initialized) {
 800919a:	4b1a      	ldr	r3, [pc, #104]	@ (8009204 <SPI_MasterDevice_Init+0x78>)
 800919c:	7adb      	ldrb	r3, [r3, #11]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <SPI_MasterDevice_Init+0x1a>
        return E_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	e02a      	b.n	80091fc <SPI_MasterDevice_Init+0x70>
    }

    spi_master_instance.SPIx = SPIx;
 80091a6:	4a17      	ldr	r2, [pc, #92]	@ (8009204 <SPI_MasterDevice_Init+0x78>)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6013      	str	r3, [r2, #0]
    spi_master_instance.CS_Port = CS_Port;
 80091ac:	4a15      	ldr	r2, [pc, #84]	@ (8009204 <SPI_MasterDevice_Init+0x78>)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6053      	str	r3, [r2, #4]
    spi_master_instance.CS_Pin = CS_Pin;
 80091b2:	4a14      	ldr	r2, [pc, #80]	@ (8009204 <SPI_MasterDevice_Init+0x78>)
 80091b4:	88fb      	ldrh	r3, [r7, #6]
 80091b6:	8113      	strh	r3, [r2, #8]

    rxMaster_Semaphore = xSemaphoreCreateBinary();
 80091b8:	2203      	movs	r2, #3
 80091ba:	2100      	movs	r1, #0
 80091bc:	2001      	movs	r0, #1
 80091be:	f007 fb5c 	bl	801087a <xQueueGenericCreate>
 80091c2:	4603      	mov	r3, r0
 80091c4:	4a10      	ldr	r2, [pc, #64]	@ (8009208 <SPI_MasterDevice_Init+0x7c>)
 80091c6:	6013      	str	r3, [r2, #0]
    if (rxMaster_Semaphore == NULL) {
 80091c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009208 <SPI_MasterDevice_Init+0x7c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <SPI_MasterDevice_Init+0x48>
        return E_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e013      	b.n	80091fc <SPI_MasterDevice_Init+0x70>
    }

    LL_BDMA_EnableIT_TC(BDMA, LL_BDMA_CHANNEL_0);
 80091d4:	2100      	movs	r1, #0
 80091d6:	480d      	ldr	r0, [pc, #52]	@ (800920c <SPI_MasterDevice_Init+0x80>)
 80091d8:	f7ff ff8a 	bl	80090f0 <LL_BDMA_EnableIT_TC>
    LL_BDMA_EnableIT_TE(BDMA, LL_BDMA_CHANNEL_0);
 80091dc:	2100      	movs	r1, #0
 80091de:	480b      	ldr	r0, [pc, #44]	@ (800920c <SPI_MasterDevice_Init+0x80>)
 80091e0:	f7ff ffa8 	bl	8009134 <LL_BDMA_EnableIT_TE>
//    LL_BDMA_SetPeriphAddress(BDMA, LL_BDMA_CHANNEL_0, (uint32_t)&SPIx->RXDR);
    LL_GPIO_SetOutputPin(CS_Port, CS_Pin);
 80091e4:	88fb      	ldrh	r3, [r7, #6]
 80091e6:	4619      	mov	r1, r3
 80091e8:	68b8      	ldr	r0, [r7, #8]
 80091ea:	f7ff fe42 	bl	8008e72 <LL_GPIO_SetOutputPin>
//    LL_SPI_Enable(SPIx);

    spi_master_instance.is_initialized = true;
 80091ee:	4b05      	ldr	r3, [pc, #20]	@ (8009204 <SPI_MasterDevice_Init+0x78>)
 80091f0:	2201      	movs	r2, #1
 80091f2:	72da      	strb	r2, [r3, #11]
    spi_master_instance.transfer_state = SPI_MASTER_TRANSFER_IDLE;
 80091f4:	4b03      	ldr	r3, [pc, #12]	@ (8009204 <SPI_MasterDevice_Init+0x78>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	729a      	strb	r2, [r3, #10]
    return E_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	2401962c 	.word	0x2401962c
 8009208:	24019628 	.word	0x24019628
 800920c:	58025400 	.word	0x58025400

08009210 <SPI_MasterDevice_ReadDMA>:


Std_ReturnType SPI_MasterDevice_ReadDMA(uint32_t data_addr, uint32_t size)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af02      	add	r7, sp, #8
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
    if (!spi_master_instance.is_initialized) {
 800921a:	4b5f      	ldr	r3, [pc, #380]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 800921c:	7adb      	ldrb	r3, [r3, #11]
 800921e:	f083 0301 	eor.w	r3, r3, #1
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <SPI_MasterDevice_ReadDMA+0x1c>
        return E_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e0b0      	b.n	800938e <SPI_MasterDevice_ReadDMA+0x17e>

//    if (toCM4_GetState() != TOCM4_IDLE) {
//        return E_ERROR;
//    }

    if (size < 1 || size > RAM_D2_200KB_SIZE) {
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <SPI_MasterDevice_ReadDMA+0x2a>
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8009238:	d901      	bls.n	800923e <SPI_MasterDevice_ReadDMA+0x2e>
        return E_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e0a7      	b.n	800938e <SPI_MasterDevice_ReadDMA+0x17e>
    }

    spi_master_instance.transfer_state = SPI_MASTER_TRANSFER_BUSY;
 800923e:	4b56      	ldr	r3, [pc, #344]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 8009240:	2201      	movs	r2, #1
 8009242:	729a      	strb	r2, [r3, #10]

    LL_BDMA_ConfigAddresses(BDMA, LL_BDMA_CHANNEL_1,
 8009244:	2101      	movs	r1, #1
 8009246:	4855      	ldr	r0, [pc, #340]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 8009248:	f7ff fe74 	bl	8008f34 <LL_BDMA_GetDataTransferDirection>
 800924c:	4603      	mov	r3, r0
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	4b53      	ldr	r3, [pc, #332]	@ (80093a0 <SPI_MasterDevice_ReadDMA+0x190>)
 8009252:	4a54      	ldr	r2, [pc, #336]	@ (80093a4 <SPI_MasterDevice_ReadDMA+0x194>)
 8009254:	2101      	movs	r1, #1
 8009256:	4851      	ldr	r0, [pc, #324]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 8009258:	f7ff feae 	bl	8008fb8 <LL_BDMA_ConfigAddresses>
    						0x3800FFFF,(uint32_t) &(SPI6->TXDR),
						    LL_BDMA_GetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_1));
    LL_BDMA_SetDataLength(BDMA, LL_BDMA_CHANNEL_1, size);
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	2101      	movs	r1, #1
 8009260:	484e      	ldr	r0, [pc, #312]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 8009262:	f7ff fe81 	bl	8008f68 <LL_BDMA_SetDataLength>

    LL_BDMA_ConfigAddresses(BDMA, LL_BDMA_CHANNEL_0,
 8009266:	2100      	movs	r1, #0
 8009268:	484c      	ldr	r0, [pc, #304]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 800926a:	f7ff fe63 	bl	8008f34 <LL_BDMA_GetDataTransferDirection>
 800926e:	4603      	mov	r3, r0
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a4c      	ldr	r2, [pc, #304]	@ (80093a8 <SPI_MasterDevice_ReadDMA+0x198>)
 8009276:	2100      	movs	r1, #0
 8009278:	4848      	ldr	r0, [pc, #288]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 800927a:	f7ff fe9d 	bl	8008fb8 <LL_BDMA_ConfigAddresses>
                           (uint32_t) &(SPI6->RXDR), data_addr,
						   LL_BDMA_GetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_0));
    LL_BDMA_SetDataLength(BDMA, LL_BDMA_CHANNEL_0, size);
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	2100      	movs	r1, #0
 8009282:	4846      	ldr	r0, [pc, #280]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 8009284:	f7ff fe70 	bl	8008f68 <LL_BDMA_SetDataLength>
    LL_BDMA_SetPeriphRequest(BDMA, LL_BDMA_CHANNEL_0, LL_DMAMUX2_REQ_SPI6_RX);
 8009288:	220b      	movs	r2, #11
 800928a:	2100      	movs	r1, #0
 800928c:	4843      	ldr	r0, [pc, #268]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 800928e:	f7ff fed1 	bl	8009034 <LL_BDMA_SetPeriphRequest>

    LL_GPIO_ResetOutputPin(spi_master_instance.CS_Port, spi_master_instance.CS_Pin);
 8009292:	4b41      	ldr	r3, [pc, #260]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	4a40      	ldr	r2, [pc, #256]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 8009298:	8912      	ldrh	r2, [r2, #8]
 800929a:	4611      	mov	r1, r2
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff fdf6 	bl	8008e8e <LL_GPIO_ResetOutputPin>

    LL_SPI_EnableDMAReq_RX(spi_master_instance.SPIx);
 80092a2:	4b3d      	ldr	r3, [pc, #244]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7ff fda3 	bl	8008df2 <LL_SPI_EnableDMAReq_RX>
    LL_BDMA_EnableChannel(BDMA, LL_BDMA_CHANNEL_0);
 80092ac:	2100      	movs	r1, #0
 80092ae:	483b      	ldr	r0, [pc, #236]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 80092b0:	f7ff fdfc 	bl	8008eac <LL_BDMA_EnableChannel>

    LL_SPI_EnableDMAReq_TX(spi_master_instance.SPIx);
 80092b4:	4b38      	ldr	r3, [pc, #224]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7ff fdba 	bl	8008e32 <LL_SPI_EnableDMAReq_TX>
    LL_BDMA_EnableChannel(BDMA, LL_BDMA_CHANNEL_1);
 80092be:	2101      	movs	r1, #1
 80092c0:	4836      	ldr	r0, [pc, #216]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 80092c2:	f7ff fdf3 	bl	8008eac <LL_BDMA_EnableChannel>
    LL_SPI_Enable(spi_master_instance.SPIx);
 80092c6:	4b34      	ldr	r3, [pc, #208]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7ff fd61 	bl	8008d92 <LL_SPI_Enable>
    LL_SPI_StartMasterTransfer(spi_master_instance.SPIx);
 80092d0:	4b31      	ldr	r3, [pc, #196]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7ff fd7c 	bl	8008dd2 <LL_SPI_StartMasterTransfer>

    if (xSemaphoreTake(rxMaster_Semaphore, pdMS_TO_TICKS(1000)) != pdTRUE) {
 80092da:	4b34      	ldr	r3, [pc, #208]	@ (80093ac <SPI_MasterDevice_ReadDMA+0x19c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80092e2:	4618      	mov	r0, r3
 80092e4:	f007 fe18 	bl	8010f18 <xQueueSemaphoreTake>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d023      	beq.n	8009336 <SPI_MasterDevice_ReadDMA+0x126>
        LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_1);
 80092ee:	2101      	movs	r1, #1
 80092f0:	482a      	ldr	r0, [pc, #168]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 80092f2:	f7ff fdfd 	bl	8008ef0 <LL_BDMA_DisableChannel>
        LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_0);
 80092f6:	2100      	movs	r1, #0
 80092f8:	4828      	ldr	r0, [pc, #160]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 80092fa:	f7ff fdf9 	bl	8008ef0 <LL_BDMA_DisableChannel>
        LL_SPI_DisableDMAReq_RX(spi_master_instance.SPIx);
 80092fe:	4b26      	ldr	r3, [pc, #152]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff fd85 	bl	8008e12 <LL_SPI_DisableDMAReq_RX>
        LL_SPI_DisableDMAReq_TX(spi_master_instance.SPIx);
 8009308:	4b23      	ldr	r3, [pc, #140]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4618      	mov	r0, r3
 800930e:	f7ff fda0 	bl	8008e52 <LL_SPI_DisableDMAReq_TX>
        LL_SPI_Disable(spi_master_instance.SPIx);
 8009312:	4b21      	ldr	r3, [pc, #132]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff fd4b 	bl	8008db2 <LL_SPI_Disable>
        LL_GPIO_SetOutputPin(spi_master_instance.CS_Port, spi_master_instance.CS_Pin);
 800931c:	4b1e      	ldr	r3, [pc, #120]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	4a1d      	ldr	r2, [pc, #116]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 8009322:	8912      	ldrh	r2, [r2, #8]
 8009324:	4611      	mov	r1, r2
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff fda3 	bl	8008e72 <LL_GPIO_SetOutputPin>
        toCM4_SetState(TOCM4_ERROR);
 800932c:	2000      	movs	r0, #0
 800932e:	f7f7 fb9d 	bl	8000a6c <toCM4_SetState>
        return E_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e02b      	b.n	800938e <SPI_MasterDevice_ReadDMA+0x17e>
    }

    LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_1);
 8009336:	2101      	movs	r1, #1
 8009338:	4818      	ldr	r0, [pc, #96]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 800933a:	f7ff fdd9 	bl	8008ef0 <LL_BDMA_DisableChannel>
    LL_BDMA_DisableChannel(BDMA, LL_BDMA_CHANNEL_0);
 800933e:	2100      	movs	r1, #0
 8009340:	4816      	ldr	r0, [pc, #88]	@ (800939c <SPI_MasterDevice_ReadDMA+0x18c>)
 8009342:	f7ff fdd5 	bl	8008ef0 <LL_BDMA_DisableChannel>
    LL_SPI_DisableDMAReq_RX(spi_master_instance.SPIx);
 8009346:	4b14      	ldr	r3, [pc, #80]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff fd61 	bl	8008e12 <LL_SPI_DisableDMAReq_RX>
    LL_SPI_DisableDMAReq_TX(spi_master_instance.SPIx);
 8009350:	4b11      	ldr	r3, [pc, #68]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4618      	mov	r0, r3
 8009356:	f7ff fd7c 	bl	8008e52 <LL_SPI_DisableDMAReq_TX>
    LL_SPI_Disable(spi_master_instance.SPIx);
 800935a:	4b0f      	ldr	r3, [pc, #60]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff fd27 	bl	8008db2 <LL_SPI_Disable>
    LL_GPIO_SetOutputPin(spi_master_instance.CS_Port, spi_master_instance.CS_Pin);
 8009364:	4b0c      	ldr	r3, [pc, #48]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	4a0b      	ldr	r2, [pc, #44]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 800936a:	8912      	ldrh	r2, [r2, #8]
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff fd7f 	bl	8008e72 <LL_GPIO_SetOutputPin>

    if (spi_master_instance.transfer_state == SPI_MASTER_TRANSFER_COMPLETE) {
 8009374:	4b08      	ldr	r3, [pc, #32]	@ (8009398 <SPI_MasterDevice_ReadDMA+0x188>)
 8009376:	7a9b      	ldrb	r3, [r3, #10]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d104      	bne.n	8009386 <SPI_MasterDevice_ReadDMA+0x176>
        toCM4_SetState(TOCM4_READYSEND);
 800937c:	2001      	movs	r0, #1
 800937e:	f7f7 fb75 	bl	8000a6c <toCM4_SetState>
        return E_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	e003      	b.n	800938e <SPI_MasterDevice_ReadDMA+0x17e>
    } else {
        toCM4_SetState(TOCM4_ERROR);
 8009386:	2000      	movs	r0, #0
 8009388:	f7f7 fb70 	bl	8000a6c <toCM4_SetState>
        return E_ERROR;
 800938c:	2301      	movs	r3, #1
    }
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2401962c 	.word	0x2401962c
 800939c:	58025400 	.word	0x58025400
 80093a0:	58001420 	.word	0x58001420
 80093a4:	3800ffff 	.word	0x3800ffff
 80093a8:	58001430 	.word	0x58001430
 80093ac:	24019628 	.word	0x24019628

080093b0 <SPI_MasterDevice_SetTransferState>:
{
    return spi_master_instance.transfer_state;
}

void SPI_MasterDevice_SetTransferState(SPI_MasterTransferState_t state)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	71fb      	strb	r3, [r7, #7]
    spi_master_instance.transfer_state = state;
 80093ba:	4a04      	ldr	r2, [pc, #16]	@ (80093cc <SPI_MasterDevice_SetTransferState+0x1c>)
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	7293      	strb	r3, [r2, #10]
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	2401962c 	.word	0x2401962c

080093d0 <SPIMaster_IRQHandler>:
{
    return toCM4_GetState();
}

void SPIMaster_IRQHandler(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
    if (LL_BDMA_IsActiveFlag_TC0(BDMA)) {
 80093d6:	4822      	ldr	r0, [pc, #136]	@ (8009460 <SPIMaster_IRQHandler+0x90>)
 80093d8:	f7ff fe4a 	bl	8009070 <LL_BDMA_IsActiveFlag_TC0>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d019      	beq.n	8009416 <SPIMaster_IRQHandler+0x46>
        LL_BDMA_ClearFlag_TC0(BDMA);
 80093e2:	481f      	ldr	r0, [pc, #124]	@ (8009460 <SPIMaster_IRQHandler+0x90>)
 80093e4:	f7ff fe6a 	bl	80090bc <LL_BDMA_ClearFlag_TC0>
        SPI_MasterDevice_SetTransferState(SPI_MASTER_TRANSFER_COMPLETE);
 80093e8:	2002      	movs	r0, #2
 80093ea:	f7ff ffe1 	bl	80093b0 <SPI_MasterDevice_SetTransferState>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80093ee:	2300      	movs	r3, #0
 80093f0:	607b      	str	r3, [r7, #4]
        xSemaphoreGiveFromISR(rxMaster_Semaphore, &xHigherPriorityTaskWoken);
 80093f2:	4b1c      	ldr	r3, [pc, #112]	@ (8009464 <SPIMaster_IRQHandler+0x94>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	1d3a      	adds	r2, r7, #4
 80093f8:	4611      	mov	r1, r2
 80093fa:	4618      	mov	r0, r3
 80093fc:	f007 fbf2 	bl	8010be4 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d007      	beq.n	8009416 <SPIMaster_IRQHandler+0x46>
 8009406:	4b18      	ldr	r3, [pc, #96]	@ (8009468 <SPIMaster_IRQHandler+0x98>)
 8009408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	f3bf 8f6f 	isb	sy
    }
    if (LL_BDMA_IsActiveFlag_TE0(BDMA)) {
 8009416:	4812      	ldr	r0, [pc, #72]	@ (8009460 <SPIMaster_IRQHandler+0x90>)
 8009418:	f7ff fe3d 	bl	8009096 <LL_BDMA_IsActiveFlag_TE0>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d019      	beq.n	8009456 <SPIMaster_IRQHandler+0x86>
        LL_BDMA_ClearFlag_TE0(BDMA);
 8009422:	480f      	ldr	r0, [pc, #60]	@ (8009460 <SPIMaster_IRQHandler+0x90>)
 8009424:	f7ff fe57 	bl	80090d6 <LL_BDMA_ClearFlag_TE0>
        SPI_MasterDevice_SetTransferState(SPI_MASTER_TRANSFER_ERROR);
 8009428:	2003      	movs	r0, #3
 800942a:	f7ff ffc1 	bl	80093b0 <SPI_MasterDevice_SetTransferState>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800942e:	2300      	movs	r3, #0
 8009430:	603b      	str	r3, [r7, #0]
        xSemaphoreGiveFromISR(rxMaster_Semaphore, &xHigherPriorityTaskWoken);
 8009432:	4b0c      	ldr	r3, [pc, #48]	@ (8009464 <SPIMaster_IRQHandler+0x94>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	463a      	mov	r2, r7
 8009438:	4611      	mov	r1, r2
 800943a:	4618      	mov	r0, r3
 800943c:	f007 fbd2 	bl	8010be4 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d007      	beq.n	8009456 <SPIMaster_IRQHandler+0x86>
 8009446:	4b08      	ldr	r3, [pc, #32]	@ (8009468 <SPIMaster_IRQHandler+0x98>)
 8009448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800944c:	601a      	str	r2, [r3, #0]
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	f3bf 8f6f 	isb	sy
    }
}
 8009456:	bf00      	nop
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	58025400 	.word	0x58025400
 8009464:	24019628 	.word	0x24019628
 8009468:	e000ed04 	.word	0xe000ed04

0800946c <LL_SPI_Enable>:
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f043 0201 	orr.w	r2, r3, #1
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	601a      	str	r2, [r3, #0]
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <LL_SPI_Disable>:
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f023 0201 	bic.w	r2, r3, #1
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	601a      	str	r2, [r3, #0]
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <LL_SPI_EnableDMAReq_TX>:
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	609a      	str	r2, [r3, #8]
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <LL_SPI_DisableDMAReq_TX>:
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG1, SPI_CFG1_TXDMAEN);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	609a      	str	r2, [r3, #8]
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <LL_DMA_EnableStream>:
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 80094fa:	4a0c      	ldr	r2, [pc, #48]	@ (800952c <LL_DMA_EnableStream+0x40>)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	4413      	add	r3, r2
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4413      	add	r3, r2
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4908      	ldr	r1, [pc, #32]	@ (800952c <LL_DMA_EnableStream+0x40>)
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	440a      	add	r2, r1
 8009510:	7812      	ldrb	r2, [r2, #0]
 8009512:	4611      	mov	r1, r2
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	440a      	add	r2, r1
 8009518:	f043 0301 	orr.w	r3, r3, #1
 800951c:	6013      	str	r3, [r2, #0]
}
 800951e:	bf00      	nop
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	08025e58 	.word	0x08025e58

08009530 <LL_DMA_DisableStream>:
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 800953e:	4a0c      	ldr	r2, [pc, #48]	@ (8009570 <LL_DMA_DisableStream+0x40>)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	4413      	add	r3, r2
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	461a      	mov	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4413      	add	r3, r2
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4908      	ldr	r1, [pc, #32]	@ (8009570 <LL_DMA_DisableStream+0x40>)
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	440a      	add	r2, r1
 8009554:	7812      	ldrb	r2, [r2, #0]
 8009556:	4611      	mov	r1, r2
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	440a      	add	r2, r1
 800955c:	f023 0301 	bic.w	r3, r3, #1
 8009560:	6013      	str	r3, [r2, #0]
}
 8009562:	bf00      	nop
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	08025e58 	.word	0x08025e58

08009574 <LL_DMA_SetMemorySize>:
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8009584:	4a0d      	ldr	r2, [pc, #52]	@ (80095bc <LL_DMA_SetMemorySize+0x48>)
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	4413      	add	r3, r2
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	4413      	add	r3, r2
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8009598:	4908      	ldr	r1, [pc, #32]	@ (80095bc <LL_DMA_SetMemorySize+0x48>)
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	440b      	add	r3, r1
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	4619      	mov	r1, r3
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	440b      	add	r3, r1
 80095a6:	4619      	mov	r1, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	600b      	str	r3, [r1, #0]
}
 80095ae:	bf00      	nop
 80095b0:	371c      	adds	r7, #28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	08025e58 	.word	0x08025e58

080095c0 <LL_DMA_SetDataLength>:
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 80095d0:	4a0d      	ldr	r2, [pc, #52]	@ (8009608 <LL_DMA_SetDataLength+0x48>)
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	4413      	add	r3, r2
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	461a      	mov	r2, r3
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	4413      	add	r3, r2
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	4b0a      	ldr	r3, [pc, #40]	@ (800960c <LL_DMA_SetDataLength+0x4c>)
 80095e2:	4013      	ands	r3, r2
 80095e4:	4908      	ldr	r1, [pc, #32]	@ (8009608 <LL_DMA_SetDataLength+0x48>)
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	440a      	add	r2, r1
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	4611      	mov	r1, r2
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	440a      	add	r2, r1
 80095f2:	4611      	mov	r1, r2
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	604b      	str	r3, [r1, #4]
}
 80095fa:	bf00      	nop
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	08025e58 	.word	0x08025e58
 800960c:	ffff0000 	.word	0xffff0000

08009610 <LL_DMA_ConfigAddresses>:
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	2b40      	cmp	r3, #64	@ 0x40
 8009626:	d114      	bne.n	8009652 <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, SrcAddress);
 8009628:	4a17      	ldr	r2, [pc, #92]	@ (8009688 <LL_DMA_ConfigAddresses+0x78>)
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4413      	add	r3, r2
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	4413      	add	r3, r2
 8009636:	461a      	mov	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, DstAddress);
 800963c:	4a12      	ldr	r2, [pc, #72]	@ (8009688 <LL_DMA_ConfigAddresses+0x78>)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	4413      	add	r3, r2
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	4413      	add	r3, r2
 800964a:	461a      	mov	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	6093      	str	r3, [r2, #8]
}
 8009650:	e013      	b.n	800967a <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, SrcAddress);
 8009652:	4a0d      	ldr	r2, [pc, #52]	@ (8009688 <LL_DMA_ConfigAddresses+0x78>)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	4413      	add	r3, r2
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	4413      	add	r3, r2
 8009660:	461a      	mov	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, DstAddress);
 8009666:	4a08      	ldr	r2, [pc, #32]	@ (8009688 <LL_DMA_ConfigAddresses+0x78>)
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	4413      	add	r3, r2
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	4413      	add	r3, r2
 8009674:	461a      	mov	r2, r3
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	60d3      	str	r3, [r2, #12]
}
 800967a:	bf00      	nop
 800967c:	371c      	adds	r7, #28
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	08025e58 	.word	0x08025e58

0800968c <LL_DMA_SetPeriphAddress>:
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 800969c:	4a07      	ldr	r2, [pc, #28]	@ (80096bc <LL_DMA_SetPeriphAddress+0x30>)
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	4413      	add	r3, r2
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	461a      	mov	r2, r3
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	4413      	add	r3, r2
 80096aa:	461a      	mov	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6093      	str	r3, [r2, #8]
}
 80096b0:	bf00      	nop
 80096b2:	371c      	adds	r7, #28
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	08025e58 	.word	0x08025e58

080096c0 <LL_DMA_ClearFlag_TC7>:
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTCIF7);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80096ce:	60da      	str	r2, [r3, #12]
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <LL_DMA_ClearFlag_TE7>:
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTEIF7);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80096ea:	60da      	str	r2, [r3, #12]
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <LL_DMA_EnableIT_TE>:
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE);
 8009706:	4a0c      	ldr	r2, [pc, #48]	@ (8009738 <LL_DMA_EnableIT_TE+0x40>)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	4413      	add	r3, r2
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4908      	ldr	r1, [pc, #32]	@ (8009738 <LL_DMA_EnableIT_TE+0x40>)
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	440a      	add	r2, r1
 800971c:	7812      	ldrb	r2, [r2, #0]
 800971e:	4611      	mov	r1, r2
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	440a      	add	r2, r1
 8009724:	f043 0304 	orr.w	r3, r3, #4
 8009728:	6013      	str	r3, [r2, #0]
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	08025e58 	.word	0x08025e58

0800973c <LL_DMA_EnableIT_TC>:
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 800974a:	4a0c      	ldr	r2, [pc, #48]	@ (800977c <LL_DMA_EnableIT_TC+0x40>)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	4413      	add	r3, r2
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	4413      	add	r3, r2
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4908      	ldr	r1, [pc, #32]	@ (800977c <LL_DMA_EnableIT_TC+0x40>)
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	440a      	add	r2, r1
 8009760:	7812      	ldrb	r2, [r2, #0]
 8009762:	4611      	mov	r1, r2
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	440a      	add	r2, r1
 8009768:	f043 0310 	orr.w	r3, r3, #16
 800976c:	6013      	str	r3, [r2, #0]
}
 800976e:	bf00      	nop
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	08025e58 	.word	0x08025e58

08009780 <UpdateCRC16_XMODEM>:
    .transfer_state = SPI_TRANSFER_WAIT,
    .data_context = {0},
    .is_initialized = false
};

static uint16_t UpdateCRC16_XMODEM(uint16_t crc, uint8_t byte) {
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	460a      	mov	r2, r1
 800978a:	80fb      	strh	r3, [r7, #6]
 800978c:	4613      	mov	r3, r2
 800978e:	717b      	strb	r3, [r7, #5]
    const uint16_t polynomial = 0x1021; // CRC16 XMODEM
 8009790:	f241 0321 	movw	r3, #4129	@ 0x1021
 8009794:	81bb      	strh	r3, [r7, #12]
    crc ^= (uint16_t)byte << 8;
 8009796:	797b      	ldrb	r3, [r7, #5]
 8009798:	b21b      	sxth	r3, r3
 800979a:	021b      	lsls	r3, r3, #8
 800979c:	b21a      	sxth	r2, r3
 800979e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097a2:	4053      	eors	r3, r2
 80097a4:	b21b      	sxth	r3, r3
 80097a6:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
 80097ac:	e013      	b.n	80097d6 <UpdateCRC16_XMODEM+0x56>
        if (crc & 0x8000) {
 80097ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	da09      	bge.n	80097ca <UpdateCRC16_XMODEM+0x4a>
            crc = (crc << 1) ^ polynomial;
 80097b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	b21a      	sxth	r2, r3
 80097be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80097c2:	4053      	eors	r3, r2
 80097c4:	b21b      	sxth	r3, r3
 80097c6:	80fb      	strh	r3, [r7, #6]
 80097c8:	e002      	b.n	80097d0 <UpdateCRC16_XMODEM+0x50>
        } else {
            crc <<= 1;
 80097ca:	88fb      	ldrh	r3, [r7, #6]
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	3301      	adds	r3, #1
 80097d4:	73fb      	strb	r3, [r7, #15]
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	2b07      	cmp	r3, #7
 80097da:	d9e8      	bls.n	80097ae <UpdateCRC16_XMODEM+0x2e>
        }
    }
    return crc;
 80097dc:	88fb      	ldrh	r3, [r7, #6]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
	...

080097ec <SPI_SlaveDevice_GetHandle>:

SPI_SlaveDevice_t* SPI_SlaveDevice_GetHandle(void)
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
    return &spi_device_instance;
 80097f0:	4b02      	ldr	r3, [pc, #8]	@ (80097fc <SPI_SlaveDevice_GetHandle+0x10>)
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	24019638 	.word	0x24019638

08009800 <SPI_SlaveDevice_Init>:

Std_ReturnType SPI_SlaveDevice_Init(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
    if (spi_device_instance.is_initialized) {
 8009804:	4b12      	ldr	r3, [pc, #72]	@ (8009850 <SPI_SlaveDevice_Init+0x50>)
 8009806:	7d1b      	ldrb	r3, [r3, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <SPI_SlaveDevice_Init+0x10>
        return E_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	e01d      	b.n	800984c <SPI_SlaveDevice_Init+0x4c>
    }

    LL_DMA_SetMemorySize(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8009810:	2200      	movs	r2, #0
 8009812:	2107      	movs	r1, #7
 8009814:	480f      	ldr	r0, [pc, #60]	@ (8009854 <SPI_SlaveDevice_Init+0x54>)
 8009816:	f7ff fead 	bl	8009574 <LL_DMA_SetMemorySize>
    LL_DMA_SetPeriphAddress(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, (uint32_t)&SPI_SLAVE_INSTANCE->TXDR);
 800981a:	4a0f      	ldr	r2, [pc, #60]	@ (8009858 <SPI_SlaveDevice_Init+0x58>)
 800981c:	2107      	movs	r1, #7
 800981e:	480d      	ldr	r0, [pc, #52]	@ (8009854 <SPI_SlaveDevice_Init+0x54>)
 8009820:	f7ff ff34 	bl	800968c <LL_DMA_SetPeriphAddress>

    LL_DMA_EnableIT_TC(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 8009824:	2107      	movs	r1, #7
 8009826:	480b      	ldr	r0, [pc, #44]	@ (8009854 <SPI_SlaveDevice_Init+0x54>)
 8009828:	f7ff ff88 	bl	800973c <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_TE(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 800982c:	2107      	movs	r1, #7
 800982e:	4809      	ldr	r0, [pc, #36]	@ (8009854 <SPI_SlaveDevice_Init+0x54>)
 8009830:	f7ff ff62 	bl	80096f8 <LL_DMA_EnableIT_TE>

    toCM4_Init();
 8009834:	f7f7 f906 	bl	8000a44 <toCM4_Init>
    spi_device_instance.data_context.is_valid = false;
 8009838:	4b05      	ldr	r3, [pc, #20]	@ (8009850 <SPI_SlaveDevice_Init+0x50>)
 800983a:	2200      	movs	r2, #0
 800983c:	749a      	strb	r2, [r3, #18]
    spi_device_instance.is_initialized = true;
 800983e:	4b04      	ldr	r3, [pc, #16]	@ (8009850 <SPI_SlaveDevice_Init+0x50>)
 8009840:	2201      	movs	r2, #1
 8009842:	751a      	strb	r2, [r3, #20]
    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 8009844:	4b02      	ldr	r3, [pc, #8]	@ (8009850 <SPI_SlaveDevice_Init+0x50>)
 8009846:	2200      	movs	r2, #0
 8009848:	701a      	strb	r2, [r3, #0]
    return E_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	bd80      	pop	{r7, pc}
 8009850:	24019638 	.word	0x24019638
 8009854:	40020000 	.word	0x40020000
 8009858:	40015020 	.word	0x40015020

0800985c <SPI_SlaveDevice_CollectData>:

Std_ReturnType SPI_SlaveDevice_CollectData(uint8_t type, uint32_t sample, uint32_t data_addr)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b088      	sub	sp, #32
 8009860:	af00      	add	r7, sp, #0
 8009862:	4603      	mov	r3, r0
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	73fb      	strb	r3, [r7, #15]
    if (!spi_device_instance.is_initialized) {
 800986a:	4b47      	ldr	r3, [pc, #284]	@ (8009988 <SPI_SlaveDevice_CollectData+0x12c>)
 800986c:	7d1b      	ldrb	r3, [r3, #20]
 800986e:	f083 0301 	eor.w	r3, r3, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <SPI_SlaveDevice_CollectData+0x20>
        return E_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e080      	b.n	800997e <SPI_SlaveDevice_CollectData+0x122>
    }

    if (toCM4_GetState() != TOCM4_IDLE) {
 800987c:	f7f7 f948 	bl	8000b10 <toCM4_GetState>
 8009880:	4603      	mov	r3, r0
 8009882:	2b03      	cmp	r3, #3
 8009884:	d001      	beq.n	800988a <SPI_SlaveDevice_CollectData+0x2e>
        return E_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e079      	b.n	800997e <SPI_SlaveDevice_CollectData+0x122>
    }

    if (type > 3) {
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	2b03      	cmp	r3, #3
 800988e:	d901      	bls.n	8009894 <SPI_SlaveDevice_CollectData+0x38>
        return E_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e074      	b.n	800997e <SPI_SlaveDevice_CollectData+0x122>
    }

    if (sample < 1 || sample > 100000 || sample * 2 > RAM_D2_200KB_SIZE) {
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d008      	beq.n	80098ac <SPI_SlaveDevice_CollectData+0x50>
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	4a3b      	ldr	r2, [pc, #236]	@ (800998c <SPI_SlaveDevice_CollectData+0x130>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d804      	bhi.n	80098ac <SPI_SlaveDevice_CollectData+0x50>
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 80098aa:	d901      	bls.n	80098b0 <SPI_SlaveDevice_CollectData+0x54>
        return E_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e066      	b.n	800997e <SPI_SlaveDevice_CollectData+0x122>
    }

    toCM4_SetState(TOCM4_BUSY);
 80098b0:	2002      	movs	r0, #2
 80098b2:	f7f7 f8db 	bl	8000a6c <toCM4_SetState>
    spi_device_instance.data_context.is_valid = false;
 80098b6:	4b34      	ldr	r3, [pc, #208]	@ (8009988 <SPI_SlaveDevice_CollectData+0x12c>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	749a      	strb	r2, [r3, #18]

    if (type == 0) {
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d159      	bne.n	8009976 <SPI_SlaveDevice_CollectData+0x11a>
        uint16_t crc = 0x0000;
 80098c2:	2300      	movs	r3, #0
 80098c4:	83fb      	strh	r3, [r7, #30]
        uint16_t *data = (uint16_t *)data_addr;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	617b      	str	r3, [r7, #20]

        for (uint32_t i = 0; i < sample; i++) {
 80098ca:	2300      	movs	r3, #0
 80098cc:	61bb      	str	r3, [r7, #24]
 80098ce:	e02b      	b.n	8009928 <SPI_SlaveDevice_CollectData+0xcc>
            uint16_t value = (uint16_t)(i % 1001);
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	4a2f      	ldr	r2, [pc, #188]	@ (8009990 <SPI_SlaveDevice_CollectData+0x134>)
 80098d4:	fba2 1203 	umull	r1, r2, r2, r3
 80098d8:	1a99      	subs	r1, r3, r2
 80098da:	0849      	lsrs	r1, r1, #1
 80098dc:	440a      	add	r2, r1
 80098de:	0a52      	lsrs	r2, r2, #9
 80098e0:	f240 31e9 	movw	r1, #1001	@ 0x3e9
 80098e4:	fb01 f202 	mul.w	r2, r1, r2
 80098e8:	1a9a      	subs	r2, r3, r2
 80098ea:	4613      	mov	r3, r2
 80098ec:	827b      	strh	r3, [r7, #18]
            data[i] = value;
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	4413      	add	r3, r2
 80098f6:	8a7a      	ldrh	r2, [r7, #18]
 80098f8:	801a      	strh	r2, [r3, #0]
            crc = UpdateCRC16_XMODEM(crc, (uint8_t)(value & 0xFF));
 80098fa:	8a7b      	ldrh	r3, [r7, #18]
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	8bfb      	ldrh	r3, [r7, #30]
 8009900:	4611      	mov	r1, r2
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff ff3c 	bl	8009780 <UpdateCRC16_XMODEM>
 8009908:	4603      	mov	r3, r0
 800990a:	83fb      	strh	r3, [r7, #30]
            crc = UpdateCRC16_XMODEM(crc, (uint8_t)((value >> 8) & 0xFF));
 800990c:	8a7b      	ldrh	r3, [r7, #18]
 800990e:	0a1b      	lsrs	r3, r3, #8
 8009910:	b29b      	uxth	r3, r3
 8009912:	b2da      	uxtb	r2, r3
 8009914:	8bfb      	ldrh	r3, [r7, #30]
 8009916:	4611      	mov	r1, r2
 8009918:	4618      	mov	r0, r3
 800991a:	f7ff ff31 	bl	8009780 <UpdateCRC16_XMODEM>
 800991e:	4603      	mov	r3, r0
 8009920:	83fb      	strh	r3, [r7, #30]
        for (uint32_t i = 0; i < sample; i++) {
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	3301      	adds	r3, #1
 8009926:	61bb      	str	r3, [r7, #24]
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	429a      	cmp	r2, r3
 800992e:	d3cf      	bcc.n	80098d0 <SPI_SlaveDevice_CollectData+0x74>
        }

        spi_device_instance.data_context.type = type;
 8009930:	4a15      	ldr	r2, [pc, #84]	@ (8009988 <SPI_SlaveDevice_CollectData+0x12c>)
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	7113      	strb	r3, [r2, #4]
        spi_device_instance.data_context.sample = sample;
 8009936:	4a14      	ldr	r2, [pc, #80]	@ (8009988 <SPI_SlaveDevice_CollectData+0x12c>)
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	6093      	str	r3, [r2, #8]
        spi_device_instance.data_context.data_size = sample * 2;
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	4a11      	ldr	r2, [pc, #68]	@ (8009988 <SPI_SlaveDevice_CollectData+0x12c>)
 8009942:	60d3      	str	r3, [r2, #12]
        spi_device_instance.data_context.crc = crc;
 8009944:	4a10      	ldr	r2, [pc, #64]	@ (8009988 <SPI_SlaveDevice_CollectData+0x12c>)
 8009946:	8bfb      	ldrh	r3, [r7, #30]
 8009948:	8213      	strh	r3, [r2, #16]
        spi_device_instance.data_context.is_valid = true;
 800994a:	4b0f      	ldr	r3, [pc, #60]	@ (8009988 <SPI_SlaveDevice_CollectData+0x12c>)
 800994c:	2201      	movs	r2, #1
 800994e:	749a      	strb	r2, [r3, #18]

        if (SPI_SlaveDevice_ResetDMA(data_addr, spi_device_instance.data_context.data_size) != E_OK) {
 8009950:	4b0d      	ldr	r3, [pc, #52]	@ (8009988 <SPI_SlaveDevice_CollectData+0x12c>)
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f840 	bl	80099dc <SPI_SlaveDevice_ResetDMA>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d004      	beq.n	800996c <SPI_SlaveDevice_CollectData+0x110>
            toCM4_SetState(TOCM4_ERROR);
 8009962:	2000      	movs	r0, #0
 8009964:	f7f7 f882 	bl	8000a6c <toCM4_SetState>
            return E_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e008      	b.n	800997e <SPI_SlaveDevice_CollectData+0x122>
        }

        toCM4_SetState(TOCM4_READYSEND);
 800996c:	2001      	movs	r0, #1
 800996e:	f7f7 f87d 	bl	8000a6c <toCM4_SetState>
    } else {
        toCM4_SetState(TOCM4_IDLE);
        return E_BUSY;
    }

    return E_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	e003      	b.n	800997e <SPI_SlaveDevice_CollectData+0x122>
        toCM4_SetState(TOCM4_IDLE);
 8009976:	2003      	movs	r0, #3
 8009978:	f7f7 f878 	bl	8000a6c <toCM4_SetState>
        return E_BUSY;
 800997c:	2302      	movs	r3, #2
}
 800997e:	4618      	mov	r0, r3
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	24019638 	.word	0x24019638
 800998c:	000186a0 	.word	0x000186a0
 8009990:	05e1d27b 	.word	0x05e1d27b

08009994 <SPI_SlaveDevice_GetDataInfo>:

Std_ReturnType SPI_SlaveDevice_GetDataInfo(DataProcessContext_t *context)
{
 8009994:	b490      	push	{r4, r7}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
    if (!spi_device_instance.is_initialized || !spi_device_instance.data_context.is_valid) {
 800999c:	4b0e      	ldr	r3, [pc, #56]	@ (80099d8 <SPI_SlaveDevice_GetDataInfo+0x44>)
 800999e:	7d1b      	ldrb	r3, [r3, #20]
 80099a0:	f083 0301 	eor.w	r3, r3, #1
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d106      	bne.n	80099b8 <SPI_SlaveDevice_GetDataInfo+0x24>
 80099aa:	4b0b      	ldr	r3, [pc, #44]	@ (80099d8 <SPI_SlaveDevice_GetDataInfo+0x44>)
 80099ac:	7c9b      	ldrb	r3, [r3, #18]
 80099ae:	f083 0301 	eor.w	r3, r3, #1
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <SPI_SlaveDevice_GetDataInfo+0x28>
        return E_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e007      	b.n	80099cc <SPI_SlaveDevice_GetDataInfo+0x38>
    }

    *context = spi_device_instance.data_context;
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	4b06      	ldr	r3, [pc, #24]	@ (80099d8 <SPI_SlaveDevice_GetDataInfo+0x44>)
 80099c0:	4614      	mov	r4, r2
 80099c2:	3304      	adds	r3, #4
 80099c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80099c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return E_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bc90      	pop	{r4, r7}
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	24019638 	.word	0x24019638

080099dc <SPI_SlaveDevice_ResetDMA>:

Std_ReturnType SPI_SlaveDevice_ResetDMA(uint32_t data_addr, uint32_t data_size)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
    if (!spi_device_instance.is_initialized) {
 80099e6:	4b22      	ldr	r3, [pc, #136]	@ (8009a70 <SPI_SlaveDevice_ResetDMA+0x94>)
 80099e8:	7d1b      	ldrb	r3, [r3, #20]
 80099ea:	f083 0301 	eor.w	r3, r3, #1
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <SPI_SlaveDevice_ResetDMA+0x1c>
        return E_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e036      	b.n	8009a66 <SPI_SlaveDevice_ResetDMA+0x8a>
    }

    if (toCM4_GetState() != TOCM4_BUSY && toCM4_GetState() != TOCM4_READYSEND) {
 80099f8:	f7f7 f88a 	bl	8000b10 <toCM4_GetState>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d006      	beq.n	8009a10 <SPI_SlaveDevice_ResetDMA+0x34>
 8009a02:	f7f7 f885 	bl	8000b10 <toCM4_GetState>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d001      	beq.n	8009a10 <SPI_SlaveDevice_ResetDMA+0x34>
        return E_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e02a      	b.n	8009a66 <SPI_SlaveDevice_ResetDMA+0x8a>
    }

    LL_DMA_DisableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 8009a10:	2107      	movs	r1, #7
 8009a12:	4818      	ldr	r0, [pc, #96]	@ (8009a74 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009a14:	f7ff fd8c 	bl	8009530 <LL_DMA_DisableStream>
    LL_SPI_DisableDMAReq_TX(SPI_SLAVE_INSTANCE);
 8009a18:	4817      	ldr	r0, [pc, #92]	@ (8009a78 <SPI_SlaveDevice_ResetDMA+0x9c>)
 8009a1a:	f7ff fd57 	bl	80094cc <LL_SPI_DisableDMAReq_TX>
    LL_SPI_Disable(SPI_SLAVE_INSTANCE);
 8009a1e:	4816      	ldr	r0, [pc, #88]	@ (8009a78 <SPI_SlaveDevice_ResetDMA+0x9c>)
 8009a20:	f7ff fd34 	bl	800948c <LL_SPI_Disable>

    LL_DMA_ClearFlag_TC7(SPI_DMA_INSTANCE);
 8009a24:	4813      	ldr	r0, [pc, #76]	@ (8009a74 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009a26:	f7ff fe4b 	bl	80096c0 <LL_DMA_ClearFlag_TC7>
    LL_DMA_ClearFlag_TE7(SPI_DMA_INSTANCE);
 8009a2a:	4812      	ldr	r0, [pc, #72]	@ (8009a74 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009a2c:	f7ff fe56 	bl	80096dc <LL_DMA_ClearFlag_TE7>

    LL_DMA_ConfigAddresses(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM,
 8009a30:	2340      	movs	r3, #64	@ 0x40
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	4b11      	ldr	r3, [pc, #68]	@ (8009a7c <SPI_SlaveDevice_ResetDMA+0xa0>)
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	2107      	movs	r1, #7
 8009a3a:	480e      	ldr	r0, [pc, #56]	@ (8009a74 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009a3c:	f7ff fde8 	bl	8009610 <LL_DMA_ConfigAddresses>
                           data_addr, (uint32_t)&SPI_SLAVE_INSTANCE->TXDR,
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
    LL_DMA_SetDataLength(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, data_size);
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	2107      	movs	r1, #7
 8009a44:	480b      	ldr	r0, [pc, #44]	@ (8009a74 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009a46:	f7ff fdbb 	bl	80095c0 <LL_DMA_SetDataLength>

    LL_SPI_Enable(SPI_SLAVE_INSTANCE);
 8009a4a:	480b      	ldr	r0, [pc, #44]	@ (8009a78 <SPI_SlaveDevice_ResetDMA+0x9c>)
 8009a4c:	f7ff fd0e 	bl	800946c <LL_SPI_Enable>
    LL_SPI_EnableDMAReq_TX(SPI_SLAVE_INSTANCE);
 8009a50:	4809      	ldr	r0, [pc, #36]	@ (8009a78 <SPI_SlaveDevice_ResetDMA+0x9c>)
 8009a52:	f7ff fd2b 	bl	80094ac <LL_SPI_EnableDMAReq_TX>
    LL_DMA_EnableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 8009a56:	2107      	movs	r1, #7
 8009a58:	4806      	ldr	r0, [pc, #24]	@ (8009a74 <SPI_SlaveDevice_ResetDMA+0x98>)
 8009a5a:	f7ff fd47 	bl	80094ec <LL_DMA_EnableStream>

    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 8009a5e:	4b04      	ldr	r3, [pc, #16]	@ (8009a70 <SPI_SlaveDevice_ResetDMA+0x94>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	701a      	strb	r2, [r3, #0]
    return E_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	24019638 	.word	0x24019638
 8009a74:	40020000 	.word	0x40020000
 8009a78:	40015000 	.word	0x40015000
 8009a7c:	40015020 	.word	0x40015020

08009a80 <SPI_SlaveDevice_Disable>:

Std_ReturnType SPI_SlaveDevice_Disable(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0
    if (!spi_device_instance.is_initialized) {
 8009a84:	4b10      	ldr	r3, [pc, #64]	@ (8009ac8 <SPI_SlaveDevice_Disable+0x48>)
 8009a86:	7d1b      	ldrb	r3, [r3, #20]
 8009a88:	f083 0301 	eor.w	r3, r3, #1
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <SPI_SlaveDevice_Disable+0x16>
        return E_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e016      	b.n	8009ac4 <SPI_SlaveDevice_Disable+0x44>
    }

    LL_DMA_DisableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 8009a96:	2107      	movs	r1, #7
 8009a98:	480c      	ldr	r0, [pc, #48]	@ (8009acc <SPI_SlaveDevice_Disable+0x4c>)
 8009a9a:	f7ff fd49 	bl	8009530 <LL_DMA_DisableStream>
    LL_SPI_DisableDMAReq_TX(SPI_SLAVE_INSTANCE);
 8009a9e:	480c      	ldr	r0, [pc, #48]	@ (8009ad0 <SPI_SlaveDevice_Disable+0x50>)
 8009aa0:	f7ff fd14 	bl	80094cc <LL_SPI_DisableDMAReq_TX>
//    LL_SPI_Disable(SPI_SLAVE_INSTANCE);

    LL_DMA_ClearFlag_TC7(SPI_DMA_INSTANCE);
 8009aa4:	4809      	ldr	r0, [pc, #36]	@ (8009acc <SPI_SlaveDevice_Disable+0x4c>)
 8009aa6:	f7ff fe0b 	bl	80096c0 <LL_DMA_ClearFlag_TC7>
    LL_DMA_ClearFlag_TE7(SPI_DMA_INSTANCE);
 8009aaa:	4808      	ldr	r0, [pc, #32]	@ (8009acc <SPI_SlaveDevice_Disable+0x4c>)
 8009aac:	f7ff fe16 	bl	80096dc <LL_DMA_ClearFlag_TE7>

    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 8009ab0:	4b05      	ldr	r3, [pc, #20]	@ (8009ac8 <SPI_SlaveDevice_Disable+0x48>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]
    spi_device_instance.data_context.is_valid = false;
 8009ab6:	4b04      	ldr	r3, [pc, #16]	@ (8009ac8 <SPI_SlaveDevice_Disable+0x48>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	749a      	strb	r2, [r3, #18]
    toCM4_SetState(TOCM4_IDLE);
 8009abc:	2003      	movs	r0, #3
 8009abe:	f7f6 ffd5 	bl	8000a6c <toCM4_SetState>
    return E_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	24019638 	.word	0x24019638
 8009acc:	40020000 	.word	0x40020000
 8009ad0:	40015000 	.word	0x40015000

08009ad4 <SPI_SlaveDevice_SetTransferState>:
{
    return spi_device_instance.transfer_state;
}

void SPI_SlaveDevice_SetTransferState(SPI_TransferState_t state)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	4603      	mov	r3, r0
 8009adc:	71fb      	strb	r3, [r7, #7]
    spi_device_instance.transfer_state = state;
 8009ade:	4a04      	ldr	r2, [pc, #16]	@ (8009af0 <SPI_SlaveDevice_SetTransferState+0x1c>)
 8009ae0:	79fb      	ldrb	r3, [r7, #7]
 8009ae2:	7013      	strb	r3, [r2, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	24019638 	.word	0x24019638

08009af4 <SPI_SlaveDevice_GetCM4State>:

toCM4_State_t SPI_SlaveDevice_GetCM4State(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	af00      	add	r7, sp, #0
    return toCM4_GetState();
 8009af8:	f7f7 f80a 	bl	8000b10 <toCM4_GetState>
 8009afc:	4603      	mov	r3, r0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <isLeapYear>:
    uint8_t minutes;
    uint8_t seconds;
} s_WorkingTimeClock_context = {0, 0, 0, 0};

static inline uint8_t isLeapYear(uint16_t fullYear)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	80fb      	strh	r3, [r7, #6]
    return ((fullYear % 4 == 0) && ((fullYear % 100 != 0) || (fullYear % 400 == 0))) ? 1 : 0;
 8009b0e:	88fb      	ldrh	r3, [r7, #6]
 8009b10:	f003 0303 	and.w	r3, r3, #3
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d11a      	bne.n	8009b50 <isLeapYear+0x4c>
 8009b1a:	88fb      	ldrh	r3, [r7, #6]
 8009b1c:	4a10      	ldr	r2, [pc, #64]	@ (8009b60 <isLeapYear+0x5c>)
 8009b1e:	fba2 1203 	umull	r1, r2, r2, r3
 8009b22:	0952      	lsrs	r2, r2, #5
 8009b24:	2164      	movs	r1, #100	@ 0x64
 8009b26:	fb01 f202 	mul.w	r2, r1, r2
 8009b2a:	1a9b      	subs	r3, r3, r2
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10c      	bne.n	8009b4c <isLeapYear+0x48>
 8009b32:	88fb      	ldrh	r3, [r7, #6]
 8009b34:	4a0a      	ldr	r2, [pc, #40]	@ (8009b60 <isLeapYear+0x5c>)
 8009b36:	fba2 1203 	umull	r1, r2, r2, r3
 8009b3a:	09d2      	lsrs	r2, r2, #7
 8009b3c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8009b40:	fb01 f202 	mul.w	r2, r1, r2
 8009b44:	1a9b      	subs	r3, r3, r2
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <isLeapYear+0x4c>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e000      	b.n	8009b52 <isLeapYear+0x4e>
 8009b50:	2300      	movs	r3, #0
 8009b52:	b2db      	uxtb	r3, r3
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	51eb851f 	.word	0x51eb851f

08009b64 <getMaxDays>:

static inline uint8_t getMaxDays(uint8_t month, uint16_t fullYear)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	460a      	mov	r2, r1
 8009b6e:	71fb      	strb	r3, [r7, #7]
 8009b70:	4613      	mov	r3, r2
 8009b72:	80bb      	strh	r3, [r7, #4]
    static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    if (month == 2) {
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d107      	bne.n	8009b8a <getMaxDays+0x26>
        return 28 + isLeapYear(fullYear);
 8009b7a:	88bb      	ldrh	r3, [r7, #4]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff ffc1 	bl	8009b04 <isLeapYear>
 8009b82:	4603      	mov	r3, r0
 8009b84:	331c      	adds	r3, #28
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	e003      	b.n	8009b92 <getMaxDays+0x2e>
    } else {
        return daysInMonth[month - 1];
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	4a03      	ldr	r2, [pc, #12]	@ (8009b9c <getMaxDays+0x38>)
 8009b90:	5cd3      	ldrb	r3, [r2, r3]
    }
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	08025e60 	.word	0x08025e60

08009ba0 <DateTimeToEpoch>:

static uint32_t DateTimeToEpoch(const s_DateTime *dt)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
    uint32_t days = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	617b      	str	r3, [r7, #20]
    uint16_t fullYear = 2000 + dt->year;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	789b      	ldrb	r3, [r3, #2]
 8009bb0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8009bb4:	81fb      	strh	r3, [r7, #14]

    for (uint16_t year = 2000; year < fullYear; year++)
 8009bb6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8009bba:	827b      	strh	r3, [r7, #18]
 8009bbc:	e00d      	b.n	8009bda <DateTimeToEpoch+0x3a>
    {
        days += 365 + isLeapYear(year);
 8009bbe:	8a7b      	ldrh	r3, [r7, #18]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff ff9f 	bl	8009b04 <isLeapYear>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 8009bcc:	461a      	mov	r2, r3
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	617b      	str	r3, [r7, #20]
    for (uint16_t year = 2000; year < fullYear; year++)
 8009bd4:	8a7b      	ldrh	r3, [r7, #18]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	827b      	strh	r3, [r7, #18]
 8009bda:	8a7a      	ldrh	r2, [r7, #18]
 8009bdc:	89fb      	ldrh	r3, [r7, #14]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d3ed      	bcc.n	8009bbe <DateTimeToEpoch+0x1e>
    }
    for (uint8_t m = 1; m < dt->month; m++)
 8009be2:	2301      	movs	r3, #1
 8009be4:	747b      	strb	r3, [r7, #17]
 8009be6:	e00d      	b.n	8009c04 <DateTimeToEpoch+0x64>
    {
        days += getMaxDays(m, fullYear);
 8009be8:	89fa      	ldrh	r2, [r7, #14]
 8009bea:	7c7b      	ldrb	r3, [r7, #17]
 8009bec:	4611      	mov	r1, r2
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7ff ffb8 	bl	8009b64 <getMaxDays>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	617b      	str	r3, [r7, #20]
    for (uint8_t m = 1; m < dt->month; m++)
 8009bfe:	7c7b      	ldrb	r3, [r7, #17]
 8009c00:	3301      	adds	r3, #1
 8009c02:	747b      	strb	r3, [r7, #17]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	785b      	ldrb	r3, [r3, #1]
 8009c08:	7c7a      	ldrb	r2, [r7, #17]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d3ec      	bcc.n	8009be8 <DateTimeToEpoch+0x48>
    }
    days += dt->day - 1;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	4413      	add	r3, r2
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	617b      	str	r3, [r7, #20]

    return days * 86400UL + dt->hour * 3600UL + dt->minute * 60UL + dt->second;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8009c54 <DateTimeToEpoch+0xb4>)
 8009c20:	fb03 f202 	mul.w	r2, r3, r2
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	78db      	ldrb	r3, [r3, #3]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8009c2e:	fb01 f303 	mul.w	r3, r1, r3
 8009c32:	441a      	add	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	791b      	ldrb	r3, [r3, #4]
 8009c38:	4619      	mov	r1, r3
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	011b      	lsls	r3, r3, #4
 8009c3e:	1a5b      	subs	r3, r3, r1
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	7952      	ldrb	r2, [r2, #5]
 8009c48:	4413      	add	r3, r2
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	00015180 	.word	0x00015180

08009c58 <EpochToDateTime>:

void EpochToDateTime(uint32_t epoch, s_DateTime *dt)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
    uint32_t days = epoch / 86400;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a3c      	ldr	r2, [pc, #240]	@ (8009d58 <EpochToDateTime+0x100>)
 8009c66:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6a:	0c1b      	lsrs	r3, r3, #16
 8009c6c:	617b      	str	r3, [r7, #20]
    uint32_t remSeconds = epoch % 86400;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a39      	ldr	r2, [pc, #228]	@ (8009d58 <EpochToDateTime+0x100>)
 8009c72:	fba2 1203 	umull	r1, r2, r2, r3
 8009c76:	0c12      	lsrs	r2, r2, #16
 8009c78:	4938      	ldr	r1, [pc, #224]	@ (8009d5c <EpochToDateTime+0x104>)
 8009c7a:	fb01 f202 	mul.w	r2, r1, r2
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]

    dt->hour   = remSeconds / 3600;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4a36      	ldr	r2, [pc, #216]	@ (8009d60 <EpochToDateTime+0x108>)
 8009c86:	fba2 2303 	umull	r2, r3, r2, r3
 8009c8a:	0adb      	lsrs	r3, r3, #11
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	70da      	strb	r2, [r3, #3]
    remSeconds %= 3600;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	4a32      	ldr	r2, [pc, #200]	@ (8009d60 <EpochToDateTime+0x108>)
 8009c96:	fba2 1203 	umull	r1, r2, r2, r3
 8009c9a:	0ad2      	lsrs	r2, r2, #11
 8009c9c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8009ca0:	fb01 f202 	mul.w	r2, r1, r2
 8009ca4:	1a9b      	subs	r3, r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]
    dt->minute = remSeconds / 60;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4a2e      	ldr	r2, [pc, #184]	@ (8009d64 <EpochToDateTime+0x10c>)
 8009cac:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb0:	095b      	lsrs	r3, r3, #5
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	711a      	strb	r2, [r3, #4]
    dt->second = remSeconds % 60;
 8009cb8:	68f9      	ldr	r1, [r7, #12]
 8009cba:	4b2a      	ldr	r3, [pc, #168]	@ (8009d64 <EpochToDateTime+0x10c>)
 8009cbc:	fba3 2301 	umull	r2, r3, r3, r1
 8009cc0:	095a      	lsrs	r2, r3, #5
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	011b      	lsls	r3, r3, #4
 8009cc6:	1a9b      	subs	r3, r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	1aca      	subs	r2, r1, r3
 8009ccc:	b2d2      	uxtb	r2, r2
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	715a      	strb	r2, [r3, #5]

    uint16_t year = 2000;
 8009cd2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8009cd6:	827b      	strh	r3, [r7, #18]
    while (1)
    {
        uint16_t daysInYear = 365 + isLeapYear(year);
 8009cd8:	8a7b      	ldrh	r3, [r7, #18]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7ff ff12 	bl	8009b04 <isLeapYear>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 8009ce6:	817b      	strh	r3, [r7, #10]
        if (days >= daysInYear)
 8009ce8:	897b      	ldrh	r3, [r7, #10]
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d307      	bcc.n	8009d00 <EpochToDateTime+0xa8>
        {
            days -= daysInYear;
 8009cf0:	897b      	ldrh	r3, [r7, #10]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	617b      	str	r3, [r7, #20]
            year++;
 8009cf8:	8a7b      	ldrh	r3, [r7, #18]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	827b      	strh	r3, [r7, #18]
    {
 8009cfe:	e7eb      	b.n	8009cd8 <EpochToDateTime+0x80>
        } else
        {
            break;
 8009d00:	bf00      	nop
        }
    }
    dt->year = year - 2000;
 8009d02:	8a7b      	ldrh	r3, [r7, #18]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	3330      	adds	r3, #48	@ 0x30
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	709a      	strb	r2, [r3, #2]

    uint8_t month = 1;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	747b      	strb	r3, [r7, #17]
    while (1)
    {
        uint8_t dim = getMaxDays(month, year);
 8009d12:	8a7a      	ldrh	r2, [r7, #18]
 8009d14:	7c7b      	ldrb	r3, [r7, #17]
 8009d16:	4611      	mov	r1, r2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff ff23 	bl	8009b64 <getMaxDays>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	727b      	strb	r3, [r7, #9]
        if (days >= dim)
 8009d22:	7a7b      	ldrb	r3, [r7, #9]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d307      	bcc.n	8009d3a <EpochToDateTime+0xe2>
        {
            days -= dim;
 8009d2a:	7a7b      	ldrb	r3, [r7, #9]
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	617b      	str	r3, [r7, #20]
            month++;
 8009d32:	7c7b      	ldrb	r3, [r7, #17]
 8009d34:	3301      	adds	r3, #1
 8009d36:	747b      	strb	r3, [r7, #17]
    {
 8009d38:	e7eb      	b.n	8009d12 <EpochToDateTime+0xba>
        }
        else
        {
            break;
 8009d3a:	bf00      	nop
        }
    }
    dt->month = month;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	7c7a      	ldrb	r2, [r7, #17]
 8009d40:	705a      	strb	r2, [r3, #1]
    dt->day = days + 1;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	3301      	adds	r3, #1
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	701a      	strb	r2, [r3, #0]
}
 8009d4e:	bf00      	nop
 8009d50:	3718      	adds	r7, #24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	c22e4507 	.word	0xc22e4507
 8009d5c:	00015180 	.word	0x00015180
 8009d60:	91a2b3c5 	.word	0x91a2b3c5
 8009d64:	88888889 	.word	0x88888889

08009d68 <Utils_SoftTime_Update>:

void Utils_SoftTime_Update(void) {
 8009d68:	b590      	push	{r4, r7, lr}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
    // Update RTC
    if (++s_RealTimeClock_context.second >= 60) {
 8009d6e:	4b94      	ldr	r3, [pc, #592]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009d70:	795b      	ldrb	r3, [r3, #5]
 8009d72:	3301      	adds	r3, #1
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	4b92      	ldr	r3, [pc, #584]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009d78:	715a      	strb	r2, [r3, #5]
 8009d7a:	4b91      	ldr	r3, [pc, #580]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009d7c:	795b      	ldrb	r3, [r3, #5]
 8009d7e:	2b3b      	cmp	r3, #59	@ 0x3b
 8009d80:	d94c      	bls.n	8009e1c <Utils_SoftTime_Update+0xb4>
        s_RealTimeClock_context.second = 0;
 8009d82:	4b8f      	ldr	r3, [pc, #572]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	715a      	strb	r2, [r3, #5]
        if (++s_RealTimeClock_context.minute >= 60) {
 8009d88:	4b8d      	ldr	r3, [pc, #564]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009d8a:	791b      	ldrb	r3, [r3, #4]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	4b8b      	ldr	r3, [pc, #556]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009d92:	711a      	strb	r2, [r3, #4]
 8009d94:	4b8a      	ldr	r3, [pc, #552]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009d96:	791b      	ldrb	r3, [r3, #4]
 8009d98:	2b3b      	cmp	r3, #59	@ 0x3b
 8009d9a:	d93f      	bls.n	8009e1c <Utils_SoftTime_Update+0xb4>
            s_RealTimeClock_context.minute = 0;
 8009d9c:	4b88      	ldr	r3, [pc, #544]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	711a      	strb	r2, [r3, #4]
            if (++s_RealTimeClock_context.hour >= 24) {
 8009da2:	4b87      	ldr	r3, [pc, #540]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009da4:	78db      	ldrb	r3, [r3, #3]
 8009da6:	3301      	adds	r3, #1
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	4b85      	ldr	r3, [pc, #532]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009dac:	70da      	strb	r2, [r3, #3]
 8009dae:	4b84      	ldr	r3, [pc, #528]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009db0:	78db      	ldrb	r3, [r3, #3]
 8009db2:	2b17      	cmp	r3, #23
 8009db4:	d932      	bls.n	8009e1c <Utils_SoftTime_Update+0xb4>
                s_RealTimeClock_context.hour = 0;
 8009db6:	4b82      	ldr	r3, [pc, #520]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	70da      	strb	r2, [r3, #3]
                if (++s_RealTimeClock_context.day > getMaxDays(s_RealTimeClock_context.month, s_RealTimeClock_context.year)) {
 8009dbc:	4b80      	ldr	r3, [pc, #512]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	4b7e      	ldr	r3, [pc, #504]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009dc6:	701a      	strb	r2, [r3, #0]
 8009dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009dca:	781c      	ldrb	r4, [r3, #0]
 8009dcc:	4b7c      	ldr	r3, [pc, #496]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009dce:	785b      	ldrb	r3, [r3, #1]
 8009dd0:	4a7b      	ldr	r2, [pc, #492]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009dd2:	7892      	ldrb	r2, [r2, #2]
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff fec4 	bl	8009b64 <getMaxDays>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	429c      	cmp	r4, r3
 8009de0:	d91c      	bls.n	8009e1c <Utils_SoftTime_Update+0xb4>
                    s_RealTimeClock_context.day = 1;
 8009de2:	4b77      	ldr	r3, [pc, #476]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009de4:	2201      	movs	r2, #1
 8009de6:	701a      	strb	r2, [r3, #0]
                    if (++s_RealTimeClock_context.month > 12) {
 8009de8:	4b75      	ldr	r3, [pc, #468]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009dea:	785b      	ldrb	r3, [r3, #1]
 8009dec:	3301      	adds	r3, #1
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	4b73      	ldr	r3, [pc, #460]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009df2:	705a      	strb	r2, [r3, #1]
 8009df4:	4b72      	ldr	r3, [pc, #456]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009df6:	785b      	ldrb	r3, [r3, #1]
 8009df8:	2b0c      	cmp	r3, #12
 8009dfa:	d90f      	bls.n	8009e1c <Utils_SoftTime_Update+0xb4>
                        s_RealTimeClock_context.month = 1;
 8009dfc:	4b70      	ldr	r3, [pc, #448]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009dfe:	2201      	movs	r2, #1
 8009e00:	705a      	strb	r2, [r3, #1]
                        if (++s_RealTimeClock_context.year > 99) {
 8009e02:	4b6f      	ldr	r3, [pc, #444]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009e04:	789b      	ldrb	r3, [r3, #2]
 8009e06:	3301      	adds	r3, #1
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009e0c:	709a      	strb	r2, [r3, #2]
 8009e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009e10:	789b      	ldrb	r3, [r3, #2]
 8009e12:	2b63      	cmp	r3, #99	@ 0x63
 8009e14:	d902      	bls.n	8009e1c <Utils_SoftTime_Update+0xb4>
                            s_RealTimeClock_context.year = 0;
 8009e16:	4b6a      	ldr	r3, [pc, #424]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	709a      	strb	r2, [r3, #2]
                }
            }
        }
    }

    if (++s_WorkingTimeClock_context.seconds >= 60) {
 8009e1c:	4b69      	ldr	r3, [pc, #420]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e1e:	799b      	ldrb	r3, [r3, #6]
 8009e20:	3301      	adds	r3, #1
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	4b67      	ldr	r3, [pc, #412]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e26:	719a      	strb	r2, [r3, #6]
 8009e28:	4b66      	ldr	r3, [pc, #408]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e2a:	799b      	ldrb	r3, [r3, #6]
 8009e2c:	2b3b      	cmp	r3, #59	@ 0x3b
 8009e2e:	d921      	bls.n	8009e74 <Utils_SoftTime_Update+0x10c>
        s_WorkingTimeClock_context.seconds = 0;
 8009e30:	4b64      	ldr	r3, [pc, #400]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	719a      	strb	r2, [r3, #6]
        if (++s_WorkingTimeClock_context.minutes >= 60) {
 8009e36:	4b63      	ldr	r3, [pc, #396]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e38:	795b      	ldrb	r3, [r3, #5]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	4b61      	ldr	r3, [pc, #388]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e40:	715a      	strb	r2, [r3, #5]
 8009e42:	4b60      	ldr	r3, [pc, #384]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e44:	795b      	ldrb	r3, [r3, #5]
 8009e46:	2b3b      	cmp	r3, #59	@ 0x3b
 8009e48:	d914      	bls.n	8009e74 <Utils_SoftTime_Update+0x10c>
            s_WorkingTimeClock_context.minutes = 0;
 8009e4a:	4b5e      	ldr	r3, [pc, #376]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	715a      	strb	r2, [r3, #5]
            if (++s_WorkingTimeClock_context.hours >= 24) {
 8009e50:	4b5c      	ldr	r3, [pc, #368]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e52:	791b      	ldrb	r3, [r3, #4]
 8009e54:	3301      	adds	r3, #1
 8009e56:	b2da      	uxtb	r2, r3
 8009e58:	4b5a      	ldr	r3, [pc, #360]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e5a:	711a      	strb	r2, [r3, #4]
 8009e5c:	4b59      	ldr	r3, [pc, #356]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e5e:	791b      	ldrb	r3, [r3, #4]
 8009e60:	2b17      	cmp	r3, #23
 8009e62:	d907      	bls.n	8009e74 <Utils_SoftTime_Update+0x10c>
                s_WorkingTimeClock_context.hours = 0;
 8009e64:	4b57      	ldr	r3, [pc, #348]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	711a      	strb	r2, [r3, #4]
                s_WorkingTimeClock_context.days++;
 8009e6a:	4b56      	ldr	r3, [pc, #344]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	4a54      	ldr	r2, [pc, #336]	@ (8009fc4 <Utils_SoftTime_Update+0x25c>)
 8009e72:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // Cronjob
    uint32_t current_epoch = Utils_GetEpoch();
 8009e74:	f000 f9d8 	bl	800a228 <Utils_GetEpoch>
 8009e78:	60b8      	str	r0, [r7, #8]
    uint8_t second_changed = (last_second != s_RealTimeClock_context.second);
 8009e7a:	4b51      	ldr	r3, [pc, #324]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009e7c:	795a      	ldrb	r2, [r3, #5]
 8009e7e:	4b52      	ldr	r3, [pc, #328]	@ (8009fc8 <Utils_SoftTime_Update+0x260>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	bf14      	ite	ne
 8009e86:	2301      	movne	r3, #1
 8009e88:	2300      	moveq	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	71fb      	strb	r3, [r7, #7]
    uint8_t minute_changed = (last_minute != s_RealTimeClock_context.minute);
 8009e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009e90:	791a      	ldrb	r2, [r3, #4]
 8009e92:	4b4e      	ldr	r3, [pc, #312]	@ (8009fcc <Utils_SoftTime_Update+0x264>)
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	bf14      	ite	ne
 8009e9a:	2301      	movne	r3, #1
 8009e9c:	2300      	moveq	r3, #0
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	71bb      	strb	r3, [r7, #6]
    uint8_t hour_changed = (last_hour != s_RealTimeClock_context.hour);
 8009ea2:	4b47      	ldr	r3, [pc, #284]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009ea4:	78da      	ldrb	r2, [r3, #3]
 8009ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8009fd0 <Utils_SoftTime_Update+0x268>)
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	bf14      	ite	ne
 8009eae:	2301      	movne	r3, #1
 8009eb0:	2300      	moveq	r3, #0
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	717b      	strb	r3, [r7, #5]

    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	73fb      	strb	r3, [r7, #15]
 8009eba:	e109      	b.n	800a0d0 <Utils_SoftTime_Update+0x368>
        s_Cronjob *job = &s_Cronjob_List[i];
 8009ebc:	7bfa      	ldrb	r2, [r7, #15]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	00db      	lsls	r3, r3, #3
 8009ec2:	4413      	add	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4a43      	ldr	r2, [pc, #268]	@ (8009fd4 <Utils_SoftTime_Update+0x26c>)
 8009ec8:	4413      	add	r3, r2
 8009eca:	603b      	str	r3, [r7, #0]
        if (!job->active || !job->callback) continue;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 80f3 	beq.w	800a0bc <Utils_SoftTime_Update+0x354>
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 80ee 	beq.w	800a0bc <Utils_SoftTime_Update+0x354>

        switch (job->type) {
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	785b      	ldrb	r3, [r3, #1]
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d05e      	beq.n	8009fa6 <Utils_SoftTime_Update+0x23e>
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	f300 80ee 	bgt.w	800a0ca <Utils_SoftTime_Update+0x362>
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <Utils_SoftTime_Update+0x190>
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d032      	beq.n	8009f5c <Utils_SoftTime_Update+0x1f4>
 8009ef6:	e0e8      	b.n	800a0ca <Utils_SoftTime_Update+0x362>
            case CRON_TYPE_MOMENT:
                if (second_changed && s_RealTimeClock_context.hour == job->hour &&
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 80e0 	beq.w	800a0c0 <Utils_SoftTime_Update+0x358>
 8009f00:	4b2f      	ldr	r3, [pc, #188]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009f02:	78da      	ldrb	r2, [r3, #3]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	789b      	ldrb	r3, [r3, #2]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	f040 80d9 	bne.w	800a0c0 <Utils_SoftTime_Update+0x358>
                    s_RealTimeClock_context.minute == job->minute &&
 8009f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009f10:	791a      	ldrb	r2, [r3, #4]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	78db      	ldrb	r3, [r3, #3]
                if (second_changed && s_RealTimeClock_context.hour == job->hour &&
 8009f16:	429a      	cmp	r2, r3
 8009f18:	f040 80d2 	bne.w	800a0c0 <Utils_SoftTime_Update+0x358>
                    s_RealTimeClock_context.second == job->second) {
 8009f1c:	4b28      	ldr	r3, [pc, #160]	@ (8009fc0 <Utils_SoftTime_Update+0x258>)
 8009f1e:	795a      	ldrb	r2, [r3, #5]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	791b      	ldrb	r3, [r3, #4]
                    s_RealTimeClock_context.minute == job->minute &&
 8009f24:	429a      	cmp	r2, r3
 8009f26:	f040 80cb 	bne.w	800a0c0 <Utils_SoftTime_Update+0x358>
                	job->callback(job->context);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	6a12      	ldr	r2, [r2, #32]
 8009f32:	4610      	mov	r0, r2
 8009f34:	4798      	blx	r3
                    if (job->repeat_count > 0 && --job->remaining == 0) {
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 80c0 	beq.w	800a0c0 <Utils_SoftTime_Update+0x358>
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	1e5a      	subs	r2, r3, #1
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	619a      	str	r2, [r3, #24]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f040 80b6 	bne.w	800a0c0 <Utils_SoftTime_Update+0x358>
                        job->active = 0;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2200      	movs	r2, #0
 8009f58:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 8009f5a:	e0b1      	b.n	800a0c0 <Utils_SoftTime_Update+0x358>

            case CRON_TYPE_COUNTDOWN:
                if (current_epoch - job->last_trigger >= job->interval) {
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	1ad2      	subs	r2, r2, r3
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	f0c0 80ab 	bcc.w	800a0c4 <Utils_SoftTime_Update+0x35c>
                	job->callback(job->context);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	6a12      	ldr	r2, [r2, #32]
 8009f76:	4610      	mov	r0, r2
 8009f78:	4798      	blx	r3
                    job->last_trigger = current_epoch;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	60da      	str	r2, [r3, #12]
                    if (job->repeat_count > 0 && --job->remaining == 0) {
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 809d 	beq.w	800a0c4 <Utils_SoftTime_Update+0x35c>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	1e5a      	subs	r2, r3, #1
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	619a      	str	r2, [r3, #24]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f040 8093 	bne.w	800a0c4 <Utils_SoftTime_Update+0x35c>
                        job->active = 0;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 8009fa4:	e08e      	b.n	800a0c4 <Utils_SoftTime_Update+0x35c>

            case CRON_TYPE_EVERY:
                switch (job->every_unit) {
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	7c1b      	ldrb	r3, [r3, #16]
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d05c      	beq.n	800a068 <Utils_SoftTime_Update+0x300>
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	f300 808a 	bgt.w	800a0c8 <Utils_SoftTime_Update+0x360>
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00f      	beq.n	8009fd8 <Utils_SoftTime_Update+0x270>
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d031      	beq.n	800a020 <Utils_SoftTime_Update+0x2b8>
                                job->active = 0;
                            }
                        }
                        break;
                }
                break;
 8009fbc:	e084      	b.n	800a0c8 <Utils_SoftTime_Update+0x360>
 8009fbe:	bf00      	nop
 8009fc0:	240148c8 	.word	0x240148c8
 8009fc4:	240197b8 	.word	0x240197b8
 8009fc8:	240148ce 	.word	0x240148ce
 8009fcc:	240148cf 	.word	0x240148cf
 8009fd0:	240148d0 	.word	0x240148d0
 8009fd4:	24019650 	.word	0x24019650
                        if (hour_changed && s_RealTimeClock_context.hour == job->hour) {
 8009fd8:	797b      	ldrb	r3, [r7, #5]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d068      	beq.n	800a0b0 <Utils_SoftTime_Update+0x348>
 8009fde:	4b46      	ldr	r3, [pc, #280]	@ (800a0f8 <Utils_SoftTime_Update+0x390>)
 8009fe0:	78da      	ldrb	r2, [r3, #3]
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	789b      	ldrb	r3, [r3, #2]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d162      	bne.n	800a0b0 <Utils_SoftTime_Update+0x348>
                        	job->callback(job->context);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	69db      	ldr	r3, [r3, #28]
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	6a12      	ldr	r2, [r2, #32]
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	4798      	blx	r3
                            job->last_triggered_unit = job->hour;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	789a      	ldrb	r2, [r3, #2]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	745a      	strb	r2, [r3, #17]
                            if (job->repeat_count > 0 && --job->remaining == 0) {
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d054      	beq.n	800a0b0 <Utils_SoftTime_Update+0x348>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	1e5a      	subs	r2, r3, #1
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	619a      	str	r2, [r3, #24]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d14b      	bne.n	800a0b0 <Utils_SoftTime_Update+0x348>
                                job->active = 0;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2200      	movs	r2, #0
 800a01c:	701a      	strb	r2, [r3, #0]
                        break;
 800a01e:	e047      	b.n	800a0b0 <Utils_SoftTime_Update+0x348>
                        if (minute_changed && s_RealTimeClock_context.minute == job->minute) {
 800a020:	79bb      	ldrb	r3, [r7, #6]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d046      	beq.n	800a0b4 <Utils_SoftTime_Update+0x34c>
 800a026:	4b34      	ldr	r3, [pc, #208]	@ (800a0f8 <Utils_SoftTime_Update+0x390>)
 800a028:	791a      	ldrb	r2, [r3, #4]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	78db      	ldrb	r3, [r3, #3]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d140      	bne.n	800a0b4 <Utils_SoftTime_Update+0x34c>
                        	job->callback(job->context);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	6a12      	ldr	r2, [r2, #32]
 800a03a:	4610      	mov	r0, r2
 800a03c:	4798      	blx	r3
                            job->last_triggered_unit = job->minute;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	78da      	ldrb	r2, [r3, #3]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	745a      	strb	r2, [r3, #17]
                            if (job->repeat_count > 0 && --job->remaining == 0) {
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d032      	beq.n	800a0b4 <Utils_SoftTime_Update+0x34c>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	1e5a      	subs	r2, r3, #1
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	619a      	str	r2, [r3, #24]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d129      	bne.n	800a0b4 <Utils_SoftTime_Update+0x34c>
                                job->active = 0;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2200      	movs	r2, #0
 800a064:	701a      	strb	r2, [r3, #0]
                        break;
 800a066:	e025      	b.n	800a0b4 <Utils_SoftTime_Update+0x34c>
                        if (second_changed && s_RealTimeClock_context.second == job->second) {
 800a068:	79fb      	ldrb	r3, [r7, #7]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d024      	beq.n	800a0b8 <Utils_SoftTime_Update+0x350>
 800a06e:	4b22      	ldr	r3, [pc, #136]	@ (800a0f8 <Utils_SoftTime_Update+0x390>)
 800a070:	795a      	ldrb	r2, [r3, #5]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	791b      	ldrb	r3, [r3, #4]
 800a076:	429a      	cmp	r2, r3
 800a078:	d11e      	bne.n	800a0b8 <Utils_SoftTime_Update+0x350>
                        	job->callback(job->context);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	6a12      	ldr	r2, [r2, #32]
 800a082:	4610      	mov	r0, r2
 800a084:	4798      	blx	r3
                            job->last_triggered_unit = job->second;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	791a      	ldrb	r2, [r3, #4]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	745a      	strb	r2, [r3, #17]
                            if (job->repeat_count > 0 && --job->remaining == 0) {
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d010      	beq.n	800a0b8 <Utils_SoftTime_Update+0x350>
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	1e5a      	subs	r2, r3, #1
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	619a      	str	r2, [r3, #24]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d107      	bne.n	800a0b8 <Utils_SoftTime_Update+0x350>
                                job->active = 0;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	701a      	strb	r2, [r3, #0]
                        break;
 800a0ae:	e003      	b.n	800a0b8 <Utils_SoftTime_Update+0x350>
                        break;
 800a0b0:	bf00      	nop
 800a0b2:	e009      	b.n	800a0c8 <Utils_SoftTime_Update+0x360>
                        break;
 800a0b4:	bf00      	nop
 800a0b6:	e007      	b.n	800a0c8 <Utils_SoftTime_Update+0x360>
                        break;
 800a0b8:	bf00      	nop
                break;
 800a0ba:	e005      	b.n	800a0c8 <Utils_SoftTime_Update+0x360>
        if (!job->active || !job->callback) continue;
 800a0bc:	bf00      	nop
 800a0be:	e004      	b.n	800a0ca <Utils_SoftTime_Update+0x362>
                break;
 800a0c0:	bf00      	nop
 800a0c2:	e002      	b.n	800a0ca <Utils_SoftTime_Update+0x362>
                break;
 800a0c4:	bf00      	nop
 800a0c6:	e000      	b.n	800a0ca <Utils_SoftTime_Update+0x362>
                break;
 800a0c8:	bf00      	nop
    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	73fb      	strb	r3, [r7, #15]
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	2b09      	cmp	r3, #9
 800a0d4:	f67f aef2 	bls.w	8009ebc <Utils_SoftTime_Update+0x154>
        }
    }

    last_second = s_RealTimeClock_context.second;
 800a0d8:	4b07      	ldr	r3, [pc, #28]	@ (800a0f8 <Utils_SoftTime_Update+0x390>)
 800a0da:	795a      	ldrb	r2, [r3, #5]
 800a0dc:	4b07      	ldr	r3, [pc, #28]	@ (800a0fc <Utils_SoftTime_Update+0x394>)
 800a0de:	701a      	strb	r2, [r3, #0]
    last_minute = s_RealTimeClock_context.minute;
 800a0e0:	4b05      	ldr	r3, [pc, #20]	@ (800a0f8 <Utils_SoftTime_Update+0x390>)
 800a0e2:	791a      	ldrb	r2, [r3, #4]
 800a0e4:	4b06      	ldr	r3, [pc, #24]	@ (800a100 <Utils_SoftTime_Update+0x398>)
 800a0e6:	701a      	strb	r2, [r3, #0]
    last_hour = s_RealTimeClock_context.hour;
 800a0e8:	4b03      	ldr	r3, [pc, #12]	@ (800a0f8 <Utils_SoftTime_Update+0x390>)
 800a0ea:	78da      	ldrb	r2, [r3, #3]
 800a0ec:	4b05      	ldr	r3, [pc, #20]	@ (800a104 <Utils_SoftTime_Update+0x39c>)
 800a0ee:	701a      	strb	r2, [r3, #0]
}
 800a0f0:	bf00      	nop
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd90      	pop	{r4, r7, pc}
 800a0f8:	240148c8 	.word	0x240148c8
 800a0fc:	240148ce 	.word	0x240148ce
 800a100:	240148cf 	.word	0x240148cf
 800a104:	240148d0 	.word	0x240148d0

0800a108 <Utils_SoftTime_Init>:

void Utils_SoftTime_Init(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.year = 0;  // 2000
 800a10e:	4b1d      	ldr	r3, [pc, #116]	@ (800a184 <Utils_SoftTime_Init+0x7c>)
 800a110:	2200      	movs	r2, #0
 800a112:	709a      	strb	r2, [r3, #2]
    s_RealTimeClock_context.month = 1; // January
 800a114:	4b1b      	ldr	r3, [pc, #108]	@ (800a184 <Utils_SoftTime_Init+0x7c>)
 800a116:	2201      	movs	r2, #1
 800a118:	705a      	strb	r2, [r3, #1]
    s_RealTimeClock_context.day = 1;
 800a11a:	4b1a      	ldr	r3, [pc, #104]	@ (800a184 <Utils_SoftTime_Init+0x7c>)
 800a11c:	2201      	movs	r2, #1
 800a11e:	701a      	strb	r2, [r3, #0]
    s_RealTimeClock_context.hour = 0;
 800a120:	4b18      	ldr	r3, [pc, #96]	@ (800a184 <Utils_SoftTime_Init+0x7c>)
 800a122:	2200      	movs	r2, #0
 800a124:	70da      	strb	r2, [r3, #3]
    s_RealTimeClock_context.minute = 0;
 800a126:	4b17      	ldr	r3, [pc, #92]	@ (800a184 <Utils_SoftTime_Init+0x7c>)
 800a128:	2200      	movs	r2, #0
 800a12a:	711a      	strb	r2, [r3, #4]
    s_RealTimeClock_context.second = 0;
 800a12c:	4b15      	ldr	r3, [pc, #84]	@ (800a184 <Utils_SoftTime_Init+0x7c>)
 800a12e:	2200      	movs	r2, #0
 800a130:	715a      	strb	r2, [r3, #5]

    s_WorkingTimeClock_context.days = 0;
 800a132:	4b15      	ldr	r3, [pc, #84]	@ (800a188 <Utils_SoftTime_Init+0x80>)
 800a134:	2200      	movs	r2, #0
 800a136:	601a      	str	r2, [r3, #0]
    s_WorkingTimeClock_context.hours = 0;
 800a138:	4b13      	ldr	r3, [pc, #76]	@ (800a188 <Utils_SoftTime_Init+0x80>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	711a      	strb	r2, [r3, #4]
    s_WorkingTimeClock_context.minutes = 0;
 800a13e:	4b12      	ldr	r3, [pc, #72]	@ (800a188 <Utils_SoftTime_Init+0x80>)
 800a140:	2200      	movs	r2, #0
 800a142:	715a      	strb	r2, [r3, #5]
    s_WorkingTimeClock_context.seconds = 0;
 800a144:	4b10      	ldr	r3, [pc, #64]	@ (800a188 <Utils_SoftTime_Init+0x80>)
 800a146:	2200      	movs	r2, #0
 800a148:	719a      	strb	r2, [r3, #6]

    memset(s_Cronjob_List, 0, sizeof(s_Cronjob_List));
 800a14a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800a14e:	2100      	movs	r1, #0
 800a150:	480e      	ldr	r0, [pc, #56]	@ (800a18c <Utils_SoftTime_Init+0x84>)
 800a152:	f017 ff24 	bl	8021f9e <memset>
    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 800a156:	2300      	movs	r3, #0
 800a158:	71fb      	strb	r3, [r7, #7]
 800a15a:	e00b      	b.n	800a174 <Utils_SoftTime_Init+0x6c>
            s_Cronjob_List[i].active = 0;
 800a15c:	79fa      	ldrb	r2, [r7, #7]
 800a15e:	490b      	ldr	r1, [pc, #44]	@ (800a18c <Utils_SoftTime_Init+0x84>)
 800a160:	4613      	mov	r3, r2
 800a162:	00db      	lsls	r3, r3, #3
 800a164:	4413      	add	r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	440b      	add	r3, r1
 800a16a:	2200      	movs	r2, #0
 800a16c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < MAX_CRONJOBS; i++) {
 800a16e:	79fb      	ldrb	r3, [r7, #7]
 800a170:	3301      	adds	r3, #1
 800a172:	71fb      	strb	r3, [r7, #7]
 800a174:	79fb      	ldrb	r3, [r7, #7]
 800a176:	2b09      	cmp	r3, #9
 800a178:	d9f0      	bls.n	800a15c <Utils_SoftTime_Init+0x54>
    }
}
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	240148c8 	.word	0x240148c8
 800a188:	240197b8 	.word	0x240197b8
 800a18c:	24019650 	.word	0x24019650

0800a190 <Utils_GetRTC>:

// ================= Helper Functions =================
void Utils_GetRTC(s_DateTime *dateTime)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
    if (dateTime == NULL) return;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d006      	beq.n	800a1ac <Utils_GetRTC+0x1c>
    *dateTime = s_RealTimeClock_context;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a05      	ldr	r2, [pc, #20]	@ (800a1b8 <Utils_GetRTC+0x28>)
 800a1a2:	6810      	ldr	r0, [r2, #0]
 800a1a4:	6018      	str	r0, [r3, #0]
 800a1a6:	8892      	ldrh	r2, [r2, #4]
 800a1a8:	809a      	strh	r2, [r3, #4]
 800a1aa:	e000      	b.n	800a1ae <Utils_GetRTC+0x1e>
    if (dateTime == NULL) return;
 800a1ac:	bf00      	nop
}
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	240148c8 	.word	0x240148c8

0800a1bc <Utils_SetRTC>:

void Utils_SetRTC(const s_DateTime *dateTime)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
    if (dateTime == NULL) return;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d006      	beq.n	800a1d8 <Utils_SetRTC+0x1c>
    s_RealTimeClock_context = *dateTime;
 800a1ca:	4b06      	ldr	r3, [pc, #24]	@ (800a1e4 <Utils_SetRTC+0x28>)
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	6810      	ldr	r0, [r2, #0]
 800a1d0:	6018      	str	r0, [r3, #0]
 800a1d2:	8892      	ldrh	r2, [r2, #4]
 800a1d4:	809a      	strh	r2, [r3, #4]
 800a1d6:	e000      	b.n	800a1da <Utils_SetRTC+0x1e>
    if (dateTime == NULL) return;
 800a1d8:	bf00      	nop
}
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	240148c8 	.word	0x240148c8

0800a1e8 <Utils_SetEpoch>:
 *  s_DateTime newTime = {15, 10, 23, 14, 30, 0}; // 15/10/2023 14:30:00
 *  DateTime_SetRTC(&newTime);
 */

void Utils_SetEpoch(uint32_t epoch)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
    s_DateTime dt;
    if (epoch < EPOCH_OFFSET_UNIX)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a0b      	ldr	r2, [pc, #44]	@ (800a220 <Utils_SetEpoch+0x38>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d90e      	bls.n	800a216 <Utils_SetEpoch+0x2e>
    {
        return;
    }
    EpochToDateTime(epoch - EPOCH_OFFSET_UNIX, &dt);
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a224 <Utils_SetEpoch+0x3c>)
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f107 0208 	add.w	r2, r7, #8
 800a202:	4611      	mov	r1, r2
 800a204:	4618      	mov	r0, r3
 800a206:	f7ff fd27 	bl	8009c58 <EpochToDateTime>
    Utils_SetRTC(&dt);
 800a20a:	f107 0308 	add.w	r3, r7, #8
 800a20e:	4618      	mov	r0, r3
 800a210:	f7ff ffd4 	bl	800a1bc <Utils_SetRTC>
 800a214:	e000      	b.n	800a218 <Utils_SetEpoch+0x30>
        return;
 800a216:	bf00      	nop
}
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	386d437f 	.word	0x386d437f
 800a224:	c792bc80 	.word	0xc792bc80

0800a228 <Utils_GetEpoch>:

uint32_t Utils_GetEpoch(void)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	af00      	add	r7, sp, #0
    return DateTimeToEpoch(&s_RealTimeClock_context) + EPOCH_OFFSET_UNIX;
 800a22c:	4803      	ldr	r0, [pc, #12]	@ (800a23c <Utils_GetEpoch+0x14>)
 800a22e:	f7ff fcb7 	bl	8009ba0 <DateTimeToEpoch>
 800a232:	4602      	mov	r2, r0
 800a234:	4b02      	ldr	r3, [pc, #8]	@ (800a240 <Utils_GetEpoch+0x18>)
 800a236:	4413      	add	r3, r2
}
 800a238:	4618      	mov	r0, r3
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	240148c8 	.word	0x240148c8
 800a240:	386d4380 	.word	0x386d4380

0800a244 <Utils_GetWorkingTime>:

void Utils_GetWorkingTime(uint32_t *days, uint8_t *hours, uint8_t *minutes, uint8_t *seconds)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	603b      	str	r3, [r7, #0]
    if (days) *days = s_WorkingTimeClock_context.days;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d003      	beq.n	800a260 <Utils_GetWorkingTime+0x1c>
 800a258:	4b0f      	ldr	r3, [pc, #60]	@ (800a298 <Utils_GetWorkingTime+0x54>)
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	601a      	str	r2, [r3, #0]
    if (hours) *hours = s_WorkingTimeClock_context.hours;
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <Utils_GetWorkingTime+0x2a>
 800a266:	4b0c      	ldr	r3, [pc, #48]	@ (800a298 <Utils_GetWorkingTime+0x54>)
 800a268:	791a      	ldrb	r2, [r3, #4]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	701a      	strb	r2, [r3, #0]
    if (minutes) *minutes = s_WorkingTimeClock_context.minutes;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d003      	beq.n	800a27c <Utils_GetWorkingTime+0x38>
 800a274:	4b08      	ldr	r3, [pc, #32]	@ (800a298 <Utils_GetWorkingTime+0x54>)
 800a276:	795a      	ldrb	r2, [r3, #5]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	701a      	strb	r2, [r3, #0]
    if (seconds) *seconds = s_WorkingTimeClock_context.seconds;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <Utils_GetWorkingTime+0x46>
 800a282:	4b05      	ldr	r3, [pc, #20]	@ (800a298 <Utils_GetWorkingTime+0x54>)
 800a284:	799a      	ldrb	r2, [r3, #6]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	701a      	strb	r2, [r3, #0]
}
 800a28a:	bf00      	nop
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	240197b8 	.word	0x240197b8

0800a29c <Utils_Cronjob_SetMoment>:

// ================= Cronjob Functions =================
uint8_t Utils_Cronjob_SetMoment(uint8_t hour, uint8_t minute, uint8_t second, uint32_t repeat_count, CronCallback_t callback, void *context, uint8_t index) {
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	603b      	str	r3, [r7, #0]
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	71fb      	strb	r3, [r7, #7]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	71bb      	strb	r3, [r7, #6]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	717b      	strb	r3, [r7, #5]
    if (index >= MAX_CRONJOBS || callback == NULL || hour > 23 || minute > 59 || second > 59) return 1;
 800a2b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2b4:	2b09      	cmp	r3, #9
 800a2b6:	d80b      	bhi.n	800a2d0 <Utils_Cronjob_SetMoment+0x34>
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d008      	beq.n	800a2d0 <Utils_Cronjob_SetMoment+0x34>
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	2b17      	cmp	r3, #23
 800a2c2:	d805      	bhi.n	800a2d0 <Utils_Cronjob_SetMoment+0x34>
 800a2c4:	79bb      	ldrb	r3, [r7, #6]
 800a2c6:	2b3b      	cmp	r3, #59	@ 0x3b
 800a2c8:	d802      	bhi.n	800a2d0 <Utils_Cronjob_SetMoment+0x34>
 800a2ca:	797b      	ldrb	r3, [r7, #5]
 800a2cc:	2b3b      	cmp	r3, #59	@ 0x3b
 800a2ce:	d901      	bls.n	800a2d4 <Utils_Cronjob_SetMoment+0x38>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e031      	b.n	800a338 <Utils_Cronjob_SetMoment+0x9c>
    if (s_Cronjob_List[index].active) return 1;
 800a2d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a2d8:	491a      	ldr	r1, [pc, #104]	@ (800a344 <Utils_Cronjob_SetMoment+0xa8>)
 800a2da:	4613      	mov	r3, r2
 800a2dc:	00db      	lsls	r3, r3, #3
 800a2de:	4413      	add	r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	440b      	add	r3, r1
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <Utils_Cronjob_SetMoment+0x52>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e024      	b.n	800a338 <Utils_Cronjob_SetMoment+0x9c>

    s_Cronjob *job = &s_Cronjob_List[index];
 800a2ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	00db      	lsls	r3, r3, #3
 800a2f6:	4413      	add	r3, r2
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	4a12      	ldr	r2, [pc, #72]	@ (800a344 <Utils_Cronjob_SetMoment+0xa8>)
 800a2fc:	4413      	add	r3, r2
 800a2fe:	60fb      	str	r3, [r7, #12]
    job->active = 1;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2201      	movs	r2, #1
 800a304:	701a      	strb	r2, [r3, #0]
    job->type = CRON_TYPE_MOMENT;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	705a      	strb	r2, [r3, #1]
    job->hour = hour;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	79fa      	ldrb	r2, [r7, #7]
 800a310:	709a      	strb	r2, [r3, #2]
    job->minute = minute;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	79ba      	ldrb	r2, [r7, #6]
 800a316:	70da      	strb	r2, [r3, #3]
    job->second = second;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	797a      	ldrb	r2, [r7, #5]
 800a31c:	711a      	strb	r2, [r3, #4]
    job->repeat_count = repeat_count;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	615a      	str	r2, [r3, #20]
    job->remaining = repeat_count;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	619a      	str	r2, [r3, #24]
    job->callback = callback;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	69ba      	ldr	r2, [r7, #24]
 800a32e:	61da      	str	r2, [r3, #28]
    job->context = context;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	69fa      	ldr	r2, [r7, #28]
 800a334:	621a      	str	r2, [r3, #32]
    return 0;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	24019650 	.word	0x24019650

0800a348 <Utils_Cronjob_SetCountdown>:

uint8_t Utils_Cronjob_SetCountdown(uint32_t seconds, uint32_t repeat_count, CronCallback_t callback, void *context, uint8_t index) {
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	603b      	str	r3, [r7, #0]
    if (index >= MAX_CRONJOBS || callback == NULL || seconds == 0) return 1;
 800a356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a35a:	2b09      	cmp	r3, #9
 800a35c:	d805      	bhi.n	800a36a <Utils_Cronjob_SetCountdown+0x22>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <Utils_Cronjob_SetCountdown+0x22>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <Utils_Cronjob_SetCountdown+0x26>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e030      	b.n	800a3d0 <Utils_Cronjob_SetCountdown+0x88>
    if (s_Cronjob_List[index].active) return 1;
 800a36e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a372:	4919      	ldr	r1, [pc, #100]	@ (800a3d8 <Utils_Cronjob_SetCountdown+0x90>)
 800a374:	4613      	mov	r3, r2
 800a376:	00db      	lsls	r3, r3, #3
 800a378:	4413      	add	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	440b      	add	r3, r1
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <Utils_Cronjob_SetCountdown+0x40>
 800a384:	2301      	movs	r3, #1
 800a386:	e023      	b.n	800a3d0 <Utils_Cronjob_SetCountdown+0x88>

    s_Cronjob *job = &s_Cronjob_List[index];
 800a388:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a38c:	4613      	mov	r3, r2
 800a38e:	00db      	lsls	r3, r3, #3
 800a390:	4413      	add	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4a10      	ldr	r2, [pc, #64]	@ (800a3d8 <Utils_Cronjob_SetCountdown+0x90>)
 800a396:	4413      	add	r3, r2
 800a398:	617b      	str	r3, [r7, #20]
    job->active = 1;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2201      	movs	r2, #1
 800a39e:	701a      	strb	r2, [r3, #0]
    job->type = CRON_TYPE_COUNTDOWN;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	705a      	strb	r2, [r3, #1]
    job->interval = seconds;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	609a      	str	r2, [r3, #8]
    job->last_trigger = Utils_GetEpoch();
 800a3ac:	f7ff ff3c 	bl	800a228 <Utils_GetEpoch>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	60da      	str	r2, [r3, #12]
    job->repeat_count = repeat_count;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	615a      	str	r2, [r3, #20]
    job->remaining = repeat_count;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	619a      	str	r2, [r3, #24]
    job->callback = callback;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	61da      	str	r2, [r3, #28]
    job->context = context;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	621a      	str	r2, [r3, #32]
    return 0;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	24019650 	.word	0x24019650

0800a3dc <Utils_Cronjob_SetEvery>:

uint8_t Utils_Cronjob_SetEvery(EveryUnit_t unit, uint8_t value, uint32_t repeat_count, CronCallback_t callback, void *context, uint8_t index) {
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60ba      	str	r2, [r7, #8]
 800a3e4:	607b      	str	r3, [r7, #4]
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73fb      	strb	r3, [r7, #15]
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	73bb      	strb	r3, [r7, #14]
    if (index >= MAX_CRONJOBS || callback == NULL) return 1;
 800a3ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a3f2:	2b09      	cmp	r3, #9
 800a3f4:	d802      	bhi.n	800a3fc <Utils_Cronjob_SetEvery+0x20>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <Utils_Cronjob_SetEvery+0x24>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e050      	b.n	800a4a2 <Utils_Cronjob_SetEvery+0xc6>
    if (s_Cronjob_List[index].active) return 1;
 800a400:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800a404:	492a      	ldr	r1, [pc, #168]	@ (800a4b0 <Utils_Cronjob_SetEvery+0xd4>)
 800a406:	4613      	mov	r3, r2
 800a408:	00db      	lsls	r3, r3, #3
 800a40a:	4413      	add	r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	440b      	add	r3, r1
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <Utils_Cronjob_SetEvery+0x3e>
 800a416:	2301      	movs	r3, #1
 800a418:	e043      	b.n	800a4a2 <Utils_Cronjob_SetEvery+0xc6>
    if ((unit == EVERY_HOUR && value > 23) || (unit == EVERY_MINUTE && value > 59) || (unit == EVERY_SECOND && value > 59)) return 1;
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <Utils_Cronjob_SetEvery+0x4a>
 800a420:	7bbb      	ldrb	r3, [r7, #14]
 800a422:	2b17      	cmp	r3, #23
 800a424:	d80b      	bhi.n	800a43e <Utils_Cronjob_SetEvery+0x62>
 800a426:	7bfb      	ldrb	r3, [r7, #15]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d102      	bne.n	800a432 <Utils_Cronjob_SetEvery+0x56>
 800a42c:	7bbb      	ldrb	r3, [r7, #14]
 800a42e:	2b3b      	cmp	r3, #59	@ 0x3b
 800a430:	d805      	bhi.n	800a43e <Utils_Cronjob_SetEvery+0x62>
 800a432:	7bfb      	ldrb	r3, [r7, #15]
 800a434:	2b02      	cmp	r3, #2
 800a436:	d104      	bne.n	800a442 <Utils_Cronjob_SetEvery+0x66>
 800a438:	7bbb      	ldrb	r3, [r7, #14]
 800a43a:	2b3b      	cmp	r3, #59	@ 0x3b
 800a43c:	d901      	bls.n	800a442 <Utils_Cronjob_SetEvery+0x66>
 800a43e:	2301      	movs	r3, #1
 800a440:	e02f      	b.n	800a4a2 <Utils_Cronjob_SetEvery+0xc6>

    s_Cronjob *job = &s_Cronjob_List[index];
 800a442:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800a446:	4613      	mov	r3, r2
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	4413      	add	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4a18      	ldr	r2, [pc, #96]	@ (800a4b0 <Utils_Cronjob_SetEvery+0xd4>)
 800a450:	4413      	add	r3, r2
 800a452:	617b      	str	r3, [r7, #20]
    job->active = 1;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2201      	movs	r2, #1
 800a458:	701a      	strb	r2, [r3, #0]
    job->type = CRON_TYPE_EVERY;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2202      	movs	r2, #2
 800a45e:	705a      	strb	r2, [r3, #1]
    job->every_unit = unit;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	7bfa      	ldrb	r2, [r7, #15]
 800a464:	741a      	strb	r2, [r3, #16]
    if (unit == EVERY_HOUR) job->hour = value;
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d103      	bne.n	800a474 <Utils_Cronjob_SetEvery+0x98>
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	7bba      	ldrb	r2, [r7, #14]
 800a470:	709a      	strb	r2, [r3, #2]
 800a472:	e009      	b.n	800a488 <Utils_Cronjob_SetEvery+0xac>
    else if (unit == EVERY_MINUTE) job->minute = value;
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d103      	bne.n	800a482 <Utils_Cronjob_SetEvery+0xa6>
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	7bba      	ldrb	r2, [r7, #14]
 800a47e:	70da      	strb	r2, [r3, #3]
 800a480:	e002      	b.n	800a488 <Utils_Cronjob_SetEvery+0xac>
    else job->second = value;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	7bba      	ldrb	r2, [r7, #14]
 800a486:	711a      	strb	r2, [r3, #4]
    job->repeat_count = repeat_count;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	615a      	str	r2, [r3, #20]
    job->remaining = repeat_count;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	619a      	str	r2, [r3, #24]
    job->callback = callback;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	61da      	str	r2, [r3, #28]
    job->context = context;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	6a3a      	ldr	r2, [r7, #32]
 800a49e:	621a      	str	r2, [r3, #32]
    return 0;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	371c      	adds	r7, #28
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	24019650 	.word	0x24019650

0800a4b4 <Utils_SoftTime_Sync>:
    return 0;
}

#if USE_EXTERNAL_RTC
Std_ReturnType Utils_SoftTime_Sync(void)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
	s_DateTime currentTime;
	RV3129_HandleTypeDef *hrtc = RV3129_GetHandle();
 800a4ba:	f7fe f9c3 	bl	8008844 <RV3129_GetHandle>
 800a4be:	60f8      	str	r0, [r7, #12]
	Std_ReturnType ret = E_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	72fb      	strb	r3, [r7, #11]
	ret = RV3129_GetTime(hrtc, &currentTime);
 800a4c4:	1d3b      	adds	r3, r7, #4
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f7fe f9c5 	bl	8008858 <RV3129_GetTime>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	72fb      	strb	r3, [r7, #11]
    if(ret == E_OK)
 800a4d2:	7afb      	ldrb	r3, [r7, #11]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d103      	bne.n	800a4e0 <Utils_SoftTime_Sync+0x2c>
    {
       Utils_SetRTC(&currentTime);
 800a4d8:	1d3b      	adds	r3, r7, #4
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff fe6e 	bl	800a1bc <Utils_SetRTC>
    }
    return ret;
 800a4e0:	7afb      	ldrb	r3, [r7, #11]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <RingBuffer_Create>:

#include "ring_buffer.h"

void RingBuffer_Create(s_RingBufferType *rb, uint32_t id, const char *name,
                         RingBufElement *buffer, RingBufCtr max_size)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b088      	sub	sp, #32
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	607a      	str	r2, [r7, #4]
 800a4f6:	603b      	str	r3, [r7, #0]
    rb->id = id;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	601a      	str	r2, [r3, #0]

    strncpy(rb->name, name, RINGBUFFER_NAME_MAX_LEN - 1);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	3304      	adds	r3, #4
 800a502:	221f      	movs	r2, #31
 800a504:	6879      	ldr	r1, [r7, #4]
 800a506:	4618      	mov	r0, r3
 800a508:	f017 fd6d 	bl	8021fe6 <strncpy>
    rb->name[RINGBUFFER_NAME_MAX_LEN - 1] = '\0';
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    rb->buffer = buffer;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	683a      	ldr	r2, [r7, #0]
 800a518:	625a      	str	r2, [r3, #36]	@ 0x24
    rb->max_size = max_size;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a51e:	851a      	strh	r2, [r3, #40]	@ 0x28

    atomic_store_explicit(&rb->head, 0U, memory_order_release);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	332a      	adds	r3, #42	@ 0x2a
 800a524:	61fb      	str	r3, [r7, #28]
 800a526:	2300      	movs	r3, #0
 800a528:	82fb      	strh	r3, [r7, #22]
 800a52a:	8afa      	ldrh	r2, [r7, #22]
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	f3bf 8f5b 	dmb	ish
 800a532:	801a      	strh	r2, [r3, #0]
    atomic_store_explicit(&rb->tail, 0U, memory_order_release);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	332c      	adds	r3, #44	@ 0x2c
 800a538:	61bb      	str	r3, [r7, #24]
 800a53a:	2300      	movs	r3, #0
 800a53c:	82bb      	strh	r3, [r7, #20]
 800a53e:	8aba      	ldrh	r2, [r7, #20]
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	f3bf 8f5b 	dmb	ish
 800a546:	801a      	strh	r2, [r3, #0]
}
 800a548:	bf00      	nop
 800a54a:	3720      	adds	r7, #32
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <RingBuffer_Put>:

_Bool RingBuffer_Put(s_RingBufferType * const rb, RingBufElement const el)
{
 800a550:	b480      	push	{r7}
 800a552:	b08b      	sub	sp, #44	@ 0x2c
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_relaxed) + 1U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	332a      	adds	r3, #42	@ 0x2a
 800a560:	623b      	str	r3, [r7, #32]
 800a562:	6a3b      	ldr	r3, [r7, #32]
 800a564:	881b      	ldrh	r3, [r3, #0]
 800a566:	b29b      	uxth	r3, r3
 800a568:	81fb      	strh	r3, [r7, #14]
 800a56a:	89fb      	ldrh	r3, [r7, #14]
 800a56c:	3301      	adds	r3, #1
 800a56e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (head == rb->max_size)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a574:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a576:	429a      	cmp	r2, r3
 800a578:	d101      	bne.n	800a57e <RingBuffer_Put+0x2e>
    {
        head = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_acquire);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	332c      	adds	r3, #44	@ 0x2c
 800a582:	61fb      	str	r3, [r7, #28]
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	f3bf 8f5b 	dmb	ish
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	81bb      	strh	r3, [r7, #12]
 800a590:	89bb      	ldrh	r3, [r7, #12]
 800a592:	837b      	strh	r3, [r7, #26]
    if (head != tail) // buffer NOT full?
 800a594:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a596:	8b7b      	ldrh	r3, [r7, #26]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d018      	beq.n	800a5ce <RingBuffer_Put+0x7e>
    {
        rb->buffer[atomic_load_explicit(&rb->head, memory_order_relaxed)] = el;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	322a      	adds	r2, #42	@ 0x2a
 800a5a4:	617a      	str	r2, [r7, #20]
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	8812      	ldrh	r2, [r2, #0]
 800a5aa:	b292      	uxth	r2, r2
 800a5ac:	817a      	strh	r2, [r7, #10]
 800a5ae:	897a      	ldrh	r2, [r7, #10]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	78fa      	ldrb	r2, [r7, #3]
 800a5b4:	701a      	strb	r2, [r3, #0]
        atomic_store_explicit(&rb->head, head, memory_order_release);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	332a      	adds	r3, #42	@ 0x2a
 800a5ba:	613b      	str	r3, [r7, #16]
 800a5bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a5be:	813b      	strh	r3, [r7, #8]
 800a5c0:	893a      	ldrh	r2, [r7, #8]
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f3bf 8f5b 	dmb	ish
 800a5c8:	801a      	strh	r2, [r3, #0]
//        __enable_irq();
        return true;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e000      	b.n	800a5d0 <RingBuffer_Put+0x80>
    }
    else
    {
//    	__enable_irq();
        return false;
 800a5ce:	2300      	movs	r3, #0
    }
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	372c      	adds	r7, #44	@ 0x2c
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <RingBuffer_Get>:

_Bool RingBuffer_Get(s_RingBufferType * const rb, RingBufElement *pel)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b08b      	sub	sp, #44	@ 0x2c
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
//	__disable_irq();
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	332c      	adds	r3, #44	@ 0x2c
 800a5ea:	623b      	str	r3, [r7, #32]
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	881b      	ldrh	r3, [r3, #0]
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	827b      	strh	r3, [r7, #18]
 800a5f4:	8a7b      	ldrh	r3, [r7, #18]
 800a5f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	332a      	adds	r3, #42	@ 0x2a
 800a5fc:	61fb      	str	r3, [r7, #28]
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	881b      	ldrh	r3, [r3, #0]
 800a602:	f3bf 8f5b 	dmb	ish
 800a606:	b29b      	uxth	r3, r3
 800a608:	823b      	strh	r3, [r7, #16]
 800a60a:	8a3b      	ldrh	r3, [r7, #16]
 800a60c:	837b      	strh	r3, [r7, #26]
    if (head != tail)  // buffer NOT empty?
 800a60e:	8b7a      	ldrh	r2, [r7, #26]
 800a610:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a612:	429a      	cmp	r2, r3
 800a614:	d01c      	beq.n	800a650 <RingBuffer_Get+0x74>
    {
        *pel = rb->buffer[tail];
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a61a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a61c:	4413      	add	r3, r2
 800a61e:	781a      	ldrb	r2, [r3, #0]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	701a      	strb	r2, [r3, #0]
        ++tail;
 800a624:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a626:	3301      	adds	r3, #1
 800a628:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (tail == rb->max_size)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a62e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a630:	429a      	cmp	r2, r3
 800a632:	d101      	bne.n	800a638 <RingBuffer_Get+0x5c>
        {
            tail = 0U;
 800a634:	2300      	movs	r3, #0
 800a636:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        atomic_store_explicit(&rb->tail, tail, memory_order_release);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	332c      	adds	r3, #44	@ 0x2c
 800a63c:	617b      	str	r3, [r7, #20]
 800a63e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a640:	81fb      	strh	r3, [r7, #14]
 800a642:	89fa      	ldrh	r2, [r7, #14]
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f3bf 8f5b 	dmb	ish
 800a64a:	801a      	strh	r2, [r3, #0]
//    	__enable_irq();
        return true;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e000      	b.n	800a652 <RingBuffer_Get+0x76>
    }
    else
    {
//    	__enable_irq();
        return false;
 800a650:	2300      	movs	r3, #0
    }
}
 800a652:	4618      	mov	r0, r3
 800a654:	372c      	adds	r7, #44	@ 0x2c
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <RingBuffer_NumFreeSlots>:

// Function to calculate the number of free slots in the ring buffer.
// Note: We always leave one empty slot to distinguish between an empty and a full buffer.
RingBufCtr RingBuffer_NumFreeSlots(s_RingBufferType * const rb)
{
 800a65e:	b480      	push	{r7}
 800a660:	b089      	sub	sp, #36	@ 0x24
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	332a      	adds	r3, #42	@ 0x2a
 800a66a:	61fb      	str	r3, [r7, #28]
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	f3bf 8f5b 	dmb	ish
 800a674:	b29b      	uxth	r3, r3
 800a676:	823b      	strh	r3, [r7, #16]
 800a678:	8a3b      	ldrh	r3, [r7, #16]
 800a67a:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	332c      	adds	r3, #44	@ 0x2c
 800a680:	617b      	str	r3, [r7, #20]
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	b29b      	uxth	r3, r3
 800a688:	81fb      	strh	r3, [r7, #14]
 800a68a:	89fb      	ldrh	r3, [r7, #14]
 800a68c:	827b      	strh	r3, [r7, #18]

    if (head == tail)
 800a68e:	8b7a      	ldrh	r2, [r7, #26]
 800a690:	8a7b      	ldrh	r3, [r7, #18]
 800a692:	429a      	cmp	r2, r3
 800a694:	d104      	bne.n	800a6a0 <RingBuffer_NumFreeSlots+0x42>
    {
        return (RingBufCtr)(rb->max_size - 1U);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a69a:	3b01      	subs	r3, #1
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	e014      	b.n	800a6ca <RingBuffer_NumFreeSlots+0x6c>
    }
    else if (head < tail)
 800a6a0:	8b7a      	ldrh	r2, [r7, #26]
 800a6a2:	8a7b      	ldrh	r3, [r7, #18]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d206      	bcs.n	800a6b6 <RingBuffer_NumFreeSlots+0x58>
    {
        return (RingBufCtr)(tail - head - 1U);
 800a6a8:	8a7a      	ldrh	r2, [r7, #18]
 800a6aa:	8b7b      	ldrh	r3, [r7, #26]
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	e009      	b.n	800a6ca <RingBuffer_NumFreeSlots+0x6c>
    }
    else
    {
        return (RingBufCtr)(rb->max_size + tail - head - 1U);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a6ba:	8a7b      	ldrh	r3, [r7, #18]
 800a6bc:	4413      	add	r3, r2
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	8b7b      	ldrh	r3, [r7, #26]
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	b29b      	uxth	r3, r3
    }
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3724      	adds	r7, #36	@ 0x24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <RingBuffer_IsDataAvailable>:
    }
    return rb->buffer[tail];
}

_Bool RingBuffer_IsDataAvailable(s_RingBufferType * const rb)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b089      	sub	sp, #36	@ 0x24
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	332a      	adds	r3, #42	@ 0x2a
 800a6e2:	61fb      	str	r3, [r7, #28]
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	f3bf 8f5b 	dmb	ish
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	823b      	strh	r3, [r7, #16]
 800a6f0:	8a3b      	ldrh	r3, [r7, #16]
 800a6f2:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	332c      	adds	r3, #44	@ 0x2c
 800a6f8:	617b      	str	r3, [r7, #20]
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	81fb      	strh	r3, [r7, #14]
 800a702:	89fb      	ldrh	r3, [r7, #14]
 800a704:	827b      	strh	r3, [r7, #18]
    return (head != tail);
 800a706:	8b7a      	ldrh	r2, [r7, #26]
 800a708:	8a7b      	ldrh	r3, [r7, #18]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	bf14      	ite	ne
 800a70e:	2301      	movne	r3, #1
 800a710:	2300      	moveq	r3, #0
 800a712:	b2db      	uxtb	r3, r3
}
 800a714:	4618      	mov	r0, r3
 800a716:	3724      	adds	r7, #36	@ 0x24
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f06f 0201 	mvn.w	r2, #1
 800a72e:	611a      	str	r2, [r3, #16]
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d101      	bne.n	800a754 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800a750:	2301      	movs	r3, #1
 800a752:	e000      	b.n	800a756 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	370c      	adds	r7, #12
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
	...

0800a764 <TickTimer_IRQHandler>:

extern ShieldInstance_t auth_usb;

volatile uint32_t LL_Tick = 0;

void TickTimer_IRQHandler(void) {
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 800a768:	4809      	ldr	r0, [pc, #36]	@ (800a790 <TickTimer_IRQHandler+0x2c>)
 800a76a:	f7ff ffe7 	bl	800a73c <LL_TIM_IsActiveFlag_UPDATE>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00a      	beq.n	800a78a <TickTimer_IRQHandler+0x26>
        LL_TIM_ClearFlag_UPDATE(TIM1);
 800a774:	4806      	ldr	r0, [pc, #24]	@ (800a790 <TickTimer_IRQHandler+0x2c>)
 800a776:	f7ff ffd3 	bl	800a720 <LL_TIM_ClearFlag_UPDATE>
        LL_Tick++;
 800a77a:	4b06      	ldr	r3, [pc, #24]	@ (800a794 <TickTimer_IRQHandler+0x30>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3301      	adds	r3, #1
 800a780:	4a04      	ldr	r2, [pc, #16]	@ (800a794 <TickTimer_IRQHandler+0x30>)
 800a782:	6013      	str	r3, [r2, #0]
        Shield_UpdateTimer(&auth_usb);
 800a784:	4804      	ldr	r0, [pc, #16]	@ (800a798 <TickTimer_IRQHandler+0x34>)
 800a786:	f7f8 f9fd 	bl	8002b84 <Shield_UpdateTimer>
    }
}
 800a78a:	bf00      	nop
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	40010000 	.word	0x40010000
 800a794:	240197c0 	.word	0x240197c0
 800a798:	24014a70 	.word	0x24014a70

0800a79c <Utils_GetTick>:

uint32_t Utils_GetTick(void) {
 800a79c:	b480      	push	{r7}
 800a79e:	af00      	add	r7, sp, #0
    return LL_Tick;
 800a7a0:	4b03      	ldr	r3, [pc, #12]	@ (800a7b0 <Utils_GetTick+0x14>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	240197c0 	.word	0x240197c0

0800a7b4 <disk_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..) - Physical drive number to identify the drive
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (BYTE pdrv)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 800a7be:	f005 fae7 	bl	800fd90 <FATFS_GetDisk>
 800a7c2:	60f8      	str	r0, [r7, #12]
  stat = disk->drv[pdrv]->disk_status(disk->lun[pdrv]);
 800a7c4:	79fb      	ldrb	r3, [r7, #7]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	79fa      	ldrb	r2, [r7, #7]
 800a7d2:	68f9      	ldr	r1, [r7, #12]
 800a7d4:	440a      	add	r2, r1
 800a7d6:	7a12      	ldrb	r2, [r2, #8]
 800a7d8:	4610      	mov	r0, r2
 800a7da:	4798      	blx	r3
 800a7dc:	4603      	mov	r3, r0
 800a7de:	72fb      	strb	r3, [r7, #11]
  return stat;
 800a7e0:	7afb      	ldrb	r3, [r7, #11]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <disk_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..) - Physical drive nmuber to identify the drive
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (BYTE pdrv)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73fb      	strb	r3, [r7, #15]
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 800a7f8:	f005 faca 	bl	800fd90 <FATFS_GetDisk>
 800a7fc:	60b8      	str	r0, [r7, #8]
  if (disk->is_initialized[pdrv] == 0)
 800a7fe:	79fb      	ldrb	r3, [r7, #7]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	5cd3      	ldrb	r3, [r2, r3]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d114      	bne.n	800a832 <disk_initialize+0x48>
  {
     stat = disk->drv[pdrv]->disk_initialize(disk->lun[pdrv]);
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	79fa      	ldrb	r2, [r7, #7]
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	440a      	add	r2, r1
 800a81a:	7a12      	ldrb	r2, [r2, #8]
 800a81c:	4610      	mov	r0, r2
 800a81e:	4798      	blx	r3
 800a820:	4603      	mov	r3, r0
 800a822:	73fb      	strb	r3, [r7, #15]
     if (stat == RES_OK)
 800a824:	7bfb      	ldrb	r3, [r7, #15]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d103      	bne.n	800a832 <disk_initialize+0x48>
     {
        disk->is_initialized[pdrv] = 1;
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	2101      	movs	r1, #1
 800a830:	54d1      	strb	r1, [r2, r3]
     }
  }
  return stat;
 800a832:	7bfb      	ldrb	r3, [r7, #15]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a83c:	b590      	push	{r4, r7, lr}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	60b9      	str	r1, [r7, #8]
 800a844:	607a      	str	r2, [r7, #4]
 800a846:	603b      	str	r3, [r7, #0]
 800a848:	4603      	mov	r3, r0
 800a84a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 800a84c:	f005 faa0 	bl	800fd90 <FATFS_GetDisk>
 800a850:	6178      	str	r0, [r7, #20]
  res = disk->drv[pdrv]->disk_read(disk->lun[pdrv], buff, sector, count);
 800a852:	7bfb      	ldrb	r3, [r7, #15]
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	689c      	ldr	r4, [r3, #8]
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	4413      	add	r3, r2
 800a864:	7a18      	ldrb	r0, [r3, #8]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	68b9      	ldr	r1, [r7, #8]
 800a86c:	47a0      	blx	r4
 800a86e:	4603      	mov	r3, r0
 800a870:	74fb      	strb	r3, [r7, #19]
  return res;
 800a872:	7cfb      	ldrb	r3, [r7, #19]
}
 800a874:	4618      	mov	r0, r3
 800a876:	371c      	adds	r7, #28
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd90      	pop	{r4, r7, pc}

0800a87c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a87c:	b590      	push	{r4, r7, lr}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	60b9      	str	r1, [r7, #8]
 800a884:	607a      	str	r2, [r7, #4]
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 800a88c:	f005 fa80 	bl	800fd90 <FATFS_GetDisk>
 800a890:	6178      	str	r0, [r7, #20]
  res = disk->drv[pdrv]->disk_write(disk->lun[pdrv], buff, sector, count);
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	697a      	ldr	r2, [r7, #20]
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	68dc      	ldr	r4, [r3, #12]
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	7a18      	ldrb	r0, [r3, #8]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	68b9      	ldr	r1, [r7, #8]
 800a8ac:	47a0      	blx	r4
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	74fb      	strb	r3, [r7, #19]
  return res;
 800a8b2:	7cfb      	ldrb	r3, [r7, #19]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	371c      	adds	r7, #28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd90      	pop	{r4, r7, pc}

0800a8bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	603a      	str	r2, [r7, #0]
 800a8c6:	71fb      	strb	r3, [r7, #7]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  Disk_drvTypeDef *disk = FATFS_GetDisk();
 800a8cc:	f005 fa60 	bl	800fd90 <FATFS_GetDisk>
 800a8d0:	60f8      	str	r0, [r7, #12]
  res = disk->drv[pdrv]->disk_ioctl(disk->lun[pdrv], cmd, buff);
 800a8d2:	79fb      	ldrb	r3, [r7, #7]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	79fa      	ldrb	r2, [r7, #7]
 800a8e0:	68f9      	ldr	r1, [r7, #12]
 800a8e2:	440a      	add	r2, r1
 800a8e4:	7a10      	ldrb	r0, [r2, #8]
 800a8e6:	79b9      	ldrb	r1, [r7, #6]
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	4798      	blx	r3
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	72fb      	strb	r3, [r7, #11]
  return res;
 800a8f0:	7afb      	ldrb	r3, [r7, #11]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	af00      	add	r7, sp, #0
  return 0;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a90a:	b480      	push	{r7}
 800a90c:	b085      	sub	sp, #20
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	3301      	adds	r3, #1
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a91a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a91e:	021b      	lsls	r3, r3, #8
 800a920:	b21a      	sxth	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	b21b      	sxth	r3, r3
 800a928:	4313      	orrs	r3, r2
 800a92a:	b21b      	sxth	r3, r3
 800a92c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a92e:	89fb      	ldrh	r3, [r7, #14]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3714      	adds	r7, #20
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	3303      	adds	r3, #3
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	021b      	lsls	r3, r3, #8
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	3202      	adds	r2, #2
 800a954:	7812      	ldrb	r2, [r2, #0]
 800a956:	4313      	orrs	r3, r2
 800a958:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	021b      	lsls	r3, r3, #8
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	3201      	adds	r2, #1
 800a962:	7812      	ldrb	r2, [r2, #0]
 800a964:	4313      	orrs	r3, r2
 800a966:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	021b      	lsls	r3, r3, #8
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	7812      	ldrb	r2, [r2, #0]
 800a970:	4313      	orrs	r3, r2
 800a972:	60fb      	str	r3, [r7, #12]
	return rv;
 800a974:	68fb      	ldr	r3, [r7, #12]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800a982:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a986:	b09d      	sub	sp, #116	@ 0x74
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800a98c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a98e:	3307      	adds	r3, #7
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2200      	movs	r2, #0
 800a996:	469a      	mov	sl, r3
 800a998:	4693      	mov	fp, r2
 800a99a:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800a99e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a9a2:	f04f 0000 	mov.w	r0, #0
 800a9a6:	f04f 0100 	mov.w	r1, #0
 800a9aa:	0219      	lsls	r1, r3, #8
 800a9ac:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a9b0:	0210      	lsls	r0, r2, #8
 800a9b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9b4:	3306      	adds	r3, #6
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	461c      	mov	r4, r3
 800a9be:	4615      	mov	r5, r2
 800a9c0:	ea40 0804 	orr.w	r8, r0, r4
 800a9c4:	ea41 0905 	orr.w	r9, r1, r5
 800a9c8:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800a9cc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a9d0:	f04f 0000 	mov.w	r0, #0
 800a9d4:	f04f 0100 	mov.w	r1, #0
 800a9d8:	0219      	lsls	r1, r3, #8
 800a9da:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a9de:	0210      	lsls	r0, r2, #8
 800a9e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9e2:	3305      	adds	r3, #5
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9ec:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800a9ee:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800a9f2:	4623      	mov	r3, r4
 800a9f4:	4303      	orrs	r3, r0
 800a9f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9f8:	462b      	mov	r3, r5
 800a9fa:	430b      	orrs	r3, r1
 800a9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9fe:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800aa02:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800aa06:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800aa0a:	f04f 0000 	mov.w	r0, #0
 800aa0e:	f04f 0100 	mov.w	r1, #0
 800aa12:	0219      	lsls	r1, r3, #8
 800aa14:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aa18:	0210      	lsls	r0, r2, #8
 800aa1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2200      	movs	r2, #0
 800aa24:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa26:	657a      	str	r2, [r7, #84]	@ 0x54
 800aa28:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800aa2c:	4623      	mov	r3, r4
 800aa2e:	4303      	orrs	r3, r0
 800aa30:	623b      	str	r3, [r7, #32]
 800aa32:	462b      	mov	r3, r5
 800aa34:	430b      	orrs	r3, r1
 800aa36:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa38:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800aa3c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800aa40:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800aa44:	f04f 0000 	mov.w	r0, #0
 800aa48:	f04f 0100 	mov.w	r1, #0
 800aa4c:	0219      	lsls	r1, r3, #8
 800aa4e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aa52:	0210      	lsls	r0, r2, #8
 800aa54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa56:	3303      	adds	r3, #3
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800aa62:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800aa66:	4623      	mov	r3, r4
 800aa68:	4303      	orrs	r3, r0
 800aa6a:	61bb      	str	r3, [r7, #24]
 800aa6c:	462b      	mov	r3, r5
 800aa6e:	430b      	orrs	r3, r1
 800aa70:	61fb      	str	r3, [r7, #28]
 800aa72:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800aa76:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800aa7a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800aa7e:	f04f 0000 	mov.w	r0, #0
 800aa82:	f04f 0100 	mov.w	r1, #0
 800aa86:	0219      	lsls	r1, r3, #8
 800aa88:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aa8c:	0210      	lsls	r0, r2, #8
 800aa8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa90:	3302      	adds	r3, #2
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2200      	movs	r2, #0
 800aa98:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa9a:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa9c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800aaa0:	4623      	mov	r3, r4
 800aaa2:	4303      	orrs	r3, r0
 800aaa4:	613b      	str	r3, [r7, #16]
 800aaa6:	462b      	mov	r3, r5
 800aaa8:	430b      	orrs	r3, r1
 800aaaa:	617b      	str	r3, [r7, #20]
 800aaac:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800aab0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800aab4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aab8:	f04f 0200 	mov.w	r2, #0
 800aabc:	f04f 0300 	mov.w	r3, #0
 800aac0:	020b      	lsls	r3, r1, #8
 800aac2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aac6:	0202      	lsls	r2, r0, #8
 800aac8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800aaca:	3101      	adds	r1, #1
 800aacc:	7809      	ldrb	r1, [r1, #0]
 800aace:	b2c9      	uxtb	r1, r1
 800aad0:	2000      	movs	r0, #0
 800aad2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aad4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800aad6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800aada:	4621      	mov	r1, r4
 800aadc:	4311      	orrs	r1, r2
 800aade:	60b9      	str	r1, [r7, #8]
 800aae0:	4629      	mov	r1, r5
 800aae2:	4319      	orrs	r1, r3
 800aae4:	60f9      	str	r1, [r7, #12]
 800aae6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800aaea:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800aaee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aaf2:	f04f 0200 	mov.w	r2, #0
 800aaf6:	f04f 0300 	mov.w	r3, #0
 800aafa:	020b      	lsls	r3, r1, #8
 800aafc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab00:	0202      	lsls	r2, r0, #8
 800ab02:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ab04:	7809      	ldrb	r1, [r1, #0]
 800ab06:	b2c9      	uxtb	r1, r1
 800ab08:	2000      	movs	r0, #0
 800ab0a:	6339      	str	r1, [r7, #48]	@ 0x30
 800ab0c:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ab12:	4621      	mov	r1, r4
 800ab14:	4311      	orrs	r1, r2
 800ab16:	6039      	str	r1, [r7, #0]
 800ab18:	4629      	mov	r1, r5
 800ab1a:	4319      	orrs	r1, r3
 800ab1c:	6079      	str	r1, [r7, #4]
 800ab1e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ab22:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800ab26:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	3774      	adds	r7, #116	@ 0x74
 800ab30:	46bd      	mov	sp, r7
 800ab32:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ab36:	4770      	bx	lr

0800ab38 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	1c5a      	adds	r2, r3, #1
 800ab48:	607a      	str	r2, [r7, #4]
 800ab4a:	887a      	ldrh	r2, [r7, #2]
 800ab4c:	b2d2      	uxtb	r2, r2
 800ab4e:	701a      	strb	r2, [r3, #0]
 800ab50:	887b      	ldrh	r3, [r7, #2]
 800ab52:	0a1b      	lsrs	r3, r3, #8
 800ab54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	887a      	ldrh	r2, [r7, #2]
 800ab5e:	b2d2      	uxtb	r2, r2
 800ab60:	701a      	strb	r2, [r3, #0]
}
 800ab62:	bf00      	nop
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab6e:	b480      	push	{r7}
 800ab70:	b083      	sub	sp, #12
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	607a      	str	r2, [r7, #4]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	b2d2      	uxtb	r2, r2
 800ab82:	701a      	strb	r2, [r3, #0]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	0a1b      	lsrs	r3, r3, #8
 800ab88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	b2d2      	uxtb	r2, r2
 800ab94:	701a      	strb	r2, [r3, #0]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	0a1b      	lsrs	r3, r3, #8
 800ab9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	607a      	str	r2, [r7, #4]
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	b2d2      	uxtb	r2, r2
 800aba6:	701a      	strb	r2, [r3, #0]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	0a1b      	lsrs	r3, r3, #8
 800abac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	b2d2      	uxtb	r2, r2
 800abb8:	701a      	strb	r2, [r3, #0]
}
 800abba:	bf00      	nop
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800abc6:	b480      	push	{r7}
 800abc8:	b085      	sub	sp, #20
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	60fa      	str	r2, [r7, #12]
 800abd8:	783a      	ldrb	r2, [r7, #0]
 800abda:	701a      	strb	r2, [r3, #0]
 800abdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abe0:	f04f 0200 	mov.w	r2, #0
 800abe4:	f04f 0300 	mov.w	r3, #0
 800abe8:	0a02      	lsrs	r2, r0, #8
 800abea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800abee:	0a0b      	lsrs	r3, r1, #8
 800abf0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	1c5a      	adds	r2, r3, #1
 800abf8:	60fa      	str	r2, [r7, #12]
 800abfa:	783a      	ldrb	r2, [r7, #0]
 800abfc:	701a      	strb	r2, [r3, #0]
 800abfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac02:	f04f 0200 	mov.w	r2, #0
 800ac06:	f04f 0300 	mov.w	r3, #0
 800ac0a:	0a02      	lsrs	r2, r0, #8
 800ac0c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac10:	0a0b      	lsrs	r3, r1, #8
 800ac12:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	60fa      	str	r2, [r7, #12]
 800ac1c:	783a      	ldrb	r2, [r7, #0]
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac24:	f04f 0200 	mov.w	r2, #0
 800ac28:	f04f 0300 	mov.w	r3, #0
 800ac2c:	0a02      	lsrs	r2, r0, #8
 800ac2e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac32:	0a0b      	lsrs	r3, r1, #8
 800ac34:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	60fa      	str	r2, [r7, #12]
 800ac3e:	783a      	ldrb	r2, [r7, #0]
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac46:	f04f 0200 	mov.w	r2, #0
 800ac4a:	f04f 0300 	mov.w	r3, #0
 800ac4e:	0a02      	lsrs	r2, r0, #8
 800ac50:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac54:	0a0b      	lsrs	r3, r1, #8
 800ac56:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	60fa      	str	r2, [r7, #12]
 800ac60:	783a      	ldrb	r2, [r7, #0]
 800ac62:	701a      	strb	r2, [r3, #0]
 800ac64:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac68:	f04f 0200 	mov.w	r2, #0
 800ac6c:	f04f 0300 	mov.w	r3, #0
 800ac70:	0a02      	lsrs	r2, r0, #8
 800ac72:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac76:	0a0b      	lsrs	r3, r1, #8
 800ac78:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	1c5a      	adds	r2, r3, #1
 800ac80:	60fa      	str	r2, [r7, #12]
 800ac82:	783a      	ldrb	r2, [r7, #0]
 800ac84:	701a      	strb	r2, [r3, #0]
 800ac86:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac8a:	f04f 0200 	mov.w	r2, #0
 800ac8e:	f04f 0300 	mov.w	r3, #0
 800ac92:	0a02      	lsrs	r2, r0, #8
 800ac94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac98:	0a0b      	lsrs	r3, r1, #8
 800ac9a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	1c5a      	adds	r2, r3, #1
 800aca2:	60fa      	str	r2, [r7, #12]
 800aca4:	783a      	ldrb	r2, [r7, #0]
 800aca6:	701a      	strb	r2, [r3, #0]
 800aca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acac:	f04f 0200 	mov.w	r2, #0
 800acb0:	f04f 0300 	mov.w	r3, #0
 800acb4:	0a02      	lsrs	r2, r0, #8
 800acb6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800acba:	0a0b      	lsrs	r3, r1, #8
 800acbc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	1c5a      	adds	r2, r3, #1
 800acc4:	60fa      	str	r2, [r7, #12]
 800acc6:	783a      	ldrb	r2, [r7, #0]
 800acc8:	701a      	strb	r2, [r3, #0]
}
 800acca:	bf00      	nop
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b083      	sub	sp, #12
 800acda:	af00      	add	r7, sp, #0
 800acdc:	4603      	mov	r3, r0
 800acde:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <dbc_1st+0x14>
 800ace6:	2300      	movs	r3, #0
 800ace8:	e000      	b.n	800acec <dbc_1st+0x16>
#endif
	return 0;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <dbc_2nd+0x14>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	e000      	b.n	800ad0e <dbc_2nd+0x16>
#endif
	return 0;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b086      	sub	sp, #24
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	1c5a      	adds	r2, r3, #1
 800ad2c:	617a      	str	r2, [r7, #20]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 800ad32:	8a7b      	ldrh	r3, [r7, #18]
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7ff ffcd 	bl	800acd6 <dbc_1st>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d015      	beq.n	800ad6e <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	617a      	str	r2, [r7, #20]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 800ad4c:	7c7b      	ldrb	r3, [r7, #17]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7ff ffd2 	bl	800acf8 <dbc_2nd>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d102      	bne.n	800ad60 <tchar2uni+0x46>
 800ad5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5e:	e01d      	b.n	800ad9c <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 800ad60:	8a7b      	ldrh	r3, [r7, #18]
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	7c7b      	ldrb	r3, [r7, #17]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	4413      	add	r3, r2
 800ad6c:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 800ad6e:	8a7b      	ldrh	r3, [r7, #18]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00d      	beq.n	800ad90 <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 800ad74:	8a7b      	ldrh	r3, [r7, #18]
 800ad76:	f240 3152 	movw	r1, #850	@ 0x352
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f005 fab0 	bl	80102e0 <ff_oem2uni>
 800ad80:	4603      	mov	r3, r0
 800ad82:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 800ad84:	8a7b      	ldrh	r3, [r7, #18]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d102      	bne.n	800ad90 <tchar2uni+0x76>
 800ad8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8e:	e005      	b.n	800ad9c <tchar2uni+0x82>
	}
	uc = wc;
 800ad90:	8a7b      	ldrh	r3, [r7, #18]
 800ad92:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	601a      	str	r2, [r3, #0]
	return uc;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <put_utf>:
static UINT put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encoding) */
	DWORD chr,	/* UTF-16 encoded character (Surrogate pair if >=0x10000) */
	TCHAR* buf,	/* Output buffer */
	UINT szb	/* Size of the buffer */
)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
	return 1;

#else						/* ANSI/OEM output */
	WCHAR wc;

	wc = ff_uni2oem(chr, CODEPAGE);
 800adb0:	f240 3152 	movw	r1, #850	@ 0x352
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f005 fa59 	bl	801026c <ff_uni2oem>
 800adba:	4603      	mov	r3, r0
 800adbc:	82fb      	strh	r3, [r7, #22]
	if (wc >= 0x100) {	/* Is this a DBC? */
 800adbe:	8afb      	ldrh	r3, [r7, #22]
 800adc0:	2bff      	cmp	r3, #255	@ 0xff
 800adc2:	d914      	bls.n	800adee <put_utf+0x4a>
		if (szb < 2) return 0;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d801      	bhi.n	800adce <put_utf+0x2a>
 800adca:	2300      	movs	r3, #0
 800adcc:	e01e      	b.n	800ae0c <put_utf+0x68>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 800adce:	8afb      	ldrh	r3, [r7, #22]
 800add0:	0a1b      	lsrs	r3, r3, #8
 800add2:	b299      	uxth	r1, r3
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	1c5a      	adds	r2, r3, #1
 800add8:	60ba      	str	r2, [r7, #8]
 800adda:	b2ca      	uxtb	r2, r1
 800addc:	701a      	strb	r2, [r3, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	1c5a      	adds	r2, r3, #1
 800ade2:	60ba      	str	r2, [r7, #8]
 800ade4:	8afa      	ldrh	r2, [r7, #22]
 800ade6:	b2d2      	uxtb	r2, r2
 800ade8:	701a      	strb	r2, [r3, #0]
		return 2;
 800adea:	2302      	movs	r3, #2
 800adec:	e00e      	b.n	800ae0c <put_utf+0x68>
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 800adee:	8afb      	ldrh	r3, [r7, #22]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <put_utf+0x56>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <put_utf+0x5a>
 800adfa:	2300      	movs	r3, #0
 800adfc:	e006      	b.n	800ae0c <put_utf+0x68>
	*buf++ = (TCHAR)wc;					/* Store the character */
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	60ba      	str	r2, [r7, #8]
 800ae04:	8afa      	ldrh	r2, [r7, #22]
 800ae06:	b2d2      	uxtb	r2, r2
 800ae08:	701a      	strb	r2, [r3, #0]
	return 1;
 800ae0a:	2301      	movs	r3, #1
#endif
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3718      	adds	r7, #24
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <lock_volume>:

static int lock_volume (	/* 1:Ok, 0:timeout */
	FATFS* fs,				/* Filesystem object to lock */
	int syslock				/* System lock required */
)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
	int rv;


#if FF_FS_LOCK
	rv = ff_mutex_take(fs->ldrv);	/* Lock the volume */
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	789b      	ldrb	r3, [r3, #2]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f005 fb4a 	bl	80104bc <ff_mutex_take>
 800ae28:	60f8      	str	r0, [r7, #12]
	if (rv && syslock) {			/* System lock reqiered? */
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d016      	beq.n	800ae5e <lock_volume+0x4a>
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d013      	beq.n	800ae5e <lock_volume+0x4a>
		rv = ff_mutex_take(FF_VOLUMES);	/* Lock the system */
 800ae36:	2001      	movs	r0, #1
 800ae38:	f005 fb40 	bl	80104bc <ff_mutex_take>
 800ae3c:	60f8      	str	r0, [r7, #12]
		if (rv) {
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d007      	beq.n	800ae54 <lock_volume+0x40>
			SysLockVolume = fs->ldrv;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	789a      	ldrb	r2, [r3, #2]
 800ae48:	4b07      	ldr	r3, [pc, #28]	@ (800ae68 <lock_volume+0x54>)
 800ae4a:	701a      	strb	r2, [r3, #0]
			SysLock = 2;				/* System lock succeeded */
 800ae4c:	4b07      	ldr	r3, [pc, #28]	@ (800ae6c <lock_volume+0x58>)
 800ae4e:	2202      	movs	r2, #2
 800ae50:	701a      	strb	r2, [r3, #0]
 800ae52:	e004      	b.n	800ae5e <lock_volume+0x4a>
		} else {
			ff_mutex_give(fs->ldrv);	/* Failed system lock */
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	789b      	ldrb	r3, [r3, #2]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f005 fb49 	bl	80104f0 <ff_mutex_give>
		}
	}
#else
	rv = syslock ? ff_mutex_take(fs->ldrv) : ff_mutex_take(fs->ldrv);	/* Lock the volume (this is to prevent compiler warning) */
#endif
	return rv;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	2401980d 	.word	0x2401980d
 800ae6c:	2401980c 	.word	0x2401980c

0800ae70 <unlock_volume>:

static void unlock_volume (
	FATFS* fs,		/* Filesystem object */
	FRESULT res		/* Result code to be returned */
)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d01f      	beq.n	800aec2 <unlock_volume+0x52>
 800ae82:	78fb      	ldrb	r3, [r7, #3]
 800ae84:	2b0c      	cmp	r3, #12
 800ae86:	d01c      	beq.n	800aec2 <unlock_volume+0x52>
 800ae88:	78fb      	ldrb	r3, [r7, #3]
 800ae8a:	2b0b      	cmp	r3, #11
 800ae8c:	d019      	beq.n	800aec2 <unlock_volume+0x52>
 800ae8e:	78fb      	ldrb	r3, [r7, #3]
 800ae90:	2b0f      	cmp	r3, #15
 800ae92:	d016      	beq.n	800aec2 <unlock_volume+0x52>
#if FF_FS_LOCK
		if (SysLock == 2 && SysLockVolume == fs->ldrv) {	/* Unlock system if it has been locked by this task */
 800ae94:	4b0d      	ldr	r3, [pc, #52]	@ (800aecc <unlock_volume+0x5c>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d10c      	bne.n	800aeb8 <unlock_volume+0x48>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	789a      	ldrb	r2, [r3, #2]
 800aea2:	4b0b      	ldr	r3, [pc, #44]	@ (800aed0 <unlock_volume+0x60>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d105      	bne.n	800aeb8 <unlock_volume+0x48>
			SysLock = 1;
 800aeac:	4b07      	ldr	r3, [pc, #28]	@ (800aecc <unlock_volume+0x5c>)
 800aeae:	2201      	movs	r2, #1
 800aeb0:	701a      	strb	r2, [r3, #0]
			ff_mutex_give(FF_VOLUMES);
 800aeb2:	2001      	movs	r0, #1
 800aeb4:	f005 fb1c 	bl	80104f0 <ff_mutex_give>
		}
#endif
		ff_mutex_give(fs->ldrv);	/* Unlock the volume */
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	789b      	ldrb	r3, [r3, #2]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f005 fb17 	bl	80104f0 <ff_mutex_give>
	}
}
 800aec2:	bf00      	nop
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	2401980c 	.word	0x2401980c
 800aed0:	2401980d 	.word	0x2401980d

0800aed4 <chk_share>:

static FRESULT chk_share (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search open object table for the object */
	be = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < FF_FS_LOCK; i++) {
 800aee2:	2300      	movs	r3, #0
 800aee4:	60fb      	str	r3, [r7, #12]
 800aee6:	e029      	b.n	800af3c <chk_share+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aee8:	4a27      	ldr	r2, [pc, #156]	@ (800af88 <chk_share+0xb4>)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	011b      	lsls	r3, r3, #4
 800aeee:	4413      	add	r3, r2
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d01d      	beq.n	800af32 <chk_share+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800aef6:	4a24      	ldr	r2, [pc, #144]	@ (800af88 <chk_share+0xb4>)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	011b      	lsls	r3, r3, #4
 800aefc:	4413      	add	r3, r2
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d116      	bne.n	800af36 <chk_share+0x62>
				Files[i].clu == dp->obj.sclust &&
 800af08:	4a1f      	ldr	r2, [pc, #124]	@ (800af88 <chk_share+0xb4>)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	011b      	lsls	r3, r3, #4
 800af0e:	4413      	add	r3, r2
 800af10:	3304      	adds	r3, #4
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 800af18:	429a      	cmp	r2, r3
 800af1a:	d10c      	bne.n	800af36 <chk_share+0x62>
				Files[i].ofs == dp->dptr) break;
 800af1c:	4a1a      	ldr	r2, [pc, #104]	@ (800af88 <chk_share+0xb4>)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	4413      	add	r3, r2
 800af24:	3308      	adds	r3, #8
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d102      	bne.n	800af36 <chk_share+0x62>
				Files[i].ofs == dp->dptr) break;
 800af30:	e007      	b.n	800af42 <chk_share+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800af32:	2301      	movs	r3, #1
 800af34:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < FF_FS_LOCK; i++) {
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3301      	adds	r3, #1
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d9d2      	bls.n	800aee8 <chk_share+0x14>
		}
	}
	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2b04      	cmp	r3, #4
 800af46:	d109      	bne.n	800af5c <chk_share+0x88>
		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new object? */
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d104      	bne.n	800af58 <chk_share+0x84>
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b02      	cmp	r3, #2
 800af52:	d001      	beq.n	800af58 <chk_share+0x84>
 800af54:	2312      	movs	r3, #18
 800af56:	e010      	b.n	800af7a <chk_share+0xa6>
 800af58:	2300      	movs	r3, #0
 800af5a:	e00e      	b.n	800af7a <chk_share+0xa6>
	}

	/* The object was opened. Reject any open against writing file and all write mode open */
	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d108      	bne.n	800af74 <chk_share+0xa0>
 800af62:	4a09      	ldr	r2, [pc, #36]	@ (800af88 <chk_share+0xb4>)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	011b      	lsls	r3, r3, #4
 800af68:	4413      	add	r3, r2
 800af6a:	330c      	adds	r3, #12
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af72:	d101      	bne.n	800af78 <chk_share+0xa4>
 800af74:	2310      	movs	r3, #16
 800af76:	e000      	b.n	800af7a <chk_share+0xa6>
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	240197cc 	.word	0x240197cc

0800af8c <enq_share>:


static int enq_share (void)	/* Check if an entry is available for a new object */
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800af92:	2300      	movs	r3, #0
 800af94:	607b      	str	r3, [r7, #4]
 800af96:	e002      	b.n	800af9e <enq_share+0x12>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3301      	adds	r3, #1
 800af9c:	607b      	str	r3, [r7, #4]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d806      	bhi.n	800afb2 <enq_share+0x26>
 800afa4:	4a09      	ldr	r2, [pc, #36]	@ (800afcc <enq_share+0x40>)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	011b      	lsls	r3, r3, #4
 800afaa:	4413      	add	r3, r2
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d1f2      	bne.n	800af98 <enq_share+0xc>
	return (i == FF_FS_LOCK) ? 0 : 1;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	bf14      	ite	ne
 800afb8:	2301      	movne	r3, #1
 800afba:	2300      	moveq	r3, #0
 800afbc:	b2db      	uxtb	r3, r3
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	370c      	adds	r7, #12
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	240197cc 	.word	0x240197cc

0800afd0 <inc_share>:

static UINT inc_share (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800afda:	2300      	movs	r3, #0
 800afdc:	60fb      	str	r3, [r7, #12]
 800afde:	e01f      	b.n	800b020 <inc_share+0x50>
		if (Files[i].fs == dp->obj.fs
 800afe0:	4a41      	ldr	r2, [pc, #260]	@ (800b0e8 <inc_share+0x118>)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	011b      	lsls	r3, r3, #4
 800afe6:	4413      	add	r3, r2
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d113      	bne.n	800b01a <inc_share+0x4a>
		 && Files[i].clu == dp->obj.sclust
 800aff2:	4a3d      	ldr	r2, [pc, #244]	@ (800b0e8 <inc_share+0x118>)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	011b      	lsls	r3, r3, #4
 800aff8:	4413      	add	r3, r2
 800affa:	3304      	adds	r3, #4
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	429a      	cmp	r2, r3
 800b004:	d109      	bne.n	800b01a <inc_share+0x4a>
		 && Files[i].ofs == dp->dptr) break;
 800b006:	4a38      	ldr	r2, [pc, #224]	@ (800b0e8 <inc_share+0x118>)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	4413      	add	r3, r2
 800b00e:	3308      	adds	r3, #8
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b016:	429a      	cmp	r2, r3
 800b018:	d006      	beq.n	800b028 <inc_share+0x58>
	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	3301      	adds	r3, #1
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2b03      	cmp	r3, #3
 800b024:	d9dc      	bls.n	800afe0 <inc_share+0x10>
 800b026:	e000      	b.n	800b02a <inc_share+0x5a>
		 && Files[i].ofs == dp->dptr) break;
 800b028:	bf00      	nop
	}

	if (i == FF_FS_LOCK) {			/* Not opened. Register it as new. */
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2b04      	cmp	r3, #4
 800b02e:	d132      	bne.n	800b096 <inc_share+0xc6>
		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;	/* Find a free entry */
 800b030:	2300      	movs	r3, #0
 800b032:	60fb      	str	r3, [r7, #12]
 800b034:	e002      	b.n	800b03c <inc_share+0x6c>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3301      	adds	r3, #1
 800b03a:	60fb      	str	r3, [r7, #12]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b03      	cmp	r3, #3
 800b040:	d806      	bhi.n	800b050 <inc_share+0x80>
 800b042:	4a29      	ldr	r2, [pc, #164]	@ (800b0e8 <inc_share+0x118>)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	011b      	lsls	r3, r3, #4
 800b048:	4413      	add	r3, r2
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1f2      	bne.n	800b036 <inc_share+0x66>
		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b04      	cmp	r3, #4
 800b054:	d101      	bne.n	800b05a <inc_share+0x8a>
 800b056:	2300      	movs	r3, #0
 800b058:	e03f      	b.n	800b0da <inc_share+0x10a>
		Files[i].fs = dp->obj.fs;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	4922      	ldr	r1, [pc, #136]	@ (800b0e8 <inc_share+0x118>)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	011b      	lsls	r3, r3, #4
 800b064:	440b      	add	r3, r1
 800b066:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	689a      	ldr	r2, [r3, #8]
 800b06c:	491e      	ldr	r1, [pc, #120]	@ (800b0e8 <inc_share+0x118>)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	011b      	lsls	r3, r3, #4
 800b072:	440b      	add	r3, r1
 800b074:	3304      	adds	r3, #4
 800b076:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b07c:	491a      	ldr	r1, [pc, #104]	@ (800b0e8 <inc_share+0x118>)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	011b      	lsls	r3, r3, #4
 800b082:	440b      	add	r3, r1
 800b084:	3308      	adds	r3, #8
 800b086:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b088:	4a17      	ldr	r2, [pc, #92]	@ (800b0e8 <inc_share+0x118>)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	011b      	lsls	r3, r3, #4
 800b08e:	4413      	add	r3, r2
 800b090:	330c      	adds	r3, #12
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
	}

	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	dd09      	ble.n	800b0b0 <inc_share+0xe0>
 800b09c:	4a12      	ldr	r2, [pc, #72]	@ (800b0e8 <inc_share+0x118>)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	011b      	lsls	r3, r3, #4
 800b0a2:	4413      	add	r3, r2
 800b0a4:	330c      	adds	r3, #12
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <inc_share+0xe0>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e014      	b.n	800b0da <inc_share+0x10a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d107      	bne.n	800b0c6 <inc_share+0xf6>
 800b0b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b0e8 <inc_share+0x118>)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	011b      	lsls	r3, r3, #4
 800b0bc:	4413      	add	r3, r2
 800b0be:	330c      	adds	r3, #12
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	e001      	b.n	800b0ca <inc_share+0xfa>
 800b0c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0ca:	4907      	ldr	r1, [pc, #28]	@ (800b0e8 <inc_share+0x118>)
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	0112      	lsls	r2, r2, #4
 800b0d0:	440a      	add	r2, r1
 800b0d2:	320c      	adds	r2, #12
 800b0d4:	6013      	str	r3, [r2, #0]

	return i + 1;	/* Index number origin from 1 */
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3301      	adds	r3, #1
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	240197cc 	.word	0x240197cc

0800b0ec <dec_share>:


static FRESULT dec_share (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
	UINT n;
	FRESULT res;


	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	607b      	str	r3, [r7, #4]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d825      	bhi.n	800b14c <dec_share+0x60>
		n = Files[i].ctr;
 800b100:	4a17      	ldr	r2, [pc, #92]	@ (800b160 <dec_share+0x74>)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	011b      	lsls	r3, r3, #4
 800b106:	4413      	add	r3, r2
 800b108:	330c      	adds	r3, #12
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	60fb      	str	r3, [r7, #12]
		if (n == 0x100) n = 0;	/* If write mode open, delete the object semaphore */
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b114:	d101      	bne.n	800b11a <dec_share+0x2e>
 800b116:	2300      	movs	r3, #0
 800b118:	60fb      	str	r3, [r7, #12]
		if (n > 0) n--;			/* Decrement read mode open count */
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d002      	beq.n	800b126 <dec_share+0x3a>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3b01      	subs	r3, #1
 800b124:	60fb      	str	r3, [r7, #12]
		Files[i].ctr = n;
 800b126:	4a0e      	ldr	r2, [pc, #56]	@ (800b160 <dec_share+0x74>)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	011b      	lsls	r3, r3, #4
 800b12c:	4413      	add	r3, r2
 800b12e:	330c      	adds	r3, #12
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	601a      	str	r2, [r3, #0]
		if (n == 0) {			/* Delete the object semaphore if open count becomes zero */
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d105      	bne.n	800b146 <dec_share+0x5a>
			Files[i].fs = 0;	/* Free the entry <<<If this memory write operation is not in atomic, FF_FS_REENTRANT == 1 and FF_VOLUMES > 1, there is a potential error in this process >>> */
 800b13a:	4a09      	ldr	r2, [pc, #36]	@ (800b160 <dec_share+0x74>)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	011b      	lsls	r3, r3, #4
 800b140:	4413      	add	r3, r2
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]
		}
		res = FR_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	72fb      	strb	r3, [r7, #11]
 800b14a:	e001      	b.n	800b150 <dec_share+0x64>
	} else {
		res = FR_INT_ERR;		/* Invalid index number */
 800b14c:	2302      	movs	r3, #2
 800b14e:	72fb      	strb	r3, [r7, #11]
	}
	return res;
 800b150:	7afb      	ldrb	r3, [r7, #11]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	240197cc 	.word	0x240197cc

0800b164 <clear_share>:


static void clear_share (	/* Clear all lock entries of the volume */
	FATFS* fs
)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < FF_FS_LOCK; i++) {
 800b16c:	2300      	movs	r3, #0
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	e010      	b.n	800b194 <clear_share+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b172:	4a0d      	ldr	r2, [pc, #52]	@ (800b1a8 <clear_share+0x44>)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	011b      	lsls	r3, r3, #4
 800b178:	4413      	add	r3, r2
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d105      	bne.n	800b18e <clear_share+0x2a>
 800b182:	4a09      	ldr	r2, [pc, #36]	@ (800b1a8 <clear_share+0x44>)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	011b      	lsls	r3, r3, #4
 800b188:	4413      	add	r3, r2
 800b18a:	2200      	movs	r2, #0
 800b18c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < FF_FS_LOCK; i++) {
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3301      	adds	r3, #1
 800b192:	60fb      	str	r3, [r7, #12]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2b03      	cmp	r3, #3
 800b198:	d9eb      	bls.n	800b172 <clear_share+0xe>
	}
}
 800b19a:	bf00      	nop
 800b19c:	bf00      	nop
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr
 800b1a8:	240197cc 	.word	0x240197cc

0800b1ac <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	791b      	ldrb	r3, [r3, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d02c      	beq.n	800b21a <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	7858      	ldrb	r0, [r3, #1]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	f7ff fb54 	bl	800a87c <disk_write>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d11d      	bne.n	800b216 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1e8:	1ad2      	subs	r2, r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d213      	bcs.n	800b21a <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	78db      	ldrb	r3, [r3, #3]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d10f      	bne.n	800b21a <sync_window+0x6e>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	7858      	ldrb	r0, [r3, #1]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b20c:	441a      	add	r2, r3
 800b20e:	2301      	movs	r3, #1
 800b210:	f7ff fb34 	bl	800a87c <disk_write>
 800b214:	e001      	b.n	800b21a <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800b216:	2301      	movs	r3, #1
 800b218:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d01b      	beq.n	800b274 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7ff ffb5 	bl	800b1ac <sync_window>
 800b242:	4603      	mov	r3, r0
 800b244:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d113      	bne.n	800b274 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	7858      	ldrb	r0, [r3, #1]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800b256:	2301      	movs	r3, #1
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	f7ff faef 	bl	800a83c <disk_read>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d004      	beq.n	800b26e <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800b264:	f04f 33ff 	mov.w	r3, #4294967295
 800b268:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	683a      	ldr	r2, [r7, #0]
 800b272:	649a      	str	r2, [r3, #72]	@ 0x48
		}
	}
	return res;
 800b274:	7bfb      	ldrb	r3, [r7, #15]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f7ff ff8f 	bl	800b1ac <sync_window>
 800b28e:	4603      	mov	r3, r0
 800b290:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b292:	7bfb      	ldrb	r3, [r7, #15]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d158      	bne.n	800b34a <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	d148      	bne.n	800b332 <sync_fs+0xb2>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	795b      	ldrb	r3, [r3, #5]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d144      	bne.n	800b332 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	334c      	adds	r3, #76	@ 0x4c
 800b2ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f016 fe73 	bl	8021f9e <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	334c      	adds	r3, #76	@ 0x4c
 800b2bc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b2c0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7ff fc37 	bl	800ab38 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	334c      	adds	r3, #76	@ 0x4c
 800b2ce:	4921      	ldr	r1, [pc, #132]	@ (800b354 <sync_fs+0xd4>)
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7ff fc4c 	bl	800ab6e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	334c      	adds	r3, #76	@ 0x4c
 800b2da:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b2de:	491e      	ldr	r1, [pc, #120]	@ (800b358 <sync_fs+0xd8>)
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7ff fc44 	bl	800ab6e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	334c      	adds	r3, #76	@ 0x4c
 800b2ea:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	f7ff fc3a 	bl	800ab6e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	334c      	adds	r3, #76	@ 0x4c
 800b2fe:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	4619      	mov	r1, r3
 800b308:	4610      	mov	r0, r2
 800b30a:	f7ff fc30 	bl	800ab6e <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	649a      	str	r2, [r3, #72]	@ 0x48
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	7858      	ldrb	r0, [r3, #1]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b326:	2301      	movs	r3, #1
 800b328:	f7ff faa8 	bl	800a87c <disk_write>
			fs->fsi_flag = 0;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	785b      	ldrb	r3, [r3, #1]
 800b336:	2200      	movs	r2, #0
 800b338:	2100      	movs	r1, #0
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff fabe 	bl	800a8bc <disk_ioctl>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <sync_fs+0xca>
 800b346:	2301      	movs	r3, #1
 800b348:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	41615252 	.word	0x41615252
 800b358:	61417272 	.word	0x61417272

0800b35c <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	3b02      	subs	r3, #2
 800b36a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b370:	3b02      	subs	r3, #2
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	429a      	cmp	r2, r3
 800b376:	d301      	bcc.n	800b37c <clst2sect+0x20>
 800b378:	2300      	movs	r3, #0
 800b37a:	e008      	b.n	800b38e <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	895b      	ldrh	r3, [r3, #10]
 800b384:	4619      	mov	r1, r3
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	fb01 f303 	mul.w	r3, r1, r3
 800b38c:	4413      	add	r3, r2
}
 800b38e:	4618      	mov	r0, r3
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr
	...

0800b39c <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b088      	sub	sp, #32
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	6809      	ldr	r1, [r1, #0]
 800b3aa:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b3ac:	6839      	ldr	r1, [r7, #0]
 800b3ae:	2901      	cmp	r1, #1
 800b3b0:	d904      	bls.n	800b3bc <get_fat+0x20>
 800b3b2:	69b9      	ldr	r1, [r7, #24]
 800b3b4:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800b3b6:	6838      	ldr	r0, [r7, #0]
 800b3b8:	4288      	cmp	r0, r1
 800b3ba:	d302      	bcc.n	800b3c2 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b3bc:	2301      	movs	r3, #1
 800b3be:	61fb      	str	r3, [r7, #28]
 800b3c0:	e10c      	b.n	800b5dc <get_fat+0x240>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b3c2:	f04f 31ff 	mov.w	r1, #4294967295
 800b3c6:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800b3c8:	69b9      	ldr	r1, [r7, #24]
 800b3ca:	7809      	ldrb	r1, [r1, #0]
 800b3cc:	3901      	subs	r1, #1
 800b3ce:	2903      	cmp	r1, #3
 800b3d0:	f200 80f8 	bhi.w	800b5c4 <get_fat+0x228>
 800b3d4:	a001      	add	r0, pc, #4	@ (adr r0, 800b3dc <get_fat+0x40>)
 800b3d6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b3da:	bf00      	nop
 800b3dc:	0800b3ed 	.word	0x0800b3ed
 800b3e0:	0800b473 	.word	0x0800b473
 800b3e4:	0800b4a9 	.word	0x0800b4a9
 800b3e8:	0800b4e3 	.word	0x0800b4e3
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	085b      	lsrs	r3, r3, #1
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	0a5b      	lsrs	r3, r3, #9
 800b402:	4413      	add	r3, r2
 800b404:	4619      	mov	r1, r3
 800b406:	69b8      	ldr	r0, [r7, #24]
 800b408:	f7ff ff0c 	bl	800b224 <move_window>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f040 80db 	bne.w	800b5ca <get_fat+0x22e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	60fa      	str	r2, [r7, #12]
 800b41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b41e:	69ba      	ldr	r2, [r7, #24]
 800b420:	4413      	add	r3, r2
 800b422:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800b426:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	0a5b      	lsrs	r3, r3, #9
 800b430:	4413      	add	r3, r2
 800b432:	4619      	mov	r1, r3
 800b434:	69b8      	ldr	r0, [r7, #24]
 800b436:	f7ff fef5 	bl	800b224 <move_window>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f040 80c6 	bne.w	800b5ce <get_fat+0x232>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b448:	69ba      	ldr	r2, [r7, #24]
 800b44a:	4413      	add	r3, r2
 800b44c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800b450:	021b      	lsls	r3, r3, #8
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	4313      	orrs	r3, r2
 800b456:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	f003 0301 	and.w	r3, r3, #1
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d002      	beq.n	800b468 <get_fat+0xcc>
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	091b      	lsrs	r3, r3, #4
 800b466:	e002      	b.n	800b46e <get_fat+0xd2>
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b46e:	61fb      	str	r3, [r7, #28]
			break;
 800b470:	e0b4      	b.n	800b5dc <get_fat+0x240>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	0a1b      	lsrs	r3, r3, #8
 800b47a:	4413      	add	r3, r2
 800b47c:	4619      	mov	r1, r3
 800b47e:	69b8      	ldr	r0, [r7, #24]
 800b480:	f7ff fed0 	bl	800b224 <move_window>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	f040 80a3 	bne.w	800b5d2 <get_fat+0x236>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	005b      	lsls	r3, r3, #1
 800b496:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b49a:	4413      	add	r3, r2
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7ff fa34 	bl	800a90a <ld_word>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	61fb      	str	r3, [r7, #28]
			break;
 800b4a6:	e099      	b.n	800b5dc <get_fat+0x240>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	09db      	lsrs	r3, r3, #7
 800b4b0:	4413      	add	r3, r2
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	69b8      	ldr	r0, [r7, #24]
 800b4b6:	f7ff feb5 	bl	800b224 <move_window>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f040 808a 	bne.w	800b5d6 <get_fat+0x23a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b4d0:	4413      	add	r3, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff fa32 	bl	800a93c <ld_dword>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b4de:	61fb      	str	r3, [r7, #28]
			break;
 800b4e0:	e07c      	b.n	800b5dc <get_fat+0x240>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800b4e2:	6879      	ldr	r1, [r7, #4]
 800b4e4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b4e8:	4301      	orrs	r1, r0
 800b4ea:	d003      	beq.n	800b4f4 <get_fat+0x158>
 800b4ec:	6879      	ldr	r1, [r7, #4]
 800b4ee:	6889      	ldr	r1, [r1, #8]
 800b4f0:	2900      	cmp	r1, #0
 800b4f2:	d103      	bne.n	800b4fc <get_fat+0x160>
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	79c9      	ldrb	r1, [r1, #7]
 800b4f8:	2900      	cmp	r1, #0
 800b4fa:	d160      	bne.n	800b5be <get_fat+0x222>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b4fc:	6879      	ldr	r1, [r7, #4]
 800b4fe:	6889      	ldr	r1, [r1, #8]
 800b500:	6838      	ldr	r0, [r7, #0]
 800b502:	1a41      	subs	r1, r0, r1
 800b504:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b50c:	1e42      	subs	r2, r0, #1
 800b50e:	f141 33ff 	adc.w	r3, r1, #4294967295
 800b512:	f04f 0000 	mov.w	r0, #0
 800b516:	f04f 0100 	mov.w	r1, #0
 800b51a:	0a50      	lsrs	r0, r2, #9
 800b51c:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b520:	0a59      	lsrs	r1, r3, #9
 800b522:	4602      	mov	r2, r0
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	895b      	ldrh	r3, [r3, #10]
 800b528:	fbb2 f3f3 	udiv	r3, r2, r3
 800b52c:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	79db      	ldrb	r3, [r3, #7]
 800b532:	2b02      	cmp	r3, #2
 800b534:	d10e      	bne.n	800b554 <get_fat+0x1b8>
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d80a      	bhi.n	800b554 <get_fat+0x1b8>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	429a      	cmp	r2, r3
 800b544:	d002      	beq.n	800b54c <get_fat+0x1b0>
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	3301      	adds	r3, #1
 800b54a:	e001      	b.n	800b550 <get_fat+0x1b4>
 800b54c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b550:	61fb      	str	r3, [r7, #28]
					break;
 800b552:	e043      	b.n	800b5dc <get_fat+0x240>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	79db      	ldrb	r3, [r3, #7]
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d108      	bne.n	800b56e <get_fat+0x1d2>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	697a      	ldr	r2, [r7, #20]
 800b562:	429a      	cmp	r2, r3
 800b564:	d203      	bcs.n	800b56e <get_fat+0x1d2>
					val = clst + 1; 	/* Generate the value */
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	3301      	adds	r3, #1
 800b56a:	61fb      	str	r3, [r7, #28]
					break;
 800b56c:	e036      	b.n	800b5dc <get_fat+0x240>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	79db      	ldrb	r3, [r3, #7]
 800b572:	2b02      	cmp	r3, #2
 800b574:	d023      	beq.n	800b5be <get_fat+0x222>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	69db      	ldr	r3, [r3, #28]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d003      	beq.n	800b586 <get_fat+0x1ea>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800b57e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b582:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800b584:	e02a      	b.n	800b5dc <get_fat+0x240>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	09db      	lsrs	r3, r3, #7
 800b58e:	4413      	add	r3, r2
 800b590:	4619      	mov	r1, r3
 800b592:	69b8      	ldr	r0, [r7, #24]
 800b594:	f7ff fe46 	bl	800b224 <move_window>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d11d      	bne.n	800b5da <get_fat+0x23e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b5ac:	4413      	add	r3, r2
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7ff f9c4 	bl	800a93c <ld_dword>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b5ba:	61fb      	str	r3, [r7, #28]
					break;
 800b5bc:	e00e      	b.n	800b5dc <get_fat+0x240>
				}
			}
			val = 1;	/* Internal error */
 800b5be:	2301      	movs	r3, #1
 800b5c0:	61fb      	str	r3, [r7, #28]
			break;
 800b5c2:	e00b      	b.n	800b5dc <get_fat+0x240>
#endif
		default:
			val = 1;	/* Internal error */
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	61fb      	str	r3, [r7, #28]
 800b5c8:	e008      	b.n	800b5dc <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5ca:	bf00      	nop
 800b5cc:	e006      	b.n	800b5dc <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5ce:	bf00      	nop
 800b5d0:	e004      	b.n	800b5dc <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b5d2:	bf00      	nop
 800b5d4:	e002      	b.n	800b5dc <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b5d6:	bf00      	nop
 800b5d8:	e000      	b.n	800b5dc <get_fat+0x240>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b5da:	bf00      	nop
		}
	}

	return val;
 800b5dc:	69fb      	ldr	r3, [r7, #28]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3720      	adds	r7, #32
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop

0800b5e8 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b5e8:	b590      	push	{r4, r7, lr}
 800b5ea:	b089      	sub	sp, #36	@ 0x24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	f240 80dd 	bls.w	800b7ba <put_fat+0x1d2>
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	429a      	cmp	r2, r3
 800b608:	f080 80d7 	bcs.w	800b7ba <put_fat+0x1d2>
		switch (fs->fs_type) {
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	2b04      	cmp	r3, #4
 800b612:	f300 80d2 	bgt.w	800b7ba <put_fat+0x1d2>
 800b616:	2b03      	cmp	r3, #3
 800b618:	f280 8093 	bge.w	800b742 <put_fat+0x15a>
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d002      	beq.n	800b626 <put_fat+0x3e>
 800b620:	2b02      	cmp	r3, #2
 800b622:	d06e      	beq.n	800b702 <put_fat+0x11a>
 800b624:	e0c9      	b.n	800b7ba <put_fat+0x1d2>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	61bb      	str	r3, [r7, #24]
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	085b      	lsrs	r3, r3, #1
 800b62e:	69ba      	ldr	r2, [r7, #24]
 800b630:	4413      	add	r3, r2
 800b632:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	0a5b      	lsrs	r3, r3, #9
 800b63c:	4413      	add	r3, r2
 800b63e:	4619      	mov	r1, r3
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f7ff fdef 	bl	800b224 <move_window>
 800b646:	4603      	mov	r3, r0
 800b648:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b64a:	7ffb      	ldrb	r3, [r7, #31]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f040 80ad 	bne.w	800b7ac <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	1c59      	adds	r1, r3, #1
 800b65c:	61b9      	str	r1, [r7, #24]
 800b65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b662:	4413      	add	r3, r2
 800b664:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	f003 0301 	and.w	r3, r3, #1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00d      	beq.n	800b68c <put_fat+0xa4>
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	b25b      	sxtb	r3, r3
 800b676:	f003 030f 	and.w	r3, r3, #15
 800b67a:	b25a      	sxtb	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	b25b      	sxtb	r3, r3
 800b680:	011b      	lsls	r3, r3, #4
 800b682:	b25b      	sxtb	r3, r3
 800b684:	4313      	orrs	r3, r2
 800b686:	b25b      	sxtb	r3, r3
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	e001      	b.n	800b690 <put_fat+0xa8>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	697a      	ldr	r2, [r7, #20]
 800b692:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2201      	movs	r2, #1
 800b698:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	0a5b      	lsrs	r3, r3, #9
 800b6a2:	4413      	add	r3, r2
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f7ff fdbc 	bl	800b224 <move_window>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6b0:	7ffb      	ldrb	r3, [r7, #31]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d17c      	bne.n	800b7b0 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c2:	4413      	add	r3, r2
 800b6c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f003 0301 	and.w	r3, r3, #1
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <put_fat+0xf0>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	091b      	lsrs	r3, r3, #4
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	e00e      	b.n	800b6f6 <put_fat+0x10e>
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	b25b      	sxtb	r3, r3
 800b6de:	f023 030f 	bic.w	r3, r3, #15
 800b6e2:	b25a      	sxtb	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	0a1b      	lsrs	r3, r3, #8
 800b6e8:	b25b      	sxtb	r3, r3
 800b6ea:	f003 030f 	and.w	r3, r3, #15
 800b6ee:	b25b      	sxtb	r3, r3
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	b25b      	sxtb	r3, r3
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	711a      	strb	r2, [r3, #4]
			break;
 800b700:	e05b      	b.n	800b7ba <put_fat+0x1d2>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	0a1b      	lsrs	r3, r3, #8
 800b70a:	4413      	add	r3, r2
 800b70c:	4619      	mov	r1, r3
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7ff fd88 	bl	800b224 <move_window>
 800b714:	4603      	mov	r3, r0
 800b716:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b718:	7ffb      	ldrb	r3, [r7, #31]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d14a      	bne.n	800b7b4 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	005b      	lsls	r3, r3, #1
 800b728:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b72c:	4413      	add	r3, r2
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	b292      	uxth	r2, r2
 800b732:	4611      	mov	r1, r2
 800b734:	4618      	mov	r0, r3
 800b736:	f7ff f9ff 	bl	800ab38 <st_word>
			fs->wflag = 1;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2201      	movs	r2, #1
 800b73e:	711a      	strb	r2, [r3, #4]
			break;
 800b740:	e03b      	b.n	800b7ba <put_fat+0x1d2>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	09db      	lsrs	r3, r3, #7
 800b74a:	4413      	add	r3, r2
 800b74c:	4619      	mov	r1, r3
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f7ff fd68 	bl	800b224 <move_window>
 800b754:	4603      	mov	r3, r0
 800b756:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b758:	7ffb      	ldrb	r3, [r7, #31]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d12c      	bne.n	800b7b8 <put_fat+0x1d0>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	2b04      	cmp	r3, #4
 800b764:	d012      	beq.n	800b78c <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b77a:	4413      	add	r3, r2
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7ff f8dd 	bl	800a93c <ld_dword>
 800b782:	4603      	mov	r3, r0
 800b784:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b788:	4323      	orrs	r3, r4
 800b78a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b79a:	4413      	add	r3, r2
 800b79c:	6879      	ldr	r1, [r7, #4]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff f9e5 	bl	800ab6e <st_dword>
			fs->wflag = 1;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	711a      	strb	r2, [r3, #4]
			break;
 800b7aa:	e006      	b.n	800b7ba <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b7ac:	bf00      	nop
 800b7ae:	e004      	b.n	800b7ba <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b7b0:	bf00      	nop
 800b7b2:	e002      	b.n	800b7ba <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b7b4:	bf00      	nop
 800b7b6:	e000      	b.n	800b7ba <put_fat+0x1d2>
			if (res != FR_OK) break;
 800b7b8:	bf00      	nop
		}
	}
	return res;
 800b7ba:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3724      	adds	r7, #36	@ 0x24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd90      	pop	{r4, r7, pc}

0800b7c4 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b08a      	sub	sp, #40	@ 0x28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	3b02      	subs	r3, #2
 800b7d4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7da:	3b02      	subs	r3, #2
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d301      	bcc.n	800b7e6 <find_bitmap+0x22>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	61fb      	str	r3, [r7, #28]
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	61bb      	str	r3, [r7, #24]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	0b1b      	lsrs	r3, r3, #12
 800b7fa:	4413      	add	r3, r2
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f7ff fd10 	bl	800b224 <move_window>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d002      	beq.n	800b810 <find_bitmap+0x4c>
 800b80a:	f04f 33ff 	mov.w	r3, #4294967295
 800b80e:	e051      	b.n	800b8b4 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	08db      	lsrs	r3, r3, #3
 800b814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b818:	623b      	str	r3, [r7, #32]
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	f003 0307 	and.w	r3, r3, #7
 800b820:	2201      	movs	r2, #1
 800b822:	fa02 f303 	lsl.w	r3, r2, r3
 800b826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	4413      	add	r3, r2
 800b830:	334c      	adds	r3, #76	@ 0x4c
 800b832:	781a      	ldrb	r2, [r3, #0]
 800b834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b838:	4013      	ands	r3, r2
 800b83a:	74fb      	strb	r3, [r7, #19]
 800b83c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b840:	005b      	lsls	r3, r3, #1
 800b842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	3301      	adds	r3, #1
 800b84a:	61fb      	str	r3, [r7, #28]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b850:	3b02      	subs	r3, #2
 800b852:	69fa      	ldr	r2, [r7, #28]
 800b854:	429a      	cmp	r2, r3
 800b856:	d307      	bcc.n	800b868 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800b858:	2300      	movs	r3, #0
 800b85a:	61fb      	str	r3, [r7, #28]
 800b85c:	2300      	movs	r3, #0
 800b85e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b862:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b866:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 800b868:	7cfb      	ldrb	r3, [r7, #19]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d109      	bne.n	800b882 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	3301      	adds	r3, #1
 800b872:	617b      	str	r3, [r7, #20]
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d106      	bne.n	800b88a <find_bitmap+0xc6>
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	3302      	adds	r3, #2
 800b880:	e018      	b.n	800b8b4 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	61bb      	str	r3, [r7, #24]
 800b886:	2300      	movs	r3, #0
 800b888:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800b88a:	69fa      	ldr	r2, [r7, #28]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d101      	bne.n	800b896 <find_bitmap+0xd2>
 800b892:	2300      	movs	r3, #0
 800b894:	e00e      	b.n	800b8b4 <find_bitmap+0xf0>
			} while (bm != 0);
 800b896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1c5      	bne.n	800b82a <find_bitmap+0x66>
			bm = 1;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	623b      	str	r3, [r7, #32]
 800b8aa:	6a3b      	ldr	r3, [r7, #32]
 800b8ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8b0:	d3bb      	bcc.n	800b82a <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800b8b2:	e79e      	b.n	800b7f2 <find_bitmap+0x2e>
	}
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3728      	adds	r7, #40	@ 0x28
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
 800b8c8:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	3b02      	subs	r3, #2
 800b8ce:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	0b1b      	lsrs	r3, r3, #12
 800b8d8:	4413      	add	r3, r2
 800b8da:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	08db      	lsrs	r3, r3, #3
 800b8e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	f003 0307 	and.w	r3, r3, #7
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f2:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	1c5a      	adds	r2, r3, #1
 800b8f8:	617a      	str	r2, [r7, #20]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff fc91 	bl	800b224 <move_window>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <change_bitmap+0x50>
 800b908:	2301      	movs	r3, #1
 800b90a:	e03d      	b.n	800b988 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	4413      	add	r3, r2
 800b912:	334c      	adds	r3, #76	@ 0x4c
 800b914:	781a      	ldrb	r2, [r3, #0]
 800b916:	7ffb      	ldrb	r3, [r7, #31]
 800b918:	4013      	ands	r3, r2
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	bf14      	ite	ne
 800b920:	2301      	movne	r3, #1
 800b922:	2300      	moveq	r3, #0
 800b924:	b2db      	uxtb	r3, r3
 800b926:	461a      	mov	r2, r3
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d101      	bne.n	800b932 <change_bitmap+0x76>
 800b92e:	2302      	movs	r3, #2
 800b930:	e02a      	b.n	800b988 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	4413      	add	r3, r2
 800b938:	334c      	adds	r3, #76	@ 0x4c
 800b93a:	781a      	ldrb	r2, [r3, #0]
 800b93c:	7ffb      	ldrb	r3, [r7, #31]
 800b93e:	4053      	eors	r3, r2
 800b940:	b2d9      	uxtb	r1, r3
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	4413      	add	r3, r2
 800b948:	334c      	adds	r3, #76	@ 0x4c
 800b94a:	460a      	mov	r2, r1
 800b94c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2201      	movs	r2, #1
 800b952:	711a      	strb	r2, [r3, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	3b01      	subs	r3, #1
 800b958:	607b      	str	r3, [r7, #4]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <change_bitmap+0xa8>
 800b960:	2300      	movs	r3, #0
 800b962:	e011      	b.n	800b988 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800b964:	7ffb      	ldrb	r3, [r7, #31]
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	77fb      	strb	r3, [r7, #31]
 800b96a:	7ffb      	ldrb	r3, [r7, #31]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1cd      	bne.n	800b90c <change_bitmap+0x50>
			bm = 1;
 800b970:	2301      	movs	r3, #1
 800b972:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	3301      	adds	r3, #1
 800b978:	61bb      	str	r3, [r7, #24]
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b980:	d3c4      	bcc.n	800b90c <change_bitmap+0x50>
		i = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b986:	e7b5      	b.n	800b8f4 <change_bitmap+0x38>
	}
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3720      	adds	r7, #32
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	79db      	ldrb	r3, [r3, #7]
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d121      	bne.n	800b9e4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	617b      	str	r3, [r7, #20]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	699b      	ldr	r3, [r3, #24]
 800b9aa:	613b      	str	r3, [r7, #16]
 800b9ac:	e014      	b.n	800b9d8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6818      	ldr	r0, [r3, #0]
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6979      	ldr	r1, [r7, #20]
 800b9ba:	f7ff fe15 	bl	800b5e8 <put_fat>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <fill_first_frag+0x3c>
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ca:	e00c      	b.n	800b9e6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	617b      	str	r3, [r7, #20]
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	613b      	str	r3, [r7, #16]
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1e7      	bne.n	800b9ae <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3718      	adds	r7, #24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b086      	sub	sp, #24
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	60f8      	str	r0, [r7, #12]
 800b9f6:	60b9      	str	r1, [r7, #8]
 800b9f8:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800b9fa:	e020      	b.n	800ba3e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6818      	ldr	r0, [r3, #0]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	69db      	ldr	r3, [r3, #28]
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	1c59      	adds	r1, r3, #1
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d905      	bls.n	800ba1e <fill_last_frag+0x30>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	69db      	ldr	r3, [r3, #28]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	3302      	adds	r3, #2
 800ba1c:	e000      	b.n	800ba20 <fill_last_frag+0x32>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	461a      	mov	r2, r3
 800ba22:	f7ff fde1 	bl	800b5e8 <put_fat>
 800ba26:	4603      	mov	r3, r0
 800ba28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <fill_last_frag+0x46>
 800ba30:	7dfb      	ldrb	r3, [r7, #23]
 800ba32:	e009      	b.n	800ba48 <fill_last_frag+0x5a>
		obj->n_frag--;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	69db      	ldr	r3, [r3, #28]
 800ba38:	1e5a      	subs	r2, r3, #1
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1da      	bne.n	800b9fc <fill_last_frag+0xe>
	}
	return FR_OK;
 800ba46:	2300      	movs	r3, #0
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08a      	sub	sp, #40	@ 0x28
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d904      	bls.n	800ba7e <remove_chain+0x2e>
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d301      	bcc.n	800ba82 <remove_chain+0x32>
 800ba7e:	2302      	movs	r3, #2
 800ba80:	e0c4      	b.n	800bc0c <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d014      	beq.n	800bab2 <remove_chain+0x62>
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	2b04      	cmp	r3, #4
 800ba8e:	d103      	bne.n	800ba98 <remove_chain+0x48>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	79db      	ldrb	r3, [r3, #7]
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d00c      	beq.n	800bab2 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ba98:	f04f 32ff 	mov.w	r2, #4294967295
 800ba9c:	6879      	ldr	r1, [r7, #4]
 800ba9e:	69b8      	ldr	r0, [r7, #24]
 800baa0:	f7ff fda2 	bl	800b5e8 <put_fat>
 800baa4:	4603      	mov	r3, r0
 800baa6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800baa8:	7ffb      	ldrb	r3, [r7, #31]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <remove_chain+0x62>
 800baae:	7ffb      	ldrb	r3, [r7, #31]
 800bab0:	e0ac      	b.n	800bc0c <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bab2:	68b9      	ldr	r1, [r7, #8]
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff fc71 	bl	800b39c <get_fat>
 800baba:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d055      	beq.n	800bb6e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d101      	bne.n	800bacc <remove_chain+0x7c>
 800bac8:	2302      	movs	r3, #2
 800baca:	e09f      	b.n	800bc0c <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad2:	d101      	bne.n	800bad8 <remove_chain+0x88>
 800bad4:	2301      	movs	r3, #1
 800bad6:	e099      	b.n	800bc0c <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	2b04      	cmp	r3, #4
 800bade:	d00b      	beq.n	800baf8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bae0:	2200      	movs	r2, #0
 800bae2:	68b9      	ldr	r1, [r7, #8]
 800bae4:	69b8      	ldr	r0, [r7, #24]
 800bae6:	f7ff fd7f 	bl	800b5e8 <put_fat>
 800baea:	4603      	mov	r3, r0
 800baec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800baee:	7ffb      	ldrb	r3, [r7, #31]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <remove_chain+0xa8>
 800baf4:	7ffb      	ldrb	r3, [r7, #31]
 800baf6:	e089      	b.n	800bc0c <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	699a      	ldr	r2, [r3, #24]
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb00:	3b02      	subs	r3, #2
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d20b      	bcs.n	800bb1e <remove_chain+0xce>
			fs->free_clst++;
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	1c5a      	adds	r2, r3, #1
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	795b      	ldrb	r3, [r3, #5]
 800bb14:	f043 0301 	orr.w	r3, r3, #1
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	715a      	strb	r2, [r3, #5]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800bb1e:	6a3b      	ldr	r3, [r7, #32]
 800bb20:	3301      	adds	r3, #1
 800bb22:	697a      	ldr	r2, [r7, #20]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d102      	bne.n	800bb2e <remove_chain+0xde>
			ecl = nxt;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	623b      	str	r3, [r7, #32]
 800bb2c:	e017      	b.n	800bb5e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	2b04      	cmp	r3, #4
 800bb34:	d10f      	bne.n	800bb56 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800bb36:	6a3a      	ldr	r2, [r7, #32]
 800bb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	2300      	movs	r3, #0
 800bb40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb42:	69b8      	ldr	r0, [r7, #24]
 800bb44:	f7ff feba 	bl	800b8bc <change_bitmap>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800bb4c:	7ffb      	ldrb	r3, [r7, #31]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d001      	beq.n	800bb56 <remove_chain+0x106>
 800bb52:	7ffb      	ldrb	r3, [r7, #31]
 800bb54:	e05a      	b.n	800bc0c <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	623b      	str	r3, [r7, #32]
 800bb5a:	6a3b      	ldr	r3, [r7, #32]
 800bb5c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d3a2      	bcc.n	800bab2 <remove_chain+0x62>
 800bb6c:	e000      	b.n	800bb70 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800bb6e:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b04      	cmp	r3, #4
 800bb76:	d148      	bne.n	800bc0a <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d103      	bne.n	800bb86 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	71da      	strb	r2, [r3, #7]
 800bb84:	e041      	b.n	800bc0a <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	79db      	ldrb	r3, [r3, #7]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d129      	bne.n	800bbe2 <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800bb94:	e017      	b.n	800bbc6 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 800bb96:	68b9      	ldr	r1, [r7, #8]
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7ff fbff 	bl	800b39c <get_fat>
 800bb9e:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d801      	bhi.n	800bbaa <remove_chain+0x15a>
 800bba6:	2302      	movs	r3, #2
 800bba8:	e030      	b.n	800bc0c <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb0:	d101      	bne.n	800bbb6 <remove_chain+0x166>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e02a      	b.n	800bc0c <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d107      	bne.n	800bbd0 <remove_chain+0x180>
					clst++;
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d1e3      	bne.n	800bb96 <remove_chain+0x146>
 800bbce:	e000      	b.n	800bbd2 <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800bbd0:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d117      	bne.n	800bc0a <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2202      	movs	r2, #2
 800bbde:	71da      	strb	r2, [r3, #7]
 800bbe0:	e013      	b.n	800bc0a <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	79db      	ldrb	r3, [r3, #7]
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d10f      	bne.n	800bc0a <remove_chain+0x1ba>
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d30a      	bcc.n	800bc0a <remove_chain+0x1ba>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	689a      	ldr	r2, [r3, #8]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	699b      	ldr	r3, [r3, #24]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d802      	bhi.n	800bc0a <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2202      	movs	r2, #2
 800bc08:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3728      	adds	r7, #40	@ 0x28
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10d      	bne.n	800bc46 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d004      	beq.n	800bc40 <create_chain+0x2c>
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3a:	69ba      	ldr	r2, [r7, #24]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d31b      	bcc.n	800bc78 <create_chain+0x64>
 800bc40:	2301      	movs	r3, #1
 800bc42:	61bb      	str	r3, [r7, #24]
 800bc44:	e018      	b.n	800bc78 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7ff fba7 	bl	800b39c <get_fat>
 800bc4e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d801      	bhi.n	800bc5a <create_chain+0x46>
 800bc56:	2301      	movs	r3, #1
 800bc58:	e113      	b.n	800be82 <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc60:	d101      	bne.n	800bc66 <create_chain+0x52>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	e10d      	b.n	800be82 <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d201      	bcs.n	800bc74 <create_chain+0x60>
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	e106      	b.n	800be82 <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	699b      	ldr	r3, [r3, #24]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d101      	bne.n	800bc84 <create_chain+0x70>
 800bc80:	2300      	movs	r3, #0
 800bc82:	e0fe      	b.n	800be82 <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	2b04      	cmp	r3, #4
 800bc8a:	d165      	bne.n	800bd58 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	69b9      	ldr	r1, [r7, #24]
 800bc90:	6938      	ldr	r0, [r7, #16]
 800bc92:	f7ff fd97 	bl	800b7c4 <find_bitmap>
 800bc96:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d003      	beq.n	800bca6 <create_chain+0x92>
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca4:	d101      	bne.n	800bcaa <create_chain+0x96>
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	e0eb      	b.n	800be82 <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800bcaa:	2301      	movs	r3, #1
 800bcac:	2201      	movs	r2, #1
 800bcae:	69f9      	ldr	r1, [r7, #28]
 800bcb0:	6938      	ldr	r0, [r7, #16]
 800bcb2:	f7ff fe03 	bl	800b8bc <change_bitmap>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d101      	bne.n	800bcc4 <create_chain+0xb0>
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e0de      	b.n	800be82 <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d102      	bne.n	800bcd0 <create_chain+0xbc>
 800bcca:	f04f 33ff 	mov.w	r3, #4294967295
 800bcce:	e0d8      	b.n	800be82 <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d103      	bne.n	800bcde <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2202      	movs	r2, #2
 800bcda:	71da      	strb	r2, [r3, #7]
 800bcdc:	e011      	b.n	800bd02 <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	79db      	ldrb	r3, [r3, #7]
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d10d      	bne.n	800bd02 <create_chain+0xee>
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	3301      	adds	r3, #1
 800bcea:	69fa      	ldr	r2, [r7, #28]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d008      	beq.n	800bd02 <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	69ba      	ldr	r2, [r7, #24]
 800bcf6:	1ad2      	subs	r2, r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2203      	movs	r2, #3
 800bd00:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	79db      	ldrb	r3, [r3, #7]
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	f000 8098 	beq.w	800be3c <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	69fa      	ldr	r2, [r7, #28]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d10b      	bne.n	800bd2e <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d003      	beq.n	800bd26 <create_chain+0x112>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	69db      	ldr	r3, [r3, #28]
 800bd22:	3301      	adds	r3, #1
 800bd24:	e000      	b.n	800bd28 <create_chain+0x114>
 800bd26:	2302      	movs	r3, #2
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	61d3      	str	r3, [r2, #28]
 800bd2c:	e086      	b.n	800be3c <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	69db      	ldr	r3, [r3, #28]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d102      	bne.n	800bd3c <create_chain+0x128>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800bd3c:	69fa      	ldr	r2, [r7, #28]
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7ff fe54 	bl	800b9ee <fill_last_frag>
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d175      	bne.n	800be3c <create_chain+0x228>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	61da      	str	r2, [r3, #28]
 800bd56:	e071      	b.n	800be3c <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800bd5c:	69ba      	ldr	r2, [r7, #24]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d129      	bne.n	800bdb8 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	3301      	adds	r3, #1
 800bd68:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd6e:	69fa      	ldr	r2, [r7, #28]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d301      	bcc.n	800bd78 <create_chain+0x164>
 800bd74:	2302      	movs	r3, #2
 800bd76:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800bd78:	69f9      	ldr	r1, [r7, #28]
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7ff fb0e 	bl	800b39c <get_fat>
 800bd80:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d003      	beq.n	800bd90 <create_chain+0x17c>
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8e:	d101      	bne.n	800bd94 <create_chain+0x180>
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	e076      	b.n	800be82 <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00e      	beq.n	800bdb8 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d906      	bls.n	800bdb4 <create_chain+0x1a0>
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d201      	bcs.n	800bdb4 <create_chain+0x1a0>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d129      	bne.n	800be12 <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdcc:	69fa      	ldr	r2, [r7, #28]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d307      	bcc.n	800bde2 <create_chain+0x1ce>
					ncl = 2;
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d901      	bls.n	800bde2 <create_chain+0x1ce>
 800bdde:	2300      	movs	r3, #0
 800bde0:	e04f      	b.n	800be82 <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bde2:	69f9      	ldr	r1, [r7, #28]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f7ff fad9 	bl	800b39c <get_fat>
 800bdea:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00e      	beq.n	800be10 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d003      	beq.n	800be00 <create_chain+0x1ec>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfe:	d101      	bne.n	800be04 <create_chain+0x1f0>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	e03e      	b.n	800be82 <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800be04:	69fa      	ldr	r2, [r7, #28]
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d1da      	bne.n	800bdc2 <create_chain+0x1ae>
 800be0c:	2300      	movs	r3, #0
 800be0e:	e038      	b.n	800be82 <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
 800be10:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800be12:	f04f 32ff 	mov.w	r2, #4294967295
 800be16:	69f9      	ldr	r1, [r7, #28]
 800be18:	6938      	ldr	r0, [r7, #16]
 800be1a:	f7ff fbe5 	bl	800b5e8 <put_fat>
 800be1e:	4603      	mov	r3, r0
 800be20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800be22:	7dfb      	ldrb	r3, [r7, #23]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d109      	bne.n	800be3c <create_chain+0x228>
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d006      	beq.n	800be3c <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800be2e:	69fa      	ldr	r2, [r7, #28]
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	6938      	ldr	r0, [r7, #16]
 800be34:	f7ff fbd8 	bl	800b5e8 <put_fat>
 800be38:	4603      	mov	r3, r0
 800be3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d116      	bne.n	800be70 <create_chain+0x25c>
		fs->last_clst = ncl;
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	69fa      	ldr	r2, [r7, #28]
 800be46:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	699a      	ldr	r2, [r3, #24]
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be50:	3b02      	subs	r3, #2
 800be52:	429a      	cmp	r2, r3
 800be54:	d804      	bhi.n	800be60 <create_chain+0x24c>
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	699b      	ldr	r3, [r3, #24]
 800be5a:	1e5a      	subs	r2, r3, #1
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	795b      	ldrb	r3, [r3, #5]
 800be64:	f043 0301 	orr.w	r3, r3, #1
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	715a      	strb	r2, [r3, #5]
 800be6e:	e007      	b.n	800be80 <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800be70:	7dfb      	ldrb	r3, [r7, #23]
 800be72:	2b01      	cmp	r3, #1
 800be74:	d102      	bne.n	800be7c <create_chain+0x268>
 800be76:	f04f 33ff 	mov.w	r3, #4294967295
 800be7a:	e000      	b.n	800be7e <create_chain+0x26a>
 800be7c:	2301      	movs	r3, #1
 800be7e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800be80:	69fb      	ldr	r3, [r7, #28]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3720      	adds	r7, #32
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <clmt_clust>:

static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800be8a:	b5b0      	push	{r4, r5, r7, lr}
 800be8c:	b088      	sub	sp, #32
 800be8e:	af00      	add	r7, sp, #0
 800be90:	60f8      	str	r0, [r7, #12]
 800be92:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl;
	DWORD *tbl;
	FATFS *fs = fp->obj.fs;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bea0:	3304      	adds	r3, #4
 800bea2:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bea8:	f04f 0000 	mov.w	r0, #0
 800beac:	f04f 0100 	mov.w	r1, #0
 800beb0:	0a50      	lsrs	r0, r2, #9
 800beb2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800beb6:	0a59      	lsrs	r1, r3, #9
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	895b      	ldrh	r3, [r3, #10]
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	2200      	movs	r2, #0
 800bec0:	461c      	mov	r4, r3
 800bec2:	4615      	mov	r5, r2
 800bec4:	4622      	mov	r2, r4
 800bec6:	462b      	mov	r3, r5
 800bec8:	f7f4 fa72 	bl	80003b0 <__aeabi_uldivmod>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	4613      	mov	r3, r2
 800bed2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	1d1a      	adds	r2, r3, #4
 800bed8:	61ba      	str	r2, [r7, #24]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <clmt_clust+0x5e>
 800bee4:	2300      	movs	r3, #0
 800bee6:	e010      	b.n	800bf0a <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800bee8:	69fa      	ldr	r2, [r7, #28]
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	429a      	cmp	r2, r3
 800beee:	d307      	bcc.n	800bf00 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800bef0:	69fa      	ldr	r2, [r7, #28]
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	61fb      	str	r3, [r7, #28]
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	3304      	adds	r3, #4
 800befc:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800befe:	e7e9      	b.n	800bed4 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800bf00:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	4413      	add	r3, r2
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3720      	adds	r7, #32
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bdb0      	pop	{r4, r5, r7, pc}

0800bf12 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b086      	sub	sp, #24
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7ff f945 	bl	800b1ac <sync_window>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <dir_clear+0x1a>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e036      	b.n	800bf9a <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff fa14 	bl	800b35c <clst2sect>
 800bf34:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	649a      	str	r2, [r3, #72]	@ 0x48
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	334c      	adds	r3, #76	@ 0x4c
 800bf40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf44:	2100      	movs	r1, #0
 800bf46:	4618      	mov	r0, r3
 800bf48:	f016 f829 	bl	8021f9e <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	334c      	adds	r3, #76	@ 0x4c
 800bf50:	60fb      	str	r3, [r7, #12]
 800bf52:	2301      	movs	r3, #1
 800bf54:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800bf56:	2300      	movs	r3, #0
 800bf58:	617b      	str	r3, [r7, #20]
 800bf5a:	e003      	b.n	800bf64 <dir_clear+0x52>
 800bf5c:	697a      	ldr	r2, [r7, #20]
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	4413      	add	r3, r2
 800bf62:	617b      	str	r3, [r7, #20]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	895b      	ldrh	r3, [r3, #10]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d20b      	bcs.n	800bf88 <dir_clear+0x76>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	7858      	ldrb	r0, [r3, #1]
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	441a      	add	r2, r3
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	68f9      	ldr	r1, [r7, #12]
 800bf7e:	f7fe fc7d 	bl	800a87c <disk_write>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0e9      	beq.n	800bf5c <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	895b      	ldrh	r3, [r3, #10]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	4293      	cmp	r3, r2
 800bf92:	bf14      	ite	ne
 800bf94:	2301      	movne	r3, #1
 800bf96:	2300      	moveq	r3, #0
 800bf98:	b2db      	uxtb	r3, r3
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3718      	adds	r7, #24
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b086      	sub	sp, #24
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
 800bfaa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b04      	cmp	r3, #4
 800bfb8:	d102      	bne.n	800bfc0 <dir_sdi+0x1e>
 800bfba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfbe:	e001      	b.n	800bfc4 <dir_sdi+0x22>
 800bfc0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d904      	bls.n	800bfd4 <dir_sdi+0x32>
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	f003 031f 	and.w	r3, r3, #31
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d001      	beq.n	800bfd8 <dir_sdi+0x36>
		return FR_INT_ERR;
 800bfd4:	2302      	movs	r3, #2
 800bfd6:	e066      	b.n	800c0a6 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d109      	bne.n	800bffe <dir_sdi+0x5c>
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d905      	bls.n	800bffe <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bff6:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10c      	bne.n	800c01e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	095b      	lsrs	r3, r3, #5
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	8912      	ldrh	r2, [r2, #8]
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d301      	bcc.n	800c014 <dir_sdi+0x72>
 800c010:	2302      	movs	r3, #2
 800c012:	e048      	b.n	800c0a6 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	639a      	str	r2, [r3, #56]	@ 0x38
 800c01c:	e029      	b.n	800c072 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	895b      	ldrh	r3, [r3, #10]
 800c022:	025b      	lsls	r3, r3, #9
 800c024:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c026:	e019      	b.n	800c05c <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6979      	ldr	r1, [r7, #20]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff f9b5 	bl	800b39c <get_fat>
 800c032:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03a:	d101      	bne.n	800c040 <dir_sdi+0x9e>
 800c03c:	2301      	movs	r3, #1
 800c03e:	e032      	b.n	800c0a6 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d904      	bls.n	800c050 <dir_sdi+0xae>
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c04a:	697a      	ldr	r2, [r7, #20]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d301      	bcc.n	800c054 <dir_sdi+0xb2>
 800c050:	2302      	movs	r3, #2
 800c052:	e028      	b.n	800c0a6 <dir_sdi+0x104>
			ofs -= csz;
 800c054:	683a      	ldr	r2, [r7, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	1ad3      	subs	r3, r2, r3
 800c05a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	429a      	cmp	r2, r3
 800c062:	d2e1      	bcs.n	800c028 <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
 800c064:	6979      	ldr	r1, [r7, #20]
 800c066:	6938      	ldr	r0, [r7, #16]
 800c068:	f7ff f978 	bl	800b35c <clst2sect>
 800c06c:	4602      	mov	r2, r0
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	697a      	ldr	r2, [r7, #20]
 800c076:	635a      	str	r2, [r3, #52]	@ 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d101      	bne.n	800c084 <dir_sdi+0xe2>
 800c080:	2302      	movs	r3, #2
 800c082:	e010      	b.n	800c0a6 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	0a5b      	lsrs	r3, r3, #9
 800c08c:	441a      	add	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c09e:	441a      	add	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b086      	sub	sp, #24
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c2:	3320      	adds	r3, #32
 800c0c4:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	2b04      	cmp	r3, #4
 800c0cc:	d102      	bne.n	800c0d4 <dir_next+0x26>
 800c0ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0d2:	e001      	b.n	800c0d8 <dir_next+0x2a>
 800c0d4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d802      	bhi.n	800c0e4 <dir_next+0x36>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	639a      	str	r2, [r3, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <dir_next+0x42>
 800c0ec:	2304      	movs	r3, #4
 800c0ee:	e07f      	b.n	800c1f0 <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d16d      	bne.n	800c1d6 <dir_next+0x128>
		dp->sect++;				/* Next sector */
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0fe:	1c5a      	adds	r2, r3, #1
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	639a      	str	r2, [r3, #56]	@ 0x38

		if (dp->clust == 0) {	/* Static table */
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10a      	bne.n	800c122 <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	095b      	lsrs	r3, r3, #5
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	8912      	ldrh	r2, [r2, #8]
 800c114:	4293      	cmp	r3, r2
 800c116:	d35e      	bcc.n	800c1d6 <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	639a      	str	r2, [r3, #56]	@ 0x38
 800c11e:	2304      	movs	r3, #4
 800c120:	e066      	b.n	800c1f0 <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	0a5b      	lsrs	r3, r3, #9
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	8952      	ldrh	r2, [r2, #10]
 800c12a:	3a01      	subs	r2, #1
 800c12c:	4013      	ands	r3, r2
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d151      	bne.n	800c1d6 <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c138:	4619      	mov	r1, r3
 800c13a:	4610      	mov	r0, r2
 800c13c:	f7ff f92e 	bl	800b39c <get_fat>
 800c140:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d801      	bhi.n	800c14c <dir_next+0x9e>
 800c148:	2302      	movs	r3, #2
 800c14a:	e051      	b.n	800c1f0 <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c152:	d101      	bne.n	800c158 <dir_next+0xaa>
 800c154:	2301      	movs	r3, #1
 800c156:	e04b      	b.n	800c1f0 <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c15c:	697a      	ldr	r2, [r7, #20]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d32f      	bcc.n	800c1c2 <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d104      	bne.n	800c172 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	639a      	str	r2, [r3, #56]	@ 0x38
 800c16e:	2304      	movs	r3, #4
 800c170:	e03e      	b.n	800c1f0 <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c178:	4619      	mov	r1, r3
 800c17a:	4610      	mov	r0, r2
 800c17c:	f7ff fd4a 	bl	800bc14 <create_chain>
 800c180:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d101      	bne.n	800c18c <dir_next+0xde>
 800c188:	2307      	movs	r3, #7
 800c18a:	e031      	b.n	800c1f0 <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d101      	bne.n	800c196 <dir_next+0xe8>
 800c192:	2302      	movs	r3, #2
 800c194:	e02c      	b.n	800c1f0 <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19c:	d101      	bne.n	800c1a2 <dir_next+0xf4>
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e026      	b.n	800c1f0 <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800c1a2:	6979      	ldr	r1, [r7, #20]
 800c1a4:	6938      	ldr	r0, [r7, #16]
 800c1a6:	f7ff feb4 	bl	800bf12 <dir_clear>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d001      	beq.n	800c1b4 <dir_next+0x106>
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e01d      	b.n	800c1f0 <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	79db      	ldrb	r3, [r3, #7]
 800c1b8:	f043 0304 	orr.w	r3, r3, #4
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	697a      	ldr	r2, [r7, #20]
 800c1c6:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 800c1c8:	6979      	ldr	r1, [r7, #20]
 800c1ca:	6938      	ldr	r0, [r7, #16]
 800c1cc:	f7ff f8c6 	bl	800b35c <clst2sect>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1e8:	441a      	add	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c208:	2100      	movs	r1, #0
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f7ff fec9 	bl	800bfa2 <dir_sdi>
 800c210:	4603      	mov	r3, r0
 800c212:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c214:	7dfb      	ldrb	r3, [r7, #23]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d140      	bne.n	800c29c <dir_alloc+0xa4>
		n = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c222:	4619      	mov	r1, r3
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f7fe fffd 	bl	800b224 <move_window>
 800c22a:	4603      	mov	r3, r0
 800c22c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d132      	bne.n	800c29a <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	2b04      	cmp	r3, #4
 800c23a:	d108      	bne.n	800c24e <dir_alloc+0x56>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	b25b      	sxtb	r3, r3
 800c244:	43db      	mvns	r3, r3
 800c246:	b2db      	uxtb	r3, r3
 800c248:	09db      	lsrs	r3, r3, #7
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	e00f      	b.n	800c26e <dir_alloc+0x76>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2be5      	cmp	r3, #229	@ 0xe5
 800c256:	d004      	beq.n	800c262 <dir_alloc+0x6a>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <dir_alloc+0x6e>
 800c262:	2301      	movs	r3, #1
 800c264:	e000      	b.n	800c268 <dir_alloc+0x70>
 800c266:	2300      	movs	r3, #0
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d007      	beq.n	800c282 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	3301      	adds	r3, #1
 800c276:	613b      	str	r3, [r7, #16]
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d102      	bne.n	800c286 <dir_alloc+0x8e>
 800c280:	e00c      	b.n	800c29c <dir_alloc+0xa4>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800c282:	2300      	movs	r3, #0
 800c284:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800c286:	2101      	movs	r1, #1
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7ff ff10 	bl	800c0ae <dir_next>
 800c28e:	4603      	mov	r3, r0
 800c290:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c292:	7dfb      	ldrb	r3, [r7, #23]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d0c2      	beq.n	800c21e <dir_alloc+0x26>
 800c298:	e000      	b.n	800c29c <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800c29a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c29c:	7dfb      	ldrb	r3, [r7, #23]
 800c29e:	2b04      	cmp	r3, #4
 800c2a0:	d101      	bne.n	800c2a6 <dir_alloc+0xae>
 800c2a2:	2307      	movs	r3, #7
 800c2a4:	75fb      	strb	r3, [r7, #23]
	return res;
 800c2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3718      	adds	r7, #24
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	331a      	adds	r3, #26
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fe fb23 	bl	800a90a <ld_word>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	2b03      	cmp	r3, #3
 800c2ce:	d109      	bne.n	800c2e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	3314      	adds	r3, #20
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7fe fb18 	bl	800a90a <ld_word>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	041b      	lsls	r3, r3, #16
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b084      	sub	sp, #16
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	60f8      	str	r0, [r7, #12]
 800c2f6:	60b9      	str	r1, [r7, #8]
 800c2f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	331a      	adds	r3, #26
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	b292      	uxth	r2, r2
 800c302:	4611      	mov	r1, r2
 800c304:	4618      	mov	r0, r3
 800c306:	f7fe fc17 	bl	800ab38 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	2b03      	cmp	r3, #3
 800c310:	d109      	bne.n	800c326 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	f103 0214 	add.w	r2, r3, #20
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	0c1b      	lsrs	r3, r3, #16
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	4619      	mov	r1, r3
 800c320:	4610      	mov	r0, r2
 800c322:	f7fe fc09 	bl	800ab38 <st_word>
	}
}
 800c326:	bf00      	nop
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
	...

0800c330 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c330:	b590      	push	{r4, r7, lr}
 800c332:	b087      	sub	sp, #28
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	331a      	adds	r3, #26
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fe fae3 	bl	800a90a <ld_word>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d001      	beq.n	800c34e <cmp_lfn+0x1e>
 800c34a:	2300      	movs	r3, #0
 800c34c:	e058      	b.n	800c400 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c356:	1e5a      	subs	r2, r3, #1
 800c358:	4613      	mov	r3, r2
 800c35a:	005b      	lsls	r3, r3, #1
 800c35c:	4413      	add	r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c364:	2301      	movs	r3, #1
 800c366:	81fb      	strh	r3, [r7, #14]
 800c368:	2300      	movs	r3, #0
 800c36a:	613b      	str	r3, [r7, #16]
 800c36c:	e032      	b.n	800c3d4 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c36e:	4a26      	ldr	r2, [pc, #152]	@ (800c408 <cmp_lfn+0xd8>)
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	4413      	add	r3, r2
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	461a      	mov	r2, r3
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	4413      	add	r3, r2
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7fe fac4 	bl	800a90a <ld_word>
 800c382:	4603      	mov	r3, r0
 800c384:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800c386:	89fb      	ldrh	r3, [r7, #14]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d019      	beq.n	800c3c0 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	2bff      	cmp	r3, #255	@ 0xff
 800c390:	d811      	bhi.n	800c3b6 <cmp_lfn+0x86>
 800c392:	89bb      	ldrh	r3, [r7, #12]
 800c394:	4618      	mov	r0, r3
 800c396:	f003 ffd1 	bl	801033c <ff_wtoupper>
 800c39a:	4604      	mov	r4, r0
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	617a      	str	r2, [r7, #20]
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	881b      	ldrh	r3, [r3, #0]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f003 ffc6 	bl	801033c <ff_wtoupper>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	429c      	cmp	r4, r3
 800c3b4:	d001      	beq.n	800c3ba <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	e022      	b.n	800c400 <cmp_lfn+0xd0>
			}
			wc = uc;
 800c3ba:	89bb      	ldrh	r3, [r7, #12]
 800c3bc:	81fb      	strh	r3, [r7, #14]
 800c3be:	e006      	b.n	800c3ce <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c3c0:	89bb      	ldrh	r3, [r7, #12]
 800c3c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d001      	beq.n	800c3ce <cmp_lfn+0x9e>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e018      	b.n	800c400 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	613b      	str	r3, [r7, #16]
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2b0c      	cmp	r3, #12
 800c3d8:	d9c9      	bls.n	800c36e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00b      	beq.n	800c3fe <cmp_lfn+0xce>
 800c3e6:	89fb      	ldrh	r3, [r7, #14]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d008      	beq.n	800c3fe <cmp_lfn+0xce>
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	005b      	lsls	r3, r3, #1
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	881b      	ldrh	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d001      	beq.n	800c3fe <cmp_lfn+0xce>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	e000      	b.n	800c400 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 800c3fe:	2301      	movs	r3, #1
}
 800c400:	4618      	mov	r0, r3
 800c402:	371c      	adds	r7, #28
 800c404:	46bd      	mov	sp, r7
 800c406:	bd90      	pop	{r4, r7, pc}
 800c408:	08025e6c 	.word	0x08025e6c

0800c40c <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	331a      	adds	r3, #26
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fe fa75 	bl	800a90a <ld_word>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d001      	beq.n	800c42a <pick_lfn+0x1e>
 800c426:	2300      	movs	r3, #0
 800c428:	e050      	b.n	800c4cc <pick_lfn+0xc0>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c432:	1e5a      	subs	r2, r3, #1
 800c434:	4613      	mov	r3, r2
 800c436:	005b      	lsls	r3, r3, #1
 800c438:	4413      	add	r3, r2
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4413      	add	r3, r2
 800c43e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c440:	2301      	movs	r3, #1
 800c442:	81fb      	strh	r3, [r7, #14]
 800c444:	2300      	movs	r3, #0
 800c446:	613b      	str	r3, [r7, #16]
 800c448:	e028      	b.n	800c49c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c44a:	4a22      	ldr	r2, [pc, #136]	@ (800c4d4 <pick_lfn+0xc8>)
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	4413      	add	r3, r2
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	461a      	mov	r2, r3
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	4413      	add	r3, r2
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fe fa56 	bl	800a90a <ld_word>
 800c45e:	4603      	mov	r3, r0
 800c460:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800c462:	89fb      	ldrh	r3, [r7, #14]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00f      	beq.n	800c488 <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2bff      	cmp	r3, #255	@ 0xff
 800c46c:	d901      	bls.n	800c472 <pick_lfn+0x66>
 800c46e:	2300      	movs	r3, #0
 800c470:	e02c      	b.n	800c4cc <pick_lfn+0xc0>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c472:	89bb      	ldrh	r3, [r7, #12]
 800c474:	81fb      	strh	r3, [r7, #14]
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	1c5a      	adds	r2, r3, #1
 800c47a:	617a      	str	r2, [r7, #20]
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	4413      	add	r3, r2
 800c482:	89fa      	ldrh	r2, [r7, #14]
 800c484:	801a      	strh	r2, [r3, #0]
 800c486:	e006      	b.n	800c496 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c488:	89bb      	ldrh	r3, [r7, #12]
 800c48a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c48e:	4293      	cmp	r3, r2
 800c490:	d001      	beq.n	800c496 <pick_lfn+0x8a>
 800c492:	2300      	movs	r3, #0
 800c494:	e01a      	b.n	800c4cc <pick_lfn+0xc0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	3301      	adds	r3, #1
 800c49a:	613b      	str	r3, [r7, #16]
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	2b0c      	cmp	r3, #12
 800c4a0:	d9d3      	bls.n	800c44a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00d      	beq.n	800c4ca <pick_lfn+0xbe>
 800c4ae:	89fb      	ldrh	r3, [r7, #14]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00a      	beq.n	800c4ca <pick_lfn+0xbe>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	2bff      	cmp	r3, #255	@ 0xff
 800c4b8:	d901      	bls.n	800c4be <pick_lfn+0xb2>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e006      	b.n	800c4cc <pick_lfn+0xc0>
		lfnbuf[i] = 0;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	005b      	lsls	r3, r3, #1
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c4ca:	2301      	movs	r3, #1
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	08025e6c 	.word	0x08025e6c

0800c4d8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b088      	sub	sp, #32
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	4611      	mov	r1, r2
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	71fb      	strb	r3, [r7, #7]
 800c4ea:	4613      	mov	r3, r2
 800c4ec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	330d      	adds	r3, #13
 800c4f2:	79ba      	ldrb	r2, [r7, #6]
 800c4f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	330b      	adds	r3, #11
 800c4fa:	220f      	movs	r2, #15
 800c4fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	330c      	adds	r3, #12
 800c502:	2200      	movs	r2, #0
 800c504:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	331a      	adds	r3, #26
 800c50a:	2100      	movs	r1, #0
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fe fb13 	bl	800ab38 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	1e5a      	subs	r2, r3, #1
 800c516:	4613      	mov	r3, r2
 800c518:	005b      	lsls	r3, r3, #1
 800c51a:	4413      	add	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	82fb      	strh	r3, [r7, #22]
 800c526:	2300      	movs	r3, #0
 800c528:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c52a:	8afb      	ldrh	r3, [r7, #22]
 800c52c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c530:	4293      	cmp	r3, r2
 800c532:	d007      	beq.n	800c544 <put_lfn+0x6c>
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	1c5a      	adds	r2, r3, #1
 800c538:	61fa      	str	r2, [r7, #28]
 800c53a:	005b      	lsls	r3, r3, #1
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	4413      	add	r3, r2
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c544:	4a17      	ldr	r2, [pc, #92]	@ (800c5a4 <put_lfn+0xcc>)
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	4413      	add	r3, r2
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	461a      	mov	r2, r3
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	4413      	add	r3, r2
 800c552:	8afa      	ldrh	r2, [r7, #22]
 800c554:	4611      	mov	r1, r2
 800c556:	4618      	mov	r0, r3
 800c558:	f7fe faee 	bl	800ab38 <st_word>
		if (wc == 0) wc = 0xFFFF;			/* Padding characters for following items */
 800c55c:	8afb      	ldrh	r3, [r7, #22]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d102      	bne.n	800c568 <put_lfn+0x90>
 800c562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c566:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	3301      	adds	r3, #1
 800c56c:	61bb      	str	r3, [r7, #24]
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b0c      	cmp	r3, #12
 800c572:	d9da      	bls.n	800c52a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c574:	8afb      	ldrh	r3, [r7, #22]
 800c576:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d006      	beq.n	800c58c <put_lfn+0xb4>
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	005b      	lsls	r3, r3, #1
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	4413      	add	r3, r2
 800c586:	881b      	ldrh	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d103      	bne.n	800c594 <put_lfn+0xbc>
 800c58c:	79fb      	ldrb	r3, [r7, #7]
 800c58e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c592:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	79fa      	ldrb	r2, [r7, #7]
 800c598:	701a      	strb	r2, [r3, #0]
}
 800c59a:	bf00      	nop
 800c59c:	3720      	adds	r7, #32
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	08025e6c 	.word	0x08025e6c

0800c5a8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08c      	sub	sp, #48	@ 0x30
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	607a      	str	r2, [r7, #4]
 800c5b4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800c5b6:	220b      	movs	r2, #11
 800c5b8:	68b9      	ldr	r1, [r7, #8]
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f015 fd99 	bl	80220f2 <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2b05      	cmp	r3, #5
 800c5c4:	d929      	bls.n	800c61a <gen_numname+0x72>
		sreg = seq;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 800c5ca:	e020      	b.n	800c60e <gen_numname+0x66>
			wc = *lfn++;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	1c9a      	adds	r2, r3, #2
 800c5d0:	607a      	str	r2, [r7, #4]
 800c5d2:	881b      	ldrh	r3, [r3, #0]
 800c5d4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5da:	e015      	b.n	800c608 <gen_numname+0x60>
				sreg = (sreg << 1) + (wc & 1);
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	005a      	lsls	r2, r3, #1
 800c5e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	4413      	add	r3, r2
 800c5e8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c5ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5ec:	085b      	lsrs	r3, r3, #1
 800c5ee:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d003      	beq.n	800c602 <gen_numname+0x5a>
 800c5fa:	69fa      	ldr	r2, [r7, #28]
 800c5fc:	4b3c      	ldr	r3, [pc, #240]	@ (800c6f0 <gen_numname+0x148>)
 800c5fe:	4053      	eors	r3, r2
 800c600:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c604:	3301      	adds	r3, #1
 800c606:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60a:	2b0f      	cmp	r3, #15
 800c60c:	d9e6      	bls.n	800c5dc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1da      	bne.n	800c5cc <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexadecimal) */
	i = 7;
 800c61a:	2307      	movs	r3, #7
 800c61c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	b2db      	uxtb	r3, r3
 800c622:	f003 030f 	and.w	r3, r3, #15
 800c626:	b2db      	uxtb	r3, r3
 800c628:	3330      	adds	r3, #48	@ 0x30
 800c62a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	091b      	lsrs	r3, r3, #4
 800c632:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 800c634:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c638:	2b39      	cmp	r3, #57	@ 0x39
 800c63a:	d904      	bls.n	800c646 <gen_numname+0x9e>
 800c63c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c640:	3307      	adds	r3, #7
 800c642:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c648:	1e5a      	subs	r2, r3, #1
 800c64a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c64c:	3330      	adds	r3, #48	@ 0x30
 800c64e:	443b      	add	r3, r7
 800c650:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c654:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 800c658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d002      	beq.n	800c664 <gen_numname+0xbc>
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1dc      	bne.n	800c61e <gen_numname+0x76>
	ns[i] = '~';
 800c664:	f107 0214 	add.w	r2, r7, #20
 800c668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c66a:	4413      	add	r3, r2
 800c66c:	227e      	movs	r2, #126	@ 0x7e
 800c66e:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800c670:	2300      	movs	r3, #0
 800c672:	627b      	str	r3, [r7, #36]	@ 0x24
 800c674:	e014      	b.n	800c6a0 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67a:	4413      	add	r3, r2
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fe fb29 	bl	800acd6 <dbc_1st>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d007      	beq.n	800c69a <gen_numname+0xf2>
			if (j == i - 1) break;
 800c68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c68c:	3b01      	subs	r3, #1
 800c68e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c690:	429a      	cmp	r2, r3
 800c692:	d010      	beq.n	800c6b6 <gen_numname+0x10e>
			j++;
 800c694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c696:	3301      	adds	r3, #1
 800c698:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69c:	3301      	adds	r3, #1
 800c69e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d207      	bcs.n	800c6b8 <gen_numname+0x110>
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ac:	4413      	add	r3, r2
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	2b20      	cmp	r3, #32
 800c6b2:	d1e0      	bne.n	800c676 <gen_numname+0xce>
 800c6b4:	e000      	b.n	800c6b8 <gen_numname+0x110>
			if (j == i - 1) break;
 800c6b6:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ba:	2b07      	cmp	r3, #7
 800c6bc:	d807      	bhi.n	800c6ce <gen_numname+0x126>
 800c6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c0:	1c5a      	adds	r2, r3, #1
 800c6c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c6c4:	3330      	adds	r3, #48	@ 0x30
 800c6c6:	443b      	add	r3, r7
 800c6c8:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c6cc:	e000      	b.n	800c6d0 <gen_numname+0x128>
 800c6ce:	2120      	movs	r1, #32
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	4413      	add	r3, r2
 800c6da:	460a      	mov	r2, r1
 800c6dc:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e0:	2b07      	cmp	r3, #7
 800c6e2:	d9e9      	bls.n	800c6b8 <gen_numname+0x110>
}
 800c6e4:	bf00      	nop
 800c6e6:	bf00      	nop
 800c6e8:	3730      	adds	r7, #48	@ 0x30
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	00011021 	.word	0x00011021

0800c6f4 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c700:	230b      	movs	r3, #11
 800c702:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c704:	7bfb      	ldrb	r3, [r7, #15]
 800c706:	b2da      	uxtb	r2, r3
 800c708:	0852      	lsrs	r2, r2, #1
 800c70a:	01db      	lsls	r3, r3, #7
 800c70c:	4313      	orrs	r3, r2
 800c70e:	b2da      	uxtb	r2, r3
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	1c59      	adds	r1, r3, #1
 800c714:	6079      	str	r1, [r7, #4]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	4413      	add	r3, r2
 800c71a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	3b01      	subs	r3, #1
 800c720:	60bb      	str	r3, [r7, #8]
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1ed      	bne.n	800c704 <sum_sfn+0x10>
	return sum;
 800c728:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800c736:	b480      	push	{r7}
 800c738:	b087      	sub	sp, #28
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3301      	adds	r3, #1
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	3301      	adds	r3, #1
 800c746:	015b      	lsls	r3, r3, #5
 800c748:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800c74a:	2300      	movs	r3, #0
 800c74c:	827b      	strh	r3, [r7, #18]
 800c74e:	2300      	movs	r3, #0
 800c750:	617b      	str	r3, [r7, #20]
 800c752:	e015      	b.n	800c780 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	2b02      	cmp	r3, #2
 800c758:	d103      	bne.n	800c762 <xdir_sum+0x2c>
			i++;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	3301      	adds	r3, #1
 800c75e:	617b      	str	r3, [r7, #20]
 800c760:	e00b      	b.n	800c77a <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800c762:	8a7b      	ldrh	r3, [r7, #18]
 800c764:	b29a      	uxth	r2, r3
 800c766:	0852      	lsrs	r2, r2, #1
 800c768:	03db      	lsls	r3, r3, #15
 800c76a:	4313      	orrs	r3, r2
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	6879      	ldr	r1, [r7, #4]
 800c770:	697a      	ldr	r2, [r7, #20]
 800c772:	440a      	add	r2, r1
 800c774:	7812      	ldrb	r2, [r2, #0]
 800c776:	4413      	add	r3, r2
 800c778:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	3301      	adds	r3, #1
 800c77e:	617b      	str	r3, [r7, #20]
 800c780:	697a      	ldr	r2, [r7, #20]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	429a      	cmp	r2, r3
 800c786:	d3e5      	bcc.n	800c754 <xdir_sum+0x1e>
		}
	}
	return sum;
 800c788:	8a7b      	ldrh	r3, [r7, #18]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	371c      	adds	r7, #28
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800c7a2:	e01b      	b.n	800c7dc <xname_sum+0x46>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 800c7a4:	89bb      	ldrh	r3, [r7, #12]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f003 fdc8 	bl	801033c <ff_wtoupper>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800c7b0:	89fb      	ldrh	r3, [r7, #14]
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	0852      	lsrs	r2, r2, #1
 800c7b6:	03db      	lsls	r3, r3, #15
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	89bb      	ldrh	r3, [r7, #12]
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	4413      	add	r3, r2
 800c7c4:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800c7c6:	89fb      	ldrh	r3, [r7, #14]
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	0852      	lsrs	r2, r2, #1
 800c7cc:	03db      	lsls	r3, r3, #15
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	89bb      	ldrh	r3, [r7, #12]
 800c7d4:	0a1b      	lsrs	r3, r3, #8
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	4413      	add	r3, r2
 800c7da:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	1c9a      	adds	r2, r3, #2
 800c7e0:	607a      	str	r2, [r7, #4]
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	81bb      	strh	r3, [r7, #12]
 800c7e6:	89bb      	ldrh	r3, [r7, #12]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1db      	bne.n	800c7a4 <xname_sum+0xe>
	}
	return sum;
 800c7ec:	89fb      	ldrh	r3, [r7, #14]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
	...

0800c7f8 <load_xdir>:
/*------------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading directory object pointing top of the entry block to load */
)
{
 800c7f8:	b590      	push	{r4, r7, lr}
 800c7fa:	b087      	sub	sp, #28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	60fb      	str	r3, [r7, #12]


	/* Load file directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c810:	4619      	mov	r1, r3
 800c812:	4610      	mov	r0, r2
 800c814:	f7fe fd06 	bl	800b224 <move_window>
 800c818:	4603      	mov	r3, r0
 800c81a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c81c:	7dfb      	ldrb	r3, [r7, #23]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <load_xdir+0x2e>
 800c822:	7dfb      	ldrb	r3, [r7, #23]
 800c824:	e0a9      	b.n	800c97a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2b85      	cmp	r3, #133	@ 0x85
 800c82e:	d001      	beq.n	800c834 <load_xdir+0x3c>
 800c830:	2302      	movs	r3, #2
 800c832:	e0a2      	b.n	800c97a <load_xdir+0x182>
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c838:	2220      	movs	r2, #32
 800c83a:	4619      	mov	r1, r3
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f015 fc58 	bl	80220f2 <memcpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	3301      	adds	r3, #1
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	3301      	adds	r3, #1
 800c84a:	015b      	lsls	r3, r3, #5
 800c84c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2b5f      	cmp	r3, #95	@ 0x5f
 800c852:	d903      	bls.n	800c85c <load_xdir+0x64>
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800c85a:	d901      	bls.n	800c860 <load_xdir+0x68>
 800c85c:	2302      	movs	r3, #2
 800c85e:	e08c      	b.n	800c97a <load_xdir+0x182>

	/* Load stream extension entry */
	res = dir_next(dp, 0);
 800c860:	2100      	movs	r1, #0
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7ff fc23 	bl	800c0ae <dir_next>
 800c868:	4603      	mov	r3, r0
 800c86a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800c86c:	7dfb      	ldrb	r3, [r7, #23]
 800c86e:	2b04      	cmp	r3, #4
 800c870:	d101      	bne.n	800c876 <load_xdir+0x7e>
 800c872:	2302      	movs	r3, #2
 800c874:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c876:	7dfb      	ldrb	r3, [r7, #23]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d001      	beq.n	800c880 <load_xdir+0x88>
 800c87c:	7dfb      	ldrb	r3, [r7, #23]
 800c87e:	e07c      	b.n	800c97a <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c888:	4619      	mov	r1, r3
 800c88a:	4610      	mov	r0, r2
 800c88c:	f7fe fcca 	bl	800b224 <move_window>
 800c890:	4603      	mov	r3, r0
 800c892:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c894:	7dfb      	ldrb	r3, [r7, #23]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d001      	beq.n	800c89e <load_xdir+0xa6>
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
 800c89c:	e06d      	b.n	800c97a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2bc0      	cmp	r3, #192	@ 0xc0
 800c8a6:	d001      	beq.n	800c8ac <load_xdir+0xb4>
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	e066      	b.n	800c97a <load_xdir+0x182>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f103 0020 	add.w	r0, r3, #32
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8b6:	2220      	movs	r2, #32
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	f015 fc1a 	bl	80220f2 <memcpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3323      	adds	r3, #35	@ 0x23
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	332c      	adds	r3, #44	@ 0x2c
 800c8c6:	4a2f      	ldr	r2, [pc, #188]	@ (800c984 <load_xdir+0x18c>)
 800c8c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c8cc:	08db      	lsrs	r3, r3, #3
 800c8ce:	015b      	lsls	r3, r3, #5
 800c8d0:	68ba      	ldr	r2, [r7, #8]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d201      	bcs.n	800c8da <load_xdir+0xe2>
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	e04f      	b.n	800c97a <load_xdir+0x182>

	/* Load file name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 800c8da:	2340      	movs	r3, #64	@ 0x40
 800c8dc:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 800c8de:	2100      	movs	r1, #0
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f7ff fbe4 	bl	800c0ae <dir_next>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
 800c8ec:	2b04      	cmp	r3, #4
 800c8ee:	d101      	bne.n	800c8f4 <load_xdir+0xfc>
 800c8f0:	2302      	movs	r3, #2
 800c8f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800c8f4:	7dfb      	ldrb	r3, [r7, #23]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d001      	beq.n	800c8fe <load_xdir+0x106>
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
 800c8fc:	e03d      	b.n	800c97a <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c906:	4619      	mov	r1, r3
 800c908:	4610      	mov	r0, r2
 800c90a:	f7fe fc8b 	bl	800b224 <move_window>
 800c90e:	4603      	mov	r3, r0
 800c910:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800c912:	7dfb      	ldrb	r3, [r7, #23]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d001      	beq.n	800c91c <load_xdir+0x124>
 800c918:	7dfb      	ldrb	r3, [r7, #23]
 800c91a:	e02e      	b.n	800c97a <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	2bc1      	cmp	r3, #193	@ 0xc1
 800c924:	d001      	beq.n	800c92a <load_xdir+0x132>
 800c926:	2302      	movs	r3, #2
 800c928:	e027      	b.n	800c97a <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800c930:	d208      	bcs.n	800c944 <load_xdir+0x14c>
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	18d0      	adds	r0, r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c93c:	2220      	movs	r2, #32
 800c93e:	4619      	mov	r1, r3
 800c940:	f015 fbd7 	bl	80220f2 <memcpy>
	} while ((i += SZDIRE) < sz_ent);
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	3320      	adds	r3, #32
 800c948:	613b      	str	r3, [r7, #16]
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d3c5      	bcc.n	800c8de <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800c958:	d80e      	bhi.n	800c978 <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	f7ff feeb 	bl	800c736 <xdir_sum>
 800c960:	4603      	mov	r3, r0
 800c962:	461c      	mov	r4, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	3302      	adds	r3, #2
 800c968:	4618      	mov	r0, r3
 800c96a:	f7fd ffce 	bl	800a90a <ld_word>
 800c96e:	4603      	mov	r3, r0
 800c970:	429c      	cmp	r4, r3
 800c972:	d001      	beq.n	800c978 <load_xdir+0x180>
 800c974:	2302      	movs	r3, #2
 800c976:	e000      	b.n	800c97a <load_xdir+0x182>
	}
	return FR_OK;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	371c      	adds	r7, #28
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd90      	pop	{r4, r7, pc}
 800c982:	bf00      	nop
 800c984:	88888889 	.word	0x88888889

0800c988 <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	691b      	ldr	r3, [r3, #16]
 800c996:	3334      	adds	r3, #52	@ 0x34
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fd ffcf 	bl	800a93c <ld_dword>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	3338      	adds	r3, #56	@ 0x38
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fd ffe9 	bl	800a982 <ld_qword>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	6839      	ldr	r1, [r7, #0]
 800c9b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	691b      	ldr	r3, [r3, #16]
 800c9be:	3321      	adds	r3, #33	@ 0x21
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	f003 0302 	and.w	r3, r3, #2
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	61da      	str	r2, [r3, #28]
}
 800c9d2:	bf00      	nop
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing directory */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 800c9da:	b5b0      	push	{r4, r5, r7, lr}
 800c9dc:	b084      	sub	sp, #16
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
 800c9e2:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	6808      	ldr	r0, [r1, #0]
 800c9e8:	6879      	ldr	r1, [r7, #4]
 800c9ea:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800c9ec:	6839      	ldr	r1, [r7, #0]
 800c9ee:	6a08      	ldr	r0, [r1, #32]
 800c9f0:	6879      	ldr	r1, [r7, #4]
 800c9f2:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800c9f8:	b2c8      	uxtb	r0, r1
 800c9fa:	6879      	ldr	r1, [r7, #4]
 800c9fc:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800c9fe:	6839      	ldr	r1, [r7, #0]
 800ca00:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800ca02:	2000      	movs	r0, #0
 800ca04:	460c      	mov	r4, r1
 800ca06:	4605      	mov	r5, r0
 800ca08:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	6879      	ldr	r1, [r7, #4]
 800ca10:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->obj.n_frag = 0;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca26:	4619      	mov	r1, r3
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f7ff faba 	bl	800bfa2 <dir_sdi>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ca32:	7bfb      	ldrb	r3, [r7, #15]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d104      	bne.n	800ca42 <load_obj_xdir+0x68>
		res = load_xdir(dp);		/* Load the object's entry block */
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7ff fedd 	bl	800c7f8 <load_xdir>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bdb0      	pop	{r4, r5, r7, pc}

0800ca4c <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the directory object */
)
{
 800ca4c:	b590      	push	{r4, r7, lr}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the directory entry block 85+C0+C1s */
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	1c9c      	adds	r4, r3, #2
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f7ff fe68 	bl	800c736 <xdir_sum>
 800ca66:	4603      	mov	r3, r0
 800ca68:	4619      	mov	r1, r3
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f7fe f864 	bl	800ab38 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	3301      	adds	r3, #1
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	3301      	adds	r3, #1
 800ca78:	613b      	str	r3, [r7, #16]

	/* Store the directory entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca7e:	4619      	mov	r1, r3
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff fa8e 	bl	800bfa2 <dir_sdi>
 800ca86:	4603      	mov	r3, r0
 800ca88:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ca8a:	e026      	b.n	800cada <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca94:	4619      	mov	r1, r3
 800ca96:	4610      	mov	r0, r2
 800ca98:	f7fe fbc4 	bl	800b224 <move_window>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800caa0:	7dfb      	ldrb	r3, [r7, #23]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d11d      	bne.n	800cae2 <store_xdir+0x96>
		memcpy(dp->dir, dirb, SZDIRE);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caaa:	2220      	movs	r2, #32
 800caac:	68f9      	ldr	r1, [r7, #12]
 800caae:	4618      	mov	r0, r3
 800cab0:	f015 fb1f 	bl	80220f2 <memcpy>
		dp->obj.fs->wflag = 1;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2201      	movs	r2, #1
 800caba:	711a      	strb	r2, [r3, #4]
		if (--nent == 0) break;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	3b01      	subs	r3, #1
 800cac0:	613b      	str	r3, [r7, #16]
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00e      	beq.n	800cae6 <store_xdir+0x9a>
		dirb += SZDIRE;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	3320      	adds	r3, #32
 800cacc:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800cace:	2100      	movs	r1, #0
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7ff faec 	bl	800c0ae <dir_next>
 800cad6:	4603      	mov	r3, r0
 800cad8:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800cada:	7dfb      	ldrb	r3, [r7, #23]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d0d5      	beq.n	800ca8c <store_xdir+0x40>
 800cae0:	e002      	b.n	800cae8 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800cae2:	bf00      	nop
 800cae4:	e000      	b.n	800cae8 <store_xdir+0x9c>
		if (--nent == 0) break;
 800cae6:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800cae8:	7dfb      	ldrb	r3, [r7, #23]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d002      	beq.n	800caf4 <store_xdir+0xa8>
 800caee:	7dfb      	ldrb	r3, [r7, #23]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d101      	bne.n	800caf8 <store_xdir+0xac>
 800caf4:	7dfb      	ldrb	r3, [r7, #23]
 800caf6:	e000      	b.n	800cafa <store_xdir+0xae>
 800caf8:	2302      	movs	r3, #2
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	371c      	adds	r7, #28
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd90      	pop	{r4, r7, pc}

0800cb02 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the directory entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 800cb02:	b590      	push	{r4, r7, lr}
 800cb04:	b085      	sub	sp, #20
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	memset(dirb, 0, 2 * SZDIRE);
 800cb0c:	2240      	movs	r2, #64	@ 0x40
 800cb0e:	2100      	movs	r1, #0
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f015 fa44 	bl	8021f9e <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2285      	movs	r2, #133	@ 0x85
 800cb1a:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	3320      	adds	r3, #32
 800cb20:	22c0      	movs	r2, #192	@ 0xc0
 800cb22:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
 800cb24:	2340      	movs	r3, #64	@ 0x40
 800cb26:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	72fb      	strb	r3, [r7, #11]
 800cb2c:	7afb      	ldrb	r3, [r7, #11]
 800cb2e:	72bb      	strb	r3, [r7, #10]
 800cb30:	2301      	movs	r3, #1
 800cb32:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	60fa      	str	r2, [r7, #12]
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	22c1      	movs	r2, #193	@ 0xc1
 800cb40:	701a      	strb	r2, [r3, #0]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	1c5a      	adds	r2, r3, #1
 800cb46:	60fa      	str	r2, [r7, #12]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800cb50:	893b      	ldrh	r3, [r7, #8]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00b      	beq.n	800cb6e <create_xdir+0x6c>
 800cb56:	7abb      	ldrb	r3, [r7, #10]
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	881b      	ldrh	r3, [r3, #0]
 800cb60:	813b      	strh	r3, [r7, #8]
 800cb62:	893b      	ldrh	r3, [r7, #8]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d002      	beq.n	800cb6e <create_xdir+0x6c>
 800cb68:	7abb      	ldrb	r3, [r7, #10]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 	/* Store it */
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	4413      	add	r3, r2
 800cb74:	893a      	ldrh	r2, [r7, #8]
 800cb76:	4611      	mov	r1, r2
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fd ffdd 	bl	800ab38 <st_word>
			i += 2;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3302      	adds	r3, #2
 800cb82:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f003 031f 	and.w	r3, r3, #31
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1e0      	bne.n	800cb50 <create_xdir+0x4e>
		nc1++;
 800cb8e:	7afb      	ldrb	r3, [r7, #11]
 800cb90:	3301      	adds	r3, #1
 800cb92:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 800cb94:	7abb      	ldrb	r3, [r7, #10]
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	683a      	ldr	r2, [r7, #0]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	881b      	ldrh	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1c8      	bne.n	800cb34 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	3323      	adds	r3, #35	@ 0x23
 800cba6:	7aba      	ldrb	r2, [r7, #10]
 800cba8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	3301      	adds	r3, #1
 800cbae:	7afa      	ldrb	r2, [r7, #11]
 800cbb0:	3201      	adds	r2, #1
 800cbb2:	b2d2      	uxtb	r2, r2
 800cbb4:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800cbbc:	6838      	ldr	r0, [r7, #0]
 800cbbe:	f7ff fdea 	bl	800c796 <xname_sum>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f7fd ffb6 	bl	800ab38 <st_word>
}
 800cbcc:	bf00      	nop
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd90      	pop	{r4, r7, pc}

0800cbd4 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b086      	sub	sp, #24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cbde:	2304      	movs	r3, #4
 800cbe0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 800cbe8:	23ff      	movs	r3, #255	@ 0xff
 800cbea:	757b      	strb	r3, [r7, #21]
 800cbec:	23ff      	movs	r3, #255	@ 0xff
 800cbee:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800cbf0:	e0a6      	b.n	800cd40 <dir_read+0x16c>
		res = move_window(fs, dp->sect);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6938      	ldr	r0, [r7, #16]
 800cbfa:	f7fe fb13 	bl	800b224 <move_window>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc02:	7dfb      	ldrb	r3, [r7, #23]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	f040 80a1 	bne.w	800cd4c <dir_read+0x178>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 800cc12:	7dbb      	ldrb	r3, [r7, #22]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d102      	bne.n	800cc1e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cc18:	2304      	movs	r3, #4
 800cc1a:	75fb      	strb	r3, [r7, #23]
 800cc1c:	e09d      	b.n	800cd5a <dir_read+0x186>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	2b04      	cmp	r3, #4
 800cc24:	d11f      	bne.n	800cc66 <dir_read+0x92>
			if (FF_USE_LABEL && vol) {
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d003      	beq.n	800cc34 <dir_read+0x60>
				if (b == ET_VLABEL) break;	/* Volume label entry? */
 800cc2c:	7dbb      	ldrb	r3, [r7, #22]
 800cc2e:	2b83      	cmp	r3, #131	@ 0x83
 800cc30:	d17d      	bne.n	800cd2e <dir_read+0x15a>
 800cc32:	e092      	b.n	800cd5a <dir_read+0x186>
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 800cc34:	7dbb      	ldrb	r3, [r7, #22]
 800cc36:	2b85      	cmp	r3, #133	@ 0x85
 800cc38:	d179      	bne.n	800cd2e <dir_read+0x15a>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7ff fdd8 	bl	800c7f8 <load_xdir>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800cc4c:	7dfb      	ldrb	r3, [r7, #23]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d17e      	bne.n	800cd50 <dir_read+0x17c>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	691b      	ldr	r3, [r3, #16]
 800cc56:	3304      	adds	r3, #4
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	719a      	strb	r2, [r3, #6]
					}
					break;
 800cc64:	e074      	b.n	800cd50 <dir_read+0x17c>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc6a:	330b      	adds	r3, #11
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc72:	73fb      	strb	r3, [r7, #15]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	7bfa      	ldrb	r2, [r7, #15]
 800cc78:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cc7a:	7dbb      	ldrb	r3, [r7, #22]
 800cc7c:	2be5      	cmp	r3, #229	@ 0xe5
 800cc7e:	d00e      	beq.n	800cc9e <dir_read+0xca>
 800cc80:	7dbb      	ldrb	r3, [r7, #22]
 800cc82:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc84:	d00b      	beq.n	800cc9e <dir_read+0xca>
 800cc86:	7bfb      	ldrb	r3, [r7, #15]
 800cc88:	f023 0320 	bic.w	r3, r3, #32
 800cc8c:	2b08      	cmp	r3, #8
 800cc8e:	bf0c      	ite	eq
 800cc90:	2301      	moveq	r3, #1
 800cc92:	2300      	movne	r3, #0
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	461a      	mov	r2, r3
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d002      	beq.n	800cca4 <dir_read+0xd0>
				ord = 0xFF;
 800cc9e:	23ff      	movs	r3, #255	@ 0xff
 800cca0:	757b      	strb	r3, [r7, #21]
 800cca2:	e044      	b.n	800cd2e <dir_read+0x15a>
			} else {
				if (attr == AM_LFN) {	/* An LFN entry is found */
 800cca4:	7bfb      	ldrb	r3, [r7, #15]
 800cca6:	2b0f      	cmp	r3, #15
 800cca8:	d12f      	bne.n	800cd0a <dir_read+0x136>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 800ccaa:	7dbb      	ldrb	r3, [r7, #22]
 800ccac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00d      	beq.n	800ccd0 <dir_read+0xfc>
						sum = dp->dir[LDIR_Chksum];
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccb8:	7b5b      	ldrb	r3, [r3, #13]
 800ccba:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 800ccbc:	7dbb      	ldrb	r3, [r7, #22]
 800ccbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccc2:	75bb      	strb	r3, [r7, #22]
 800ccc4:	7dbb      	ldrb	r3, [r7, #22]
 800ccc6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ccd0:	7dba      	ldrb	r2, [r7, #22]
 800ccd2:	7d7b      	ldrb	r3, [r7, #21]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d115      	bne.n	800cd04 <dir_read+0x130>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccdc:	330d      	adds	r3, #13
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	7d3a      	ldrb	r2, [r7, #20]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d10e      	bne.n	800cd04 <dir_read+0x130>
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	68da      	ldr	r2, [r3, #12]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccee:	4619      	mov	r1, r3
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	f7ff fb8b 	bl	800c40c <pick_lfn>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d003      	beq.n	800cd04 <dir_read+0x130>
 800ccfc:	7d7b      	ldrb	r3, [r7, #21]
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	e000      	b.n	800cd06 <dir_read+0x132>
 800cd04:	23ff      	movs	r3, #255	@ 0xff
 800cd06:	757b      	strb	r3, [r7, #21]
 800cd08:	e011      	b.n	800cd2e <dir_read+0x15a>
				} else {				/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cd0a:	7d7b      	ldrb	r3, [r7, #21]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d109      	bne.n	800cd24 <dir_read+0x150>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff fced 	bl	800c6f4 <sum_sfn>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	7d3b      	ldrb	r3, [r7, #20]
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d017      	beq.n	800cd54 <dir_read+0x180>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800cd2c:	e012      	b.n	800cd54 <dir_read+0x180>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cd2e:	2100      	movs	r1, #0
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7ff f9bc 	bl	800c0ae <dir_next>
 800cd36:	4603      	mov	r3, r0
 800cd38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10b      	bne.n	800cd58 <dir_read+0x184>
	while (dp->sect) {
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f47f af54 	bne.w	800cbf2 <dir_read+0x1e>
 800cd4a:	e006      	b.n	800cd5a <dir_read+0x186>
		if (res != FR_OK) break;
 800cd4c:	bf00      	nop
 800cd4e:	e004      	b.n	800cd5a <dir_read+0x186>
					break;
 800cd50:	bf00      	nop
 800cd52:	e002      	b.n	800cd5a <dir_read+0x186>
					break;
 800cd54:	bf00      	nop
 800cd56:	e000      	b.n	800cd5a <dir_read+0x186>
		if (res != FR_OK) break;
 800cd58:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cd5a:	7dfb      	ldrb	r3, [r7, #23]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <dir_read+0x192>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800cd66:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3718      	adds	r7, #24
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800cd70:	b590      	push	{r4, r7, lr}
 800cd72:	b089      	sub	sp, #36	@ 0x24
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cd7e:	2100      	movs	r1, #0
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f7ff f90e 	bl	800bfa2 <dir_sdi>
 800cd86:	4603      	mov	r3, r0
 800cd88:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800cd8a:	7ffb      	ldrb	r3, [r7, #31]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d001      	beq.n	800cd94 <dir_find+0x24>
 800cd90:	7ffb      	ldrb	r3, [r7, #31]
 800cd92:	e112      	b.n	800cfba <dir_find+0x24a>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	2b04      	cmp	r3, #4
 800cd9a:	d164      	bne.n	800ce66 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff fcf8 	bl	800c796 <xname_sum>
 800cda6:	4603      	mov	r3, r0
 800cda8:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800cdaa:	e04f      	b.n	800ce4c <dir_find+0xdc>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	691b      	ldr	r3, [r3, #16]
 800cdb0:	3324      	adds	r3, #36	@ 0x24
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fd fda9 	bl	800a90a <ld_word>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	461a      	mov	r2, r3
 800cdbc:	893b      	ldrh	r3, [r7, #8]
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d143      	bne.n	800ce4a <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	691b      	ldr	r3, [r3, #16]
 800cdc6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800cdca:	76fb      	strb	r3, [r7, #27]
 800cdcc:	2340      	movs	r3, #64	@ 0x40
 800cdce:	617b      	str	r3, [r7, #20]
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	613b      	str	r3, [r7, #16]
 800cdd4:	e028      	b.n	800ce28 <dir_find+0xb8>
				if ((di % SZDIRE) == 0) di += 2;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	f003 031f 	and.w	r3, r3, #31
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d102      	bne.n	800cde6 <dir_find+0x76>
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	3302      	adds	r3, #2
 800cde4:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	691a      	ldr	r2, [r3, #16]
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	4413      	add	r3, r2
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7fd fd8b 	bl	800a90a <ld_word>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f003 faa0 	bl	801033c <ff_wtoupper>
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	68da      	ldr	r2, [r3, #12]
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	4413      	add	r3, r2
 800ce08:	881b      	ldrh	r3, [r3, #0]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f003 fa96 	bl	801033c <ff_wtoupper>
 800ce10:	4603      	mov	r3, r0
 800ce12:	429c      	cmp	r4, r3
 800ce14:	d10c      	bne.n	800ce30 <dir_find+0xc0>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ce16:	7efb      	ldrb	r3, [r7, #27]
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	76fb      	strb	r3, [r7, #27]
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	3302      	adds	r3, #2
 800ce20:	617b      	str	r3, [r7, #20]
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	3301      	adds	r3, #1
 800ce26:	613b      	str	r3, [r7, #16]
 800ce28:	7efb      	ldrb	r3, [r7, #27]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1d3      	bne.n	800cdd6 <dir_find+0x66>
 800ce2e:	e000      	b.n	800ce32 <dir_find+0xc2>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ce30:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ce32:	7efb      	ldrb	r3, [r7, #27]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d109      	bne.n	800ce4c <dir_find+0xdc>
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	68da      	ldr	r2, [r3, #12]
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	005b      	lsls	r3, r3, #1
 800ce40:	4413      	add	r3, r2
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00b      	beq.n	800ce60 <dir_find+0xf0>
 800ce48:	e000      	b.n	800ce4c <dir_find+0xdc>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800ce4a:	bf00      	nop
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f7ff fec0 	bl	800cbd4 <dir_read>
 800ce54:	4603      	mov	r3, r0
 800ce56:	77fb      	strb	r3, [r7, #31]
 800ce58:	7ffb      	ldrb	r3, [r7, #31]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d0a6      	beq.n	800cdac <dir_find+0x3c>
 800ce5e:	e000      	b.n	800ce62 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ce60:	bf00      	nop
		}
		return res;
 800ce62:	7ffb      	ldrb	r3, [r7, #31]
 800ce64:	e0a9      	b.n	800cfba <dir_find+0x24a>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce66:	23ff      	movs	r3, #255	@ 0xff
 800ce68:	773b      	strb	r3, [r7, #28]
 800ce6a:	7f3b      	ldrb	r3, [r7, #28]
 800ce6c:	777b      	strb	r3, [r7, #29]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f04f 32ff 	mov.w	r2, #4294967295
 800ce74:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	f7fe f9d1 	bl	800b224 <move_window>
 800ce82:	4603      	mov	r3, r0
 800ce84:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800ce86:	7ffb      	ldrb	r3, [r7, #31]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	f040 8090 	bne.w	800cfae <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce96:	7fbb      	ldrb	r3, [r7, #30]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d102      	bne.n	800cea2 <dir_find+0x132>
 800ce9c:	2304      	movs	r3, #4
 800ce9e:	77fb      	strb	r3, [r7, #31]
 800cea0:	e08a      	b.n	800cfb8 <dir_find+0x248>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cea6:	330b      	adds	r3, #11
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ceae:	72fb      	strb	r3, [r7, #11]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	7afa      	ldrb	r2, [r7, #11]
 800ceb4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ceb6:	7fbb      	ldrb	r3, [r7, #30]
 800ceb8:	2be5      	cmp	r3, #229	@ 0xe5
 800ceba:	d007      	beq.n	800cecc <dir_find+0x15c>
 800cebc:	7afb      	ldrb	r3, [r7, #11]
 800cebe:	f003 0308 	and.w	r3, r3, #8
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d009      	beq.n	800ceda <dir_find+0x16a>
 800cec6:	7afb      	ldrb	r3, [r7, #11]
 800cec8:	2b0f      	cmp	r3, #15
 800ceca:	d006      	beq.n	800ceda <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cecc:	23ff      	movs	r3, #255	@ 0xff
 800cece:	777b      	strb	r3, [r7, #29]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f04f 32ff 	mov.w	r2, #4294967295
 800ced6:	64da      	str	r2, [r3, #76]	@ 0x4c
 800ced8:	e05e      	b.n	800cf98 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ceda:	7afb      	ldrb	r3, [r7, #11]
 800cedc:	2b0f      	cmp	r3, #15
 800cede:	d136      	bne.n	800cf4e <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800cee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d154      	bne.n	800cf98 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ceee:	7fbb      	ldrb	r3, [r7, #30]
 800cef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00d      	beq.n	800cf14 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cefc:	7b5b      	ldrb	r3, [r3, #13]
 800cefe:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cf00:	7fbb      	ldrb	r3, [r7, #30]
 800cf02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf06:	77bb      	strb	r3, [r7, #30]
 800cf08:	7fbb      	ldrb	r3, [r7, #30]
 800cf0a:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cf14:	7fba      	ldrb	r2, [r7, #30]
 800cf16:	7f7b      	ldrb	r3, [r7, #29]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d115      	bne.n	800cf48 <dir_find+0x1d8>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf20:	330d      	adds	r3, #13
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	7f3a      	ldrb	r2, [r7, #28]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d10e      	bne.n	800cf48 <dir_find+0x1d8>
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	68da      	ldr	r2, [r3, #12]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf32:	4619      	mov	r1, r3
 800cf34:	4610      	mov	r0, r2
 800cf36:	f7ff f9fb 	bl	800c330 <cmp_lfn>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <dir_find+0x1d8>
 800cf40:	7f7b      	ldrb	r3, [r7, #29]
 800cf42:	3b01      	subs	r3, #1
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	e000      	b.n	800cf4a <dir_find+0x1da>
 800cf48:	23ff      	movs	r3, #255	@ 0xff
 800cf4a:	777b      	strb	r3, [r7, #29]
 800cf4c:	e024      	b.n	800cf98 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cf4e:	7f7b      	ldrb	r3, [r7, #29]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d109      	bne.n	800cf68 <dir_find+0x1f8>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff fbcb 	bl	800c6f4 <sum_sfn>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	461a      	mov	r2, r3
 800cf62:	7f3b      	ldrb	r3, [r7, #28]
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d024      	beq.n	800cfb2 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800cf6e:	f003 0301 	and.w	r3, r3, #1
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10a      	bne.n	800cf8c <dir_find+0x21c>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	3340      	adds	r3, #64	@ 0x40
 800cf7e:	220b      	movs	r2, #11
 800cf80:	4619      	mov	r1, r3
 800cf82:	f014 ffe2 	bl	8021f4a <memcmp>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d014      	beq.n	800cfb6 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cf8c:	23ff      	movs	r3, #255	@ 0xff
 800cf8e:	777b      	strb	r3, [r7, #29]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f04f 32ff 	mov.w	r2, #4294967295
 800cf96:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cf98:	2100      	movs	r1, #0
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7ff f887 	bl	800c0ae <dir_next>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800cfa4:	7ffb      	ldrb	r3, [r7, #31]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f43f af65 	beq.w	800ce76 <dir_find+0x106>
 800cfac:	e004      	b.n	800cfb8 <dir_find+0x248>
		if (res != FR_OK) break;
 800cfae:	bf00      	nop
 800cfb0:	e002      	b.n	800cfb8 <dir_find+0x248>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cfb2:	bf00      	nop
 800cfb4:	e000      	b.n	800cfb8 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cfb6:	bf00      	nop

	return res;
 800cfb8:	7ffb      	ldrb	r3, [r7, #31]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3724      	adds	r7, #36	@ 0x24
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd90      	pop	{r4, r7, pc}
	...

0800cfc4 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800cfc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cfc8:	b0a0      	sub	sp, #128	@ 0x80
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800cfda:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d001      	beq.n	800cfe6 <dir_register+0x22>
 800cfe2:	2306      	movs	r3, #6
 800cfe4:	e194      	b.n	800d310 <dir_register+0x34c>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	677b      	str	r3, [r7, #116]	@ 0x74
 800cfea:	e002      	b.n	800cff2 <dir_register+0x2e>
 800cfec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cfee:	3301      	adds	r3, #1
 800cff0:	677b      	str	r3, [r7, #116]	@ 0x74
 800cff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cff4:	68da      	ldr	r2, [r3, #12]
 800cff6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	4413      	add	r3, r2
 800cffc:	881b      	ldrh	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1f4      	bne.n	800cfec <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	2b04      	cmp	r3, #4
 800d008:	f040 80a6 	bne.w	800d158 <dir_register+0x194>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d00c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d00e:	330e      	adds	r3, #14
 800d010:	4aa5      	ldr	r2, [pc, #660]	@ (800d2a8 <dir_register+0x2e4>)
 800d012:	fba2 2303 	umull	r2, r3, r2, r3
 800d016:	08db      	lsrs	r3, r3, #3
 800d018:	3302      	adds	r3, #2
 800d01a:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 800d01c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7ff f8ea 	bl	800c1f8 <dir_alloc>
 800d024:	4603      	mov	r3, r0
 800d026:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800d02a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d002      	beq.n	800d038 <dir_register+0x74>
 800d032:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d036:	e16b      	b.n	800d310 <dir_register+0x34c>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d03c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d03e:	3b01      	subs	r3, #1
 800d040:	015b      	lsls	r3, r3, #5
 800d042:	1ad2      	subs	r2, r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	79db      	ldrb	r3, [r3, #7]
 800d04c:	f003 0304 	and.w	r3, r3, #4
 800d050:	2b00      	cmp	r3, #0
 800d052:	d077      	beq.n	800d144 <dir_register+0x180>
			dp->obj.stat &= ~4;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	79db      	ldrb	r3, [r3, #7]
 800d058:	f023 0304 	bic.w	r3, r3, #4
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4618      	mov	r0, r3
 800d066:	f7fe fc93 	bl	800b990 <fill_first_frag>
 800d06a:	4603      	mov	r3, r0
 800d06c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d070:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d074:	2b00      	cmp	r3, #0
 800d076:	d002      	beq.n	800d07e <dir_register+0xba>
 800d078:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d07c:	e148      	b.n	800d310 <dir_register+0x34c>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d084:	f04f 32ff 	mov.w	r2, #4294967295
 800d088:	4619      	mov	r1, r3
 800d08a:	f7fe fcb0 	bl	800b9ee <fill_last_frag>
 800d08e:	4603      	mov	r3, r0
 800d090:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d094:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d002      	beq.n	800d0a2 <dir_register+0xde>
 800d09c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d0a0:	e136      	b.n	800d310 <dir_register+0x34c>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d04c      	beq.n	800d144 <dir_register+0x180>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	f107 0308 	add.w	r3, r7, #8
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7ff fc91 	bl	800c9da <load_obj_xdir>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 800d0be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d002      	beq.n	800d0cc <dir_register+0x108>
 800d0c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d0ca:	e121      	b.n	800d310 <dir_register+0x34c>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d0d2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d0d4:	8949      	ldrh	r1, [r1, #10]
 800d0d6:	0249      	lsls	r1, r1, #9
 800d0d8:	2000      	movs	r0, #0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	4605      	mov	r5, r0
 800d0de:	eb12 0804 	adds.w	r8, r2, r4
 800d0e2:	eb43 0905 	adc.w	r9, r3, r5
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	e9c3 8904 	strd	r8, r9, [r3, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 800d0ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d0fa:	4608      	mov	r0, r1
 800d0fc:	f7fd fd63 	bl	800abc6 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d102:	691b      	ldr	r3, [r3, #16]
 800d104:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d10e:	4608      	mov	r0, r1
 800d110:	f7fd fd59 	bl	800abc6 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	79da      	ldrb	r2, [r3, #7]
 800d118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	3321      	adds	r3, #33	@ 0x21
 800d11e:	f042 0201 	orr.w	r2, r2, #1
 800d122:	b2d2      	uxtb	r2, r2
 800d124:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 800d126:	f107 0308 	add.w	r3, r7, #8
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7ff fc8e 	bl	800ca4c <store_xdir>
 800d130:	4603      	mov	r3, r0
 800d132:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 800d136:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d002      	beq.n	800d144 <dir_register+0x180>
 800d13e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d142:	e0e5      	b.n	800d310 <dir_register+0x34c>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d146:	691a      	ldr	r2, [r3, #16]
 800d148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	4619      	mov	r1, r3
 800d14e:	4610      	mov	r0, r2
 800d150:	f7ff fcd7 	bl	800cb02 <create_xdir>
		return FR_OK;
 800d154:	2300      	movs	r3, #0
 800d156:	e0db      	b.n	800d310 <dir_register+0x34c>
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800d15e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d162:	6810      	ldr	r0, [r2, #0]
 800d164:	6851      	ldr	r1, [r2, #4]
 800d166:	6892      	ldr	r2, [r2, #8]
 800d168:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d16a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d16e:	f003 0301 	and.w	r3, r3, #1
 800d172:	2b00      	cmp	r3, #0
 800d174:	d033      	beq.n	800d1de <dir_register+0x21a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2240      	movs	r2, #64	@ 0x40
 800d17a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800d17e:	2301      	movs	r3, #1
 800d180:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d182:	e016      	b.n	800d1b2 <dir_register+0x1ee>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800d18a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d18c:	68da      	ldr	r2, [r3, #12]
 800d18e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800d192:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d194:	f7ff fa08 	bl	800c5a8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7ff fde9 	bl	800cd70 <dir_find>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800d1a4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d106      	bne.n	800d1ba <dir_register+0x1f6>
		for (n = 1; n < 100; n++) {
 800d1ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1b4:	2b63      	cmp	r3, #99	@ 0x63
 800d1b6:	d9e5      	bls.n	800d184 <dir_register+0x1c0>
 800d1b8:	e000      	b.n	800d1bc <dir_register+0x1f8>
			if (res != FR_OK) break;
 800d1ba:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d1bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1be:	2b64      	cmp	r3, #100	@ 0x64
 800d1c0:	d101      	bne.n	800d1c6 <dir_register+0x202>
 800d1c2:	2307      	movs	r3, #7
 800d1c4:	e0a4      	b.n	800d310 <dir_register+0x34c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d1c6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d1ca:	2b04      	cmp	r3, #4
 800d1cc:	d002      	beq.n	800d1d4 <dir_register+0x210>
 800d1ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d1d2:	e09d      	b.n	800d310 <dir_register+0x34c>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d1d4:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d1de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d1e2:	f003 0302 	and.w	r3, r3, #2
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d007      	beq.n	800d1fa <dir_register+0x236>
 800d1ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1ec:	330c      	adds	r3, #12
 800d1ee:	4a2f      	ldr	r2, [pc, #188]	@ (800d2ac <dir_register+0x2e8>)
 800d1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d1f4:	089b      	lsrs	r3, r3, #2
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	e000      	b.n	800d1fc <dir_register+0x238>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800d1fe:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f7fe fff9 	bl	800c1f8 <dir_alloc>
 800d206:	4603      	mov	r3, r0
 800d208:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 800d20c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d210:	2b00      	cmp	r3, #0
 800d212:	d14e      	bne.n	800d2b2 <dir_register+0x2ee>
 800d214:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d216:	3b01      	subs	r3, #1
 800d218:	673b      	str	r3, [r7, #112]	@ 0x70
 800d21a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d048      	beq.n	800d2b2 <dir_register+0x2ee>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d224:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d226:	015b      	lsls	r3, r3, #5
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	4619      	mov	r1, r3
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7fe feb8 	bl	800bfa2 <dir_sdi>
 800d232:	4603      	mov	r3, r0
 800d234:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800d238:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d138      	bne.n	800d2b2 <dir_register+0x2ee>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	3340      	adds	r3, #64	@ 0x40
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff fa55 	bl	800c6f4 <sum_sfn>
 800d24a:	4603      	mov	r3, r0
 800d24c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d254:	4619      	mov	r1, r3
 800d256:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d258:	f7fd ffe4 	bl	800b224 <move_window>
 800d25c:	4603      	mov	r3, r0
 800d25e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800d262:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d266:	2b00      	cmp	r3, #0
 800d268:	d122      	bne.n	800d2b0 <dir_register+0x2ec>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 800d26a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d26c:	68d8      	ldr	r0, [r3, #12]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d272:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d274:	b2da      	uxtb	r2, r3
 800d276:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800d27a:	f7ff f92d 	bl	800c4d8 <put_lfn>
				fs->wflag = 1;
 800d27e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d280:	2201      	movs	r2, #1
 800d282:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800d284:	2100      	movs	r1, #0
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7fe ff11 	bl	800c0ae <dir_next>
 800d28c:	4603      	mov	r3, r0
 800d28e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --n_ent);
 800d292:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d296:	2b00      	cmp	r3, #0
 800d298:	d10b      	bne.n	800d2b2 <dir_register+0x2ee>
 800d29a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d29c:	3b01      	subs	r3, #1
 800d29e:	673b      	str	r3, [r7, #112]	@ 0x70
 800d2a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1d4      	bne.n	800d250 <dir_register+0x28c>
 800d2a6:	e004      	b.n	800d2b2 <dir_register+0x2ee>
 800d2a8:	88888889 	.word	0x88888889
 800d2ac:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800d2b0:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d2b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d128      	bne.n	800d30c <dir_register+0x348>
		res = move_window(fs, dp->sect);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2be:	4619      	mov	r1, r3
 800d2c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d2c2:	f7fd ffaf 	bl	800b224 <move_window>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800d2cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d11b      	bne.n	800d30c <dir_register+0x348>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2d8:	2220      	movs	r2, #32
 800d2da:	2100      	movs	r1, #0
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f014 fe5e 	bl	8021f9e <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	3340      	adds	r3, #64	@ 0x40
 800d2ea:	220b      	movs	r2, #11
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	f014 ff00 	bl	80220f2 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2fc:	330c      	adds	r3, #12
 800d2fe:	f002 0218 	and.w	r2, r2, #24
 800d302:	b2d2      	uxtb	r2, r2
 800d304:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d308:	2201      	movs	r2, #1
 800d30a:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800d30c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800d310:	4618      	mov	r0, r3
 800d312:	3780      	adds	r7, #128	@ 0x80
 800d314:	46bd      	mov	sp, r7
 800d316:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d31a:	bf00      	nop

0800d31c <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 800d31c:	b5b0      	push	{r4, r5, r7, lr}
 800d31e:	b08a      	sub	sp, #40	@ 0x28
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
	UINT si, di;
#if FF_USE_LFN
	BYTE lcf;
	WCHAR wc, hs;
	FATFS *fs = dp->obj.fs;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	613b      	str	r3, [r7, #16]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2200      	movs	r2, #0
 800d330:	769a      	strb	r2, [r3, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d336:	2b00      	cmp	r3, #0
 800d338:	f000 81b6 	beq.w	800d6a8 <get_fileinfo+0x38c>

#if FF_USE_LFN		/* LFN configuration */
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2b04      	cmp	r3, #4
 800d342:	f040 80a6 	bne.w	800d492 <get_fileinfo+0x176>
		UINT nc = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	617b      	str	r3, [r7, #20]

		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
 800d34a:	2340      	movs	r3, #64	@ 0x40
 800d34c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d34e:	2300      	movs	r3, #0
 800d350:	623b      	str	r3, [r7, #32]
		hs = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 800d356:	e048      	b.n	800d3ea <get_fileinfo+0xce>
			if (si >= MAXDIRB(FF_MAX_LFN)) {	/* Truncated directory block? */
 800d358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35a:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800d35e:	d302      	bcc.n	800d366 <get_fileinfo+0x4a>
				di = 0; break;
 800d360:	2300      	movs	r3, #0
 800d362:	623b      	str	r3, [r7, #32]
 800d364:	e049      	b.n	800d3fa <get_fileinfo+0xde>
			}
			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
 800d366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d368:	f003 031f 	and.w	r3, r3, #31
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d102      	bne.n	800d376 <get_fileinfo+0x5a>
 800d370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d372:	3302      	adds	r3, #2
 800d374:	627b      	str	r3, [r7, #36]	@ 0x24
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	691a      	ldr	r2, [r3, #16]
 800d37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37c:	4413      	add	r3, r2
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fd fac3 	bl	800a90a <ld_word>
 800d384:	4603      	mov	r3, r0
 800d386:	83bb      	strh	r3, [r7, #28]
 800d388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38a:	3302      	adds	r3, #2
 800d38c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	3301      	adds	r3, #1
 800d392:	617b      	str	r3, [r7, #20]
			if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800d394:	8b7b      	ldrh	r3, [r7, #26]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d10a      	bne.n	800d3b0 <get_fileinfo+0x94>
 800d39a:	8bbb      	ldrh	r3, [r7, #28]
 800d39c:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800d3a0:	d306      	bcc.n	800d3b0 <get_fileinfo+0x94>
 800d3a2:	8bbb      	ldrh	r3, [r7, #28]
 800d3a4:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800d3a8:	d202      	bcs.n	800d3b0 <get_fileinfo+0x94>
				hs = wc; continue;				/* Get low surrogate */
 800d3aa:	8bbb      	ldrh	r3, [r7, #28]
 800d3ac:	837b      	strh	r3, [r7, #26]
 800d3ae:	e01c      	b.n	800d3ea <get_fileinfo+0xce>
			}
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800d3b0:	8b7b      	ldrh	r3, [r7, #26]
 800d3b2:	041a      	lsls	r2, r3, #16
 800d3b4:	8bbb      	ldrh	r3, [r7, #28]
 800d3b6:	ea42 0003 	orr.w	r0, r2, r3
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	3318      	adds	r3, #24
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	1c99      	adds	r1, r3, #2
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
 800d3c6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	f7fd fcea 	bl	800ada4 <put_utf>
 800d3d0:	60f8      	str	r0, [r7, #12]
			if (nw == 0) {						/* Buffer overflow or wrong char? */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d102      	bne.n	800d3de <get_fileinfo+0xc2>
				di = 0; break;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	623b      	str	r3, [r7, #32]
 800d3dc:	e00d      	b.n	800d3fa <get_fileinfo+0xde>
			}
			di += nw;
 800d3de:	6a3a      	ldr	r2, [r7, #32]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	623b      	str	r3, [r7, #32]
			hs = 0;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	3323      	adds	r3, #35	@ 0x23
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d3ae      	bcc.n	800d358 <get_fileinfo+0x3c>
		}
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
 800d3fa:	8b7b      	ldrh	r3, [r7, #26]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <get_fileinfo+0xe8>
 800d400:	2300      	movs	r3, #0
 800d402:	623b      	str	r3, [r7, #32]
		if (di == 0) fno->fname[di++] = '\?';	/* Inaccessible object name? */
 800d404:	6a3b      	ldr	r3, [r7, #32]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d106      	bne.n	800d418 <get_fileinfo+0xfc>
 800d40a:	6a3b      	ldr	r3, [r7, #32]
 800d40c:	1c5a      	adds	r2, r3, #1
 800d40e:	623a      	str	r2, [r7, #32]
 800d410:	683a      	ldr	r2, [r7, #0]
 800d412:	4413      	add	r3, r2
 800d414:	223f      	movs	r2, #63	@ 0x3f
 800d416:	769a      	strb	r2, [r3, #26]
		fno->fname[di] = 0;						/* Terminate the name */
 800d418:	683a      	ldr	r2, [r7, #0]
 800d41a:	6a3b      	ldr	r3, [r7, #32]
 800d41c:	4413      	add	r3, r2
 800d41e:	331a      	adds	r3, #26
 800d420:	2200      	movs	r2, #0
 800d422:	701a      	strb	r2, [r3, #0]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	2200      	movs	r2, #0
 800d428:	735a      	strb	r2, [r3, #13]

		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	3304      	adds	r3, #4
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 800d436:	b2da      	uxtb	r2, r3
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	731a      	strb	r2, [r3, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	7b1b      	ldrb	r3, [r3, #12]
 800d440:	f003 0310 	and.w	r3, r3, #16
 800d444:	2b00      	cmp	r3, #0
 800d446:	d108      	bne.n	800d45a <get_fileinfo+0x13e>
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	691b      	ldr	r3, [r3, #16]
 800d44c:	3338      	adds	r3, #56	@ 0x38
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fd fa97 	bl	800a982 <ld_qword>
 800d454:	4602      	mov	r2, r0
 800d456:	460b      	mov	r3, r1
 800d458:	e003      	b.n	800d462 <get_fileinfo+0x146>
 800d45a:	f04f 0200 	mov.w	r2, #0
 800d45e:	f04f 0300 	mov.w	r3, #0
 800d462:	6839      	ldr	r1, [r7, #0]
 800d464:	e9c1 2300 	strd	r2, r3, [r1]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	330c      	adds	r3, #12
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fd fa4b 	bl	800a90a <ld_word>
 800d474:	4603      	mov	r3, r0
 800d476:	461a      	mov	r2, r3
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	815a      	strh	r2, [r3, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	691b      	ldr	r3, [r3, #16]
 800d480:	330e      	adds	r3, #14
 800d482:	4618      	mov	r0, r3
 800d484:	f7fd fa41 	bl	800a90a <ld_word>
 800d488:	4603      	mov	r3, r0
 800d48a:	461a      	mov	r2, r3
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	811a      	strh	r2, [r3, #8]
		return;
 800d490:	e10b      	b.n	800d6aa <get_fileinfo+0x38e>
	} else
#endif
	{	/* FAT/FAT32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d49a:	d04d      	beq.n	800d538 <get_fileinfo+0x21c>
			si = di = 0;
 800d49c:	2300      	movs	r3, #0
 800d49e:	623b      	str	r3, [r7, #32]
 800d4a0:	6a3b      	ldr	r3, [r7, #32]
 800d4a2:	627b      	str	r3, [r7, #36]	@ 0x24
			hs = 0;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 800d4a8:	e033      	b.n	800d512 <get_fileinfo+0x1f6>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	68da      	ldr	r2, [r3, #12]
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b0:	1c59      	adds	r1, r3, #1
 800d4b2:	6279      	str	r1, [r7, #36]	@ 0x24
 800d4b4:	005b      	lsls	r3, r3, #1
 800d4b6:	4413      	add	r3, r2
 800d4b8:	881b      	ldrh	r3, [r3, #0]
 800d4ba:	83bb      	strh	r3, [r7, #28]
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800d4bc:	8b7b      	ldrh	r3, [r7, #26]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d10a      	bne.n	800d4d8 <get_fileinfo+0x1bc>
 800d4c2:	8bbb      	ldrh	r3, [r7, #28]
 800d4c4:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800d4c8:	d306      	bcc.n	800d4d8 <get_fileinfo+0x1bc>
 800d4ca:	8bbb      	ldrh	r3, [r7, #28]
 800d4cc:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800d4d0:	d202      	bcs.n	800d4d8 <get_fileinfo+0x1bc>
					hs = wc; continue;		/* Get low surrogate */
 800d4d2:	8bbb      	ldrh	r3, [r7, #28]
 800d4d4:	837b      	strh	r3, [r7, #26]
 800d4d6:	e01c      	b.n	800d512 <get_fileinfo+0x1f6>
				}
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800d4d8:	8b7b      	ldrh	r3, [r7, #26]
 800d4da:	041a      	lsls	r2, r3, #16
 800d4dc:	8bbb      	ldrh	r3, [r7, #28]
 800d4de:	ea42 0003 	orr.w	r0, r2, r3
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	3318      	adds	r3, #24
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	1c99      	adds	r1, r3, #2
 800d4ec:	6a3b      	ldr	r3, [r7, #32]
 800d4ee:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	f7fd fc56 	bl	800ada4 <put_utf>
 800d4f8:	60f8      	str	r0, [r7, #12]
				if (nw == 0) {				/* Buffer overflow or wrong char? */
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d102      	bne.n	800d506 <get_fileinfo+0x1ea>
					di = 0; break;
 800d500:	2300      	movs	r3, #0
 800d502:	623b      	str	r3, [r7, #32]
 800d504:	e00d      	b.n	800d522 <get_fileinfo+0x206>
				}
				di += nw;
 800d506:	6a3a      	ldr	r2, [r7, #32]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	4413      	add	r3, r2
 800d50c:	623b      	str	r3, [r7, #32]
				hs = 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	68da      	ldr	r2, [r3, #12]
 800d516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	4413      	add	r3, r2
 800d51c:	881b      	ldrh	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1c3      	bne.n	800d4aa <get_fileinfo+0x18e>
			}
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 800d522:	8b7b      	ldrh	r3, [r7, #26]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d001      	beq.n	800d52c <get_fileinfo+0x210>
 800d528:	2300      	movs	r3, #0
 800d52a:	623b      	str	r3, [r7, #32]
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 800d52c:	683a      	ldr	r2, [r7, #0]
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	4413      	add	r3, r2
 800d532:	331a      	adds	r3, #26
 800d534:	2200      	movs	r2, #0
 800d536:	701a      	strb	r2, [r3, #0]
		}
	}

	si = di = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	623b      	str	r3, [r7, #32]
 800d53c:	6a3b      	ldr	r3, [r7, #32]
 800d53e:	627b      	str	r3, [r7, #36]	@ 0x24
	while (si < 11) {		/* Get SFN from SFN entry */
 800d540:	e027      	b.n	800d592 <get_fileinfo+0x276>
		wc = dp->dir[si++];			/* Get a char */
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d548:	1c59      	adds	r1, r3, #1
 800d54a:	6279      	str	r1, [r7, #36]	@ 0x24
 800d54c:	4413      	add	r3, r2
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	83bb      	strh	r3, [r7, #28]
		if (wc == ' ') continue;	/* Skip padding spaces */
 800d552:	8bbb      	ldrh	r3, [r7, #28]
 800d554:	2b20      	cmp	r3, #32
 800d556:	d01b      	beq.n	800d590 <get_fileinfo+0x274>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 800d558:	8bbb      	ldrh	r3, [r7, #28]
 800d55a:	2b05      	cmp	r3, #5
 800d55c:	d101      	bne.n	800d562 <get_fileinfo+0x246>
 800d55e:	23e5      	movs	r3, #229	@ 0xe5
 800d560:	83bb      	strh	r3, [r7, #28]
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 800d562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d564:	2b09      	cmp	r3, #9
 800d566:	d109      	bne.n	800d57c <get_fileinfo+0x260>
 800d568:	6a3b      	ldr	r3, [r7, #32]
 800d56a:	2b0b      	cmp	r3, #11
 800d56c:	d806      	bhi.n	800d57c <get_fileinfo+0x260>
 800d56e:	6a3b      	ldr	r3, [r7, #32]
 800d570:	1c5a      	adds	r2, r3, #1
 800d572:	623a      	str	r2, [r7, #32]
 800d574:	683a      	ldr	r2, [r7, #0]
 800d576:	4413      	add	r3, r2
 800d578:	222e      	movs	r2, #46	@ 0x2e
 800d57a:	735a      	strb	r2, [r3, #13]
		if (nw == 0) {				/* Buffer overflow? */
			di = 0; break;
		}
		di += nw;
#else					/* ANSI/OEM output */
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 800d57c:	6a3b      	ldr	r3, [r7, #32]
 800d57e:	1c5a      	adds	r2, r3, #1
 800d580:	623a      	str	r2, [r7, #32]
 800d582:	8bba      	ldrh	r2, [r7, #28]
 800d584:	b2d1      	uxtb	r1, r2
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	4413      	add	r3, r2
 800d58a:	460a      	mov	r2, r1
 800d58c:	735a      	strb	r2, [r3, #13]
 800d58e:	e000      	b.n	800d592 <get_fileinfo+0x276>
		if (wc == ' ') continue;	/* Skip padding spaces */
 800d590:	bf00      	nop
	while (si < 11) {		/* Get SFN from SFN entry */
 800d592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d594:	2b0a      	cmp	r3, #10
 800d596:	d9d4      	bls.n	800d542 <get_fileinfo+0x226>
#endif
	}
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 800d598:	683a      	ldr	r2, [r7, #0]
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	4413      	add	r3, r2
 800d59e:	330d      	adds	r3, #13
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	701a      	strb	r2, [r3, #0]

	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	7e9b      	ldrb	r3, [r3, #26]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d152      	bne.n	800d652 <get_fileinfo+0x336>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccessible */
 800d5ac:	6a3b      	ldr	r3, [r7, #32]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d107      	bne.n	800d5c2 <get_fileinfo+0x2a6>
			fno->fname[di++] = '\?';
 800d5b2:	6a3b      	ldr	r3, [r7, #32]
 800d5b4:	1c5a      	adds	r2, r3, #1
 800d5b6:	623a      	str	r2, [r7, #32]
 800d5b8:	683a      	ldr	r2, [r7, #0]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	223f      	movs	r2, #63	@ 0x3f
 800d5be:	769a      	strb	r2, [r3, #26]
 800d5c0:	e038      	b.n	800d634 <get_fileinfo+0x318>
		} else {
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	623b      	str	r3, [r7, #32]
 800d5c6:	6a3b      	ldr	r3, [r7, #32]
 800d5c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5ca:	2308      	movs	r3, #8
 800d5cc:	77fb      	strb	r3, [r7, #31]
 800d5ce:	e02a      	b.n	800d626 <get_fileinfo+0x30a>
				wc = (WCHAR)fno->altname[si];
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d4:	4413      	add	r3, r2
 800d5d6:	330d      	adds	r3, #13
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	83bb      	strh	r3, [r7, #28]
				if (wc == '.') lcf = NS_EXT;
 800d5dc:	8bbb      	ldrh	r3, [r7, #28]
 800d5de:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5e0:	d101      	bne.n	800d5e6 <get_fileinfo+0x2ca>
 800d5e2:	2310      	movs	r3, #16
 800d5e4:	77fb      	strb	r3, [r7, #31]
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 800d5e6:	8bbb      	ldrh	r3, [r7, #28]
 800d5e8:	2b40      	cmp	r3, #64	@ 0x40
 800d5ea:	d90e      	bls.n	800d60a <get_fileinfo+0x2ee>
 800d5ec:	8bbb      	ldrh	r3, [r7, #28]
 800d5ee:	2b5a      	cmp	r3, #90	@ 0x5a
 800d5f0:	d80b      	bhi.n	800d60a <get_fileinfo+0x2ee>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5f6:	330c      	adds	r3, #12
 800d5f8:	781a      	ldrb	r2, [r3, #0]
 800d5fa:	7ffb      	ldrb	r3, [r7, #31]
 800d5fc:	4013      	ands	r3, r2
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	d002      	beq.n	800d60a <get_fileinfo+0x2ee>
 800d604:	8bbb      	ldrh	r3, [r7, #28]
 800d606:	3320      	adds	r3, #32
 800d608:	83bb      	strh	r3, [r7, #28]
				fno->fname[di] = (TCHAR)wc;
 800d60a:	8bbb      	ldrh	r3, [r7, #28]
 800d60c:	b2d9      	uxtb	r1, r3
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	6a3b      	ldr	r3, [r7, #32]
 800d612:	4413      	add	r3, r2
 800d614:	331a      	adds	r3, #26
 800d616:	460a      	mov	r2, r1
 800d618:	701a      	strb	r2, [r3, #0]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800d61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61c:	3301      	adds	r3, #1
 800d61e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d620:	6a3b      	ldr	r3, [r7, #32]
 800d622:	3301      	adds	r3, #1
 800d624:	623b      	str	r3, [r7, #32]
 800d626:	683a      	ldr	r2, [r7, #0]
 800d628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62a:	4413      	add	r3, r2
 800d62c:	330d      	adds	r3, #13
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d1cd      	bne.n	800d5d0 <get_fileinfo+0x2b4>
			}
		}
		fno->fname[di] = 0;	/* Terminate the LFN */
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	6a3b      	ldr	r3, [r7, #32]
 800d638:	4413      	add	r3, r2
 800d63a:	331a      	adds	r3, #26
 800d63c:	2200      	movs	r2, #0
 800d63e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d644:	330c      	adds	r3, #12
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d102      	bne.n	800d652 <get_fileinfo+0x336>
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	2200      	movs	r2, #0
 800d650:	735a      	strb	r2, [r3, #13]
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d656:	330b      	adds	r3, #11
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d65e:	b2da      	uxtb	r2, r3
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d668:	331c      	adds	r3, #28
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fd f966 	bl	800a93c <ld_dword>
 800d670:	4603      	mov	r3, r0
 800d672:	2200      	movs	r2, #0
 800d674:	461c      	mov	r4, r3
 800d676:	4615      	mov	r5, r2
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	e9c3 4500 	strd	r4, r5, [r3]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d682:	3316      	adds	r3, #22
 800d684:	4618      	mov	r0, r3
 800d686:	f7fd f940 	bl	800a90a <ld_word>
 800d68a:	4603      	mov	r3, r0
 800d68c:	461a      	mov	r2, r3
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d696:	3318      	adds	r3, #24
 800d698:	4618      	mov	r0, r3
 800d69a:	f7fd f936 	bl	800a90a <ld_word>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	811a      	strh	r2, [r3, #8]
 800d6a6:	e000      	b.n	800d6aa <get_fileinfo+0x38e>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800d6a8:	bf00      	nop
}
 800d6aa:	3728      	adds	r7, #40	@ 0x28
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bdb0      	pop	{r4, r5, r7, pc}

0800d6b0 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b08a      	sub	sp, #40	@ 0x28
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	60bb      	str	r3, [r7, #8]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	613b      	str	r3, [r7, #16]
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 800d6cc:	f107 0308 	add.w	r3, r7, #8
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7fd fb22 	bl	800ad1a <tchar2uni>
 800d6d6:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6de:	d101      	bne.n	800d6e4 <create_name+0x34>
 800d6e0:	2306      	movs	r3, #6
 800d6e2:	e209      	b.n	800daf8 <create_name+0x448>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6ea:	d309      	bcc.n	800d700 <create_name+0x50>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	0c19      	lsrs	r1, r3, #16
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	1c5a      	adds	r2, r3, #1
 800d6f4:	617a      	str	r2, [r7, #20]
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	b28a      	uxth	r2, r1
 800d6fe:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 800d704:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d706:	2b1f      	cmp	r3, #31
 800d708:	d920      	bls.n	800d74c <create_name+0x9c>
 800d70a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d70c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d70e:	d01d      	beq.n	800d74c <create_name+0x9c>
 800d710:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d712:	2b5c      	cmp	r3, #92	@ 0x5c
 800d714:	d01a      	beq.n	800d74c <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d716:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d718:	2b7f      	cmp	r3, #127	@ 0x7f
 800d71a:	d809      	bhi.n	800d730 <create_name+0x80>
 800d71c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d71e:	4619      	mov	r1, r3
 800d720:	4894      	ldr	r0, [pc, #592]	@ (800d974 <create_name+0x2c4>)
 800d722:	f014 fc53 	bl	8021fcc <strchr>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <create_name+0x80>
 800d72c:	2306      	movs	r3, #6
 800d72e:	e1e3      	b.n	800daf8 <create_name+0x448>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	2bfe      	cmp	r3, #254	@ 0xfe
 800d734:	d901      	bls.n	800d73a <create_name+0x8a>
 800d736:	2306      	movs	r3, #6
 800d738:	e1de      	b.n	800daf8 <create_name+0x448>
		lfn[di++] = wc;				/* Store the Unicode character */
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	1c5a      	adds	r2, r3, #1
 800d73e:	617a      	str	r2, [r7, #20]
 800d740:	005b      	lsls	r3, r3, #1
 800d742:	693a      	ldr	r2, [r7, #16]
 800d744:	4413      	add	r3, r2
 800d746:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d748:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 800d74a:	e7bf      	b.n	800d6cc <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 800d74c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d74e:	2b1f      	cmp	r3, #31
 800d750:	d806      	bhi.n	800d760 <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 800d752:	2304      	movs	r3, #4
 800d754:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d758:	e014      	b.n	800d784 <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	3301      	adds	r3, #1
 800d75e:	60bb      	str	r3, [r7, #8]
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	2b2f      	cmp	r3, #47	@ 0x2f
 800d766:	d0f8      	beq.n	800d75a <create_name+0xaa>
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d76e:	d0f4      	beq.n	800d75a <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 800d770:	2300      	movs	r3, #0
 800d772:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	2b1f      	cmp	r3, #31
 800d77c:	d802      	bhi.n	800d784 <create_name+0xd4>
 800d77e:	2304      	movs	r3, #4
 800d780:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	601a      	str	r2, [r3, #0]

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d109      	bne.n	800d7a4 <create_name+0xf4>
 800d790:	697a      	ldr	r2, [r7, #20]
 800d792:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d796:	4413      	add	r3, r2
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	693a      	ldr	r2, [r7, #16]
 800d79c:	4413      	add	r3, r2
 800d79e:	881b      	ldrh	r3, [r3, #0]
 800d7a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7a2:	d015      	beq.n	800d7d0 <create_name+0x120>
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	d14d      	bne.n	800d846 <create_name+0x196>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d7b0:	4413      	add	r3, r2
 800d7b2:	005b      	lsls	r3, r3, #1
 800d7b4:	693a      	ldr	r2, [r7, #16]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7bc:	d143      	bne.n	800d846 <create_name+0x196>
 800d7be:	697a      	ldr	r2, [r7, #20]
 800d7c0:	4b6d      	ldr	r3, [pc, #436]	@ (800d978 <create_name+0x2c8>)
 800d7c2:	4413      	add	r3, r2
 800d7c4:	005b      	lsls	r3, r3, #1
 800d7c6:	693a      	ldr	r2, [r7, #16]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	881b      	ldrh	r3, [r3, #0]
 800d7cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7ce:	d13a      	bne.n	800d846 <create_name+0x196>
		lfn[di] = 0;
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	693a      	ldr	r2, [r7, #16]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	2200      	movs	r2, #0
 800d7da:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 800d7dc:	2300      	movs	r3, #0
 800d7de:	623b      	str	r3, [r7, #32]
 800d7e0:	e00f      	b.n	800d802 <create_name+0x152>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800d7e2:	6a3a      	ldr	r2, [r7, #32]
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d201      	bcs.n	800d7ee <create_name+0x13e>
 800d7ea:	212e      	movs	r1, #46	@ 0x2e
 800d7ec:	e000      	b.n	800d7f0 <create_name+0x140>
 800d7ee:	2120      	movs	r1, #32
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	6a3b      	ldr	r3, [r7, #32]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	3340      	adds	r3, #64	@ 0x40
 800d7f8:	460a      	mov	r2, r1
 800d7fa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 800d7fc:	6a3b      	ldr	r3, [r7, #32]
 800d7fe:	3301      	adds	r3, #1
 800d800:	623b      	str	r3, [r7, #32]
 800d802:	6a3b      	ldr	r3, [r7, #32]
 800d804:	2b0a      	cmp	r3, #10
 800d806:	d9ec      	bls.n	800d7e2 <create_name+0x132>
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
 800d808:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d80c:	f043 0320 	orr.w	r3, r3, #32
 800d810:	b2d9      	uxtb	r1, r3
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	6a3b      	ldr	r3, [r7, #32]
 800d816:	4413      	add	r3, r2
 800d818:	3340      	adds	r3, #64	@ 0x40
 800d81a:	460a      	mov	r2, r1
 800d81c:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800d81e:	2300      	movs	r3, #0
 800d820:	e16a      	b.n	800daf8 <create_name+0x448>
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 800d822:	697a      	ldr	r2, [r7, #20]
 800d824:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d828:	4413      	add	r3, r2
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	693a      	ldr	r2, [r7, #16]
 800d82e:	4413      	add	r3, r2
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc != ' ' && wc != '.') break;
 800d834:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d836:	2b20      	cmp	r3, #32
 800d838:	d002      	beq.n	800d840 <create_name+0x190>
 800d83a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d83c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d83e:	d106      	bne.n	800d84e <create_name+0x19e>
		di--;
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	3b01      	subs	r3, #1
 800d844:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1ea      	bne.n	800d822 <create_name+0x172>
 800d84c:	e000      	b.n	800d850 <create_name+0x1a0>
		if (wc != ' ' && wc != '.') break;
 800d84e:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	693a      	ldr	r2, [r7, #16]
 800d856:	4413      	add	r3, r2
 800d858:	2200      	movs	r2, #0
 800d85a:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <create_name+0x1b6>
 800d862:	2306      	movs	r3, #6
 800d864:	e148      	b.n	800daf8 <create_name+0x448>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 800d866:	2300      	movs	r3, #0
 800d868:	61bb      	str	r3, [r7, #24]
 800d86a:	e002      	b.n	800d872 <create_name+0x1c2>
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	3301      	adds	r3, #1
 800d870:	61bb      	str	r3, [r7, #24]
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	005b      	lsls	r3, r3, #1
 800d876:	693a      	ldr	r2, [r7, #16]
 800d878:	4413      	add	r3, r2
 800d87a:	881b      	ldrh	r3, [r3, #0]
 800d87c:	2b20      	cmp	r3, #32
 800d87e:	d0f5      	beq.n	800d86c <create_name+0x1bc>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d106      	bne.n	800d894 <create_name+0x1e4>
 800d886:	69bb      	ldr	r3, [r7, #24]
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	693a      	ldr	r2, [r7, #16]
 800d88c:	4413      	add	r3, r2
 800d88e:	881b      	ldrh	r3, [r3, #0]
 800d890:	2b2e      	cmp	r3, #46	@ 0x2e
 800d892:	d109      	bne.n	800d8a8 <create_name+0x1f8>
 800d894:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d898:	f043 0303 	orr.w	r3, r3, #3
 800d89c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 800d8a0:	e002      	b.n	800d8a8 <create_name+0x1f8>
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	617b      	str	r3, [r7, #20]
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d009      	beq.n	800d8c2 <create_name+0x212>
 800d8ae:	697a      	ldr	r2, [r7, #20]
 800d8b0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d8b4:	4413      	add	r3, r2
 800d8b6:	005b      	lsls	r3, r3, #1
 800d8b8:	693a      	ldr	r2, [r7, #16]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	881b      	ldrh	r3, [r3, #0]
 800d8be:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8c0:	d1ef      	bne.n	800d8a2 <create_name+0x1f2>

	memset(dp->fn, ' ', 11);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	3340      	adds	r3, #64	@ 0x40
 800d8c6:	220b      	movs	r2, #11
 800d8c8:	2120      	movs	r1, #32
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f014 fb67 	bl	8021f9e <memset>
	i = b = 0; ni = 8;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	623b      	str	r3, [r7, #32]
 800d8da:	2308      	movs	r3, #8
 800d8dc:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	1c5a      	adds	r2, r3, #1
 800d8e2:	61ba      	str	r2, [r7, #24]
 800d8e4:	005b      	lsls	r3, r3, #1
 800d8e6:	693a      	ldr	r2, [r7, #16]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	881b      	ldrh	r3, [r3, #0]
 800d8ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 800d8ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f000 80b7 	beq.w	800da64 <create_name+0x3b4>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800d8f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8f8:	2b20      	cmp	r3, #32
 800d8fa:	d006      	beq.n	800d90a <create_name+0x25a>
 800d8fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800d900:	d10a      	bne.n	800d918 <create_name+0x268>
 800d902:	69ba      	ldr	r2, [r7, #24]
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	429a      	cmp	r2, r3
 800d908:	d006      	beq.n	800d918 <create_name+0x268>
			cf |= NS_LOSS | NS_LFN;
 800d90a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d90e:	f043 0303 	orr.w	r3, r3, #3
 800d912:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			continue;
 800d916:	e0a4      	b.n	800da62 <create_name+0x3b2>
		}

		if (i >= ni || si == di) {		/* End of field? */
 800d918:	6a3a      	ldr	r2, [r7, #32]
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d203      	bcs.n	800d928 <create_name+0x278>
 800d920:	69ba      	ldr	r2, [r7, #24]
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	429a      	cmp	r2, r3
 800d926:	d129      	bne.n	800d97c <create_name+0x2cc>
			if (ni == 11) {				/* Name extension overflow? */
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	2b0b      	cmp	r3, #11
 800d92c:	d106      	bne.n	800d93c <create_name+0x28c>
				cf |= NS_LOSS | NS_LFN;
 800d92e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d932:	f043 0303 	orr.w	r3, r3, #3
 800d936:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 800d93a:	e096      	b.n	800da6a <create_name+0x3ba>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800d93c:	69ba      	ldr	r2, [r7, #24]
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	429a      	cmp	r2, r3
 800d942:	d005      	beq.n	800d950 <create_name+0x2a0>
 800d944:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d948:	f043 0303 	orr.w	r3, r3, #3
 800d94c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;						/* No name extension? */
 800d950:	69ba      	ldr	r2, [r7, #24]
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	429a      	cmp	r2, r3
 800d956:	f200 8087 	bhi.w	800da68 <create_name+0x3b8>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	61bb      	str	r3, [r7, #24]
 800d95e:	2308      	movs	r3, #8
 800d960:	623b      	str	r3, [r7, #32]
 800d962:	230b      	movs	r3, #11
 800d964:	61fb      	str	r3, [r7, #28]
 800d966:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			continue;
 800d970:	e077      	b.n	800da62 <create_name+0x3b2>
 800d972:	bf00      	nop
 800d974:	08025564 	.word	0x08025564
 800d978:	7ffffffe 	.word	0x7ffffffe
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 800d97c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d97e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d980:	d918      	bls.n	800d9b4 <create_name+0x304>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800d982:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d986:	f043 0302 	orr.w	r3, r3, #2
 800d98a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* In DBCS cfg */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800d98e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d990:	f240 3152 	movw	r1, #850	@ 0x352
 800d994:	4618      	mov	r0, r3
 800d996:	f002 fc69 	bl	801026c <ff_uni2oem>
 800d99a:	4603      	mov	r3, r0
 800d99c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 800d99e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d005      	beq.n	800d9b4 <create_name+0x304>
 800d9a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9ae:	4a54      	ldr	r2, [pc, #336]	@ (800db00 <create_name+0x450>)
 800d9b0:	5cd3      	ldrb	r3, [r2, r3]
 800d9b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 800d9b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9b6:	2bff      	cmp	r3, #255	@ 0xff
 800d9b8:	d91a      	bls.n	800d9f0 <create_name+0x340>
			if (i >= ni - 1) {			/* Field overflow? */
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	6a3a      	ldr	r2, [r7, #32]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d308      	bcc.n	800d9d6 <create_name+0x326>
				cf |= NS_LOSS | NS_LFN;
 800d9c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d9c8:	f043 0303 	orr.w	r3, r3, #3
 800d9cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				i = ni; continue;		/* Next field */
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	623b      	str	r3, [r7, #32]
 800d9d4:	e045      	b.n	800da62 <create_name+0x3b2>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 800d9d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9d8:	0a1b      	lsrs	r3, r3, #8
 800d9da:	b299      	uxth	r1, r3
 800d9dc:	6a3b      	ldr	r3, [r7, #32]
 800d9de:	1c5a      	adds	r2, r3, #1
 800d9e0:	623a      	str	r2, [r7, #32]
 800d9e2:	b2c9      	uxtb	r1, r1
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	460a      	mov	r2, r1
 800d9ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d9ee:	e02e      	b.n	800da4e <create_name+0x39e>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 800d9f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d007      	beq.n	800da06 <create_name+0x356>
 800d9f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	4842      	ldr	r0, [pc, #264]	@ (800db04 <create_name+0x454>)
 800d9fc:	f014 fae6 	bl	8021fcc <strchr>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d008      	beq.n	800da18 <create_name+0x368>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800da06:	235f      	movs	r3, #95	@ 0x5f
 800da08:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800da0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da0e:	f043 0303 	orr.w	r3, r3, #3
 800da12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800da16:	e01a      	b.n	800da4e <create_name+0x39e>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800da18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da1a:	2b40      	cmp	r3, #64	@ 0x40
 800da1c:	d908      	bls.n	800da30 <create_name+0x380>
 800da1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da20:	2b5a      	cmp	r3, #90	@ 0x5a
 800da22:	d805      	bhi.n	800da30 <create_name+0x380>
					b |= 2;
 800da24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da28:	f043 0302 	orr.w	r3, r3, #2
 800da2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 800da30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da32:	2b60      	cmp	r3, #96	@ 0x60
 800da34:	d90b      	bls.n	800da4e <create_name+0x39e>
 800da36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da38:	2b7a      	cmp	r3, #122	@ 0x7a
 800da3a:	d808      	bhi.n	800da4e <create_name+0x39e>
					b |= 1; wc -= 0x20;
 800da3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da40:	f043 0301 	orr.w	r3, r3, #1
 800da44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800da48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da4a:	3b20      	subs	r3, #32
 800da4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	1c5a      	adds	r2, r3, #1
 800da52:	623a      	str	r2, [r7, #32]
 800da54:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800da56:	b2d1      	uxtb	r1, r2
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	4413      	add	r3, r2
 800da5c:	460a      	mov	r2, r1
 800da5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		wc = lfn[si++];					/* Get an LFN character */
 800da62:	e73c      	b.n	800d8de <create_name+0x22e>
		if (wc == 0) break;				/* Break on end of the LFN */
 800da64:	bf00      	nop
 800da66:	e000      	b.n	800da6a <create_name+0x3ba>
			if (si > di) break;						/* No name extension? */
 800da68:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800da70:	2be5      	cmp	r3, #229	@ 0xe5
 800da72:	d103      	bne.n	800da7c <create_name+0x3cc>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2205      	movs	r2, #5
 800da78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	2b08      	cmp	r3, #8
 800da80:	d104      	bne.n	800da8c <create_name+0x3dc>
 800da82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800da8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da90:	f003 030c 	and.w	r3, r3, #12
 800da94:	2b0c      	cmp	r3, #12
 800da96:	d005      	beq.n	800daa4 <create_name+0x3f4>
 800da98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da9c:	f003 0303 	and.w	r3, r3, #3
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	d105      	bne.n	800dab0 <create_name+0x400>
 800daa4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800daa8:	f043 0302 	orr.w	r3, r3, #2
 800daac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dab0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dab4:	f003 0302 	and.w	r3, r3, #2
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d117      	bne.n	800daec <create_name+0x43c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 800dabc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dac0:	f003 0301 	and.w	r3, r3, #1
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d005      	beq.n	800dad4 <create_name+0x424>
 800dac8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dacc:	f043 0310 	orr.w	r3, r3, #16
 800dad0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800dad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dad8:	f003 0304 	and.w	r3, r3, #4
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d005      	beq.n	800daec <create_name+0x43c>
 800dae0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dae4:	f043 0308 	orr.w	r3, r3, #8
 800dae8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800daf2:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800daf6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3728      	adds	r7, #40	@ 0x28
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	08025e7c 	.word	0x08025e7c
 800db04:	08025570 	.word	0x08025570

0800db08 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800db08:	b5b0      	push	{r4, r5, r7, lr}
 800db0a:	b09a      	sub	sp, #104	@ 0x68
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	663b      	str	r3, [r7, #96]	@ 0x60


#if FF_FS_RPATH != 0
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2b2f      	cmp	r3, #47	@ 0x2f
 800db1e:	d00b      	beq.n	800db38 <follow_path+0x30>
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	2b5c      	cmp	r3, #92	@ 0x5c
 800db26:	d007      	beq.n	800db38 <follow_path+0x30>
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
 800db28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db2a:	69da      	ldr	r2, [r3, #28]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	609a      	str	r2, [r3, #8]
 800db30:	e00d      	b.n	800db4e <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	3301      	adds	r3, #1
 800db36:	603b      	str	r3, [r7, #0]
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	2b2f      	cmp	r3, #47	@ 0x2f
 800db3e:	d0f8      	beq.n	800db32 <follow_path+0x2a>
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b5c      	cmp	r3, #92	@ 0x5c
 800db46:	d0f4      	beq.n	800db32 <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	61da      	str	r2, [r3, #28]
#if FF_FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
 800db54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	2b04      	cmp	r3, #4
 800db5a:	d136      	bne.n	800dbca <follow_path+0xc2>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d032      	beq.n	800dbca <follow_path+0xc2>
		DIR dj;

		dp->obj.c_scl = fs->cdc_scl;
 800db64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db66:	6a1a      	ldr	r2, [r3, #32]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	621a      	str	r2, [r3, #32]
		dp->obj.c_size = fs->cdc_size;
 800db6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	625a      	str	r2, [r3, #36]	@ 0x24
		dp->obj.c_ofs = fs->cdc_ofs;
 800db74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	629a      	str	r2, [r3, #40]	@ 0x28
		res = load_obj_xdir(&dj, &dp->obj);
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	f107 0308 	add.w	r3, r7, #8
 800db82:	4611      	mov	r1, r2
 800db84:	4618      	mov	r0, r3
 800db86:	f7fe ff28 	bl	800c9da <load_obj_xdir>
 800db8a:	4603      	mov	r3, r0
 800db8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		if (res != FR_OK) return res;
 800db90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800db94:	2b00      	cmp	r3, #0
 800db96:	d002      	beq.n	800db9e <follow_path+0x96>
 800db98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800db9c:	e0a8      	b.n	800dcf0 <follow_path+0x1e8>
		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 800db9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	3338      	adds	r3, #56	@ 0x38
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fc fec9 	bl	800a93c <ld_dword>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2200      	movs	r2, #0
 800dbae:	461c      	mov	r4, r3
 800dbb0:	4615      	mov	r5, r2
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	e9c3 4504 	strd	r4, r5, [r3, #16]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dbb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	3321      	adds	r3, #33	@ 0x21
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	f003 0302 	and.w	r3, r3, #2
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	2b1f      	cmp	r3, #31
 800dbd0:	d80b      	bhi.n	800dbea <follow_path+0xe2>
		dp->fn[NSFLAG] = NS_NONAME;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2280      	movs	r2, #128	@ 0x80
 800dbd6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800dbda:	2100      	movs	r1, #0
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7fe f9e0 	bl	800bfa2 <dir_sdi>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dbe8:	e080      	b.n	800dcec <follow_path+0x1e4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dbea:	463b      	mov	r3, r7
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7ff fd5e 	bl	800d6b0 <create_name>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			if (res != FR_OK) break;
 800dbfa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d16f      	bne.n	800dce2 <follow_path+0x1da>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7ff f8b4 	bl	800cd70 <dir_find>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			ns = dp->fn[NSFLAG];
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800dc14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res != FR_OK) {				/* Failed to find the object */
 800dc18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d021      	beq.n	800dc64 <follow_path+0x15c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dc20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dc24:	2b04      	cmp	r3, #4
 800dc26:	d15e      	bne.n	800dce6 <follow_path+0x1de>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800dc28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc2c:	f003 0320 	and.w	r3, r3, #32
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00d      	beq.n	800dc50 <follow_path+0x148>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800dc34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc38:	f003 0304 	and.w	r3, r3, #4
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d04e      	beq.n	800dcde <follow_path+0x1d6>
						dp->fn[NSFLAG] = NS_NONAME;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2280      	movs	r2, #128	@ 0x80
 800dc44:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
						res = FR_OK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800dc4e:	e04a      	b.n	800dce6 <follow_path+0x1de>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dc50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc54:	f003 0304 	and.w	r3, r3, #4
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d144      	bne.n	800dce6 <follow_path+0x1de>
 800dc5c:	2305      	movs	r3, #5
 800dc5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				break;
 800dc62:	e040      	b.n	800dce6 <follow_path+0x1de>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800dc64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc68:	f003 0304 	and.w	r3, r3, #4
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d13c      	bne.n	800dcea <follow_path+0x1e2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	799b      	ldrb	r3, [r3, #6]
 800dc74:	f003 0310 	and.w	r3, r3, #16
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d103      	bne.n	800dc84 <follow_path+0x17c>
				res = FR_NO_PATH; break;
 800dc7c:	2305      	movs	r3, #5
 800dc7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dc82:	e033      	b.n	800dcec <follow_path+0x1e4>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 800dc84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	2b04      	cmp	r3, #4
 800dc8a:	d118      	bne.n	800dcbe <follow_path+0x1b6>
				dp->obj.c_scl = dp->obj.sclust;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	689a      	ldr	r2, [r3, #8]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	79d2      	ldrb	r2, [r2, #7]
 800dca4:	431a      	orrs	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	625a      	str	r2, [r3, #36]	@ 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800dcb8:	f7fe fe66 	bl	800c988 <init_alloc_info>
 800dcbc:	e795      	b.n	800dbea <follow_path+0xe2>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dcbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dcc0:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dccc:	4413      	add	r3, r2
 800dcce:	4619      	mov	r1, r3
 800dcd0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800dcd2:	f7fe faed 	bl	800c2b0 <ld_clust>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	609a      	str	r2, [r3, #8]
 800dcdc:	e785      	b.n	800dbea <follow_path+0xe2>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800dcde:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dce0:	e783      	b.n	800dbea <follow_path+0xe2>
			if (res != FR_OK) break;
 800dce2:	bf00      	nop
 800dce4:	e002      	b.n	800dcec <follow_path+0x1e4>
				break;
 800dce6:	bf00      	nop
 800dce8:	e000      	b.n	800dcec <follow_path+0x1e4>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800dcea:	bf00      	nop
			}
		}
	}

	return res;
 800dcec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3768      	adds	r7, #104	@ 0x68
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bdb0      	pop	{r4, r5, r7, pc}

0800dcf8 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b089      	sub	sp, #36	@ 0x24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 800dd00:	f04f 33ff 	mov.w	r3, #4294967295
 800dd04:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	613b      	str	r3, [r7, #16]
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d101      	bne.n	800dd1a <get_ldnumber+0x22>
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	e02e      	b.n	800dd78 <get_ldnumber+0x80>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	1c5a      	adds	r2, r3, #1
 800dd1e:	61fa      	str	r2, [r7, #28]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 800dd24:	7bfb      	ldrb	r3, [r7, #15]
 800dd26:	2b1f      	cmp	r3, #31
 800dd28:	d902      	bls.n	800dd30 <get_ldnumber+0x38>
 800dd2a:	7bfb      	ldrb	r3, [r7, #15]
 800dd2c:	2b3a      	cmp	r3, #58	@ 0x3a
 800dd2e:	d1f4      	bne.n	800dd1a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
 800dd32:	2b3a      	cmp	r3, #58	@ 0x3a
 800dd34:	d11c      	bne.n	800dd70 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800dd36:	2301      	movs	r3, #1
 800dd38:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd40:	d90c      	bls.n	800dd5c <get_ldnumber+0x64>
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	2b39      	cmp	r3, #57	@ 0x39
 800dd48:	d808      	bhi.n	800dd5c <get_ldnumber+0x64>
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	3302      	adds	r3, #2
 800dd4e:	69fa      	ldr	r2, [r7, #28]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d103      	bne.n	800dd5c <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	3b30      	subs	r3, #48	@ 0x30
 800dd5a:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800dd5c:	69bb      	ldr	r3, [r7, #24]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	dc04      	bgt.n	800dd6c <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800dd62:	69bb      	ldr	r3, [r7, #24]
 800dd64:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	69fa      	ldr	r2, [r7, #28]
 800dd6a:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	e003      	b.n	800dd78 <get_ldnumber+0x80>
		return vol;
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 800dd70:	4b04      	ldr	r3, [pc, #16]	@ (800dd84 <get_ldnumber+0x8c>)
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 800dd76:	697b      	ldr	r3, [r7, #20]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3724      	adds	r7, #36	@ 0x24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr
 800dd84:	240197ca 	.word	0x240197ca

0800dd88 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	711a      	strb	r2, [r3, #4]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd9e:	649a      	str	r2, [r3, #72]	@ 0x48
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800dda0:	6839      	ldr	r1, [r7, #0]
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7fd fa3e 	bl	800b224 <move_window>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d001      	beq.n	800ddb2 <check_fs+0x2a>
 800ddae:	2304      	movs	r3, #4
 800ddb0:	e099      	b.n	800dee6 <check_fs+0x15e>
	sign = ld_word(fs->win + BS_55AA);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	334c      	adds	r3, #76	@ 0x4c
 800ddb6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fc fda5 	bl	800a90a <ld_word>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800ddc4:	89fb      	ldrh	r3, [r7, #14]
 800ddc6:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d10b      	bne.n	800dde6 <check_fs+0x5e>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	334c      	adds	r3, #76	@ 0x4c
 800ddd2:	220b      	movs	r2, #11
 800ddd4:	4946      	ldr	r1, [pc, #280]	@ (800def0 <check_fs+0x168>)
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f014 f8b7 	bl	8021f4a <memcmp>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d101      	bne.n	800dde6 <check_fs+0x5e>
 800dde2:	2301      	movs	r3, #1
 800dde4:	e07f      	b.n	800dee6 <check_fs+0x15e>
#endif
	b = fs->win[BS_JmpBoot];
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ddec:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800ddee:	7b7b      	ldrb	r3, [r7, #13]
 800ddf0:	2beb      	cmp	r3, #235	@ 0xeb
 800ddf2:	d005      	beq.n	800de00 <check_fs+0x78>
 800ddf4:	7b7b      	ldrb	r3, [r7, #13]
 800ddf6:	2be9      	cmp	r3, #233	@ 0xe9
 800ddf8:	d002      	beq.n	800de00 <check_fs+0x78>
 800ddfa:	7b7b      	ldrb	r3, [r7, #13]
 800ddfc:	2be8      	cmp	r3, #232	@ 0xe8
 800ddfe:	d16a      	bne.n	800ded6 <check_fs+0x14e>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800de00:	89fb      	ldrh	r3, [r7, #14]
 800de02:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800de06:	4293      	cmp	r3, r2
 800de08:	d10c      	bne.n	800de24 <check_fs+0x9c>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	334c      	adds	r3, #76	@ 0x4c
 800de0e:	3352      	adds	r3, #82	@ 0x52
 800de10:	2208      	movs	r2, #8
 800de12:	4938      	ldr	r1, [pc, #224]	@ (800def4 <check_fs+0x16c>)
 800de14:	4618      	mov	r0, r3
 800de16:	f014 f898 	bl	8021f4a <memcmp>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d101      	bne.n	800de24 <check_fs+0x9c>
			return 0;	/* It is an FAT32 VBR */
 800de20:	2300      	movs	r3, #0
 800de22:	e060      	b.n	800dee6 <check_fs+0x15e>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	334c      	adds	r3, #76	@ 0x4c
 800de28:	330b      	adds	r3, #11
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fc fd6d 	bl	800a90a <ld_word>
 800de30:	4603      	mov	r3, r0
 800de32:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800de3a:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800de3c:	897a      	ldrh	r2, [r7, #10]
 800de3e:	897b      	ldrh	r3, [r7, #10]
 800de40:	3b01      	subs	r3, #1
 800de42:	4013      	ands	r3, r2
 800de44:	2b00      	cmp	r3, #0
 800de46:	d146      	bne.n	800ded6 <check_fs+0x14e>
 800de48:	897b      	ldrh	r3, [r7, #10]
 800de4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de4e:	d342      	bcc.n	800ded6 <check_fs+0x14e>
 800de50:	897b      	ldrh	r3, [r7, #10]
 800de52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de56:	d83e      	bhi.n	800ded6 <check_fs+0x14e>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800de58:	7b7b      	ldrb	r3, [r7, #13]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d03b      	beq.n	800ded6 <check_fs+0x14e>
 800de5e:	7b7a      	ldrb	r2, [r7, #13]
 800de60:	7b7b      	ldrb	r3, [r7, #13]
 800de62:	3b01      	subs	r3, #1
 800de64:	4013      	ands	r3, r2
 800de66:	2b00      	cmp	r3, #0
 800de68:	d135      	bne.n	800ded6 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	334c      	adds	r3, #76	@ 0x4c
 800de6e:	330e      	adds	r3, #14
 800de70:	4618      	mov	r0, r3
 800de72:	f7fc fd4a 	bl	800a90a <ld_word>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d02c      	beq.n	800ded6 <check_fs+0x14e>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800de82:	3b01      	subs	r3, #1
 800de84:	2b01      	cmp	r3, #1
 800de86:	d826      	bhi.n	800ded6 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	334c      	adds	r3, #76	@ 0x4c
 800de8c:	3311      	adds	r3, #17
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fc fd3b 	bl	800a90a <ld_word>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d01d      	beq.n	800ded6 <check_fs+0x14e>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	334c      	adds	r3, #76	@ 0x4c
 800de9e:	3313      	adds	r3, #19
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fc fd32 	bl	800a90a <ld_word>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b7f      	cmp	r3, #127	@ 0x7f
 800deaa:	d809      	bhi.n	800dec0 <check_fs+0x138>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	334c      	adds	r3, #76	@ 0x4c
 800deb0:	3320      	adds	r3, #32
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fc fd42 	bl	800a93c <ld_dword>
 800deb8:	4603      	mov	r3, r0
 800deba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800debe:	d30a      	bcc.n	800ded6 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	334c      	adds	r3, #76	@ 0x4c
 800dec4:	3316      	adds	r3, #22
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fc fd1f 	bl	800a90a <ld_word>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <check_fs+0x14e>
				return 0;	/* It can be presumed an FAT VBR */
 800ded2:	2300      	movs	r3, #0
 800ded4:	e007      	b.n	800dee6 <check_fs+0x15e>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800ded6:	89fb      	ldrh	r3, [r7, #14]
 800ded8:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800dedc:	4293      	cmp	r3, r2
 800dede:	d101      	bne.n	800dee4 <check_fs+0x15c>
 800dee0:	2302      	movs	r3, #2
 800dee2:	e000      	b.n	800dee6 <check_fs+0x15e>
 800dee4:	2303      	movs	r3, #3
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	08025578 	.word	0x08025578
 800def4:	08025584 	.word	0x08025584

0800def8 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b088      	sub	sp, #32
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800df02:	2100      	movs	r1, #0
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7ff ff3f 	bl	800dd88 <check_fs>
 800df0a:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	2b02      	cmp	r3, #2
 800df10:	d007      	beq.n	800df22 <find_volume+0x2a>
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	2b02      	cmp	r3, #2
 800df16:	d802      	bhi.n	800df1e <find_volume+0x26>
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d101      	bne.n	800df22 <find_volume+0x2a>
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	e045      	b.n	800dfae <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800df22:	2300      	movs	r3, #0
 800df24:	61fb      	str	r3, [r7, #28]
 800df26:	e014      	b.n	800df52 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	011b      	lsls	r3, r3, #4
 800df32:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800df36:	4413      	add	r3, r2
 800df38:	4618      	mov	r0, r3
 800df3a:	f7fc fcff 	bl	800a93c <ld_dword>
 800df3e:	4602      	mov	r2, r0
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	3320      	adds	r3, #32
 800df46:	443b      	add	r3, r7
 800df48:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	3301      	adds	r3, #1
 800df50:	61fb      	str	r3, [r7, #28]
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	2b03      	cmp	r3, #3
 800df56:	d9e7      	bls.n	800df28 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d002      	beq.n	800df64 <find_volume+0x6c>
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	3b01      	subs	r3, #1
 800df62:	e000      	b.n	800df66 <find_volume+0x6e>
 800df64:	2300      	movs	r3, #0
 800df66:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	3320      	adds	r3, #32
 800df6e:	443b      	add	r3, r7
 800df70:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00b      	beq.n	800df90 <find_volume+0x98>
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	3320      	adds	r3, #32
 800df7e:	443b      	add	r3, r7
 800df80:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800df84:	4619      	mov	r1, r3
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f7ff fefe 	bl	800dd88 <check_fs>
 800df8c:	4603      	mov	r3, r0
 800df8e:	e000      	b.n	800df92 <find_volume+0x9a>
 800df90:	2303      	movs	r3, #3
 800df92:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d108      	bne.n	800dfac <find_volume+0xb4>
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d905      	bls.n	800dfac <find_volume+0xb4>
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	61fb      	str	r3, [r7, #28]
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	2b03      	cmp	r3, #3
 800dfaa:	d9dd      	bls.n	800df68 <find_volume+0x70>
	return fmt;
 800dfac:	69bb      	ldr	r3, [r7, #24]
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3720      	adds	r7, #32
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
	...

0800dfb8 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800dfb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dfbc:	b09a      	sub	sp, #104	@ 0x68
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	61f8      	str	r0, [r7, #28]
 800dfc2:	61b9      	str	r1, [r7, #24]
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	75fb      	strb	r3, [r7, #23]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dfce:	69f8      	ldr	r0, [r7, #28]
 800dfd0:	f7ff fe92 	bl	800dcf8 <get_ldnumber>
 800dfd4:	64b8      	str	r0, [r7, #72]	@ 0x48
	if (vol < 0) return FR_INVALID_DRIVE;
 800dfd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	da01      	bge.n	800dfe0 <mount_volume+0x28>
 800dfdc:	230b      	movs	r3, #11
 800dfde:	e327      	b.n	800e630 <mount_volume+0x678>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800dfe0:	4aa0      	ldr	r2, [pc, #640]	@ (800e264 <mount_volume+0x2ac>)
 800dfe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfe8:	647b      	str	r3, [r7, #68]	@ 0x44
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800dfea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d101      	bne.n	800dff4 <mount_volume+0x3c>
 800dff0:	230c      	movs	r3, #12
 800dff2:	e31d      	b.n	800e630 <mount_volume+0x678>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
 800dff4:	2101      	movs	r1, #1
 800dff6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800dff8:	f7fc ff0c 	bl	800ae14 <lock_volume>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d101      	bne.n	800e006 <mount_volume+0x4e>
 800e002:	230f      	movs	r3, #15
 800e004:	e314      	b.n	800e630 <mount_volume+0x678>
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e00a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e00c:	7dfb      	ldrb	r3, [r7, #23]
 800e00e:	f023 0301 	bic.w	r3, r3, #1
 800e012:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800e014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d01a      	beq.n	800e052 <mount_volume+0x9a>
		stat = disk_status(fs->pdrv);
 800e01c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e01e:	785b      	ldrb	r3, [r3, #1]
 800e020:	4618      	mov	r0, r3
 800e022:	f7fc fbc7 	bl	800a7b4 <disk_status>
 800e026:	4603      	mov	r3, r0
 800e028:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e02c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e030:	f003 0301 	and.w	r3, r3, #1
 800e034:	2b00      	cmp	r3, #0
 800e036:	d10c      	bne.n	800e052 <mount_volume+0x9a>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e038:	7dfb      	ldrb	r3, [r7, #23]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d007      	beq.n	800e04e <mount_volume+0x96>
 800e03e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e042:	f003 0304 	and.w	r3, r3, #4
 800e046:	2b00      	cmp	r3, #0
 800e048:	d001      	beq.n	800e04e <mount_volume+0x96>
				return FR_WRITE_PROTECTED;
 800e04a:	230a      	movs	r3, #10
 800e04c:	e2f0      	b.n	800e630 <mount_volume+0x678>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800e04e:	2300      	movs	r3, #0
 800e050:	e2ee      	b.n	800e630 <mount_volume+0x678>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800e052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e054:	2200      	movs	r2, #0
 800e056:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800e058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e05a:	785b      	ldrb	r3, [r3, #1]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fc fbc4 	bl	800a7ea <disk_initialize>
 800e062:	4603      	mov	r3, r0
 800e064:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e068:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e06c:	f003 0301 	and.w	r3, r3, #1
 800e070:	2b00      	cmp	r3, #0
 800e072:	d001      	beq.n	800e078 <mount_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e074:	2303      	movs	r3, #3
 800e076:	e2db      	b.n	800e630 <mount_volume+0x678>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e078:	7dfb      	ldrb	r3, [r7, #23]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d007      	beq.n	800e08e <mount_volume+0xd6>
 800e07e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e082:	f003 0304 	and.w	r3, r3, #4
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <mount_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800e08a:	230a      	movs	r3, #10
 800e08c:	e2d0      	b.n	800e630 <mount_volume+0x678>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800e08e:	2100      	movs	r1, #0
 800e090:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e092:	f7ff ff31 	bl	800def8 <find_volume>
 800e096:	65b8      	str	r0, [r7, #88]	@ 0x58
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800e098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e09a:	2b04      	cmp	r3, #4
 800e09c:	d101      	bne.n	800e0a2 <mount_volume+0xea>
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e2c6      	b.n	800e630 <mount_volume+0x678>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e0a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d901      	bls.n	800e0ac <mount_volume+0xf4>
 800e0a8:	230d      	movs	r3, #13
 800e0aa:	e2c1      	b.n	800e630 <mount_volume+0x678>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800e0ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 800e0b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	f040 813d 	bne.w	800e334 <mount_volume+0x37c>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800e0ba:	230b      	movs	r3, #11
 800e0bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0be:	e002      	b.n	800e0c6 <mount_volume+0x10e>
 800e0c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0c8:	2b3f      	cmp	r3, #63	@ 0x3f
 800e0ca:	d806      	bhi.n	800e0da <mount_volume+0x122>
 800e0cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0d0:	4413      	add	r3, r2
 800e0d2:	334c      	adds	r3, #76	@ 0x4c
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d0f2      	beq.n	800e0c0 <mount_volume+0x108>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800e0da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0dc:	2b3f      	cmp	r3, #63	@ 0x3f
 800e0de:	d801      	bhi.n	800e0e4 <mount_volume+0x12c>
 800e0e0:	230d      	movs	r3, #13
 800e0e2:	e2a5      	b.n	800e630 <mount_volume+0x678>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800e0e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0e6:	334c      	adds	r3, #76	@ 0x4c
 800e0e8:	3368      	adds	r3, #104	@ 0x68
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fc fc0d 	bl	800a90a <ld_word>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0f6:	d001      	beq.n	800e0fc <mount_volume+0x144>
 800e0f8:	230d      	movs	r3, #13
 800e0fa:	e299      	b.n	800e630 <mount_volume+0x678>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800e0fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0fe:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800e102:	2b09      	cmp	r3, #9
 800e104:	d001      	beq.n	800e10a <mount_volume+0x152>
			return FR_NO_FILESYSTEM;
 800e106:	230d      	movs	r3, #13
 800e108:	e292      	b.n	800e630 <mount_volume+0x678>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 800e10a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e10c:	334c      	adds	r3, #76	@ 0x4c
 800e10e:	3348      	adds	r3, #72	@ 0x48
 800e110:	4618      	mov	r0, r3
 800e112:	f7fc fc36 	bl	800a982 <ld_qword>
 800e116:	4602      	mov	r2, r0
 800e118:	460b      	mov	r3, r1
 800e11a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e11c:	2000      	movs	r0, #0
 800e11e:	60b9      	str	r1, [r7, #8]
 800e120:	60f8      	str	r0, [r7, #12]
 800e122:	68b9      	ldr	r1, [r7, #8]
 800e124:	1851      	adds	r1, r2, r1
 800e126:	6039      	str	r1, [r7, #0]
 800e128:	68f9      	ldr	r1, [r7, #12]
 800e12a:	eb43 0101 	adc.w	r1, r3, r1
 800e12e:	6079      	str	r1, [r7, #4]
 800e130:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e134:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 800e138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d301      	bcc.n	800e144 <mount_volume+0x18c>
 800e140:	230d      	movs	r3, #13
 800e142:	e275      	b.n	800e630 <mount_volume+0x678>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800e144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e146:	334c      	adds	r3, #76	@ 0x4c
 800e148:	3354      	adds	r3, #84	@ 0x54
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fc fbf6 	bl	800a93c <ld_dword>
 800e150:	4602      	mov	r2, r0
 800e152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e154:	631a      	str	r2, [r3, #48]	@ 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800e156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e158:	f893 20ba 	ldrb.w	r2, [r3, #186]	@ 0xba
 800e15c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e15e:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800e160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e162:	78db      	ldrb	r3, [r3, #3]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d001      	beq.n	800e16c <mount_volume+0x1b4>
 800e168:	230d      	movs	r3, #13
 800e16a:	e261      	b.n	800e630 <mount_volume+0x678>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800e16c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e16e:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800e172:	461a      	mov	r2, r3
 800e174:	2301      	movs	r3, #1
 800e176:	4093      	lsls	r3, r2
 800e178:	b29a      	uxth	r2, r3
 800e17a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e17c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 800e17e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e180:	895b      	ldrh	r3, [r3, #10]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d101      	bne.n	800e18a <mount_volume+0x1d2>
 800e186:	230d      	movs	r3, #13
 800e188:	e252      	b.n	800e630 <mount_volume+0x678>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800e18a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e18c:	334c      	adds	r3, #76	@ 0x4c
 800e18e:	335c      	adds	r3, #92	@ 0x5c
 800e190:	4618      	mov	r0, r3
 800e192:	f7fc fbd3 	bl	800a93c <ld_dword>
 800e196:	6338      	str	r0, [r7, #48]	@ 0x30
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800e198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19a:	4a33      	ldr	r2, [pc, #204]	@ (800e268 <mount_volume+0x2b0>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d901      	bls.n	800e1a4 <mount_volume+0x1ec>
 800e1a0:	230d      	movs	r3, #13
 800e1a2:	e245      	b.n	800e630 <mount_volume+0x678>
		fs->n_fatent = nclst + 2;
 800e1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a6:	1c9a      	adds	r2, r3, #2
 800e1a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1aa:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800e1ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e1b0:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800e1b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1b4:	334c      	adds	r3, #76	@ 0x4c
 800e1b6:	3358      	adds	r3, #88	@ 0x58
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fc fbbf 	bl	800a93c <ld_dword>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1c2:	441a      	add	r2, r3
 800e1c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1c6:	641a      	str	r2, [r3, #64]	@ 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800e1c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ca:	334c      	adds	r3, #76	@ 0x4c
 800e1cc:	3350      	adds	r3, #80	@ 0x50
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fc fbb4 	bl	800a93c <ld_dword>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1d8:	441a      	add	r2, r3
 800e1da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1dc:	639a      	str	r2, [r3, #56]	@ 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800e1de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	469a      	mov	sl, r3
 800e1e6:	4693      	mov	fp, r2
 800e1e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ea:	895b      	ldrh	r3, [r3, #10]
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f0:	fb02 f303 	mul.w	r3, r2, r3
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	4698      	mov	r8, r3
 800e1f8:	4691      	mov	r9, r2
 800e1fa:	eb1a 0408 	adds.w	r4, sl, r8
 800e1fe:	eb4b 0509 	adc.w	r5, fp, r9
 800e202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e206:	42a2      	cmp	r2, r4
 800e208:	41ab      	sbcs	r3, r5
 800e20a:	d201      	bcs.n	800e210 <mount_volume+0x258>
 800e20c:	230d      	movs	r3, #13
 800e20e:	e20f      	b.n	800e630 <mount_volume+0x678>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800e210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e212:	334c      	adds	r3, #76	@ 0x4c
 800e214:	3360      	adds	r3, #96	@ 0x60
 800e216:	4618      	mov	r0, r3
 800e218:	f7fc fb90 	bl	800a93c <ld_dword>
 800e21c:	4602      	mov	r2, r0
 800e21e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e220:	63da      	str	r2, [r3, #60]	@ 0x3c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 800e222:	2300      	movs	r3, #0
 800e224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e228:	657b      	str	r3, [r7, #84]	@ 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 800e22a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d120      	bne.n	800e272 <mount_volume+0x2ba>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 800e230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e232:	895b      	ldrh	r3, [r3, #10]
 800e234:	461a      	mov	r2, r3
 800e236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e238:	4293      	cmp	r3, r2
 800e23a:	d301      	bcc.n	800e240 <mount_volume+0x288>
 800e23c:	230d      	movs	r3, #13
 800e23e:	e1f7      	b.n	800e630 <mount_volume+0x678>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800e240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e244:	4619      	mov	r1, r3
 800e246:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e248:	f7fd f888 	bl	800b35c <clst2sect>
 800e24c:	4602      	mov	r2, r0
 800e24e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e250:	4413      	add	r3, r2
 800e252:	4619      	mov	r1, r3
 800e254:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e256:	f7fc ffe5 	bl	800b224 <move_window>
 800e25a:	4603      	mov	r3, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d005      	beq.n	800e26c <mount_volume+0x2b4>
 800e260:	2301      	movs	r3, #1
 800e262:	e1e5      	b.n	800e630 <mount_volume+0x678>
 800e264:	240197c4 	.word	0x240197c4
 800e268:	7ffffffd 	.word	0x7ffffffd
				so++;
 800e26c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e26e:	3301      	adds	r3, #1
 800e270:	657b      	str	r3, [r7, #84]	@ 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800e272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e276:	4413      	add	r3, r2
 800e278:	334c      	adds	r3, #76	@ 0x4c
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	2b81      	cmp	r3, #129	@ 0x81
 800e27e:	d005      	beq.n	800e28c <mount_volume+0x2d4>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800e280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e282:	3320      	adds	r3, #32
 800e284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e288:	64fb      	str	r3, [r7, #76]	@ 0x4c
			if (i == 0) {
 800e28a:	e7ce      	b.n	800e22a <mount_volume+0x272>
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800e28c:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 800e28e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e290:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800e294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e296:	3314      	adds	r3, #20
 800e298:	4413      	add	r3, r2
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fc fb4e 	bl	800a93c <ld_dword>
 800e2a0:	6538      	str	r0, [r7, #80]	@ 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 800e2a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d904      	bls.n	800e2b2 <mount_volume+0x2fa>
 800e2a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d301      	bcc.n	800e2b6 <mount_volume+0x2fe>
 800e2b2:	230d      	movs	r3, #13
 800e2b4:	e1bc      	b.n	800e630 <mount_volume+0x678>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800e2b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e2ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2bc:	895b      	ldrh	r3, [r3, #10]
 800e2be:	4619      	mov	r1, r3
 800e2c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2c2:	3b02      	subs	r3, #2
 800e2c4:	fb01 f303 	mul.w	r3, r1, r3
 800e2c8:	441a      	add	r2, r3
 800e2ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2cc:	645a      	str	r2, [r3, #68]	@ 0x44
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800e2ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2d4:	09db      	lsrs	r3, r3, #7
 800e2d6:	4413      	add	r3, r2
 800e2d8:	4619      	mov	r1, r3
 800e2da:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e2dc:	f7fc ffa2 	bl	800b224 <move_window>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <mount_volume+0x332>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e1a2      	b.n	800e630 <mount_volume+0x678>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800e2ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2ec:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800e2f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7fc fb1e 	bl	800a93c <ld_dword>
 800e300:	6278      	str	r0, [r7, #36]	@ 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800e302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e308:	d008      	beq.n	800e31c <mount_volume+0x364>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 800e30a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e30c:	3301      	adds	r3, #1
 800e30e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e310:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e314:	429a      	cmp	r2, r3
 800e316:	d0da      	beq.n	800e2ce <mount_volume+0x316>
 800e318:	230d      	movs	r3, #13
 800e31a:	e189      	b.n	800e630 <mount_volume+0x678>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800e31c:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e31e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e320:	f04f 32ff 	mov.w	r2, #4294967295
 800e324:	619a      	str	r2, [r3, #24]
 800e326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e328:	699a      	ldr	r2, [r3, #24]
 800e32a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e32c:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800e32e:	2304      	movs	r3, #4
 800e330:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e332:	e168      	b.n	800e606 <mount_volume+0x64e>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e336:	334c      	adds	r3, #76	@ 0x4c
 800e338:	330b      	adds	r3, #11
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7fc fae5 	bl	800a90a <ld_word>
 800e340:	4603      	mov	r3, r0
 800e342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e346:	d001      	beq.n	800e34c <mount_volume+0x394>
 800e348:	230d      	movs	r3, #13
 800e34a:	e171      	b.n	800e630 <mount_volume+0x678>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e34c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e34e:	334c      	adds	r3, #76	@ 0x4c
 800e350:	3316      	adds	r3, #22
 800e352:	4618      	mov	r0, r3
 800e354:	f7fc fad9 	bl	800a90a <ld_word>
 800e358:	4603      	mov	r3, r0
 800e35a:	663b      	str	r3, [r7, #96]	@ 0x60
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e35c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d106      	bne.n	800e370 <mount_volume+0x3b8>
 800e362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e364:	334c      	adds	r3, #76	@ 0x4c
 800e366:	3324      	adds	r3, #36	@ 0x24
 800e368:	4618      	mov	r0, r3
 800e36a:	f7fc fae7 	bl	800a93c <ld_dword>
 800e36e:	6638      	str	r0, [r7, #96]	@ 0x60
		fs->fsize = fasize;
 800e370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e372:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e374:	631a      	str	r2, [r3, #48]	@ 0x30

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e378:	f893 205c 	ldrb.w	r2, [r3, #92]	@ 0x5c
 800e37c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e37e:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e382:	78db      	ldrb	r3, [r3, #3]
 800e384:	2b01      	cmp	r3, #1
 800e386:	d005      	beq.n	800e394 <mount_volume+0x3dc>
 800e388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e38a:	78db      	ldrb	r3, [r3, #3]
 800e38c:	2b02      	cmp	r3, #2
 800e38e:	d001      	beq.n	800e394 <mount_volume+0x3dc>
 800e390:	230d      	movs	r3, #13
 800e392:	e14d      	b.n	800e630 <mount_volume+0x678>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e396:	78db      	ldrb	r3, [r3, #3]
 800e398:	461a      	mov	r2, r3
 800e39a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e39c:	fb02 f303 	mul.w	r3, r2, r3
 800e3a0:	663b      	str	r3, [r7, #96]	@ 0x60

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e3a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3a4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e3ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3b0:	895b      	ldrh	r3, [r3, #10]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d008      	beq.n	800e3c8 <mount_volume+0x410>
 800e3b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3b8:	895b      	ldrh	r3, [r3, #10]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3be:	895b      	ldrh	r3, [r3, #10]
 800e3c0:	3b01      	subs	r3, #1
 800e3c2:	4013      	ands	r3, r2
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d001      	beq.n	800e3cc <mount_volume+0x414>
 800e3c8:	230d      	movs	r3, #13
 800e3ca:	e131      	b.n	800e630 <mount_volume+0x678>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e3cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3ce:	334c      	adds	r3, #76	@ 0x4c
 800e3d0:	3311      	adds	r3, #17
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fc fa99 	bl	800a90a <ld_word>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	461a      	mov	r2, r3
 800e3dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e3e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3e2:	891b      	ldrh	r3, [r3, #8]
 800e3e4:	f003 030f 	and.w	r3, r3, #15
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d001      	beq.n	800e3f2 <mount_volume+0x43a>
 800e3ee:	230d      	movs	r3, #13
 800e3f0:	e11e      	b.n	800e630 <mount_volume+0x678>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e3f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3f4:	334c      	adds	r3, #76	@ 0x4c
 800e3f6:	3313      	adds	r3, #19
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fc fa86 	bl	800a90a <ld_word>
 800e3fe:	4603      	mov	r3, r0
 800e400:	667b      	str	r3, [r7, #100]	@ 0x64
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e404:	2b00      	cmp	r3, #0
 800e406:	d106      	bne.n	800e416 <mount_volume+0x45e>
 800e408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e40a:	334c      	adds	r3, #76	@ 0x4c
 800e40c:	3320      	adds	r3, #32
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fc fa94 	bl	800a93c <ld_dword>
 800e414:	6678      	str	r0, [r7, #100]	@ 0x64

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e418:	334c      	adds	r3, #76	@ 0x4c
 800e41a:	330e      	adds	r3, #14
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fc fa74 	bl	800a90a <ld_word>
 800e422:	4603      	mov	r3, r0
 800e424:	877b      	strh	r3, [r7, #58]	@ 0x3a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e426:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <mount_volume+0x478>
 800e42c:	230d      	movs	r3, #13
 800e42e:	e0ff      	b.n	800e630 <mount_volume+0x678>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e430:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e434:	4413      	add	r3, r2
 800e436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e438:	8912      	ldrh	r2, [r2, #8]
 800e43a:	0912      	lsrs	r2, r2, #4
 800e43c:	b292      	uxth	r2, r2
 800e43e:	4413      	add	r3, r2
 800e440:	637b      	str	r3, [r7, #52]	@ 0x34
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e442:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e446:	429a      	cmp	r2, r3
 800e448:	d201      	bcs.n	800e44e <mount_volume+0x496>
 800e44a:	230d      	movs	r3, #13
 800e44c:	e0f0      	b.n	800e630 <mount_volume+0x678>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e44e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e452:	1ad3      	subs	r3, r2, r3
 800e454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e456:	8952      	ldrh	r2, [r2, #10]
 800e458:	fbb3 f3f2 	udiv	r3, r3, r2
 800e45c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e460:	2b00      	cmp	r3, #0
 800e462:	d101      	bne.n	800e468 <mount_volume+0x4b0>
 800e464:	230d      	movs	r3, #13
 800e466:	e0e3      	b.n	800e630 <mount_volume+0x678>
		fmt = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800e46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e46e:	4a73      	ldr	r2, [pc, #460]	@ (800e63c <mount_volume+0x684>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d801      	bhi.n	800e478 <mount_volume+0x4c0>
 800e474:	2303      	movs	r3, #3
 800e476:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e47a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e47e:	4293      	cmp	r3, r2
 800e480:	d801      	bhi.n	800e486 <mount_volume+0x4ce>
 800e482:	2302      	movs	r3, #2
 800e484:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e488:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d801      	bhi.n	800e494 <mount_volume+0x4dc>
 800e490:	2301      	movs	r3, #1
 800e492:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800e494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e496:	2b00      	cmp	r3, #0
 800e498:	d101      	bne.n	800e49e <mount_volume+0x4e6>
 800e49a:	230d      	movs	r3, #13
 800e49c:	e0c8      	b.n	800e630 <mount_volume+0x678>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a0:	1c9a      	adds	r2, r3, #2
 800e4a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4a4:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800e4a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e4aa:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e4ac:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4b0:	441a      	add	r2, r3
 800e4b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4b4:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 800e4b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4ba:	441a      	add	r2, r3
 800e4bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4be:	641a      	str	r2, [r3, #64]	@ 0x40
		if (fmt == FS_FAT32) {
 800e4c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4c2:	2b03      	cmp	r3, #3
 800e4c4:	d11e      	bne.n	800e504 <mount_volume+0x54c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e4c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4c8:	334c      	adds	r3, #76	@ 0x4c
 800e4ca:	332a      	adds	r3, #42	@ 0x2a
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fc fa1c 	bl	800a90a <ld_word>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <mount_volume+0x524>
 800e4d8:	230d      	movs	r3, #13
 800e4da:	e0a9      	b.n	800e630 <mount_volume+0x678>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e4dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4de:	891b      	ldrh	r3, [r3, #8]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d001      	beq.n	800e4e8 <mount_volume+0x530>
 800e4e4:	230d      	movs	r3, #13
 800e4e6:	e0a3      	b.n	800e630 <mount_volume+0x678>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e4e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4ea:	334c      	adds	r3, #76	@ 0x4c
 800e4ec:	332c      	adds	r3, #44	@ 0x2c
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fc fa24 	bl	800a93c <ld_dword>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4f8:	63da      	str	r2, [r3, #60]	@ 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e4fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e502:	e01e      	b.n	800e542 <mount_volume+0x58a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800e504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e506:	891b      	ldrh	r3, [r3, #8]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d101      	bne.n	800e510 <mount_volume+0x558>
 800e50c:	230d      	movs	r3, #13
 800e50e:	e08f      	b.n	800e630 <mount_volume+0x678>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e514:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e516:	441a      	add	r2, r3
 800e518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e51a:	63da      	str	r2, [r3, #60]	@ 0x3c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e51c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e51e:	2b02      	cmp	r3, #2
 800e520:	d103      	bne.n	800e52a <mount_volume+0x572>
 800e522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e526:	005b      	lsls	r3, r3, #1
 800e528:	e00a      	b.n	800e540 <mount_volume+0x588>
 800e52a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e52c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e52e:	4613      	mov	r3, r2
 800e530:	005b      	lsls	r3, r3, #1
 800e532:	4413      	add	r3, r2
 800e534:	085a      	lsrs	r2, r3, #1
 800e536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e53a:	f003 0301 	and.w	r3, r3, #1
 800e53e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e540:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e548:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e54c:	0a5b      	lsrs	r3, r3, #9
 800e54e:	429a      	cmp	r2, r3
 800e550:	d201      	bcs.n	800e556 <mount_volume+0x59e>
 800e552:	230d      	movs	r3, #13
 800e554:	e06c      	b.n	800e630 <mount_volume+0x678>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e558:	f04f 32ff 	mov.w	r2, #4294967295
 800e55c:	619a      	str	r2, [r3, #24]
 800e55e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e560:	699a      	ldr	r2, [r3, #24]
 800e562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e564:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e568:	2280      	movs	r2, #128	@ 0x80
 800e56a:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800e56c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e56e:	2b03      	cmp	r3, #3
 800e570:	d149      	bne.n	800e606 <mount_volume+0x64e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e574:	334c      	adds	r3, #76	@ 0x4c
 800e576:	3330      	adds	r3, #48	@ 0x30
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fc f9c6 	bl	800a90a <ld_word>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b01      	cmp	r3, #1
 800e582:	d140      	bne.n	800e606 <mount_volume+0x64e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e586:	3301      	adds	r3, #1
 800e588:	4619      	mov	r1, r3
 800e58a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e58c:	f7fc fe4a 	bl	800b224 <move_window>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d137      	bne.n	800e606 <mount_volume+0x64e>
		{
			fs->fsi_flag = 0;
 800e596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e598:	2200      	movs	r2, #0
 800e59a:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800e59c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e59e:	334c      	adds	r3, #76	@ 0x4c
 800e5a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fc f9b0 	bl	800a90a <ld_word>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d127      	bne.n	800e606 <mount_volume+0x64e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e5b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5b8:	334c      	adds	r3, #76	@ 0x4c
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fc f9be 	bl	800a93c <ld_dword>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	4a1f      	ldr	r2, [pc, #124]	@ (800e640 <mount_volume+0x688>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d11e      	bne.n	800e606 <mount_volume+0x64e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e5c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5ca:	334c      	adds	r3, #76	@ 0x4c
 800e5cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fc f9b3 	bl	800a93c <ld_dword>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	4a1a      	ldr	r2, [pc, #104]	@ (800e644 <mount_volume+0x68c>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d113      	bne.n	800e606 <mount_volume+0x64e>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e5de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5e0:	334c      	adds	r3, #76	@ 0x4c
 800e5e2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fc f9a8 	bl	800a93c <ld_dword>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5f0:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e5f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5f4:	334c      	adds	r3, #76	@ 0x4c
 800e5f6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fc f99e 	bl	800a93c <ld_dword>
 800e600:	4602      	mov	r2, r0
 800e602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e604:	615a      	str	r2, [r3, #20]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800e606:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e608:	b2da      	uxtb	r2, r3
 800e60a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e60c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800e60e:	4b0e      	ldr	r3, [pc, #56]	@ (800e648 <mount_volume+0x690>)
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	3301      	adds	r3, #1
 800e614:	b29a      	uxth	r2, r3
 800e616:	4b0c      	ldr	r3, [pc, #48]	@ (800e648 <mount_volume+0x690>)
 800e618:	801a      	strh	r2, [r3, #0]
 800e61a:	4b0b      	ldr	r3, [pc, #44]	@ (800e648 <mount_volume+0x690>)
 800e61c:	881a      	ldrh	r2, [r3, #0]
 800e61e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e620:	80da      	strh	r2, [r3, #6]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800e622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e624:	2200      	movs	r2, #0
 800e626:	61da      	str	r2, [r3, #28]
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
 800e628:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e62a:	f7fc fd9b 	bl	800b164 <clear_share>
#endif
	return FR_OK;
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3768      	adds	r7, #104	@ 0x68
 800e634:	46bd      	mov	sp, r7
 800e636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e63a:	bf00      	nop
 800e63c:	0ffffff5 	.word	0x0ffffff5
 800e640:	41615252 	.word	0x41615252
 800e644:	61417272 	.word	0x61417272
 800e648:	240197c8 	.word	0x240197c8

0800e64c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e656:	2309      	movs	r3, #9
 800e658:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d02f      	beq.n	800e6c0 <validate+0x74>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d02b      	beq.n	800e6c0 <validate+0x74>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d026      	beq.n	800e6c0 <validate+0x74>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	889a      	ldrh	r2, [r3, #4]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	88db      	ldrh	r3, [r3, #6]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d11f      	bne.n	800e6c0 <validate+0x74>
#if FF_FS_REENTRANT
		if (lock_volume(obj->fs, 0)) {	/* Take a grant to access the volume */
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2100      	movs	r1, #0
 800e686:	4618      	mov	r0, r3
 800e688:	f7fc fbc4 	bl	800ae14 <lock_volume>
 800e68c:	4603      	mov	r3, r0
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d014      	beq.n	800e6bc <validate+0x70>
			if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	785b      	ldrb	r3, [r3, #1]
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fc f88b 	bl	800a7b4 <disk_status>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	f003 0301 	and.w	r3, r3, #1
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d102      	bne.n	800e6ae <validate+0x62>
				res = FR_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	73fb      	strb	r3, [r7, #15]
 800e6ac:	e008      	b.n	800e6c0 <validate+0x74>
			} else {
				unlock_volume(obj->fs, FR_OK);	/* Invalidated volume, abort to access */
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fc fbdb 	bl	800ae70 <unlock_volume>
 800e6ba:	e001      	b.n	800e6c0 <validate+0x74>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
 800e6bc:	230f      	movs	r3, #15
 800e6be:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800e6c0:	7bfb      	ldrb	r3, [r7, #15]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d102      	bne.n	800e6cc <validate+0x80>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	e000      	b.n	800e6ce <validate+0x82>
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	683a      	ldr	r2, [r7, #0]
 800e6d0:	6013      	str	r3, [r2, #0]
	return res;
 800e6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b088      	sub	sp, #32
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800e6ee:	f107 0310 	add.w	r3, r7, #16
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7ff fb00 	bl	800dcf8 <get_ldnumber>
 800e6f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	da01      	bge.n	800e704 <f_mount+0x28>
 800e700:	230b      	movs	r3, #11
 800e702:	e059      	b.n	800e7b8 <f_mount+0xdc>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800e704:	4a2e      	ldr	r2, [pc, #184]	@ (800e7c0 <f_mount+0xe4>)
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e70c:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d00d      	beq.n	800e730 <f_mount+0x54>
		FatFs[vol] = 0;
 800e714:	4a2a      	ldr	r2, [pc, #168]	@ (800e7c0 <f_mount+0xe4>)
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	2100      	movs	r1, #0
 800e71a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if FF_FS_LOCK
		clear_share(cfs);
 800e71e:	69b8      	ldr	r0, [r7, #24]
 800e720:	f7fc fd20 	bl	800b164 <clear_share>
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
 800e724:	69f8      	ldr	r0, [r7, #28]
 800e726:	f001 feb7 	bl	8010498 <ff_mutex_delete>
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	2200      	movs	r2, #0
 800e72e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d02a      	beq.n	800e78c <f_mount+0xb0>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	69fa      	ldr	r2, [r7, #28]
 800e73a:	b2d2      	uxtb	r2, r2
 800e73c:	705a      	strb	r2, [r3, #1]
#if FF_FS_REENTRANT				/* Create a volume mutex */
		fs->ldrv = (BYTE)vol;	/* Owner volume ID */
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	69fa      	ldr	r2, [r7, #28]
 800e742:	b2d2      	uxtb	r2, r2
 800e744:	709a      	strb	r2, [r3, #2]
		if (!ff_mutex_create(vol)) return FR_INT_ERR;
 800e746:	69f8      	ldr	r0, [r7, #28]
 800e748:	f001 fe8a 	bl	8010460 <ff_mutex_create>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d101      	bne.n	800e756 <f_mount+0x7a>
 800e752:	2302      	movs	r3, #2
 800e754:	e030      	b.n	800e7b8 <f_mount+0xdc>
#if FF_FS_LOCK
		if (SysLock == 0) {		/* Create a system mutex if needed */
 800e756:	4b1b      	ldr	r3, [pc, #108]	@ (800e7c4 <f_mount+0xe8>)
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d10d      	bne.n	800e77c <f_mount+0xa0>
			if (!ff_mutex_create(FF_VOLUMES)) {
 800e760:	2001      	movs	r0, #1
 800e762:	f001 fe7d 	bl	8010460 <ff_mutex_create>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d104      	bne.n	800e776 <f_mount+0x9a>
				ff_mutex_delete(vol);
 800e76c:	69f8      	ldr	r0, [r7, #28]
 800e76e:	f001 fe93 	bl	8010498 <ff_mutex_delete>
				return FR_INT_ERR;
 800e772:	2302      	movs	r3, #2
 800e774:	e020      	b.n	800e7b8 <f_mount+0xdc>
			}
			SysLock = 1;		/* System mutex is ready */
 800e776:	4b13      	ldr	r3, [pc, #76]	@ (800e7c4 <f_mount+0xe8>)
 800e778:	2201      	movs	r2, #1
 800e77a:	701a      	strb	r2, [r3, #0]
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2200      	movs	r2, #0
 800e780:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	490e      	ldr	r1, [pc, #56]	@ (800e7c0 <f_mount+0xe4>)
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800e78c:	79fb      	ldrb	r3, [r7, #7]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d101      	bne.n	800e796 <f_mount+0xba>
 800e792:	2300      	movs	r3, #0
 800e794:	e010      	b.n	800e7b8 <f_mount+0xdc>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e796:	f107 010c 	add.w	r1, r7, #12
 800e79a:	f107 0308 	add.w	r3, r7, #8
 800e79e:	2200      	movs	r2, #0
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7ff fc09 	bl	800dfb8 <mount_volume>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	7dfa      	ldrb	r2, [r7, #23]
 800e7ae:	4611      	mov	r1, r2
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fc fb5d 	bl	800ae70 <unlock_volume>
 800e7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3720      	adds	r7, #32
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	240197c4 	.word	0x240197c4
 800e7c4:	2401980c 	.word	0x2401980c

0800e7c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800e7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7cc:	f2ad 4dfc 	subw	sp, sp, #1276	@ 0x4fc
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e7d6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e7da:	6018      	str	r0, [r3, #0]
 800e7dc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e7e0:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800e7e4:	6019      	str	r1, [r3, #0]
 800e7e6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e7ea:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e7ee:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e7f0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e7f4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d101      	bne.n	800e802 <f_open+0x3a>
 800e7fe:	2309      	movs	r3, #9
 800e800:	e386      	b.n	800ef10 <f_open+0x748>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800e802:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e806:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e80a:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800e80e:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800e812:	7812      	ldrb	r2, [r2, #0]
 800e814:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e818:	701a      	strb	r2, [r3, #0]
	res = mount_volume(&path, &fs, mode);
 800e81a:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e81e:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e822:	781a      	ldrb	r2, [r3, #0]
 800e824:	f207 4184 	addw	r1, r7, #1156	@ 0x484
 800e828:	f107 0318 	add.w	r3, r7, #24
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7ff fbc3 	bl	800dfb8 <mount_volume>
 800e832:	4603      	mov	r3, r0
 800e834:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
	if (res == FR_OK) {
 800e838:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f040 8352 	bne.w	800eee6 <f_open+0x71e>
		dj.obj.fs = fs;
 800e842:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e846:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
		INIT_NAMBUF(fs);
 800e84a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e84e:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 800e852:	60da      	str	r2, [r3, #12]
 800e854:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e858:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e85c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800e85e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e862:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e86c:	4611      	mov	r1, r2
 800e86e:	4618      	mov	r0, r3
 800e870:	f7ff f94a 	bl	800db08 <follow_path>
 800e874:	4603      	mov	r3, r0
 800e876:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800e87a:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d11c      	bne.n	800e8bc <f_open+0xf4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e882:	f897 34d3 	ldrb.w	r3, [r7, #1235]	@ 0x4d3
 800e886:	b25b      	sxtb	r3, r3
 800e888:	2b00      	cmp	r3, #0
 800e88a:	da03      	bge.n	800e894 <f_open+0xcc>
				res = FR_INVALID_NAME;
 800e88c:	2306      	movs	r3, #6
 800e88e:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800e892:	e013      	b.n	800e8bc <f_open+0xf4>
			}
#if FF_FS_LOCK
			else {
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
 800e894:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e898:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	bf8c      	ite	hi
 800e8a2:	2301      	movhi	r3, #1
 800e8a4:	2300      	movls	r3, #0
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e8ae:	4611      	mov	r1, r2
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fc fb0f 	bl	800aed4 <chk_share>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e8bc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e8c0:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	f003 031c 	and.w	r3, r3, #28
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	f000 811d 	beq.w	800eb0a <f_open+0x342>
			if (res != FR_OK) {					/* No file, create new */
 800e8d0:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d01f      	beq.n	800e918 <f_open+0x150>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e8d8:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e8dc:	2b04      	cmp	r3, #4
 800e8de:	d10e      	bne.n	800e8fe <f_open+0x136>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e8e0:	f7fc fb54 	bl	800af8c <enq_share>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d006      	beq.n	800e8f8 <f_open+0x130>
 800e8ea:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fe fb68 	bl	800cfc4 <dir_register>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	e000      	b.n	800e8fa <f_open+0x132>
 800e8f8:	2312      	movs	r3, #18
 800e8fa:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e8fe:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e902:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e906:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800e90a:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800e90e:	7812      	ldrb	r2, [r2, #0]
 800e910:	f042 0208 	orr.w	r2, r2, #8
 800e914:	701a      	strb	r2, [r3, #0]
 800e916:	e015      	b.n	800e944 <f_open+0x17c>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e918:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800e91c:	f003 0311 	and.w	r3, r3, #17
 800e920:	2b00      	cmp	r3, #0
 800e922:	d003      	beq.n	800e92c <f_open+0x164>
					res = FR_DENIED;
 800e924:	2307      	movs	r3, #7
 800e926:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800e92a:	e00b      	b.n	800e944 <f_open+0x17c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e92c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e930:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	f003 0304 	and.w	r3, r3, #4
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d002      	beq.n	800e944 <f_open+0x17c>
 800e93e:	2308      	movs	r3, #8
 800e940:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800e944:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e948:	2b00      	cmp	r3, #0
 800e94a:	f040 80fe 	bne.w	800eb4a <f_open+0x382>
 800e94e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e952:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	f003 0308 	and.w	r3, r3, #8
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f000 80f4 	beq.w	800eb4a <f_open+0x382>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800e962:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	2b04      	cmp	r3, #4
 800e96a:	d16f      	bne.n	800ea4c <f_open+0x284>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800e96c:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800e970:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e974:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 800e97c:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800e980:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800e984:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4619      	mov	r1, r3
 800e98c:	4610      	mov	r0, r2
 800e98e:	f7fd fffb 	bl	800c988 <init_alloc_info>
					/* Set directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 800e992:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e996:	691b      	ldr	r3, [r3, #16]
 800e998:	3302      	adds	r3, #2
 800e99a:	221e      	movs	r2, #30
 800e99c:	2100      	movs	r1, #0
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f013 fafd 	bl	8021f9e <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 800e9a4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e9a8:	691b      	ldr	r3, [r3, #16]
 800e9aa:	3326      	adds	r3, #38	@ 0x26
 800e9ac:	221a      	movs	r2, #26
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f013 faf4 	bl	8021f9e <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 800e9b6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e9ba:	691b      	ldr	r3, [r3, #16]
 800e9bc:	3304      	adds	r3, #4
 800e9be:	2220      	movs	r2, #32
 800e9c0:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 800e9c2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e9c6:	691b      	ldr	r3, [r3, #16]
 800e9c8:	f103 0408 	add.w	r4, r3, #8
 800e9cc:	f7fb ff95 	bl	800a8fa <get_fattime>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f7fc f8ca 	bl	800ab6e <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e9da:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800e9de:	691b      	ldr	r3, [r3, #16]
 800e9e0:	3321      	adds	r3, #33	@ 0x21
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800e9e6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7fe f82e 	bl	800ca4c <store_xdir>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 800e9f6:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f040 80a5 	bne.w	800eb4a <f_open+0x382>
 800ea00:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea04:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	689b      	ldr	r3, [r3, #8]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	f000 809c 	beq.w	800eb4a <f_open+0x382>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800ea12:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea16:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea1a:	6818      	ldr	r0, [r3, #0]
 800ea1c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea20:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	689b      	ldr	r3, [r3, #8]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	f7fd f810 	bl	800ba50 <remove_chain>
 800ea30:	4603      	mov	r3, r0
 800ea32:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800ea36:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ea3a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	689a      	ldr	r2, [r3, #8]
 800ea42:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ea46:	3a01      	subs	r2, #1
 800ea48:	615a      	str	r2, [r3, #20]
 800ea4a:	e07e      	b.n	800eb4a <f_open+0x382>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800ea4c:	f7fb ff55 	bl	800a8fa <get_fattime>
 800ea50:	f8c7 04e4 	str.w	r0, [r7, #1252]	@ 0x4e4
					st_dword(dj.dir + DIR_CrtTime, tm);
 800ea54:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800ea58:	330e      	adds	r3, #14
 800ea5a:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fc f885 	bl	800ab6e <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800ea64:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800ea68:	3316      	adds	r3, #22
 800ea6a:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	@ 0x4e4
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7fc f87d 	bl	800ab6e <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800ea74:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ea78:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800ea7c:	4611      	mov	r1, r2
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7fd fc16 	bl	800c2b0 <ld_clust>
 800ea84:	f8c7 04e0 	str.w	r0, [r7, #1248]	@ 0x4e0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ea88:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800ea8c:	330b      	adds	r3, #11
 800ea8e:	2220      	movs	r2, #32
 800ea90:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ea92:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ea96:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fd fc26 	bl	800c2ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eaa2:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800eaa6:	331c      	adds	r3, #28
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fc f85f 	bl	800ab6e <st_dword>
					fs->wflag = 1;
 800eab0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eab4:	2201      	movs	r2, #1
 800eab6:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800eab8:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d044      	beq.n	800eb4a <f_open+0x382>
						sc = fs->winsect;
 800eac0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eac6:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
						res = remove_chain(&dj.obj, cl, 0);
 800eaca:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800eace:	2200      	movs	r2, #0
 800ead0:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	@ 0x4e0
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7fc ffbb 	bl	800ba50 <remove_chain>
 800eada:	4603      	mov	r3, r0
 800eadc:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
						if (res == FR_OK) {
 800eae0:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d130      	bne.n	800eb4a <f_open+0x382>
							res = move_window(fs, sc);
 800eae8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eaec:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	@ 0x4dc
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fc fb97 	bl	800b224 <move_window>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800eafc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eb00:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	@ 0x4e0
 800eb04:	3a01      	subs	r2, #1
 800eb06:	615a      	str	r2, [r3, #20]
 800eb08:	e01f      	b.n	800eb4a <f_open+0x382>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800eb0a:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d11b      	bne.n	800eb4a <f_open+0x382>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800eb12:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800eb16:	f003 0310 	and.w	r3, r3, #16
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d003      	beq.n	800eb26 <f_open+0x35e>
					res = FR_NO_FILE;
 800eb1e:	2304      	movs	r3, #4
 800eb20:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800eb24:	e011      	b.n	800eb4a <f_open+0x382>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800eb26:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb2a:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	f003 0302 	and.w	r3, r3, #2
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d008      	beq.n	800eb4a <f_open+0x382>
 800eb38:	f897 348e 	ldrb.w	r3, [r7, #1166]	@ 0x48e
 800eb3c:	f003 0301 	and.w	r3, r3, #1
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d002      	beq.n	800eb4a <f_open+0x382>
						res = FR_DENIED;
 800eb44:	2307      	movs	r3, #7
 800eb46:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					}
				}
			}
		}
		if (res == FR_OK) {
 800eb4a:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d148      	bne.n	800ebe4 <f_open+0x41c>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800eb52:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb56:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	f003 0308 	and.w	r3, r3, #8
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00b      	beq.n	800eb7c <f_open+0x3b4>
 800eb64:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb68:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800eb6c:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800eb70:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800eb74:	7812      	ldrb	r2, [r2, #0]
 800eb76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb7a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800eb7c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800eb80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eb82:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb86:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800eb8e:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800eb92:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eb96:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	64da      	str	r2, [r3, #76]	@ 0x4c
#if FF_FS_LOCK
			fp->obj.lockid = inc_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 800eb9e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eba2:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	bf8c      	ite	hi
 800ebac:	2301      	movhi	r3, #1
 800ebae:	2300      	movls	r3, #0
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800ebb8:	4611      	mov	r1, r2
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fc fa08 	bl	800afd0 <inc_share>
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ebc6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 800ebce:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ebd2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d102      	bne.n	800ebe4 <f_open+0x41c>
 800ebde:	2302      	movs	r3, #2
 800ebe0:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ebe4:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	f040 817c 	bne.w	800eee6 <f_open+0x71e>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ebee:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	2b04      	cmp	r3, #4
 800ebf6:	d12b      	bne.n	800ec50 <f_open+0x488>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800ebf8:	f8d7 2490 	ldr.w	r2, [r7, #1168]	@ 0x490
 800ebfc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec00:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800ec08:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800ec0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec10:	4613      	mov	r3, r2
 800ec12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ec16:	f897 248f 	ldrb.w	r2, [r7, #1167]	@ 0x48f
 800ec1a:	431a      	orrs	r2, r3
 800ec1c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec20:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800ec28:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	@ 0x4d4
 800ec2c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec30:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 800ec38:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800ec3c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec40:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	4619      	mov	r1, r3
 800ec48:	4610      	mov	r0, r2
 800ec4a:	f7fd fe9d 	bl	800c988 <init_alloc_info>
 800ec4e:	e021      	b.n	800ec94 <f_open+0x4cc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ec50:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ec54:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 800ec58:	4611      	mov	r1, r2
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fd fb28 	bl	800c2b0 <ld_clust>
 800ec60:	4602      	mov	r2, r0
 800ec62:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec66:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ec6e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800ec72:	331c      	adds	r3, #28
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fb fe61 	bl	800a93c <ld_dword>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	60bb      	str	r3, [r7, #8]
 800ec80:	60fa      	str	r2, [r7, #12]
 800ec82:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec86:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ec90:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
 800ec94:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ec98:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 800eca2:	f8d7 2484 	ldr.w	r2, [r7, #1156]	@ 0x484
 800eca6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ecaa:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ecb2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ecb6:	88da      	ldrh	r2, [r3, #6]
 800ecb8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ecbc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 800ecc4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ecc8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 800ecd2:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800ecd6:	7812      	ldrb	r2, [r2, #0]
 800ecd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 800ecdc:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ece0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2200      	movs	r2, #0
 800ece8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 800ecec:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ecf0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
 800ecfa:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ecfe:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed02:	6819      	ldr	r1, [r3, #0]
 800ed04:	f04f 0200 	mov.w	r2, #0
 800ed08:	f04f 0300 	mov.w	r3, #0
 800ed0c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800ed10:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed14:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	3354      	adds	r3, #84	@ 0x54
 800ed1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed20:	2100      	movs	r1, #0
 800ed22:	4618      	mov	r0, r3
 800ed24:	f013 f93b 	bl	8021f9e <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ed28:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed2c:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	f003 0320 	and.w	r3, r3, #32
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	f000 80d5 	beq.w	800eee6 <f_open+0x71e>
 800ed3c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed40:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	f000 80cb 	beq.w	800eee6 <f_open+0x71e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ed50:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed54:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ed5e:	f507 619f 	add.w	r1, r7, #1272	@ 0x4f8
 800ed62:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800ed66:	6809      	ldr	r1, [r1, #0]
 800ed68:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ed6c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ed70:	895b      	ldrh	r3, [r3, #10]
 800ed72:	025b      	lsls	r3, r3, #9
 800ed74:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ed78:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed7c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	689b      	ldr	r3, [r3, #8]
 800ed84:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed88:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ed8c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ed96:	f507 619d 	add.w	r1, r7, #1256	@ 0x4e8
 800ed9a:	e9c1 2300 	strd	r2, r3, [r1]
 800ed9e:	e02e      	b.n	800edfe <f_open+0x636>
					clst = get_fat(&fp->obj, clst);
 800eda0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eda4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	@ 0x4f0
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fc faf4 	bl	800b39c <get_fat>
 800edb4:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
					if (clst <= 1) res = FR_INT_ERR;
 800edb8:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d802      	bhi.n	800edc6 <f_open+0x5fe>
 800edc0:	2302      	movs	r3, #2
 800edc2:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800edc6:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800edca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edce:	d102      	bne.n	800edd6 <f_open+0x60e>
 800edd0:	2301      	movs	r3, #1
 800edd2:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800edd6:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800edda:	2200      	movs	r2, #0
 800eddc:	461d      	mov	r5, r3
 800edde:	4616      	mov	r6, r2
 800ede0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800ede4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede8:	1b51      	subs	r1, r2, r5
 800edea:	6039      	str	r1, [r7, #0]
 800edec:	eb63 0306 	sbc.w	r3, r3, r6
 800edf0:	607b      	str	r3, [r7, #4]
 800edf2:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 800edf6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800edfa:	e9c2 3400 	strd	r3, r4, [r2]
 800edfe:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d10c      	bne.n	800ee20 <f_open+0x658>
 800ee06:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	469a      	mov	sl, r3
 800ee0e:	4693      	mov	fp, r2
 800ee10:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee18:	4592      	cmp	sl, r2
 800ee1a:	eb7b 0303 	sbcs.w	r3, fp, r3
 800ee1e:	d3bf      	bcc.n	800eda0 <f_open+0x5d8>
				}
				fp->clust = clst;
 800ee20:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ee24:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	@ 0x4f0
 800ee2e:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ee30:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d149      	bne.n	800eecc <f_open+0x704>
 800ee38:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800ee3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee40:	f3c2 0808 	ubfx	r8, r2, #0, #9
 800ee44:	f04f 0900 	mov.w	r9, #0
 800ee48:	ea58 0309 	orrs.w	r3, r8, r9
 800ee4c:	d03e      	beq.n	800eecc <f_open+0x704>
					sc = clst2sect(fs, clst);
 800ee4e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ee52:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	@ 0x4f0
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7fc fa80 	bl	800b35c <clst2sect>
 800ee5c:	f8c7 04dc 	str.w	r0, [r7, #1244]	@ 0x4dc
					if (sc == 0) {
 800ee60:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d103      	bne.n	800ee70 <f_open+0x6a8>
						res = FR_INT_ERR;
 800ee68:	2302      	movs	r3, #2
 800ee6a:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
 800ee6e:	e02d      	b.n	800eecc <f_open+0x704>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ee70:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800ee74:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ee78:	f04f 0200 	mov.w	r2, #0
 800ee7c:	f04f 0300 	mov.w	r3, #0
 800ee80:	0a42      	lsrs	r2, r0, #9
 800ee82:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ee86:	0a4b      	lsrs	r3, r1, #9
 800ee88:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 800ee8c:	441a      	add	r2, r3
 800ee8e:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800ee92:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	645a      	str	r2, [r3, #68]	@ 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ee9a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ee9e:	7858      	ldrb	r0, [r3, #1]
 800eea0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eea4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800eeae:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eeb2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eeba:	2301      	movs	r3, #1
 800eebc:	f7fb fcbe 	bl	800a83c <disk_read>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d002      	beq.n	800eecc <f_open+0x704>
 800eec6:	2301      	movs	r3, #1
 800eec8:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
#endif
					}
				}
#if FF_FS_LOCK
				if (res != FR_OK) dec_share(fp->obj.lockid); /* Decrement file open counter if seek failed */
 800eecc:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d008      	beq.n	800eee6 <f_open+0x71e>
 800eed4:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eed8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fc f903 	bl	800b0ec <dec_share>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eee6:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d006      	beq.n	800eefc <f_open+0x734>
 800eeee:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800eef2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2200      	movs	r2, #0
 800eefa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eefc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800ef00:	f897 24f7 	ldrb.w	r2, [r7, #1271]	@ 0x4f7
 800ef04:	4611      	mov	r1, r2
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fb ffb2 	bl	800ae70 <unlock_volume>
 800ef0c:	f897 34f7 	ldrb.w	r3, [r7, #1271]	@ 0x4f7
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	f207 47fc 	addw	r7, r7, #1276	@ 0x4fc
 800ef16:	46bd      	mov	sp, r7
 800ef18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef1c <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800ef1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef20:	b095      	sub	sp, #84	@ 0x54
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	61f8      	str	r0, [r7, #28]
 800ef26:	61b9      	str	r1, [r7, #24]
 800ef28:	617a      	str	r2, [r7, #20]
 800ef2a:	613b      	str	r3, [r7, #16]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	2200      	movs	r2, #0
 800ef34:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ef36:	69fb      	ldr	r3, [r7, #28]
 800ef38:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7ff fb84 	bl	800e64c <validate>
 800ef44:	4603      	mov	r3, r0
 800ef46:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ef4a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d108      	bne.n	800ef64 <f_read+0x48>
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ef58:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ef5c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d009      	beq.n	800ef78 <f_read+0x5c>
 800ef64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef66:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800ef6a:	4611      	mov	r1, r2
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7fb ff7f 	bl	800ae70 <unlock_volume>
 800ef72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ef76:	e173      	b.n	800f260 <f_read+0x344>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef7e:	f003 0301 	and.w	r3, r3, #1
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d106      	bne.n	800ef94 <f_read+0x78>
 800ef86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef88:	2107      	movs	r1, #7
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fb ff70 	bl	800ae70 <unlock_volume>
 800ef90:	2307      	movs	r3, #7
 800ef92:	e165      	b.n	800f260 <f_read+0x344>
	remain = fp->obj.objsize - fp->fptr;
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800efa0:	1a86      	subs	r6, r0, r2
 800efa2:	603e      	str	r6, [r7, #0]
 800efa4:	eb61 0303 	sbc.w	r3, r1, r3
 800efa8:	607b      	str	r3, [r7, #4]
 800efaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	2200      	movs	r2, #0
 800efb6:	469a      	mov	sl, r3
 800efb8:	4693      	mov	fp, r2
 800efba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800efbe:	4552      	cmp	r2, sl
 800efc0:	eb73 030b 	sbcs.w	r3, r3, fp
 800efc4:	f080 8142 	bcs.w	800f24c <f_read+0x330>
 800efc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efca:	617b      	str	r3, [r7, #20]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800efcc:	e13e      	b.n	800f24c <f_read+0x330>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800efd4:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800efd8:	2500      	movs	r5, #0
 800efda:	ea54 0305 	orrs.w	r3, r4, r5
 800efde:	f040 80f7 	bne.w	800f1d0 <f_read+0x2b4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800efe2:	69fb      	ldr	r3, [r7, #28]
 800efe4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800efe8:	f04f 0200 	mov.w	r2, #0
 800efec:	f04f 0300 	mov.w	r3, #0
 800eff0:	0a42      	lsrs	r2, r0, #9
 800eff2:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800eff6:	0a4b      	lsrs	r3, r1, #9
 800eff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800effa:	895b      	ldrh	r3, [r3, #10]
 800effc:	3b01      	subs	r3, #1
 800effe:	4013      	ands	r3, r2
 800f000:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800f002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f004:	2b00      	cmp	r3, #0
 800f006:	d13c      	bne.n	800f082 <f_read+0x166>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f00e:	4313      	orrs	r3, r2
 800f010:	d103      	bne.n	800f01a <f_read+0xfe>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f012:	69fb      	ldr	r3, [r7, #28]
 800f014:	689b      	ldr	r3, [r3, #8]
 800f016:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f018:	e013      	b.n	800f042 <f_read+0x126>
				} else {						/* Middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d007      	beq.n	800f032 <f_read+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f028:	69f8      	ldr	r0, [r7, #28]
 800f02a:	f7fc ff2e 	bl	800be8a <clmt_clust>
 800f02e:	64b8      	str	r0, [r7, #72]	@ 0x48
 800f030:	e007      	b.n	800f042 <f_read+0x126>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f032:	69fa      	ldr	r2, [r7, #28]
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f038:	4619      	mov	r1, r3
 800f03a:	4610      	mov	r0, r2
 800f03c:	f7fc f9ae 	bl	800b39c <get_fat>
 800f040:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f044:	2b01      	cmp	r3, #1
 800f046:	d80a      	bhi.n	800f05e <f_read+0x142>
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	2202      	movs	r2, #2
 800f04c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f052:	2102      	movs	r1, #2
 800f054:	4618      	mov	r0, r3
 800f056:	f7fb ff0b 	bl	800ae70 <unlock_volume>
 800f05a:	2302      	movs	r3, #2
 800f05c:	e100      	b.n	800f260 <f_read+0x344>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f05e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f064:	d10a      	bne.n	800f07c <f_read+0x160>
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	2201      	movs	r2, #1
 800f06a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f070:	2101      	movs	r1, #1
 800f072:	4618      	mov	r0, r3
 800f074:	f7fb fefc 	bl	800ae70 <unlock_volume>
 800f078:	2301      	movs	r3, #1
 800f07a:	e0f1      	b.n	800f260 <f_read+0x344>
				fp->clust = clst;				/* Update current cluster */
 800f07c:	69fb      	ldr	r3, [r7, #28]
 800f07e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f080:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800f082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f088:	4619      	mov	r1, r3
 800f08a:	4610      	mov	r0, r2
 800f08c:	f7fc f966 	bl	800b35c <clst2sect>
 800f090:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800f092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f094:	2b00      	cmp	r3, #0
 800f096:	d10a      	bne.n	800f0ae <f_read+0x192>
 800f098:	69fb      	ldr	r3, [r7, #28]
 800f09a:	2202      	movs	r2, #2
 800f09c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a2:	2102      	movs	r1, #2
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fb fee3 	bl	800ae70 <unlock_volume>
 800f0aa:	2302      	movs	r3, #2
 800f0ac:	e0d8      	b.n	800f260 <f_read+0x344>
			sect += csect;
 800f0ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0b2:	4413      	add	r3, r2
 800f0b4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	0a5b      	lsrs	r3, r3, #9
 800f0ba:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800f0bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d040      	beq.n	800f144 <f_read+0x228>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f0c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0c6:	4413      	add	r3, r2
 800f0c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0ca:	8952      	ldrh	r2, [r2, #10]
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d905      	bls.n	800f0dc <f_read+0x1c0>
					cc = fs->csize - csect;
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d2:	895b      	ldrh	r3, [r3, #10]
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d8:	1ad3      	subs	r3, r2, r3
 800f0da:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0de:	7858      	ldrb	r0, [r3, #1]
 800f0e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f0e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f0e6:	f7fb fba9 	bl	800a83c <disk_read>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00a      	beq.n	800f106 <f_read+0x1ea>
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0fa:	2101      	movs	r1, #1
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fb feb7 	bl	800ae70 <unlock_volume>
 800f102:	2301      	movs	r3, #1
 800f104:	e0ac      	b.n	800f260 <f_read+0x344>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f10c:	b25b      	sxtb	r3, r3
 800f10e:	2b00      	cmp	r3, #0
 800f110:	da14      	bge.n	800f13c <f_read+0x220>
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d90d      	bls.n	800f13c <f_read+0x220>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f126:	1ad3      	subs	r3, r2, r3
 800f128:	025b      	lsls	r3, r3, #9
 800f12a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f12c:	18d0      	adds	r0, r2, r3
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	3354      	adds	r3, #84	@ 0x54
 800f132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f136:	4619      	mov	r1, r3
 800f138:	f012 ffdb 	bl	80220f2 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f13c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f13e:	025b      	lsls	r3, r3, #9
 800f140:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800f142:	e063      	b.n	800f20c <f_read+0x2f0>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d03d      	beq.n	800f1ca <f_read+0x2ae>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f154:	b25b      	sxtb	r3, r3
 800f156:	2b00      	cmp	r3, #0
 800f158:	da20      	bge.n	800f19c <f_read+0x280>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f15c:	7858      	ldrb	r0, [r3, #1]
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f168:	2301      	movs	r3, #1
 800f16a:	f7fb fb87 	bl	800a87c <disk_write>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d00a      	beq.n	800f18a <f_read+0x26e>
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	2201      	movs	r2, #1
 800f178:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f17e:	2101      	movs	r1, #1
 800f180:	4618      	mov	r0, r3
 800f182:	f7fb fe75 	bl	800ae70 <unlock_volume>
 800f186:	2301      	movs	r3, #1
 800f188:	e06a      	b.n	800f260 <f_read+0x344>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f190:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f194:	b2da      	uxtb	r2, r3
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19e:	7858      	ldrb	r0, [r3, #1]
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1aa:	f7fb fb47 	bl	800a83c <disk_read>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d00a      	beq.n	800f1ca <f_read+0x2ae>
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1be:	2101      	movs	r1, #1
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7fb fe55 	bl	800ae70 <unlock_volume>
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	e04a      	b.n	800f260 <f_read+0x344>
			}
#endif
			fp->sect = sect;
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1dc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f1e0:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f1e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d901      	bls.n	800f1ee <f_read+0x2d2>
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	647b      	str	r3, [r7, #68]	@ 0x44
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f200:	440b      	add	r3, r1
 800f202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f204:	4619      	mov	r1, r3
 800f206:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f208:	f012 ff73 	bl	80220f2 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800f20c:	697a      	ldr	r2, [r7, #20]
 800f20e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f210:	1ad3      	subs	r3, r2, r3
 800f212:	617b      	str	r3, [r7, #20]
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f21a:	441a      	add	r2, r3
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	601a      	str	r2, [r3, #0]
 800f220:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f224:	4413      	add	r3, r2
 800f226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f22e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f230:	2000      	movs	r0, #0
 800f232:	4688      	mov	r8, r1
 800f234:	4681      	mov	r9, r0
 800f236:	eb12 0108 	adds.w	r1, r2, r8
 800f23a:	60b9      	str	r1, [r7, #8]
 800f23c:	eb43 0309 	adc.w	r3, r3, r9
 800f240:	60fb      	str	r3, [r7, #12]
 800f242:	69fb      	ldr	r3, [r7, #28]
 800f244:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f248:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f47f aebd 	bne.w	800efce <f_read+0xb2>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f256:	2100      	movs	r1, #0
 800f258:	4618      	mov	r0, r3
 800f25a:	f7fb fe09 	bl	800ae70 <unlock_volume>
 800f25e:	2300      	movs	r3, #0
}
 800f260:	4618      	mov	r0, r3
 800f262:	3754      	adds	r7, #84	@ 0x54
 800f264:	46bd      	mov	sp, r7
 800f266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f26a <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800f26a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f26e:	b08d      	sub	sp, #52	@ 0x34
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
 800f278:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	2200      	movs	r2, #0
 800f282:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f107 0210 	add.w	r2, r7, #16
 800f28a:	4611      	mov	r1, r2
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7ff f9dd 	bl	800e64c <validate>
 800f292:	4603      	mov	r3, r0
 800f294:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d108      	bne.n	800f2b2 <f_write+0x48>
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f2a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f2aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d009      	beq.n	800f2c6 <f_write+0x5c>
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fb fdd8 	bl	800ae70 <unlock_volume>
 800f2c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f2c4:	e1af      	b.n	800f626 <f_write+0x3bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f2cc:	f003 0302 	and.w	r3, r3, #2
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d106      	bne.n	800f2e2 <f_write+0x78>
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	2107      	movs	r1, #7
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7fb fdc9 	bl	800ae70 <unlock_volume>
 800f2de:	2307      	movs	r3, #7
 800f2e0:	e1a1      	b.n	800f626 <f_write+0x3bc>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	2b04      	cmp	r3, #4
 800f2e8:	f000 8188 	beq.w	800f5fc <f_write+0x392>
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	18d1      	adds	r1, r2, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f2fc:	4613      	mov	r3, r2
 800f2fe:	4299      	cmp	r1, r3
 800f300:	f080 817c 	bcs.w	800f5fc <f_write+0x392>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f30a:	4613      	mov	r3, r2
 800f30c:	43db      	mvns	r3, r3
 800f30e:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800f310:	e174      	b.n	800f5fc <f_write+0x392>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f318:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800f31c:	2500      	movs	r5, #0
 800f31e:	ea54 0305 	orrs.w	r3, r4, r5
 800f322:	f040 8119 	bne.w	800f558 <f_write+0x2ee>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f32c:	f04f 0200 	mov.w	r2, #0
 800f330:	f04f 0300 	mov.w	r3, #0
 800f334:	0a42      	lsrs	r2, r0, #9
 800f336:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f33a:	0a4b      	lsrs	r3, r1, #9
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	895b      	ldrh	r3, [r3, #10]
 800f340:	3b01      	subs	r3, #1
 800f342:	4013      	ands	r3, r2
 800f344:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d150      	bne.n	800f3ee <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f352:	4313      	orrs	r3, r2
 800f354:	d10c      	bne.n	800f370 <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d11a      	bne.n	800f398 <f_write+0x12e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2100      	movs	r1, #0
 800f366:	4618      	mov	r0, r3
 800f368:	f7fc fc54 	bl	800bc14 <create_chain>
 800f36c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f36e:	e013      	b.n	800f398 <f_write+0x12e>
					}
				} else {					/* On the middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f374:	2b00      	cmp	r3, #0
 800f376:	d007      	beq.n	800f388 <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f7fc fd83 	bl	800be8a <clmt_clust>
 800f384:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f386:	e007      	b.n	800f398 <f_write+0x12e>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f388:	68fa      	ldr	r2, [r7, #12]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f38e:	4619      	mov	r1, r3
 800f390:	4610      	mov	r0, r2
 800f392:	f7fc fc3f 	bl	800bc14 <create_chain>
 800f396:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f000 8133 	beq.w	800f606 <f_write+0x39c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a2:	2b01      	cmp	r3, #1
 800f3a4:	d10a      	bne.n	800f3bc <f_write+0x152>
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2202      	movs	r2, #2
 800f3aa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	2102      	movs	r1, #2
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7fb fd5c 	bl	800ae70 <unlock_volume>
 800f3b8:	2302      	movs	r3, #2
 800f3ba:	e134      	b.n	800f626 <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3c2:	d10a      	bne.n	800f3da <f_write+0x170>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	2101      	movs	r1, #1
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fb fd4d 	bl	800ae70 <unlock_volume>
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e125      	b.n	800f626 <f_write+0x3bc>
				fp->clust = clst;			/* Update current cluster */
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3de:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	689b      	ldr	r3, [r3, #8]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d102      	bne.n	800f3ee <f_write+0x184>
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3ec:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f3f4:	b25b      	sxtb	r3, r3
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	da20      	bge.n	800f43c <f_write+0x1d2>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	7858      	ldrb	r0, [r3, #1]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f408:	2301      	movs	r3, #1
 800f40a:	f7fb fa37 	bl	800a87c <disk_write>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d00a      	beq.n	800f42a <f_write+0x1c0>
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2201      	movs	r2, #1
 800f418:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	2101      	movs	r1, #1
 800f420:	4618      	mov	r0, r3
 800f422:	f7fb fd25 	bl	800ae70 <unlock_volume>
 800f426:	2301      	movs	r3, #1
 800f428:	e0fd      	b.n	800f626 <f_write+0x3bc>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f434:	b2da      	uxtb	r2, r3
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800f43c:	693a      	ldr	r2, [r7, #16]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f442:	4619      	mov	r1, r3
 800f444:	4610      	mov	r0, r2
 800f446:	f7fb ff89 	bl	800b35c <clst2sect>
 800f44a:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d10a      	bne.n	800f468 <f_write+0x1fe>
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2202      	movs	r2, #2
 800f456:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	2102      	movs	r1, #2
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fb fd06 	bl	800ae70 <unlock_volume>
 800f464:	2302      	movs	r3, #2
 800f466:	e0de      	b.n	800f626 <f_write+0x3bc>
			sect += csect;
 800f468:	697a      	ldr	r2, [r7, #20]
 800f46a:	69bb      	ldr	r3, [r7, #24]
 800f46c:	4413      	add	r3, r2
 800f46e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	0a5b      	lsrs	r3, r3, #9
 800f474:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800f476:	6a3b      	ldr	r3, [r7, #32]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d044      	beq.n	800f506 <f_write+0x29c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f47c:	69ba      	ldr	r2, [r7, #24]
 800f47e:	6a3b      	ldr	r3, [r7, #32]
 800f480:	4413      	add	r3, r2
 800f482:	693a      	ldr	r2, [r7, #16]
 800f484:	8952      	ldrh	r2, [r2, #10]
 800f486:	4293      	cmp	r3, r2
 800f488:	d905      	bls.n	800f496 <f_write+0x22c>
					cc = fs->csize - csect;
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	895b      	ldrh	r3, [r3, #10]
 800f48e:	461a      	mov	r2, r3
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	1ad3      	subs	r3, r2, r3
 800f494:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	7858      	ldrb	r0, [r3, #1]
 800f49a:	6a3b      	ldr	r3, [r7, #32]
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	69f9      	ldr	r1, [r7, #28]
 800f4a0:	f7fb f9ec 	bl	800a87c <disk_write>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00a      	beq.n	800f4c0 <f_write+0x256>
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	2101      	movs	r1, #1
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7fb fcda 	bl	800ae70 <unlock_volume>
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e0b2      	b.n	800f626 <f_write+0x3bc>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	6a3a      	ldr	r2, [r7, #32]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d917      	bls.n	800f4fe <f_write+0x294>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	025b      	lsls	r3, r3, #9
 800f4de:	69fa      	ldr	r2, [r7, #28]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	f012 fe03 	bl	80220f2 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f4f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4f6:	b2da      	uxtb	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f4fe:	6a3b      	ldr	r3, [r7, #32]
 800f500:	025b      	lsls	r3, r3, #9
 800f502:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800f504:	e04f      	b.n	800f5a6 <f_write+0x33c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f50a:	697a      	ldr	r2, [r7, #20]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d020      	beq.n	800f552 <f_write+0x2e8>
				fp->fptr < fp->obj.objsize &&
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f51c:	4290      	cmp	r0, r2
 800f51e:	eb71 0303 	sbcs.w	r3, r1, r3
 800f522:	d216      	bcs.n	800f552 <f_write+0x2e8>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	7858      	ldrb	r0, [r3, #1]
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f52e:	2301      	movs	r3, #1
 800f530:	697a      	ldr	r2, [r7, #20]
 800f532:	f7fb f983 	bl	800a83c <disk_read>
 800f536:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00a      	beq.n	800f552 <f_write+0x2e8>
					ABORT(fs, FR_DISK_ERR);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2201      	movs	r2, #1
 800f540:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	2101      	movs	r1, #1
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fb fc91 	bl	800ae70 <unlock_volume>
 800f54e:	2301      	movs	r3, #1
 800f550:	e069      	b.n	800f626 <f_write+0x3bc>
			}
#endif
			fp->sect = sect;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	697a      	ldr	r2, [r7, #20]
 800f556:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f55e:	4613      	mov	r3, r2
 800f560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f564:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f568:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f56a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d901      	bls.n	800f576 <f_write+0x30c>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f582:	4613      	mov	r3, r2
 800f584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f588:	440b      	add	r3, r1
 800f58a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f58c:	69f9      	ldr	r1, [r7, #28]
 800f58e:	4618      	mov	r0, r3
 800f590:	f012 fdaf 	bl	80220f2 <memcpy>
		fp->flag |= FA_DIRTY;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f59a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f59e:	b2da      	uxtb	r2, r3
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5aa:	1ad3      	subs	r3, r2, r3
 800f5ac:	607b      	str	r3, [r7, #4]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5b4:	441a      	add	r2, r3
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	601a      	str	r2, [r3, #0]
 800f5ba:	69fa      	ldr	r2, [r7, #28]
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5be:	4413      	add	r3, r2
 800f5c0:	61fb      	str	r3, [r7, #28]
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f5c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f5ca:	2000      	movs	r0, #0
 800f5cc:	4688      	mov	r8, r1
 800f5ce:	4681      	mov	r9, r0
 800f5d0:	eb12 0a08 	adds.w	sl, r2, r8
 800f5d4:	eb43 0b09 	adc.w	fp, r3, r9
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f5e4:	68f9      	ldr	r1, [r7, #12]
 800f5e6:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800f5ea:	4282      	cmp	r2, r0
 800f5ec:	eb73 0601 	sbcs.w	r6, r3, r1
 800f5f0:	d201      	bcs.n	800f5f6 <f_write+0x38c>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	68f9      	ldr	r1, [r7, #12]
 800f5f8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f47f ae87 	bne.w	800f312 <f_write+0xa8>
 800f604:	e000      	b.n	800f608 <f_write+0x39e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f606:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f60e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f612:	b2da      	uxtb	r2, r3
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	2100      	movs	r1, #0
 800f61e:	4618      	mov	r0, r3
 800f620:	f7fb fc26 	bl	800ae70 <unlock_volume>
 800f624:	2300      	movs	r3, #0
}
 800f626:	4618      	mov	r0, r3
 800f628:	3734      	adds	r7, #52	@ 0x34
 800f62a:	46bd      	mov	sp, r7
 800f62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f630 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 800f636:	af00      	add	r7, sp, #0
 800f638:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f63c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f640:	6018      	str	r0, [r3, #0]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f642:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f646:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 800f650:	4611      	mov	r1, r2
 800f652:	4618      	mov	r0, r3
 800f654:	f7fe fffa 	bl	800e64c <validate>
 800f658:	4603      	mov	r3, r0
 800f65a:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	if (res == FR_OK) {
 800f65e:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f662:	2b00      	cmp	r3, #0
 800f664:	f040 818b 	bne.w	800f97e <f_sync+0x34e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f668:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f66c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f000 817f 	beq.w	800f97e <f_sync+0x34e>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f680:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f684:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f68e:	b25b      	sxtb	r3, r3
 800f690:	2b00      	cmp	r3, #0
 800f692:	da2e      	bge.n	800f6f2 <f_sync+0xc2>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f694:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f698:	7858      	ldrb	r0, [r3, #1]
 800f69a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f69e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f6a8:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f6ac:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	f7fb f8e1 	bl	800a87c <disk_write>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d007      	beq.n	800f6d0 <f_sync+0xa0>
 800f6c0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f6c4:	2101      	movs	r1, #1
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fb fbd2 	bl	800ae70 <unlock_volume>
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	e160      	b.n	800f992 <f_sync+0x362>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f6d0:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f6d4:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f6de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6e2:	b2da      	uxtb	r2, r3
 800f6e4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f6e8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f6f2:	f7fb f902 	bl	800a8fa <get_fattime>
 800f6f6:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f6fa:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	2b04      	cmp	r3, #4
 800f702:	f040 80ca 	bne.w	800f89a <f_sync+0x26a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800f706:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f70a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4618      	mov	r0, r3
 800f712:	f7fc f93d 	bl	800b990 <fill_first_frag>
 800f716:	4603      	mov	r3, r0
 800f718:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 800f71c:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f720:	2b00      	cmp	r3, #0
 800f722:	d112      	bne.n	800f74a <f_sync+0x11a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f724:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f728:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f72c:	6818      	ldr	r0, [r3, #0]
 800f72e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f732:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f73a:	f04f 32ff 	mov.w	r2, #4294967295
 800f73e:	4619      	mov	r1, r3
 800f740:	f7fc f955 	bl	800b9ee <fill_last_frag>
 800f744:	4603      	mov	r3, r0
 800f746:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				}
				if (res == FR_OK) {
 800f74a:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f040 8115 	bne.w	800f97e <f_sync+0x34e>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
 800f754:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f758:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f75c:	60da      	str	r2, [r3, #12]
 800f75e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f762:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800f766:	611a      	str	r2, [r3, #16]
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 800f768:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f76c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	f107 0308 	add.w	r3, r7, #8
 800f776:	4611      	mov	r1, r2
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fd f92e 	bl	800c9da <load_obj_xdir>
 800f77e:	4603      	mov	r3, r0
 800f780:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					if (res == FR_OK) {
 800f784:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f788:	2b00      	cmp	r3, #0
 800f78a:	f040 80f8 	bne.w	800f97e <f_sync+0x34e>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 800f78e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f792:	691b      	ldr	r3, [r3, #16]
 800f794:	3304      	adds	r3, #4
 800f796:	781a      	ldrb	r2, [r3, #0]
 800f798:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f79c:	691b      	ldr	r3, [r3, #16]
 800f79e:	3304      	adds	r3, #4
 800f7a0:	f042 0220 	orr.w	r2, r2, #32
 800f7a4:	b2d2      	uxtb	r2, r2
 800f7a6:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800f7a8:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f7ac:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	79da      	ldrb	r2, [r3, #7]
 800f7b4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f7b8:	691b      	ldr	r3, [r3, #16]
 800f7ba:	3321      	adds	r3, #33	@ 0x21
 800f7bc:	f042 0201 	orr.w	r2, r2, #1
 800f7c0:	b2d2      	uxtb	r2, r2
 800f7c2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 800f7c4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f7c8:	691b      	ldr	r3, [r3, #16]
 800f7ca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f7ce:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f7d2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	689b      	ldr	r3, [r3, #8]
 800f7da:	4619      	mov	r1, r3
 800f7dc:	4610      	mov	r0, r2
 800f7de:	f7fb f9c6 	bl	800ab6e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 800f7e2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f7e6:	691b      	ldr	r3, [r3, #16]
 800f7e8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f7ec:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f7f0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f7fa:	4608      	mov	r0, r1
 800f7fc:	f7fb f9e3 	bl	800abc6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 800f800:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f804:	691b      	ldr	r3, [r3, #16]
 800f806:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800f80a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f80e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f818:	4608      	mov	r0, r1
 800f81a:	f7fb f9d4 	bl	800abc6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800f81e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	330c      	adds	r3, #12
 800f826:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7fb f99f 	bl	800ab6e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800f830:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f834:	691b      	ldr	r3, [r3, #16]
 800f836:	3315      	adds	r3, #21
 800f838:	2200      	movs	r2, #0
 800f83a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800f83c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f840:	691b      	ldr	r3, [r3, #16]
 800f842:	3310      	adds	r3, #16
 800f844:	2100      	movs	r1, #0
 800f846:	4618      	mov	r0, r3
 800f848:	f7fb f991 	bl	800ab6e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800f84c:	f107 0308 	add.w	r3, r7, #8
 800f850:	4618      	mov	r0, r3
 800f852:	f7fd f8fb 	bl	800ca4c <store_xdir>
 800f856:	4603      	mov	r3, r0
 800f858:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
						if (res == FR_OK) {
 800f85c:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f860:	2b00      	cmp	r3, #0
 800f862:	f040 808c 	bne.w	800f97e <f_sync+0x34e>
							res = sync_fs(fs);
 800f866:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fb fd08 	bl	800b280 <sync_fs>
 800f870:	4603      	mov	r3, r0
 800f872:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 800f876:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f87a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f888:	b2da      	uxtb	r2, r3
 800f88a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f88e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800f898:	e071      	b.n	800f97e <f_sync+0x34e>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f89a:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	@ 0x4b8
 800f89e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f8a2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	4610      	mov	r0, r2
 800f8ae:	f7fb fcb9 	bl	800b224 <move_window>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 800f8b8:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d15e      	bne.n	800f97e <f_sync+0x34e>
					dir = fp->dir_ptr;
 800f8c0:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f8c4:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8cc:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800f8d0:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f8d4:	330b      	adds	r3, #11
 800f8d6:	781a      	ldrb	r2, [r3, #0]
 800f8d8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f8dc:	330b      	adds	r3, #11
 800f8de:	f042 0220 	orr.w	r2, r2, #32
 800f8e2:	b2d2      	uxtb	r2, r2
 800f8e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800f8e6:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f8ea:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	6818      	ldr	r0, [r3, #0]
 800f8f2:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f8f6:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	689b      	ldr	r3, [r3, #8]
 800f8fe:	461a      	mov	r2, r3
 800f900:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 800f904:	f7fc fcf3 	bl	800c2ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f908:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f90c:	f103 001c 	add.w	r0, r3, #28
 800f910:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f914:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f91e:	4613      	mov	r3, r2
 800f920:	4619      	mov	r1, r3
 800f922:	f7fb f924 	bl	800ab6e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f926:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f92a:	3316      	adds	r3, #22
 800f92c:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 800f930:	4618      	mov	r0, r3
 800f932:	f7fb f91c 	bl	800ab6e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f936:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800f93a:	3312      	adds	r3, #18
 800f93c:	2100      	movs	r1, #0
 800f93e:	4618      	mov	r0, r3
 800f940:	f7fb f8fa 	bl	800ab38 <st_word>
					fs->wflag = 1;
 800f944:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f948:	2201      	movs	r2, #1
 800f94a:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f94c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f950:	4618      	mov	r0, r3
 800f952:	f7fb fc95 	bl	800b280 <sync_fs>
 800f956:	4603      	mov	r3, r0
 800f958:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f95c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f960:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f96a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f96e:	b2da      	uxtb	r2, r3
 800f970:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800f974:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f97e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800f982:	f897 24c7 	ldrb.w	r2, [r7, #1223]	@ 0x4c7
 800f986:	4611      	mov	r1, r2
 800f988:	4618      	mov	r0, r3
 800f98a:	f7fb fa71 	bl	800ae70 <unlock_volume>
 800f98e:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
}
 800f992:	4618      	mov	r0, r3
 800f994:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7ff fe43 	bl	800f630 <f_sync>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f9ae:	7bfb      	ldrb	r3, [r7, #15]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d11d      	bne.n	800f9f0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f107 0208 	add.w	r2, r7, #8
 800f9ba:	4611      	mov	r1, r2
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7fe fe45 	bl	800e64c <validate>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f9c6:	7bfb      	ldrb	r3, [r7, #15]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d111      	bne.n	800f9f0 <f_close+0x54>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fb fb8b 	bl	800b0ec <dec_share>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 800f9da:	7bfb      	ldrb	r3, [r7, #15]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d102      	bne.n	800f9e6 <f_close+0x4a>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	601a      	str	r2, [r3, #0]
#else
			fp->obj.fs = 0;	/* Invalidate file object */
#endif
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fb fa40 	bl	800ae70 <unlock_volume>
#endif
		}
	}
	return res;
 800f9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fa06:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fa0a:	6018      	str	r0, [r3, #0]
 800fa0c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fa10:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800fa14:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800fa16:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fa1a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d101      	bne.n	800fa28 <f_opendir+0x2e>
 800fa24:	2309      	movs	r3, #9
 800fa26:	e102      	b.n	800fc2e <f_opendir+0x234>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 800fa28:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 800fa2c:	463b      	mov	r3, r7
 800fa2e:	2200      	movs	r2, #0
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7fe fac1 	bl	800dfb8 <mount_volume>
 800fa36:	4603      	mov	r3, r0
 800fa38:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	if (res == FR_OK) {
 800fa3c:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	f040 80df 	bne.w	800fc04 <f_opendir+0x20a>
		dp->obj.fs = fs;
 800fa46:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 800fa4a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fa4e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800fa56:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fa5a:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800fa5e:	60da      	str	r2, [r3, #12]
 800fa60:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fa64:	f107 0208 	add.w	r2, r7, #8
 800fa68:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fa6a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fa6e:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fa78:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fa7c:	4611      	mov	r1, r2
 800fa7e:	6818      	ldr	r0, [r3, #0]
 800fa80:	f7fe f842 	bl	800db08 <follow_path>
 800fa84:	4603      	mov	r3, r0
 800fa86:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
		if (res == FR_OK) {						/* Follow completed */
 800fa8a:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f040 80b1 	bne.w	800fbf6 <f_opendir+0x1fc>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fa94:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fa98:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800faa2:	b25b      	sxtb	r3, r3
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	db60      	blt.n	800fb6a <f_opendir+0x170>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 800faa8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800faac:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	799b      	ldrb	r3, [r3, #6]
 800fab4:	f003 0310 	and.w	r3, r3, #16
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d053      	beq.n	800fb64 <f_opendir+0x16a>
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800fabc:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	2b04      	cmp	r3, #4
 800fac4:	d13a      	bne.n	800fb3c <f_opendir+0x142>
						dp->obj.c_scl = dp->obj.sclust;	/* Get containing directory inforamation */
 800fac6:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800faca:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	689a      	ldr	r2, [r3, #8]
 800fad2:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fad6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	621a      	str	r2, [r3, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800fade:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fae2:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800faec:	4613      	mov	r3, r2
 800faee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800faf2:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 800faf6:	f2a2 426c 	subw	r2, r2, #1132	@ 0x46c
 800fafa:	6812      	ldr	r2, [r2, #0]
 800fafc:	79d2      	ldrb	r2, [r2, #7]
 800fafe:	431a      	orrs	r2, r3
 800fb00:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb04:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	625a      	str	r2, [r3, #36]	@ 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 800fb0c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb10:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb18:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb1c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	629a      	str	r2, [r3, #40]	@ 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800fb24:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 800fb28:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb2c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	4619      	mov	r1, r3
 800fb34:	4610      	mov	r0, r2
 800fb36:	f7fc ff27 	bl	800c988 <init_alloc_info>
 800fb3a:	e016      	b.n	800fb6a <f_opendir+0x170>
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fb3c:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 800fb40:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb44:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	4610      	mov	r0, r2
 800fb50:	f7fc fbae 	bl	800c2b0 <ld_clust>
 800fb54:	4602      	mov	r2, r0
 800fb56:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb5a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	609a      	str	r2, [r3, #8]
 800fb62:	e002      	b.n	800fb6a <f_opendir+0x170>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800fb64:	2305      	movs	r3, #5
 800fb66:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
				}
			}
			if (res == FR_OK) {
 800fb6a:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d141      	bne.n	800fbf6 <f_opendir+0x1fc>
				dp->obj.id = fs->id;
 800fb72:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fb76:	88da      	ldrh	r2, [r3, #6]
 800fb78:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb7c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fb84:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb88:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fb8c:	2100      	movs	r1, #0
 800fb8e:	6818      	ldr	r0, [r3, #0]
 800fb90:	f7fc fa07 	bl	800bfa2 <dir_sdi>
 800fb94:	4603      	mov	r3, r0
 800fb96:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
#if FF_FS_LOCK
				if (res == FR_OK) {
 800fb9a:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d129      	bne.n	800fbf6 <f_opendir+0x1fc>
					if (dp->obj.sclust != 0) {
 800fba2:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fba6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d01a      	beq.n	800fbe8 <f_opendir+0x1ee>
						dp->obj.lockid = inc_share(dp, 0);	/* Lock the sub directory */
 800fbb2:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fbb6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fbba:	2100      	movs	r1, #0
 800fbbc:	6818      	ldr	r0, [r3, #0]
 800fbbe:	f7fb fa07 	bl	800afd0 <inc_share>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fbc8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fbd0:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fbd4:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d10a      	bne.n	800fbf6 <f_opendir+0x1fc>
 800fbe0:	2312      	movs	r3, #18
 800fbe2:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
 800fbe6:	e006      	b.n	800fbf6 <f_opendir+0x1fc>
					} else {
						dp->obj.lockid = 0;	/* Root directory need not to be locked */
 800fbe8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fbec:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fbf6:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fbfa:	2b04      	cmp	r3, #4
 800fbfc:	d102      	bne.n	800fc04 <f_opendir+0x20a>
 800fbfe:	2305      	movs	r3, #5
 800fc00:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
 800fc04:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d006      	beq.n	800fc1a <f_opendir+0x220>
 800fc0c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fc10:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	2200      	movs	r2, #0
 800fc18:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fc1a:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fc1e:	f897 246f 	ldrb.w	r2, [r7, #1135]	@ 0x46f
 800fc22:	4611      	mov	r1, r2
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fb f923 	bl	800ae70 <unlock_volume>
 800fc2a:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f107 0208 	add.w	r2, r7, #8
 800fc46:	4611      	mov	r1, r2
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7fe fcff 	bl	800e64c <validate>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fc52:	7bfb      	ldrb	r3, [r7, #15]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d115      	bne.n	800fc84 <f_closedir+0x4c>
#if FF_FS_LOCK
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d006      	beq.n	800fc6e <f_closedir+0x36>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7fb fa41 	bl	800b0ec <dec_share>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 800fc6e:	7bfb      	ldrb	r3, [r7, #15]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d102      	bne.n	800fc7a <f_closedir+0x42>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	601a      	str	r2, [r3, #0]
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
#endif
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fb f8f6 	bl	800ae70 <unlock_volume>
#endif
	}
	return res;
 800fc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3710      	adds	r7, #16
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fc9a:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fc9e:	6018      	str	r0, [r3, #0]
 800fca0:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fca4:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800fca8:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fcaa:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fcae:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 800fcb8:	4611      	mov	r1, r2
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7fe fcc6 	bl	800e64c <validate>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	if (res == FR_OK) {
 800fcc6:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d150      	bne.n	800fd70 <f_readdir+0xe2>
		if (!fno) {
 800fcce:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fcd2:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d10b      	bne.n	800fcf4 <f_readdir+0x66>
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
 800fcdc:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fce0:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fce4:	2100      	movs	r1, #0
 800fce6:	6818      	ldr	r0, [r3, #0]
 800fce8:	f7fc f95b 	bl	800bfa2 <dir_sdi>
 800fcec:	4603      	mov	r3, r0
 800fcee:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
 800fcf2:	e03d      	b.n	800fd70 <f_readdir+0xe2>
		} else {
			INIT_NAMBUF(fs);
 800fcf4:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fcf8:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800fcfc:	60da      	str	r2, [r3, #12]
 800fcfe:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fd02:	f107 0208 	add.w	r2, r7, #8
 800fd06:	611a      	str	r2, [r3, #16]
			res = DIR_READ_FILE(dp);		/* Read an item */
 800fd08:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fd0c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fd10:	2100      	movs	r1, #0
 800fd12:	6818      	ldr	r0, [r3, #0]
 800fd14:	f7fc ff5e 	bl	800cbd4 <dir_read>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800fd1e:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fd22:	2b04      	cmp	r3, #4
 800fd24:	d102      	bne.n	800fd2c <f_readdir+0x9e>
 800fd26:	2300      	movs	r3, #0
 800fd28:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			if (res == FR_OK) {				/* A valid entry is found */
 800fd2c:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d11d      	bne.n	800fd70 <f_readdir+0xe2>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fd34:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fd38:	f5a3 628e 	sub.w	r2, r3, #1136	@ 0x470
 800fd3c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fd40:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fd44:	6811      	ldr	r1, [r2, #0]
 800fd46:	6818      	ldr	r0, [r3, #0]
 800fd48:	f7fd fae8 	bl	800d31c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fd4c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fd50:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800fd54:	2100      	movs	r1, #0
 800fd56:	6818      	ldr	r0, [r3, #0]
 800fd58:	f7fc f9a9 	bl	800c0ae <dir_next>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fd62:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800fd66:	2b04      	cmp	r3, #4
 800fd68:	d102      	bne.n	800fd70 <f_readdir+0xe2>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fd70:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800fd74:	f897 246f 	ldrb.w	r2, [r7, #1135]	@ 0x46f
 800fd78:	4611      	mov	r1, r2
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fb f878 	bl	800ae70 <unlock_volume>
 800fd80:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
	...

0800fd90 <FATFS_GetDisk>:
/**
 * @brief  Returns a pointer to the disk structure.
 * @retval Pointer to Disk_drvTypeDef
 */
Disk_drvTypeDef* FATFS_GetDisk(void)
{
 800fd90:	b480      	push	{r7}
 800fd92:	af00      	add	r7, sp, #0
    return &disk;
 800fd94:	4b02      	ldr	r3, [pc, #8]	@ (800fda0 <FATFS_GetDisk+0x10>)
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr
 800fda0:	24019810 	.word	0x24019810

0800fda4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b087      	sub	sp, #28
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	4613      	mov	r3, r2
 800fdb0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < FF_VOLUMES)
 800fdba:	4b1f      	ldr	r3, [pc, #124]	@ (800fe38 <FATFS_LinkDriverEx+0x94>)
 800fdbc:	7a5b      	ldrb	r3, [r3, #9]
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d131      	bne.n	800fe28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fdc4:	4b1c      	ldr	r3, [pc, #112]	@ (800fe38 <FATFS_LinkDriverEx+0x94>)
 800fdc6:	7a5b      	ldrb	r3, [r3, #9]
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	461a      	mov	r2, r3
 800fdcc:	4b1a      	ldr	r3, [pc, #104]	@ (800fe38 <FATFS_LinkDriverEx+0x94>)
 800fdce:	2100      	movs	r1, #0
 800fdd0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fdd2:	4b19      	ldr	r3, [pc, #100]	@ (800fe38 <FATFS_LinkDriverEx+0x94>)
 800fdd4:	7a5b      	ldrb	r3, [r3, #9]
 800fdd6:	b2db      	uxtb	r3, r3
 800fdd8:	4a17      	ldr	r2, [pc, #92]	@ (800fe38 <FATFS_LinkDriverEx+0x94>)
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	4413      	add	r3, r2
 800fdde:	68fa      	ldr	r2, [r7, #12]
 800fde0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fde2:	4b15      	ldr	r3, [pc, #84]	@ (800fe38 <FATFS_LinkDriverEx+0x94>)
 800fde4:	7a5b      	ldrb	r3, [r3, #9]
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	461a      	mov	r2, r3
 800fdea:	4b13      	ldr	r3, [pc, #76]	@ (800fe38 <FATFS_LinkDriverEx+0x94>)
 800fdec:	4413      	add	r3, r2
 800fdee:	79fa      	ldrb	r2, [r7, #7]
 800fdf0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fdf2:	4b11      	ldr	r3, [pc, #68]	@ (800fe38 <FATFS_LinkDriverEx+0x94>)
 800fdf4:	7a5b      	ldrb	r3, [r3, #9]
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	1c5a      	adds	r2, r3, #1
 800fdfa:	b2d1      	uxtb	r1, r2
 800fdfc:	4a0e      	ldr	r2, [pc, #56]	@ (800fe38 <FATFS_LinkDriverEx+0x94>)
 800fdfe:	7251      	strb	r1, [r2, #9]
 800fe00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fe02:	7dbb      	ldrb	r3, [r7, #22]
 800fe04:	3330      	adds	r3, #48	@ 0x30
 800fe06:	b2da      	uxtb	r2, r3
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	223a      	movs	r2, #58	@ 0x3a
 800fe12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	3302      	adds	r3, #2
 800fe18:	222f      	movs	r2, #47	@ 0x2f
 800fe1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	3303      	adds	r3, #3
 800fe20:	2200      	movs	r2, #0
 800fe22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fe24:	2300      	movs	r3, #0
 800fe26:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fe28:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	371c      	adds	r7, #28
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop
 800fe38:	24019810 	.word	0x24019810

0800fe3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fe46:	2200      	movs	r2, #0
 800fe48:	6839      	ldr	r1, [r7, #0]
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7ff ffaa 	bl	800fda4 <FATFS_LinkDriverEx>
 800fe50:	4603      	mov	r3, r0
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3708      	adds	r7, #8
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
	...

0800fe5c <MMC_CheckStatus>:
#else
static volatile UINT WriteStatus = 0, ReadStatus = 0;
#endif

/* Generic MMC driver implementation */
static DSTATUS MMC_CheckStatus(MMC_HandleTypeDef *hmmc) {
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
    Stat = STA_NOINIT;
 800fe64:	4b0b      	ldr	r3, [pc, #44]	@ (800fe94 <MMC_CheckStatus+0x38>)
 800fe66:	2201      	movs	r2, #1
 800fe68:	701a      	strb	r2, [r3, #0]
    if (BSP_MMC_GetCardState(hmmc) == BSP_ERROR_NONE) {
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f7f1 fee2 	bl	8001c34 <BSP_MMC_GetCardState>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d107      	bne.n	800fe86 <MMC_CheckStatus+0x2a>
        Stat &= ~STA_NOINIT;
 800fe76:	4b07      	ldr	r3, [pc, #28]	@ (800fe94 <MMC_CheckStatus+0x38>)
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	b2db      	uxtb	r3, r3
 800fe7c:	f023 0301 	bic.w	r3, r3, #1
 800fe80:	b2da      	uxtb	r2, r3
 800fe82:	4b04      	ldr	r3, [pc, #16]	@ (800fe94 <MMC_CheckStatus+0x38>)
 800fe84:	701a      	strb	r2, [r3, #0]
    }
    return Stat;
 800fe86:	4b03      	ldr	r3, [pc, #12]	@ (800fe94 <MMC_CheckStatus+0x38>)
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	b2db      	uxtb	r3, r3
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3708      	adds	r7, #8
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	240148d1 	.word	0x240148d1

0800fe98 <MMC_Initialize>:

static DSTATUS MMC_Initialize(MMC_HandleTypeDef *hmmc, BYTE lun) {
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	460b      	mov	r3, r1
 800fea2:	70fb      	strb	r3, [r7, #3]
#ifdef USE_FREERTOS
    /* Ensure FreeRTOS kernel is running before using RTOS APIs */
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fea4:	f002 fef4 	bl	8012c90 <xTaskGetSchedulerState>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d028      	beq.n	800ff00 <MMC_Initialize+0x68>
#ifndef DISABLE_MMC_INIT
        if (BSP_MMC_Init(hmmc) == BSP_ERROR_NONE) {
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f7f1 fe60 	bl	8001b74 <BSP_MMC_Init>
 800feb4:	4603      	mov	r3, r0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d106      	bne.n	800fec8 <MMC_Initialize+0x30>
            Stat = MMC_CheckStatus(hmmc);
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f7ff ffce 	bl	800fe5c <MMC_CheckStatus>
 800fec0:	4603      	mov	r3, r0
 800fec2:	461a      	mov	r2, r3
 800fec4:	4b12      	ldr	r3, [pc, #72]	@ (800ff10 <MMC_Initialize+0x78>)
 800fec6:	701a      	strb	r2, [r3, #0]
        }
#else
        Stat = MMC_CheckStatus(hmmc);
#endif
        /* Create semaphore for DMA synchronization if MMC is initialized */
        if (Stat != STA_NOINIT) {
 800fec8:	4b11      	ldr	r3, [pc, #68]	@ (800ff10 <MMC_Initialize+0x78>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	2b01      	cmp	r3, #1
 800fed0:	d016      	beq.n	800ff00 <MMC_Initialize+0x68>
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
            if (hmmc == &hmmc1 && MMC1Semaphore == NULL) {
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4a0f      	ldr	r2, [pc, #60]	@ (800ff14 <MMC_Initialize+0x7c>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d112      	bne.n	800ff00 <MMC_Initialize+0x68>
 800feda:	4b0f      	ldr	r3, [pc, #60]	@ (800ff18 <MMC_Initialize+0x80>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d10e      	bne.n	800ff00 <MMC_Initialize+0x68>
                MMC1Semaphore = xSemaphoreCreateBinary();
 800fee2:	2203      	movs	r2, #3
 800fee4:	2100      	movs	r1, #0
 800fee6:	2001      	movs	r0, #1
 800fee8:	f000 fcc7 	bl	801087a <xQueueGenericCreate>
 800feec:	4603      	mov	r3, r0
 800feee:	4a0a      	ldr	r2, [pc, #40]	@ (800ff18 <MMC_Initialize+0x80>)
 800fef0:	6013      	str	r3, [r2, #0]
                if (MMC1Semaphore == NULL) {
 800fef2:	4b09      	ldr	r3, [pc, #36]	@ (800ff18 <MMC_Initialize+0x80>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d102      	bne.n	800ff00 <MMC_Initialize+0x68>
                    Stat = STA_NOINIT;  /* Failed to create semaphore */
 800fefa:	4b05      	ldr	r3, [pc, #20]	@ (800ff10 <MMC_Initialize+0x78>)
 800fefc:	2201      	movs	r2, #1
 800fefe:	701a      	strb	r2, [r3, #0]
    }
#else
    return MMC_CheckStatus(hmmc);
#endif
#endif
    return Stat;
 800ff00:	4b03      	ldr	r3, [pc, #12]	@ (800ff10 <MMC_Initialize+0x78>)
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	b2db      	uxtb	r3, r3
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	240148d1 	.word	0x240148d1
 800ff14:	2405a57c 	.word	0x2405a57c
 800ff18:	2401981c 	.word	0x2401981c

0800ff1c <MMC_Read>:

static DRESULT MMC_Read(MMC_HandleTypeDef *hmmc, BYTE *buff, DWORD sector, UINT count) {
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b088      	sub	sp, #32
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	607a      	str	r2, [r7, #4]
 800ff28:	603b      	str	r3, [r7, #0]
    DRESULT res = RES_ERROR;
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	77fb      	strb	r3, [r7, #31]

#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	4a1b      	ldr	r2, [pc, #108]	@ (800ffa0 <MMC_Read+0x84>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d102      	bne.n	800ff3c <MMC_Read+0x20>
 800ff36:	4b1b      	ldr	r3, [pc, #108]	@ (800ffa4 <MMC_Read+0x88>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	e000      	b.n	800ff3e <MMC_Read+0x22>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	61bb      	str	r3, [r7, #24]

#if (ENABLE_DMA_CACHE_MAINTENANCE == 1)
    uint32_t alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count * MMC_DEFAULT_BLOCK_SIZE + ((uint32_t)buff - alignedAddr));
#endif
    if (BSP_MMC_ReadBlocks_DMA(hmmc, (uint32_t*)buff, sector, count) == BSP_ERROR_NONE) {
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	68b9      	ldr	r1, [r7, #8]
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f7f1 fe3e 	bl	8001bc8 <BSP_MMC_ReadBlocks_DMA>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d121      	bne.n	800ff96 <MMC_Read+0x7a>
        /* Wait for DMA completion via semaphore */
        if (xSemaphoreTake(semaphore, pdMS_TO_TICKS(MMC_TIMEOUT)) == pdTRUE) {
 800ff52:	f247 5130 	movw	r1, #30000	@ 0x7530
 800ff56:	69b8      	ldr	r0, [r7, #24]
 800ff58:	f000 ffde 	bl	8010f18 <xQueueSemaphoreTake>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d119      	bne.n	800ff96 <MMC_Read+0x7a>
            /* Check MMC state to ensure transfer is complete */
            TickType_t timeout = xTaskGetTickCount() + pdMS_TO_TICKS(MMC_TIMEOUT);
 800ff62:	f002 f8f9 	bl	8012158 <xTaskGetTickCount>
 800ff66:	4602      	mov	r2, r0
 800ff68:	f247 5330 	movw	r3, #30000	@ 0x7530
 800ff6c:	4413      	add	r3, r2
 800ff6e:	617b      	str	r3, [r7, #20]
            while (xTaskGetTickCount() < timeout) {
 800ff70:	e00b      	b.n	800ff8a <MMC_Read+0x6e>
                if (BSP_MMC_GetCardState(hmmc) == MMC_TRANSFER_OK) {
 800ff72:	68f8      	ldr	r0, [r7, #12]
 800ff74:	f7f1 fe5e 	bl	8001c34 <BSP_MMC_GetCardState>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d102      	bne.n	800ff84 <MMC_Read+0x68>
                    res = RES_OK;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	77fb      	strb	r3, [r7, #31]
                    break;
 800ff82:	e008      	b.n	800ff96 <MMC_Read+0x7a>
                }
                vTaskDelay(pdMS_TO_TICKS(1));  /* Delay 1ms to avoid busy-wait */
 800ff84:	2001      	movs	r0, #1
 800ff86:	f001 fe85 	bl	8011c94 <vTaskDelay>
            while (xTaskGetTickCount() < timeout) {
 800ff8a:	f002 f8e5 	bl	8012158 <xTaskGetTickCount>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d8ed      	bhi.n	800ff72 <MMC_Read+0x56>
                }
            }
        }
    }
#endif
    return res;
 800ff96:	7ffb      	ldrb	r3, [r7, #31]
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3720      	adds	r7, #32
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	2405a57c 	.word	0x2405a57c
 800ffa4:	2401981c 	.word	0x2401981c

0800ffa8 <MMC_Write>:

#if _USE_WRITE == 1
static DRESULT MMC_Write(MMC_HandleTypeDef *hmmc, const BYTE *buff, DWORD sector, UINT count) {
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b088      	sub	sp, #32
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	607a      	str	r2, [r7, #4]
 800ffb4:	603b      	str	r3, [r7, #0]
    DRESULT res = RES_ERROR;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	77fb      	strb	r3, [r7, #31]

#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	4a1b      	ldr	r2, [pc, #108]	@ (801002c <MMC_Write+0x84>)
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d102      	bne.n	800ffc8 <MMC_Write+0x20>
 800ffc2:	4b1b      	ldr	r3, [pc, #108]	@ (8010030 <MMC_Write+0x88>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	e000      	b.n	800ffca <MMC_Write+0x22>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	61bb      	str	r3, [r7, #24]

#if (ENABLE_DMA_CACHE_MAINTENANCE == 1)
    uint32_t alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count * MMC_DEFAULT_BLOCK_SIZE + ((uint32_t)buff - alignedAddr));
#endif
    if (BSP_MMC_WriteBlocks_DMA(hmmc, (uint32_t*)buff, sector, count) == BSP_ERROR_NONE) {
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	687a      	ldr	r2, [r7, #4]
 800ffd0:	68b9      	ldr	r1, [r7, #8]
 800ffd2:	68f8      	ldr	r0, [r7, #12]
 800ffd4:	f7f1 fe13 	bl	8001bfe <BSP_MMC_WriteBlocks_DMA>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d121      	bne.n	8010022 <MMC_Write+0x7a>
        /* Wait for DMA completion via semaphore */
        if (xSemaphoreTake(semaphore, pdMS_TO_TICKS(MMC_TIMEOUT)) == pdTRUE) {
 800ffde:	f247 5130 	movw	r1, #30000	@ 0x7530
 800ffe2:	69b8      	ldr	r0, [r7, #24]
 800ffe4:	f000 ff98 	bl	8010f18 <xQueueSemaphoreTake>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	2b01      	cmp	r3, #1
 800ffec:	d119      	bne.n	8010022 <MMC_Write+0x7a>
            /* Check MMC state to ensure transfer is complete */
            TickType_t timeout = xTaskGetTickCount() + pdMS_TO_TICKS(MMC_TIMEOUT);
 800ffee:	f002 f8b3 	bl	8012158 <xTaskGetTickCount>
 800fff2:	4602      	mov	r2, r0
 800fff4:	f247 5330 	movw	r3, #30000	@ 0x7530
 800fff8:	4413      	add	r3, r2
 800fffa:	617b      	str	r3, [r7, #20]
            while (xTaskGetTickCount() < timeout) {
 800fffc:	e00b      	b.n	8010016 <MMC_Write+0x6e>
                if (BSP_MMC_GetCardState(hmmc) == MMC_TRANSFER_OK) {
 800fffe:	68f8      	ldr	r0, [r7, #12]
 8010000:	f7f1 fe18 	bl	8001c34 <BSP_MMC_GetCardState>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	d102      	bne.n	8010010 <MMC_Write+0x68>
                    res = RES_OK;
 801000a:	2300      	movs	r3, #0
 801000c:	77fb      	strb	r3, [r7, #31]
                    break;
 801000e:	e008      	b.n	8010022 <MMC_Write+0x7a>
                }
                vTaskDelay(pdMS_TO_TICKS(1));  /* Delay 1ms to avoid busy-wait */
 8010010:	2001      	movs	r0, #1
 8010012:	f001 fe3f 	bl	8011c94 <vTaskDelay>
            while (xTaskGetTickCount() < timeout) {
 8010016:	f002 f89f 	bl	8012158 <xTaskGetTickCount>
 801001a:	4602      	mov	r2, r0
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	4293      	cmp	r3, r2
 8010020:	d8ed      	bhi.n	800fffe <MMC_Write+0x56>
                }
            }
        }
    }
#endif
    return res;
 8010022:	7ffb      	ldrb	r3, [r7, #31]
}
 8010024:	4618      	mov	r0, r3
 8010026:	3720      	adds	r7, #32
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}
 801002c:	2405a57c 	.word	0x2405a57c
 8010030:	2401981c 	.word	0x2401981c

08010034 <MMC_Ioctl>:
#endif

#if _USE_IOCTL == 1
static DRESULT MMC_Ioctl(MMC_HandleTypeDef *hmmc, BYTE cmd, void *buff) {
 8010034:	b580      	push	{r7, lr}
 8010036:	b08c      	sub	sp, #48	@ 0x30
 8010038:	af00      	add	r7, sp, #0
 801003a:	60f8      	str	r0, [r7, #12]
 801003c:	460b      	mov	r3, r1
 801003e:	607a      	str	r2, [r7, #4]
 8010040:	72fb      	strb	r3, [r7, #11]
    DRESULT res = RES_ERROR;
 8010042:	2301      	movs	r3, #1
 8010044:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BSP_MMC_CardInfo CardInfo;

    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010048:	4b26      	ldr	r3, [pc, #152]	@ (80100e4 <MMC_Ioctl+0xb0>)
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	b2db      	uxtb	r3, r3
 801004e:	f003 0301 	and.w	r3, r3, #1
 8010052:	2b00      	cmp	r3, #0
 8010054:	d001      	beq.n	801005a <MMC_Ioctl+0x26>
 8010056:	2303      	movs	r3, #3
 8010058:	e040      	b.n	80100dc <MMC_Ioctl+0xa8>

    switch (cmd) {
 801005a:	7afb      	ldrb	r3, [r7, #11]
 801005c:	2b03      	cmp	r3, #3
 801005e:	d838      	bhi.n	80100d2 <MMC_Ioctl+0x9e>
 8010060:	a201      	add	r2, pc, #4	@ (adr r2, 8010068 <MMC_Ioctl+0x34>)
 8010062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010066:	bf00      	nop
 8010068:	08010079 	.word	0x08010079
 801006c:	08010081 	.word	0x08010081
 8010070:	0801009b 	.word	0x0801009b
 8010074:	080100b7 	.word	0x080100b7
        case CTRL_SYNC:
            res = RES_OK;
 8010078:	2300      	movs	r3, #0
 801007a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 801007e:	e02b      	b.n	80100d8 <MMC_Ioctl+0xa4>
        case GET_SECTOR_COUNT:
            BSP_MMC_GetCardInfo(hmmc, &CardInfo);
 8010080:	f107 0310 	add.w	r3, r7, #16
 8010084:	4619      	mov	r1, r3
 8010086:	68f8      	ldr	r0, [r7, #12]
 8010088:	f7f1 fde5 	bl	8001c56 <BSP_MMC_GetCardInfo>
            *(DWORD*)buff = CardInfo.LogBlockNbr;
 801008c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	601a      	str	r2, [r3, #0]
            res = RES_OK;
 8010092:	2300      	movs	r3, #0
 8010094:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 8010098:	e01e      	b.n	80100d8 <MMC_Ioctl+0xa4>
        case GET_SECTOR_SIZE:
            BSP_MMC_GetCardInfo(hmmc, &CardInfo);
 801009a:	f107 0310 	add.w	r3, r7, #16
 801009e:	4619      	mov	r1, r3
 80100a0:	68f8      	ldr	r0, [r7, #12]
 80100a2:	f7f1 fdd8 	bl	8001c56 <BSP_MMC_GetCardInfo>
            *(WORD*)buff = CardInfo.LogBlockSize;
 80100a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 80100ae:	2300      	movs	r3, #0
 80100b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 80100b4:	e010      	b.n	80100d8 <MMC_Ioctl+0xa4>
        case GET_BLOCK_SIZE:
            BSP_MMC_GetCardInfo(hmmc, &CardInfo);
 80100b6:	f107 0310 	add.w	r3, r7, #16
 80100ba:	4619      	mov	r1, r3
 80100bc:	68f8      	ldr	r0, [r7, #12]
 80100be:	f7f1 fdca 	bl	8001c56 <BSP_MMC_GetCardInfo>
            *(DWORD*)buff = CardInfo.LogBlockSize / MMC_DEFAULT_BLOCK_SIZE;
 80100c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c4:	0a5a      	lsrs	r2, r3, #9
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	601a      	str	r2, [r3, #0]
            res = RES_OK;
 80100ca:	2300      	movs	r3, #0
 80100cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 80100d0:	e002      	b.n	80100d8 <MMC_Ioctl+0xa4>
        default:
            res = RES_PARERR;
 80100d2:	2304      	movs	r3, #4
 80100d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    return res;
 80100d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3730      	adds	r7, #48	@ 0x30
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	240148d1 	.word	0x240148d1

080100e8 <BSP_MMC_WriteCpltCallback>:
#endif

/* Callback functions */
void BSP_MMC_WriteCpltCallback(MMC_HandleTypeDef *hmmc) {
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	4a0f      	ldr	r2, [pc, #60]	@ (8010130 <BSP_MMC_WriteCpltCallback+0x48>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d102      	bne.n	80100fe <BSP_MMC_WriteCpltCallback+0x16>
 80100f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010134 <BSP_MMC_WriteCpltCallback+0x4c>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	e000      	b.n	8010100 <BSP_MMC_WriteCpltCallback+0x18>
 80100fe:	2300      	movs	r3, #0
 8010100:	60fb      	str	r3, [r7, #12]
#if defined(DUAL_MMC) || defined(ONLY_MMC2)
                                  (hmmc == &hmmc2) ? MMC2Semaphore : NULL;
#else
                                  NULL;
#endif
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8010102:	2300      	movs	r3, #0
 8010104:	60bb      	str	r3, [r7, #8]
    xSemaphoreGiveFromISR(semaphore, &xHigherPriorityTaskWoken);
 8010106:	f107 0308 	add.w	r3, r7, #8
 801010a:	4619      	mov	r1, r3
 801010c:	68f8      	ldr	r0, [r7, #12]
 801010e:	f000 fd69 	bl	8010be4 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d007      	beq.n	8010128 <BSP_MMC_WriteCpltCallback+0x40>
 8010118:	4b07      	ldr	r3, [pc, #28]	@ (8010138 <BSP_MMC_WriteCpltCallback+0x50>)
 801011a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801011e:	601a      	str	r2, [r3, #0]
 8010120:	f3bf 8f4f 	dsb	sy
 8010124:	f3bf 8f6f 	isb	sy
#else
    WriteStatus = 1;
#endif
}
 8010128:	bf00      	nop
 801012a:	3710      	adds	r7, #16
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	2405a57c 	.word	0x2405a57c
 8010134:	2401981c 	.word	0x2401981c
 8010138:	e000ed04 	.word	0xe000ed04

0801013c <BSP_MMC_ReadCpltCallback>:

void BSP_MMC_ReadCpltCallback(MMC_HandleTypeDef *hmmc) {
 801013c:	b580      	push	{r7, lr}
 801013e:	b084      	sub	sp, #16
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
#ifdef USE_FREERTOS
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
    SemaphoreHandle_t semaphore = (hmmc == &hmmc1) ? MMC1Semaphore :
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4a0f      	ldr	r2, [pc, #60]	@ (8010184 <BSP_MMC_ReadCpltCallback+0x48>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d102      	bne.n	8010152 <BSP_MMC_ReadCpltCallback+0x16>
 801014c:	4b0e      	ldr	r3, [pc, #56]	@ (8010188 <BSP_MMC_ReadCpltCallback+0x4c>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	e000      	b.n	8010154 <BSP_MMC_ReadCpltCallback+0x18>
 8010152:	2300      	movs	r3, #0
 8010154:	60fb      	str	r3, [r7, #12]
#if defined(DUAL_MMC) || defined(ONLY_MMC2)
                                  (hmmc == &hmmc2) ? MMC2Semaphore : NULL;
#else
                                  NULL;
#endif
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8010156:	2300      	movs	r3, #0
 8010158:	60bb      	str	r3, [r7, #8]
    xSemaphoreGiveFromISR(semaphore, &xHigherPriorityTaskWoken);
 801015a:	f107 0308 	add.w	r3, r7, #8
 801015e:	4619      	mov	r1, r3
 8010160:	68f8      	ldr	r0, [r7, #12]
 8010162:	f000 fd3f 	bl	8010be4 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d007      	beq.n	801017c <BSP_MMC_ReadCpltCallback+0x40>
 801016c:	4b07      	ldr	r3, [pc, #28]	@ (801018c <BSP_MMC_ReadCpltCallback+0x50>)
 801016e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010172:	601a      	str	r2, [r3, #0]
 8010174:	f3bf 8f4f 	dsb	sy
 8010178:	f3bf 8f6f 	isb	sy
#else
    ReadStatus = 1;
#endif
}
 801017c:	bf00      	nop
 801017e:	3710      	adds	r7, #16
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	2405a57c 	.word	0x2405a57c
 8010188:	2401981c 	.word	0x2401981c
 801018c:	e000ed04 	.word	0xe000ed04

08010190 <MMC1_initialize>:

/* MMC1 Driver */
#if defined(DUAL_MMC) || defined(ONLY_MMC1)
static DSTATUS MMC1_initialize(BYTE lun) { return MMC_Initialize(&hmmc1, lun); }
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0
 8010196:	4603      	mov	r3, r0
 8010198:	71fb      	strb	r3, [r7, #7]
 801019a:	79fb      	ldrb	r3, [r7, #7]
 801019c:	4619      	mov	r1, r3
 801019e:	4804      	ldr	r0, [pc, #16]	@ (80101b0 <MMC1_initialize+0x20>)
 80101a0:	f7ff fe7a 	bl	800fe98 <MMC_Initialize>
 80101a4:	4603      	mov	r3, r0
 80101a6:	4618      	mov	r0, r3
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	2405a57c 	.word	0x2405a57c

080101b4 <MMC1_status>:
static DSTATUS MMC1_status(BYTE lun) { return MMC_CheckStatus(&hmmc1); }
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	4603      	mov	r3, r0
 80101bc:	71fb      	strb	r3, [r7, #7]
 80101be:	4804      	ldr	r0, [pc, #16]	@ (80101d0 <MMC1_status+0x1c>)
 80101c0:	f7ff fe4c 	bl	800fe5c <MMC_CheckStatus>
 80101c4:	4603      	mov	r3, r0
 80101c6:	4618      	mov	r0, r3
 80101c8:	3708      	adds	r7, #8
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
 80101ce:	bf00      	nop
 80101d0:	2405a57c 	.word	0x2405a57c

080101d4 <MMC1_read>:
static DRESULT MMC1_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) { return MMC_Read(&hmmc1, buff, sector, count); }
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60b9      	str	r1, [r7, #8]
 80101dc:	607a      	str	r2, [r7, #4]
 80101de:	603b      	str	r3, [r7, #0]
 80101e0:	4603      	mov	r3, r0
 80101e2:	73fb      	strb	r3, [r7, #15]
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	68b9      	ldr	r1, [r7, #8]
 80101ea:	4804      	ldr	r0, [pc, #16]	@ (80101fc <MMC1_read+0x28>)
 80101ec:	f7ff fe96 	bl	800ff1c <MMC_Read>
 80101f0:	4603      	mov	r3, r0
 80101f2:	4618      	mov	r0, r3
 80101f4:	3710      	adds	r7, #16
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	2405a57c 	.word	0x2405a57c

08010200 <MMC1_write>:
#if _USE_WRITE == 1
static DRESULT MMC1_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) { return MMC_Write(&hmmc1, buff, sector, count); }
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	60b9      	str	r1, [r7, #8]
 8010208:	607a      	str	r2, [r7, #4]
 801020a:	603b      	str	r3, [r7, #0]
 801020c:	4603      	mov	r3, r0
 801020e:	73fb      	strb	r3, [r7, #15]
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	68b9      	ldr	r1, [r7, #8]
 8010216:	4804      	ldr	r0, [pc, #16]	@ (8010228 <MMC1_write+0x28>)
 8010218:	f7ff fec6 	bl	800ffa8 <MMC_Write>
 801021c:	4603      	mov	r3, r0
 801021e:	4618      	mov	r0, r3
 8010220:	3710      	adds	r7, #16
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	2405a57c 	.word	0x2405a57c

0801022c <MMC1_ioctl>:
#endif
#if _USE_IOCTL == 1
static DRESULT MMC1_ioctl(BYTE lun, BYTE cmd, void *buff) { return MMC_Ioctl(&hmmc1, cmd, buff); }
 801022c:	b580      	push	{r7, lr}
 801022e:	b082      	sub	sp, #8
 8010230:	af00      	add	r7, sp, #0
 8010232:	4603      	mov	r3, r0
 8010234:	603a      	str	r2, [r7, #0]
 8010236:	71fb      	strb	r3, [r7, #7]
 8010238:	460b      	mov	r3, r1
 801023a:	71bb      	strb	r3, [r7, #6]
 801023c:	79bb      	ldrb	r3, [r7, #6]
 801023e:	683a      	ldr	r2, [r7, #0]
 8010240:	4619      	mov	r1, r3
 8010242:	4804      	ldr	r0, [pc, #16]	@ (8010254 <MMC1_ioctl+0x28>)
 8010244:	f7ff fef6 	bl	8010034 <MMC_Ioctl>
 8010248:	4603      	mov	r3, r0
 801024a:	4618      	mov	r0, r3
 801024c:	3708      	adds	r7, #8
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	2405a57c 	.word	0x2405a57c

08010258 <MMC1_GetDriver>:
#if _USE_IOCTL == 1
    MMC1_ioctl,
#endif
};

const Diskio_drvTypeDef* MMC1_GetDriver(void) {
 8010258:	b480      	push	{r7}
 801025a:	af00      	add	r7, sp, #0
    return &MMC1_Driver;
 801025c:	4b02      	ldr	r3, [pc, #8]	@ (8010268 <MMC1_GetDriver+0x10>)
}
 801025e:	4618      	mov	r0, r3
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr
 8010268:	08025efc 	.word	0x08025efc

0801026c <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 801026c:	b480      	push	{r7}
 801026e:	b085      	sub	sp, #20
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	460b      	mov	r3, r1
 8010276:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 8010278:	2300      	movs	r3, #0
 801027a:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 801027c:	4b17      	ldr	r3, [pc, #92]	@ (80102dc <ff_uni2oem+0x70>)
 801027e:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2b7f      	cmp	r3, #127	@ 0x7f
 8010284:	d802      	bhi.n	801028c <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	81fb      	strh	r3, [r7, #14]
 801028a:	e01f      	b.n	80102cc <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010292:	d21b      	bcs.n	80102cc <ff_uni2oem+0x60>
 8010294:	887b      	ldrh	r3, [r7, #2]
 8010296:	f240 3252 	movw	r2, #850	@ 0x352
 801029a:	4293      	cmp	r3, r2
 801029c:	d116      	bne.n	80102cc <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 801029e:	2300      	movs	r3, #0
 80102a0:	81fb      	strh	r3, [r7, #14]
 80102a2:	e002      	b.n	80102aa <ff_uni2oem+0x3e>
 80102a4:	89fb      	ldrh	r3, [r7, #14]
 80102a6:	3301      	adds	r3, #1
 80102a8:	81fb      	strh	r3, [r7, #14]
 80102aa:	89fb      	ldrh	r3, [r7, #14]
 80102ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80102ae:	d808      	bhi.n	80102c2 <ff_uni2oem+0x56>
 80102b0:	89fb      	ldrh	r3, [r7, #14]
 80102b2:	005b      	lsls	r3, r3, #1
 80102b4:	68ba      	ldr	r2, [r7, #8]
 80102b6:	4413      	add	r3, r2
 80102b8:	881b      	ldrh	r3, [r3, #0]
 80102ba:	461a      	mov	r2, r3
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	4293      	cmp	r3, r2
 80102c0:	d1f0      	bne.n	80102a4 <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 80102c2:	89fb      	ldrh	r3, [r7, #14]
 80102c4:	3380      	adds	r3, #128	@ 0x80
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80102cc:	89fb      	ldrh	r3, [r7, #14]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3714      	adds	r7, #20
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	08025f10 	.word	0x08025f10

080102e0 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 80102e0:	b480      	push	{r7}
 80102e2:	b085      	sub	sp, #20
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	4603      	mov	r3, r0
 80102e8:	460a      	mov	r2, r1
 80102ea:	80fb      	strh	r3, [r7, #6]
 80102ec:	4613      	mov	r3, r2
 80102ee:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 80102f0:	2300      	movs	r3, #0
 80102f2:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 80102f4:	4b0f      	ldr	r3, [pc, #60]	@ (8010334 <ff_oem2uni+0x54>)
 80102f6:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 80102f8:	88fb      	ldrh	r3, [r7, #6]
 80102fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80102fc:	d802      	bhi.n	8010304 <ff_oem2uni+0x24>
		c = oem;
 80102fe:	88fb      	ldrh	r3, [r7, #6]
 8010300:	81fb      	strh	r3, [r7, #14]
 8010302:	e00f      	b.n	8010324 <ff_oem2uni+0x44>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 8010304:	88bb      	ldrh	r3, [r7, #4]
 8010306:	f240 3252 	movw	r2, #850	@ 0x352
 801030a:	4293      	cmp	r3, r2
 801030c:	d10a      	bne.n	8010324 <ff_oem2uni+0x44>
			if (oem < 0x100) c = p[oem - 0x80];
 801030e:	88fb      	ldrh	r3, [r7, #6]
 8010310:	2bff      	cmp	r3, #255	@ 0xff
 8010312:	d807      	bhi.n	8010324 <ff_oem2uni+0x44>
 8010314:	88fa      	ldrh	r2, [r7, #6]
 8010316:	4b08      	ldr	r3, [pc, #32]	@ (8010338 <ff_oem2uni+0x58>)
 8010318:	4413      	add	r3, r2
 801031a:	005b      	lsls	r3, r3, #1
 801031c:	68ba      	ldr	r2, [r7, #8]
 801031e:	4413      	add	r3, r2
 8010320:	881b      	ldrh	r3, [r3, #0]
 8010322:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010324:	89fb      	ldrh	r3, [r7, #14]
}
 8010326:	4618      	mov	r0, r3
 8010328:	3714      	adds	r7, #20
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr
 8010332:	bf00      	nop
 8010334:	08025f10 	.word	0x08025f10
 8010338:	7fffff80 	.word	0x7fffff80

0801033c <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 801033c:	b480      	push	{r7}
 801033e:	b087      	sub	sp, #28
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801034a:	d27d      	bcs.n	8010448 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 8010350:	8a7b      	ldrh	r3, [r7, #18]
 8010352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010356:	d201      	bcs.n	801035c <ff_wtoupper+0x20>
 8010358:	4b3f      	ldr	r3, [pc, #252]	@ (8010458 <ff_wtoupper+0x11c>)
 801035a:	e000      	b.n	801035e <ff_wtoupper+0x22>
 801035c:	4b3f      	ldr	r3, [pc, #252]	@ (801045c <ff_wtoupper+0x120>)
 801035e:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	1c9a      	adds	r2, r3, #2
 8010364:	617a      	str	r2, [r7, #20]
 8010366:	881b      	ldrh	r3, [r3, #0]
 8010368:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 801036a:	8a3b      	ldrh	r3, [r7, #16]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d069      	beq.n	8010444 <ff_wtoupper+0x108>
 8010370:	8a7a      	ldrh	r2, [r7, #18]
 8010372:	8a3b      	ldrh	r3, [r7, #16]
 8010374:	429a      	cmp	r2, r3
 8010376:	d365      	bcc.n	8010444 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	1c9a      	adds	r2, r3, #2
 801037c:	617a      	str	r2, [r7, #20]
 801037e:	881b      	ldrh	r3, [r3, #0]
 8010380:	81fb      	strh	r3, [r7, #14]
 8010382:	89fb      	ldrh	r3, [r7, #14]
 8010384:	0a1b      	lsrs	r3, r3, #8
 8010386:	81bb      	strh	r3, [r7, #12]
 8010388:	89fb      	ldrh	r3, [r7, #14]
 801038a:	b2db      	uxtb	r3, r3
 801038c:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 801038e:	8a7a      	ldrh	r2, [r7, #18]
 8010390:	8a39      	ldrh	r1, [r7, #16]
 8010392:	89fb      	ldrh	r3, [r7, #14]
 8010394:	440b      	add	r3, r1
 8010396:	429a      	cmp	r2, r3
 8010398:	da4a      	bge.n	8010430 <ff_wtoupper+0xf4>
				switch (cmd) {
 801039a:	89bb      	ldrh	r3, [r7, #12]
 801039c:	2b08      	cmp	r3, #8
 801039e:	d850      	bhi.n	8010442 <ff_wtoupper+0x106>
 80103a0:	a201      	add	r2, pc, #4	@ (adr r2, 80103a8 <ff_wtoupper+0x6c>)
 80103a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103a6:	bf00      	nop
 80103a8:	080103cd 	.word	0x080103cd
 80103ac:	080103df 	.word	0x080103df
 80103b0:	080103f5 	.word	0x080103f5
 80103b4:	080103fd 	.word	0x080103fd
 80103b8:	08010405 	.word	0x08010405
 80103bc:	0801040d 	.word	0x0801040d
 80103c0:	08010415 	.word	0x08010415
 80103c4:	0801041d 	.word	0x0801041d
 80103c8:	08010425 	.word	0x08010425
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 80103cc:	8a7a      	ldrh	r2, [r7, #18]
 80103ce:	8a3b      	ldrh	r3, [r7, #16]
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	005b      	lsls	r3, r3, #1
 80103d4:	697a      	ldr	r2, [r7, #20]
 80103d6:	4413      	add	r3, r2
 80103d8:	881b      	ldrh	r3, [r3, #0]
 80103da:	827b      	strh	r3, [r7, #18]
 80103dc:	e027      	b.n	801042e <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 80103de:	8a7a      	ldrh	r2, [r7, #18]
 80103e0:	8a3b      	ldrh	r3, [r7, #16]
 80103e2:	1ad3      	subs	r3, r2, r3
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	f003 0301 	and.w	r3, r3, #1
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	8a7a      	ldrh	r2, [r7, #18]
 80103ee:	1ad3      	subs	r3, r2, r3
 80103f0:	827b      	strh	r3, [r7, #18]
 80103f2:	e01c      	b.n	801042e <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 80103f4:	8a7b      	ldrh	r3, [r7, #18]
 80103f6:	3b10      	subs	r3, #16
 80103f8:	827b      	strh	r3, [r7, #18]
 80103fa:	e018      	b.n	801042e <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 80103fc:	8a7b      	ldrh	r3, [r7, #18]
 80103fe:	3b20      	subs	r3, #32
 8010400:	827b      	strh	r3, [r7, #18]
 8010402:	e014      	b.n	801042e <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8010404:	8a7b      	ldrh	r3, [r7, #18]
 8010406:	3b30      	subs	r3, #48	@ 0x30
 8010408:	827b      	strh	r3, [r7, #18]
 801040a:	e010      	b.n	801042e <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 801040c:	8a7b      	ldrh	r3, [r7, #18]
 801040e:	3b1a      	subs	r3, #26
 8010410:	827b      	strh	r3, [r7, #18]
 8010412:	e00c      	b.n	801042e <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 8010414:	8a7b      	ldrh	r3, [r7, #18]
 8010416:	3308      	adds	r3, #8
 8010418:	827b      	strh	r3, [r7, #18]
 801041a:	e008      	b.n	801042e <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 801041c:	8a7b      	ldrh	r3, [r7, #18]
 801041e:	3b50      	subs	r3, #80	@ 0x50
 8010420:	827b      	strh	r3, [r7, #18]
 8010422:	e004      	b.n	801042e <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8010424:	8a7b      	ldrh	r3, [r7, #18]
 8010426:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801042a:	827b      	strh	r3, [r7, #18]
 801042c:	bf00      	nop
				}
				break;
 801042e:	e008      	b.n	8010442 <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8010430:	89bb      	ldrh	r3, [r7, #12]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d194      	bne.n	8010360 <ff_wtoupper+0x24>
 8010436:	89fb      	ldrh	r3, [r7, #14]
 8010438:	005b      	lsls	r3, r3, #1
 801043a:	697a      	ldr	r2, [r7, #20]
 801043c:	4413      	add	r3, r2
 801043e:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 8010440:	e78e      	b.n	8010360 <ff_wtoupper+0x24>
				break;
 8010442:	bf00      	nop
		}
		uni = uc;
 8010444:	8a7b      	ldrh	r3, [r7, #18]
 8010446:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8010448:	687b      	ldr	r3, [r7, #4]
}
 801044a:	4618      	mov	r0, r3
 801044c:	371c      	adds	r7, #28
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr
 8010456:	bf00      	nop
 8010458:	08026010 	.word	0x08026010
 801045c:	08026204 	.word	0x08026204

08010460 <ff_mutex_create>:
*/

int ff_mutex_create (	/* Returns 1:Function succeeded or 0:Could not create the mutex */
	int vol				/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]

	Mutex[vol] = OSMutexCreate(0, &err);
	return (int)(err == OS_NO_ERR);

#elif OS_TYPE == 3	/* FreeRTOS */
	Mutex[vol] = xSemaphoreCreateMutex();
 8010468:	2001      	movs	r0, #1
 801046a:	f000 fa98 	bl	801099e <xQueueCreateMutex>
 801046e:	4602      	mov	r2, r0
 8010470:	4908      	ldr	r1, [pc, #32]	@ (8010494 <ff_mutex_create+0x34>)
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return (int)(Mutex[vol] != NULL);
 8010478:	4a06      	ldr	r2, [pc, #24]	@ (8010494 <ff_mutex_create+0x34>)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010480:	2b00      	cmp	r3, #0
 8010482:	bf14      	ite	ne
 8010484:	2301      	movne	r3, #1
 8010486:	2300      	moveq	r3, #0
 8010488:	b2db      	uxtb	r3, r3

	Mutex[vol] = osMutexCreate(osMutex(cmsis_os_mutex));
	return (int)(Mutex[vol] != NULL);

#endif
}
 801048a:	4618      	mov	r0, r3
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	24019820 	.word	0x24019820

08010498 <ff_mutex_delete>:
*/

void ff_mutex_delete (	/* Returns 1:Function succeeded or 0:Could not delete due to an error */
	int vol				/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
	OS_ERR err;

	OSMutexDel(Mutex[vol], OS_DEL_ALWAYS, &err);

#elif OS_TYPE == 3	/* FreeRTOS */
	vSemaphoreDelete(Mutex[vol]);
 80104a0:	4a05      	ldr	r2, [pc, #20]	@ (80104b8 <ff_mutex_delete+0x20>)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104a8:	4618      	mov	r0, r3
 80104aa:	f000 ff25 	bl	80112f8 <vQueueDelete>

#elif OS_TYPE == 4	/* CMSIS-RTOS */
	osMutexDelete(Mutex[vol]);

#endif
}
 80104ae:	bf00      	nop
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	24019820 	.word	0x24019820

080104bc <ff_mutex_take>:
*/

int ff_mutex_take (	/* Returns 1:Succeeded or 0:Timeout */
	int vol			/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]

	OSMutexPend(Mutex[vol], FF_FS_TIMEOUT, &err));
	return (int)(err == OS_NO_ERR);

#elif OS_TYPE == 3	/* FreeRTOS */
	return (int)(xSemaphoreTake(Mutex[vol], FF_FS_TIMEOUT) == pdTRUE);
 80104c4:	4a09      	ldr	r2, [pc, #36]	@ (80104ec <ff_mutex_take+0x30>)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80104d0:	4618      	mov	r0, r3
 80104d2:	f000 fd21 	bl	8010f18 <xQueueSemaphoreTake>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b01      	cmp	r3, #1
 80104da:	bf0c      	ite	eq
 80104dc:	2301      	moveq	r3, #1
 80104de:	2300      	movne	r3, #0
 80104e0:	b2db      	uxtb	r3, r3

#elif OS_TYPE == 4	/* CMSIS-RTOS */
	return (int)(osMutexWait(Mutex[vol], FF_FS_TIMEOUT) == osOK);

#endif
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	bf00      	nop
 80104ec:	24019820 	.word	0x24019820

080104f0 <ff_mutex_give>:
*/

void ff_mutex_give (
	int vol			/* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]

#elif OS_TYPE == 2	/* uC/OS-II */
	OSMutexPost(Mutex[vol]);

#elif OS_TYPE == 3	/* FreeRTOS */
	xSemaphoreGive(Mutex[vol]);
 80104f8:	4a06      	ldr	r2, [pc, #24]	@ (8010514 <ff_mutex_give+0x24>)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010500:	2300      	movs	r3, #0
 8010502:	2200      	movs	r2, #0
 8010504:	2100      	movs	r1, #0
 8010506:	f000 fa63 	bl	80109d0 <xQueueGenericSend>

#elif OS_TYPE == 4	/* CMSIS-RTOS */
	osMutexRelease(Mutex[vol]);

#endif
}
 801050a:	bf00      	nop
 801050c:	3708      	adds	r7, #8
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	24019820 	.word	0x24019820

08010518 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f103 0208 	add.w	r2, r3, #8
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f04f 32ff 	mov.w	r2, #4294967295
 8010530:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f103 0208 	add.w	r2, r3, #8
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f103 0208 	add.w	r2, r3, #8
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2200      	movs	r2, #0
 801054a:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 801054c:	bf00      	nop
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010558:	b480      	push	{r7}
 801055a:	b083      	sub	sp, #12
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8010566:	bf00      	nop
 8010568:	370c      	adds	r7, #12
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr

08010572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8010572:	b480      	push	{r7}
 8010574:	b085      	sub	sp, #20
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
 801057a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	689a      	ldr	r2, [r3, #8]
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	683a      	ldr	r2, [r7, #0]
 801059c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	1c5a      	adds	r2, r3, #1
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 80105ae:	bf00      	nop
 80105b0:	3714      	adds	r7, #20
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr

080105ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80105ba:	b480      	push	{r7}
 80105bc:	b085      	sub	sp, #20
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
 80105c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d0:	d103      	bne.n	80105da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	691b      	ldr	r3, [r3, #16]
 80105d6:	60fb      	str	r3, [r7, #12]
 80105d8:	e00c      	b.n	80105f4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	3308      	adds	r3, #8
 80105de:	60fb      	str	r3, [r7, #12]
 80105e0:	e002      	b.n	80105e8 <vListInsert+0x2e>
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	60fb      	str	r3, [r7, #12]
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	68ba      	ldr	r2, [r7, #8]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d2f6      	bcs.n	80105e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	685a      	ldr	r2, [r3, #4]
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	683a      	ldr	r2, [r7, #0]
 8010602:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	68fa      	ldr	r2, [r7, #12]
 8010608:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	683a      	ldr	r2, [r7, #0]
 801060e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	1c5a      	adds	r2, r3, #1
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8010620:	bf00      	nop
 8010622:	3714      	adds	r7, #20
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801062c:	b480      	push	{r7}
 801062e:	b085      	sub	sp, #20
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	691b      	ldr	r3, [r3, #16]
 8010638:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	687a      	ldr	r2, [r7, #4]
 8010640:	6892      	ldr	r2, [r2, #8]
 8010642:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	689b      	ldr	r3, [r3, #8]
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	6852      	ldr	r2, [r2, #4]
 801064c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	687a      	ldr	r2, [r7, #4]
 8010654:	429a      	cmp	r2, r3
 8010656:	d103      	bne.n	8010660 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	689a      	ldr	r2, [r3, #8]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	1e5a      	subs	r2, r3, #1
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	681b      	ldr	r3, [r3, #0]
}
 8010674:	4618      	mov	r0, r3
 8010676:	3714      	adds	r7, #20
 8010678:	46bd      	mov	sp, r7
 801067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067e:	4770      	bx	lr

08010680 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b086      	sub	sp, #24
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 801068a:	2301      	movs	r3, #1
 801068c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d10d      	bne.n	80106b4 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8010698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801069c:	b672      	cpsid	i
 801069e:	f383 8811 	msr	BASEPRI, r3
 80106a2:	f3bf 8f6f 	isb	sy
 80106a6:	f3bf 8f4f 	dsb	sy
 80106aa:	b662      	cpsie	i
 80106ac:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80106ae:	bf00      	nop
 80106b0:	bf00      	nop
 80106b2:	e7fd      	b.n	80106b0 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d05d      	beq.n	8010776 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d059      	beq.n	8010776 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106ca:	2100      	movs	r1, #0
 80106cc:	fba3 2302 	umull	r2, r3, r3, r2
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d000      	beq.n	80106d6 <xQueueGenericReset+0x56>
 80106d4:	2101      	movs	r1, #1
 80106d6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d14c      	bne.n	8010776 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 80106dc:	f003 fc42 	bl	8013f64 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	681a      	ldr	r2, [r3, #0]
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106e8:	6939      	ldr	r1, [r7, #16]
 80106ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80106ec:	fb01 f303 	mul.w	r3, r1, r3
 80106f0:	441a      	add	r2, r3
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	2200      	movs	r2, #0
 80106fa:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801070c:	3b01      	subs	r3, #1
 801070e:	6939      	ldr	r1, [r7, #16]
 8010710:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010712:	fb01 f303 	mul.w	r3, r1, r3
 8010716:	441a      	add	r2, r3
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	22ff      	movs	r2, #255	@ 0xff
 8010720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	22ff      	movs	r2, #255	@ 0xff
 8010728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d114      	bne.n	801075c <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	691b      	ldr	r3, [r3, #16]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d01a      	beq.n	8010770 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	3310      	adds	r3, #16
 801073e:	4618      	mov	r0, r3
 8010740:	f001 ffb2 	bl	80126a8 <xTaskRemoveFromEventList>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	d012      	beq.n	8010770 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 801074a:	4b17      	ldr	r3, [pc, #92]	@ (80107a8 <xQueueGenericReset+0x128>)
 801074c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010750:	601a      	str	r2, [r3, #0]
 8010752:	f3bf 8f4f 	dsb	sy
 8010756:	f3bf 8f6f 	isb	sy
 801075a:	e009      	b.n	8010770 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	3310      	adds	r3, #16
 8010760:	4618      	mov	r0, r3
 8010762:	f7ff fed9 	bl	8010518 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	3324      	adds	r3, #36	@ 0x24
 801076a:	4618      	mov	r0, r3
 801076c:	f7ff fed4 	bl	8010518 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8010770:	f003 fc2e 	bl	8013fd0 <vPortExitCritical>
 8010774:	e001      	b.n	801077a <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8010776:	2300      	movs	r3, #0
 8010778:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d10d      	bne.n	801079c <xQueueGenericReset+0x11c>
    __asm volatile
 8010780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010784:	b672      	cpsid	i
 8010786:	f383 8811 	msr	BASEPRI, r3
 801078a:	f3bf 8f6f 	isb	sy
 801078e:	f3bf 8f4f 	dsb	sy
 8010792:	b662      	cpsie	i
 8010794:	60bb      	str	r3, [r7, #8]
}
 8010796:	bf00      	nop
 8010798:	bf00      	nop
 801079a:	e7fd      	b.n	8010798 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 801079c:	697b      	ldr	r3, [r7, #20]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3718      	adds	r7, #24
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	e000ed04 	.word	0xe000ed04

080107ac <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b08c      	sub	sp, #48	@ 0x30
 80107b0:	af02      	add	r7, sp, #8
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	607a      	str	r2, [r7, #4]
 80107b8:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80107ba:	2300      	movs	r3, #0
 80107bc:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d10d      	bne.n	80107e0 <xQueueGenericCreateStatic+0x34>
    __asm volatile
 80107c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c8:	b672      	cpsid	i
 80107ca:	f383 8811 	msr	BASEPRI, r3
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	f3bf 8f4f 	dsb	sy
 80107d6:	b662      	cpsie	i
 80107d8:	623b      	str	r3, [r7, #32]
}
 80107da:	bf00      	nop
 80107dc:	bf00      	nop
 80107de:	e7fd      	b.n	80107dc <xQueueGenericCreateStatic+0x30>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d033      	beq.n	801084e <xQueueGenericCreateStatic+0xa2>
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d030      	beq.n	801084e <xQueueGenericCreateStatic+0xa2>
            ( pxStaticQueue != NULL ) &&
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d002      	beq.n	80107f8 <xQueueGenericCreateStatic+0x4c>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d02a      	beq.n	801084e <xQueueGenericCreateStatic+0xa2>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d102      	bne.n	8010804 <xQueueGenericCreateStatic+0x58>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d124      	bne.n	801084e <xQueueGenericCreateStatic+0xa2>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8010804:	2350      	movs	r3, #80	@ 0x50
 8010806:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	2b50      	cmp	r3, #80	@ 0x50
 801080c:	d00d      	beq.n	801082a <xQueueGenericCreateStatic+0x7e>
    __asm volatile
 801080e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010812:	b672      	cpsid	i
 8010814:	f383 8811 	msr	BASEPRI, r3
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	f3bf 8f4f 	dsb	sy
 8010820:	b662      	cpsie	i
 8010822:	61fb      	str	r3, [r7, #28]
}
 8010824:	bf00      	nop
 8010826:	bf00      	nop
 8010828:	e7fd      	b.n	8010826 <xQueueGenericCreateStatic+0x7a>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 801082a:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010832:	2201      	movs	r2, #1
 8010834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010838:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801083c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801083e:	9300      	str	r3, [sp, #0]
 8010840:	4613      	mov	r3, r2
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	68b9      	ldr	r1, [r7, #8]
 8010846:	68f8      	ldr	r0, [r7, #12]
 8010848:	f000 f86c 	bl	8010924 <prvInitialiseNewQueue>
 801084c:	e010      	b.n	8010870 <xQueueGenericCreateStatic+0xc4>
        }
        else
        {
            configASSERT( pxNewQueue );
 801084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010850:	2b00      	cmp	r3, #0
 8010852:	d10d      	bne.n	8010870 <xQueueGenericCreateStatic+0xc4>
    __asm volatile
 8010854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010858:	b672      	cpsid	i
 801085a:	f383 8811 	msr	BASEPRI, r3
 801085e:	f3bf 8f6f 	isb	sy
 8010862:	f3bf 8f4f 	dsb	sy
 8010866:	b662      	cpsie	i
 8010868:	61bb      	str	r3, [r7, #24]
}
 801086a:	bf00      	nop
 801086c:	bf00      	nop
 801086e:	e7fd      	b.n	801086c <xQueueGenericCreateStatic+0xc0>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 8010870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8010872:	4618      	mov	r0, r3
 8010874:	3728      	adds	r7, #40	@ 0x28
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 801087a:	b580      	push	{r7, lr}
 801087c:	b08a      	sub	sp, #40	@ 0x28
 801087e:	af02      	add	r7, sp, #8
 8010880:	60f8      	str	r0, [r7, #12]
 8010882:	60b9      	str	r1, [r7, #8]
 8010884:	4613      	mov	r3, r2
 8010886:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8010888:	2300      	movs	r3, #0
 801088a:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d032      	beq.n	80108f8 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8010892:	2100      	movs	r1, #0
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	fba3 2302 	umull	r2, r3, r3, r2
 801089c:	2b00      	cmp	r3, #0
 801089e:	d000      	beq.n	80108a2 <xQueueGenericCreate+0x28>
 80108a0:	2101      	movs	r1, #1
 80108a2:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d127      	bne.n	80108f8 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	68ba      	ldr	r2, [r7, #8]
 80108ac:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80108b0:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80108b4:	d820      	bhi.n	80108f8 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	68ba      	ldr	r2, [r7, #8]
 80108ba:	fb02 f303 	mul.w	r3, r2, r3
 80108be:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80108c0:	69bb      	ldr	r3, [r7, #24]
 80108c2:	3350      	adds	r3, #80	@ 0x50
 80108c4:	4618      	mov	r0, r3
 80108c6:	f003 fc81 	bl	80141cc <pvPortMalloc>
 80108ca:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d023      	beq.n	801091a <xQueueGenericCreate+0xa0>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	3350      	adds	r3, #80	@ 0x50
 80108da:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	2200      	movs	r2, #0
 80108e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80108e4:	79fa      	ldrb	r2, [r7, #7]
 80108e6:	69fb      	ldr	r3, [r7, #28]
 80108e8:	9300      	str	r3, [sp, #0]
 80108ea:	4613      	mov	r3, r2
 80108ec:	697a      	ldr	r2, [r7, #20]
 80108ee:	68b9      	ldr	r1, [r7, #8]
 80108f0:	68f8      	ldr	r0, [r7, #12]
 80108f2:	f000 f817 	bl	8010924 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80108f6:	e010      	b.n	801091a <xQueueGenericCreate+0xa0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d10d      	bne.n	801091a <xQueueGenericCreate+0xa0>
    __asm volatile
 80108fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010902:	b672      	cpsid	i
 8010904:	f383 8811 	msr	BASEPRI, r3
 8010908:	f3bf 8f6f 	isb	sy
 801090c:	f3bf 8f4f 	dsb	sy
 8010910:	b662      	cpsie	i
 8010912:	613b      	str	r3, [r7, #16]
}
 8010914:	bf00      	nop
 8010916:	bf00      	nop
 8010918:	e7fd      	b.n	8010916 <xQueueGenericCreate+0x9c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 801091a:	69fb      	ldr	r3, [r7, #28]
    }
 801091c:	4618      	mov	r0, r3
 801091e:	3720      	adds	r7, #32
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	60b9      	str	r1, [r7, #8]
 801092e:	607a      	str	r2, [r7, #4]
 8010930:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d103      	bne.n	8010940 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	69ba      	ldr	r2, [r7, #24]
 801093c:	601a      	str	r2, [r3, #0]
 801093e:	e002      	b.n	8010946 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010940:	69bb      	ldr	r3, [r7, #24]
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	68fa      	ldr	r2, [r7, #12]
 801094a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 801094c:	69bb      	ldr	r3, [r7, #24]
 801094e:	68ba      	ldr	r2, [r7, #8]
 8010950:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010952:	2101      	movs	r1, #1
 8010954:	69b8      	ldr	r0, [r7, #24]
 8010956:	f7ff fe93 	bl	8010680 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	78fa      	ldrb	r2, [r7, #3]
 801095e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8010962:	bf00      	nop
 8010964:	3710      	adds	r7, #16
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}

0801096a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 801096a:	b580      	push	{r7, lr}
 801096c:	b082      	sub	sp, #8
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d00e      	beq.n	8010996 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2200      	movs	r2, #0
 8010982:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2200      	movs	r2, #0
 8010988:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801098a:	2300      	movs	r3, #0
 801098c:	2200      	movs	r2, #0
 801098e:	2100      	movs	r1, #0
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f000 f81d 	bl	80109d0 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8010996:	bf00      	nop
 8010998:	3708      	adds	r7, #8
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 801099e:	b580      	push	{r7, lr}
 80109a0:	b086      	sub	sp, #24
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	4603      	mov	r3, r0
 80109a6:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80109a8:	2301      	movs	r3, #1
 80109aa:	617b      	str	r3, [r7, #20]
 80109ac:	2300      	movs	r3, #0
 80109ae:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80109b0:	79fb      	ldrb	r3, [r7, #7]
 80109b2:	461a      	mov	r2, r3
 80109b4:	6939      	ldr	r1, [r7, #16]
 80109b6:	6978      	ldr	r0, [r7, #20]
 80109b8:	f7ff ff5f 	bl	801087a <xQueueGenericCreate>
 80109bc:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f7ff ffd3 	bl	801096a <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 80109c4:	68fb      	ldr	r3, [r7, #12]
    }
 80109c6:	4618      	mov	r0, r3
 80109c8:	3718      	adds	r7, #24
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
	...

080109d0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b08e      	sub	sp, #56	@ 0x38
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	607a      	str	r2, [r7, #4]
 80109dc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80109de:	2300      	movs	r3, #0
 80109e0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80109e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d10d      	bne.n	8010a08 <xQueueGenericSend+0x38>
    __asm volatile
 80109ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109f0:	b672      	cpsid	i
 80109f2:	f383 8811 	msr	BASEPRI, r3
 80109f6:	f3bf 8f6f 	isb	sy
 80109fa:	f3bf 8f4f 	dsb	sy
 80109fe:	b662      	cpsie	i
 8010a00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010a02:	bf00      	nop
 8010a04:	bf00      	nop
 8010a06:	e7fd      	b.n	8010a04 <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d103      	bne.n	8010a16 <xQueueGenericSend+0x46>
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d101      	bne.n	8010a1a <xQueueGenericSend+0x4a>
 8010a16:	2301      	movs	r3, #1
 8010a18:	e000      	b.n	8010a1c <xQueueGenericSend+0x4c>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d10d      	bne.n	8010a3c <xQueueGenericSend+0x6c>
    __asm volatile
 8010a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a24:	b672      	cpsid	i
 8010a26:	f383 8811 	msr	BASEPRI, r3
 8010a2a:	f3bf 8f6f 	isb	sy
 8010a2e:	f3bf 8f4f 	dsb	sy
 8010a32:	b662      	cpsie	i
 8010a34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010a36:	bf00      	nop
 8010a38:	bf00      	nop
 8010a3a:	e7fd      	b.n	8010a38 <xQueueGenericSend+0x68>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	2b02      	cmp	r3, #2
 8010a40:	d103      	bne.n	8010a4a <xQueueGenericSend+0x7a>
 8010a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a46:	2b01      	cmp	r3, #1
 8010a48:	d101      	bne.n	8010a4e <xQueueGenericSend+0x7e>
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	e000      	b.n	8010a50 <xQueueGenericSend+0x80>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d10d      	bne.n	8010a70 <xQueueGenericSend+0xa0>
    __asm volatile
 8010a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a58:	b672      	cpsid	i
 8010a5a:	f383 8811 	msr	BASEPRI, r3
 8010a5e:	f3bf 8f6f 	isb	sy
 8010a62:	f3bf 8f4f 	dsb	sy
 8010a66:	b662      	cpsie	i
 8010a68:	623b      	str	r3, [r7, #32]
}
 8010a6a:	bf00      	nop
 8010a6c:	bf00      	nop
 8010a6e:	e7fd      	b.n	8010a6c <xQueueGenericSend+0x9c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a70:	f002 f90e 	bl	8012c90 <xTaskGetSchedulerState>
 8010a74:	4603      	mov	r3, r0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d102      	bne.n	8010a80 <xQueueGenericSend+0xb0>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d101      	bne.n	8010a84 <xQueueGenericSend+0xb4>
 8010a80:	2301      	movs	r3, #1
 8010a82:	e000      	b.n	8010a86 <xQueueGenericSend+0xb6>
 8010a84:	2300      	movs	r3, #0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d10d      	bne.n	8010aa6 <xQueueGenericSend+0xd6>
    __asm volatile
 8010a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a8e:	b672      	cpsid	i
 8010a90:	f383 8811 	msr	BASEPRI, r3
 8010a94:	f3bf 8f6f 	isb	sy
 8010a98:	f3bf 8f4f 	dsb	sy
 8010a9c:	b662      	cpsie	i
 8010a9e:	61fb      	str	r3, [r7, #28]
}
 8010aa0:	bf00      	nop
 8010aa2:	bf00      	nop
 8010aa4:	e7fd      	b.n	8010aa2 <xQueueGenericSend+0xd2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8010aa6:	f003 fa5d 	bl	8013f64 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d302      	bcc.n	8010abc <xQueueGenericSend+0xec>
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	2b02      	cmp	r3, #2
 8010aba:	d129      	bne.n	8010b10 <xQueueGenericSend+0x140>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010abc:	683a      	ldr	r2, [r7, #0]
 8010abe:	68b9      	ldr	r1, [r7, #8]
 8010ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ac2:	f000 fc57 	bl	8011374 <prvCopyDataToQueue>
 8010ac6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d010      	beq.n	8010af2 <xQueueGenericSend+0x122>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ad2:	3324      	adds	r3, #36	@ 0x24
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f001 fde7 	bl	80126a8 <xTaskRemoveFromEventList>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d013      	beq.n	8010b08 <xQueueGenericSend+0x138>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8010ae0:	4b3f      	ldr	r3, [pc, #252]	@ (8010be0 <xQueueGenericSend+0x210>)
 8010ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ae6:	601a      	str	r2, [r3, #0]
 8010ae8:	f3bf 8f4f 	dsb	sy
 8010aec:	f3bf 8f6f 	isb	sy
 8010af0:	e00a      	b.n	8010b08 <xQueueGenericSend+0x138>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8010af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d007      	beq.n	8010b08 <xQueueGenericSend+0x138>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8010af8:	4b39      	ldr	r3, [pc, #228]	@ (8010be0 <xQueueGenericSend+0x210>)
 8010afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010afe:	601a      	str	r2, [r3, #0]
 8010b00:	f3bf 8f4f 	dsb	sy
 8010b04:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8010b08:	f003 fa62 	bl	8013fd0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	e063      	b.n	8010bd8 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d103      	bne.n	8010b1e <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8010b16:	f003 fa5b 	bl	8013fd0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	e05c      	b.n	8010bd8 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 8010b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d106      	bne.n	8010b32 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8010b24:	f107 0314 	add.w	r3, r7, #20
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f001 fe99 	bl	8012860 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8010b2e:	2301      	movs	r3, #1
 8010b30:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8010b32:	f003 fa4d 	bl	8013fd0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8010b36:	f001 f9f7 	bl	8011f28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8010b3a:	f003 fa13 	bl	8013f64 <vPortEnterCritical>
 8010b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010b44:	b25b      	sxtb	r3, r3
 8010b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b4a:	d103      	bne.n	8010b54 <xQueueGenericSend+0x184>
 8010b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b4e:	2200      	movs	r2, #0
 8010b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010b5a:	b25b      	sxtb	r3, r3
 8010b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b60:	d103      	bne.n	8010b6a <xQueueGenericSend+0x19a>
 8010b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b64:	2200      	movs	r2, #0
 8010b66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010b6a:	f003 fa31 	bl	8013fd0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b6e:	1d3a      	adds	r2, r7, #4
 8010b70:	f107 0314 	add.w	r3, r7, #20
 8010b74:	4611      	mov	r1, r2
 8010b76:	4618      	mov	r0, r3
 8010b78:	f001 fe88 	bl	801288c <xTaskCheckForTimeOut>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d124      	bne.n	8010bcc <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010b82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b84:	f000 fcee 	bl	8011564 <prvIsQueueFull>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d018      	beq.n	8010bc0 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b90:	3310      	adds	r3, #16
 8010b92:	687a      	ldr	r2, [r7, #4]
 8010b94:	4611      	mov	r1, r2
 8010b96:	4618      	mov	r0, r3
 8010b98:	f001 fd16 	bl	80125c8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8010b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b9e:	f000 fc79 	bl	8011494 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8010ba2:	f001 f9cf 	bl	8011f44 <xTaskResumeAll>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	f47f af7c 	bne.w	8010aa6 <xQueueGenericSend+0xd6>
                {
                    taskYIELD_WITHIN_API();
 8010bae:	4b0c      	ldr	r3, [pc, #48]	@ (8010be0 <xQueueGenericSend+0x210>)
 8010bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bb4:	601a      	str	r2, [r3, #0]
 8010bb6:	f3bf 8f4f 	dsb	sy
 8010bba:	f3bf 8f6f 	isb	sy
 8010bbe:	e772      	b.n	8010aa6 <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8010bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010bc2:	f000 fc67 	bl	8011494 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8010bc6:	f001 f9bd 	bl	8011f44 <xTaskResumeAll>
 8010bca:	e76c      	b.n	8010aa6 <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8010bcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010bce:	f000 fc61 	bl	8011494 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8010bd2:	f001 f9b7 	bl	8011f44 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8010bd6:	2300      	movs	r3, #0
        }
    }
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3738      	adds	r7, #56	@ 0x38
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}
 8010be0:	e000ed04 	.word	0xe000ed04

08010be4 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b090      	sub	sp, #64	@ 0x40
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8010bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d10d      	bne.n	8010c14 <xQueueGiveFromISR+0x30>
    __asm volatile
 8010bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bfc:	b672      	cpsid	i
 8010bfe:	f383 8811 	msr	BASEPRI, r3
 8010c02:	f3bf 8f6f 	isb	sy
 8010c06:	f3bf 8f4f 	dsb	sy
 8010c0a:	b662      	cpsie	i
 8010c0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010c0e:	bf00      	nop
 8010c10:	bf00      	nop
 8010c12:	e7fd      	b.n	8010c10 <xQueueGiveFromISR+0x2c>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8010c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d00d      	beq.n	8010c38 <xQueueGiveFromISR+0x54>
    __asm volatile
 8010c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c20:	b672      	cpsid	i
 8010c22:	f383 8811 	msr	BASEPRI, r3
 8010c26:	f3bf 8f6f 	isb	sy
 8010c2a:	f3bf 8f4f 	dsb	sy
 8010c2e:	b662      	cpsie	i
 8010c30:	623b      	str	r3, [r7, #32]
}
 8010c32:	bf00      	nop
 8010c34:	bf00      	nop
 8010c36:	e7fd      	b.n	8010c34 <xQueueGiveFromISR+0x50>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d103      	bne.n	8010c48 <xQueueGiveFromISR+0x64>
 8010c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c42:	689b      	ldr	r3, [r3, #8]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d101      	bne.n	8010c4c <xQueueGiveFromISR+0x68>
 8010c48:	2301      	movs	r3, #1
 8010c4a:	e000      	b.n	8010c4e <xQueueGiveFromISR+0x6a>
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d10d      	bne.n	8010c6e <xQueueGiveFromISR+0x8a>
    __asm volatile
 8010c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c56:	b672      	cpsid	i
 8010c58:	f383 8811 	msr	BASEPRI, r3
 8010c5c:	f3bf 8f6f 	isb	sy
 8010c60:	f3bf 8f4f 	dsb	sy
 8010c64:	b662      	cpsie	i
 8010c66:	61fb      	str	r3, [r7, #28]
}
 8010c68:	bf00      	nop
 8010c6a:	bf00      	nop
 8010c6c:	e7fd      	b.n	8010c6a <xQueueGiveFromISR+0x86>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c6e:	f003 fa67 	bl	8014140 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8010c72:	f3ef 8211 	mrs	r2, BASEPRI
 8010c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c7a:	b672      	cpsid	i
 8010c7c:	f383 8811 	msr	BASEPRI, r3
 8010c80:	f3bf 8f6f 	isb	sy
 8010c84:	f3bf 8f4f 	dsb	sy
 8010c88:	b662      	cpsie	i
 8010c8a:	61ba      	str	r2, [r7, #24]
 8010c8c:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8010c8e:	69bb      	ldr	r3, [r7, #24]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8010c90:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c96:	633b      	str	r3, [r7, #48]	@ 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8010c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d245      	bcs.n	8010d2e <xQueueGiveFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8010ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010ca8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8010cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cae:	1c5a      	adds	r2, r3, #1
 8010cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8010cb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cbc:	d112      	bne.n	8010ce4 <xQueueGiveFromISR+0x100>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d030      	beq.n	8010d28 <xQueueGiveFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cc8:	3324      	adds	r3, #36	@ 0x24
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f001 fcec 	bl	80126a8 <xTaskRemoveFromEventList>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d028      	beq.n	8010d28 <xQueueGiveFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d025      	beq.n	8010d28 <xQueueGiveFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	601a      	str	r2, [r3, #0]
 8010ce2:	e021      	b.n	8010d28 <xQueueGiveFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8010ce4:	f001 fa48 	bl	8012178 <uxTaskGetNumberOfTasks>
 8010ce8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010cea:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010cee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d919      	bls.n	8010d28 <xQueueGiveFromISR+0x144>
 8010cf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010cf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8010cfa:	d10d      	bne.n	8010d18 <xQueueGiveFromISR+0x134>
    __asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d00:	b672      	cpsid	i
 8010d02:	f383 8811 	msr	BASEPRI, r3
 8010d06:	f3bf 8f6f 	isb	sy
 8010d0a:	f3bf 8f4f 	dsb	sy
 8010d0e:	b662      	cpsie	i
 8010d10:	613b      	str	r3, [r7, #16]
}
 8010d12:	bf00      	nop
 8010d14:	bf00      	nop
 8010d16:	e7fd      	b.n	8010d14 <xQueueGiveFromISR+0x130>
 8010d18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	b25a      	sxtb	r2, r3
 8010d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8010d28:	2301      	movs	r3, #1
 8010d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010d2c:	e001      	b.n	8010d32 <xQueueGiveFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d34:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8010d3c:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );

    return xReturn;
 8010d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3740      	adds	r7, #64	@ 0x40
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}

08010d48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b08c      	sub	sp, #48	@ 0x30
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8010d54:	2300      	movs	r3, #0
 8010d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8010d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d10d      	bne.n	8010d7e <xQueueReceive+0x36>
    __asm volatile
 8010d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d66:	b672      	cpsid	i
 8010d68:	f383 8811 	msr	BASEPRI, r3
 8010d6c:	f3bf 8f6f 	isb	sy
 8010d70:	f3bf 8f4f 	dsb	sy
 8010d74:	b662      	cpsie	i
 8010d76:	623b      	str	r3, [r7, #32]
}
 8010d78:	bf00      	nop
 8010d7a:	bf00      	nop
 8010d7c:	e7fd      	b.n	8010d7a <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d103      	bne.n	8010d8c <xQueueReceive+0x44>
 8010d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d101      	bne.n	8010d90 <xQueueReceive+0x48>
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	e000      	b.n	8010d92 <xQueueReceive+0x4a>
 8010d90:	2300      	movs	r3, #0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d10d      	bne.n	8010db2 <xQueueReceive+0x6a>
    __asm volatile
 8010d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d9a:	b672      	cpsid	i
 8010d9c:	f383 8811 	msr	BASEPRI, r3
 8010da0:	f3bf 8f6f 	isb	sy
 8010da4:	f3bf 8f4f 	dsb	sy
 8010da8:	b662      	cpsie	i
 8010daa:	61fb      	str	r3, [r7, #28]
}
 8010dac:	bf00      	nop
 8010dae:	bf00      	nop
 8010db0:	e7fd      	b.n	8010dae <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010db2:	f001 ff6d 	bl	8012c90 <xTaskGetSchedulerState>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d102      	bne.n	8010dc2 <xQueueReceive+0x7a>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d101      	bne.n	8010dc6 <xQueueReceive+0x7e>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e000      	b.n	8010dc8 <xQueueReceive+0x80>
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d10d      	bne.n	8010de8 <xQueueReceive+0xa0>
    __asm volatile
 8010dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dd0:	b672      	cpsid	i
 8010dd2:	f383 8811 	msr	BASEPRI, r3
 8010dd6:	f3bf 8f6f 	isb	sy
 8010dda:	f3bf 8f4f 	dsb	sy
 8010dde:	b662      	cpsie	i
 8010de0:	61bb      	str	r3, [r7, #24]
}
 8010de2:	bf00      	nop
 8010de4:	bf00      	nop
 8010de6:	e7fd      	b.n	8010de4 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8010de8:	f003 f8bc 	bl	8013f64 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010df0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d01f      	beq.n	8010e38 <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010df8:	68b9      	ldr	r1, [r7, #8]
 8010dfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010dfc:	f000 fb24 	bl	8011448 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8010e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e02:	1e5a      	subs	r2, r3, #1
 8010e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e06:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e0a:	691b      	ldr	r3, [r3, #16]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d00f      	beq.n	8010e30 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e12:	3310      	adds	r3, #16
 8010e14:	4618      	mov	r0, r3
 8010e16:	f001 fc47 	bl	80126a8 <xTaskRemoveFromEventList>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d007      	beq.n	8010e30 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8010e20:	4b3c      	ldr	r3, [pc, #240]	@ (8010f14 <xQueueReceive+0x1cc>)
 8010e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8010e30:	f003 f8ce 	bl	8013fd0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8010e34:	2301      	movs	r3, #1
 8010e36:	e069      	b.n	8010f0c <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d103      	bne.n	8010e46 <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8010e3e:	f003 f8c7 	bl	8013fd0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8010e42:	2300      	movs	r3, #0
 8010e44:	e062      	b.n	8010f0c <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8010e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d106      	bne.n	8010e5a <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8010e4c:	f107 0310 	add.w	r3, r7, #16
 8010e50:	4618      	mov	r0, r3
 8010e52:	f001 fd05 	bl	8012860 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8010e56:	2301      	movs	r3, #1
 8010e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8010e5a:	f003 f8b9 	bl	8013fd0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8010e5e:	f001 f863 	bl	8011f28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8010e62:	f003 f87f 	bl	8013f64 <vPortEnterCritical>
 8010e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010e6c:	b25b      	sxtb	r3, r3
 8010e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e72:	d103      	bne.n	8010e7c <xQueueReceive+0x134>
 8010e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e76:	2200      	movs	r2, #0
 8010e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010e82:	b25b      	sxtb	r3, r3
 8010e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e88:	d103      	bne.n	8010e92 <xQueueReceive+0x14a>
 8010e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010e92:	f003 f89d 	bl	8013fd0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e96:	1d3a      	adds	r2, r7, #4
 8010e98:	f107 0310 	add.w	r3, r7, #16
 8010e9c:	4611      	mov	r1, r2
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f001 fcf4 	bl	801288c <xTaskCheckForTimeOut>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d123      	bne.n	8010ef2 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010eac:	f000 fb44 	bl	8011538 <prvIsQueueEmpty>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d017      	beq.n	8010ee6 <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eb8:	3324      	adds	r3, #36	@ 0x24
 8010eba:	687a      	ldr	r2, [r7, #4]
 8010ebc:	4611      	mov	r1, r2
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f001 fb82 	bl	80125c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8010ec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ec6:	f000 fae5 	bl	8011494 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8010eca:	f001 f83b 	bl	8011f44 <xTaskResumeAll>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d189      	bne.n	8010de8 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8010ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8010f14 <xQueueReceive+0x1cc>)
 8010ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010eda:	601a      	str	r2, [r3, #0]
 8010edc:	f3bf 8f4f 	dsb	sy
 8010ee0:	f3bf 8f6f 	isb	sy
 8010ee4:	e780      	b.n	8010de8 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8010ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ee8:	f000 fad4 	bl	8011494 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8010eec:	f001 f82a 	bl	8011f44 <xTaskResumeAll>
 8010ef0:	e77a      	b.n	8010de8 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8010ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ef4:	f000 face 	bl	8011494 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8010ef8:	f001 f824 	bl	8011f44 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010efc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010efe:	f000 fb1b 	bl	8011538 <prvIsQueueEmpty>
 8010f02:	4603      	mov	r3, r0
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	f43f af6f 	beq.w	8010de8 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8010f0a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3730      	adds	r7, #48	@ 0x30
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	e000ed04 	.word	0xe000ed04

08010f18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b08c      	sub	sp, #48	@ 0x30
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8010f22:	2300      	movs	r3, #0
 8010f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8010f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10d      	bne.n	8010f50 <xQueueSemaphoreTake+0x38>
    __asm volatile
 8010f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f38:	b672      	cpsid	i
 8010f3a:	f383 8811 	msr	BASEPRI, r3
 8010f3e:	f3bf 8f6f 	isb	sy
 8010f42:	f3bf 8f4f 	dsb	sy
 8010f46:	b662      	cpsie	i
 8010f48:	61bb      	str	r3, [r7, #24]
}
 8010f4a:	bf00      	nop
 8010f4c:	bf00      	nop
 8010f4e:	e7fd      	b.n	8010f4c <xQueueSemaphoreTake+0x34>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8010f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00d      	beq.n	8010f74 <xQueueSemaphoreTake+0x5c>
    __asm volatile
 8010f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f5c:	b672      	cpsid	i
 8010f5e:	f383 8811 	msr	BASEPRI, r3
 8010f62:	f3bf 8f6f 	isb	sy
 8010f66:	f3bf 8f4f 	dsb	sy
 8010f6a:	b662      	cpsie	i
 8010f6c:	617b      	str	r3, [r7, #20]
}
 8010f6e:	bf00      	nop
 8010f70:	bf00      	nop
 8010f72:	e7fd      	b.n	8010f70 <xQueueSemaphoreTake+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f74:	f001 fe8c 	bl	8012c90 <xTaskGetSchedulerState>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d102      	bne.n	8010f84 <xQueueSemaphoreTake+0x6c>
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d101      	bne.n	8010f88 <xQueueSemaphoreTake+0x70>
 8010f84:	2301      	movs	r3, #1
 8010f86:	e000      	b.n	8010f8a <xQueueSemaphoreTake+0x72>
 8010f88:	2300      	movs	r3, #0
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d10d      	bne.n	8010faa <xQueueSemaphoreTake+0x92>
    __asm volatile
 8010f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f92:	b672      	cpsid	i
 8010f94:	f383 8811 	msr	BASEPRI, r3
 8010f98:	f3bf 8f6f 	isb	sy
 8010f9c:	f3bf 8f4f 	dsb	sy
 8010fa0:	b662      	cpsie	i
 8010fa2:	613b      	str	r3, [r7, #16]
}
 8010fa4:	bf00      	nop
 8010fa6:	bf00      	nop
 8010fa8:	e7fd      	b.n	8010fa6 <xQueueSemaphoreTake+0x8e>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8010faa:	f002 ffdb 	bl	8013f64 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fb2:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010fb4:	6a3b      	ldr	r3, [r7, #32]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d024      	beq.n	8011004 <xQueueSemaphoreTake+0xec>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8010fba:	6a3b      	ldr	r3, [r7, #32]
 8010fbc:	1e5a      	subs	r2, r3, #1
 8010fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc0:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d104      	bne.n	8010fd4 <xQueueSemaphoreTake+0xbc>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010fca:	f002 f88d 	bl	80130e8 <pvTaskIncrementMutexHeldCount>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd2:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd6:	691b      	ldr	r3, [r3, #16]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d00f      	beq.n	8010ffc <xQueueSemaphoreTake+0xe4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fde:	3310      	adds	r3, #16
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f001 fb61 	bl	80126a8 <xTaskRemoveFromEventList>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d007      	beq.n	8010ffc <xQueueSemaphoreTake+0xe4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8010fec:	4b4c      	ldr	r3, [pc, #304]	@ (8011120 <xQueueSemaphoreTake+0x208>)
 8010fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ff2:	601a      	str	r2, [r3, #0]
 8010ff4:	f3bf 8f4f 	dsb	sy
 8010ff8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8010ffc:	f002 ffe8 	bl	8013fd0 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8011000:	2301      	movs	r3, #1
 8011002:	e089      	b.n	8011118 <xQueueSemaphoreTake+0x200>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d103      	bne.n	8011012 <xQueueSemaphoreTake+0xfa>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 801100a:	f002 ffe1 	bl	8013fd0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 801100e:	2300      	movs	r3, #0
 8011010:	e082      	b.n	8011118 <xQueueSemaphoreTake+0x200>
                }
                else if( xEntryTimeSet == pdFALSE )
 8011012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011014:	2b00      	cmp	r3, #0
 8011016:	d106      	bne.n	8011026 <xQueueSemaphoreTake+0x10e>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8011018:	f107 0308 	add.w	r3, r7, #8
 801101c:	4618      	mov	r0, r3
 801101e:	f001 fc1f 	bl	8012860 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8011022:	2301      	movs	r3, #1
 8011024:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8011026:	f002 ffd3 	bl	8013fd0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 801102a:	f000 ff7d 	bl	8011f28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 801102e:	f002 ff99 	bl	8013f64 <vPortEnterCritical>
 8011032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011038:	b25b      	sxtb	r3, r3
 801103a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801103e:	d103      	bne.n	8011048 <xQueueSemaphoreTake+0x130>
 8011040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011042:	2200      	movs	r2, #0
 8011044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801104a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801104e:	b25b      	sxtb	r3, r3
 8011050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011054:	d103      	bne.n	801105e <xQueueSemaphoreTake+0x146>
 8011056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011058:	2200      	movs	r2, #0
 801105a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801105e:	f002 ffb7 	bl	8013fd0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011062:	463a      	mov	r2, r7
 8011064:	f107 0308 	add.w	r3, r7, #8
 8011068:	4611      	mov	r1, r2
 801106a:	4618      	mov	r0, r3
 801106c:	f001 fc0e 	bl	801288c <xTaskCheckForTimeOut>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	d132      	bne.n	80110dc <xQueueSemaphoreTake+0x1c4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011076:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011078:	f000 fa5e 	bl	8011538 <prvIsQueueEmpty>
 801107c:	4603      	mov	r3, r0
 801107e:	2b00      	cmp	r3, #0
 8011080:	d026      	beq.n	80110d0 <xQueueSemaphoreTake+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d109      	bne.n	801109e <xQueueSemaphoreTake+0x186>
                    {
                        taskENTER_CRITICAL();
 801108a:	f002 ff6b 	bl	8013f64 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011090:	689b      	ldr	r3, [r3, #8]
 8011092:	4618      	mov	r0, r3
 8011094:	f001 fe1a 	bl	8012ccc <xTaskPriorityInherit>
 8011098:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 801109a:	f002 ff99 	bl	8013fd0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a0:	3324      	adds	r3, #36	@ 0x24
 80110a2:	683a      	ldr	r2, [r7, #0]
 80110a4:	4611      	mov	r1, r2
 80110a6:	4618      	mov	r0, r3
 80110a8:	f001 fa8e 	bl	80125c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80110ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80110ae:	f000 f9f1 	bl	8011494 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80110b2:	f000 ff47 	bl	8011f44 <xTaskResumeAll>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	f47f af76 	bne.w	8010faa <xQueueSemaphoreTake+0x92>
                {
                    taskYIELD_WITHIN_API();
 80110be:	4b18      	ldr	r3, [pc, #96]	@ (8011120 <xQueueSemaphoreTake+0x208>)
 80110c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110c4:	601a      	str	r2, [r3, #0]
 80110c6:	f3bf 8f4f 	dsb	sy
 80110ca:	f3bf 8f6f 	isb	sy
 80110ce:	e76c      	b.n	8010faa <xQueueSemaphoreTake+0x92>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80110d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80110d2:	f000 f9df 	bl	8011494 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80110d6:	f000 ff35 	bl	8011f44 <xTaskResumeAll>
 80110da:	e766      	b.n	8010faa <xQueueSemaphoreTake+0x92>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80110dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80110de:	f000 f9d9 	bl	8011494 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80110e2:	f000 ff2f 	bl	8011f44 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80110e8:	f000 fa26 	bl	8011538 <prvIsQueueEmpty>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	f43f af5b 	beq.w	8010faa <xQueueSemaphoreTake+0x92>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80110f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d00d      	beq.n	8011116 <xQueueSemaphoreTake+0x1fe>
                    {
                        taskENTER_CRITICAL();
 80110fa:	f002 ff33 	bl	8013f64 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80110fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011100:	f000 f920 	bl	8011344 <prvGetDisinheritPriorityAfterTimeout>
 8011104:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011108:	689b      	ldr	r3, [r3, #8]
 801110a:	69f9      	ldr	r1, [r7, #28]
 801110c:	4618      	mov	r0, r3
 801110e:	f001 ff29 	bl	8012f64 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8011112:	f002 ff5d 	bl	8013fd0 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8011116:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8011118:	4618      	mov	r0, r3
 801111a:	3730      	adds	r7, #48	@ 0x30
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	e000ed04 	.word	0xe000ed04

08011124 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b08e      	sub	sp, #56	@ 0x38
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8011130:	2300      	movs	r3, #0
 8011132:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueuePeek( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8011138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801113a:	2b00      	cmp	r3, #0
 801113c:	d10d      	bne.n	801115a <xQueuePeek+0x36>
    __asm volatile
 801113e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011142:	b672      	cpsid	i
 8011144:	f383 8811 	msr	BASEPRI, r3
 8011148:	f3bf 8f6f 	isb	sy
 801114c:	f3bf 8f4f 	dsb	sy
 8011150:	b662      	cpsie	i
 8011152:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011154:	bf00      	nop
 8011156:	bf00      	nop
 8011158:	e7fd      	b.n	8011156 <xQueuePeek+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d103      	bne.n	8011168 <xQueuePeek+0x44>
 8011160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011164:	2b00      	cmp	r3, #0
 8011166:	d101      	bne.n	801116c <xQueuePeek+0x48>
 8011168:	2301      	movs	r3, #1
 801116a:	e000      	b.n	801116e <xQueuePeek+0x4a>
 801116c:	2300      	movs	r3, #0
 801116e:	2b00      	cmp	r3, #0
 8011170:	d10d      	bne.n	801118e <xQueuePeek+0x6a>
    __asm volatile
 8011172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011176:	b672      	cpsid	i
 8011178:	f383 8811 	msr	BASEPRI, r3
 801117c:	f3bf 8f6f 	isb	sy
 8011180:	f3bf 8f4f 	dsb	sy
 8011184:	b662      	cpsie	i
 8011186:	623b      	str	r3, [r7, #32]
}
 8011188:	bf00      	nop
 801118a:	bf00      	nop
 801118c:	e7fd      	b.n	801118a <xQueuePeek+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801118e:	f001 fd7f 	bl	8012c90 <xTaskGetSchedulerState>
 8011192:	4603      	mov	r3, r0
 8011194:	2b00      	cmp	r3, #0
 8011196:	d102      	bne.n	801119e <xQueuePeek+0x7a>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d101      	bne.n	80111a2 <xQueuePeek+0x7e>
 801119e:	2301      	movs	r3, #1
 80111a0:	e000      	b.n	80111a4 <xQueuePeek+0x80>
 80111a2:	2300      	movs	r3, #0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d10d      	bne.n	80111c4 <xQueuePeek+0xa0>
    __asm volatile
 80111a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111ac:	b672      	cpsid	i
 80111ae:	f383 8811 	msr	BASEPRI, r3
 80111b2:	f3bf 8f6f 	isb	sy
 80111b6:	f3bf 8f4f 	dsb	sy
 80111ba:	b662      	cpsie	i
 80111bc:	61fb      	str	r3, [r7, #28]
}
 80111be:	bf00      	nop
 80111c0:	bf00      	nop
 80111c2:	e7fd      	b.n	80111c0 <xQueuePeek+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80111c4:	f002 fece 	bl	8013f64 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80111c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d021      	beq.n	8011218 <xQueuePeek+0xf4>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80111d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	62bb      	str	r3, [r7, #40]	@ 0x28

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80111da:	68b9      	ldr	r1, [r7, #8]
 80111dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80111de:	f000 f933 	bl	8011448 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80111e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80111e6:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d00f      	beq.n	8011210 <xQueuePeek+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111f2:	3324      	adds	r3, #36	@ 0x24
 80111f4:	4618      	mov	r0, r3
 80111f6:	f001 fa57 	bl	80126a8 <xTaskRemoveFromEventList>
 80111fa:	4603      	mov	r3, r0
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d007      	beq.n	8011210 <xQueuePeek+0xec>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8011200:	4b3c      	ldr	r3, [pc, #240]	@ (80112f4 <xQueuePeek+0x1d0>)
 8011202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011206:	601a      	str	r2, [r3, #0]
 8011208:	f3bf 8f4f 	dsb	sy
 801120c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8011210:	f002 fede 	bl	8013fd0 <vPortExitCritical>

                traceRETURN_xQueuePeek( pdPASS );

                return pdPASS;
 8011214:	2301      	movs	r3, #1
 8011216:	e069      	b.n	80112ec <xQueuePeek+0x1c8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d103      	bne.n	8011226 <xQueuePeek+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 801121e:	f002 fed7 	bl	8013fd0 <vPortExitCritical>

                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8011222:	2300      	movs	r3, #0
 8011224:	e062      	b.n	80112ec <xQueuePeek+0x1c8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8011226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011228:	2b00      	cmp	r3, #0
 801122a:	d106      	bne.n	801123a <xQueuePeek+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 801122c:	f107 0314 	add.w	r3, r7, #20
 8011230:	4618      	mov	r0, r3
 8011232:	f001 fb15 	bl	8012860 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8011236:	2301      	movs	r3, #1
 8011238:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 801123a:	f002 fec9 	bl	8013fd0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 801123e:	f000 fe73 	bl	8011f28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8011242:	f002 fe8f 	bl	8013f64 <vPortEnterCritical>
 8011246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011248:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801124c:	b25b      	sxtb	r3, r3
 801124e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011252:	d103      	bne.n	801125c <xQueuePeek+0x138>
 8011254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011256:	2200      	movs	r2, #0
 8011258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801125c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801125e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011262:	b25b      	sxtb	r3, r3
 8011264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011268:	d103      	bne.n	8011272 <xQueuePeek+0x14e>
 801126a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801126c:	2200      	movs	r2, #0
 801126e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011272:	f002 fead 	bl	8013fd0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011276:	1d3a      	adds	r2, r7, #4
 8011278:	f107 0314 	add.w	r3, r7, #20
 801127c:	4611      	mov	r1, r2
 801127e:	4618      	mov	r0, r3
 8011280:	f001 fb04 	bl	801288c <xTaskCheckForTimeOut>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d123      	bne.n	80112d2 <xQueuePeek+0x1ae>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801128a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801128c:	f000 f954 	bl	8011538 <prvIsQueueEmpty>
 8011290:	4603      	mov	r3, r0
 8011292:	2b00      	cmp	r3, #0
 8011294:	d017      	beq.n	80112c6 <xQueuePeek+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011298:	3324      	adds	r3, #36	@ 0x24
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	4611      	mov	r1, r2
 801129e:	4618      	mov	r0, r3
 80112a0:	f001 f992 	bl	80125c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80112a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80112a6:	f000 f8f5 	bl	8011494 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80112aa:	f000 fe4b 	bl	8011f44 <xTaskResumeAll>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d187      	bne.n	80111c4 <xQueuePeek+0xa0>
                {
                    taskYIELD_WITHIN_API();
 80112b4:	4b0f      	ldr	r3, [pc, #60]	@ (80112f4 <xQueuePeek+0x1d0>)
 80112b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112ba:	601a      	str	r2, [r3, #0]
 80112bc:	f3bf 8f4f 	dsb	sy
 80112c0:	f3bf 8f6f 	isb	sy
 80112c4:	e77e      	b.n	80111c4 <xQueuePeek+0xa0>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 80112c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80112c8:	f000 f8e4 	bl	8011494 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80112cc:	f000 fe3a 	bl	8011f44 <xTaskResumeAll>
 80112d0:	e778      	b.n	80111c4 <xQueuePeek+0xa0>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 80112d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80112d4:	f000 f8de 	bl	8011494 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80112d8:	f000 fe34 	bl	8011f44 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80112dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80112de:	f000 f92b 	bl	8011538 <prvIsQueueEmpty>
 80112e2:	4603      	mov	r3, r0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f43f af6d 	beq.w	80111c4 <xQueuePeek+0xa0>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80112ea:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3738      	adds	r7, #56	@ 0x38
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	e000ed04 	.word	0xe000ed04

080112f8 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d10d      	bne.n	8011326 <vQueueDelete+0x2e>
    __asm volatile
 801130a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801130e:	b672      	cpsid	i
 8011310:	f383 8811 	msr	BASEPRI, r3
 8011314:	f3bf 8f6f 	isb	sy
 8011318:	f3bf 8f4f 	dsb	sy
 801131c:	b662      	cpsie	i
 801131e:	60bb      	str	r3, [r7, #8]
}
 8011320:	bf00      	nop
 8011322:	bf00      	nop
 8011324:	e7fd      	b.n	8011322 <vQueueDelete+0x2a>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8011326:	68f8      	ldr	r0, [r7, #12]
 8011328:	f000 f986 	bl	8011638 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8011332:	2b00      	cmp	r3, #0
 8011334:	d102      	bne.n	801133c <vQueueDelete+0x44>
        {
            vPortFree( pxQueue );
 8011336:	68f8      	ldr	r0, [r7, #12]
 8011338:	f003 f88c 	bl	8014454 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 801133c:	bf00      	nop
 801133e:	3710      	adds	r7, #16
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8011344:	b480      	push	{r7}
 8011346:	b085      	sub	sp, #20
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011350:	2b00      	cmp	r3, #0
 8011352:	d006      	beq.n	8011362 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f1c3 0307 	rsb	r3, r3, #7
 801135e:	60fb      	str	r3, [r7, #12]
 8011360:	e001      	b.n	8011366 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011362:	2300      	movs	r3, #0
 8011364:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8011366:	68fb      	ldr	r3, [r7, #12]
    }
 8011368:	4618      	mov	r0, r3
 801136a:	3714      	adds	r7, #20
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr

08011374 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b086      	sub	sp, #24
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8011380:	2300      	movs	r3, #0
 8011382:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011388:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801138e:	2b00      	cmp	r3, #0
 8011390:	d10d      	bne.n	80113ae <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d14d      	bne.n	8011436 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	689b      	ldr	r3, [r3, #8]
 801139e:	4618      	mov	r0, r3
 80113a0:	f001 fd34 	bl	8012e0c <xTaskPriorityDisinherit>
 80113a4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2200      	movs	r2, #0
 80113aa:	609a      	str	r2, [r3, #8]
 80113ac:	e043      	b.n	8011436 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d119      	bne.n	80113e8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	6858      	ldr	r0, [r3, #4]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113bc:	461a      	mov	r2, r3
 80113be:	68b9      	ldr	r1, [r7, #8]
 80113c0:	f010 fe97 	bl	80220f2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	685a      	ldr	r2, [r3, #4]
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113cc:	441a      	add	r2, r3
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	685a      	ldr	r2, [r3, #4]
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	689b      	ldr	r3, [r3, #8]
 80113da:	429a      	cmp	r2, r3
 80113dc:	d32b      	bcc.n	8011436 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	605a      	str	r2, [r3, #4]
 80113e6:	e026      	b.n	8011436 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	68d8      	ldr	r0, [r3, #12]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113f0:	461a      	mov	r2, r3
 80113f2:	68b9      	ldr	r1, [r7, #8]
 80113f4:	f010 fe7d 	bl	80220f2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	68da      	ldr	r2, [r3, #12]
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011400:	425b      	negs	r3, r3
 8011402:	441a      	add	r2, r3
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	68da      	ldr	r2, [r3, #12]
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	429a      	cmp	r2, r3
 8011412:	d207      	bcs.n	8011424 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	689a      	ldr	r2, [r3, #8]
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801141c:	425b      	negs	r3, r3
 801141e:	441a      	add	r2, r3
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2b02      	cmp	r3, #2
 8011428:	d105      	bne.n	8011436 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d002      	beq.n	8011436 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	3b01      	subs	r3, #1
 8011434:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	1c5a      	adds	r2, r3, #1
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 801143e:	697b      	ldr	r3, [r7, #20]
}
 8011440:	4618      	mov	r0, r3
 8011442:	3718      	adds	r7, #24
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011456:	2b00      	cmp	r3, #0
 8011458:	d018      	beq.n	801148c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	68da      	ldr	r2, [r3, #12]
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011462:	441a      	add	r2, r3
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	68da      	ldr	r2, [r3, #12]
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	689b      	ldr	r3, [r3, #8]
 8011470:	429a      	cmp	r2, r3
 8011472:	d303      	bcc.n	801147c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	68d9      	ldr	r1, [r3, #12]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011484:	461a      	mov	r2, r3
 8011486:	6838      	ldr	r0, [r7, #0]
 8011488:	f010 fe33 	bl	80220f2 <memcpy>
    }
}
 801148c:	bf00      	nop
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b084      	sub	sp, #16
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 801149c:	f002 fd62 	bl	8013f64 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80114a6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80114a8:	e011      	b.n	80114ce <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d012      	beq.n	80114d8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	3324      	adds	r3, #36	@ 0x24
 80114b6:	4618      	mov	r0, r3
 80114b8:	f001 f8f6 	bl	80126a8 <xTaskRemoveFromEventList>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d001      	beq.n	80114c6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80114c2:	f001 fa47 	bl	8012954 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80114c6:	7bfb      	ldrb	r3, [r7, #15]
 80114c8:	3b01      	subs	r3, #1
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80114ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	dce9      	bgt.n	80114aa <prvUnlockQueue+0x16>
 80114d6:	e000      	b.n	80114da <prvUnlockQueue+0x46>
                    break;
 80114d8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	22ff      	movs	r2, #255	@ 0xff
 80114de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80114e2:	f002 fd75 	bl	8013fd0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80114e6:	f002 fd3d 	bl	8013f64 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80114f0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80114f2:	e011      	b.n	8011518 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	691b      	ldr	r3, [r3, #16]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d012      	beq.n	8011522 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	3310      	adds	r3, #16
 8011500:	4618      	mov	r0, r3
 8011502:	f001 f8d1 	bl	80126a8 <xTaskRemoveFromEventList>
 8011506:	4603      	mov	r3, r0
 8011508:	2b00      	cmp	r3, #0
 801150a:	d001      	beq.n	8011510 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 801150c:	f001 fa22 	bl	8012954 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8011510:	7bbb      	ldrb	r3, [r7, #14]
 8011512:	3b01      	subs	r3, #1
 8011514:	b2db      	uxtb	r3, r3
 8011516:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8011518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801151c:	2b00      	cmp	r3, #0
 801151e:	dce9      	bgt.n	80114f4 <prvUnlockQueue+0x60>
 8011520:	e000      	b.n	8011524 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8011522:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	22ff      	movs	r2, #255	@ 0xff
 8011528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 801152c:	f002 fd50 	bl	8013fd0 <vPortExitCritical>
}
 8011530:	bf00      	nop
 8011532:	3710      	adds	r7, #16
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b084      	sub	sp, #16
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8011540:	f002 fd10 	bl	8013f64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011548:	2b00      	cmp	r3, #0
 801154a:	d102      	bne.n	8011552 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 801154c:	2301      	movs	r3, #1
 801154e:	60fb      	str	r3, [r7, #12]
 8011550:	e001      	b.n	8011556 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8011552:	2300      	movs	r3, #0
 8011554:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8011556:	f002 fd3b 	bl	8013fd0 <vPortExitCritical>

    return xReturn;
 801155a:	68fb      	ldr	r3, [r7, #12]
}
 801155c:	4618      	mov	r0, r3
 801155e:	3710      	adds	r7, #16
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}

08011564 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 801156c:	f002 fcfa 	bl	8013f64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011578:	429a      	cmp	r2, r3
 801157a:	d102      	bne.n	8011582 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 801157c:	2301      	movs	r3, #1
 801157e:	60fb      	str	r3, [r7, #12]
 8011580:	e001      	b.n	8011586 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8011582:	2300      	movs	r3, #0
 8011584:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8011586:	f002 fd23 	bl	8013fd0 <vPortExitCritical>

    return xReturn;
 801158a:	68fb      	ldr	r3, [r7, #12]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3710      	adds	r7, #16
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8011594:	b480      	push	{r7}
 8011596:	b087      	sub	sp, #28
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 801159e:	2300      	movs	r3, #0
 80115a0:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d10d      	bne.n	80115c4 <vQueueAddToRegistry+0x30>
    __asm volatile
 80115a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115ac:	b672      	cpsid	i
 80115ae:	f383 8811 	msr	BASEPRI, r3
 80115b2:	f3bf 8f6f 	isb	sy
 80115b6:	f3bf 8f4f 	dsb	sy
 80115ba:	b662      	cpsie	i
 80115bc:	60fb      	str	r3, [r7, #12]
}
 80115be:	bf00      	nop
 80115c0:	bf00      	nop
 80115c2:	e7fd      	b.n	80115c0 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d024      	beq.n	8011614 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80115ca:	2300      	movs	r3, #0
 80115cc:	617b      	str	r3, [r7, #20]
 80115ce:	e01e      	b.n	801160e <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80115d0:	4a18      	ldr	r2, [pc, #96]	@ (8011634 <vQueueAddToRegistry+0xa0>)
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	00db      	lsls	r3, r3, #3
 80115d6:	4413      	add	r3, r2
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	429a      	cmp	r2, r3
 80115de:	d105      	bne.n	80115ec <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	00db      	lsls	r3, r3, #3
 80115e4:	4a13      	ldr	r2, [pc, #76]	@ (8011634 <vQueueAddToRegistry+0xa0>)
 80115e6:	4413      	add	r3, r2
 80115e8:	613b      	str	r3, [r7, #16]
                    break;
 80115ea:	e013      	b.n	8011614 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d10a      	bne.n	8011608 <vQueueAddToRegistry+0x74>
 80115f2:	4a10      	ldr	r2, [pc, #64]	@ (8011634 <vQueueAddToRegistry+0xa0>)
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d104      	bne.n	8011608 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	00db      	lsls	r3, r3, #3
 8011602:	4a0c      	ldr	r2, [pc, #48]	@ (8011634 <vQueueAddToRegistry+0xa0>)
 8011604:	4413      	add	r3, r2
 8011606:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	3301      	adds	r3, #1
 801160c:	617b      	str	r3, [r7, #20]
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	2b07      	cmp	r3, #7
 8011612:	d9dd      	bls.n	80115d0 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d005      	beq.n	8011626 <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	683a      	ldr	r2, [r7, #0]
 801161e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8011626:	bf00      	nop
 8011628:	371c      	adds	r7, #28
 801162a:	46bd      	mov	sp, r7
 801162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop
 8011634:	24019828 	.word	0x24019828

08011638 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8011638:	b480      	push	{r7}
 801163a:	b085      	sub	sp, #20
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d10d      	bne.n	8011662 <vQueueUnregisterQueue+0x2a>
    __asm volatile
 8011646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801164a:	b672      	cpsid	i
 801164c:	f383 8811 	msr	BASEPRI, r3
 8011650:	f3bf 8f6f 	isb	sy
 8011654:	f3bf 8f4f 	dsb	sy
 8011658:	b662      	cpsie	i
 801165a:	60bb      	str	r3, [r7, #8]
}
 801165c:	bf00      	nop
 801165e:	bf00      	nop
 8011660:	e7fd      	b.n	801165e <vQueueUnregisterQueue+0x26>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011662:	2300      	movs	r3, #0
 8011664:	60fb      	str	r3, [r7, #12]
 8011666:	e016      	b.n	8011696 <vQueueUnregisterQueue+0x5e>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011668:	4a10      	ldr	r2, [pc, #64]	@ (80116ac <vQueueUnregisterQueue+0x74>)
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	00db      	lsls	r3, r3, #3
 801166e:	4413      	add	r3, r2
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	429a      	cmp	r2, r3
 8011676:	d10b      	bne.n	8011690 <vQueueUnregisterQueue+0x58>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8011678:	4a0c      	ldr	r2, [pc, #48]	@ (80116ac <vQueueUnregisterQueue+0x74>)
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2100      	movs	r1, #0
 801167e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011682:	4a0a      	ldr	r2, [pc, #40]	@ (80116ac <vQueueUnregisterQueue+0x74>)
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	00db      	lsls	r3, r3, #3
 8011688:	4413      	add	r3, r2
 801168a:	2200      	movs	r2, #0
 801168c:	605a      	str	r2, [r3, #4]
                break;
 801168e:	e006      	b.n	801169e <vQueueUnregisterQueue+0x66>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	3301      	adds	r3, #1
 8011694:	60fb      	str	r3, [r7, #12]
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	2b07      	cmp	r3, #7
 801169a:	d9e5      	bls.n	8011668 <vQueueUnregisterQueue+0x30>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 801169c:	bf00      	nop
 801169e:	bf00      	nop
 80116a0:	3714      	adds	r7, #20
 80116a2:	46bd      	mov	sp, r7
 80116a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a8:	4770      	bx	lr
 80116aa:	bf00      	nop
 80116ac:	24019828 	.word	0x24019828

080116b0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b086      	sub	sp, #24
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80116c0:	f002 fc50 	bl	8013f64 <vPortEnterCritical>
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80116ca:	b25b      	sxtb	r3, r3
 80116cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116d0:	d103      	bne.n	80116da <vQueueWaitForMessageRestricted+0x2a>
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80116e0:	b25b      	sxtb	r3, r3
 80116e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116e6:	d103      	bne.n	80116f0 <vQueueWaitForMessageRestricted+0x40>
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	2200      	movs	r2, #0
 80116ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80116f0:	f002 fc6e 	bl	8013fd0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d106      	bne.n	801170a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	3324      	adds	r3, #36	@ 0x24
 8011700:	687a      	ldr	r2, [r7, #4]
 8011702:	68b9      	ldr	r1, [r7, #8]
 8011704:	4618      	mov	r0, r3
 8011706:	f000 ff87 	bl	8012618 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 801170a:	6978      	ldr	r0, [r7, #20]
 801170c:	f7ff fec2 	bl	8011494 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8011710:	bf00      	nop
 8011712:	3718      	adds	r7, #24
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8011718:	b580      	push	{r7, lr}
 801171a:	b08e      	sub	sp, #56	@ 0x38
 801171c:	af04      	add	r7, sp, #16
 801171e:	60f8      	str	r0, [r7, #12]
 8011720:	60b9      	str	r1, [r7, #8]
 8011722:	607a      	str	r2, [r7, #4]
 8011724:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8011726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011728:	2b00      	cmp	r3, #0
 801172a:	d10d      	bne.n	8011748 <prvCreateStaticTask+0x30>
    __asm volatile
 801172c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011730:	b672      	cpsid	i
 8011732:	f383 8811 	msr	BASEPRI, r3
 8011736:	f3bf 8f6f 	isb	sy
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	b662      	cpsie	i
 8011740:	623b      	str	r3, [r7, #32]
}
 8011742:	bf00      	nop
 8011744:	bf00      	nop
 8011746:	e7fd      	b.n	8011744 <prvCreateStaticTask+0x2c>
        configASSERT( pxTaskBuffer != NULL );
 8011748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801174a:	2b00      	cmp	r3, #0
 801174c:	d10d      	bne.n	801176a <prvCreateStaticTask+0x52>
    __asm volatile
 801174e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011752:	b672      	cpsid	i
 8011754:	f383 8811 	msr	BASEPRI, r3
 8011758:	f3bf 8f6f 	isb	sy
 801175c:	f3bf 8f4f 	dsb	sy
 8011760:	b662      	cpsie	i
 8011762:	61fb      	str	r3, [r7, #28]
}
 8011764:	bf00      	nop
 8011766:	bf00      	nop
 8011768:	e7fd      	b.n	8011766 <prvCreateStaticTask+0x4e>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 801176a:	235c      	movs	r3, #92	@ 0x5c
 801176c:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	2b5c      	cmp	r3, #92	@ 0x5c
 8011772:	d00d      	beq.n	8011790 <prvCreateStaticTask+0x78>
    __asm volatile
 8011774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011778:	b672      	cpsid	i
 801177a:	f383 8811 	msr	BASEPRI, r3
 801177e:	f3bf 8f6f 	isb	sy
 8011782:	f3bf 8f4f 	dsb	sy
 8011786:	b662      	cpsie	i
 8011788:	61bb      	str	r3, [r7, #24]
}
 801178a:	bf00      	nop
 801178c:	bf00      	nop
 801178e:	e7fd      	b.n	801178c <prvCreateStaticTask+0x74>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8011790:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011794:	2b00      	cmp	r3, #0
 8011796:	d01f      	beq.n	80117d8 <prvCreateStaticTask+0xc0>
 8011798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801179a:	2b00      	cmp	r3, #0
 801179c:	d01c      	beq.n	80117d8 <prvCreateStaticTask+0xc0>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 801179e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a0:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80117a2:	225c      	movs	r2, #92	@ 0x5c
 80117a4:	2100      	movs	r1, #0
 80117a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80117a8:	f010 fbf9 	bl	8021f9e <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80117ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80117b0:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80117b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117b4:	2202      	movs	r2, #2
 80117b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80117ba:	2300      	movs	r3, #0
 80117bc:	9303      	str	r3, [sp, #12]
 80117be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c0:	9302      	str	r3, [sp, #8]
 80117c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117c4:	9301      	str	r3, [sp, #4]
 80117c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117c8:	9300      	str	r3, [sp, #0]
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	68b9      	ldr	r1, [r7, #8]
 80117d0:	68f8      	ldr	r0, [r7, #12]
 80117d2:	f000 f88f 	bl	80118f4 <prvInitialiseNewTask>
 80117d6:	e001      	b.n	80117dc <prvCreateStaticTask+0xc4>
        }
        else
        {
            pxNewTCB = NULL;
 80117d8:	2300      	movs	r3, #0
 80117da:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 80117dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80117de:	4618      	mov	r0, r3
 80117e0:	3728      	adds	r7, #40	@ 0x28
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}

080117e6 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80117e6:	b580      	push	{r7, lr}
 80117e8:	b08a      	sub	sp, #40	@ 0x28
 80117ea:	af04      	add	r7, sp, #16
 80117ec:	60f8      	str	r0, [r7, #12]
 80117ee:	60b9      	str	r1, [r7, #8]
 80117f0:	607a      	str	r2, [r7, #4]
 80117f2:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 80117f4:	2300      	movs	r3, #0
 80117f6:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 80117f8:	f107 0310 	add.w	r3, r7, #16
 80117fc:	9303      	str	r3, [sp, #12]
 80117fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011800:	9302      	str	r3, [sp, #8]
 8011802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011804:	9301      	str	r3, [sp, #4]
 8011806:	6a3b      	ldr	r3, [r7, #32]
 8011808:	9300      	str	r3, [sp, #0]
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	687a      	ldr	r2, [r7, #4]
 801180e:	68b9      	ldr	r1, [r7, #8]
 8011810:	68f8      	ldr	r0, [r7, #12]
 8011812:	f7ff ff81 	bl	8011718 <prvCreateStaticTask>
 8011816:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d002      	beq.n	8011824 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 801181e:	6978      	ldr	r0, [r7, #20]
 8011820:	f000 f8fc 	bl	8011a1c <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 8011824:	693b      	ldr	r3, [r7, #16]
    }
 8011826:	4618      	mov	r0, r3
 8011828:	3718      	adds	r7, #24
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}

0801182e <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 801182e:	b580      	push	{r7, lr}
 8011830:	b08a      	sub	sp, #40	@ 0x28
 8011832:	af04      	add	r7, sp, #16
 8011834:	60f8      	str	r0, [r7, #12]
 8011836:	60b9      	str	r1, [r7, #8]
 8011838:	607a      	str	r2, [r7, #4]
 801183a:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	009b      	lsls	r3, r3, #2
 8011840:	4618      	mov	r0, r3
 8011842:	f002 fcc3 	bl	80141cc <pvPortMalloc>
 8011846:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d013      	beq.n	8011876 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 801184e:	205c      	movs	r0, #92	@ 0x5c
 8011850:	f002 fcbc 	bl	80141cc <pvPortMalloc>
 8011854:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d008      	beq.n	801186e <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 801185c:	225c      	movs	r2, #92	@ 0x5c
 801185e:	2100      	movs	r1, #0
 8011860:	6978      	ldr	r0, [r7, #20]
 8011862:	f010 fb9c 	bl	8021f9e <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	693a      	ldr	r2, [r7, #16]
 801186a:	631a      	str	r2, [r3, #48]	@ 0x30
 801186c:	e005      	b.n	801187a <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 801186e:	6938      	ldr	r0, [r7, #16]
 8011870:	f002 fdf0 	bl	8014454 <vPortFree>
 8011874:	e001      	b.n	801187a <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8011876:	2300      	movs	r3, #0
 8011878:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d011      	beq.n	80118a4 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	2200      	movs	r2, #0
 8011884:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011888:	2300      	movs	r3, #0
 801188a:	9303      	str	r3, [sp, #12]
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	9302      	str	r3, [sp, #8]
 8011890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011892:	9301      	str	r3, [sp, #4]
 8011894:	6a3b      	ldr	r3, [r7, #32]
 8011896:	9300      	str	r3, [sp, #0]
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	68b9      	ldr	r1, [r7, #8]
 801189e:	68f8      	ldr	r0, [r7, #12]
 80118a0:	f000 f828 	bl	80118f4 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80118a4:	697b      	ldr	r3, [r7, #20]
    }
 80118a6:	4618      	mov	r0, r3
 80118a8:	3718      	adds	r7, #24
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}

080118ae <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80118ae:	b580      	push	{r7, lr}
 80118b0:	b088      	sub	sp, #32
 80118b2:	af02      	add	r7, sp, #8
 80118b4:	60f8      	str	r0, [r7, #12]
 80118b6:	60b9      	str	r1, [r7, #8]
 80118b8:	607a      	str	r2, [r7, #4]
 80118ba:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80118bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118be:	9301      	str	r3, [sp, #4]
 80118c0:	6a3b      	ldr	r3, [r7, #32]
 80118c2:	9300      	str	r3, [sp, #0]
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	687a      	ldr	r2, [r7, #4]
 80118c8:	68b9      	ldr	r1, [r7, #8]
 80118ca:	68f8      	ldr	r0, [r7, #12]
 80118cc:	f7ff ffaf 	bl	801182e <prvCreateTask>
 80118d0:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d005      	beq.n	80118e4 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80118d8:	6938      	ldr	r0, [r7, #16]
 80118da:	f000 f89f 	bl	8011a1c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80118de:	2301      	movs	r3, #1
 80118e0:	617b      	str	r3, [r7, #20]
 80118e2:	e002      	b.n	80118ea <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80118e4:	f04f 33ff 	mov.w	r3, #4294967295
 80118e8:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80118ea:	697b      	ldr	r3, [r7, #20]
    }
 80118ec:	4618      	mov	r0, r3
 80118ee:	3718      	adds	r7, #24
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b088      	sub	sp, #32
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	60f8      	str	r0, [r7, #12]
 80118fc:	60b9      	str	r1, [r7, #8]
 80118fe:	607a      	str	r2, [r7, #4]
 8011900:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8011902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011904:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	461a      	mov	r2, r3
 801190c:	21a5      	movs	r1, #165	@ 0xa5
 801190e:	f010 fb46 	bl	8021f9e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8011912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011916:	6879      	ldr	r1, [r7, #4]
 8011918:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801191c:	440b      	add	r3, r1
 801191e:	009b      	lsls	r3, r3, #2
 8011920:	4413      	add	r3, r2
 8011922:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8011924:	69bb      	ldr	r3, [r7, #24]
 8011926:	f023 0307 	bic.w	r3, r3, #7
 801192a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 801192c:	69bb      	ldr	r3, [r7, #24]
 801192e:	f003 0307 	and.w	r3, r3, #7
 8011932:	2b00      	cmp	r3, #0
 8011934:	d00d      	beq.n	8011952 <prvInitialiseNewTask+0x5e>
    __asm volatile
 8011936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801193a:	b672      	cpsid	i
 801193c:	f383 8811 	msr	BASEPRI, r3
 8011940:	f3bf 8f6f 	isb	sy
 8011944:	f3bf 8f4f 	dsb	sy
 8011948:	b662      	cpsie	i
 801194a:	617b      	str	r3, [r7, #20]
}
 801194c:	bf00      	nop
 801194e:	bf00      	nop
 8011950:	e7fd      	b.n	801194e <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d01e      	beq.n	8011996 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011958:	2300      	movs	r3, #0
 801195a:	61fb      	str	r3, [r7, #28]
 801195c:	e012      	b.n	8011984 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801195e:	68ba      	ldr	r2, [r7, #8]
 8011960:	69fb      	ldr	r3, [r7, #28]
 8011962:	4413      	add	r3, r2
 8011964:	7819      	ldrb	r1, [r3, #0]
 8011966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011968:	69fb      	ldr	r3, [r7, #28]
 801196a:	4413      	add	r3, r2
 801196c:	3334      	adds	r3, #52	@ 0x34
 801196e:	460a      	mov	r2, r1
 8011970:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8011972:	68ba      	ldr	r2, [r7, #8]
 8011974:	69fb      	ldr	r3, [r7, #28]
 8011976:	4413      	add	r3, r2
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d006      	beq.n	801198c <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801197e:	69fb      	ldr	r3, [r7, #28]
 8011980:	3301      	adds	r3, #1
 8011982:	61fb      	str	r3, [r7, #28]
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	2b0f      	cmp	r3, #15
 8011988:	d9e9      	bls.n	801195e <prvInitialiseNewTask+0x6a>
 801198a:	e000      	b.n	801198e <prvInitialiseNewTask+0x9a>
            {
                break;
 801198c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 801198e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011990:	2200      	movs	r2, #0
 8011992:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8011996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011998:	2b06      	cmp	r3, #6
 801199a:	d90d      	bls.n	80119b8 <prvInitialiseNewTask+0xc4>
    __asm volatile
 801199c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119a0:	b672      	cpsid	i
 80119a2:	f383 8811 	msr	BASEPRI, r3
 80119a6:	f3bf 8f6f 	isb	sy
 80119aa:	f3bf 8f4f 	dsb	sy
 80119ae:	b662      	cpsie	i
 80119b0:	613b      	str	r3, [r7, #16]
}
 80119b2:	bf00      	nop
 80119b4:	bf00      	nop
 80119b6:	e7fd      	b.n	80119b4 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80119b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ba:	2b06      	cmp	r3, #6
 80119bc:	d901      	bls.n	80119c2 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80119be:	2306      	movs	r3, #6
 80119c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80119c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80119c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80119ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119d0:	3304      	adds	r3, #4
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fe fdc0 	bl	8010558 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80119d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119da:	3318      	adds	r3, #24
 80119dc:	4618      	mov	r0, r3
 80119de:	f7fe fdbb 	bl	8010558 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80119e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119e6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80119e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ea:	f1c3 0207 	rsb	r2, r3, #7
 80119ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119f0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80119f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119f6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80119f8:	683a      	ldr	r2, [r7, #0]
 80119fa:	68f9      	ldr	r1, [r7, #12]
 80119fc:	69b8      	ldr	r0, [r7, #24]
 80119fe:	f002 f951 	bl	8013ca4 <pxPortInitialiseStack>
 8011a02:	4602      	mov	r2, r0
 8011a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a06:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8011a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d002      	beq.n	8011a14 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a12:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8011a14:	bf00      	nop
 8011a16:	3720      	adds	r7, #32
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8011a24:	f002 fa9e 	bl	8013f64 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8011a28:	4b41      	ldr	r3, [pc, #260]	@ (8011b30 <prvAddNewTaskToReadyList+0x114>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	3301      	adds	r3, #1
 8011a2e:	4a40      	ldr	r2, [pc, #256]	@ (8011b30 <prvAddNewTaskToReadyList+0x114>)
 8011a30:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8011a32:	4b40      	ldr	r3, [pc, #256]	@ (8011b34 <prvAddNewTaskToReadyList+0x118>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d109      	bne.n	8011a4e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8011a3a:	4a3e      	ldr	r2, [pc, #248]	@ (8011b34 <prvAddNewTaskToReadyList+0x118>)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011a40:	4b3b      	ldr	r3, [pc, #236]	@ (8011b30 <prvAddNewTaskToReadyList+0x114>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	2b01      	cmp	r3, #1
 8011a46:	d110      	bne.n	8011a6a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8011a48:	f000 ffa8 	bl	801299c <prvInitialiseTaskLists>
 8011a4c:	e00d      	b.n	8011a6a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8011a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8011b38 <prvAddNewTaskToReadyList+0x11c>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d109      	bne.n	8011a6a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011a56:	4b37      	ldr	r3, [pc, #220]	@ (8011b34 <prvAddNewTaskToReadyList+0x118>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d802      	bhi.n	8011a6a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8011a64:	4a33      	ldr	r2, [pc, #204]	@ (8011b34 <prvAddNewTaskToReadyList+0x118>)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8011a6a:	4b34      	ldr	r3, [pc, #208]	@ (8011b3c <prvAddNewTaskToReadyList+0x120>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	3301      	adds	r3, #1
 8011a70:	4a32      	ldr	r2, [pc, #200]	@ (8011b3c <prvAddNewTaskToReadyList+0x120>)
 8011a72:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011a74:	4b31      	ldr	r3, [pc, #196]	@ (8011b3c <prvAddNewTaskToReadyList+0x120>)
 8011a76:	681a      	ldr	r2, [r3, #0]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a80:	2201      	movs	r2, #1
 8011a82:	409a      	lsls	r2, r3
 8011a84:	4b2e      	ldr	r3, [pc, #184]	@ (8011b40 <prvAddNewTaskToReadyList+0x124>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8011b40 <prvAddNewTaskToReadyList+0x124>)
 8011a8c:	6013      	str	r3, [r2, #0]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a92:	492c      	ldr	r1, [pc, #176]	@ (8011b44 <prvAddNewTaskToReadyList+0x128>)
 8011a94:	4613      	mov	r3, r2
 8011a96:	009b      	lsls	r3, r3, #2
 8011a98:	4413      	add	r3, r2
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	440b      	add	r3, r1
 8011a9e:	3304      	adds	r3, #4
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	60fb      	str	r3, [r7, #12]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	68fa      	ldr	r2, [r7, #12]
 8011aa8:	609a      	str	r2, [r3, #8]
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	689a      	ldr	r2, [r3, #8]
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	60da      	str	r2, [r3, #12]
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	689b      	ldr	r3, [r3, #8]
 8011ab6:	687a      	ldr	r2, [r7, #4]
 8011ab8:	3204      	adds	r2, #4
 8011aba:	605a      	str	r2, [r3, #4]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	1d1a      	adds	r2, r3, #4
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	609a      	str	r2, [r3, #8]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ac8:	4613      	mov	r3, r2
 8011aca:	009b      	lsls	r3, r3, #2
 8011acc:	4413      	add	r3, r2
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8011b44 <prvAddNewTaskToReadyList+0x128>)
 8011ad2:	441a      	add	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	615a      	str	r2, [r3, #20]
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011adc:	4919      	ldr	r1, [pc, #100]	@ (8011b44 <prvAddNewTaskToReadyList+0x128>)
 8011ade:	4613      	mov	r3, r2
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	4413      	add	r3, r2
 8011ae4:	009b      	lsls	r3, r3, #2
 8011ae6:	440b      	add	r3, r1
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	687a      	ldr	r2, [r7, #4]
 8011aec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011aee:	1c59      	adds	r1, r3, #1
 8011af0:	4814      	ldr	r0, [pc, #80]	@ (8011b44 <prvAddNewTaskToReadyList+0x128>)
 8011af2:	4613      	mov	r3, r2
 8011af4:	009b      	lsls	r3, r3, #2
 8011af6:	4413      	add	r3, r2
 8011af8:	009b      	lsls	r3, r3, #2
 8011afa:	4403      	add	r3, r0
 8011afc:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8011afe:	f002 fa67 	bl	8013fd0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8011b02:	4b0d      	ldr	r3, [pc, #52]	@ (8011b38 <prvAddNewTaskToReadyList+0x11c>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d00e      	beq.n	8011b28 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8011b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8011b34 <prvAddNewTaskToReadyList+0x118>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d207      	bcs.n	8011b28 <prvAddNewTaskToReadyList+0x10c>
 8011b18:	4b0b      	ldr	r3, [pc, #44]	@ (8011b48 <prvAddNewTaskToReadyList+0x12c>)
 8011b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b1e:	601a      	str	r2, [r3, #0]
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8011b28:	bf00      	nop
 8011b2a:	3710      	adds	r7, #16
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	24019954 	.word	0x24019954
 8011b34:	24019868 	.word	0x24019868
 8011b38:	24019960 	.word	0x24019960
 8011b3c:	24019970 	.word	0x24019970
 8011b40:	2401995c 	.word	0x2401995c
 8011b44:	2401986c 	.word	0x2401986c
 8011b48:	e000ed04 	.word	0xe000ed04

08011b4c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b086      	sub	sp, #24
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8011b54:	2300      	movs	r3, #0
 8011b56:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8011b58:	f002 fa04 	bl	8013f64 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d102      	bne.n	8011b68 <vTaskDelete+0x1c>
 8011b62:	4b42      	ldr	r3, [pc, #264]	@ (8011c6c <vTaskDelete+0x120>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	e000      	b.n	8011b6a <vTaskDelete+0x1e>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	3304      	adds	r3, #4
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7fe fd5b 	bl	801062c <uxListRemove>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d115      	bne.n	8011ba8 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b80:	493b      	ldr	r1, [pc, #236]	@ (8011c70 <vTaskDelete+0x124>)
 8011b82:	4613      	mov	r3, r2
 8011b84:	009b      	lsls	r3, r3, #2
 8011b86:	4413      	add	r3, r2
 8011b88:	009b      	lsls	r3, r3, #2
 8011b8a:	440b      	add	r3, r1
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d10a      	bne.n	8011ba8 <vTaskDelete+0x5c>
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b96:	2201      	movs	r2, #1
 8011b98:	fa02 f303 	lsl.w	r3, r2, r3
 8011b9c:	43da      	mvns	r2, r3
 8011b9e:	4b35      	ldr	r3, [pc, #212]	@ (8011c74 <vTaskDelete+0x128>)
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	4013      	ands	r3, r2
 8011ba4:	4a33      	ldr	r2, [pc, #204]	@ (8011c74 <vTaskDelete+0x128>)
 8011ba6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d004      	beq.n	8011bba <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	3318      	adds	r3, #24
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7fe fd39 	bl	801062c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8011bba:	4b2f      	ldr	r3, [pc, #188]	@ (8011c78 <vTaskDelete+0x12c>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8011c78 <vTaskDelete+0x12c>)
 8011bc2:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8011bc4:	4b29      	ldr	r3, [pc, #164]	@ (8011c6c <vTaskDelete+0x120>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	693a      	ldr	r2, [r7, #16]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d101      	bne.n	8011bd2 <vTaskDelete+0x86>
 8011bce:	2301      	movs	r3, #1
 8011bd0:	e000      	b.n	8011bd4 <vTaskDelete+0x88>
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8011bd6:	4b29      	ldr	r3, [pc, #164]	@ (8011c7c <vTaskDelete+0x130>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d010      	beq.n	8011c00 <vTaskDelete+0xb4>
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d00d      	beq.n	8011c00 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	3304      	adds	r3, #4
 8011be8:	4619      	mov	r1, r3
 8011bea:	4825      	ldr	r0, [pc, #148]	@ (8011c80 <vTaskDelete+0x134>)
 8011bec:	f7fe fcc1 	bl	8010572 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8011bf0:	4b24      	ldr	r3, [pc, #144]	@ (8011c84 <vTaskDelete+0x138>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	4a23      	ldr	r2, [pc, #140]	@ (8011c84 <vTaskDelete+0x138>)
 8011bf8:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	617b      	str	r3, [r7, #20]
 8011bfe:	e006      	b.n	8011c0e <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8011c00:	4b21      	ldr	r3, [pc, #132]	@ (8011c88 <vTaskDelete+0x13c>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	3b01      	subs	r3, #1
 8011c06:	4a20      	ldr	r2, [pc, #128]	@ (8011c88 <vTaskDelete+0x13c>)
 8011c08:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8011c0a:	f001 f815 	bl	8012c38 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8011c0e:	f002 f9df 	bl	8013fd0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	d002      	beq.n	8011c1e <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8011c18:	6938      	ldr	r0, [r7, #16]
 8011c1a:	f000 ffdb 	bl	8012bd4 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8011c1e:	4b17      	ldr	r3, [pc, #92]	@ (8011c7c <vTaskDelete+0x130>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d01e      	beq.n	8011c64 <vTaskDelete+0x118>
            {
                if( pxTCB == pxCurrentTCB )
 8011c26:	4b11      	ldr	r3, [pc, #68]	@ (8011c6c <vTaskDelete+0x120>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	693a      	ldr	r2, [r7, #16]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d119      	bne.n	8011c64 <vTaskDelete+0x118>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8011c30:	4b16      	ldr	r3, [pc, #88]	@ (8011c8c <vTaskDelete+0x140>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d00d      	beq.n	8011c54 <vTaskDelete+0x108>
    __asm volatile
 8011c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c3c:	b672      	cpsid	i
 8011c3e:	f383 8811 	msr	BASEPRI, r3
 8011c42:	f3bf 8f6f 	isb	sy
 8011c46:	f3bf 8f4f 	dsb	sy
 8011c4a:	b662      	cpsie	i
 8011c4c:	60bb      	str	r3, [r7, #8]
}
 8011c4e:	bf00      	nop
 8011c50:	bf00      	nop
 8011c52:	e7fd      	b.n	8011c50 <vTaskDelete+0x104>
                    taskYIELD_WITHIN_API();
 8011c54:	4b0e      	ldr	r3, [pc, #56]	@ (8011c90 <vTaskDelete+0x144>)
 8011c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c5a:	601a      	str	r2, [r3, #0]
 8011c5c:	f3bf 8f4f 	dsb	sy
 8011c60:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8011c64:	bf00      	nop
 8011c66:	3718      	adds	r7, #24
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	24019868 	.word	0x24019868
 8011c70:	2401986c 	.word	0x2401986c
 8011c74:	2401995c 	.word	0x2401995c
 8011c78:	24019970 	.word	0x24019970
 8011c7c:	24019960 	.word	0x24019960
 8011c80:	2401993c 	.word	0x2401993c
 8011c84:	24019950 	.word	0x24019950
 8011c88:	24019954 	.word	0x24019954
 8011c8c:	2401997c 	.word	0x2401997c
 8011c90:	e000ed04 	.word	0xe000ed04

08011c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d01a      	beq.n	8011cdc <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 8011ca6:	f000 f93f 	bl	8011f28 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8011caa:	4b14      	ldr	r3, [pc, #80]	@ (8011cfc <vTaskDelay+0x68>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d00d      	beq.n	8011cce <vTaskDelay+0x3a>
    __asm volatile
 8011cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cb6:	b672      	cpsid	i
 8011cb8:	f383 8811 	msr	BASEPRI, r3
 8011cbc:	f3bf 8f6f 	isb	sy
 8011cc0:	f3bf 8f4f 	dsb	sy
 8011cc4:	b662      	cpsie	i
 8011cc6:	60bb      	str	r3, [r7, #8]
}
 8011cc8:	bf00      	nop
 8011cca:	bf00      	nop
 8011ccc:	e7fd      	b.n	8011cca <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011cce:	2100      	movs	r1, #0
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f001 fbf3 	bl	80134bc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8011cd6:	f000 f935 	bl	8011f44 <xTaskResumeAll>
 8011cda:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d107      	bne.n	8011cf2 <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 8011ce2:	4b07      	ldr	r3, [pc, #28]	@ (8011d00 <vTaskDelay+0x6c>)
 8011ce4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ce8:	601a      	str	r2, [r3, #0]
 8011cea:	f3bf 8f4f 	dsb	sy
 8011cee:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8011cf2:	bf00      	nop
 8011cf4:	3710      	adds	r7, #16
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	2401997c 	.word	0x2401997c
 8011d00:	e000ed04 	.word	0xe000ed04

08011d04 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b08a      	sub	sp, #40	@ 0x28
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
        eTaskState eReturn;
        List_t const * pxStateList;
        List_t const * pxEventList;
        List_t const * pxDelayedList;
        List_t const * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	623b      	str	r3, [r7, #32]

        traceENTER_eTaskGetState( xTask );

        configASSERT( pxTCB );
 8011d10:	6a3b      	ldr	r3, [r7, #32]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d10d      	bne.n	8011d32 <eTaskGetState+0x2e>
    __asm volatile
 8011d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d1a:	b672      	cpsid	i
 8011d1c:	f383 8811 	msr	BASEPRI, r3
 8011d20:	f3bf 8f6f 	isb	sy
 8011d24:	f3bf 8f4f 	dsb	sy
 8011d28:	b662      	cpsie	i
 8011d2a:	60fb      	str	r3, [r7, #12]
}
 8011d2c:	bf00      	nop
 8011d2e:	bf00      	nop
 8011d30:	e7fd      	b.n	8011d2e <eTaskGetState+0x2a>

        #if ( configNUMBER_OF_CORES == 1 )
            if( pxTCB == pxCurrentTCB )
 8011d32:	4b20      	ldr	r3, [pc, #128]	@ (8011db4 <eTaskGetState+0xb0>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	6a3a      	ldr	r2, [r7, #32]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d103      	bne.n	8011d44 <eTaskGetState+0x40>
            {
                /* The task calling this function is querying its own state. */
                eReturn = eRunning;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011d42:	e031      	b.n	8011da8 <eTaskGetState+0xa4>
            }
            else
        #endif
        {
            taskENTER_CRITICAL();
 8011d44:	f002 f90e 	bl	8013f64 <vPortEnterCritical>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8011d48:	6a3b      	ldr	r3, [r7, #32]
 8011d4a:	695b      	ldr	r3, [r3, #20]
 8011d4c:	61fb      	str	r3, [r7, #28]
                pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 8011d4e:	6a3b      	ldr	r3, [r7, #32]
 8011d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d52:	61bb      	str	r3, [r7, #24]
                pxDelayedList = pxDelayedTaskList;
 8011d54:	4b18      	ldr	r3, [pc, #96]	@ (8011db8 <eTaskGetState+0xb4>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	617b      	str	r3, [r7, #20]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8011d5a:	4b18      	ldr	r3, [pc, #96]	@ (8011dbc <eTaskGetState+0xb8>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	613b      	str	r3, [r7, #16]
            }
            taskEXIT_CRITICAL();
 8011d60:	f002 f936 	bl	8013fd0 <vPortExitCritical>

            if( pxEventList == &xPendingReadyList )
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	4a16      	ldr	r2, [pc, #88]	@ (8011dc0 <eTaskGetState+0xbc>)
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	d103      	bne.n	8011d74 <eTaskGetState+0x70>
            {
                /* The task has been placed on the pending ready list, so its
                 * state is eReady regardless of what list the task's state list
                 * item is currently placed on. */
                eReturn = eReady;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011d72:	e019      	b.n	8011da8 <eTaskGetState+0xa4>
            }
            else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8011d74:	69fa      	ldr	r2, [r7, #28]
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d003      	beq.n	8011d84 <eTaskGetState+0x80>
 8011d7c:	69fa      	ldr	r2, [r7, #28]
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d103      	bne.n	8011d8c <eTaskGetState+0x88>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
 8011d84:	2302      	movs	r3, #2
 8011d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011d8a:	e00d      	b.n	8011da8 <eTaskGetState+0xa4>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8011dc4 <eTaskGetState+0xc0>)
 8011d90:	4293      	cmp	r3, r2
 8011d92:	d002      	beq.n	8011d9a <eTaskGetState+0x96>
 8011d94:	69fb      	ldr	r3, [r7, #28]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d103      	bne.n	8011da2 <eTaskGetState+0x9e>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
 8011d9a:	2304      	movs	r3, #4
 8011d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011da0:	e002      	b.n	8011da8 <eTaskGetState+0xa4>
            {
                #if ( configNUMBER_OF_CORES == 1 )
                {
                    /* If the task is not in any other state, it must be in the
                     * Ready (including pending ready) state. */
                    eReturn = eReady;
 8011da2:	2301      	movs	r3, #1
 8011da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }

        traceRETURN_eTaskGetState( eReturn );

        return eReturn;
 8011da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 8011dac:	4618      	mov	r0, r3
 8011dae:	3728      	adds	r7, #40	@ 0x28
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}
 8011db4:	24019868 	.word	0x24019868
 8011db8:	24019920 	.word	0x24019920
 8011dbc:	24019924 	.word	0x24019924
 8011dc0:	24019928 	.word	0x24019928
 8011dc4:	2401993c 	.word	0x2401993c

08011dc8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b090      	sub	sp, #64	@ 0x40
 8011dcc:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8011dce:	2301      	movs	r3, #1
 8011dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8011dda:	e013      	b.n	8011e04 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8011ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8011e8c <prvCreateIdleTasks+0xc4>)
 8011dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de0:	4413      	add	r3, r2
 8011de2:	7819      	ldrb	r1, [r3, #0]
 8011de4:	f107 0210 	add.w	r2, r7, #16
 8011de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dea:	4413      	add	r3, r2
 8011dec:	460a      	mov	r2, r1
 8011dee:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8011df0:	f107 0210 	add.w	r2, r7, #16
 8011df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df6:	4413      	add	r3, r2
 8011df8:	781b      	ldrb	r3, [r3, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d006      	beq.n	8011e0c <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8011dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e00:	3301      	adds	r3, #1
 8011e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e06:	2b0f      	cmp	r3, #15
 8011e08:	dde8      	ble.n	8011ddc <prvCreateIdleTasks+0x14>
 8011e0a:	e000      	b.n	8011e0e <prvCreateIdleTasks+0x46>
        {
            break;
 8011e0c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8011e0e:	2300      	movs	r3, #0
 8011e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e12:	e031      	b.n	8011e78 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8011e14:	4b1e      	ldr	r3, [pc, #120]	@ (8011e90 <prvCreateIdleTasks+0xc8>)
 8011e16:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8011e20:	1d3a      	adds	r2, r7, #4
 8011e22:	f107 0108 	add.w	r1, r7, #8
 8011e26:	f107 030c 	add.w	r3, r7, #12
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f001 fb9c 	bl	8013568 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	68fa      	ldr	r2, [r7, #12]
 8011e36:	f107 0110 	add.w	r1, r7, #16
 8011e3a:	9202      	str	r2, [sp, #8]
 8011e3c:	9301      	str	r3, [sp, #4]
 8011e3e:	2300      	movs	r3, #0
 8011e40:	9300      	str	r3, [sp, #0]
 8011e42:	2300      	movs	r3, #0
 8011e44:	4602      	mov	r2, r0
 8011e46:	6a38      	ldr	r0, [r7, #32]
 8011e48:	f7ff fccd 	bl	80117e6 <xTaskCreateStatic>
 8011e4c:	4602      	mov	r2, r0
 8011e4e:	4911      	ldr	r1, [pc, #68]	@ (8011e94 <prvCreateIdleTasks+0xcc>)
 8011e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8011e56:	4a0f      	ldr	r2, [pc, #60]	@ (8011e94 <prvCreateIdleTasks+0xcc>)
 8011e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d002      	beq.n	8011e68 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 8011e62:	2301      	movs	r3, #1
 8011e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e66:	e001      	b.n	8011e6c <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8011e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d006      	beq.n	8011e80 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8011e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e74:	3301      	adds	r3, #1
 8011e76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	ddca      	ble.n	8011e14 <prvCreateIdleTasks+0x4c>
 8011e7e:	e000      	b.n	8011e82 <prvCreateIdleTasks+0xba>
        {
            break;
 8011e80:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8011e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3730      	adds	r7, #48	@ 0x30
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}
 8011e8c:	080255d0 	.word	0x080255d0
 8011e90:	0801296d 	.word	0x0801296d
 8011e94:	24019978 	.word	0x24019978

08011e98 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b084      	sub	sp, #16
 8011e9c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8011e9e:	f7ff ff93 	bl	8011dc8 <prvCreateIdleTasks>
 8011ea2:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2b01      	cmp	r3, #1
 8011ea8:	d102      	bne.n	8011eb0 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8011eaa:	f001 fb91 	bl	80135d0 <xTimerCreateTimerTask>
 8011eae:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	2b01      	cmp	r3, #1
 8011eb4:	d118      	bne.n	8011ee8 <vTaskStartScheduler+0x50>
    __asm volatile
 8011eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011eba:	b672      	cpsid	i
 8011ebc:	f383 8811 	msr	BASEPRI, r3
 8011ec0:	f3bf 8f6f 	isb	sy
 8011ec4:	f3bf 8f4f 	dsb	sy
 8011ec8:	b662      	cpsie	i
 8011eca:	60bb      	str	r3, [r7, #8]
}
 8011ecc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8011ece:	4b12      	ldr	r3, [pc, #72]	@ (8011f18 <vTaskStartScheduler+0x80>)
 8011ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8011ed6:	4b11      	ldr	r3, [pc, #68]	@ (8011f1c <vTaskStartScheduler+0x84>)
 8011ed8:	2201      	movs	r2, #1
 8011eda:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011edc:	4b10      	ldr	r3, [pc, #64]	@ (8011f20 <vTaskStartScheduler+0x88>)
 8011ede:	2200      	movs	r2, #0
 8011ee0:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8011ee2:	f001 ff6f 	bl	8013dc4 <xPortStartScheduler>
 8011ee6:	e011      	b.n	8011f0c <vTaskStartScheduler+0x74>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eee:	d10d      	bne.n	8011f0c <vTaskStartScheduler+0x74>
    __asm volatile
 8011ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ef4:	b672      	cpsid	i
 8011ef6:	f383 8811 	msr	BASEPRI, r3
 8011efa:	f3bf 8f6f 	isb	sy
 8011efe:	f3bf 8f4f 	dsb	sy
 8011f02:	b662      	cpsie	i
 8011f04:	607b      	str	r3, [r7, #4]
}
 8011f06:	bf00      	nop
 8011f08:	bf00      	nop
 8011f0a:	e7fd      	b.n	8011f08 <vTaskStartScheduler+0x70>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8011f0c:	4b05      	ldr	r3, [pc, #20]	@ (8011f24 <vTaskStartScheduler+0x8c>)
 8011f0e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8011f10:	bf00      	nop
 8011f12:	3710      	adds	r7, #16
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	24019974 	.word	0x24019974
 8011f1c:	24019960 	.word	0x24019960
 8011f20:	24019958 	.word	0x24019958
 8011f24:	080262c0 	.word	0x080262c0

08011f28 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011f28:	b480      	push	{r7}
 8011f2a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8011f2c:	4b04      	ldr	r3, [pc, #16]	@ (8011f40 <vTaskSuspendAll+0x18>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	3301      	adds	r3, #1
 8011f32:	4a03      	ldr	r2, [pc, #12]	@ (8011f40 <vTaskSuspendAll+0x18>)
 8011f34:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8011f36:	bf00      	nop
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3e:	4770      	bx	lr
 8011f40:	2401997c 	.word	0x2401997c

08011f44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b088      	sub	sp, #32
 8011f48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8011f52:	f002 f807 	bl	8013f64 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8011f56:	2300      	movs	r3, #0
 8011f58:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8011f5a:	4b76      	ldr	r3, [pc, #472]	@ (8012134 <xTaskResumeAll+0x1f0>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d10d      	bne.n	8011f7e <xTaskResumeAll+0x3a>
    __asm volatile
 8011f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f66:	b672      	cpsid	i
 8011f68:	f383 8811 	msr	BASEPRI, r3
 8011f6c:	f3bf 8f6f 	isb	sy
 8011f70:	f3bf 8f4f 	dsb	sy
 8011f74:	b662      	cpsie	i
 8011f76:	603b      	str	r3, [r7, #0]
}
 8011f78:	bf00      	nop
 8011f7a:	bf00      	nop
 8011f7c:	e7fd      	b.n	8011f7a <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8011f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8012134 <xTaskResumeAll+0x1f0>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	3b01      	subs	r3, #1
 8011f84:	4a6b      	ldr	r2, [pc, #428]	@ (8012134 <xTaskResumeAll+0x1f0>)
 8011f86:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8011f88:	4b6a      	ldr	r3, [pc, #424]	@ (8012134 <xTaskResumeAll+0x1f0>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f040 80ca 	bne.w	8012126 <xTaskResumeAll+0x1e2>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011f92:	4b69      	ldr	r3, [pc, #420]	@ (8012138 <xTaskResumeAll+0x1f4>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f000 80c5 	beq.w	8012126 <xTaskResumeAll+0x1e2>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011f9c:	e08e      	b.n	80120bc <xTaskResumeAll+0x178>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011f9e:	4b67      	ldr	r3, [pc, #412]	@ (801213c <xTaskResumeAll+0x1f8>)
 8011fa0:	68db      	ldr	r3, [r3, #12]
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8011fa6:	69fb      	ldr	r3, [r7, #28]
 8011fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011faa:	60fb      	str	r3, [r7, #12]
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	69db      	ldr	r3, [r3, #28]
 8011fb0:	69fa      	ldr	r2, [r7, #28]
 8011fb2:	6a12      	ldr	r2, [r2, #32]
 8011fb4:	609a      	str	r2, [r3, #8]
 8011fb6:	69fb      	ldr	r3, [r7, #28]
 8011fb8:	6a1b      	ldr	r3, [r3, #32]
 8011fba:	69fa      	ldr	r2, [r7, #28]
 8011fbc:	69d2      	ldr	r2, [r2, #28]
 8011fbe:	605a      	str	r2, [r3, #4]
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	685a      	ldr	r2, [r3, #4]
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	3318      	adds	r3, #24
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d103      	bne.n	8011fd4 <xTaskResumeAll+0x90>
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	6a1a      	ldr	r2, [r3, #32]
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	605a      	str	r2, [r3, #4]
 8011fd4:	69fb      	ldr	r3, [r7, #28]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	1e5a      	subs	r2, r3, #1
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8011fe4:	69fb      	ldr	r3, [r7, #28]
 8011fe6:	695b      	ldr	r3, [r3, #20]
 8011fe8:	60bb      	str	r3, [r7, #8]
 8011fea:	69fb      	ldr	r3, [r7, #28]
 8011fec:	689b      	ldr	r3, [r3, #8]
 8011fee:	69fa      	ldr	r2, [r7, #28]
 8011ff0:	68d2      	ldr	r2, [r2, #12]
 8011ff2:	609a      	str	r2, [r3, #8]
 8011ff4:	69fb      	ldr	r3, [r7, #28]
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	69fa      	ldr	r2, [r7, #28]
 8011ffa:	6892      	ldr	r2, [r2, #8]
 8011ffc:	605a      	str	r2, [r3, #4]
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	685a      	ldr	r2, [r3, #4]
 8012002:	69fb      	ldr	r3, [r7, #28]
 8012004:	3304      	adds	r3, #4
 8012006:	429a      	cmp	r2, r3
 8012008:	d103      	bne.n	8012012 <xTaskResumeAll+0xce>
 801200a:	69fb      	ldr	r3, [r7, #28]
 801200c:	68da      	ldr	r2, [r3, #12]
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	605a      	str	r2, [r3, #4]
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	2200      	movs	r2, #0
 8012016:	615a      	str	r2, [r3, #20]
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	1e5a      	subs	r2, r3, #1
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012026:	2201      	movs	r2, #1
 8012028:	409a      	lsls	r2, r3
 801202a:	4b45      	ldr	r3, [pc, #276]	@ (8012140 <xTaskResumeAll+0x1fc>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	4313      	orrs	r3, r2
 8012030:	4a43      	ldr	r2, [pc, #268]	@ (8012140 <xTaskResumeAll+0x1fc>)
 8012032:	6013      	str	r3, [r2, #0]
 8012034:	69fb      	ldr	r3, [r7, #28]
 8012036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012038:	4942      	ldr	r1, [pc, #264]	@ (8012144 <xTaskResumeAll+0x200>)
 801203a:	4613      	mov	r3, r2
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	4413      	add	r3, r2
 8012040:	009b      	lsls	r3, r3, #2
 8012042:	440b      	add	r3, r1
 8012044:	3304      	adds	r3, #4
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	607b      	str	r3, [r7, #4]
 801204a:	69fb      	ldr	r3, [r7, #28]
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	609a      	str	r2, [r3, #8]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	689a      	ldr	r2, [r3, #8]
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	60da      	str	r2, [r3, #12]
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	689b      	ldr	r3, [r3, #8]
 801205c:	69fa      	ldr	r2, [r7, #28]
 801205e:	3204      	adds	r2, #4
 8012060:	605a      	str	r2, [r3, #4]
 8012062:	69fb      	ldr	r3, [r7, #28]
 8012064:	1d1a      	adds	r2, r3, #4
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	609a      	str	r2, [r3, #8]
 801206a:	69fb      	ldr	r3, [r7, #28]
 801206c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801206e:	4613      	mov	r3, r2
 8012070:	009b      	lsls	r3, r3, #2
 8012072:	4413      	add	r3, r2
 8012074:	009b      	lsls	r3, r3, #2
 8012076:	4a33      	ldr	r2, [pc, #204]	@ (8012144 <xTaskResumeAll+0x200>)
 8012078:	441a      	add	r2, r3
 801207a:	69fb      	ldr	r3, [r7, #28]
 801207c:	615a      	str	r2, [r3, #20]
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012082:	4930      	ldr	r1, [pc, #192]	@ (8012144 <xTaskResumeAll+0x200>)
 8012084:	4613      	mov	r3, r2
 8012086:	009b      	lsls	r3, r3, #2
 8012088:	4413      	add	r3, r2
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	440b      	add	r3, r1
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	69fa      	ldr	r2, [r7, #28]
 8012092:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012094:	1c59      	adds	r1, r3, #1
 8012096:	482b      	ldr	r0, [pc, #172]	@ (8012144 <xTaskResumeAll+0x200>)
 8012098:	4613      	mov	r3, r2
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	4413      	add	r3, r2
 801209e:	009b      	lsls	r3, r3, #2
 80120a0:	4403      	add	r3, r0
 80120a2:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80120a4:	69fb      	ldr	r3, [r7, #28]
 80120a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120a8:	4b27      	ldr	r3, [pc, #156]	@ (8012148 <xTaskResumeAll+0x204>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d904      	bls.n	80120bc <xTaskResumeAll+0x178>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80120b2:	4a26      	ldr	r2, [pc, #152]	@ (801214c <xTaskResumeAll+0x208>)
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	2101      	movs	r1, #1
 80120b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80120bc:	4b1f      	ldr	r3, [pc, #124]	@ (801213c <xTaskResumeAll+0x1f8>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	f47f af6c 	bne.w	8011f9e <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d001      	beq.n	80120d0 <xTaskResumeAll+0x18c>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80120cc:	f000 fdb4 	bl	8012c38 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80120d0:	4b1f      	ldr	r3, [pc, #124]	@ (8012150 <xTaskResumeAll+0x20c>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d012      	beq.n	8012102 <xTaskResumeAll+0x1be>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80120dc:	f000 f8d2 	bl	8012284 <xTaskIncrementTick>
 80120e0:	4603      	mov	r3, r0
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d004      	beq.n	80120f0 <xTaskResumeAll+0x1ac>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80120e6:	4a19      	ldr	r2, [pc, #100]	@ (801214c <xTaskResumeAll+0x208>)
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	2101      	movs	r1, #1
 80120ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	3b01      	subs	r3, #1
 80120f4:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d1ef      	bne.n	80120dc <xTaskResumeAll+0x198>

                            xPendedTicks = 0;
 80120fc:	4b14      	ldr	r3, [pc, #80]	@ (8012150 <xTaskResumeAll+0x20c>)
 80120fe:	2200      	movs	r2, #0
 8012100:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8012102:	4a12      	ldr	r2, [pc, #72]	@ (801214c <xTaskResumeAll+0x208>)
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d00b      	beq.n	8012126 <xTaskResumeAll+0x1e2>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 801210e:	2301      	movs	r3, #1
 8012110:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8012112:	4b0d      	ldr	r3, [pc, #52]	@ (8012148 <xTaskResumeAll+0x204>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	4b0f      	ldr	r3, [pc, #60]	@ (8012154 <xTaskResumeAll+0x210>)
 8012118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801211c:	601a      	str	r2, [r3, #0]
 801211e:	f3bf 8f4f 	dsb	sy
 8012122:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8012126:	f001 ff53 	bl	8013fd0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 801212a:	69bb      	ldr	r3, [r7, #24]
}
 801212c:	4618      	mov	r0, r3
 801212e:	3720      	adds	r7, #32
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}
 8012134:	2401997c 	.word	0x2401997c
 8012138:	24019954 	.word	0x24019954
 801213c:	24019928 	.word	0x24019928
 8012140:	2401995c 	.word	0x2401995c
 8012144:	2401986c 	.word	0x2401986c
 8012148:	24019868 	.word	0x24019868
 801214c:	24019968 	.word	0x24019968
 8012150:	24019964 	.word	0x24019964
 8012154:	e000ed04 	.word	0xe000ed04

08012158 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 801215e:	4b05      	ldr	r3, [pc, #20]	@ (8012174 <xTaskGetTickCount+0x1c>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8012164:	687b      	ldr	r3, [r7, #4]
}
 8012166:	4618      	mov	r0, r3
 8012168:	370c      	adds	r7, #12
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop
 8012174:	24019958 	.word	0x24019958

08012178 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8012178:	b480      	push	{r7}
 801217a:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 801217c:	4b03      	ldr	r3, [pc, #12]	@ (801218c <uxTaskGetNumberOfTasks+0x14>)
 801217e:	681b      	ldr	r3, [r3, #0]
}
 8012180:	4618      	mov	r0, r3
 8012182:	46bd      	mov	sp, r7
 8012184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012188:	4770      	bx	lr
 801218a:	bf00      	nop
 801218c:	24019954 	.word	0x24019954

08012190 <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
    {
 8012190:	b580      	push	{r7, lr}
 8012192:	b086      	sub	sp, #24
 8012194:	af00      	add	r7, sp, #0
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	60b9      	str	r1, [r7, #8]
 801219a:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 801219c:	2300      	movs	r3, #0
 801219e:	617b      	str	r3, [r7, #20]
 80121a0:	2307      	movs	r3, #7
 80121a2:	613b      	str	r3, [r7, #16]

        traceENTER_uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );

        vTaskSuspendAll();
 80121a4:	f7ff fec0 	bl	8011f28 <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
 80121a8:	4b31      	ldr	r3, [pc, #196]	@ (8012270 <uxTaskGetSystemState+0xe0>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	68ba      	ldr	r2, [r7, #8]
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d357      	bcc.n	8012262 <uxTaskGetSystemState+0xd2>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	3b01      	subs	r3, #1
 80121b6:	613b      	str	r3, [r7, #16]
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 80121b8:	697a      	ldr	r2, [r7, #20]
 80121ba:	4613      	mov	r3, r2
 80121bc:	00db      	lsls	r3, r3, #3
 80121be:	4413      	add	r3, r2
 80121c0:	009b      	lsls	r3, r3, #2
 80121c2:	461a      	mov	r2, r3
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	1898      	adds	r0, r3, r2
 80121c8:	693a      	ldr	r2, [r7, #16]
 80121ca:	4613      	mov	r3, r2
 80121cc:	009b      	lsls	r3, r3, #2
 80121ce:	4413      	add	r3, r2
 80121d0:	009b      	lsls	r3, r3, #2
 80121d2:	4a28      	ldr	r2, [pc, #160]	@ (8012274 <uxTaskGetSystemState+0xe4>)
 80121d4:	4413      	add	r3, r2
 80121d6:	2201      	movs	r2, #1
 80121d8:	4619      	mov	r1, r3
 80121da:	f000 fcab 	bl	8012b34 <prvListTasksWithinSingleList>
 80121de:	4602      	mov	r2, r0
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	4413      	add	r3, r2
 80121e4:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY );
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d1e2      	bne.n	80121b2 <uxTaskGetSystemState+0x22>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 80121ec:	697a      	ldr	r2, [r7, #20]
 80121ee:	4613      	mov	r3, r2
 80121f0:	00db      	lsls	r3, r3, #3
 80121f2:	4413      	add	r3, r2
 80121f4:	009b      	lsls	r3, r3, #2
 80121f6:	461a      	mov	r2, r3
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	4413      	add	r3, r2
 80121fc:	4a1e      	ldr	r2, [pc, #120]	@ (8012278 <uxTaskGetSystemState+0xe8>)
 80121fe:	6811      	ldr	r1, [r2, #0]
 8012200:	2202      	movs	r2, #2
 8012202:	4618      	mov	r0, r3
 8012204:	f000 fc96 	bl	8012b34 <prvListTasksWithinSingleList>
 8012208:	4602      	mov	r2, r0
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	4413      	add	r3, r2
 801220e:	617b      	str	r3, [r7, #20]
                uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 8012210:	697a      	ldr	r2, [r7, #20]
 8012212:	4613      	mov	r3, r2
 8012214:	00db      	lsls	r3, r3, #3
 8012216:	4413      	add	r3, r2
 8012218:	009b      	lsls	r3, r3, #2
 801221a:	461a      	mov	r2, r3
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	4413      	add	r3, r2
 8012220:	4a16      	ldr	r2, [pc, #88]	@ (801227c <uxTaskGetSystemState+0xec>)
 8012222:	6811      	ldr	r1, [r2, #0]
 8012224:	2202      	movs	r2, #2
 8012226:	4618      	mov	r0, r3
 8012228:	f000 fc84 	bl	8012b34 <prvListTasksWithinSingleList>
 801222c:	4602      	mov	r2, r0
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	4413      	add	r3, r2
 8012232:	617b      	str	r3, [r7, #20]

                #if ( INCLUDE_vTaskDelete == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task that has been deleted but not yet cleaned up. */
                    uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 8012234:	697a      	ldr	r2, [r7, #20]
 8012236:	4613      	mov	r3, r2
 8012238:	00db      	lsls	r3, r3, #3
 801223a:	4413      	add	r3, r2
 801223c:	009b      	lsls	r3, r3, #2
 801223e:	461a      	mov	r2, r3
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	4413      	add	r3, r2
 8012244:	2204      	movs	r2, #4
 8012246:	490e      	ldr	r1, [pc, #56]	@ (8012280 <uxTaskGetSystemState+0xf0>)
 8012248:	4618      	mov	r0, r3
 801224a:	f000 fc73 	bl	8012b34 <prvListTasksWithinSingleList>
 801224e:	4602      	mov	r2, r0
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	4413      	add	r3, r2
 8012254:	617b      	str	r3, [r7, #20]
                        #endif
                    }
                }
                #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
                {
                    if( pulTotalRunTime != NULL )
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d002      	beq.n	8012262 <uxTaskGetSystemState+0xd2>
                    {
                        *pulTotalRunTime = 0;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2200      	movs	r2, #0
 8012260:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
 8012262:	f7ff fe6f 	bl	8011f44 <xTaskResumeAll>

        traceRETURN_uxTaskGetSystemState( uxTask );

        return uxTask;
 8012266:	697b      	ldr	r3, [r7, #20]
    }
 8012268:	4618      	mov	r0, r3
 801226a:	3718      	adds	r7, #24
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	24019954 	.word	0x24019954
 8012274:	2401986c 	.word	0x2401986c
 8012278:	24019920 	.word	0x24019920
 801227c:	24019924 	.word	0x24019924
 8012280:	2401993c 	.word	0x2401993c

08012284 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b08a      	sub	sp, #40	@ 0x28
 8012288:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 801228a:	2300      	movs	r3, #0
 801228c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 801228e:	4b80      	ldr	r3, [pc, #512]	@ (8012490 <xTaskIncrementTick+0x20c>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	2b00      	cmp	r3, #0
 8012294:	f040 80f1 	bne.w	801247a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012298:	4b7e      	ldr	r3, [pc, #504]	@ (8012494 <xTaskIncrementTick+0x210>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	3301      	adds	r3, #1
 801229e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80122a0:	4a7c      	ldr	r2, [pc, #496]	@ (8012494 <xTaskIncrementTick+0x210>)
 80122a2:	6a3b      	ldr	r3, [r7, #32]
 80122a4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80122a6:	6a3b      	ldr	r3, [r7, #32]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d123      	bne.n	80122f4 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 80122ac:	4b7a      	ldr	r3, [pc, #488]	@ (8012498 <xTaskIncrementTick+0x214>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d00d      	beq.n	80122d2 <xTaskIncrementTick+0x4e>
    __asm volatile
 80122b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122ba:	b672      	cpsid	i
 80122bc:	f383 8811 	msr	BASEPRI, r3
 80122c0:	f3bf 8f6f 	isb	sy
 80122c4:	f3bf 8f4f 	dsb	sy
 80122c8:	b662      	cpsie	i
 80122ca:	607b      	str	r3, [r7, #4]
}
 80122cc:	bf00      	nop
 80122ce:	bf00      	nop
 80122d0:	e7fd      	b.n	80122ce <xTaskIncrementTick+0x4a>
 80122d2:	4b71      	ldr	r3, [pc, #452]	@ (8012498 <xTaskIncrementTick+0x214>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	61fb      	str	r3, [r7, #28]
 80122d8:	4b70      	ldr	r3, [pc, #448]	@ (801249c <xTaskIncrementTick+0x218>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4a6e      	ldr	r2, [pc, #440]	@ (8012498 <xTaskIncrementTick+0x214>)
 80122de:	6013      	str	r3, [r2, #0]
 80122e0:	4a6e      	ldr	r2, [pc, #440]	@ (801249c <xTaskIncrementTick+0x218>)
 80122e2:	69fb      	ldr	r3, [r7, #28]
 80122e4:	6013      	str	r3, [r2, #0]
 80122e6:	4b6e      	ldr	r3, [pc, #440]	@ (80124a0 <xTaskIncrementTick+0x21c>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	3301      	adds	r3, #1
 80122ec:	4a6c      	ldr	r2, [pc, #432]	@ (80124a0 <xTaskIncrementTick+0x21c>)
 80122ee:	6013      	str	r3, [r2, #0]
 80122f0:	f000 fca2 	bl	8012c38 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80122f4:	4b6b      	ldr	r3, [pc, #428]	@ (80124a4 <xTaskIncrementTick+0x220>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	6a3a      	ldr	r2, [r7, #32]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	f0c0 80a8 	bcc.w	8012450 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012300:	4b65      	ldr	r3, [pc, #404]	@ (8012498 <xTaskIncrementTick+0x214>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d104      	bne.n	8012314 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 801230a:	4b66      	ldr	r3, [pc, #408]	@ (80124a4 <xTaskIncrementTick+0x220>)
 801230c:	f04f 32ff 	mov.w	r2, #4294967295
 8012310:	601a      	str	r2, [r3, #0]
                    break;
 8012312:	e09d      	b.n	8012450 <xTaskIncrementTick+0x1cc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012314:	4b60      	ldr	r3, [pc, #384]	@ (8012498 <xTaskIncrementTick+0x214>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	68db      	ldr	r3, [r3, #12]
 801231a:	68db      	ldr	r3, [r3, #12]
 801231c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801231e:	69bb      	ldr	r3, [r7, #24]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8012324:	6a3a      	ldr	r2, [r7, #32]
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	429a      	cmp	r2, r3
 801232a:	d203      	bcs.n	8012334 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 801232c:	4a5d      	ldr	r2, [pc, #372]	@ (80124a4 <xTaskIncrementTick+0x220>)
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	6013      	str	r3, [r2, #0]
                        break;
 8012332:	e08d      	b.n	8012450 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8012334:	69bb      	ldr	r3, [r7, #24]
 8012336:	695b      	ldr	r3, [r3, #20]
 8012338:	613b      	str	r3, [r7, #16]
 801233a:	69bb      	ldr	r3, [r7, #24]
 801233c:	689b      	ldr	r3, [r3, #8]
 801233e:	69ba      	ldr	r2, [r7, #24]
 8012340:	68d2      	ldr	r2, [r2, #12]
 8012342:	609a      	str	r2, [r3, #8]
 8012344:	69bb      	ldr	r3, [r7, #24]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	69ba      	ldr	r2, [r7, #24]
 801234a:	6892      	ldr	r2, [r2, #8]
 801234c:	605a      	str	r2, [r3, #4]
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	685a      	ldr	r2, [r3, #4]
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	3304      	adds	r3, #4
 8012356:	429a      	cmp	r2, r3
 8012358:	d103      	bne.n	8012362 <xTaskIncrementTick+0xde>
 801235a:	69bb      	ldr	r3, [r7, #24]
 801235c:	68da      	ldr	r2, [r3, #12]
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	605a      	str	r2, [r3, #4]
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	2200      	movs	r2, #0
 8012366:	615a      	str	r2, [r3, #20]
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	1e5a      	subs	r2, r3, #1
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012372:	69bb      	ldr	r3, [r7, #24]
 8012374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012376:	2b00      	cmp	r3, #0
 8012378:	d01e      	beq.n	80123b8 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 801237a:	69bb      	ldr	r3, [r7, #24]
 801237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801237e:	60fb      	str	r3, [r7, #12]
 8012380:	69bb      	ldr	r3, [r7, #24]
 8012382:	69db      	ldr	r3, [r3, #28]
 8012384:	69ba      	ldr	r2, [r7, #24]
 8012386:	6a12      	ldr	r2, [r2, #32]
 8012388:	609a      	str	r2, [r3, #8]
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	6a1b      	ldr	r3, [r3, #32]
 801238e:	69ba      	ldr	r2, [r7, #24]
 8012390:	69d2      	ldr	r2, [r2, #28]
 8012392:	605a      	str	r2, [r3, #4]
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	685a      	ldr	r2, [r3, #4]
 8012398:	69bb      	ldr	r3, [r7, #24]
 801239a:	3318      	adds	r3, #24
 801239c:	429a      	cmp	r2, r3
 801239e:	d103      	bne.n	80123a8 <xTaskIncrementTick+0x124>
 80123a0:	69bb      	ldr	r3, [r7, #24]
 80123a2:	6a1a      	ldr	r2, [r3, #32]
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	605a      	str	r2, [r3, #4]
 80123a8:	69bb      	ldr	r3, [r7, #24]
 80123aa:	2200      	movs	r2, #0
 80123ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	1e5a      	subs	r2, r3, #1
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123bc:	2201      	movs	r2, #1
 80123be:	409a      	lsls	r2, r3
 80123c0:	4b39      	ldr	r3, [pc, #228]	@ (80124a8 <xTaskIncrementTick+0x224>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	4313      	orrs	r3, r2
 80123c6:	4a38      	ldr	r2, [pc, #224]	@ (80124a8 <xTaskIncrementTick+0x224>)
 80123c8:	6013      	str	r3, [r2, #0]
 80123ca:	69bb      	ldr	r3, [r7, #24]
 80123cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123ce:	4937      	ldr	r1, [pc, #220]	@ (80124ac <xTaskIncrementTick+0x228>)
 80123d0:	4613      	mov	r3, r2
 80123d2:	009b      	lsls	r3, r3, #2
 80123d4:	4413      	add	r3, r2
 80123d6:	009b      	lsls	r3, r3, #2
 80123d8:	440b      	add	r3, r1
 80123da:	3304      	adds	r3, #4
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	60bb      	str	r3, [r7, #8]
 80123e0:	69bb      	ldr	r3, [r7, #24]
 80123e2:	68ba      	ldr	r2, [r7, #8]
 80123e4:	609a      	str	r2, [r3, #8]
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	689a      	ldr	r2, [r3, #8]
 80123ea:	69bb      	ldr	r3, [r7, #24]
 80123ec:	60da      	str	r2, [r3, #12]
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	689b      	ldr	r3, [r3, #8]
 80123f2:	69ba      	ldr	r2, [r7, #24]
 80123f4:	3204      	adds	r2, #4
 80123f6:	605a      	str	r2, [r3, #4]
 80123f8:	69bb      	ldr	r3, [r7, #24]
 80123fa:	1d1a      	adds	r2, r3, #4
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	609a      	str	r2, [r3, #8]
 8012400:	69bb      	ldr	r3, [r7, #24]
 8012402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012404:	4613      	mov	r3, r2
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	4413      	add	r3, r2
 801240a:	009b      	lsls	r3, r3, #2
 801240c:	4a27      	ldr	r2, [pc, #156]	@ (80124ac <xTaskIncrementTick+0x228>)
 801240e:	441a      	add	r2, r3
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	615a      	str	r2, [r3, #20]
 8012414:	69bb      	ldr	r3, [r7, #24]
 8012416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012418:	4924      	ldr	r1, [pc, #144]	@ (80124ac <xTaskIncrementTick+0x228>)
 801241a:	4613      	mov	r3, r2
 801241c:	009b      	lsls	r3, r3, #2
 801241e:	4413      	add	r3, r2
 8012420:	009b      	lsls	r3, r3, #2
 8012422:	440b      	add	r3, r1
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	69ba      	ldr	r2, [r7, #24]
 8012428:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801242a:	1c59      	adds	r1, r3, #1
 801242c:	481f      	ldr	r0, [pc, #124]	@ (80124ac <xTaskIncrementTick+0x228>)
 801242e:	4613      	mov	r3, r2
 8012430:	009b      	lsls	r3, r3, #2
 8012432:	4413      	add	r3, r2
 8012434:	009b      	lsls	r3, r3, #2
 8012436:	4403      	add	r3, r0
 8012438:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801243a:	69bb      	ldr	r3, [r7, #24]
 801243c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801243e:	4b1c      	ldr	r3, [pc, #112]	@ (80124b0 <xTaskIncrementTick+0x22c>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012444:	429a      	cmp	r2, r3
 8012446:	f67f af5b 	bls.w	8012300 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 801244a:	2301      	movs	r3, #1
 801244c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801244e:	e757      	b.n	8012300 <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8012450:	4b17      	ldr	r3, [pc, #92]	@ (80124b0 <xTaskIncrementTick+0x22c>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012456:	4915      	ldr	r1, [pc, #84]	@ (80124ac <xTaskIncrementTick+0x228>)
 8012458:	4613      	mov	r3, r2
 801245a:	009b      	lsls	r3, r3, #2
 801245c:	4413      	add	r3, r2
 801245e:	009b      	lsls	r3, r3, #2
 8012460:	440b      	add	r3, r1
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2b01      	cmp	r3, #1
 8012466:	d901      	bls.n	801246c <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8012468:	2301      	movs	r3, #1
 801246a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 801246c:	4b11      	ldr	r3, [pc, #68]	@ (80124b4 <xTaskIncrementTick+0x230>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d007      	beq.n	8012484 <xTaskIncrementTick+0x200>
                {
                    xSwitchRequired = pdTRUE;
 8012474:	2301      	movs	r3, #1
 8012476:	627b      	str	r3, [r7, #36]	@ 0x24
 8012478:	e004      	b.n	8012484 <xTaskIncrementTick+0x200>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 801247a:	4b0f      	ldr	r3, [pc, #60]	@ (80124b8 <xTaskIncrementTick+0x234>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	3301      	adds	r3, #1
 8012480:	4a0d      	ldr	r2, [pc, #52]	@ (80124b8 <xTaskIncrementTick+0x234>)
 8012482:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8012484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012486:	4618      	mov	r0, r3
 8012488:	3728      	adds	r7, #40	@ 0x28
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}
 801248e:	bf00      	nop
 8012490:	2401997c 	.word	0x2401997c
 8012494:	24019958 	.word	0x24019958
 8012498:	24019920 	.word	0x24019920
 801249c:	24019924 	.word	0x24019924
 80124a0:	2401996c 	.word	0x2401996c
 80124a4:	24019974 	.word	0x24019974
 80124a8:	2401995c 	.word	0x2401995c
 80124ac:	2401986c 	.word	0x2401986c
 80124b0:	24019868 	.word	0x24019868
 80124b4:	24019968 	.word	0x24019968
 80124b8:	24019964 	.word	0x24019964

080124bc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80124bc:	b580      	push	{r7, lr}
 80124be:	b088      	sub	sp, #32
 80124c0:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80124c2:	4b3c      	ldr	r3, [pc, #240]	@ (80125b4 <vTaskSwitchContext+0xf8>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d003      	beq.n	80124d2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80124ca:	4b3b      	ldr	r3, [pc, #236]	@ (80125b8 <vTaskSwitchContext+0xfc>)
 80124cc:	2201      	movs	r2, #1
 80124ce:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80124d0:	e06b      	b.n	80125aa <vTaskSwitchContext+0xee>
            xYieldPendings[ 0 ] = pdFALSE;
 80124d2:	4b39      	ldr	r3, [pc, #228]	@ (80125b8 <vTaskSwitchContext+0xfc>)
 80124d4:	2200      	movs	r2, #0
 80124d6:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 80124d8:	4b38      	ldr	r3, [pc, #224]	@ (80125bc <vTaskSwitchContext+0x100>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124de:	61fb      	str	r3, [r7, #28]
 80124e0:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80124e4:	61bb      	str	r3, [r7, #24]
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	69ba      	ldr	r2, [r7, #24]
 80124ec:	429a      	cmp	r2, r3
 80124ee:	d111      	bne.n	8012514 <vTaskSwitchContext+0x58>
 80124f0:	69fb      	ldr	r3, [r7, #28]
 80124f2:	3304      	adds	r3, #4
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	69ba      	ldr	r2, [r7, #24]
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d10b      	bne.n	8012514 <vTaskSwitchContext+0x58>
 80124fc:	69fb      	ldr	r3, [r7, #28]
 80124fe:	3308      	adds	r3, #8
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	69ba      	ldr	r2, [r7, #24]
 8012504:	429a      	cmp	r2, r3
 8012506:	d105      	bne.n	8012514 <vTaskSwitchContext+0x58>
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	330c      	adds	r3, #12
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	69ba      	ldr	r2, [r7, #24]
 8012510:	429a      	cmp	r2, r3
 8012512:	d009      	beq.n	8012528 <vTaskSwitchContext+0x6c>
 8012514:	4b29      	ldr	r3, [pc, #164]	@ (80125bc <vTaskSwitchContext+0x100>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	3334      	adds	r3, #52	@ 0x34
 801251a:	617b      	str	r3, [r7, #20]
 801251c:	4b27      	ldr	r3, [pc, #156]	@ (80125bc <vTaskSwitchContext+0x100>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	6979      	ldr	r1, [r7, #20]
 8012522:	4618      	mov	r0, r3
 8012524:	f7ee fa1c 	bl	8000960 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8012528:	4b25      	ldr	r3, [pc, #148]	@ (80125c0 <vTaskSwitchContext+0x104>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	60bb      	str	r3, [r7, #8]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	fab3 f383 	clz	r3, r3
 8012534:	71fb      	strb	r3, [r7, #7]
        return ucReturn;
 8012536:	79fb      	ldrb	r3, [r7, #7]
 8012538:	f1c3 031f 	rsb	r3, r3, #31
 801253c:	613b      	str	r3, [r7, #16]
 801253e:	4921      	ldr	r1, [pc, #132]	@ (80125c4 <vTaskSwitchContext+0x108>)
 8012540:	693a      	ldr	r2, [r7, #16]
 8012542:	4613      	mov	r3, r2
 8012544:	009b      	lsls	r3, r3, #2
 8012546:	4413      	add	r3, r2
 8012548:	009b      	lsls	r3, r3, #2
 801254a:	440b      	add	r3, r1
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d10d      	bne.n	801256e <vTaskSwitchContext+0xb2>
    __asm volatile
 8012552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012556:	b672      	cpsid	i
 8012558:	f383 8811 	msr	BASEPRI, r3
 801255c:	f3bf 8f6f 	isb	sy
 8012560:	f3bf 8f4f 	dsb	sy
 8012564:	b662      	cpsie	i
 8012566:	603b      	str	r3, [r7, #0]
}
 8012568:	bf00      	nop
 801256a:	bf00      	nop
 801256c:	e7fd      	b.n	801256a <vTaskSwitchContext+0xae>
 801256e:	693a      	ldr	r2, [r7, #16]
 8012570:	4613      	mov	r3, r2
 8012572:	009b      	lsls	r3, r3, #2
 8012574:	4413      	add	r3, r2
 8012576:	009b      	lsls	r3, r3, #2
 8012578:	4a12      	ldr	r2, [pc, #72]	@ (80125c4 <vTaskSwitchContext+0x108>)
 801257a:	4413      	add	r3, r2
 801257c:	60fb      	str	r3, [r7, #12]
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	685a      	ldr	r2, [r3, #4]
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	605a      	str	r2, [r3, #4]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	685a      	ldr	r2, [r3, #4]
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	3308      	adds	r3, #8
 8012590:	429a      	cmp	r2, r3
 8012592:	d103      	bne.n	801259c <vTaskSwitchContext+0xe0>
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	68da      	ldr	r2, [r3, #12]
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	605a      	str	r2, [r3, #4]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	68db      	ldr	r3, [r3, #12]
 80125a2:	4a06      	ldr	r2, [pc, #24]	@ (80125bc <vTaskSwitchContext+0x100>)
 80125a4:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80125a6:	4b05      	ldr	r3, [pc, #20]	@ (80125bc <vTaskSwitchContext+0x100>)
 80125a8:	681b      	ldr	r3, [r3, #0]
    }
 80125aa:	bf00      	nop
 80125ac:	3720      	adds	r7, #32
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	bf00      	nop
 80125b4:	2401997c 	.word	0x2401997c
 80125b8:	24019968 	.word	0x24019968
 80125bc:	24019868 	.word	0x24019868
 80125c0:	2401995c 	.word	0x2401995c
 80125c4:	2401986c 	.word	0x2401986c

080125c8 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b084      	sub	sp, #16
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d10d      	bne.n	80125f4 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 80125d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125dc:	b672      	cpsid	i
 80125de:	f383 8811 	msr	BASEPRI, r3
 80125e2:	f3bf 8f6f 	isb	sy
 80125e6:	f3bf 8f4f 	dsb	sy
 80125ea:	b662      	cpsie	i
 80125ec:	60fb      	str	r3, [r7, #12]
}
 80125ee:	bf00      	nop
 80125f0:	bf00      	nop
 80125f2:	e7fd      	b.n	80125f0 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80125f4:	4b07      	ldr	r3, [pc, #28]	@ (8012614 <vTaskPlaceOnEventList+0x4c>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	3318      	adds	r3, #24
 80125fa:	4619      	mov	r1, r3
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f7fd ffdc 	bl	80105ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012602:	2101      	movs	r1, #1
 8012604:	6838      	ldr	r0, [r7, #0]
 8012606:	f000 ff59 	bl	80134bc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 801260a:	bf00      	nop
 801260c:	3710      	adds	r7, #16
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
 8012612:	bf00      	nop
 8012614:	24019868 	.word	0x24019868

08012618 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8012618:	b580      	push	{r7, lr}
 801261a:	b086      	sub	sp, #24
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d10d      	bne.n	8012646 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 801262a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801262e:	b672      	cpsid	i
 8012630:	f383 8811 	msr	BASEPRI, r3
 8012634:	f3bf 8f6f 	isb	sy
 8012638:	f3bf 8f4f 	dsb	sy
 801263c:	b662      	cpsie	i
 801263e:	613b      	str	r3, [r7, #16]
}
 8012640:	bf00      	nop
 8012642:	bf00      	nop
 8012644:	e7fd      	b.n	8012642 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	617b      	str	r3, [r7, #20]
 801264c:	4b15      	ldr	r3, [pc, #84]	@ (80126a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	697a      	ldr	r2, [r7, #20]
 8012652:	61da      	str	r2, [r3, #28]
 8012654:	4b13      	ldr	r3, [pc, #76]	@ (80126a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	697a      	ldr	r2, [r7, #20]
 801265a:	6892      	ldr	r2, [r2, #8]
 801265c:	621a      	str	r2, [r3, #32]
 801265e:	4b11      	ldr	r3, [pc, #68]	@ (80126a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8012660:	681a      	ldr	r2, [r3, #0]
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	689b      	ldr	r3, [r3, #8]
 8012666:	3218      	adds	r2, #24
 8012668:	605a      	str	r2, [r3, #4]
 801266a:	4b0e      	ldr	r3, [pc, #56]	@ (80126a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	f103 0218 	add.w	r2, r3, #24
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	609a      	str	r2, [r3, #8]
 8012676:	4b0b      	ldr	r3, [pc, #44]	@ (80126a4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	68fa      	ldr	r2, [r7, #12]
 801267c:	629a      	str	r2, [r3, #40]	@ 0x28
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	1c5a      	adds	r2, r3, #1
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d002      	beq.n	8012694 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 801268e:	f04f 33ff 	mov.w	r3, #4294967295
 8012692:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012694:	6879      	ldr	r1, [r7, #4]
 8012696:	68b8      	ldr	r0, [r7, #8]
 8012698:	f000 ff10 	bl	80134bc <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 801269c:	bf00      	nop
 801269e:	3718      	adds	r7, #24
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	24019868 	.word	0x24019868

080126a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80126a8:	b480      	push	{r7}
 80126aa:	b08b      	sub	sp, #44	@ 0x2c
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	68db      	ldr	r3, [r3, #12]
 80126b4:	68db      	ldr	r3, [r3, #12]
 80126b6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80126b8:	6a3b      	ldr	r3, [r7, #32]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d10d      	bne.n	80126da <xTaskRemoveFromEventList+0x32>
    __asm volatile
 80126be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126c2:	b672      	cpsid	i
 80126c4:	f383 8811 	msr	BASEPRI, r3
 80126c8:	f3bf 8f6f 	isb	sy
 80126cc:	f3bf 8f4f 	dsb	sy
 80126d0:	b662      	cpsie	i
 80126d2:	60fb      	str	r3, [r7, #12]
}
 80126d4:	bf00      	nop
 80126d6:	bf00      	nop
 80126d8:	e7fd      	b.n	80126d6 <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80126da:	6a3b      	ldr	r3, [r7, #32]
 80126dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126de:	61fb      	str	r3, [r7, #28]
 80126e0:	6a3b      	ldr	r3, [r7, #32]
 80126e2:	69db      	ldr	r3, [r3, #28]
 80126e4:	6a3a      	ldr	r2, [r7, #32]
 80126e6:	6a12      	ldr	r2, [r2, #32]
 80126e8:	609a      	str	r2, [r3, #8]
 80126ea:	6a3b      	ldr	r3, [r7, #32]
 80126ec:	6a1b      	ldr	r3, [r3, #32]
 80126ee:	6a3a      	ldr	r2, [r7, #32]
 80126f0:	69d2      	ldr	r2, [r2, #28]
 80126f2:	605a      	str	r2, [r3, #4]
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	685a      	ldr	r2, [r3, #4]
 80126f8:	6a3b      	ldr	r3, [r7, #32]
 80126fa:	3318      	adds	r3, #24
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d103      	bne.n	8012708 <xTaskRemoveFromEventList+0x60>
 8012700:	6a3b      	ldr	r3, [r7, #32]
 8012702:	6a1a      	ldr	r2, [r3, #32]
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	605a      	str	r2, [r3, #4]
 8012708:	6a3b      	ldr	r3, [r7, #32]
 801270a:	2200      	movs	r2, #0
 801270c:	629a      	str	r2, [r3, #40]	@ 0x28
 801270e:	69fb      	ldr	r3, [r7, #28]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	1e5a      	subs	r2, r3, #1
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8012718:	4b4b      	ldr	r3, [pc, #300]	@ (8012848 <xTaskRemoveFromEventList+0x1a0>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d160      	bne.n	80127e2 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8012720:	6a3b      	ldr	r3, [r7, #32]
 8012722:	695b      	ldr	r3, [r3, #20]
 8012724:	617b      	str	r3, [r7, #20]
 8012726:	6a3b      	ldr	r3, [r7, #32]
 8012728:	689b      	ldr	r3, [r3, #8]
 801272a:	6a3a      	ldr	r2, [r7, #32]
 801272c:	68d2      	ldr	r2, [r2, #12]
 801272e:	609a      	str	r2, [r3, #8]
 8012730:	6a3b      	ldr	r3, [r7, #32]
 8012732:	68db      	ldr	r3, [r3, #12]
 8012734:	6a3a      	ldr	r2, [r7, #32]
 8012736:	6892      	ldr	r2, [r2, #8]
 8012738:	605a      	str	r2, [r3, #4]
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	685a      	ldr	r2, [r3, #4]
 801273e:	6a3b      	ldr	r3, [r7, #32]
 8012740:	3304      	adds	r3, #4
 8012742:	429a      	cmp	r2, r3
 8012744:	d103      	bne.n	801274e <xTaskRemoveFromEventList+0xa6>
 8012746:	6a3b      	ldr	r3, [r7, #32]
 8012748:	68da      	ldr	r2, [r3, #12]
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	605a      	str	r2, [r3, #4]
 801274e:	6a3b      	ldr	r3, [r7, #32]
 8012750:	2200      	movs	r2, #0
 8012752:	615a      	str	r2, [r3, #20]
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	1e5a      	subs	r2, r3, #1
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 801275e:	6a3b      	ldr	r3, [r7, #32]
 8012760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012762:	2201      	movs	r2, #1
 8012764:	409a      	lsls	r2, r3
 8012766:	4b39      	ldr	r3, [pc, #228]	@ (801284c <xTaskRemoveFromEventList+0x1a4>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	4313      	orrs	r3, r2
 801276c:	4a37      	ldr	r2, [pc, #220]	@ (801284c <xTaskRemoveFromEventList+0x1a4>)
 801276e:	6013      	str	r3, [r2, #0]
 8012770:	6a3b      	ldr	r3, [r7, #32]
 8012772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012774:	4936      	ldr	r1, [pc, #216]	@ (8012850 <xTaskRemoveFromEventList+0x1a8>)
 8012776:	4613      	mov	r3, r2
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	4413      	add	r3, r2
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	440b      	add	r3, r1
 8012780:	3304      	adds	r3, #4
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	613b      	str	r3, [r7, #16]
 8012786:	6a3b      	ldr	r3, [r7, #32]
 8012788:	693a      	ldr	r2, [r7, #16]
 801278a:	609a      	str	r2, [r3, #8]
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	689a      	ldr	r2, [r3, #8]
 8012790:	6a3b      	ldr	r3, [r7, #32]
 8012792:	60da      	str	r2, [r3, #12]
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	689b      	ldr	r3, [r3, #8]
 8012798:	6a3a      	ldr	r2, [r7, #32]
 801279a:	3204      	adds	r2, #4
 801279c:	605a      	str	r2, [r3, #4]
 801279e:	6a3b      	ldr	r3, [r7, #32]
 80127a0:	1d1a      	adds	r2, r3, #4
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	609a      	str	r2, [r3, #8]
 80127a6:	6a3b      	ldr	r3, [r7, #32]
 80127a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127aa:	4613      	mov	r3, r2
 80127ac:	009b      	lsls	r3, r3, #2
 80127ae:	4413      	add	r3, r2
 80127b0:	009b      	lsls	r3, r3, #2
 80127b2:	4a27      	ldr	r2, [pc, #156]	@ (8012850 <xTaskRemoveFromEventList+0x1a8>)
 80127b4:	441a      	add	r2, r3
 80127b6:	6a3b      	ldr	r3, [r7, #32]
 80127b8:	615a      	str	r2, [r3, #20]
 80127ba:	6a3b      	ldr	r3, [r7, #32]
 80127bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127be:	4924      	ldr	r1, [pc, #144]	@ (8012850 <xTaskRemoveFromEventList+0x1a8>)
 80127c0:	4613      	mov	r3, r2
 80127c2:	009b      	lsls	r3, r3, #2
 80127c4:	4413      	add	r3, r2
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	440b      	add	r3, r1
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	6a3a      	ldr	r2, [r7, #32]
 80127ce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80127d0:	1c59      	adds	r1, r3, #1
 80127d2:	481f      	ldr	r0, [pc, #124]	@ (8012850 <xTaskRemoveFromEventList+0x1a8>)
 80127d4:	4613      	mov	r3, r2
 80127d6:	009b      	lsls	r3, r3, #2
 80127d8:	4413      	add	r3, r2
 80127da:	009b      	lsls	r3, r3, #2
 80127dc:	4403      	add	r3, r0
 80127de:	6019      	str	r1, [r3, #0]
 80127e0:	e01b      	b.n	801281a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80127e2:	4b1c      	ldr	r3, [pc, #112]	@ (8012854 <xTaskRemoveFromEventList+0x1ac>)
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	61bb      	str	r3, [r7, #24]
 80127e8:	6a3b      	ldr	r3, [r7, #32]
 80127ea:	69ba      	ldr	r2, [r7, #24]
 80127ec:	61da      	str	r2, [r3, #28]
 80127ee:	69bb      	ldr	r3, [r7, #24]
 80127f0:	689a      	ldr	r2, [r3, #8]
 80127f2:	6a3b      	ldr	r3, [r7, #32]
 80127f4:	621a      	str	r2, [r3, #32]
 80127f6:	69bb      	ldr	r3, [r7, #24]
 80127f8:	689b      	ldr	r3, [r3, #8]
 80127fa:	6a3a      	ldr	r2, [r7, #32]
 80127fc:	3218      	adds	r2, #24
 80127fe:	605a      	str	r2, [r3, #4]
 8012800:	6a3b      	ldr	r3, [r7, #32]
 8012802:	f103 0218 	add.w	r2, r3, #24
 8012806:	69bb      	ldr	r3, [r7, #24]
 8012808:	609a      	str	r2, [r3, #8]
 801280a:	6a3b      	ldr	r3, [r7, #32]
 801280c:	4a11      	ldr	r2, [pc, #68]	@ (8012854 <xTaskRemoveFromEventList+0x1ac>)
 801280e:	629a      	str	r2, [r3, #40]	@ 0x28
 8012810:	4b10      	ldr	r3, [pc, #64]	@ (8012854 <xTaskRemoveFromEventList+0x1ac>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	3301      	adds	r3, #1
 8012816:	4a0f      	ldr	r2, [pc, #60]	@ (8012854 <xTaskRemoveFromEventList+0x1ac>)
 8012818:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801281a:	6a3b      	ldr	r3, [r7, #32]
 801281c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801281e:	4b0e      	ldr	r3, [pc, #56]	@ (8012858 <xTaskRemoveFromEventList+0x1b0>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012824:	429a      	cmp	r2, r3
 8012826:	d905      	bls.n	8012834 <xTaskRemoveFromEventList+0x18c>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8012828:	2301      	movs	r3, #1
 801282a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 801282c:	4b0b      	ldr	r3, [pc, #44]	@ (801285c <xTaskRemoveFromEventList+0x1b4>)
 801282e:	2201      	movs	r2, #1
 8012830:	601a      	str	r2, [r3, #0]
 8012832:	e001      	b.n	8012838 <xTaskRemoveFromEventList+0x190>
        }
        else
        {
            xReturn = pdFALSE;
 8012834:	2300      	movs	r3, #0
 8012836:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8012838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801283a:	4618      	mov	r0, r3
 801283c:	372c      	adds	r7, #44	@ 0x2c
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr
 8012846:	bf00      	nop
 8012848:	2401997c 	.word	0x2401997c
 801284c:	2401995c 	.word	0x2401995c
 8012850:	2401986c 	.word	0x2401986c
 8012854:	24019928 	.word	0x24019928
 8012858:	24019868 	.word	0x24019868
 801285c:	24019968 	.word	0x24019968

08012860 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012860:	b480      	push	{r7}
 8012862:	b083      	sub	sp, #12
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012868:	4b06      	ldr	r3, [pc, #24]	@ (8012884 <vTaskInternalSetTimeOutState+0x24>)
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8012870:	4b05      	ldr	r3, [pc, #20]	@ (8012888 <vTaskInternalSetTimeOutState+0x28>)
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8012878:	bf00      	nop
 801287a:	370c      	adds	r7, #12
 801287c:	46bd      	mov	sp, r7
 801287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012882:	4770      	bx	lr
 8012884:	2401996c 	.word	0x2401996c
 8012888:	24019958 	.word	0x24019958

0801288c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b088      	sub	sp, #32
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d10d      	bne.n	80128b8 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 801289c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128a0:	b672      	cpsid	i
 80128a2:	f383 8811 	msr	BASEPRI, r3
 80128a6:	f3bf 8f6f 	isb	sy
 80128aa:	f3bf 8f4f 	dsb	sy
 80128ae:	b662      	cpsie	i
 80128b0:	613b      	str	r3, [r7, #16]
}
 80128b2:	bf00      	nop
 80128b4:	bf00      	nop
 80128b6:	e7fd      	b.n	80128b4 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d10d      	bne.n	80128da <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 80128be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128c2:	b672      	cpsid	i
 80128c4:	f383 8811 	msr	BASEPRI, r3
 80128c8:	f3bf 8f6f 	isb	sy
 80128cc:	f3bf 8f4f 	dsb	sy
 80128d0:	b662      	cpsie	i
 80128d2:	60fb      	str	r3, [r7, #12]
}
 80128d4:	bf00      	nop
 80128d6:	bf00      	nop
 80128d8:	e7fd      	b.n	80128d6 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 80128da:	f001 fb43 	bl	8013f64 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80128de:	4b1b      	ldr	r3, [pc, #108]	@ (801294c <xTaskCheckForTimeOut+0xc0>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	69ba      	ldr	r2, [r7, #24]
 80128ea:	1ad3      	subs	r3, r2, r3
 80128ec:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681a      	ldr	r2, [r3, #0]
 80128f2:	4b17      	ldr	r3, [pc, #92]	@ (8012950 <xTaskCheckForTimeOut+0xc4>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	429a      	cmp	r2, r3
 80128f8:	d00a      	beq.n	8012910 <xTaskCheckForTimeOut+0x84>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	685b      	ldr	r3, [r3, #4]
 80128fe:	69ba      	ldr	r2, [r7, #24]
 8012900:	429a      	cmp	r2, r3
 8012902:	d305      	bcc.n	8012910 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8012904:	2301      	movs	r3, #1
 8012906:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	2200      	movs	r2, #0
 801290c:	601a      	str	r2, [r3, #0]
 801290e:	e015      	b.n	801293c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	697a      	ldr	r2, [r7, #20]
 8012916:	429a      	cmp	r2, r3
 8012918:	d20b      	bcs.n	8012932 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	1ad2      	subs	r2, r2, r3
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7ff ff9a 	bl	8012860 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 801292c:	2300      	movs	r3, #0
 801292e:	61fb      	str	r3, [r7, #28]
 8012930:	e004      	b.n	801293c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	2200      	movs	r2, #0
 8012936:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8012938:	2301      	movs	r3, #1
 801293a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 801293c:	f001 fb48 	bl	8013fd0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8012940:	69fb      	ldr	r3, [r7, #28]
}
 8012942:	4618      	mov	r0, r3
 8012944:	3720      	adds	r7, #32
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}
 801294a:	bf00      	nop
 801294c:	24019958 	.word	0x24019958
 8012950:	2401996c 	.word	0x2401996c

08012954 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012954:	b480      	push	{r7}
 8012956:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8012958:	4b03      	ldr	r3, [pc, #12]	@ (8012968 <vTaskMissedYield+0x14>)
 801295a:	2201      	movs	r2, #1
 801295c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 801295e:	bf00      	nop
 8012960:	46bd      	mov	sp, r7
 8012962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012966:	4770      	bx	lr
 8012968:	24019968 	.word	0x24019968

0801296c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8012974:	f000 f84c 	bl	8012a10 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8012978:	4b06      	ldr	r3, [pc, #24]	@ (8012994 <prvIdleTask+0x28>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	2b01      	cmp	r3, #1
 801297e:	d9f9      	bls.n	8012974 <prvIdleTask+0x8>
            {
                taskYIELD();
 8012980:	4b05      	ldr	r3, [pc, #20]	@ (8012998 <prvIdleTask+0x2c>)
 8012982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012986:	601a      	str	r2, [r3, #0]
 8012988:	f3bf 8f4f 	dsb	sy
 801298c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8012990:	e7f0      	b.n	8012974 <prvIdleTask+0x8>
 8012992:	bf00      	nop
 8012994:	2401986c 	.word	0x2401986c
 8012998:	e000ed04 	.word	0xe000ed04

0801299c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b082      	sub	sp, #8
 80129a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80129a2:	2300      	movs	r3, #0
 80129a4:	607b      	str	r3, [r7, #4]
 80129a6:	e00c      	b.n	80129c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80129a8:	687a      	ldr	r2, [r7, #4]
 80129aa:	4613      	mov	r3, r2
 80129ac:	009b      	lsls	r3, r3, #2
 80129ae:	4413      	add	r3, r2
 80129b0:	009b      	lsls	r3, r3, #2
 80129b2:	4a10      	ldr	r2, [pc, #64]	@ (80129f4 <prvInitialiseTaskLists+0x58>)
 80129b4:	4413      	add	r3, r2
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7fd fdae 	bl	8010518 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	3301      	adds	r3, #1
 80129c0:	607b      	str	r3, [r7, #4]
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2b06      	cmp	r3, #6
 80129c6:	d9ef      	bls.n	80129a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80129c8:	480b      	ldr	r0, [pc, #44]	@ (80129f8 <prvInitialiseTaskLists+0x5c>)
 80129ca:	f7fd fda5 	bl	8010518 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80129ce:	480b      	ldr	r0, [pc, #44]	@ (80129fc <prvInitialiseTaskLists+0x60>)
 80129d0:	f7fd fda2 	bl	8010518 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80129d4:	480a      	ldr	r0, [pc, #40]	@ (8012a00 <prvInitialiseTaskLists+0x64>)
 80129d6:	f7fd fd9f 	bl	8010518 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80129da:	480a      	ldr	r0, [pc, #40]	@ (8012a04 <prvInitialiseTaskLists+0x68>)
 80129dc:	f7fd fd9c 	bl	8010518 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80129e0:	4b09      	ldr	r3, [pc, #36]	@ (8012a08 <prvInitialiseTaskLists+0x6c>)
 80129e2:	4a05      	ldr	r2, [pc, #20]	@ (80129f8 <prvInitialiseTaskLists+0x5c>)
 80129e4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80129e6:	4b09      	ldr	r3, [pc, #36]	@ (8012a0c <prvInitialiseTaskLists+0x70>)
 80129e8:	4a04      	ldr	r2, [pc, #16]	@ (80129fc <prvInitialiseTaskLists+0x60>)
 80129ea:	601a      	str	r2, [r3, #0]
}
 80129ec:	bf00      	nop
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	2401986c 	.word	0x2401986c
 80129f8:	240198f8 	.word	0x240198f8
 80129fc:	2401990c 	.word	0x2401990c
 8012a00:	24019928 	.word	0x24019928
 8012a04:	2401993c 	.word	0x2401993c
 8012a08:	24019920 	.word	0x24019920
 8012a0c:	24019924 	.word	0x24019924

08012a10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012a16:	e019      	b.n	8012a4c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8012a18:	f001 faa4 	bl	8013f64 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012a1c:	4b10      	ldr	r3, [pc, #64]	@ (8012a60 <prvCheckTasksWaitingTermination+0x50>)
 8012a1e:	68db      	ldr	r3, [r3, #12]
 8012a20:	68db      	ldr	r3, [r3, #12]
 8012a22:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	3304      	adds	r3, #4
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7fd fdff 	bl	801062c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8012a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8012a64 <prvCheckTasksWaitingTermination+0x54>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	3b01      	subs	r3, #1
 8012a34:	4a0b      	ldr	r2, [pc, #44]	@ (8012a64 <prvCheckTasksWaitingTermination+0x54>)
 8012a36:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8012a38:	4b0b      	ldr	r3, [pc, #44]	@ (8012a68 <prvCheckTasksWaitingTermination+0x58>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	3b01      	subs	r3, #1
 8012a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8012a68 <prvCheckTasksWaitingTermination+0x58>)
 8012a40:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8012a42:	f001 fac5 	bl	8013fd0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f000 f8c4 	bl	8012bd4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012a4c:	4b06      	ldr	r3, [pc, #24]	@ (8012a68 <prvCheckTasksWaitingTermination+0x58>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d1e1      	bne.n	8012a18 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8012a54:	bf00      	nop
 8012a56:	bf00      	nop
 8012a58:	3708      	adds	r7, #8
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	2401993c 	.word	0x2401993c
 8012a64:	24019954 	.word	0x24019954
 8012a68:	24019950 	.word	0x24019950

08012a6c <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b086      	sub	sp, #24
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	60f8      	str	r0, [r7, #12]
 8012a74:	60b9      	str	r1, [r7, #8]
 8012a76:	607a      	str	r2, [r7, #4]
 8012a78:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        traceENTER_vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d102      	bne.n	8012a86 <vTaskGetInfo+0x1a>
 8012a80:	4b2a      	ldr	r3, [pc, #168]	@ (8012b2c <vTaskGetInfo+0xc0>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	e000      	b.n	8012a88 <vTaskGetInfo+0x1c>
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = pxTCB;
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	697a      	ldr	r2, [r7, #20]
 8012a8e:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = ( StackType_t * ) pxTCB->pxTopOfStack;
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	609a      	str	r2, [r3, #8]
        }
        #endif

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	615a      	str	r2, [r3, #20]
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
        }
        #else
        {
            pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	2200      	movs	r2, #0
 8012abe:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 8012ac0:	78fb      	ldrb	r3, [r7, #3]
 8012ac2:	2b05      	cmp	r3, #5
 8012ac4:	d018      	beq.n	8012af8 <vTaskGetInfo+0x8c>
        {
            if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8012ac6:	4b19      	ldr	r3, [pc, #100]	@ (8012b2c <vTaskGetInfo+0xc0>)
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	697a      	ldr	r2, [r7, #20]
 8012acc:	429a      	cmp	r2, r3
 8012ace:	d103      	bne.n	8012ad8 <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	731a      	strb	r2, [r3, #12]
 8012ad6:	e016      	b.n	8012b06 <vTaskGetInfo+0x9a>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	78fa      	ldrb	r2, [r7, #3]
 8012adc:	731a      	strb	r2, [r3, #12]
                #endif /* INCLUDE_vTaskSuspend */

                /* Tasks can be in pending ready list and other state list at the
                 * same time. These tasks are in ready state no matter what state
                 * list the task is in. */
                taskENTER_CRITICAL();
 8012ade:	f001 fa41 	bl	8013f64 <vPortEnterCritical>
                {
                    if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ae6:	4a12      	ldr	r2, [pc, #72]	@ (8012b30 <vTaskGetInfo+0xc4>)
 8012ae8:	4293      	cmp	r3, r2
 8012aea:	d102      	bne.n	8012af2 <vTaskGetInfo+0x86>
                    {
                        pxTaskStatus->eCurrentState = eReady;
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	2201      	movs	r2, #1
 8012af0:	731a      	strb	r2, [r3, #12]
                    }
                }
                taskEXIT_CRITICAL();
 8012af2:	f001 fa6d 	bl	8013fd0 <vPortExitCritical>
 8012af6:	e006      	b.n	8012b06 <vTaskGetInfo+0x9a>
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8012af8:	6978      	ldr	r0, [r7, #20]
 8012afa:	f7ff f903 	bl	8011d04 <eTaskGetState>
 8012afe:	4603      	mov	r3, r0
 8012b00:	461a      	mov	r2, r3
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d008      	beq.n	8012b1e <vTaskGetInfo+0xb2>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b10:	4618      	mov	r0, r3
 8012b12:	f000 f844 	bl	8012b9e <prvTaskCheckFreeStackSpace>
 8012b16:	4602      	mov	r2, r0
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	621a      	str	r2, [r3, #32]
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }

        traceRETURN_vTaskGetInfo();
    }
 8012b1c:	e002      	b.n	8012b24 <vTaskGetInfo+0xb8>
            pxTaskStatus->usStackHighWaterMark = 0;
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	2200      	movs	r2, #0
 8012b22:	621a      	str	r2, [r3, #32]
    }
 8012b24:	bf00      	nop
 8012b26:	3718      	adds	r7, #24
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	24019868 	.word	0x24019868
 8012b30:	24019928 	.word	0x24019928

08012b34 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b088      	sub	sp, #32
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	4613      	mov	r3, r2
 8012b40:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 8012b42:	2300      	movs	r3, #0
 8012b44:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEndMarker = listGET_END_MARKER( pxList );
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	3308      	adds	r3, #8
 8012b4a:	617b      	str	r3, [r7, #20]
        ListItem_t * pxIterator;
        TCB_t * pxTCB = NULL;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	613b      	str	r3, [r7, #16]

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d01d      	beq.n	8012b94 <prvListTasksWithinSingleList+0x60>
        {
            /* Populate an TaskStatus_t structure within the
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	68db      	ldr	r3, [r3, #12]
 8012b5c:	61bb      	str	r3, [r7, #24]
 8012b5e:	e015      	b.n	8012b8c <prvListTasksWithinSingleList+0x58>
            {
                /* MISRA Ref 11.5.3 [Void pointer assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxTCB = listGET_LIST_ITEM_OWNER( pxIterator );
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	68db      	ldr	r3, [r3, #12]
 8012b64:	613b      	str	r3, [r7, #16]

                vTaskGetInfo( ( TaskHandle_t ) pxTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8012b66:	69fa      	ldr	r2, [r7, #28]
 8012b68:	4613      	mov	r3, r2
 8012b6a:	00db      	lsls	r3, r3, #3
 8012b6c:	4413      	add	r3, r2
 8012b6e:	009b      	lsls	r3, r3, #2
 8012b70:	461a      	mov	r2, r3
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	1899      	adds	r1, r3, r2
 8012b76:	79fb      	ldrb	r3, [r7, #7]
 8012b78:	2201      	movs	r2, #1
 8012b7a:	6938      	ldr	r0, [r7, #16]
 8012b7c:	f7ff ff76 	bl	8012a6c <vTaskGetInfo>
                uxTask++;
 8012b80:	69fb      	ldr	r3, [r7, #28]
 8012b82:	3301      	adds	r3, #1
 8012b84:	61fb      	str	r3, [r7, #28]
            for( pxIterator = listGET_HEAD_ENTRY( pxList ); pxIterator != pxEndMarker; pxIterator = listGET_NEXT( pxIterator ) )
 8012b86:	69bb      	ldr	r3, [r7, #24]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	61bb      	str	r3, [r7, #24]
 8012b8c:	69ba      	ldr	r2, [r7, #24]
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d1e5      	bne.n	8012b60 <prvListTasksWithinSingleList+0x2c>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
 8012b94:	69fb      	ldr	r3, [r7, #28]
    }
 8012b96:	4618      	mov	r0, r3
 8012b98:	3720      	adds	r7, #32
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}

08012b9e <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8012b9e:	b480      	push	{r7}
 8012ba0:	b085      	sub	sp, #20
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012baa:	e005      	b.n	8012bb8 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	3301      	adds	r3, #1
 8012bb0:	607b      	str	r3, [r7, #4]
            uxCount++;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	3301      	adds	r3, #1
 8012bb6:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	2ba5      	cmp	r3, #165	@ 0xa5
 8012bbe:	d0f5      	beq.n	8012bac <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	089b      	lsrs	r3, r3, #2
 8012bc4:	60fb      	str	r3, [r7, #12]

        return uxCount;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
    }
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3714      	adds	r7, #20
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr

08012bd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d108      	bne.n	8012bf8 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012bea:	4618      	mov	r0, r3
 8012bec:	f001 fc32 	bl	8014454 <vPortFree>
                vPortFree( pxTCB );
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f001 fc2f 	bl	8014454 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8012bf6:	e01b      	b.n	8012c30 <prvDeleteTCB+0x5c>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8012bfe:	2b01      	cmp	r3, #1
 8012c00:	d103      	bne.n	8012c0a <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f001 fc26 	bl	8014454 <vPortFree>
    }
 8012c08:	e012      	b.n	8012c30 <prvDeleteTCB+0x5c>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8012c10:	2b02      	cmp	r3, #2
 8012c12:	d00d      	beq.n	8012c30 <prvDeleteTCB+0x5c>
    __asm volatile
 8012c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c18:	b672      	cpsid	i
 8012c1a:	f383 8811 	msr	BASEPRI, r3
 8012c1e:	f3bf 8f6f 	isb	sy
 8012c22:	f3bf 8f4f 	dsb	sy
 8012c26:	b662      	cpsie	i
 8012c28:	60fb      	str	r3, [r7, #12]
}
 8012c2a:	bf00      	nop
 8012c2c:	bf00      	nop
 8012c2e:	e7fd      	b.n	8012c2c <prvDeleteTCB+0x58>
    }
 8012c30:	bf00      	nop
 8012c32:	3710      	adds	r7, #16
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012c38:	b480      	push	{r7}
 8012c3a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8012c68 <prvResetNextTaskUnblockTime+0x30>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d104      	bne.n	8012c50 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8012c46:	4b09      	ldr	r3, [pc, #36]	@ (8012c6c <prvResetNextTaskUnblockTime+0x34>)
 8012c48:	f04f 32ff 	mov.w	r2, #4294967295
 8012c4c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8012c4e:	e005      	b.n	8012c5c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012c50:	4b05      	ldr	r3, [pc, #20]	@ (8012c68 <prvResetNextTaskUnblockTime+0x30>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	68db      	ldr	r3, [r3, #12]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	4a04      	ldr	r2, [pc, #16]	@ (8012c6c <prvResetNextTaskUnblockTime+0x34>)
 8012c5a:	6013      	str	r3, [r2, #0]
}
 8012c5c:	bf00      	nop
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c64:	4770      	bx	lr
 8012c66:	bf00      	nop
 8012c68:	24019920 	.word	0x24019920
 8012c6c:	24019974 	.word	0x24019974

08012c70 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8012c76:	4b05      	ldr	r3, [pc, #20]	@ (8012c8c <xTaskGetCurrentTaskHandle+0x1c>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 8012c7c:	687b      	ldr	r3, [r7, #4]
        }
 8012c7e:	4618      	mov	r0, r3
 8012c80:	370c      	adds	r7, #12
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	24019868 	.word	0x24019868

08012c90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8012c90:	b480      	push	{r7}
 8012c92:	b083      	sub	sp, #12
 8012c94:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8012c96:	4b0b      	ldr	r3, [pc, #44]	@ (8012cc4 <xTaskGetSchedulerState+0x34>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d102      	bne.n	8012ca4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	607b      	str	r3, [r7, #4]
 8012ca2:	e008      	b.n	8012cb6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8012ca4:	4b08      	ldr	r3, [pc, #32]	@ (8012cc8 <xTaskGetSchedulerState+0x38>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d102      	bne.n	8012cb2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8012cac:	2302      	movs	r3, #2
 8012cae:	607b      	str	r3, [r7, #4]
 8012cb0:	e001      	b.n	8012cb6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8012cb6:	687b      	ldr	r3, [r7, #4]
    }
 8012cb8:	4618      	mov	r0, r3
 8012cba:	370c      	adds	r7, #12
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr
 8012cc4:	24019960 	.word	0x24019960
 8012cc8:	2401997c 	.word	0x2401997c

08012ccc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b086      	sub	sp, #24
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	f000 8089 	beq.w	8012df6 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012ce4:	693b      	ldr	r3, [r7, #16]
 8012ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ce8:	4b45      	ldr	r3, [pc, #276]	@ (8012e00 <xTaskPriorityInherit+0x134>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d278      	bcs.n	8012de4 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	699b      	ldr	r3, [r3, #24]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	db06      	blt.n	8012d08 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8012cfa:	4b41      	ldr	r3, [pc, #260]	@ (8012e00 <xTaskPriorityInherit+0x134>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d00:	f1c3 0207 	rsb	r2, r3, #7
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	6959      	ldr	r1, [r3, #20]
 8012d0c:	693b      	ldr	r3, [r7, #16]
 8012d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d10:	4613      	mov	r3, r2
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	4413      	add	r3, r2
 8012d16:	009b      	lsls	r3, r3, #2
 8012d18:	4a3a      	ldr	r2, [pc, #232]	@ (8012e04 <xTaskPriorityInherit+0x138>)
 8012d1a:	4413      	add	r3, r2
 8012d1c:	4299      	cmp	r1, r3
 8012d1e:	d159      	bne.n	8012dd4 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	3304      	adds	r3, #4
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7fd fc81 	bl	801062c <uxListRemove>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d10a      	bne.n	8012d46 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d34:	2201      	movs	r2, #1
 8012d36:	fa02 f303 	lsl.w	r3, r2, r3
 8012d3a:	43da      	mvns	r2, r3
 8012d3c:	4b32      	ldr	r3, [pc, #200]	@ (8012e08 <xTaskPriorityInherit+0x13c>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	4013      	ands	r3, r2
 8012d42:	4a31      	ldr	r2, [pc, #196]	@ (8012e08 <xTaskPriorityInherit+0x13c>)
 8012d44:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012d46:	4b2e      	ldr	r3, [pc, #184]	@ (8012e00 <xTaskPriorityInherit+0x134>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d4c:	693b      	ldr	r3, [r7, #16]
 8012d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8012d50:	693b      	ldr	r3, [r7, #16]
 8012d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d54:	2201      	movs	r2, #1
 8012d56:	409a      	lsls	r2, r3
 8012d58:	4b2b      	ldr	r3, [pc, #172]	@ (8012e08 <xTaskPriorityInherit+0x13c>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	4313      	orrs	r3, r2
 8012d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8012e08 <xTaskPriorityInherit+0x13c>)
 8012d60:	6013      	str	r3, [r2, #0]
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d66:	4927      	ldr	r1, [pc, #156]	@ (8012e04 <xTaskPriorityInherit+0x138>)
 8012d68:	4613      	mov	r3, r2
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	4413      	add	r3, r2
 8012d6e:	009b      	lsls	r3, r3, #2
 8012d70:	440b      	add	r3, r1
 8012d72:	3304      	adds	r3, #4
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	60fb      	str	r3, [r7, #12]
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	68fa      	ldr	r2, [r7, #12]
 8012d7c:	609a      	str	r2, [r3, #8]
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	689a      	ldr	r2, [r3, #8]
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	60da      	str	r2, [r3, #12]
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	689b      	ldr	r3, [r3, #8]
 8012d8a:	693a      	ldr	r2, [r7, #16]
 8012d8c:	3204      	adds	r2, #4
 8012d8e:	605a      	str	r2, [r3, #4]
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	1d1a      	adds	r2, r3, #4
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	609a      	str	r2, [r3, #8]
 8012d98:	693b      	ldr	r3, [r7, #16]
 8012d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	4413      	add	r3, r2
 8012da2:	009b      	lsls	r3, r3, #2
 8012da4:	4a17      	ldr	r2, [pc, #92]	@ (8012e04 <xTaskPriorityInherit+0x138>)
 8012da6:	441a      	add	r2, r3
 8012da8:	693b      	ldr	r3, [r7, #16]
 8012daa:	615a      	str	r2, [r3, #20]
 8012dac:	693b      	ldr	r3, [r7, #16]
 8012dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012db0:	4914      	ldr	r1, [pc, #80]	@ (8012e04 <xTaskPriorityInherit+0x138>)
 8012db2:	4613      	mov	r3, r2
 8012db4:	009b      	lsls	r3, r3, #2
 8012db6:	4413      	add	r3, r2
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	440b      	add	r3, r1
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	693a      	ldr	r2, [r7, #16]
 8012dc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012dc2:	1c59      	adds	r1, r3, #1
 8012dc4:	480f      	ldr	r0, [pc, #60]	@ (8012e04 <xTaskPriorityInherit+0x138>)
 8012dc6:	4613      	mov	r3, r2
 8012dc8:	009b      	lsls	r3, r3, #2
 8012dca:	4413      	add	r3, r2
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	4403      	add	r3, r0
 8012dd0:	6019      	str	r1, [r3, #0]
 8012dd2:	e004      	b.n	8012dde <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8012e00 <xTaskPriorityInherit+0x134>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8012dde:	2301      	movs	r3, #1
 8012de0:	617b      	str	r3, [r7, #20]
 8012de2:	e008      	b.n	8012df6 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012de8:	4b05      	ldr	r3, [pc, #20]	@ (8012e00 <xTaskPriorityInherit+0x134>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d201      	bcs.n	8012df6 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8012df2:	2301      	movs	r3, #1
 8012df4:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8012df6:	697b      	ldr	r3, [r7, #20]
    }
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3718      	adds	r7, #24
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}
 8012e00:	24019868 	.word	0x24019868
 8012e04:	2401986c 	.word	0x2401986c
 8012e08:	2401995c 	.word	0x2401995c

08012e0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b088      	sub	sp, #32
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	f000 8094 	beq.w	8012f4c <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8012e24:	4b4c      	ldr	r3, [pc, #304]	@ (8012f58 <xTaskPriorityDisinherit+0x14c>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	69ba      	ldr	r2, [r7, #24]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d00d      	beq.n	8012e4a <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 8012e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e32:	b672      	cpsid	i
 8012e34:	f383 8811 	msr	BASEPRI, r3
 8012e38:	f3bf 8f6f 	isb	sy
 8012e3c:	f3bf 8f4f 	dsb	sy
 8012e40:	b662      	cpsie	i
 8012e42:	613b      	str	r3, [r7, #16]
}
 8012e44:	bf00      	nop
 8012e46:	bf00      	nop
 8012e48:	e7fd      	b.n	8012e46 <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d10d      	bne.n	8012e6e <xTaskPriorityDisinherit+0x62>
    __asm volatile
 8012e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e56:	b672      	cpsid	i
 8012e58:	f383 8811 	msr	BASEPRI, r3
 8012e5c:	f3bf 8f6f 	isb	sy
 8012e60:	f3bf 8f4f 	dsb	sy
 8012e64:	b662      	cpsie	i
 8012e66:	60fb      	str	r3, [r7, #12]
}
 8012e68:	bf00      	nop
 8012e6a:	bf00      	nop
 8012e6c:	e7fd      	b.n	8012e6a <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8012e6e:	69bb      	ldr	r3, [r7, #24]
 8012e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e72:	1e5a      	subs	r2, r3, #1
 8012e74:	69bb      	ldr	r3, [r7, #24]
 8012e76:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012e78:	69bb      	ldr	r3, [r7, #24]
 8012e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e7c:	69bb      	ldr	r3, [r7, #24]
 8012e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d063      	beq.n	8012f4c <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012e84:	69bb      	ldr	r3, [r7, #24]
 8012e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d15f      	bne.n	8012f4c <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e8c:	69bb      	ldr	r3, [r7, #24]
 8012e8e:	3304      	adds	r3, #4
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7fd fbcb 	bl	801062c <uxListRemove>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d10a      	bne.n	8012eb2 <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012e9c:	69bb      	ldr	r3, [r7, #24]
 8012e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8012ea6:	43da      	mvns	r2, r3
 8012ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8012f5c <xTaskPriorityDisinherit+0x150>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	4013      	ands	r3, r2
 8012eae:	4a2b      	ldr	r2, [pc, #172]	@ (8012f5c <xTaskPriorityDisinherit+0x150>)
 8012eb0:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012eb6:	69bb      	ldr	r3, [r7, #24]
 8012eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8012eba:	69bb      	ldr	r3, [r7, #24]
 8012ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ebe:	f1c3 0207 	rsb	r2, r3, #7
 8012ec2:	69bb      	ldr	r3, [r7, #24]
 8012ec4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8012ec6:	69bb      	ldr	r3, [r7, #24]
 8012ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012eca:	2201      	movs	r2, #1
 8012ecc:	409a      	lsls	r2, r3
 8012ece:	4b23      	ldr	r3, [pc, #140]	@ (8012f5c <xTaskPriorityDisinherit+0x150>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	4313      	orrs	r3, r2
 8012ed4:	4a21      	ldr	r2, [pc, #132]	@ (8012f5c <xTaskPriorityDisinherit+0x150>)
 8012ed6:	6013      	str	r3, [r2, #0]
 8012ed8:	69bb      	ldr	r3, [r7, #24]
 8012eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012edc:	4920      	ldr	r1, [pc, #128]	@ (8012f60 <xTaskPriorityDisinherit+0x154>)
 8012ede:	4613      	mov	r3, r2
 8012ee0:	009b      	lsls	r3, r3, #2
 8012ee2:	4413      	add	r3, r2
 8012ee4:	009b      	lsls	r3, r3, #2
 8012ee6:	440b      	add	r3, r1
 8012ee8:	3304      	adds	r3, #4
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	617b      	str	r3, [r7, #20]
 8012eee:	69bb      	ldr	r3, [r7, #24]
 8012ef0:	697a      	ldr	r2, [r7, #20]
 8012ef2:	609a      	str	r2, [r3, #8]
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	689a      	ldr	r2, [r3, #8]
 8012ef8:	69bb      	ldr	r3, [r7, #24]
 8012efa:	60da      	str	r2, [r3, #12]
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	689b      	ldr	r3, [r3, #8]
 8012f00:	69ba      	ldr	r2, [r7, #24]
 8012f02:	3204      	adds	r2, #4
 8012f04:	605a      	str	r2, [r3, #4]
 8012f06:	69bb      	ldr	r3, [r7, #24]
 8012f08:	1d1a      	adds	r2, r3, #4
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	609a      	str	r2, [r3, #8]
 8012f0e:	69bb      	ldr	r3, [r7, #24]
 8012f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f12:	4613      	mov	r3, r2
 8012f14:	009b      	lsls	r3, r3, #2
 8012f16:	4413      	add	r3, r2
 8012f18:	009b      	lsls	r3, r3, #2
 8012f1a:	4a11      	ldr	r2, [pc, #68]	@ (8012f60 <xTaskPriorityDisinherit+0x154>)
 8012f1c:	441a      	add	r2, r3
 8012f1e:	69bb      	ldr	r3, [r7, #24]
 8012f20:	615a      	str	r2, [r3, #20]
 8012f22:	69bb      	ldr	r3, [r7, #24]
 8012f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f26:	490e      	ldr	r1, [pc, #56]	@ (8012f60 <xTaskPriorityDisinherit+0x154>)
 8012f28:	4613      	mov	r3, r2
 8012f2a:	009b      	lsls	r3, r3, #2
 8012f2c:	4413      	add	r3, r2
 8012f2e:	009b      	lsls	r3, r3, #2
 8012f30:	440b      	add	r3, r1
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	69ba      	ldr	r2, [r7, #24]
 8012f36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8012f38:	1c59      	adds	r1, r3, #1
 8012f3a:	4809      	ldr	r0, [pc, #36]	@ (8012f60 <xTaskPriorityDisinherit+0x154>)
 8012f3c:	4613      	mov	r3, r2
 8012f3e:	009b      	lsls	r3, r3, #2
 8012f40:	4413      	add	r3, r2
 8012f42:	009b      	lsls	r3, r3, #2
 8012f44:	4403      	add	r3, r0
 8012f46:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8012f4c:	69fb      	ldr	r3, [r7, #28]
    }
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3720      	adds	r7, #32
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	bf00      	nop
 8012f58:	24019868 	.word	0x24019868
 8012f5c:	2401995c 	.word	0x2401995c
 8012f60:	2401986c 	.word	0x2401986c

08012f64 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b08a      	sub	sp, #40	@ 0x28
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
 8012f6c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012f72:	2301      	movs	r3, #1
 8012f74:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	f000 80aa 	beq.w	80130d2 <vTaskPriorityDisinheritAfterTimeout+0x16e>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8012f7e:	6a3b      	ldr	r3, [r7, #32]
 8012f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d10d      	bne.n	8012fa2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
    __asm volatile
 8012f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f8a:	b672      	cpsid	i
 8012f8c:	f383 8811 	msr	BASEPRI, r3
 8012f90:	f3bf 8f6f 	isb	sy
 8012f94:	f3bf 8f4f 	dsb	sy
 8012f98:	b662      	cpsie	i
 8012f9a:	613b      	str	r3, [r7, #16]
}
 8012f9c:	bf00      	nop
 8012f9e:	bf00      	nop
 8012fa0:	e7fd      	b.n	8012f9e <vTaskPriorityDisinheritAfterTimeout+0x3a>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012fa2:	6a3b      	ldr	r3, [r7, #32]
 8012fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012fa6:	683a      	ldr	r2, [r7, #0]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d902      	bls.n	8012fb2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fb0:	e002      	b.n	8012fb8 <vTaskPriorityDisinheritAfterTimeout+0x54>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8012fb2:	6a3b      	ldr	r3, [r7, #32]
 8012fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012fb6:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8012fb8:	6a3b      	ldr	r3, [r7, #32]
 8012fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	f000 8087 	beq.w	80130d2 <vTaskPriorityDisinheritAfterTimeout+0x16e>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012fc4:	6a3b      	ldr	r3, [r7, #32]
 8012fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012fc8:	69fa      	ldr	r2, [r7, #28]
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	f040 8081 	bne.w	80130d2 <vTaskPriorityDisinheritAfterTimeout+0x16e>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8012fd0:	4b42      	ldr	r3, [pc, #264]	@ (80130dc <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	6a3a      	ldr	r2, [r7, #32]
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d10d      	bne.n	8012ff6 <vTaskPriorityDisinheritAfterTimeout+0x92>
    __asm volatile
 8012fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fde:	b672      	cpsid	i
 8012fe0:	f383 8811 	msr	BASEPRI, r3
 8012fe4:	f3bf 8f6f 	isb	sy
 8012fe8:	f3bf 8f4f 	dsb	sy
 8012fec:	b662      	cpsie	i
 8012fee:	60fb      	str	r3, [r7, #12]
}
 8012ff0:	bf00      	nop
 8012ff2:	bf00      	nop
 8012ff4:	e7fd      	b.n	8012ff2 <vTaskPriorityDisinheritAfterTimeout+0x8e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012ff6:	6a3b      	ldr	r3, [r7, #32]
 8012ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ffa:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8012ffc:	6a3b      	ldr	r3, [r7, #32]
 8012ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013000:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8013002:	6a3b      	ldr	r3, [r7, #32]
 8013004:	699b      	ldr	r3, [r3, #24]
 8013006:	2b00      	cmp	r3, #0
 8013008:	db04      	blt.n	8013014 <vTaskPriorityDisinheritAfterTimeout+0xb0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 801300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801300c:	f1c3 0207 	rsb	r2, r3, #7
 8013010:	6a3b      	ldr	r3, [r7, #32]
 8013012:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013014:	6a3b      	ldr	r3, [r7, #32]
 8013016:	6959      	ldr	r1, [r3, #20]
 8013018:	69ba      	ldr	r2, [r7, #24]
 801301a:	4613      	mov	r3, r2
 801301c:	009b      	lsls	r3, r3, #2
 801301e:	4413      	add	r3, r2
 8013020:	009b      	lsls	r3, r3, #2
 8013022:	4a2f      	ldr	r2, [pc, #188]	@ (80130e0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8013024:	4413      	add	r3, r2
 8013026:	4299      	cmp	r1, r3
 8013028:	d153      	bne.n	80130d2 <vTaskPriorityDisinheritAfterTimeout+0x16e>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801302a:	6a3b      	ldr	r3, [r7, #32]
 801302c:	3304      	adds	r3, #4
 801302e:	4618      	mov	r0, r3
 8013030:	f7fd fafc 	bl	801062c <uxListRemove>
 8013034:	4603      	mov	r3, r0
 8013036:	2b00      	cmp	r3, #0
 8013038:	d10a      	bne.n	8013050 <vTaskPriorityDisinheritAfterTimeout+0xec>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801303a:	6a3b      	ldr	r3, [r7, #32]
 801303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801303e:	2201      	movs	r2, #1
 8013040:	fa02 f303 	lsl.w	r3, r2, r3
 8013044:	43da      	mvns	r2, r3
 8013046:	4b27      	ldr	r3, [pc, #156]	@ (80130e4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	4013      	ands	r3, r2
 801304c:	4a25      	ldr	r2, [pc, #148]	@ (80130e4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 801304e:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8013050:	6a3b      	ldr	r3, [r7, #32]
 8013052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013054:	2201      	movs	r2, #1
 8013056:	409a      	lsls	r2, r3
 8013058:	4b22      	ldr	r3, [pc, #136]	@ (80130e4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	4313      	orrs	r3, r2
 801305e:	4a21      	ldr	r2, [pc, #132]	@ (80130e4 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8013060:	6013      	str	r3, [r2, #0]
 8013062:	6a3b      	ldr	r3, [r7, #32]
 8013064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013066:	491e      	ldr	r1, [pc, #120]	@ (80130e0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8013068:	4613      	mov	r3, r2
 801306a:	009b      	lsls	r3, r3, #2
 801306c:	4413      	add	r3, r2
 801306e:	009b      	lsls	r3, r3, #2
 8013070:	440b      	add	r3, r1
 8013072:	3304      	adds	r3, #4
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	617b      	str	r3, [r7, #20]
 8013078:	6a3b      	ldr	r3, [r7, #32]
 801307a:	697a      	ldr	r2, [r7, #20]
 801307c:	609a      	str	r2, [r3, #8]
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	689a      	ldr	r2, [r3, #8]
 8013082:	6a3b      	ldr	r3, [r7, #32]
 8013084:	60da      	str	r2, [r3, #12]
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	689b      	ldr	r3, [r3, #8]
 801308a:	6a3a      	ldr	r2, [r7, #32]
 801308c:	3204      	adds	r2, #4
 801308e:	605a      	str	r2, [r3, #4]
 8013090:	6a3b      	ldr	r3, [r7, #32]
 8013092:	1d1a      	adds	r2, r3, #4
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	609a      	str	r2, [r3, #8]
 8013098:	6a3b      	ldr	r3, [r7, #32]
 801309a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801309c:	4613      	mov	r3, r2
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	4413      	add	r3, r2
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	4a0e      	ldr	r2, [pc, #56]	@ (80130e0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80130a6:	441a      	add	r2, r3
 80130a8:	6a3b      	ldr	r3, [r7, #32]
 80130aa:	615a      	str	r2, [r3, #20]
 80130ac:	6a3b      	ldr	r3, [r7, #32]
 80130ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80130b0:	490b      	ldr	r1, [pc, #44]	@ (80130e0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80130b2:	4613      	mov	r3, r2
 80130b4:	009b      	lsls	r3, r3, #2
 80130b6:	4413      	add	r3, r2
 80130b8:	009b      	lsls	r3, r3, #2
 80130ba:	440b      	add	r3, r1
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	6a3a      	ldr	r2, [r7, #32]
 80130c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80130c2:	1c59      	adds	r1, r3, #1
 80130c4:	4806      	ldr	r0, [pc, #24]	@ (80130e0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80130c6:	4613      	mov	r3, r2
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	4413      	add	r3, r2
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	4403      	add	r3, r0
 80130d0:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 80130d2:	bf00      	nop
 80130d4:	3728      	adds	r7, #40	@ 0x28
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
 80130da:	bf00      	nop
 80130dc:	24019868 	.word	0x24019868
 80130e0:	2401986c 	.word	0x2401986c
 80130e4:	2401995c 	.word	0x2401995c

080130e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80130ee:	4b09      	ldr	r3, [pc, #36]	@ (8013114 <pvTaskIncrementMutexHeldCount+0x2c>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d004      	beq.n	8013104 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80130fe:	1c5a      	adds	r2, r3, #1
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8013104:	687b      	ldr	r3, [r7, #4]
    }
 8013106:	4618      	mov	r0, r3
 8013108:	370c      	adds	r7, #12
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr
 8013112:	bf00      	nop
 8013114:	24019868 	.word	0x24019868

08013118 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8013118:	b580      	push	{r7, lr}
 801311a:	b088      	sub	sp, #32
 801311c:	af00      	add	r7, sp, #0
 801311e:	60f8      	str	r0, [r7, #12]
 8013120:	60b9      	str	r1, [r7, #8]
 8013122:	607a      	str	r2, [r7, #4]
 8013124:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8013126:	2300      	movs	r3, #0
 8013128:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d00d      	beq.n	801314c <xTaskGenericNotifyWait+0x34>
    __asm volatile
 8013130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013134:	b672      	cpsid	i
 8013136:	f383 8811 	msr	BASEPRI, r3
 801313a:	f3bf 8f6f 	isb	sy
 801313e:	f3bf 8f4f 	dsb	sy
 8013142:	b662      	cpsie	i
 8013144:	613b      	str	r3, [r7, #16]
}
 8013146:	bf00      	nop
 8013148:	bf00      	nop
 801314a:	e7fd      	b.n	8013148 <xTaskGenericNotifyWait+0x30>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 801314c:	f7fe feec 	bl	8011f28 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8013150:	f000 ff08 	bl	8013f64 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8013154:	4b3b      	ldr	r3, [pc, #236]	@ (8013244 <xTaskGenericNotifyWait+0x12c>)
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	4413      	add	r3, r2
 801315c:	3358      	adds	r3, #88	@ 0x58
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	b2db      	uxtb	r3, r3
 8013162:	2b02      	cmp	r3, #2
 8013164:	d01a      	beq.n	801319c <xTaskGenericNotifyWait+0x84>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8013166:	4b37      	ldr	r3, [pc, #220]	@ (8013244 <xTaskGenericNotifyWait+0x12c>)
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	3314      	adds	r3, #20
 801316e:	009b      	lsls	r3, r3, #2
 8013170:	4413      	add	r3, r2
 8013172:	6859      	ldr	r1, [r3, #4]
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	43db      	mvns	r3, r3
 8013178:	4019      	ands	r1, r3
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	3314      	adds	r3, #20
 801317e:	009b      	lsls	r3, r3, #2
 8013180:	4413      	add	r3, r2
 8013182:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8013184:	4b2f      	ldr	r3, [pc, #188]	@ (8013244 <xTaskGenericNotifyWait+0x12c>)
 8013186:	681a      	ldr	r2, [r3, #0]
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	4413      	add	r3, r2
 801318c:	3358      	adds	r3, #88	@ 0x58
 801318e:	2201      	movs	r2, #1
 8013190:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8013192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013194:	2b00      	cmp	r3, #0
 8013196:	d001      	beq.n	801319c <xTaskGenericNotifyWait+0x84>
                    {
                        xShouldBlock = pdTRUE;
 8013198:	2301      	movs	r3, #1
 801319a:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 801319c:	f000 ff18 	bl	8013fd0 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 80131a0:	69bb      	ldr	r3, [r7, #24]
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	d103      	bne.n	80131ae <xTaskGenericNotifyWait+0x96>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80131a6:	2101      	movs	r1, #1
 80131a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80131aa:	f000 f987 	bl	80134bc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80131ae:	f7fe fec9 	bl	8011f44 <xTaskResumeAll>
 80131b2:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 80131b4:	69bb      	ldr	r3, [r7, #24]
 80131b6:	2b01      	cmp	r3, #1
 80131b8:	d10a      	bne.n	80131d0 <xTaskGenericNotifyWait+0xb8>
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d107      	bne.n	80131d0 <xTaskGenericNotifyWait+0xb8>
        {
            taskYIELD_WITHIN_API();
 80131c0:	4b21      	ldr	r3, [pc, #132]	@ (8013248 <xTaskGenericNotifyWait+0x130>)
 80131c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131c6:	601a      	str	r2, [r3, #0]
 80131c8:	f3bf 8f4f 	dsb	sy
 80131cc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80131d0:	f000 fec8 	bl	8013f64 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d008      	beq.n	80131ec <xTaskGenericNotifyWait+0xd4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 80131da:	4b1a      	ldr	r3, [pc, #104]	@ (8013244 <xTaskGenericNotifyWait+0x12c>)
 80131dc:	681a      	ldr	r2, [r3, #0]
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	3314      	adds	r3, #20
 80131e2:	009b      	lsls	r3, r3, #2
 80131e4:	4413      	add	r3, r2
 80131e6:	685a      	ldr	r2, [r3, #4]
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80131ec:	4b15      	ldr	r3, [pc, #84]	@ (8013244 <xTaskGenericNotifyWait+0x12c>)
 80131ee:	681a      	ldr	r2, [r3, #0]
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	4413      	add	r3, r2
 80131f4:	3358      	adds	r3, #88	@ 0x58
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	b2db      	uxtb	r3, r3
 80131fa:	2b02      	cmp	r3, #2
 80131fc:	d002      	beq.n	8013204 <xTaskGenericNotifyWait+0xec>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80131fe:	2300      	movs	r3, #0
 8013200:	61fb      	str	r3, [r7, #28]
 8013202:	e010      	b.n	8013226 <xTaskGenericNotifyWait+0x10e>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8013204:	4b0f      	ldr	r3, [pc, #60]	@ (8013244 <xTaskGenericNotifyWait+0x12c>)
 8013206:	681a      	ldr	r2, [r3, #0]
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	3314      	adds	r3, #20
 801320c:	009b      	lsls	r3, r3, #2
 801320e:	4413      	add	r3, r2
 8013210:	6859      	ldr	r1, [r3, #4]
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	43db      	mvns	r3, r3
 8013216:	4019      	ands	r1, r3
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	3314      	adds	r3, #20
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	4413      	add	r3, r2
 8013220:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8013222:	2301      	movs	r3, #1
 8013224:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8013226:	4b07      	ldr	r3, [pc, #28]	@ (8013244 <xTaskGenericNotifyWait+0x12c>)
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	4413      	add	r3, r2
 801322e:	3358      	adds	r3, #88	@ 0x58
 8013230:	2200      	movs	r2, #0
 8013232:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8013234:	f000 fecc 	bl	8013fd0 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8013238:	69fb      	ldr	r3, [r7, #28]
    }
 801323a:	4618      	mov	r0, r3
 801323c:	3720      	adds	r7, #32
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}
 8013242:	bf00      	nop
 8013244:	24019868 	.word	0x24019868
 8013248:	e000ed04 	.word	0xe000ed04

0801324c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 801324c:	b580      	push	{r7, lr}
 801324e:	b08e      	sub	sp, #56	@ 0x38
 8013250:	af00      	add	r7, sp, #0
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	607a      	str	r2, [r7, #4]
 8013258:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 801325a:	2301      	movs	r3, #1
 801325c:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d00d      	beq.n	8013280 <xTaskGenericNotify+0x34>
    __asm volatile
 8013264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013268:	b672      	cpsid	i
 801326a:	f383 8811 	msr	BASEPRI, r3
 801326e:	f3bf 8f6f 	isb	sy
 8013272:	f3bf 8f4f 	dsb	sy
 8013276:	b662      	cpsie	i
 8013278:	623b      	str	r3, [r7, #32]
}
 801327a:	bf00      	nop
 801327c:	bf00      	nop
 801327e:	e7fd      	b.n	801327c <xTaskGenericNotify+0x30>
        configASSERT( xTaskToNotify );
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d10d      	bne.n	80132a2 <xTaskGenericNotify+0x56>
    __asm volatile
 8013286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801328a:	b672      	cpsid	i
 801328c:	f383 8811 	msr	BASEPRI, r3
 8013290:	f3bf 8f6f 	isb	sy
 8013294:	f3bf 8f4f 	dsb	sy
 8013298:	b662      	cpsie	i
 801329a:	61fb      	str	r3, [r7, #28]
}
 801329c:	bf00      	nop
 801329e:	bf00      	nop
 80132a0:	e7fd      	b.n	801329e <xTaskGenericNotify+0x52>
        pxTCB = xTaskToNotify;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 80132a6:	f000 fe5d 	bl	8013f64 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80132aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d007      	beq.n	80132c0 <xTaskGenericNotify+0x74>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80132b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	3314      	adds	r3, #20
 80132b6:	009b      	lsls	r3, r3, #2
 80132b8:	4413      	add	r3, r2
 80132ba:	685a      	ldr	r2, [r3, #4]
 80132bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132be:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80132c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	4413      	add	r3, r2
 80132c6:	3358      	adds	r3, #88	@ 0x58
 80132c8:	781b      	ldrb	r3, [r3, #0]
 80132ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80132ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	4413      	add	r3, r2
 80132d4:	3358      	adds	r3, #88	@ 0x58
 80132d6:	2202      	movs	r2, #2
 80132d8:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80132da:	78fb      	ldrb	r3, [r7, #3]
 80132dc:	2b04      	cmp	r3, #4
 80132de:	d841      	bhi.n	8013364 <xTaskGenericNotify+0x118>
 80132e0:	a201      	add	r2, pc, #4	@ (adr r2, 80132e8 <xTaskGenericNotify+0x9c>)
 80132e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132e6:	bf00      	nop
 80132e8:	08013389 	.word	0x08013389
 80132ec:	080132fd 	.word	0x080132fd
 80132f0:	0801331b 	.word	0x0801331b
 80132f4:	08013337 	.word	0x08013337
 80132f8:	08013347 	.word	0x08013347
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80132fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	3314      	adds	r3, #20
 8013302:	009b      	lsls	r3, r3, #2
 8013304:	4413      	add	r3, r2
 8013306:	685a      	ldr	r2, [r3, #4]
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	431a      	orrs	r2, r3
 801330c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	3314      	adds	r3, #20
 8013312:	009b      	lsls	r3, r3, #2
 8013314:	440b      	add	r3, r1
 8013316:	605a      	str	r2, [r3, #4]
                    break;
 8013318:	e039      	b.n	801338e <xTaskGenericNotify+0x142>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 801331a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	3314      	adds	r3, #20
 8013320:	009b      	lsls	r3, r3, #2
 8013322:	4413      	add	r3, r2
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	1c5a      	adds	r2, r3, #1
 8013328:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	3314      	adds	r3, #20
 801332e:	009b      	lsls	r3, r3, #2
 8013330:	440b      	add	r3, r1
 8013332:	605a      	str	r2, [r3, #4]
                    break;
 8013334:	e02b      	b.n	801338e <xTaskGenericNotify+0x142>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8013336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	3314      	adds	r3, #20
 801333c:	009b      	lsls	r3, r3, #2
 801333e:	4413      	add	r3, r2
 8013340:	687a      	ldr	r2, [r7, #4]
 8013342:	605a      	str	r2, [r3, #4]
                    break;
 8013344:	e023      	b.n	801338e <xTaskGenericNotify+0x142>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801334a:	2b02      	cmp	r3, #2
 801334c:	d007      	beq.n	801335e <xTaskGenericNotify+0x112>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 801334e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	3314      	adds	r3, #20
 8013354:	009b      	lsls	r3, r3, #2
 8013356:	4413      	add	r3, r2
 8013358:	687a      	ldr	r2, [r7, #4]
 801335a:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 801335c:	e017      	b.n	801338e <xTaskGenericNotify+0x142>
                        xReturn = pdFAIL;
 801335e:	2300      	movs	r3, #0
 8013360:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8013362:	e014      	b.n	801338e <xTaskGenericNotify+0x142>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8013364:	4b50      	ldr	r3, [pc, #320]	@ (80134a8 <xTaskGenericNotify+0x25c>)
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d00f      	beq.n	801338c <xTaskGenericNotify+0x140>
    __asm volatile
 801336c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013370:	b672      	cpsid	i
 8013372:	f383 8811 	msr	BASEPRI, r3
 8013376:	f3bf 8f6f 	isb	sy
 801337a:	f3bf 8f4f 	dsb	sy
 801337e:	b662      	cpsie	i
 8013380:	61bb      	str	r3, [r7, #24]
}
 8013382:	bf00      	nop
 8013384:	bf00      	nop
 8013386:	e7fd      	b.n	8013384 <xTaskGenericNotify+0x138>
                    break;
 8013388:	bf00      	nop
 801338a:	e000      	b.n	801338e <xTaskGenericNotify+0x142>

                    break;
 801338c:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801338e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013392:	2b01      	cmp	r3, #1
 8013394:	f040 8081 	bne.w	801349a <xTaskGenericNotify+0x24e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8013398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801339a:	695b      	ldr	r3, [r3, #20]
 801339c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a0:	689b      	ldr	r3, [r3, #8]
 80133a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133a4:	68d2      	ldr	r2, [r2, #12]
 80133a6:	609a      	str	r2, [r3, #8]
 80133a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133aa:	68db      	ldr	r3, [r3, #12]
 80133ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133ae:	6892      	ldr	r2, [r2, #8]
 80133b0:	605a      	str	r2, [r3, #4]
 80133b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133b4:	685a      	ldr	r2, [r3, #4]
 80133b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133b8:	3304      	adds	r3, #4
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d103      	bne.n	80133c6 <xTaskGenericNotify+0x17a>
 80133be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133c0:	68da      	ldr	r2, [r3, #12]
 80133c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133c4:	605a      	str	r2, [r3, #4]
 80133c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133c8:	2200      	movs	r2, #0
 80133ca:	615a      	str	r2, [r3, #20]
 80133cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	1e5a      	subs	r2, r3, #1
 80133d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133d4:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80133d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133da:	2201      	movs	r2, #1
 80133dc:	409a      	lsls	r2, r3
 80133de:	4b33      	ldr	r3, [pc, #204]	@ (80134ac <xTaskGenericNotify+0x260>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	4313      	orrs	r3, r2
 80133e4:	4a31      	ldr	r2, [pc, #196]	@ (80134ac <xTaskGenericNotify+0x260>)
 80133e6:	6013      	str	r3, [r2, #0]
 80133e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80133ec:	4930      	ldr	r1, [pc, #192]	@ (80134b0 <xTaskGenericNotify+0x264>)
 80133ee:	4613      	mov	r3, r2
 80133f0:	009b      	lsls	r3, r3, #2
 80133f2:	4413      	add	r3, r2
 80133f4:	009b      	lsls	r3, r3, #2
 80133f6:	440b      	add	r3, r1
 80133f8:	3304      	adds	r3, #4
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80133fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013402:	609a      	str	r2, [r3, #8]
 8013404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013406:	689a      	ldr	r2, [r3, #8]
 8013408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801340a:	60da      	str	r2, [r3, #12]
 801340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801340e:	689b      	ldr	r3, [r3, #8]
 8013410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013412:	3204      	adds	r2, #4
 8013414:	605a      	str	r2, [r3, #4]
 8013416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013418:	1d1a      	adds	r2, r3, #4
 801341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801341c:	609a      	str	r2, [r3, #8]
 801341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013422:	4613      	mov	r3, r2
 8013424:	009b      	lsls	r3, r3, #2
 8013426:	4413      	add	r3, r2
 8013428:	009b      	lsls	r3, r3, #2
 801342a:	4a21      	ldr	r2, [pc, #132]	@ (80134b0 <xTaskGenericNotify+0x264>)
 801342c:	441a      	add	r2, r3
 801342e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013430:	615a      	str	r2, [r3, #20]
 8013432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013436:	491e      	ldr	r1, [pc, #120]	@ (80134b0 <xTaskGenericNotify+0x264>)
 8013438:	4613      	mov	r3, r2
 801343a:	009b      	lsls	r3, r3, #2
 801343c:	4413      	add	r3, r2
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	440b      	add	r3, r1
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013446:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013448:	1c59      	adds	r1, r3, #1
 801344a:	4819      	ldr	r0, [pc, #100]	@ (80134b0 <xTaskGenericNotify+0x264>)
 801344c:	4613      	mov	r3, r2
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	4413      	add	r3, r2
 8013452:	009b      	lsls	r3, r3, #2
 8013454:	4403      	add	r3, r0
 8013456:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801345c:	2b00      	cmp	r3, #0
 801345e:	d00d      	beq.n	801347c <xTaskGenericNotify+0x230>
    __asm volatile
 8013460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013464:	b672      	cpsid	i
 8013466:	f383 8811 	msr	BASEPRI, r3
 801346a:	f3bf 8f6f 	isb	sy
 801346e:	f3bf 8f4f 	dsb	sy
 8013472:	b662      	cpsie	i
 8013474:	617b      	str	r3, [r7, #20]
}
 8013476:	bf00      	nop
 8013478:	bf00      	nop
 801347a:	e7fd      	b.n	8013478 <xTaskGenericNotify+0x22c>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 801347c:	4b0d      	ldr	r3, [pc, #52]	@ (80134b4 <xTaskGenericNotify+0x268>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013486:	429a      	cmp	r2, r3
 8013488:	d207      	bcs.n	801349a <xTaskGenericNotify+0x24e>
 801348a:	4b0b      	ldr	r3, [pc, #44]	@ (80134b8 <xTaskGenericNotify+0x26c>)
 801348c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013490:	601a      	str	r2, [r3, #0]
 8013492:	f3bf 8f4f 	dsb	sy
 8013496:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 801349a:	f000 fd99 	bl	8013fd0 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 801349e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80134a0:	4618      	mov	r0, r3
 80134a2:	3738      	adds	r7, #56	@ 0x38
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	24019958 	.word	0x24019958
 80134ac:	2401995c 	.word	0x2401995c
 80134b0:	2401986c 	.word	0x2401986c
 80134b4:	24019868 	.word	0x24019868
 80134b8:	e000ed04 	.word	0xe000ed04

080134bc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b086      	sub	sp, #24
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80134c6:	4b22      	ldr	r3, [pc, #136]	@ (8013550 <prvAddCurrentTaskToDelayedList+0x94>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	617b      	str	r3, [r7, #20]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80134cc:	4b21      	ldr	r3, [pc, #132]	@ (8013554 <prvAddCurrentTaskToDelayedList+0x98>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	613b      	str	r3, [r7, #16]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80134d2:	4b21      	ldr	r3, [pc, #132]	@ (8013558 <prvAddCurrentTaskToDelayedList+0x9c>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134d8:	4b20      	ldr	r3, [pc, #128]	@ (801355c <prvAddCurrentTaskToDelayedList+0xa0>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	3304      	adds	r3, #4
 80134de:	4618      	mov	r0, r3
 80134e0:	f7fd f8a4 	bl	801062c <uxListRemove>
 80134e4:	4603      	mov	r3, r0
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d10b      	bne.n	8013502 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80134ea:	4b1c      	ldr	r3, [pc, #112]	@ (801355c <prvAddCurrentTaskToDelayedList+0xa0>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134f0:	2201      	movs	r2, #1
 80134f2:	fa02 f303 	lsl.w	r3, r2, r3
 80134f6:	43da      	mvns	r2, r3
 80134f8:	4b19      	ldr	r3, [pc, #100]	@ (8013560 <prvAddCurrentTaskToDelayedList+0xa4>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	4013      	ands	r3, r2
 80134fe:	4a18      	ldr	r2, [pc, #96]	@ (8013560 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013500:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 8013502:	697a      	ldr	r2, [r7, #20]
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	4413      	add	r3, r2
 8013508:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801350a:	4b14      	ldr	r3, [pc, #80]	@ (801355c <prvAddCurrentTaskToDelayedList+0xa0>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	68ba      	ldr	r2, [r7, #8]
 8013510:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 8013512:	68ba      	ldr	r2, [r7, #8]
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	429a      	cmp	r2, r3
 8013518:	d207      	bcs.n	801352a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 801351a:	4b10      	ldr	r3, [pc, #64]	@ (801355c <prvAddCurrentTaskToDelayedList+0xa0>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	3304      	adds	r3, #4
 8013520:	4619      	mov	r1, r3
 8013522:	68f8      	ldr	r0, [r7, #12]
 8013524:	f7fd f849 	bl	80105ba <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8013528:	e00e      	b.n	8013548 <prvAddCurrentTaskToDelayedList+0x8c>
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 801352a:	4b0c      	ldr	r3, [pc, #48]	@ (801355c <prvAddCurrentTaskToDelayedList+0xa0>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	3304      	adds	r3, #4
 8013530:	4619      	mov	r1, r3
 8013532:	6938      	ldr	r0, [r7, #16]
 8013534:	f7fd f841 	bl	80105ba <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8013538:	4b0a      	ldr	r3, [pc, #40]	@ (8013564 <prvAddCurrentTaskToDelayedList+0xa8>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	68ba      	ldr	r2, [r7, #8]
 801353e:	429a      	cmp	r2, r3
 8013540:	d202      	bcs.n	8013548 <prvAddCurrentTaskToDelayedList+0x8c>
                xNextTaskUnblockTime = xTimeToWake;
 8013542:	4a08      	ldr	r2, [pc, #32]	@ (8013564 <prvAddCurrentTaskToDelayedList+0xa8>)
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	6013      	str	r3, [r2, #0]
}
 8013548:	bf00      	nop
 801354a:	3718      	adds	r7, #24
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	24019958 	.word	0x24019958
 8013554:	24019920 	.word	0x24019920
 8013558:	24019924 	.word	0x24019924
 801355c:	24019868 	.word	0x24019868
 8013560:	2401995c 	.word	0x2401995c
 8013564:	24019974 	.word	0x24019974

08013568 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8013568:	b480      	push	{r7}
 801356a:	b085      	sub	sp, #20
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	4a07      	ldr	r2, [pc, #28]	@ (8013594 <vApplicationGetIdleTaskMemory+0x2c>)
 8013578:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	4a06      	ldr	r2, [pc, #24]	@ (8013598 <vApplicationGetIdleTaskMemory+0x30>)
 801357e:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2280      	movs	r2, #128	@ 0x80
 8013584:	601a      	str	r2, [r3, #0]
    }
 8013586:	bf00      	nop
 8013588:	3714      	adds	r7, #20
 801358a:	46bd      	mov	sp, r7
 801358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013590:	4770      	bx	lr
 8013592:	bf00      	nop
 8013594:	24019980 	.word	0x24019980
 8013598:	240199dc 	.word	0x240199dc

0801359c <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 801359c:	b480      	push	{r7}
 801359e:	b085      	sub	sp, #20
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	60b9      	str	r1, [r7, #8]
 80135a6:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	4a07      	ldr	r2, [pc, #28]	@ (80135c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80135ac:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	4a06      	ldr	r2, [pc, #24]	@ (80135cc <vApplicationGetTimerTaskMemory+0x30>)
 80135b2:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80135ba:	601a      	str	r2, [r3, #0]
    }
 80135bc:	bf00      	nop
 80135be:	3714      	adds	r7, #20
 80135c0:	46bd      	mov	sp, r7
 80135c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c6:	4770      	bx	lr
 80135c8:	24019bdc 	.word	0x24019bdc
 80135cc:	24019c38 	.word	0x24019c38

080135d0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b08a      	sub	sp, #40	@ 0x28
 80135d4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80135d6:	2300      	movs	r3, #0
 80135d8:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80135da:	f000 fb23 	bl	8013c24 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80135de:	4b1e      	ldr	r3, [pc, #120]	@ (8013658 <xTimerCreateTimerTask+0x88>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d021      	beq.n	801362a <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80135e6:	2300      	movs	r3, #0
 80135e8:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80135ea:	2300      	movs	r3, #0
 80135ec:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 80135ee:	1d3a      	adds	r2, r7, #4
 80135f0:	f107 0108 	add.w	r1, r7, #8
 80135f4:	f107 030c 	add.w	r3, r7, #12
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7ff ffcf 	bl	801359c <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80135fe:	6879      	ldr	r1, [r7, #4]
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	68fa      	ldr	r2, [r7, #12]
 8013604:	9202      	str	r2, [sp, #8]
 8013606:	9301      	str	r3, [sp, #4]
 8013608:	2302      	movs	r3, #2
 801360a:	9300      	str	r3, [sp, #0]
 801360c:	2300      	movs	r3, #0
 801360e:	460a      	mov	r2, r1
 8013610:	4912      	ldr	r1, [pc, #72]	@ (801365c <xTimerCreateTimerTask+0x8c>)
 8013612:	4813      	ldr	r0, [pc, #76]	@ (8013660 <xTimerCreateTimerTask+0x90>)
 8013614:	f7fe f8e7 	bl	80117e6 <xTaskCreateStatic>
 8013618:	4603      	mov	r3, r0
 801361a:	4a12      	ldr	r2, [pc, #72]	@ (8013664 <xTimerCreateTimerTask+0x94>)
 801361c:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 801361e:	4b11      	ldr	r3, [pc, #68]	@ (8013664 <xTimerCreateTimerTask+0x94>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d001      	beq.n	801362a <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8013626:	2301      	movs	r3, #1
 8013628:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d10d      	bne.n	801364c <xTimerCreateTimerTask+0x7c>
    __asm volatile
 8013630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013634:	b672      	cpsid	i
 8013636:	f383 8811 	msr	BASEPRI, r3
 801363a:	f3bf 8f6f 	isb	sy
 801363e:	f3bf 8f4f 	dsb	sy
 8013642:	b662      	cpsie	i
 8013644:	613b      	str	r3, [r7, #16]
}
 8013646:	bf00      	nop
 8013648:	bf00      	nop
 801364a:	e7fd      	b.n	8013648 <xTimerCreateTimerTask+0x78>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 801364c:	697b      	ldr	r3, [r7, #20]
    }
 801364e:	4618      	mov	r0, r3
 8013650:	3718      	adds	r7, #24
 8013652:	46bd      	mov	sp, r7
 8013654:	bd80      	pop	{r7, pc}
 8013656:	bf00      	nop
 8013658:	2401a068 	.word	0x2401a068
 801365c:	080255d8 	.word	0x080255d8
 8013660:	08013875 	.word	0x08013875
 8013664:	2401a06c 	.word	0x2401a06c

08013668 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8013668:	b580      	push	{r7, lr}
 801366a:	b088      	sub	sp, #32
 801366c:	af02      	add	r7, sp, #8
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
 8013674:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8013676:	202c      	movs	r0, #44	@ 0x2c
 8013678:	f000 fda8 	bl	80141cc <pvPortMalloc>
 801367c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d00d      	beq.n	80136a0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8013684:	697b      	ldr	r3, [r7, #20]
 8013686:	2200      	movs	r2, #0
 8013688:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801368c:	697b      	ldr	r3, [r7, #20]
 801368e:	9301      	str	r3, [sp, #4]
 8013690:	6a3b      	ldr	r3, [r7, #32]
 8013692:	9300      	str	r3, [sp, #0]
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	687a      	ldr	r2, [r7, #4]
 8013698:	68b9      	ldr	r1, [r7, #8]
 801369a:	68f8      	ldr	r0, [r7, #12]
 801369c:	f000 f805 	bl	80136aa <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );

            return pxNewTimer;
 80136a0:	697b      	ldr	r3, [r7, #20]
        }
 80136a2:	4618      	mov	r0, r3
 80136a4:	3718      	adds	r7, #24
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}

080136aa <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80136aa:	b580      	push	{r7, lr}
 80136ac:	b086      	sub	sp, #24
 80136ae:	af00      	add	r7, sp, #0
 80136b0:	60f8      	str	r0, [r7, #12]
 80136b2:	60b9      	str	r1, [r7, #8]
 80136b4:	607a      	str	r2, [r7, #4]
 80136b6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d10d      	bne.n	80136da <prvInitialiseNewTimer+0x30>
    __asm volatile
 80136be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136c2:	b672      	cpsid	i
 80136c4:	f383 8811 	msr	BASEPRI, r3
 80136c8:	f3bf 8f6f 	isb	sy
 80136cc:	f3bf 8f4f 	dsb	sy
 80136d0:	b662      	cpsie	i
 80136d2:	617b      	str	r3, [r7, #20]
}
 80136d4:	bf00      	nop
 80136d6:	bf00      	nop
 80136d8:	e7fd      	b.n	80136d6 <prvInitialiseNewTimer+0x2c>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80136da:	f000 faa3 	bl	8013c24 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80136de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136e0:	68fa      	ldr	r2, [r7, #12]
 80136e2:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80136e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136e6:	68ba      	ldr	r2, [r7, #8]
 80136e8:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80136ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ec:	683a      	ldr	r2, [r7, #0]
 80136ee:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80136f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136f2:	6a3a      	ldr	r2, [r7, #32]
 80136f4:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80136f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136f8:	3304      	adds	r3, #4
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7fc ff2c 	bl	8010558 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d008      	beq.n	8013718 <prvInitialiseNewTimer+0x6e>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 8013706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801370c:	f043 0304 	orr.w	r3, r3, #4
 8013710:	b2da      	uxtb	r2, r3
 8013712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013714:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8013718:	bf00      	nop
 801371a:	3718      	adds	r7, #24
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}

08013720 <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 8013720:	b580      	push	{r7, lr}
 8013722:	b08a      	sub	sp, #40	@ 0x28
 8013724:	af00      	add	r7, sp, #0
 8013726:	60f8      	str	r0, [r7, #12]
 8013728:	60b9      	str	r1, [r7, #8]
 801372a:	607a      	str	r2, [r7, #4]
 801372c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 801372e:	2300      	movs	r3, #0
 8013730:	627b      	str	r3, [r7, #36]	@ 0x24

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d10d      	bne.n	8013754 <xTimerGenericCommandFromTask+0x34>
    __asm volatile
 8013738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801373c:	b672      	cpsid	i
 801373e:	f383 8811 	msr	BASEPRI, r3
 8013742:	f3bf 8f6f 	isb	sy
 8013746:	f3bf 8f4f 	dsb	sy
 801374a:	b662      	cpsie	i
 801374c:	623b      	str	r3, [r7, #32]
}
 801374e:	bf00      	nop
 8013750:	bf00      	nop
 8013752:	e7fd      	b.n	8013750 <xTimerGenericCommandFromTask+0x30>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8013754:	4b1d      	ldr	r3, [pc, #116]	@ (80137cc <xTimerGenericCommandFromTask+0xac>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d031      	beq.n	80137c0 <xTimerGenericCommandFromTask+0xa0>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	61bb      	str	r3, [r7, #24]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	2b05      	cmp	r3, #5
 801376c:	dd0d      	ble.n	801378a <xTimerGenericCommandFromTask+0x6a>
    __asm volatile
 801376e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013772:	b672      	cpsid	i
 8013774:	f383 8811 	msr	BASEPRI, r3
 8013778:	f3bf 8f6f 	isb	sy
 801377c:	f3bf 8f4f 	dsb	sy
 8013780:	b662      	cpsie	i
 8013782:	61fb      	str	r3, [r7, #28]
}
 8013784:	bf00      	nop
 8013786:	bf00      	nop
 8013788:	e7fd      	b.n	8013786 <xTimerGenericCommandFromTask+0x66>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	2b05      	cmp	r3, #5
 801378e:	dc17      	bgt.n	80137c0 <xTimerGenericCommandFromTask+0xa0>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013790:	f7ff fa7e 	bl	8012c90 <xTaskGetSchedulerState>
 8013794:	4603      	mov	r3, r0
 8013796:	2b02      	cmp	r3, #2
 8013798:	d109      	bne.n	80137ae <xTimerGenericCommandFromTask+0x8e>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801379a:	4b0c      	ldr	r3, [pc, #48]	@ (80137cc <xTimerGenericCommandFromTask+0xac>)
 801379c:	6818      	ldr	r0, [r3, #0]
 801379e:	f107 0110 	add.w	r1, r7, #16
 80137a2:	2300      	movs	r3, #0
 80137a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80137a6:	f7fd f913 	bl	80109d0 <xQueueGenericSend>
 80137aa:	6278      	str	r0, [r7, #36]	@ 0x24
 80137ac:	e008      	b.n	80137c0 <xTimerGenericCommandFromTask+0xa0>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80137ae:	4b07      	ldr	r3, [pc, #28]	@ (80137cc <xTimerGenericCommandFromTask+0xac>)
 80137b0:	6818      	ldr	r0, [r3, #0]
 80137b2:	f107 0110 	add.w	r1, r7, #16
 80137b6:	2300      	movs	r3, #0
 80137b8:	2200      	movs	r2, #0
 80137ba:	f7fd f909 	bl	80109d0 <xQueueGenericSend>
 80137be:	6278      	str	r0, [r7, #36]	@ 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );

        return xReturn;
 80137c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80137c2:	4618      	mov	r0, r3
 80137c4:	3728      	adds	r7, #40	@ 0x28
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	2401a068 	.word	0x2401a068

080137d0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b084      	sub	sp, #16
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	60f8      	str	r0, [r7, #12]
 80137d8:	60b9      	str	r1, [r7, #8]
 80137da:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80137dc:	e008      	b.n	80137f0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	699b      	ldr	r3, [r3, #24]
 80137e2:	68ba      	ldr	r2, [r7, #8]
 80137e4:	4413      	add	r3, r2
 80137e6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	6a1b      	ldr	r3, [r3, #32]
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	699a      	ldr	r2, [r3, #24]
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	18d1      	adds	r1, r2, r3
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	687a      	ldr	r2, [r7, #4]
 80137fc:	68f8      	ldr	r0, [r7, #12]
 80137fe:	f000 f8df 	bl	80139c0 <prvInsertTimerInActiveList>
 8013802:	4603      	mov	r3, r0
 8013804:	2b00      	cmp	r3, #0
 8013806:	d1ea      	bne.n	80137de <prvReloadTimer+0xe>
        }
    }
 8013808:	bf00      	nop
 801380a:	bf00      	nop
 801380c:	3710      	adds	r7, #16
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
	...

08013814 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8013814:	b580      	push	{r7, lr}
 8013816:	b084      	sub	sp, #16
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801381e:	4b14      	ldr	r3, [pc, #80]	@ (8013870 <prvProcessExpiredTimer+0x5c>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	68db      	ldr	r3, [r3, #12]
 8013824:	68db      	ldr	r3, [r3, #12]
 8013826:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	3304      	adds	r3, #4
 801382c:	4618      	mov	r0, r3
 801382e:	f7fc fefd 	bl	801062c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013838:	f003 0304 	and.w	r3, r3, #4
 801383c:	2b00      	cmp	r3, #0
 801383e:	d005      	beq.n	801384c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8013840:	683a      	ldr	r2, [r7, #0]
 8013842:	6879      	ldr	r1, [r7, #4]
 8013844:	68f8      	ldr	r0, [r7, #12]
 8013846:	f7ff ffc3 	bl	80137d0 <prvReloadTimer>
 801384a:	e008      	b.n	801385e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013852:	f023 0301 	bic.w	r3, r3, #1
 8013856:	b2da      	uxtb	r2, r3
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	6a1b      	ldr	r3, [r3, #32]
 8013862:	68f8      	ldr	r0, [r7, #12]
 8013864:	4798      	blx	r3
    }
 8013866:	bf00      	nop
 8013868:	3710      	adds	r7, #16
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
 801386e:	bf00      	nop
 8013870:	2401a060 	.word	0x2401a060

08013874 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8013874:	b580      	push	{r7, lr}
 8013876:	b084      	sub	sp, #16
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801387c:	f107 0308 	add.w	r3, r7, #8
 8013880:	4618      	mov	r0, r3
 8013882:	f000 f859 	bl	8013938 <prvGetNextExpireTime>
 8013886:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	4619      	mov	r1, r3
 801388c:	68f8      	ldr	r0, [r7, #12]
 801388e:	f000 f805 	bl	801389c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8013892:	f000 f8d7 	bl	8013a44 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013896:	bf00      	nop
 8013898:	e7f0      	b.n	801387c <prvTimerTask+0x8>
	...

0801389c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 801389c:	b580      	push	{r7, lr}
 801389e:	b084      	sub	sp, #16
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
 80138a4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80138a6:	f7fe fb3f 	bl	8011f28 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80138aa:	f107 0308 	add.w	r3, r7, #8
 80138ae:	4618      	mov	r0, r3
 80138b0:	f000 f866 	bl	8013980 <prvSampleTimeNow>
 80138b4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d130      	bne.n	801391e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d10a      	bne.n	80138d8 <prvProcessTimerOrBlockTask+0x3c>
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d806      	bhi.n	80138d8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80138ca:	f7fe fb3b 	bl	8011f44 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80138ce:	68f9      	ldr	r1, [r7, #12]
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f7ff ff9f 	bl	8013814 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80138d6:	e024      	b.n	8013922 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d008      	beq.n	80138f0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80138de:	4b13      	ldr	r3, [pc, #76]	@ (801392c <prvProcessTimerOrBlockTask+0x90>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d101      	bne.n	80138ec <prvProcessTimerOrBlockTask+0x50>
 80138e8:	2301      	movs	r3, #1
 80138ea:	e000      	b.n	80138ee <prvProcessTimerOrBlockTask+0x52>
 80138ec:	2300      	movs	r3, #0
 80138ee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80138f0:	4b0f      	ldr	r3, [pc, #60]	@ (8013930 <prvProcessTimerOrBlockTask+0x94>)
 80138f2:	6818      	ldr	r0, [r3, #0]
 80138f4:	687a      	ldr	r2, [r7, #4]
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	1ad3      	subs	r3, r2, r3
 80138fa:	683a      	ldr	r2, [r7, #0]
 80138fc:	4619      	mov	r1, r3
 80138fe:	f7fd fed7 	bl	80116b0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8013902:	f7fe fb1f 	bl	8011f44 <xTaskResumeAll>
 8013906:	4603      	mov	r3, r0
 8013908:	2b00      	cmp	r3, #0
 801390a:	d10a      	bne.n	8013922 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 801390c:	4b09      	ldr	r3, [pc, #36]	@ (8013934 <prvProcessTimerOrBlockTask+0x98>)
 801390e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013912:	601a      	str	r2, [r3, #0]
 8013914:	f3bf 8f4f 	dsb	sy
 8013918:	f3bf 8f6f 	isb	sy
    }
 801391c:	e001      	b.n	8013922 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 801391e:	f7fe fb11 	bl	8011f44 <xTaskResumeAll>
    }
 8013922:	bf00      	nop
 8013924:	3710      	adds	r7, #16
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}
 801392a:	bf00      	nop
 801392c:	2401a064 	.word	0x2401a064
 8013930:	2401a068 	.word	0x2401a068
 8013934:	e000ed04 	.word	0xe000ed04

08013938 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8013938:	b480      	push	{r7}
 801393a:	b085      	sub	sp, #20
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013940:	4b0e      	ldr	r3, [pc, #56]	@ (801397c <prvGetNextExpireTime+0x44>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d101      	bne.n	801394e <prvGetNextExpireTime+0x16>
 801394a:	2201      	movs	r2, #1
 801394c:	e000      	b.n	8013950 <prvGetNextExpireTime+0x18>
 801394e:	2200      	movs	r2, #0
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d105      	bne.n	8013968 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801395c:	4b07      	ldr	r3, [pc, #28]	@ (801397c <prvGetNextExpireTime+0x44>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	68db      	ldr	r3, [r3, #12]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	60fb      	str	r3, [r7, #12]
 8013966:	e001      	b.n	801396c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8013968:	2300      	movs	r3, #0
 801396a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 801396c:	68fb      	ldr	r3, [r7, #12]
    }
 801396e:	4618      	mov	r0, r3
 8013970:	3714      	adds	r7, #20
 8013972:	46bd      	mov	sp, r7
 8013974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013978:	4770      	bx	lr
 801397a:	bf00      	nop
 801397c:	2401a060 	.word	0x2401a060

08013980 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8013980:	b580      	push	{r7, lr}
 8013982:	b084      	sub	sp, #16
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8013988:	f7fe fbe6 	bl	8012158 <xTaskGetTickCount>
 801398c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 801398e:	4b0b      	ldr	r3, [pc, #44]	@ (80139bc <prvSampleTimeNow+0x3c>)
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	68fa      	ldr	r2, [r7, #12]
 8013994:	429a      	cmp	r2, r3
 8013996:	d205      	bcs.n	80139a4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8013998:	f000 f91e 	bl	8013bd8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2201      	movs	r2, #1
 80139a0:	601a      	str	r2, [r3, #0]
 80139a2:	e002      	b.n	80139aa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2200      	movs	r2, #0
 80139a8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80139aa:	4a04      	ldr	r2, [pc, #16]	@ (80139bc <prvSampleTimeNow+0x3c>)
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80139b0:	68fb      	ldr	r3, [r7, #12]
    }
 80139b2:	4618      	mov	r0, r3
 80139b4:	3710      	adds	r7, #16
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop
 80139bc:	2401a070 	.word	0x2401a070

080139c0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b086      	sub	sp, #24
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	607a      	str	r2, [r7, #4]
 80139cc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80139ce:	2300      	movs	r3, #0
 80139d0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	68ba      	ldr	r2, [r7, #8]
 80139d6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	68fa      	ldr	r2, [r7, #12]
 80139dc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80139de:	68ba      	ldr	r2, [r7, #8]
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d812      	bhi.n	8013a0c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80139e6:	687a      	ldr	r2, [r7, #4]
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	1ad2      	subs	r2, r2, r3
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	699b      	ldr	r3, [r3, #24]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d302      	bcc.n	80139fa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80139f4:	2301      	movs	r3, #1
 80139f6:	617b      	str	r3, [r7, #20]
 80139f8:	e01b      	b.n	8013a32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80139fa:	4b10      	ldr	r3, [pc, #64]	@ (8013a3c <prvInsertTimerInActiveList+0x7c>)
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	3304      	adds	r3, #4
 8013a02:	4619      	mov	r1, r3
 8013a04:	4610      	mov	r0, r2
 8013a06:	f7fc fdd8 	bl	80105ba <vListInsert>
 8013a0a:	e012      	b.n	8013a32 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013a0c:	687a      	ldr	r2, [r7, #4]
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d206      	bcs.n	8013a22 <prvInsertTimerInActiveList+0x62>
 8013a14:	68ba      	ldr	r2, [r7, #8]
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d302      	bcc.n	8013a22 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	617b      	str	r3, [r7, #20]
 8013a20:	e007      	b.n	8013a32 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013a22:	4b07      	ldr	r3, [pc, #28]	@ (8013a40 <prvInsertTimerInActiveList+0x80>)
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	3304      	adds	r3, #4
 8013a2a:	4619      	mov	r1, r3
 8013a2c:	4610      	mov	r0, r2
 8013a2e:	f7fc fdc4 	bl	80105ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 8013a32:	697b      	ldr	r3, [r7, #20]
    }
 8013a34:	4618      	mov	r0, r3
 8013a36:	3718      	adds	r7, #24
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	2401a064 	.word	0x2401a064
 8013a40:	2401a060 	.word	0x2401a060

08013a44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b088      	sub	sp, #32
 8013a48:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8013a4a:	f107 0308 	add.w	r3, r7, #8
 8013a4e:	2200      	movs	r2, #0
 8013a50:	601a      	str	r2, [r3, #0]
 8013a52:	605a      	str	r2, [r3, #4]
 8013a54:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8013a56:	e0ab      	b.n	8013bb0 <prvProcessReceivedCommands+0x16c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	f2c0 80a8 	blt.w	8013bb0 <prvProcessReceivedCommands+0x16c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8013a64:	69fb      	ldr	r3, [r7, #28]
 8013a66:	695b      	ldr	r3, [r3, #20]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d004      	beq.n	8013a76 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	3304      	adds	r3, #4
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7fc fddb 	bl	801062c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013a76:	1d3b      	adds	r3, r7, #4
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7ff ff81 	bl	8013980 <prvSampleTimeNow>
 8013a7e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	3b01      	subs	r3, #1
 8013a84:	2b08      	cmp	r3, #8
 8013a86:	f200 8090 	bhi.w	8013baa <prvProcessReceivedCommands+0x166>
 8013a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8013a90 <prvProcessReceivedCommands+0x4c>)
 8013a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a90:	08013ab5 	.word	0x08013ab5
 8013a94:	08013ab5 	.word	0x08013ab5
 8013a98:	08013b1d 	.word	0x08013b1d
 8013a9c:	08013b31 	.word	0x08013b31
 8013aa0:	08013b81 	.word	0x08013b81
 8013aa4:	08013ab5 	.word	0x08013ab5
 8013aa8:	08013ab5 	.word	0x08013ab5
 8013aac:	08013b1d 	.word	0x08013b1d
 8013ab0:	08013b31 	.word	0x08013b31
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013aba:	f043 0301 	orr.w	r3, r3, #1
 8013abe:	b2da      	uxtb	r2, r3
 8013ac0:	69fb      	ldr	r3, [r7, #28]
 8013ac2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013ac6:	68fa      	ldr	r2, [r7, #12]
 8013ac8:	69fb      	ldr	r3, [r7, #28]
 8013aca:	699b      	ldr	r3, [r3, #24]
 8013acc:	18d1      	adds	r1, r2, r3
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	69ba      	ldr	r2, [r7, #24]
 8013ad2:	69f8      	ldr	r0, [r7, #28]
 8013ad4:	f7ff ff74 	bl	80139c0 <prvInsertTimerInActiveList>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d067      	beq.n	8013bae <prvProcessReceivedCommands+0x16a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8013ade:	69fb      	ldr	r3, [r7, #28]
 8013ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013ae4:	f003 0304 	and.w	r3, r3, #4
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d009      	beq.n	8013b00 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	699b      	ldr	r3, [r3, #24]
 8013af2:	4413      	add	r3, r2
 8013af4:	69ba      	ldr	r2, [r7, #24]
 8013af6:	4619      	mov	r1, r3
 8013af8:	69f8      	ldr	r0, [r7, #28]
 8013afa:	f7ff fe69 	bl	80137d0 <prvReloadTimer>
 8013afe:	e008      	b.n	8013b12 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013b06:	f023 0301 	bic.w	r3, r3, #1
 8013b0a:	b2da      	uxtb	r2, r3
 8013b0c:	69fb      	ldr	r3, [r7, #28]
 8013b0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013b12:	69fb      	ldr	r3, [r7, #28]
 8013b14:	6a1b      	ldr	r3, [r3, #32]
 8013b16:	69f8      	ldr	r0, [r7, #28]
 8013b18:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8013b1a:	e048      	b.n	8013bae <prvProcessReceivedCommands+0x16a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013b1c:	69fb      	ldr	r3, [r7, #28]
 8013b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013b22:	f023 0301 	bic.w	r3, r3, #1
 8013b26:	b2da      	uxtb	r2, r3
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8013b2e:	e03f      	b.n	8013bb0 <prvProcessReceivedCommands+0x16c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8013b30:	69fb      	ldr	r3, [r7, #28]
 8013b32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013b36:	f043 0301 	orr.w	r3, r3, #1
 8013b3a:	b2da      	uxtb	r2, r3
 8013b3c:	69fb      	ldr	r3, [r7, #28]
 8013b3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013b42:	68fa      	ldr	r2, [r7, #12]
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013b48:	69fb      	ldr	r3, [r7, #28]
 8013b4a:	699b      	ldr	r3, [r3, #24]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d10d      	bne.n	8013b6c <prvProcessReceivedCommands+0x128>
    __asm volatile
 8013b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b54:	b672      	cpsid	i
 8013b56:	f383 8811 	msr	BASEPRI, r3
 8013b5a:	f3bf 8f6f 	isb	sy
 8013b5e:	f3bf 8f4f 	dsb	sy
 8013b62:	b662      	cpsie	i
 8013b64:	617b      	str	r3, [r7, #20]
}
 8013b66:	bf00      	nop
 8013b68:	bf00      	nop
 8013b6a:	e7fd      	b.n	8013b68 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013b6c:	69fb      	ldr	r3, [r7, #28]
 8013b6e:	699a      	ldr	r2, [r3, #24]
 8013b70:	69bb      	ldr	r3, [r7, #24]
 8013b72:	18d1      	adds	r1, r2, r3
 8013b74:	69bb      	ldr	r3, [r7, #24]
 8013b76:	69ba      	ldr	r2, [r7, #24]
 8013b78:	69f8      	ldr	r0, [r7, #28]
 8013b7a:	f7ff ff21 	bl	80139c0 <prvInsertTimerInActiveList>
                        break;
 8013b7e:	e017      	b.n	8013bb0 <prvProcessReceivedCommands+0x16c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013b86:	f003 0302 	and.w	r3, r3, #2
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d103      	bne.n	8013b96 <prvProcessReceivedCommands+0x152>
                            {
                                vPortFree( pxTimer );
 8013b8e:	69f8      	ldr	r0, [r7, #28]
 8013b90:	f000 fc60 	bl	8014454 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8013b94:	e00c      	b.n	8013bb0 <prvProcessReceivedCommands+0x16c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013b96:	69fb      	ldr	r3, [r7, #28]
 8013b98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013b9c:	f023 0301 	bic.w	r3, r3, #1
 8013ba0:	b2da      	uxtb	r2, r3
 8013ba2:	69fb      	ldr	r3, [r7, #28]
 8013ba4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8013ba8:	e002      	b.n	8013bb0 <prvProcessReceivedCommands+0x16c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8013baa:	bf00      	nop
 8013bac:	e000      	b.n	8013bb0 <prvProcessReceivedCommands+0x16c>
                        break;
 8013bae:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8013bb0:	4b08      	ldr	r3, [pc, #32]	@ (8013bd4 <prvProcessReceivedCommands+0x190>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	f107 0108 	add.w	r1, r7, #8
 8013bb8:	2200      	movs	r2, #0
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7fd f8c4 	bl	8010d48 <xQueueReceive>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	f47f af48 	bne.w	8013a58 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8013bc8:	bf00      	nop
 8013bca:	bf00      	nop
 8013bcc:	3720      	adds	r7, #32
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}
 8013bd2:	bf00      	nop
 8013bd4:	2401a068 	.word	0x2401a068

08013bd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013bde:	e009      	b.n	8013bf4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013be0:	4b0e      	ldr	r3, [pc, #56]	@ (8013c1c <prvSwitchTimerLists+0x44>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	68db      	ldr	r3, [r3, #12]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8013bea:	f04f 31ff 	mov.w	r1, #4294967295
 8013bee:	6838      	ldr	r0, [r7, #0]
 8013bf0:	f7ff fe10 	bl	8013814 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013bf4:	4b09      	ldr	r3, [pc, #36]	@ (8013c1c <prvSwitchTimerLists+0x44>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d1f0      	bne.n	8013be0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8013bfe:	4b07      	ldr	r3, [pc, #28]	@ (8013c1c <prvSwitchTimerLists+0x44>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8013c04:	4b06      	ldr	r3, [pc, #24]	@ (8013c20 <prvSwitchTimerLists+0x48>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	4a04      	ldr	r2, [pc, #16]	@ (8013c1c <prvSwitchTimerLists+0x44>)
 8013c0a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8013c0c:	4a04      	ldr	r2, [pc, #16]	@ (8013c20 <prvSwitchTimerLists+0x48>)
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6013      	str	r3, [r2, #0]
    }
 8013c12:	bf00      	nop
 8013c14:	3708      	adds	r7, #8
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}
 8013c1a:	bf00      	nop
 8013c1c:	2401a060 	.word	0x2401a060
 8013c20:	2401a064 	.word	0x2401a064

08013c24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b082      	sub	sp, #8
 8013c28:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8013c2a:	f000 f99b 	bl	8013f64 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8013c2e:	4b15      	ldr	r3, [pc, #84]	@ (8013c84 <prvCheckForValidListAndQueue+0x60>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d120      	bne.n	8013c78 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8013c36:	4814      	ldr	r0, [pc, #80]	@ (8013c88 <prvCheckForValidListAndQueue+0x64>)
 8013c38:	f7fc fc6e 	bl	8010518 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8013c3c:	4813      	ldr	r0, [pc, #76]	@ (8013c8c <prvCheckForValidListAndQueue+0x68>)
 8013c3e:	f7fc fc6b 	bl	8010518 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8013c42:	4b13      	ldr	r3, [pc, #76]	@ (8013c90 <prvCheckForValidListAndQueue+0x6c>)
 8013c44:	4a10      	ldr	r2, [pc, #64]	@ (8013c88 <prvCheckForValidListAndQueue+0x64>)
 8013c46:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8013c48:	4b12      	ldr	r3, [pc, #72]	@ (8013c94 <prvCheckForValidListAndQueue+0x70>)
 8013c4a:	4a10      	ldr	r2, [pc, #64]	@ (8013c8c <prvCheckForValidListAndQueue+0x68>)
 8013c4c:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013c4e:	2300      	movs	r3, #0
 8013c50:	9300      	str	r3, [sp, #0]
 8013c52:	4b11      	ldr	r3, [pc, #68]	@ (8013c98 <prvCheckForValidListAndQueue+0x74>)
 8013c54:	4a11      	ldr	r2, [pc, #68]	@ (8013c9c <prvCheckForValidListAndQueue+0x78>)
 8013c56:	210c      	movs	r1, #12
 8013c58:	200a      	movs	r0, #10
 8013c5a:	f7fc fda7 	bl	80107ac <xQueueGenericCreateStatic>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	4a08      	ldr	r2, [pc, #32]	@ (8013c84 <prvCheckForValidListAndQueue+0x60>)
 8013c62:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8013c64:	4b07      	ldr	r3, [pc, #28]	@ (8013c84 <prvCheckForValidListAndQueue+0x60>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d005      	beq.n	8013c78 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013c6c:	4b05      	ldr	r3, [pc, #20]	@ (8013c84 <prvCheckForValidListAndQueue+0x60>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	490b      	ldr	r1, [pc, #44]	@ (8013ca0 <prvCheckForValidListAndQueue+0x7c>)
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7fd fc8e 	bl	8011594 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8013c78:	f000 f9aa 	bl	8013fd0 <vPortExitCritical>
    }
 8013c7c:	bf00      	nop
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}
 8013c82:	bf00      	nop
 8013c84:	2401a068 	.word	0x2401a068
 8013c88:	2401a038 	.word	0x2401a038
 8013c8c:	2401a04c 	.word	0x2401a04c
 8013c90:	2401a060 	.word	0x2401a060
 8013c94:	2401a064 	.word	0x2401a064
 8013c98:	2401a0ec 	.word	0x2401a0ec
 8013c9c:	2401a074 	.word	0x2401a074
 8013ca0:	080255e0 	.word	0x080255e0

08013ca4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8013ca4:	b480      	push	{r7}
 8013ca6:	b085      	sub	sp, #20
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	60f8      	str	r0, [r7, #12]
 8013cac:	60b9      	str	r1, [r7, #8]
 8013cae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	3b04      	subs	r3, #4
 8013cb4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013cbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	3b04      	subs	r3, #4
 8013cc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	f023 0201 	bic.w	r2, r3, #1
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	3b04      	subs	r3, #4
 8013cd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8013cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8013d08 <pxPortInitialiseStack+0x64>)
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	3b14      	subs	r3, #20
 8013cde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8013ce0:	687a      	ldr	r2, [r7, #4]
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	3b04      	subs	r3, #4
 8013cea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f06f 0202 	mvn.w	r2, #2
 8013cf2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	3b20      	subs	r3, #32
 8013cf8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8013cfa:	68fb      	ldr	r3, [r7, #12]
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3714      	adds	r7, #20
 8013d00:	46bd      	mov	sp, r7
 8013d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d06:	4770      	bx	lr
 8013d08:	08013d0d 	.word	0x08013d0d

08013d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b085      	sub	sp, #20
 8013d10:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8013d12:	2300      	movs	r3, #0
 8013d14:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8013d16:	4b15      	ldr	r3, [pc, #84]	@ (8013d6c <prvTaskExitError+0x60>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d1e:	d00d      	beq.n	8013d3c <prvTaskExitError+0x30>
    __asm volatile
 8013d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d24:	b672      	cpsid	i
 8013d26:	f383 8811 	msr	BASEPRI, r3
 8013d2a:	f3bf 8f6f 	isb	sy
 8013d2e:	f3bf 8f4f 	dsb	sy
 8013d32:	b662      	cpsie	i
 8013d34:	60fb      	str	r3, [r7, #12]
}
 8013d36:	bf00      	nop
 8013d38:	bf00      	nop
 8013d3a:	e7fd      	b.n	8013d38 <prvTaskExitError+0x2c>
    __asm volatile
 8013d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d40:	b672      	cpsid	i
 8013d42:	f383 8811 	msr	BASEPRI, r3
 8013d46:	f3bf 8f6f 	isb	sy
 8013d4a:	f3bf 8f4f 	dsb	sy
 8013d4e:	b662      	cpsie	i
 8013d50:	60bb      	str	r3, [r7, #8]
}
 8013d52:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8013d54:	bf00      	nop
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d0fc      	beq.n	8013d56 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8013d5c:	bf00      	nop
 8013d5e:	bf00      	nop
 8013d60:	3714      	adds	r7, #20
 8013d62:	46bd      	mov	sp, r7
 8013d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d68:	4770      	bx	lr
 8013d6a:	bf00      	nop
 8013d6c:	240148d4 	.word	0x240148d4

08013d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8013d70:	4b07      	ldr	r3, [pc, #28]	@ (8013d90 <pxCurrentTCBConst2>)
 8013d72:	6819      	ldr	r1, [r3, #0]
 8013d74:	6808      	ldr	r0, [r1, #0]
 8013d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d7a:	f380 8809 	msr	PSP, r0
 8013d7e:	f3bf 8f6f 	isb	sy
 8013d82:	f04f 0000 	mov.w	r0, #0
 8013d86:	f380 8811 	msr	BASEPRI, r0
 8013d8a:	4770      	bx	lr
 8013d8c:	f3af 8000 	nop.w

08013d90 <pxCurrentTCBConst2>:
 8013d90:	24019868 	.word	0x24019868
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8013d94:	bf00      	nop
 8013d96:	bf00      	nop

08013d98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8013d98:	4808      	ldr	r0, [pc, #32]	@ (8013dbc <prvPortStartFirstTask+0x24>)
 8013d9a:	6800      	ldr	r0, [r0, #0]
 8013d9c:	6800      	ldr	r0, [r0, #0]
 8013d9e:	f380 8808 	msr	MSP, r0
 8013da2:	f04f 0000 	mov.w	r0, #0
 8013da6:	f380 8814 	msr	CONTROL, r0
 8013daa:	b662      	cpsie	i
 8013dac:	b661      	cpsie	f
 8013dae:	f3bf 8f4f 	dsb	sy
 8013db2:	f3bf 8f6f 	isb	sy
 8013db6:	df00      	svc	0
 8013db8:	bf00      	nop
 8013dba:	0000      	.short	0x0000
 8013dbc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8013dc0:	bf00      	nop
 8013dc2:	bf00      	nop

08013dc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b08a      	sub	sp, #40	@ 0x28
 8013dc8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8013dca:	4b5c      	ldr	r3, [pc, #368]	@ (8013f3c <xPortStartScheduler+0x178>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8013dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dd2:	332c      	adds	r3, #44	@ 0x2c
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	4a5a      	ldr	r2, [pc, #360]	@ (8013f40 <xPortStartScheduler+0x17c>)
 8013dd8:	4293      	cmp	r3, r2
 8013dda:	d00d      	beq.n	8013df8 <xPortStartScheduler+0x34>
    __asm volatile
 8013ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013de0:	b672      	cpsid	i
 8013de2:	f383 8811 	msr	BASEPRI, r3
 8013de6:	f3bf 8f6f 	isb	sy
 8013dea:	f3bf 8f4f 	dsb	sy
 8013dee:	b662      	cpsie	i
 8013df0:	61bb      	str	r3, [r7, #24]
}
 8013df2:	bf00      	nop
 8013df4:	bf00      	nop
 8013df6:	e7fd      	b.n	8013df4 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8013df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dfa:	3338      	adds	r3, #56	@ 0x38
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	4a51      	ldr	r2, [pc, #324]	@ (8013f44 <xPortStartScheduler+0x180>)
 8013e00:	4293      	cmp	r3, r2
 8013e02:	d00d      	beq.n	8013e20 <xPortStartScheduler+0x5c>
    __asm volatile
 8013e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e08:	b672      	cpsid	i
 8013e0a:	f383 8811 	msr	BASEPRI, r3
 8013e0e:	f3bf 8f6f 	isb	sy
 8013e12:	f3bf 8f4f 	dsb	sy
 8013e16:	b662      	cpsie	i
 8013e18:	61fb      	str	r3, [r7, #28]
}
 8013e1a:	bf00      	nop
 8013e1c:	bf00      	nop
 8013e1e:	e7fd      	b.n	8013e1c <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8013e20:	2300      	movs	r3, #0
 8013e22:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013e24:	4b48      	ldr	r3, [pc, #288]	@ (8013f48 <xPortStartScheduler+0x184>)
 8013e26:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8013e28:	6a3b      	ldr	r3, [r7, #32]
 8013e2a:	781b      	ldrb	r3, [r3, #0]
 8013e2c:	b2db      	uxtb	r3, r3
 8013e2e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013e30:	6a3b      	ldr	r3, [r7, #32]
 8013e32:	22ff      	movs	r2, #255	@ 0xff
 8013e34:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013e36:	6a3b      	ldr	r3, [r7, #32]
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	b2db      	uxtb	r3, r3
 8013e3c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013e3e:	79fb      	ldrb	r3, [r7, #7]
 8013e40:	b2db      	uxtb	r3, r3
 8013e42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013e46:	b2da      	uxtb	r2, r3
 8013e48:	4b40      	ldr	r3, [pc, #256]	@ (8013f4c <xPortStartScheduler+0x188>)
 8013e4a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8013e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8013f4c <xPortStartScheduler+0x188>)
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d10d      	bne.n	8013e70 <xPortStartScheduler+0xac>
    __asm volatile
 8013e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e58:	b672      	cpsid	i
 8013e5a:	f383 8811 	msr	BASEPRI, r3
 8013e5e:	f3bf 8f6f 	isb	sy
 8013e62:	f3bf 8f4f 	dsb	sy
 8013e66:	b662      	cpsie	i
 8013e68:	617b      	str	r3, [r7, #20]
}
 8013e6a:	bf00      	nop
 8013e6c:	bf00      	nop
 8013e6e:	e7fd      	b.n	8013e6c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8013e70:	79fb      	ldrb	r3, [r7, #7]
 8013e72:	b2db      	uxtb	r3, r3
 8013e74:	43db      	mvns	r3, r3
 8013e76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d015      	beq.n	8013eaa <xPortStartScheduler+0xe6>
    __asm volatile
 8013e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e82:	b672      	cpsid	i
 8013e84:	f383 8811 	msr	BASEPRI, r3
 8013e88:	f3bf 8f6f 	isb	sy
 8013e8c:	f3bf 8f4f 	dsb	sy
 8013e90:	b662      	cpsie	i
 8013e92:	613b      	str	r3, [r7, #16]
}
 8013e94:	bf00      	nop
 8013e96:	bf00      	nop
 8013e98:	e7fd      	b.n	8013e96 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013ea0:	79fb      	ldrb	r3, [r7, #7]
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	005b      	lsls	r3, r3, #1
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013eaa:	79fb      	ldrb	r3, [r7, #7]
 8013eac:	b2db      	uxtb	r3, r3
 8013eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013eb2:	2b80      	cmp	r3, #128	@ 0x80
 8013eb4:	d0f1      	beq.n	8013e9a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	2b08      	cmp	r3, #8
 8013eba:	d103      	bne.n	8013ec4 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8013ebc:	4b24      	ldr	r3, [pc, #144]	@ (8013f50 <xPortStartScheduler+0x18c>)
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	601a      	str	r2, [r3, #0]
 8013ec2:	e004      	b.n	8013ece <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	f1c3 0307 	rsb	r3, r3, #7
 8013eca:	4a21      	ldr	r2, [pc, #132]	@ (8013f50 <xPortStartScheduler+0x18c>)
 8013ecc:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013ece:	4b20      	ldr	r3, [pc, #128]	@ (8013f50 <xPortStartScheduler+0x18c>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	021b      	lsls	r3, r3, #8
 8013ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8013f50 <xPortStartScheduler+0x18c>)
 8013ed6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8013f50 <xPortStartScheduler+0x18c>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8013f50 <xPortStartScheduler+0x18c>)
 8013ee2:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8013ee4:	7bfb      	ldrb	r3, [r7, #15]
 8013ee6:	b2da      	uxtb	r2, r3
 8013ee8:	6a3b      	ldr	r3, [r7, #32]
 8013eea:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8013eec:	4b19      	ldr	r3, [pc, #100]	@ (8013f54 <xPortStartScheduler+0x190>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	4a18      	ldr	r2, [pc, #96]	@ (8013f54 <xPortStartScheduler+0x190>)
 8013ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8013ef6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8013ef8:	4b16      	ldr	r3, [pc, #88]	@ (8013f54 <xPortStartScheduler+0x190>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	4a15      	ldr	r2, [pc, #84]	@ (8013f54 <xPortStartScheduler+0x190>)
 8013efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013f02:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8013f04:	4b14      	ldr	r3, [pc, #80]	@ (8013f58 <xPortStartScheduler+0x194>)
 8013f06:	2200      	movs	r2, #0
 8013f08:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8013f0a:	f000 f8e9 	bl	80140e0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8013f0e:	4b13      	ldr	r3, [pc, #76]	@ (8013f5c <xPortStartScheduler+0x198>)
 8013f10:	2200      	movs	r2, #0
 8013f12:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8013f14:	f000 f908 	bl	8014128 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013f18:	4b11      	ldr	r3, [pc, #68]	@ (8013f60 <xPortStartScheduler+0x19c>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	4a10      	ldr	r2, [pc, #64]	@ (8013f60 <xPortStartScheduler+0x19c>)
 8013f1e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8013f22:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8013f24:	f7ff ff38 	bl	8013d98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8013f28:	f7fe fac8 	bl	80124bc <vTaskSwitchContext>
    prvTaskExitError();
 8013f2c:	f7ff feee 	bl	8013d0c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8013f30:	2300      	movs	r3, #0
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	3728      	adds	r7, #40	@ 0x28
 8013f36:	46bd      	mov	sp, r7
 8013f38:	bd80      	pop	{r7, pc}
 8013f3a:	bf00      	nop
 8013f3c:	e000ed08 	.word	0xe000ed08
 8013f40:	08013d71 	.word	0x08013d71
 8013f44:	08014031 	.word	0x08014031
 8013f48:	e000e400 	.word	0xe000e400
 8013f4c:	2401a13c 	.word	0x2401a13c
 8013f50:	2401a140 	.word	0x2401a140
 8013f54:	e000ed20 	.word	0xe000ed20
 8013f58:	e000ed1c 	.word	0xe000ed1c
 8013f5c:	240148d4 	.word	0x240148d4
 8013f60:	e000ef34 	.word	0xe000ef34

08013f64 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013f64:	b480      	push	{r7}
 8013f66:	b083      	sub	sp, #12
 8013f68:	af00      	add	r7, sp, #0
    __asm volatile
 8013f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f6e:	b672      	cpsid	i
 8013f70:	f383 8811 	msr	BASEPRI, r3
 8013f74:	f3bf 8f6f 	isb	sy
 8013f78:	f3bf 8f4f 	dsb	sy
 8013f7c:	b662      	cpsie	i
 8013f7e:	607b      	str	r3, [r7, #4]
}
 8013f80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8013f82:	4b11      	ldr	r3, [pc, #68]	@ (8013fc8 <vPortEnterCritical+0x64>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	3301      	adds	r3, #1
 8013f88:	4a0f      	ldr	r2, [pc, #60]	@ (8013fc8 <vPortEnterCritical+0x64>)
 8013f8a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8013f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8013fc8 <vPortEnterCritical+0x64>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	2b01      	cmp	r3, #1
 8013f92:	d112      	bne.n	8013fba <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013f94:	4b0d      	ldr	r3, [pc, #52]	@ (8013fcc <vPortEnterCritical+0x68>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	b2db      	uxtb	r3, r3
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d00d      	beq.n	8013fba <vPortEnterCritical+0x56>
    __asm volatile
 8013f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fa2:	b672      	cpsid	i
 8013fa4:	f383 8811 	msr	BASEPRI, r3
 8013fa8:	f3bf 8f6f 	isb	sy
 8013fac:	f3bf 8f4f 	dsb	sy
 8013fb0:	b662      	cpsie	i
 8013fb2:	603b      	str	r3, [r7, #0]
}
 8013fb4:	bf00      	nop
 8013fb6:	bf00      	nop
 8013fb8:	e7fd      	b.n	8013fb6 <vPortEnterCritical+0x52>
    }
}
 8013fba:	bf00      	nop
 8013fbc:	370c      	adds	r7, #12
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc4:	4770      	bx	lr
 8013fc6:	bf00      	nop
 8013fc8:	240148d4 	.word	0x240148d4
 8013fcc:	e000ed04 	.word	0xe000ed04

08013fd0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013fd0:	b480      	push	{r7}
 8013fd2:	b083      	sub	sp, #12
 8013fd4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8013fd6:	4b13      	ldr	r3, [pc, #76]	@ (8014024 <vPortExitCritical+0x54>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d10d      	bne.n	8013ffa <vPortExitCritical+0x2a>
    __asm volatile
 8013fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fe2:	b672      	cpsid	i
 8013fe4:	f383 8811 	msr	BASEPRI, r3
 8013fe8:	f3bf 8f6f 	isb	sy
 8013fec:	f3bf 8f4f 	dsb	sy
 8013ff0:	b662      	cpsie	i
 8013ff2:	607b      	str	r3, [r7, #4]
}
 8013ff4:	bf00      	nop
 8013ff6:	bf00      	nop
 8013ff8:	e7fd      	b.n	8013ff6 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8013ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8014024 <vPortExitCritical+0x54>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	3b01      	subs	r3, #1
 8014000:	4a08      	ldr	r2, [pc, #32]	@ (8014024 <vPortExitCritical+0x54>)
 8014002:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8014004:	4b07      	ldr	r3, [pc, #28]	@ (8014024 <vPortExitCritical+0x54>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d105      	bne.n	8014018 <vPortExitCritical+0x48>
 801400c:	2300      	movs	r3, #0
 801400e:	603b      	str	r3, [r7, #0]
    __asm volatile
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	f383 8811 	msr	BASEPRI, r3
}
 8014016:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8014018:	bf00      	nop
 801401a:	370c      	adds	r7, #12
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr
 8014024:	240148d4 	.word	0x240148d4
	...

08014030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8014030:	f3ef 8009 	mrs	r0, PSP
 8014034:	f3bf 8f6f 	isb	sy
 8014038:	4b15      	ldr	r3, [pc, #84]	@ (8014090 <pxCurrentTCBConst>)
 801403a:	681a      	ldr	r2, [r3, #0]
 801403c:	f01e 0f10 	tst.w	lr, #16
 8014040:	bf08      	it	eq
 8014042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801404a:	6010      	str	r0, [r2, #0]
 801404c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014050:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014054:	b672      	cpsid	i
 8014056:	f380 8811 	msr	BASEPRI, r0
 801405a:	f3bf 8f4f 	dsb	sy
 801405e:	f3bf 8f6f 	isb	sy
 8014062:	b662      	cpsie	i
 8014064:	f7fe fa2a 	bl	80124bc <vTaskSwitchContext>
 8014068:	f04f 0000 	mov.w	r0, #0
 801406c:	f380 8811 	msr	BASEPRI, r0
 8014070:	bc09      	pop	{r0, r3}
 8014072:	6819      	ldr	r1, [r3, #0]
 8014074:	6808      	ldr	r0, [r1, #0]
 8014076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801407a:	f01e 0f10 	tst.w	lr, #16
 801407e:	bf08      	it	eq
 8014080:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014084:	f380 8809 	msr	PSP, r0
 8014088:	f3bf 8f6f 	isb	sy
 801408c:	4770      	bx	lr
 801408e:	bf00      	nop

08014090 <pxCurrentTCBConst>:
 8014090:	24019868 	.word	0x24019868
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8014094:	bf00      	nop
 8014096:	bf00      	nop

08014098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b082      	sub	sp, #8
 801409c:	af00      	add	r7, sp, #0
    __asm volatile
 801409e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140a2:	b672      	cpsid	i
 80140a4:	f383 8811 	msr	BASEPRI, r3
 80140a8:	f3bf 8f6f 	isb	sy
 80140ac:	f3bf 8f4f 	dsb	sy
 80140b0:	b662      	cpsie	i
 80140b2:	607b      	str	r3, [r7, #4]
}
 80140b4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80140b6:	f7fe f8e5 	bl	8012284 <xTaskIncrementTick>
 80140ba:	4603      	mov	r3, r0
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d003      	beq.n	80140c8 <SysTick_Handler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80140c0:	4b06      	ldr	r3, [pc, #24]	@ (80140dc <SysTick_Handler+0x44>)
 80140c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80140c6:	601a      	str	r2, [r3, #0]
 80140c8:	2300      	movs	r3, #0
 80140ca:	603b      	str	r3, [r7, #0]
    __asm volatile
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	f383 8811 	msr	BASEPRI, r3
}
 80140d2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80140d4:	bf00      	nop
 80140d6:	3708      	adds	r7, #8
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	e000ed04 	.word	0xe000ed04

080140e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80140e0:	b480      	push	{r7}
 80140e2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80140e4:	4b0b      	ldr	r3, [pc, #44]	@ (8014114 <vPortSetupTimerInterrupt+0x34>)
 80140e6:	2200      	movs	r2, #0
 80140e8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80140ea:	4b0b      	ldr	r3, [pc, #44]	@ (8014118 <vPortSetupTimerInterrupt+0x38>)
 80140ec:	2200      	movs	r2, #0
 80140ee:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80140f0:	4b0a      	ldr	r3, [pc, #40]	@ (801411c <vPortSetupTimerInterrupt+0x3c>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	4a0a      	ldr	r2, [pc, #40]	@ (8014120 <vPortSetupTimerInterrupt+0x40>)
 80140f6:	fba2 2303 	umull	r2, r3, r2, r3
 80140fa:	099b      	lsrs	r3, r3, #6
 80140fc:	4a09      	ldr	r2, [pc, #36]	@ (8014124 <vPortSetupTimerInterrupt+0x44>)
 80140fe:	3b01      	subs	r3, #1
 8014100:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014102:	4b04      	ldr	r3, [pc, #16]	@ (8014114 <vPortSetupTimerInterrupt+0x34>)
 8014104:	2207      	movs	r2, #7
 8014106:	601a      	str	r2, [r3, #0]
}
 8014108:	bf00      	nop
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	e000e010 	.word	0xe000e010
 8014118:	e000e018 	.word	0xe000e018
 801411c:	240148d8 	.word	0x240148d8
 8014120:	10624dd3 	.word	0x10624dd3
 8014124:	e000e014 	.word	0xe000e014

08014128 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8014128:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014138 <vPortEnableVFP+0x10>
 801412c:	6801      	ldr	r1, [r0, #0]
 801412e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014132:	6001      	str	r1, [r0, #0]
 8014134:	4770      	bx	lr
 8014136:	0000      	.short	0x0000
 8014138:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 801413c:	bf00      	nop
 801413e:	bf00      	nop

08014140 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8014140:	b480      	push	{r7}
 8014142:	b085      	sub	sp, #20
 8014144:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8014146:	f3ef 8305 	mrs	r3, IPSR
 801414a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2b0f      	cmp	r3, #15
 8014150:	d917      	bls.n	8014182 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014152:	4a1a      	ldr	r2, [pc, #104]	@ (80141bc <vPortValidateInterruptPriority+0x7c>)
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	4413      	add	r3, r2
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801415c:	4b18      	ldr	r3, [pc, #96]	@ (80141c0 <vPortValidateInterruptPriority+0x80>)
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	7afa      	ldrb	r2, [r7, #11]
 8014162:	429a      	cmp	r2, r3
 8014164:	d20d      	bcs.n	8014182 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8014166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801416a:	b672      	cpsid	i
 801416c:	f383 8811 	msr	BASEPRI, r3
 8014170:	f3bf 8f6f 	isb	sy
 8014174:	f3bf 8f4f 	dsb	sy
 8014178:	b662      	cpsie	i
 801417a:	607b      	str	r3, [r7, #4]
}
 801417c:	bf00      	nop
 801417e:	bf00      	nop
 8014180:	e7fd      	b.n	801417e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014182:	4b10      	ldr	r3, [pc, #64]	@ (80141c4 <vPortValidateInterruptPriority+0x84>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801418a:	4b0f      	ldr	r3, [pc, #60]	@ (80141c8 <vPortValidateInterruptPriority+0x88>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	429a      	cmp	r2, r3
 8014190:	d90d      	bls.n	80141ae <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8014192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014196:	b672      	cpsid	i
 8014198:	f383 8811 	msr	BASEPRI, r3
 801419c:	f3bf 8f6f 	isb	sy
 80141a0:	f3bf 8f4f 	dsb	sy
 80141a4:	b662      	cpsie	i
 80141a6:	603b      	str	r3, [r7, #0]
}
 80141a8:	bf00      	nop
 80141aa:	bf00      	nop
 80141ac:	e7fd      	b.n	80141aa <vPortValidateInterruptPriority+0x6a>
    }
 80141ae:	bf00      	nop
 80141b0:	3714      	adds	r7, #20
 80141b2:	46bd      	mov	sp, r7
 80141b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b8:	4770      	bx	lr
 80141ba:	bf00      	nop
 80141bc:	e000e3f0 	.word	0xe000e3f0
 80141c0:	2401a13c 	.word	0x2401a13c
 80141c4:	e000ed0c 	.word	0xe000ed0c
 80141c8:	2401a140 	.word	0x2401a140

080141cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b08e      	sub	sp, #56	@ 0x38
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80141d4:	2300      	movs	r3, #0
 80141d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d022      	beq.n	8014224 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80141de:	2308      	movs	r3, #8
 80141e0:	43db      	mvns	r3, r3
 80141e2:	687a      	ldr	r2, [r7, #4]
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d81b      	bhi.n	8014220 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80141e8:	2208      	movs	r2, #8
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	4413      	add	r3, r2
 80141ee:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f003 0307 	and.w	r3, r3, #7
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d014      	beq.n	8014224 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	f003 0307 	and.w	r3, r3, #7
 8014200:	f1c3 0308 	rsb	r3, r3, #8
 8014204:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8014206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014208:	43db      	mvns	r3, r3
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	429a      	cmp	r2, r3
 801420e:	d804      	bhi.n	801421a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8014210:	687a      	ldr	r2, [r7, #4]
 8014212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014214:	4413      	add	r3, r2
 8014216:	607b      	str	r3, [r7, #4]
 8014218:	e004      	b.n	8014224 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 801421a:	2300      	movs	r3, #0
 801421c:	607b      	str	r3, [r7, #4]
 801421e:	e001      	b.n	8014224 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8014220:	2300      	movs	r3, #0
 8014222:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8014224:	f7fd fe80 	bl	8011f28 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8014228:	4b83      	ldr	r3, [pc, #524]	@ (8014438 <pvPortMalloc+0x26c>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d101      	bne.n	8014234 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8014230:	f000 f98c 	bl	801454c <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2b00      	cmp	r3, #0
 8014238:	f2c0 80de 	blt.w	80143f8 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2b00      	cmp	r3, #0
 8014240:	f000 80da 	beq.w	80143f8 <pvPortMalloc+0x22c>
 8014244:	4b7d      	ldr	r3, [pc, #500]	@ (801443c <pvPortMalloc+0x270>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	429a      	cmp	r2, r3
 801424c:	f200 80d4 	bhi.w	80143f8 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8014250:	4b7b      	ldr	r3, [pc, #492]	@ (8014440 <pvPortMalloc+0x274>)
 8014252:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8014254:	4b7a      	ldr	r3, [pc, #488]	@ (8014440 <pvPortMalloc+0x274>)
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 801425a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801425c:	4a79      	ldr	r2, [pc, #484]	@ (8014444 <pvPortMalloc+0x278>)
 801425e:	4293      	cmp	r3, r2
 8014260:	d305      	bcc.n	801426e <pvPortMalloc+0xa2>
 8014262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014264:	4a78      	ldr	r2, [pc, #480]	@ (8014448 <pvPortMalloc+0x27c>)
 8014266:	4293      	cmp	r3, r2
 8014268:	d801      	bhi.n	801426e <pvPortMalloc+0xa2>
 801426a:	2301      	movs	r3, #1
 801426c:	e000      	b.n	8014270 <pvPortMalloc+0xa4>
 801426e:	2300      	movs	r3, #0
 8014270:	2b00      	cmp	r3, #0
 8014272:	d12d      	bne.n	80142d0 <pvPortMalloc+0x104>
    __asm volatile
 8014274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014278:	b672      	cpsid	i
 801427a:	f383 8811 	msr	BASEPRI, r3
 801427e:	f3bf 8f6f 	isb	sy
 8014282:	f3bf 8f4f 	dsb	sy
 8014286:	b662      	cpsie	i
 8014288:	623b      	str	r3, [r7, #32]
}
 801428a:	bf00      	nop
 801428c:	bf00      	nop
 801428e:	e7fd      	b.n	801428c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8014290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014292:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8014294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 801429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801429c:	4a69      	ldr	r2, [pc, #420]	@ (8014444 <pvPortMalloc+0x278>)
 801429e:	4293      	cmp	r3, r2
 80142a0:	d305      	bcc.n	80142ae <pvPortMalloc+0xe2>
 80142a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142a4:	4a68      	ldr	r2, [pc, #416]	@ (8014448 <pvPortMalloc+0x27c>)
 80142a6:	4293      	cmp	r3, r2
 80142a8:	d801      	bhi.n	80142ae <pvPortMalloc+0xe2>
 80142aa:	2301      	movs	r3, #1
 80142ac:	e000      	b.n	80142b0 <pvPortMalloc+0xe4>
 80142ae:	2300      	movs	r3, #0
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d10d      	bne.n	80142d0 <pvPortMalloc+0x104>
    __asm volatile
 80142b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142b8:	b672      	cpsid	i
 80142ba:	f383 8811 	msr	BASEPRI, r3
 80142be:	f3bf 8f6f 	isb	sy
 80142c2:	f3bf 8f4f 	dsb	sy
 80142c6:	b662      	cpsie	i
 80142c8:	61fb      	str	r3, [r7, #28]
}
 80142ca:	bf00      	nop
 80142cc:	bf00      	nop
 80142ce:	e7fd      	b.n	80142cc <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80142d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	687a      	ldr	r2, [r7, #4]
 80142d6:	429a      	cmp	r2, r3
 80142d8:	d903      	bls.n	80142e2 <pvPortMalloc+0x116>
 80142da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d1d6      	bne.n	8014290 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80142e2:	4b55      	ldr	r3, [pc, #340]	@ (8014438 <pvPortMalloc+0x26c>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80142e8:	429a      	cmp	r2, r3
 80142ea:	f000 8085 	beq.w	80143f8 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80142ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	2208      	movs	r2, #8
 80142f4:	4413      	add	r3, r2
 80142f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80142f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142fa:	4a52      	ldr	r2, [pc, #328]	@ (8014444 <pvPortMalloc+0x278>)
 80142fc:	4293      	cmp	r3, r2
 80142fe:	d305      	bcc.n	801430c <pvPortMalloc+0x140>
 8014300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014302:	4a51      	ldr	r2, [pc, #324]	@ (8014448 <pvPortMalloc+0x27c>)
 8014304:	4293      	cmp	r3, r2
 8014306:	d801      	bhi.n	801430c <pvPortMalloc+0x140>
 8014308:	2301      	movs	r3, #1
 801430a:	e000      	b.n	801430e <pvPortMalloc+0x142>
 801430c:	2300      	movs	r3, #0
 801430e:	2b00      	cmp	r3, #0
 8014310:	d10d      	bne.n	801432e <pvPortMalloc+0x162>
    __asm volatile
 8014312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014316:	b672      	cpsid	i
 8014318:	f383 8811 	msr	BASEPRI, r3
 801431c:	f3bf 8f6f 	isb	sy
 8014320:	f3bf 8f4f 	dsb	sy
 8014324:	b662      	cpsie	i
 8014326:	61bb      	str	r3, [r7, #24]
}
 8014328:	bf00      	nop
 801432a:	bf00      	nop
 801432c:	e7fd      	b.n	801432a <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801432e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014330:	681a      	ldr	r2, [r3, #0]
 8014332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014334:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8014336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014338:	685b      	ldr	r3, [r3, #4]
 801433a:	687a      	ldr	r2, [r7, #4]
 801433c:	429a      	cmp	r2, r3
 801433e:	d90d      	bls.n	801435c <pvPortMalloc+0x190>
    __asm volatile
 8014340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014344:	b672      	cpsid	i
 8014346:	f383 8811 	msr	BASEPRI, r3
 801434a:	f3bf 8f6f 	isb	sy
 801434e:	f3bf 8f4f 	dsb	sy
 8014352:	b662      	cpsie	i
 8014354:	617b      	str	r3, [r7, #20]
}
 8014356:	bf00      	nop
 8014358:	bf00      	nop
 801435a:	e7fd      	b.n	8014358 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801435c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801435e:	685a      	ldr	r2, [r3, #4]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	1ad2      	subs	r2, r2, r3
 8014364:	2308      	movs	r3, #8
 8014366:	005b      	lsls	r3, r3, #1
 8014368:	429a      	cmp	r2, r3
 801436a:	d926      	bls.n	80143ba <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801436c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4413      	add	r3, r2
 8014372:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014376:	f003 0307 	and.w	r3, r3, #7
 801437a:	2b00      	cmp	r3, #0
 801437c:	d00d      	beq.n	801439a <pvPortMalloc+0x1ce>
    __asm volatile
 801437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014382:	b672      	cpsid	i
 8014384:	f383 8811 	msr	BASEPRI, r3
 8014388:	f3bf 8f6f 	isb	sy
 801438c:	f3bf 8f4f 	dsb	sy
 8014390:	b662      	cpsie	i
 8014392:	613b      	str	r3, [r7, #16]
}
 8014394:	bf00      	nop
 8014396:	bf00      	nop
 8014398:	e7fd      	b.n	8014396 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801439a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801439c:	685a      	ldr	r2, [r3, #4]
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	1ad2      	subs	r2, r2, r3
 80143a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143a4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80143a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143a8:	687a      	ldr	r2, [r7, #4]
 80143aa:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80143ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143ae:	681a      	ldr	r2, [r3, #0]
 80143b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143b2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80143b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80143b8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80143ba:	4b20      	ldr	r3, [pc, #128]	@ (801443c <pvPortMalloc+0x270>)
 80143bc:	681a      	ldr	r2, [r3, #0]
 80143be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143c0:	685b      	ldr	r3, [r3, #4]
 80143c2:	1ad3      	subs	r3, r2, r3
 80143c4:	4a1d      	ldr	r2, [pc, #116]	@ (801443c <pvPortMalloc+0x270>)
 80143c6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80143c8:	4b1c      	ldr	r3, [pc, #112]	@ (801443c <pvPortMalloc+0x270>)
 80143ca:	681a      	ldr	r2, [r3, #0]
 80143cc:	4b1f      	ldr	r3, [pc, #124]	@ (801444c <pvPortMalloc+0x280>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d203      	bcs.n	80143dc <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80143d4:	4b19      	ldr	r3, [pc, #100]	@ (801443c <pvPortMalloc+0x270>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	4a1c      	ldr	r2, [pc, #112]	@ (801444c <pvPortMalloc+0x280>)
 80143da:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80143dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80143e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143e6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80143e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143ea:	2200      	movs	r2, #0
 80143ec:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80143ee:	4b18      	ldr	r3, [pc, #96]	@ (8014450 <pvPortMalloc+0x284>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	3301      	adds	r3, #1
 80143f4:	4a16      	ldr	r2, [pc, #88]	@ (8014450 <pvPortMalloc+0x284>)
 80143f6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80143f8:	f7fd fda4 	bl	8011f44 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 80143fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d101      	bne.n	8014406 <pvPortMalloc+0x23a>
        {
            vApplicationMallocFailedHook();
 8014402:	f7ec fad5 	bl	80009b0 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014408:	f003 0307 	and.w	r3, r3, #7
 801440c:	2b00      	cmp	r3, #0
 801440e:	d00d      	beq.n	801442c <pvPortMalloc+0x260>
    __asm volatile
 8014410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014414:	b672      	cpsid	i
 8014416:	f383 8811 	msr	BASEPRI, r3
 801441a:	f3bf 8f6f 	isb	sy
 801441e:	f3bf 8f4f 	dsb	sy
 8014422:	b662      	cpsie	i
 8014424:	60fb      	str	r3, [r7, #12]
}
 8014426:	bf00      	nop
 8014428:	bf00      	nop
 801442a:	e7fd      	b.n	8014428 <pvPortMalloc+0x25c>
    return pvReturn;
 801442c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801442e:	4618      	mov	r0, r3
 8014430:	3738      	adds	r7, #56	@ 0x38
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}
 8014436:	bf00      	nop
 8014438:	2405a14c 	.word	0x2405a14c
 801443c:	2405a150 	.word	0x2405a150
 8014440:	2405a144 	.word	0x2405a144
 8014444:	2401a144 	.word	0x2401a144
 8014448:	2405a143 	.word	0x2405a143
 801444c:	2405a154 	.word	0x2405a154
 8014450:	2405a158 	.word	0x2405a158

08014454 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b088      	sub	sp, #32
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d066      	beq.n	8014534 <vPortFree+0xe0>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8014466:	2308      	movs	r3, #8
 8014468:	425b      	negs	r3, r3
 801446a:	69fa      	ldr	r2, [r7, #28]
 801446c:	4413      	add	r3, r2
 801446e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8014474:	69bb      	ldr	r3, [r7, #24]
 8014476:	4a31      	ldr	r2, [pc, #196]	@ (801453c <vPortFree+0xe8>)
 8014478:	4293      	cmp	r3, r2
 801447a:	d305      	bcc.n	8014488 <vPortFree+0x34>
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	4a30      	ldr	r2, [pc, #192]	@ (8014540 <vPortFree+0xec>)
 8014480:	4293      	cmp	r3, r2
 8014482:	d801      	bhi.n	8014488 <vPortFree+0x34>
 8014484:	2301      	movs	r3, #1
 8014486:	e000      	b.n	801448a <vPortFree+0x36>
 8014488:	2300      	movs	r3, #0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d10d      	bne.n	80144aa <vPortFree+0x56>
    __asm volatile
 801448e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014492:	b672      	cpsid	i
 8014494:	f383 8811 	msr	BASEPRI, r3
 8014498:	f3bf 8f6f 	isb	sy
 801449c:	f3bf 8f4f 	dsb	sy
 80144a0:	b662      	cpsie	i
 80144a2:	617b      	str	r3, [r7, #20]
}
 80144a4:	bf00      	nop
 80144a6:	bf00      	nop
 80144a8:	e7fd      	b.n	80144a6 <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	db0d      	blt.n	80144ce <vPortFree+0x7a>
    __asm volatile
 80144b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144b6:	b672      	cpsid	i
 80144b8:	f383 8811 	msr	BASEPRI, r3
 80144bc:	f3bf 8f6f 	isb	sy
 80144c0:	f3bf 8f4f 	dsb	sy
 80144c4:	b662      	cpsie	i
 80144c6:	613b      	str	r3, [r7, #16]
}
 80144c8:	bf00      	nop
 80144ca:	bf00      	nop
 80144cc:	e7fd      	b.n	80144ca <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80144ce:	69bb      	ldr	r3, [r7, #24]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d00d      	beq.n	80144f2 <vPortFree+0x9e>
    __asm volatile
 80144d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144da:	b672      	cpsid	i
 80144dc:	f383 8811 	msr	BASEPRI, r3
 80144e0:	f3bf 8f6f 	isb	sy
 80144e4:	f3bf 8f4f 	dsb	sy
 80144e8:	b662      	cpsie	i
 80144ea:	60fb      	str	r3, [r7, #12]
}
 80144ec:	bf00      	nop
 80144ee:	bf00      	nop
 80144f0:	e7fd      	b.n	80144ee <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	685b      	ldr	r3, [r3, #4]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	da1c      	bge.n	8014534 <vPortFree+0xe0>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80144fa:	69bb      	ldr	r3, [r7, #24]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d118      	bne.n	8014534 <vPortFree+0xe0>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801450a:	69bb      	ldr	r3, [r7, #24]
 801450c:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 801450e:	f7fd fd0b 	bl	8011f28 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8014512:	69bb      	ldr	r3, [r7, #24]
 8014514:	685a      	ldr	r2, [r3, #4]
 8014516:	4b0b      	ldr	r3, [pc, #44]	@ (8014544 <vPortFree+0xf0>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4413      	add	r3, r2
 801451c:	4a09      	ldr	r2, [pc, #36]	@ (8014544 <vPortFree+0xf0>)
 801451e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014520:	69b8      	ldr	r0, [r7, #24]
 8014522:	f000 f86d 	bl	8014600 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8014526:	4b08      	ldr	r3, [pc, #32]	@ (8014548 <vPortFree+0xf4>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	3301      	adds	r3, #1
 801452c:	4a06      	ldr	r2, [pc, #24]	@ (8014548 <vPortFree+0xf4>)
 801452e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8014530:	f7fd fd08 	bl	8011f44 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8014534:	bf00      	nop
 8014536:	3720      	adds	r7, #32
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}
 801453c:	2401a144 	.word	0x2401a144
 8014540:	2405a143 	.word	0x2405a143
 8014544:	2405a150 	.word	0x2405a150
 8014548:	2405a15c 	.word	0x2405a15c

0801454c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 801454c:	b480      	push	{r7}
 801454e:	b085      	sub	sp, #20
 8014550:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014552:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8014556:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8014558:	4b24      	ldr	r3, [pc, #144]	@ (80145ec <prvHeapInit+0xa0>)
 801455a:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	f003 0307 	and.w	r3, r3, #7
 8014562:	2b00      	cmp	r3, #0
 8014564:	d00c      	beq.n	8014580 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	3307      	adds	r3, #7
 801456a:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	f023 0307 	bic.w	r3, r3, #7
 8014572:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8014574:	68ba      	ldr	r2, [r7, #8]
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	1ad3      	subs	r3, r2, r3
 801457a:	4a1c      	ldr	r2, [pc, #112]	@ (80145ec <prvHeapInit+0xa0>)
 801457c:	4413      	add	r3, r2
 801457e:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	4a1b      	ldr	r2, [pc, #108]	@ (80145f0 <prvHeapInit+0xa4>)
 8014584:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8014586:	4b1a      	ldr	r3, [pc, #104]	@ (80145f0 <prvHeapInit+0xa4>)
 8014588:	2200      	movs	r2, #0
 801458a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 801458c:	68fa      	ldr	r2, [r7, #12]
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	4413      	add	r3, r2
 8014592:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8014594:	2208      	movs	r2, #8
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	1a9b      	subs	r3, r3, r2
 801459a:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f023 0307 	bic.w	r3, r3, #7
 80145a2:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	4a13      	ldr	r2, [pc, #76]	@ (80145f4 <prvHeapInit+0xa8>)
 80145a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80145aa:	4b12      	ldr	r3, [pc, #72]	@ (80145f4 <prvHeapInit+0xa8>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	2200      	movs	r2, #0
 80145b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80145b2:	4b10      	ldr	r3, [pc, #64]	@ (80145f4 <prvHeapInit+0xa8>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	2200      	movs	r2, #0
 80145b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	687a      	ldr	r2, [r7, #4]
 80145c2:	1ad2      	subs	r2, r2, r3
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80145c8:	4b0a      	ldr	r3, [pc, #40]	@ (80145f4 <prvHeapInit+0xa8>)
 80145ca:	681a      	ldr	r2, [r3, #0]
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	4a08      	ldr	r2, [pc, #32]	@ (80145f8 <prvHeapInit+0xac>)
 80145d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	685b      	ldr	r3, [r3, #4]
 80145dc:	4a07      	ldr	r2, [pc, #28]	@ (80145fc <prvHeapInit+0xb0>)
 80145de:	6013      	str	r3, [r2, #0]
}
 80145e0:	bf00      	nop
 80145e2:	3714      	adds	r7, #20
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr
 80145ec:	2401a144 	.word	0x2401a144
 80145f0:	2405a144 	.word	0x2405a144
 80145f4:	2405a14c 	.word	0x2405a14c
 80145f8:	2405a154 	.word	0x2405a154
 80145fc:	2405a150 	.word	0x2405a150

08014600 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8014600:	b480      	push	{r7}
 8014602:	b087      	sub	sp, #28
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8014608:	4b37      	ldr	r3, [pc, #220]	@ (80146e8 <prvInsertBlockIntoFreeList+0xe8>)
 801460a:	617b      	str	r3, [r7, #20]
 801460c:	e002      	b.n	8014614 <prvInsertBlockIntoFreeList+0x14>
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	617b      	str	r3, [r7, #20]
 8014614:	697b      	ldr	r3, [r7, #20]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	687a      	ldr	r2, [r7, #4]
 801461a:	429a      	cmp	r2, r3
 801461c:	d8f7      	bhi.n	801460e <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 801461e:	697b      	ldr	r3, [r7, #20]
 8014620:	4a31      	ldr	r2, [pc, #196]	@ (80146e8 <prvInsertBlockIntoFreeList+0xe8>)
 8014622:	4293      	cmp	r3, r2
 8014624:	d01a      	beq.n	801465c <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8014626:	697b      	ldr	r3, [r7, #20]
 8014628:	4a30      	ldr	r2, [pc, #192]	@ (80146ec <prvInsertBlockIntoFreeList+0xec>)
 801462a:	4293      	cmp	r3, r2
 801462c:	d305      	bcc.n	801463a <prvInsertBlockIntoFreeList+0x3a>
 801462e:	697b      	ldr	r3, [r7, #20]
 8014630:	4a2f      	ldr	r2, [pc, #188]	@ (80146f0 <prvInsertBlockIntoFreeList+0xf0>)
 8014632:	4293      	cmp	r3, r2
 8014634:	d801      	bhi.n	801463a <prvInsertBlockIntoFreeList+0x3a>
 8014636:	2301      	movs	r3, #1
 8014638:	e000      	b.n	801463c <prvInsertBlockIntoFreeList+0x3c>
 801463a:	2300      	movs	r3, #0
 801463c:	2b00      	cmp	r3, #0
 801463e:	d10d      	bne.n	801465c <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 8014640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014644:	b672      	cpsid	i
 8014646:	f383 8811 	msr	BASEPRI, r3
 801464a:	f3bf 8f6f 	isb	sy
 801464e:	f3bf 8f4f 	dsb	sy
 8014652:	b662      	cpsie	i
 8014654:	60fb      	str	r3, [r7, #12]
}
 8014656:	bf00      	nop
 8014658:	bf00      	nop
 801465a:	e7fd      	b.n	8014658 <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014660:	697b      	ldr	r3, [r7, #20]
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	693a      	ldr	r2, [r7, #16]
 8014666:	4413      	add	r3, r2
 8014668:	687a      	ldr	r2, [r7, #4]
 801466a:	429a      	cmp	r2, r3
 801466c:	d108      	bne.n	8014680 <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801466e:	697b      	ldr	r3, [r7, #20]
 8014670:	685a      	ldr	r2, [r3, #4]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	685b      	ldr	r3, [r3, #4]
 8014676:	441a      	add	r2, r3
 8014678:	697b      	ldr	r3, [r7, #20]
 801467a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 801467c:	697b      	ldr	r3, [r7, #20]
 801467e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	685b      	ldr	r3, [r3, #4]
 8014688:	693a      	ldr	r2, [r7, #16]
 801468a:	441a      	add	r2, r3
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	429a      	cmp	r2, r3
 8014692:	d118      	bne.n	80146c6 <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8014694:	697b      	ldr	r3, [r7, #20]
 8014696:	681a      	ldr	r2, [r3, #0]
 8014698:	4b16      	ldr	r3, [pc, #88]	@ (80146f4 <prvInsertBlockIntoFreeList+0xf4>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	429a      	cmp	r2, r3
 801469e:	d00d      	beq.n	80146bc <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	685a      	ldr	r2, [r3, #4]
 80146a4:	697b      	ldr	r3, [r7, #20]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	685b      	ldr	r3, [r3, #4]
 80146aa:	441a      	add	r2, r3
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	681a      	ldr	r2, [r3, #0]
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	601a      	str	r2, [r3, #0]
 80146ba:	e008      	b.n	80146ce <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80146bc:	4b0d      	ldr	r3, [pc, #52]	@ (80146f4 <prvInsertBlockIntoFreeList+0xf4>)
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	601a      	str	r2, [r3, #0]
 80146c4:	e003      	b.n	80146ce <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	681a      	ldr	r2, [r3, #0]
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80146ce:	697a      	ldr	r2, [r7, #20]
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	429a      	cmp	r2, r3
 80146d4:	d002      	beq.n	80146dc <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80146d6:	697b      	ldr	r3, [r7, #20]
 80146d8:	687a      	ldr	r2, [r7, #4]
 80146da:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80146dc:	bf00      	nop
 80146de:	371c      	adds	r7, #28
 80146e0:	46bd      	mov	sp, r7
 80146e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e6:	4770      	bx	lr
 80146e8:	2405a144 	.word	0x2405a144
 80146ec:	2401a144 	.word	0x2401a144
 80146f0:	2405a143 	.word	0x2405a143
 80146f4:	2405a14c 	.word	0x2405a14c

080146f8 <crc32_init_context>:
static uint32_t now;
static void send_reset(struct min_context *self);
#endif

static void crc32_init_context(struct crc32_context *context)
{
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
    context->crc = 0xffffffffU;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f04f 32ff 	mov.w	r2, #4294967295
 8014706:	601a      	str	r2, [r3, #0]
}
 8014708:	bf00      	nop
 801470a:	370c      	adds	r7, #12
 801470c:	46bd      	mov	sp, r7
 801470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014712:	4770      	bx	lr

08014714 <crc32_step>:

static void crc32_step(struct crc32_context *context, uint8_t byte)
{
 8014714:	b480      	push	{r7}
 8014716:	b085      	sub	sp, #20
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	460b      	mov	r3, r1
 801471e:	70fb      	strb	r3, [r7, #3]
    uint32_t j;
    context->crc ^= byte;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	681a      	ldr	r2, [r3, #0]
 8014724:	78fb      	ldrb	r3, [r7, #3]
 8014726:	405a      	eors	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	601a      	str	r2, [r3, #0]
    for (j = 0; j < 8; j++) {
 801472c:	2300      	movs	r3, #0
 801472e:	60fb      	str	r3, [r7, #12]
 8014730:	e011      	b.n	8014756 <crc32_step+0x42>
        uint32_t mask = (uint32_t) - (context->crc & 1U);
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	f003 0301 	and.w	r3, r3, #1
 801473a:	425b      	negs	r3, r3
 801473c:	60bb      	str	r3, [r7, #8]
        context->crc = (context->crc >> 1) ^ (0xedb88320U & mask);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	085a      	lsrs	r2, r3, #1
 8014744:	68b9      	ldr	r1, [r7, #8]
 8014746:	4b09      	ldr	r3, [pc, #36]	@ (801476c <crc32_step+0x58>)
 8014748:	400b      	ands	r3, r1
 801474a:	405a      	eors	r2, r3
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	601a      	str	r2, [r3, #0]
    for (j = 0; j < 8; j++) {
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	3301      	adds	r3, #1
 8014754:	60fb      	str	r3, [r7, #12]
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	2b07      	cmp	r3, #7
 801475a:	d9ea      	bls.n	8014732 <crc32_step+0x1e>
    }
}
 801475c:	bf00      	nop
 801475e:	bf00      	nop
 8014760:	3714      	adds	r7, #20
 8014762:	46bd      	mov	sp, r7
 8014764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014768:	4770      	bx	lr
 801476a:	bf00      	nop
 801476c:	edb88320 	.word	0xedb88320

08014770 <crc32_finalize>:

static uint32_t crc32_finalize(struct crc32_context *context)
{
 8014770:	b480      	push	{r7}
 8014772:	b083      	sub	sp, #12
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
    return ~context->crc;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	43db      	mvns	r3, r3
}
 801477e:	4618      	mov	r0, r3
 8014780:	370c      	adds	r7, #12
 8014782:	46bd      	mov	sp, r7
 8014784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014788:	4770      	bx	lr

0801478a <stuffed_tx_byte>:

static void stuffed_tx_byte(struct min_context *self, uint8_t byte, bool crc)
{
 801478a:	b580      	push	{r7, lr}
 801478c:	b082      	sub	sp, #8
 801478e:	af00      	add	r7, sp, #0
 8014790:	6078      	str	r0, [r7, #4]
 8014792:	460b      	mov	r3, r1
 8014794:	70fb      	strb	r3, [r7, #3]
 8014796:	4613      	mov	r3, r2
 8014798:	70bb      	strb	r3, [r7, #2]
    // Transmit the byte
    min_tx_byte(self->port, byte);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80147a0:	78fa      	ldrb	r2, [r7, #3]
 80147a2:	4611      	mov	r1, r2
 80147a4:	4618      	mov	r0, r3
 80147a6:	f000 fde1 	bl	801536c <min_tx_byte>
    if (crc) {
 80147aa:	78bb      	ldrb	r3, [r7, #2]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d007      	beq.n	80147c0 <stuffed_tx_byte+0x36>
        crc32_step(&self->tx_checksum, byte);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80147b6:	78fa      	ldrb	r2, [r7, #3]
 80147b8:	4611      	mov	r1, r2
 80147ba:	4618      	mov	r0, r3
 80147bc:	f7ff ffaa 	bl	8014714 <crc32_step>
    }

    // See if an additional stuff byte is needed
    if (byte == HEADER_BYTE) {
 80147c0:	78fb      	ldrb	r3, [r7, #3]
 80147c2:	2baa      	cmp	r3, #170	@ 0xaa
 80147c4:	d118      	bne.n	80147f8 <stuffed_tx_byte+0x6e>
        if (--self->tx_header_byte_countdown == 0) {
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80147cc:	3b01      	subs	r3, #1
 80147ce:	b2da      	uxtb	r2, r3
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d10f      	bne.n	8014800 <stuffed_tx_byte+0x76>
            min_tx_byte(self->port, STUFF_BYTE); // Stuff byte
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80147e6:	2155      	movs	r1, #85	@ 0x55
 80147e8:	4618      	mov	r0, r3
 80147ea:	f000 fdbf 	bl	801536c <min_tx_byte>
            self->tx_header_byte_countdown = 2U;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	2202      	movs	r2, #2
 80147f2:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
        }
    } else {
        self->tx_header_byte_countdown = 2U;
    }
}
 80147f6:	e003      	b.n	8014800 <stuffed_tx_byte+0x76>
        self->tx_header_byte_countdown = 2U;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2202      	movs	r2, #2
 80147fc:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
}
 8014800:	bf00      	nop
 8014802:	3708      	adds	r7, #8
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}

08014808 <on_wire_bytes>:

static void on_wire_bytes(struct min_context *self, uint8_t id_control, uint8_t seq, uint8_t const *payload_base, uint16_t payload_offset, uint16_t payload_mask, uint8_t payload_len)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b086      	sub	sp, #24
 801480c:	af00      	add	r7, sp, #0
 801480e:	60f8      	str	r0, [r7, #12]
 8014810:	607b      	str	r3, [r7, #4]
 8014812:	460b      	mov	r3, r1
 8014814:	72fb      	strb	r3, [r7, #11]
 8014816:	4613      	mov	r3, r2
 8014818:	72bb      	strb	r3, [r7, #10]
    uint8_t n, i;
    uint32_t checksum;

    self->tx_header_byte_countdown = 2U;
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	2202      	movs	r2, #2
 801481e:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    crc32_init_context(&self->tx_checksum);
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8014828:	4618      	mov	r0, r3
 801482a:	f7ff ff65 	bl	80146f8 <crc32_init_context>

    min_tx_start(self->port);
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014834:	4618      	mov	r0, r3
 8014836:	f000 fdaf 	bl	8015398 <min_tx_start>

    // Header is 3 bytes; because unstuffed will reset receiver immediately
    min_tx_byte(self->port, HEADER_BYTE);
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014840:	21aa      	movs	r1, #170	@ 0xaa
 8014842:	4618      	mov	r0, r3
 8014844:	f000 fd92 	bl	801536c <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801484e:	21aa      	movs	r1, #170	@ 0xaa
 8014850:	4618      	mov	r0, r3
 8014852:	f000 fd8b 	bl	801536c <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801485c:	21aa      	movs	r1, #170	@ 0xaa
 801485e:	4618      	mov	r0, r3
 8014860:	f000 fd84 	bl	801536c <min_tx_byte>

    stuffed_tx_byte(self, id_control, true);
 8014864:	7afb      	ldrb	r3, [r7, #11]
 8014866:	2201      	movs	r2, #1
 8014868:	4619      	mov	r1, r3
 801486a:	68f8      	ldr	r0, [r7, #12]
 801486c:	f7ff ff8d 	bl	801478a <stuffed_tx_byte>
    if (id_control & 0x80U) {
 8014870:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014874:	2b00      	cmp	r3, #0
 8014876:	da05      	bge.n	8014884 <on_wire_bytes+0x7c>
        // Send the sequence number if it is a transport frame
        stuffed_tx_byte(self, seq, true);
 8014878:	7abb      	ldrb	r3, [r7, #10]
 801487a:	2201      	movs	r2, #1
 801487c:	4619      	mov	r1, r3
 801487e:	68f8      	ldr	r0, [r7, #12]
 8014880:	f7ff ff83 	bl	801478a <stuffed_tx_byte>
    }

    stuffed_tx_byte(self, payload_len, true);
 8014884:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014888:	2201      	movs	r2, #1
 801488a:	4619      	mov	r1, r3
 801488c:	68f8      	ldr	r0, [r7, #12]
 801488e:	f7ff ff7c 	bl	801478a <stuffed_tx_byte>

    for (i = 0, n = payload_len; n > 0; n--, i++) {
 8014892:	2300      	movs	r3, #0
 8014894:	75bb      	strb	r3, [r7, #22]
 8014896:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801489a:	75fb      	strb	r3, [r7, #23]
 801489c:	e015      	b.n	80148ca <on_wire_bytes+0xc2>
        stuffed_tx_byte(self, payload_base[payload_offset], true);
 801489e:	8c3b      	ldrh	r3, [r7, #32]
 80148a0:	687a      	ldr	r2, [r7, #4]
 80148a2:	4413      	add	r3, r2
 80148a4:	781b      	ldrb	r3, [r3, #0]
 80148a6:	2201      	movs	r2, #1
 80148a8:	4619      	mov	r1, r3
 80148aa:	68f8      	ldr	r0, [r7, #12]
 80148ac:	f7ff ff6d 	bl	801478a <stuffed_tx_byte>
        payload_offset++;
 80148b0:	8c3b      	ldrh	r3, [r7, #32]
 80148b2:	3301      	adds	r3, #1
 80148b4:	843b      	strh	r3, [r7, #32]
        payload_offset &= payload_mask;
 80148b6:	8c3a      	ldrh	r2, [r7, #32]
 80148b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80148ba:	4013      	ands	r3, r2
 80148bc:	843b      	strh	r3, [r7, #32]
    for (i = 0, n = payload_len; n > 0; n--, i++) {
 80148be:	7dfb      	ldrb	r3, [r7, #23]
 80148c0:	3b01      	subs	r3, #1
 80148c2:	75fb      	strb	r3, [r7, #23]
 80148c4:	7dbb      	ldrb	r3, [r7, #22]
 80148c6:	3301      	adds	r3, #1
 80148c8:	75bb      	strb	r3, [r7, #22]
 80148ca:	7dfb      	ldrb	r3, [r7, #23]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d1e6      	bne.n	801489e <on_wire_bytes+0x96>
    }

    checksum = crc32_finalize(&self->tx_checksum);
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7ff ff4a 	bl	8014770 <crc32_finalize>
 80148dc:	6138      	str	r0, [r7, #16]

    // Network order is big-endian. A decent C compiler will spot that this
    // is extracting bytes and will use efficient instructions.
    stuffed_tx_byte(self, (uint8_t)((checksum >> 24) & 0xffU), false);
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	0e1b      	lsrs	r3, r3, #24
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	2200      	movs	r2, #0
 80148e6:	4619      	mov	r1, r3
 80148e8:	68f8      	ldr	r0, [r7, #12]
 80148ea:	f7ff ff4e 	bl	801478a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 16) & 0xffU), false);
 80148ee:	693b      	ldr	r3, [r7, #16]
 80148f0:	0c1b      	lsrs	r3, r3, #16
 80148f2:	b2db      	uxtb	r3, r3
 80148f4:	2200      	movs	r2, #0
 80148f6:	4619      	mov	r1, r3
 80148f8:	68f8      	ldr	r0, [r7, #12]
 80148fa:	f7ff ff46 	bl	801478a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 8) & 0xffU), false);
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	0a1b      	lsrs	r3, r3, #8
 8014902:	b2db      	uxtb	r3, r3
 8014904:	2200      	movs	r2, #0
 8014906:	4619      	mov	r1, r3
 8014908:	68f8      	ldr	r0, [r7, #12]
 801490a:	f7ff ff3e 	bl	801478a <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 0) & 0xffU), false);
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	b2db      	uxtb	r3, r3
 8014912:	2200      	movs	r2, #0
 8014914:	4619      	mov	r1, r3
 8014916:	68f8      	ldr	r0, [r7, #12]
 8014918:	f7ff ff37 	bl	801478a <stuffed_tx_byte>

    // Ensure end-of-frame doesn't contain 0xaa and confuse search for start-of-frame
    min_tx_byte(self->port, EOF_BYTE);
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014922:	2155      	movs	r1, #85	@ 0x55
 8014924:	4618      	mov	r0, r3
 8014926:	f000 fd21 	bl	801536c <min_tx_byte>

    min_tx_finished(self->port);
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014930:	4618      	mov	r0, r3
 8014932:	f000 fd3c 	bl	80153ae <min_tx_finished>
}
 8014936:	bf00      	nop
 8014938:	3718      	adds	r7, #24
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}

0801493e <transport_fifo_pop>:

#ifdef TRANSPORT_PROTOCOL

// Pops frame from front of queue, reclaims its ring buffer space
static void transport_fifo_pop(struct min_context *self)
{
 801493e:	b480      	push	{r7}
 8014940:	b085      	sub	sp, #20
 8014942:	af00      	add	r7, sp, #0
 8014944:	6078      	str	r0, [r7, #4]
#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_frames != 0);
#endif
    struct transport_frame *frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 801494c:	461a      	mov	r2, r3
 801494e:	4613      	mov	r3, r2
 8014950:	005b      	lsls	r3, r3, #1
 8014952:	4413      	add	r3, r2
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	687a      	ldr	r2, [r7, #4]
 8014958:	4413      	add	r3, r2
 801495a:	60fb      	str	r3, [r7, #12]

#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_ring_buffer_bytes >= frame->payload_len);
#endif

    self->transport_fifo.n_frames--;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8014962:	3b01      	subs	r3, #1
 8014964:	b2da      	uxtb	r2, r3
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    self->transport_fifo.head_idx++;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014972:	3301      	adds	r3, #1
 8014974:	b2da      	uxtb	r2, r3
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.head_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014982:	f003 030f 	and.w	r3, r3, #15
 8014986:	b2da      	uxtb	r2, r3
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.n_ring_buffer_bytes -= frame->payload_len;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8014994:	68fa      	ldr	r2, [r7, #12]
 8014996:	7992      	ldrb	r2, [r2, #6]
 8014998:	1a9b      	subs	r3, r3, r2
 801499a:	b29a      	uxth	r2, r3
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
}
 80149a2:	bf00      	nop
 80149a4:	3714      	adds	r7, #20
 80149a6:	46bd      	mov	sp, r7
 80149a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ac:	4770      	bx	lr

080149ae <transport_fifo_push>:

// Claim a buffer slot from the FIFO. Returns 0 if there is no space.
static struct transport_frame *transport_fifo_push(struct min_context *self, uint16_t data_size)
{
 80149ae:	b480      	push	{r7}
 80149b0:	b085      	sub	sp, #20
 80149b2:	af00      	add	r7, sp, #0
 80149b4:	6078      	str	r0, [r7, #4]
 80149b6:	460b      	mov	r3, r1
 80149b8:	807b      	strh	r3, [r7, #2]
    // A frame is only queued if there aren't too many frames in the FIFO and there is space in the
    // data ring buffer.
    struct transport_frame *ret = 0;
 80149ba:	2300      	movs	r3, #0
 80149bc:	60fb      	str	r3, [r7, #12]
    if (self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES) {
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80149c4:	2b0f      	cmp	r3, #15
 80149c6:	d868      	bhi.n	8014a9a <transport_fifo_push+0xec>
        // Is there space in the ring buffer for the frame payload?
        if (self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - data_size) {
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 80149ce:	461a      	mov	r2, r3
 80149d0:	887b      	ldrh	r3, [r7, #2]
 80149d2:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d85f      	bhi.n	8014a9a <transport_fifo_push+0xec>
            self->transport_fifo.n_frames++;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80149e0:	3301      	adds	r3, #1
 80149e2:	b2da      	uxtb	r2, r3
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            if (self->transport_fifo.n_frames > self->transport_fifo.n_frames_max) {
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	f893 20e2 	ldrb.w	r2, [r3, #226]	@ 0xe2
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 80149f6:	429a      	cmp	r2, r3
 80149f8:	d905      	bls.n	8014a06 <transport_fifo_push+0x58>
                // High-water mark of FIFO (for diagnostic purposes)
                self->transport_fifo.n_frames_max = self->transport_fifo.n_frames;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f893 20e2 	ldrb.w	r2, [r3, #226]	@ 0xe2
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            }
            // Create FIFO entry
            ret = &(self->transport_fifo.frames[self->transport_fifo.tail_idx]);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	4613      	mov	r3, r2
 8014a10:	005b      	lsls	r3, r3, #1
 8014a12:	4413      	add	r3, r2
 8014a14:	009b      	lsls	r3, r3, #2
 8014a16:	687a      	ldr	r2, [r7, #4]
 8014a18:	4413      	add	r3, r2
 8014a1a:	60fb      	str	r3, [r7, #12]
            ret->payload_offset = self->transport_fifo.ring_buffer_tail_offset;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	809a      	strh	r2, [r3, #4]

            // Claim ring buffer space
            self->transport_fifo.n_ring_buffer_bytes += data_size;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8014a2c:	887b      	ldrh	r3, [r7, #2]
 8014a2e:	4413      	add	r3, r2
 8014a30:	b29a      	uxth	r2, r3
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
            if (self->transport_fifo.n_ring_buffer_bytes > self->transport_fifo.n_ring_buffer_bytes_max) {
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f8b3 30de 	ldrh.w	r3, [r3, #222]	@ 0xde
 8014a44:	429a      	cmp	r2, r3
 8014a46:	d905      	bls.n	8014a54 <transport_fifo_push+0xa6>
                // High-water mark of ring buffer usage (for diagnostic purposes)
                self->transport_fifo.n_ring_buffer_bytes_max = self->transport_fifo.n_ring_buffer_bytes;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
            }
            self->transport_fifo.ring_buffer_tail_offset += data_size;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8014a5a:	887b      	ldrh	r3, [r7, #2]
 8014a5c:	4413      	add	r3, r2
 8014a5e:	b29a      	uxth	r2, r3
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
            self->transport_fifo.ring_buffer_tail_offset &= TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK;
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 8014a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014a70:	b29a      	uxth	r2, r3
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0

            // Claim FIFO space
            self->transport_fifo.tail_idx++;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8014a7e:	3301      	adds	r3, #1
 8014a80:	b2da      	uxtb	r2, r3
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            self->transport_fifo.tail_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8014a8e:	f003 030f 	and.w	r3, r3, #15
 8014a92:	b2da      	uxtb	r2, r3
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
//            min_debug_print("No FIFO payload space: data_size=%d, n_ring_buffer_bytes=%d\n", data_size, self->transport_fifo.n_ring_buffer_bytes);
        }
    } else {
//        min_debug_print("No FIFO frame slots\n");
    }
    return ret;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
}
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	3714      	adds	r7, #20
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa6:	4770      	bx	lr

08014aa8 <transport_fifo_get>:

// Return the nth frame in the FIFO
static struct transport_frame *transport_fifo_get(struct min_context *self, uint8_t n)
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b085      	sub	sp, #20
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	70fb      	strb	r3, [r7, #3]
    uint8_t idx = self->transport_fifo.head_idx;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014aba:	73fb      	strb	r3, [r7, #15]
    return &self->transport_fifo.frames[(idx + n) & TRANSPORT_FIFO_SIZE_FRAMES_MASK];
 8014abc:	7bfa      	ldrb	r2, [r7, #15]
 8014abe:	78fb      	ldrb	r3, [r7, #3]
 8014ac0:	4413      	add	r3, r2
 8014ac2:	b2db      	uxtb	r3, r3
 8014ac4:	f003 020f 	and.w	r2, r3, #15
 8014ac8:	4613      	mov	r3, r2
 8014aca:	005b      	lsls	r3, r3, #1
 8014acc:	4413      	add	r3, r2
 8014ace:	009b      	lsls	r3, r3, #2
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	4413      	add	r3, r2
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3714      	adds	r7, #20
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ade:	4770      	bx	lr

08014ae0 <transport_fifo_send>:

// Sends the given frame to the serial line
static void transport_fifo_send(struct min_context *self, struct transport_frame *frame)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b086      	sub	sp, #24
 8014ae4:	af04      	add	r7, sp, #16
 8014ae6:	6078      	str	r0, [r7, #4]
 8014ae8:	6039      	str	r1, [r7, #0]
//    min_debug_print("transport_fifo_send: min_id=%d, seq=%d, payload_len=%d\n", frame->min_id, frame->seq, frame->payload_len);
    on_wire_bytes(self, frame->min_id | (uint8_t)0x80U, frame->seq, payloads_ring_buffer, frame->payload_offset, TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK, frame->payload_len);
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	79db      	ldrb	r3, [r3, #7]
 8014aee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014af2:	b2d9      	uxtb	r1, r3
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	7a18      	ldrb	r0, [r3, #8]
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	889b      	ldrh	r3, [r3, #4]
 8014afc:	683a      	ldr	r2, [r7, #0]
 8014afe:	7992      	ldrb	r2, [r2, #6]
 8014b00:	9202      	str	r2, [sp, #8]
 8014b02:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8014b06:	9201      	str	r2, [sp, #4]
 8014b08:	9300      	str	r3, [sp, #0]
 8014b0a:	4b06      	ldr	r3, [pc, #24]	@ (8014b24 <transport_fifo_send+0x44>)
 8014b0c:	4602      	mov	r2, r0
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f7ff fe7a 	bl	8014808 <on_wire_bytes>
    frame->last_sent_time_ms = now;
 8014b14:	4b04      	ldr	r3, [pc, #16]	@ (8014b28 <transport_fifo_send+0x48>)
 8014b16:	681a      	ldr	r2, [r3, #0]
 8014b18:	683b      	ldr	r3, [r7, #0]
 8014b1a:	601a      	str	r2, [r3, #0]
}
 8014b1c:	bf00      	nop
 8014b1e:	3708      	adds	r7, #8
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}
 8014b24:	2405a160 	.word	0x2405a160
 8014b28:	2405a560 	.word	0x2405a560

08014b2c <send_ack>:

// We don't queue an ACK frame - we send it straight away (if there's space to do so)
static void send_ack(struct min_context *self)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b086      	sub	sp, #24
 8014b30:	af04      	add	r7, sp, #16
 8014b32:	6078      	str	r0, [r7, #4]
    // In the embedded end we don't reassemble out-of-order frames and so never ask for retransmits. Payload is
    // always the same as the sequence number.
//    min_debug_print("send ACK: seq=%d\n", self->transport_fifo.rn);
    if (ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f000 fc06 	bl	801534c <min_tx_space>
 8014b40:	4603      	mov	r3, r0
 8014b42:	2b0a      	cmp	r3, #10
 8014b44:	d913      	bls.n	8014b6e <send_ack+0x42>
        on_wire_bytes(self, ACK, self->transport_fifo.rn, &self->transport_fifo.rn, 0, 0xffU, 1U);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	f893 20e8 	ldrb.w	r2, [r3, #232]	@ 0xe8
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	33e8      	adds	r3, #232	@ 0xe8
 8014b50:	2101      	movs	r1, #1
 8014b52:	9102      	str	r1, [sp, #8]
 8014b54:	21ff      	movs	r1, #255	@ 0xff
 8014b56:	9101      	str	r1, [sp, #4]
 8014b58:	2100      	movs	r1, #0
 8014b5a:	9100      	str	r1, [sp, #0]
 8014b5c:	21ff      	movs	r1, #255	@ 0xff
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f7ff fe52 	bl	8014808 <on_wire_bytes>
        self->transport_fifo.last_sent_ack_time_ms = now;
 8014b64:	4b04      	ldr	r3, [pc, #16]	@ (8014b78 <send_ack+0x4c>)
 8014b66:	681a      	ldr	r2, [r3, #0]
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    }
}
 8014b6e:	bf00      	nop
 8014b70:	3708      	adds	r7, #8
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}
 8014b76:	bf00      	nop
 8014b78:	2405a560 	.word	0x2405a560

08014b7c <send_reset>:

// We don't queue an RESET frame - we send it straight away (if there's space to do so)
static void send_reset(struct min_context *self)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b086      	sub	sp, #24
 8014b80:	af04      	add	r7, sp, #16
 8014b82:	6078      	str	r0, [r7, #4]
//    min_debug_print("send RESET\n");
    if (ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f000 fbde 	bl	801534c <min_tx_space>
 8014b90:	4603      	mov	r3, r0
 8014b92:	2b0a      	cmp	r3, #10
 8014b94:	d90b      	bls.n	8014bae <send_reset+0x32>
        on_wire_bytes(self, RESET, 0, 0, 0, 0, 0);
 8014b96:	2300      	movs	r3, #0
 8014b98:	9302      	str	r3, [sp, #8]
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	9301      	str	r3, [sp, #4]
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	9300      	str	r3, [sp, #0]
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	21fe      	movs	r1, #254	@ 0xfe
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f7ff fe2d 	bl	8014808 <on_wire_bytes>
    }
}
 8014bae:	bf00      	nop
 8014bb0:	3708      	adds	r7, #8
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
	...

08014bb8 <transport_fifo_reset>:

static void transport_fifo_reset(struct min_context *self)
{
 8014bb8:	b480      	push	{r7}
 8014bba:	b083      	sub	sp, #12
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
    // Clear down the transmission FIFO queue
    self->transport_fifo.n_frames = 0;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    self->transport_fifo.head_idx = 0;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.tail_idx = 0;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
    self->transport_fifo.n_ring_buffer_bytes = 0;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
    self->transport_fifo.ring_buffer_tail_offset = 0;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	2200      	movs	r2, #0
 8014be4:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
    self->transport_fifo.sn_max = 0;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	2200      	movs	r2, #0
 8014bec:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    self->transport_fifo.sn_min = 0;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
    self->transport_fifo.rn = 0;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

    // Reset the timers
    self->transport_fifo.last_received_anything_ms = now;
 8014c00:	4b09      	ldr	r3, [pc, #36]	@ (8014c28 <transport_fifo_reset+0x70>)
 8014c02:	681a      	ldr	r2, [r3, #0]
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    self->transport_fifo.last_sent_ack_time_ms = now;
 8014c0a:	4b07      	ldr	r3, [pc, #28]	@ (8014c28 <transport_fifo_reset+0x70>)
 8014c0c:	681a      	ldr	r2, [r3, #0]
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    self->transport_fifo.last_received_frame_ms = 0;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2200      	movs	r2, #0
 8014c18:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8014c1c:	bf00      	nop
 8014c1e:	370c      	adds	r7, #12
 8014c20:	46bd      	mov	sp, r7
 8014c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c26:	4770      	bx	lr
 8014c28:	2405a560 	.word	0x2405a560

08014c2c <min_transport_reset>:

void min_transport_reset(struct min_context *self, bool inform_other_side)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b082      	sub	sp, #8
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	460b      	mov	r3, r1
 8014c36:	70fb      	strb	r3, [r7, #3]
//    min_debug_print("Resetting %s other side\n", inform_other_side ? "and informing" : "without informing");
    if (inform_other_side) {
 8014c38:	78fb      	ldrb	r3, [r7, #3]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d002      	beq.n	8014c44 <min_transport_reset+0x18>
        // Tell the other end we have gone away
        send_reset(self);
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f7ff ff9c 	bl	8014b7c <send_reset>
    }

    // Throw our frames away
    transport_fifo_reset(self);
 8014c44:	6878      	ldr	r0, [r7, #4]
 8014c46:	f7ff ffb7 	bl	8014bb8 <transport_fifo_reset>
}
 8014c4a:	bf00      	nop
 8014c4c:	3708      	adds	r7, #8
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
	...

08014c54 <min_queue_frame>:

// Queues a MIN ID / payload frame into the outgoing FIFO
// API call.
// Returns true if the frame was queued OK.
bool min_queue_frame(struct min_context *self, uint8_t min_id, uint8_t const *payload, uint8_t payload_len)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b088      	sub	sp, #32
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	60f8      	str	r0, [r7, #12]
 8014c5c:	607a      	str	r2, [r7, #4]
 8014c5e:	461a      	mov	r2, r3
 8014c60:	460b      	mov	r3, r1
 8014c62:	72fb      	strb	r3, [r7, #11]
 8014c64:	4613      	mov	r3, r2
 8014c66:	72bb      	strb	r3, [r7, #10]
    struct transport_frame *frame = transport_fifo_push(self, payload_len); // Claim a FIFO slot, reserve space for payload
 8014c68:	7abb      	ldrb	r3, [r7, #10]
 8014c6a:	b29b      	uxth	r3, r3
 8014c6c:	4619      	mov	r1, r3
 8014c6e:	68f8      	ldr	r0, [r7, #12]
 8014c70:	f7ff fe9d 	bl	80149ae <transport_fifo_push>
 8014c74:	6178      	str	r0, [r7, #20]

    // We are just queueing here: the poll() function puts the frame into the window and on to the wire
    if (frame != 0) {
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d025      	beq.n	8014cc8 <min_queue_frame+0x74>
        uint32_t i;
        // Copy frame details into frame slot, copy payload into ring buffer
        frame->min_id = min_id & (uint8_t)0x3fU;
 8014c7c:	7afb      	ldrb	r3, [r7, #11]
 8014c7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014c82:	b2da      	uxtb	r2, r3
 8014c84:	697b      	ldr	r3, [r7, #20]
 8014c86:	71da      	strb	r2, [r3, #7]
        frame->payload_len = payload_len;
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	7aba      	ldrb	r2, [r7, #10]
 8014c8c:	719a      	strb	r2, [r3, #6]

        uint16_t payload_offset = frame->payload_offset;
 8014c8e:	697b      	ldr	r3, [r7, #20]
 8014c90:	889b      	ldrh	r3, [r3, #4]
 8014c92:	837b      	strh	r3, [r7, #26]
        for (i = 0; i < payload_len; i++) {
 8014c94:	2300      	movs	r3, #0
 8014c96:	61fb      	str	r3, [r7, #28]
 8014c98:	e010      	b.n	8014cbc <min_queue_frame+0x68>
            payloads_ring_buffer[payload_offset] = payload[i];
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	69fb      	ldr	r3, [r7, #28]
 8014c9e:	441a      	add	r2, r3
 8014ca0:	8b7b      	ldrh	r3, [r7, #26]
 8014ca2:	7811      	ldrb	r1, [r2, #0]
 8014ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8014ce0 <min_queue_frame+0x8c>)
 8014ca6:	54d1      	strb	r1, [r2, r3]
            payload_offset++;
 8014ca8:	8b7b      	ldrh	r3, [r7, #26]
 8014caa:	3301      	adds	r3, #1
 8014cac:	837b      	strh	r3, [r7, #26]
            payload_offset &= TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK;
 8014cae:	8b7b      	ldrh	r3, [r7, #26]
 8014cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014cb4:	837b      	strh	r3, [r7, #26]
        for (i = 0; i < payload_len; i++) {
 8014cb6:	69fb      	ldr	r3, [r7, #28]
 8014cb8:	3301      	adds	r3, #1
 8014cba:	61fb      	str	r3, [r7, #28]
 8014cbc:	7abb      	ldrb	r3, [r7, #10]
 8014cbe:	69fa      	ldr	r2, [r7, #28]
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d3ea      	bcc.n	8014c9a <min_queue_frame+0x46>
        }
//        min_debug_print("Queued ID=%d, len=%d\n", min_id, payload_len);
        return true;
 8014cc4:	2301      	movs	r3, #1
 8014cc6:	e007      	b.n	8014cd8 <min_queue_frame+0x84>
    } else {
        self->transport_fifo.dropped_frames++;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8014cce:	1c5a      	adds	r2, r3, #1
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        return false;
 8014cd6:	2300      	movs	r3, #0
    }
}
 8014cd8:	4618      	mov	r0, r3
 8014cda:	3720      	adds	r7, #32
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bd80      	pop	{r7, pc}
 8014ce0:	2405a160 	.word	0x2405a160

08014ce4 <min_queue_has_space_for_frame>:

bool min_queue_has_space_for_frame(struct min_context *self, uint8_t payload_len)
{
 8014ce4:	b480      	push	{r7}
 8014ce6:	b083      	sub	sp, #12
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	460b      	mov	r3, r1
 8014cee:	70fb      	strb	r3, [r7, #3]
    return self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES &&
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8014cf6:	2b0f      	cmp	r3, #15
 8014cf8:	d80a      	bhi.n	8014d10 <min_queue_has_space_for_frame+0x2c>
           self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - payload_len;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8014d00:	461a      	mov	r2, r3
 8014d02:	78fb      	ldrb	r3, [r7, #3]
 8014d04:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
    return self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES &&
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d801      	bhi.n	8014d10 <min_queue_has_space_for_frame+0x2c>
 8014d0c:	2301      	movs	r3, #1
 8014d0e:	e000      	b.n	8014d12 <min_queue_has_space_for_frame+0x2e>
 8014d10:	2300      	movs	r3, #0
 8014d12:	f003 0301 	and.w	r3, r3, #1
 8014d16:	b2db      	uxtb	r3, r3
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	370c      	adds	r7, #12
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d22:	4770      	bx	lr

08014d24 <find_retransmit_frame>:

// Finds the frame in the window that was sent least recently
static struct transport_frame *find_retransmit_frame(struct min_context *self)
{
 8014d24:	b480      	push	{r7}
 8014d26:	b089      	sub	sp, #36	@ 0x24
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
    uint8_t idx;
    uint8_t i;
    uint8_t window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8014d38:	1ad3      	subs	r3, r2, r3
 8014d3a:	74fb      	strb	r3, [r7, #19]
    assert(window_size > 0);
    assert(window_size <= self->transport_fifo.n_frames);
#endif

    // Start with the head of the queue and call this the oldest
    struct transport_frame *oldest_frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014d42:	461a      	mov	r2, r3
 8014d44:	4613      	mov	r3, r2
 8014d46:	005b      	lsls	r3, r3, #1
 8014d48:	4413      	add	r3, r2
 8014d4a:	009b      	lsls	r3, r3, #2
 8014d4c:	687a      	ldr	r2, [r7, #4]
 8014d4e:	4413      	add	r3, r2
 8014d50:	61bb      	str	r3, [r7, #24]
    uint32_t oldest_elapsed_time = now - oldest_frame->last_sent_time_ms;
 8014d52:	4b1e      	ldr	r3, [pc, #120]	@ (8014dcc <find_retransmit_frame+0xa8>)
 8014d54:	681a      	ldr	r2, [r3, #0]
 8014d56:	69bb      	ldr	r3, [r7, #24]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	1ad3      	subs	r3, r2, r3
 8014d5c:	617b      	str	r3, [r7, #20]

    idx = self->transport_fifo.head_idx;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014d64:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < window_size; i++) {
 8014d66:	2300      	movs	r3, #0
 8014d68:	77bb      	strb	r3, [r7, #30]
 8014d6a:	e023      	b.n	8014db4 <find_retransmit_frame+0x90>
        uint32_t elapsed = now - self->transport_fifo.frames[idx].last_sent_time_ms;
 8014d6c:	4b17      	ldr	r3, [pc, #92]	@ (8014dcc <find_retransmit_frame+0xa8>)
 8014d6e:	6819      	ldr	r1, [r3, #0]
 8014d70:	7ffa      	ldrb	r2, [r7, #31]
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	4613      	mov	r3, r2
 8014d76:	005b      	lsls	r3, r3, #1
 8014d78:	4413      	add	r3, r2
 8014d7a:	009b      	lsls	r3, r3, #2
 8014d7c:	4403      	add	r3, r0
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	1acb      	subs	r3, r1, r3
 8014d82:	60fb      	str	r3, [r7, #12]
        if (elapsed > oldest_elapsed_time) { // Strictly older only; otherwise the earlier frame is deemed the older
 8014d84:	68fa      	ldr	r2, [r7, #12]
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d909      	bls.n	8014da0 <find_retransmit_frame+0x7c>
            oldest_elapsed_time = elapsed;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	617b      	str	r3, [r7, #20]
            oldest_frame = &self->transport_fifo.frames[idx];
 8014d90:	7ffa      	ldrb	r2, [r7, #31]
 8014d92:	4613      	mov	r3, r2
 8014d94:	005b      	lsls	r3, r3, #1
 8014d96:	4413      	add	r3, r2
 8014d98:	009b      	lsls	r3, r3, #2
 8014d9a:	687a      	ldr	r2, [r7, #4]
 8014d9c:	4413      	add	r3, r2
 8014d9e:	61bb      	str	r3, [r7, #24]
        }
        idx++;
 8014da0:	7ffb      	ldrb	r3, [r7, #31]
 8014da2:	3301      	adds	r3, #1
 8014da4:	77fb      	strb	r3, [r7, #31]
        idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8014da6:	7ffb      	ldrb	r3, [r7, #31]
 8014da8:	f003 030f 	and.w	r3, r3, #15
 8014dac:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < window_size; i++) {
 8014dae:	7fbb      	ldrb	r3, [r7, #30]
 8014db0:	3301      	adds	r3, #1
 8014db2:	77bb      	strb	r3, [r7, #30]
 8014db4:	7fba      	ldrb	r2, [r7, #30]
 8014db6:	7cfb      	ldrb	r3, [r7, #19]
 8014db8:	429a      	cmp	r2, r3
 8014dba:	d3d7      	bcc.n	8014d6c <find_retransmit_frame+0x48>
    }

    return oldest_frame;
 8014dbc:	69bb      	ldr	r3, [r7, #24]
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3724      	adds	r7, #36	@ 0x24
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop
 8014dcc:	2405a560 	.word	0x2405a560

08014dd0 <valid_frame_received>:
#endif // TRANSPORT_PROTOCOL

// This runs the receiving half of the transport protocol, acknowledging frames received, discarding
// duplicates received, and handling RESET requests.
static void valid_frame_received(struct min_context *self)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b088      	sub	sp, #32
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
    uint8_t id_control = self->rx_frame_id_control;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f893 31fb 	ldrb.w	r3, [r3, #507]	@ 0x1fb
 8014dde:	777b      	strb	r3, [r7, #29]
    uint8_t *payload = self->rx_frame_payload_buf;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	33ec      	adds	r3, #236	@ 0xec
 8014de4:	61bb      	str	r3, [r7, #24]
    uint8_t payload_len = self->rx_control;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8014dec:	75fb      	strb	r3, [r7, #23]

#ifdef TRANSPORT_PROTOCOL
    uint8_t seq = self->rx_frame_seq;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8014df4:	75bb      	strb	r3, [r7, #22]
    uint8_t num_acked;
    uint8_t num_nacked;
    uint8_t num_in_window;

    // When we receive anything we know the other end is still active and won't shut down
    self->transport_fifo.last_received_anything_ms = now;
 8014df6:	4b52      	ldr	r3, [pc, #328]	@ (8014f40 <valid_frame_received+0x170>)
 8014df8:	681a      	ldr	r2, [r3, #0]
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    switch (id_control) {
 8014e00:	7f7b      	ldrb	r3, [r7, #29]
 8014e02:	2bfe      	cmp	r3, #254	@ 0xfe
 8014e04:	d053      	beq.n	8014eae <valid_frame_received+0xde>
 8014e06:	2bff      	cmp	r3, #255	@ 0xff
 8014e08:	d15c      	bne.n	8014ec4 <valid_frame_received+0xf4>
    case ACK:
        // If we get an ACK then we remove all the acknowledged frames with seq < rn
        // The payload byte specifies the number of NACKed frames: how many we want retransmitted because
        // they have gone missing.
        // But we need to make sure we don't accidentally ACK too many because of a stale ACK from an old session
        num_acked = seq - self->transport_fifo.sn_min;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8014e10:	7dba      	ldrb	r2, [r7, #22]
 8014e12:	1ad3      	subs	r3, r2, r3
 8014e14:	757b      	strb	r3, [r7, #21]
        num_nacked = payload[0] - seq;
 8014e16:	69bb      	ldr	r3, [r7, #24]
 8014e18:	781a      	ldrb	r2, [r3, #0]
 8014e1a:	7dbb      	ldrb	r3, [r7, #22]
 8014e1c:	1ad3      	subs	r3, r2, r3
 8014e1e:	753b      	strb	r3, [r7, #20]
        num_in_window = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8014e2c:	1ad3      	subs	r3, r2, r3
 8014e2e:	74fb      	strb	r3, [r7, #19]

        if (num_acked <= num_in_window) {
 8014e30:	7d7a      	ldrb	r2, [r7, #21]
 8014e32:	7cfb      	ldrb	r3, [r7, #19]
 8014e34:	429a      	cmp	r2, r3
 8014e36:	d832      	bhi.n	8014e9e <valid_frame_received+0xce>
            uint8_t i;

            self->transport_fifo.sn_min = seq;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	7dba      	ldrb	r2, [r7, #22]
 8014e3c:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            assert(num_nacked <= TRANSPORT_MAX_WINDOW_SIZE);
#endif
            // Now pop off all the frames up to (but not including) rn
            // The ACK contains Rn; all frames before Rn are ACKed and can be removed from the window
//            min_debug_print("Received ACK seq=%d, num_acked=%d, num_nacked=%d\n", seq, num_acked, num_nacked);
            for (i = 0; i < num_acked; i++) {
 8014e40:	2300      	movs	r3, #0
 8014e42:	77fb      	strb	r3, [r7, #31]
 8014e44:	e005      	b.n	8014e52 <valid_frame_received+0x82>
                transport_fifo_pop(self);
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f7ff fd79 	bl	801493e <transport_fifo_pop>
            for (i = 0; i < num_acked; i++) {
 8014e4c:	7ffb      	ldrb	r3, [r7, #31]
 8014e4e:	3301      	adds	r3, #1
 8014e50:	77fb      	strb	r3, [r7, #31]
 8014e52:	7ffa      	ldrb	r2, [r7, #31]
 8014e54:	7d7b      	ldrb	r3, [r7, #21]
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d3f5      	bcc.n	8014e46 <valid_frame_received+0x76>
            }
            uint8_t idx = self->transport_fifo.head_idx;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8014e60:	77bb      	strb	r3, [r7, #30]
            // Now retransmit the number of frames that were requested
            for (i = 0; i < num_nacked; i++) {
 8014e62:	2300      	movs	r3, #0
 8014e64:	77fb      	strb	r3, [r7, #31]
 8014e66:	e015      	b.n	8014e94 <valid_frame_received+0xc4>
                struct transport_frame *retransmit_frame = &self->transport_fifo.frames[idx];
 8014e68:	7fba      	ldrb	r2, [r7, #30]
 8014e6a:	4613      	mov	r3, r2
 8014e6c:	005b      	lsls	r3, r3, #1
 8014e6e:	4413      	add	r3, r2
 8014e70:	009b      	lsls	r3, r3, #2
 8014e72:	687a      	ldr	r2, [r7, #4]
 8014e74:	4413      	add	r3, r2
 8014e76:	60fb      	str	r3, [r7, #12]
                transport_fifo_send(self, retransmit_frame);
 8014e78:	68f9      	ldr	r1, [r7, #12]
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f7ff fe30 	bl	8014ae0 <transport_fifo_send>
                idx++;
 8014e80:	7fbb      	ldrb	r3, [r7, #30]
 8014e82:	3301      	adds	r3, #1
 8014e84:	77bb      	strb	r3, [r7, #30]
                idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8014e86:	7fbb      	ldrb	r3, [r7, #30]
 8014e88:	f003 030f 	and.w	r3, r3, #15
 8014e8c:	77bb      	strb	r3, [r7, #30]
            for (i = 0; i < num_nacked; i++) {
 8014e8e:	7ffb      	ldrb	r3, [r7, #31]
 8014e90:	3301      	adds	r3, #1
 8014e92:	77fb      	strb	r3, [r7, #31]
 8014e94:	7ffa      	ldrb	r2, [r7, #31]
 8014e96:	7d3b      	ldrb	r3, [r7, #20]
 8014e98:	429a      	cmp	r2, r3
 8014e9a:	d3e5      	bcc.n	8014e68 <valid_frame_received+0x98>
            }
        } else {
//            min_debug_print("Received spurious ACK seq=%d\n", seq);
            self->transport_fifo.spurious_acks++;
        }
        break;
 8014e9c:	e04c      	b.n	8014f38 <valid_frame_received+0x168>
            self->transport_fifo.spurious_acks++;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8014ea4:	1c5a      	adds	r2, r3, #1
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        break;
 8014eac:	e044      	b.n	8014f38 <valid_frame_received+0x168>
        // If we get a RESET demand then we reset the transport protocol (empty the FIFO, reset the
        // sequence numbers, etc.)
        // We don't send anything, we just do it. The other end can send frames to see if this end is
        // alive (pings, etc.) or just wait to get application frames.
//        min_debug_print("Received reset\n");
        self->transport_fifo.resets_received++;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014eb4:	1c5a      	adds	r2, r3, #1
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        transport_fifo_reset(self);
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f7ff fe7b 	bl	8014bb8 <transport_fifo_reset>
        break;
 8014ec2:	e039      	b.n	8014f38 <valid_frame_received+0x168>
    default:
        if (id_control & 0x80U) {
 8014ec4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	da29      	bge.n	8014f20 <valid_frame_received+0x150>
            // Incoming application frames

            // Reset the activity time (an idle connection will be stalled)
            self->transport_fifo.last_received_frame_ms = now;
 8014ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8014f40 <valid_frame_received+0x170>)
 8014ece:	681a      	ldr	r2, [r3, #0]
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

            if (seq == self->transport_fifo.rn) {
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8014edc:	7dba      	ldrb	r2, [r7, #22]
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d116      	bne.n	8014f10 <valid_frame_received+0x140>
                // Accept this frame as matching the sequence number we were looking for

                // Now looking for the next one in the sequence
                self->transport_fifo.rn++;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8014ee8:	3301      	adds	r3, #1
 8014eea:	b2da      	uxtb	r2, r3
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                // Always send an ACK back for the frame we received
                // ACKs are short (should be about 9 microseconds to send on the wire) and
                // this will cut the latency down.
                // We also periodically send an ACK in case the ACK was lost, and in any case
                // frames are re-sent.
                send_ack(self);
 8014ef2:	6878      	ldr	r0, [r7, #4]
 8014ef4:	f7ff fe1a 	bl	8014b2c <send_ack>

                // Now ready to pass this up to the application handlers

                // Pass frame up to application handler to deal with
//                min_debug_print("Incoming app transport frame seq=%d, id=%d, payload len=%d\n", seq, id_control & (uint8_t)0x3fU, payload_len);
                min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 8014ef8:	7f7b      	ldrb	r3, [r7, #29]
 8014efa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014efe:	b2d8      	uxtb	r0, r3
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014f06:	7dfa      	ldrb	r2, [r7, #23]
 8014f08:	69b9      	ldr	r1, [r7, #24]
 8014f0a:	f000 fb3f 	bl	801558c <min_application_handler>
        } else {
            // Not a transport frame
//            min_debug_print("Incoming app frame id=%d, payload len=%d\n", id_control & (uint8_t)0x3fU, payload_len);
            min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
        }
        break;
 8014f0e:	e012      	b.n	8014f36 <valid_frame_received+0x166>
                self->transport_fifo.sequence_mismatch_drop++;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8014f16:	1c5a      	adds	r2, r3, #1
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        break;
 8014f1e:	e00a      	b.n	8014f36 <valid_frame_received+0x166>
            min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 8014f20:	7f7b      	ldrb	r3, [r7, #29]
 8014f22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014f26:	b2d8      	uxtb	r0, r3
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014f2e:	7dfa      	ldrb	r2, [r7, #23]
 8014f30:	69b9      	ldr	r1, [r7, #24]
 8014f32:	f000 fb2b 	bl	801558c <min_application_handler>
        break;
 8014f36:	bf00      	nop
    }
#else  // TRANSPORT_PROTOCOL
    min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
#endif // TRANSPORT_PROTOCOL
}
 8014f38:	bf00      	nop
 8014f3a:	3720      	adds	r7, #32
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	bd80      	pop	{r7, pc}
 8014f40:	2405a560 	.word	0x2405a560

08014f44 <rx_byte>:

static void rx_byte(struct min_context *self, uint8_t byte)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b084      	sub	sp, #16
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
 8014f4c:	460b      	mov	r3, r1
 8014f4e:	70fb      	strb	r3, [r7, #3]
    // should reset the frame buffer and be ready to receive frame data
    //
    // Two in a row in over the frame means to expect a stuff byte.
    uint32_t crc;

    if (self->rx_header_bytes_seen == 2) {
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8014f56:	2b02      	cmp	r3, #2
 8014f58:	d114      	bne.n	8014f84 <rx_byte+0x40>
        self->rx_header_bytes_seen = 0;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
        if (byte == HEADER_BYTE) {
 8014f62:	78fb      	ldrb	r3, [r7, #3]
 8014f64:	2baa      	cmp	r3, #170	@ 0xaa
 8014f66:	d104      	bne.n	8014f72 <rx_byte+0x2e>
            self->rx_frame_state = RECEIVING_ID_CONTROL;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	2201      	movs	r2, #1
 8014f6c:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
            return;
 8014f70:	e110      	b.n	8015194 <rx_byte+0x250>
        }
        if (byte == STUFF_BYTE) {
 8014f72:	78fb      	ldrb	r3, [r7, #3]
 8014f74:	2b55      	cmp	r3, #85	@ 0x55
 8014f76:	f000 8108 	beq.w	801518a <rx_byte+0x246>
            /* Discard this byte; carry on receiving on the next character */
            return;
        } else {
            /* Something has gone wrong, give up on this frame and look for header again */
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
            return;
 8014f82:	e107      	b.n	8015194 <rx_byte+0x250>
        }
    }

    if (byte == HEADER_BYTE) {
 8014f84:	78fb      	ldrb	r3, [r7, #3]
 8014f86:	2baa      	cmp	r3, #170	@ 0xaa
 8014f88:	d108      	bne.n	8014f9c <rx_byte+0x58>
        self->rx_header_bytes_seen++;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8014f90:	3301      	adds	r3, #1
 8014f92:	b2da      	uxtb	r2, r3
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
 8014f9a:	e003      	b.n	8014fa4 <rx_byte+0x60>
    } else {
        self->rx_header_bytes_seen = 0;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
    }

    switch (self->rx_frame_state) {
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8014faa:	2b09      	cmp	r3, #9
 8014fac:	f200 80e8 	bhi.w	8015180 <rx_byte+0x23c>
 8014fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8014fb8 <rx_byte+0x74>)
 8014fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fb6:	bf00      	nop
 8014fb8:	0801518f 	.word	0x0801518f
 8014fbc:	08014fe1 	.word	0x08014fe1
 8014fc0:	08015031 	.word	0x08015031
 8014fc4:	08015053 	.word	0x08015053
 8014fc8:	08015091 	.word	0x08015091
 8014fcc:	080150e1 	.word	0x080150e1
 8014fd0:	080150f5 	.word	0x080150f5
 8014fd4:	08015111 	.word	0x08015111
 8014fd8:	0801512d 	.word	0x0801512d
 8014fdc:	0801516b 	.word	0x0801516b
    case SEARCHING_FOR_SOF:
        break;
    case RECEIVING_ID_CONTROL:
        self->rx_frame_id_control = byte;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	78fa      	ldrb	r2, [r7, #3]
 8014fe4:	f883 21fb 	strb.w	r2, [r3, #507]	@ 0x1fb
        self->rx_frame_payload_bytes = 0;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2200      	movs	r2, #0
 8014fec:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa
        crc32_init_context(&self->rx_checksum);
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7ff fb7e 	bl	80146f8 <crc32_init_context>
        crc32_step(&self->rx_checksum, byte);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8015002:	78fa      	ldrb	r2, [r7, #3]
 8015004:	4611      	mov	r1, r2
 8015006:	4618      	mov	r0, r3
 8015008:	f7ff fb84 	bl	8014714 <crc32_step>
        if (byte & 0x80U) {
 801500c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015010:	2b00      	cmp	r3, #0
 8015012:	da04      	bge.n	801501e <rx_byte+0xda>
#ifdef TRANSPORT_PROTOCOL
            self->rx_frame_state = RECEIVING_SEQ;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	2202      	movs	r2, #2
 8015018:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
#endif // TRANSPORT_PROTOCOL
        } else {
            self->rx_frame_seq = 0;
            self->rx_frame_state = RECEIVING_LENGTH;
        }
        break;
 801501c:	e0ba      	b.n	8015194 <rx_byte+0x250>
            self->rx_frame_seq = 0;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	2200      	movs	r2, #0
 8015022:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
            self->rx_frame_state = RECEIVING_LENGTH;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	2203      	movs	r2, #3
 801502a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 801502e:	e0b1      	b.n	8015194 <rx_byte+0x250>
    case RECEIVING_SEQ:
        self->rx_frame_seq = byte;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	78fa      	ldrb	r2, [r7, #3]
 8015034:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
        crc32_step(&self->rx_checksum, byte);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801503e:	78fa      	ldrb	r2, [r7, #3]
 8015040:	4611      	mov	r1, r2
 8015042:	4618      	mov	r0, r3
 8015044:	f7ff fb66 	bl	8014714 <crc32_step>
        self->rx_frame_state = RECEIVING_LENGTH;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	2203      	movs	r2, #3
 801504c:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8015050:	e0a0      	b.n	8015194 <rx_byte+0x250>
    case RECEIVING_LENGTH:
        self->rx_frame_length = byte;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	78fa      	ldrb	r2, [r7, #3]
 8015056:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
        self->rx_control = byte;
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	78fa      	ldrb	r2, [r7, #3]
 801505e:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
        crc32_step(&self->rx_checksum, byte);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8015068:	78fa      	ldrb	r2, [r7, #3]
 801506a:	4611      	mov	r1, r2
 801506c:	4618      	mov	r0, r3
 801506e:	f7ff fb51 	bl	8014714 <crc32_step>
        if (self->rx_frame_length > 0) {
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 8015078:	2b00      	cmp	r3, #0
 801507a:	d004      	beq.n	8015086 <rx_byte+0x142>
            // Can reduce the RAM size by compiling limits to frame sizes
            if (self->rx_frame_length <= MAX_PAYLOAD) {
                self->rx_frame_state = RECEIVING_PAYLOAD;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2204      	movs	r2, #4
 8015080:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
                self->rx_frame_state = SEARCHING_FOR_SOF;
            }
        } else {
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
        }
        break;
 8015084:	e086      	b.n	8015194 <rx_byte+0x250>
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2205      	movs	r2, #5
 801508a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 801508e:	e081      	b.n	8015194 <rx_byte+0x250>
    case RECEIVING_PAYLOAD:
        self->rx_frame_payload_buf[self->rx_frame_payload_bytes++] = byte;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 8015096:	1c5a      	adds	r2, r3, #1
 8015098:	b2d1      	uxtb	r1, r2
 801509a:	687a      	ldr	r2, [r7, #4]
 801509c:	f882 11fa 	strb.w	r1, [r2, #506]	@ 0x1fa
 80150a0:	461a      	mov	r2, r3
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	4413      	add	r3, r2
 80150a6:	78fa      	ldrb	r2, [r7, #3]
 80150a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        crc32_step(&self->rx_checksum, byte);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80150b2:	78fa      	ldrb	r2, [r7, #3]
 80150b4:	4611      	mov	r1, r2
 80150b6:	4618      	mov	r0, r3
 80150b8:	f7ff fb2c 	bl	8014714 <crc32_step>
        if (--self->rx_frame_length == 0) {
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 80150c2:	3b01      	subs	r3, #1
 80150c4:	b2da      	uxtb	r2, r3
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d15d      	bne.n	8015192 <rx_byte+0x24e>
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	2205      	movs	r2, #5
 80150da:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        }
        break;
 80150de:	e058      	b.n	8015192 <rx_byte+0x24e>
    case RECEIVING_CHECKSUM_3:
        self->rx_frame_checksum = ((uint32_t)byte) << 24;
 80150e0:	78fb      	ldrb	r3, [r7, #3]
 80150e2:	061a      	lsls	r2, r3, #24
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_2;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2206      	movs	r2, #6
 80150ee:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80150f2:	e04f      	b.n	8015194 <rx_byte+0x250>
    case RECEIVING_CHECKSUM_2:
        self->rx_frame_checksum |= ((uint32_t)byte) << 16;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 80150fa:	78fb      	ldrb	r3, [r7, #3]
 80150fc:	041b      	lsls	r3, r3, #16
 80150fe:	431a      	orrs	r2, r3
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_1;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	2207      	movs	r2, #7
 801510a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 801510e:	e041      	b.n	8015194 <rx_byte+0x250>
    case RECEIVING_CHECKSUM_1:
        self->rx_frame_checksum |= ((uint32_t)byte) << 8;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 8015116:	78fb      	ldrb	r3, [r7, #3]
 8015118:	021b      	lsls	r3, r3, #8
 801511a:	431a      	orrs	r2, r3
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_0;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	2208      	movs	r2, #8
 8015126:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 801512a:	e033      	b.n	8015194 <rx_byte+0x250>
    case RECEIVING_CHECKSUM_0:
        self->rx_frame_checksum |= byte;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 8015132:	78fb      	ldrb	r3, [r7, #3]
 8015134:	431a      	orrs	r2, r3
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        crc = crc32_finalize(&self->rx_checksum);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8015142:	4618      	mov	r0, r3
 8015144:	f7ff fb14 	bl	8014770 <crc32_finalize>
 8015148:	60f8      	str	r0, [r7, #12]
        if (self->rx_frame_checksum != crc) {
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	@ 0x1ec
 8015150:	68fa      	ldr	r2, [r7, #12]
 8015152:	429a      	cmp	r2, r3
 8015154:	d004      	beq.n	8015160 <rx_byte+0x21c>
//            min_debug_print("Checksum failed, received 0x%08X, computed 0x%08X", self->rx_frame_checksum, crc);
            // Frame fails the checksum and so is dropped
            self->rx_frame_state = SEARCHING_FOR_SOF;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2200      	movs	r2, #0
 801515a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        } else {
            // Checksum passes, go on to check for the end-of-frame marker
            self->rx_frame_state = RECEIVING_EOF;
        }
        break;
 801515e:	e019      	b.n	8015194 <rx_byte+0x250>
            self->rx_frame_state = RECEIVING_EOF;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	2209      	movs	r2, #9
 8015164:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8015168:	e014      	b.n	8015194 <rx_byte+0x250>
    case RECEIVING_EOF:
        if (byte == 0x55u) {
 801516a:	78fb      	ldrb	r3, [r7, #3]
 801516c:	2b55      	cmp	r3, #85	@ 0x55
 801516e:	d102      	bne.n	8015176 <rx_byte+0x232>
            // Frame received OK, pass up data to handler
            valid_frame_received(self);
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f7ff fe2d 	bl	8014dd0 <valid_frame_received>
        } else {
            // else discard
//            min_debug_print("Received invalid EOF 0x%02X", byte);
        }
        // Look for next frame */
        self->rx_frame_state = SEARCHING_FOR_SOF;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2200      	movs	r2, #0
 801517a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 801517e:	e009      	b.n	8015194 <rx_byte+0x250>
    default:
        // Should never get here but in case we do then reset to a safe state
//        min_debug_print("Received byte 0x%02X in invalid state %d", byte, self->rx_frame_state);
        self->rx_frame_state = SEARCHING_FOR_SOF;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	2200      	movs	r2, #0
 8015184:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8015188:	e004      	b.n	8015194 <rx_byte+0x250>
            return;
 801518a:	bf00      	nop
 801518c:	e002      	b.n	8015194 <rx_byte+0x250>
        break;
 801518e:	bf00      	nop
 8015190:	e000      	b.n	8015194 <rx_byte+0x250>
        break;
 8015192:	bf00      	nop
    }
}
 8015194:	3710      	adds	r7, #16
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop

0801519c <min_poll>:

// API call: sends received bytes into a MIN context and runs the transport timeouts
void min_poll(struct min_context *self, uint8_t const *buf, uint32_t buf_len)
{
 801519c:	b590      	push	{r4, r7, lr}
 801519e:	b089      	sub	sp, #36	@ 0x24
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	60f8      	str	r0, [r7, #12]
 80151a4:	60b9      	str	r1, [r7, #8]
 80151a6:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < buf_len; i++) {
 80151a8:	2300      	movs	r3, #0
 80151aa:	61fb      	str	r3, [r7, #28]
 80151ac:	e00a      	b.n	80151c4 <min_poll+0x28>
        rx_byte(self, buf[i]);
 80151ae:	68ba      	ldr	r2, [r7, #8]
 80151b0:	69fb      	ldr	r3, [r7, #28]
 80151b2:	4413      	add	r3, r2
 80151b4:	781b      	ldrb	r3, [r3, #0]
 80151b6:	4619      	mov	r1, r3
 80151b8:	68f8      	ldr	r0, [r7, #12]
 80151ba:	f7ff fec3 	bl	8014f44 <rx_byte>
    for (i = 0; i < buf_len; i++) {
 80151be:	69fb      	ldr	r3, [r7, #28]
 80151c0:	3301      	adds	r3, #1
 80151c2:	61fb      	str	r3, [r7, #28]
 80151c4:	69fa      	ldr	r2, [r7, #28]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d3f0      	bcc.n	80151ae <min_poll+0x12>
    }

#ifdef TRANSPORT_PROTOCOL
    uint8_t window_size;

    now = min_time_ms();
 80151cc:	f000 f8fa 	bl	80153c4 <min_time_ms>
 80151d0:	4603      	mov	r3, r0
 80151d2:	4a44      	ldr	r2, [pc, #272]	@ (80152e4 <min_poll+0x148>)
 80151d4:	6013      	str	r3, [r2, #0]

    bool remote_connected = (now - self->transport_fifo.last_received_anything_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 80151d6:	4b43      	ldr	r3, [pc, #268]	@ (80152e4 <min_poll+0x148>)
 80151d8:	681a      	ldr	r2, [r3, #0]
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80151e0:	1ad3      	subs	r3, r2, r3
 80151e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80151e6:	4293      	cmp	r3, r2
 80151e8:	bf94      	ite	ls
 80151ea:	2301      	movls	r3, #1
 80151ec:	2300      	movhi	r3, #0
 80151ee:	76fb      	strb	r3, [r7, #27]
    bool remote_active = (now - self->transport_fifo.last_received_frame_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 80151f0:	4b3c      	ldr	r3, [pc, #240]	@ (80152e4 <min_poll+0x148>)
 80151f2:	681a      	ldr	r2, [r3, #0]
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80151fa:	1ad3      	subs	r3, r2, r3
 80151fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8015200:	4293      	cmp	r3, r2
 8015202:	bf94      	ite	ls
 8015204:	2301      	movls	r3, #1
 8015206:	2300      	movhi	r3, #0
 8015208:	76bb      	strb	r3, [r7, #26]

    // This sends one new frame or resends one old frame
    window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min; // Window size
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8015216:	1ad3      	subs	r3, r2, r3
 8015218:	767b      	strb	r3, [r7, #25]
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 801521a:	7e7b      	ldrb	r3, [r7, #25]
 801521c:	2b03      	cmp	r3, #3
 801521e:	d82a      	bhi.n	8015276 <min_poll+0xda>
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8015226:	7e7a      	ldrb	r2, [r7, #25]
 8015228:	429a      	cmp	r2, r3
 801522a:	d224      	bcs.n	8015276 <min_poll+0xda>
        // There are new frames we can send; but don't even bother if there's no buffer space for them
        struct transport_frame *frame = transport_fifo_get(self, window_size);
 801522c:	7e7b      	ldrb	r3, [r7, #25]
 801522e:	4619      	mov	r1, r3
 8015230:	68f8      	ldr	r0, [r7, #12]
 8015232:	f7ff fc39 	bl	8014aa8 <transport_fifo_get>
 8015236:	6178      	str	r0, [r7, #20]
        if (ON_WIRE_SIZE(frame->payload_len) <= min_tx_space(self->port)) {
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	799b      	ldrb	r3, [r3, #6]
 801523c:	f103 040b 	add.w	r4, r3, #11
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015246:	4618      	mov	r0, r3
 8015248:	f000 f880 	bl	801534c <min_tx_space>
 801524c:	4603      	mov	r3, r0
 801524e:	429c      	cmp	r4, r3
 8015250:	d834      	bhi.n	80152bc <min_poll+0x120>
            frame->seq = self->transport_fifo.sn_max;
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	721a      	strb	r2, [r3, #8]
            transport_fifo_send(self, frame);
 801525c:	6979      	ldr	r1, [r7, #20]
 801525e:	68f8      	ldr	r0, [r7, #12]
 8015260:	f7ff fc3e 	bl	8014ae0 <transport_fifo_send>

            // Move window on
            self->transport_fifo.sn_max++;
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 801526a:	3301      	adds	r3, #1
 801526c:	b2da      	uxtb	r2, r3
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 8015274:	e022      	b.n	80152bc <min_poll+0x120>
        }
    } else {
        // Sender cannot send new frames so resend old ones (if there's anyone there)
        if ((window_size > 0) && remote_connected) {
 8015276:	7e7b      	ldrb	r3, [r7, #25]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d020      	beq.n	80152be <min_poll+0x122>
 801527c:	7efb      	ldrb	r3, [r7, #27]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d01d      	beq.n	80152be <min_poll+0x122>
            // There are unacknowledged frames. Can re-send an old frame. Pick the least recently sent one.
            struct transport_frame *oldest_frame = find_retransmit_frame(self);
 8015282:	68f8      	ldr	r0, [r7, #12]
 8015284:	f7ff fd4e 	bl	8014d24 <find_retransmit_frame>
 8015288:	6138      	str	r0, [r7, #16]
            if (now - oldest_frame->last_sent_time_ms >= TRANSPORT_FRAME_RETRANSMIT_TIMEOUT_MS) {
 801528a:	4b16      	ldr	r3, [pc, #88]	@ (80152e4 <min_poll+0x148>)
 801528c:	681a      	ldr	r2, [r3, #0]
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	1ad3      	subs	r3, r2, r3
 8015294:	2bf9      	cmp	r3, #249	@ 0xf9
 8015296:	d912      	bls.n	80152be <min_poll+0x122>
                // Resending oldest frame if there's a chance there's enough space to send it
                if (ON_WIRE_SIZE(oldest_frame->payload_len) <= min_tx_space(self->port)) {
 8015298:	693b      	ldr	r3, [r7, #16]
 801529a:	799b      	ldrb	r3, [r3, #6]
 801529c:	f103 040b 	add.w	r4, r3, #11
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80152a6:	4618      	mov	r0, r3
 80152a8:	f000 f850 	bl	801534c <min_tx_space>
 80152ac:	4603      	mov	r3, r0
 80152ae:	429c      	cmp	r4, r3
 80152b0:	d805      	bhi.n	80152be <min_poll+0x122>
                    transport_fifo_send(self, oldest_frame);
 80152b2:	6939      	ldr	r1, [r7, #16]
 80152b4:	68f8      	ldr	r0, [r7, #12]
 80152b6:	f7ff fc13 	bl	8014ae0 <transport_fifo_send>
 80152ba:	e000      	b.n	80152be <min_poll+0x122>
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 80152bc:	bf00      	nop
        }
    }

#ifndef DISABLE_TRANSPORT_ACK_RETRANSMIT
    // Periodically transmit the ACK with the rn value, unless the line has gone idle
    if (now - self->transport_fifo.last_sent_ack_time_ms > TRANSPORT_ACK_RETRANSMIT_TIMEOUT_MS) {
 80152be:	4b09      	ldr	r3, [pc, #36]	@ (80152e4 <min_poll+0x148>)
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80152c8:	1ad3      	subs	r3, r2, r3
 80152ca:	2bfa      	cmp	r3, #250	@ 0xfa
 80152cc:	d905      	bls.n	80152da <min_poll+0x13e>
        if (remote_active) {
 80152ce:	7ebb      	ldrb	r3, [r7, #26]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d002      	beq.n	80152da <min_poll+0x13e>
            send_ack(self);
 80152d4:	68f8      	ldr	r0, [r7, #12]
 80152d6:	f7ff fc29 	bl	8014b2c <send_ack>
        }
    }
#endif // DISABLE_TRANSPORT_ACK_RETRANSMIT
#endif // TRANSPORT_PROTOCOL
}
 80152da:	bf00      	nop
 80152dc:	3724      	adds	r7, #36	@ 0x24
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd90      	pop	{r4, r7, pc}
 80152e2:	bf00      	nop
 80152e4:	2405a560 	.word	0x2405a560

080152e8 <min_init_context>:
#ifdef VALIDATE_MAX_PAYLOAD
void min_init_context_validate(struct min_context *self, uint8_t port, void *p_rx_frame_checksum)
#else
void min_init_context(struct min_context *self, uint8_t port)
#endif
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	460b      	mov	r3, r1
 80152f2:	70fb      	strb	r3, [r7, #3]
    // compiling calling code and this code.
    assert((void *)(self->rx_frame_payload_buf + MAX_PAYLOAD) <= p_rx_frame_checksum);
#endif
#endif
    // Initialize context
    self->rx_header_bytes_seen = 0;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2200      	movs	r2, #0
 80152f8:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
    self->rx_frame_state = SEARCHING_FOR_SOF;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2200      	movs	r2, #0
 8015300:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
    self->port = port;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	78fa      	ldrb	r2, [r7, #3]
 8015308:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

#ifdef TRANSPORT_PROTOCOL
    // Counters for diagnosis purposes
    self->transport_fifo.spurious_acks = 0;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	2200      	movs	r2, #0
 8015310:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    self->transport_fifo.sequence_mismatch_drop = 0;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	2200      	movs	r2, #0
 8015318:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    self->transport_fifo.dropped_frames = 0;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	2200      	movs	r2, #0
 8015320:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    self->transport_fifo.resets_received = 0;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2200      	movs	r2, #0
 8015328:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    self->transport_fifo.n_ring_buffer_bytes_max = 0;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	2200      	movs	r2, #0
 8015330:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
    self->transport_fifo.n_frames_max = 0;
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2200      	movs	r2, #0
 8015338:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
    transport_fifo_reset(self);
 801533c:	6878      	ldr	r0, [r7, #4]
 801533e:	f7ff fc3b 	bl	8014bb8 <transport_fifo_reset>
#endif // TRANSPORT_PROTOCOL
//    min_debug_print("MIN init complete\n");
}
 8015342:	bf00      	nop
 8015344:	3708      	adds	r7, #8
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}
	...

0801534c <min_tx_space>:
#include "uart_driver_dma.h"

static MIN_Context_t *registered_contexts[MAX_MIN_CONTEXTS] = {0};

uint16_t min_tx_space(uint8_t port)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b082      	sub	sp, #8
 8015350:	af00      	add	r7, sp, #0
 8015352:	4603      	mov	r3, r0
 8015354:	71fb      	strb	r3, [r7, #7]
    return UART_DMA_Driver_TXNumFreeSlots(UART_EXP);
 8015356:	4804      	ldr	r0, [pc, #16]	@ (8015368 <min_tx_space+0x1c>)
 8015358:	f7ed faf8 	bl	800294c <UART_DMA_Driver_TXNumFreeSlots>
 801535c:	4603      	mov	r3, r0
/*
 * Since the implementation uses UART TX in Blocking/IRQ mode, we assume that
 * the buffer always has enough space, so this function returns a constant value.
 */
}
 801535e:	4618      	mov	r0, r3
 8015360:	3708      	adds	r7, #8
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}
 8015366:	bf00      	nop
 8015368:	40007800 	.word	0x40007800

0801536c <min_tx_byte>:

void min_tx_byte(uint8_t port, uint8_t byte)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	4603      	mov	r3, r0
 8015374:	460a      	mov	r2, r1
 8015376:	71fb      	strb	r3, [r7, #7]
 8015378:	4613      	mov	r3, r2
 801537a:	71bb      	strb	r3, [r7, #6]
    if (port == EXP_PORT)
 801537c:	79fb      	ldrb	r3, [r7, #7]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d104      	bne.n	801538c <min_tx_byte+0x20>
    {
    	UART_Driver_Write(UART_EXP, byte);
 8015382:	79bb      	ldrb	r3, [r7, #6]
 8015384:	4619      	mov	r1, r3
 8015386:	4803      	ldr	r0, [pc, #12]	@ (8015394 <min_tx_byte+0x28>)
 8015388:	f7ed f96e 	bl	8002668 <UART_Driver_Write>
#ifdef TEST_DEMO_MIN
        HAL_UART_Transmit(&huart6, &byte, 1, 10);
#endif
    }
}
 801538c:	bf00      	nop
 801538e:	3708      	adds	r7, #8
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}
 8015394:	40007800 	.word	0x40007800

08015398 <min_tx_start>:
 * This function is called before sending data. It can be used to
 * perform actions such as disabling TX interrupts or preparing
 * the hardware for transmission.
 */
void min_tx_start(uint8_t port)
{
 8015398:	b480      	push	{r7}
 801539a:	b083      	sub	sp, #12
 801539c:	af00      	add	r7, sp, #0
 801539e:	4603      	mov	r3, r0
 80153a0:	71fb      	strb	r3, [r7, #7]
    (void)port;
    // Example: Disable TX interrupt if needed (not required in this case)
}
 80153a2:	bf00      	nop
 80153a4:	370c      	adds	r7, #12
 80153a6:	46bd      	mov	sp, r7
 80153a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ac:	4770      	bx	lr

080153ae <min_tx_finished>:
 * This function is called when data transmission is finished.
 * It can be used to restore the previous state if any changes
 * were made in `min_tx_start()`.
 */
void min_tx_finished(uint8_t port)
{
 80153ae:	b480      	push	{r7}
 80153b0:	b083      	sub	sp, #12
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	4603      	mov	r3, r0
 80153b6:	71fb      	strb	r3, [r7, #7]
    (void)port;
    // Example: Restore TX interrupt state if modified earlier
}
 80153b8:	bf00      	nop
 80153ba:	370c      	adds	r7, #12
 80153bc:	46bd      	mov	sp, r7
 80153be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c2:	4770      	bx	lr

080153c4 <min_time_ms>:
 * a timestamp for timeout handling and scheduling.
 *
 * @return uint32_t The current system time in milliseconds.
 */
uint32_t min_time_ms(void)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	af00      	add	r7, sp, #0
    return HAL_GetTick(); // Uses HAL function to get system uptime
 80153c8:	f003 ffa4 	bl	8019314 <HAL_GetTick>
 80153cc:	4603      	mov	r3, r0
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	bd80      	pop	{r7, pc}
	...

080153d4 <MIN_Context_Init>:

void MIN_Context_Init(MIN_Context_t *ctx, uint8_t port) {
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b082      	sub	sp, #8
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
 80153dc:	460b      	mov	r3, r1
 80153de:	70fb      	strb	r3, [r7, #3]
    min_init_context(&ctx->min_ctx, port);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	78fa      	ldrb	r2, [r7, #3]
 80153e4:	4611      	mov	r1, r2
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7ff ff7e 	bl	80152e8 <min_init_context>
    min_transport_reset(&ctx->min_ctx, true);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2101      	movs	r1, #1
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7ff fc1b 	bl	8014c2c <min_transport_reset>
    ctx->last_poll_time = min_time_ms();
 80153f6:	f7ff ffe5 	bl	80153c4 <min_time_ms>
 80153fa:	4602      	mov	r2, r0
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    ctx->timeout_triggered = false;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2200      	movs	r2, #0
 8015406:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
#ifdef AUTO_REINIT_ON_TIMEOUT
    ctx->auto_reinit = true;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2201      	movs	r2, #1
 801540e:	f883 220d 	strb.w	r2, [r3, #525]	@ 0x20d
#endif
    if (port < MAX_MIN_CONTEXTS) {
 8015412:	78fb      	ldrb	r3, [r7, #3]
 8015414:	2b03      	cmp	r3, #3
 8015416:	d804      	bhi.n	8015422 <MIN_Context_Init+0x4e>
        registered_contexts[port] = ctx;
 8015418:	78fb      	ldrb	r3, [r7, #3]
 801541a:	4904      	ldr	r1, [pc, #16]	@ (801542c <MIN_Context_Init+0x58>)
 801541c:	687a      	ldr	r2, [r7, #4]
 801541e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 8015422:	bf00      	nop
 8015424:	3708      	adds	r7, #8
 8015426:	46bd      	mov	sp, r7
 8015428:	bd80      	pop	{r7, pc}
 801542a:	bf00      	nop
 801542c:	2405a564 	.word	0x2405a564

08015430 <MIN_ReInit>:

void MIN_ReInit(MIN_Context_t *ctx) {
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
    min_init_context(&ctx->min_ctx, ctx->min_ctx.port);
 8015438:	687a      	ldr	r2, [r7, #4]
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015440:	4619      	mov	r1, r3
 8015442:	4610      	mov	r0, r2
 8015444:	f7ff ff50 	bl	80152e8 <min_init_context>
    min_transport_reset(&ctx->min_ctx, true);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2101      	movs	r1, #1
 801544c:	4618      	mov	r0, r3
 801544e:	f7ff fbed 	bl	8014c2c <min_transport_reset>
    ctx->last_poll_time = min_time_ms();
 8015452:	f7ff ffb7 	bl	80153c4 <min_time_ms>
 8015456:	4602      	mov	r2, r0
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    ctx->timeout_triggered = false;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2200      	movs	r2, #0
 8015462:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
}
 8015466:	bf00      	nop
 8015468:	3708      	adds	r7, #8
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}

0801546e <MIN_RegisterTimeoutCallback>:

void MIN_RegisterTimeoutCallback(MIN_Context_t *ctx, void (*callback)(MIN_Context_t *ctx)) {
 801546e:	b480      	push	{r7}
 8015470:	b083      	sub	sp, #12
 8015472:	af00      	add	r7, sp, #0
 8015474:	6078      	str	r0, [r7, #4]
 8015476:	6039      	str	r1, [r7, #0]
    ctx->timeout_callback = callback;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	683a      	ldr	r2, [r7, #0]
 801547c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
}
 8015480:	bf00      	nop
 8015482:	370c      	adds	r7, #12
 8015484:	46bd      	mov	sp, r7
 8015486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548a:	4770      	bx	lr

0801548c <MIN_App_Poll>:

void MIN_App_Poll(MIN_Context_t *ctx, const uint8_t *rx_data, uint32_t rx_len) {
 801548c:	b580      	push	{r7, lr}
 801548e:	b086      	sub	sp, #24
 8015490:	af00      	add	r7, sp, #0
 8015492:	60f8      	str	r0, [r7, #12]
 8015494:	60b9      	str	r1, [r7, #8]
 8015496:	607a      	str	r2, [r7, #4]
    min_poll(&ctx->min_ctx, rx_data, rx_len);
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	687a      	ldr	r2, [r7, #4]
 801549c:	68b9      	ldr	r1, [r7, #8]
 801549e:	4618      	mov	r0, r3
 80154a0:	f7ff fe7c 	bl	801519c <min_poll>
    uint32_t now = min_time_ms();
 80154a4:	f7ff ff8e 	bl	80153c4 <min_time_ms>
 80154a8:	6178      	str	r0, [r7, #20]
    if (ctx->min_ctx.transport_fifo.n_frames > 0) {
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d035      	beq.n	8015520 <MIN_App_Poll+0x94>
        struct transport_frame *oldest = &ctx->min_ctx.transport_fifo.frames[ctx->min_ctx.transport_fifo.head_idx];
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80154ba:	461a      	mov	r2, r3
 80154bc:	4613      	mov	r3, r2
 80154be:	005b      	lsls	r3, r3, #1
 80154c0:	4413      	add	r3, r2
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	68fa      	ldr	r2, [r7, #12]
 80154c6:	4413      	add	r3, r2
 80154c8:	613b      	str	r3, [r7, #16]
        if ((now - oldest->last_sent_time_ms) > MIN_FRAME_TIMEOUT_MS) {
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	697a      	ldr	r2, [r7, #20]
 80154d0:	1ad3      	subs	r3, r2, r3
 80154d2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80154d6:	4293      	cmp	r3, r2
 80154d8:	d91e      	bls.n	8015518 <MIN_App_Poll+0x8c>
            if (!ctx->timeout_triggered) {
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	f893 320c 	ldrb.w	r3, [r3, #524]	@ 0x20c
 80154e0:	f083 0301 	eor.w	r3, r3, #1
 80154e4:	b2db      	uxtb	r3, r3
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d01a      	beq.n	8015520 <MIN_App_Poll+0x94>
                if (ctx->timeout_callback) {
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d004      	beq.n	80154fe <MIN_App_Poll+0x72>
                    ctx->timeout_callback(ctx);
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80154fa:	68f8      	ldr	r0, [r7, #12]
 80154fc:	4798      	blx	r3
                }
                ctx->timeout_triggered = true;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	2201      	movs	r2, #1
 8015502:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
#ifdef AUTO_REINIT_ON_TIMEOUT
                if (ctx->auto_reinit) {
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	f893 320d 	ldrb.w	r3, [r3, #525]	@ 0x20d
 801550c:	2b00      	cmp	r3, #0
 801550e:	d007      	beq.n	8015520 <MIN_App_Poll+0x94>
                    MIN_ReInit(ctx);
 8015510:	68f8      	ldr	r0, [r7, #12]
 8015512:	f7ff ff8d 	bl	8015430 <MIN_ReInit>
 8015516:	e003      	b.n	8015520 <MIN_App_Poll+0x94>
                }
#endif
            }
        } else {
            ctx->timeout_triggered = false;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2200      	movs	r2, #0
 801551c:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
        }
    }
    ctx->last_poll_time = now;
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	697a      	ldr	r2, [r7, #20]
 8015524:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
}
 8015528:	bf00      	nop
 801552a:	3718      	adds	r7, #24
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}

08015530 <MIN_Send>:
void MIN_Send(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *payload, uint8_t len) {
 8015530:	b580      	push	{r7, lr}
 8015532:	b084      	sub	sp, #16
 8015534:	af00      	add	r7, sp, #0
 8015536:	60f8      	str	r0, [r7, #12]
 8015538:	607a      	str	r2, [r7, #4]
 801553a:	461a      	mov	r2, r3
 801553c:	460b      	mov	r3, r1
 801553e:	72fb      	strb	r3, [r7, #11]
 8015540:	4613      	mov	r3, r2
 8015542:	72bb      	strb	r3, [r7, #10]
    if (min_queue_has_space_for_frame(&ctx->min_ctx, len)) {
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	7aba      	ldrb	r2, [r7, #10]
 8015548:	4611      	mov	r1, r2
 801554a:	4618      	mov	r0, r3
 801554c:	f7ff fbca 	bl	8014ce4 <min_queue_has_space_for_frame>
 8015550:	4603      	mov	r3, r0
 8015552:	2b00      	cmp	r3, #0
 8015554:	d005      	beq.n	8015562 <MIN_Send+0x32>
        min_queue_frame(&ctx->min_ctx, min_id, payload, len);
 8015556:	68f8      	ldr	r0, [r7, #12]
 8015558:	7abb      	ldrb	r3, [r7, #10]
 801555a:	7af9      	ldrb	r1, [r7, #11]
 801555c:	687a      	ldr	r2, [r7, #4]
 801555e:	f7ff fb79 	bl	8014c54 <min_queue_frame>
    }
}
 8015562:	bf00      	nop
 8015564:	3710      	adds	r7, #16
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}
	...

0801556c <MIN_RegisterResponseHandler>:
 *       to the appropriate handlers based on `min_id`.
 */

static MIN_ResponseHandler response_handler = NULL;

void MIN_RegisterResponseHandler(MIN_ResponseHandler handler) {
 801556c:	b480      	push	{r7}
 801556e:	b083      	sub	sp, #12
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
    response_handler = handler;
 8015574:	4a04      	ldr	r2, [pc, #16]	@ (8015588 <MIN_RegisterResponseHandler+0x1c>)
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6013      	str	r3, [r2, #0]
}
 801557a:	bf00      	nop
 801557c:	370c      	adds	r7, #12
 801557e:	46bd      	mov	sp, r7
 8015580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015584:	4770      	bx	lr
 8015586:	bf00      	nop
 8015588:	2405a574 	.word	0x2405a574

0801558c <min_application_handler>:

void min_application_handler(uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload, uint8_t port) {
 801558c:	b580      	push	{r7, lr}
 801558e:	b086      	sub	sp, #24
 8015590:	af00      	add	r7, sp, #0
 8015592:	6039      	str	r1, [r7, #0]
 8015594:	4611      	mov	r1, r2
 8015596:	461a      	mov	r2, r3
 8015598:	4603      	mov	r3, r0
 801559a:	71fb      	strb	r3, [r7, #7]
 801559c:	460b      	mov	r3, r1
 801559e:	71bb      	strb	r3, [r7, #6]
 80155a0:	4613      	mov	r3, r2
 80155a2:	717b      	strb	r3, [r7, #5]
    if (port >= MAX_MIN_CONTEXTS) {
 80155a4:	797b      	ldrb	r3, [r7, #5]
 80155a6:	2b03      	cmp	r3, #3
 80155a8:	d834      	bhi.n	8015614 <min_application_handler+0x88>
        return;
    }
    MIN_Context_t *ctx = registered_contexts[port];
 80155aa:	797b      	ldrb	r3, [r7, #5]
 80155ac:	4a1c      	ldr	r2, [pc, #112]	@ (8015620 <min_application_handler+0x94>)
 80155ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80155b2:	613b      	str	r3, [r7, #16]
    if (ctx == NULL) {
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d02e      	beq.n	8015618 <min_application_handler+0x8c>
        return;
    }

    if (response_handler != NULL) {
 80155ba:	4b1a      	ldr	r3, [pc, #104]	@ (8015624 <min_application_handler+0x98>)
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d005      	beq.n	80155ce <min_application_handler+0x42>
            response_handler(min_id, min_payload, len_payload);
 80155c2:	4b18      	ldr	r3, [pc, #96]	@ (8015624 <min_application_handler+0x98>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	79ba      	ldrb	r2, [r7, #6]
 80155c8:	79f8      	ldrb	r0, [r7, #7]
 80155ca:	6839      	ldr	r1, [r7, #0]
 80155cc:	4798      	blx	r3
    }

    const MIN_Command_t *command_table = MIN_GetCommandTable();
 80155ce:	f000 fca5 	bl	8015f1c <MIN_GetCommandTable>
 80155d2:	60f8      	str	r0, [r7, #12]
    int table_size = MIN_GetCommandTableSize();
 80155d4:	f000 fcac 	bl	8015f30 <MIN_GetCommandTableSize>
 80155d8:	60b8      	str	r0, [r7, #8]
    for (int i = 0; i < table_size; i++) {
 80155da:	2300      	movs	r3, #0
 80155dc:	617b      	str	r3, [r7, #20]
 80155de:	e014      	b.n	801560a <min_application_handler+0x7e>
        if (command_table[i].id == min_id) {
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	00db      	lsls	r3, r3, #3
 80155e4:	68fa      	ldr	r2, [r7, #12]
 80155e6:	4413      	add	r3, r2
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	79fa      	ldrb	r2, [r7, #7]
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d109      	bne.n	8015604 <min_application_handler+0x78>
            command_table[i].handler(ctx, min_payload, len_payload);
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	00db      	lsls	r3, r3, #3
 80155f4:	68fa      	ldr	r2, [r7, #12]
 80155f6:	4413      	add	r3, r2
 80155f8:	685b      	ldr	r3, [r3, #4]
 80155fa:	79ba      	ldrb	r2, [r7, #6]
 80155fc:	6839      	ldr	r1, [r7, #0]
 80155fe:	6938      	ldr	r0, [r7, #16]
 8015600:	4798      	blx	r3
            return;
 8015602:	e00a      	b.n	801561a <min_application_handler+0x8e>
    for (int i = 0; i < table_size; i++) {
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	3301      	adds	r3, #1
 8015608:	617b      	str	r3, [r7, #20]
 801560a:	697a      	ldr	r2, [r7, #20]
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	429a      	cmp	r2, r3
 8015610:	dbe6      	blt.n	80155e0 <min_application_handler+0x54>
 8015612:	e002      	b.n	801561a <min_application_handler+0x8e>
        return;
 8015614:	bf00      	nop
 8015616:	e000      	b.n	801561a <min_application_handler+0x8e>
        return;
 8015618:	bf00      	nop
        }
    }
    // Optional: Add default handler for unmatched commands
}
 801561a:	3718      	adds	r7, #24
 801561c:	46bd      	mov	sp, r7
 801561e:	bd80      	pop	{r7, pc}
 8015620:	2405a564 	.word	0x2405a564
 8015624:	2405a574 	.word	0x2405a574

08015628 <MIN_Handler_CONTROL_TEMP_ACK>:

// =================================================================
// Command Handlers
// =================================================================

static void MIN_Handler_CONTROL_TEMP_ACK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015628:	b580      	push	{r7, lr}
 801562a:	b0c6      	sub	sp, #280	@ 0x118
 801562c:	af00      	add	r7, sp, #0
 801562e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015632:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015636:	6018      	str	r0, [r3, #0]
 8015638:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801563c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015640:	6019      	str	r1, [r3, #0]
 8015642:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015646:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801564a:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 801564c:	2300      	movs	r3, #0
 801564e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload (%u bytes):", len);
 8015652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015656:	f107 0210 	add.w	r2, r7, #16
 801565a:	18d0      	adds	r0, r2, r3
 801565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015660:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015664:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015668:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 801566c:	781b      	ldrb	r3, [r3, #0]
 801566e:	4a37      	ldr	r2, [pc, #220]	@ (801574c <MIN_Handler_CONTROL_TEMP_ACK+0x124>)
 8015670:	f00c fbd0 	bl	8021e14 <sniprintf>
 8015674:	4602      	mov	r2, r0
 8015676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801567a:	4413      	add	r3, r2
 801567c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015680:	2300      	movs	r3, #0
 8015682:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8015686:	e01f      	b.n	80156c8 <MIN_Handler_CONTROL_TEMP_ACK+0xa0>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 8015688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801568c:	f107 0210 	add.w	r2, r7, #16
 8015690:	18d0      	adds	r0, r2, r3
 8015692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015696:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 801569a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 801569e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80156a2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80156a6:	6812      	ldr	r2, [r2, #0]
 80156a8:	4413      	add	r3, r2
 80156aa:	781b      	ldrb	r3, [r3, #0]
 80156ac:	4a28      	ldr	r2, [pc, #160]	@ (8015750 <MIN_Handler_CONTROL_TEMP_ACK+0x128>)
 80156ae:	f00c fbb1 	bl	8021e14 <sniprintf>
 80156b2:	4602      	mov	r2, r0
 80156b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156b8:	4413      	add	r3, r2
 80156ba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 80156be:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80156c2:	3301      	adds	r3, #1
 80156c4:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 80156c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80156cc:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80156d0:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 80156d4:	781b      	ldrb	r3, [r3, #0]
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d203      	bcs.n	80156e2 <MIN_Handler_CONTROL_TEMP_ACK+0xba>
 80156da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156de:	2bfb      	cmp	r3, #251	@ 0xfb
 80156e0:	d9d2      	bls.n	8015688 <MIN_Handler_CONTROL_TEMP_ACK+0x60>
    }

    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 80156e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156e6:	f107 0210 	add.w	r2, r7, #16
 80156ea:	18d0      	adds	r0, r2, r3
 80156ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156f0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80156f4:	4a17      	ldr	r2, [pc, #92]	@ (8015754 <MIN_Handler_CONTROL_TEMP_ACK+0x12c>)
 80156f6:	4619      	mov	r1, r3
 80156f8:	f00c fb8c 	bl	8021e14 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 80156fc:	f107 0310 	add.w	r3, r7, #16
 8015700:	4619      	mov	r1, r3
 8015702:	4815      	ldr	r0, [pc, #84]	@ (8015758 <MIN_Handler_CONTROL_TEMP_ACK+0x130>)
 8015704:	f7ec ffe6 	bl	80026d4 <UART_Driver_SendString>

    snprintf(buffer, sizeof(buffer), "Message: \"%s\"\r\n", payload);
 8015708:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801570c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015710:	f107 0010 	add.w	r0, r7, #16
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	4a11      	ldr	r2, [pc, #68]	@ (801575c <MIN_Handler_CONTROL_TEMP_ACK+0x134>)
 8015718:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801571c:	f00c fb7a 	bl	8021e14 <sniprintf>

    UART_Driver_SendString(UART_DEBUG, buffer);
 8015720:	f107 0310 	add.w	r3, r7, #16
 8015724:	4619      	mov	r1, r3
 8015726:	480c      	ldr	r0, [pc, #48]	@ (8015758 <MIN_Handler_CONTROL_TEMP_ACK+0x130>)
 8015728:	f7ec ffd4 	bl	80026d4 <UART_Driver_SendString>

    MIN_Send(ctx, CONTROL_TEMP_ACK, NULL, 0);
 801572c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015730:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8015734:	2300      	movs	r3, #0
 8015736:	2200      	movs	r2, #0
 8015738:	2104      	movs	r1, #4
 801573a:	6800      	ldr	r0, [r0, #0]
 801573c:	f7ff fef8 	bl	8015530 <MIN_Send>
}
 8015740:	bf00      	nop
 8015742:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	080255e8 	.word	0x080255e8
 8015750:	080255fc 	.word	0x080255fc
 8015754:	08025604 	.word	0x08025604
 8015758:	40004400 	.word	0x40004400
 801575c:	08025608 	.word	0x08025608

08015760 <MIN_Handler_PRE_DATA>:

static void MIN_Handler_PRE_DATA(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015760:	b580      	push	{r7, lr}
 8015762:	b0c8      	sub	sp, #288	@ 0x120
 8015764:	af02      	add	r7, sp, #8
 8015766:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801576a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801576e:	6018      	str	r0, [r3, #0]
 8015770:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015774:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015778:	6019      	str	r1, [r3, #0]
 801577a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801577e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015782:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 8015784:	2300      	movs	r3, #0
 8015786:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    if (len < 1) {
 801578a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801578e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015792:	781b      	ldrb	r3, [r3, #0]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d10e      	bne.n	80157b6 <MIN_Handler_PRE_DATA+0x56>
        snprintf(buffer, sizeof(buffer), "Invalid payload length.\r\n");
 8015798:	f107 0310 	add.w	r3, r7, #16
 801579c:	4a5b      	ldr	r2, [pc, #364]	@ (801590c <MIN_Handler_PRE_DATA+0x1ac>)
 801579e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80157a2:	4618      	mov	r0, r3
 80157a4:	f00c fb36 	bl	8021e14 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 80157a8:	f107 0310 	add.w	r3, r7, #16
 80157ac:	4619      	mov	r1, r3
 80157ae:	4858      	ldr	r0, [pc, #352]	@ (8015910 <MIN_Handler_PRE_DATA+0x1b0>)
 80157b0:	f7ec ff90 	bl	80026d4 <UART_Driver_SendString>
        return;
 80157b4:	e0a5      	b.n	8015902 <MIN_Handler_PRE_DATA+0x1a2>
    }

    uint8_t num_chunks = payload[0];
 80157b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80157ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
    if (len != 1 + 2 * num_chunks) {
 80157c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80157ca:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80157ce:	781a      	ldrb	r2, [r3, #0]
 80157d0:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 80157d4:	005b      	lsls	r3, r3, #1
 80157d6:	3301      	adds	r3, #1
 80157d8:	429a      	cmp	r2, r3
 80157da:	d018      	beq.n	801580e <MIN_Handler_PRE_DATA+0xae>
        snprintf(buffer, sizeof(buffer),
                 "Payload length mismatch. Expected %u bytes, got %u.\r\n",
                 1 + 2 * num_chunks, len);
 80157dc:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 80157e0:	005b      	lsls	r3, r3, #1
        snprintf(buffer, sizeof(buffer),
 80157e2:	1c5a      	adds	r2, r3, #1
 80157e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80157e8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	f107 0010 	add.w	r0, r7, #16
 80157f2:	9300      	str	r3, [sp, #0]
 80157f4:	4613      	mov	r3, r2
 80157f6:	4a47      	ldr	r2, [pc, #284]	@ (8015914 <MIN_Handler_PRE_DATA+0x1b4>)
 80157f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80157fc:	f00c fb0a 	bl	8021e14 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 8015800:	f107 0310 	add.w	r3, r7, #16
 8015804:	4619      	mov	r1, r3
 8015806:	4842      	ldr	r0, [pc, #264]	@ (8015910 <MIN_Handler_PRE_DATA+0x1b0>)
 8015808:	f7ec ff64 	bl	80026d4 <UART_Driver_SendString>
        return;
 801580c:	e079      	b.n	8015902 <MIN_Handler_PRE_DATA+0x1a2>
    }

    snprintf(buffer, sizeof(buffer), "Pre Data Success: %u Chunks\r\n", num_chunks);
 801580e:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8015812:	f107 0010 	add.w	r0, r7, #16
 8015816:	4a40      	ldr	r2, [pc, #256]	@ (8015918 <MIN_Handler_PRE_DATA+0x1b8>)
 8015818:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801581c:	f00c fafa 	bl	8021e14 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015820:	f107 0310 	add.w	r3, r7, #16
 8015824:	4619      	mov	r1, r3
 8015826:	483a      	ldr	r0, [pc, #232]	@ (8015910 <MIN_Handler_PRE_DATA+0x1b0>)
 8015828:	f7ec ff54 	bl	80026d4 <UART_Driver_SendString>

    offset = 0;
 801582c:	2300      	movs	r3, #0
 801582e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < num_chunks; i++) {
 8015832:	2300      	movs	r3, #0
 8015834:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8015838:	e049      	b.n	80158ce <MIN_Handler_PRE_DATA+0x16e>
        uint16_t crc = (payload[1 + 2 * i] << 8) | payload[2 + 2 * i];
 801583a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 801583e:	005b      	lsls	r3, r3, #1
 8015840:	3301      	adds	r3, #1
 8015842:	461a      	mov	r2, r3
 8015844:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015848:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	4413      	add	r3, r2
 8015850:	781b      	ldrb	r3, [r3, #0]
 8015852:	b21b      	sxth	r3, r3
 8015854:	021b      	lsls	r3, r3, #8
 8015856:	b21a      	sxth	r2, r3
 8015858:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 801585c:	3301      	adds	r3, #1
 801585e:	005b      	lsls	r3, r3, #1
 8015860:	4619      	mov	r1, r3
 8015862:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015866:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	440b      	add	r3, r1
 801586e:	781b      	ldrb	r3, [r3, #0]
 8015870:	b21b      	sxth	r3, r3
 8015872:	4313      	orrs	r3, r2
 8015874:	b21b      	sxth	r3, r3
 8015876:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        offset += snprintf(buffer + offset, sizeof(buffer) - offset,
 801587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801587e:	f107 0210 	add.w	r2, r7, #16
 8015882:	18d0      	adds	r0, r2, r3
 8015884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015888:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 801588c:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8015890:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8015894:	9300      	str	r3, [sp, #0]
 8015896:	4613      	mov	r3, r2
 8015898:	4a20      	ldr	r2, [pc, #128]	@ (801591c <MIN_Handler_PRE_DATA+0x1bc>)
 801589a:	f00c fabb 	bl	8021e14 <sniprintf>
 801589e:	4602      	mov	r2, r0
 80158a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158a4:	4413      	add	r3, r2
 80158a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                           "%u -> CRC16: 0x%04X\r\n", i, crc);
        if (offset >= sizeof(buffer) - 20) {
 80158aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158ae:	2beb      	cmp	r3, #235	@ 0xeb
 80158b0:	d908      	bls.n	80158c4 <MIN_Handler_PRE_DATA+0x164>
            UART_Driver_SendString(UART_DEBUG, buffer);
 80158b2:	f107 0310 	add.w	r3, r7, #16
 80158b6:	4619      	mov	r1, r3
 80158b8:	4815      	ldr	r0, [pc, #84]	@ (8015910 <MIN_Handler_PRE_DATA+0x1b0>)
 80158ba:	f7ec ff0b 	bl	80026d4 <UART_Driver_SendString>
            offset = 0;
 80158be:	2300      	movs	r3, #0
 80158c0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < num_chunks; i++) {
 80158c4:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80158c8:	3301      	adds	r3, #1
 80158ca:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 80158ce:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 80158d2:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d3af      	bcc.n	801583a <MIN_Handler_PRE_DATA+0xda>
        }
    }

    if (offset > 0) {
 80158da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158de:	2b00      	cmp	r3, #0
 80158e0:	dd05      	ble.n	80158ee <MIN_Handler_PRE_DATA+0x18e>
        UART_Driver_SendString(UART_DEBUG, buffer);
 80158e2:	f107 0310 	add.w	r3, r7, #16
 80158e6:	4619      	mov	r1, r3
 80158e8:	4809      	ldr	r0, [pc, #36]	@ (8015910 <MIN_Handler_PRE_DATA+0x1b0>)
 80158ea:	f7ec fef3 	bl	80026d4 <UART_Driver_SendString>
    }
    MIN_Send(ctx, PRE_DATA_ACK, NULL, 0);
 80158ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80158f2:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80158f6:	2300      	movs	r3, #0
 80158f8:	2200      	movs	r2, #0
 80158fa:	2116      	movs	r1, #22
 80158fc:	6800      	ldr	r0, [r0, #0]
 80158fe:	f7ff fe17 	bl	8015530 <MIN_Send>
}
 8015902:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8015906:	46bd      	mov	sp, r7
 8015908:	bd80      	pop	{r7, pc}
 801590a:	bf00      	nop
 801590c:	08025618 	.word	0x08025618
 8015910:	40004400 	.word	0x40004400
 8015914:	08025634 	.word	0x08025634
 8015918:	0802566c 	.word	0x0802566c
 801591c:	0802568c 	.word	0x0802568c

08015920 <MIN_Handler_PRE_CHUNK>:

static void MIN_Handler_PRE_CHUNK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015920:	b580      	push	{r7, lr}
 8015922:	b0c6      	sub	sp, #280	@ 0x118
 8015924:	af00      	add	r7, sp, #0
 8015926:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801592a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801592e:	6018      	str	r0, [r3, #0]
 8015930:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015934:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015938:	6019      	str	r1, [r3, #0]
 801593a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801593e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015942:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 8015944:	2300      	movs	r3, #0
 8015946:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    if (len != 2) {
 801594a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801594e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015952:	781b      	ldrb	r3, [r3, #0]
 8015954:	2b02      	cmp	r3, #2
 8015956:	d012      	beq.n	801597e <MIN_Handler_PRE_CHUNK+0x5e>
        snprintf(buffer, sizeof(buffer), "Invalid payload length. Expected 2 bytes, got %u.\r\n", len);
 8015958:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801595c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	f107 0010 	add.w	r0, r7, #16
 8015966:	4a4c      	ldr	r2, [pc, #304]	@ (8015a98 <MIN_Handler_PRE_CHUNK+0x178>)
 8015968:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801596c:	f00c fa52 	bl	8021e14 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 8015970:	f107 0310 	add.w	r3, r7, #16
 8015974:	4619      	mov	r1, r3
 8015976:	4849      	ldr	r0, [pc, #292]	@ (8015a9c <MIN_Handler_PRE_CHUNK+0x17c>)
 8015978:	f7ec feac 	bl	80026d4 <UART_Driver_SendString>
 801597c:	e088      	b.n	8015a90 <MIN_Handler_PRE_CHUNK+0x170>
        return;
    }

    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload (%u bytes):", len);
 801597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015982:	f107 0210 	add.w	r2, r7, #16
 8015986:	18d0      	adds	r0, r2, r3
 8015988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801598c:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015990:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015994:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015998:	781b      	ldrb	r3, [r3, #0]
 801599a:	4a41      	ldr	r2, [pc, #260]	@ (8015aa0 <MIN_Handler_PRE_CHUNK+0x180>)
 801599c:	f00c fa3a 	bl	8021e14 <sniprintf>
 80159a0:	4602      	mov	r2, r0
 80159a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159a6:	4413      	add	r3, r2
 80159a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 80159ac:	2300      	movs	r3, #0
 80159ae:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 80159b2:	e01f      	b.n	80159f4 <MIN_Handler_PRE_CHUNK+0xd4>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 80159b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159b8:	f107 0210 	add.w	r2, r7, #16
 80159bc:	18d0      	adds	r0, r2, r3
 80159be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159c2:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 80159c6:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80159ca:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80159ce:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80159d2:	6812      	ldr	r2, [r2, #0]
 80159d4:	4413      	add	r3, r2
 80159d6:	781b      	ldrb	r3, [r3, #0]
 80159d8:	4a32      	ldr	r2, [pc, #200]	@ (8015aa4 <MIN_Handler_PRE_CHUNK+0x184>)
 80159da:	f00c fa1b 	bl	8021e14 <sniprintf>
 80159de:	4602      	mov	r2, r0
 80159e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159e4:	4413      	add	r3, r2
 80159e6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 80159ea:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80159ee:	3301      	adds	r3, #1
 80159f0:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 80159f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80159f8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80159fc:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8015a00:	781b      	ldrb	r3, [r3, #0]
 8015a02:	429a      	cmp	r2, r3
 8015a04:	d203      	bcs.n	8015a0e <MIN_Handler_PRE_CHUNK+0xee>
 8015a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a0a:	2bfb      	cmp	r3, #251	@ 0xfb
 8015a0c:	d9d2      	bls.n	80159b4 <MIN_Handler_PRE_CHUNK+0x94>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 8015a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a12:	f107 0210 	add.w	r2, r7, #16
 8015a16:	18d0      	adds	r0, r2, r3
 8015a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a1c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8015a20:	4a21      	ldr	r2, [pc, #132]	@ (8015aa8 <MIN_Handler_PRE_CHUNK+0x188>)
 8015a22:	4619      	mov	r1, r3
 8015a24:	f00c f9f6 	bl	8021e14 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015a28:	f107 0310 	add.w	r3, r7, #16
 8015a2c:	4619      	mov	r1, r3
 8015a2e:	481b      	ldr	r0, [pc, #108]	@ (8015a9c <MIN_Handler_PRE_CHUNK+0x17c>)
 8015a30:	f7ec fe50 	bl	80026d4 <UART_Driver_SendString>

    uint16_t crc = (payload[0] << 8) | payload[1];
 8015a34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015a38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	b21b      	sxth	r3, r3
 8015a42:	021b      	lsls	r3, r3, #8
 8015a44:	b21a      	sxth	r2, r3
 8015a46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015a4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	3301      	adds	r3, #1
 8015a52:	781b      	ldrb	r3, [r3, #0]
 8015a54:	b21b      	sxth	r3, r3
 8015a56:	4313      	orrs	r3, r2
 8015a58:	b21b      	sxth	r3, r3
 8015a5a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    snprintf(buffer, sizeof(buffer), "Chunk CRC16: 0x%04X\r\n", crc);
 8015a5e:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8015a62:	f107 0010 	add.w	r0, r7, #16
 8015a66:	4a11      	ldr	r2, [pc, #68]	@ (8015aac <MIN_Handler_PRE_CHUNK+0x18c>)
 8015a68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015a6c:	f00c f9d2 	bl	8021e14 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015a70:	f107 0310 	add.w	r3, r7, #16
 8015a74:	4619      	mov	r1, r3
 8015a76:	4809      	ldr	r0, [pc, #36]	@ (8015a9c <MIN_Handler_PRE_CHUNK+0x17c>)
 8015a78:	f7ec fe2c 	bl	80026d4 <UART_Driver_SendString>
    MIN_Send(ctx, PRE_CHUNK_ACK, NULL, 0);
 8015a7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015a80:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8015a84:	2300      	movs	r3, #0
 8015a86:	2200      	movs	r2, #0
 8015a88:	2114      	movs	r1, #20
 8015a8a:	6800      	ldr	r0, [r0, #0]
 8015a8c:	f7ff fd50 	bl	8015530 <MIN_Send>
}
 8015a90:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}
 8015a98:	080256a4 	.word	0x080256a4
 8015a9c:	40004400 	.word	0x40004400
 8015aa0:	080255e8 	.word	0x080255e8
 8015aa4:	080255fc 	.word	0x080255fc
 8015aa8:	08025604 	.word	0x08025604
 8015aac:	080256d8 	.word	0x080256d8

08015ab0 <MIN_Handler_COLLECT_PACKAGE>:

static void MIN_Handler_COLLECT_PACKAGE(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b0c6      	sub	sp, #280	@ 0x118
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015aba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015abe:	6018      	str	r0, [r3, #0]
 8015ac0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015ac4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015ac8:	6019      	str	r1, [r3, #0]
 8015aca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015ace:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015ad2:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    if (len != 2) {
 8015ada:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015ade:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	2b02      	cmp	r3, #2
 8015ae6:	d012      	beq.n	8015b0e <MIN_Handler_COLLECT_PACKAGE+0x5e>
        snprintf(buffer, sizeof(buffer), "Invalid payload length. Expected 2 bytes, got %u.\r\n", len);
 8015ae8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015aec:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015af0:	781b      	ldrb	r3, [r3, #0]
 8015af2:	f107 0010 	add.w	r0, r7, #16
 8015af6:	4a4c      	ldr	r2, [pc, #304]	@ (8015c28 <MIN_Handler_COLLECT_PACKAGE+0x178>)
 8015af8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015afc:	f00c f98a 	bl	8021e14 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 8015b00:	f107 0310 	add.w	r3, r7, #16
 8015b04:	4619      	mov	r1, r3
 8015b06:	4849      	ldr	r0, [pc, #292]	@ (8015c2c <MIN_Handler_COLLECT_PACKAGE+0x17c>)
 8015b08:	f7ec fde4 	bl	80026d4 <UART_Driver_SendString>
 8015b0c:	e088      	b.n	8015c20 <MIN_Handler_COLLECT_PACKAGE+0x170>
        return;
    }

    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload (%u bytes):", len);
 8015b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b12:	f107 0210 	add.w	r2, r7, #16
 8015b16:	18d0      	adds	r0, r2, r3
 8015b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b1c:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015b20:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015b24:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015b28:	781b      	ldrb	r3, [r3, #0]
 8015b2a:	4a41      	ldr	r2, [pc, #260]	@ (8015c30 <MIN_Handler_COLLECT_PACKAGE+0x180>)
 8015b2c:	f00c f972 	bl	8021e14 <sniprintf>
 8015b30:	4602      	mov	r2, r0
 8015b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b36:	4413      	add	r3, r2
 8015b38:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8015b42:	e01f      	b.n	8015b84 <MIN_Handler_COLLECT_PACKAGE+0xd4>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 8015b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b48:	f107 0210 	add.w	r2, r7, #16
 8015b4c:	18d0      	adds	r0, r2, r3
 8015b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b52:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015b56:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8015b5a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8015b5e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8015b62:	6812      	ldr	r2, [r2, #0]
 8015b64:	4413      	add	r3, r2
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	4a32      	ldr	r2, [pc, #200]	@ (8015c34 <MIN_Handler_COLLECT_PACKAGE+0x184>)
 8015b6a:	f00c f953 	bl	8021e14 <sniprintf>
 8015b6e:	4602      	mov	r2, r0
 8015b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b74:	4413      	add	r3, r2
 8015b76:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015b7a:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8015b7e:	3301      	adds	r3, #1
 8015b80:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8015b84:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015b88:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8015b8c:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d203      	bcs.n	8015b9e <MIN_Handler_COLLECT_PACKAGE+0xee>
 8015b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b9a:	2bfb      	cmp	r3, #251	@ 0xfb
 8015b9c:	d9d2      	bls.n	8015b44 <MIN_Handler_COLLECT_PACKAGE+0x94>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 8015b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ba2:	f107 0210 	add.w	r2, r7, #16
 8015ba6:	18d0      	adds	r0, r2, r3
 8015ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bac:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8015bb0:	4a21      	ldr	r2, [pc, #132]	@ (8015c38 <MIN_Handler_COLLECT_PACKAGE+0x188>)
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	f00c f92e 	bl	8021e14 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015bb8:	f107 0310 	add.w	r3, r7, #16
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	481b      	ldr	r0, [pc, #108]	@ (8015c2c <MIN_Handler_COLLECT_PACKAGE+0x17c>)
 8015bc0:	f7ec fd88 	bl	80026d4 <UART_Driver_SendString>

    uint16_t crc = (payload[0] << 8) | payload[1];
 8015bc4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015bc8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	781b      	ldrb	r3, [r3, #0]
 8015bd0:	b21b      	sxth	r3, r3
 8015bd2:	021b      	lsls	r3, r3, #8
 8015bd4:	b21a      	sxth	r2, r3
 8015bd6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015bda:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	3301      	adds	r3, #1
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	b21b      	sxth	r3, r3
 8015be6:	4313      	orrs	r3, r2
 8015be8:	b21b      	sxth	r3, r3
 8015bea:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
    snprintf(buffer, sizeof(buffer), "Package CRC16: 0x%04X\r\n", crc);
 8015bee:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8015bf2:	f107 0010 	add.w	r0, r7, #16
 8015bf6:	4a11      	ldr	r2, [pc, #68]	@ (8015c3c <MIN_Handler_COLLECT_PACKAGE+0x18c>)
 8015bf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015bfc:	f00c f90a 	bl	8021e14 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015c00:	f107 0310 	add.w	r3, r7, #16
 8015c04:	4619      	mov	r1, r3
 8015c06:	4809      	ldr	r0, [pc, #36]	@ (8015c2c <MIN_Handler_COLLECT_PACKAGE+0x17c>)
 8015c08:	f7ec fd64 	bl	80026d4 <UART_Driver_SendString>
    MIN_Send(ctx, COLLECT_PACKAGE_ACK, NULL, 0);
 8015c0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015c10:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8015c14:	2300      	movs	r3, #0
 8015c16:	2200      	movs	r2, #0
 8015c18:	211b      	movs	r1, #27
 8015c1a:	6800      	ldr	r0, [r0, #0]
 8015c1c:	f7ff fc88 	bl	8015530 <MIN_Send>
}
 8015c20:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd80      	pop	{r7, pc}
 8015c28:	080256a4 	.word	0x080256a4
 8015c2c:	40004400 	.word	0x40004400
 8015c30:	080255e8 	.word	0x080255e8
 8015c34:	080255fc 	.word	0x080255fc
 8015c38:	08025604 	.word	0x08025604
 8015c3c:	080256f0 	.word	0x080256f0

08015c40 <MIN_Handler_SAMPLERATE_GET>:

static void MIN_Handler_SAMPLERATE_GET(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b0c8      	sub	sp, #288	@ 0x120
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015c4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8015c4e:	6018      	str	r0, [r3, #0]
 8015c50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015c54:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015c58:	6019      	str	r1, [r3, #0]
 8015c5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015c5e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8015c62:	701a      	strb	r2, [r3, #0]
    char buffer[256];
    int offset = 0;
 8015c64:	2300      	movs	r3, #0
 8015c66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    if (len != 4) {
 8015c6a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015c6e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8015c72:	781b      	ldrb	r3, [r3, #0]
 8015c74:	2b04      	cmp	r3, #4
 8015c76:	d012      	beq.n	8015c9e <MIN_Handler_SAMPLERATE_GET+0x5e>
        snprintf(buffer, sizeof(buffer), "Invalid payload length. Expected 4 bytes, got %u.\r\n", len);
 8015c78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015c7c:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8015c80:	781b      	ldrb	r3, [r3, #0]
 8015c82:	f107 0014 	add.w	r0, r7, #20
 8015c86:	4a53      	ldr	r2, [pc, #332]	@ (8015dd4 <MIN_Handler_SAMPLERATE_GET+0x194>)
 8015c88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015c8c:	f00c f8c2 	bl	8021e14 <sniprintf>
        UART_Driver_SendString(UART_DEBUG, buffer);
 8015c90:	f107 0314 	add.w	r3, r7, #20
 8015c94:	4619      	mov	r1, r3
 8015c96:	4850      	ldr	r0, [pc, #320]	@ (8015dd8 <MIN_Handler_SAMPLERATE_GET+0x198>)
 8015c98:	f7ec fd1c 	bl	80026d4 <UART_Driver_SendString>
 8015c9c:	e096      	b.n	8015dcc <MIN_Handler_SAMPLERATE_GET+0x18c>
        return;
    }

    offset += snprintf(buffer + offset, sizeof(buffer) - offset, "Payload (%u bytes):", len);
 8015c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015ca2:	f107 0214 	add.w	r2, r7, #20
 8015ca6:	18d0      	adds	r0, r2, r3
 8015ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015cac:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015cb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015cb4:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8015cb8:	781b      	ldrb	r3, [r3, #0]
 8015cba:	4a48      	ldr	r2, [pc, #288]	@ (8015ddc <MIN_Handler_SAMPLERATE_GET+0x19c>)
 8015cbc:	f00c f8aa 	bl	8021e14 <sniprintf>
 8015cc0:	4602      	mov	r2, r0
 8015cc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015cc6:	4413      	add	r3, r2
 8015cc8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015ccc:	2300      	movs	r3, #0
 8015cce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 8015cd2:	e01f      	b.n	8015d14 <MIN_Handler_SAMPLERATE_GET+0xd4>
        offset += snprintf(buffer + offset, sizeof(buffer) - offset, " %02X", payload[i]);
 8015cd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015cd8:	f107 0214 	add.w	r2, r7, #20
 8015cdc:	18d0      	adds	r0, r2, r3
 8015cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015ce2:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8015ce6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8015cea:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8015cee:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8015cf2:	6812      	ldr	r2, [r2, #0]
 8015cf4:	4413      	add	r3, r2
 8015cf6:	781b      	ldrb	r3, [r3, #0]
 8015cf8:	4a39      	ldr	r2, [pc, #228]	@ (8015de0 <MIN_Handler_SAMPLERATE_GET+0x1a0>)
 8015cfa:	f00c f88b 	bl	8021e14 <sniprintf>
 8015cfe:	4602      	mov	r2, r0
 8015d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015d04:	4413      	add	r3, r2
 8015d06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for (uint8_t i = 0; i < len && offset < sizeof(buffer) - 4; i++) {
 8015d0a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8015d0e:	3301      	adds	r3, #1
 8015d10:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 8015d14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d18:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8015d1c:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	429a      	cmp	r2, r3
 8015d24:	d203      	bcs.n	8015d2e <MIN_Handler_SAMPLERATE_GET+0xee>
 8015d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015d2a:	2bfb      	cmp	r3, #251	@ 0xfb
 8015d2c:	d9d2      	bls.n	8015cd4 <MIN_Handler_SAMPLERATE_GET+0x94>
    }
    snprintf(buffer + offset, sizeof(buffer) - offset, "\r\n");
 8015d2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015d32:	f107 0214 	add.w	r2, r7, #20
 8015d36:	18d0      	adds	r0, r2, r3
 8015d38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015d3c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8015d40:	4a28      	ldr	r2, [pc, #160]	@ (8015de4 <MIN_Handler_SAMPLERATE_GET+0x1a4>)
 8015d42:	4619      	mov	r1, r3
 8015d44:	f00c f866 	bl	8021e14 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015d48:	f107 0314 	add.w	r3, r7, #20
 8015d4c:	4619      	mov	r1, r3
 8015d4e:	4822      	ldr	r0, [pc, #136]	@ (8015dd8 <MIN_Handler_SAMPLERATE_GET+0x198>)
 8015d50:	f7ec fcc0 	bl	80026d4 <UART_Driver_SendString>

    uint32_t sample_rate = (payload[3] << 24) | (payload[2] << 16) | (payload[1] << 8) | payload[0];
 8015d54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	3303      	adds	r3, #3
 8015d60:	781b      	ldrb	r3, [r3, #0]
 8015d62:	061a      	lsls	r2, r3, #24
 8015d64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	3302      	adds	r3, #2
 8015d70:	781b      	ldrb	r3, [r3, #0]
 8015d72:	041b      	lsls	r3, r3, #16
 8015d74:	431a      	orrs	r2, r3
 8015d76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015d7a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	3301      	adds	r3, #1
 8015d82:	781b      	ldrb	r3, [r3, #0]
 8015d84:	021b      	lsls	r3, r3, #8
 8015d86:	4313      	orrs	r3, r2
 8015d88:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8015d8c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8015d90:	6812      	ldr	r2, [r2, #0]
 8015d92:	7812      	ldrb	r2, [r2, #0]
 8015d94:	4313      	orrs	r3, r2
 8015d96:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    snprintf(buffer, sizeof(buffer), "Sample rate: %lu Hz\r\n", (unsigned long)sample_rate);
 8015d9a:	f107 0014 	add.w	r0, r7, #20
 8015d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015da2:	4a11      	ldr	r2, [pc, #68]	@ (8015de8 <MIN_Handler_SAMPLERATE_GET+0x1a8>)
 8015da4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015da8:	f00c f834 	bl	8021e14 <sniprintf>
    UART_Driver_SendString(UART_DEBUG, buffer);
 8015dac:	f107 0314 	add.w	r3, r7, #20
 8015db0:	4619      	mov	r1, r3
 8015db2:	4809      	ldr	r0, [pc, #36]	@ (8015dd8 <MIN_Handler_SAMPLERATE_GET+0x198>)
 8015db4:	f7ec fc8e 	bl	80026d4 <UART_Driver_SendString>
    MIN_Send(ctx, SAMPLERATE_GET_ACK, NULL, 0);
 8015db8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015dbc:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	2119      	movs	r1, #25
 8015dc6:	6800      	ldr	r0, [r0, #0]
 8015dc8:	f7ff fbb2 	bl	8015530 <MIN_Send>
}
 8015dcc:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}
 8015dd4:	08025708 	.word	0x08025708
 8015dd8:	40004400 	.word	0x40004400
 8015ddc:	080255e8 	.word	0x080255e8
 8015de0:	080255fc 	.word	0x080255fc
 8015de4:	08025604 	.word	0x08025604
 8015de8:	0802573c 	.word	0x0802573c

08015dec <MIN_Handler_HEARTBEAT_CMD>:


static void MIN_Handler_HEARTBEAT_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b084      	sub	sp, #16
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	60f8      	str	r0, [r7, #12]
 8015df4:	60b9      	str	r1, [r7, #8]
 8015df6:	4613      	mov	r3, r2
 8015df8:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "HB";
    MIN_Send(ctx, HEARTBEAT_ACK, response, sizeof(response) - 1);
 8015dfa:	2302      	movs	r3, #2
 8015dfc:	4a04      	ldr	r2, [pc, #16]	@ (8015e10 <MIN_Handler_HEARTBEAT_CMD+0x24>)
 8015dfe:	2106      	movs	r1, #6
 8015e00:	68f8      	ldr	r0, [r7, #12]
 8015e02:	f7ff fb95 	bl	8015530 <MIN_Send>
}
 8015e06:	bf00      	nop
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	bf00      	nop
 8015e10:	0802632c 	.word	0x0802632c

08015e14 <MIN_Handler_GET_STATUS_CMD>:

static void MIN_Handler_GET_STATUS_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b084      	sub	sp, #16
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	60f8      	str	r0, [r7, #12]
 8015e1c:	60b9      	str	r1, [r7, #8]
 8015e1e:	4613      	mov	r3, r2
 8015e20:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "OK";
    MIN_Send(ctx, STATUS_RESPONSE, response, sizeof(response) - 1);
 8015e22:	2302      	movs	r3, #2
 8015e24:	4a04      	ldr	r2, [pc, #16]	@ (8015e38 <MIN_Handler_GET_STATUS_CMD+0x24>)
 8015e26:	2108      	movs	r1, #8
 8015e28:	68f8      	ldr	r0, [r7, #12]
 8015e2a:	f7ff fb81 	bl	8015530 <MIN_Send>
}
 8015e2e:	bf00      	nop
 8015e30:	3710      	adds	r7, #16
 8015e32:	46bd      	mov	sp, r7
 8015e34:	bd80      	pop	{r7, pc}
 8015e36:	bf00      	nop
 8015e38:	08026330 	.word	0x08026330

08015e3c <MIN_Handler_RESET_CMD>:

static void MIN_Handler_RESET_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b084      	sub	sp, #16
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	60b9      	str	r1, [r7, #8]
 8015e46:	4613      	mov	r3, r2
 8015e48:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    MIN_ReInit(ctx);
 8015e4a:	68f8      	ldr	r0, [r7, #12]
 8015e4c:	f7ff faf0 	bl	8015430 <MIN_ReInit>
}
 8015e50:	bf00      	nop
 8015e52:	3710      	adds	r7, #16
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}

08015e58 <MIN_Handler_PING_CMD>:

static void MIN_Handler_PING_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b084      	sub	sp, #16
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	60f8      	str	r0, [r7, #12]
 8015e60:	60b9      	str	r1, [r7, #8]
 8015e62:	4613      	mov	r3, r2
 8015e64:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    MIN_Send(ctx, PONG_CMD, NULL, 0);
 8015e66:	2300      	movs	r3, #0
 8015e68:	2200      	movs	r2, #0
 8015e6a:	210b      	movs	r1, #11
 8015e6c:	68f8      	ldr	r0, [r7, #12]
 8015e6e:	f7ff fb5f 	bl	8015530 <MIN_Send>
}
 8015e72:	bf00      	nop
 8015e74:	3710      	adds	r7, #16
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
	...

08015e7c <MIN_Handler_DUMMY_CMD_1>:

static void MIN_Handler_DUMMY_CMD_1(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b084      	sub	sp, #16
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	60f8      	str	r0, [r7, #12]
 8015e84:	60b9      	str	r1, [r7, #8]
 8015e86:	4613      	mov	r3, r2
 8015e88:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "D1";
    MIN_Send(ctx, DUMMY_CMD_1, response, sizeof(response) - 1);
 8015e8a:	2302      	movs	r3, #2
 8015e8c:	4a04      	ldr	r2, [pc, #16]	@ (8015ea0 <MIN_Handler_DUMMY_CMD_1+0x24>)
 8015e8e:	210c      	movs	r1, #12
 8015e90:	68f8      	ldr	r0, [r7, #12]
 8015e92:	f7ff fb4d 	bl	8015530 <MIN_Send>
}
 8015e96:	bf00      	nop
 8015e98:	3710      	adds	r7, #16
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}
 8015e9e:	bf00      	nop
 8015ea0:	08026334 	.word	0x08026334

08015ea4 <MIN_Handler_DUMMY_CMD_2>:

static void MIN_Handler_DUMMY_CMD_2(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b084      	sub	sp, #16
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	60f8      	str	r0, [r7, #12]
 8015eac:	60b9      	str	r1, [r7, #8]
 8015eae:	4613      	mov	r3, r2
 8015eb0:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "D2";
    MIN_Send(ctx, DUMMY_CMD_2, response, sizeof(response) - 1);
 8015eb2:	2302      	movs	r3, #2
 8015eb4:	4a04      	ldr	r2, [pc, #16]	@ (8015ec8 <MIN_Handler_DUMMY_CMD_2+0x24>)
 8015eb6:	210d      	movs	r1, #13
 8015eb8:	68f8      	ldr	r0, [r7, #12]
 8015eba:	f7ff fb39 	bl	8015530 <MIN_Send>
}
 8015ebe:	bf00      	nop
 8015ec0:	3710      	adds	r7, #16
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}
 8015ec6:	bf00      	nop
 8015ec8:	08026338 	.word	0x08026338

08015ecc <MIN_Handler_CUSTOM_CMD_1>:

static void MIN_Handler_CUSTOM_CMD_1(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b084      	sub	sp, #16
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	60f8      	str	r0, [r7, #12]
 8015ed4:	60b9      	str	r1, [r7, #8]
 8015ed6:	4613      	mov	r3, r2
 8015ed8:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "C1";
    MIN_Send(ctx, CUSTOM_CMD_1_ACK, response, sizeof(response) - 1);
 8015eda:	2302      	movs	r3, #2
 8015edc:	4a04      	ldr	r2, [pc, #16]	@ (8015ef0 <MIN_Handler_CUSTOM_CMD_1+0x24>)
 8015ede:	210f      	movs	r1, #15
 8015ee0:	68f8      	ldr	r0, [r7, #12]
 8015ee2:	f7ff fb25 	bl	8015530 <MIN_Send>
}
 8015ee6:	bf00      	nop
 8015ee8:	3710      	adds	r7, #16
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	0802633c 	.word	0x0802633c

08015ef4 <MIN_Handler_CUSTOM_CMD_2>:

static void MIN_Handler_CUSTOM_CMD_2(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b084      	sub	sp, #16
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	60f8      	str	r0, [r7, #12]
 8015efc:	60b9      	str	r1, [r7, #8]
 8015efe:	4613      	mov	r3, r2
 8015f00:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "C2";
    MIN_Send(ctx, CUSTOM_CMD_2_ACK, response, sizeof(response) - 1);
 8015f02:	2302      	movs	r3, #2
 8015f04:	4a04      	ldr	r2, [pc, #16]	@ (8015f18 <MIN_Handler_CUSTOM_CMD_2+0x24>)
 8015f06:	2111      	movs	r1, #17
 8015f08:	68f8      	ldr	r0, [r7, #12]
 8015f0a:	f7ff fb11 	bl	8015530 <MIN_Send>
}
 8015f0e:	bf00      	nop
 8015f10:	3710      	adds	r7, #16
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bd80      	pop	{r7, pc}
 8015f16:	bf00      	nop
 8015f18:	08026340 	.word	0x08026340

08015f1c <MIN_GetCommandTable>:

// =================================================================
// Helper Functions
// =================================================================

const MIN_Command_t *MIN_GetCommandTable(void) {
 8015f1c:	b480      	push	{r7}
 8015f1e:	af00      	add	r7, sp, #0
    return command_table;
 8015f20:	4b02      	ldr	r3, [pc, #8]	@ (8015f2c <MIN_GetCommandTable+0x10>)
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	46bd      	mov	sp, r7
 8015f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2a:	4770      	bx	lr
 8015f2c:	080262c4 	.word	0x080262c4

08015f30 <MIN_GetCommandTableSize>:

int MIN_GetCommandTableSize(void) {
 8015f30:	b480      	push	{r7}
 8015f32:	af00      	add	r7, sp, #0
    return command_table_size;
 8015f34:	230d      	movs	r3, #13
}
 8015f36:	4618      	mov	r0, r3
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3e:	4770      	bx	lr

08015f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8015f40:	b480      	push	{r7}
 8015f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8015f44:	4b49      	ldr	r3, [pc, #292]	@ (801606c <SystemInit+0x12c>)
 8015f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015f4a:	4a48      	ldr	r2, [pc, #288]	@ (801606c <SystemInit+0x12c>)
 8015f4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8015f54:	4b45      	ldr	r3, [pc, #276]	@ (801606c <SystemInit+0x12c>)
 8015f56:	691b      	ldr	r3, [r3, #16]
 8015f58:	4a44      	ldr	r2, [pc, #272]	@ (801606c <SystemInit+0x12c>)
 8015f5a:	f043 0310 	orr.w	r3, r3, #16
 8015f5e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8015f60:	4b43      	ldr	r3, [pc, #268]	@ (8016070 <SystemInit+0x130>)
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	f003 030f 	and.w	r3, r3, #15
 8015f68:	2b06      	cmp	r3, #6
 8015f6a:	d807      	bhi.n	8015f7c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8015f6c:	4b40      	ldr	r3, [pc, #256]	@ (8016070 <SystemInit+0x130>)
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	f023 030f 	bic.w	r3, r3, #15
 8015f74:	4a3e      	ldr	r2, [pc, #248]	@ (8016070 <SystemInit+0x130>)
 8015f76:	f043 0307 	orr.w	r3, r3, #7
 8015f7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8015f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8016074 <SystemInit+0x134>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	4a3c      	ldr	r2, [pc, #240]	@ (8016074 <SystemInit+0x134>)
 8015f82:	f043 0301 	orr.w	r3, r3, #1
 8015f86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8015f88:	4b3a      	ldr	r3, [pc, #232]	@ (8016074 <SystemInit+0x134>)
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8015f8e:	4b39      	ldr	r3, [pc, #228]	@ (8016074 <SystemInit+0x134>)
 8015f90:	681a      	ldr	r2, [r3, #0]
 8015f92:	4938      	ldr	r1, [pc, #224]	@ (8016074 <SystemInit+0x134>)
 8015f94:	4b38      	ldr	r3, [pc, #224]	@ (8016078 <SystemInit+0x138>)
 8015f96:	4013      	ands	r3, r2
 8015f98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8015f9a:	4b35      	ldr	r3, [pc, #212]	@ (8016070 <SystemInit+0x130>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	f003 0308 	and.w	r3, r3, #8
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d007      	beq.n	8015fb6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8015fa6:	4b32      	ldr	r3, [pc, #200]	@ (8016070 <SystemInit+0x130>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	f023 030f 	bic.w	r3, r3, #15
 8015fae:	4a30      	ldr	r2, [pc, #192]	@ (8016070 <SystemInit+0x130>)
 8015fb0:	f043 0307 	orr.w	r3, r3, #7
 8015fb4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8015fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8016074 <SystemInit+0x134>)
 8015fb8:	2200      	movs	r2, #0
 8015fba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8015fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8016074 <SystemInit+0x134>)
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8015fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8016074 <SystemInit+0x134>)
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8015fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8016074 <SystemInit+0x134>)
 8015fca:	4a2c      	ldr	r2, [pc, #176]	@ (801607c <SystemInit+0x13c>)
 8015fcc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8015fce:	4b29      	ldr	r3, [pc, #164]	@ (8016074 <SystemInit+0x134>)
 8015fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8016080 <SystemInit+0x140>)
 8015fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8015fd4:	4b27      	ldr	r3, [pc, #156]	@ (8016074 <SystemInit+0x134>)
 8015fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8016084 <SystemInit+0x144>)
 8015fd8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8015fda:	4b26      	ldr	r3, [pc, #152]	@ (8016074 <SystemInit+0x134>)
 8015fdc:	2200      	movs	r2, #0
 8015fde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8015fe0:	4b24      	ldr	r3, [pc, #144]	@ (8016074 <SystemInit+0x134>)
 8015fe2:	4a28      	ldr	r2, [pc, #160]	@ (8016084 <SystemInit+0x144>)
 8015fe4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8015fe6:	4b23      	ldr	r3, [pc, #140]	@ (8016074 <SystemInit+0x134>)
 8015fe8:	2200      	movs	r2, #0
 8015fea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8015fec:	4b21      	ldr	r3, [pc, #132]	@ (8016074 <SystemInit+0x134>)
 8015fee:	4a25      	ldr	r2, [pc, #148]	@ (8016084 <SystemInit+0x144>)
 8015ff0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8015ff2:	4b20      	ldr	r3, [pc, #128]	@ (8016074 <SystemInit+0x134>)
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8015ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8016074 <SystemInit+0x134>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8016074 <SystemInit+0x134>)
 8015ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016002:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8016004:	4b1b      	ldr	r3, [pc, #108]	@ (8016074 <SystemInit+0x134>)
 8016006:	2200      	movs	r2, #0
 8016008:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 801600a:	4b1f      	ldr	r3, [pc, #124]	@ (8016088 <SystemInit+0x148>)
 801600c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801600e:	4a1e      	ldr	r2, [pc, #120]	@ (8016088 <SystemInit+0x148>)
 8016010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8016014:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8016016:	4b1d      	ldr	r3, [pc, #116]	@ (801608c <SystemInit+0x14c>)
 8016018:	681a      	ldr	r2, [r3, #0]
 801601a:	4b1d      	ldr	r3, [pc, #116]	@ (8016090 <SystemInit+0x150>)
 801601c:	4013      	ands	r3, r2
 801601e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016022:	d202      	bcs.n	801602a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8016024:	4b1b      	ldr	r3, [pc, #108]	@ (8016094 <SystemInit+0x154>)
 8016026:	2201      	movs	r2, #1
 8016028:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 801602a:	4b12      	ldr	r3, [pc, #72]	@ (8016074 <SystemInit+0x134>)
 801602c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8016030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8016034:	2b00      	cmp	r3, #0
 8016036:	d113      	bne.n	8016060 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8016038:	4b0e      	ldr	r3, [pc, #56]	@ (8016074 <SystemInit+0x134>)
 801603a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801603e:	4a0d      	ldr	r2, [pc, #52]	@ (8016074 <SystemInit+0x134>)
 8016040:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8016044:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8016048:	4b13      	ldr	r3, [pc, #76]	@ (8016098 <SystemInit+0x158>)
 801604a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 801604e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8016050:	4b08      	ldr	r3, [pc, #32]	@ (8016074 <SystemInit+0x134>)
 8016052:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8016056:	4a07      	ldr	r2, [pc, #28]	@ (8016074 <SystemInit+0x134>)
 8016058:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801605c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8016060:	bf00      	nop
 8016062:	46bd      	mov	sp, r7
 8016064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016068:	4770      	bx	lr
 801606a:	bf00      	nop
 801606c:	e000ed00 	.word	0xe000ed00
 8016070:	52002000 	.word	0x52002000
 8016074:	58024400 	.word	0x58024400
 8016078:	eaf6ed7f 	.word	0xeaf6ed7f
 801607c:	02020200 	.word	0x02020200
 8016080:	01ff0000 	.word	0x01ff0000
 8016084:	01010280 	.word	0x01010280
 8016088:	580000c0 	.word	0x580000c0
 801608c:	5c001000 	.word	0x5c001000
 8016090:	ffff0000 	.word	0xffff0000
 8016094:	51008108 	.word	0x51008108
 8016098:	52004000 	.word	0x52004000

0801609c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 801609c:	b480      	push	{r7}
 801609e:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 80160a0:	4b0a      	ldr	r3, [pc, #40]	@ (80160cc <ExitRun0Mode+0x30>)
 80160a2:	68db      	ldr	r3, [r3, #12]
 80160a4:	f023 0306 	bic.w	r3, r3, #6
 80160a8:	4a08      	ldr	r2, [pc, #32]	@ (80160cc <ExitRun0Mode+0x30>)
 80160aa:	f043 0302 	orr.w	r3, r3, #2
 80160ae:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80160b0:	bf00      	nop
 80160b2:	4b06      	ldr	r3, [pc, #24]	@ (80160cc <ExitRun0Mode+0x30>)
 80160b4:	685b      	ldr	r3, [r3, #4]
 80160b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d0f9      	beq.n	80160b2 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80160be:	bf00      	nop
 80160c0:	bf00      	nop
 80160c2:	46bd      	mov	sp, r7
 80160c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c8:	4770      	bx	lr
 80160ca:	bf00      	nop
 80160cc:	58024800 	.word	0x58024800

080160d0 <__NVIC_GetPriorityGrouping>:
{
 80160d0:	b480      	push	{r7}
 80160d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80160d4:	4b04      	ldr	r3, [pc, #16]	@ (80160e8 <__NVIC_GetPriorityGrouping+0x18>)
 80160d6:	68db      	ldr	r3, [r3, #12]
 80160d8:	0a1b      	lsrs	r3, r3, #8
 80160da:	f003 0307 	and.w	r3, r3, #7
}
 80160de:	4618      	mov	r0, r3
 80160e0:	46bd      	mov	sp, r7
 80160e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e6:	4770      	bx	lr
 80160e8:	e000ed00 	.word	0xe000ed00

080160ec <__NVIC_EnableIRQ>:
{
 80160ec:	b480      	push	{r7}
 80160ee:	b083      	sub	sp, #12
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	4603      	mov	r3, r0
 80160f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80160f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	db0b      	blt.n	8016116 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80160fe:	88fb      	ldrh	r3, [r7, #6]
 8016100:	f003 021f 	and.w	r2, r3, #31
 8016104:	4907      	ldr	r1, [pc, #28]	@ (8016124 <__NVIC_EnableIRQ+0x38>)
 8016106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801610a:	095b      	lsrs	r3, r3, #5
 801610c:	2001      	movs	r0, #1
 801610e:	fa00 f202 	lsl.w	r2, r0, r2
 8016112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016116:	bf00      	nop
 8016118:	370c      	adds	r7, #12
 801611a:	46bd      	mov	sp, r7
 801611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016120:	4770      	bx	lr
 8016122:	bf00      	nop
 8016124:	e000e100 	.word	0xe000e100

08016128 <__NVIC_SetPriority>:
{
 8016128:	b480      	push	{r7}
 801612a:	b083      	sub	sp, #12
 801612c:	af00      	add	r7, sp, #0
 801612e:	4603      	mov	r3, r0
 8016130:	6039      	str	r1, [r7, #0]
 8016132:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016138:	2b00      	cmp	r3, #0
 801613a:	db0a      	blt.n	8016152 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	b2da      	uxtb	r2, r3
 8016140:	490c      	ldr	r1, [pc, #48]	@ (8016174 <__NVIC_SetPriority+0x4c>)
 8016142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016146:	0112      	lsls	r2, r2, #4
 8016148:	b2d2      	uxtb	r2, r2
 801614a:	440b      	add	r3, r1
 801614c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8016150:	e00a      	b.n	8016168 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	b2da      	uxtb	r2, r3
 8016156:	4908      	ldr	r1, [pc, #32]	@ (8016178 <__NVIC_SetPriority+0x50>)
 8016158:	88fb      	ldrh	r3, [r7, #6]
 801615a:	f003 030f 	and.w	r3, r3, #15
 801615e:	3b04      	subs	r3, #4
 8016160:	0112      	lsls	r2, r2, #4
 8016162:	b2d2      	uxtb	r2, r2
 8016164:	440b      	add	r3, r1
 8016166:	761a      	strb	r2, [r3, #24]
}
 8016168:	bf00      	nop
 801616a:	370c      	adds	r7, #12
 801616c:	46bd      	mov	sp, r7
 801616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016172:	4770      	bx	lr
 8016174:	e000e100 	.word	0xe000e100
 8016178:	e000ed00 	.word	0xe000ed00

0801617c <NVIC_EncodePriority>:
{
 801617c:	b480      	push	{r7}
 801617e:	b089      	sub	sp, #36	@ 0x24
 8016180:	af00      	add	r7, sp, #0
 8016182:	60f8      	str	r0, [r7, #12]
 8016184:	60b9      	str	r1, [r7, #8]
 8016186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	f003 0307 	and.w	r3, r3, #7
 801618e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016190:	69fb      	ldr	r3, [r7, #28]
 8016192:	f1c3 0307 	rsb	r3, r3, #7
 8016196:	2b04      	cmp	r3, #4
 8016198:	bf28      	it	cs
 801619a:	2304      	movcs	r3, #4
 801619c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801619e:	69fb      	ldr	r3, [r7, #28]
 80161a0:	3304      	adds	r3, #4
 80161a2:	2b06      	cmp	r3, #6
 80161a4:	d902      	bls.n	80161ac <NVIC_EncodePriority+0x30>
 80161a6:	69fb      	ldr	r3, [r7, #28]
 80161a8:	3b03      	subs	r3, #3
 80161aa:	e000      	b.n	80161ae <NVIC_EncodePriority+0x32>
 80161ac:	2300      	movs	r3, #0
 80161ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80161b0:	f04f 32ff 	mov.w	r2, #4294967295
 80161b4:	69bb      	ldr	r3, [r7, #24]
 80161b6:	fa02 f303 	lsl.w	r3, r2, r3
 80161ba:	43da      	mvns	r2, r3
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	401a      	ands	r2, r3
 80161c0:	697b      	ldr	r3, [r7, #20]
 80161c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80161c4:	f04f 31ff 	mov.w	r1, #4294967295
 80161c8:	697b      	ldr	r3, [r7, #20]
 80161ca:	fa01 f303 	lsl.w	r3, r1, r3
 80161ce:	43d9      	mvns	r1, r3
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80161d4:	4313      	orrs	r3, r2
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3724      	adds	r7, #36	@ 0x24
 80161da:	46bd      	mov	sp, r7
 80161dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e0:	4770      	bx	lr

080161e2 <LL_I2C_Disable>:
{
 80161e2:	b480      	push	{r7}
 80161e4:	b083      	sub	sp, #12
 80161e6:	af00      	add	r7, sp, #0
 80161e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	f023 0201 	bic.w	r2, r3, #1
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	601a      	str	r2, [r3, #0]
}
 80161f6:	bf00      	nop
 80161f8:	370c      	adds	r7, #12
 80161fa:	46bd      	mov	sp, r7
 80161fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016200:	4770      	bx	lr

08016202 <LL_I2C_EnableClockStretching>:
{
 8016202:	b480      	push	{r7}
 8016204:	b083      	sub	sp, #12
 8016206:	af00      	add	r7, sp, #0
 8016208:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	601a      	str	r2, [r3, #0]
}
 8016216:	bf00      	nop
 8016218:	370c      	adds	r7, #12
 801621a:	46bd      	mov	sp, r7
 801621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016220:	4770      	bx	lr

08016222 <LL_I2C_DisableGeneralCall>:
{
 8016222:	b480      	push	{r7}
 8016224:	b083      	sub	sp, #12
 8016226:	af00      	add	r7, sp, #0
 8016228:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	601a      	str	r2, [r3, #0]
}
 8016236:	bf00      	nop
 8016238:	370c      	adds	r7, #12
 801623a:	46bd      	mov	sp, r7
 801623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016240:	4770      	bx	lr
	...

08016244 <LL_I2C_SetOwnAddress2>:
{
 8016244:	b480      	push	{r7}
 8016246:	b085      	sub	sp, #20
 8016248:	af00      	add	r7, sp, #0
 801624a:	60f8      	str	r0, [r7, #12]
 801624c:	60b9      	str	r1, [r7, #8]
 801624e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	68da      	ldr	r2, [r3, #12]
 8016254:	4b06      	ldr	r3, [pc, #24]	@ (8016270 <LL_I2C_SetOwnAddress2+0x2c>)
 8016256:	4013      	ands	r3, r2
 8016258:	68b9      	ldr	r1, [r7, #8]
 801625a:	687a      	ldr	r2, [r7, #4]
 801625c:	430a      	orrs	r2, r1
 801625e:	431a      	orrs	r2, r3
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	60da      	str	r2, [r3, #12]
}
 8016264:	bf00      	nop
 8016266:	3714      	adds	r7, #20
 8016268:	46bd      	mov	sp, r7
 801626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626e:	4770      	bx	lr
 8016270:	fffff801 	.word	0xfffff801

08016274 <LL_I2C_DisableOwnAddress2>:
{
 8016274:	b480      	push	{r7}
 8016276:	b083      	sub	sp, #12
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	68db      	ldr	r3, [r3, #12]
 8016280:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	60da      	str	r2, [r3, #12]
}
 8016288:	bf00      	nop
 801628a:	370c      	adds	r7, #12
 801628c:	46bd      	mov	sp, r7
 801628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016292:	4770      	bx	lr

08016294 <LL_I2C_EnableAutoEndMode>:
{
 8016294:	b480      	push	{r7}
 8016296:	b083      	sub	sp, #12
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	685b      	ldr	r3, [r3, #4]
 80162a0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	605a      	str	r2, [r3, #4]
}
 80162a8:	bf00      	nop
 80162aa:	370c      	adds	r7, #12
 80162ac:	46bd      	mov	sp, r7
 80162ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b2:	4770      	bx	lr

080162b4 <LL_SPI_Enable>:
{
 80162b4:	b480      	push	{r7}
 80162b6:	b083      	sub	sp, #12
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	f043 0201 	orr.w	r2, r3, #1
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	601a      	str	r2, [r3, #0]
}
 80162c8:	bf00      	nop
 80162ca:	370c      	adds	r7, #12
 80162cc:	46bd      	mov	sp, r7
 80162ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d2:	4770      	bx	lr

080162d4 <LL_SPI_StartMasterTransfer>:
{
 80162d4:	b480      	push	{r7}
 80162d6:	b083      	sub	sp, #12
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	601a      	str	r2, [r3, #0]
}
 80162e8:	bf00      	nop
 80162ea:	370c      	adds	r7, #12
 80162ec:	46bd      	mov	sp, r7
 80162ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f2:	4770      	bx	lr

080162f4 <LL_SPI_SetStandard>:
{
 80162f4:	b480      	push	{r7}
 80162f6:	b083      	sub	sp, #12
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
 80162fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	68db      	ldr	r3, [r3, #12]
 8016302:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	431a      	orrs	r2, r3
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	60da      	str	r2, [r3, #12]
}
 801630e:	bf00      	nop
 8016310:	370c      	adds	r7, #12
 8016312:	46bd      	mov	sp, r7
 8016314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016318:	4770      	bx	lr

0801631a <LL_SPI_SetFIFOThreshold>:
{
 801631a:	b480      	push	{r7}
 801631c:	b083      	sub	sp, #12
 801631e:	af00      	add	r7, sp, #0
 8016320:	6078      	str	r0, [r7, #4]
 8016322:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	689b      	ldr	r3, [r3, #8]
 8016328:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	431a      	orrs	r2, r3
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	609a      	str	r2, [r3, #8]
}
 8016334:	bf00      	nop
 8016336:	370c      	adds	r7, #12
 8016338:	46bd      	mov	sp, r7
 801633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633e:	4770      	bx	lr

08016340 <LL_SPI_EnableNSSPulseMgt>:
{
 8016340:	b480      	push	{r7}
 8016342:	b083      	sub	sp, #12
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	68db      	ldr	r3, [r3, #12]
 801634c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	60da      	str	r2, [r3, #12]
}
 8016354:	bf00      	nop
 8016356:	370c      	adds	r7, #12
 8016358:	46bd      	mov	sp, r7
 801635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635e:	4770      	bx	lr

08016360 <LL_SPI_DisableNSSPulseMgt>:
{
 8016360:	b480      	push	{r7}
 8016362:	b083      	sub	sp, #12
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	68db      	ldr	r3, [r3, #12]
 801636c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	60da      	str	r2, [r3, #12]
}
 8016374:	bf00      	nop
 8016376:	370c      	adds	r7, #12
 8016378:	46bd      	mov	sp, r7
 801637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637e:	4770      	bx	lr

08016380 <LL_TIM_EnableCounter>:
{
 8016380:	b480      	push	{r7}
 8016382:	b083      	sub	sp, #12
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	f043 0201 	orr.w	r2, r3, #1
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	601a      	str	r2, [r3, #0]
}
 8016394:	bf00      	nop
 8016396:	370c      	adds	r7, #12
 8016398:	46bd      	mov	sp, r7
 801639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639e:	4770      	bx	lr

080163a0 <LL_TIM_EnableUpdateEvent>:
{
 80163a0:	b480      	push	{r7}
 80163a2:	b083      	sub	sp, #12
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	f023 0202 	bic.w	r2, r3, #2
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	601a      	str	r2, [r3, #0]
}
 80163b4:	bf00      	nop
 80163b6:	370c      	adds	r7, #12
 80163b8:	46bd      	mov	sp, r7
 80163ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163be:	4770      	bx	lr

080163c0 <LL_TIM_DisableARRPreload>:
{
 80163c0:	b480      	push	{r7}
 80163c2:	b083      	sub	sp, #12
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	601a      	str	r2, [r3, #0]
}
 80163d4:	bf00      	nop
 80163d6:	370c      	adds	r7, #12
 80163d8:	46bd      	mov	sp, r7
 80163da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163de:	4770      	bx	lr

080163e0 <LL_TIM_SetClockSource>:
{
 80163e0:	b480      	push	{r7}
 80163e2:	b083      	sub	sp, #12
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	689a      	ldr	r2, [r3, #8]
 80163ee:	4b06      	ldr	r3, [pc, #24]	@ (8016408 <LL_TIM_SetClockSource+0x28>)
 80163f0:	4013      	ands	r3, r2
 80163f2:	683a      	ldr	r2, [r7, #0]
 80163f4:	431a      	orrs	r2, r3
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	609a      	str	r2, [r3, #8]
}
 80163fa:	bf00      	nop
 80163fc:	370c      	adds	r7, #12
 80163fe:	46bd      	mov	sp, r7
 8016400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016404:	4770      	bx	lr
 8016406:	bf00      	nop
 8016408:	fffebff8 	.word	0xfffebff8

0801640c <LL_TIM_SetTriggerOutput>:
{
 801640c:	b480      	push	{r7}
 801640e:	b083      	sub	sp, #12
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
 8016414:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801641e:	683b      	ldr	r3, [r7, #0]
 8016420:	431a      	orrs	r2, r3
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	605a      	str	r2, [r3, #4]
}
 8016426:	bf00      	nop
 8016428:	370c      	adds	r7, #12
 801642a:	46bd      	mov	sp, r7
 801642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016430:	4770      	bx	lr

08016432 <LL_TIM_SetTriggerOutput2>:
{
 8016432:	b480      	push	{r7}
 8016434:	b083      	sub	sp, #12
 8016436:	af00      	add	r7, sp, #0
 8016438:	6078      	str	r0, [r7, #4]
 801643a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	431a      	orrs	r2, r3
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	605a      	str	r2, [r3, #4]
}
 801644c:	bf00      	nop
 801644e:	370c      	adds	r7, #12
 8016450:	46bd      	mov	sp, r7
 8016452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016456:	4770      	bx	lr

08016458 <LL_TIM_DisableMasterSlaveMode>:
{
 8016458:	b480      	push	{r7}
 801645a:	b083      	sub	sp, #12
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	689b      	ldr	r3, [r3, #8]
 8016464:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	609a      	str	r2, [r3, #8]
}
 801646c:	bf00      	nop
 801646e:	370c      	adds	r7, #12
 8016470:	46bd      	mov	sp, r7
 8016472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016476:	4770      	bx	lr

08016478 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8016478:	b480      	push	{r7}
 801647a:	b083      	sub	sp, #12
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	68db      	ldr	r3, [r3, #12]
 8016484:	f043 0201 	orr.w	r2, r3, #1
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	60da      	str	r2, [r3, #12]
}
 801648c:	bf00      	nop
 801648e:	370c      	adds	r7, #12
 8016490:	46bd      	mov	sp, r7
 8016492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016496:	4770      	bx	lr

08016498 <LL_USART_Enable>:
{
 8016498:	b480      	push	{r7}
 801649a:	b083      	sub	sp, #12
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	f043 0201 	orr.w	r2, r3, #1
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	601a      	str	r2, [r3, #0]
}
 80164ac:	bf00      	nop
 80164ae:	370c      	adds	r7, #12
 80164b0:	46bd      	mov	sp, r7
 80164b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b6:	4770      	bx	lr

080164b8 <LL_USART_DisableFIFO>:
{
 80164b8:	b480      	push	{r7}
 80164ba:	b083      	sub	sp, #12
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	601a      	str	r2, [r3, #0]
}
 80164cc:	bf00      	nop
 80164ce:	370c      	adds	r7, #12
 80164d0:	46bd      	mov	sp, r7
 80164d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d6:	4770      	bx	lr

080164d8 <LL_USART_SetTXFIFOThreshold>:
{
 80164d8:	b480      	push	{r7}
 80164da:	b089      	sub	sp, #36	@ 0x24
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
 80164e0:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	3308      	adds	r3, #8
 80164e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	e853 3f00 	ldrex	r3, [r3]
 80164ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80164f0:	68bb      	ldr	r3, [r7, #8]
 80164f2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80164f6:	683b      	ldr	r3, [r7, #0]
 80164f8:	075b      	lsls	r3, r3, #29
 80164fa:	4313      	orrs	r3, r2
 80164fc:	61fb      	str	r3, [r7, #28]
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	3308      	adds	r3, #8
 8016502:	69fa      	ldr	r2, [r7, #28]
 8016504:	61ba      	str	r2, [r7, #24]
 8016506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016508:	6979      	ldr	r1, [r7, #20]
 801650a:	69ba      	ldr	r2, [r7, #24]
 801650c:	e841 2300 	strex	r3, r2, [r1]
 8016510:	613b      	str	r3, [r7, #16]
   return(result);
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d1e4      	bne.n	80164e2 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8016518:	bf00      	nop
 801651a:	bf00      	nop
 801651c:	3724      	adds	r7, #36	@ 0x24
 801651e:	46bd      	mov	sp, r7
 8016520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016524:	4770      	bx	lr

08016526 <LL_USART_SetRXFIFOThreshold>:
{
 8016526:	b480      	push	{r7}
 8016528:	b089      	sub	sp, #36	@ 0x24
 801652a:	af00      	add	r7, sp, #0
 801652c:	6078      	str	r0, [r7, #4]
 801652e:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	3308      	adds	r3, #8
 8016534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	e853 3f00 	ldrex	r3, [r3]
 801653c:	60bb      	str	r3, [r7, #8]
   return(result);
 801653e:	68bb      	ldr	r3, [r7, #8]
 8016540:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8016544:	683b      	ldr	r3, [r7, #0]
 8016546:	065b      	lsls	r3, r3, #25
 8016548:	4313      	orrs	r3, r2
 801654a:	61fb      	str	r3, [r7, #28]
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	3308      	adds	r3, #8
 8016550:	69fa      	ldr	r2, [r7, #28]
 8016552:	61ba      	str	r2, [r7, #24]
 8016554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016556:	6979      	ldr	r1, [r7, #20]
 8016558:	69ba      	ldr	r2, [r7, #24]
 801655a:	e841 2300 	strex	r3, r2, [r1]
 801655e:	613b      	str	r3, [r7, #16]
   return(result);
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d1e4      	bne.n	8016530 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8016566:	bf00      	nop
 8016568:	bf00      	nop
 801656a:	3724      	adds	r7, #36	@ 0x24
 801656c:	46bd      	mov	sp, r7
 801656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016572:	4770      	bx	lr

08016574 <LL_USART_ConfigAsyncMode>:
{
 8016574:	b480      	push	{r7}
 8016576:	b083      	sub	sp, #12
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	685b      	ldr	r3, [r3, #4]
 8016580:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	689b      	ldr	r3, [r3, #8]
 801658c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	609a      	str	r2, [r3, #8]
}
 8016594:	bf00      	nop
 8016596:	370c      	adds	r7, #12
 8016598:	46bd      	mov	sp, r7
 801659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659e:	4770      	bx	lr

080165a0 <LL_USART_IsActiveFlag_TC>:
{
 80165a0:	b480      	push	{r7}
 80165a2:	b083      	sub	sp, #12
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	69db      	ldr	r3, [r3, #28]
 80165ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80165b0:	2b40      	cmp	r3, #64	@ 0x40
 80165b2:	d101      	bne.n	80165b8 <LL_USART_IsActiveFlag_TC+0x18>
 80165b4:	2301      	movs	r3, #1
 80165b6:	e000      	b.n	80165ba <LL_USART_IsActiveFlag_TC+0x1a>
 80165b8:	2300      	movs	r3, #0
}
 80165ba:	4618      	mov	r0, r3
 80165bc:	370c      	adds	r7, #12
 80165be:	46bd      	mov	sp, r7
 80165c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c4:	4770      	bx	lr

080165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 80165c6:	b480      	push	{r7}
 80165c8:	b083      	sub	sp, #12
 80165ca:	af00      	add	r7, sp, #0
 80165cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	69db      	ldr	r3, [r3, #28]
 80165d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80165d6:	2b80      	cmp	r3, #128	@ 0x80
 80165d8:	d101      	bne.n	80165de <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80165da:	2301      	movs	r3, #1
 80165dc:	e000      	b.n	80165e0 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80165de:	2300      	movs	r3, #0
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	370c      	adds	r7, #12
 80165e4:	46bd      	mov	sp, r7
 80165e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ea:	4770      	bx	lr

080165ec <LL_USART_IsActiveFlag_TEACK>:
{
 80165ec:	b480      	push	{r7}
 80165ee:	b083      	sub	sp, #12
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	69db      	ldr	r3, [r3, #28]
 80165f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80165fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8016600:	d101      	bne.n	8016606 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8016602:	2301      	movs	r3, #1
 8016604:	e000      	b.n	8016608 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8016606:	2300      	movs	r3, #0
}
 8016608:	4618      	mov	r0, r3
 801660a:	370c      	adds	r7, #12
 801660c:	46bd      	mov	sp, r7
 801660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016612:	4770      	bx	lr

08016614 <LL_USART_IsActiveFlag_REACK>:
{
 8016614:	b480      	push	{r7}
 8016616:	b083      	sub	sp, #12
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	69db      	ldr	r3, [r3, #28]
 8016620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8016624:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8016628:	d101      	bne.n	801662e <LL_USART_IsActiveFlag_REACK+0x1a>
 801662a:	2301      	movs	r3, #1
 801662c:	e000      	b.n	8016630 <LL_USART_IsActiveFlag_REACK+0x1c>
 801662e:	2300      	movs	r3, #0
}
 8016630:	4618      	mov	r0, r3
 8016632:	370c      	adds	r7, #12
 8016634:	46bd      	mov	sp, r7
 8016636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663a:	4770      	bx	lr

0801663c <LL_USART_TransmitData8>:
{
 801663c:	b480      	push	{r7}
 801663e:	b083      	sub	sp, #12
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
 8016644:	460b      	mov	r3, r1
 8016646:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8016648:	78fa      	ldrb	r2, [r7, #3]
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801664e:	bf00      	nop
 8016650:	370c      	adds	r7, #12
 8016652:	46bd      	mov	sp, r7
 8016654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016658:	4770      	bx	lr

0801665a <LL_GPIO_SetOutputPin>:
{
 801665a:	b480      	push	{r7}
 801665c:	b083      	sub	sp, #12
 801665e:	af00      	add	r7, sp, #0
 8016660:	6078      	str	r0, [r7, #4]
 8016662:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	683a      	ldr	r2, [r7, #0]
 8016668:	619a      	str	r2, [r3, #24]
}
 801666a:	bf00      	nop
 801666c:	370c      	adds	r7, #12
 801666e:	46bd      	mov	sp, r7
 8016670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016674:	4770      	bx	lr

08016676 <LL_GPIO_ResetOutputPin>:
{
 8016676:	b480      	push	{r7}
 8016678:	b083      	sub	sp, #12
 801667a:	af00      	add	r7, sp, #0
 801667c:	6078      	str	r0, [r7, #4]
 801667e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	041a      	lsls	r2, r3, #16
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	619a      	str	r2, [r3, #24]
}
 8016688:	bf00      	nop
 801668a:	370c      	adds	r7, #12
 801668c:	46bd      	mov	sp, r7
 801668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016692:	4770      	bx	lr

08016694 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8016694:	b480      	push	{r7}
 8016696:	b085      	sub	sp, #20
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 801669c:	4b0a      	ldr	r3, [pc, #40]	@ (80166c8 <LL_AHB4_GRP1_EnableClock+0x34>)
 801669e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80166a2:	4909      	ldr	r1, [pc, #36]	@ (80166c8 <LL_AHB4_GRP1_EnableClock+0x34>)
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	4313      	orrs	r3, r2
 80166a8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80166ac:	4b06      	ldr	r3, [pc, #24]	@ (80166c8 <LL_AHB4_GRP1_EnableClock+0x34>)
 80166ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	4013      	ands	r3, r2
 80166b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80166b8:	68fb      	ldr	r3, [r7, #12]
}
 80166ba:	bf00      	nop
 80166bc:	3714      	adds	r7, #20
 80166be:	46bd      	mov	sp, r7
 80166c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c4:	4770      	bx	lr
 80166c6:	bf00      	nop
 80166c8:	58024400 	.word	0x58024400

080166cc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80166cc:	b480      	push	{r7}
 80166ce:	b085      	sub	sp, #20
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 80166d4:	4b0a      	ldr	r3, [pc, #40]	@ (8016700 <LL_APB1_GRP1_EnableClock+0x34>)
 80166d6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80166da:	4909      	ldr	r1, [pc, #36]	@ (8016700 <LL_APB1_GRP1_EnableClock+0x34>)
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	4313      	orrs	r3, r2
 80166e0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80166e4:	4b06      	ldr	r3, [pc, #24]	@ (8016700 <LL_APB1_GRP1_EnableClock+0x34>)
 80166e6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	4013      	ands	r3, r2
 80166ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80166f0:	68fb      	ldr	r3, [r7, #12]
}
 80166f2:	bf00      	nop
 80166f4:	3714      	adds	r7, #20
 80166f6:	46bd      	mov	sp, r7
 80166f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fc:	4770      	bx	lr
 80166fe:	bf00      	nop
 8016700:	58024400 	.word	0x58024400

08016704 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8016704:	b480      	push	{r7}
 8016706:	b085      	sub	sp, #20
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 801670c:	4b0a      	ldr	r3, [pc, #40]	@ (8016738 <LL_APB2_GRP1_EnableClock+0x34>)
 801670e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8016712:	4909      	ldr	r1, [pc, #36]	@ (8016738 <LL_APB2_GRP1_EnableClock+0x34>)
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	4313      	orrs	r3, r2
 8016718:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 801671c:	4b06      	ldr	r3, [pc, #24]	@ (8016738 <LL_APB2_GRP1_EnableClock+0x34>)
 801671e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	4013      	ands	r3, r2
 8016726:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016728:	68fb      	ldr	r3, [r7, #12]
}
 801672a:	bf00      	nop
 801672c:	3714      	adds	r7, #20
 801672e:	46bd      	mov	sp, r7
 8016730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016734:	4770      	bx	lr
 8016736:	bf00      	nop
 8016738:	58024400 	.word	0x58024400

0801673c <LL_APB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_EnableClock(uint32_t Periphs)
{
 801673c:	b480      	push	{r7}
 801673e:	b085      	sub	sp, #20
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB4ENR, Periphs);
 8016744:	4b0a      	ldr	r3, [pc, #40]	@ (8016770 <LL_APB4_GRP1_EnableClock+0x34>)
 8016746:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 801674a:	4909      	ldr	r1, [pc, #36]	@ (8016770 <LL_APB4_GRP1_EnableClock+0x34>)
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	4313      	orrs	r3, r2
 8016750:	f8c1 30f4 	str.w	r3, [r1, #244]	@ 0xf4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB4ENR, Periphs);
 8016754:	4b06      	ldr	r3, [pc, #24]	@ (8016770 <LL_APB4_GRP1_EnableClock+0x34>)
 8016756:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	4013      	ands	r3, r2
 801675e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016760:	68fb      	ldr	r3, [r7, #12]
}
 8016762:	bf00      	nop
 8016764:	3714      	adds	r7, #20
 8016766:	46bd      	mov	sp, r7
 8016768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676c:	4770      	bx	lr
 801676e:	bf00      	nop
 8016770:	58024400 	.word	0x58024400

08016774 <LL_DMA_SetDataTransferDirection>:
{
 8016774:	b480      	push	{r7}
 8016776:	b087      	sub	sp, #28
 8016778:	af00      	add	r7, sp, #0
 801677a:	60f8      	str	r0, [r7, #12]
 801677c:	60b9      	str	r1, [r7, #8]
 801677e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8016784:	4a0d      	ldr	r2, [pc, #52]	@ (80167bc <LL_DMA_SetDataTransferDirection+0x48>)
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	4413      	add	r3, r2
 801678a:	781b      	ldrb	r3, [r3, #0]
 801678c:	461a      	mov	r2, r3
 801678e:	697b      	ldr	r3, [r7, #20]
 8016790:	4413      	add	r3, r2
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8016798:	4908      	ldr	r1, [pc, #32]	@ (80167bc <LL_DMA_SetDataTransferDirection+0x48>)
 801679a:	68bb      	ldr	r3, [r7, #8]
 801679c:	440b      	add	r3, r1
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	4619      	mov	r1, r3
 80167a2:	697b      	ldr	r3, [r7, #20]
 80167a4:	440b      	add	r3, r1
 80167a6:	4619      	mov	r1, r3
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	4313      	orrs	r3, r2
 80167ac:	600b      	str	r3, [r1, #0]
}
 80167ae:	bf00      	nop
 80167b0:	371c      	adds	r7, #28
 80167b2:	46bd      	mov	sp, r7
 80167b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b8:	4770      	bx	lr
 80167ba:	bf00      	nop
 80167bc:	08026354 	.word	0x08026354

080167c0 <LL_DMA_SetMode>:
{
 80167c0:	b480      	push	{r7}
 80167c2:	b087      	sub	sp, #28
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	60f8      	str	r0, [r7, #12]
 80167c8:	60b9      	str	r1, [r7, #8]
 80167ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80167d0:	4a0d      	ldr	r2, [pc, #52]	@ (8016808 <LL_DMA_SetMode+0x48>)
 80167d2:	68bb      	ldr	r3, [r7, #8]
 80167d4:	4413      	add	r3, r2
 80167d6:	781b      	ldrb	r3, [r3, #0]
 80167d8:	461a      	mov	r2, r3
 80167da:	697b      	ldr	r3, [r7, #20]
 80167dc:	4413      	add	r3, r2
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 80167e4:	4908      	ldr	r1, [pc, #32]	@ (8016808 <LL_DMA_SetMode+0x48>)
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	440b      	add	r3, r1
 80167ea:	781b      	ldrb	r3, [r3, #0]
 80167ec:	4619      	mov	r1, r3
 80167ee:	697b      	ldr	r3, [r7, #20]
 80167f0:	440b      	add	r3, r1
 80167f2:	4619      	mov	r1, r3
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	4313      	orrs	r3, r2
 80167f8:	600b      	str	r3, [r1, #0]
}
 80167fa:	bf00      	nop
 80167fc:	371c      	adds	r7, #28
 80167fe:	46bd      	mov	sp, r7
 8016800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016804:	4770      	bx	lr
 8016806:	bf00      	nop
 8016808:	08026354 	.word	0x08026354

0801680c <LL_DMA_SetPeriphIncMode>:
{
 801680c:	b480      	push	{r7}
 801680e:	b087      	sub	sp, #28
 8016810:	af00      	add	r7, sp, #0
 8016812:	60f8      	str	r0, [r7, #12]
 8016814:	60b9      	str	r1, [r7, #8]
 8016816:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 801681c:	4a0d      	ldr	r2, [pc, #52]	@ (8016854 <LL_DMA_SetPeriphIncMode+0x48>)
 801681e:	68bb      	ldr	r3, [r7, #8]
 8016820:	4413      	add	r3, r2
 8016822:	781b      	ldrb	r3, [r3, #0]
 8016824:	461a      	mov	r2, r3
 8016826:	697b      	ldr	r3, [r7, #20]
 8016828:	4413      	add	r3, r2
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8016830:	4908      	ldr	r1, [pc, #32]	@ (8016854 <LL_DMA_SetPeriphIncMode+0x48>)
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	440b      	add	r3, r1
 8016836:	781b      	ldrb	r3, [r3, #0]
 8016838:	4619      	mov	r1, r3
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	440b      	add	r3, r1
 801683e:	4619      	mov	r1, r3
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	4313      	orrs	r3, r2
 8016844:	600b      	str	r3, [r1, #0]
}
 8016846:	bf00      	nop
 8016848:	371c      	adds	r7, #28
 801684a:	46bd      	mov	sp, r7
 801684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016850:	4770      	bx	lr
 8016852:	bf00      	nop
 8016854:	08026354 	.word	0x08026354

08016858 <LL_DMA_SetMemoryIncMode>:
{
 8016858:	b480      	push	{r7}
 801685a:	b087      	sub	sp, #28
 801685c:	af00      	add	r7, sp, #0
 801685e:	60f8      	str	r0, [r7, #12]
 8016860:	60b9      	str	r1, [r7, #8]
 8016862:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 8016868:	4a0d      	ldr	r2, [pc, #52]	@ (80168a0 <LL_DMA_SetMemoryIncMode+0x48>)
 801686a:	68bb      	ldr	r3, [r7, #8]
 801686c:	4413      	add	r3, r2
 801686e:	781b      	ldrb	r3, [r3, #0]
 8016870:	461a      	mov	r2, r3
 8016872:	697b      	ldr	r3, [r7, #20]
 8016874:	4413      	add	r3, r2
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801687c:	4908      	ldr	r1, [pc, #32]	@ (80168a0 <LL_DMA_SetMemoryIncMode+0x48>)
 801687e:	68bb      	ldr	r3, [r7, #8]
 8016880:	440b      	add	r3, r1
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	4619      	mov	r1, r3
 8016886:	697b      	ldr	r3, [r7, #20]
 8016888:	440b      	add	r3, r1
 801688a:	4619      	mov	r1, r3
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	4313      	orrs	r3, r2
 8016890:	600b      	str	r3, [r1, #0]
}
 8016892:	bf00      	nop
 8016894:	371c      	adds	r7, #28
 8016896:	46bd      	mov	sp, r7
 8016898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689c:	4770      	bx	lr
 801689e:	bf00      	nop
 80168a0:	08026354 	.word	0x08026354

080168a4 <LL_DMA_SetPeriphSize>:
{
 80168a4:	b480      	push	{r7}
 80168a6:	b087      	sub	sp, #28
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	60f8      	str	r0, [r7, #12]
 80168ac:	60b9      	str	r1, [r7, #8]
 80168ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 80168b4:	4a0d      	ldr	r2, [pc, #52]	@ (80168ec <LL_DMA_SetPeriphSize+0x48>)
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	4413      	add	r3, r2
 80168ba:	781b      	ldrb	r3, [r3, #0]
 80168bc:	461a      	mov	r2, r3
 80168be:	697b      	ldr	r3, [r7, #20]
 80168c0:	4413      	add	r3, r2
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80168c8:	4908      	ldr	r1, [pc, #32]	@ (80168ec <LL_DMA_SetPeriphSize+0x48>)
 80168ca:	68bb      	ldr	r3, [r7, #8]
 80168cc:	440b      	add	r3, r1
 80168ce:	781b      	ldrb	r3, [r3, #0]
 80168d0:	4619      	mov	r1, r3
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	440b      	add	r3, r1
 80168d6:	4619      	mov	r1, r3
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	4313      	orrs	r3, r2
 80168dc:	600b      	str	r3, [r1, #0]
}
 80168de:	bf00      	nop
 80168e0:	371c      	adds	r7, #28
 80168e2:	46bd      	mov	sp, r7
 80168e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e8:	4770      	bx	lr
 80168ea:	bf00      	nop
 80168ec:	08026354 	.word	0x08026354

080168f0 <LL_DMA_SetMemorySize>:
{
 80168f0:	b480      	push	{r7}
 80168f2:	b087      	sub	sp, #28
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	60f8      	str	r0, [r7, #12]
 80168f8:	60b9      	str	r1, [r7, #8]
 80168fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8016900:	4a0d      	ldr	r2, [pc, #52]	@ (8016938 <LL_DMA_SetMemorySize+0x48>)
 8016902:	68bb      	ldr	r3, [r7, #8]
 8016904:	4413      	add	r3, r2
 8016906:	781b      	ldrb	r3, [r3, #0]
 8016908:	461a      	mov	r2, r3
 801690a:	697b      	ldr	r3, [r7, #20]
 801690c:	4413      	add	r3, r2
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8016914:	4908      	ldr	r1, [pc, #32]	@ (8016938 <LL_DMA_SetMemorySize+0x48>)
 8016916:	68bb      	ldr	r3, [r7, #8]
 8016918:	440b      	add	r3, r1
 801691a:	781b      	ldrb	r3, [r3, #0]
 801691c:	4619      	mov	r1, r3
 801691e:	697b      	ldr	r3, [r7, #20]
 8016920:	440b      	add	r3, r1
 8016922:	4619      	mov	r1, r3
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	4313      	orrs	r3, r2
 8016928:	600b      	str	r3, [r1, #0]
}
 801692a:	bf00      	nop
 801692c:	371c      	adds	r7, #28
 801692e:	46bd      	mov	sp, r7
 8016930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016934:	4770      	bx	lr
 8016936:	bf00      	nop
 8016938:	08026354 	.word	0x08026354

0801693c <LL_DMA_SetStreamPriorityLevel>:
{
 801693c:	b480      	push	{r7}
 801693e:	b087      	sub	sp, #28
 8016940:	af00      	add	r7, sp, #0
 8016942:	60f8      	str	r0, [r7, #12]
 8016944:	60b9      	str	r1, [r7, #8]
 8016946:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 801694c:	4a0d      	ldr	r2, [pc, #52]	@ (8016984 <LL_DMA_SetStreamPriorityLevel+0x48>)
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	4413      	add	r3, r2
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	461a      	mov	r2, r3
 8016956:	697b      	ldr	r3, [r7, #20]
 8016958:	4413      	add	r3, r2
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8016960:	4908      	ldr	r1, [pc, #32]	@ (8016984 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	440b      	add	r3, r1
 8016966:	781b      	ldrb	r3, [r3, #0]
 8016968:	4619      	mov	r1, r3
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	440b      	add	r3, r1
 801696e:	4619      	mov	r1, r3
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	4313      	orrs	r3, r2
 8016974:	600b      	str	r3, [r1, #0]
}
 8016976:	bf00      	nop
 8016978:	371c      	adds	r7, #28
 801697a:	46bd      	mov	sp, r7
 801697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016980:	4770      	bx	lr
 8016982:	bf00      	nop
 8016984:	08026354 	.word	0x08026354

08016988 <LL_DMA_SetPeriphRequest>:
{
 8016988:	b480      	push	{r7}
 801698a:	b085      	sub	sp, #20
 801698c:	af00      	add	r7, sp, #0
 801698e:	60f8      	str	r0, [r7, #12]
 8016990:	60b9      	str	r1, [r7, #8]
 8016992:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8016994:	68ba      	ldr	r2, [r7, #8]
 8016996:	4b12      	ldr	r3, [pc, #72]	@ (80169e0 <LL_DMA_SetPeriphRequest+0x58>)
 8016998:	4413      	add	r3, r2
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	68fa      	ldr	r2, [r7, #12]
 801699e:	4911      	ldr	r1, [pc, #68]	@ (80169e4 <LL_DMA_SetPeriphRequest+0x5c>)
 80169a0:	428a      	cmp	r2, r1
 80169a2:	d101      	bne.n	80169a8 <LL_DMA_SetPeriphRequest+0x20>
 80169a4:	2200      	movs	r2, #0
 80169a6:	e000      	b.n	80169aa <LL_DMA_SetPeriphRequest+0x22>
 80169a8:	2220      	movs	r2, #32
 80169aa:	4413      	add	r3, r2
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80169b2:	68b9      	ldr	r1, [r7, #8]
 80169b4:	4b0a      	ldr	r3, [pc, #40]	@ (80169e0 <LL_DMA_SetPeriphRequest+0x58>)
 80169b6:	440b      	add	r3, r1
 80169b8:	009b      	lsls	r3, r3, #2
 80169ba:	68f9      	ldr	r1, [r7, #12]
 80169bc:	4809      	ldr	r0, [pc, #36]	@ (80169e4 <LL_DMA_SetPeriphRequest+0x5c>)
 80169be:	4281      	cmp	r1, r0
 80169c0:	d101      	bne.n	80169c6 <LL_DMA_SetPeriphRequest+0x3e>
 80169c2:	2100      	movs	r1, #0
 80169c4:	e000      	b.n	80169c8 <LL_DMA_SetPeriphRequest+0x40>
 80169c6:	2120      	movs	r1, #32
 80169c8:	440b      	add	r3, r1
 80169ca:	4619      	mov	r1, r3
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	4313      	orrs	r3, r2
 80169d0:	600b      	str	r3, [r1, #0]
}
 80169d2:	bf00      	nop
 80169d4:	3714      	adds	r7, #20
 80169d6:	46bd      	mov	sp, r7
 80169d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169dc:	4770      	bx	lr
 80169de:	bf00      	nop
 80169e0:	10008200 	.word	0x10008200
 80169e4:	40020000 	.word	0x40020000

080169e8 <LL_DMA_DisableFifoMode>:
{
 80169e8:	b480      	push	{r7}
 80169ea:	b085      	sub	sp, #20
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 80169f6:	4a0c      	ldr	r2, [pc, #48]	@ (8016a28 <LL_DMA_DisableFifoMode+0x40>)
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	4413      	add	r3, r2
 80169fc:	781b      	ldrb	r3, [r3, #0]
 80169fe:	461a      	mov	r2, r3
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	4413      	add	r3, r2
 8016a04:	695b      	ldr	r3, [r3, #20]
 8016a06:	4908      	ldr	r1, [pc, #32]	@ (8016a28 <LL_DMA_DisableFifoMode+0x40>)
 8016a08:	683a      	ldr	r2, [r7, #0]
 8016a0a:	440a      	add	r2, r1
 8016a0c:	7812      	ldrb	r2, [r2, #0]
 8016a0e:	4611      	mov	r1, r2
 8016a10:	68fa      	ldr	r2, [r7, #12]
 8016a12:	440a      	add	r2, r1
 8016a14:	f023 0304 	bic.w	r3, r3, #4
 8016a18:	6153      	str	r3, [r2, #20]
}
 8016a1a:	bf00      	nop
 8016a1c:	3714      	adds	r7, #20
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a24:	4770      	bx	lr
 8016a26:	bf00      	nop
 8016a28:	08026354 	.word	0x08026354

08016a2c <LL_BDMA_SetDataTransferDirection>:
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	b087      	sub	sp, #28
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	60f8      	str	r0, [r7, #12]
 8016a34:	60b9      	str	r1, [r7, #8]
 8016a36:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR,
 8016a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8016a74 <LL_BDMA_SetDataTransferDirection+0x48>)
 8016a3e:	68bb      	ldr	r3, [r7, #8]
 8016a40:	4413      	add	r3, r2
 8016a42:	781b      	ldrb	r3, [r3, #0]
 8016a44:	461a      	mov	r2, r3
 8016a46:	697b      	ldr	r3, [r7, #20]
 8016a48:	4413      	add	r3, r2
 8016a4a:	681a      	ldr	r2, [r3, #0]
 8016a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8016a78 <LL_BDMA_SetDataTransferDirection+0x4c>)
 8016a4e:	4013      	ands	r3, r2
 8016a50:	4908      	ldr	r1, [pc, #32]	@ (8016a74 <LL_BDMA_SetDataTransferDirection+0x48>)
 8016a52:	68ba      	ldr	r2, [r7, #8]
 8016a54:	440a      	add	r2, r1
 8016a56:	7812      	ldrb	r2, [r2, #0]
 8016a58:	4611      	mov	r1, r2
 8016a5a:	697a      	ldr	r2, [r7, #20]
 8016a5c:	440a      	add	r2, r1
 8016a5e:	4611      	mov	r1, r2
 8016a60:	687a      	ldr	r2, [r7, #4]
 8016a62:	4313      	orrs	r3, r2
 8016a64:	600b      	str	r3, [r1, #0]
}
 8016a66:	bf00      	nop
 8016a68:	371c      	adds	r7, #28
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a70:	4770      	bx	lr
 8016a72:	bf00      	nop
 8016a74:	0802635c 	.word	0x0802635c
 8016a78:	ffffbfef 	.word	0xffffbfef

08016a7c <LL_BDMA_SetMode>:
{
 8016a7c:	b480      	push	{r7}
 8016a7e:	b087      	sub	sp, #28
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	60f8      	str	r0, [r7, #12]
 8016a84:	60b9      	str	r1, [r7, #8]
 8016a86:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_CIRC,
 8016a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8016ac4 <LL_BDMA_SetMode+0x48>)
 8016a8e:	68bb      	ldr	r3, [r7, #8]
 8016a90:	4413      	add	r3, r2
 8016a92:	781b      	ldrb	r3, [r3, #0]
 8016a94:	461a      	mov	r2, r3
 8016a96:	697b      	ldr	r3, [r7, #20]
 8016a98:	4413      	add	r3, r2
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	f023 0220 	bic.w	r2, r3, #32
 8016aa0:	4908      	ldr	r1, [pc, #32]	@ (8016ac4 <LL_BDMA_SetMode+0x48>)
 8016aa2:	68bb      	ldr	r3, [r7, #8]
 8016aa4:	440b      	add	r3, r1
 8016aa6:	781b      	ldrb	r3, [r3, #0]
 8016aa8:	4619      	mov	r1, r3
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	440b      	add	r3, r1
 8016aae:	4619      	mov	r1, r3
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	4313      	orrs	r3, r2
 8016ab4:	600b      	str	r3, [r1, #0]
}
 8016ab6:	bf00      	nop
 8016ab8:	371c      	adds	r7, #28
 8016aba:	46bd      	mov	sp, r7
 8016abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac0:	4770      	bx	lr
 8016ac2:	bf00      	nop
 8016ac4:	0802635c 	.word	0x0802635c

08016ac8 <LL_BDMA_SetPeriphIncMode>:
{
 8016ac8:	b480      	push	{r7}
 8016aca:	b087      	sub	sp, #28
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	60f8      	str	r0, [r7, #12]
 8016ad0:	60b9      	str	r1, [r7, #8]
 8016ad2:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_PINC,
 8016ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8016b10 <LL_BDMA_SetPeriphIncMode+0x48>)
 8016ada:	68bb      	ldr	r3, [r7, #8]
 8016adc:	4413      	add	r3, r2
 8016ade:	781b      	ldrb	r3, [r3, #0]
 8016ae0:	461a      	mov	r2, r3
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	4413      	add	r3, r2
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8016aec:	4908      	ldr	r1, [pc, #32]	@ (8016b10 <LL_BDMA_SetPeriphIncMode+0x48>)
 8016aee:	68bb      	ldr	r3, [r7, #8]
 8016af0:	440b      	add	r3, r1
 8016af2:	781b      	ldrb	r3, [r3, #0]
 8016af4:	4619      	mov	r1, r3
 8016af6:	697b      	ldr	r3, [r7, #20]
 8016af8:	440b      	add	r3, r1
 8016afa:	4619      	mov	r1, r3
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	4313      	orrs	r3, r2
 8016b00:	600b      	str	r3, [r1, #0]
}
 8016b02:	bf00      	nop
 8016b04:	371c      	adds	r7, #28
 8016b06:	46bd      	mov	sp, r7
 8016b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b0c:	4770      	bx	lr
 8016b0e:	bf00      	nop
 8016b10:	0802635c 	.word	0x0802635c

08016b14 <LL_BDMA_SetMemoryIncMode>:
{
 8016b14:	b480      	push	{r7}
 8016b16:	b087      	sub	sp, #28
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	60f8      	str	r0, [r7, #12]
 8016b1c:	60b9      	str	r1, [r7, #8]
 8016b1e:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_MINC,
 8016b24:	4a0d      	ldr	r2, [pc, #52]	@ (8016b5c <LL_BDMA_SetMemoryIncMode+0x48>)
 8016b26:	68bb      	ldr	r3, [r7, #8]
 8016b28:	4413      	add	r3, r2
 8016b2a:	781b      	ldrb	r3, [r3, #0]
 8016b2c:	461a      	mov	r2, r3
 8016b2e:	697b      	ldr	r3, [r7, #20]
 8016b30:	4413      	add	r3, r2
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016b38:	4908      	ldr	r1, [pc, #32]	@ (8016b5c <LL_BDMA_SetMemoryIncMode+0x48>)
 8016b3a:	68bb      	ldr	r3, [r7, #8]
 8016b3c:	440b      	add	r3, r1
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	4619      	mov	r1, r3
 8016b42:	697b      	ldr	r3, [r7, #20]
 8016b44:	440b      	add	r3, r1
 8016b46:	4619      	mov	r1, r3
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	4313      	orrs	r3, r2
 8016b4c:	600b      	str	r3, [r1, #0]
}
 8016b4e:	bf00      	nop
 8016b50:	371c      	adds	r7, #28
 8016b52:	46bd      	mov	sp, r7
 8016b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b58:	4770      	bx	lr
 8016b5a:	bf00      	nop
 8016b5c:	0802635c 	.word	0x0802635c

08016b60 <LL_BDMA_SetPeriphSize>:
{
 8016b60:	b480      	push	{r7}
 8016b62:	b087      	sub	sp, #28
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	60f8      	str	r0, [r7, #12]
 8016b68:	60b9      	str	r1, [r7, #8]
 8016b6a:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_PSIZE,
 8016b70:	4a0d      	ldr	r2, [pc, #52]	@ (8016ba8 <LL_BDMA_SetPeriphSize+0x48>)
 8016b72:	68bb      	ldr	r3, [r7, #8]
 8016b74:	4413      	add	r3, r2
 8016b76:	781b      	ldrb	r3, [r3, #0]
 8016b78:	461a      	mov	r2, r3
 8016b7a:	697b      	ldr	r3, [r7, #20]
 8016b7c:	4413      	add	r3, r2
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8016b84:	4908      	ldr	r1, [pc, #32]	@ (8016ba8 <LL_BDMA_SetPeriphSize+0x48>)
 8016b86:	68bb      	ldr	r3, [r7, #8]
 8016b88:	440b      	add	r3, r1
 8016b8a:	781b      	ldrb	r3, [r3, #0]
 8016b8c:	4619      	mov	r1, r3
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	440b      	add	r3, r1
 8016b92:	4619      	mov	r1, r3
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	4313      	orrs	r3, r2
 8016b98:	600b      	str	r3, [r1, #0]
}
 8016b9a:	bf00      	nop
 8016b9c:	371c      	adds	r7, #28
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop
 8016ba8:	0802635c 	.word	0x0802635c

08016bac <LL_BDMA_SetMemorySize>:
{
 8016bac:	b480      	push	{r7}
 8016bae:	b087      	sub	sp, #28
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	60f8      	str	r0, [r7, #12]
 8016bb4:	60b9      	str	r1, [r7, #8]
 8016bb6:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_MSIZE,
 8016bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8016bf4 <LL_BDMA_SetMemorySize+0x48>)
 8016bbe:	68bb      	ldr	r3, [r7, #8]
 8016bc0:	4413      	add	r3, r2
 8016bc2:	781b      	ldrb	r3, [r3, #0]
 8016bc4:	461a      	mov	r2, r3
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	4413      	add	r3, r2
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8016bd0:	4908      	ldr	r1, [pc, #32]	@ (8016bf4 <LL_BDMA_SetMemorySize+0x48>)
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	440b      	add	r3, r1
 8016bd6:	781b      	ldrb	r3, [r3, #0]
 8016bd8:	4619      	mov	r1, r3
 8016bda:	697b      	ldr	r3, [r7, #20]
 8016bdc:	440b      	add	r3, r1
 8016bde:	4619      	mov	r1, r3
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	4313      	orrs	r3, r2
 8016be4:	600b      	str	r3, [r1, #0]
}
 8016be6:	bf00      	nop
 8016be8:	371c      	adds	r7, #28
 8016bea:	46bd      	mov	sp, r7
 8016bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf0:	4770      	bx	lr
 8016bf2:	bf00      	nop
 8016bf4:	0802635c 	.word	0x0802635c

08016bf8 <LL_BDMA_SetChannelPriorityLevel>:
{
 8016bf8:	b480      	push	{r7}
 8016bfa:	b087      	sub	sp, #28
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	60f8      	str	r0, [r7, #12]
 8016c00:	60b9      	str	r1, [r7, #8]
 8016c02:	607a      	str	r2, [r7, #4]
  uint32_t bdma_base_addr = (uint32_t)BDMAx;
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((BDMA_Channel_TypeDef *)(bdma_base_addr + LL_BDMA_CH_OFFSET_TAB[Channel]))->CCR, BDMA_CCR_PL,
 8016c08:	4a0d      	ldr	r2, [pc, #52]	@ (8016c40 <LL_BDMA_SetChannelPriorityLevel+0x48>)
 8016c0a:	68bb      	ldr	r3, [r7, #8]
 8016c0c:	4413      	add	r3, r2
 8016c0e:	781b      	ldrb	r3, [r3, #0]
 8016c10:	461a      	mov	r2, r3
 8016c12:	697b      	ldr	r3, [r7, #20]
 8016c14:	4413      	add	r3, r2
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8016c1c:	4908      	ldr	r1, [pc, #32]	@ (8016c40 <LL_BDMA_SetChannelPriorityLevel+0x48>)
 8016c1e:	68bb      	ldr	r3, [r7, #8]
 8016c20:	440b      	add	r3, r1
 8016c22:	781b      	ldrb	r3, [r3, #0]
 8016c24:	4619      	mov	r1, r3
 8016c26:	697b      	ldr	r3, [r7, #20]
 8016c28:	440b      	add	r3, r1
 8016c2a:	4619      	mov	r1, r3
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	4313      	orrs	r3, r2
 8016c30:	600b      	str	r3, [r1, #0]
}
 8016c32:	bf00      	nop
 8016c34:	371c      	adds	r7, #28
 8016c36:	46bd      	mov	sp, r7
 8016c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3c:	4770      	bx	lr
 8016c3e:	bf00      	nop
 8016c40:	0802635c 	.word	0x0802635c

08016c44 <LL_BDMA_SetPeriphRequest>:
{
 8016c44:	b480      	push	{r7}
 8016c46:	b085      	sub	sp, #20
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	60f8      	str	r0, [r7, #12]
 8016c4c:	60b9      	str	r1, [r7, #8]
 8016c4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX2_Channel0 + (DMAMUX_CCR_SIZE * (Channel))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8016c50:	68ba      	ldr	r2, [r7, #8]
 8016c52:	4b0a      	ldr	r3, [pc, #40]	@ (8016c7c <LL_BDMA_SetPeriphRequest+0x38>)
 8016c54:	4413      	add	r3, r2
 8016c56:	009b      	lsls	r3, r3, #2
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8016c5e:	68b9      	ldr	r1, [r7, #8]
 8016c60:	4b06      	ldr	r3, [pc, #24]	@ (8016c7c <LL_BDMA_SetPeriphRequest+0x38>)
 8016c62:	440b      	add	r3, r1
 8016c64:	009b      	lsls	r3, r3, #2
 8016c66:	4619      	mov	r1, r3
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	4313      	orrs	r3, r2
 8016c6c:	600b      	str	r3, [r1, #0]
}
 8016c6e:	bf00      	nop
 8016c70:	3714      	adds	r7, #20
 8016c72:	46bd      	mov	sp, r7
 8016c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c78:	4770      	bx	lr
 8016c7a:	bf00      	nop
 8016c7c:	16009600 	.word	0x16009600

08016c80 <I2C_ReInit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_ReInit(I2C_TypeDef *I2Cx) {
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
    LL_I2C_Disable(I2Cx);
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f7ff faaa 	bl	80161e2 <LL_I2C_Disable>

    if (I2Cx == I2C2) {
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	4a04      	ldr	r2, [pc, #16]	@ (8016ca4 <I2C_ReInit+0x24>)
 8016c92:	4293      	cmp	r3, r2
 8016c94:	d101      	bne.n	8016c9a <I2C_ReInit+0x1a>
        MX_I2C2_Init();
 8016c96:	f000 fcd9 	bl	801764c <MX_I2C2_Init>
    }
}
 8016c9a:	bf00      	nop
 8016c9c:	3708      	adds	r7, #8
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}
 8016ca2:	bf00      	nop
 8016ca4:	40005800 	.word	0x40005800

08016ca8 <SDMMC1_ReInit>:

void SDMMC1_ReInit(void) {
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	af00      	add	r7, sp, #0
	HAL_MMC_DeInit(&hmmc1);
 8016cac:	4803      	ldr	r0, [pc, #12]	@ (8016cbc <SDMMC1_ReInit+0x14>)
 8016cae:	f003 fb45 	bl	801a33c <HAL_MMC_DeInit>
	MX_SDMMC1_MMC_Init();
 8016cb2:	f000 fd55 	bl	8017760 <MX_SDMMC1_MMC_Init>
}
 8016cb6:	bf00      	nop
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	2405a57c 	.word	0x2405a57c

08016cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8016cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cc2:	f5ad 7d6b 	sub.w	sp, sp, #940	@ 0x3ac
 8016cc6:	af00      	add	r7, sp, #0
  int32_t timeout;
#endif
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8016cc8:	f001 fcc6 	bl	8018658 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
#ifdef USE_CORE_M4
  timeout = 0xFFFF;
 8016ccc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016cd0:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8016cd4:	bf00      	nop
 8016cd6:	4bc2      	ldr	r3, [pc, #776]	@ (8016fe0 <main+0x320>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d006      	beq.n	8016cf0 <main+0x30>
 8016ce2:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8016ce6:	1e5a      	subs	r2, r3, #1
 8016ce8:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	dcf2      	bgt.n	8016cd6 <main+0x16>
  if ( timeout < 0 )
 8016cf0:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	da01      	bge.n	8016cfc <main+0x3c>
  {
  Error_Handler();
 8016cf8:	f001 fcec 	bl	80186d4 <Error_Handler>
#endif
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8016cfc:	f002 faba 	bl	8019274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8016d00:	f000 fc28 	bl	8017554 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
#ifdef USE_CORE_M4
__HAL_RCC_HSEM_CLK_ENABLE();
 8016d04:	4bb6      	ldr	r3, [pc, #728]	@ (8016fe0 <main+0x320>)
 8016d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016d0a:	4ab5      	ldr	r2, [pc, #724]	@ (8016fe0 <main+0x320>)
 8016d0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8016d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8016d14:	4bb2      	ldr	r3, [pc, #712]	@ (8016fe0 <main+0x320>)
 8016d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016d1a:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8016d1e:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8016d22:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8016d26:	601a      	str	r2, [r3, #0]
 8016d28:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8016d2c:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8016d30:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8016d32:	2000      	movs	r0, #0
 8016d34:	f002 ff6e 	bl	8019c14 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8016d38:	2100      	movs	r1, #0
 8016d3a:	2000      	movs	r0, #0
 8016d3c:	f002 ff84 	bl	8019c48 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8016d40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016d44:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8016d48:	bf00      	nop
 8016d4a:	4ba5      	ldr	r3, [pc, #660]	@ (8016fe0 <main+0x320>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d106      	bne.n	8016d64 <main+0xa4>
 8016d56:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8016d5a:	1e5a      	subs	r2, r3, #1
 8016d5c:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	dcf2      	bgt.n	8016d4a <main+0x8a>
if ( timeout < 0 )
 8016d64:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	da01      	bge.n	8016d70 <main+0xb0>
{
Error_Handler();
 8016d6c:	f001 fcb2 	bl	80186d4 <Error_Handler>
  MX_TIM1_Init();
  MX_UART7_Init();
  /* USER CODE BEGIN 2 */
#else

  char boot_log[800] = {0};
 8016d70:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8016d74:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8016d7e:	461a      	mov	r2, r3
 8016d80:	2100      	movs	r1, #0
 8016d82:	f00b f90c 	bl	8021f9e <memset>
  char temp[80];

  sprintf(boot_log, "\r\n-----> Booting STM32H7 - Cortex M7 on OBC ...\r\n");
 8016d86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016d8a:	4996      	ldr	r1, [pc, #600]	@ (8016fe4 <main+0x324>)
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f00b f877 	bl	8021e80 <siprintf>
  strcat(boot_log, "[ OK ] SystemClock: 240MHz, Initializing Peripherals...\r\n");
 8016d92:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016d96:	4618      	mov	r0, r3
 8016d98:	f7e9 faac 	bl	80002f4 <strlen>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	461a      	mov	r2, r3
 8016da0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016da4:	4413      	add	r3, r2
 8016da6:	4a90      	ldr	r2, [pc, #576]	@ (8016fe8 <main+0x328>)
 8016da8:	4614      	mov	r4, r2
 8016daa:	469c      	mov	ip, r3
 8016dac:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8016db0:	4665      	mov	r5, ip
 8016db2:	4626      	mov	r6, r4
 8016db4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016db6:	6028      	str	r0, [r5, #0]
 8016db8:	6069      	str	r1, [r5, #4]
 8016dba:	60aa      	str	r2, [r5, #8]
 8016dbc:	60eb      	str	r3, [r5, #12]
 8016dbe:	3410      	adds	r4, #16
 8016dc0:	f10c 0c10 	add.w	ip, ip, #16
 8016dc4:	4574      	cmp	r4, lr
 8016dc6:	d1f3      	bne.n	8016db0 <main+0xf0>
 8016dc8:	4662      	mov	r2, ip
 8016dca:	4623      	mov	r3, r4
 8016dcc:	cb03      	ldmia	r3!, {r0, r1}
 8016dce:	6010      	str	r0, [r2, #0]
 8016dd0:	6051      	str	r1, [r2, #4]
 8016dd2:	881b      	ldrh	r3, [r3, #0]
 8016dd4:	8113      	strh	r3, [r2, #8]
//  LL_mDelay(2);				//When use FreeRTOS, Sys-tick IRQ here is not enable
  HAL_Delay(2);
 8016dd6:	2002      	movs	r0, #2
 8016dd8:	f002 faa8 	bl	801932c <HAL_Delay>
  strcat(boot_log, "[ OK ] SYSCLK OK!, HAL OK!\r\n");
 8016ddc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7e9 fa87 	bl	80002f4 <strlen>
 8016de6:	4603      	mov	r3, r0
 8016de8:	461a      	mov	r2, r3
 8016dea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016dee:	4413      	add	r3, r2
 8016df0:	4a7e      	ldr	r2, [pc, #504]	@ (8016fec <main+0x32c>)
 8016df2:	461d      	mov	r5, r3
 8016df4:	4614      	mov	r4, r2
 8016df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016df8:	6028      	str	r0, [r5, #0]
 8016dfa:	6069      	str	r1, [r5, #4]
 8016dfc:	60aa      	str	r2, [r5, #8]
 8016dfe:	60eb      	str	r3, [r5, #12]
 8016e00:	cc07      	ldmia	r4!, {r0, r1, r2}
 8016e02:	6128      	str	r0, [r5, #16]
 8016e04:	6169      	str	r1, [r5, #20]
 8016e06:	61aa      	str	r2, [r5, #24]
 8016e08:	7823      	ldrb	r3, [r4, #0]
 8016e0a:	772b      	strb	r3, [r5, #28]

  //--> GPIO Init --> GPIO Init --> GPIO Init --> GPIO Init --> GPIO Init
  MX_GPIO_Init();
 8016e0c:	f001 fb42 	bl	8018494 <MX_GPIO_Init>
  if(peripherals[0].errorCode == Sys_OK)
 8016e10:	4b77      	ldr	r3, [pc, #476]	@ (8016ff0 <main+0x330>)
 8016e12:	7a9b      	ldrb	r3, [r3, #10]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d124      	bne.n	8016e62 <main+0x1a2>
  {
	  sprintf(temp, "[ OK ] GPIO Initialized.\r\n");
 8016e18:	1d3b      	adds	r3, r7, #4
 8016e1a:	4976      	ldr	r1, [pc, #472]	@ (8016ff4 <main+0x334>)
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f00b f82f 	bl	8021e80 <siprintf>
	  strcat(boot_log, temp);
 8016e22:	1d3a      	adds	r2, r7, #4
 8016e24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016e28:	4611      	mov	r1, r2
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f00b f8bf 	bl	8021fae <strcat>
	  LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED0_GPIO_Port, MCU_IO_DEBUG_LED0_Pin);
 8016e30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016e34:	4870      	ldr	r0, [pc, #448]	@ (8016ff8 <main+0x338>)
 8016e36:	f7ff fc10 	bl	801665a <LL_GPIO_SetOutputPin>
	  LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED1_GPIO_Port, MCU_IO_DEBUG_LED1_Pin);
 8016e3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8016e3e:	486e      	ldr	r0, [pc, #440]	@ (8016ff8 <main+0x338>)
 8016e40:	f7ff fc0b 	bl	801665a <LL_GPIO_SetOutputPin>
	  sprintf(temp, "[ OK ] DEBUG0: [+] | DEBUG1: [+]\r\n");
 8016e44:	1d3b      	adds	r3, r7, #4
 8016e46:	496d      	ldr	r1, [pc, #436]	@ (8016ffc <main+0x33c>)
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f00b f819 	bl	8021e80 <siprintf>
	  strcat(boot_log, temp);
 8016e4e:	1d3a      	adds	r2, r7, #4
 8016e50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016e54:	4611      	mov	r1, r2
 8016e56:	4618      	mov	r0, r3
 8016e58:	f00b f8a9 	bl	8021fae <strcat>
	  peripherals[0].state = PERIPH_STATE_INIT;
 8016e5c:	4b64      	ldr	r3, [pc, #400]	@ (8016ff0 <main+0x330>)
 8016e5e:	2201      	movs	r2, #1
 8016e60:	721a      	strb	r2, [r3, #8]
  }

  //--> MDMA Init --> MDMA Init --> MDMA Init --> MDMA Init --> MDMA Init
  MX_MDMA_Init();
 8016e62:	f001 faaf 	bl	80183c4 <MX_MDMA_Init>
  if(peripherals[1].errorCode == Sys_OK)
 8016e66:	4b62      	ldr	r3, [pc, #392]	@ (8016ff0 <main+0x330>)
 8016e68:	7f9b      	ldrb	r3, [r3, #30]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d10f      	bne.n	8016e8e <main+0x1ce>
  {
	  sprintf(temp, "[ OK ] MDMA Initialized.\r\n");
 8016e6e:	1d3b      	adds	r3, r7, #4
 8016e70:	4963      	ldr	r1, [pc, #396]	@ (8017000 <main+0x340>)
 8016e72:	4618      	mov	r0, r3
 8016e74:	f00b f804 	bl	8021e80 <siprintf>
	  strcat(boot_log, temp);
 8016e78:	1d3a      	adds	r2, r7, #4
 8016e7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016e7e:	4611      	mov	r1, r2
 8016e80:	4618      	mov	r0, r3
 8016e82:	f00b f894 	bl	8021fae <strcat>
	  peripherals[1].state = PERIPH_STATE_INIT;
 8016e86:	4b5a      	ldr	r3, [pc, #360]	@ (8016ff0 <main+0x330>)
 8016e88:	2201      	movs	r2, #1
 8016e8a:	771a      	strb	r2, [r3, #28]
 8016e8c:	e00e      	b.n	8016eac <main+0x1ec>
  }else{
	  sprintf(temp, "[ ER ] MDMA Init Error!.\r\n");
 8016e8e:	1d3b      	adds	r3, r7, #4
 8016e90:	495c      	ldr	r1, [pc, #368]	@ (8017004 <main+0x344>)
 8016e92:	4618      	mov	r0, r3
 8016e94:	f00a fff4 	bl	8021e80 <siprintf>
	  strcat(boot_log, temp);
 8016e98:	1d3a      	adds	r2, r7, #4
 8016e9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016e9e:	4611      	mov	r1, r2
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f00b f884 	bl	8021fae <strcat>
	  peripherals[1].state = PERIPH_STATE_ERROR;
 8016ea6:	4b52      	ldr	r3, [pc, #328]	@ (8016ff0 <main+0x330>)
 8016ea8:	2202      	movs	r2, #2
 8016eaa:	771a      	strb	r2, [r3, #28]
  }

  //--> DMA Init --> DMA Init --> DMA Init --> DMA Init --> DMA Init
  MX_DMA_Init();
 8016eac:	f001 fa22 	bl	80182f4 <MX_DMA_Init>
  if(peripherals[2].errorCode == Sys_OK)
 8016eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8016ff0 <main+0x330>)
 8016eb2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d10f      	bne.n	8016eda <main+0x21a>
  {
	  sprintf(temp, "[ OK ] DMA Initialized.\r\n");
 8016eba:	1d3b      	adds	r3, r7, #4
 8016ebc:	4952      	ldr	r1, [pc, #328]	@ (8017008 <main+0x348>)
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f00a ffde 	bl	8021e80 <siprintf>
	  strcat(boot_log, temp);
 8016ec4:	1d3a      	adds	r2, r7, #4
 8016ec6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016eca:	4611      	mov	r1, r2
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f00b f86e 	bl	8021fae <strcat>
	  peripherals[2].state = PERIPH_STATE_INIT;
 8016ed2:	4b47      	ldr	r3, [pc, #284]	@ (8016ff0 <main+0x330>)
 8016ed4:	2201      	movs	r2, #1
 8016ed6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  //--> BDMA Init --> BDMA Init --> BDMA Init --> BDMA Init --> BDMA Init
  MX_BDMA_Init();
 8016eda:	f001 f9d3 	bl	8018284 <MX_BDMA_Init>
  if(peripherals[3].errorCode == Sys_OK)
 8016ede:	4b44      	ldr	r3, [pc, #272]	@ (8016ff0 <main+0x330>)
 8016ee0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d10f      	bne.n	8016f08 <main+0x248>
  {
	  sprintf(temp, "[ OK ] BDMA Initialized.\r\n");
 8016ee8:	1d3b      	adds	r3, r7, #4
 8016eea:	4948      	ldr	r1, [pc, #288]	@ (801700c <main+0x34c>)
 8016eec:	4618      	mov	r0, r3
 8016eee:	f00a ffc7 	bl	8021e80 <siprintf>
      strcat(boot_log, temp);
 8016ef2:	1d3a      	adds	r2, r7, #4
 8016ef4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016ef8:	4611      	mov	r1, r2
 8016efa:	4618      	mov	r0, r3
 8016efc:	f00b f857 	bl	8021fae <strcat>
	  peripherals[3].state = PERIPH_STATE_INIT;
 8016f00:	4b3b      	ldr	r3, [pc, #236]	@ (8016ff0 <main+0x330>)
 8016f02:	2201      	movs	r2, #1
 8016f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  }

  //--> USART1 Init --> USART1 Init--> USART1 Init--> USART1 Init--> USART1 Init
  MX_USART1_UART_Init();
 8016f08:	f001 f814 	bl	8017f34 <MX_USART1_UART_Init>
  if(peripherals[4].errorCode == Sys_OK)
 8016f0c:	4b38      	ldr	r3, [pc, #224]	@ (8016ff0 <main+0x330>)
 8016f0e:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d10f      	bne.n	8016f36 <main+0x276>
  {
	  sprintf(temp, "[ OK ] USART1 Initialized, Baud Rate: 115200.\r\n");
 8016f16:	1d3b      	adds	r3, r7, #4
 8016f18:	493d      	ldr	r1, [pc, #244]	@ (8017010 <main+0x350>)
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f00a ffb0 	bl	8021e80 <siprintf>
	  strcat(boot_log, temp);
 8016f20:	1d3a      	adds	r2, r7, #4
 8016f22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016f26:	4611      	mov	r1, r2
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f00b f840 	bl	8021fae <strcat>
	  peripherals[4].state = PERIPH_STATE_INIT;
 8016f2e:	4b30      	ldr	r3, [pc, #192]	@ (8016ff0 <main+0x330>)
 8016f30:	2201      	movs	r2, #1
 8016f32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  //--> USART2 Init --> USART2 Init--> USART2 Init--> USART2 Init--> USART2 Init
  MX_USART2_UART_Init();
 8016f36:	f001 f8d1 	bl	80180dc <MX_USART2_UART_Init>
  if(peripherals[5].errorCode == Sys_OK)
 8016f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8016ff0 <main+0x330>)
 8016f3c:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d10f      	bne.n	8016f64 <main+0x2a4>
  {
	  sprintf(temp, "[ OK ] USART2 Initialized, Baud Rate: 115200.\r\n");
 8016f44:	1d3b      	adds	r3, r7, #4
 8016f46:	4933      	ldr	r1, [pc, #204]	@ (8017014 <main+0x354>)
 8016f48:	4618      	mov	r0, r3
 8016f4a:	f00a ff99 	bl	8021e80 <siprintf>
	  strcat(boot_log, temp);
 8016f4e:	1d3a      	adds	r2, r7, #4
 8016f50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016f54:	4611      	mov	r1, r2
 8016f56:	4618      	mov	r0, r3
 8016f58:	f00b f829 	bl	8021fae <strcat>
	  peripherals[5].state = PERIPH_STATE_INIT;
 8016f5c:	4b24      	ldr	r3, [pc, #144]	@ (8016ff0 <main+0x330>)
 8016f5e:	2201      	movs	r2, #1
 8016f60:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  }

  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8016f64:	2300      	movs	r3, #0
 8016f66:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8016f6a:	e017      	b.n	8016f9c <main+0x2dc>
  {
      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 8016f6c:	bf00      	nop
 8016f6e:	482a      	ldr	r0, [pc, #168]	@ (8017018 <main+0x358>)
 8016f70:	f7ff fb29 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8016f74:	4603      	mov	r3, r0
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d0f9      	beq.n	8016f6e <main+0x2ae>
      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 8016f7a:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8016f7e:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8016f82:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8016f86:	4413      	add	r3, r2
 8016f88:	781b      	ldrb	r3, [r3, #0]
 8016f8a:	4619      	mov	r1, r3
 8016f8c:	4822      	ldr	r0, [pc, #136]	@ (8017018 <main+0x358>)
 8016f8e:	f7ff fb55 	bl	801663c <LL_USART_TransmitData8>
  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8016f92:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8016f96:	3301      	adds	r3, #1
 8016f98:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8016f9c:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8016fa0:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8016fa4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8016fa8:	4413      	add	r3, r2
 8016faa:	781b      	ldrb	r3, [r3, #0]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d1dd      	bne.n	8016f6c <main+0x2ac>
  }
  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 8016fb0:	bf00      	nop
 8016fb2:	4819      	ldr	r0, [pc, #100]	@ (8017018 <main+0x358>)
 8016fb4:	f7ff faf4 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d0f9      	beq.n	8016fb2 <main+0x2f2>
//      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
//  }
//  while (!LL_USART_IsActiveFlag_TC(UART_USB));

  //--> I2C2 Init --> I2C2 Init --> I2C2 Init --> I2C2 Init --> I2C2 Init
  MX_I2C2_Init();
 8016fbe:	f000 fb45 	bl	801764c <MX_I2C2_Init>
  if(peripherals[6].errorCode == Sys_OK)
 8016fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8016ff0 <main+0x330>)
 8016fc4:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d156      	bne.n	801707a <main+0x3ba>
  {
	  sprintf(boot_log, "[ OK ] I2C2 -> RTC Initialized.\r\n");
 8016fcc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016fd0:	4912      	ldr	r1, [pc, #72]	@ (801701c <main+0x35c>)
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f00a ff54 	bl	8021e80 <siprintf>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8016fd8:	2300      	movs	r3, #0
 8016fda:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8016fde:	e037      	b.n	8017050 <main+0x390>
 8016fe0:	58024400 	.word	0x58024400
 8016fe4:	080257b8 	.word	0x080257b8
 8016fe8:	080257ec 	.word	0x080257ec
 8016fec:	08025828 	.word	0x08025828
 8016ff0:	240148e0 	.word	0x240148e0
 8016ff4:	08025848 	.word	0x08025848
 8016ff8:	58020c00 	.word	0x58020c00
 8016ffc:	08025864 	.word	0x08025864
 8017000:	08025888 	.word	0x08025888
 8017004:	080258a4 	.word	0x080258a4
 8017008:	080258c0 	.word	0x080258c0
 801700c:	080258dc 	.word	0x080258dc
 8017010:	080258f8 	.word	0x080258f8
 8017014:	08025928 	.word	0x08025928
 8017018:	40004400 	.word	0x40004400
 801701c:	08025958 	.word	0x08025958
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 8017020:	bf00      	nop
 8017022:	48c1      	ldr	r0, [pc, #772]	@ (8017328 <main+0x668>)
 8017024:	f7ff facf 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8017028:	4603      	mov	r3, r0
 801702a:	2b00      	cmp	r3, #0
 801702c:	d0f9      	beq.n	8017022 <main+0x362>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 801702e:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017032:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017036:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801703a:	4413      	add	r3, r2
 801703c:	781b      	ldrb	r3, [r3, #0]
 801703e:	4619      	mov	r1, r3
 8017040:	48b9      	ldr	r0, [pc, #740]	@ (8017328 <main+0x668>)
 8017042:	f7ff fafb 	bl	801663c <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017046:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801704a:	3301      	adds	r3, #1
 801704c:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8017050:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017054:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017058:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801705c:	4413      	add	r3, r2
 801705e:	781b      	ldrb	r3, [r3, #0]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d1dd      	bne.n	8017020 <main+0x360>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 8017064:	bf00      	nop
 8017066:	48b0      	ldr	r0, [pc, #704]	@ (8017328 <main+0x668>)
 8017068:	f7ff fa9a 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 801706c:	4603      	mov	r3, r0
 801706e:	2b00      	cmp	r3, #0
 8017070:	d0f9      	beq.n	8017066 <main+0x3a6>
//	  {
//	      while (!LL_USART_IsActiveFlag_TXE(UART_USB));
//	      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
	  peripherals[6].state = PERIPH_STATE_INIT;
 8017072:	4bae      	ldr	r3, [pc, #696]	@ (801732c <main+0x66c>)
 8017074:	2201      	movs	r2, #1
 8017076:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  }

  //--> SDMMC1 Init --> SDMMC1 Init --> SDMMC1 Init --> SDMMC1 Init --> SDMMC1 Init
  MX_SDMMC1_MMC_Init();
 801707a:	f000 fb71 	bl	8017760 <MX_SDMMC1_MMC_Init>
  if(peripherals[7].errorCode == Sys_OK)
 801707e:	4bab      	ldr	r3, [pc, #684]	@ (801732c <main+0x66c>)
 8017080:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8017084:	2b00      	cmp	r3, #0
 8017086:	d10a      	bne.n	801709e <main+0x3de>
  {
	  sprintf(boot_log, "[ OK ] SDMMC1 -> MainStorage Initialized.\r\n");
 8017088:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801708c:	49a8      	ldr	r1, [pc, #672]	@ (8017330 <main+0x670>)
 801708e:	4618      	mov	r0, r3
 8017090:	f00a fef6 	bl	8021e80 <siprintf>

	  peripherals[7].state = PERIPH_STATE_INIT;
 8017094:	4ba5      	ldr	r3, [pc, #660]	@ (801732c <main+0x66c>)
 8017096:	2201      	movs	r2, #1
 8017098:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
 801709c:	e009      	b.n	80170b2 <main+0x3f2>
  }else{
	  sprintf(boot_log, "[ ER ] SDMMC1 -> MainStorage Init Error!.\r\n");
 801709e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80170a2:	49a4      	ldr	r1, [pc, #656]	@ (8017334 <main+0x674>)
 80170a4:	4618      	mov	r0, r3
 80170a6:	f00a feeb 	bl	8021e80 <siprintf>
	  peripherals[7].state = PERIPH_STATE_ERROR;
 80170aa:	4ba0      	ldr	r3, [pc, #640]	@ (801732c <main+0x66c>)
 80170ac:	2202      	movs	r2, #2
 80170ae:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
  }

  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80170b2:	2300      	movs	r3, #0
 80170b4:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 80170b8:	e017      	b.n	80170ea <main+0x42a>
  {
      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 80170ba:	bf00      	nop
 80170bc:	489a      	ldr	r0, [pc, #616]	@ (8017328 <main+0x668>)
 80170be:	f7ff fa82 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80170c2:	4603      	mov	r3, r0
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d0f9      	beq.n	80170bc <main+0x3fc>
      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 80170c8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80170cc:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80170d0:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80170d4:	4413      	add	r3, r2
 80170d6:	781b      	ldrb	r3, [r3, #0]
 80170d8:	4619      	mov	r1, r3
 80170da:	4893      	ldr	r0, [pc, #588]	@ (8017328 <main+0x668>)
 80170dc:	f7ff faae 	bl	801663c <LL_USART_TransmitData8>
  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80170e0:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80170e4:	3301      	adds	r3, #1
 80170e6:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 80170ea:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80170ee:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80170f2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80170f6:	4413      	add	r3, r2
 80170f8:	781b      	ldrb	r3, [r3, #0]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d1dd      	bne.n	80170ba <main+0x3fa>
  }
  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 80170fe:	bf00      	nop
 8017100:	4889      	ldr	r0, [pc, #548]	@ (8017328 <main+0x668>)
 8017102:	f7ff fa4d 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 8017106:	4603      	mov	r3, r0
 8017108:	2b00      	cmp	r3, #0
 801710a:	d0f9      	beq.n	8017100 <main+0x440>
//      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
//  }
//  while (!LL_USART_IsActiveFlag_TC(UART_USB));

  //--> SPI4 Init --> SPI4 Init --> SPI4 Init --> SPI4 Init --> SPI4 Init
  MX_SPI4_Init();
 801710c:	f000 fb50 	bl	80177b0 <MX_SPI4_Init>
  if(peripherals[8].errorCode == Sys_OK)
 8017110:	4b86      	ldr	r3, [pc, #536]	@ (801732c <main+0x66c>)
 8017112:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8017116:	2b00      	cmp	r3, #0
 8017118:	d136      	bne.n	8017188 <main+0x4c8>
  {
	  sprintf(boot_log, "[ OK ] SPI4 -> ExMemory Initialized.\r\n");
 801711a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801711e:	4986      	ldr	r1, [pc, #536]	@ (8017338 <main+0x678>)
 8017120:	4618      	mov	r0, r3
 8017122:	f00a fead 	bl	8021e80 <siprintf>
	  peripherals[8].state = PERIPH_STATE_INIT;
 8017126:	4b81      	ldr	r3, [pc, #516]	@ (801732c <main+0x66c>)
 8017128:	2201      	movs	r2, #1
 801712a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 801712e:	2300      	movs	r3, #0
 8017130:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8017134:	e017      	b.n	8017166 <main+0x4a6>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 8017136:	bf00      	nop
 8017138:	487b      	ldr	r0, [pc, #492]	@ (8017328 <main+0x668>)
 801713a:	f7ff fa44 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 801713e:	4603      	mov	r3, r0
 8017140:	2b00      	cmp	r3, #0
 8017142:	d0f9      	beq.n	8017138 <main+0x478>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 8017144:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017148:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 801714c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8017150:	4413      	add	r3, r2
 8017152:	781b      	ldrb	r3, [r3, #0]
 8017154:	4619      	mov	r1, r3
 8017156:	4874      	ldr	r0, [pc, #464]	@ (8017328 <main+0x668>)
 8017158:	f7ff fa70 	bl	801663c <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 801715c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8017160:	3301      	adds	r3, #1
 8017162:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8017166:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801716a:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 801716e:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8017172:	4413      	add	r3, r2
 8017174:	781b      	ldrb	r3, [r3, #0]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d1dd      	bne.n	8017136 <main+0x476>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 801717a:	bf00      	nop
 801717c:	486a      	ldr	r0, [pc, #424]	@ (8017328 <main+0x668>)
 801717e:	f7ff fa0f 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 8017182:	4603      	mov	r3, r0
 8017184:	2b00      	cmp	r3, #0
 8017186:	d0f9      	beq.n	801717c <main+0x4bc>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> SPI5 Init --> SPI5 Init --> SPI5 Init --> SPI5 Init --> SPI5 Init
  MX_SPI5_Init();
 8017188:	f000 fbae 	bl	80178e8 <MX_SPI5_Init>
  if(peripherals[9].errorCode == Sys_OK)
 801718c:	4b67      	ldr	r3, [pc, #412]	@ (801732c <main+0x66c>)
 801718e:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8017192:	2b00      	cmp	r3, #0
 8017194:	d136      	bne.n	8017204 <main+0x544>
  {
	  sprintf(boot_log, "[ OK ] SPI5 -> Host Initialized.\r\n");
 8017196:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801719a:	4968      	ldr	r1, [pc, #416]	@ (801733c <main+0x67c>)
 801719c:	4618      	mov	r0, r3
 801719e:	f00a fe6f 	bl	8021e80 <siprintf>
	  peripherals[11].state = PERIPH_STATE_INIT;
 80171a2:	4b62      	ldr	r3, [pc, #392]	@ (801732c <main+0x66c>)
 80171a4:	2201      	movs	r2, #1
 80171a6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80171aa:	2300      	movs	r3, #0
 80171ac:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 80171b0:	e017      	b.n	80171e2 <main+0x522>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 80171b2:	bf00      	nop
 80171b4:	485c      	ldr	r0, [pc, #368]	@ (8017328 <main+0x668>)
 80171b6:	f7ff fa06 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80171ba:	4603      	mov	r3, r0
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d0f9      	beq.n	80171b4 <main+0x4f4>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 80171c0:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80171c4:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80171c8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80171cc:	4413      	add	r3, r2
 80171ce:	781b      	ldrb	r3, [r3, #0]
 80171d0:	4619      	mov	r1, r3
 80171d2:	4855      	ldr	r0, [pc, #340]	@ (8017328 <main+0x668>)
 80171d4:	f7ff fa32 	bl	801663c <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80171d8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80171dc:	3301      	adds	r3, #1
 80171de:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 80171e2:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80171e6:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80171ea:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80171ee:	4413      	add	r3, r2
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d1dd      	bne.n	80171b2 <main+0x4f2>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 80171f6:	bf00      	nop
 80171f8:	484b      	ldr	r0, [pc, #300]	@ (8017328 <main+0x668>)
 80171fa:	f7ff f9d1 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 80171fe:	4603      	mov	r3, r0
 8017200:	2b00      	cmp	r3, #0
 8017202:	d0f9      	beq.n	80171f8 <main+0x538>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> SPI6 Init --> SPI6 Init --> SPI6 Init --> SPI6 Init --> SPI6 Init
  MX_SPI6_Init();
 8017204:	f000 fc40 	bl	8017a88 <MX_SPI6_Init>
  if(peripherals[10].errorCode == Sys_OK)
 8017208:	4b48      	ldr	r3, [pc, #288]	@ (801732c <main+0x66c>)
 801720a:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 801720e:	2b00      	cmp	r3, #0
 8017210:	d136      	bne.n	8017280 <main+0x5c0>
  {
	  sprintf(boot_log, "[ OK ] SPI6 -> EXP Initialized.\r\n");
 8017212:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8017216:	494a      	ldr	r1, [pc, #296]	@ (8017340 <main+0x680>)
 8017218:	4618      	mov	r0, r3
 801721a:	f00a fe31 	bl	8021e80 <siprintf>
	  peripherals[10].state = PERIPH_STATE_INIT;
 801721e:	4b43      	ldr	r3, [pc, #268]	@ (801732c <main+0x66c>)
 8017220:	2201      	movs	r2, #1
 8017222:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017226:	2300      	movs	r3, #0
 8017228:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 801722c:	e017      	b.n	801725e <main+0x59e>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 801722e:	bf00      	nop
 8017230:	483d      	ldr	r0, [pc, #244]	@ (8017328 <main+0x668>)
 8017232:	f7ff f9c8 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8017236:	4603      	mov	r3, r0
 8017238:	2b00      	cmp	r3, #0
 801723a:	d0f9      	beq.n	8017230 <main+0x570>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 801723c:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017240:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017244:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8017248:	4413      	add	r3, r2
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	4619      	mov	r1, r3
 801724e:	4836      	ldr	r0, [pc, #216]	@ (8017328 <main+0x668>)
 8017250:	f7ff f9f4 	bl	801663c <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017254:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8017258:	3301      	adds	r3, #1
 801725a:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 801725e:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017262:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017266:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801726a:	4413      	add	r3, r2
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d1dd      	bne.n	801722e <main+0x56e>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 8017272:	bf00      	nop
 8017274:	482c      	ldr	r0, [pc, #176]	@ (8017328 <main+0x668>)
 8017276:	f7ff f993 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 801727a:	4603      	mov	r3, r0
 801727c:	2b00      	cmp	r3, #0
 801727e:	d0f9      	beq.n	8017274 <main+0x5b4>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> TIM1 Init --> TIM1 Init --> TIM1 Init --> TIM1 Init --> TIM1 Init
  MX_TIM1_Init();
 8017280:	f000 fd2e 	bl	8017ce0 <MX_TIM1_Init>
  if(peripherals[11].errorCode == Sys_OK)
 8017284:	4b29      	ldr	r3, [pc, #164]	@ (801732c <main+0x66c>)
 8017286:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 801728a:	2b00      	cmp	r3, #0
 801728c:	d136      	bne.n	80172fc <main+0x63c>
  {
	  sprintf(boot_log, "[ OK ] Timer-Clock Ready.\r\n");
 801728e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8017292:	492c      	ldr	r1, [pc, #176]	@ (8017344 <main+0x684>)
 8017294:	4618      	mov	r0, r3
 8017296:	f00a fdf3 	bl	8021e80 <siprintf>
	  peripherals[13].state = PERIPH_STATE_INIT;
 801729a:	4b24      	ldr	r3, [pc, #144]	@ (801732c <main+0x66c>)
 801729c:	2201      	movs	r2, #1
 801729e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80172a2:	2300      	movs	r3, #0
 80172a4:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 80172a8:	e017      	b.n	80172da <main+0x61a>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 80172aa:	bf00      	nop
 80172ac:	481e      	ldr	r0, [pc, #120]	@ (8017328 <main+0x668>)
 80172ae:	f7ff f98a 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80172b2:	4603      	mov	r3, r0
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d0f9      	beq.n	80172ac <main+0x5ec>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 80172b8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80172bc:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80172c0:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80172c4:	4413      	add	r3, r2
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	4619      	mov	r1, r3
 80172ca:	4817      	ldr	r0, [pc, #92]	@ (8017328 <main+0x668>)
 80172cc:	f7ff f9b6 	bl	801663c <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80172d0:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80172d4:	3301      	adds	r3, #1
 80172d6:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 80172da:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80172de:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80172e2:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80172e6:	4413      	add	r3, r2
 80172e8:	781b      	ldrb	r3, [r3, #0]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d1dd      	bne.n	80172aa <main+0x5ea>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 80172ee:	bf00      	nop
 80172f0:	480d      	ldr	r0, [pc, #52]	@ (8017328 <main+0x668>)
 80172f2:	f7ff f955 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 80172f6:	4603      	mov	r3, r0
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d0f9      	beq.n	80172f0 <main+0x630>
//	  }
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

  //--> UART7 Init --> UART7 Init --> UART7 Init --> UART7 Init --> UART7 Init
  MX_UART7_Init();
 80172fc:	f000 fd44 	bl	8017d88 <MX_UART7_Init>
  if(peripherals[12].errorCode == Sys_OK)
 8017300:	4b0a      	ldr	r3, [pc, #40]	@ (801732c <main+0x66c>)
 8017302:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8017306:	2b00      	cmp	r3, #0
 8017308:	d149      	bne.n	801739e <main+0x6de>
  {
	  sprintf(boot_log, "[ OK ] UART7 Initialized, Baud Rate: 115200.\r\n");
 801730a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801730e:	490e      	ldr	r1, [pc, #56]	@ (8017348 <main+0x688>)
 8017310:	4618      	mov	r0, r3
 8017312:	f00a fdb5 	bl	8021e80 <siprintf>
	  peripherals[12].state = PERIPH_STATE_INIT;
 8017316:	4b05      	ldr	r3, [pc, #20]	@ (801732c <main+0x66c>)
 8017318:	2201      	movs	r2, #1
 801731a:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 801731e:	2300      	movs	r3, #0
 8017320:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8017324:	e02a      	b.n	801737c <main+0x6bc>
 8017326:	bf00      	nop
 8017328:	40004400 	.word	0x40004400
 801732c:	240148e0 	.word	0x240148e0
 8017330:	0802597c 	.word	0x0802597c
 8017334:	080259a8 	.word	0x080259a8
 8017338:	080259d4 	.word	0x080259d4
 801733c:	080259fc 	.word	0x080259fc
 8017340:	08025a20 	.word	0x08025a20
 8017344:	08025a44 	.word	0x08025a44
 8017348:	08025a60 	.word	0x08025a60
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 801734c:	bf00      	nop
 801734e:	487c      	ldr	r0, [pc, #496]	@ (8017540 <main+0x880>)
 8017350:	f7ff f939 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8017354:	4603      	mov	r3, r0
 8017356:	2b00      	cmp	r3, #0
 8017358:	d0f9      	beq.n	801734e <main+0x68e>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 801735a:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801735e:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017362:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8017366:	4413      	add	r3, r2
 8017368:	781b      	ldrb	r3, [r3, #0]
 801736a:	4619      	mov	r1, r3
 801736c:	4874      	ldr	r0, [pc, #464]	@ (8017540 <main+0x880>)
 801736e:	f7ff f965 	bl	801663c <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017372:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8017376:	3301      	adds	r3, #1
 8017378:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 801737c:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017380:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017384:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8017388:	4413      	add	r3, r2
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d1dd      	bne.n	801734c <main+0x68c>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 8017390:	bf00      	nop
 8017392:	486b      	ldr	r0, [pc, #428]	@ (8017540 <main+0x880>)
 8017394:	f7ff f904 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 8017398:	4603      	mov	r3, r0
 801739a:	2b00      	cmp	r3, #0
 801739c:	d0f9      	beq.n	8017392 <main+0x6d2>
//	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
  }

#endif

  if (Mgmt_HardwareSystemPreparing() != E_OK){
 801739e:	f7e9 f99d 	bl	80006dc <Mgmt_HardwareSystemPreparing>
 80173a2:	4603      	mov	r3, r0
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d066      	beq.n	8017476 <main+0x7b6>
	  system_status.init_state = INIT_STATE_FAILED;
 80173a8:	4b66      	ldr	r3, [pc, #408]	@ (8017544 <main+0x884>)
 80173aa:	2207      	movs	r2, #7
 80173ac:	701a      	strb	r2, [r3, #0]
      system_status.program_state = PROGRAM_STATE_ERROR;
 80173ae:	4b65      	ldr	r3, [pc, #404]	@ (8017544 <main+0x884>)
 80173b0:	2202      	movs	r2, #2
 80173b2:	705a      	strb	r2, [r3, #1]
	  sprintf(boot_log, "[ ER ] System Hardware Preparing Fail!...\r\n[ ER ] Something wrong in Hardware Start-up\r\n");
 80173b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80173b8:	4963      	ldr	r1, [pc, #396]	@ (8017548 <main+0x888>)
 80173ba:	4618      	mov	r0, r3
 80173bc:	f00a fd60 	bl	8021e80 <siprintf>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80173c0:	2300      	movs	r3, #0
 80173c2:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 80173c6:	e017      	b.n	80173f8 <main+0x738>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 80173c8:	bf00      	nop
 80173ca:	485d      	ldr	r0, [pc, #372]	@ (8017540 <main+0x880>)
 80173cc:	f7ff f8fb 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80173d0:	4603      	mov	r3, r0
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d0f9      	beq.n	80173ca <main+0x70a>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 80173d6:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80173da:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80173de:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80173e2:	4413      	add	r3, r2
 80173e4:	781b      	ldrb	r3, [r3, #0]
 80173e6:	4619      	mov	r1, r3
 80173e8:	4855      	ldr	r0, [pc, #340]	@ (8017540 <main+0x880>)
 80173ea:	f7ff f927 	bl	801663c <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80173ee:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80173f2:	3301      	adds	r3, #1
 80173f4:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 80173f8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80173fc:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017400:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8017404:	4413      	add	r3, r2
 8017406:	781b      	ldrb	r3, [r3, #0]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d1dd      	bne.n	80173c8 <main+0x708>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 801740c:	bf00      	nop
 801740e:	484c      	ldr	r0, [pc, #304]	@ (8017540 <main+0x880>)
 8017410:	f7ff f8c6 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 8017414:	4603      	mov	r3, r0
 8017416:	2b00      	cmp	r3, #0
 8017418:	d0f9      	beq.n	801740e <main+0x74e>

	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 801741a:	2300      	movs	r3, #0
 801741c:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8017420:	e017      	b.n	8017452 <main+0x792>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_USB));
 8017422:	bf00      	nop
 8017424:	4849      	ldr	r0, [pc, #292]	@ (801754c <main+0x88c>)
 8017426:	f7ff f8ce 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 801742a:	4603      	mov	r3, r0
 801742c:	2b00      	cmp	r3, #0
 801742e:	d0f9      	beq.n	8017424 <main+0x764>
	      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
 8017430:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017434:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 8017438:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801743c:	4413      	add	r3, r2
 801743e:	781b      	ldrb	r3, [r3, #0]
 8017440:	4619      	mov	r1, r3
 8017442:	4842      	ldr	r0, [pc, #264]	@ (801754c <main+0x88c>)
 8017444:	f7ff f8fa 	bl	801663c <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017448:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801744c:	3301      	adds	r3, #1
 801744e:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8017452:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017456:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 801745a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801745e:	4413      	add	r3, r2
 8017460:	781b      	ldrb	r3, [r3, #0]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d1dd      	bne.n	8017422 <main+0x762>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
 8017466:	bf00      	nop
 8017468:	4838      	ldr	r0, [pc, #224]	@ (801754c <main+0x88c>)
 801746a:	f7ff f899 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 801746e:	4603      	mov	r3, r0
 8017470:	2b00      	cmp	r3, #0
 8017472:	d0f9      	beq.n	8017468 <main+0x7a8>
 8017474:	e05f      	b.n	8017536 <main+0x876>
  }else{
	  sprintf(boot_log, "[ OK ] System Hardware Preparing Done...\r\n");
 8017476:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801747a:	4935      	ldr	r1, [pc, #212]	@ (8017550 <main+0x890>)
 801747c:	4618      	mov	r0, r3
 801747e:	f00a fcff 	bl	8021e80 <siprintf>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 8017482:	2300      	movs	r3, #0
 8017484:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 8017488:	e017      	b.n	80174ba <main+0x7fa>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_DEBUG));
 801748a:	bf00      	nop
 801748c:	482c      	ldr	r0, [pc, #176]	@ (8017540 <main+0x880>)
 801748e:	f7ff f89a 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8017492:	4603      	mov	r3, r0
 8017494:	2b00      	cmp	r3, #0
 8017496:	d0f9      	beq.n	801748c <main+0x7cc>
	      LL_USART_TransmitData8(UART_DEBUG, (uint8_t)boot_log[i]);
 8017498:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 801749c:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80174a0:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80174a4:	4413      	add	r3, r2
 80174a6:	781b      	ldrb	r3, [r3, #0]
 80174a8:	4619      	mov	r1, r3
 80174aa:	4825      	ldr	r0, [pc, #148]	@ (8017540 <main+0x880>)
 80174ac:	f7ff f8c6 	bl	801663c <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80174b0:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80174b4:	3301      	adds	r3, #1
 80174b6:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 80174ba:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80174be:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80174c2:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80174c6:	4413      	add	r3, r2
 80174c8:	781b      	ldrb	r3, [r3, #0]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d1dd      	bne.n	801748a <main+0x7ca>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_DEBUG));
 80174ce:	bf00      	nop
 80174d0:	481b      	ldr	r0, [pc, #108]	@ (8017540 <main+0x880>)
 80174d2:	f7ff f865 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 80174d6:	4603      	mov	r3, r0
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d0f9      	beq.n	80174d0 <main+0x810>

	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 80174dc:	2300      	movs	r3, #0
 80174de:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80174e2:	e017      	b.n	8017514 <main+0x854>
	  {
	      while (!LL_USART_IsActiveFlag_TXE(UART_USB));
 80174e4:	bf00      	nop
 80174e6:	4819      	ldr	r0, [pc, #100]	@ (801754c <main+0x88c>)
 80174e8:	f7ff f86d 	bl	80165c6 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80174ec:	4603      	mov	r3, r0
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d0f9      	beq.n	80174e6 <main+0x826>
	      LL_USART_TransmitData8(UART_USB, (uint8_t)boot_log[i]);
 80174f2:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80174f6:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 80174fa:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80174fe:	4413      	add	r3, r2
 8017500:	781b      	ldrb	r3, [r3, #0]
 8017502:	4619      	mov	r1, r3
 8017504:	4811      	ldr	r0, [pc, #68]	@ (801754c <main+0x88c>)
 8017506:	f7ff f899 	bl	801663c <LL_USART_TransmitData8>
	  for (uint32_t i = 0; boot_log[i] != '\0'; i++)
 801750a:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801750e:	3301      	adds	r3, #1
 8017510:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8017514:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8017518:	f5a3 7255 	sub.w	r2, r3, #852	@ 0x354
 801751c:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8017520:	4413      	add	r3, r2
 8017522:	781b      	ldrb	r3, [r3, #0]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d1dd      	bne.n	80174e4 <main+0x824>
	  }
	  while (!LL_USART_IsActiveFlag_TC(UART_USB));
 8017528:	bf00      	nop
 801752a:	4808      	ldr	r0, [pc, #32]	@ (801754c <main+0x88c>)
 801752c:	f7ff f838 	bl	80165a0 <LL_USART_IsActiveFlag_TC>
 8017530:	4603      	mov	r3, r0
 8017532:	2b00      	cmp	r3, #0
 8017534:	d0f9      	beq.n	801752a <main+0x86a>
  }

  Mgmt_SystemStart();
 8017536:	f7e9 f917 	bl	8000768 <Mgmt_SystemStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801753a:	bf00      	nop
 801753c:	e7fd      	b.n	801753a <main+0x87a>
 801753e:	bf00      	nop
 8017540:	40004400 	.word	0x40004400
 8017544:	2405a578 	.word	0x2405a578
 8017548:	08025a90 	.word	0x08025a90
 801754c:	40011000 	.word	0x40011000
 8017550:	08025aec 	.word	0x08025aec

08017554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b09c      	sub	sp, #112	@ 0x70
 8017558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801755a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801755e:	224c      	movs	r2, #76	@ 0x4c
 8017560:	2100      	movs	r1, #0
 8017562:	4618      	mov	r0, r3
 8017564:	f00a fd1b 	bl	8021f9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017568:	1d3b      	adds	r3, r7, #4
 801756a:	2220      	movs	r2, #32
 801756c:	2100      	movs	r1, #0
 801756e:	4618      	mov	r0, r3
 8017570:	f00a fd15 	bl	8021f9e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8017574:	2002      	movs	r0, #2
 8017576:	f004 f9c9 	bl	801b90c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801757a:	2300      	movs	r3, #0
 801757c:	603b      	str	r3, [r7, #0]
 801757e:	4b31      	ldr	r3, [pc, #196]	@ (8017644 <SystemClock_Config+0xf0>)
 8017580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017582:	4a30      	ldr	r2, [pc, #192]	@ (8017644 <SystemClock_Config+0xf0>)
 8017584:	f023 0301 	bic.w	r3, r3, #1
 8017588:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801758a:	4b2e      	ldr	r3, [pc, #184]	@ (8017644 <SystemClock_Config+0xf0>)
 801758c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801758e:	f003 0301 	and.w	r3, r3, #1
 8017592:	603b      	str	r3, [r7, #0]
 8017594:	4b2c      	ldr	r3, [pc, #176]	@ (8017648 <SystemClock_Config+0xf4>)
 8017596:	699b      	ldr	r3, [r3, #24]
 8017598:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 801759c:	4a2a      	ldr	r2, [pc, #168]	@ (8017648 <SystemClock_Config+0xf4>)
 801759e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80175a2:	6193      	str	r3, [r2, #24]
 80175a4:	4b28      	ldr	r3, [pc, #160]	@ (8017648 <SystemClock_Config+0xf4>)
 80175a6:	699b      	ldr	r3, [r3, #24]
 80175a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80175ac:	603b      	str	r3, [r7, #0]
 80175ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80175b0:	bf00      	nop
 80175b2:	4b25      	ldr	r3, [pc, #148]	@ (8017648 <SystemClock_Config+0xf4>)
 80175b4:	699b      	ldr	r3, [r3, #24]
 80175b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80175ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80175be:	d1f8      	bne.n	80175b2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80175c0:	2301      	movs	r3, #1
 80175c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80175c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80175c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80175ca:	2302      	movs	r3, #2
 80175cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80175ce:	2302      	movs	r3, #2
 80175d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80175d2:	2305      	movs	r3, #5
 80175d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80175d6:	2360      	movs	r3, #96	@ 0x60
 80175d8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80175da:	2302      	movs	r3, #2
 80175dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80175de:	2308      	movs	r3, #8
 80175e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80175e2:	2302      	movs	r3, #2
 80175e4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80175e6:	2308      	movs	r3, #8
 80175e8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80175ea:	2300      	movs	r3, #0
 80175ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80175ee:	2300      	movs	r3, #0
 80175f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80175f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80175f6:	4618      	mov	r0, r3
 80175f8:	f004 f9e2 	bl	801b9c0 <HAL_RCC_OscConfig>
 80175fc:	4603      	mov	r3, r0
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d001      	beq.n	8017606 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8017602:	f001 f867 	bl	80186d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017606:	233f      	movs	r3, #63	@ 0x3f
 8017608:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801760a:	2303      	movs	r3, #3
 801760c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 801760e:	2300      	movs	r3, #0
 8017610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8017612:	2308      	movs	r3, #8
 8017614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8017616:	2340      	movs	r3, #64	@ 0x40
 8017618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 801761a:	2340      	movs	r3, #64	@ 0x40
 801761c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 801761e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017622:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8017624:	2340      	movs	r3, #64	@ 0x40
 8017626:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8017628:	1d3b      	adds	r3, r7, #4
 801762a:	2102      	movs	r1, #2
 801762c:	4618      	mov	r0, r3
 801762e:	f004 fe21 	bl	801c274 <HAL_RCC_ClockConfig>
 8017632:	4603      	mov	r3, r0
 8017634:	2b00      	cmp	r3, #0
 8017636:	d001      	beq.n	801763c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8017638:	f001 f84c 	bl	80186d4 <Error_Handler>
  }
}
 801763c:	bf00      	nop
 801763e:	3770      	adds	r7, #112	@ 0x70
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}
 8017644:	58000400 	.word	0x58000400
 8017648:	58024800 	.word	0x58024800

0801764c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b0be      	sub	sp, #248	@ 0xf8
 8017650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8017652:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8017656:	2200      	movs	r2, #0
 8017658:	601a      	str	r2, [r3, #0]
 801765a:	605a      	str	r2, [r3, #4]
 801765c:	609a      	str	r2, [r3, #8]
 801765e:	60da      	str	r2, [r3, #12]
 8017660:	611a      	str	r2, [r3, #16]
 8017662:	615a      	str	r2, [r3, #20]
 8017664:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017666:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 801766a:	2200      	movs	r2, #0
 801766c:	601a      	str	r2, [r3, #0]
 801766e:	605a      	str	r2, [r3, #4]
 8017670:	609a      	str	r2, [r3, #8]
 8017672:	60da      	str	r2, [r3, #12]
 8017674:	611a      	str	r2, [r3, #16]
 8017676:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017678:	463b      	mov	r3, r7
 801767a:	22c0      	movs	r2, #192	@ 0xc0
 801767c:	2100      	movs	r1, #0
 801767e:	4618      	mov	r0, r3
 8017680:	f00a fc8d 	bl	8021f9e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8017684:	f04f 0208 	mov.w	r2, #8
 8017688:	f04f 0300 	mov.w	r3, #0
 801768c:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8017690:	2300      	movs	r3, #0
 8017692:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017696:	463b      	mov	r3, r7
 8017698:	4618      	mov	r0, r3
 801769a:	f005 f9a3 	bl	801c9e4 <HAL_RCCEx_PeriphCLKConfig>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d001      	beq.n	80176a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80176a4:	f001 f816 	bl	80186d4 <Error_Handler>
  }

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 80176a8:	2002      	movs	r0, #2
 80176aa:	f7fe fff3 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80176ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80176b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80176b6:	2302      	movs	r3, #2
 80176b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80176bc:	2300      	movs	r3, #0
 80176be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80176c2:	2301      	movs	r3, #1
 80176c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80176c8:	2300      	movs	r3, #0
 80176ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80176ce:	2304      	movs	r3, #4
 80176d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80176d4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80176d8:	4619      	mov	r1, r3
 80176da:	481d      	ldr	r0, [pc, #116]	@ (8017750 <MX_I2C2_Init+0x104>)
 80176dc:	f008 fa22 	bl	801fb24 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80176e0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80176e4:	f7fe fff2 	bl	80166cc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C2);
 80176e8:	481a      	ldr	r0, [pc, #104]	@ (8017754 <MX_I2C2_Init+0x108>)
 80176ea:	f7fe fdd3 	bl	8016294 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80176ee:	2200      	movs	r2, #0
 80176f0:	2100      	movs	r1, #0
 80176f2:	4818      	ldr	r0, [pc, #96]	@ (8017754 <MX_I2C2_Init+0x108>)
 80176f4:	f7fe fda6 	bl	8016244 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C2);
 80176f8:	4816      	ldr	r0, [pc, #88]	@ (8017754 <MX_I2C2_Init+0x108>)
 80176fa:	f7fe fdbb 	bl	8016274 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 80176fe:	4815      	ldr	r0, [pc, #84]	@ (8017754 <MX_I2C2_Init+0x108>)
 8017700:	f7fe fd8f 	bl	8016222 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8017704:	4813      	ldr	r0, [pc, #76]	@ (8017754 <MX_I2C2_Init+0x108>)
 8017706:	f7fe fd7c 	bl	8016202 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 801770a:	2300      	movs	r3, #0
 801770c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  I2C_InitStruct.Timing = 0x00501E6C;
 8017710:	4b11      	ldr	r3, [pc, #68]	@ (8017758 <MX_I2C2_Init+0x10c>)
 8017712:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8017716:	2300      	movs	r3, #0
 8017718:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  I2C_InitStruct.DigitalFilter = 0;
 801771c:	2300      	movs	r3, #0
 801771e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  I2C_InitStruct.OwnAddress1 = 0;
 8017722:	2300      	movs	r3, #0
 8017724:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8017728:	2300      	movs	r3, #0
 801772a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 801772e:	2300      	movs	r3, #0
 8017730:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8017734:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8017738:	4619      	mov	r1, r3
 801773a:	4806      	ldr	r0, [pc, #24]	@ (8017754 <MX_I2C2_Init+0x108>)
 801773c:	f008 fb04 	bl	801fd48 <LL_I2C_Init>
  /* USER CODE BEGIN I2C2_Init 2 */
  peripherals[7].errorCode = Sys_OK;
 8017740:	4b06      	ldr	r3, [pc, #24]	@ (801775c <MX_I2C2_Init+0x110>)
 8017742:	2200      	movs	r2, #0
 8017744:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
  /* USER CODE END I2C2_Init 2 */

}
 8017748:	bf00      	nop
 801774a:	37f8      	adds	r7, #248	@ 0xf8
 801774c:	46bd      	mov	sp, r7
 801774e:	bd80      	pop	{r7, pc}
 8017750:	58020400 	.word	0x58020400
 8017754:	40005800 	.word	0x40005800
 8017758:	00501e6c 	.word	0x00501e6c
 801775c:	240148e0 	.word	0x240148e0

08017760 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8017764:	4b0f      	ldr	r3, [pc, #60]	@ (80177a4 <MX_SDMMC1_MMC_Init+0x44>)
 8017766:	4a10      	ldr	r2, [pc, #64]	@ (80177a8 <MX_SDMMC1_MMC_Init+0x48>)
 8017768:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801776a:	4b0e      	ldr	r3, [pc, #56]	@ (80177a4 <MX_SDMMC1_MMC_Init+0x44>)
 801776c:	2200      	movs	r2, #0
 801776e:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8017770:	4b0c      	ldr	r3, [pc, #48]	@ (80177a4 <MX_SDMMC1_MMC_Init+0x44>)
 8017772:	2200      	movs	r2, #0
 8017774:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8017776:	4b0b      	ldr	r3, [pc, #44]	@ (80177a4 <MX_SDMMC1_MMC_Init+0x44>)
 8017778:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801777c:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801777e:	4b09      	ldr	r3, [pc, #36]	@ (80177a4 <MX_SDMMC1_MMC_Init+0x44>)
 8017780:	2200      	movs	r2, #0
 8017782:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 4;
 8017784:	4b07      	ldr	r3, [pc, #28]	@ (80177a4 <MX_SDMMC1_MMC_Init+0x44>)
 8017786:	2204      	movs	r2, #4
 8017788:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 801778a:	4806      	ldr	r0, [pc, #24]	@ (80177a4 <MX_SDMMC1_MMC_Init+0x44>)
 801778c:	f002 fcfa 	bl	801a184 <HAL_MMC_Init>
 8017790:	4603      	mov	r3, r0
 8017792:	2b00      	cmp	r3, #0
 8017794:	d104      	bne.n	80177a0 <MX_SDMMC1_MMC_Init+0x40>
  {
    return;
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */
  peripherals[8].errorCode = Sys_OK;
 8017796:	4b05      	ldr	r3, [pc, #20]	@ (80177ac <MX_SDMMC1_MMC_Init+0x4c>)
 8017798:	2200      	movs	r2, #0
 801779a:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
 801779e:	e000      	b.n	80177a2 <MX_SDMMC1_MMC_Init+0x42>
    return;
 80177a0:	bf00      	nop
  /* USER CODE END SDMMC1_Init 2 */

}
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	2405a57c 	.word	0x2405a57c
 80177a8:	52007000 	.word	0x52007000
 80177ac:	240148e0 	.word	0x240148e0

080177b0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b0c0      	sub	sp, #256	@ 0x100
 80177b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 0 */

  /* USER CODE END SPI4_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80177b6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80177ba:	2228      	movs	r2, #40	@ 0x28
 80177bc:	2100      	movs	r1, #0
 80177be:	4618      	mov	r0, r3
 80177c0:	f00a fbed 	bl	8021f9e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80177c4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80177c8:	2200      	movs	r2, #0
 80177ca:	601a      	str	r2, [r3, #0]
 80177cc:	605a      	str	r2, [r3, #4]
 80177ce:	609a      	str	r2, [r3, #8]
 80177d0:	60da      	str	r2, [r3, #12]
 80177d2:	611a      	str	r2, [r3, #16]
 80177d4:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80177d6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80177da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80177de:	4618      	mov	r0, r3
 80177e0:	23c0      	movs	r3, #192	@ 0xc0
 80177e2:	461a      	mov	r2, r3
 80177e4:	2100      	movs	r1, #0
 80177e6:	f00a fbda 	bl	8021f9e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80177ea:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80177ee:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 80177f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80177f6:	f04f 0300 	mov.w	r3, #0
 80177fa:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80177fe:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017802:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017806:	2200      	movs	r2, #0
 8017808:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801780a:	463b      	mov	r3, r7
 801780c:	4618      	mov	r0, r3
 801780e:	f005 f8e9 	bl	801c9e4 <HAL_RCCEx_PeriphCLKConfig>
 8017812:	4603      	mov	r3, r0
 8017814:	2b00      	cmp	r3, #0
 8017816:	d001      	beq.n	801781c <MX_SPI4_Init+0x6c>
  {
    Error_Handler();
 8017818:	f000 ff5c 	bl	80186d4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI4);
 801781c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8017820:	f7fe ff70 	bl	8016704 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8017824:	2010      	movs	r0, #16
 8017826:	f7fe ff35 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  /**SPI4 GPIO Configuration
  PE2   ------> SPI4_SCK
  PE5   ------> SPI4_MISO
  PE6   ------> SPI4_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 801782a:	2364      	movs	r3, #100	@ 0x64
 801782c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8017830:	2302      	movs	r3, #2
 8017832:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8017836:	2300      	movs	r3, #0
 8017838:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 801783c:	2300      	movs	r3, #0
 801783e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8017842:	2300      	movs	r3, #0
 8017844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8017848:	2305      	movs	r3, #5
 801784a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801784e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017852:	4619      	mov	r1, r3
 8017854:	4821      	ldr	r0, [pc, #132]	@ (80178dc <MX_SPI4_Init+0x12c>)
 8017856:	f008 f965 	bl	801fb24 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 801785a:	2300      	movs	r3, #0
 801785c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8017860:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8017864:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8017868:	2307      	movs	r3, #7
 801786a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 801786e:	2300      	movs	r3, #0
 8017870:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8017874:	2300      	movs	r3, #0
 8017876:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 801787a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 801787e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8017882:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8017886:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 801788a:	2300      	movs	r3, #0
 801788c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8017890:	2300      	movs	r3, #0
 8017892:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  SPI_InitStruct.CRCPoly = 0x0;
 8017896:	2300      	movs	r3, #0
 8017898:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  LL_SPI_Init(SPI4, &SPI_InitStruct);
 801789c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80178a0:	4619      	mov	r1, r3
 80178a2:	480f      	ldr	r0, [pc, #60]	@ (80178e0 <MX_SPI4_Init+0x130>)
 80178a4:	f009 fe22 	bl	80214ec <LL_SPI_Init>
  LL_SPI_SetStandard(SPI4, LL_SPI_PROTOCOL_MOTOROLA);
 80178a8:	2100      	movs	r1, #0
 80178aa:	480d      	ldr	r0, [pc, #52]	@ (80178e0 <MX_SPI4_Init+0x130>)
 80178ac:	f7fe fd22 	bl	80162f4 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI4, LL_SPI_FIFO_TH_01DATA);
 80178b0:	2100      	movs	r1, #0
 80178b2:	480b      	ldr	r0, [pc, #44]	@ (80178e0 <MX_SPI4_Init+0x130>)
 80178b4:	f7fe fd31 	bl	801631a <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI4);
 80178b8:	4809      	ldr	r0, [pc, #36]	@ (80178e0 <MX_SPI4_Init+0x130>)
 80178ba:	f7fe fd41 	bl	8016340 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI4_Init 2 */
  LL_SPI_Enable(SPI4);
 80178be:	4808      	ldr	r0, [pc, #32]	@ (80178e0 <MX_SPI4_Init+0x130>)
 80178c0:	f7fe fcf8 	bl	80162b4 <LL_SPI_Enable>
  LL_SPI_StartMasterTransfer(SPI4);
 80178c4:	4806      	ldr	r0, [pc, #24]	@ (80178e0 <MX_SPI4_Init+0x130>)
 80178c6:	f7fe fd05 	bl	80162d4 <LL_SPI_StartMasterTransfer>
  peripherals[10].errorCode = Sys_OK;
 80178ca:	4b06      	ldr	r3, [pc, #24]	@ (80178e4 <MX_SPI4_Init+0x134>)
 80178cc:	2200      	movs	r2, #0
 80178ce:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  /* USER CODE END SPI4_Init 2 */

}
 80178d2:	bf00      	nop
 80178d4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}
 80178dc:	58021000 	.word	0x58021000
 80178e0:	40013400 	.word	0x40013400
 80178e4:	240148e0 	.word	0x240148e0

080178e8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b0c0      	sub	sp, #256	@ 0x100
 80178ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 0 */

  /* USER CODE END SPI5_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80178ee:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80178f2:	2228      	movs	r2, #40	@ 0x28
 80178f4:	2100      	movs	r1, #0
 80178f6:	4618      	mov	r0, r3
 80178f8:	f00a fb51 	bl	8021f9e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80178fc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017900:	2200      	movs	r2, #0
 8017902:	601a      	str	r2, [r3, #0]
 8017904:	605a      	str	r2, [r3, #4]
 8017906:	609a      	str	r2, [r3, #8]
 8017908:	60da      	str	r2, [r3, #12]
 801790a:	611a      	str	r2, [r3, #16]
 801790c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801790e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017912:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017916:	4618      	mov	r0, r3
 8017918:	23c0      	movs	r3, #192	@ 0xc0
 801791a:	461a      	mov	r2, r3
 801791c:	2100      	movs	r1, #0
 801791e:	f00a fb3e 	bl	8021f9e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8017922:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017926:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 801792a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801792e:	f04f 0300 	mov.w	r3, #0
 8017932:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8017936:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801793a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801793e:	2200      	movs	r2, #0
 8017940:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017942:	463b      	mov	r3, r7
 8017944:	4618      	mov	r0, r3
 8017946:	f005 f84d 	bl	801c9e4 <HAL_RCCEx_PeriphCLKConfig>
 801794a:	4603      	mov	r3, r0
 801794c:	2b00      	cmp	r3, #0
 801794e:	d001      	beq.n	8017954 <MX_SPI5_Init+0x6c>
  {
    Error_Handler();
 8017950:	f000 fec0 	bl	80186d4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 8017954:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8017958:	f7fe fed4 	bl	8016704 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 801795c:	2020      	movs	r0, #32
 801795e:	f7fe fe99 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  PF6   ------> SPI5_NSS
  PF7   ------> SPI5_SCK
  PF8   ------> SPI5_MISO
  PF9   ------> SPI5_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8017962:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8017966:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 801796a:	2302      	movs	r3, #2
 801796c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8017970:	2300      	movs	r3, #0
 8017972:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8017976:	2300      	movs	r3, #0
 8017978:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801797c:	2300      	movs	r3, #0
 801797e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8017982:	2305      	movs	r3, #5
 8017984:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8017988:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801798c:	4619      	mov	r1, r3
 801798e:	483a      	ldr	r0, [pc, #232]	@ (8017a78 <MX_SPI5_Init+0x190>)
 8017990:	f008 f8c8 	bl	801fb24 <LL_GPIO_Init>

  /* SPI5 DMA Init */

  /* SPI5_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_7, LL_DMAMUX1_REQ_SPI5_TX);
 8017994:	2256      	movs	r2, #86	@ 0x56
 8017996:	2107      	movs	r1, #7
 8017998:	4838      	ldr	r0, [pc, #224]	@ (8017a7c <MX_SPI5_Init+0x194>)
 801799a:	f7fe fff5 	bl	8016988 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 801799e:	2240      	movs	r2, #64	@ 0x40
 80179a0:	2107      	movs	r1, #7
 80179a2:	4836      	ldr	r0, [pc, #216]	@ (8017a7c <MX_SPI5_Init+0x194>)
 80179a4:	f7fe fee6 	bl	8016774 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
 80179a8:	2200      	movs	r2, #0
 80179aa:	2107      	movs	r1, #7
 80179ac:	4833      	ldr	r0, [pc, #204]	@ (8017a7c <MX_SPI5_Init+0x194>)
 80179ae:	f7fe ffc5 	bl	801693c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_7, LL_DMA_MODE_NORMAL);
 80179b2:	2200      	movs	r2, #0
 80179b4:	2107      	movs	r1, #7
 80179b6:	4831      	ldr	r0, [pc, #196]	@ (8017a7c <MX_SPI5_Init+0x194>)
 80179b8:	f7fe ff02 	bl	80167c0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 80179bc:	2200      	movs	r2, #0
 80179be:	2107      	movs	r1, #7
 80179c0:	482e      	ldr	r0, [pc, #184]	@ (8017a7c <MX_SPI5_Init+0x194>)
 80179c2:	f7fe ff23 	bl	801680c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 80179c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80179ca:	2107      	movs	r1, #7
 80179cc:	482b      	ldr	r0, [pc, #172]	@ (8017a7c <MX_SPI5_Init+0x194>)
 80179ce:	f7fe ff43 	bl	8016858 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 80179d2:	2200      	movs	r2, #0
 80179d4:	2107      	movs	r1, #7
 80179d6:	4829      	ldr	r0, [pc, #164]	@ (8017a7c <MX_SPI5_Init+0x194>)
 80179d8:	f7fe ff64 	bl	80168a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 80179dc:	2200      	movs	r2, #0
 80179de:	2107      	movs	r1, #7
 80179e0:	4826      	ldr	r0, [pc, #152]	@ (8017a7c <MX_SPI5_Init+0x194>)
 80179e2:	f7fe ff85 	bl	80168f0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_7);
 80179e6:	2107      	movs	r1, #7
 80179e8:	4824      	ldr	r0, [pc, #144]	@ (8017a7c <MX_SPI5_Init+0x194>)
 80179ea:	f7fe fffd 	bl	80169e8 <LL_DMA_DisableFifoMode>

  /* SPI5 interrupt Init */
  NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 80179ee:	f7fe fb6f 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 80179f2:	4603      	mov	r3, r0
 80179f4:	2200      	movs	r2, #0
 80179f6:	2107      	movs	r1, #7
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7fe fbbf 	bl	801617c <NVIC_EncodePriority>
 80179fe:	4603      	mov	r3, r0
 8017a00:	4619      	mov	r1, r3
 8017a02:	2055      	movs	r0, #85	@ 0x55
 8017a04:	f7fe fb90 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI5_IRQn);
 8017a08:	2055      	movs	r0, #85	@ 0x55
 8017a0a:	f7fe fb6f 	bl	80160ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.Mode = LL_SPI_MODE_SLAVE;
 8017a14:	2300      	movs	r3, #0
 8017a16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8017a1a:	2307      	movs	r3, #7
 8017a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8017a20:	2300      	movs	r3, #0
 8017a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8017a26:	2300      	movs	r3, #0
 8017a28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_INPUT;
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8017a32:	2300      	movs	r3, #0
 8017a34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8017a38:	2300      	movs	r3, #0
 8017a3a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  SPI_InitStruct.CRCPoly = 0x0;
 8017a3e:	2300      	movs	r3, #0
 8017a40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  LL_SPI_Init(SPI5, &SPI_InitStruct);
 8017a44:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017a48:	4619      	mov	r1, r3
 8017a4a:	480d      	ldr	r0, [pc, #52]	@ (8017a80 <MX_SPI5_Init+0x198>)
 8017a4c:	f009 fd4e 	bl	80214ec <LL_SPI_Init>
  LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 8017a50:	2100      	movs	r1, #0
 8017a52:	480b      	ldr	r0, [pc, #44]	@ (8017a80 <MX_SPI5_Init+0x198>)
 8017a54:	f7fe fc4e 	bl	80162f4 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI5, LL_SPI_FIFO_TH_01DATA);
 8017a58:	2100      	movs	r1, #0
 8017a5a:	4809      	ldr	r0, [pc, #36]	@ (8017a80 <MX_SPI5_Init+0x198>)
 8017a5c:	f7fe fc5d 	bl	801631a <LL_SPI_SetFIFOThreshold>
  LL_SPI_DisableNSSPulseMgt(SPI5);
 8017a60:	4807      	ldr	r0, [pc, #28]	@ (8017a80 <MX_SPI5_Init+0x198>)
 8017a62:	f7fe fc7d 	bl	8016360 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI5_Init 2 */

  peripherals[11].errorCode = Sys_OK;
 8017a66:	4b07      	ldr	r3, [pc, #28]	@ (8017a84 <MX_SPI5_Init+0x19c>)
 8017a68:	2200      	movs	r2, #0
 8017a6a:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
  /* USER CODE END SPI5_Init 2 */

}
 8017a6e:	bf00      	nop
 8017a70:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	58021400 	.word	0x58021400
 8017a7c:	40020000 	.word	0x40020000
 8017a80:	40015000 	.word	0x40015000
 8017a84:	240148e0 	.word	0x240148e0

08017a88 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b0c0      	sub	sp, #256	@ 0x100
 8017a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 0 */

  /* USER CODE END SPI6_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8017a8e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017a92:	2228      	movs	r2, #40	@ 0x28
 8017a94:	2100      	movs	r1, #0
 8017a96:	4618      	mov	r0, r3
 8017a98:	f00a fa81 	bl	8021f9e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a9c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	601a      	str	r2, [r3, #0]
 8017aa4:	605a      	str	r2, [r3, #4]
 8017aa6:	609a      	str	r2, [r3, #8]
 8017aa8:	60da      	str	r2, [r3, #12]
 8017aaa:	611a      	str	r2, [r3, #16]
 8017aac:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017aae:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017ab2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	23c0      	movs	r3, #192	@ 0xc0
 8017aba:	461a      	mov	r2, r3
 8017abc:	2100      	movs	r1, #0
 8017abe:	f00a fa6e 	bl	8021f9e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8017ac2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017ac6:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 8017aca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8017ace:	f04f 0300 	mov.w	r3, #0
 8017ad2:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8017ad6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017ada:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017ade:	2205      	movs	r2, #5
 8017ae0:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 48;
 8017ae2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017ae6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017aea:	2230      	movs	r2, #48	@ 0x30
 8017aec:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8017aee:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017af2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017af6:	2202      	movs	r2, #2
 8017af8:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 6;
 8017afa:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017afe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017b02:	2206      	movs	r2, #6
 8017b04:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 4;
 8017b06:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017b0a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017b0e:	2204      	movs	r2, #4
 8017b10:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8017b12:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017b16:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017b1a:	2280      	movs	r2, #128	@ 0x80
 8017b1c:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8017b1e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017b22:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017b26:	2200      	movs	r2, #0
 8017b28:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8017b2a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017b2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017b32:	2200      	movs	r2, #0
 8017b34:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL2;
 8017b36:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8017b3a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017b42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017b46:	463b      	mov	r3, r7
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f004 ff4b 	bl	801c9e4 <HAL_RCCEx_PeriphCLKConfig>
 8017b4e:	4603      	mov	r3, r0
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d001      	beq.n	8017b58 <MX_SPI6_Init+0xd0>
  {
    Error_Handler();
 8017b54:	f000 fdbe 	bl	80186d4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SPI6);
 8017b58:	2020      	movs	r0, #32
 8017b5a:	f7fe fdef 	bl	801673c <LL_APB4_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8017b5e:	2001      	movs	r0, #1
 8017b60:	f7fe fd98 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  /**SPI6 GPIO Configuration
  PA5   ------> SPI6_SCK
  PA6   ------> SPI6_MISO
  PA7   ------> SPI6_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8017b64:	23e0      	movs	r3, #224	@ 0xe0
 8017b66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8017b6a:	2302      	movs	r3, #2
 8017b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8017b70:	2300      	movs	r3, #0
 8017b72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8017b76:	2300      	movs	r3, #0
 8017b78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8017b82:	2308      	movs	r3, #8
 8017b84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017b88:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017b8c:	4619      	mov	r1, r3
 8017b8e:	4850      	ldr	r0, [pc, #320]	@ (8017cd0 <MX_SPI6_Init+0x248>)
 8017b90:	f007 ffc8 	bl	801fb24 <LL_GPIO_Init>

  /* SPI6 DMA Init */

  /* SPI6_RX Init */
  LL_BDMA_SetPeriphRequest(BDMA, LL_BDMA_CHANNEL_0, LL_DMAMUX2_REQ_SPI6_RX);
 8017b94:	220b      	movs	r2, #11
 8017b96:	2100      	movs	r1, #0
 8017b98:	484e      	ldr	r0, [pc, #312]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017b9a:	f7ff f853 	bl	8016c44 <LL_BDMA_SetPeriphRequest>

  LL_BDMA_SetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_DIRECTION_PERIPH_TO_MEMORY);
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	2100      	movs	r1, #0
 8017ba2:	484c      	ldr	r0, [pc, #304]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017ba4:	f7fe ff42 	bl	8016a2c <LL_BDMA_SetDataTransferDirection>

  LL_BDMA_SetChannelPriorityLevel(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_PRIORITY_LOW);
 8017ba8:	2200      	movs	r2, #0
 8017baa:	2100      	movs	r1, #0
 8017bac:	4849      	ldr	r0, [pc, #292]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017bae:	f7ff f823 	bl	8016bf8 <LL_BDMA_SetChannelPriorityLevel>

  LL_BDMA_SetMode(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_MODE_NORMAL);
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	2100      	movs	r1, #0
 8017bb6:	4847      	ldr	r0, [pc, #284]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017bb8:	f7fe ff60 	bl	8016a7c <LL_BDMA_SetMode>

  LL_BDMA_SetPeriphIncMode(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_PERIPH_NOINCREMENT);
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	2100      	movs	r1, #0
 8017bc0:	4844      	ldr	r0, [pc, #272]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017bc2:	f7fe ff81 	bl	8016ac8 <LL_BDMA_SetPeriphIncMode>

  LL_BDMA_SetMemoryIncMode(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_MEMORY_INCREMENT);
 8017bc6:	2280      	movs	r2, #128	@ 0x80
 8017bc8:	2100      	movs	r1, #0
 8017bca:	4842      	ldr	r0, [pc, #264]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017bcc:	f7fe ffa2 	bl	8016b14 <LL_BDMA_SetMemoryIncMode>

  LL_BDMA_SetPeriphSize(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_PDATAALIGN_BYTE);
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	2100      	movs	r1, #0
 8017bd4:	483f      	ldr	r0, [pc, #252]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017bd6:	f7fe ffc3 	bl	8016b60 <LL_BDMA_SetPeriphSize>

  LL_BDMA_SetMemorySize(BDMA, LL_BDMA_CHANNEL_0, LL_BDMA_MDATAALIGN_BYTE);
 8017bda:	2200      	movs	r2, #0
 8017bdc:	2100      	movs	r1, #0
 8017bde:	483d      	ldr	r0, [pc, #244]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017be0:	f7fe ffe4 	bl	8016bac <LL_BDMA_SetMemorySize>

  /* SPI6_TX Init */
  LL_BDMA_SetPeriphRequest(BDMA, LL_BDMA_CHANNEL_1, LL_DMAMUX2_REQ_SPI6_TX);
 8017be4:	220c      	movs	r2, #12
 8017be6:	2101      	movs	r1, #1
 8017be8:	483a      	ldr	r0, [pc, #232]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017bea:	f7ff f82b 	bl	8016c44 <LL_BDMA_SetPeriphRequest>

  LL_BDMA_SetDataTransferDirection(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_DIRECTION_MEMORY_TO_PERIPH);
 8017bee:	2210      	movs	r2, #16
 8017bf0:	2101      	movs	r1, #1
 8017bf2:	4838      	ldr	r0, [pc, #224]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017bf4:	f7fe ff1a 	bl	8016a2c <LL_BDMA_SetDataTransferDirection>

  LL_BDMA_SetChannelPriorityLevel(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_PRIORITY_LOW);
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	2101      	movs	r1, #1
 8017bfc:	4835      	ldr	r0, [pc, #212]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017bfe:	f7fe fffb 	bl	8016bf8 <LL_BDMA_SetChannelPriorityLevel>

  LL_BDMA_SetMode(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_MODE_NORMAL);
 8017c02:	2200      	movs	r2, #0
 8017c04:	2101      	movs	r1, #1
 8017c06:	4833      	ldr	r0, [pc, #204]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017c08:	f7fe ff38 	bl	8016a7c <LL_BDMA_SetMode>

  LL_BDMA_SetPeriphIncMode(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_PERIPH_NOINCREMENT);
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	2101      	movs	r1, #1
 8017c10:	4830      	ldr	r0, [pc, #192]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017c12:	f7fe ff59 	bl	8016ac8 <LL_BDMA_SetPeriphIncMode>

  LL_BDMA_SetMemoryIncMode(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_MEMORY_NOINCREMENT);
 8017c16:	2200      	movs	r2, #0
 8017c18:	2101      	movs	r1, #1
 8017c1a:	482e      	ldr	r0, [pc, #184]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017c1c:	f7fe ff7a 	bl	8016b14 <LL_BDMA_SetMemoryIncMode>

  LL_BDMA_SetPeriphSize(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_PDATAALIGN_BYTE);
 8017c20:	2200      	movs	r2, #0
 8017c22:	2101      	movs	r1, #1
 8017c24:	482b      	ldr	r0, [pc, #172]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017c26:	f7fe ff9b 	bl	8016b60 <LL_BDMA_SetPeriphSize>

  LL_BDMA_SetMemorySize(BDMA, LL_BDMA_CHANNEL_1, LL_BDMA_MDATAALIGN_BYTE);
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	2101      	movs	r1, #1
 8017c2e:	4829      	ldr	r0, [pc, #164]	@ (8017cd4 <MX_SPI6_Init+0x24c>)
 8017c30:	f7fe ffbc 	bl	8016bac <LL_BDMA_SetMemorySize>

  /* SPI6 interrupt Init */
  NVIC_SetPriority(SPI6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8017c34:	f7fe fa4c 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 8017c38:	4603      	mov	r3, r0
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	2107      	movs	r1, #7
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7fe fa9c 	bl	801617c <NVIC_EncodePriority>
 8017c44:	4603      	mov	r3, r0
 8017c46:	4619      	mov	r1, r3
 8017c48:	2056      	movs	r0, #86	@ 0x56
 8017c4a:	f7fe fa6d 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI6_IRQn);
 8017c4e:	2056      	movs	r0, #86	@ 0x56
 8017c50:	f7fe fa4c 	bl	80160ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8017c54:	2300      	movs	r3, #0
 8017c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8017c5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8017c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8017c62:	2307      	movs	r3, #7
 8017c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8017c6e:	2300      	movs	r3, #0
 8017c70:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8017c74:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8017c78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8017c7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8017c80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8017c84:	2300      	movs	r3, #0
 8017c86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  SPI_InitStruct.CRCPoly = 0x0;
 8017c90:	2300      	movs	r3, #0
 8017c92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  LL_SPI_Init(SPI6, &SPI_InitStruct);
 8017c96:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017c9a:	4619      	mov	r1, r3
 8017c9c:	480e      	ldr	r0, [pc, #56]	@ (8017cd8 <MX_SPI6_Init+0x250>)
 8017c9e:	f009 fc25 	bl	80214ec <LL_SPI_Init>
  LL_SPI_SetStandard(SPI6, LL_SPI_PROTOCOL_MOTOROLA);
 8017ca2:	2100      	movs	r1, #0
 8017ca4:	480c      	ldr	r0, [pc, #48]	@ (8017cd8 <MX_SPI6_Init+0x250>)
 8017ca6:	f7fe fb25 	bl	80162f4 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI6, LL_SPI_FIFO_TH_01DATA);
 8017caa:	2100      	movs	r1, #0
 8017cac:	480a      	ldr	r0, [pc, #40]	@ (8017cd8 <MX_SPI6_Init+0x250>)
 8017cae:	f7fe fb34 	bl	801631a <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI6);
 8017cb2:	4809      	ldr	r0, [pc, #36]	@ (8017cd8 <MX_SPI6_Init+0x250>)
 8017cb4:	f7fe fb44 	bl	8016340 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI6_Init 2 */
  LL_SPI_Enable(SPI6);
 8017cb8:	4807      	ldr	r0, [pc, #28]	@ (8017cd8 <MX_SPI6_Init+0x250>)
 8017cba:	f7fe fafb 	bl	80162b4 <LL_SPI_Enable>
  peripherals[12].errorCode = Sys_OK;
 8017cbe:	4b07      	ldr	r3, [pc, #28]	@ (8017cdc <MX_SPI6_Init+0x254>)
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
  /* USER CODE END SPI6_Init 2 */

}
 8017cc6:	bf00      	nop
 8017cc8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}
 8017cd0:	58020000 	.word	0x58020000
 8017cd4:	58025400 	.word	0x58025400
 8017cd8:	58001400 	.word	0x58001400
 8017cdc:	240148e0 	.word	0x240148e0

08017ce0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	b086      	sub	sp, #24
 8017ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8017ce6:	1d3b      	adds	r3, r7, #4
 8017ce8:	2200      	movs	r2, #0
 8017cea:	601a      	str	r2, [r3, #0]
 8017cec:	605a      	str	r2, [r3, #4]
 8017cee:	609a      	str	r2, [r3, #8]
 8017cf0:	60da      	str	r2, [r3, #12]
 8017cf2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8017cf4:	2001      	movs	r0, #1
 8017cf6:	f7fe fd05 	bl	8016704 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8017cfa:	f7fe f9e9 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	2200      	movs	r2, #0
 8017d02:	210f      	movs	r1, #15
 8017d04:	4618      	mov	r0, r3
 8017d06:	f7fe fa39 	bl	801617c <NVIC_EncodePriority>
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	4619      	mov	r1, r3
 8017d0e:	2019      	movs	r0, #25
 8017d10:	f7fe fa0a 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 8017d14:	2019      	movs	r0, #25
 8017d16:	f7fe f9e9 	bl	80160ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 119;
 8017d1a:	2377      	movs	r3, #119	@ 0x77
 8017d1c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8017d1e:	2300      	movs	r3, #0
 8017d20:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8017d22:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8017d26:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8017d28:	2300      	movs	r3, #0
 8017d2a:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8017d30:	1d3b      	adds	r3, r7, #4
 8017d32:	4619      	mov	r1, r3
 8017d34:	4812      	ldr	r0, [pc, #72]	@ (8017d80 <MX_TIM1_Init+0xa0>)
 8017d36:	f009 fc91 	bl	802165c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8017d3a:	4811      	ldr	r0, [pc, #68]	@ (8017d80 <MX_TIM1_Init+0xa0>)
 8017d3c:	f7fe fb40 	bl	80163c0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8017d40:	2100      	movs	r1, #0
 8017d42:	480f      	ldr	r0, [pc, #60]	@ (8017d80 <MX_TIM1_Init+0xa0>)
 8017d44:	f7fe fb4c 	bl	80163e0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_UPDATE);
 8017d48:	2120      	movs	r1, #32
 8017d4a:	480d      	ldr	r0, [pc, #52]	@ (8017d80 <MX_TIM1_Init+0xa0>)
 8017d4c:	f7fe fb5e 	bl	801640c <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8017d50:	2100      	movs	r1, #0
 8017d52:	480b      	ldr	r0, [pc, #44]	@ (8017d80 <MX_TIM1_Init+0xa0>)
 8017d54:	f7fe fb6d 	bl	8016432 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8017d58:	4809      	ldr	r0, [pc, #36]	@ (8017d80 <MX_TIM1_Init+0xa0>)
 8017d5a:	f7fe fb7d 	bl	8016458 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8017d5e:	4808      	ldr	r0, [pc, #32]	@ (8017d80 <MX_TIM1_Init+0xa0>)
 8017d60:	f7fe fb8a 	bl	8016478 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableUpdateEvent(TIM1);
 8017d64:	4806      	ldr	r0, [pc, #24]	@ (8017d80 <MX_TIM1_Init+0xa0>)
 8017d66:	f7fe fb1b 	bl	80163a0 <LL_TIM_EnableUpdateEvent>
  LL_TIM_EnableCounter(TIM1);
 8017d6a:	4805      	ldr	r0, [pc, #20]	@ (8017d80 <MX_TIM1_Init+0xa0>)
 8017d6c:	f7fe fb08 	bl	8016380 <LL_TIM_EnableCounter>
  peripherals[13].errorCode = Sys_OK;
 8017d70:	4b04      	ldr	r3, [pc, #16]	@ (8017d84 <MX_TIM1_Init+0xa4>)
 8017d72:	2200      	movs	r2, #0
 8017d74:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
  /* USER CODE END TIM1_Init 2 */

}
 8017d78:	bf00      	nop
 8017d7a:	3718      	adds	r7, #24
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}
 8017d80:	40010000 	.word	0x40010000
 8017d84:	240148e0 	.word	0x240148e0

08017d88 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b0be      	sub	sp, #248	@ 0xf8
 8017d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART7_Init 0 */

  /* USER CODE END UART7_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8017d8e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017d92:	2220      	movs	r2, #32
 8017d94:	2100      	movs	r1, #0
 8017d96:	4618      	mov	r0, r3
 8017d98:	f00a f901 	bl	8021f9e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d9c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017da0:	2200      	movs	r2, #0
 8017da2:	601a      	str	r2, [r3, #0]
 8017da4:	605a      	str	r2, [r3, #4]
 8017da6:	609a      	str	r2, [r3, #8]
 8017da8:	60da      	str	r2, [r3, #12]
 8017daa:	611a      	str	r2, [r3, #16]
 8017dac:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017dae:	463b      	mov	r3, r7
 8017db0:	22c0      	movs	r2, #192	@ 0xc0
 8017db2:	2100      	movs	r1, #0
 8017db4:	4618      	mov	r0, r3
 8017db6:	f00a f8f2 	bl	8021f9e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8017dba:	f04f 0202 	mov.w	r2, #2
 8017dbe:	f04f 0300 	mov.w	r3, #0
 8017dc2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017dca:	463b      	mov	r3, r7
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f004 fe09 	bl	801c9e4 <HAL_RCCEx_PeriphCLKConfig>
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d001      	beq.n	8017ddc <MX_UART7_Init+0x54>
  {
    Error_Handler();
 8017dd8:	f000 fc7c 	bl	80186d4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART7);
 8017ddc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8017de0:	f7fe fc74 	bl	80166cc <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8017de4:	2010      	movs	r0, #16
 8017de6:	f7fe fc55 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  /**UART7 GPIO Configuration
  PE7   ------> UART7_RX
  PE8   ------> UART7_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 8017dea:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8017dee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8017df2:	2302      	movs	r3, #2
 8017df4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8017df8:	2300      	movs	r3, #0
 8017dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8017dfe:	2300      	movs	r3, #0
 8017e00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8017e04:	2300      	movs	r3, #0
 8017e06:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8017e0a:	2307      	movs	r3, #7
 8017e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8017e10:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017e14:	4619      	mov	r1, r3
 8017e16:	4843      	ldr	r0, [pc, #268]	@ (8017f24 <MX_UART7_Init+0x19c>)
 8017e18:	f007 fe84 	bl	801fb24 <LL_GPIO_Init>

  /* UART7 DMA Init */

  /* UART7_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_STREAM_1, LL_DMAMUX1_REQ_UART7_RX);
 8017e1c:	224f      	movs	r2, #79	@ 0x4f
 8017e1e:	2101      	movs	r1, #1
 8017e20:	4841      	ldr	r0, [pc, #260]	@ (8017f28 <MX_UART7_Init+0x1a0>)
 8017e22:	f7fe fdb1 	bl	8016988 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8017e26:	2200      	movs	r2, #0
 8017e28:	2101      	movs	r1, #1
 8017e2a:	483f      	ldr	r0, [pc, #252]	@ (8017f28 <MX_UART7_Init+0x1a0>)
 8017e2c:	f7fe fca2 	bl	8016774 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8017e30:	2200      	movs	r2, #0
 8017e32:	2101      	movs	r1, #1
 8017e34:	483c      	ldr	r0, [pc, #240]	@ (8017f28 <MX_UART7_Init+0x1a0>)
 8017e36:	f7fe fd81 	bl	801693c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 8017e3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017e3e:	2101      	movs	r1, #1
 8017e40:	4839      	ldr	r0, [pc, #228]	@ (8017f28 <MX_UART7_Init+0x1a0>)
 8017e42:	f7fe fcbd 	bl	80167c0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8017e46:	2200      	movs	r2, #0
 8017e48:	2101      	movs	r1, #1
 8017e4a:	4837      	ldr	r0, [pc, #220]	@ (8017f28 <MX_UART7_Init+0x1a0>)
 8017e4c:	f7fe fcde 	bl	801680c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8017e50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017e54:	2101      	movs	r1, #1
 8017e56:	4834      	ldr	r0, [pc, #208]	@ (8017f28 <MX_UART7_Init+0x1a0>)
 8017e58:	f7fe fcfe 	bl	8016858 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	2101      	movs	r1, #1
 8017e60:	4831      	ldr	r0, [pc, #196]	@ (8017f28 <MX_UART7_Init+0x1a0>)
 8017e62:	f7fe fd1f 	bl	80168a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 8017e66:	2200      	movs	r2, #0
 8017e68:	2101      	movs	r1, #1
 8017e6a:	482f      	ldr	r0, [pc, #188]	@ (8017f28 <MX_UART7_Init+0x1a0>)
 8017e6c:	f7fe fd40 	bl	80168f0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_1);
 8017e70:	2101      	movs	r1, #1
 8017e72:	482d      	ldr	r0, [pc, #180]	@ (8017f28 <MX_UART7_Init+0x1a0>)
 8017e74:	f7fe fdb8 	bl	80169e8 <LL_DMA_DisableFifoMode>

  /* UART7 interrupt Init */
  NVIC_SetPriority(UART7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8017e78:	f7fe f92a 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	2200      	movs	r2, #0
 8017e80:	2107      	movs	r1, #7
 8017e82:	4618      	mov	r0, r3
 8017e84:	f7fe f97a 	bl	801617c <NVIC_EncodePriority>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	4619      	mov	r1, r3
 8017e8c:	2052      	movs	r0, #82	@ 0x52
 8017e8e:	f7fe f94b 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART7_IRQn);
 8017e92:	2052      	movs	r0, #82	@ 0x52
 8017e94:	f7fe f92a 	bl	80160ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8017e98:	2300      	movs	r3, #0
 8017e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.BaudRate = 115200;
 8017e9e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8017ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8017eac:	2300      	movs	r3, #0
 8017eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8017eb8:	230c      	movs	r3, #12
 8017eba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(UART7, &UART_InitStruct);
 8017eca:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017ece:	4619      	mov	r1, r3
 8017ed0:	4816      	ldr	r0, [pc, #88]	@ (8017f2c <MX_UART7_Init+0x1a4>)
 8017ed2:	f009 fcf5 	bl	80218c0 <LL_USART_Init>
  LL_USART_DisableFIFO(UART7);
 8017ed6:	4815      	ldr	r0, [pc, #84]	@ (8017f2c <MX_UART7_Init+0x1a4>)
 8017ed8:	f7fe faee 	bl	80164b8 <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 8017edc:	2100      	movs	r1, #0
 8017ede:	4813      	ldr	r0, [pc, #76]	@ (8017f2c <MX_UART7_Init+0x1a4>)
 8017ee0:	f7fe fafa 	bl	80164d8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART7, LL_USART_FIFOTHRESHOLD_1_8);
 8017ee4:	2100      	movs	r1, #0
 8017ee6:	4811      	ldr	r0, [pc, #68]	@ (8017f2c <MX_UART7_Init+0x1a4>)
 8017ee8:	f7fe fb1d 	bl	8016526 <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART7);
 8017eec:	480f      	ldr	r0, [pc, #60]	@ (8017f2c <MX_UART7_Init+0x1a4>)
 8017eee:	f7fe fb41 	bl	8016574 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART7 */

  /* USER CODE END WKUPType UART7 */
  LL_USART_Enable(UART7);
 8017ef2:	480e      	ldr	r0, [pc, #56]	@ (8017f2c <MX_UART7_Init+0x1a4>)
 8017ef4:	f7fe fad0 	bl	8016498 <LL_USART_Enable>

  /* Polling UART7 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(UART7))) || (!(LL_USART_IsActiveFlag_REACK(UART7))))
 8017ef8:	bf00      	nop
 8017efa:	480c      	ldr	r0, [pc, #48]	@ (8017f2c <MX_UART7_Init+0x1a4>)
 8017efc:	f7fe fb76 	bl	80165ec <LL_USART_IsActiveFlag_TEACK>
 8017f00:	4603      	mov	r3, r0
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d0f9      	beq.n	8017efa <MX_UART7_Init+0x172>
 8017f06:	4809      	ldr	r0, [pc, #36]	@ (8017f2c <MX_UART7_Init+0x1a4>)
 8017f08:	f7fe fb84 	bl	8016614 <LL_USART_IsActiveFlag_REACK>
 8017f0c:	4603      	mov	r3, r0
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d0f3      	beq.n	8017efa <MX_UART7_Init+0x172>
  {
  }
  /* USER CODE BEGIN UART7_Init 2 */
  peripherals[12].errorCode = Sys_OK;
 8017f12:	4b07      	ldr	r3, [pc, #28]	@ (8017f30 <MX_UART7_Init+0x1a8>)
 8017f14:	2200      	movs	r2, #0
 8017f16:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
  /* USER CODE END UART7_Init 2 */

}
 8017f1a:	bf00      	nop
 8017f1c:	37f8      	adds	r7, #248	@ 0xf8
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}
 8017f22:	bf00      	nop
 8017f24:	58021000 	.word	0x58021000
 8017f28:	40020400 	.word	0x40020400
 8017f2c:	40007800 	.word	0x40007800
 8017f30:	240148e0 	.word	0x240148e0

08017f34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b0be      	sub	sp, #248	@ 0xf8
 8017f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8017f3a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8017f3e:	2220      	movs	r2, #32
 8017f40:	2100      	movs	r1, #0
 8017f42:	4618      	mov	r0, r3
 8017f44:	f00a f82b 	bl	8021f9e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f48:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	601a      	str	r2, [r3, #0]
 8017f50:	605a      	str	r2, [r3, #4]
 8017f52:	609a      	str	r2, [r3, #8]
 8017f54:	60da      	str	r2, [r3, #12]
 8017f56:	611a      	str	r2, [r3, #16]
 8017f58:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017f5a:	463b      	mov	r3, r7
 8017f5c:	22c0      	movs	r2, #192	@ 0xc0
 8017f5e:	2100      	movs	r1, #0
 8017f60:	4618      	mov	r0, r3
 8017f62:	f00a f81c 	bl	8021f9e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8017f66:	f04f 0201 	mov.w	r2, #1
 8017f6a:	f04f 0300 	mov.w	r3, #0
 8017f6e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8017f72:	2300      	movs	r3, #0
 8017f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017f76:	463b      	mov	r3, r7
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f004 fd33 	bl	801c9e4 <HAL_RCCEx_PeriphCLKConfig>
 8017f7e:	4603      	mov	r3, r0
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d001      	beq.n	8017f88 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8017f84:	f000 fba6 	bl	80186d4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8017f88:	2010      	movs	r0, #16
 8017f8a:	f7fe fbbb 	bl	8016704 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8017f8e:	2001      	movs	r0, #1
 8017f90:	f7fe fb80 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8017f94:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8017f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8017f9c:	2302      	movs	r3, #2
 8017f9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8017fae:	2300      	movs	r3, #0
 8017fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8017fb4:	2307      	movs	r3, #7
 8017fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017fba:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8017fbe:	4619      	mov	r1, r3
 8017fc0:	4842      	ldr	r0, [pc, #264]	@ (80180cc <MX_USART1_UART_Init+0x198>)
 8017fc2:	f007 fdaf 	bl	801fb24 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_0, LL_DMAMUX1_REQ_USART1_RX);
 8017fc6:	2229      	movs	r2, #41	@ 0x29
 8017fc8:	2100      	movs	r1, #0
 8017fca:	4841      	ldr	r0, [pc, #260]	@ (80180d0 <MX_USART1_UART_Init+0x19c>)
 8017fcc:	f7fe fcdc 	bl	8016988 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	2100      	movs	r1, #0
 8017fd4:	483e      	ldr	r0, [pc, #248]	@ (80180d0 <MX_USART1_UART_Init+0x19c>)
 8017fd6:	f7fe fbcd 	bl	8016774 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8017fda:	2200      	movs	r2, #0
 8017fdc:	2100      	movs	r1, #0
 8017fde:	483c      	ldr	r0, [pc, #240]	@ (80180d0 <MX_USART1_UART_Init+0x19c>)
 8017fe0:	f7fe fcac 	bl	801693c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8017fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017fe8:	2100      	movs	r1, #0
 8017fea:	4839      	ldr	r0, [pc, #228]	@ (80180d0 <MX_USART1_UART_Init+0x19c>)
 8017fec:	f7fe fbe8 	bl	80167c0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	2100      	movs	r1, #0
 8017ff4:	4836      	ldr	r0, [pc, #216]	@ (80180d0 <MX_USART1_UART_Init+0x19c>)
 8017ff6:	f7fe fc09 	bl	801680c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8017ffa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017ffe:	2100      	movs	r1, #0
 8018000:	4833      	ldr	r0, [pc, #204]	@ (80180d0 <MX_USART1_UART_Init+0x19c>)
 8018002:	f7fe fc29 	bl	8016858 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 8018006:	2200      	movs	r2, #0
 8018008:	2100      	movs	r1, #0
 801800a:	4831      	ldr	r0, [pc, #196]	@ (80180d0 <MX_USART1_UART_Init+0x19c>)
 801800c:	f7fe fc4a 	bl	80168a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 8018010:	2200      	movs	r2, #0
 8018012:	2100      	movs	r1, #0
 8018014:	482e      	ldr	r0, [pc, #184]	@ (80180d0 <MX_USART1_UART_Init+0x19c>)
 8018016:	f7fe fc6b 	bl	80168f0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);
 801801a:	2100      	movs	r1, #0
 801801c:	482c      	ldr	r0, [pc, #176]	@ (80180d0 <MX_USART1_UART_Init+0x19c>)
 801801e:	f7fe fce3 	bl	80169e8 <LL_DMA_DisableFifoMode>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8018022:	f7fe f855 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 8018026:	4603      	mov	r3, r0
 8018028:	2200      	movs	r2, #0
 801802a:	2107      	movs	r1, #7
 801802c:	4618      	mov	r0, r3
 801802e:	f7fe f8a5 	bl	801617c <NVIC_EncodePriority>
 8018032:	4603      	mov	r3, r0
 8018034:	4619      	mov	r1, r3
 8018036:	2025      	movs	r0, #37	@ 0x25
 8018038:	f7fe f876 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 801803c:	2025      	movs	r0, #37	@ 0x25
 801803e:	f7fe f855 	bl	80160ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8018042:	2300      	movs	r3, #0
 8018044:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 8018048:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 801804c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8018050:	2300      	movs	r3, #0
 8018052:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8018056:	2300      	movs	r3, #0
 8018058:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 801805c:	2300      	movs	r3, #0
 801805e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8018062:	230c      	movs	r3, #12
 8018064:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8018068:	2300      	movs	r3, #0
 801806a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 801806e:	2300      	movs	r3, #0
 8018070:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART1, &USART_InitStruct);
 8018074:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8018078:	4619      	mov	r1, r3
 801807a:	4816      	ldr	r0, [pc, #88]	@ (80180d4 <MX_USART1_UART_Init+0x1a0>)
 801807c:	f009 fc20 	bl	80218c0 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8018080:	2100      	movs	r1, #0
 8018082:	4814      	ldr	r0, [pc, #80]	@ (80180d4 <MX_USART1_UART_Init+0x1a0>)
 8018084:	f7fe fa28 	bl	80164d8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8018088:	2100      	movs	r1, #0
 801808a:	4812      	ldr	r0, [pc, #72]	@ (80180d4 <MX_USART1_UART_Init+0x1a0>)
 801808c:	f7fe fa4b 	bl	8016526 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8018090:	4810      	ldr	r0, [pc, #64]	@ (80180d4 <MX_USART1_UART_Init+0x1a0>)
 8018092:	f7fe fa11 	bl	80164b8 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8018096:	480f      	ldr	r0, [pc, #60]	@ (80180d4 <MX_USART1_UART_Init+0x1a0>)
 8018098:	f7fe fa6c 	bl	8016574 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 801809c:	480d      	ldr	r0, [pc, #52]	@ (80180d4 <MX_USART1_UART_Init+0x1a0>)
 801809e:	f7fe f9fb 	bl	8016498 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 80180a2:	bf00      	nop
 80180a4:	480b      	ldr	r0, [pc, #44]	@ (80180d4 <MX_USART1_UART_Init+0x1a0>)
 80180a6:	f7fe faa1 	bl	80165ec <LL_USART_IsActiveFlag_TEACK>
 80180aa:	4603      	mov	r3, r0
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d0f9      	beq.n	80180a4 <MX_USART1_UART_Init+0x170>
 80180b0:	4808      	ldr	r0, [pc, #32]	@ (80180d4 <MX_USART1_UART_Init+0x1a0>)
 80180b2:	f7fe faaf 	bl	8016614 <LL_USART_IsActiveFlag_REACK>
 80180b6:	4603      	mov	r3, r0
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d0f3      	beq.n	80180a4 <MX_USART1_UART_Init+0x170>
  {
  }
  /* USER CODE BEGIN USART1_Init 2 */
  peripherals[4].errorCode = Sys_OK;
 80180bc:	4b06      	ldr	r3, [pc, #24]	@ (80180d8 <MX_USART1_UART_Init+0x1a4>)
 80180be:	2200      	movs	r2, #0
 80180c0:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
  /* USER CODE END USART1_Init 2 */

}
 80180c4:	bf00      	nop
 80180c6:	37f8      	adds	r7, #248	@ 0xf8
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bd80      	pop	{r7, pc}
 80180cc:	58020000 	.word	0x58020000
 80180d0:	40020000 	.word	0x40020000
 80180d4:	40011000 	.word	0x40011000
 80180d8:	240148e0 	.word	0x240148e0

080180dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b0be      	sub	sp, #248	@ 0xf8
 80180e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80180e2:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80180e6:	2220      	movs	r2, #32
 80180e8:	2100      	movs	r1, #0
 80180ea:	4618      	mov	r0, r3
 80180ec:	f009 ff57 	bl	8021f9e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80180f0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80180f4:	2200      	movs	r2, #0
 80180f6:	601a      	str	r2, [r3, #0]
 80180f8:	605a      	str	r2, [r3, #4]
 80180fa:	609a      	str	r2, [r3, #8]
 80180fc:	60da      	str	r2, [r3, #12]
 80180fe:	611a      	str	r2, [r3, #16]
 8018100:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018102:	463b      	mov	r3, r7
 8018104:	22c0      	movs	r2, #192	@ 0xc0
 8018106:	2100      	movs	r1, #0
 8018108:	4618      	mov	r0, r3
 801810a:	f009 ff48 	bl	8021f9e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 801810e:	f04f 0202 	mov.w	r2, #2
 8018112:	f04f 0300 	mov.w	r3, #0
 8018116:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801811a:	2300      	movs	r3, #0
 801811c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801811e:	463b      	mov	r3, r7
 8018120:	4618      	mov	r0, r3
 8018122:	f004 fc5f 	bl	801c9e4 <HAL_RCCEx_PeriphCLKConfig>
 8018126:	4603      	mov	r3, r0
 8018128:	2b00      	cmp	r3, #0
 801812a:	d001      	beq.n	8018130 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 801812c:	f000 fad2 	bl	80186d4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8018130:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8018134:	f7fe faca 	bl	80166cc <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8018138:	2001      	movs	r0, #1
 801813a:	f7fe faab 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 801813e:	230c      	movs	r3, #12
 8018140:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8018144:	2302      	movs	r3, #2
 8018146:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 801814a:	2300      	movs	r3, #0
 801814c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8018150:	2300      	movs	r3, #0
 8018152:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8018156:	2300      	movs	r3, #0
 8018158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 801815c:	2307      	movs	r3, #7
 801815e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018162:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8018166:	4619      	mov	r1, r3
 8018168:	4842      	ldr	r0, [pc, #264]	@ (8018274 <MX_USART2_UART_Init+0x198>)
 801816a:	f007 fcdb 	bl	801fb24 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_1, LL_DMAMUX1_REQ_USART2_RX);
 801816e:	222b      	movs	r2, #43	@ 0x2b
 8018170:	2101      	movs	r1, #1
 8018172:	4841      	ldr	r0, [pc, #260]	@ (8018278 <MX_USART2_UART_Init+0x19c>)
 8018174:	f7fe fc08 	bl	8016988 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8018178:	2200      	movs	r2, #0
 801817a:	2101      	movs	r1, #1
 801817c:	483e      	ldr	r0, [pc, #248]	@ (8018278 <MX_USART2_UART_Init+0x19c>)
 801817e:	f7fe faf9 	bl	8016774 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8018182:	2200      	movs	r2, #0
 8018184:	2101      	movs	r1, #1
 8018186:	483c      	ldr	r0, [pc, #240]	@ (8018278 <MX_USART2_UART_Init+0x19c>)
 8018188:	f7fe fbd8 	bl	801693c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 801818c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018190:	2101      	movs	r1, #1
 8018192:	4839      	ldr	r0, [pc, #228]	@ (8018278 <MX_USART2_UART_Init+0x19c>)
 8018194:	f7fe fb14 	bl	80167c0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8018198:	2200      	movs	r2, #0
 801819a:	2101      	movs	r1, #1
 801819c:	4836      	ldr	r0, [pc, #216]	@ (8018278 <MX_USART2_UART_Init+0x19c>)
 801819e:	f7fe fb35 	bl	801680c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 80181a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80181a6:	2101      	movs	r1, #1
 80181a8:	4833      	ldr	r0, [pc, #204]	@ (8018278 <MX_USART2_UART_Init+0x19c>)
 80181aa:	f7fe fb55 	bl	8016858 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 80181ae:	2200      	movs	r2, #0
 80181b0:	2101      	movs	r1, #1
 80181b2:	4831      	ldr	r0, [pc, #196]	@ (8018278 <MX_USART2_UART_Init+0x19c>)
 80181b4:	f7fe fb76 	bl	80168a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 80181b8:	2200      	movs	r2, #0
 80181ba:	2101      	movs	r1, #1
 80181bc:	482e      	ldr	r0, [pc, #184]	@ (8018278 <MX_USART2_UART_Init+0x19c>)
 80181be:	f7fe fb97 	bl	80168f0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 80181c2:	2101      	movs	r1, #1
 80181c4:	482c      	ldr	r0, [pc, #176]	@ (8018278 <MX_USART2_UART_Init+0x19c>)
 80181c6:	f7fe fc0f 	bl	80169e8 <LL_DMA_DisableFifoMode>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 80181ca:	f7fd ff81 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 80181ce:	4603      	mov	r3, r0
 80181d0:	2200      	movs	r2, #0
 80181d2:	2107      	movs	r1, #7
 80181d4:	4618      	mov	r0, r3
 80181d6:	f7fd ffd1 	bl	801617c <NVIC_EncodePriority>
 80181da:	4603      	mov	r3, r0
 80181dc:	4619      	mov	r1, r3
 80181de:	2026      	movs	r0, #38	@ 0x26
 80181e0:	f7fd ffa2 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80181e4:	2026      	movs	r0, #38	@ 0x26
 80181e6:	f7fd ff81 	bl	80160ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80181ea:	2300      	movs	r3, #0
 80181ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 80181f0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80181f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80181f8:	2300      	movs	r3, #0
 80181fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80181fe:	2300      	movs	r3, #0
 8018200:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8018204:	2300      	movs	r3, #0
 8018206:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 801820a:	230c      	movs	r3, #12
 801820c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8018210:	2300      	movs	r3, #0
 8018212:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8018216:	2300      	movs	r3, #0
 8018218:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART2, &USART_InitStruct);
 801821c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8018220:	4619      	mov	r1, r3
 8018222:	4816      	ldr	r0, [pc, #88]	@ (801827c <MX_USART2_UART_Init+0x1a0>)
 8018224:	f009 fb4c 	bl	80218c0 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8018228:	2100      	movs	r1, #0
 801822a:	4814      	ldr	r0, [pc, #80]	@ (801827c <MX_USART2_UART_Init+0x1a0>)
 801822c:	f7fe f954 	bl	80164d8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8018230:	2100      	movs	r1, #0
 8018232:	4812      	ldr	r0, [pc, #72]	@ (801827c <MX_USART2_UART_Init+0x1a0>)
 8018234:	f7fe f977 	bl	8016526 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8018238:	4810      	ldr	r0, [pc, #64]	@ (801827c <MX_USART2_UART_Init+0x1a0>)
 801823a:	f7fe f93d 	bl	80164b8 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 801823e:	480f      	ldr	r0, [pc, #60]	@ (801827c <MX_USART2_UART_Init+0x1a0>)
 8018240:	f7fe f998 	bl	8016574 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8018244:	480d      	ldr	r0, [pc, #52]	@ (801827c <MX_USART2_UART_Init+0x1a0>)
 8018246:	f7fe f927 	bl	8016498 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 801824a:	bf00      	nop
 801824c:	480b      	ldr	r0, [pc, #44]	@ (801827c <MX_USART2_UART_Init+0x1a0>)
 801824e:	f7fe f9cd 	bl	80165ec <LL_USART_IsActiveFlag_TEACK>
 8018252:	4603      	mov	r3, r0
 8018254:	2b00      	cmp	r3, #0
 8018256:	d0f9      	beq.n	801824c <MX_USART2_UART_Init+0x170>
 8018258:	4808      	ldr	r0, [pc, #32]	@ (801827c <MX_USART2_UART_Init+0x1a0>)
 801825a:	f7fe f9db 	bl	8016614 <LL_USART_IsActiveFlag_REACK>
 801825e:	4603      	mov	r3, r0
 8018260:	2b00      	cmp	r3, #0
 8018262:	d0f3      	beq.n	801824c <MX_USART2_UART_Init+0x170>
  {
  }
  /* USER CODE BEGIN USART2_Init 2 */
  peripherals[5].errorCode = Sys_OK;
 8018264:	4b06      	ldr	r3, [pc, #24]	@ (8018280 <MX_USART2_UART_Init+0x1a4>)
 8018266:	2200      	movs	r2, #0
 8018268:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
  /* USER CODE END USART2_Init 2 */

}
 801826c:	bf00      	nop
 801826e:	37f8      	adds	r7, #248	@ 0xf8
 8018270:	46bd      	mov	sp, r7
 8018272:	bd80      	pop	{r7, pc}
 8018274:	58020000 	.word	0x58020000
 8018278:	40020000 	.word	0x40020000
 801827c:	40004400 	.word	0x40004400
 8018280:	240148e0 	.word	0x240148e0

08018284 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b082      	sub	sp, #8
 8018288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 801828a:	4b19      	ldr	r3, [pc, #100]	@ (80182f0 <MX_BDMA_Init+0x6c>)
 801828c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8018290:	4a17      	ldr	r2, [pc, #92]	@ (80182f0 <MX_BDMA_Init+0x6c>)
 8018292:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8018296:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801829a:	4b15      	ldr	r3, [pc, #84]	@ (80182f0 <MX_BDMA_Init+0x6c>)
 801829c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80182a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80182a4:	607b      	str	r3, [r7, #4]
 80182a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  NVIC_SetPriority(BDMA_Channel0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 80182a8:	f7fd ff12 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 80182ac:	4603      	mov	r3, r0
 80182ae:	2200      	movs	r2, #0
 80182b0:	2107      	movs	r1, #7
 80182b2:	4618      	mov	r0, r3
 80182b4:	f7fd ff62 	bl	801617c <NVIC_EncodePriority>
 80182b8:	4603      	mov	r3, r0
 80182ba:	4619      	mov	r1, r3
 80182bc:	2081      	movs	r0, #129	@ 0x81
 80182be:	f7fd ff33 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80182c2:	2081      	movs	r0, #129	@ 0x81
 80182c4:	f7fd ff12 	bl	80160ec <__NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(BDMA_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80182c8:	f7fd ff02 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 80182cc:	4603      	mov	r3, r0
 80182ce:	2200      	movs	r2, #0
 80182d0:	2100      	movs	r1, #0
 80182d2:	4618      	mov	r0, r3
 80182d4:	f7fd ff52 	bl	801617c <NVIC_EncodePriority>
 80182d8:	4603      	mov	r3, r0
 80182da:	4619      	mov	r1, r3
 80182dc:	2082      	movs	r0, #130	@ 0x82
 80182de:	f7fd ff23 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 80182e2:	2082      	movs	r0, #130	@ 0x82
 80182e4:	f7fd ff02 	bl	80160ec <__NVIC_EnableIRQ>

}
 80182e8:	bf00      	nop
 80182ea:	3708      	adds	r7, #8
 80182ec:	46bd      	mov	sp, r7
 80182ee:	bd80      	pop	{r7, pc}
 80182f0:	58024400 	.word	0x58024400

080182f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b082      	sub	sp, #8
 80182f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80182fa:	4b31      	ldr	r3, [pc, #196]	@ (80183c0 <MX_DMA_Init+0xcc>)
 80182fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018300:	4a2f      	ldr	r2, [pc, #188]	@ (80183c0 <MX_DMA_Init+0xcc>)
 8018302:	f043 0302 	orr.w	r3, r3, #2
 8018306:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801830a:	4b2d      	ldr	r3, [pc, #180]	@ (80183c0 <MX_DMA_Init+0xcc>)
 801830c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018310:	f003 0302 	and.w	r3, r3, #2
 8018314:	607b      	str	r3, [r7, #4]
 8018316:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8018318:	4b29      	ldr	r3, [pc, #164]	@ (80183c0 <MX_DMA_Init+0xcc>)
 801831a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801831e:	4a28      	ldr	r2, [pc, #160]	@ (80183c0 <MX_DMA_Init+0xcc>)
 8018320:	f043 0301 	orr.w	r3, r3, #1
 8018324:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8018328:	4b25      	ldr	r3, [pc, #148]	@ (80183c0 <MX_DMA_Init+0xcc>)
 801832a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801832e:	f003 0301 	and.w	r3, r3, #1
 8018332:	603b      	str	r3, [r7, #0]
 8018334:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8018336:	f7fd fecb 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 801833a:	4603      	mov	r3, r0
 801833c:	2200      	movs	r2, #0
 801833e:	2107      	movs	r1, #7
 8018340:	4618      	mov	r0, r3
 8018342:	f7fd ff1b 	bl	801617c <NVIC_EncodePriority>
 8018346:	4603      	mov	r3, r0
 8018348:	4619      	mov	r1, r3
 801834a:	200b      	movs	r0, #11
 801834c:	f7fd feec 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8018350:	200b      	movs	r0, #11
 8018352:	f7fd fecb 	bl	80160ec <__NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8018356:	f7fd febb 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 801835a:	4603      	mov	r3, r0
 801835c:	2200      	movs	r2, #0
 801835e:	2107      	movs	r1, #7
 8018360:	4618      	mov	r0, r3
 8018362:	f7fd ff0b 	bl	801617c <NVIC_EncodePriority>
 8018366:	4603      	mov	r3, r0
 8018368:	4619      	mov	r1, r3
 801836a:	200c      	movs	r0, #12
 801836c:	f7fd fedc 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8018370:	200c      	movs	r0, #12
 8018372:	f7fd febb 	bl	80160ec <__NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8018376:	f7fd feab 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 801837a:	4603      	mov	r3, r0
 801837c:	2200      	movs	r2, #0
 801837e:	2107      	movs	r1, #7
 8018380:	4618      	mov	r0, r3
 8018382:	f7fd fefb 	bl	801617c <NVIC_EncodePriority>
 8018386:	4603      	mov	r3, r0
 8018388:	4619      	mov	r1, r3
 801838a:	202f      	movs	r0, #47	@ 0x2f
 801838c:	f7fd fecc 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8018390:	202f      	movs	r0, #47	@ 0x2f
 8018392:	f7fd feab 	bl	80160ec <__NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),7, 0));
 8018396:	f7fd fe9b 	bl	80160d0 <__NVIC_GetPriorityGrouping>
 801839a:	4603      	mov	r3, r0
 801839c:	2200      	movs	r2, #0
 801839e:	2107      	movs	r1, #7
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7fd feeb 	bl	801617c <NVIC_EncodePriority>
 80183a6:	4603      	mov	r3, r0
 80183a8:	4619      	mov	r1, r3
 80183aa:	2039      	movs	r0, #57	@ 0x39
 80183ac:	f7fd febc 	bl	8016128 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80183b0:	2039      	movs	r0, #57	@ 0x39
 80183b2:	f7fd fe9b 	bl	80160ec <__NVIC_EnableIRQ>

}
 80183b6:	bf00      	nop
 80183b8:	3708      	adds	r7, #8
 80183ba:	46bd      	mov	sp, r7
 80183bc:	bd80      	pop	{r7, pc}
 80183be:	bf00      	nop
 80183c0:	58024400 	.word	0x58024400

080183c4 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel0_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b082      	sub	sp, #8
 80183c8:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 80183ca:	4b2e      	ldr	r3, [pc, #184]	@ (8018484 <MX_MDMA_Init+0xc0>)
 80183cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80183d0:	4a2c      	ldr	r2, [pc, #176]	@ (8018484 <MX_MDMA_Init+0xc0>)
 80183d2:	f043 0301 	orr.w	r3, r3, #1
 80183d6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80183da:	4b2a      	ldr	r3, [pc, #168]	@ (8018484 <MX_MDMA_Init+0xc0>)
 80183dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80183e0:	f003 0301 	and.w	r3, r3, #1
 80183e4:	607b      	str	r3, [r7, #4]
 80183e6:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel0_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel0_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 80183e8:	4b27      	ldr	r3, [pc, #156]	@ (8018488 <MX_MDMA_Init+0xc4>)
 80183ea:	4a28      	ldr	r2, [pc, #160]	@ (801848c <MX_MDMA_Init+0xc8>)
 80183ec:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 80183ee:	4b26      	ldr	r3, [pc, #152]	@ (8018488 <MX_MDMA_Init+0xc4>)
 80183f0:	221d      	movs	r2, #29
 80183f2:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80183f4:	4b24      	ldr	r3, [pc, #144]	@ (8018488 <MX_MDMA_Init+0xc4>)
 80183f6:	2200      	movs	r2, #0
 80183f8:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 80183fa:	4b23      	ldr	r3, [pc, #140]	@ (8018488 <MX_MDMA_Init+0xc4>)
 80183fc:	2200      	movs	r2, #0
 80183fe:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8018400:	4b21      	ldr	r3, [pc, #132]	@ (8018488 <MX_MDMA_Init+0xc4>)
 8018402:	2200      	movs	r2, #0
 8018404:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8018406:	4b20      	ldr	r3, [pc, #128]	@ (8018488 <MX_MDMA_Init+0xc4>)
 8018408:	2202      	movs	r2, #2
 801840a:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 801840c:	4b1e      	ldr	r3, [pc, #120]	@ (8018488 <MX_MDMA_Init+0xc4>)
 801840e:	2208      	movs	r2, #8
 8018410:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8018412:	4b1d      	ldr	r3, [pc, #116]	@ (8018488 <MX_MDMA_Init+0xc4>)
 8018414:	2200      	movs	r2, #0
 8018416:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8018418:	4b1b      	ldr	r3, [pc, #108]	@ (8018488 <MX_MDMA_Init+0xc4>)
 801841a:	2200      	movs	r2, #0
 801841c:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 801841e:	4b1a      	ldr	r3, [pc, #104]	@ (8018488 <MX_MDMA_Init+0xc4>)
 8018420:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8018424:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8018426:	4b18      	ldr	r3, [pc, #96]	@ (8018488 <MX_MDMA_Init+0xc4>)
 8018428:	2201      	movs	r2, #1
 801842a:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 801842c:	4b16      	ldr	r3, [pc, #88]	@ (8018488 <MX_MDMA_Init+0xc4>)
 801842e:	2200      	movs	r2, #0
 8018430:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8018432:	4b15      	ldr	r3, [pc, #84]	@ (8018488 <MX_MDMA_Init+0xc4>)
 8018434:	2200      	movs	r2, #0
 8018436:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8018438:	4b13      	ldr	r3, [pc, #76]	@ (8018488 <MX_MDMA_Init+0xc4>)
 801843a:	2200      	movs	r2, #0
 801843c:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel0_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 801843e:	4b12      	ldr	r3, [pc, #72]	@ (8018488 <MX_MDMA_Init+0xc4>)
 8018440:	2200      	movs	r2, #0
 8018442:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel0_sdmmc1_end_data_0) != HAL_OK)
 8018444:	4810      	ldr	r0, [pc, #64]	@ (8018488 <MX_MDMA_Init+0xc4>)
 8018446:	f001 fc13 	bl	8019c70 <HAL_MDMA_Init>
 801844a:	4603      	mov	r3, r0
 801844c:	2b00      	cmp	r3, #0
 801844e:	d113      	bne.n	8018478 <MX_MDMA_Init+0xb4>
  {
    return;
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel0_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8018450:	2200      	movs	r2, #0
 8018452:	2100      	movs	r1, #0
 8018454:	480c      	ldr	r0, [pc, #48]	@ (8018488 <MX_MDMA_Init+0xc4>)
 8018456:	f001 fc57 	bl	8019d08 <HAL_MDMA_ConfigPostRequestMask>
 801845a:	4603      	mov	r3, r0
 801845c:	2b00      	cmp	r3, #0
 801845e:	d10d      	bne.n	801847c <MX_MDMA_Init+0xb8>
    return;
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 7, 0);
 8018460:	2200      	movs	r2, #0
 8018462:	2107      	movs	r1, #7
 8018464:	207a      	movs	r0, #122	@ 0x7a
 8018466:	f001 f86d 	bl	8019544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 801846a:	207a      	movs	r0, #122	@ 0x7a
 801846c:	f001 f884 	bl	8019578 <HAL_NVIC_EnableIRQ>
  peripherals[1].errorCode = Sys_OK;
 8018470:	4b07      	ldr	r3, [pc, #28]	@ (8018490 <MX_MDMA_Init+0xcc>)
 8018472:	2200      	movs	r2, #0
 8018474:	779a      	strb	r2, [r3, #30]
 8018476:	e002      	b.n	801847e <MX_MDMA_Init+0xba>
    return;
 8018478:	bf00      	nop
 801847a:	e000      	b.n	801847e <MX_MDMA_Init+0xba>
    return;
 801847c:	bf00      	nop
}
 801847e:	3708      	adds	r7, #8
 8018480:	46bd      	mov	sp, r7
 8018482:	bd80      	pop	{r7, pc}
 8018484:	58024400 	.word	0x58024400
 8018488:	2405a7f4 	.word	0x2405a7f4
 801848c:	52000040 	.word	0x52000040
 8018490:	240148e0 	.word	0x240148e0

08018494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b086      	sub	sp, #24
 8018498:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 801849a:	463b      	mov	r3, r7
 801849c:	2200      	movs	r2, #0
 801849e:	601a      	str	r2, [r3, #0]
 80184a0:	605a      	str	r2, [r3, #4]
 80184a2:	609a      	str	r2, [r3, #8]
 80184a4:	60da      	str	r2, [r3, #12]
 80184a6:	611a      	str	r2, [r3, #16]
 80184a8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 80184aa:	2010      	movs	r0, #16
 80184ac:	f7fe f8f2 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 80184b0:	2004      	movs	r0, #4
 80184b2:	f7fe f8ef 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 80184b6:	2020      	movs	r0, #32
 80184b8:	f7fe f8ec 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 80184bc:	2001      	movs	r0, #1
 80184be:	f7fe f8e9 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 80184c2:	2002      	movs	r0, #2
 80184c4:	f7fe f8e6 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 80184c8:	2008      	movs	r0, #8
 80184ca:	f7fe f8e3 	bl	8016694 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 80184ce:	2040      	movs	r0, #64	@ 0x40
 80184d0:	f7fe f8e0 	bl	8016694 <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, SPI4_FLASH_CS_Pin|SPI4_FRAM_CS_Pin|MCU_SDMMC_SEL_Pin);
 80184d4:	f248 0118 	movw	r1, #32792	@ 0x8018
 80184d8:	4857      	ldr	r0, [pc, #348]	@ (8018638 <MX_GPIO_Init+0x1a4>)
 80184da:	f7fe f8be 	bl	801665a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPI6_EXP_CS_GPIO_Port, SPI6_EXP_CS_Pin);
 80184de:	2110      	movs	r1, #16
 80184e0:	4856      	ldr	r0, [pc, #344]	@ (801863c <MX_GPIO_Init+0x1a8>)
 80184e2:	f7fe f8ba 	bl	801665a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOF, I2C4SCL_BUSY_STATE_Pin|I2C4SDA_READYSEND_STATE_Pin);
 80184e6:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80184ea:	4855      	ldr	r0, [pc, #340]	@ (8018640 <MX_GPIO_Init+0x1ac>)
 80184ec:	f7fe f8b5 	bl	801665a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MCU_IO_RESET_CM4_GPIO_Port, MCU_IO_RESET_CM4_Pin);
 80184f0:	2180      	movs	r1, #128	@ 0x80
 80184f2:	4854      	ldr	r0, [pc, #336]	@ (8018644 <MX_GPIO_Init+0x1b0>)
 80184f4:	f7fe f8b1 	bl	801665a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MCU_IO_HUB_RESET_GPIO_Port, MCU_IO_HUB_RESET_Pin);
 80184f8:	2108      	movs	r1, #8
 80184fa:	4853      	ldr	r0, [pc, #332]	@ (8018648 <MX_GPIO_Init+0x1b4>)
 80184fc:	f7fe f8ad 	bl	801665a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Bootloader_DETECT_DOWN_GPIO_Port, Bootloader_DETECT_DOWN_Pin);
 8018500:	2104      	movs	r1, #4
 8018502:	4852      	ldr	r0, [pc, #328]	@ (801864c <MX_GPIO_Init+0x1b8>)
 8018504:	f7fe f8b7 	bl	8016676 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, MCU_IO_IRQ_CM4_D1_Pin|MCU_IO_IRQ_CM4_D0_Pin);
 8018508:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 801850c:	484a      	ldr	r0, [pc, #296]	@ (8018638 <MX_GPIO_Init+0x1a4>)
 801850e:	f7fe f8b2 	bl	8016676 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, MCU_IO_DEBUG_LED0_Pin|MCU_IO_DEBUG_LED1_Pin|MCU_DETECT_SD_Pin|MCU_WD_DONE_Pin);
 8018512:	f44f 7164 	mov.w	r1, #912	@ 0x390
 8018516:	484c      	ldr	r0, [pc, #304]	@ (8018648 <MX_GPIO_Init+0x1b4>)
 8018518:	f7fe f8ad 	bl	8016676 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOG, Bootloader_DETECT_UPG6_Pin|MCU_IO_GLOBAL_EN_CM4_Pin);
 801851c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8018520:	4848      	ldr	r0, [pc, #288]	@ (8018644 <MX_GPIO_Init+0x1b0>)
 8018522:	f7fe f8a8 	bl	8016676 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SPI4_FLASH_CS_Pin|SPI4_FRAM_CS_Pin|MCU_IO_IRQ_CM4_D1_Pin|MCU_IO_IRQ_CM4_D0_Pin
 8018526:	f648 4318 	movw	r3, #35864	@ 0x8c18
 801852a:	603b      	str	r3, [r7, #0]
                          |MCU_SDMMC_SEL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 801852c:	2301      	movs	r3, #1
 801852e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8018530:	2300      	movs	r3, #0
 8018532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8018534:	2300      	movs	r3, #0
 8018536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8018538:	2300      	movs	r3, #0
 801853a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801853c:	463b      	mov	r3, r7
 801853e:	4619      	mov	r1, r3
 8018540:	483d      	ldr	r0, [pc, #244]	@ (8018638 <MX_GPIO_Init+0x1a4>)
 8018542:	f007 faef 	bl	801fb24 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_WD_WAKE_Pin|MCU_IO_RTC_CLKOUT_Pin|MCU_IO_RTC_INT_Pin;
 8018546:	f242 0330 	movw	r3, #8240	@ 0x2030
 801854a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 801854c:	2300      	movs	r3, #0
 801854e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8018550:	2300      	movs	r3, #0
 8018552:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8018554:	463b      	mov	r3, r7
 8018556:	4619      	mov	r1, r3
 8018558:	483d      	ldr	r0, [pc, #244]	@ (8018650 <MX_GPIO_Init+0x1bc>)
 801855a:	f007 fae3 	bl	801fb24 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI6_EXP_CS_Pin;
 801855e:	2310      	movs	r3, #16
 8018560:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8018562:	2301      	movs	r3, #1
 8018564:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8018566:	2300      	movs	r3, #0
 8018568:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 801856a:	2300      	movs	r3, #0
 801856c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801856e:	2300      	movs	r3, #0
 8018570:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI6_EXP_CS_GPIO_Port, &GPIO_InitStruct);
 8018572:	463b      	mov	r3, r7
 8018574:	4619      	mov	r1, r3
 8018576:	4831      	ldr	r0, [pc, #196]	@ (801863c <MX_GPIO_Init+0x1a8>)
 8018578:	f007 fad4 	bl	801fb24 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Bootloader_DETECT_DOWN_Pin;
 801857c:	2304      	movs	r3, #4
 801857e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8018580:	2301      	movs	r3, #1
 8018582:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8018584:	2300      	movs	r3, #0
 8018586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8018588:	2300      	movs	r3, #0
 801858a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801858c:	2300      	movs	r3, #0
 801858e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Bootloader_DETECT_DOWN_GPIO_Port, &GPIO_InitStruct);
 8018590:	463b      	mov	r3, r7
 8018592:	4619      	mov	r1, r3
 8018594:	482d      	ldr	r0, [pc, #180]	@ (801864c <MX_GPIO_Init+0x1b8>)
 8018596:	f007 fac5 	bl	801fb24 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = I2C4SCL_BUSY_STATE_Pin|I2C4SDA_READYSEND_STATE_Pin;
 801859a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 801859e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80185a0:	2301      	movs	r3, #1
 80185a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80185a4:	2300      	movs	r3, #0
 80185a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80185a8:	2300      	movs	r3, #0
 80185aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80185ac:	2300      	movs	r3, #0
 80185ae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80185b0:	463b      	mov	r3, r7
 80185b2:	4619      	mov	r1, r3
 80185b4:	4822      	ldr	r0, [pc, #136]	@ (8018640 <MX_GPIO_Init+0x1ac>)
 80185b6:	f007 fab5 	bl	801fb24 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_IO_IRQ_EXP_D1_Pin|MCU_IO_IRQ_EXP_D0_Pin;
 80185ba:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80185be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80185c0:	2300      	movs	r3, #0
 80185c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80185c4:	2300      	movs	r3, #0
 80185c6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80185c8:	463b      	mov	r3, r7
 80185ca:	4619      	mov	r1, r3
 80185cc:	481a      	ldr	r0, [pc, #104]	@ (8018638 <MX_GPIO_Init+0x1a4>)
 80185ce:	f007 faa9 	bl	801fb24 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_IO_DEBUG_LED0_Pin|MCU_IO_DEBUG_LED1_Pin|MCU_IO_HUB_RESET_Pin|MCU_DETECT_SD_Pin
 80185d2:	f44f 7366 	mov.w	r3, #920	@ 0x398
 80185d6:	603b      	str	r3, [r7, #0]
                          |MCU_WD_DONE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80185d8:	2301      	movs	r3, #1
 80185da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80185dc:	2300      	movs	r3, #0
 80185de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80185e0:	2300      	movs	r3, #0
 80185e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80185e4:	2300      	movs	r3, #0
 80185e6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80185e8:	463b      	mov	r3, r7
 80185ea:	4619      	mov	r1, r3
 80185ec:	4816      	ldr	r0, [pc, #88]	@ (8018648 <MX_GPIO_Init+0x1b4>)
 80185ee:	f007 fa99 	bl	801fb24 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Bootloader_DETECT_DOWND11_Pin|Bootloader_DETECT_UP_Pin;
 80185f2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80185f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80185f8:	2300      	movs	r3, #0
 80185fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80185fc:	2300      	movs	r3, #0
 80185fe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8018600:	463b      	mov	r3, r7
 8018602:	4619      	mov	r1, r3
 8018604:	4810      	ldr	r0, [pc, #64]	@ (8018648 <MX_GPIO_Init+0x1b4>)
 8018606:	f007 fa8d 	bl	801fb24 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Bootloader_DETECT_UPG6_Pin|MCU_IO_RESET_CM4_Pin|MCU_IO_GLOBAL_EN_CM4_Pin;
 801860a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 801860e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8018610:	2301      	movs	r3, #1
 8018612:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8018614:	2300      	movs	r3, #0
 8018616:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8018618:	2300      	movs	r3, #0
 801861a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801861c:	2300      	movs	r3, #0
 801861e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8018620:	463b      	mov	r3, r7
 8018622:	4619      	mov	r1, r3
 8018624:	4807      	ldr	r0, [pc, #28]	@ (8018644 <MX_GPIO_Init+0x1b0>)
 8018626:	f007 fa7d 	bl	801fb24 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  peripherals[0].errorCode = Sys_OK;
 801862a:	4b0a      	ldr	r3, [pc, #40]	@ (8018654 <MX_GPIO_Init+0x1c0>)
 801862c:	2200      	movs	r2, #0
 801862e:	729a      	strb	r2, [r3, #10]
  /* USER CODE END MX_GPIO_Init_2 */
}
 8018630:	bf00      	nop
 8018632:	3718      	adds	r7, #24
 8018634:	46bd      	mov	sp, r7
 8018636:	bd80      	pop	{r7, pc}
 8018638:	58021000 	.word	0x58021000
 801863c:	58020000 	.word	0x58020000
 8018640:	58021400 	.word	0x58021400
 8018644:	58021800 	.word	0x58021800
 8018648:	58020c00 	.word	0x58020c00
 801864c:	58020400 	.word	0x58020400
 8018650:	58020800 	.word	0x58020800
 8018654:	240148e0 	.word	0x240148e0

08018658 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b084      	sub	sp, #16
 801865c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 801865e:	463b      	mov	r3, r7
 8018660:	2200      	movs	r2, #0
 8018662:	601a      	str	r2, [r3, #0]
 8018664:	605a      	str	r2, [r3, #4]
 8018666:	609a      	str	r2, [r3, #8]
 8018668:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 801866a:	f000 ffa1 	bl	80195b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801866e:	2301      	movs	r3, #1
 8018670:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8018672:	2300      	movs	r3, #0
 8018674:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8018676:	2300      	movs	r3, #0
 8018678:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 801867a:	231f      	movs	r3, #31
 801867c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 801867e:	2387      	movs	r3, #135	@ 0x87
 8018680:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8018682:	2300      	movs	r3, #0
 8018684:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8018686:	2300      	movs	r3, #0
 8018688:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 801868a:	2301      	movs	r3, #1
 801868c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 801868e:	2301      	movs	r3, #1
 8018690:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8018692:	2300      	movs	r3, #0
 8018694:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8018696:	2300      	movs	r3, #0
 8018698:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801869a:	463b      	mov	r3, r7
 801869c:	4618      	mov	r0, r3
 801869e:	f000 ffbf 	bl	8019620 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80186a2:	2004      	movs	r0, #4
 80186a4:	f000 ff9c 	bl	80195e0 <HAL_MPU_Enable>

}
 80186a8:	bf00      	nop
 80186aa:	3710      	adds	r7, #16
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd80      	pop	{r7, pc}

080186b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b082      	sub	sp, #8
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	4a04      	ldr	r2, [pc, #16]	@ (80186d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80186be:	4293      	cmp	r3, r2
 80186c0:	d101      	bne.n	80186c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80186c2:	f000 fe13 	bl	80192ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80186c6:	bf00      	nop
 80186c8:	3708      	adds	r7, #8
 80186ca:	46bd      	mov	sp, r7
 80186cc:	bd80      	pop	{r7, pc}
 80186ce:	bf00      	nop
 80186d0:	40001400 	.word	0x40001400

080186d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80186d4:	b580      	push	{r7, lr}
 80186d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
	LL_GPIO_SetOutputPin(LED0_Port, LED0);
 80186d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80186dc:	4807      	ldr	r0, [pc, #28]	@ (80186fc <Error_Handler+0x28>)
 80186de:	f7fd ffbc 	bl	801665a <LL_GPIO_SetOutputPin>
    HAL_Delay(50);
 80186e2:	2032      	movs	r0, #50	@ 0x32
 80186e4:	f000 fe22 	bl	801932c <HAL_Delay>
    LL_GPIO_ResetOutputPin(LED0_Port, LED0);
 80186e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80186ec:	4803      	ldr	r0, [pc, #12]	@ (80186fc <Error_Handler+0x28>)
 80186ee:	f7fd ffc2 	bl	8016676 <LL_GPIO_ResetOutputPin>
    HAL_Delay(50);
 80186f2:	2032      	movs	r0, #50	@ 0x32
 80186f4:	f000 fe1a 	bl	801932c <HAL_Delay>
	LL_GPIO_SetOutputPin(LED0_Port, LED0);
 80186f8:	bf00      	nop
 80186fa:	e7ed      	b.n	80186d8 <Error_Handler+0x4>
 80186fc:	58020c00 	.word	0x58020c00

08018700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8018700:	b480      	push	{r7}
 8018702:	b083      	sub	sp, #12
 8018704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018706:	4b0a      	ldr	r3, [pc, #40]	@ (8018730 <HAL_MspInit+0x30>)
 8018708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801870c:	4a08      	ldr	r2, [pc, #32]	@ (8018730 <HAL_MspInit+0x30>)
 801870e:	f043 0302 	orr.w	r3, r3, #2
 8018712:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8018716:	4b06      	ldr	r3, [pc, #24]	@ (8018730 <HAL_MspInit+0x30>)
 8018718:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801871c:	f003 0302 	and.w	r3, r3, #2
 8018720:	607b      	str	r3, [r7, #4]
 8018722:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8018724:	bf00      	nop
 8018726:	370c      	adds	r7, #12
 8018728:	46bd      	mov	sp, r7
 801872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801872e:	4770      	bx	lr
 8018730:	58024400 	.word	0x58024400

08018734 <HAL_MMC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b0bc      	sub	sp, #240	@ 0xf0
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801873c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8018740:	2200      	movs	r2, #0
 8018742:	601a      	str	r2, [r3, #0]
 8018744:	605a      	str	r2, [r3, #4]
 8018746:	609a      	str	r2, [r3, #8]
 8018748:	60da      	str	r2, [r3, #12]
 801874a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801874c:	f107 0318 	add.w	r3, r7, #24
 8018750:	22c0      	movs	r2, #192	@ 0xc0
 8018752:	2100      	movs	r1, #0
 8018754:	4618      	mov	r0, r3
 8018756:	f009 fc22 	bl	8021f9e <memset>
  if(hmmc->Instance==SDMMC1)
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	4a4f      	ldr	r2, [pc, #316]	@ (801889c <HAL_MMC_MspInit+0x168>)
 8018760:	4293      	cmp	r3, r2
 8018762:	f040 8097 	bne.w	8018894 <HAL_MMC_MspInit+0x160>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8018766:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801876a:	f04f 0300 	mov.w	r3, #0
 801876e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8018772:	2300      	movs	r3, #0
 8018774:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018776:	f107 0318 	add.w	r3, r7, #24
 801877a:	4618      	mov	r0, r3
 801877c:	f004 f932 	bl	801c9e4 <HAL_RCCEx_PeriphCLKConfig>
 8018780:	4603      	mov	r3, r0
 8018782:	2b00      	cmp	r3, #0
 8018784:	d001      	beq.n	801878a <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 8018786:	f7ff ffa5 	bl	80186d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801878a:	4b45      	ldr	r3, [pc, #276]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 801878c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8018790:	4a43      	ldr	r2, [pc, #268]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 8018792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8018796:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 801879a:	4b41      	ldr	r3, [pc, #260]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 801879c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80187a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80187a4:	617b      	str	r3, [r7, #20]
 80187a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80187a8:	4b3d      	ldr	r3, [pc, #244]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 80187aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80187ae:	4a3c      	ldr	r2, [pc, #240]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 80187b0:	f043 0304 	orr.w	r3, r3, #4
 80187b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80187b8:	4b39      	ldr	r3, [pc, #228]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 80187ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80187be:	f003 0304 	and.w	r3, r3, #4
 80187c2:	613b      	str	r3, [r7, #16]
 80187c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80187c6:	4b36      	ldr	r3, [pc, #216]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 80187c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80187cc:	4a34      	ldr	r2, [pc, #208]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 80187ce:	f043 0308 	orr.w	r3, r3, #8
 80187d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80187d6:	4b32      	ldr	r3, [pc, #200]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 80187d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80187dc:	f003 0308 	and.w	r3, r3, #8
 80187e0:	60fb      	str	r3, [r7, #12]
 80187e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80187e4:	4b2e      	ldr	r3, [pc, #184]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 80187e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80187ea:	4a2d      	ldr	r2, [pc, #180]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 80187ec:	f043 0302 	orr.w	r3, r3, #2
 80187f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80187f4:	4b2a      	ldr	r3, [pc, #168]	@ (80188a0 <HAL_MMC_MspInit+0x16c>)
 80187f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80187fa:	f003 0302 	and.w	r3, r3, #2
 80187fe:	60bb      	str	r3, [r7, #8]
 8018800:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_D4
    PB9     ------> SDMMC1_D5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8018802:	f44f 53fe 	mov.w	r3, #8128	@ 0x1fc0
 8018806:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801880a:	2302      	movs	r3, #2
 801880c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018810:	2300      	movs	r3, #0
 8018812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018816:	2303      	movs	r3, #3
 8018818:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 801881c:	230c      	movs	r3, #12
 801881e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8018822:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8018826:	4619      	mov	r1, r3
 8018828:	481e      	ldr	r0, [pc, #120]	@ (80188a4 <HAL_MMC_MspInit+0x170>)
 801882a:	f000 ff39 	bl	80196a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801882e:	2304      	movs	r3, #4
 8018830:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018834:	2302      	movs	r3, #2
 8018836:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801883a:	2300      	movs	r3, #0
 801883c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018840:	2303      	movs	r3, #3
 8018842:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8018846:	230c      	movs	r3, #12
 8018848:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801884c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8018850:	4619      	mov	r1, r3
 8018852:	4815      	ldr	r0, [pc, #84]	@ (80188a8 <HAL_MMC_MspInit+0x174>)
 8018854:	f000 ff24 	bl	80196a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8018858:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801885c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018860:	2302      	movs	r3, #2
 8018862:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018866:	2300      	movs	r3, #0
 8018868:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801886c:	2303      	movs	r3, #3
 801886e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8018872:	230c      	movs	r3, #12
 8018874:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018878:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 801887c:	4619      	mov	r1, r3
 801887e:	480b      	ldr	r0, [pc, #44]	@ (80188ac <HAL_MMC_MspInit+0x178>)
 8018880:	f000 ff0e 	bl	80196a0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 7, 0);
 8018884:	2200      	movs	r2, #0
 8018886:	2107      	movs	r1, #7
 8018888:	2031      	movs	r0, #49	@ 0x31
 801888a:	f000 fe5b 	bl	8019544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 801888e:	2031      	movs	r0, #49	@ 0x31
 8018890:	f000 fe72 	bl	8019578 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8018894:	bf00      	nop
 8018896:	37f0      	adds	r7, #240	@ 0xf0
 8018898:	46bd      	mov	sp, r7
 801889a:	bd80      	pop	{r7, pc}
 801889c:	52007000 	.word	0x52007000
 80188a0:	58024400 	.word	0x58024400
 80188a4:	58020800 	.word	0x58020800
 80188a8:	58020c00 	.word	0x58020c00
 80188ac:	58020400 	.word	0x58020400

080188b0 <HAL_MMC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspDeInit(MMC_HandleTypeDef* hmmc)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b082      	sub	sp, #8
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
  if(hmmc->Instance==SDMMC1)
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	4a0f      	ldr	r2, [pc, #60]	@ (80188fc <HAL_MMC_MspDeInit+0x4c>)
 80188be:	4293      	cmp	r3, r2
 80188c0:	d118      	bne.n	80188f4 <HAL_MMC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

    /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 80188c2:	4b0f      	ldr	r3, [pc, #60]	@ (8018900 <HAL_MMC_MspDeInit+0x50>)
 80188c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80188c8:	4a0d      	ldr	r2, [pc, #52]	@ (8018900 <HAL_MMC_MspDeInit+0x50>)
 80188ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80188ce:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_D4
    PB9     ------> SDMMC1_D5
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80188d2:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 80188d6:	480b      	ldr	r0, [pc, #44]	@ (8018904 <HAL_MMC_MspDeInit+0x54>)
 80188d8:	f001 f892 	bl	8019a00 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80188dc:	2104      	movs	r1, #4
 80188de:	480a      	ldr	r0, [pc, #40]	@ (8018908 <HAL_MMC_MspDeInit+0x58>)
 80188e0:	f001 f88e 	bl	8019a00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80188e4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80188e8:	4808      	ldr	r0, [pc, #32]	@ (801890c <HAL_MMC_MspDeInit+0x5c>)
 80188ea:	f001 f889 	bl	8019a00 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 80188ee:	2031      	movs	r0, #49	@ 0x31
 80188f0:	f000 fe50 	bl	8019594 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

    /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 80188f4:	bf00      	nop
 80188f6:	3708      	adds	r7, #8
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bd80      	pop	{r7, pc}
 80188fc:	52007000 	.word	0x52007000
 8018900:	58024400 	.word	0x58024400
 8018904:	58020800 	.word	0x58020800
 8018908:	58020c00 	.word	0x58020c00
 801890c:	58020400 	.word	0x58020400

08018910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b090      	sub	sp, #64	@ 0x40
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	2b0f      	cmp	r3, #15
 801891c:	d827      	bhi.n	801896e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 801891e:	2200      	movs	r2, #0
 8018920:	6879      	ldr	r1, [r7, #4]
 8018922:	2037      	movs	r0, #55	@ 0x37
 8018924:	f000 fe0e 	bl	8019544 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8018928:	2037      	movs	r0, #55	@ 0x37
 801892a:	f000 fe25 	bl	8019578 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 801892e:	4a29      	ldr	r2, [pc, #164]	@ (80189d4 <HAL_InitTick+0xc4>)
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8018934:	4b28      	ldr	r3, [pc, #160]	@ (80189d8 <HAL_InitTick+0xc8>)
 8018936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801893a:	4a27      	ldr	r2, [pc, #156]	@ (80189d8 <HAL_InitTick+0xc8>)
 801893c:	f043 0320 	orr.w	r3, r3, #32
 8018940:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8018944:	4b24      	ldr	r3, [pc, #144]	@ (80189d8 <HAL_InitTick+0xc8>)
 8018946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801894a:	f003 0320 	and.w	r3, r3, #32
 801894e:	60fb      	str	r3, [r7, #12]
 8018950:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8018952:	f107 0210 	add.w	r2, r7, #16
 8018956:	f107 0314 	add.w	r3, r7, #20
 801895a:	4611      	mov	r1, r2
 801895c:	4618      	mov	r0, r3
 801895e:	f003 ffff 	bl	801c960 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8018962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018964:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8018966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018968:	2b00      	cmp	r3, #0
 801896a:	d106      	bne.n	801897a <HAL_InitTick+0x6a>
 801896c:	e001      	b.n	8018972 <HAL_InitTick+0x62>
    return HAL_ERROR;
 801896e:	2301      	movs	r3, #1
 8018970:	e02b      	b.n	80189ca <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8018972:	f003 ffdf 	bl	801c934 <HAL_RCC_GetPCLK1Freq>
 8018976:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8018978:	e004      	b.n	8018984 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 801897a:	f003 ffdb 	bl	801c934 <HAL_RCC_GetPCLK1Freq>
 801897e:	4603      	mov	r3, r0
 8018980:	005b      	lsls	r3, r3, #1
 8018982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8018984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018986:	4a15      	ldr	r2, [pc, #84]	@ (80189dc <HAL_InitTick+0xcc>)
 8018988:	fba2 2303 	umull	r2, r3, r2, r3
 801898c:	0c9b      	lsrs	r3, r3, #18
 801898e:	3b01      	subs	r3, #1
 8018990:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8018992:	4b13      	ldr	r3, [pc, #76]	@ (80189e0 <HAL_InitTick+0xd0>)
 8018994:	4a13      	ldr	r2, [pc, #76]	@ (80189e4 <HAL_InitTick+0xd4>)
 8018996:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8018998:	4b11      	ldr	r3, [pc, #68]	@ (80189e0 <HAL_InitTick+0xd0>)
 801899a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801899e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80189a0:	4a0f      	ldr	r2, [pc, #60]	@ (80189e0 <HAL_InitTick+0xd0>)
 80189a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80189a4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80189a6:	4b0e      	ldr	r3, [pc, #56]	@ (80189e0 <HAL_InitTick+0xd0>)
 80189a8:	2200      	movs	r2, #0
 80189aa:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80189ac:	4b0c      	ldr	r3, [pc, #48]	@ (80189e0 <HAL_InitTick+0xd0>)
 80189ae:	2200      	movs	r2, #0
 80189b0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80189b2:	480b      	ldr	r0, [pc, #44]	@ (80189e0 <HAL_InitTick+0xd0>)
 80189b4:	f006 fd14 	bl	801f3e0 <HAL_TIM_Base_Init>
 80189b8:	4603      	mov	r3, r0
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d104      	bne.n	80189c8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80189be:	4808      	ldr	r0, [pc, #32]	@ (80189e0 <HAL_InitTick+0xd0>)
 80189c0:	f006 fd70 	bl	801f4a4 <HAL_TIM_Base_Start_IT>
 80189c4:	4603      	mov	r3, r0
 80189c6:	e000      	b.n	80189ca <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80189c8:	2301      	movs	r3, #1
}
 80189ca:	4618      	mov	r0, r3
 80189cc:	3740      	adds	r7, #64	@ 0x40
 80189ce:	46bd      	mov	sp, r7
 80189d0:	bd80      	pop	{r7, pc}
 80189d2:	bf00      	nop
 80189d4:	240149e4 	.word	0x240149e4
 80189d8:	58024400 	.word	0x58024400
 80189dc:	431bde83 	.word	0x431bde83
 80189e0:	2405a860 	.word	0x2405a860
 80189e4:	40001400 	.word	0x40001400

080189e8 <LL_USART_IsActiveFlag_IDLE>:
{
 80189e8:	b480      	push	{r7}
 80189ea:	b083      	sub	sp, #12
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	69db      	ldr	r3, [r3, #28]
 80189f4:	f003 0310 	and.w	r3, r3, #16
 80189f8:	2b10      	cmp	r3, #16
 80189fa:	d101      	bne.n	8018a00 <LL_USART_IsActiveFlag_IDLE+0x18>
 80189fc:	2301      	movs	r3, #1
 80189fe:	e000      	b.n	8018a02 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8018a00:	2300      	movs	r3, #0
}
 8018a02:	4618      	mov	r0, r3
 8018a04:	370c      	adds	r7, #12
 8018a06:	46bd      	mov	sp, r7
 8018a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0c:	4770      	bx	lr

08018a0e <LL_USART_ClearFlag_IDLE>:
{
 8018a0e:	b480      	push	{r7}
 8018a10:	b083      	sub	sp, #12
 8018a12:	af00      	add	r7, sp, #0
 8018a14:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	2210      	movs	r2, #16
 8018a1a:	621a      	str	r2, [r3, #32]
}
 8018a1c:	bf00      	nop
 8018a1e:	370c      	adds	r7, #12
 8018a20:	46bd      	mov	sp, r7
 8018a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a26:	4770      	bx	lr

08018a28 <LL_USART_IsEnabledIT_IDLE>:
{
 8018a28:	b480      	push	{r7}
 8018a2a:	b083      	sub	sp, #12
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	f003 0310 	and.w	r3, r3, #16
 8018a38:	2b10      	cmp	r3, #16
 8018a3a:	d101      	bne.n	8018a40 <LL_USART_IsEnabledIT_IDLE+0x18>
 8018a3c:	2301      	movs	r3, #1
 8018a3e:	e000      	b.n	8018a42 <LL_USART_IsEnabledIT_IDLE+0x1a>
 8018a40:	2300      	movs	r3, #0
}
 8018a42:	4618      	mov	r0, r3
 8018a44:	370c      	adds	r7, #12
 8018a46:	46bd      	mov	sp, r7
 8018a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a4c:	4770      	bx	lr
	...

08018a50 <LL_DMA_EnableStream>:
{
 8018a50:	b480      	push	{r7}
 8018a52:	b085      	sub	sp, #20
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	6078      	str	r0, [r7, #4]
 8018a58:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8018a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8018a90 <LL_DMA_EnableStream+0x40>)
 8018a60:	683b      	ldr	r3, [r7, #0]
 8018a62:	4413      	add	r3, r2
 8018a64:	781b      	ldrb	r3, [r3, #0]
 8018a66:	461a      	mov	r2, r3
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	4413      	add	r3, r2
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	4908      	ldr	r1, [pc, #32]	@ (8018a90 <LL_DMA_EnableStream+0x40>)
 8018a70:	683a      	ldr	r2, [r7, #0]
 8018a72:	440a      	add	r2, r1
 8018a74:	7812      	ldrb	r2, [r2, #0]
 8018a76:	4611      	mov	r1, r2
 8018a78:	68fa      	ldr	r2, [r7, #12]
 8018a7a:	440a      	add	r2, r1
 8018a7c:	f043 0301 	orr.w	r3, r3, #1
 8018a80:	6013      	str	r3, [r2, #0]
}
 8018a82:	bf00      	nop
 8018a84:	3714      	adds	r7, #20
 8018a86:	46bd      	mov	sp, r7
 8018a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a8c:	4770      	bx	lr
 8018a8e:	bf00      	nop
 8018a90:	08026364 	.word	0x08026364

08018a94 <LL_DMA_IsActiveFlag_HT0>:
{
 8018a94:	b480      	push	{r7}
 8018a96:	b083      	sub	sp, #12
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	f003 0310 	and.w	r3, r3, #16
 8018aa4:	2b10      	cmp	r3, #16
 8018aa6:	d101      	bne.n	8018aac <LL_DMA_IsActiveFlag_HT0+0x18>
 8018aa8:	2301      	movs	r3, #1
 8018aaa:	e000      	b.n	8018aae <LL_DMA_IsActiveFlag_HT0+0x1a>
 8018aac:	2300      	movs	r3, #0
}
 8018aae:	4618      	mov	r0, r3
 8018ab0:	370c      	adds	r7, #12
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab8:	4770      	bx	lr

08018aba <LL_DMA_IsActiveFlag_HT1>:
{
 8018aba:	b480      	push	{r7}
 8018abc:	b083      	sub	sp, #12
 8018abe:	af00      	add	r7, sp, #0
 8018ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF1) == (DMA_LISR_HTIF1)) ? 1UL : 0UL);
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018ace:	d101      	bne.n	8018ad4 <LL_DMA_IsActiveFlag_HT1+0x1a>
 8018ad0:	2301      	movs	r3, #1
 8018ad2:	e000      	b.n	8018ad6 <LL_DMA_IsActiveFlag_HT1+0x1c>
 8018ad4:	2300      	movs	r3, #0
}
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	370c      	adds	r7, #12
 8018ada:	46bd      	mov	sp, r7
 8018adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae0:	4770      	bx	lr

08018ae2 <LL_DMA_IsActiveFlag_TC0>:
{
 8018ae2:	b480      	push	{r7}
 8018ae4:	b083      	sub	sp, #12
 8018ae6:	af00      	add	r7, sp, #0
 8018ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	f003 0320 	and.w	r3, r3, #32
 8018af2:	2b20      	cmp	r3, #32
 8018af4:	d101      	bne.n	8018afa <LL_DMA_IsActiveFlag_TC0+0x18>
 8018af6:	2301      	movs	r3, #1
 8018af8:	e000      	b.n	8018afc <LL_DMA_IsActiveFlag_TC0+0x1a>
 8018afa:	2300      	movs	r3, #0
}
 8018afc:	4618      	mov	r0, r3
 8018afe:	370c      	adds	r7, #12
 8018b00:	46bd      	mov	sp, r7
 8018b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b06:	4770      	bx	lr

08018b08 <LL_DMA_IsActiveFlag_TC1>:
{
 8018b08:	b480      	push	{r7}
 8018b0a:	b083      	sub	sp, #12
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF1) == (DMA_LISR_TCIF1)) ? 1UL : 0UL);
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018b1c:	d101      	bne.n	8018b22 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8018b1e:	2301      	movs	r3, #1
 8018b20:	e000      	b.n	8018b24 <LL_DMA_IsActiveFlag_TC1+0x1c>
 8018b22:	2300      	movs	r3, #0
}
 8018b24:	4618      	mov	r0, r3
 8018b26:	370c      	adds	r7, #12
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b2e:	4770      	bx	lr

08018b30 <LL_DMA_IsActiveFlag_TC7>:
{
 8018b30:	b480      	push	{r7}
 8018b32:	b083      	sub	sp, #12
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->HISR, DMA_HISR_TCIF7) == (DMA_HISR_TCIF7)) ? 1UL : 0UL);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	685b      	ldr	r3, [r3, #4]
 8018b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018b40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018b44:	d101      	bne.n	8018b4a <LL_DMA_IsActiveFlag_TC7+0x1a>
 8018b46:	2301      	movs	r3, #1
 8018b48:	e000      	b.n	8018b4c <LL_DMA_IsActiveFlag_TC7+0x1c>
 8018b4a:	2300      	movs	r3, #0
}
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	370c      	adds	r7, #12
 8018b50:	46bd      	mov	sp, r7
 8018b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b56:	4770      	bx	lr

08018b58 <LL_DMA_IsActiveFlag_TE0>:
{
 8018b58:	b480      	push	{r7}
 8018b5a:	b083      	sub	sp, #12
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TEIF0) == (DMA_LISR_TEIF0)) ? 1UL : 0UL);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	f003 0308 	and.w	r3, r3, #8
 8018b68:	2b08      	cmp	r3, #8
 8018b6a:	d101      	bne.n	8018b70 <LL_DMA_IsActiveFlag_TE0+0x18>
 8018b6c:	2301      	movs	r3, #1
 8018b6e:	e000      	b.n	8018b72 <LL_DMA_IsActiveFlag_TE0+0x1a>
 8018b70:	2300      	movs	r3, #0
}
 8018b72:	4618      	mov	r0, r3
 8018b74:	370c      	adds	r7, #12
 8018b76:	46bd      	mov	sp, r7
 8018b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b7c:	4770      	bx	lr

08018b7e <LL_DMA_IsActiveFlag_TE1>:
{
 8018b7e:	b480      	push	{r7}
 8018b80:	b083      	sub	sp, #12
 8018b82:	af00      	add	r7, sp, #0
 8018b84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TEIF1) == (DMA_LISR_TEIF1)) ? 1UL : 0UL);
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018b92:	d101      	bne.n	8018b98 <LL_DMA_IsActiveFlag_TE1+0x1a>
 8018b94:	2301      	movs	r3, #1
 8018b96:	e000      	b.n	8018b9a <LL_DMA_IsActiveFlag_TE1+0x1c>
 8018b98:	2300      	movs	r3, #0
}
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	370c      	adds	r7, #12
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba4:	4770      	bx	lr

08018ba6 <LL_DMA_IsActiveFlag_TE7>:
{
 8018ba6:	b480      	push	{r7}
 8018ba8:	b083      	sub	sp, #12
 8018baa:	af00      	add	r7, sp, #0
 8018bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->HISR, DMA_HISR_TEIF7) == (DMA_HISR_TEIF7)) ? 1UL : 0UL);
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	685b      	ldr	r3, [r3, #4]
 8018bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018bb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8018bba:	d101      	bne.n	8018bc0 <LL_DMA_IsActiveFlag_TE7+0x1a>
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	e000      	b.n	8018bc2 <LL_DMA_IsActiveFlag_TE7+0x1c>
 8018bc0:	2300      	movs	r3, #0
}
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	370c      	adds	r7, #12
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bcc:	4770      	bx	lr

08018bce <LL_DMA_ClearFlag_HT0>:
{
 8018bce:	b480      	push	{r7}
 8018bd0:	b083      	sub	sp, #12
 8018bd2:	af00      	add	r7, sp, #0
 8018bd4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	2210      	movs	r2, #16
 8018bda:	609a      	str	r2, [r3, #8]
}
 8018bdc:	bf00      	nop
 8018bde:	370c      	adds	r7, #12
 8018be0:	46bd      	mov	sp, r7
 8018be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be6:	4770      	bx	lr

08018be8 <LL_DMA_ClearFlag_HT1>:
{
 8018be8:	b480      	push	{r7}
 8018bea:	b083      	sub	sp, #12
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF1);
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018bf6:	609a      	str	r2, [r3, #8]
}
 8018bf8:	bf00      	nop
 8018bfa:	370c      	adds	r7, #12
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c02:	4770      	bx	lr

08018c04 <LL_DMA_ClearFlag_TC0>:
{
 8018c04:	b480      	push	{r7}
 8018c06:	b083      	sub	sp, #12
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	2220      	movs	r2, #32
 8018c10:	609a      	str	r2, [r3, #8]
}
 8018c12:	bf00      	nop
 8018c14:	370c      	adds	r7, #12
 8018c16:	46bd      	mov	sp, r7
 8018c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1c:	4770      	bx	lr

08018c1e <LL_DMA_ClearFlag_TC1>:
{
 8018c1e:	b480      	push	{r7}
 8018c20:	b083      	sub	sp, #12
 8018c22:	af00      	add	r7, sp, #0
 8018c24:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF1);
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018c2c:	609a      	str	r2, [r3, #8]
}
 8018c2e:	bf00      	nop
 8018c30:	370c      	adds	r7, #12
 8018c32:	46bd      	mov	sp, r7
 8018c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c38:	4770      	bx	lr

08018c3a <LL_DMA_ClearFlag_TC7>:
{
 8018c3a:	b480      	push	{r7}
 8018c3c:	b083      	sub	sp, #12
 8018c3e:	af00      	add	r7, sp, #0
 8018c40:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTCIF7);
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8018c48:	60da      	str	r2, [r3, #12]
}
 8018c4a:	bf00      	nop
 8018c4c:	370c      	adds	r7, #12
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c54:	4770      	bx	lr

08018c56 <LL_DMA_ClearFlag_TE0>:
{
 8018c56:	b480      	push	{r7}
 8018c58:	b083      	sub	sp, #12
 8018c5a:	af00      	add	r7, sp, #0
 8018c5c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTEIF0);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	2208      	movs	r2, #8
 8018c62:	609a      	str	r2, [r3, #8]
}
 8018c64:	bf00      	nop
 8018c66:	370c      	adds	r7, #12
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6e:	4770      	bx	lr

08018c70 <LL_DMA_ClearFlag_TE1>:
{
 8018c70:	b480      	push	{r7}
 8018c72:	b083      	sub	sp, #12
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTEIF1);
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018c7e:	609a      	str	r2, [r3, #8]
}
 8018c80:	bf00      	nop
 8018c82:	370c      	adds	r7, #12
 8018c84:	46bd      	mov	sp, r7
 8018c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8a:	4770      	bx	lr

08018c8c <LL_DMA_ClearFlag_TE7>:
{
 8018c8c:	b480      	push	{r7}
 8018c8e:	b083      	sub	sp, #12
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR, DMA_HIFCR_CTEIF7);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8018c9a:	60da      	str	r2, [r3, #12]
}
 8018c9c:	bf00      	nop
 8018c9e:	370c      	adds	r7, #12
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca6:	4770      	bx	lr

08018ca8 <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8018ca8:	b480      	push	{r7}
 8018caa:	b085      	sub	sp, #20
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
 8018cb0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE) == DMA_SxCR_HTIE) ? 1UL : 0UL);
 8018cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8018ce0 <LL_DMA_IsEnabledIT_HT+0x38>)
 8018cb8:	683b      	ldr	r3, [r7, #0]
 8018cba:	4413      	add	r3, r2
 8018cbc:	781b      	ldrb	r3, [r3, #0]
 8018cbe:	461a      	mov	r2, r3
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	4413      	add	r3, r2
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	f003 0308 	and.w	r3, r3, #8
 8018cca:	2b08      	cmp	r3, #8
 8018ccc:	d101      	bne.n	8018cd2 <LL_DMA_IsEnabledIT_HT+0x2a>
 8018cce:	2301      	movs	r3, #1
 8018cd0:	e000      	b.n	8018cd4 <LL_DMA_IsEnabledIT_HT+0x2c>
 8018cd2:	2300      	movs	r3, #0
}
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	3714      	adds	r7, #20
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cde:	4770      	bx	lr
 8018ce0:	08026364 	.word	0x08026364

08018ce4 <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8018ce4:	b480      	push	{r7}
 8018ce6:	b085      	sub	sp, #20
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
 8018cec:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE) == DMA_SxCR_TEIE) ? 1UL : 0UL);
 8018cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8018d1c <LL_DMA_IsEnabledIT_TE+0x38>)
 8018cf4:	683b      	ldr	r3, [r7, #0]
 8018cf6:	4413      	add	r3, r2
 8018cf8:	781b      	ldrb	r3, [r3, #0]
 8018cfa:	461a      	mov	r2, r3
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	4413      	add	r3, r2
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	f003 0304 	and.w	r3, r3, #4
 8018d06:	2b04      	cmp	r3, #4
 8018d08:	d101      	bne.n	8018d0e <LL_DMA_IsEnabledIT_TE+0x2a>
 8018d0a:	2301      	movs	r3, #1
 8018d0c:	e000      	b.n	8018d10 <LL_DMA_IsEnabledIT_TE+0x2c>
 8018d0e:	2300      	movs	r3, #0
}
 8018d10:	4618      	mov	r0, r3
 8018d12:	3714      	adds	r7, #20
 8018d14:	46bd      	mov	sp, r7
 8018d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1a:	4770      	bx	lr
 8018d1c:	08026364 	.word	0x08026364

08018d20 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8018d20:	b480      	push	{r7}
 8018d22:	b085      	sub	sp, #20
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE) ? 1UL : 0UL);
 8018d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8018d58 <LL_DMA_IsEnabledIT_TC+0x38>)
 8018d30:	683b      	ldr	r3, [r7, #0]
 8018d32:	4413      	add	r3, r2
 8018d34:	781b      	ldrb	r3, [r3, #0]
 8018d36:	461a      	mov	r2, r3
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	4413      	add	r3, r2
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	f003 0310 	and.w	r3, r3, #16
 8018d42:	2b10      	cmp	r3, #16
 8018d44:	d101      	bne.n	8018d4a <LL_DMA_IsEnabledIT_TC+0x2a>
 8018d46:	2301      	movs	r3, #1
 8018d48:	e000      	b.n	8018d4c <LL_DMA_IsEnabledIT_TC+0x2c>
 8018d4a:	2300      	movs	r3, #0
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	3714      	adds	r7, #20
 8018d50:	46bd      	mov	sp, r7
 8018d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d56:	4770      	bx	lr
 8018d58:	08026364 	.word	0x08026364

08018d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018d5c:	b480      	push	{r7}
 8018d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8018d60:	bf00      	nop
 8018d62:	e7fd      	b.n	8018d60 <NMI_Handler+0x4>

08018d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8018d64:	b480      	push	{r7}
 8018d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8018d68:	bf00      	nop
 8018d6a:	e7fd      	b.n	8018d68 <HardFault_Handler+0x4>

08018d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018d6c:	b480      	push	{r7}
 8018d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018d70:	bf00      	nop
 8018d72:	e7fd      	b.n	8018d70 <MemManage_Handler+0x4>

08018d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8018d74:	b480      	push	{r7}
 8018d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8018d78:	bf00      	nop
 8018d7a:	e7fd      	b.n	8018d78 <BusFault_Handler+0x4>

08018d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8018d7c:	b480      	push	{r7}
 8018d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018d80:	bf00      	nop
 8018d82:	e7fd      	b.n	8018d80 <UsageFault_Handler+0x4>

08018d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018d84:	b480      	push	{r7}
 8018d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018d88:	bf00      	nop
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d90:	4770      	bx	lr
	...

08018d94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA1, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_HT0(DMA1))
 8018d98:	2100      	movs	r1, #0
 8018d9a:	481d      	ldr	r0, [pc, #116]	@ (8018e10 <DMA1_Stream0_IRQHandler+0x7c>)
 8018d9c:	f7ff ff84 	bl	8018ca8 <LL_DMA_IsEnabledIT_HT>
 8018da0:	4603      	mov	r3, r0
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d00b      	beq.n	8018dbe <DMA1_Stream0_IRQHandler+0x2a>
 8018da6:	481a      	ldr	r0, [pc, #104]	@ (8018e10 <DMA1_Stream0_IRQHandler+0x7c>)
 8018da8:	f7ff fe74 	bl	8018a94 <LL_DMA_IsActiveFlag_HT0>
 8018dac:	4603      	mov	r3, r0
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d005      	beq.n	8018dbe <DMA1_Stream0_IRQHandler+0x2a>
  {
     LL_DMA_ClearFlag_HT0(DMA1);
 8018db2:	4817      	ldr	r0, [pc, #92]	@ (8018e10 <DMA1_Stream0_IRQHandler+0x7c>)
 8018db4:	f7ff ff0b 	bl	8018bce <LL_DMA_ClearFlag_HT0>
     UART_DMA_Rx_Check(USART1);
 8018db8:	4816      	ldr	r0, [pc, #88]	@ (8018e14 <DMA1_Stream0_IRQHandler+0x80>)
 8018dba:	f7e9 fcff 	bl	80027bc <UART_DMA_Rx_Check>
  }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TC0(DMA1))
 8018dbe:	2100      	movs	r1, #0
 8018dc0:	4813      	ldr	r0, [pc, #76]	@ (8018e10 <DMA1_Stream0_IRQHandler+0x7c>)
 8018dc2:	f7ff ffad 	bl	8018d20 <LL_DMA_IsEnabledIT_TC>
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d00b      	beq.n	8018de4 <DMA1_Stream0_IRQHandler+0x50>
 8018dcc:	4810      	ldr	r0, [pc, #64]	@ (8018e10 <DMA1_Stream0_IRQHandler+0x7c>)
 8018dce:	f7ff fe88 	bl	8018ae2 <LL_DMA_IsActiveFlag_TC0>
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d005      	beq.n	8018de4 <DMA1_Stream0_IRQHandler+0x50>
  {
     LL_DMA_ClearFlag_TC0(DMA1);
 8018dd8:	480d      	ldr	r0, [pc, #52]	@ (8018e10 <DMA1_Stream0_IRQHandler+0x7c>)
 8018dda:	f7ff ff13 	bl	8018c04 <LL_DMA_ClearFlag_TC0>
     UART_DMA_Rx_Check(USART1);
 8018dde:	480d      	ldr	r0, [pc, #52]	@ (8018e14 <DMA1_Stream0_IRQHandler+0x80>)
 8018de0:	f7e9 fcec 	bl	80027bc <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TE0(DMA1))
 8018de4:	2100      	movs	r1, #0
 8018de6:	480a      	ldr	r0, [pc, #40]	@ (8018e10 <DMA1_Stream0_IRQHandler+0x7c>)
 8018de8:	f7ff ff7c 	bl	8018ce4 <LL_DMA_IsEnabledIT_TE>
 8018dec:	4603      	mov	r3, r0
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d00c      	beq.n	8018e0c <DMA1_Stream0_IRQHandler+0x78>
 8018df2:	4807      	ldr	r0, [pc, #28]	@ (8018e10 <DMA1_Stream0_IRQHandler+0x7c>)
 8018df4:	f7ff feb0 	bl	8018b58 <LL_DMA_IsActiveFlag_TE0>
 8018df8:	4603      	mov	r3, r0
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d006      	beq.n	8018e0c <DMA1_Stream0_IRQHandler+0x78>
  {
     LL_DMA_ClearFlag_TE0(DMA1);
 8018dfe:	4804      	ldr	r0, [pc, #16]	@ (8018e10 <DMA1_Stream0_IRQHandler+0x7c>)
 8018e00:	f7ff ff29 	bl	8018c56 <LL_DMA_ClearFlag_TE0>
     LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_0);
 8018e04:	2100      	movs	r1, #0
 8018e06:	4802      	ldr	r0, [pc, #8]	@ (8018e10 <DMA1_Stream0_IRQHandler+0x7c>)
 8018e08:	f7ff fe22 	bl	8018a50 <LL_DMA_EnableStream>
  }

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8018e0c:	bf00      	nop
 8018e0e:	bd80      	pop	{r7, pc}
 8018e10:	40020000 	.word	0x40020000
 8018e14:	40011000 	.word	0x40011000

08018e18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_HT1(DMA1))
 8018e1c:	2101      	movs	r1, #1
 8018e1e:	481d      	ldr	r0, [pc, #116]	@ (8018e94 <DMA1_Stream1_IRQHandler+0x7c>)
 8018e20:	f7ff ff42 	bl	8018ca8 <LL_DMA_IsEnabledIT_HT>
 8018e24:	4603      	mov	r3, r0
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d00b      	beq.n	8018e42 <DMA1_Stream1_IRQHandler+0x2a>
 8018e2a:	481a      	ldr	r0, [pc, #104]	@ (8018e94 <DMA1_Stream1_IRQHandler+0x7c>)
 8018e2c:	f7ff fe45 	bl	8018aba <LL_DMA_IsActiveFlag_HT1>
 8018e30:	4603      	mov	r3, r0
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d005      	beq.n	8018e42 <DMA1_Stream1_IRQHandler+0x2a>
  {
     LL_DMA_ClearFlag_HT1(DMA1);
 8018e36:	4817      	ldr	r0, [pc, #92]	@ (8018e94 <DMA1_Stream1_IRQHandler+0x7c>)
 8018e38:	f7ff fed6 	bl	8018be8 <LL_DMA_ClearFlag_HT1>
     UART_DMA_Rx_Check(USART2);
 8018e3c:	4816      	ldr	r0, [pc, #88]	@ (8018e98 <DMA1_Stream1_IRQHandler+0x80>)
 8018e3e:	f7e9 fcbd 	bl	80027bc <UART_DMA_Rx_Check>
  }
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TC1(DMA1))
 8018e42:	2101      	movs	r1, #1
 8018e44:	4813      	ldr	r0, [pc, #76]	@ (8018e94 <DMA1_Stream1_IRQHandler+0x7c>)
 8018e46:	f7ff ff6b 	bl	8018d20 <LL_DMA_IsEnabledIT_TC>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d00b      	beq.n	8018e68 <DMA1_Stream1_IRQHandler+0x50>
 8018e50:	4810      	ldr	r0, [pc, #64]	@ (8018e94 <DMA1_Stream1_IRQHandler+0x7c>)
 8018e52:	f7ff fe59 	bl	8018b08 <LL_DMA_IsActiveFlag_TC1>
 8018e56:	4603      	mov	r3, r0
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d005      	beq.n	8018e68 <DMA1_Stream1_IRQHandler+0x50>
  {
     LL_DMA_ClearFlag_TC1(DMA1);
 8018e5c:	480d      	ldr	r0, [pc, #52]	@ (8018e94 <DMA1_Stream1_IRQHandler+0x7c>)
 8018e5e:	f7ff fede 	bl	8018c1e <LL_DMA_ClearFlag_TC1>
     UART_DMA_Rx_Check(USART2);
 8018e62:	480d      	ldr	r0, [pc, #52]	@ (8018e98 <DMA1_Stream1_IRQHandler+0x80>)
 8018e64:	f7e9 fcaa 	bl	80027bc <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TE1(DMA1))
 8018e68:	2101      	movs	r1, #1
 8018e6a:	480a      	ldr	r0, [pc, #40]	@ (8018e94 <DMA1_Stream1_IRQHandler+0x7c>)
 8018e6c:	f7ff ff3a 	bl	8018ce4 <LL_DMA_IsEnabledIT_TE>
 8018e70:	4603      	mov	r3, r0
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d00c      	beq.n	8018e90 <DMA1_Stream1_IRQHandler+0x78>
 8018e76:	4807      	ldr	r0, [pc, #28]	@ (8018e94 <DMA1_Stream1_IRQHandler+0x7c>)
 8018e78:	f7ff fe81 	bl	8018b7e <LL_DMA_IsActiveFlag_TE1>
 8018e7c:	4603      	mov	r3, r0
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d006      	beq.n	8018e90 <DMA1_Stream1_IRQHandler+0x78>
  {
     LL_DMA_ClearFlag_TE1(DMA1);
 8018e82:	4804      	ldr	r0, [pc, #16]	@ (8018e94 <DMA1_Stream1_IRQHandler+0x7c>)
 8018e84:	f7ff fef4 	bl	8018c70 <LL_DMA_ClearFlag_TE1>
     LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 8018e88:	2101      	movs	r1, #1
 8018e8a:	4802      	ldr	r0, [pc, #8]	@ (8018e94 <DMA1_Stream1_IRQHandler+0x7c>)
 8018e8c:	f7ff fde0 	bl	8018a50 <LL_DMA_EnableStream>
  }
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8018e90:	bf00      	nop
 8018e92:	bd80      	pop	{r7, pc}
 8018e94:	40020000 	.word	0x40020000
 8018e98:	40004400 	.word	0x40004400

08018e9c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	 TickTimer_IRQHandler();
 8018ea0:	f7f1 fc60 	bl	800a764 <TickTimer_IRQHandler>
  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8018ea4:	bf00      	nop
 8018ea6:	bd80      	pop	{r7, pc}

08018ea8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1))
 8018eac:	480b      	ldr	r0, [pc, #44]	@ (8018edc <USART1_IRQHandler+0x34>)
 8018eae:	f7ff fdbb 	bl	8018a28 <LL_USART_IsEnabledIT_IDLE>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d00b      	beq.n	8018ed0 <USART1_IRQHandler+0x28>
 8018eb8:	4808      	ldr	r0, [pc, #32]	@ (8018edc <USART1_IRQHandler+0x34>)
 8018eba:	f7ff fd95 	bl	80189e8 <LL_USART_IsActiveFlag_IDLE>
 8018ebe:	4603      	mov	r3, r0
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d005      	beq.n	8018ed0 <USART1_IRQHandler+0x28>
  {
     LL_USART_ClearFlag_IDLE(USART1);
 8018ec4:	4805      	ldr	r0, [pc, #20]	@ (8018edc <USART1_IRQHandler+0x34>)
 8018ec6:	f7ff fda2 	bl	8018a0e <LL_USART_ClearFlag_IDLE>
     UART_DMA_Rx_Check(USART1);
 8018eca:	4804      	ldr	r0, [pc, #16]	@ (8018edc <USART1_IRQHandler+0x34>)
 8018ecc:	f7e9 fc76 	bl	80027bc <UART_DMA_Rx_Check>
  }
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_Driver_TX_ISR(USART1);
 8018ed0:	4802      	ldr	r0, [pc, #8]	@ (8018edc <USART1_IRQHandler+0x34>)
 8018ed2:	f7e9 fc21 	bl	8002718 <UART_Driver_TX_ISR>
  /* USER CODE END USART1_IRQn 1 */
}
 8018ed6:	bf00      	nop
 8018ed8:	bd80      	pop	{r7, pc}
 8018eda:	bf00      	nop
 8018edc:	40011000 	.word	0x40011000

08018ee0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(USART2) && LL_USART_IsActiveFlag_IDLE(USART2))
 8018ee4:	480b      	ldr	r0, [pc, #44]	@ (8018f14 <USART2_IRQHandler+0x34>)
 8018ee6:	f7ff fd9f 	bl	8018a28 <LL_USART_IsEnabledIT_IDLE>
 8018eea:	4603      	mov	r3, r0
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d00b      	beq.n	8018f08 <USART2_IRQHandler+0x28>
 8018ef0:	4808      	ldr	r0, [pc, #32]	@ (8018f14 <USART2_IRQHandler+0x34>)
 8018ef2:	f7ff fd79 	bl	80189e8 <LL_USART_IsActiveFlag_IDLE>
 8018ef6:	4603      	mov	r3, r0
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d005      	beq.n	8018f08 <USART2_IRQHandler+0x28>
  {
	 LL_USART_ClearFlag_IDLE(USART2);
 8018efc:	4805      	ldr	r0, [pc, #20]	@ (8018f14 <USART2_IRQHandler+0x34>)
 8018efe:	f7ff fd86 	bl	8018a0e <LL_USART_ClearFlag_IDLE>
     UART_DMA_Rx_Check(USART2);
 8018f02:	4804      	ldr	r0, [pc, #16]	@ (8018f14 <USART2_IRQHandler+0x34>)
 8018f04:	f7e9 fc5a 	bl	80027bc <UART_DMA_Rx_Check>
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */
  UART_Driver_TX_ISR(USART2);
 8018f08:	4802      	ldr	r0, [pc, #8]	@ (8018f14 <USART2_IRQHandler+0x34>)
 8018f0a:	f7e9 fc05 	bl	8002718 <UART_Driver_TX_ISR>
  /* USER CODE END USART2_IRQn 1 */
}
 8018f0e:	bf00      	nop
 8018f10:	bd80      	pop	{r7, pc}
 8018f12:	bf00      	nop
 8018f14:	40004400 	.word	0x40004400

08018f18 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
  if (LL_DMA_IsActiveFlag_TC7(DMA1))
 8018f1c:	480f      	ldr	r0, [pc, #60]	@ (8018f5c <DMA1_Stream7_IRQHandler+0x44>)
 8018f1e:	f7ff fe07 	bl	8018b30 <LL_DMA_IsActiveFlag_TC7>
 8018f22:	4603      	mov	r3, r0
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d007      	beq.n	8018f38 <DMA1_Stream7_IRQHandler+0x20>
  {
      LL_DMA_ClearFlag_TC7(DMA1);
 8018f28:	480c      	ldr	r0, [pc, #48]	@ (8018f5c <DMA1_Stream7_IRQHandler+0x44>)
 8018f2a:	f7ff fe86 	bl	8018c3a <LL_DMA_ClearFlag_TC7>
      SPI_SlaveDevice_SetTransferState(SPI_TRANSFER_COMPLETE);
 8018f2e:	2001      	movs	r0, #1
 8018f30:	f7f0 fdd0 	bl	8009ad4 <SPI_SlaveDevice_SetTransferState>
      SPI_SlaveDevice_Disable();
 8018f34:	f7f0 fda4 	bl	8009a80 <SPI_SlaveDevice_Disable>
  }
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */
  if (LL_DMA_IsActiveFlag_TE7(DMA1))
 8018f38:	4808      	ldr	r0, [pc, #32]	@ (8018f5c <DMA1_Stream7_IRQHandler+0x44>)
 8018f3a:	f7ff fe34 	bl	8018ba6 <LL_DMA_IsActiveFlag_TE7>
 8018f3e:	4603      	mov	r3, r0
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d008      	beq.n	8018f56 <DMA1_Stream7_IRQHandler+0x3e>
  {
      LL_DMA_ClearFlag_TE7(DMA1);
 8018f44:	4805      	ldr	r0, [pc, #20]	@ (8018f5c <DMA1_Stream7_IRQHandler+0x44>)
 8018f46:	f7ff fea1 	bl	8018c8c <LL_DMA_ClearFlag_TE7>
      SPI_SlaveDevice_SetTransferState(SPI_TRANSFER_ERROR);
 8018f4a:	2002      	movs	r0, #2
 8018f4c:	f7f0 fdc2 	bl	8009ad4 <SPI_SlaveDevice_SetTransferState>
      toCM4_SetState(TOCM4_ERROR);
 8018f50:	2000      	movs	r0, #0
 8018f52:	f7e7 fd8b 	bl	8000a6c <toCM4_SetState>
  }
  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8018f56:	bf00      	nop
 8018f58:	bd80      	pop	{r7, pc}
 8018f5a:	bf00      	nop
 8018f5c:	40020000 	.word	0x40020000

08018f60 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_MMC_IRQHandler(&hmmc1);
 8018f64:	4802      	ldr	r0, [pc, #8]	@ (8018f70 <SDMMC1_IRQHandler+0x10>)
 8018f66:	f001 fb93 	bl	801a690 <HAL_MMC_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8018f6a:	bf00      	nop
 8018f6c:	bd80      	pop	{r7, pc}
 8018f6e:	bf00      	nop
 8018f70:	2405a57c 	.word	0x2405a57c

08018f74 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8018f78:	4802      	ldr	r0, [pc, #8]	@ (8018f84 <TIM7_IRQHandler+0x10>)
 8018f7a:	f006 fb0b 	bl	801f594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8018f7e:	bf00      	nop
 8018f80:	bd80      	pop	{r7, pc}
 8018f82:	bf00      	nop
 8018f84:	2405a860 	.word	0x2405a860

08018f88 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA2, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_HT1(DMA2))
 8018f8c:	2101      	movs	r1, #1
 8018f8e:	481d      	ldr	r0, [pc, #116]	@ (8019004 <DMA2_Stream1_IRQHandler+0x7c>)
 8018f90:	f7ff fe8a 	bl	8018ca8 <LL_DMA_IsEnabledIT_HT>
 8018f94:	4603      	mov	r3, r0
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d00b      	beq.n	8018fb2 <DMA2_Stream1_IRQHandler+0x2a>
 8018f9a:	481a      	ldr	r0, [pc, #104]	@ (8019004 <DMA2_Stream1_IRQHandler+0x7c>)
 8018f9c:	f7ff fd8d 	bl	8018aba <LL_DMA_IsActiveFlag_HT1>
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d005      	beq.n	8018fb2 <DMA2_Stream1_IRQHandler+0x2a>
  {
     LL_DMA_ClearFlag_HT1(DMA2);
 8018fa6:	4817      	ldr	r0, [pc, #92]	@ (8019004 <DMA2_Stream1_IRQHandler+0x7c>)
 8018fa8:	f7ff fe1e 	bl	8018be8 <LL_DMA_ClearFlag_HT1>
     UART_DMA_Rx_Check(UART7);
 8018fac:	4816      	ldr	r0, [pc, #88]	@ (8019008 <DMA2_Stream1_IRQHandler+0x80>)
 8018fae:	f7e9 fc05 	bl	80027bc <UART_DMA_Rx_Check>
  }
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
  if (LL_DMA_IsEnabledIT_TC(DMA2, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TC1(DMA2))
 8018fb2:	2101      	movs	r1, #1
 8018fb4:	4813      	ldr	r0, [pc, #76]	@ (8019004 <DMA2_Stream1_IRQHandler+0x7c>)
 8018fb6:	f7ff feb3 	bl	8018d20 <LL_DMA_IsEnabledIT_TC>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d00b      	beq.n	8018fd8 <DMA2_Stream1_IRQHandler+0x50>
 8018fc0:	4810      	ldr	r0, [pc, #64]	@ (8019004 <DMA2_Stream1_IRQHandler+0x7c>)
 8018fc2:	f7ff fda1 	bl	8018b08 <LL_DMA_IsActiveFlag_TC1>
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d005      	beq.n	8018fd8 <DMA2_Stream1_IRQHandler+0x50>
  {
     LL_DMA_ClearFlag_TC1(DMA2);
 8018fcc:	480d      	ldr	r0, [pc, #52]	@ (8019004 <DMA2_Stream1_IRQHandler+0x7c>)
 8018fce:	f7ff fe26 	bl	8018c1e <LL_DMA_ClearFlag_TC1>
     UART_DMA_Rx_Check(UART7);
 8018fd2:	480d      	ldr	r0, [pc, #52]	@ (8019008 <DMA2_Stream1_IRQHandler+0x80>)
 8018fd4:	f7e9 fbf2 	bl	80027bc <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA2, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TE1(DMA2))
 8018fd8:	2101      	movs	r1, #1
 8018fda:	480a      	ldr	r0, [pc, #40]	@ (8019004 <DMA2_Stream1_IRQHandler+0x7c>)
 8018fdc:	f7ff fe82 	bl	8018ce4 <LL_DMA_IsEnabledIT_TE>
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d00c      	beq.n	8019000 <DMA2_Stream1_IRQHandler+0x78>
 8018fe6:	4807      	ldr	r0, [pc, #28]	@ (8019004 <DMA2_Stream1_IRQHandler+0x7c>)
 8018fe8:	f7ff fdc9 	bl	8018b7e <LL_DMA_IsActiveFlag_TE1>
 8018fec:	4603      	mov	r3, r0
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d006      	beq.n	8019000 <DMA2_Stream1_IRQHandler+0x78>
  {
     LL_DMA_ClearFlag_TE1(DMA2);
 8018ff2:	4804      	ldr	r0, [pc, #16]	@ (8019004 <DMA2_Stream1_IRQHandler+0x7c>)
 8018ff4:	f7ff fe3c 	bl	8018c70 <LL_DMA_ClearFlag_TE1>
     LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 8018ff8:	2101      	movs	r1, #1
 8018ffa:	4802      	ldr	r0, [pc, #8]	@ (8019004 <DMA2_Stream1_IRQHandler+0x7c>)
 8018ffc:	f7ff fd28 	bl	8018a50 <LL_DMA_EnableStream>
  }
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8019000:	bf00      	nop
 8019002:	bd80      	pop	{r7, pc}
 8019004:	40020400 	.word	0x40020400
 8019008:	40007800 	.word	0x40007800

0801900c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 801900c:	b580      	push	{r7, lr}
 801900e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(UART7) && LL_USART_IsActiveFlag_IDLE(UART7))
 8019010:	480b      	ldr	r0, [pc, #44]	@ (8019040 <UART7_IRQHandler+0x34>)
 8019012:	f7ff fd09 	bl	8018a28 <LL_USART_IsEnabledIT_IDLE>
 8019016:	4603      	mov	r3, r0
 8019018:	2b00      	cmp	r3, #0
 801901a:	d00b      	beq.n	8019034 <UART7_IRQHandler+0x28>
 801901c:	4808      	ldr	r0, [pc, #32]	@ (8019040 <UART7_IRQHandler+0x34>)
 801901e:	f7ff fce3 	bl	80189e8 <LL_USART_IsActiveFlag_IDLE>
 8019022:	4603      	mov	r3, r0
 8019024:	2b00      	cmp	r3, #0
 8019026:	d005      	beq.n	8019034 <UART7_IRQHandler+0x28>
  {
	 LL_USART_ClearFlag_IDLE(UART7);
 8019028:	4805      	ldr	r0, [pc, #20]	@ (8019040 <UART7_IRQHandler+0x34>)
 801902a:	f7ff fcf0 	bl	8018a0e <LL_USART_ClearFlag_IDLE>
	 UART_DMA_Rx_Check(UART7);
 801902e:	4804      	ldr	r0, [pc, #16]	@ (8019040 <UART7_IRQHandler+0x34>)
 8019030:	f7e9 fbc4 	bl	80027bc <UART_DMA_Rx_Check>
  }
  /* USER CODE END UART7_IRQn 0 */
  /* USER CODE BEGIN UART7_IRQn 1 */
  UART_Driver_TX_ISR(UART7);
 8019034:	4802      	ldr	r0, [pc, #8]	@ (8019040 <UART7_IRQHandler+0x34>)
 8019036:	f7e9 fb6f 	bl	8002718 <UART_Driver_TX_ISR>
  /* USER CODE END UART7_IRQn 1 */
}
 801903a:	bf00      	nop
 801903c:	bd80      	pop	{r7, pc}
 801903e:	bf00      	nop
 8019040:	40007800 	.word	0x40007800

08019044 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8019044:	b480      	push	{r7}
 8019046:	af00      	add	r7, sp, #0

  /* USER CODE END SPI5_IRQn 0 */
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8019048:	bf00      	nop
 801904a:	46bd      	mov	sp, r7
 801904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019050:	4770      	bx	lr

08019052 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8019052:	b480      	push	{r7}
 8019054:	af00      	add	r7, sp, #0

  /* USER CODE END SPI6_IRQn 0 */
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8019056:	bf00      	nop
 8019058:	46bd      	mov	sp, r7
 801905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801905e:	4770      	bx	lr

08019060 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8019060:	b580      	push	{r7, lr}
 8019062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel0_sdmmc1_end_data_0);
 8019064:	4802      	ldr	r0, [pc, #8]	@ (8019070 <MDMA_IRQHandler+0x10>)
 8019066:	f000 fea1 	bl	8019dac <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 801906a:	bf00      	nop
 801906c:	bd80      	pop	{r7, pc}
 801906e:	bf00      	nop
 8019070:	2405a7f4 	.word	0x2405a7f4

08019074 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8019074:	b580      	push	{r7, lr}
 8019076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */
  SPIMaster_IRQHandler();
 8019078:	f7f0 f9aa 	bl	80093d0 <SPIMaster_IRQHandler>
  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 801907c:	bf00      	nop
 801907e:	bd80      	pop	{r7, pc}

08019080 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8019080:	b480      	push	{r7}
 8019082:	af00      	add	r7, sp, #0

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8019084:	bf00      	nop
 8019086:	46bd      	mov	sp, r7
 8019088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801908c:	4770      	bx	lr

0801908e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801908e:	b480      	push	{r7}
 8019090:	af00      	add	r7, sp, #0
  return 1;
 8019092:	2301      	movs	r3, #1
}
 8019094:	4618      	mov	r0, r3
 8019096:	46bd      	mov	sp, r7
 8019098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801909c:	4770      	bx	lr

0801909e <_kill>:

int _kill(int pid, int sig)
{
 801909e:	b580      	push	{r7, lr}
 80190a0:	b082      	sub	sp, #8
 80190a2:	af00      	add	r7, sp, #0
 80190a4:	6078      	str	r0, [r7, #4]
 80190a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80190a8:	f008 fff6 	bl	8022098 <__errno>
 80190ac:	4603      	mov	r3, r0
 80190ae:	2216      	movs	r2, #22
 80190b0:	601a      	str	r2, [r3, #0]
  return -1;
 80190b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80190b6:	4618      	mov	r0, r3
 80190b8:	3708      	adds	r7, #8
 80190ba:	46bd      	mov	sp, r7
 80190bc:	bd80      	pop	{r7, pc}

080190be <_exit>:

void _exit (int status)
{
 80190be:	b580      	push	{r7, lr}
 80190c0:	b082      	sub	sp, #8
 80190c2:	af00      	add	r7, sp, #0
 80190c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80190c6:	f04f 31ff 	mov.w	r1, #4294967295
 80190ca:	6878      	ldr	r0, [r7, #4]
 80190cc:	f7ff ffe7 	bl	801909e <_kill>
  while (1) {}    /* Make sure we hang here */
 80190d0:	bf00      	nop
 80190d2:	e7fd      	b.n	80190d0 <_exit+0x12>

080190d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b086      	sub	sp, #24
 80190d8:	af00      	add	r7, sp, #0
 80190da:	60f8      	str	r0, [r7, #12]
 80190dc:	60b9      	str	r1, [r7, #8]
 80190de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80190e0:	2300      	movs	r3, #0
 80190e2:	617b      	str	r3, [r7, #20]
 80190e4:	e00a      	b.n	80190fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80190e6:	f3af 8000 	nop.w
 80190ea:	4601      	mov	r1, r0
 80190ec:	68bb      	ldr	r3, [r7, #8]
 80190ee:	1c5a      	adds	r2, r3, #1
 80190f0:	60ba      	str	r2, [r7, #8]
 80190f2:	b2ca      	uxtb	r2, r1
 80190f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80190f6:	697b      	ldr	r3, [r7, #20]
 80190f8:	3301      	adds	r3, #1
 80190fa:	617b      	str	r3, [r7, #20]
 80190fc:	697a      	ldr	r2, [r7, #20]
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	429a      	cmp	r2, r3
 8019102:	dbf0      	blt.n	80190e6 <_read+0x12>
  }

  return len;
 8019104:	687b      	ldr	r3, [r7, #4]
}
 8019106:	4618      	mov	r0, r3
 8019108:	3718      	adds	r7, #24
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}

0801910e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801910e:	b580      	push	{r7, lr}
 8019110:	b086      	sub	sp, #24
 8019112:	af00      	add	r7, sp, #0
 8019114:	60f8      	str	r0, [r7, #12]
 8019116:	60b9      	str	r1, [r7, #8]
 8019118:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801911a:	2300      	movs	r3, #0
 801911c:	617b      	str	r3, [r7, #20]
 801911e:	e009      	b.n	8019134 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8019120:	68bb      	ldr	r3, [r7, #8]
 8019122:	1c5a      	adds	r2, r3, #1
 8019124:	60ba      	str	r2, [r7, #8]
 8019126:	781b      	ldrb	r3, [r3, #0]
 8019128:	4618      	mov	r0, r3
 801912a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801912e:	697b      	ldr	r3, [r7, #20]
 8019130:	3301      	adds	r3, #1
 8019132:	617b      	str	r3, [r7, #20]
 8019134:	697a      	ldr	r2, [r7, #20]
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	429a      	cmp	r2, r3
 801913a:	dbf1      	blt.n	8019120 <_write+0x12>
  }
  return len;
 801913c:	687b      	ldr	r3, [r7, #4]
}
 801913e:	4618      	mov	r0, r3
 8019140:	3718      	adds	r7, #24
 8019142:	46bd      	mov	sp, r7
 8019144:	bd80      	pop	{r7, pc}

08019146 <_close>:

int _close(int file)
{
 8019146:	b480      	push	{r7}
 8019148:	b083      	sub	sp, #12
 801914a:	af00      	add	r7, sp, #0
 801914c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801914e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019152:	4618      	mov	r0, r3
 8019154:	370c      	adds	r7, #12
 8019156:	46bd      	mov	sp, r7
 8019158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801915c:	4770      	bx	lr

0801915e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801915e:	b480      	push	{r7}
 8019160:	b083      	sub	sp, #12
 8019162:	af00      	add	r7, sp, #0
 8019164:	6078      	str	r0, [r7, #4]
 8019166:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8019168:	683b      	ldr	r3, [r7, #0]
 801916a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801916e:	605a      	str	r2, [r3, #4]
  return 0;
 8019170:	2300      	movs	r3, #0
}
 8019172:	4618      	mov	r0, r3
 8019174:	370c      	adds	r7, #12
 8019176:	46bd      	mov	sp, r7
 8019178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801917c:	4770      	bx	lr

0801917e <_isatty>:

int _isatty(int file)
{
 801917e:	b480      	push	{r7}
 8019180:	b083      	sub	sp, #12
 8019182:	af00      	add	r7, sp, #0
 8019184:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8019186:	2301      	movs	r3, #1
}
 8019188:	4618      	mov	r0, r3
 801918a:	370c      	adds	r7, #12
 801918c:	46bd      	mov	sp, r7
 801918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019192:	4770      	bx	lr

08019194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8019194:	b480      	push	{r7}
 8019196:	b085      	sub	sp, #20
 8019198:	af00      	add	r7, sp, #0
 801919a:	60f8      	str	r0, [r7, #12]
 801919c:	60b9      	str	r1, [r7, #8]
 801919e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80191a0:	2300      	movs	r3, #0
}
 80191a2:	4618      	mov	r0, r3
 80191a4:	3714      	adds	r7, #20
 80191a6:	46bd      	mov	sp, r7
 80191a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ac:	4770      	bx	lr
	...

080191b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b086      	sub	sp, #24
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80191b8:	4a14      	ldr	r2, [pc, #80]	@ (801920c <_sbrk+0x5c>)
 80191ba:	4b15      	ldr	r3, [pc, #84]	@ (8019210 <_sbrk+0x60>)
 80191bc:	1ad3      	subs	r3, r2, r3
 80191be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80191c0:	697b      	ldr	r3, [r7, #20]
 80191c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80191c4:	4b13      	ldr	r3, [pc, #76]	@ (8019214 <_sbrk+0x64>)
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d102      	bne.n	80191d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80191cc:	4b11      	ldr	r3, [pc, #68]	@ (8019214 <_sbrk+0x64>)
 80191ce:	4a12      	ldr	r2, [pc, #72]	@ (8019218 <_sbrk+0x68>)
 80191d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80191d2:	4b10      	ldr	r3, [pc, #64]	@ (8019214 <_sbrk+0x64>)
 80191d4:	681a      	ldr	r2, [r3, #0]
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	4413      	add	r3, r2
 80191da:	693a      	ldr	r2, [r7, #16]
 80191dc:	429a      	cmp	r2, r3
 80191de:	d207      	bcs.n	80191f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80191e0:	f008 ff5a 	bl	8022098 <__errno>
 80191e4:	4603      	mov	r3, r0
 80191e6:	220c      	movs	r2, #12
 80191e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80191ea:	f04f 33ff 	mov.w	r3, #4294967295
 80191ee:	e009      	b.n	8019204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80191f0:	4b08      	ldr	r3, [pc, #32]	@ (8019214 <_sbrk+0x64>)
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80191f6:	4b07      	ldr	r3, [pc, #28]	@ (8019214 <_sbrk+0x64>)
 80191f8:	681a      	ldr	r2, [r3, #0]
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	4413      	add	r3, r2
 80191fe:	4a05      	ldr	r2, [pc, #20]	@ (8019214 <_sbrk+0x64>)
 8019200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8019202:	68fb      	ldr	r3, [r7, #12]
}
 8019204:	4618      	mov	r0, r3
 8019206:	3718      	adds	r7, #24
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}
 801920c:	24080000 	.word	0x24080000
 8019210:	00000800 	.word	0x00000800
 8019214:	2405a8ac 	.word	0x2405a8ac
 8019218:	2405aa00 	.word	0x2405aa00

0801921c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 801921c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8019258 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8019220:	f7fc ff3c 	bl	801609c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8019224:	f7fc fe8c 	bl	8015f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8019228:	480c      	ldr	r0, [pc, #48]	@ (801925c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801922a:	490d      	ldr	r1, [pc, #52]	@ (8019260 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801922c:	4a0d      	ldr	r2, [pc, #52]	@ (8019264 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801922e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019230:	e002      	b.n	8019238 <LoopCopyDataInit>

08019232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8019236:	3304      	adds	r3, #4

08019238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8019238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801923a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801923c:	d3f9      	bcc.n	8019232 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801923e:	4a0a      	ldr	r2, [pc, #40]	@ (8019268 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8019240:	4c0a      	ldr	r4, [pc, #40]	@ (801926c <LoopFillZerobss+0x22>)
  movs r3, #0
 8019242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019244:	e001      	b.n	801924a <LoopFillZerobss>

08019246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8019246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8019248:	3204      	adds	r2, #4

0801924a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801924a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801924c:	d3fb      	bcc.n	8019246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801924e:	f008 ff29 	bl	80220a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019252:	f7fd fd35 	bl	8016cc0 <main>
  bx  lr
 8019256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8019258:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801925c:	24014728 	.word	0x24014728
  ldr r1, =_edata
 8019260:	24014a48 	.word	0x24014a48
  ldr r2, =_sidata
 8019264:	0802659c 	.word	0x0802659c
  ldr r2, =_sbss
 8019268:	24014a48 	.word	0x24014a48
  ldr r4, =_ebss
 801926c:	2405aa00 	.word	0x2405aa00

08019270 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019270:	e7fe      	b.n	8019270 <ADC3_IRQHandler>
	...

08019274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019274:	b580      	push	{r7, lr}
 8019276:	b082      	sub	sp, #8
 8019278:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801927a:	2003      	movs	r0, #3
 801927c:	f000 f957 	bl	801952e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8019280:	f003 f9ae 	bl	801c5e0 <HAL_RCC_GetSysClockFreq>
 8019284:	4602      	mov	r2, r0
 8019286:	4b15      	ldr	r3, [pc, #84]	@ (80192dc <HAL_Init+0x68>)
 8019288:	699b      	ldr	r3, [r3, #24]
 801928a:	0a1b      	lsrs	r3, r3, #8
 801928c:	f003 030f 	and.w	r3, r3, #15
 8019290:	4913      	ldr	r1, [pc, #76]	@ (80192e0 <HAL_Init+0x6c>)
 8019292:	5ccb      	ldrb	r3, [r1, r3]
 8019294:	f003 031f 	and.w	r3, r3, #31
 8019298:	fa22 f303 	lsr.w	r3, r2, r3
 801929c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801929e:	4b0f      	ldr	r3, [pc, #60]	@ (80192dc <HAL_Init+0x68>)
 80192a0:	699b      	ldr	r3, [r3, #24]
 80192a2:	f003 030f 	and.w	r3, r3, #15
 80192a6:	4a0e      	ldr	r2, [pc, #56]	@ (80192e0 <HAL_Init+0x6c>)
 80192a8:	5cd3      	ldrb	r3, [r2, r3]
 80192aa:	f003 031f 	and.w	r3, r3, #31
 80192ae:	687a      	ldr	r2, [r7, #4]
 80192b0:	fa22 f303 	lsr.w	r3, r2, r3
 80192b4:	4a0b      	ldr	r2, [pc, #44]	@ (80192e4 <HAL_Init+0x70>)
 80192b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80192b8:	4a0b      	ldr	r2, [pc, #44]	@ (80192e8 <HAL_Init+0x74>)
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80192be:	200f      	movs	r0, #15
 80192c0:	f7ff fb26 	bl	8018910 <HAL_InitTick>
 80192c4:	4603      	mov	r3, r0
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d001      	beq.n	80192ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80192ca:	2301      	movs	r3, #1
 80192cc:	e002      	b.n	80192d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80192ce:	f7ff fa17 	bl	8018700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80192d2:	2300      	movs	r3, #0
}
 80192d4:	4618      	mov	r0, r3
 80192d6:	3708      	adds	r7, #8
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}
 80192dc:	58024400 	.word	0x58024400
 80192e0:	08026344 	.word	0x08026344
 80192e4:	240148dc 	.word	0x240148dc
 80192e8:	240148d8 	.word	0x240148d8

080192ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80192ec:	b480      	push	{r7}
 80192ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80192f0:	4b06      	ldr	r3, [pc, #24]	@ (801930c <HAL_IncTick+0x20>)
 80192f2:	781b      	ldrb	r3, [r3, #0]
 80192f4:	461a      	mov	r2, r3
 80192f6:	4b06      	ldr	r3, [pc, #24]	@ (8019310 <HAL_IncTick+0x24>)
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	4413      	add	r3, r2
 80192fc:	4a04      	ldr	r2, [pc, #16]	@ (8019310 <HAL_IncTick+0x24>)
 80192fe:	6013      	str	r3, [r2, #0]
}
 8019300:	bf00      	nop
 8019302:	46bd      	mov	sp, r7
 8019304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019308:	4770      	bx	lr
 801930a:	bf00      	nop
 801930c:	240149e8 	.word	0x240149e8
 8019310:	2405a8b0 	.word	0x2405a8b0

08019314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019314:	b480      	push	{r7}
 8019316:	af00      	add	r7, sp, #0
  return uwTick;
 8019318:	4b03      	ldr	r3, [pc, #12]	@ (8019328 <HAL_GetTick+0x14>)
 801931a:	681b      	ldr	r3, [r3, #0]
}
 801931c:	4618      	mov	r0, r3
 801931e:	46bd      	mov	sp, r7
 8019320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019324:	4770      	bx	lr
 8019326:	bf00      	nop
 8019328:	2405a8b0 	.word	0x2405a8b0

0801932c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801932c:	b580      	push	{r7, lr}
 801932e:	b084      	sub	sp, #16
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019334:	f7ff ffee 	bl	8019314 <HAL_GetTick>
 8019338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019344:	d005      	beq.n	8019352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8019346:	4b0a      	ldr	r3, [pc, #40]	@ (8019370 <HAL_Delay+0x44>)
 8019348:	781b      	ldrb	r3, [r3, #0]
 801934a:	461a      	mov	r2, r3
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	4413      	add	r3, r2
 8019350:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8019352:	bf00      	nop
 8019354:	f7ff ffde 	bl	8019314 <HAL_GetTick>
 8019358:	4602      	mov	r2, r0
 801935a:	68bb      	ldr	r3, [r7, #8]
 801935c:	1ad3      	subs	r3, r2, r3
 801935e:	68fa      	ldr	r2, [r7, #12]
 8019360:	429a      	cmp	r2, r3
 8019362:	d8f7      	bhi.n	8019354 <HAL_Delay+0x28>
  {
  }
}
 8019364:	bf00      	nop
 8019366:	bf00      	nop
 8019368:	3710      	adds	r7, #16
 801936a:	46bd      	mov	sp, r7
 801936c:	bd80      	pop	{r7, pc}
 801936e:	bf00      	nop
 8019370:	240149e8 	.word	0x240149e8

08019374 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8019374:	b480      	push	{r7}
 8019376:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8019378:	4b03      	ldr	r3, [pc, #12]	@ (8019388 <HAL_GetREVID+0x14>)
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	0c1b      	lsrs	r3, r3, #16
}
 801937e:	4618      	mov	r0, r3
 8019380:	46bd      	mov	sp, r7
 8019382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019386:	4770      	bx	lr
 8019388:	5c001000 	.word	0x5c001000

0801938c <__NVIC_SetPriorityGrouping>:
{
 801938c:	b480      	push	{r7}
 801938e:	b085      	sub	sp, #20
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	f003 0307 	and.w	r3, r3, #7
 801939a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801939c:	4b0b      	ldr	r3, [pc, #44]	@ (80193cc <__NVIC_SetPriorityGrouping+0x40>)
 801939e:	68db      	ldr	r3, [r3, #12]
 80193a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80193a2:	68ba      	ldr	r2, [r7, #8]
 80193a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80193a8:	4013      	ands	r3, r2
 80193aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80193b0:	68bb      	ldr	r3, [r7, #8]
 80193b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80193b4:	4b06      	ldr	r3, [pc, #24]	@ (80193d0 <__NVIC_SetPriorityGrouping+0x44>)
 80193b6:	4313      	orrs	r3, r2
 80193b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80193ba:	4a04      	ldr	r2, [pc, #16]	@ (80193cc <__NVIC_SetPriorityGrouping+0x40>)
 80193bc:	68bb      	ldr	r3, [r7, #8]
 80193be:	60d3      	str	r3, [r2, #12]
}
 80193c0:	bf00      	nop
 80193c2:	3714      	adds	r7, #20
 80193c4:	46bd      	mov	sp, r7
 80193c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ca:	4770      	bx	lr
 80193cc:	e000ed00 	.word	0xe000ed00
 80193d0:	05fa0000 	.word	0x05fa0000

080193d4 <__NVIC_GetPriorityGrouping>:
{
 80193d4:	b480      	push	{r7}
 80193d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80193d8:	4b04      	ldr	r3, [pc, #16]	@ (80193ec <__NVIC_GetPriorityGrouping+0x18>)
 80193da:	68db      	ldr	r3, [r3, #12]
 80193dc:	0a1b      	lsrs	r3, r3, #8
 80193de:	f003 0307 	and.w	r3, r3, #7
}
 80193e2:	4618      	mov	r0, r3
 80193e4:	46bd      	mov	sp, r7
 80193e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ea:	4770      	bx	lr
 80193ec:	e000ed00 	.word	0xe000ed00

080193f0 <__NVIC_EnableIRQ>:
{
 80193f0:	b480      	push	{r7}
 80193f2:	b083      	sub	sp, #12
 80193f4:	af00      	add	r7, sp, #0
 80193f6:	4603      	mov	r3, r0
 80193f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80193fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	db0b      	blt.n	801941a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019402:	88fb      	ldrh	r3, [r7, #6]
 8019404:	f003 021f 	and.w	r2, r3, #31
 8019408:	4907      	ldr	r1, [pc, #28]	@ (8019428 <__NVIC_EnableIRQ+0x38>)
 801940a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801940e:	095b      	lsrs	r3, r3, #5
 8019410:	2001      	movs	r0, #1
 8019412:	fa00 f202 	lsl.w	r2, r0, r2
 8019416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801941a:	bf00      	nop
 801941c:	370c      	adds	r7, #12
 801941e:	46bd      	mov	sp, r7
 8019420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019424:	4770      	bx	lr
 8019426:	bf00      	nop
 8019428:	e000e100 	.word	0xe000e100

0801942c <__NVIC_DisableIRQ>:
{
 801942c:	b480      	push	{r7}
 801942e:	b083      	sub	sp, #12
 8019430:	af00      	add	r7, sp, #0
 8019432:	4603      	mov	r3, r0
 8019434:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801943a:	2b00      	cmp	r3, #0
 801943c:	db12      	blt.n	8019464 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801943e:	88fb      	ldrh	r3, [r7, #6]
 8019440:	f003 021f 	and.w	r2, r3, #31
 8019444:	490a      	ldr	r1, [pc, #40]	@ (8019470 <__NVIC_DisableIRQ+0x44>)
 8019446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801944a:	095b      	lsrs	r3, r3, #5
 801944c:	2001      	movs	r0, #1
 801944e:	fa00 f202 	lsl.w	r2, r0, r2
 8019452:	3320      	adds	r3, #32
 8019454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8019458:	f3bf 8f4f 	dsb	sy
}
 801945c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801945e:	f3bf 8f6f 	isb	sy
}
 8019462:	bf00      	nop
}
 8019464:	bf00      	nop
 8019466:	370c      	adds	r7, #12
 8019468:	46bd      	mov	sp, r7
 801946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801946e:	4770      	bx	lr
 8019470:	e000e100 	.word	0xe000e100

08019474 <__NVIC_SetPriority>:
{
 8019474:	b480      	push	{r7}
 8019476:	b083      	sub	sp, #12
 8019478:	af00      	add	r7, sp, #0
 801947a:	4603      	mov	r3, r0
 801947c:	6039      	str	r1, [r7, #0]
 801947e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019484:	2b00      	cmp	r3, #0
 8019486:	db0a      	blt.n	801949e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019488:	683b      	ldr	r3, [r7, #0]
 801948a:	b2da      	uxtb	r2, r3
 801948c:	490c      	ldr	r1, [pc, #48]	@ (80194c0 <__NVIC_SetPriority+0x4c>)
 801948e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019492:	0112      	lsls	r2, r2, #4
 8019494:	b2d2      	uxtb	r2, r2
 8019496:	440b      	add	r3, r1
 8019498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801949c:	e00a      	b.n	80194b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801949e:	683b      	ldr	r3, [r7, #0]
 80194a0:	b2da      	uxtb	r2, r3
 80194a2:	4908      	ldr	r1, [pc, #32]	@ (80194c4 <__NVIC_SetPriority+0x50>)
 80194a4:	88fb      	ldrh	r3, [r7, #6]
 80194a6:	f003 030f 	and.w	r3, r3, #15
 80194aa:	3b04      	subs	r3, #4
 80194ac:	0112      	lsls	r2, r2, #4
 80194ae:	b2d2      	uxtb	r2, r2
 80194b0:	440b      	add	r3, r1
 80194b2:	761a      	strb	r2, [r3, #24]
}
 80194b4:	bf00      	nop
 80194b6:	370c      	adds	r7, #12
 80194b8:	46bd      	mov	sp, r7
 80194ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194be:	4770      	bx	lr
 80194c0:	e000e100 	.word	0xe000e100
 80194c4:	e000ed00 	.word	0xe000ed00

080194c8 <NVIC_EncodePriority>:
{
 80194c8:	b480      	push	{r7}
 80194ca:	b089      	sub	sp, #36	@ 0x24
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	60f8      	str	r0, [r7, #12]
 80194d0:	60b9      	str	r1, [r7, #8]
 80194d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	f003 0307 	and.w	r3, r3, #7
 80194da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80194dc:	69fb      	ldr	r3, [r7, #28]
 80194de:	f1c3 0307 	rsb	r3, r3, #7
 80194e2:	2b04      	cmp	r3, #4
 80194e4:	bf28      	it	cs
 80194e6:	2304      	movcs	r3, #4
 80194e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80194ea:	69fb      	ldr	r3, [r7, #28]
 80194ec:	3304      	adds	r3, #4
 80194ee:	2b06      	cmp	r3, #6
 80194f0:	d902      	bls.n	80194f8 <NVIC_EncodePriority+0x30>
 80194f2:	69fb      	ldr	r3, [r7, #28]
 80194f4:	3b03      	subs	r3, #3
 80194f6:	e000      	b.n	80194fa <NVIC_EncodePriority+0x32>
 80194f8:	2300      	movs	r3, #0
 80194fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80194fc:	f04f 32ff 	mov.w	r2, #4294967295
 8019500:	69bb      	ldr	r3, [r7, #24]
 8019502:	fa02 f303 	lsl.w	r3, r2, r3
 8019506:	43da      	mvns	r2, r3
 8019508:	68bb      	ldr	r3, [r7, #8]
 801950a:	401a      	ands	r2, r3
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019510:	f04f 31ff 	mov.w	r1, #4294967295
 8019514:	697b      	ldr	r3, [r7, #20]
 8019516:	fa01 f303 	lsl.w	r3, r1, r3
 801951a:	43d9      	mvns	r1, r3
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019520:	4313      	orrs	r3, r2
}
 8019522:	4618      	mov	r0, r3
 8019524:	3724      	adds	r7, #36	@ 0x24
 8019526:	46bd      	mov	sp, r7
 8019528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952c:	4770      	bx	lr

0801952e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801952e:	b580      	push	{r7, lr}
 8019530:	b082      	sub	sp, #8
 8019532:	af00      	add	r7, sp, #0
 8019534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019536:	6878      	ldr	r0, [r7, #4]
 8019538:	f7ff ff28 	bl	801938c <__NVIC_SetPriorityGrouping>
}
 801953c:	bf00      	nop
 801953e:	3708      	adds	r7, #8
 8019540:	46bd      	mov	sp, r7
 8019542:	bd80      	pop	{r7, pc}

08019544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b086      	sub	sp, #24
 8019548:	af00      	add	r7, sp, #0
 801954a:	4603      	mov	r3, r0
 801954c:	60b9      	str	r1, [r7, #8]
 801954e:	607a      	str	r2, [r7, #4]
 8019550:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019552:	f7ff ff3f 	bl	80193d4 <__NVIC_GetPriorityGrouping>
 8019556:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019558:	687a      	ldr	r2, [r7, #4]
 801955a:	68b9      	ldr	r1, [r7, #8]
 801955c:	6978      	ldr	r0, [r7, #20]
 801955e:	f7ff ffb3 	bl	80194c8 <NVIC_EncodePriority>
 8019562:	4602      	mov	r2, r0
 8019564:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019568:	4611      	mov	r1, r2
 801956a:	4618      	mov	r0, r3
 801956c:	f7ff ff82 	bl	8019474 <__NVIC_SetPriority>
}
 8019570:	bf00      	nop
 8019572:	3718      	adds	r7, #24
 8019574:	46bd      	mov	sp, r7
 8019576:	bd80      	pop	{r7, pc}

08019578 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019578:	b580      	push	{r7, lr}
 801957a:	b082      	sub	sp, #8
 801957c:	af00      	add	r7, sp, #0
 801957e:	4603      	mov	r3, r0
 8019580:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019586:	4618      	mov	r0, r3
 8019588:	f7ff ff32 	bl	80193f0 <__NVIC_EnableIRQ>
}
 801958c:	bf00      	nop
 801958e:	3708      	adds	r7, #8
 8019590:	46bd      	mov	sp, r7
 8019592:	bd80      	pop	{r7, pc}

08019594 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b082      	sub	sp, #8
 8019598:	af00      	add	r7, sp, #0
 801959a:	4603      	mov	r3, r0
 801959c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801959e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80195a2:	4618      	mov	r0, r3
 80195a4:	f7ff ff42 	bl	801942c <__NVIC_DisableIRQ>
}
 80195a8:	bf00      	nop
 80195aa:	3708      	adds	r7, #8
 80195ac:	46bd      	mov	sp, r7
 80195ae:	bd80      	pop	{r7, pc}

080195b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80195b0:	b480      	push	{r7}
 80195b2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80195b4:	f3bf 8f5f 	dmb	sy
}
 80195b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80195ba:	4b07      	ldr	r3, [pc, #28]	@ (80195d8 <HAL_MPU_Disable+0x28>)
 80195bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195be:	4a06      	ldr	r2, [pc, #24]	@ (80195d8 <HAL_MPU_Disable+0x28>)
 80195c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80195c4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80195c6:	4b05      	ldr	r3, [pc, #20]	@ (80195dc <HAL_MPU_Disable+0x2c>)
 80195c8:	2200      	movs	r2, #0
 80195ca:	605a      	str	r2, [r3, #4]
}
 80195cc:	bf00      	nop
 80195ce:	46bd      	mov	sp, r7
 80195d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d4:	4770      	bx	lr
 80195d6:	bf00      	nop
 80195d8:	e000ed00 	.word	0xe000ed00
 80195dc:	e000ed90 	.word	0xe000ed90

080195e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80195e0:	b480      	push	{r7}
 80195e2:	b083      	sub	sp, #12
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80195e8:	4a0b      	ldr	r2, [pc, #44]	@ (8019618 <HAL_MPU_Enable+0x38>)
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	f043 0301 	orr.w	r3, r3, #1
 80195f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80195f2:	4b0a      	ldr	r3, [pc, #40]	@ (801961c <HAL_MPU_Enable+0x3c>)
 80195f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195f6:	4a09      	ldr	r2, [pc, #36]	@ (801961c <HAL_MPU_Enable+0x3c>)
 80195f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80195fc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80195fe:	f3bf 8f4f 	dsb	sy
}
 8019602:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8019604:	f3bf 8f6f 	isb	sy
}
 8019608:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801960a:	bf00      	nop
 801960c:	370c      	adds	r7, #12
 801960e:	46bd      	mov	sp, r7
 8019610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019614:	4770      	bx	lr
 8019616:	bf00      	nop
 8019618:	e000ed90 	.word	0xe000ed90
 801961c:	e000ed00 	.word	0xe000ed00

08019620 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8019620:	b480      	push	{r7}
 8019622:	b083      	sub	sp, #12
 8019624:	af00      	add	r7, sp, #0
 8019626:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	785a      	ldrb	r2, [r3, #1]
 801962c:	4b1b      	ldr	r3, [pc, #108]	@ (801969c <HAL_MPU_ConfigRegion+0x7c>)
 801962e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8019630:	4b1a      	ldr	r3, [pc, #104]	@ (801969c <HAL_MPU_ConfigRegion+0x7c>)
 8019632:	691b      	ldr	r3, [r3, #16]
 8019634:	4a19      	ldr	r2, [pc, #100]	@ (801969c <HAL_MPU_ConfigRegion+0x7c>)
 8019636:	f023 0301 	bic.w	r3, r3, #1
 801963a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801963c:	4a17      	ldr	r2, [pc, #92]	@ (801969c <HAL_MPU_ConfigRegion+0x7c>)
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	685b      	ldr	r3, [r3, #4]
 8019642:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	7b1b      	ldrb	r3, [r3, #12]
 8019648:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	7adb      	ldrb	r3, [r3, #11]
 801964e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019650:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	7a9b      	ldrb	r3, [r3, #10]
 8019656:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019658:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	7b5b      	ldrb	r3, [r3, #13]
 801965e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019660:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	7b9b      	ldrb	r3, [r3, #14]
 8019666:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019668:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	7bdb      	ldrb	r3, [r3, #15]
 801966e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019670:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	7a5b      	ldrb	r3, [r3, #9]
 8019676:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019678:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	7a1b      	ldrb	r3, [r3, #8]
 801967e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019680:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8019682:	687a      	ldr	r2, [r7, #4]
 8019684:	7812      	ldrb	r2, [r2, #0]
 8019686:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019688:	4a04      	ldr	r2, [pc, #16]	@ (801969c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801968a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801968c:	6113      	str	r3, [r2, #16]
}
 801968e:	bf00      	nop
 8019690:	370c      	adds	r7, #12
 8019692:	46bd      	mov	sp, r7
 8019694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019698:	4770      	bx	lr
 801969a:	bf00      	nop
 801969c:	e000ed90 	.word	0xe000ed90

080196a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80196a0:	b480      	push	{r7}
 80196a2:	b089      	sub	sp, #36	@ 0x24
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	6078      	str	r0, [r7, #4]
 80196a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80196aa:	2300      	movs	r3, #0
 80196ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80196ae:	4b89      	ldr	r3, [pc, #548]	@ (80198d4 <HAL_GPIO_Init+0x234>)
 80196b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80196b2:	e194      	b.n	80199de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80196b4:	683b      	ldr	r3, [r7, #0]
 80196b6:	681a      	ldr	r2, [r3, #0]
 80196b8:	2101      	movs	r1, #1
 80196ba:	69fb      	ldr	r3, [r7, #28]
 80196bc:	fa01 f303 	lsl.w	r3, r1, r3
 80196c0:	4013      	ands	r3, r2
 80196c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80196c4:	693b      	ldr	r3, [r7, #16]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	f000 8186 	beq.w	80199d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80196cc:	683b      	ldr	r3, [r7, #0]
 80196ce:	685b      	ldr	r3, [r3, #4]
 80196d0:	f003 0303 	and.w	r3, r3, #3
 80196d4:	2b01      	cmp	r3, #1
 80196d6:	d005      	beq.n	80196e4 <HAL_GPIO_Init+0x44>
 80196d8:	683b      	ldr	r3, [r7, #0]
 80196da:	685b      	ldr	r3, [r3, #4]
 80196dc:	f003 0303 	and.w	r3, r3, #3
 80196e0:	2b02      	cmp	r3, #2
 80196e2:	d130      	bne.n	8019746 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	689b      	ldr	r3, [r3, #8]
 80196e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80196ea:	69fb      	ldr	r3, [r7, #28]
 80196ec:	005b      	lsls	r3, r3, #1
 80196ee:	2203      	movs	r2, #3
 80196f0:	fa02 f303 	lsl.w	r3, r2, r3
 80196f4:	43db      	mvns	r3, r3
 80196f6:	69ba      	ldr	r2, [r7, #24]
 80196f8:	4013      	ands	r3, r2
 80196fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80196fc:	683b      	ldr	r3, [r7, #0]
 80196fe:	68da      	ldr	r2, [r3, #12]
 8019700:	69fb      	ldr	r3, [r7, #28]
 8019702:	005b      	lsls	r3, r3, #1
 8019704:	fa02 f303 	lsl.w	r3, r2, r3
 8019708:	69ba      	ldr	r2, [r7, #24]
 801970a:	4313      	orrs	r3, r2
 801970c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	69ba      	ldr	r2, [r7, #24]
 8019712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	685b      	ldr	r3, [r3, #4]
 8019718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801971a:	2201      	movs	r2, #1
 801971c:	69fb      	ldr	r3, [r7, #28]
 801971e:	fa02 f303 	lsl.w	r3, r2, r3
 8019722:	43db      	mvns	r3, r3
 8019724:	69ba      	ldr	r2, [r7, #24]
 8019726:	4013      	ands	r3, r2
 8019728:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801972a:	683b      	ldr	r3, [r7, #0]
 801972c:	685b      	ldr	r3, [r3, #4]
 801972e:	091b      	lsrs	r3, r3, #4
 8019730:	f003 0201 	and.w	r2, r3, #1
 8019734:	69fb      	ldr	r3, [r7, #28]
 8019736:	fa02 f303 	lsl.w	r3, r2, r3
 801973a:	69ba      	ldr	r2, [r7, #24]
 801973c:	4313      	orrs	r3, r2
 801973e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	69ba      	ldr	r2, [r7, #24]
 8019744:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019746:	683b      	ldr	r3, [r7, #0]
 8019748:	685b      	ldr	r3, [r3, #4]
 801974a:	f003 0303 	and.w	r3, r3, #3
 801974e:	2b03      	cmp	r3, #3
 8019750:	d017      	beq.n	8019782 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	68db      	ldr	r3, [r3, #12]
 8019756:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8019758:	69fb      	ldr	r3, [r7, #28]
 801975a:	005b      	lsls	r3, r3, #1
 801975c:	2203      	movs	r2, #3
 801975e:	fa02 f303 	lsl.w	r3, r2, r3
 8019762:	43db      	mvns	r3, r3
 8019764:	69ba      	ldr	r2, [r7, #24]
 8019766:	4013      	ands	r3, r2
 8019768:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	689a      	ldr	r2, [r3, #8]
 801976e:	69fb      	ldr	r3, [r7, #28]
 8019770:	005b      	lsls	r3, r3, #1
 8019772:	fa02 f303 	lsl.w	r3, r2, r3
 8019776:	69ba      	ldr	r2, [r7, #24]
 8019778:	4313      	orrs	r3, r2
 801977a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	69ba      	ldr	r2, [r7, #24]
 8019780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019782:	683b      	ldr	r3, [r7, #0]
 8019784:	685b      	ldr	r3, [r3, #4]
 8019786:	f003 0303 	and.w	r3, r3, #3
 801978a:	2b02      	cmp	r3, #2
 801978c:	d123      	bne.n	80197d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801978e:	69fb      	ldr	r3, [r7, #28]
 8019790:	08da      	lsrs	r2, r3, #3
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	3208      	adds	r2, #8
 8019796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801979a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801979c:	69fb      	ldr	r3, [r7, #28]
 801979e:	f003 0307 	and.w	r3, r3, #7
 80197a2:	009b      	lsls	r3, r3, #2
 80197a4:	220f      	movs	r2, #15
 80197a6:	fa02 f303 	lsl.w	r3, r2, r3
 80197aa:	43db      	mvns	r3, r3
 80197ac:	69ba      	ldr	r2, [r7, #24]
 80197ae:	4013      	ands	r3, r2
 80197b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80197b2:	683b      	ldr	r3, [r7, #0]
 80197b4:	691a      	ldr	r2, [r3, #16]
 80197b6:	69fb      	ldr	r3, [r7, #28]
 80197b8:	f003 0307 	and.w	r3, r3, #7
 80197bc:	009b      	lsls	r3, r3, #2
 80197be:	fa02 f303 	lsl.w	r3, r2, r3
 80197c2:	69ba      	ldr	r2, [r7, #24]
 80197c4:	4313      	orrs	r3, r2
 80197c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80197c8:	69fb      	ldr	r3, [r7, #28]
 80197ca:	08da      	lsrs	r2, r3, #3
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	3208      	adds	r2, #8
 80197d0:	69b9      	ldr	r1, [r7, #24]
 80197d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80197dc:	69fb      	ldr	r3, [r7, #28]
 80197de:	005b      	lsls	r3, r3, #1
 80197e0:	2203      	movs	r2, #3
 80197e2:	fa02 f303 	lsl.w	r3, r2, r3
 80197e6:	43db      	mvns	r3, r3
 80197e8:	69ba      	ldr	r2, [r7, #24]
 80197ea:	4013      	ands	r3, r2
 80197ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80197ee:	683b      	ldr	r3, [r7, #0]
 80197f0:	685b      	ldr	r3, [r3, #4]
 80197f2:	f003 0203 	and.w	r2, r3, #3
 80197f6:	69fb      	ldr	r3, [r7, #28]
 80197f8:	005b      	lsls	r3, r3, #1
 80197fa:	fa02 f303 	lsl.w	r3, r2, r3
 80197fe:	69ba      	ldr	r2, [r7, #24]
 8019800:	4313      	orrs	r3, r2
 8019802:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	69ba      	ldr	r2, [r7, #24]
 8019808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801980a:	683b      	ldr	r3, [r7, #0]
 801980c:	685b      	ldr	r3, [r3, #4]
 801980e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8019812:	2b00      	cmp	r3, #0
 8019814:	f000 80e0 	beq.w	80199d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019818:	4b2f      	ldr	r3, [pc, #188]	@ (80198d8 <HAL_GPIO_Init+0x238>)
 801981a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801981e:	4a2e      	ldr	r2, [pc, #184]	@ (80198d8 <HAL_GPIO_Init+0x238>)
 8019820:	f043 0302 	orr.w	r3, r3, #2
 8019824:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8019828:	4b2b      	ldr	r3, [pc, #172]	@ (80198d8 <HAL_GPIO_Init+0x238>)
 801982a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801982e:	f003 0302 	and.w	r3, r3, #2
 8019832:	60fb      	str	r3, [r7, #12]
 8019834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8019836:	4a29      	ldr	r2, [pc, #164]	@ (80198dc <HAL_GPIO_Init+0x23c>)
 8019838:	69fb      	ldr	r3, [r7, #28]
 801983a:	089b      	lsrs	r3, r3, #2
 801983c:	3302      	adds	r3, #2
 801983e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8019844:	69fb      	ldr	r3, [r7, #28]
 8019846:	f003 0303 	and.w	r3, r3, #3
 801984a:	009b      	lsls	r3, r3, #2
 801984c:	220f      	movs	r2, #15
 801984e:	fa02 f303 	lsl.w	r3, r2, r3
 8019852:	43db      	mvns	r3, r3
 8019854:	69ba      	ldr	r2, [r7, #24]
 8019856:	4013      	ands	r3, r2
 8019858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	4a20      	ldr	r2, [pc, #128]	@ (80198e0 <HAL_GPIO_Init+0x240>)
 801985e:	4293      	cmp	r3, r2
 8019860:	d052      	beq.n	8019908 <HAL_GPIO_Init+0x268>
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	4a1f      	ldr	r2, [pc, #124]	@ (80198e4 <HAL_GPIO_Init+0x244>)
 8019866:	4293      	cmp	r3, r2
 8019868:	d031      	beq.n	80198ce <HAL_GPIO_Init+0x22e>
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	4a1e      	ldr	r2, [pc, #120]	@ (80198e8 <HAL_GPIO_Init+0x248>)
 801986e:	4293      	cmp	r3, r2
 8019870:	d02b      	beq.n	80198ca <HAL_GPIO_Init+0x22a>
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	4a1d      	ldr	r2, [pc, #116]	@ (80198ec <HAL_GPIO_Init+0x24c>)
 8019876:	4293      	cmp	r3, r2
 8019878:	d025      	beq.n	80198c6 <HAL_GPIO_Init+0x226>
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	4a1c      	ldr	r2, [pc, #112]	@ (80198f0 <HAL_GPIO_Init+0x250>)
 801987e:	4293      	cmp	r3, r2
 8019880:	d01f      	beq.n	80198c2 <HAL_GPIO_Init+0x222>
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	4a1b      	ldr	r2, [pc, #108]	@ (80198f4 <HAL_GPIO_Init+0x254>)
 8019886:	4293      	cmp	r3, r2
 8019888:	d019      	beq.n	80198be <HAL_GPIO_Init+0x21e>
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	4a1a      	ldr	r2, [pc, #104]	@ (80198f8 <HAL_GPIO_Init+0x258>)
 801988e:	4293      	cmp	r3, r2
 8019890:	d013      	beq.n	80198ba <HAL_GPIO_Init+0x21a>
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	4a19      	ldr	r2, [pc, #100]	@ (80198fc <HAL_GPIO_Init+0x25c>)
 8019896:	4293      	cmp	r3, r2
 8019898:	d00d      	beq.n	80198b6 <HAL_GPIO_Init+0x216>
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	4a18      	ldr	r2, [pc, #96]	@ (8019900 <HAL_GPIO_Init+0x260>)
 801989e:	4293      	cmp	r3, r2
 80198a0:	d007      	beq.n	80198b2 <HAL_GPIO_Init+0x212>
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	4a17      	ldr	r2, [pc, #92]	@ (8019904 <HAL_GPIO_Init+0x264>)
 80198a6:	4293      	cmp	r3, r2
 80198a8:	d101      	bne.n	80198ae <HAL_GPIO_Init+0x20e>
 80198aa:	2309      	movs	r3, #9
 80198ac:	e02d      	b.n	801990a <HAL_GPIO_Init+0x26a>
 80198ae:	230a      	movs	r3, #10
 80198b0:	e02b      	b.n	801990a <HAL_GPIO_Init+0x26a>
 80198b2:	2308      	movs	r3, #8
 80198b4:	e029      	b.n	801990a <HAL_GPIO_Init+0x26a>
 80198b6:	2307      	movs	r3, #7
 80198b8:	e027      	b.n	801990a <HAL_GPIO_Init+0x26a>
 80198ba:	2306      	movs	r3, #6
 80198bc:	e025      	b.n	801990a <HAL_GPIO_Init+0x26a>
 80198be:	2305      	movs	r3, #5
 80198c0:	e023      	b.n	801990a <HAL_GPIO_Init+0x26a>
 80198c2:	2304      	movs	r3, #4
 80198c4:	e021      	b.n	801990a <HAL_GPIO_Init+0x26a>
 80198c6:	2303      	movs	r3, #3
 80198c8:	e01f      	b.n	801990a <HAL_GPIO_Init+0x26a>
 80198ca:	2302      	movs	r3, #2
 80198cc:	e01d      	b.n	801990a <HAL_GPIO_Init+0x26a>
 80198ce:	2301      	movs	r3, #1
 80198d0:	e01b      	b.n	801990a <HAL_GPIO_Init+0x26a>
 80198d2:	bf00      	nop
 80198d4:	58000080 	.word	0x58000080
 80198d8:	58024400 	.word	0x58024400
 80198dc:	58000400 	.word	0x58000400
 80198e0:	58020000 	.word	0x58020000
 80198e4:	58020400 	.word	0x58020400
 80198e8:	58020800 	.word	0x58020800
 80198ec:	58020c00 	.word	0x58020c00
 80198f0:	58021000 	.word	0x58021000
 80198f4:	58021400 	.word	0x58021400
 80198f8:	58021800 	.word	0x58021800
 80198fc:	58021c00 	.word	0x58021c00
 8019900:	58022000 	.word	0x58022000
 8019904:	58022400 	.word	0x58022400
 8019908:	2300      	movs	r3, #0
 801990a:	69fa      	ldr	r2, [r7, #28]
 801990c:	f002 0203 	and.w	r2, r2, #3
 8019910:	0092      	lsls	r2, r2, #2
 8019912:	4093      	lsls	r3, r2
 8019914:	69ba      	ldr	r2, [r7, #24]
 8019916:	4313      	orrs	r3, r2
 8019918:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801991a:	4938      	ldr	r1, [pc, #224]	@ (80199fc <HAL_GPIO_Init+0x35c>)
 801991c:	69fb      	ldr	r3, [r7, #28]
 801991e:	089b      	lsrs	r3, r3, #2
 8019920:	3302      	adds	r3, #2
 8019922:	69ba      	ldr	r2, [r7, #24]
 8019924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8019928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8019930:	693b      	ldr	r3, [r7, #16]
 8019932:	43db      	mvns	r3, r3
 8019934:	69ba      	ldr	r2, [r7, #24]
 8019936:	4013      	ands	r3, r2
 8019938:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801993a:	683b      	ldr	r3, [r7, #0]
 801993c:	685b      	ldr	r3, [r3, #4]
 801993e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019942:	2b00      	cmp	r3, #0
 8019944:	d003      	beq.n	801994e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8019946:	69ba      	ldr	r2, [r7, #24]
 8019948:	693b      	ldr	r3, [r7, #16]
 801994a:	4313      	orrs	r3, r2
 801994c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801994e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8019952:	69bb      	ldr	r3, [r7, #24]
 8019954:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8019956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801995a:	685b      	ldr	r3, [r3, #4]
 801995c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801995e:	693b      	ldr	r3, [r7, #16]
 8019960:	43db      	mvns	r3, r3
 8019962:	69ba      	ldr	r2, [r7, #24]
 8019964:	4013      	ands	r3, r2
 8019966:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019968:	683b      	ldr	r3, [r7, #0]
 801996a:	685b      	ldr	r3, [r3, #4]
 801996c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019970:	2b00      	cmp	r3, #0
 8019972:	d003      	beq.n	801997c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019974:	69ba      	ldr	r2, [r7, #24]
 8019976:	693b      	ldr	r3, [r7, #16]
 8019978:	4313      	orrs	r3, r2
 801997a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801997c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8019980:	69bb      	ldr	r3, [r7, #24]
 8019982:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8019984:	697b      	ldr	r3, [r7, #20]
 8019986:	685b      	ldr	r3, [r3, #4]
 8019988:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801998a:	693b      	ldr	r3, [r7, #16]
 801998c:	43db      	mvns	r3, r3
 801998e:	69ba      	ldr	r2, [r7, #24]
 8019990:	4013      	ands	r3, r2
 8019992:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019994:	683b      	ldr	r3, [r7, #0]
 8019996:	685b      	ldr	r3, [r3, #4]
 8019998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801999c:	2b00      	cmp	r3, #0
 801999e:	d003      	beq.n	80199a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80199a0:	69ba      	ldr	r2, [r7, #24]
 80199a2:	693b      	ldr	r3, [r7, #16]
 80199a4:	4313      	orrs	r3, r2
 80199a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80199a8:	697b      	ldr	r3, [r7, #20]
 80199aa:	69ba      	ldr	r2, [r7, #24]
 80199ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80199ae:	697b      	ldr	r3, [r7, #20]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80199b4:	693b      	ldr	r3, [r7, #16]
 80199b6:	43db      	mvns	r3, r3
 80199b8:	69ba      	ldr	r2, [r7, #24]
 80199ba:	4013      	ands	r3, r2
 80199bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80199be:	683b      	ldr	r3, [r7, #0]
 80199c0:	685b      	ldr	r3, [r3, #4]
 80199c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d003      	beq.n	80199d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80199ca:	69ba      	ldr	r2, [r7, #24]
 80199cc:	693b      	ldr	r3, [r7, #16]
 80199ce:	4313      	orrs	r3, r2
 80199d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80199d2:	697b      	ldr	r3, [r7, #20]
 80199d4:	69ba      	ldr	r2, [r7, #24]
 80199d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80199d8:	69fb      	ldr	r3, [r7, #28]
 80199da:	3301      	adds	r3, #1
 80199dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80199de:	683b      	ldr	r3, [r7, #0]
 80199e0:	681a      	ldr	r2, [r3, #0]
 80199e2:	69fb      	ldr	r3, [r7, #28]
 80199e4:	fa22 f303 	lsr.w	r3, r2, r3
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	f47f ae63 	bne.w	80196b4 <HAL_GPIO_Init+0x14>
  }
}
 80199ee:	bf00      	nop
 80199f0:	bf00      	nop
 80199f2:	3724      	adds	r7, #36	@ 0x24
 80199f4:	46bd      	mov	sp, r7
 80199f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199fa:	4770      	bx	lr
 80199fc:	58000400 	.word	0x58000400

08019a00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8019a00:	b480      	push	{r7}
 8019a02:	b087      	sub	sp, #28
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
 8019a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8019a0e:	4b75      	ldr	r3, [pc, #468]	@ (8019be4 <HAL_GPIO_DeInit+0x1e4>)
 8019a10:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8019a12:	e0d9      	b.n	8019bc8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8019a14:	2201      	movs	r2, #1
 8019a16:	697b      	ldr	r3, [r7, #20]
 8019a18:	fa02 f303 	lsl.w	r3, r2, r3
 8019a1c:	683a      	ldr	r2, [r7, #0]
 8019a1e:	4013      	ands	r3, r2
 8019a20:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	f000 80cc 	beq.w	8019bc2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8019a2a:	4a6f      	ldr	r2, [pc, #444]	@ (8019be8 <HAL_GPIO_DeInit+0x1e8>)
 8019a2c:	697b      	ldr	r3, [r7, #20]
 8019a2e:	089b      	lsrs	r3, r3, #2
 8019a30:	3302      	adds	r3, #2
 8019a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019a36:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8019a38:	697b      	ldr	r3, [r7, #20]
 8019a3a:	f003 0303 	and.w	r3, r3, #3
 8019a3e:	009b      	lsls	r3, r3, #2
 8019a40:	220f      	movs	r2, #15
 8019a42:	fa02 f303 	lsl.w	r3, r2, r3
 8019a46:	68ba      	ldr	r2, [r7, #8]
 8019a48:	4013      	ands	r3, r2
 8019a4a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	4a67      	ldr	r2, [pc, #412]	@ (8019bec <HAL_GPIO_DeInit+0x1ec>)
 8019a50:	4293      	cmp	r3, r2
 8019a52:	d037      	beq.n	8019ac4 <HAL_GPIO_DeInit+0xc4>
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	4a66      	ldr	r2, [pc, #408]	@ (8019bf0 <HAL_GPIO_DeInit+0x1f0>)
 8019a58:	4293      	cmp	r3, r2
 8019a5a:	d031      	beq.n	8019ac0 <HAL_GPIO_DeInit+0xc0>
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	4a65      	ldr	r2, [pc, #404]	@ (8019bf4 <HAL_GPIO_DeInit+0x1f4>)
 8019a60:	4293      	cmp	r3, r2
 8019a62:	d02b      	beq.n	8019abc <HAL_GPIO_DeInit+0xbc>
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	4a64      	ldr	r2, [pc, #400]	@ (8019bf8 <HAL_GPIO_DeInit+0x1f8>)
 8019a68:	4293      	cmp	r3, r2
 8019a6a:	d025      	beq.n	8019ab8 <HAL_GPIO_DeInit+0xb8>
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	4a63      	ldr	r2, [pc, #396]	@ (8019bfc <HAL_GPIO_DeInit+0x1fc>)
 8019a70:	4293      	cmp	r3, r2
 8019a72:	d01f      	beq.n	8019ab4 <HAL_GPIO_DeInit+0xb4>
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	4a62      	ldr	r2, [pc, #392]	@ (8019c00 <HAL_GPIO_DeInit+0x200>)
 8019a78:	4293      	cmp	r3, r2
 8019a7a:	d019      	beq.n	8019ab0 <HAL_GPIO_DeInit+0xb0>
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	4a61      	ldr	r2, [pc, #388]	@ (8019c04 <HAL_GPIO_DeInit+0x204>)
 8019a80:	4293      	cmp	r3, r2
 8019a82:	d013      	beq.n	8019aac <HAL_GPIO_DeInit+0xac>
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	4a60      	ldr	r2, [pc, #384]	@ (8019c08 <HAL_GPIO_DeInit+0x208>)
 8019a88:	4293      	cmp	r3, r2
 8019a8a:	d00d      	beq.n	8019aa8 <HAL_GPIO_DeInit+0xa8>
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	4a5f      	ldr	r2, [pc, #380]	@ (8019c0c <HAL_GPIO_DeInit+0x20c>)
 8019a90:	4293      	cmp	r3, r2
 8019a92:	d007      	beq.n	8019aa4 <HAL_GPIO_DeInit+0xa4>
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	4a5e      	ldr	r2, [pc, #376]	@ (8019c10 <HAL_GPIO_DeInit+0x210>)
 8019a98:	4293      	cmp	r3, r2
 8019a9a:	d101      	bne.n	8019aa0 <HAL_GPIO_DeInit+0xa0>
 8019a9c:	2309      	movs	r3, #9
 8019a9e:	e012      	b.n	8019ac6 <HAL_GPIO_DeInit+0xc6>
 8019aa0:	230a      	movs	r3, #10
 8019aa2:	e010      	b.n	8019ac6 <HAL_GPIO_DeInit+0xc6>
 8019aa4:	2308      	movs	r3, #8
 8019aa6:	e00e      	b.n	8019ac6 <HAL_GPIO_DeInit+0xc6>
 8019aa8:	2307      	movs	r3, #7
 8019aaa:	e00c      	b.n	8019ac6 <HAL_GPIO_DeInit+0xc6>
 8019aac:	2306      	movs	r3, #6
 8019aae:	e00a      	b.n	8019ac6 <HAL_GPIO_DeInit+0xc6>
 8019ab0:	2305      	movs	r3, #5
 8019ab2:	e008      	b.n	8019ac6 <HAL_GPIO_DeInit+0xc6>
 8019ab4:	2304      	movs	r3, #4
 8019ab6:	e006      	b.n	8019ac6 <HAL_GPIO_DeInit+0xc6>
 8019ab8:	2303      	movs	r3, #3
 8019aba:	e004      	b.n	8019ac6 <HAL_GPIO_DeInit+0xc6>
 8019abc:	2302      	movs	r3, #2
 8019abe:	e002      	b.n	8019ac6 <HAL_GPIO_DeInit+0xc6>
 8019ac0:	2301      	movs	r3, #1
 8019ac2:	e000      	b.n	8019ac6 <HAL_GPIO_DeInit+0xc6>
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	697a      	ldr	r2, [r7, #20]
 8019ac8:	f002 0203 	and.w	r2, r2, #3
 8019acc:	0092      	lsls	r2, r2, #2
 8019ace:	4093      	lsls	r3, r2
 8019ad0:	68ba      	ldr	r2, [r7, #8]
 8019ad2:	429a      	cmp	r2, r3
 8019ad4:	d136      	bne.n	8019b44 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8019ad6:	693b      	ldr	r3, [r7, #16]
 8019ad8:	681a      	ldr	r2, [r3, #0]
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	43db      	mvns	r3, r3
 8019ade:	401a      	ands	r2, r3
 8019ae0:	693b      	ldr	r3, [r7, #16]
 8019ae2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8019ae4:	693b      	ldr	r3, [r7, #16]
 8019ae6:	685a      	ldr	r2, [r3, #4]
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	43db      	mvns	r3, r3
 8019aec:	401a      	ands	r2, r3
 8019aee:	693b      	ldr	r3, [r7, #16]
 8019af0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8019af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8019af6:	685a      	ldr	r2, [r3, #4]
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	43db      	mvns	r3, r3
 8019afc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8019b00:	4013      	ands	r3, r2
 8019b02:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8019b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8019b08:	681a      	ldr	r2, [r3, #0]
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	43db      	mvns	r3, r3
 8019b0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8019b12:	4013      	ands	r3, r2
 8019b14:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8019b16:	697b      	ldr	r3, [r7, #20]
 8019b18:	f003 0303 	and.w	r3, r3, #3
 8019b1c:	009b      	lsls	r3, r3, #2
 8019b1e:	220f      	movs	r2, #15
 8019b20:	fa02 f303 	lsl.w	r3, r2, r3
 8019b24:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8019b26:	4a30      	ldr	r2, [pc, #192]	@ (8019be8 <HAL_GPIO_DeInit+0x1e8>)
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	089b      	lsrs	r3, r3, #2
 8019b2c:	3302      	adds	r3, #2
 8019b2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8019b32:	68bb      	ldr	r3, [r7, #8]
 8019b34:	43da      	mvns	r2, r3
 8019b36:	482c      	ldr	r0, [pc, #176]	@ (8019be8 <HAL_GPIO_DeInit+0x1e8>)
 8019b38:	697b      	ldr	r3, [r7, #20]
 8019b3a:	089b      	lsrs	r3, r3, #2
 8019b3c:	400a      	ands	r2, r1
 8019b3e:	3302      	adds	r3, #2
 8019b40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	681a      	ldr	r2, [r3, #0]
 8019b48:	697b      	ldr	r3, [r7, #20]
 8019b4a:	005b      	lsls	r3, r3, #1
 8019b4c:	2103      	movs	r1, #3
 8019b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8019b52:	431a      	orrs	r2, r3
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8019b58:	697b      	ldr	r3, [r7, #20]
 8019b5a:	08da      	lsrs	r2, r3, #3
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	3208      	adds	r2, #8
 8019b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019b64:	697b      	ldr	r3, [r7, #20]
 8019b66:	f003 0307 	and.w	r3, r3, #7
 8019b6a:	009b      	lsls	r3, r3, #2
 8019b6c:	220f      	movs	r2, #15
 8019b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8019b72:	43db      	mvns	r3, r3
 8019b74:	697a      	ldr	r2, [r7, #20]
 8019b76:	08d2      	lsrs	r2, r2, #3
 8019b78:	4019      	ands	r1, r3
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	3208      	adds	r2, #8
 8019b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	68da      	ldr	r2, [r3, #12]
 8019b86:	697b      	ldr	r3, [r7, #20]
 8019b88:	005b      	lsls	r3, r3, #1
 8019b8a:	2103      	movs	r1, #3
 8019b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8019b90:	43db      	mvns	r3, r3
 8019b92:	401a      	ands	r2, r3
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	685a      	ldr	r2, [r3, #4]
 8019b9c:	2101      	movs	r1, #1
 8019b9e:	697b      	ldr	r3, [r7, #20]
 8019ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8019ba4:	43db      	mvns	r3, r3
 8019ba6:	401a      	ands	r2, r3
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	689a      	ldr	r2, [r3, #8]
 8019bb0:	697b      	ldr	r3, [r7, #20]
 8019bb2:	005b      	lsls	r3, r3, #1
 8019bb4:	2103      	movs	r1, #3
 8019bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8019bba:	43db      	mvns	r3, r3
 8019bbc:	401a      	ands	r2, r3
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8019bc2:	697b      	ldr	r3, [r7, #20]
 8019bc4:	3301      	adds	r3, #1
 8019bc6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8019bc8:	683a      	ldr	r2, [r7, #0]
 8019bca:	697b      	ldr	r3, [r7, #20]
 8019bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	f47f af1f 	bne.w	8019a14 <HAL_GPIO_DeInit+0x14>
  }
}
 8019bd6:	bf00      	nop
 8019bd8:	bf00      	nop
 8019bda:	371c      	adds	r7, #28
 8019bdc:	46bd      	mov	sp, r7
 8019bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be2:	4770      	bx	lr
 8019be4:	58000080 	.word	0x58000080
 8019be8:	58000400 	.word	0x58000400
 8019bec:	58020000 	.word	0x58020000
 8019bf0:	58020400 	.word	0x58020400
 8019bf4:	58020800 	.word	0x58020800
 8019bf8:	58020c00 	.word	0x58020c00
 8019bfc:	58021000 	.word	0x58021000
 8019c00:	58021400 	.word	0x58021400
 8019c04:	58021800 	.word	0x58021800
 8019c08:	58021c00 	.word	0x58021c00
 8019c0c:	58022000 	.word	0x58022000
 8019c10:	58022400 	.word	0x58022400

08019c14 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8019c14:	b480      	push	{r7}
 8019c16:	b083      	sub	sp, #12
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8019c1c:	4a08      	ldr	r2, [pc, #32]	@ (8019c40 <HAL_HSEM_FastTake+0x2c>)
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	3320      	adds	r3, #32
 8019c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019c26:	4a07      	ldr	r2, [pc, #28]	@ (8019c44 <HAL_HSEM_FastTake+0x30>)
 8019c28:	4293      	cmp	r3, r2
 8019c2a:	d101      	bne.n	8019c30 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	e000      	b.n	8019c32 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8019c30:	2301      	movs	r3, #1
}
 8019c32:	4618      	mov	r0, r3
 8019c34:	370c      	adds	r7, #12
 8019c36:	46bd      	mov	sp, r7
 8019c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3c:	4770      	bx	lr
 8019c3e:	bf00      	nop
 8019c40:	58026400 	.word	0x58026400
 8019c44:	80000300 	.word	0x80000300

08019c48 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8019c48:	b480      	push	{r7}
 8019c4a:	b083      	sub	sp, #12
 8019c4c:	af00      	add	r7, sp, #0
 8019c4e:	6078      	str	r0, [r7, #4]
 8019c50:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8019c52:	4906      	ldr	r1, [pc, #24]	@ (8019c6c <HAL_HSEM_Release+0x24>)
 8019c54:	683b      	ldr	r3, [r7, #0]
 8019c56:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8019c60:	bf00      	nop
 8019c62:	370c      	adds	r7, #12
 8019c64:	46bd      	mov	sp, r7
 8019c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c6a:	4770      	bx	lr
 8019c6c:	58026400 	.word	0x58026400

08019c70 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b084      	sub	sp, #16
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019c78:	f7ff fb4c 	bl	8019314 <HAL_GetTick>
 8019c7c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d101      	bne.n	8019c88 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8019c84:	2301      	movs	r3, #1
 8019c86:	e03b      	b.n	8019d00 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	2200      	movs	r2, #0
 8019c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	2202      	movs	r2, #2
 8019c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	68da      	ldr	r2, [r3, #12]
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	f022 0201 	bic.w	r2, r2, #1
 8019ca6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8019ca8:	e00f      	b.n	8019cca <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8019caa:	f7ff fb33 	bl	8019314 <HAL_GetTick>
 8019cae:	4602      	mov	r2, r0
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	1ad3      	subs	r3, r2, r3
 8019cb4:	2b05      	cmp	r3, #5
 8019cb6:	d908      	bls.n	8019cca <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	2240      	movs	r2, #64	@ 0x40
 8019cbc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	2203      	movs	r2, #3
 8019cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8019cc6:	2301      	movs	r3, #1
 8019cc8:	e01a      	b.n	8019d00 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	68db      	ldr	r3, [r3, #12]
 8019cd0:	f003 0301 	and.w	r3, r3, #1
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d1e8      	bne.n	8019caa <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8019cd8:	6878      	ldr	r0, [r7, #4]
 8019cda:	f000 f9bb 	bl	801a054 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	2200      	movs	r2, #0
 8019cee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	2200      	movs	r2, #0
 8019cf4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	2201      	movs	r2, #1
 8019cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8019cfe:	2300      	movs	r3, #0
}
 8019d00:	4618      	mov	r0, r3
 8019d02:	3710      	adds	r7, #16
 8019d04:	46bd      	mov	sp, r7
 8019d06:	bd80      	pop	{r7, pc}

08019d08 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8019d08:	b480      	push	{r7}
 8019d0a:	b087      	sub	sp, #28
 8019d0c:	af00      	add	r7, sp, #0
 8019d0e:	60f8      	str	r0, [r7, #12]
 8019d10:	60b9      	str	r1, [r7, #8]
 8019d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8019d14:	2300      	movs	r3, #0
 8019d16:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d101      	bne.n	8019d22 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8019d1e:	2301      	movs	r3, #1
 8019d20:	e03e      	b.n	8019da0 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8019d28:	2b01      	cmp	r3, #1
 8019d2a:	d101      	bne.n	8019d30 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8019d2c:	2302      	movs	r3, #2
 8019d2e:	e037      	b.n	8019da0 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	2201      	movs	r2, #1
 8019d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019d3e:	b2db      	uxtb	r3, r3
 8019d40:	2b01      	cmp	r3, #1
 8019d42:	d126      	bne.n	8019d92 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	691b      	ldr	r3, [r3, #16]
 8019d4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d11c      	bne.n	8019d8c <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	68ba      	ldr	r2, [r7, #8]
 8019d58:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	687a      	ldr	r2, [r7, #4]
 8019d60:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8019d62:	68bb      	ldr	r3, [r7, #8]
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d108      	bne.n	8019d7a <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	691a      	ldr	r2, [r3, #16]
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8019d76:	611a      	str	r2, [r3, #16]
 8019d78:	e00d      	b.n	8019d96 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	691a      	ldr	r2, [r3, #16]
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8019d88:	611a      	str	r2, [r3, #16]
 8019d8a:	e004      	b.n	8019d96 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	75fb      	strb	r3, [r7, #23]
 8019d90:	e001      	b.n	8019d96 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8019d92:	2301      	movs	r3, #1
 8019d94:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	2200      	movs	r2, #0
 8019d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8019d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019da0:	4618      	mov	r0, r3
 8019da2:	371c      	adds	r7, #28
 8019da4:	46bd      	mov	sp, r7
 8019da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019daa:	4770      	bx	lr

08019dac <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b086      	sub	sp, #24
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8019db4:	2300      	movs	r3, #0
 8019db6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8019db8:	4b91      	ldr	r3, [pc, #580]	@ (801a000 <HAL_MDMA_IRQHandler+0x254>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	4a91      	ldr	r2, [pc, #580]	@ (801a004 <HAL_MDMA_IRQHandler+0x258>)
 8019dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8019dc2:	0a9b      	lsrs	r3, r3, #10
 8019dc4:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	461a      	mov	r2, r3
 8019dcc:	4b8e      	ldr	r3, [pc, #568]	@ (801a008 <HAL_MDMA_IRQHandler+0x25c>)
 8019dce:	4413      	add	r3, r2
 8019dd0:	099b      	lsrs	r3, r3, #6
 8019dd2:	f003 031f 	and.w	r3, r3, #31
 8019dd6:	2201      	movs	r2, #1
 8019dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8019ddc:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8019dde:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8019de2:	681a      	ldr	r2, [r3, #0]
 8019de4:	693b      	ldr	r3, [r7, #16]
 8019de6:	4013      	ands	r3, r2
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	f000 812d 	beq.w	801a048 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	f003 0301 	and.w	r3, r3, #1
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d054      	beq.n	8019ea6 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	68db      	ldr	r3, [r3, #12]
 8019e02:	f003 0302 	and.w	r3, r3, #2
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d04d      	beq.n	8019ea6 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	68da      	ldr	r2, [r3, #12]
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	f022 0202 	bic.w	r2, r2, #2
 8019e18:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	689b      	ldr	r3, [r3, #8]
 8019e20:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d106      	bne.n	8019e3a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019e30:	f043 0201 	orr.w	r2, r3, #1
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	669a      	str	r2, [r3, #104]	@ 0x68
 8019e38:	e005      	b.n	8019e46 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019e3e:	f043 0202 	orr.w	r2, r3, #2
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d005      	beq.n	8019e5c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019e54:	f043 0204 	orr.w	r2, r3, #4
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d005      	beq.n	8019e72 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019e6a:	f043 0208 	orr.w	r2, r3, #8
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d005      	beq.n	8019e88 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019e80:	f043 0210 	orr.w	r2, r3, #16
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d005      	beq.n	8019e9e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019e96:	f043 0220 	orr.w	r2, r3, #32
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	2201      	movs	r2, #1
 8019ea4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	f003 0310 	and.w	r3, r3, #16
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d012      	beq.n	8019eda <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	68db      	ldr	r3, [r3, #12]
 8019eba:	f003 0320 	and.w	r3, r3, #32
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d00b      	beq.n	8019eda <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	2210      	movs	r2, #16
 8019ec8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d003      	beq.n	8019eda <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019ed6:	6878      	ldr	r0, [r7, #4]
 8019ed8:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	f003 0308 	and.w	r3, r3, #8
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d012      	beq.n	8019f0e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	68db      	ldr	r3, [r3, #12]
 8019eee:	f003 0310 	and.w	r3, r3, #16
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d00b      	beq.n	8019f0e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	2208      	movs	r2, #8
 8019efc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d003      	beq.n	8019f0e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019f0a:	6878      	ldr	r0, [r7, #4]
 8019f0c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	f003 0304 	and.w	r3, r3, #4
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d012      	beq.n	8019f42 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	68db      	ldr	r3, [r3, #12]
 8019f22:	f003 0308 	and.w	r3, r3, #8
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d00b      	beq.n	8019f42 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	2204      	movs	r2, #4
 8019f30:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d003      	beq.n	8019f42 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f3e:	6878      	ldr	r0, [r7, #4]
 8019f40:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	f003 0302 	and.w	r3, r3, #2
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d039      	beq.n	8019fc4 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	68db      	ldr	r3, [r3, #12]
 8019f56:	f003 0304 	and.w	r3, r3, #4
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d032      	beq.n	8019fc4 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	68da      	ldr	r2, [r3, #12]
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8019f6c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019f74:	b2db      	uxtb	r3, r3
 8019f76:	2b04      	cmp	r3, #4
 8019f78:	d110      	bne.n	8019f9c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2200      	movs	r2, #0
 8019f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	2201      	movs	r2, #1
 8019f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d05c      	beq.n	801a04c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f96:	6878      	ldr	r0, [r7, #4]
 8019f98:	4798      	blx	r3
        }
        return;
 8019f9a:	e057      	b.n	801a04c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	2202      	movs	r2, #2
 8019fa2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	2200      	movs	r2, #0
 8019fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	2201      	movs	r2, #1
 8019fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d003      	beq.n	8019fc4 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019fc0:	6878      	ldr	r0, [r7, #4]
 8019fc2:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d040      	beq.n	801a04e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	2204      	movs	r2, #4
 8019fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	68da      	ldr	r2, [r3, #12]
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	f022 0201 	bic.w	r2, r2, #1
 8019fe2:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8019fe4:	68bb      	ldr	r3, [r7, #8]
 8019fe6:	3301      	adds	r3, #1
 8019fe8:	60bb      	str	r3, [r7, #8]
 8019fea:	697a      	ldr	r2, [r7, #20]
 8019fec:	429a      	cmp	r2, r3
 8019fee:	d30d      	bcc.n	801a00c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	68db      	ldr	r3, [r3, #12]
 8019ff6:	f003 0301 	and.w	r3, r3, #1
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d1f2      	bne.n	8019fe4 <HAL_MDMA_IRQHandler+0x238>
 8019ffe:	e006      	b.n	801a00e <HAL_MDMA_IRQHandler+0x262>
 801a000:	240148d8 	.word	0x240148d8
 801a004:	1b4e81b5 	.word	0x1b4e81b5
 801a008:	adffffc0 	.word	0xadffffc0
        break;
 801a00c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	2200      	movs	r2, #0
 801a012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	68db      	ldr	r3, [r3, #12]
 801a01c:	f003 0301 	and.w	r3, r3, #1
 801a020:	2b00      	cmp	r3, #0
 801a022:	d004      	beq.n	801a02e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	2203      	movs	r2, #3
 801a028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801a02c:	e003      	b.n	801a036 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	2201      	movs	r2, #1
 801a032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d007      	beq.n	801a04e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a042:	6878      	ldr	r0, [r7, #4]
 801a044:	4798      	blx	r3
 801a046:	e002      	b.n	801a04e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 801a048:	bf00      	nop
 801a04a:	e000      	b.n	801a04e <HAL_MDMA_IRQHandler+0x2a2>
        return;
 801a04c:	bf00      	nop
    }
  }
}
 801a04e:	3718      	adds	r7, #24
 801a050:	46bd      	mov	sp, r7
 801a052:	bd80      	pop	{r7, pc}

0801a054 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 801a054:	b480      	push	{r7}
 801a056:	b085      	sub	sp, #20
 801a058:	af00      	add	r7, sp, #0
 801a05a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	68d9      	ldr	r1, [r3, #12]
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	691a      	ldr	r2, [r3, #16]
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	430a      	orrs	r2, r1
 801a06a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	695a      	ldr	r2, [r3, #20]
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	699b      	ldr	r3, [r3, #24]
 801a074:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801a07a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	6a1b      	ldr	r3, [r3, #32]
 801a080:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801a086:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a08c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801a092:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a098:	3b01      	subs	r3, #1
 801a09a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 801a09c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801a0a8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801a0aa:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	685b      	ldr	r3, [r3, #4]
 801a0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a0b4:	d107      	bne.n	801a0c6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	691a      	ldr	r2, [r3, #16]
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 801a0c4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	da11      	bge.n	801a0fa <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	695a      	ldr	r2, [r3, #20]
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801a0e4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a0ea:	425b      	negs	r3, r3
 801a0ec:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	68fa      	ldr	r2, [r7, #12]
 801a0f4:	b292      	uxth	r2, r2
 801a0f6:	621a      	str	r2, [r3, #32]
 801a0f8:	e006      	b.n	801a108 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a0fe:	461a      	mov	r2, r3
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	b292      	uxth	r2, r2
 801a106:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	da15      	bge.n	801a13c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	695a      	ldr	r2, [r3, #20]
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 801a11e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a124:	425b      	negs	r3, r3
 801a126:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	6a19      	ldr	r1, [r3, #32]
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	041a      	lsls	r2, r3, #16
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	430a      	orrs	r2, r1
 801a138:	621a      	str	r2, [r3, #32]
 801a13a:	e009      	b.n	801a150 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	6a19      	ldr	r1, [r3, #32]
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a146:	041a      	lsls	r2, r3, #16
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	430a      	orrs	r2, r1
 801a14e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	685b      	ldr	r3, [r3, #4]
 801a154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a158:	d006      	beq.n	801a168 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	685a      	ldr	r2, [r3, #4]
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	b2d2      	uxtb	r2, r2
 801a164:	629a      	str	r2, [r3, #40]	@ 0x28
 801a166:	e003      	b.n	801a170 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	2200      	movs	r2, #0
 801a16e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	2200      	movs	r2, #0
 801a176:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801a178:	bf00      	nop
 801a17a:	3714      	adds	r7, #20
 801a17c:	46bd      	mov	sp, r7
 801a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a182:	4770      	bx	lr

0801a184 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 801a184:	b580      	push	{r7, lr}
 801a186:	b082      	sub	sp, #8
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d101      	bne.n	801a196 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 801a192:	2301      	movs	r3, #1
 801a194:	e031      	b.n	801a1fa <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a19c:	b2db      	uxtb	r3, r3
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d105      	bne.n	801a1ae <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 801a1a8:	6878      	ldr	r0, [r7, #4]
 801a1aa:	f7fe fac3 	bl	8018734 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	2203      	movs	r2, #3
 801a1b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 801a1b6:	6878      	ldr	r0, [r7, #4]
 801a1b8:	f000 f824 	bl	801a204 <HAL_MMC_InitCard>
 801a1bc:	4603      	mov	r3, r0
 801a1be:	2b01      	cmp	r3, #1
 801a1c0:	d101      	bne.n	801a1c6 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 801a1c2:	2301      	movs	r3, #1
 801a1c4:	e019      	b.n	801a1fa <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	2200      	movs	r2, #0
 801a1ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	2201      	movs	r2, #1
 801a1d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	68db      	ldr	r3, [r3, #12]
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d00a      	beq.n	801a1f8 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	68db      	ldr	r3, [r3, #12]
 801a1e6:	4619      	mov	r1, r3
 801a1e8:	6878      	ldr	r0, [r7, #4]
 801a1ea:	f000 fed3 	bl	801af94 <HAL_MMC_ConfigWideBusOperation>
 801a1ee:	4603      	mov	r3, r0
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d001      	beq.n	801a1f8 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	e000      	b.n	801a1fa <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 801a1f8:	2300      	movs	r3, #0
}
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	3708      	adds	r7, #8
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bd80      	pop	{r7, pc}
	...

0801a204 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 801a204:	b590      	push	{r4, r7, lr}
 801a206:	b08d      	sub	sp, #52	@ 0x34
 801a208:	af02      	add	r7, sp, #8
 801a20a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 801a20c:	2300      	movs	r3, #0
 801a20e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801a210:	2300      	movs	r3, #0
 801a212:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801a214:	2300      	movs	r3, #0
 801a216:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801a218:	2300      	movs	r3, #0
 801a21a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801a21c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801a220:	f04f 0100 	mov.w	r1, #0
 801a224:	f003 fde8 	bl	801ddf8 <HAL_RCCEx_GetPeriphCLKFreq>
 801a228:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 801a22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d109      	bne.n	801a244 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	2201      	movs	r2, #1
 801a234:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801a23e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801a240:	2301      	movs	r3, #1
 801a242:	e070      	b.n	801a326 <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 801a244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a246:	0a1b      	lsrs	r3, r3, #8
 801a248:	4a39      	ldr	r2, [pc, #228]	@ (801a330 <HAL_MMC_InitCard+0x12c>)
 801a24a:	fba2 2303 	umull	r2, r3, r2, r3
 801a24e:	091b      	lsrs	r3, r3, #4
 801a250:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	681c      	ldr	r4, [r3, #0]
 801a256:	466a      	mov	r2, sp
 801a258:	f107 0318 	add.w	r3, r7, #24
 801a25c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a260:	e882 0003 	stmia.w	r2, {r0, r1}
 801a264:	f107 030c 	add.w	r3, r7, #12
 801a268:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a26a:	4620      	mov	r0, r4
 801a26c:	f006 fc4a 	bl	8020b04 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	4618      	mov	r0, r3
 801a276:	f006 fc8d 	bl	8020b94 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 801a27a:	69fb      	ldr	r3, [r7, #28]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d005      	beq.n	801a28c <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 801a280:	69fb      	ldr	r3, [r7, #28]
 801a282:	005b      	lsls	r3, r3, #1
 801a284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a286:	fbb2 f3f3 	udiv	r3, r2, r3
 801a28a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 801a28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d007      	beq.n	801a2a2 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 801a292:	4a28      	ldr	r2, [pc, #160]	@ (801a334 <HAL_MMC_InitCard+0x130>)
 801a294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a296:	fbb2 f3f3 	udiv	r3, r2, r3
 801a29a:	3301      	adds	r3, #1
 801a29c:	4618      	mov	r0, r3
 801a29e:	f7ff f845 	bl	801932c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 801a2a2:	6878      	ldr	r0, [r7, #4]
 801a2a4:	f001 f860 	bl	801b368 <MMC_PowerON>
 801a2a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801a2aa:	6a3b      	ldr	r3, [r7, #32]
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d00b      	beq.n	801a2c8 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	2201      	movs	r2, #1
 801a2b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a2bc:	6a3b      	ldr	r3, [r7, #32]
 801a2be:	431a      	orrs	r2, r3
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801a2c4:	2301      	movs	r3, #1
 801a2c6:	e02e      	b.n	801a326 <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 801a2c8:	6878      	ldr	r0, [r7, #4]
 801a2ca:	f000 ff4f 	bl	801b16c <MMC_InitCard>
 801a2ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801a2d0:	6a3b      	ldr	r3, [r7, #32]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d00b      	beq.n	801a2ee <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	2201      	movs	r2, #1
 801a2da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a2e2:	6a3b      	ldr	r3, [r7, #32]
 801a2e4:	431a      	orrs	r2, r3
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801a2ea:	2301      	movs	r3, #1
 801a2ec:	e01b      	b.n	801a326 <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	f006 fcf2 	bl	8020ce0 <SDMMC_CmdBlockLength>
 801a2fc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801a2fe:	6a3b      	ldr	r3, [r7, #32]
 801a300:	2b00      	cmp	r3, #0
 801a302:	d00f      	beq.n	801a324 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	4a0b      	ldr	r2, [pc, #44]	@ (801a338 <HAL_MMC_InitCard+0x134>)
 801a30a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a310:	6a3b      	ldr	r3, [r7, #32]
 801a312:	431a      	orrs	r2, r3
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	2201      	movs	r2, #1
 801a31c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801a320:	2301      	movs	r3, #1
 801a322:	e000      	b.n	801a326 <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 801a324:	2300      	movs	r3, #0
}
 801a326:	4618      	mov	r0, r3
 801a328:	372c      	adds	r7, #44	@ 0x2c
 801a32a:	46bd      	mov	sp, r7
 801a32c:	bd90      	pop	{r4, r7, pc}
 801a32e:	bf00      	nop
 801a330:	014f8b59 	.word	0x014f8b59
 801a334:	00012110 	.word	0x00012110
 801a338:	1fe00fff 	.word	0x1fe00fff

0801a33c <HAL_MMC_DeInit>:
  * @brief  De-Initializes the MMC card.
  * @param  hmmc: Pointer to MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_DeInit(MMC_HandleTypeDef *hmmc)
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b082      	sub	sp, #8
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d101      	bne.n	801a34e <HAL_MMC_DeInit+0x12>
  {
    return HAL_ERROR;
 801a34a:	2301      	movs	r3, #1
 801a34c:	e011      	b.n	801a372 <HAL_MMC_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hmmc->Instance));

  hmmc->State = HAL_MMC_STATE_BUSY;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	2203      	movs	r2, #3
 801a352:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Set MMC power state to off */
  MMC_PowerOFF(hmmc);
 801a356:	6878      	ldr	r0, [r7, #4]
 801a358:	f001 f856 	bl	801b408 <MMC_PowerOFF>

  /* DeInit the low level hardware */
  hmmc->MspDeInitCallback(hmmc);
#else
  /* De-Initialize the MSP layer */
  HAL_MMC_MspDeInit(hmmc);
 801a35c:	6878      	ldr	r0, [r7, #4]
 801a35e:	f7fe faa7 	bl	80188b0 <HAL_MMC_MspDeInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	2200      	movs	r2, #0
 801a366:	635a      	str	r2, [r3, #52]	@ 0x34
  hmmc->State = HAL_MMC_STATE_RESET;
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	2200      	movs	r2, #0
 801a36c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 801a370:	2300      	movs	r3, #0
}
 801a372:	4618      	mov	r0, r3
 801a374:	3708      	adds	r7, #8
 801a376:	46bd      	mov	sp, r7
 801a378:	bd80      	pop	{r7, pc}
	...

0801a37c <HAL_MMC_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ReadBlocks_DMA(MMC_HandleTypeDef *hmmc, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b08c      	sub	sp, #48	@ 0x30
 801a380:	af00      	add	r7, sp, #0
 801a382:	60f8      	str	r0, [r7, #12]
 801a384:	60b9      	str	r1, [r7, #8]
 801a386:	607a      	str	r2, [r7, #4]
 801a388:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801a38e:	68bb      	ldr	r3, [r7, #8]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d107      	bne.n	801a3a4 <HAL_MMC_ReadBlocks_DMA+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a398:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801a3a0:	2301      	movs	r3, #1
 801a3a2:	e0a8      	b.n	801a4f6 <HAL_MMC_ReadBlocks_DMA+0x17a>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a3aa:	b2db      	uxtb	r3, r3
 801a3ac:	2b01      	cmp	r3, #1
 801a3ae:	f040 80a1 	bne.w	801a4f4 <HAL_MMC_ReadBlocks_DMA+0x178>
  {
    hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	2200      	movs	r2, #0
 801a3b6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 801a3b8:	687a      	ldr	r2, [r7, #4]
 801a3ba:	683b      	ldr	r3, [r7, #0]
 801a3bc:	441a      	add	r2, r3
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a3c2:	429a      	cmp	r2, r3
 801a3c4:	d907      	bls.n	801a3d6 <HAL_MMC_ReadBlocks_DMA+0x5a>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a3ca:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801a3d2:	2301      	movs	r3, #1
 801a3d4:	e08f      	b.n	801a4f6 <HAL_MMC_ReadBlocks_DMA+0x17a>
    }

    /* Check the case of 4kB blocks (field DATA SECTOR SIZE of extended CSD register) */
    if (((hmmc->Ext_CSD[(MMC_EXT_CSD_DATA_SEC_SIZE_INDEX / 4)] >> MMC_EXT_CSD_DATA_SEC_SIZE_POS) & 0x000000FFU) != 0x0U)
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a3dc:	0a1b      	lsrs	r3, r3, #8
 801a3de:	b2db      	uxtb	r3, r3
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d019      	beq.n	801a418 <HAL_MMC_ReadBlocks_DMA+0x9c>
    {
      if ((NumberOfBlocks % 8U) != 0U)
 801a3e4:	683b      	ldr	r3, [r7, #0]
 801a3e6:	f003 0307 	and.w	r3, r3, #7
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d007      	beq.n	801a3fe <HAL_MMC_ReadBlocks_DMA+0x82>
      {
        /* The number of blocks should be a multiple of 8 sectors of 512 bytes = 4 KBytes */
        hmmc->ErrorCode |= HAL_MMC_ERROR_BLOCK_LEN_ERR;
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a3f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 801a3fa:	2301      	movs	r3, #1
 801a3fc:	e07b      	b.n	801a4f6 <HAL_MMC_ReadBlocks_DMA+0x17a>
      }

      if ((BlockAdd % 8U) != 0U)
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	f003 0307 	and.w	r3, r3, #7
 801a404:	2b00      	cmp	r3, #0
 801a406:	d007      	beq.n	801a418 <HAL_MMC_ReadBlocks_DMA+0x9c>
      {
        /* The address should be aligned to 8 (corresponding to 4 KBytes blocks) */
        hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_MISALIGNED;
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a40c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 801a414:	2301      	movs	r3, #1
 801a416:	e06e      	b.n	801a4f6 <HAL_MMC_ReadBlocks_DMA+0x17a>
      }
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 801a418:	68fb      	ldr	r3, [r7, #12]
 801a41a:	2203      	movs	r2, #3
 801a41c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	2200      	movs	r2, #0
 801a426:	62da      	str	r2, [r3, #44]	@ 0x2c

    hmmc->pRxBuffPtr = pData;
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	68ba      	ldr	r2, [r7, #8]
 801a42c:	625a      	str	r2, [r3, #36]	@ 0x24
    hmmc->RxXferSize = MMC_BLOCKSIZE * NumberOfBlocks;
 801a42e:	683b      	ldr	r3, [r7, #0]
 801a430:	025a      	lsls	r2, r3, #9
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	629a      	str	r2, [r3, #40]	@ 0x28

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a43a:	2b01      	cmp	r3, #1
 801a43c:	d002      	beq.n	801a444 <HAL_MMC_ReadBlocks_DMA+0xc8>
    {
      add *= MMC_BLOCKSIZE;
 801a43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a440:	025b      	lsls	r3, r3, #9
 801a442:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801a444:	f04f 33ff 	mov.w	r3, #4294967295
 801a448:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE * NumberOfBlocks;
 801a44a:	683b      	ldr	r3, [r7, #0]
 801a44c:	025b      	lsls	r3, r3, #9
 801a44e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801a450:	2390      	movs	r3, #144	@ 0x90
 801a452:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801a454:	2302      	movs	r3, #2
 801a456:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801a458:	2300      	movs	r3, #0
 801a45a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801a45c:	2300      	movs	r3, #0
 801a45e:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	f107 0210 	add.w	r2, r7, #16
 801a468:	4611      	mov	r1, r2
 801a46a:	4618      	mov	r0, r3
 801a46c:	f006 fc0c 	bl	8020c88 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	68da      	ldr	r2, [r3, #12]
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801a47e:	60da      	str	r2, [r3, #12]
    hmmc->Instance->IDMABASE0 = (uint32_t) pData ;
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	68ba      	ldr	r2, [r7, #8]
 801a486:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	2201      	movs	r2, #1
 801a48e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 801a490:	683b      	ldr	r3, [r7, #0]
 801a492:	2b01      	cmp	r3, #1
 801a494:	d90a      	bls.n	801a4ac <HAL_MMC_ReadBlocks_DMA+0x130>
    {
      hmmc->Context = (MMC_CONTEXT_READ_MULTIPLE_BLOCK | MMC_CONTEXT_DMA);
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	2282      	movs	r2, #130	@ 0x82
 801a49a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hmmc->Instance, add);
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f006 fc62 	bl	8020d6c <SDMMC_CmdReadMultiBlock>
 801a4a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801a4aa:	e009      	b.n	801a4c0 <HAL_MMC_ReadBlocks_DMA+0x144>
    }
    else
    {
      hmmc->Context = (MMC_CONTEXT_READ_SINGLE_BLOCK | MMC_CONTEXT_DMA);
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	2281      	movs	r2, #129	@ 0x81
 801a4b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hmmc->Instance, add);
 801a4b2:	68fb      	ldr	r3, [r7, #12]
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	f006 fc34 	bl	8020d26 <SDMMC_CmdReadSingleBlock>
 801a4be:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_MMC_ERROR_NONE)
 801a4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d00c      	beq.n	801a4e0 <HAL_MMC_ReadBlocks_DMA+0x164>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	4a0d      	ldr	r2, [pc, #52]	@ (801a500 <HAL_MMC_ReadBlocks_DMA+0x184>)
 801a4cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode = errorstate;
 801a4ce:	68fb      	ldr	r3, [r7, #12]
 801a4d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a4d2:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	2201      	movs	r2, #1
 801a4d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801a4dc:	2301      	movs	r3, #1
 801a4de:	e00a      	b.n	801a4f6 <HAL_MMC_ReadBlocks_DMA+0x17a>
    }

    /* Enable transfer interrupts */
    __HAL_MMC_ENABLE_IT(hmmc, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 801a4ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 801a4f0:	2300      	movs	r3, #0
 801a4f2:	e000      	b.n	801a4f6 <HAL_MMC_ReadBlocks_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 801a4f4:	2302      	movs	r3, #2
  }
}
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	3730      	adds	r7, #48	@ 0x30
 801a4fa:	46bd      	mov	sp, r7
 801a4fc:	bd80      	pop	{r7, pc}
 801a4fe:	bf00      	nop
 801a500:	1fe00fff 	.word	0x1fe00fff

0801a504 <HAL_MMC_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_WriteBlocks_DMA(MMC_HandleTypeDef *hmmc, const uint8_t *pData,
                                          uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 801a504:	b580      	push	{r7, lr}
 801a506:	b08c      	sub	sp, #48	@ 0x30
 801a508:	af00      	add	r7, sp, #0
 801a50a:	60f8      	str	r0, [r7, #12]
 801a50c:	60b9      	str	r1, [r7, #8]
 801a50e:	607a      	str	r2, [r7, #4]
 801a510:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801a516:	68bb      	ldr	r3, [r7, #8]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d107      	bne.n	801a52c <HAL_MMC_WriteBlocks_DMA+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a520:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801a528:	2301      	movs	r3, #1
 801a52a:	e0ab      	b.n	801a684 <HAL_MMC_WriteBlocks_DMA+0x180>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a532:	b2db      	uxtb	r3, r3
 801a534:	2b01      	cmp	r3, #1
 801a536:	f040 80a4 	bne.w	801a682 <HAL_MMC_WriteBlocks_DMA+0x17e>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	2200      	movs	r2, #0
 801a53e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 801a540:	687a      	ldr	r2, [r7, #4]
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	441a      	add	r2, r3
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a54a:	429a      	cmp	r2, r3
 801a54c:	d907      	bls.n	801a55e <HAL_MMC_WriteBlocks_DMA+0x5a>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a552:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801a55a:	2301      	movs	r3, #1
 801a55c:	e092      	b.n	801a684 <HAL_MMC_WriteBlocks_DMA+0x180>
    }

    /* Check the case of 4kB blocks (field DATA SECTOR SIZE of extended CSD register) */
    if (((hmmc->Ext_CSD[(MMC_EXT_CSD_DATA_SEC_SIZE_INDEX / 4)] >> MMC_EXT_CSD_DATA_SEC_SIZE_POS) & 0x000000FFU) != 0x0U)
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a564:	0a1b      	lsrs	r3, r3, #8
 801a566:	b2db      	uxtb	r3, r3
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d019      	beq.n	801a5a0 <HAL_MMC_WriteBlocks_DMA+0x9c>
    {
      if ((NumberOfBlocks % 8U) != 0U)
 801a56c:	683b      	ldr	r3, [r7, #0]
 801a56e:	f003 0307 	and.w	r3, r3, #7
 801a572:	2b00      	cmp	r3, #0
 801a574:	d007      	beq.n	801a586 <HAL_MMC_WriteBlocks_DMA+0x82>
      {
        /* The number of blocks should be a multiple of 8 sectors of 512 bytes = 4 KBytes */
        hmmc->ErrorCode |= HAL_MMC_ERROR_BLOCK_LEN_ERR;
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a57a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 801a582:	2301      	movs	r3, #1
 801a584:	e07e      	b.n	801a684 <HAL_MMC_WriteBlocks_DMA+0x180>
      }

      if ((BlockAdd % 8U) != 0U)
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	f003 0307 	and.w	r3, r3, #7
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d007      	beq.n	801a5a0 <HAL_MMC_WriteBlocks_DMA+0x9c>
      {
        /* The address should be aligned to 8 (corresponding to 4 KBytes blocks) */
        hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_MISALIGNED;
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a594:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	635a      	str	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 801a59c:	2301      	movs	r3, #1
 801a59e:	e071      	b.n	801a684 <HAL_MMC_WriteBlocks_DMA+0x180>
      }
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	2203      	movs	r2, #3
 801a5a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	2200      	movs	r2, #0
 801a5ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    hmmc->pTxBuffPtr = pData;
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	68ba      	ldr	r2, [r7, #8]
 801a5b4:	61da      	str	r2, [r3, #28]
    hmmc->TxXferSize = MMC_BLOCKSIZE * NumberOfBlocks;
 801a5b6:	683b      	ldr	r3, [r7, #0]
 801a5b8:	025a      	lsls	r2, r3, #9
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	621a      	str	r2, [r3, #32]

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a5c2:	2b01      	cmp	r3, #1
 801a5c4:	d002      	beq.n	801a5cc <HAL_MMC_WriteBlocks_DMA+0xc8>
    {
      add *= MMC_BLOCKSIZE;
 801a5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5c8:	025b      	lsls	r3, r3, #9
 801a5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801a5cc:	f04f 33ff 	mov.w	r3, #4294967295
 801a5d0:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE * NumberOfBlocks;
 801a5d2:	683b      	ldr	r3, [r7, #0]
 801a5d4:	025b      	lsls	r3, r3, #9
 801a5d6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801a5d8:	2390      	movs	r3, #144	@ 0x90
 801a5da:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801a5dc:	2300      	movs	r3, #0
 801a5de:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	f107 0210 	add.w	r2, r7, #16
 801a5f0:	4611      	mov	r1, r2
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f006 fb48 	bl	8020c88 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	68da      	ldr	r2, [r3, #12]
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801a606:	60da      	str	r2, [r3, #12]

    hmmc->Instance->IDMABASE0 = (uint32_t) pData ;
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	68ba      	ldr	r2, [r7, #8]
 801a60e:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	2201      	movs	r2, #1
 801a616:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 801a618:	683b      	ldr	r3, [r7, #0]
 801a61a:	2b01      	cmp	r3, #1
 801a61c:	d90a      	bls.n	801a634 <HAL_MMC_WriteBlocks_DMA+0x130>
    {
      hmmc->Context = (MMC_CONTEXT_WRITE_MULTIPLE_BLOCK | MMC_CONTEXT_DMA);
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	22a0      	movs	r2, #160	@ 0xa0
 801a622:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hmmc->Instance, add);
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a62a:	4618      	mov	r0, r3
 801a62c:	f006 fbe4 	bl	8020df8 <SDMMC_CmdWriteMultiBlock>
 801a630:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801a632:	e009      	b.n	801a648 <HAL_MMC_WriteBlocks_DMA+0x144>
    }
    else
    {
      hmmc->Context = (MMC_CONTEXT_WRITE_SINGLE_BLOCK | MMC_CONTEXT_DMA);
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	2290      	movs	r2, #144	@ 0x90
 801a638:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hmmc->Instance, add);
 801a63a:	68fb      	ldr	r3, [r7, #12]
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a640:	4618      	mov	r0, r3
 801a642:	f006 fbb6 	bl	8020db2 <SDMMC_CmdWriteSingleBlock>
 801a646:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_MMC_ERROR_NONE)
 801a648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d00f      	beq.n	801a66e <HAL_MMC_WriteBlocks_DMA+0x16a>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	4a0e      	ldr	r2, [pc, #56]	@ (801a68c <HAL_MMC_WriteBlocks_DMA+0x188>)
 801a654:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a65c:	431a      	orrs	r2, r3
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	2201      	movs	r2, #1
 801a666:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801a66a:	2301      	movs	r3, #1
 801a66c:	e00a      	b.n	801a684 <HAL_MMC_WriteBlocks_DMA+0x180>
    }

    /* Enable transfer interrupts */
    __HAL_MMC_ENABLE_IT(hmmc, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 801a67c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 801a67e:	2300      	movs	r3, #0
 801a680:	e000      	b.n	801a684 <HAL_MMC_WriteBlocks_DMA+0x180>
  }
  else
  {
    return HAL_BUSY;
 801a682:	2302      	movs	r3, #2
  }
}
 801a684:	4618      	mov	r0, r3
 801a686:	3730      	adds	r7, #48	@ 0x30
 801a688:	46bd      	mov	sp, r7
 801a68a:	bd80      	pop	{r7, pc}
 801a68c:	1fe00fff 	.word	0x1fe00fff

0801a690 <HAL_MMC_IRQHandler>:
  * @brief  This function handles MMC card interrupt request.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
void HAL_MMC_IRQHandler(MMC_HandleTypeDef *hmmc)
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b084      	sub	sp, #16
 801a694:	af00      	add	r7, sp, #0
 801a696:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hmmc->Context;
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a69c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a6a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d008      	beq.n	801a6be <HAL_MMC_IRQHandler+0x2e>
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	f003 0308 	and.w	r3, r3, #8
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d003      	beq.n	801a6be <HAL_MMC_IRQHandler+0x2e>
  {
    MMC_Read_IT(hmmc);
 801a6b6:	6878      	ldr	r0, [r7, #4]
 801a6b8:	f000 ffd0 	bl	801b65c <MMC_Read_IT>
 801a6bc:	e194      	b.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
  }

  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DATAEND) != RESET)
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a6c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	f000 80aa 	beq.w	801a822 <HAL_MMC_IRQHandler+0x192>
  {
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DATAEND);
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a6d6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	681a      	ldr	r2, [r3, #0]
 801a6e2:	4b9a      	ldr	r3, [pc, #616]	@ (801a94c <HAL_MMC_IRQHandler+0x2bc>)
 801a6e4:	400b      	ands	r3, r1
 801a6e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                         SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                         SDMMC_IT_RXFIFOHF);

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801a6f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	68da      	ldr	r2, [r3, #12]
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801a706:	60da      	str	r2, [r3, #12]

    if ((context & MMC_CONTEXT_DMA) != 0U)
 801a708:	68fb      	ldr	r3, [r7, #12]
 801a70a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d04b      	beq.n	801a7aa <HAL_MMC_IRQHandler+0x11a>
    {
      hmmc->Instance->DLEN = 0;
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	2200      	movs	r2, #0
 801a718:	629a      	str	r2, [r3, #40]	@ 0x28
      hmmc->Instance->DCTRL = 0;
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	2200      	movs	r2, #0
 801a720:	62da      	str	r2, [r3, #44]	@ 0x2c
      hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA ;
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	2200      	movs	r2, #0
 801a728:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Stop Transfer for Write Multi blocks or Read Multi blocks */
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	f003 0302 	and.w	r3, r3, #2
 801a730:	2b00      	cmp	r3, #0
 801a732:	d104      	bne.n	801a73e <HAL_MMC_IRQHandler+0xae>
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	f003 0320 	and.w	r3, r3, #32
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d011      	beq.n	801a762 <HAL_MMC_IRQHandler+0xd2>
      {
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	4618      	mov	r0, r3
 801a744:	f006 fb7c 	bl	8020e40 <SDMMC_CmdStopTransfer>
 801a748:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 801a74a:	68bb      	ldr	r3, [r7, #8]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d008      	beq.n	801a762 <HAL_MMC_IRQHandler+0xd2>
        {
          hmmc->ErrorCode |= errorstate;
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a754:	68bb      	ldr	r3, [r7, #8]
 801a756:	431a      	orrs	r2, r3
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
          hmmc->ErrorCallback(hmmc);
#else
          HAL_MMC_ErrorCallback(hmmc);
 801a75c:	6878      	ldr	r0, [r7, #4]
 801a75e:	f000 f947 	bl	801a9f0 <HAL_MMC_ErrorCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	4a7a      	ldr	r2, [pc, #488]	@ (801a950 <HAL_MMC_IRQHandler+0x2c0>)
 801a768:	639a      	str	r2, [r3, #56]	@ 0x38

      hmmc->State = HAL_MMC_STATE_READY;
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	2201      	movs	r2, #1
 801a76e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	f003 0310 	and.w	r3, r3, #16
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d104      	bne.n	801a786 <HAL_MMC_IRQHandler+0xf6>
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	f003 0320 	and.w	r3, r3, #32
 801a782:	2b00      	cmp	r3, #0
 801a784:	d002      	beq.n	801a78c <HAL_MMC_IRQHandler+0xfc>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->TxCpltCallback(hmmc);
#else
        HAL_MMC_TxCpltCallback(hmmc);
 801a786:	6878      	ldr	r0, [r7, #4]
 801a788:	f7e7 fa7c 	bl	8001c84 <HAL_MMC_TxCpltCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
      }
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	f003 0301 	and.w	r3, r3, #1
 801a792:	2b00      	cmp	r3, #0
 801a794:	d105      	bne.n	801a7a2 <HAL_MMC_IRQHandler+0x112>
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	f003 0302 	and.w	r3, r3, #2
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	f000 8123 	beq.w	801a9e8 <HAL_MMC_IRQHandler+0x358>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->RxCpltCallback(hmmc);
#else
        HAL_MMC_RxCpltCallback(hmmc);
 801a7a2:	6878      	ldr	r0, [r7, #4]
 801a7a4:	f7e7 fa79 	bl	8001c9a <HAL_MMC_RxCpltCallback>

  else
  {
    /* Nothing to do */
  }
}
 801a7a8:	e11e      	b.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
    else if ((context & MMC_CONTEXT_IT) != 0U)
 801a7aa:	68fb      	ldr	r3, [r7, #12]
 801a7ac:	f003 0308 	and.w	r3, r3, #8
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	f000 8119 	beq.w	801a9e8 <HAL_MMC_IRQHandler+0x358>
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	f003 0302 	and.w	r3, r3, #2
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d104      	bne.n	801a7ca <HAL_MMC_IRQHandler+0x13a>
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	f003 0320 	and.w	r3, r3, #32
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d011      	beq.n	801a7ee <HAL_MMC_IRQHandler+0x15e>
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	f006 fb36 	bl	8020e40 <SDMMC_CmdStopTransfer>
 801a7d4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 801a7d6:	68bb      	ldr	r3, [r7, #8]
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d008      	beq.n	801a7ee <HAL_MMC_IRQHandler+0x15e>
          hmmc->ErrorCode |= errorstate;
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a7e0:	68bb      	ldr	r3, [r7, #8]
 801a7e2:	431a      	orrs	r2, r3
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_MMC_ErrorCallback(hmmc);
 801a7e8:	6878      	ldr	r0, [r7, #4]
 801a7ea:	f000 f901 	bl	801a9f0 <HAL_MMC_ErrorCallback>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	4a57      	ldr	r2, [pc, #348]	@ (801a950 <HAL_MMC_IRQHandler+0x2c0>)
 801a7f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	2201      	movs	r2, #1
 801a7fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	f003 0301 	and.w	r3, r3, #1
 801a804:	2b00      	cmp	r3, #0
 801a806:	d104      	bne.n	801a812 <HAL_MMC_IRQHandler+0x182>
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	f003 0302 	and.w	r3, r3, #2
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d003      	beq.n	801a81a <HAL_MMC_IRQHandler+0x18a>
        HAL_MMC_RxCpltCallback(hmmc);
 801a812:	6878      	ldr	r0, [r7, #4]
 801a814:	f7e7 fa41 	bl	8001c9a <HAL_MMC_RxCpltCallback>
 801a818:	e0e6      	b.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
        HAL_MMC_TxCpltCallback(hmmc);
 801a81a:	6878      	ldr	r0, [r7, #4]
 801a81c:	f7e7 fa32 	bl	8001c84 <HAL_MMC_TxCpltCallback>
}
 801a820:	e0e2      	b.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
  else if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d008      	beq.n	801a842 <HAL_MMC_IRQHandler+0x1b2>
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	f003 0308 	and.w	r3, r3, #8
 801a836:	2b00      	cmp	r3, #0
 801a838:	d003      	beq.n	801a842 <HAL_MMC_IRQHandler+0x1b2>
    MMC_Write_IT(hmmc);
 801a83a:	6878      	ldr	r0, [r7, #4]
 801a83c:	f000 ff54 	bl	801b6e8 <MMC_Write_IT>
 801a840:	e0d2      	b.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL |
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a848:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	f000 809e 	beq.w	801a98e <HAL_MMC_IRQHandler+0x2fe>
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DCRCFAIL) != RESET)
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a858:	f003 0302 	and.w	r3, r3, #2
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d005      	beq.n	801a86c <HAL_MMC_IRQHandler+0x1dc>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a864:	f043 0202 	orr.w	r2, r3, #2
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DTIMEOUT) != RESET)
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a872:	f003 0308 	and.w	r3, r3, #8
 801a876:	2b00      	cmp	r3, #0
 801a878:	d005      	beq.n	801a886 <HAL_MMC_IRQHandler+0x1f6>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a87e:	f043 0208 	orr.w	r2, r3, #8
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_RXOVERR) != RESET)
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a88c:	f003 0320 	and.w	r3, r3, #32
 801a890:	2b00      	cmp	r3, #0
 801a892:	d005      	beq.n	801a8a0 <HAL_MMC_IRQHandler+0x210>
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a898:	f043 0220 	orr.w	r2, r3, #32
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_TXUNDERR) != RESET)
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a8a6:	f003 0310 	and.w	r3, r3, #16
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d005      	beq.n	801a8ba <HAL_MMC_IRQHandler+0x22a>
      hmmc->ErrorCode |= HAL_MMC_ERROR_TX_UNDERRUN;
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a8b2:	f043 0210 	orr.w	r2, r3, #16
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	4a24      	ldr	r2, [pc, #144]	@ (801a950 <HAL_MMC_IRQHandler+0x2c0>)
 801a8c0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 801a8d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	68da      	ldr	r2, [r3, #12]
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801a8e0:	60da      	str	r2, [r3, #12]
    hmmc->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801a8f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmmc->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	68da      	ldr	r2, [r3, #12]
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801a900:	60da      	str	r2, [r3, #12]
    hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	4618      	mov	r0, r3
 801a908:	f006 fa9a 	bl	8020e40 <SDMMC_CmdStopTransfer>
 801a90c:	4602      	mov	r2, r0
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a912:	431a      	orrs	r2, r3
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	68da      	ldr	r2, [r3, #12]
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801a926:	60da      	str	r2, [r3, #12]
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DABORT);
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a930:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & MMC_CONTEXT_IT) != 0U)
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	f003 0308 	and.w	r3, r3, #8
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d00b      	beq.n	801a954 <HAL_MMC_IRQHandler+0x2c4>
      hmmc->State = HAL_MMC_STATE_READY;
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	2201      	movs	r2, #1
 801a940:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      HAL_MMC_ErrorCallback(hmmc);
 801a944:	6878      	ldr	r0, [r7, #4]
 801a946:	f000 f853 	bl	801a9f0 <HAL_MMC_ErrorCallback>
}
 801a94a:	e04d      	b.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
 801a94c:	ffff3ec5 	.word	0xffff3ec5
 801a950:	18000f3a 	.word	0x18000f3a
    else if ((context & MMC_CONTEXT_DMA) != 0U)
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d044      	beq.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
      if (hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a962:	2b00      	cmp	r3, #0
 801a964:	d040      	beq.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
        __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801a974:	63da      	str	r2, [r3, #60]	@ 0x3c
        hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	2200      	movs	r2, #0
 801a97c:	651a      	str	r2, [r3, #80]	@ 0x50
        hmmc->State = HAL_MMC_STATE_READY;
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	2201      	movs	r2, #1
 801a982:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_MMC_ErrorCallback(hmmc);
 801a986:	6878      	ldr	r0, [r7, #4]
 801a988:	f000 f832 	bl	801a9f0 <HAL_MMC_ErrorCallback>
}
 801a98c:	e02c      	b.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_IDMABTC) != RESET)
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d025      	beq.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_IT_IDMABTC);
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801a9a4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hmmc->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a9ac:	f003 0304 	and.w	r3, r3, #4
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d10c      	bne.n	801a9ce <HAL_MMC_IRQHandler+0x33e>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	f003 0320 	and.w	r3, r3, #32
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d003      	beq.n	801a9c6 <HAL_MMC_IRQHandler+0x336>
        HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(hmmc);
 801a9be:	6878      	ldr	r0, [r7, #4]
 801a9c0:	f000 ff9a 	bl	801b8f8 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>
}
 801a9c4:	e010      	b.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
        HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(hmmc);
 801a9c6:	6878      	ldr	r0, [r7, #4]
 801a9c8:	f000 ff82 	bl	801b8d0 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>
}
 801a9cc:	e00c      	b.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	f003 0320 	and.w	r3, r3, #32
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d003      	beq.n	801a9e0 <HAL_MMC_IRQHandler+0x350>
        HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(hmmc);
 801a9d8:	6878      	ldr	r0, [r7, #4]
 801a9da:	f000 ff83 	bl	801b8e4 <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>
}
 801a9de:	e003      	b.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
        HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(hmmc);
 801a9e0:	6878      	ldr	r0, [r7, #4]
 801a9e2:	f000 ff6b 	bl	801b8bc <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>
}
 801a9e6:	e7ff      	b.n	801a9e8 <HAL_MMC_IRQHandler+0x358>
 801a9e8:	bf00      	nop
 801a9ea:	3710      	adds	r7, #16
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}

0801a9f0 <HAL_MMC_ErrorCallback>:
  * @brief MMC error callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_ErrorCallback(MMC_HandleTypeDef *hmmc)
{
 801a9f0:	b480      	push	{r7}
 801a9f2:	b083      	sub	sp, #12
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_ErrorCallback can be implemented in the user file
   */
}
 801a9f8:	bf00      	nop
 801a9fa:	370c      	adds	r7, #12
 801a9fc:	46bd      	mov	sp, r7
 801a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa02:	4770      	bx	lr

0801aa04 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b084      	sub	sp, #16
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	6078      	str	r0, [r7, #4]
 801aa0c:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 801aa0e:	2300      	movs	r3, #0
 801aa10:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aa16:	0f9b      	lsrs	r3, r3, #30
 801aa18:	b2da      	uxtb	r2, r3
 801aa1a:	683b      	ldr	r3, [r7, #0]
 801aa1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aa22:	0e9b      	lsrs	r3, r3, #26
 801aa24:	b2db      	uxtb	r3, r3
 801aa26:	f003 030f 	and.w	r3, r3, #15
 801aa2a:	b2da      	uxtb	r2, r3
 801aa2c:	683b      	ldr	r3, [r7, #0]
 801aa2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aa34:	0e1b      	lsrs	r3, r3, #24
 801aa36:	b2db      	uxtb	r3, r3
 801aa38:	f003 0303 	and.w	r3, r3, #3
 801aa3c:	b2da      	uxtb	r2, r3
 801aa3e:	683b      	ldr	r3, [r7, #0]
 801aa40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aa46:	0c1b      	lsrs	r3, r3, #16
 801aa48:	b2da      	uxtb	r2, r3
 801aa4a:	683b      	ldr	r3, [r7, #0]
 801aa4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aa52:	0a1b      	lsrs	r3, r3, #8
 801aa54:	b2da      	uxtb	r2, r3
 801aa56:	683b      	ldr	r3, [r7, #0]
 801aa58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aa5e:	b2da      	uxtb	r2, r3
 801aa60:	683b      	ldr	r3, [r7, #0]
 801aa62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa68:	0d1b      	lsrs	r3, r3, #20
 801aa6a:	b29a      	uxth	r2, r3
 801aa6c:	683b      	ldr	r3, [r7, #0]
 801aa6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa74:	0c1b      	lsrs	r3, r3, #16
 801aa76:	b2db      	uxtb	r3, r3
 801aa78:	f003 030f 	and.w	r3, r3, #15
 801aa7c:	b2da      	uxtb	r2, r3
 801aa7e:	683b      	ldr	r3, [r7, #0]
 801aa80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa86:	0bdb      	lsrs	r3, r3, #15
 801aa88:	b2db      	uxtb	r3, r3
 801aa8a:	f003 0301 	and.w	r3, r3, #1
 801aa8e:	b2da      	uxtb	r2, r3
 801aa90:	683b      	ldr	r3, [r7, #0]
 801aa92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa98:	0b9b      	lsrs	r3, r3, #14
 801aa9a:	b2db      	uxtb	r3, r3
 801aa9c:	f003 0301 	and.w	r3, r3, #1
 801aaa0:	b2da      	uxtb	r2, r3
 801aaa2:	683b      	ldr	r3, [r7, #0]
 801aaa4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aaaa:	0b5b      	lsrs	r3, r3, #13
 801aaac:	b2db      	uxtb	r3, r3
 801aaae:	f003 0301 	and.w	r3, r3, #1
 801aab2:	b2da      	uxtb	r2, r3
 801aab4:	683b      	ldr	r3, [r7, #0]
 801aab6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aabc:	0b1b      	lsrs	r3, r3, #12
 801aabe:	b2db      	uxtb	r3, r3
 801aac0:	f003 0301 	and.w	r3, r3, #1
 801aac4:	b2da      	uxtb	r2, r3
 801aac6:	683b      	ldr	r3, [r7, #0]
 801aac8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801aaca:	683b      	ldr	r3, [r7, #0]
 801aacc:	2200      	movs	r2, #0
 801aace:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 801aad0:	f107 010c 	add.w	r1, r7, #12
 801aad4:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 801aad8:	22d4      	movs	r2, #212	@ 0xd4
 801aada:	6878      	ldr	r0, [r7, #4]
 801aadc:	f000 fcca 	bl	801b474 <MMC_ReadExtCSD>
 801aae0:	4603      	mov	r3, r0
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d001      	beq.n	801aaea <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 801aae6:	2301      	movs	r3, #1
 801aae8:	e129      	b.n	801ad3e <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d163      	bne.n	801abba <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aaf6:	009a      	lsls	r2, r3, #2
 801aaf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 801aafc:	4013      	ands	r3, r2
 801aafe:	687a      	ldr	r2, [r7, #4]
 801ab00:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 801ab02:	0f92      	lsrs	r2, r2, #30
 801ab04:	431a      	orrs	r2, r3
 801ab06:	683b      	ldr	r3, [r7, #0]
 801ab08:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ab0e:	0edb      	lsrs	r3, r3, #27
 801ab10:	b2db      	uxtb	r3, r3
 801ab12:	f003 0307 	and.w	r3, r3, #7
 801ab16:	b2da      	uxtb	r2, r3
 801ab18:	683b      	ldr	r3, [r7, #0]
 801ab1a:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ab20:	0e1b      	lsrs	r3, r3, #24
 801ab22:	b2db      	uxtb	r3, r3
 801ab24:	f003 0307 	and.w	r3, r3, #7
 801ab28:	b2da      	uxtb	r2, r3
 801ab2a:	683b      	ldr	r3, [r7, #0]
 801ab2c:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ab32:	0d5b      	lsrs	r3, r3, #21
 801ab34:	b2db      	uxtb	r3, r3
 801ab36:	f003 0307 	and.w	r3, r3, #7
 801ab3a:	b2da      	uxtb	r2, r3
 801ab3c:	683b      	ldr	r3, [r7, #0]
 801ab3e:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ab44:	0c9b      	lsrs	r3, r3, #18
 801ab46:	b2db      	uxtb	r3, r3
 801ab48:	f003 0307 	and.w	r3, r3, #7
 801ab4c:	b2da      	uxtb	r2, r3
 801ab4e:	683b      	ldr	r3, [r7, #0]
 801ab50:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ab56:	0bdb      	lsrs	r3, r3, #15
 801ab58:	b2db      	uxtb	r3, r3
 801ab5a:	f003 0307 	and.w	r3, r3, #7
 801ab5e:	b2da      	uxtb	r2, r3
 801ab60:	683b      	ldr	r3, [r7, #0]
 801ab62:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801ab64:	683b      	ldr	r3, [r7, #0]
 801ab66:	691b      	ldr	r3, [r3, #16]
 801ab68:	1c5a      	adds	r2, r3, #1
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801ab6e:	683b      	ldr	r3, [r7, #0]
 801ab70:	7e1b      	ldrb	r3, [r3, #24]
 801ab72:	b2db      	uxtb	r3, r3
 801ab74:	f003 0307 	and.w	r3, r3, #7
 801ab78:	3302      	adds	r3, #2
 801ab7a:	2201      	movs	r2, #1
 801ab7c:	fa02 f303 	lsl.w	r3, r2, r3
 801ab80:	687a      	ldr	r2, [r7, #4]
 801ab82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801ab84:	fb03 f202 	mul.w	r2, r3, r2
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801ab8c:	683b      	ldr	r3, [r7, #0]
 801ab8e:	7a1b      	ldrb	r3, [r3, #8]
 801ab90:	b2db      	uxtb	r3, r3
 801ab92:	f003 030f 	and.w	r3, r3, #15
 801ab96:	2201      	movs	r2, #1
 801ab98:	409a      	lsls	r2, r3
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	64da      	str	r2, [r3, #76]	@ 0x4c

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801aba2:	687a      	ldr	r2, [r7, #4]
 801aba4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 801aba6:	0a52      	lsrs	r2, r2, #9
 801aba8:	fb03 f202 	mul.w	r2, r3, r2
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801abb6:	655a      	str	r2, [r3, #84]	@ 0x54
 801abb8:	e023      	b.n	801ac02 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801abbe:	2b01      	cmp	r3, #1
 801abc0:	d10f      	bne.n	801abe2 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 801abc2:	68fa      	ldr	r2, [r7, #12]
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801abd6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	655a      	str	r2, [r3, #84]	@ 0x54
 801abe0:	e00f      	b.n	801ac02 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	4a58      	ldr	r2, [pc, #352]	@ (801ad48 <HAL_MMC_GetCardCSD+0x344>)
 801abe8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801abee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	2201      	movs	r2, #1
 801abfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801abfe:	2301      	movs	r3, #1
 801ac00:	e09d      	b.n	801ad3e <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ac06:	0b9b      	lsrs	r3, r3, #14
 801ac08:	b2db      	uxtb	r3, r3
 801ac0a:	f003 0301 	and.w	r3, r3, #1
 801ac0e:	b2da      	uxtb	r2, r3
 801ac10:	683b      	ldr	r3, [r7, #0]
 801ac12:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ac18:	09db      	lsrs	r3, r3, #7
 801ac1a:	b2db      	uxtb	r3, r3
 801ac1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ac20:	b2da      	uxtb	r2, r3
 801ac22:	683b      	ldr	r3, [r7, #0]
 801ac24:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ac2a:	b2db      	uxtb	r3, r3
 801ac2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ac30:	b2da      	uxtb	r2, r3
 801ac32:	683b      	ldr	r3, [r7, #0]
 801ac34:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ac3a:	0fdb      	lsrs	r3, r3, #31
 801ac3c:	b2da      	uxtb	r2, r3
 801ac3e:	683b      	ldr	r3, [r7, #0]
 801ac40:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ac46:	0f5b      	lsrs	r3, r3, #29
 801ac48:	b2db      	uxtb	r3, r3
 801ac4a:	f003 0303 	and.w	r3, r3, #3
 801ac4e:	b2da      	uxtb	r2, r3
 801ac50:	683b      	ldr	r3, [r7, #0]
 801ac52:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ac58:	0e9b      	lsrs	r3, r3, #26
 801ac5a:	b2db      	uxtb	r3, r3
 801ac5c:	f003 0307 	and.w	r3, r3, #7
 801ac60:	b2da      	uxtb	r2, r3
 801ac62:	683b      	ldr	r3, [r7, #0]
 801ac64:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ac6a:	0d9b      	lsrs	r3, r3, #22
 801ac6c:	b2db      	uxtb	r3, r3
 801ac6e:	f003 030f 	and.w	r3, r3, #15
 801ac72:	b2da      	uxtb	r2, r3
 801ac74:	683b      	ldr	r3, [r7, #0]
 801ac76:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ac7c:	0d5b      	lsrs	r3, r3, #21
 801ac7e:	b2db      	uxtb	r3, r3
 801ac80:	f003 0301 	and.w	r3, r3, #1
 801ac84:	b2da      	uxtb	r2, r3
 801ac86:	683b      	ldr	r3, [r7, #0]
 801ac88:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801ac8c:	683b      	ldr	r3, [r7, #0]
 801ac8e:	2200      	movs	r2, #0
 801ac90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ac98:	0c1b      	lsrs	r3, r3, #16
 801ac9a:	b2db      	uxtb	r3, r3
 801ac9c:	f003 0301 	and.w	r3, r3, #1
 801aca0:	b2da      	uxtb	r2, r3
 801aca2:	683b      	ldr	r3, [r7, #0]
 801aca4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801acac:	0bdb      	lsrs	r3, r3, #15
 801acae:	b2db      	uxtb	r3, r3
 801acb0:	f003 0301 	and.w	r3, r3, #1
 801acb4:	b2da      	uxtb	r2, r3
 801acb6:	683b      	ldr	r3, [r7, #0]
 801acb8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801acc0:	0b9b      	lsrs	r3, r3, #14
 801acc2:	b2db      	uxtb	r3, r3
 801acc4:	f003 0301 	and.w	r3, r3, #1
 801acc8:	b2da      	uxtb	r2, r3
 801acca:	683b      	ldr	r3, [r7, #0]
 801accc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801acd4:	0b5b      	lsrs	r3, r3, #13
 801acd6:	b2db      	uxtb	r3, r3
 801acd8:	f003 0301 	and.w	r3, r3, #1
 801acdc:	b2da      	uxtb	r2, r3
 801acde:	683b      	ldr	r3, [r7, #0]
 801ace0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ace8:	0b1b      	lsrs	r3, r3, #12
 801acea:	b2db      	uxtb	r3, r3
 801acec:	f003 0301 	and.w	r3, r3, #1
 801acf0:	b2da      	uxtb	r2, r3
 801acf2:	683b      	ldr	r3, [r7, #0]
 801acf4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801acfc:	0a9b      	lsrs	r3, r3, #10
 801acfe:	b2db      	uxtb	r3, r3
 801ad00:	f003 0303 	and.w	r3, r3, #3
 801ad04:	b2da      	uxtb	r2, r3
 801ad06:	683b      	ldr	r3, [r7, #0]
 801ad08:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad10:	0a1b      	lsrs	r3, r3, #8
 801ad12:	b2db      	uxtb	r3, r3
 801ad14:	f003 0303 	and.w	r3, r3, #3
 801ad18:	b2da      	uxtb	r2, r3
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad24:	085b      	lsrs	r3, r3, #1
 801ad26:	b2db      	uxtb	r3, r3
 801ad28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ad2c:	b2da      	uxtb	r2, r3
 801ad2e:	683b      	ldr	r3, [r7, #0]
 801ad30:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 801ad34:	683b      	ldr	r3, [r7, #0]
 801ad36:	2201      	movs	r2, #1
 801ad38:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 801ad3c:	2300      	movs	r3, #0
}
 801ad3e:	4618      	mov	r0, r3
 801ad40:	3710      	adds	r7, #16
 801ad42:	46bd      	mov	sp, r7
 801ad44:	bd80      	pop	{r7, pc}
 801ad46:	bf00      	nop
 801ad48:	1fe00fff 	.word	0x1fe00fff

0801ad4c <HAL_MMC_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_MMC_CardInfoTypeDef structure that
  *         will contain the MMC card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardInfo(const MMC_HandleTypeDef *hmmc, HAL_MMC_CardInfoTypeDef *pCardInfo)
{
 801ad4c:	b480      	push	{r7}
 801ad4e:	b083      	sub	sp, #12
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	6078      	str	r0, [r7, #4]
 801ad54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hmmc->MmcCard.CardType);
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ad5a:	683b      	ldr	r3, [r7, #0]
 801ad5c:	601a      	str	r2, [r3, #0]
  pCardInfo->Class        = (uint32_t)(hmmc->MmcCard.Class);
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	605a      	str	r2, [r3, #4]
  pCardInfo->RelCardAdd   = (uint32_t)(hmmc->MmcCard.RelCardAdd);
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	609a      	str	r2, [r3, #8]
  pCardInfo->BlockNbr     = (uint32_t)(hmmc->MmcCard.BlockNbr);
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801ad72:	683b      	ldr	r3, [r7, #0]
 801ad74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockSize    = (uint32_t)(hmmc->MmcCard.BlockSize);
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801ad7a:	683b      	ldr	r3, [r7, #0]
 801ad7c:	611a      	str	r2, [r3, #16]
  pCardInfo->LogBlockNbr  = (uint32_t)(hmmc->MmcCard.LogBlockNbr);
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockSize = (uint32_t)(hmmc->MmcCard.LogBlockSize);
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801ad8a:	683b      	ldr	r3, [r7, #0]
 801ad8c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 801ad8e:	2300      	movs	r3, #0
}
 801ad90:	4618      	mov	r0, r3
 801ad92:	370c      	adds	r7, #12
 801ad94:	46bd      	mov	sp, r7
 801ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad9a:	4770      	bx	lr

0801ad9c <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 801ad9c:	b580      	push	{r7, lr}
 801ad9e:	b08e      	sub	sp, #56	@ 0x38
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	60f8      	str	r0, [r7, #12]
 801ada4:	60b9      	str	r1, [r7, #8]
 801ada6:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801ada8:	f7fe fab4 	bl	8019314 <HAL_GetTick>
 801adac:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 801adae:	68bb      	ldr	r3, [r7, #8]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d107      	bne.n	801adc4 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801adb8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801adc0:	2301      	movs	r3, #1
 801adc2:	e0de      	b.n	801af82 <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 801adc4:	68fb      	ldr	r3, [r7, #12]
 801adc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801adca:	b2db      	uxtb	r3, r3
 801adcc:	2b01      	cmp	r3, #1
 801adce:	f040 80d7 	bne.w	801af80 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	2200      	movs	r2, #0
 801add6:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	2203      	movs	r2, #3
 801addc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	2200      	movs	r2, #0
 801ade6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 801ade8:	68bb      	ldr	r3, [r7, #8]
 801adea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801adec:	f04f 33ff 	mov.w	r3, #4294967295
 801adf0:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 801adf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801adf6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801adf8:	2390      	movs	r3, #144	@ 0x90
 801adfa:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801adfc:	2302      	movs	r3, #2
 801adfe:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801ae00:	2300      	movs	r3, #0
 801ae02:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801ae04:	2300      	movs	r3, #0
 801ae06:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	f107 0210 	add.w	r2, r7, #16
 801ae10:	4611      	mov	r1, r2
 801ae12:	4618      	mov	r0, r3
 801ae14:	f005 ff38 	bl	8020c88 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 801ae18:	68fb      	ldr	r3, [r7, #12]
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	68da      	ldr	r2, [r3, #12]
 801ae1e:	68fb      	ldr	r3, [r7, #12]
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801ae26:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	2100      	movs	r1, #0
 801ae2e:	4618      	mov	r0, r3
 801ae30:	f006 f94d 	bl	80210ce <SDMMC_CmdSendEXTCSD>
 801ae34:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 801ae36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d045      	beq.n	801aec8 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	4a52      	ldr	r2, [pc, #328]	@ (801af8c <HAL_MMC_GetCardExtCSD+0x1f0>)
 801ae42:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ae48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae4a:	431a      	orrs	r2, r3
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	2201      	movs	r2, #1
 801ae54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801ae58:	2301      	movs	r3, #1
 801ae5a:	e092      	b.n	801af82 <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ae62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d013      	beq.n	801ae92 <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801ae6a:	2300      	movs	r3, #0
 801ae6c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ae6e:	e00d      	b.n	801ae8c <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	4618      	mov	r0, r3
 801ae76:	f005 fe6f 	bl	8020b58 <SDMMC_ReadFIFO>
 801ae7a:	4602      	mov	r2, r0
 801ae7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae7e:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 801ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ae82:	3304      	adds	r3, #4
 801ae84:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801ae86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ae88:	3301      	adds	r3, #1
 801ae8a:	637b      	str	r3, [r7, #52]	@ 0x34
 801ae8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ae8e:	2b07      	cmp	r3, #7
 801ae90:	d9ee      	bls.n	801ae70 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801ae92:	f7fe fa3f 	bl	8019314 <HAL_GetTick>
 801ae96:	4602      	mov	r2, r0
 801ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae9a:	1ad3      	subs	r3, r2, r3
 801ae9c:	687a      	ldr	r2, [r7, #4]
 801ae9e:	429a      	cmp	r2, r3
 801aea0:	d902      	bls.n	801aea8 <HAL_MMC_GetCardExtCSD+0x10c>
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d10f      	bne.n	801aec8 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	4a37      	ldr	r2, [pc, #220]	@ (801af8c <HAL_MMC_GetCardExtCSD+0x1f0>)
 801aeae:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aeb4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	2201      	movs	r2, #1
 801aec0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 801aec4:	2303      	movs	r3, #3
 801aec6:	e05c      	b.n	801af82 <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 801aec8:	68fb      	ldr	r3, [r7, #12]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aece:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d0c2      	beq.n	801ae5c <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	68da      	ldr	r2, [r3, #12]
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801aee4:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aeec:	f003 0308 	and.w	r3, r3, #8
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d00f      	beq.n	801af14 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	4a24      	ldr	r2, [pc, #144]	@ (801af8c <HAL_MMC_GetCardExtCSD+0x1f0>)
 801aefa:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801af00:	f043 0208 	orr.w	r2, r3, #8
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	2201      	movs	r2, #1
 801af0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801af10:	2301      	movs	r3, #1
 801af12:	e036      	b.n	801af82 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801af1a:	f003 0302 	and.w	r3, r3, #2
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d00f      	beq.n	801af42 <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801af22:	68fb      	ldr	r3, [r7, #12]
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	4a19      	ldr	r2, [pc, #100]	@ (801af8c <HAL_MMC_GetCardExtCSD+0x1f0>)
 801af28:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801af2e:	f043 0202 	orr.w	r2, r3, #2
 801af32:	68fb      	ldr	r3, [r7, #12]
 801af34:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	2201      	movs	r2, #1
 801af3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801af3e:	2301      	movs	r3, #1
 801af40:	e01f      	b.n	801af82 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801af48:	f003 0320 	and.w	r3, r3, #32
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d00f      	beq.n	801af70 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	4a0d      	ldr	r2, [pc, #52]	@ (801af8c <HAL_MMC_GetCardExtCSD+0x1f0>)
 801af56:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801af5c:	f043 0220 	orr.w	r2, r3, #32
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	2201      	movs	r2, #1
 801af68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801af6c:	2301      	movs	r3, #1
 801af6e:	e008      	b.n	801af82 <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	4a06      	ldr	r2, [pc, #24]	@ (801af90 <HAL_MMC_GetCardExtCSD+0x1f4>)
 801af76:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	2201      	movs	r2, #1
 801af7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 801af80:	2300      	movs	r3, #0
}
 801af82:	4618      	mov	r0, r3
 801af84:	3738      	adds	r7, #56	@ 0x38
 801af86:	46bd      	mov	sp, r7
 801af88:	bd80      	pop	{r7, pc}
 801af8a:	bf00      	nop
 801af8c:	1fe00fff 	.word	0x1fe00fff
 801af90:	18000f3a 	.word	0x18000f3a

0801af94 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 801af94:	b5b0      	push	{r4, r5, r7, lr}
 801af96:	b08c      	sub	sp, #48	@ 0x30
 801af98:	af02      	add	r7, sp, #8
 801af9a:	6078      	str	r0, [r7, #4]
 801af9c:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 801af9e:	2300      	movs	r3, #0
 801afa0:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	2203      	movs	r2, #3
 801afa6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	685b      	ldr	r3, [r3, #4]
 801afb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d014      	beq.n	801afe2 <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	685b      	ldr	r3, [r3, #4]
 801afbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d006      	beq.n	801afd4 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 801afc6:	2204      	movs	r2, #4
 801afc8:	6839      	ldr	r1, [r7, #0]
 801afca:	6878      	ldr	r0, [r7, #4]
 801afcc:	f000 fbd6 	bl	801b77c <MMC_PwrClassUpdate>
 801afd0:	6238      	str	r0, [r7, #32]
 801afd2:	e00c      	b.n	801afee <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 801afd4:	2202      	movs	r2, #2
 801afd6:	6839      	ldr	r1, [r7, #0]
 801afd8:	6878      	ldr	r0, [r7, #4]
 801afda:	f000 fbcf 	bl	801b77c <MMC_PwrClassUpdate>
 801afde:	6238      	str	r0, [r7, #32]
 801afe0:	e005      	b.n	801afee <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 801afe2:	2201      	movs	r2, #1
 801afe4:	6839      	ldr	r1, [r7, #0]
 801afe6:	6878      	ldr	r0, [r7, #4]
 801afe8:	f000 fbc8 	bl	801b77c <MMC_PwrClassUpdate>
 801afec:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 801afee:	6a3b      	ldr	r3, [r7, #32]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d17b      	bne.n	801b0ec <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 801aff4:	683b      	ldr	r3, [r7, #0]
 801aff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801affa:	d107      	bne.n	801b00c <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	4946      	ldr	r1, [pc, #280]	@ (801b11c <HAL_MMC_ConfigWideBusOperation+0x188>)
 801b002:	4618      	mov	r0, r3
 801b004:	f006 f840 	bl	8021088 <SDMMC_CmdSwitch>
 801b008:	6238      	str	r0, [r7, #32]
 801b00a:	e019      	b.n	801b040 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 801b00c:	683b      	ldr	r3, [r7, #0]
 801b00e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b012:	d107      	bne.n	801b024 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	4941      	ldr	r1, [pc, #260]	@ (801b120 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 801b01a:	4618      	mov	r0, r3
 801b01c:	f006 f834 	bl	8021088 <SDMMC_CmdSwitch>
 801b020:	6238      	str	r0, [r7, #32]
 801b022:	e00d      	b.n	801b040 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 801b024:	683b      	ldr	r3, [r7, #0]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d107      	bne.n	801b03a <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	493d      	ldr	r1, [pc, #244]	@ (801b124 <HAL_MMC_ConfigWideBusOperation+0x190>)
 801b030:	4618      	mov	r0, r3
 801b032:	f006 f829 	bl	8021088 <SDMMC_CmdSwitch>
 801b036:	6238      	str	r0, [r7, #32]
 801b038:	e002      	b.n	801b040 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 801b03a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801b03e:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 801b040:	6a3b      	ldr	r3, [r7, #32]
 801b042:	2b00      	cmp	r3, #0
 801b044:	d152      	bne.n	801b0ec <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 801b046:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b04a:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	681a      	ldr	r2, [r3, #0]
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b054:	041b      	lsls	r3, r3, #16
 801b056:	4619      	mov	r1, r3
 801b058:	4610      	mov	r0, r2
 801b05a:	f005 ffd2 	bl	8021002 <SDMMC_CmdSendStatus>
 801b05e:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 801b060:	6a3b      	ldr	r3, [r7, #32]
 801b062:	2b00      	cmp	r3, #0
 801b064:	d112      	bne.n	801b08c <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	2100      	movs	r1, #0
 801b06c:	4618      	mov	r0, r3
 801b06e:	f005 fdf8 	bl	8020c62 <SDMMC_GetResponse>
 801b072:	61f8      	str	r0, [r7, #28]
        count--;
 801b074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b076:	3b01      	subs	r3, #1
 801b078:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 801b07a:	69fb      	ldr	r3, [r7, #28]
 801b07c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b080:	2b00      	cmp	r3, #0
 801b082:	d104      	bne.n	801b08e <HAL_MMC_ConfigWideBusOperation+0xfa>
 801b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b086:	2b00      	cmp	r3, #0
 801b088:	d1e0      	bne.n	801b04c <HAL_MMC_ConfigWideBusOperation+0xb8>
 801b08a:	e000      	b.n	801b08e <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 801b08c:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 801b08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b090:	2b00      	cmp	r3, #0
 801b092:	d025      	beq.n	801b0e0 <HAL_MMC_ConfigWideBusOperation+0x14c>
 801b094:	6a3b      	ldr	r3, [r7, #32]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d122      	bne.n	801b0e0 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 801b09a:	69fb      	ldr	r3, [r7, #28]
 801b09c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d003      	beq.n	801b0ac <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801b0a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801b0a8:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 801b0aa:	e01f      	b.n	801b0ec <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	f107 0408 	add.w	r4, r7, #8
 801b0b2:	1d1d      	adds	r5, r3, #4
 801b0b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b0b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b0b8:	682b      	ldr	r3, [r5, #0]
 801b0ba:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 801b0bc:	683b      	ldr	r3, [r7, #0]
 801b0be:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	681c      	ldr	r4, [r3, #0]
 801b0c4:	466a      	mov	r2, sp
 801b0c6:	f107 0314 	add.w	r3, r7, #20
 801b0ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b0ce:	e882 0003 	stmia.w	r2, {r0, r1}
 801b0d2:	f107 0308 	add.w	r3, r7, #8
 801b0d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b0d8:	4620      	mov	r0, r4
 801b0da:	f005 fd13 	bl	8020b04 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 801b0de:	e005      	b.n	801b0ec <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 801b0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d102      	bne.n	801b0ec <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 801b0e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801b0ea:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	2201      	movs	r2, #1
 801b0f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 801b0f4:	6a3b      	ldr	r3, [r7, #32]
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d00b      	beq.n	801b112 <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	4a0a      	ldr	r2, [pc, #40]	@ (801b128 <HAL_MMC_ConfigWideBusOperation+0x194>)
 801b100:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b106:	6a3b      	ldr	r3, [r7, #32]
 801b108:	431a      	orrs	r2, r3
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801b10e:	2301      	movs	r3, #1
 801b110:	e000      	b.n	801b114 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 801b112:	2300      	movs	r3, #0
}
 801b114:	4618      	mov	r0, r3
 801b116:	3728      	adds	r7, #40	@ 0x28
 801b118:	46bd      	mov	sp, r7
 801b11a:	bdb0      	pop	{r4, r5, r7, pc}
 801b11c:	03b70200 	.word	0x03b70200
 801b120:	03b70100 	.word	0x03b70100
 801b124:	03b70000 	.word	0x03b70000
 801b128:	1fe00fff 	.word	0x1fe00fff

0801b12c <HAL_MMC_GetCardState>:
  * @brief  Gets the current mmc card data state.
  * @param  hmmc: pointer to MMC handle
  * @retval Card state
  */
HAL_MMC_CardStateTypeDef HAL_MMC_GetCardState(MMC_HandleTypeDef *hmmc)
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b086      	sub	sp, #24
 801b130:	af00      	add	r7, sp, #0
 801b132:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0U;
 801b134:	2300      	movs	r3, #0
 801b136:	60fb      	str	r3, [r7, #12]

  errorstate = MMC_SendStatus(hmmc, &resp1);
 801b138:	f107 030c 	add.w	r3, r7, #12
 801b13c:	4619      	mov	r1, r3
 801b13e:	6878      	ldr	r0, [r7, #4]
 801b140:	f000 f96f 	bl	801b422 <MMC_SendStatus>
 801b144:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b146:	697b      	ldr	r3, [r7, #20]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d005      	beq.n	801b158 <HAL_MMC_GetCardState+0x2c>
  {
    hmmc->ErrorCode |= errorstate;
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b150:	697b      	ldr	r3, [r7, #20]
 801b152:	431a      	orrs	r2, r3
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	0a5b      	lsrs	r3, r3, #9
 801b15c:	f003 030f 	and.w	r3, r3, #15
 801b160:	613b      	str	r3, [r7, #16]

  return (HAL_MMC_CardStateTypeDef)cardstate;
 801b162:	693b      	ldr	r3, [r7, #16]
}
 801b164:	4618      	mov	r0, r3
 801b166:	3718      	adds	r7, #24
 801b168:	46bd      	mov	sp, r7
 801b16a:	bd80      	pop	{r7, pc}

0801b16c <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 801b16c:	b5b0      	push	{r4, r5, r7, lr}
 801b16e:	b096      	sub	sp, #88	@ 0x58
 801b170:	af02      	add	r7, sp, #8
 801b172:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 801b174:	2302      	movs	r3, #2
 801b176:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	4618      	mov	r0, r3
 801b180:	f005 fd2a 	bl	8020bd8 <SDMMC_GetPowerState>
 801b184:	4603      	mov	r3, r0
 801b186:	2b00      	cmp	r3, #0
 801b188:	d102      	bne.n	801b190 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 801b18a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 801b18e:	e0e6      	b.n	801b35e <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	4618      	mov	r0, r3
 801b196:	f005 fed0 	bl	8020f3a <SDMMC_CmdSendCID>
 801b19a:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b19c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d001      	beq.n	801b1a6 <MMC_InitCard+0x3a>
  {
    return errorstate;
 801b1a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b1a4:	e0db      	b.n	801b35e <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	2100      	movs	r1, #0
 801b1ac:	4618      	mov	r0, r3
 801b1ae:	f005 fd58 	bl	8020c62 <SDMMC_GetResponse>
 801b1b2:	4602      	mov	r2, r0
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	2104      	movs	r1, #4
 801b1be:	4618      	mov	r0, r3
 801b1c0:	f005 fd4f 	bl	8020c62 <SDMMC_GetResponse>
 801b1c4:	4602      	mov	r2, r0
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	2108      	movs	r1, #8
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f005 fd46 	bl	8020c62 <SDMMC_GetResponse>
 801b1d6:	4602      	mov	r2, r0
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	210c      	movs	r1, #12
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	f005 fd3d 	bl	8020c62 <SDMMC_GetResponse>
 801b1e8:	4602      	mov	r2, r0
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801b1f6:	4611      	mov	r1, r2
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	f005 fedd 	bl	8020fb8 <SDMMC_CmdSetRelAddMmc>
 801b1fe:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b202:	2b00      	cmp	r3, #0
 801b204:	d001      	beq.n	801b20a <MMC_InitCard+0x9e>
  {
    return errorstate;
 801b206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b208:	e0a9      	b.n	801b35e <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 801b20a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	681a      	ldr	r2, [r3, #0]
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b21a:	041b      	lsls	r3, r3, #16
 801b21c:	4619      	mov	r1, r3
 801b21e:	4610      	mov	r0, r2
 801b220:	f005 feaa 	bl	8020f78 <SDMMC_CmdSendCSD>
 801b224:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d001      	beq.n	801b230 <MMC_InitCard+0xc4>
  {
    return errorstate;
 801b22c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b22e:	e096      	b.n	801b35e <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	2100      	movs	r1, #0
 801b236:	4618      	mov	r0, r3
 801b238:	f005 fd13 	bl	8020c62 <SDMMC_GetResponse>
 801b23c:	4602      	mov	r2, r0
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	2104      	movs	r1, #4
 801b248:	4618      	mov	r0, r3
 801b24a:	f005 fd0a 	bl	8020c62 <SDMMC_GetResponse>
 801b24e:	4602      	mov	r2, r0
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	2108      	movs	r1, #8
 801b25a:	4618      	mov	r0, r3
 801b25c:	f005 fd01 	bl	8020c62 <SDMMC_GetResponse>
 801b260:	4602      	mov	r2, r0
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	681b      	ldr	r3, [r3, #0]
 801b26a:	210c      	movs	r1, #12
 801b26c:	4618      	mov	r0, r3
 801b26e:	f005 fcf8 	bl	8020c62 <SDMMC_GetResponse>
 801b272:	4602      	mov	r2, r0
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	2104      	movs	r1, #4
 801b27e:	4618      	mov	r0, r3
 801b280:	f005 fcef 	bl	8020c62 <SDMMC_GetResponse>
 801b284:	4603      	mov	r3, r0
 801b286:	0d1a      	lsrs	r2, r3, #20
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	681a      	ldr	r2, [r3, #0]
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b294:	041b      	lsls	r3, r3, #16
 801b296:	4619      	mov	r1, r3
 801b298:	4610      	mov	r0, r2
 801b29a:	f005 fe0d 	bl	8020eb8 <SDMMC_CmdSelDesel>
 801b29e:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b2a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d001      	beq.n	801b2aa <MMC_InitCard+0x13e>
  {
    return errorstate;
 801b2a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b2a8:	e059      	b.n	801b35e <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 801b2aa:	f107 031c 	add.w	r3, r7, #28
 801b2ae:	4619      	mov	r1, r3
 801b2b0:	6878      	ldr	r0, [r7, #4]
 801b2b2:	f7ff fba7 	bl	801aa04 <HAL_MMC_GetCardCSD>
 801b2b6:	4603      	mov	r3, r0
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d002      	beq.n	801b2c2 <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b2c0:	e04d      	b.n	801b35e <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	681a      	ldr	r2, [r3, #0]
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b2ca:	041b      	lsls	r3, r3, #16
 801b2cc:	4619      	mov	r1, r3
 801b2ce:	4610      	mov	r0, r2
 801b2d0:	f005 fe97 	bl	8021002 <SDMMC_CmdSendStatus>
 801b2d4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b2d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	d005      	beq.n	801b2e8 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b2e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b2e2:	431a      	orrs	r2, r3
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	3378      	adds	r3, #120	@ 0x78
 801b2ec:	f04f 32ff 	mov.w	r2, #4294967295
 801b2f0:	4619      	mov	r1, r3
 801b2f2:	6878      	ldr	r0, [r7, #4]
 801b2f4:	f7ff fd52 	bl	801ad9c <HAL_MMC_GetCardExtCSD>
 801b2f8:	4603      	mov	r3, r0
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d002      	beq.n	801b304 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b302:	e02c      	b.n	801b35e <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681a      	ldr	r2, [r3, #0]
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b30c:	041b      	lsls	r3, r3, #16
 801b30e:	4619      	mov	r1, r3
 801b310:	4610      	mov	r0, r2
 801b312:	f005 fe76 	bl	8021002 <SDMMC_CmdSendStatus>
 801b316:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d005      	beq.n	801b32a <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b324:	431a      	orrs	r2, r3
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	f107 0408 	add.w	r4, r7, #8
 801b330:	1d1d      	adds	r5, r3, #4
 801b332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b336:	682b      	ldr	r3, [r5, #0]
 801b338:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 801b33a:	2300      	movs	r3, #0
 801b33c:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	681c      	ldr	r4, [r3, #0]
 801b342:	466a      	mov	r2, sp
 801b344:	f107 0314 	add.w	r3, r7, #20
 801b348:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b34c:	e882 0003 	stmia.w	r2, {r0, r1}
 801b350:	f107 0308 	add.w	r3, r7, #8
 801b354:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b356:	4620      	mov	r0, r4
 801b358:	f005 fbd4 	bl	8020b04 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 801b35c:	2300      	movs	r3, #0
}
 801b35e:	4618      	mov	r0, r3
 801b360:	3750      	adds	r7, #80	@ 0x50
 801b362:	46bd      	mov	sp, r7
 801b364:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b368 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 801b368:	b580      	push	{r7, lr}
 801b36a:	b086      	sub	sp, #24
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801b370:	2300      	movs	r3, #0
 801b372:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 801b374:	2300      	movs	r3, #0
 801b376:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 801b378:	2300      	movs	r3, #0
 801b37a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	4618      	mov	r0, r3
 801b382:	f005 fdbc 	bl	8020efe <SDMMC_CmdGoIdleState>
 801b386:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d027      	beq.n	801b3de <MMC_PowerON+0x76>
  {
    return errorstate;
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	e034      	b.n	801b3fc <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 801b392:	68bb      	ldr	r3, [r7, #8]
 801b394:	1c5a      	adds	r2, r3, #1
 801b396:	60ba      	str	r2, [r7, #8]
 801b398:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b39c:	4293      	cmp	r3, r2
 801b39e:	d102      	bne.n	801b3a6 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 801b3a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801b3a4:	e02a      	b.n	801b3fc <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	4916      	ldr	r1, [pc, #88]	@ (801b404 <MMC_PowerON+0x9c>)
 801b3ac:	4618      	mov	r0, r3
 801b3ae:	f005 fe4b 	bl	8021048 <SDMMC_CmdOpCondition>
 801b3b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d002      	beq.n	801b3c0 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 801b3ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801b3be:	e01d      	b.n	801b3fc <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	2100      	movs	r1, #0
 801b3c6:	4618      	mov	r0, r3
 801b3c8:	f005 fc4b 	bl	8020c62 <SDMMC_GetResponse>
 801b3cc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801b3ce:	697b      	ldr	r3, [r7, #20]
 801b3d0:	0fdb      	lsrs	r3, r3, #31
 801b3d2:	2b01      	cmp	r3, #1
 801b3d4:	d101      	bne.n	801b3da <MMC_PowerON+0x72>
 801b3d6:	2301      	movs	r3, #1
 801b3d8:	e000      	b.n	801b3dc <MMC_PowerON+0x74>
 801b3da:	2300      	movs	r3, #0
 801b3dc:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 801b3de:	693b      	ldr	r3, [r7, #16]
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d0d6      	beq.n	801b392 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 801b3e4:	697b      	ldr	r3, [r7, #20]
 801b3e6:	0e1b      	lsrs	r3, r3, #24
 801b3e8:	2bc0      	cmp	r3, #192	@ 0xc0
 801b3ea:	d103      	bne.n	801b3f4 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	2201      	movs	r2, #1
 801b3f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 801b3f2:	e002      	b.n	801b3fa <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	2200      	movs	r2, #0
 801b3f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 801b3fa:	2300      	movs	r3, #0
}
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	3718      	adds	r7, #24
 801b400:	46bd      	mov	sp, r7
 801b402:	bd80      	pop	{r7, pc}
 801b404:	c0ff8000 	.word	0xc0ff8000

0801b408 <MMC_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
static void MMC_PowerOFF(MMC_HandleTypeDef *hmmc)
{
 801b408:	b580      	push	{r7, lr}
 801b40a:	b082      	sub	sp, #8
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hmmc->Instance);
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	4618      	mov	r0, r3
 801b416:	f005 fbce 	bl	8020bb6 <SDMMC_PowerState_OFF>
}
 801b41a:	bf00      	nop
 801b41c:	3708      	adds	r7, #8
 801b41e:	46bd      	mov	sp, r7
 801b420:	bd80      	pop	{r7, pc}

0801b422 <MMC_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the MMC card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t MMC_SendStatus(MMC_HandleTypeDef *hmmc, uint32_t *pCardStatus)
{
 801b422:	b580      	push	{r7, lr}
 801b424:	b084      	sub	sp, #16
 801b426:	af00      	add	r7, sp, #0
 801b428:	6078      	str	r0, [r7, #4]
 801b42a:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 801b42c:	683b      	ldr	r3, [r7, #0]
 801b42e:	2b00      	cmp	r3, #0
 801b430:	d102      	bne.n	801b438 <MMC_SendStatus+0x16>
  {
    return HAL_MMC_ERROR_PARAM;
 801b432:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801b436:	e018      	b.n	801b46a <MMC_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	681a      	ldr	r2, [r3, #0]
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b440:	041b      	lsls	r3, r3, #16
 801b442:	4619      	mov	r1, r3
 801b444:	4610      	mov	r0, r2
 801b446:	f005 fddc 	bl	8021002 <SDMMC_CmdSendStatus>
 801b44a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d001      	beq.n	801b456 <MMC_SendStatus+0x34>
  {
    return errorstate;
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	e009      	b.n	801b46a <MMC_SendStatus+0x48>
  }

  /* Get MMC card status */
  *pCardStatus = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	2100      	movs	r1, #0
 801b45c:	4618      	mov	r0, r3
 801b45e:	f005 fc00 	bl	8020c62 <SDMMC_GetResponse>
 801b462:	4602      	mov	r2, r0
 801b464:	683b      	ldr	r3, [r7, #0]
 801b466:	601a      	str	r2, [r3, #0]

  return HAL_MMC_ERROR_NONE;
 801b468:	2300      	movs	r3, #0
}
 801b46a:	4618      	mov	r0, r3
 801b46c:	3710      	adds	r7, #16
 801b46e:	46bd      	mov	sp, r7
 801b470:	bd80      	pop	{r7, pc}
	...

0801b474 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 801b474:	b580      	push	{r7, lr}
 801b476:	b090      	sub	sp, #64	@ 0x40
 801b478:	af00      	add	r7, sp, #0
 801b47a:	60f8      	str	r0, [r7, #12]
 801b47c:	60b9      	str	r1, [r7, #8]
 801b47e:	603b      	str	r3, [r7, #0]
 801b480:	4613      	mov	r3, r2
 801b482:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801b484:	f7fd ff46 	bl	8019314 <HAL_GetTick>
 801b488:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 801b48a:	2300      	movs	r3, #0
 801b48c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 801b48e:	68fb      	ldr	r3, [r7, #12]
 801b490:	2200      	movs	r2, #0
 801b492:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	2200      	movs	r2, #0
 801b49a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801b49c:	f04f 33ff 	mov.w	r3, #4294967295
 801b4a0:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 801b4a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b4a6:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801b4a8:	2390      	movs	r3, #144	@ 0x90
 801b4aa:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801b4ac:	2302      	movs	r3, #2
 801b4ae:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801b4b0:	2300      	movs	r3, #0
 801b4b2:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801b4b4:	2301      	movs	r3, #1
 801b4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 801b4b8:	68fb      	ldr	r3, [r7, #12]
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	f107 0214 	add.w	r2, r7, #20
 801b4c0:	4611      	mov	r1, r2
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	f005 fbe0 	bl	8020c88 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 801b4c8:	68fb      	ldr	r3, [r7, #12]
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	2100      	movs	r1, #0
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	f005 fdfd 	bl	80210ce <SDMMC_CmdSendEXTCSD>
 801b4d4:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d04e      	beq.n	801b57a <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	4a5c      	ldr	r2, [pc, #368]	@ (801b654 <MMC_ReadExtCSD+0x1e0>)
 801b4e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b4ea:	431a      	orrs	r2, r3
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801b4f0:	68fb      	ldr	r3, [r7, #12]
 801b4f2:	2201      	movs	r2, #1
 801b4f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801b4f8:	2301      	movs	r3, #1
 801b4fa:	e0a6      	b.n	801b64a <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b502:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b506:	2b00      	cmp	r3, #0
 801b508:	d01c      	beq.n	801b544 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b50a:	2300      	movs	r3, #0
 801b50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b50e:	e013      	b.n	801b538 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	4618      	mov	r0, r3
 801b516:	f005 fb1f 	bl	8020b58 <SDMMC_ReadFIFO>
 801b51a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 801b51c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b520:	4413      	add	r3, r2
 801b522:	88fa      	ldrh	r2, [r7, #6]
 801b524:	0892      	lsrs	r2, r2, #2
 801b526:	b292      	uxth	r2, r2
 801b528:	4293      	cmp	r3, r2
 801b52a:	d102      	bne.n	801b532 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b530:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b534:	3301      	adds	r3, #1
 801b536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b53a:	2b07      	cmp	r3, #7
 801b53c:	d9e8      	bls.n	801b510 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 801b53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b540:	3308      	adds	r3, #8
 801b542:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801b544:	f7fd fee6 	bl	8019314 <HAL_GetTick>
 801b548:	4602      	mov	r2, r0
 801b54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b54c:	1ad3      	subs	r3, r2, r3
 801b54e:	683a      	ldr	r2, [r7, #0]
 801b550:	429a      	cmp	r2, r3
 801b552:	d902      	bls.n	801b55a <MMC_ReadExtCSD+0xe6>
 801b554:	683b      	ldr	r3, [r7, #0]
 801b556:	2b00      	cmp	r3, #0
 801b558:	d10f      	bne.n	801b57a <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	4a3d      	ldr	r2, [pc, #244]	@ (801b654 <MMC_ReadExtCSD+0x1e0>)
 801b560:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b566:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	2201      	movs	r2, #1
 801b572:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 801b576:	2303      	movs	r3, #3
 801b578:	e067      	b.n	801b64a <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b580:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 801b584:	2b00      	cmp	r3, #0
 801b586:	d0b9      	beq.n	801b4fc <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 801b588:	68fb      	ldr	r3, [r7, #12]
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b58e:	f003 0308 	and.w	r3, r3, #8
 801b592:	2b00      	cmp	r3, #0
 801b594:	d00f      	beq.n	801b5b6 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	4a2e      	ldr	r2, [pc, #184]	@ (801b654 <MMC_ReadExtCSD+0x1e0>)
 801b59c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b5a2:	f043 0208 	orr.w	r2, r3, #8
 801b5a6:	68fb      	ldr	r3, [r7, #12]
 801b5a8:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	2201      	movs	r2, #1
 801b5ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801b5b2:	2301      	movs	r3, #1
 801b5b4:	e049      	b.n	801b64a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b5bc:	f003 0302 	and.w	r3, r3, #2
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d00f      	beq.n	801b5e4 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	4a22      	ldr	r2, [pc, #136]	@ (801b654 <MMC_ReadExtCSD+0x1e0>)
 801b5ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b5d0:	f043 0202 	orr.w	r2, r3, #2
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801b5d8:	68fb      	ldr	r3, [r7, #12]
 801b5da:	2201      	movs	r2, #1
 801b5dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801b5e0:	2301      	movs	r3, #1
 801b5e2:	e032      	b.n	801b64a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b5ea:	f003 0320 	and.w	r3, r3, #32
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d00f      	beq.n	801b612 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 801b5f2:	68fb      	ldr	r3, [r7, #12]
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	4a17      	ldr	r2, [pc, #92]	@ (801b654 <MMC_ReadExtCSD+0x1e0>)
 801b5f8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b5fe:	f043 0220 	orr.w	r2, r3, #32
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	2201      	movs	r2, #1
 801b60a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801b60e:	2301      	movs	r3, #1
 801b610:	e01b      	b.n	801b64a <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	681a      	ldr	r2, [r3, #0]
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b61a:	041b      	lsls	r3, r3, #16
 801b61c:	4619      	mov	r1, r3
 801b61e:	4610      	mov	r0, r2
 801b620:	f005 fcef 	bl	8021002 <SDMMC_CmdSendStatus>
 801b624:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 801b626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d005      	beq.n	801b638 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b632:	431a      	orrs	r2, r3
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	4a06      	ldr	r2, [pc, #24]	@ (801b658 <MMC_ReadExtCSD+0x1e4>)
 801b63e:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 801b640:	68fb      	ldr	r3, [r7, #12]
 801b642:	2201      	movs	r2, #1
 801b644:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 801b648:	2300      	movs	r3, #0
}
 801b64a:	4618      	mov	r0, r3
 801b64c:	3740      	adds	r7, #64	@ 0x40
 801b64e:	46bd      	mov	sp, r7
 801b650:	bd80      	pop	{r7, pc}
 801b652:	bf00      	nop
 801b654:	1fe00fff 	.word	0x1fe00fff
 801b658:	18000f3a 	.word	0x18000f3a

0801b65c <MMC_Read_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Read_IT(MMC_HandleTypeDef *hmmc)
{
 801b65c:	b580      	push	{r7, lr}
 801b65e:	b086      	sub	sp, #24
 801b660:	af00      	add	r7, sp, #0
 801b662:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hmmc->pRxBuffPtr;
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b668:	613b      	str	r3, [r7, #16]

  if (hmmc->RxXferSize >= SDMMC_FIFO_SIZE)
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b66e:	2b1f      	cmp	r3, #31
 801b670:	d936      	bls.n	801b6e0 <MMC_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b672:	2300      	movs	r3, #0
 801b674:	617b      	str	r3, [r7, #20]
 801b676:	e027      	b.n	801b6c8 <MMC_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hmmc->Instance);
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	4618      	mov	r0, r3
 801b67e:	f005 fa6b 	bl	8020b58 <SDMMC_ReadFIFO>
 801b682:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	b2da      	uxtb	r2, r3
 801b688:	693b      	ldr	r3, [r7, #16]
 801b68a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801b68c:	693b      	ldr	r3, [r7, #16]
 801b68e:	3301      	adds	r3, #1
 801b690:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	0a1b      	lsrs	r3, r3, #8
 801b696:	b2da      	uxtb	r2, r3
 801b698:	693b      	ldr	r3, [r7, #16]
 801b69a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801b69c:	693b      	ldr	r3, [r7, #16]
 801b69e:	3301      	adds	r3, #1
 801b6a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801b6a2:	68fb      	ldr	r3, [r7, #12]
 801b6a4:	0c1b      	lsrs	r3, r3, #16
 801b6a6:	b2da      	uxtb	r2, r3
 801b6a8:	693b      	ldr	r3, [r7, #16]
 801b6aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 801b6ac:	693b      	ldr	r3, [r7, #16]
 801b6ae:	3301      	adds	r3, #1
 801b6b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	0e1b      	lsrs	r3, r3, #24
 801b6b6:	b2da      	uxtb	r2, r3
 801b6b8:	693b      	ldr	r3, [r7, #16]
 801b6ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 801b6bc:	693b      	ldr	r3, [r7, #16]
 801b6be:	3301      	adds	r3, #1
 801b6c0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b6c2:	697b      	ldr	r3, [r7, #20]
 801b6c4:	3301      	adds	r3, #1
 801b6c6:	617b      	str	r3, [r7, #20]
 801b6c8:	697b      	ldr	r3, [r7, #20]
 801b6ca:	2b07      	cmp	r3, #7
 801b6cc:	d9d4      	bls.n	801b678 <MMC_Read_IT+0x1c>
    }

    hmmc->pRxBuffPtr = tmp;
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	693a      	ldr	r2, [r7, #16]
 801b6d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hmmc->RxXferSize -= SDMMC_FIFO_SIZE;
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b6d8:	f1a3 0220 	sub.w	r2, r3, #32
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 801b6e0:	bf00      	nop
 801b6e2:	3718      	adds	r7, #24
 801b6e4:	46bd      	mov	sp, r7
 801b6e6:	bd80      	pop	{r7, pc}

0801b6e8 <MMC_Write_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Write_IT(MMC_HandleTypeDef *hmmc)
{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	b086      	sub	sp, #24
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hmmc->pTxBuffPtr;
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	69db      	ldr	r3, [r3, #28]
 801b6f4:	613b      	str	r3, [r7, #16]

  if (hmmc->TxXferSize >= SDMMC_FIFO_SIZE)
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	6a1b      	ldr	r3, [r3, #32]
 801b6fa:	2b1f      	cmp	r3, #31
 801b6fc:	d93a      	bls.n	801b774 <MMC_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b6fe:	2300      	movs	r3, #0
 801b700:	617b      	str	r3, [r7, #20]
 801b702:	e02b      	b.n	801b75c <MMC_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 801b704:	693b      	ldr	r3, [r7, #16]
 801b706:	781b      	ldrb	r3, [r3, #0]
 801b708:	60fb      	str	r3, [r7, #12]
      tmp++;
 801b70a:	693b      	ldr	r3, [r7, #16]
 801b70c:	3301      	adds	r3, #1
 801b70e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 801b710:	693b      	ldr	r3, [r7, #16]
 801b712:	781b      	ldrb	r3, [r3, #0]
 801b714:	021a      	lsls	r2, r3, #8
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	4313      	orrs	r3, r2
 801b71a:	60fb      	str	r3, [r7, #12]
      tmp++;
 801b71c:	693b      	ldr	r3, [r7, #16]
 801b71e:	3301      	adds	r3, #1
 801b720:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801b722:	693b      	ldr	r3, [r7, #16]
 801b724:	781b      	ldrb	r3, [r3, #0]
 801b726:	041a      	lsls	r2, r3, #16
 801b728:	68fb      	ldr	r3, [r7, #12]
 801b72a:	4313      	orrs	r3, r2
 801b72c:	60fb      	str	r3, [r7, #12]
      tmp++;
 801b72e:	693b      	ldr	r3, [r7, #16]
 801b730:	3301      	adds	r3, #1
 801b732:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801b734:	693b      	ldr	r3, [r7, #16]
 801b736:	781b      	ldrb	r3, [r3, #0]
 801b738:	061a      	lsls	r2, r3, #24
 801b73a:	68fb      	ldr	r3, [r7, #12]
 801b73c:	4313      	orrs	r3, r2
 801b73e:	60fb      	str	r3, [r7, #12]
      tmp++;
 801b740:	693b      	ldr	r3, [r7, #16]
 801b742:	3301      	adds	r3, #1
 801b744:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hmmc->Instance, &data);
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	f107 020c 	add.w	r2, r7, #12
 801b74e:	4611      	mov	r1, r2
 801b750:	4618      	mov	r0, r3
 801b752:	f005 fa0e 	bl	8020b72 <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801b756:	697b      	ldr	r3, [r7, #20]
 801b758:	3301      	adds	r3, #1
 801b75a:	617b      	str	r3, [r7, #20]
 801b75c:	697b      	ldr	r3, [r7, #20]
 801b75e:	2b07      	cmp	r3, #7
 801b760:	d9d0      	bls.n	801b704 <MMC_Write_IT+0x1c>
    }

    hmmc->pTxBuffPtr = tmp;
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	693a      	ldr	r2, [r7, #16]
 801b766:	61da      	str	r2, [r3, #28]
    hmmc->TxXferSize -= SDMMC_FIFO_SIZE;
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	6a1b      	ldr	r3, [r3, #32]
 801b76c:	f1a3 0220 	sub.w	r2, r3, #32
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	621a      	str	r2, [r3, #32]
  }
}
 801b774:	bf00      	nop
 801b776:	3718      	adds	r7, #24
 801b778:	46bd      	mov	sp, r7
 801b77a:	bd80      	pop	{r7, pc}

0801b77c <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 801b77c:	b580      	push	{r7, lr}
 801b77e:	b08a      	sub	sp, #40	@ 0x28
 801b780:	af00      	add	r7, sp, #0
 801b782:	60f8      	str	r0, [r7, #12]
 801b784:	60b9      	str	r1, [r7, #8]
 801b786:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 801b788:	2300      	movs	r3, #0
 801b78a:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 801b78c:	2300      	movs	r3, #0
 801b78e:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 801b790:	68bb      	ldr	r3, [r7, #8]
 801b792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b796:	d004      	beq.n	801b7a2 <MMC_PwrClassUpdate+0x26>
 801b798:	68bb      	ldr	r3, [r7, #8]
 801b79a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b79e:	f040 8085 	bne.w	801b8ac <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 801b7a2:	2300      	movs	r3, #0
 801b7a4:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 801b7a6:	f107 0114 	add.w	r1, r7, #20
 801b7aa:	f04f 33ff 	mov.w	r3, #4294967295
 801b7ae:	22bb      	movs	r2, #187	@ 0xbb
 801b7b0:	68f8      	ldr	r0, [r7, #12]
 801b7b2:	f7ff fe5f 	bl	801b474 <MMC_ReadExtCSD>
 801b7b6:	4603      	mov	r3, r0
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d003      	beq.n	801b7c4 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801b7bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801b7c0:	61fb      	str	r3, [r7, #28]
 801b7c2:	e002      	b.n	801b7ca <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 801b7c4:	697b      	ldr	r3, [r7, #20]
 801b7c6:	0e1b      	lsrs	r3, r3, #24
 801b7c8:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	2b04      	cmp	r3, #4
 801b7ce:	d105      	bne.n	801b7dc <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 801b7d0:	68fb      	ldr	r3, [r7, #12]
 801b7d2:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 801b7d6:	0e1b      	lsrs	r3, r3, #24
 801b7d8:	61bb      	str	r3, [r7, #24]
 801b7da:	e00e      	b.n	801b7fa <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	2b02      	cmp	r3, #2
 801b7e0:	d106      	bne.n	801b7f0 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801b7e8:	0c1b      	lsrs	r3, r3, #16
 801b7ea:	b2db      	uxtb	r3, r3
 801b7ec:	61bb      	str	r3, [r7, #24]
 801b7ee:	e004      	b.n	801b7fa <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801b7f6:	0e1b      	lsrs	r3, r3, #24
 801b7f8:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 801b7fa:	69fb      	ldr	r3, [r7, #28]
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d155      	bne.n	801b8ac <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 801b800:	68bb      	ldr	r3, [r7, #8]
 801b802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b806:	d102      	bne.n	801b80e <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 801b808:	69bb      	ldr	r3, [r7, #24]
 801b80a:	091b      	lsrs	r3, r3, #4
 801b80c:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 801b80e:	697a      	ldr	r2, [r7, #20]
 801b810:	69bb      	ldr	r3, [r7, #24]
 801b812:	4053      	eors	r3, r2
 801b814:	f003 030f 	and.w	r3, r3, #15
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d047      	beq.n	801b8ac <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	6818      	ldr	r0, [r3, #0]
 801b820:	69bb      	ldr	r3, [r7, #24]
 801b822:	021b      	lsls	r3, r3, #8
 801b824:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 801b828:	4b23      	ldr	r3, [pc, #140]	@ (801b8b8 <MMC_PwrClassUpdate+0x13c>)
 801b82a:	4313      	orrs	r3, r2
 801b82c:	4619      	mov	r1, r3
 801b82e:	f005 fc2b 	bl	8021088 <SDMMC_CmdSwitch>
 801b832:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 801b834:	69fb      	ldr	r3, [r7, #28]
 801b836:	2b00      	cmp	r3, #0
 801b838:	d138      	bne.n	801b8ac <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 801b83a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b83e:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	681a      	ldr	r2, [r3, #0]
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b848:	041b      	lsls	r3, r3, #16
 801b84a:	4619      	mov	r1, r3
 801b84c:	4610      	mov	r0, r2
 801b84e:	f005 fbd8 	bl	8021002 <SDMMC_CmdSendStatus>
 801b852:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 801b854:	69fb      	ldr	r3, [r7, #28]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d112      	bne.n	801b880 <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	2100      	movs	r1, #0
 801b860:	4618      	mov	r0, r3
 801b862:	f005 f9fe 	bl	8020c62 <SDMMC_GetResponse>
 801b866:	6238      	str	r0, [r7, #32]
            count--;
 801b868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b86a:	3b01      	subs	r3, #1
 801b86c:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 801b86e:	6a3b      	ldr	r3, [r7, #32]
 801b870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b874:	2b00      	cmp	r3, #0
 801b876:	d104      	bne.n	801b882 <MMC_PwrClassUpdate+0x106>
 801b878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d1e0      	bne.n	801b840 <MMC_PwrClassUpdate+0xc4>
 801b87e:	e000      	b.n	801b882 <MMC_PwrClassUpdate+0x106>
              break;
 801b880:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 801b882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b884:	2b00      	cmp	r3, #0
 801b886:	d00b      	beq.n	801b8a0 <MMC_PwrClassUpdate+0x124>
 801b888:	69fb      	ldr	r3, [r7, #28]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	d108      	bne.n	801b8a0 <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 801b88e:	6a3b      	ldr	r3, [r7, #32]
 801b890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b894:	2b00      	cmp	r3, #0
 801b896:	d009      	beq.n	801b8ac <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 801b898:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801b89c:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 801b89e:	e005      	b.n	801b8ac <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 801b8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d102      	bne.n	801b8ac <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 801b8a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801b8aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 801b8ac:	69fb      	ldr	r3, [r7, #28]
}
 801b8ae:	4618      	mov	r0, r3
 801b8b0:	3728      	adds	r7, #40	@ 0x28
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	bd80      	pop	{r7, pc}
 801b8b6:	bf00      	nop
 801b8b8:	03bb0000 	.word	0x03bb0000

0801b8bc <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 801b8bc:	b480      	push	{r7}
 801b8be:	b083      	sub	sp, #12
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801b8c4:	bf00      	nop
 801b8c6:	370c      	adds	r7, #12
 801b8c8:	46bd      	mov	sp, r7
 801b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ce:	4770      	bx	lr

0801b8d0 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 801b8d0:	b480      	push	{r7}
 801b8d2:	b083      	sub	sp, #12
 801b8d4:	af00      	add	r7, sp, #0
 801b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801b8d8:	bf00      	nop
 801b8da:	370c      	adds	r7, #12
 801b8dc:	46bd      	mov	sp, r7
 801b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8e2:	4770      	bx	lr

0801b8e4 <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 801b8e4:	b480      	push	{r7}
 801b8e6:	b083      	sub	sp, #12
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801b8ec:	bf00      	nop
 801b8ee:	370c      	adds	r7, #12
 801b8f0:	46bd      	mov	sp, r7
 801b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8f6:	4770      	bx	lr

0801b8f8 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 801b8f8:	b480      	push	{r7}
 801b8fa:	b083      	sub	sp, #12
 801b8fc:	af00      	add	r7, sp, #0
 801b8fe:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801b900:	bf00      	nop
 801b902:	370c      	adds	r7, #12
 801b904:	46bd      	mov	sp, r7
 801b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b90a:	4770      	bx	lr

0801b90c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801b90c:	b580      	push	{r7, lr}
 801b90e:	b084      	sub	sp, #16
 801b910:	af00      	add	r7, sp, #0
 801b912:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801b914:	4b29      	ldr	r3, [pc, #164]	@ (801b9bc <HAL_PWREx_ConfigSupply+0xb0>)
 801b916:	68db      	ldr	r3, [r3, #12]
 801b918:	f003 0307 	and.w	r3, r3, #7
 801b91c:	2b06      	cmp	r3, #6
 801b91e:	d00a      	beq.n	801b936 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801b920:	4b26      	ldr	r3, [pc, #152]	@ (801b9bc <HAL_PWREx_ConfigSupply+0xb0>)
 801b922:	68db      	ldr	r3, [r3, #12]
 801b924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b928:	687a      	ldr	r2, [r7, #4]
 801b92a:	429a      	cmp	r2, r3
 801b92c:	d001      	beq.n	801b932 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801b92e:	2301      	movs	r3, #1
 801b930:	e040      	b.n	801b9b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801b932:	2300      	movs	r3, #0
 801b934:	e03e      	b.n	801b9b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801b936:	4b21      	ldr	r3, [pc, #132]	@ (801b9bc <HAL_PWREx_ConfigSupply+0xb0>)
 801b938:	68db      	ldr	r3, [r3, #12]
 801b93a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 801b93e:	491f      	ldr	r1, [pc, #124]	@ (801b9bc <HAL_PWREx_ConfigSupply+0xb0>)
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	4313      	orrs	r3, r2
 801b944:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801b946:	f7fd fce5 	bl	8019314 <HAL_GetTick>
 801b94a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b94c:	e009      	b.n	801b962 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801b94e:	f7fd fce1 	bl	8019314 <HAL_GetTick>
 801b952:	4602      	mov	r2, r0
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	1ad3      	subs	r3, r2, r3
 801b958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b95c:	d901      	bls.n	801b962 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801b95e:	2301      	movs	r3, #1
 801b960:	e028      	b.n	801b9b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b962:	4b16      	ldr	r3, [pc, #88]	@ (801b9bc <HAL_PWREx_ConfigSupply+0xb0>)
 801b964:	685b      	ldr	r3, [r3, #4]
 801b966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b96a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b96e:	d1ee      	bne.n	801b94e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	2b1e      	cmp	r3, #30
 801b974:	d008      	beq.n	801b988 <HAL_PWREx_ConfigSupply+0x7c>
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	2b2e      	cmp	r3, #46	@ 0x2e
 801b97a:	d005      	beq.n	801b988 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	2b1d      	cmp	r3, #29
 801b980:	d002      	beq.n	801b988 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	2b2d      	cmp	r3, #45	@ 0x2d
 801b986:	d114      	bne.n	801b9b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 801b988:	f7fd fcc4 	bl	8019314 <HAL_GetTick>
 801b98c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801b98e:	e009      	b.n	801b9a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801b990:	f7fd fcc0 	bl	8019314 <HAL_GetTick>
 801b994:	4602      	mov	r2, r0
 801b996:	68fb      	ldr	r3, [r7, #12]
 801b998:	1ad3      	subs	r3, r2, r3
 801b99a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b99e:	d901      	bls.n	801b9a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 801b9a0:	2301      	movs	r3, #1
 801b9a2:	e007      	b.n	801b9b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801b9a4:	4b05      	ldr	r3, [pc, #20]	@ (801b9bc <HAL_PWREx_ConfigSupply+0xb0>)
 801b9a6:	68db      	ldr	r3, [r3, #12]
 801b9a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b9ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b9b0:	d1ee      	bne.n	801b990 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801b9b2:	2300      	movs	r3, #0
}
 801b9b4:	4618      	mov	r0, r3
 801b9b6:	3710      	adds	r7, #16
 801b9b8:	46bd      	mov	sp, r7
 801b9ba:	bd80      	pop	{r7, pc}
 801b9bc:	58024800 	.word	0x58024800

0801b9c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b9c0:	b580      	push	{r7, lr}
 801b9c2:	b08c      	sub	sp, #48	@ 0x30
 801b9c4:	af00      	add	r7, sp, #0
 801b9c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d102      	bne.n	801b9d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b9ce:	2301      	movs	r3, #1
 801b9d0:	f000 bc48 	b.w	801c264 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	f003 0301 	and.w	r3, r3, #1
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	f000 8088 	beq.w	801baf2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b9e2:	4b99      	ldr	r3, [pc, #612]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801b9e4:	691b      	ldr	r3, [r3, #16]
 801b9e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801b9ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b9ec:	4b96      	ldr	r3, [pc, #600]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801b9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b9f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801b9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9f4:	2b10      	cmp	r3, #16
 801b9f6:	d007      	beq.n	801ba08 <HAL_RCC_OscConfig+0x48>
 801b9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9fa:	2b18      	cmp	r3, #24
 801b9fc:	d111      	bne.n	801ba22 <HAL_RCC_OscConfig+0x62>
 801b9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba00:	f003 0303 	and.w	r3, r3, #3
 801ba04:	2b02      	cmp	r3, #2
 801ba06:	d10c      	bne.n	801ba22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ba08:	4b8f      	ldr	r3, [pc, #572]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d06d      	beq.n	801baf0 <HAL_RCC_OscConfig+0x130>
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	685b      	ldr	r3, [r3, #4]
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d169      	bne.n	801baf0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801ba1c:	2301      	movs	r3, #1
 801ba1e:	f000 bc21 	b.w	801c264 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	685b      	ldr	r3, [r3, #4]
 801ba26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ba2a:	d106      	bne.n	801ba3a <HAL_RCC_OscConfig+0x7a>
 801ba2c:	4b86      	ldr	r3, [pc, #536]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	4a85      	ldr	r2, [pc, #532]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ba36:	6013      	str	r3, [r2, #0]
 801ba38:	e02e      	b.n	801ba98 <HAL_RCC_OscConfig+0xd8>
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	685b      	ldr	r3, [r3, #4]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d10c      	bne.n	801ba5c <HAL_RCC_OscConfig+0x9c>
 801ba42:	4b81      	ldr	r3, [pc, #516]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	4a80      	ldr	r2, [pc, #512]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ba4c:	6013      	str	r3, [r2, #0]
 801ba4e:	4b7e      	ldr	r3, [pc, #504]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	4a7d      	ldr	r2, [pc, #500]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ba58:	6013      	str	r3, [r2, #0]
 801ba5a:	e01d      	b.n	801ba98 <HAL_RCC_OscConfig+0xd8>
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	685b      	ldr	r3, [r3, #4]
 801ba60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801ba64:	d10c      	bne.n	801ba80 <HAL_RCC_OscConfig+0xc0>
 801ba66:	4b78      	ldr	r3, [pc, #480]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba68:	681b      	ldr	r3, [r3, #0]
 801ba6a:	4a77      	ldr	r2, [pc, #476]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801ba70:	6013      	str	r3, [r2, #0]
 801ba72:	4b75      	ldr	r3, [pc, #468]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	4a74      	ldr	r2, [pc, #464]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ba7c:	6013      	str	r3, [r2, #0]
 801ba7e:	e00b      	b.n	801ba98 <HAL_RCC_OscConfig+0xd8>
 801ba80:	4b71      	ldr	r3, [pc, #452]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	4a70      	ldr	r2, [pc, #448]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ba8a:	6013      	str	r3, [r2, #0]
 801ba8c:	4b6e      	ldr	r3, [pc, #440]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	4a6d      	ldr	r2, [pc, #436]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801ba92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ba96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	685b      	ldr	r3, [r3, #4]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d013      	beq.n	801bac8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801baa0:	f7fd fc38 	bl	8019314 <HAL_GetTick>
 801baa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801baa6:	e008      	b.n	801baba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801baa8:	f7fd fc34 	bl	8019314 <HAL_GetTick>
 801baac:	4602      	mov	r2, r0
 801baae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bab0:	1ad3      	subs	r3, r2, r3
 801bab2:	2b64      	cmp	r3, #100	@ 0x64
 801bab4:	d901      	bls.n	801baba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801bab6:	2303      	movs	r3, #3
 801bab8:	e3d4      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801baba:	4b63      	ldr	r3, [pc, #396]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d0f0      	beq.n	801baa8 <HAL_RCC_OscConfig+0xe8>
 801bac6:	e014      	b.n	801baf2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bac8:	f7fd fc24 	bl	8019314 <HAL_GetTick>
 801bacc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801bace:	e008      	b.n	801bae2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bad0:	f7fd fc20 	bl	8019314 <HAL_GetTick>
 801bad4:	4602      	mov	r2, r0
 801bad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bad8:	1ad3      	subs	r3, r2, r3
 801bada:	2b64      	cmp	r3, #100	@ 0x64
 801badc:	d901      	bls.n	801bae2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801bade:	2303      	movs	r3, #3
 801bae0:	e3c0      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801bae2:	4b59      	ldr	r3, [pc, #356]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801baea:	2b00      	cmp	r3, #0
 801baec:	d1f0      	bne.n	801bad0 <HAL_RCC_OscConfig+0x110>
 801baee:	e000      	b.n	801baf2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801baf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	f003 0302 	and.w	r3, r3, #2
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	f000 80ca 	beq.w	801bc94 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bb00:	4b51      	ldr	r3, [pc, #324]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bb02:	691b      	ldr	r3, [r3, #16]
 801bb04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801bb08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801bb0a:	4b4f      	ldr	r3, [pc, #316]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bb0e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801bb10:	6a3b      	ldr	r3, [r7, #32]
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d007      	beq.n	801bb26 <HAL_RCC_OscConfig+0x166>
 801bb16:	6a3b      	ldr	r3, [r7, #32]
 801bb18:	2b18      	cmp	r3, #24
 801bb1a:	d156      	bne.n	801bbca <HAL_RCC_OscConfig+0x20a>
 801bb1c:	69fb      	ldr	r3, [r7, #28]
 801bb1e:	f003 0303 	and.w	r3, r3, #3
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d151      	bne.n	801bbca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bb26:	4b48      	ldr	r3, [pc, #288]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bb28:	681b      	ldr	r3, [r3, #0]
 801bb2a:	f003 0304 	and.w	r3, r3, #4
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d005      	beq.n	801bb3e <HAL_RCC_OscConfig+0x17e>
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	68db      	ldr	r3, [r3, #12]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d101      	bne.n	801bb3e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801bb3a:	2301      	movs	r3, #1
 801bb3c:	e392      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801bb3e:	4b42      	ldr	r3, [pc, #264]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	f023 0219 	bic.w	r2, r3, #25
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	68db      	ldr	r3, [r3, #12]
 801bb4a:	493f      	ldr	r1, [pc, #252]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bb4c:	4313      	orrs	r3, r2
 801bb4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb50:	f7fd fbe0 	bl	8019314 <HAL_GetTick>
 801bb54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bb56:	e008      	b.n	801bb6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bb58:	f7fd fbdc 	bl	8019314 <HAL_GetTick>
 801bb5c:	4602      	mov	r2, r0
 801bb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb60:	1ad3      	subs	r3, r2, r3
 801bb62:	2b02      	cmp	r3, #2
 801bb64:	d901      	bls.n	801bb6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801bb66:	2303      	movs	r3, #3
 801bb68:	e37c      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bb6a:	4b37      	ldr	r3, [pc, #220]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	f003 0304 	and.w	r3, r3, #4
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d0f0      	beq.n	801bb58 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bb76:	f7fd fbfd 	bl	8019374 <HAL_GetREVID>
 801bb7a:	4603      	mov	r3, r0
 801bb7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801bb80:	4293      	cmp	r3, r2
 801bb82:	d817      	bhi.n	801bbb4 <HAL_RCC_OscConfig+0x1f4>
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	691b      	ldr	r3, [r3, #16]
 801bb88:	2b40      	cmp	r3, #64	@ 0x40
 801bb8a:	d108      	bne.n	801bb9e <HAL_RCC_OscConfig+0x1de>
 801bb8c:	4b2e      	ldr	r3, [pc, #184]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bb8e:	685b      	ldr	r3, [r3, #4]
 801bb90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801bb94:	4a2c      	ldr	r2, [pc, #176]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bb96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bb9a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bb9c:	e07a      	b.n	801bc94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bb9e:	4b2a      	ldr	r3, [pc, #168]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bba0:	685b      	ldr	r3, [r3, #4]
 801bba2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	691b      	ldr	r3, [r3, #16]
 801bbaa:	031b      	lsls	r3, r3, #12
 801bbac:	4926      	ldr	r1, [pc, #152]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bbae:	4313      	orrs	r3, r2
 801bbb0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bbb2:	e06f      	b.n	801bc94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bbb4:	4b24      	ldr	r3, [pc, #144]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bbb6:	685b      	ldr	r3, [r3, #4]
 801bbb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	691b      	ldr	r3, [r3, #16]
 801bbc0:	061b      	lsls	r3, r3, #24
 801bbc2:	4921      	ldr	r1, [pc, #132]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bbc4:	4313      	orrs	r3, r2
 801bbc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bbc8:	e064      	b.n	801bc94 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	68db      	ldr	r3, [r3, #12]
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d047      	beq.n	801bc62 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801bbd2:	4b1d      	ldr	r3, [pc, #116]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	f023 0219 	bic.w	r2, r3, #25
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	68db      	ldr	r3, [r3, #12]
 801bbde:	491a      	ldr	r1, [pc, #104]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bbe0:	4313      	orrs	r3, r2
 801bbe2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bbe4:	f7fd fb96 	bl	8019314 <HAL_GetTick>
 801bbe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bbea:	e008      	b.n	801bbfe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bbec:	f7fd fb92 	bl	8019314 <HAL_GetTick>
 801bbf0:	4602      	mov	r2, r0
 801bbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbf4:	1ad3      	subs	r3, r2, r3
 801bbf6:	2b02      	cmp	r3, #2
 801bbf8:	d901      	bls.n	801bbfe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801bbfa:	2303      	movs	r3, #3
 801bbfc:	e332      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bbfe:	4b12      	ldr	r3, [pc, #72]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	f003 0304 	and.w	r3, r3, #4
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d0f0      	beq.n	801bbec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bc0a:	f7fd fbb3 	bl	8019374 <HAL_GetREVID>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	f241 0203 	movw	r2, #4099	@ 0x1003
 801bc14:	4293      	cmp	r3, r2
 801bc16:	d819      	bhi.n	801bc4c <HAL_RCC_OscConfig+0x28c>
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	691b      	ldr	r3, [r3, #16]
 801bc1c:	2b40      	cmp	r3, #64	@ 0x40
 801bc1e:	d108      	bne.n	801bc32 <HAL_RCC_OscConfig+0x272>
 801bc20:	4b09      	ldr	r3, [pc, #36]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bc22:	685b      	ldr	r3, [r3, #4]
 801bc24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801bc28:	4a07      	ldr	r2, [pc, #28]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bc2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bc2e:	6053      	str	r3, [r2, #4]
 801bc30:	e030      	b.n	801bc94 <HAL_RCC_OscConfig+0x2d4>
 801bc32:	4b05      	ldr	r3, [pc, #20]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bc34:	685b      	ldr	r3, [r3, #4]
 801bc36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	691b      	ldr	r3, [r3, #16]
 801bc3e:	031b      	lsls	r3, r3, #12
 801bc40:	4901      	ldr	r1, [pc, #4]	@ (801bc48 <HAL_RCC_OscConfig+0x288>)
 801bc42:	4313      	orrs	r3, r2
 801bc44:	604b      	str	r3, [r1, #4]
 801bc46:	e025      	b.n	801bc94 <HAL_RCC_OscConfig+0x2d4>
 801bc48:	58024400 	.word	0x58024400
 801bc4c:	4b9a      	ldr	r3, [pc, #616]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bc4e:	685b      	ldr	r3, [r3, #4]
 801bc50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	691b      	ldr	r3, [r3, #16]
 801bc58:	061b      	lsls	r3, r3, #24
 801bc5a:	4997      	ldr	r1, [pc, #604]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bc5c:	4313      	orrs	r3, r2
 801bc5e:	604b      	str	r3, [r1, #4]
 801bc60:	e018      	b.n	801bc94 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bc62:	4b95      	ldr	r3, [pc, #596]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	4a94      	ldr	r2, [pc, #592]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bc68:	f023 0301 	bic.w	r3, r3, #1
 801bc6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc6e:	f7fd fb51 	bl	8019314 <HAL_GetTick>
 801bc72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801bc74:	e008      	b.n	801bc88 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bc76:	f7fd fb4d 	bl	8019314 <HAL_GetTick>
 801bc7a:	4602      	mov	r2, r0
 801bc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc7e:	1ad3      	subs	r3, r2, r3
 801bc80:	2b02      	cmp	r3, #2
 801bc82:	d901      	bls.n	801bc88 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801bc84:	2303      	movs	r3, #3
 801bc86:	e2ed      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801bc88:	4b8b      	ldr	r3, [pc, #556]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	f003 0304 	and.w	r3, r3, #4
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d1f0      	bne.n	801bc76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	f003 0310 	and.w	r3, r3, #16
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	f000 80a9 	beq.w	801bdf4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bca2:	4b85      	ldr	r3, [pc, #532]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bca4:	691b      	ldr	r3, [r3, #16]
 801bca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801bcaa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801bcac:	4b82      	ldr	r3, [pc, #520]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bcae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bcb0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801bcb2:	69bb      	ldr	r3, [r7, #24]
 801bcb4:	2b08      	cmp	r3, #8
 801bcb6:	d007      	beq.n	801bcc8 <HAL_RCC_OscConfig+0x308>
 801bcb8:	69bb      	ldr	r3, [r7, #24]
 801bcba:	2b18      	cmp	r3, #24
 801bcbc:	d13a      	bne.n	801bd34 <HAL_RCC_OscConfig+0x374>
 801bcbe:	697b      	ldr	r3, [r7, #20]
 801bcc0:	f003 0303 	and.w	r3, r3, #3
 801bcc4:	2b01      	cmp	r3, #1
 801bcc6:	d135      	bne.n	801bd34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801bcc8:	4b7b      	ldr	r3, [pc, #492]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d005      	beq.n	801bce0 <HAL_RCC_OscConfig+0x320>
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	69db      	ldr	r3, [r3, #28]
 801bcd8:	2b80      	cmp	r3, #128	@ 0x80
 801bcda:	d001      	beq.n	801bce0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801bcdc:	2301      	movs	r3, #1
 801bcde:	e2c1      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801bce0:	f7fd fb48 	bl	8019374 <HAL_GetREVID>
 801bce4:	4603      	mov	r3, r0
 801bce6:	f241 0203 	movw	r2, #4099	@ 0x1003
 801bcea:	4293      	cmp	r3, r2
 801bcec:	d817      	bhi.n	801bd1e <HAL_RCC_OscConfig+0x35e>
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	6a1b      	ldr	r3, [r3, #32]
 801bcf2:	2b20      	cmp	r3, #32
 801bcf4:	d108      	bne.n	801bd08 <HAL_RCC_OscConfig+0x348>
 801bcf6:	4b70      	ldr	r3, [pc, #448]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bcf8:	685b      	ldr	r3, [r3, #4]
 801bcfa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801bcfe:	4a6e      	ldr	r2, [pc, #440]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bd00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bd04:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801bd06:	e075      	b.n	801bdf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801bd08:	4b6b      	ldr	r3, [pc, #428]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bd0a:	685b      	ldr	r3, [r3, #4]
 801bd0c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	6a1b      	ldr	r3, [r3, #32]
 801bd14:	069b      	lsls	r3, r3, #26
 801bd16:	4968      	ldr	r1, [pc, #416]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bd18:	4313      	orrs	r3, r2
 801bd1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801bd1c:	e06a      	b.n	801bdf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801bd1e:	4b66      	ldr	r3, [pc, #408]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bd20:	68db      	ldr	r3, [r3, #12]
 801bd22:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	6a1b      	ldr	r3, [r3, #32]
 801bd2a:	061b      	lsls	r3, r3, #24
 801bd2c:	4962      	ldr	r1, [pc, #392]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bd2e:	4313      	orrs	r3, r2
 801bd30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801bd32:	e05f      	b.n	801bdf4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	69db      	ldr	r3, [r3, #28]
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d042      	beq.n	801bdc2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801bd3c:	4b5e      	ldr	r3, [pc, #376]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	4a5d      	ldr	r2, [pc, #372]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bd42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bd46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bd48:	f7fd fae4 	bl	8019314 <HAL_GetTick>
 801bd4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801bd4e:	e008      	b.n	801bd62 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801bd50:	f7fd fae0 	bl	8019314 <HAL_GetTick>
 801bd54:	4602      	mov	r2, r0
 801bd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd58:	1ad3      	subs	r3, r2, r3
 801bd5a:	2b02      	cmp	r3, #2
 801bd5c:	d901      	bls.n	801bd62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801bd5e:	2303      	movs	r3, #3
 801bd60:	e280      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801bd62:	4b55      	ldr	r3, [pc, #340]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d0f0      	beq.n	801bd50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801bd6e:	f7fd fb01 	bl	8019374 <HAL_GetREVID>
 801bd72:	4603      	mov	r3, r0
 801bd74:	f241 0203 	movw	r2, #4099	@ 0x1003
 801bd78:	4293      	cmp	r3, r2
 801bd7a:	d817      	bhi.n	801bdac <HAL_RCC_OscConfig+0x3ec>
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	6a1b      	ldr	r3, [r3, #32]
 801bd80:	2b20      	cmp	r3, #32
 801bd82:	d108      	bne.n	801bd96 <HAL_RCC_OscConfig+0x3d6>
 801bd84:	4b4c      	ldr	r3, [pc, #304]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bd86:	685b      	ldr	r3, [r3, #4]
 801bd88:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801bd8c:	4a4a      	ldr	r2, [pc, #296]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bd8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bd92:	6053      	str	r3, [r2, #4]
 801bd94:	e02e      	b.n	801bdf4 <HAL_RCC_OscConfig+0x434>
 801bd96:	4b48      	ldr	r3, [pc, #288]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bd98:	685b      	ldr	r3, [r3, #4]
 801bd9a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	6a1b      	ldr	r3, [r3, #32]
 801bda2:	069b      	lsls	r3, r3, #26
 801bda4:	4944      	ldr	r1, [pc, #272]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bda6:	4313      	orrs	r3, r2
 801bda8:	604b      	str	r3, [r1, #4]
 801bdaa:	e023      	b.n	801bdf4 <HAL_RCC_OscConfig+0x434>
 801bdac:	4b42      	ldr	r3, [pc, #264]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bdae:	68db      	ldr	r3, [r3, #12]
 801bdb0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	6a1b      	ldr	r3, [r3, #32]
 801bdb8:	061b      	lsls	r3, r3, #24
 801bdba:	493f      	ldr	r1, [pc, #252]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bdbc:	4313      	orrs	r3, r2
 801bdbe:	60cb      	str	r3, [r1, #12]
 801bdc0:	e018      	b.n	801bdf4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801bdc2:	4b3d      	ldr	r3, [pc, #244]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	4a3c      	ldr	r2, [pc, #240]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bdc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801bdcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bdce:	f7fd faa1 	bl	8019314 <HAL_GetTick>
 801bdd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801bdd4:	e008      	b.n	801bde8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801bdd6:	f7fd fa9d 	bl	8019314 <HAL_GetTick>
 801bdda:	4602      	mov	r2, r0
 801bddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdde:	1ad3      	subs	r3, r2, r3
 801bde0:	2b02      	cmp	r3, #2
 801bde2:	d901      	bls.n	801bde8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801bde4:	2303      	movs	r3, #3
 801bde6:	e23d      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801bde8:	4b33      	ldr	r3, [pc, #204]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d1f0      	bne.n	801bdd6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	f003 0308 	and.w	r3, r3, #8
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d036      	beq.n	801be6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	695b      	ldr	r3, [r3, #20]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d019      	beq.n	801be3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801be08:	4b2b      	ldr	r3, [pc, #172]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801be0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801be0c:	4a2a      	ldr	r2, [pc, #168]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801be0e:	f043 0301 	orr.w	r3, r3, #1
 801be12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be14:	f7fd fa7e 	bl	8019314 <HAL_GetTick>
 801be18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801be1a:	e008      	b.n	801be2e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801be1c:	f7fd fa7a 	bl	8019314 <HAL_GetTick>
 801be20:	4602      	mov	r2, r0
 801be22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be24:	1ad3      	subs	r3, r2, r3
 801be26:	2b02      	cmp	r3, #2
 801be28:	d901      	bls.n	801be2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801be2a:	2303      	movs	r3, #3
 801be2c:	e21a      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801be2e:	4b22      	ldr	r3, [pc, #136]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801be30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801be32:	f003 0302 	and.w	r3, r3, #2
 801be36:	2b00      	cmp	r3, #0
 801be38:	d0f0      	beq.n	801be1c <HAL_RCC_OscConfig+0x45c>
 801be3a:	e018      	b.n	801be6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801be3c:	4b1e      	ldr	r3, [pc, #120]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801be3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801be40:	4a1d      	ldr	r2, [pc, #116]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801be42:	f023 0301 	bic.w	r3, r3, #1
 801be46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be48:	f7fd fa64 	bl	8019314 <HAL_GetTick>
 801be4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801be4e:	e008      	b.n	801be62 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801be50:	f7fd fa60 	bl	8019314 <HAL_GetTick>
 801be54:	4602      	mov	r2, r0
 801be56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be58:	1ad3      	subs	r3, r2, r3
 801be5a:	2b02      	cmp	r3, #2
 801be5c:	d901      	bls.n	801be62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801be5e:	2303      	movs	r3, #3
 801be60:	e200      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801be62:	4b15      	ldr	r3, [pc, #84]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801be64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801be66:	f003 0302 	and.w	r3, r3, #2
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d1f0      	bne.n	801be50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	f003 0320 	and.w	r3, r3, #32
 801be76:	2b00      	cmp	r3, #0
 801be78:	d039      	beq.n	801beee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	699b      	ldr	r3, [r3, #24]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d01c      	beq.n	801bebc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801be82:	4b0d      	ldr	r3, [pc, #52]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	4a0c      	ldr	r2, [pc, #48]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801be88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801be8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801be8e:	f7fd fa41 	bl	8019314 <HAL_GetTick>
 801be92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801be94:	e008      	b.n	801bea8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801be96:	f7fd fa3d 	bl	8019314 <HAL_GetTick>
 801be9a:	4602      	mov	r2, r0
 801be9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be9e:	1ad3      	subs	r3, r2, r3
 801bea0:	2b02      	cmp	r3, #2
 801bea2:	d901      	bls.n	801bea8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801bea4:	2303      	movs	r3, #3
 801bea6:	e1dd      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801bea8:	4b03      	ldr	r3, [pc, #12]	@ (801beb8 <HAL_RCC_OscConfig+0x4f8>)
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d0f0      	beq.n	801be96 <HAL_RCC_OscConfig+0x4d6>
 801beb4:	e01b      	b.n	801beee <HAL_RCC_OscConfig+0x52e>
 801beb6:	bf00      	nop
 801beb8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801bebc:	4b9b      	ldr	r3, [pc, #620]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	4a9a      	ldr	r2, [pc, #616]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bec6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801bec8:	f7fd fa24 	bl	8019314 <HAL_GetTick>
 801becc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bece:	e008      	b.n	801bee2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bed0:	f7fd fa20 	bl	8019314 <HAL_GetTick>
 801bed4:	4602      	mov	r2, r0
 801bed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bed8:	1ad3      	subs	r3, r2, r3
 801beda:	2b02      	cmp	r3, #2
 801bedc:	d901      	bls.n	801bee2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801bede:	2303      	movs	r3, #3
 801bee0:	e1c0      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bee2:	4b92      	ldr	r3, [pc, #584]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801beea:	2b00      	cmp	r3, #0
 801beec:	d1f0      	bne.n	801bed0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	f003 0304 	and.w	r3, r3, #4
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	f000 8081 	beq.w	801bffe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801befc:	4b8c      	ldr	r3, [pc, #560]	@ (801c130 <HAL_RCC_OscConfig+0x770>)
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	4a8b      	ldr	r2, [pc, #556]	@ (801c130 <HAL_RCC_OscConfig+0x770>)
 801bf02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801bf06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801bf08:	f7fd fa04 	bl	8019314 <HAL_GetTick>
 801bf0c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bf0e:	e008      	b.n	801bf22 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bf10:	f7fd fa00 	bl	8019314 <HAL_GetTick>
 801bf14:	4602      	mov	r2, r0
 801bf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf18:	1ad3      	subs	r3, r2, r3
 801bf1a:	2b64      	cmp	r3, #100	@ 0x64
 801bf1c:	d901      	bls.n	801bf22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801bf1e:	2303      	movs	r3, #3
 801bf20:	e1a0      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bf22:	4b83      	ldr	r3, [pc, #524]	@ (801c130 <HAL_RCC_OscConfig+0x770>)
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d0f0      	beq.n	801bf10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	689b      	ldr	r3, [r3, #8]
 801bf32:	2b01      	cmp	r3, #1
 801bf34:	d106      	bne.n	801bf44 <HAL_RCC_OscConfig+0x584>
 801bf36:	4b7d      	ldr	r3, [pc, #500]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bf3a:	4a7c      	ldr	r2, [pc, #496]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf3c:	f043 0301 	orr.w	r3, r3, #1
 801bf40:	6713      	str	r3, [r2, #112]	@ 0x70
 801bf42:	e02d      	b.n	801bfa0 <HAL_RCC_OscConfig+0x5e0>
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	689b      	ldr	r3, [r3, #8]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d10c      	bne.n	801bf66 <HAL_RCC_OscConfig+0x5a6>
 801bf4c:	4b77      	ldr	r3, [pc, #476]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bf50:	4a76      	ldr	r2, [pc, #472]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf52:	f023 0301 	bic.w	r3, r3, #1
 801bf56:	6713      	str	r3, [r2, #112]	@ 0x70
 801bf58:	4b74      	ldr	r3, [pc, #464]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bf5c:	4a73      	ldr	r2, [pc, #460]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf5e:	f023 0304 	bic.w	r3, r3, #4
 801bf62:	6713      	str	r3, [r2, #112]	@ 0x70
 801bf64:	e01c      	b.n	801bfa0 <HAL_RCC_OscConfig+0x5e0>
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	689b      	ldr	r3, [r3, #8]
 801bf6a:	2b05      	cmp	r3, #5
 801bf6c:	d10c      	bne.n	801bf88 <HAL_RCC_OscConfig+0x5c8>
 801bf6e:	4b6f      	ldr	r3, [pc, #444]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bf72:	4a6e      	ldr	r2, [pc, #440]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf74:	f043 0304 	orr.w	r3, r3, #4
 801bf78:	6713      	str	r3, [r2, #112]	@ 0x70
 801bf7a:	4b6c      	ldr	r3, [pc, #432]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bf7e:	4a6b      	ldr	r2, [pc, #428]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf80:	f043 0301 	orr.w	r3, r3, #1
 801bf84:	6713      	str	r3, [r2, #112]	@ 0x70
 801bf86:	e00b      	b.n	801bfa0 <HAL_RCC_OscConfig+0x5e0>
 801bf88:	4b68      	ldr	r3, [pc, #416]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bf8c:	4a67      	ldr	r2, [pc, #412]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf8e:	f023 0301 	bic.w	r3, r3, #1
 801bf92:	6713      	str	r3, [r2, #112]	@ 0x70
 801bf94:	4b65      	ldr	r3, [pc, #404]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bf98:	4a64      	ldr	r2, [pc, #400]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bf9a:	f023 0304 	bic.w	r3, r3, #4
 801bf9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	689b      	ldr	r3, [r3, #8]
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	d015      	beq.n	801bfd4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bfa8:	f7fd f9b4 	bl	8019314 <HAL_GetTick>
 801bfac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bfae:	e00a      	b.n	801bfc6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bfb0:	f7fd f9b0 	bl	8019314 <HAL_GetTick>
 801bfb4:	4602      	mov	r2, r0
 801bfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfb8:	1ad3      	subs	r3, r2, r3
 801bfba:	f241 3288 	movw	r2, #5000	@ 0x1388
 801bfbe:	4293      	cmp	r3, r2
 801bfc0:	d901      	bls.n	801bfc6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801bfc2:	2303      	movs	r3, #3
 801bfc4:	e14e      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bfc6:	4b59      	ldr	r3, [pc, #356]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bfc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bfca:	f003 0302 	and.w	r3, r3, #2
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d0ee      	beq.n	801bfb0 <HAL_RCC_OscConfig+0x5f0>
 801bfd2:	e014      	b.n	801bffe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bfd4:	f7fd f99e 	bl	8019314 <HAL_GetTick>
 801bfd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801bfda:	e00a      	b.n	801bff2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bfdc:	f7fd f99a 	bl	8019314 <HAL_GetTick>
 801bfe0:	4602      	mov	r2, r0
 801bfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfe4:	1ad3      	subs	r3, r2, r3
 801bfe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 801bfea:	4293      	cmp	r3, r2
 801bfec:	d901      	bls.n	801bff2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801bfee:	2303      	movs	r3, #3
 801bff0:	e138      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801bff2:	4b4e      	ldr	r3, [pc, #312]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801bff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bff6:	f003 0302 	and.w	r3, r3, #2
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d1ee      	bne.n	801bfdc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c002:	2b00      	cmp	r3, #0
 801c004:	f000 812d 	beq.w	801c262 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801c008:	4b48      	ldr	r3, [pc, #288]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c00a:	691b      	ldr	r3, [r3, #16]
 801c00c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c010:	2b18      	cmp	r3, #24
 801c012:	f000 80bd 	beq.w	801c190 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c01a:	2b02      	cmp	r3, #2
 801c01c:	f040 809e 	bne.w	801c15c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c020:	4b42      	ldr	r3, [pc, #264]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	4a41      	ldr	r2, [pc, #260]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c02a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c02c:	f7fd f972 	bl	8019314 <HAL_GetTick>
 801c030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c032:	e008      	b.n	801c046 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c034:	f7fd f96e 	bl	8019314 <HAL_GetTick>
 801c038:	4602      	mov	r2, r0
 801c03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c03c:	1ad3      	subs	r3, r2, r3
 801c03e:	2b02      	cmp	r3, #2
 801c040:	d901      	bls.n	801c046 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801c042:	2303      	movs	r3, #3
 801c044:	e10e      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c046:	4b39      	ldr	r3, [pc, #228]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d1f0      	bne.n	801c034 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c052:	4b36      	ldr	r3, [pc, #216]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c054:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c056:	4b37      	ldr	r3, [pc, #220]	@ (801c134 <HAL_RCC_OscConfig+0x774>)
 801c058:	4013      	ands	r3, r2
 801c05a:	687a      	ldr	r2, [r7, #4]
 801c05c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801c05e:	687a      	ldr	r2, [r7, #4]
 801c060:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801c062:	0112      	lsls	r2, r2, #4
 801c064:	430a      	orrs	r2, r1
 801c066:	4931      	ldr	r1, [pc, #196]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c068:	4313      	orrs	r3, r2
 801c06a:	628b      	str	r3, [r1, #40]	@ 0x28
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c070:	3b01      	subs	r3, #1
 801c072:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c07a:	3b01      	subs	r3, #1
 801c07c:	025b      	lsls	r3, r3, #9
 801c07e:	b29b      	uxth	r3, r3
 801c080:	431a      	orrs	r2, r3
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c086:	3b01      	subs	r3, #1
 801c088:	041b      	lsls	r3, r3, #16
 801c08a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801c08e:	431a      	orrs	r2, r3
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c094:	3b01      	subs	r3, #1
 801c096:	061b      	lsls	r3, r3, #24
 801c098:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801c09c:	4923      	ldr	r1, [pc, #140]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c09e:	4313      	orrs	r3, r2
 801c0a0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801c0a2:	4b22      	ldr	r3, [pc, #136]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c0a6:	4a21      	ldr	r2, [pc, #132]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0a8:	f023 0301 	bic.w	r3, r3, #1
 801c0ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c0ae:	4b1f      	ldr	r3, [pc, #124]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c0b2:	4b21      	ldr	r3, [pc, #132]	@ (801c138 <HAL_RCC_OscConfig+0x778>)
 801c0b4:	4013      	ands	r3, r2
 801c0b6:	687a      	ldr	r2, [r7, #4]
 801c0b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c0ba:	00d2      	lsls	r2, r2, #3
 801c0bc:	491b      	ldr	r1, [pc, #108]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0be:	4313      	orrs	r3, r2
 801c0c0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801c0c2:	4b1a      	ldr	r3, [pc, #104]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c0c6:	f023 020c 	bic.w	r2, r3, #12
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c0ce:	4917      	ldr	r1, [pc, #92]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0d0:	4313      	orrs	r3, r2
 801c0d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801c0d4:	4b15      	ldr	r3, [pc, #84]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c0d8:	f023 0202 	bic.w	r2, r3, #2
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c0e0:	4912      	ldr	r1, [pc, #72]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0e2:	4313      	orrs	r3, r2
 801c0e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801c0e6:	4b11      	ldr	r3, [pc, #68]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c0ea:	4a10      	ldr	r2, [pc, #64]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c0f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c0f2:	4b0e      	ldr	r3, [pc, #56]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c0f6:	4a0d      	ldr	r2, [pc, #52]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c0f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c0fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801c0fe:	4b0b      	ldr	r3, [pc, #44]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c102:	4a0a      	ldr	r2, [pc, #40]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c108:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801c10a:	4b08      	ldr	r3, [pc, #32]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c10e:	4a07      	ldr	r2, [pc, #28]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c110:	f043 0301 	orr.w	r3, r3, #1
 801c114:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c116:	4b05      	ldr	r3, [pc, #20]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	4a04      	ldr	r2, [pc, #16]	@ (801c12c <HAL_RCC_OscConfig+0x76c>)
 801c11c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c122:	f7fd f8f7 	bl	8019314 <HAL_GetTick>
 801c126:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c128:	e011      	b.n	801c14e <HAL_RCC_OscConfig+0x78e>
 801c12a:	bf00      	nop
 801c12c:	58024400 	.word	0x58024400
 801c130:	58024800 	.word	0x58024800
 801c134:	fffffc0c 	.word	0xfffffc0c
 801c138:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c13c:	f7fd f8ea 	bl	8019314 <HAL_GetTick>
 801c140:	4602      	mov	r2, r0
 801c142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c144:	1ad3      	subs	r3, r2, r3
 801c146:	2b02      	cmp	r3, #2
 801c148:	d901      	bls.n	801c14e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801c14a:	2303      	movs	r3, #3
 801c14c:	e08a      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c14e:	4b47      	ldr	r3, [pc, #284]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c156:	2b00      	cmp	r3, #0
 801c158:	d0f0      	beq.n	801c13c <HAL_RCC_OscConfig+0x77c>
 801c15a:	e082      	b.n	801c262 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c15c:	4b43      	ldr	r3, [pc, #268]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	4a42      	ldr	r2, [pc, #264]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c162:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c168:	f7fd f8d4 	bl	8019314 <HAL_GetTick>
 801c16c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c16e:	e008      	b.n	801c182 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c170:	f7fd f8d0 	bl	8019314 <HAL_GetTick>
 801c174:	4602      	mov	r2, r0
 801c176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c178:	1ad3      	subs	r3, r2, r3
 801c17a:	2b02      	cmp	r3, #2
 801c17c:	d901      	bls.n	801c182 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801c17e:	2303      	movs	r3, #3
 801c180:	e070      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c182:	4b3a      	ldr	r3, [pc, #232]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d1f0      	bne.n	801c170 <HAL_RCC_OscConfig+0x7b0>
 801c18e:	e068      	b.n	801c262 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801c190:	4b36      	ldr	r3, [pc, #216]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c194:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801c196:	4b35      	ldr	r3, [pc, #212]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c19a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1a0:	2b01      	cmp	r3, #1
 801c1a2:	d031      	beq.n	801c208 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c1a4:	693b      	ldr	r3, [r7, #16]
 801c1a6:	f003 0203 	and.w	r2, r3, #3
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c1ae:	429a      	cmp	r2, r3
 801c1b0:	d12a      	bne.n	801c208 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c1b2:	693b      	ldr	r3, [r7, #16]
 801c1b4:	091b      	lsrs	r3, r3, #4
 801c1b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c1be:	429a      	cmp	r2, r3
 801c1c0:	d122      	bne.n	801c208 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c1c2:	68fb      	ldr	r3, [r7, #12]
 801c1c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c1cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c1ce:	429a      	cmp	r2, r3
 801c1d0:	d11a      	bne.n	801c208 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c1d2:	68fb      	ldr	r3, [r7, #12]
 801c1d4:	0a5b      	lsrs	r3, r3, #9
 801c1d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c1de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c1e0:	429a      	cmp	r2, r3
 801c1e2:	d111      	bne.n	801c208 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	0c1b      	lsrs	r3, r3, #16
 801c1e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c1f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c1f2:	429a      	cmp	r2, r3
 801c1f4:	d108      	bne.n	801c208 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801c1f6:	68fb      	ldr	r3, [r7, #12]
 801c1f8:	0e1b      	lsrs	r3, r3, #24
 801c1fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c202:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c204:	429a      	cmp	r2, r3
 801c206:	d001      	beq.n	801c20c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801c208:	2301      	movs	r3, #1
 801c20a:	e02b      	b.n	801c264 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801c20c:	4b17      	ldr	r3, [pc, #92]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c20e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c210:	08db      	lsrs	r3, r3, #3
 801c212:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c216:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c21c:	693a      	ldr	r2, [r7, #16]
 801c21e:	429a      	cmp	r2, r3
 801c220:	d01f      	beq.n	801c262 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801c222:	4b12      	ldr	r3, [pc, #72]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c226:	4a11      	ldr	r2, [pc, #68]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c228:	f023 0301 	bic.w	r3, r3, #1
 801c22c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c22e:	f7fd f871 	bl	8019314 <HAL_GetTick>
 801c232:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801c234:	bf00      	nop
 801c236:	f7fd f86d 	bl	8019314 <HAL_GetTick>
 801c23a:	4602      	mov	r2, r0
 801c23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c23e:	4293      	cmp	r3, r2
 801c240:	d0f9      	beq.n	801c236 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c242:	4b0a      	ldr	r3, [pc, #40]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c246:	4b0a      	ldr	r3, [pc, #40]	@ (801c270 <HAL_RCC_OscConfig+0x8b0>)
 801c248:	4013      	ands	r3, r2
 801c24a:	687a      	ldr	r2, [r7, #4]
 801c24c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c24e:	00d2      	lsls	r2, r2, #3
 801c250:	4906      	ldr	r1, [pc, #24]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c252:	4313      	orrs	r3, r2
 801c254:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801c256:	4b05      	ldr	r3, [pc, #20]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c25a:	4a04      	ldr	r2, [pc, #16]	@ (801c26c <HAL_RCC_OscConfig+0x8ac>)
 801c25c:	f043 0301 	orr.w	r3, r3, #1
 801c260:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801c262:	2300      	movs	r3, #0
}
 801c264:	4618      	mov	r0, r3
 801c266:	3730      	adds	r7, #48	@ 0x30
 801c268:	46bd      	mov	sp, r7
 801c26a:	bd80      	pop	{r7, pc}
 801c26c:	58024400 	.word	0x58024400
 801c270:	ffff0007 	.word	0xffff0007

0801c274 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c274:	b580      	push	{r7, lr}
 801c276:	b086      	sub	sp, #24
 801c278:	af00      	add	r7, sp, #0
 801c27a:	6078      	str	r0, [r7, #4]
 801c27c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d101      	bne.n	801c288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801c284:	2301      	movs	r3, #1
 801c286:	e19c      	b.n	801c5c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c288:	4b8a      	ldr	r3, [pc, #552]	@ (801c4b4 <HAL_RCC_ClockConfig+0x240>)
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	f003 030f 	and.w	r3, r3, #15
 801c290:	683a      	ldr	r2, [r7, #0]
 801c292:	429a      	cmp	r2, r3
 801c294:	d910      	bls.n	801c2b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c296:	4b87      	ldr	r3, [pc, #540]	@ (801c4b4 <HAL_RCC_ClockConfig+0x240>)
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	f023 020f 	bic.w	r2, r3, #15
 801c29e:	4985      	ldr	r1, [pc, #532]	@ (801c4b4 <HAL_RCC_ClockConfig+0x240>)
 801c2a0:	683b      	ldr	r3, [r7, #0]
 801c2a2:	4313      	orrs	r3, r2
 801c2a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c2a6:	4b83      	ldr	r3, [pc, #524]	@ (801c4b4 <HAL_RCC_ClockConfig+0x240>)
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	f003 030f 	and.w	r3, r3, #15
 801c2ae:	683a      	ldr	r2, [r7, #0]
 801c2b0:	429a      	cmp	r2, r3
 801c2b2:	d001      	beq.n	801c2b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801c2b4:	2301      	movs	r3, #1
 801c2b6:	e184      	b.n	801c5c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	f003 0304 	and.w	r3, r3, #4
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d010      	beq.n	801c2e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	691a      	ldr	r2, [r3, #16]
 801c2c8:	4b7b      	ldr	r3, [pc, #492]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c2ca:	699b      	ldr	r3, [r3, #24]
 801c2cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c2d0:	429a      	cmp	r2, r3
 801c2d2:	d908      	bls.n	801c2e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c2d4:	4b78      	ldr	r3, [pc, #480]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c2d6:	699b      	ldr	r3, [r3, #24]
 801c2d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	691b      	ldr	r3, [r3, #16]
 801c2e0:	4975      	ldr	r1, [pc, #468]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c2e2:	4313      	orrs	r3, r2
 801c2e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	f003 0308 	and.w	r3, r3, #8
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d010      	beq.n	801c314 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	695a      	ldr	r2, [r3, #20]
 801c2f6:	4b70      	ldr	r3, [pc, #448]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c2f8:	69db      	ldr	r3, [r3, #28]
 801c2fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c2fe:	429a      	cmp	r2, r3
 801c300:	d908      	bls.n	801c314 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c302:	4b6d      	ldr	r3, [pc, #436]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c304:	69db      	ldr	r3, [r3, #28]
 801c306:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	695b      	ldr	r3, [r3, #20]
 801c30e:	496a      	ldr	r1, [pc, #424]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c310:	4313      	orrs	r3, r2
 801c312:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	f003 0310 	and.w	r3, r3, #16
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d010      	beq.n	801c342 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	699a      	ldr	r2, [r3, #24]
 801c324:	4b64      	ldr	r3, [pc, #400]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c326:	69db      	ldr	r3, [r3, #28]
 801c328:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c32c:	429a      	cmp	r2, r3
 801c32e:	d908      	bls.n	801c342 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c330:	4b61      	ldr	r3, [pc, #388]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c332:	69db      	ldr	r3, [r3, #28]
 801c334:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	699b      	ldr	r3, [r3, #24]
 801c33c:	495e      	ldr	r1, [pc, #376]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c33e:	4313      	orrs	r3, r2
 801c340:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	f003 0320 	and.w	r3, r3, #32
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d010      	beq.n	801c370 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	69da      	ldr	r2, [r3, #28]
 801c352:	4b59      	ldr	r3, [pc, #356]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c354:	6a1b      	ldr	r3, [r3, #32]
 801c356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c35a:	429a      	cmp	r2, r3
 801c35c:	d908      	bls.n	801c370 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c35e:	4b56      	ldr	r3, [pc, #344]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c360:	6a1b      	ldr	r3, [r3, #32]
 801c362:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	69db      	ldr	r3, [r3, #28]
 801c36a:	4953      	ldr	r1, [pc, #332]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c36c:	4313      	orrs	r3, r2
 801c36e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	f003 0302 	and.w	r3, r3, #2
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d010      	beq.n	801c39e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	68da      	ldr	r2, [r3, #12]
 801c380:	4b4d      	ldr	r3, [pc, #308]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c382:	699b      	ldr	r3, [r3, #24]
 801c384:	f003 030f 	and.w	r3, r3, #15
 801c388:	429a      	cmp	r2, r3
 801c38a:	d908      	bls.n	801c39e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c38c:	4b4a      	ldr	r3, [pc, #296]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c38e:	699b      	ldr	r3, [r3, #24]
 801c390:	f023 020f 	bic.w	r2, r3, #15
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	68db      	ldr	r3, [r3, #12]
 801c398:	4947      	ldr	r1, [pc, #284]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c39a:	4313      	orrs	r3, r2
 801c39c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	f003 0301 	and.w	r3, r3, #1
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d055      	beq.n	801c456 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801c3aa:	4b43      	ldr	r3, [pc, #268]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c3ac:	699b      	ldr	r3, [r3, #24]
 801c3ae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	689b      	ldr	r3, [r3, #8]
 801c3b6:	4940      	ldr	r1, [pc, #256]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c3b8:	4313      	orrs	r3, r2
 801c3ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	685b      	ldr	r3, [r3, #4]
 801c3c0:	2b02      	cmp	r3, #2
 801c3c2:	d107      	bne.n	801c3d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c3c4:	4b3c      	ldr	r3, [pc, #240]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d121      	bne.n	801c414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c3d0:	2301      	movs	r3, #1
 801c3d2:	e0f6      	b.n	801c5c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	685b      	ldr	r3, [r3, #4]
 801c3d8:	2b03      	cmp	r3, #3
 801c3da:	d107      	bne.n	801c3ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c3dc:	4b36      	ldr	r3, [pc, #216]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d115      	bne.n	801c414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c3e8:	2301      	movs	r3, #1
 801c3ea:	e0ea      	b.n	801c5c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	685b      	ldr	r3, [r3, #4]
 801c3f0:	2b01      	cmp	r3, #1
 801c3f2:	d107      	bne.n	801c404 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c3f4:	4b30      	ldr	r3, [pc, #192]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d109      	bne.n	801c414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c400:	2301      	movs	r3, #1
 801c402:	e0de      	b.n	801c5c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c404:	4b2c      	ldr	r3, [pc, #176]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	f003 0304 	and.w	r3, r3, #4
 801c40c:	2b00      	cmp	r3, #0
 801c40e:	d101      	bne.n	801c414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c410:	2301      	movs	r3, #1
 801c412:	e0d6      	b.n	801c5c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c414:	4b28      	ldr	r3, [pc, #160]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c416:	691b      	ldr	r3, [r3, #16]
 801c418:	f023 0207 	bic.w	r2, r3, #7
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	685b      	ldr	r3, [r3, #4]
 801c420:	4925      	ldr	r1, [pc, #148]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c422:	4313      	orrs	r3, r2
 801c424:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c426:	f7fc ff75 	bl	8019314 <HAL_GetTick>
 801c42a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c42c:	e00a      	b.n	801c444 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c42e:	f7fc ff71 	bl	8019314 <HAL_GetTick>
 801c432:	4602      	mov	r2, r0
 801c434:	697b      	ldr	r3, [r7, #20]
 801c436:	1ad3      	subs	r3, r2, r3
 801c438:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c43c:	4293      	cmp	r3, r2
 801c43e:	d901      	bls.n	801c444 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801c440:	2303      	movs	r3, #3
 801c442:	e0be      	b.n	801c5c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c444:	4b1c      	ldr	r3, [pc, #112]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c446:	691b      	ldr	r3, [r3, #16]
 801c448:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	685b      	ldr	r3, [r3, #4]
 801c450:	00db      	lsls	r3, r3, #3
 801c452:	429a      	cmp	r2, r3
 801c454:	d1eb      	bne.n	801c42e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	f003 0302 	and.w	r3, r3, #2
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d010      	beq.n	801c484 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	68da      	ldr	r2, [r3, #12]
 801c466:	4b14      	ldr	r3, [pc, #80]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c468:	699b      	ldr	r3, [r3, #24]
 801c46a:	f003 030f 	and.w	r3, r3, #15
 801c46e:	429a      	cmp	r2, r3
 801c470:	d208      	bcs.n	801c484 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c472:	4b11      	ldr	r3, [pc, #68]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c474:	699b      	ldr	r3, [r3, #24]
 801c476:	f023 020f 	bic.w	r2, r3, #15
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	68db      	ldr	r3, [r3, #12]
 801c47e:	490e      	ldr	r1, [pc, #56]	@ (801c4b8 <HAL_RCC_ClockConfig+0x244>)
 801c480:	4313      	orrs	r3, r2
 801c482:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c484:	4b0b      	ldr	r3, [pc, #44]	@ (801c4b4 <HAL_RCC_ClockConfig+0x240>)
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	f003 030f 	and.w	r3, r3, #15
 801c48c:	683a      	ldr	r2, [r7, #0]
 801c48e:	429a      	cmp	r2, r3
 801c490:	d214      	bcs.n	801c4bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c492:	4b08      	ldr	r3, [pc, #32]	@ (801c4b4 <HAL_RCC_ClockConfig+0x240>)
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	f023 020f 	bic.w	r2, r3, #15
 801c49a:	4906      	ldr	r1, [pc, #24]	@ (801c4b4 <HAL_RCC_ClockConfig+0x240>)
 801c49c:	683b      	ldr	r3, [r7, #0]
 801c49e:	4313      	orrs	r3, r2
 801c4a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c4a2:	4b04      	ldr	r3, [pc, #16]	@ (801c4b4 <HAL_RCC_ClockConfig+0x240>)
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	f003 030f 	and.w	r3, r3, #15
 801c4aa:	683a      	ldr	r2, [r7, #0]
 801c4ac:	429a      	cmp	r2, r3
 801c4ae:	d005      	beq.n	801c4bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801c4b0:	2301      	movs	r3, #1
 801c4b2:	e086      	b.n	801c5c2 <HAL_RCC_ClockConfig+0x34e>
 801c4b4:	52002000 	.word	0x52002000
 801c4b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	f003 0304 	and.w	r3, r3, #4
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d010      	beq.n	801c4ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	691a      	ldr	r2, [r3, #16]
 801c4cc:	4b3f      	ldr	r3, [pc, #252]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c4ce:	699b      	ldr	r3, [r3, #24]
 801c4d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c4d4:	429a      	cmp	r2, r3
 801c4d6:	d208      	bcs.n	801c4ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c4d8:	4b3c      	ldr	r3, [pc, #240]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c4da:	699b      	ldr	r3, [r3, #24]
 801c4dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	691b      	ldr	r3, [r3, #16]
 801c4e4:	4939      	ldr	r1, [pc, #228]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c4e6:	4313      	orrs	r3, r2
 801c4e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	681b      	ldr	r3, [r3, #0]
 801c4ee:	f003 0308 	and.w	r3, r3, #8
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d010      	beq.n	801c518 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	695a      	ldr	r2, [r3, #20]
 801c4fa:	4b34      	ldr	r3, [pc, #208]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c4fc:	69db      	ldr	r3, [r3, #28]
 801c4fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c502:	429a      	cmp	r2, r3
 801c504:	d208      	bcs.n	801c518 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c506:	4b31      	ldr	r3, [pc, #196]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c508:	69db      	ldr	r3, [r3, #28]
 801c50a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	695b      	ldr	r3, [r3, #20]
 801c512:	492e      	ldr	r1, [pc, #184]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c514:	4313      	orrs	r3, r2
 801c516:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	f003 0310 	and.w	r3, r3, #16
 801c520:	2b00      	cmp	r3, #0
 801c522:	d010      	beq.n	801c546 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	699a      	ldr	r2, [r3, #24]
 801c528:	4b28      	ldr	r3, [pc, #160]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c52a:	69db      	ldr	r3, [r3, #28]
 801c52c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c530:	429a      	cmp	r2, r3
 801c532:	d208      	bcs.n	801c546 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c534:	4b25      	ldr	r3, [pc, #148]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c536:	69db      	ldr	r3, [r3, #28]
 801c538:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	699b      	ldr	r3, [r3, #24]
 801c540:	4922      	ldr	r1, [pc, #136]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c542:	4313      	orrs	r3, r2
 801c544:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	f003 0320 	and.w	r3, r3, #32
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d010      	beq.n	801c574 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	69da      	ldr	r2, [r3, #28]
 801c556:	4b1d      	ldr	r3, [pc, #116]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c558:	6a1b      	ldr	r3, [r3, #32]
 801c55a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c55e:	429a      	cmp	r2, r3
 801c560:	d208      	bcs.n	801c574 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c562:	4b1a      	ldr	r3, [pc, #104]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c564:	6a1b      	ldr	r3, [r3, #32]
 801c566:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	69db      	ldr	r3, [r3, #28]
 801c56e:	4917      	ldr	r1, [pc, #92]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c570:	4313      	orrs	r3, r2
 801c572:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801c574:	f000 f834 	bl	801c5e0 <HAL_RCC_GetSysClockFreq>
 801c578:	4602      	mov	r2, r0
 801c57a:	4b14      	ldr	r3, [pc, #80]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c57c:	699b      	ldr	r3, [r3, #24]
 801c57e:	0a1b      	lsrs	r3, r3, #8
 801c580:	f003 030f 	and.w	r3, r3, #15
 801c584:	4912      	ldr	r1, [pc, #72]	@ (801c5d0 <HAL_RCC_ClockConfig+0x35c>)
 801c586:	5ccb      	ldrb	r3, [r1, r3]
 801c588:	f003 031f 	and.w	r3, r3, #31
 801c58c:	fa22 f303 	lsr.w	r3, r2, r3
 801c590:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c592:	4b0e      	ldr	r3, [pc, #56]	@ (801c5cc <HAL_RCC_ClockConfig+0x358>)
 801c594:	699b      	ldr	r3, [r3, #24]
 801c596:	f003 030f 	and.w	r3, r3, #15
 801c59a:	4a0d      	ldr	r2, [pc, #52]	@ (801c5d0 <HAL_RCC_ClockConfig+0x35c>)
 801c59c:	5cd3      	ldrb	r3, [r2, r3]
 801c59e:	f003 031f 	and.w	r3, r3, #31
 801c5a2:	693a      	ldr	r2, [r7, #16]
 801c5a4:	fa22 f303 	lsr.w	r3, r2, r3
 801c5a8:	4a0a      	ldr	r2, [pc, #40]	@ (801c5d4 <HAL_RCC_ClockConfig+0x360>)
 801c5aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c5ac:	4a0a      	ldr	r2, [pc, #40]	@ (801c5d8 <HAL_RCC_ClockConfig+0x364>)
 801c5ae:	693b      	ldr	r3, [r7, #16]
 801c5b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801c5b2:	4b0a      	ldr	r3, [pc, #40]	@ (801c5dc <HAL_RCC_ClockConfig+0x368>)
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	f7fc f9aa 	bl	8018910 <HAL_InitTick>
 801c5bc:	4603      	mov	r3, r0
 801c5be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801c5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	3718      	adds	r7, #24
 801c5c6:	46bd      	mov	sp, r7
 801c5c8:	bd80      	pop	{r7, pc}
 801c5ca:	bf00      	nop
 801c5cc:	58024400 	.word	0x58024400
 801c5d0:	08026344 	.word	0x08026344
 801c5d4:	240148dc 	.word	0x240148dc
 801c5d8:	240148d8 	.word	0x240148d8
 801c5dc:	240149e4 	.word	0x240149e4

0801c5e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c5e0:	b480      	push	{r7}
 801c5e2:	b089      	sub	sp, #36	@ 0x24
 801c5e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c5e6:	4bb3      	ldr	r3, [pc, #716]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c5e8:	691b      	ldr	r3, [r3, #16]
 801c5ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c5ee:	2b18      	cmp	r3, #24
 801c5f0:	f200 8155 	bhi.w	801c89e <HAL_RCC_GetSysClockFreq+0x2be>
 801c5f4:	a201      	add	r2, pc, #4	@ (adr r2, 801c5fc <HAL_RCC_GetSysClockFreq+0x1c>)
 801c5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c5fa:	bf00      	nop
 801c5fc:	0801c661 	.word	0x0801c661
 801c600:	0801c89f 	.word	0x0801c89f
 801c604:	0801c89f 	.word	0x0801c89f
 801c608:	0801c89f 	.word	0x0801c89f
 801c60c:	0801c89f 	.word	0x0801c89f
 801c610:	0801c89f 	.word	0x0801c89f
 801c614:	0801c89f 	.word	0x0801c89f
 801c618:	0801c89f 	.word	0x0801c89f
 801c61c:	0801c687 	.word	0x0801c687
 801c620:	0801c89f 	.word	0x0801c89f
 801c624:	0801c89f 	.word	0x0801c89f
 801c628:	0801c89f 	.word	0x0801c89f
 801c62c:	0801c89f 	.word	0x0801c89f
 801c630:	0801c89f 	.word	0x0801c89f
 801c634:	0801c89f 	.word	0x0801c89f
 801c638:	0801c89f 	.word	0x0801c89f
 801c63c:	0801c68d 	.word	0x0801c68d
 801c640:	0801c89f 	.word	0x0801c89f
 801c644:	0801c89f 	.word	0x0801c89f
 801c648:	0801c89f 	.word	0x0801c89f
 801c64c:	0801c89f 	.word	0x0801c89f
 801c650:	0801c89f 	.word	0x0801c89f
 801c654:	0801c89f 	.word	0x0801c89f
 801c658:	0801c89f 	.word	0x0801c89f
 801c65c:	0801c693 	.word	0x0801c693
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c660:	4b94      	ldr	r3, [pc, #592]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	f003 0320 	and.w	r3, r3, #32
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d009      	beq.n	801c680 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c66c:	4b91      	ldr	r3, [pc, #580]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c66e:	681b      	ldr	r3, [r3, #0]
 801c670:	08db      	lsrs	r3, r3, #3
 801c672:	f003 0303 	and.w	r3, r3, #3
 801c676:	4a90      	ldr	r2, [pc, #576]	@ (801c8b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c678:	fa22 f303 	lsr.w	r3, r2, r3
 801c67c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801c67e:	e111      	b.n	801c8a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801c680:	4b8d      	ldr	r3, [pc, #564]	@ (801c8b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c682:	61bb      	str	r3, [r7, #24]
      break;
 801c684:	e10e      	b.n	801c8a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801c686:	4b8d      	ldr	r3, [pc, #564]	@ (801c8bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c688:	61bb      	str	r3, [r7, #24]
      break;
 801c68a:	e10b      	b.n	801c8a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801c68c:	4b8c      	ldr	r3, [pc, #560]	@ (801c8c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801c68e:	61bb      	str	r3, [r7, #24]
      break;
 801c690:	e108      	b.n	801c8a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801c692:	4b88      	ldr	r3, [pc, #544]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c696:	f003 0303 	and.w	r3, r3, #3
 801c69a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801c69c:	4b85      	ldr	r3, [pc, #532]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c6a0:	091b      	lsrs	r3, r3, #4
 801c6a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c6a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801c6a8:	4b82      	ldr	r3, [pc, #520]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c6ac:	f003 0301 	and.w	r3, r3, #1
 801c6b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801c6b2:	4b80      	ldr	r3, [pc, #512]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c6b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c6b6:	08db      	lsrs	r3, r3, #3
 801c6b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c6bc:	68fa      	ldr	r2, [r7, #12]
 801c6be:	fb02 f303 	mul.w	r3, r2, r3
 801c6c2:	ee07 3a90 	vmov	s15, r3
 801c6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c6ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801c6ce:	693b      	ldr	r3, [r7, #16]
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	f000 80e1 	beq.w	801c898 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 801c6d6:	697b      	ldr	r3, [r7, #20]
 801c6d8:	2b02      	cmp	r3, #2
 801c6da:	f000 8083 	beq.w	801c7e4 <HAL_RCC_GetSysClockFreq+0x204>
 801c6de:	697b      	ldr	r3, [r7, #20]
 801c6e0:	2b02      	cmp	r3, #2
 801c6e2:	f200 80a1 	bhi.w	801c828 <HAL_RCC_GetSysClockFreq+0x248>
 801c6e6:	697b      	ldr	r3, [r7, #20]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d003      	beq.n	801c6f4 <HAL_RCC_GetSysClockFreq+0x114>
 801c6ec:	697b      	ldr	r3, [r7, #20]
 801c6ee:	2b01      	cmp	r3, #1
 801c6f0:	d056      	beq.n	801c7a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 801c6f2:	e099      	b.n	801c828 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c6f4:	4b6f      	ldr	r3, [pc, #444]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	f003 0320 	and.w	r3, r3, #32
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d02d      	beq.n	801c75c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c700:	4b6c      	ldr	r3, [pc, #432]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	08db      	lsrs	r3, r3, #3
 801c706:	f003 0303 	and.w	r3, r3, #3
 801c70a:	4a6b      	ldr	r2, [pc, #428]	@ (801c8b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c70c:	fa22 f303 	lsr.w	r3, r2, r3
 801c710:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	ee07 3a90 	vmov	s15, r3
 801c718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c71c:	693b      	ldr	r3, [r7, #16]
 801c71e:	ee07 3a90 	vmov	s15, r3
 801c722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c72a:	4b62      	ldr	r3, [pc, #392]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c732:	ee07 3a90 	vmov	s15, r3
 801c736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c73a:	ed97 6a02 	vldr	s12, [r7, #8]
 801c73e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801c8c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c74a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c74e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c752:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c756:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801c75a:	e087      	b.n	801c86c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c75c:	693b      	ldr	r3, [r7, #16]
 801c75e:	ee07 3a90 	vmov	s15, r3
 801c762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c766:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801c8c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 801c76a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c76e:	4b51      	ldr	r3, [pc, #324]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c776:	ee07 3a90 	vmov	s15, r3
 801c77a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c77e:	ed97 6a02 	vldr	s12, [r7, #8]
 801c782:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801c8c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c78a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c78e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c796:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c79a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c79e:	e065      	b.n	801c86c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c7a0:	693b      	ldr	r3, [r7, #16]
 801c7a2:	ee07 3a90 	vmov	s15, r3
 801c7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c7aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801c8cc <HAL_RCC_GetSysClockFreq+0x2ec>
 801c7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c7b2:	4b40      	ldr	r3, [pc, #256]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c7b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c7ba:	ee07 3a90 	vmov	s15, r3
 801c7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c7c2:	ed97 6a02 	vldr	s12, [r7, #8]
 801c7c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801c8c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c7d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c7de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c7e2:	e043      	b.n	801c86c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c7e4:	693b      	ldr	r3, [r7, #16]
 801c7e6:	ee07 3a90 	vmov	s15, r3
 801c7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c7ee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801c8d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 801c7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c7f6:	4b2f      	ldr	r3, [pc, #188]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c7f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c7fe:	ee07 3a90 	vmov	s15, r3
 801c802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c806:	ed97 6a02 	vldr	s12, [r7, #8]
 801c80a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801c8c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c826:	e021      	b.n	801c86c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c828:	693b      	ldr	r3, [r7, #16]
 801c82a:	ee07 3a90 	vmov	s15, r3
 801c82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c832:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801c8cc <HAL_RCC_GetSysClockFreq+0x2ec>
 801c836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c83a:	4b1e      	ldr	r3, [pc, #120]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c842:	ee07 3a90 	vmov	s15, r3
 801c846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c84a:	ed97 6a02 	vldr	s12, [r7, #8]
 801c84e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801c8c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c85a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c862:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c86a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801c86c:	4b11      	ldr	r3, [pc, #68]	@ (801c8b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c870:	0a5b      	lsrs	r3, r3, #9
 801c872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c876:	3301      	adds	r3, #1
 801c878:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801c87a:	683b      	ldr	r3, [r7, #0]
 801c87c:	ee07 3a90 	vmov	s15, r3
 801c880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c884:	edd7 6a07 	vldr	s13, [r7, #28]
 801c888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c88c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c890:	ee17 3a90 	vmov	r3, s15
 801c894:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801c896:	e005      	b.n	801c8a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801c898:	2300      	movs	r3, #0
 801c89a:	61bb      	str	r3, [r7, #24]
      break;
 801c89c:	e002      	b.n	801c8a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801c89e:	4b07      	ldr	r3, [pc, #28]	@ (801c8bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c8a0:	61bb      	str	r3, [r7, #24]
      break;
 801c8a2:	bf00      	nop
  }

  return sysclockfreq;
 801c8a4:	69bb      	ldr	r3, [r7, #24]
}
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	3724      	adds	r7, #36	@ 0x24
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8b0:	4770      	bx	lr
 801c8b2:	bf00      	nop
 801c8b4:	58024400 	.word	0x58024400
 801c8b8:	03d09000 	.word	0x03d09000
 801c8bc:	003d0900 	.word	0x003d0900
 801c8c0:	017d7840 	.word	0x017d7840
 801c8c4:	46000000 	.word	0x46000000
 801c8c8:	4c742400 	.word	0x4c742400
 801c8cc:	4a742400 	.word	0x4a742400
 801c8d0:	4bbebc20 	.word	0x4bbebc20

0801c8d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c8d4:	b580      	push	{r7, lr}
 801c8d6:	b082      	sub	sp, #8
 801c8d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801c8da:	f7ff fe81 	bl	801c5e0 <HAL_RCC_GetSysClockFreq>
 801c8de:	4602      	mov	r2, r0
 801c8e0:	4b10      	ldr	r3, [pc, #64]	@ (801c924 <HAL_RCC_GetHCLKFreq+0x50>)
 801c8e2:	699b      	ldr	r3, [r3, #24]
 801c8e4:	0a1b      	lsrs	r3, r3, #8
 801c8e6:	f003 030f 	and.w	r3, r3, #15
 801c8ea:	490f      	ldr	r1, [pc, #60]	@ (801c928 <HAL_RCC_GetHCLKFreq+0x54>)
 801c8ec:	5ccb      	ldrb	r3, [r1, r3]
 801c8ee:	f003 031f 	and.w	r3, r3, #31
 801c8f2:	fa22 f303 	lsr.w	r3, r2, r3
 801c8f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c8f8:	4b0a      	ldr	r3, [pc, #40]	@ (801c924 <HAL_RCC_GetHCLKFreq+0x50>)
 801c8fa:	699b      	ldr	r3, [r3, #24]
 801c8fc:	f003 030f 	and.w	r3, r3, #15
 801c900:	4a09      	ldr	r2, [pc, #36]	@ (801c928 <HAL_RCC_GetHCLKFreq+0x54>)
 801c902:	5cd3      	ldrb	r3, [r2, r3]
 801c904:	f003 031f 	and.w	r3, r3, #31
 801c908:	687a      	ldr	r2, [r7, #4]
 801c90a:	fa22 f303 	lsr.w	r3, r2, r3
 801c90e:	4a07      	ldr	r2, [pc, #28]	@ (801c92c <HAL_RCC_GetHCLKFreq+0x58>)
 801c910:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c912:	4a07      	ldr	r2, [pc, #28]	@ (801c930 <HAL_RCC_GetHCLKFreq+0x5c>)
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801c918:	4b04      	ldr	r3, [pc, #16]	@ (801c92c <HAL_RCC_GetHCLKFreq+0x58>)
 801c91a:	681b      	ldr	r3, [r3, #0]
}
 801c91c:	4618      	mov	r0, r3
 801c91e:	3708      	adds	r7, #8
 801c920:	46bd      	mov	sp, r7
 801c922:	bd80      	pop	{r7, pc}
 801c924:	58024400 	.word	0x58024400
 801c928:	08026344 	.word	0x08026344
 801c92c:	240148dc 	.word	0x240148dc
 801c930:	240148d8 	.word	0x240148d8

0801c934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c934:	b580      	push	{r7, lr}
 801c936:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801c938:	f7ff ffcc 	bl	801c8d4 <HAL_RCC_GetHCLKFreq>
 801c93c:	4602      	mov	r2, r0
 801c93e:	4b06      	ldr	r3, [pc, #24]	@ (801c958 <HAL_RCC_GetPCLK1Freq+0x24>)
 801c940:	69db      	ldr	r3, [r3, #28]
 801c942:	091b      	lsrs	r3, r3, #4
 801c944:	f003 0307 	and.w	r3, r3, #7
 801c948:	4904      	ldr	r1, [pc, #16]	@ (801c95c <HAL_RCC_GetPCLK1Freq+0x28>)
 801c94a:	5ccb      	ldrb	r3, [r1, r3]
 801c94c:	f003 031f 	and.w	r3, r3, #31
 801c950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801c954:	4618      	mov	r0, r3
 801c956:	bd80      	pop	{r7, pc}
 801c958:	58024400 	.word	0x58024400
 801c95c:	08026344 	.word	0x08026344

0801c960 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801c960:	b480      	push	{r7}
 801c962:	b083      	sub	sp, #12
 801c964:	af00      	add	r7, sp, #0
 801c966:	6078      	str	r0, [r7, #4]
 801c968:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	223f      	movs	r2, #63	@ 0x3f
 801c96e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801c970:	4b1a      	ldr	r3, [pc, #104]	@ (801c9dc <HAL_RCC_GetClockConfig+0x7c>)
 801c972:	691b      	ldr	r3, [r3, #16]
 801c974:	f003 0207 	and.w	r2, r3, #7
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801c97c:	4b17      	ldr	r3, [pc, #92]	@ (801c9dc <HAL_RCC_GetClockConfig+0x7c>)
 801c97e:	699b      	ldr	r3, [r3, #24]
 801c980:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801c988:	4b14      	ldr	r3, [pc, #80]	@ (801c9dc <HAL_RCC_GetClockConfig+0x7c>)
 801c98a:	699b      	ldr	r3, [r3, #24]
 801c98c:	f003 020f 	and.w	r2, r3, #15
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801c994:	4b11      	ldr	r3, [pc, #68]	@ (801c9dc <HAL_RCC_GetClockConfig+0x7c>)
 801c996:	699b      	ldr	r3, [r3, #24]
 801c998:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 801c9a0:	4b0e      	ldr	r3, [pc, #56]	@ (801c9dc <HAL_RCC_GetClockConfig+0x7c>)
 801c9a2:	69db      	ldr	r3, [r3, #28]
 801c9a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801c9ac:	4b0b      	ldr	r3, [pc, #44]	@ (801c9dc <HAL_RCC_GetClockConfig+0x7c>)
 801c9ae:	69db      	ldr	r3, [r3, #28]
 801c9b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801c9b8:	4b08      	ldr	r3, [pc, #32]	@ (801c9dc <HAL_RCC_GetClockConfig+0x7c>)
 801c9ba:	6a1b      	ldr	r3, [r3, #32]
 801c9bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801c9c4:	4b06      	ldr	r3, [pc, #24]	@ (801c9e0 <HAL_RCC_GetClockConfig+0x80>)
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	f003 020f 	and.w	r2, r3, #15
 801c9cc:	683b      	ldr	r3, [r7, #0]
 801c9ce:	601a      	str	r2, [r3, #0]
}
 801c9d0:	bf00      	nop
 801c9d2:	370c      	adds	r7, #12
 801c9d4:	46bd      	mov	sp, r7
 801c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9da:	4770      	bx	lr
 801c9dc:	58024400 	.word	0x58024400
 801c9e0:	52002000 	.word	0x52002000

0801c9e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c9e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c9e8:	b0ca      	sub	sp, #296	@ 0x128
 801c9ea:	af00      	add	r7, sp, #0
 801c9ec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801c9f0:	2300      	movs	r3, #0
 801c9f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801c9f6:	2300      	movs	r3, #0
 801c9f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca04:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801ca08:	2500      	movs	r5, #0
 801ca0a:	ea54 0305 	orrs.w	r3, r4, r5
 801ca0e:	d049      	beq.n	801caa4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801ca10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ca16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801ca1a:	d02f      	beq.n	801ca7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 801ca1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801ca20:	d828      	bhi.n	801ca74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801ca22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801ca26:	d01a      	beq.n	801ca5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801ca28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801ca2c:	d822      	bhi.n	801ca74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d003      	beq.n	801ca3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 801ca32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801ca36:	d007      	beq.n	801ca48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801ca38:	e01c      	b.n	801ca74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ca3a:	4bb8      	ldr	r3, [pc, #736]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ca3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca3e:	4ab7      	ldr	r2, [pc, #732]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ca40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ca44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801ca46:	e01a      	b.n	801ca7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801ca48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca4c:	3308      	adds	r3, #8
 801ca4e:	2102      	movs	r1, #2
 801ca50:	4618      	mov	r0, r3
 801ca52:	f002 fb61 	bl	801f118 <RCCEx_PLL2_Config>
 801ca56:	4603      	mov	r3, r0
 801ca58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801ca5c:	e00f      	b.n	801ca7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ca5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca62:	3328      	adds	r3, #40	@ 0x28
 801ca64:	2102      	movs	r1, #2
 801ca66:	4618      	mov	r0, r3
 801ca68:	f002 fc08 	bl	801f27c <RCCEx_PLL3_Config>
 801ca6c:	4603      	mov	r3, r0
 801ca6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801ca72:	e004      	b.n	801ca7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ca74:	2301      	movs	r3, #1
 801ca76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ca7a:	e000      	b.n	801ca7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801ca7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ca7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d10a      	bne.n	801ca9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801ca86:	4ba5      	ldr	r3, [pc, #660]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ca88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ca8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801ca8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ca94:	4aa1      	ldr	r2, [pc, #644]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ca96:	430b      	orrs	r3, r1
 801ca98:	6513      	str	r3, [r2, #80]	@ 0x50
 801ca9a:	e003      	b.n	801caa4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801caa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801caa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801cab0:	f04f 0900 	mov.w	r9, #0
 801cab4:	ea58 0309 	orrs.w	r3, r8, r9
 801cab8:	d047      	beq.n	801cb4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801caba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cabe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cac0:	2b04      	cmp	r3, #4
 801cac2:	d82a      	bhi.n	801cb1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 801cac4:	a201      	add	r2, pc, #4	@ (adr r2, 801cacc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801cac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801caca:	bf00      	nop
 801cacc:	0801cae1 	.word	0x0801cae1
 801cad0:	0801caef 	.word	0x0801caef
 801cad4:	0801cb05 	.word	0x0801cb05
 801cad8:	0801cb23 	.word	0x0801cb23
 801cadc:	0801cb23 	.word	0x0801cb23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cae0:	4b8e      	ldr	r3, [pc, #568]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cae4:	4a8d      	ldr	r2, [pc, #564]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801caea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801caec:	e01a      	b.n	801cb24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801caee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801caf2:	3308      	adds	r3, #8
 801caf4:	2100      	movs	r1, #0
 801caf6:	4618      	mov	r0, r3
 801caf8:	f002 fb0e 	bl	801f118 <RCCEx_PLL2_Config>
 801cafc:	4603      	mov	r3, r0
 801cafe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cb02:	e00f      	b.n	801cb24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cb04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb08:	3328      	adds	r3, #40	@ 0x28
 801cb0a:	2100      	movs	r1, #0
 801cb0c:	4618      	mov	r0, r3
 801cb0e:	f002 fbb5 	bl	801f27c <RCCEx_PLL3_Config>
 801cb12:	4603      	mov	r3, r0
 801cb14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cb18:	e004      	b.n	801cb24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cb1a:	2301      	movs	r3, #1
 801cb1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cb20:	e000      	b.n	801cb24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801cb22:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cb24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d10a      	bne.n	801cb42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801cb2c:	4b7b      	ldr	r3, [pc, #492]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cb2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cb30:	f023 0107 	bic.w	r1, r3, #7
 801cb34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cb3a:	4a78      	ldr	r2, [pc, #480]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cb3c:	430b      	orrs	r3, r1
 801cb3e:	6513      	str	r3, [r2, #80]	@ 0x50
 801cb40:	e003      	b.n	801cb4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cb46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801cb4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb52:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801cb56:	f04f 0b00 	mov.w	fp, #0
 801cb5a:	ea5a 030b 	orrs.w	r3, sl, fp
 801cb5e:	d04c      	beq.n	801cbfa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801cb60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cb66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cb6a:	d030      	beq.n	801cbce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801cb6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cb70:	d829      	bhi.n	801cbc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801cb72:	2bc0      	cmp	r3, #192	@ 0xc0
 801cb74:	d02d      	beq.n	801cbd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801cb76:	2bc0      	cmp	r3, #192	@ 0xc0
 801cb78:	d825      	bhi.n	801cbc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801cb7a:	2b80      	cmp	r3, #128	@ 0x80
 801cb7c:	d018      	beq.n	801cbb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801cb7e:	2b80      	cmp	r3, #128	@ 0x80
 801cb80:	d821      	bhi.n	801cbc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d002      	beq.n	801cb8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801cb86:	2b40      	cmp	r3, #64	@ 0x40
 801cb88:	d007      	beq.n	801cb9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801cb8a:	e01c      	b.n	801cbc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cb8c:	4b63      	ldr	r3, [pc, #396]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cb8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb90:	4a62      	ldr	r2, [pc, #392]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cb92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cb96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801cb98:	e01c      	b.n	801cbd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cb9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb9e:	3308      	adds	r3, #8
 801cba0:	2100      	movs	r1, #0
 801cba2:	4618      	mov	r0, r3
 801cba4:	f002 fab8 	bl	801f118 <RCCEx_PLL2_Config>
 801cba8:	4603      	mov	r3, r0
 801cbaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801cbae:	e011      	b.n	801cbd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cbb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbb4:	3328      	adds	r3, #40	@ 0x28
 801cbb6:	2100      	movs	r1, #0
 801cbb8:	4618      	mov	r0, r3
 801cbba:	f002 fb5f 	bl	801f27c <RCCEx_PLL3_Config>
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801cbc4:	e006      	b.n	801cbd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cbc6:	2301      	movs	r3, #1
 801cbc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cbcc:	e002      	b.n	801cbd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801cbce:	bf00      	nop
 801cbd0:	e000      	b.n	801cbd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801cbd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cbd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d10a      	bne.n	801cbf2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801cbdc:	4b4f      	ldr	r3, [pc, #316]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cbde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cbe0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801cbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cbea:	4a4c      	ldr	r2, [pc, #304]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cbec:	430b      	orrs	r3, r1
 801cbee:	6513      	str	r3, [r2, #80]	@ 0x50
 801cbf0:	e003      	b.n	801cbfa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cbf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cbf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801cbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc02:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801cc06:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801cc0a:	2300      	movs	r3, #0
 801cc0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801cc10:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801cc14:	460b      	mov	r3, r1
 801cc16:	4313      	orrs	r3, r2
 801cc18:	d053      	beq.n	801ccc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801cc1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801cc22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cc26:	d035      	beq.n	801cc94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801cc28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cc2c:	d82e      	bhi.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801cc2e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801cc32:	d031      	beq.n	801cc98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801cc34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801cc38:	d828      	bhi.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801cc3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801cc3e:	d01a      	beq.n	801cc76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801cc40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801cc44:	d822      	bhi.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d003      	beq.n	801cc52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801cc4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801cc4e:	d007      	beq.n	801cc60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801cc50:	e01c      	b.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cc52:	4b32      	ldr	r3, [pc, #200]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc56:	4a31      	ldr	r2, [pc, #196]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cc58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cc5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cc5e:	e01c      	b.n	801cc9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cc60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc64:	3308      	adds	r3, #8
 801cc66:	2100      	movs	r1, #0
 801cc68:	4618      	mov	r0, r3
 801cc6a:	f002 fa55 	bl	801f118 <RCCEx_PLL2_Config>
 801cc6e:	4603      	mov	r3, r0
 801cc70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801cc74:	e011      	b.n	801cc9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cc76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc7a:	3328      	adds	r3, #40	@ 0x28
 801cc7c:	2100      	movs	r1, #0
 801cc7e:	4618      	mov	r0, r3
 801cc80:	f002 fafc 	bl	801f27c <RCCEx_PLL3_Config>
 801cc84:	4603      	mov	r3, r0
 801cc86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cc8a:	e006      	b.n	801cc9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801cc8c:	2301      	movs	r3, #1
 801cc8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cc92:	e002      	b.n	801cc9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801cc94:	bf00      	nop
 801cc96:	e000      	b.n	801cc9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801cc98:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cc9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d10b      	bne.n	801ccba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801cca2:	4b1e      	ldr	r3, [pc, #120]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cca6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801ccaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801ccb2:	4a1a      	ldr	r2, [pc, #104]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ccb4:	430b      	orrs	r3, r1
 801ccb6:	6593      	str	r3, [r2, #88]	@ 0x58
 801ccb8:	e003      	b.n	801ccc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ccba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ccbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801ccc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801ccce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801ccd2:	2300      	movs	r3, #0
 801ccd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801ccd8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801ccdc:	460b      	mov	r3, r1
 801ccde:	4313      	orrs	r3, r2
 801cce0:	d056      	beq.n	801cd90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801cce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cce6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801ccea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801ccee:	d038      	beq.n	801cd62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801ccf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801ccf4:	d831      	bhi.n	801cd5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801ccf6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801ccfa:	d034      	beq.n	801cd66 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801ccfc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801cd00:	d82b      	bhi.n	801cd5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801cd02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801cd06:	d01d      	beq.n	801cd44 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801cd08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801cd0c:	d825      	bhi.n	801cd5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d006      	beq.n	801cd20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801cd12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801cd16:	d00a      	beq.n	801cd2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801cd18:	e01f      	b.n	801cd5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801cd1a:	bf00      	nop
 801cd1c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cd20:	4ba2      	ldr	r3, [pc, #648]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd24:	4aa1      	ldr	r2, [pc, #644]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cd26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cd2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cd2c:	e01c      	b.n	801cd68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cd2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd32:	3308      	adds	r3, #8
 801cd34:	2100      	movs	r1, #0
 801cd36:	4618      	mov	r0, r3
 801cd38:	f002 f9ee 	bl	801f118 <RCCEx_PLL2_Config>
 801cd3c:	4603      	mov	r3, r0
 801cd3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801cd42:	e011      	b.n	801cd68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cd44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd48:	3328      	adds	r3, #40	@ 0x28
 801cd4a:	2100      	movs	r1, #0
 801cd4c:	4618      	mov	r0, r3
 801cd4e:	f002 fa95 	bl	801f27c <RCCEx_PLL3_Config>
 801cd52:	4603      	mov	r3, r0
 801cd54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cd58:	e006      	b.n	801cd68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801cd5a:	2301      	movs	r3, #1
 801cd5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cd60:	e002      	b.n	801cd68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801cd62:	bf00      	nop
 801cd64:	e000      	b.n	801cd68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801cd66:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d10b      	bne.n	801cd88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801cd70:	4b8e      	ldr	r3, [pc, #568]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cd72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cd74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801cd78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801cd80:	4a8a      	ldr	r2, [pc, #552]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cd82:	430b      	orrs	r3, r1
 801cd84:	6593      	str	r3, [r2, #88]	@ 0x58
 801cd86:	e003      	b.n	801cd90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cd8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801cd90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801cd9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801cda0:	2300      	movs	r3, #0
 801cda2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801cda6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801cdaa:	460b      	mov	r3, r1
 801cdac:	4313      	orrs	r3, r2
 801cdae:	d03a      	beq.n	801ce26 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801cdb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cdb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cdb6:	2b30      	cmp	r3, #48	@ 0x30
 801cdb8:	d01f      	beq.n	801cdfa <HAL_RCCEx_PeriphCLKConfig+0x416>
 801cdba:	2b30      	cmp	r3, #48	@ 0x30
 801cdbc:	d819      	bhi.n	801cdf2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801cdbe:	2b20      	cmp	r3, #32
 801cdc0:	d00c      	beq.n	801cddc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801cdc2:	2b20      	cmp	r3, #32
 801cdc4:	d815      	bhi.n	801cdf2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d019      	beq.n	801cdfe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801cdca:	2b10      	cmp	r3, #16
 801cdcc:	d111      	bne.n	801cdf2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cdce:	4b77      	ldr	r3, [pc, #476]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cdd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cdd2:	4a76      	ldr	r2, [pc, #472]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cdd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cdd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801cdda:	e011      	b.n	801ce00 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cde0:	3308      	adds	r3, #8
 801cde2:	2102      	movs	r1, #2
 801cde4:	4618      	mov	r0, r3
 801cde6:	f002 f997 	bl	801f118 <RCCEx_PLL2_Config>
 801cdea:	4603      	mov	r3, r0
 801cdec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801cdf0:	e006      	b.n	801ce00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801cdf2:	2301      	movs	r3, #1
 801cdf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cdf8:	e002      	b.n	801ce00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801cdfa:	bf00      	nop
 801cdfc:	e000      	b.n	801ce00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801cdfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ce00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d10a      	bne.n	801ce1e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801ce08:	4b68      	ldr	r3, [pc, #416]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ce0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ce0c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801ce10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ce16:	4a65      	ldr	r2, [pc, #404]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ce18:	430b      	orrs	r3, r1
 801ce1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801ce1c:	e003      	b.n	801ce26 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ce22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801ce26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce2e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801ce32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801ce36:	2300      	movs	r3, #0
 801ce38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801ce3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801ce40:	460b      	mov	r3, r1
 801ce42:	4313      	orrs	r3, r2
 801ce44:	d051      	beq.n	801ceea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801ce46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ce4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ce50:	d035      	beq.n	801cebe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801ce52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ce56:	d82e      	bhi.n	801ceb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ce58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ce5c:	d031      	beq.n	801cec2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801ce5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ce62:	d828      	bhi.n	801ceb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ce64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ce68:	d01a      	beq.n	801cea0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801ce6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ce6e:	d822      	bhi.n	801ceb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d003      	beq.n	801ce7c <HAL_RCCEx_PeriphCLKConfig+0x498>
 801ce74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ce78:	d007      	beq.n	801ce8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801ce7a:	e01c      	b.n	801ceb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ce7c:	4b4b      	ldr	r3, [pc, #300]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ce7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce80:	4a4a      	ldr	r2, [pc, #296]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ce82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ce86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ce88:	e01c      	b.n	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ce8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce8e:	3308      	adds	r3, #8
 801ce90:	2100      	movs	r1, #0
 801ce92:	4618      	mov	r0, r3
 801ce94:	f002 f940 	bl	801f118 <RCCEx_PLL2_Config>
 801ce98:	4603      	mov	r3, r0
 801ce9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ce9e:	e011      	b.n	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cea4:	3328      	adds	r3, #40	@ 0x28
 801cea6:	2100      	movs	r1, #0
 801cea8:	4618      	mov	r0, r3
 801ceaa:	f002 f9e7 	bl	801f27c <RCCEx_PLL3_Config>
 801ceae:	4603      	mov	r3, r0
 801ceb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ceb4:	e006      	b.n	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ceb6:	2301      	movs	r3, #1
 801ceb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cebc:	e002      	b.n	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801cebe:	bf00      	nop
 801cec0:	e000      	b.n	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801cec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d10a      	bne.n	801cee2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801cecc:	4b37      	ldr	r3, [pc, #220]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ced0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801ced4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ced8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ceda:	4a34      	ldr	r2, [pc, #208]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cedc:	430b      	orrs	r3, r1
 801cede:	6513      	str	r3, [r2, #80]	@ 0x50
 801cee0:	e003      	b.n	801ceea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801ceea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801cef6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801cefa:	2300      	movs	r3, #0
 801cefc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801cf00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801cf04:	460b      	mov	r3, r1
 801cf06:	4313      	orrs	r3, r2
 801cf08:	d056      	beq.n	801cfb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801cf0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801cf10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cf14:	d033      	beq.n	801cf7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801cf16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cf1a:	d82c      	bhi.n	801cf76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801cf1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801cf20:	d02f      	beq.n	801cf82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801cf22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801cf26:	d826      	bhi.n	801cf76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801cf28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801cf2c:	d02b      	beq.n	801cf86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801cf2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801cf32:	d820      	bhi.n	801cf76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801cf34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cf38:	d012      	beq.n	801cf60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801cf3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cf3e:	d81a      	bhi.n	801cf76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d022      	beq.n	801cf8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801cf44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cf48:	d115      	bne.n	801cf76 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cf4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf4e:	3308      	adds	r3, #8
 801cf50:	2101      	movs	r1, #1
 801cf52:	4618      	mov	r0, r3
 801cf54:	f002 f8e0 	bl	801f118 <RCCEx_PLL2_Config>
 801cf58:	4603      	mov	r3, r0
 801cf5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801cf5e:	e015      	b.n	801cf8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cf60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf64:	3328      	adds	r3, #40	@ 0x28
 801cf66:	2101      	movs	r1, #1
 801cf68:	4618      	mov	r0, r3
 801cf6a:	f002 f987 	bl	801f27c <RCCEx_PLL3_Config>
 801cf6e:	4603      	mov	r3, r0
 801cf70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801cf74:	e00a      	b.n	801cf8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cf76:	2301      	movs	r3, #1
 801cf78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cf7c:	e006      	b.n	801cf8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cf7e:	bf00      	nop
 801cf80:	e004      	b.n	801cf8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cf82:	bf00      	nop
 801cf84:	e002      	b.n	801cf8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cf86:	bf00      	nop
 801cf88:	e000      	b.n	801cf8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cf8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cf8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d10d      	bne.n	801cfb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801cf94:	4b05      	ldr	r3, [pc, #20]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cf96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cf98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801cf9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801cfa2:	4a02      	ldr	r2, [pc, #8]	@ (801cfac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cfa4:	430b      	orrs	r3, r1
 801cfa6:	6513      	str	r3, [r2, #80]	@ 0x50
 801cfa8:	e006      	b.n	801cfb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801cfaa:	bf00      	nop
 801cfac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cfb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cfb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801cfb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfc0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801cfc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801cfc8:	2300      	movs	r3, #0
 801cfca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801cfce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801cfd2:	460b      	mov	r3, r1
 801cfd4:	4313      	orrs	r3, r2
 801cfd6:	d055      	beq.n	801d084 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801cfd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801cfe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801cfe4:	d033      	beq.n	801d04e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801cfe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801cfea:	d82c      	bhi.n	801d046 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801cfec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cff0:	d02f      	beq.n	801d052 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801cff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cff6:	d826      	bhi.n	801d046 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801cff8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801cffc:	d02b      	beq.n	801d056 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801cffe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d002:	d820      	bhi.n	801d046 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d008:	d012      	beq.n	801d030 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801d00a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d00e:	d81a      	bhi.n	801d046 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d010:	2b00      	cmp	r3, #0
 801d012:	d022      	beq.n	801d05a <HAL_RCCEx_PeriphCLKConfig+0x676>
 801d014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d018:	d115      	bne.n	801d046 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d01e:	3308      	adds	r3, #8
 801d020:	2101      	movs	r1, #1
 801d022:	4618      	mov	r0, r3
 801d024:	f002 f878 	bl	801f118 <RCCEx_PLL2_Config>
 801d028:	4603      	mov	r3, r0
 801d02a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d02e:	e015      	b.n	801d05c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d034:	3328      	adds	r3, #40	@ 0x28
 801d036:	2101      	movs	r1, #1
 801d038:	4618      	mov	r0, r3
 801d03a:	f002 f91f 	bl	801f27c <RCCEx_PLL3_Config>
 801d03e:	4603      	mov	r3, r0
 801d040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d044:	e00a      	b.n	801d05c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801d046:	2301      	movs	r3, #1
 801d048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d04c:	e006      	b.n	801d05c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d04e:	bf00      	nop
 801d050:	e004      	b.n	801d05c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d052:	bf00      	nop
 801d054:	e002      	b.n	801d05c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d056:	bf00      	nop
 801d058:	e000      	b.n	801d05c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d05a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d05c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d060:	2b00      	cmp	r3, #0
 801d062:	d10b      	bne.n	801d07c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801d064:	4ba3      	ldr	r3, [pc, #652]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d068:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d074:	4a9f      	ldr	r2, [pc, #636]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d076:	430b      	orrs	r3, r1
 801d078:	6593      	str	r3, [r2, #88]	@ 0x58
 801d07a:	e003      	b.n	801d084 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d07c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d080:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801d084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d08c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801d090:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801d094:	2300      	movs	r3, #0
 801d096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801d09a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801d09e:	460b      	mov	r3, r1
 801d0a0:	4313      	orrs	r3, r2
 801d0a2:	d037      	beq.n	801d114 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801d0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d0aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d0ae:	d00e      	beq.n	801d0ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801d0b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d0b4:	d816      	bhi.n	801d0e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d018      	beq.n	801d0ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 801d0ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d0be:	d111      	bne.n	801d0e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d0c0:	4b8c      	ldr	r3, [pc, #560]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d0c4:	4a8b      	ldr	r2, [pc, #556]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d0c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d0ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d0cc:	e00f      	b.n	801d0ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0d2:	3308      	adds	r3, #8
 801d0d4:	2101      	movs	r1, #1
 801d0d6:	4618      	mov	r0, r3
 801d0d8:	f002 f81e 	bl	801f118 <RCCEx_PLL2_Config>
 801d0dc:	4603      	mov	r3, r0
 801d0de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d0e2:	e004      	b.n	801d0ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d0e4:	2301      	movs	r3, #1
 801d0e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d0ea:	e000      	b.n	801d0ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801d0ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d0ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d10a      	bne.n	801d10c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d0f6:	4b7f      	ldr	r3, [pc, #508]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d0f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d0fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801d0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d104:	4a7b      	ldr	r2, [pc, #492]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d106:	430b      	orrs	r3, r1
 801d108:	6513      	str	r3, [r2, #80]	@ 0x50
 801d10a:	e003      	b.n	801d114 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d10c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d110:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801d114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d11c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801d120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801d124:	2300      	movs	r3, #0
 801d126:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801d12a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801d12e:	460b      	mov	r3, r1
 801d130:	4313      	orrs	r3, r2
 801d132:	d039      	beq.n	801d1a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801d134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d13a:	2b03      	cmp	r3, #3
 801d13c:	d81c      	bhi.n	801d178 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801d13e:	a201      	add	r2, pc, #4	@ (adr r2, 801d144 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801d140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d144:	0801d181 	.word	0x0801d181
 801d148:	0801d155 	.word	0x0801d155
 801d14c:	0801d163 	.word	0x0801d163
 801d150:	0801d181 	.word	0x0801d181
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d154:	4b67      	ldr	r3, [pc, #412]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d158:	4a66      	ldr	r2, [pc, #408]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d15a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d15e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d160:	e00f      	b.n	801d182 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d166:	3308      	adds	r3, #8
 801d168:	2102      	movs	r1, #2
 801d16a:	4618      	mov	r0, r3
 801d16c:	f001 ffd4 	bl	801f118 <RCCEx_PLL2_Config>
 801d170:	4603      	mov	r3, r0
 801d172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d176:	e004      	b.n	801d182 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d178:	2301      	movs	r3, #1
 801d17a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d17e:	e000      	b.n	801d182 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801d180:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d186:	2b00      	cmp	r3, #0
 801d188:	d10a      	bne.n	801d1a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801d18a:	4b5a      	ldr	r3, [pc, #360]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d18c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d18e:	f023 0103 	bic.w	r1, r3, #3
 801d192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d198:	4a56      	ldr	r2, [pc, #344]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d19a:	430b      	orrs	r3, r1
 801d19c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d19e:	e003      	b.n	801d1a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d1a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d1a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801d1b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801d1b8:	2300      	movs	r3, #0
 801d1ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801d1be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801d1c2:	460b      	mov	r3, r1
 801d1c4:	4313      	orrs	r3, r2
 801d1c6:	f000 809f 	beq.w	801d308 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d1ca:	4b4b      	ldr	r3, [pc, #300]	@ (801d2f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	4a4a      	ldr	r2, [pc, #296]	@ (801d2f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d1d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d1d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d1d6:	f7fc f89d 	bl	8019314 <HAL_GetTick>
 801d1da:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d1de:	e00b      	b.n	801d1f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d1e0:	f7fc f898 	bl	8019314 <HAL_GetTick>
 801d1e4:	4602      	mov	r2, r0
 801d1e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801d1ea:	1ad3      	subs	r3, r2, r3
 801d1ec:	2b64      	cmp	r3, #100	@ 0x64
 801d1ee:	d903      	bls.n	801d1f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801d1f0:	2303      	movs	r3, #3
 801d1f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d1f6:	e005      	b.n	801d204 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d1f8:	4b3f      	ldr	r3, [pc, #252]	@ (801d2f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d200:	2b00      	cmp	r3, #0
 801d202:	d0ed      	beq.n	801d1e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801d204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d208:	2b00      	cmp	r3, #0
 801d20a:	d179      	bne.n	801d300 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801d20c:	4b39      	ldr	r3, [pc, #228]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d20e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801d210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d214:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d218:	4053      	eors	r3, r2
 801d21a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d015      	beq.n	801d24e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d222:	4b34      	ldr	r3, [pc, #208]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801d22a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d22e:	4b31      	ldr	r3, [pc, #196]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d232:	4a30      	ldr	r2, [pc, #192]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d238:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d23a:	4b2e      	ldr	r3, [pc, #184]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d23c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d23e:	4a2d      	ldr	r2, [pc, #180]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d244:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801d246:	4a2b      	ldr	r2, [pc, #172]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801d24c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801d24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d252:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d25a:	d118      	bne.n	801d28e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d25c:	f7fc f85a 	bl	8019314 <HAL_GetTick>
 801d260:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d264:	e00d      	b.n	801d282 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d266:	f7fc f855 	bl	8019314 <HAL_GetTick>
 801d26a:	4602      	mov	r2, r0
 801d26c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801d270:	1ad2      	subs	r2, r2, r3
 801d272:	f241 3388 	movw	r3, #5000	@ 0x1388
 801d276:	429a      	cmp	r2, r3
 801d278:	d903      	bls.n	801d282 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801d27a:	2303      	movs	r3, #3
 801d27c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801d280:	e005      	b.n	801d28e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d282:	4b1c      	ldr	r3, [pc, #112]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d286:	f003 0302 	and.w	r3, r3, #2
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d0eb      	beq.n	801d266 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801d28e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d292:	2b00      	cmp	r3, #0
 801d294:	d129      	bne.n	801d2ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d29a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d29e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d2a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d2a6:	d10e      	bne.n	801d2c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801d2a8:	4b12      	ldr	r3, [pc, #72]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d2aa:	691b      	ldr	r3, [r3, #16]
 801d2ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801d2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d2b8:	091a      	lsrs	r2, r3, #4
 801d2ba:	4b10      	ldr	r3, [pc, #64]	@ (801d2fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801d2bc:	4013      	ands	r3, r2
 801d2be:	4a0d      	ldr	r2, [pc, #52]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d2c0:	430b      	orrs	r3, r1
 801d2c2:	6113      	str	r3, [r2, #16]
 801d2c4:	e005      	b.n	801d2d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801d2c6:	4b0b      	ldr	r3, [pc, #44]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d2c8:	691b      	ldr	r3, [r3, #16]
 801d2ca:	4a0a      	ldr	r2, [pc, #40]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d2cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801d2d0:	6113      	str	r3, [r2, #16]
 801d2d2:	4b08      	ldr	r3, [pc, #32]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d2d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801d2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d2de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d2e2:	4a04      	ldr	r2, [pc, #16]	@ (801d2f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d2e4:	430b      	orrs	r3, r1
 801d2e6:	6713      	str	r3, [r2, #112]	@ 0x70
 801d2e8:	e00e      	b.n	801d308 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801d2ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d2ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801d2f2:	e009      	b.n	801d308 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801d2f4:	58024400 	.word	0x58024400
 801d2f8:	58024800 	.word	0x58024800
 801d2fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d304:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801d308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d310:	f002 0301 	and.w	r3, r2, #1
 801d314:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801d318:	2300      	movs	r3, #0
 801d31a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801d31e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801d322:	460b      	mov	r3, r1
 801d324:	4313      	orrs	r3, r2
 801d326:	f000 8089 	beq.w	801d43c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801d32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d32e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d330:	2b28      	cmp	r3, #40	@ 0x28
 801d332:	d86b      	bhi.n	801d40c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801d334:	a201      	add	r2, pc, #4	@ (adr r2, 801d33c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801d336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d33a:	bf00      	nop
 801d33c:	0801d415 	.word	0x0801d415
 801d340:	0801d40d 	.word	0x0801d40d
 801d344:	0801d40d 	.word	0x0801d40d
 801d348:	0801d40d 	.word	0x0801d40d
 801d34c:	0801d40d 	.word	0x0801d40d
 801d350:	0801d40d 	.word	0x0801d40d
 801d354:	0801d40d 	.word	0x0801d40d
 801d358:	0801d40d 	.word	0x0801d40d
 801d35c:	0801d3e1 	.word	0x0801d3e1
 801d360:	0801d40d 	.word	0x0801d40d
 801d364:	0801d40d 	.word	0x0801d40d
 801d368:	0801d40d 	.word	0x0801d40d
 801d36c:	0801d40d 	.word	0x0801d40d
 801d370:	0801d40d 	.word	0x0801d40d
 801d374:	0801d40d 	.word	0x0801d40d
 801d378:	0801d40d 	.word	0x0801d40d
 801d37c:	0801d3f7 	.word	0x0801d3f7
 801d380:	0801d40d 	.word	0x0801d40d
 801d384:	0801d40d 	.word	0x0801d40d
 801d388:	0801d40d 	.word	0x0801d40d
 801d38c:	0801d40d 	.word	0x0801d40d
 801d390:	0801d40d 	.word	0x0801d40d
 801d394:	0801d40d 	.word	0x0801d40d
 801d398:	0801d40d 	.word	0x0801d40d
 801d39c:	0801d415 	.word	0x0801d415
 801d3a0:	0801d40d 	.word	0x0801d40d
 801d3a4:	0801d40d 	.word	0x0801d40d
 801d3a8:	0801d40d 	.word	0x0801d40d
 801d3ac:	0801d40d 	.word	0x0801d40d
 801d3b0:	0801d40d 	.word	0x0801d40d
 801d3b4:	0801d40d 	.word	0x0801d40d
 801d3b8:	0801d40d 	.word	0x0801d40d
 801d3bc:	0801d415 	.word	0x0801d415
 801d3c0:	0801d40d 	.word	0x0801d40d
 801d3c4:	0801d40d 	.word	0x0801d40d
 801d3c8:	0801d40d 	.word	0x0801d40d
 801d3cc:	0801d40d 	.word	0x0801d40d
 801d3d0:	0801d40d 	.word	0x0801d40d
 801d3d4:	0801d40d 	.word	0x0801d40d
 801d3d8:	0801d40d 	.word	0x0801d40d
 801d3dc:	0801d415 	.word	0x0801d415
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3e4:	3308      	adds	r3, #8
 801d3e6:	2101      	movs	r1, #1
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	f001 fe95 	bl	801f118 <RCCEx_PLL2_Config>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801d3f4:	e00f      	b.n	801d416 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3fa:	3328      	adds	r3, #40	@ 0x28
 801d3fc:	2101      	movs	r1, #1
 801d3fe:	4618      	mov	r0, r3
 801d400:	f001 ff3c 	bl	801f27c <RCCEx_PLL3_Config>
 801d404:	4603      	mov	r3, r0
 801d406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801d40a:	e004      	b.n	801d416 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d40c:	2301      	movs	r3, #1
 801d40e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d412:	e000      	b.n	801d416 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801d414:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d10a      	bne.n	801d434 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801d41e:	4bbf      	ldr	r3, [pc, #764]	@ (801d71c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d422:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801d426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d42a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d42c:	4abb      	ldr	r2, [pc, #748]	@ (801d71c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d42e:	430b      	orrs	r3, r1
 801d430:	6553      	str	r3, [r2, #84]	@ 0x54
 801d432:	e003      	b.n	801d43c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801d43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d440:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d444:	f002 0302 	and.w	r3, r2, #2
 801d448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801d44c:	2300      	movs	r3, #0
 801d44e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801d452:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801d456:	460b      	mov	r3, r1
 801d458:	4313      	orrs	r3, r2
 801d45a:	d041      	beq.n	801d4e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801d45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d460:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d462:	2b05      	cmp	r3, #5
 801d464:	d824      	bhi.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801d466:	a201      	add	r2, pc, #4	@ (adr r2, 801d46c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801d468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d46c:	0801d4b9 	.word	0x0801d4b9
 801d470:	0801d485 	.word	0x0801d485
 801d474:	0801d49b 	.word	0x0801d49b
 801d478:	0801d4b9 	.word	0x0801d4b9
 801d47c:	0801d4b9 	.word	0x0801d4b9
 801d480:	0801d4b9 	.word	0x0801d4b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d488:	3308      	adds	r3, #8
 801d48a:	2101      	movs	r1, #1
 801d48c:	4618      	mov	r0, r3
 801d48e:	f001 fe43 	bl	801f118 <RCCEx_PLL2_Config>
 801d492:	4603      	mov	r3, r0
 801d494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d498:	e00f      	b.n	801d4ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d49e:	3328      	adds	r3, #40	@ 0x28
 801d4a0:	2101      	movs	r1, #1
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	f001 feea 	bl	801f27c <RCCEx_PLL3_Config>
 801d4a8:	4603      	mov	r3, r0
 801d4aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d4ae:	e004      	b.n	801d4ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d4b0:	2301      	movs	r3, #1
 801d4b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d4b6:	e000      	b.n	801d4ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801d4b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d4ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d10a      	bne.n	801d4d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801d4c2:	4b96      	ldr	r3, [pc, #600]	@ (801d71c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d4c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d4c6:	f023 0107 	bic.w	r1, r3, #7
 801d4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d4d0:	4a92      	ldr	r2, [pc, #584]	@ (801d71c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d4d2:	430b      	orrs	r3, r1
 801d4d4:	6553      	str	r3, [r2, #84]	@ 0x54
 801d4d6:	e003      	b.n	801d4e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d4d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d4e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4e8:	f002 0304 	and.w	r3, r2, #4
 801d4ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801d4f0:	2300      	movs	r3, #0
 801d4f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801d4f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801d4fa:	460b      	mov	r3, r1
 801d4fc:	4313      	orrs	r3, r2
 801d4fe:	d044      	beq.n	801d58a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801d500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d508:	2b05      	cmp	r3, #5
 801d50a:	d825      	bhi.n	801d558 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801d50c:	a201      	add	r2, pc, #4	@ (adr r2, 801d514 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801d50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d512:	bf00      	nop
 801d514:	0801d561 	.word	0x0801d561
 801d518:	0801d52d 	.word	0x0801d52d
 801d51c:	0801d543 	.word	0x0801d543
 801d520:	0801d561 	.word	0x0801d561
 801d524:	0801d561 	.word	0x0801d561
 801d528:	0801d561 	.word	0x0801d561
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d530:	3308      	adds	r3, #8
 801d532:	2101      	movs	r1, #1
 801d534:	4618      	mov	r0, r3
 801d536:	f001 fdef 	bl	801f118 <RCCEx_PLL2_Config>
 801d53a:	4603      	mov	r3, r0
 801d53c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d540:	e00f      	b.n	801d562 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d546:	3328      	adds	r3, #40	@ 0x28
 801d548:	2101      	movs	r1, #1
 801d54a:	4618      	mov	r0, r3
 801d54c:	f001 fe96 	bl	801f27c <RCCEx_PLL3_Config>
 801d550:	4603      	mov	r3, r0
 801d552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d556:	e004      	b.n	801d562 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d558:	2301      	movs	r3, #1
 801d55a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d55e:	e000      	b.n	801d562 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801d560:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d566:	2b00      	cmp	r3, #0
 801d568:	d10b      	bne.n	801d582 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d56a:	4b6c      	ldr	r3, [pc, #432]	@ (801d71c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d56c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d56e:	f023 0107 	bic.w	r1, r3, #7
 801d572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d57a:	4a68      	ldr	r2, [pc, #416]	@ (801d71c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d57c:	430b      	orrs	r3, r1
 801d57e:	6593      	str	r3, [r2, #88]	@ 0x58
 801d580:	e003      	b.n	801d58a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d592:	f002 0320 	and.w	r3, r2, #32
 801d596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801d59a:	2300      	movs	r3, #0
 801d59c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801d5a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801d5a4:	460b      	mov	r3, r1
 801d5a6:	4313      	orrs	r3, r2
 801d5a8:	d055      	beq.n	801d656 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801d5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d5b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d5b6:	d033      	beq.n	801d620 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801d5b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d5bc:	d82c      	bhi.n	801d618 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d5be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d5c2:	d02f      	beq.n	801d624 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801d5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d5c8:	d826      	bhi.n	801d618 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d5ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d5ce:	d02b      	beq.n	801d628 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801d5d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d5d4:	d820      	bhi.n	801d618 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d5d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d5da:	d012      	beq.n	801d602 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801d5dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d5e0:	d81a      	bhi.n	801d618 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d022      	beq.n	801d62c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801d5e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d5ea:	d115      	bne.n	801d618 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5f0:	3308      	adds	r3, #8
 801d5f2:	2100      	movs	r1, #0
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	f001 fd8f 	bl	801f118 <RCCEx_PLL2_Config>
 801d5fa:	4603      	mov	r3, r0
 801d5fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d600:	e015      	b.n	801d62e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d606:	3328      	adds	r3, #40	@ 0x28
 801d608:	2102      	movs	r1, #2
 801d60a:	4618      	mov	r0, r3
 801d60c:	f001 fe36 	bl	801f27c <RCCEx_PLL3_Config>
 801d610:	4603      	mov	r3, r0
 801d612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d616:	e00a      	b.n	801d62e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d618:	2301      	movs	r3, #1
 801d61a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d61e:	e006      	b.n	801d62e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d620:	bf00      	nop
 801d622:	e004      	b.n	801d62e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d624:	bf00      	nop
 801d626:	e002      	b.n	801d62e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d628:	bf00      	nop
 801d62a:	e000      	b.n	801d62e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d62c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d62e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d632:	2b00      	cmp	r3, #0
 801d634:	d10b      	bne.n	801d64e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d636:	4b39      	ldr	r3, [pc, #228]	@ (801d71c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d63a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d646:	4a35      	ldr	r2, [pc, #212]	@ (801d71c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d648:	430b      	orrs	r3, r1
 801d64a:	6553      	str	r3, [r2, #84]	@ 0x54
 801d64c:	e003      	b.n	801d656 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d64e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801d656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d65e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801d662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801d666:	2300      	movs	r3, #0
 801d668:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801d66c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801d670:	460b      	mov	r3, r1
 801d672:	4313      	orrs	r3, r2
 801d674:	d058      	beq.n	801d728 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801d676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d67a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d67e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801d682:	d033      	beq.n	801d6ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801d684:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801d688:	d82c      	bhi.n	801d6e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d68a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d68e:	d02f      	beq.n	801d6f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801d690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d694:	d826      	bhi.n	801d6e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d696:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d69a:	d02b      	beq.n	801d6f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801d69c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d6a0:	d820      	bhi.n	801d6e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d6a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d6a6:	d012      	beq.n	801d6ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801d6a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d6ac:	d81a      	bhi.n	801d6e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d6ae:	2b00      	cmp	r3, #0
 801d6b0:	d022      	beq.n	801d6f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801d6b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d6b6:	d115      	bne.n	801d6e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6bc:	3308      	adds	r3, #8
 801d6be:	2100      	movs	r1, #0
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f001 fd29 	bl	801f118 <RCCEx_PLL2_Config>
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d6cc:	e015      	b.n	801d6fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6d2:	3328      	adds	r3, #40	@ 0x28
 801d6d4:	2102      	movs	r1, #2
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	f001 fdd0 	bl	801f27c <RCCEx_PLL3_Config>
 801d6dc:	4603      	mov	r3, r0
 801d6de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d6e2:	e00a      	b.n	801d6fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d6e4:	2301      	movs	r3, #1
 801d6e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d6ea:	e006      	b.n	801d6fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d6ec:	bf00      	nop
 801d6ee:	e004      	b.n	801d6fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d6f0:	bf00      	nop
 801d6f2:	e002      	b.n	801d6fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d6f4:	bf00      	nop
 801d6f6:	e000      	b.n	801d6fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d6f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d6fe:	2b00      	cmp	r3, #0
 801d700:	d10e      	bne.n	801d720 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801d702:	4b06      	ldr	r3, [pc, #24]	@ (801d71c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d706:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801d70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d70e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d712:	4a02      	ldr	r2, [pc, #8]	@ (801d71c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d714:	430b      	orrs	r3, r1
 801d716:	6593      	str	r3, [r2, #88]	@ 0x58
 801d718:	e006      	b.n	801d728 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801d71a:	bf00      	nop
 801d71c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801d728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d730:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801d734:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801d738:	2300      	movs	r3, #0
 801d73a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801d73e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801d742:	460b      	mov	r3, r1
 801d744:	4313      	orrs	r3, r2
 801d746:	d055      	beq.n	801d7f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801d748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d74c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801d750:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801d754:	d033      	beq.n	801d7be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801d756:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801d75a:	d82c      	bhi.n	801d7b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d75c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801d760:	d02f      	beq.n	801d7c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801d762:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801d766:	d826      	bhi.n	801d7b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d768:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801d76c:	d02b      	beq.n	801d7c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801d76e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801d772:	d820      	bhi.n	801d7b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d778:	d012      	beq.n	801d7a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801d77a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d77e:	d81a      	bhi.n	801d7b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d780:	2b00      	cmp	r3, #0
 801d782:	d022      	beq.n	801d7ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801d784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d788:	d115      	bne.n	801d7b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d78a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d78e:	3308      	adds	r3, #8
 801d790:	2100      	movs	r1, #0
 801d792:	4618      	mov	r0, r3
 801d794:	f001 fcc0 	bl	801f118 <RCCEx_PLL2_Config>
 801d798:	4603      	mov	r3, r0
 801d79a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d79e:	e015      	b.n	801d7cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7a4:	3328      	adds	r3, #40	@ 0x28
 801d7a6:	2102      	movs	r1, #2
 801d7a8:	4618      	mov	r0, r3
 801d7aa:	f001 fd67 	bl	801f27c <RCCEx_PLL3_Config>
 801d7ae:	4603      	mov	r3, r0
 801d7b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d7b4:	e00a      	b.n	801d7cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d7b6:	2301      	movs	r3, #1
 801d7b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d7bc:	e006      	b.n	801d7cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d7be:	bf00      	nop
 801d7c0:	e004      	b.n	801d7cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d7c2:	bf00      	nop
 801d7c4:	e002      	b.n	801d7cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d7c6:	bf00      	nop
 801d7c8:	e000      	b.n	801d7cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d7ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d7cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	d10b      	bne.n	801d7ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801d7d4:	4ba1      	ldr	r3, [pc, #644]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d7d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d7d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801d7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801d7e4:	4a9d      	ldr	r2, [pc, #628]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d7e6:	430b      	orrs	r3, r1
 801d7e8:	6593      	str	r3, [r2, #88]	@ 0x58
 801d7ea:	e003      	b.n	801d7f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d7ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801d7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7fc:	f002 0308 	and.w	r3, r2, #8
 801d800:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801d804:	2300      	movs	r3, #0
 801d806:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801d80a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801d80e:	460b      	mov	r3, r1
 801d810:	4313      	orrs	r3, r2
 801d812:	d01e      	beq.n	801d852 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801d814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d81c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d820:	d10c      	bne.n	801d83c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d826:	3328      	adds	r3, #40	@ 0x28
 801d828:	2102      	movs	r1, #2
 801d82a:	4618      	mov	r0, r3
 801d82c:	f001 fd26 	bl	801f27c <RCCEx_PLL3_Config>
 801d830:	4603      	mov	r3, r0
 801d832:	2b00      	cmp	r3, #0
 801d834:	d002      	beq.n	801d83c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801d836:	2301      	movs	r3, #1
 801d838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801d83c:	4b87      	ldr	r3, [pc, #540]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d83e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d840:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801d844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d84c:	4a83      	ldr	r2, [pc, #524]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d84e:	430b      	orrs	r3, r1
 801d850:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d85a:	f002 0310 	and.w	r3, r2, #16
 801d85e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801d862:	2300      	movs	r3, #0
 801d864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801d868:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801d86c:	460b      	mov	r3, r1
 801d86e:	4313      	orrs	r3, r2
 801d870:	d01e      	beq.n	801d8b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801d872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d876:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d87a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d87e:	d10c      	bne.n	801d89a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d884:	3328      	adds	r3, #40	@ 0x28
 801d886:	2102      	movs	r1, #2
 801d888:	4618      	mov	r0, r3
 801d88a:	f001 fcf7 	bl	801f27c <RCCEx_PLL3_Config>
 801d88e:	4603      	mov	r3, r0
 801d890:	2b00      	cmp	r3, #0
 801d892:	d002      	beq.n	801d89a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801d894:	2301      	movs	r3, #1
 801d896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d89a:	4b70      	ldr	r3, [pc, #448]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d89c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d89e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801d8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d8aa:	4a6c      	ldr	r2, [pc, #432]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d8ac:	430b      	orrs	r3, r1
 801d8ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801d8bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801d8c0:	2300      	movs	r3, #0
 801d8c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801d8c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801d8ca:	460b      	mov	r3, r1
 801d8cc:	4313      	orrs	r3, r2
 801d8ce:	d03e      	beq.n	801d94e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801d8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801d8d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d8dc:	d022      	beq.n	801d924 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801d8de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d8e2:	d81b      	bhi.n	801d91c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d003      	beq.n	801d8f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801d8e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d8ec:	d00b      	beq.n	801d906 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801d8ee:	e015      	b.n	801d91c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8f4:	3308      	adds	r3, #8
 801d8f6:	2100      	movs	r1, #0
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	f001 fc0d 	bl	801f118 <RCCEx_PLL2_Config>
 801d8fe:	4603      	mov	r3, r0
 801d900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801d904:	e00f      	b.n	801d926 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d90a:	3328      	adds	r3, #40	@ 0x28
 801d90c:	2102      	movs	r1, #2
 801d90e:	4618      	mov	r0, r3
 801d910:	f001 fcb4 	bl	801f27c <RCCEx_PLL3_Config>
 801d914:	4603      	mov	r3, r0
 801d916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801d91a:	e004      	b.n	801d926 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d91c:	2301      	movs	r3, #1
 801d91e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d922:	e000      	b.n	801d926 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801d924:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	d10b      	bne.n	801d946 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801d92e:	4b4b      	ldr	r3, [pc, #300]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d932:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801d936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d93a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801d93e:	4a47      	ldr	r2, [pc, #284]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d940:	430b      	orrs	r3, r1
 801d942:	6593      	str	r3, [r2, #88]	@ 0x58
 801d944:	e003      	b.n	801d94e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d94a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801d94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d952:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d956:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801d95a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801d95c:	2300      	movs	r3, #0
 801d95e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801d960:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801d964:	460b      	mov	r3, r1
 801d966:	4313      	orrs	r3, r2
 801d968:	d03b      	beq.n	801d9e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801d96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d96e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d972:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d976:	d01f      	beq.n	801d9b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801d978:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d97c:	d818      	bhi.n	801d9b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801d97e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d982:	d003      	beq.n	801d98c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801d984:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d988:	d007      	beq.n	801d99a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801d98a:	e011      	b.n	801d9b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d98c:	4b33      	ldr	r3, [pc, #204]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d990:	4a32      	ldr	r2, [pc, #200]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801d998:	e00f      	b.n	801d9ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d99a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d99e:	3328      	adds	r3, #40	@ 0x28
 801d9a0:	2101      	movs	r1, #1
 801d9a2:	4618      	mov	r0, r3
 801d9a4:	f001 fc6a 	bl	801f27c <RCCEx_PLL3_Config>
 801d9a8:	4603      	mov	r3, r0
 801d9aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801d9ae:	e004      	b.n	801d9ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d9b0:	2301      	movs	r3, #1
 801d9b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d9b6:	e000      	b.n	801d9ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801d9b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d9ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d10b      	bne.n	801d9da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d9c2:	4b26      	ldr	r3, [pc, #152]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d9c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d9c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d9d2:	4a22      	ldr	r2, [pc, #136]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d9d4:	430b      	orrs	r3, r1
 801d9d6:	6553      	str	r3, [r2, #84]	@ 0x54
 801d9d8:	e003      	b.n	801d9e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d9da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801d9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801d9ee:	673b      	str	r3, [r7, #112]	@ 0x70
 801d9f0:	2300      	movs	r3, #0
 801d9f2:	677b      	str	r3, [r7, #116]	@ 0x74
 801d9f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801d9f8:	460b      	mov	r3, r1
 801d9fa:	4313      	orrs	r3, r2
 801d9fc:	d034      	beq.n	801da68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801d9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801da04:	2b00      	cmp	r3, #0
 801da06:	d003      	beq.n	801da10 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801da08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801da0c:	d007      	beq.n	801da1e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801da0e:	e011      	b.n	801da34 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801da10:	4b12      	ldr	r3, [pc, #72]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801da12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da14:	4a11      	ldr	r2, [pc, #68]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801da16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801da1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801da1c:	e00e      	b.n	801da3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801da1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da22:	3308      	adds	r3, #8
 801da24:	2102      	movs	r1, #2
 801da26:	4618      	mov	r0, r3
 801da28:	f001 fb76 	bl	801f118 <RCCEx_PLL2_Config>
 801da2c:	4603      	mov	r3, r0
 801da2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801da32:	e003      	b.n	801da3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801da34:	2301      	movs	r3, #1
 801da36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801da3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801da3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da40:	2b00      	cmp	r3, #0
 801da42:	d10d      	bne.n	801da60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801da44:	4b05      	ldr	r3, [pc, #20]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801da46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801da48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801da4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801da52:	4a02      	ldr	r2, [pc, #8]	@ (801da5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801da54:	430b      	orrs	r3, r1
 801da56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801da58:	e006      	b.n	801da68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801da5a:	bf00      	nop
 801da5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801da68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801da74:	66bb      	str	r3, [r7, #104]	@ 0x68
 801da76:	2300      	movs	r3, #0
 801da78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801da7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801da7e:	460b      	mov	r3, r1
 801da80:	4313      	orrs	r3, r2
 801da82:	d00c      	beq.n	801da9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801da84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da88:	3328      	adds	r3, #40	@ 0x28
 801da8a:	2102      	movs	r1, #2
 801da8c:	4618      	mov	r0, r3
 801da8e:	f001 fbf5 	bl	801f27c <RCCEx_PLL3_Config>
 801da92:	4603      	mov	r3, r0
 801da94:	2b00      	cmp	r3, #0
 801da96:	d002      	beq.n	801da9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801da98:	2301      	movs	r3, #1
 801da9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801da9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daa6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801daaa:	663b      	str	r3, [r7, #96]	@ 0x60
 801daac:	2300      	movs	r3, #0
 801daae:	667b      	str	r3, [r7, #100]	@ 0x64
 801dab0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801dab4:	460b      	mov	r3, r1
 801dab6:	4313      	orrs	r3, r2
 801dab8:	d038      	beq.n	801db2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801daba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dabe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801dac2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801dac6:	d018      	beq.n	801dafa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801dac8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801dacc:	d811      	bhi.n	801daf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801dace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dad2:	d014      	beq.n	801dafe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801dad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dad8:	d80b      	bhi.n	801daf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d011      	beq.n	801db02 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801dade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dae2:	d106      	bne.n	801daf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dae4:	4bc3      	ldr	r3, [pc, #780]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dae8:	4ac2      	ldr	r2, [pc, #776]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801daea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801daee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801daf0:	e008      	b.n	801db04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801daf2:	2301      	movs	r3, #1
 801daf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801daf8:	e004      	b.n	801db04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801dafa:	bf00      	nop
 801dafc:	e002      	b.n	801db04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801dafe:	bf00      	nop
 801db00:	e000      	b.n	801db04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801db02:	bf00      	nop
    }

    if (ret == HAL_OK)
 801db04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db08:	2b00      	cmp	r3, #0
 801db0a:	d10b      	bne.n	801db24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801db0c:	4bb9      	ldr	r3, [pc, #740]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801db0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801db10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801db14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801db1c:	4ab5      	ldr	r2, [pc, #724]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801db1e:	430b      	orrs	r3, r1
 801db20:	6553      	str	r3, [r2, #84]	@ 0x54
 801db22:	e003      	b.n	801db2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801db2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801db38:	65bb      	str	r3, [r7, #88]	@ 0x58
 801db3a:	2300      	movs	r3, #0
 801db3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801db3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801db42:	460b      	mov	r3, r1
 801db44:	4313      	orrs	r3, r2
 801db46:	d009      	beq.n	801db5c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801db48:	4baa      	ldr	r3, [pc, #680]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801db4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801db4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801db50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db56:	4aa7      	ldr	r2, [pc, #668]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801db58:	430b      	orrs	r3, r1
 801db5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801db5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db64:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801db68:	653b      	str	r3, [r7, #80]	@ 0x50
 801db6a:	2300      	movs	r3, #0
 801db6c:	657b      	str	r3, [r7, #84]	@ 0x54
 801db6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801db72:	460b      	mov	r3, r1
 801db74:	4313      	orrs	r3, r2
 801db76:	d00a      	beq.n	801db8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801db78:	4b9e      	ldr	r3, [pc, #632]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801db7a:	691b      	ldr	r3, [r3, #16]
 801db7c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801db80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801db88:	4a9a      	ldr	r2, [pc, #616]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801db8a:	430b      	orrs	r3, r1
 801db8c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801db8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db96:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801db9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801db9c:	2300      	movs	r3, #0
 801db9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801dba0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801dba4:	460b      	mov	r3, r1
 801dba6:	4313      	orrs	r3, r2
 801dba8:	d009      	beq.n	801dbbe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801dbaa:	4b92      	ldr	r3, [pc, #584]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dbac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dbae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801dbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dbb8:	4a8e      	ldr	r2, [pc, #568]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dbba:	430b      	orrs	r3, r1
 801dbbc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801dbbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbc6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801dbca:	643b      	str	r3, [r7, #64]	@ 0x40
 801dbcc:	2300      	movs	r3, #0
 801dbce:	647b      	str	r3, [r7, #68]	@ 0x44
 801dbd0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801dbd4:	460b      	mov	r3, r1
 801dbd6:	4313      	orrs	r3, r2
 801dbd8:	d00e      	beq.n	801dbf8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801dbda:	4b86      	ldr	r3, [pc, #536]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dbdc:	691b      	ldr	r3, [r3, #16]
 801dbde:	4a85      	ldr	r2, [pc, #532]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dbe0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801dbe4:	6113      	str	r3, [r2, #16]
 801dbe6:	4b83      	ldr	r3, [pc, #524]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dbe8:	6919      	ldr	r1, [r3, #16]
 801dbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801dbf2:	4a80      	ldr	r2, [pc, #512]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dbf4:	430b      	orrs	r3, r1
 801dbf6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801dbf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc00:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801dc04:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dc06:	2300      	movs	r3, #0
 801dc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dc0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801dc0e:	460b      	mov	r3, r1
 801dc10:	4313      	orrs	r3, r2
 801dc12:	d009      	beq.n	801dc28 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801dc14:	4b77      	ldr	r3, [pc, #476]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dc16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dc18:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801dc1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dc22:	4a74      	ldr	r2, [pc, #464]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dc24:	430b      	orrs	r3, r1
 801dc26:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801dc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc30:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801dc34:	633b      	str	r3, [r7, #48]	@ 0x30
 801dc36:	2300      	movs	r3, #0
 801dc38:	637b      	str	r3, [r7, #52]	@ 0x34
 801dc3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801dc3e:	460b      	mov	r3, r1
 801dc40:	4313      	orrs	r3, r2
 801dc42:	d00a      	beq.n	801dc5a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801dc44:	4b6b      	ldr	r3, [pc, #428]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dc46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dc48:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801dc4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801dc54:	4a67      	ldr	r2, [pc, #412]	@ (801ddf4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801dc56:	430b      	orrs	r3, r1
 801dc58:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801dc5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc62:	2100      	movs	r1, #0
 801dc64:	62b9      	str	r1, [r7, #40]	@ 0x28
 801dc66:	f003 0301 	and.w	r3, r3, #1
 801dc6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dc6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801dc70:	460b      	mov	r3, r1
 801dc72:	4313      	orrs	r3, r2
 801dc74:	d011      	beq.n	801dc9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dc76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc7a:	3308      	adds	r3, #8
 801dc7c:	2100      	movs	r1, #0
 801dc7e:	4618      	mov	r0, r3
 801dc80:	f001 fa4a 	bl	801f118 <RCCEx_PLL2_Config>
 801dc84:	4603      	mov	r3, r0
 801dc86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801dc8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	d003      	beq.n	801dc9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dc92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801dc9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dca2:	2100      	movs	r1, #0
 801dca4:	6239      	str	r1, [r7, #32]
 801dca6:	f003 0302 	and.w	r3, r3, #2
 801dcaa:	627b      	str	r3, [r7, #36]	@ 0x24
 801dcac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801dcb0:	460b      	mov	r3, r1
 801dcb2:	4313      	orrs	r3, r2
 801dcb4:	d011      	beq.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dcb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcba:	3308      	adds	r3, #8
 801dcbc:	2101      	movs	r1, #1
 801dcbe:	4618      	mov	r0, r3
 801dcc0:	f001 fa2a 	bl	801f118 <RCCEx_PLL2_Config>
 801dcc4:	4603      	mov	r3, r0
 801dcc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801dcca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d003      	beq.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dcd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801dcda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dce2:	2100      	movs	r1, #0
 801dce4:	61b9      	str	r1, [r7, #24]
 801dce6:	f003 0304 	and.w	r3, r3, #4
 801dcea:	61fb      	str	r3, [r7, #28]
 801dcec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801dcf0:	460b      	mov	r3, r1
 801dcf2:	4313      	orrs	r3, r2
 801dcf4:	d011      	beq.n	801dd1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801dcf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcfa:	3308      	adds	r3, #8
 801dcfc:	2102      	movs	r1, #2
 801dcfe:	4618      	mov	r0, r3
 801dd00:	f001 fa0a 	bl	801f118 <RCCEx_PLL2_Config>
 801dd04:	4603      	mov	r3, r0
 801dd06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801dd0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d003      	beq.n	801dd1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dd12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801dd1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd22:	2100      	movs	r1, #0
 801dd24:	6139      	str	r1, [r7, #16]
 801dd26:	f003 0308 	and.w	r3, r3, #8
 801dd2a:	617b      	str	r3, [r7, #20]
 801dd2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801dd30:	460b      	mov	r3, r1
 801dd32:	4313      	orrs	r3, r2
 801dd34:	d011      	beq.n	801dd5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801dd36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd3a:	3328      	adds	r3, #40	@ 0x28
 801dd3c:	2100      	movs	r1, #0
 801dd3e:	4618      	mov	r0, r3
 801dd40:	f001 fa9c 	bl	801f27c <RCCEx_PLL3_Config>
 801dd44:	4603      	mov	r3, r0
 801dd46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801dd4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd4e:	2b00      	cmp	r3, #0
 801dd50:	d003      	beq.n	801dd5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dd52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801dd5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd62:	2100      	movs	r1, #0
 801dd64:	60b9      	str	r1, [r7, #8]
 801dd66:	f003 0310 	and.w	r3, r3, #16
 801dd6a:	60fb      	str	r3, [r7, #12]
 801dd6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801dd70:	460b      	mov	r3, r1
 801dd72:	4313      	orrs	r3, r2
 801dd74:	d011      	beq.n	801dd9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd7a:	3328      	adds	r3, #40	@ 0x28
 801dd7c:	2101      	movs	r1, #1
 801dd7e:	4618      	mov	r0, r3
 801dd80:	f001 fa7c 	bl	801f27c <RCCEx_PLL3_Config>
 801dd84:	4603      	mov	r3, r0
 801dd86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801dd8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d003      	beq.n	801dd9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dd92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801dd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dda2:	2100      	movs	r1, #0
 801dda4:	6039      	str	r1, [r7, #0]
 801dda6:	f003 0320 	and.w	r3, r3, #32
 801ddaa:	607b      	str	r3, [r7, #4]
 801ddac:	e9d7 1200 	ldrd	r1, r2, [r7]
 801ddb0:	460b      	mov	r3, r1
 801ddb2:	4313      	orrs	r3, r2
 801ddb4:	d011      	beq.n	801ddda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ddb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddba:	3328      	adds	r3, #40	@ 0x28
 801ddbc:	2102      	movs	r1, #2
 801ddbe:	4618      	mov	r0, r3
 801ddc0:	f001 fa5c 	bl	801f27c <RCCEx_PLL3_Config>
 801ddc4:	4603      	mov	r3, r0
 801ddc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ddca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d003      	beq.n	801ddda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ddd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801ddda:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d101      	bne.n	801dde6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801dde2:	2300      	movs	r3, #0
 801dde4:	e000      	b.n	801dde8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801dde6:	2301      	movs	r3, #1
}
 801dde8:	4618      	mov	r0, r3
 801ddea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801ddee:	46bd      	mov	sp, r7
 801ddf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ddf4:	58024400 	.word	0x58024400

0801ddf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801ddf8:	b580      	push	{r7, lr}
 801ddfa:	b090      	sub	sp, #64	@ 0x40
 801ddfc:	af00      	add	r7, sp, #0
 801ddfe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801de02:	e9d7 2300 	ldrd	r2, r3, [r7]
 801de06:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801de0a:	430b      	orrs	r3, r1
 801de0c:	f040 8094 	bne.w	801df38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801de10:	4b9e      	ldr	r3, [pc, #632]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801de12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801de14:	f003 0307 	and.w	r3, r3, #7
 801de18:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801de1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801de1c:	2b04      	cmp	r3, #4
 801de1e:	f200 8087 	bhi.w	801df30 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801de22:	a201      	add	r2, pc, #4	@ (adr r2, 801de28 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801de24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801de28:	0801de3d 	.word	0x0801de3d
 801de2c:	0801de65 	.word	0x0801de65
 801de30:	0801de8d 	.word	0x0801de8d
 801de34:	0801df29 	.word	0x0801df29
 801de38:	0801deb5 	.word	0x0801deb5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801de3c:	4b93      	ldr	r3, [pc, #588]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801de44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801de48:	d108      	bne.n	801de5c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801de4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801de4e:	4618      	mov	r0, r3
 801de50:	f001 f810 	bl	801ee74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801de54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801de58:	f000 bd45 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801de5c:	2300      	movs	r3, #0
 801de5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801de60:	f000 bd41 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801de64:	4b89      	ldr	r3, [pc, #548]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801de66:	681b      	ldr	r3, [r3, #0]
 801de68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801de6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801de70:	d108      	bne.n	801de84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801de72:	f107 0318 	add.w	r3, r7, #24
 801de76:	4618      	mov	r0, r3
 801de78:	f000 fd54 	bl	801e924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801de7c:	69bb      	ldr	r3, [r7, #24]
 801de7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801de80:	f000 bd31 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801de84:	2300      	movs	r3, #0
 801de86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801de88:	f000 bd2d 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801de8c:	4b7f      	ldr	r3, [pc, #508]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801de8e:	681b      	ldr	r3, [r3, #0]
 801de90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801de94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801de98:	d108      	bne.n	801deac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801de9a:	f107 030c 	add.w	r3, r7, #12
 801de9e:	4618      	mov	r0, r3
 801dea0:	f000 fe94 	bl	801ebcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dea8:	f000 bd1d 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801deac:	2300      	movs	r3, #0
 801deae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801deb0:	f000 bd19 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801deb4:	4b75      	ldr	r3, [pc, #468]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801deb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801deb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801debc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801debe:	4b73      	ldr	r3, [pc, #460]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	f003 0304 	and.w	r3, r3, #4
 801dec6:	2b04      	cmp	r3, #4
 801dec8:	d10c      	bne.n	801dee4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801deca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801decc:	2b00      	cmp	r3, #0
 801dece:	d109      	bne.n	801dee4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ded0:	4b6e      	ldr	r3, [pc, #440]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801ded2:	681b      	ldr	r3, [r3, #0]
 801ded4:	08db      	lsrs	r3, r3, #3
 801ded6:	f003 0303 	and.w	r3, r3, #3
 801deda:	4a6d      	ldr	r2, [pc, #436]	@ (801e090 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801dedc:	fa22 f303 	lsr.w	r3, r2, r3
 801dee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dee2:	e01f      	b.n	801df24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801dee4:	4b69      	ldr	r3, [pc, #420]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801deec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801def0:	d106      	bne.n	801df00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801def2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801def4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801def8:	d102      	bne.n	801df00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801defa:	4b66      	ldr	r3, [pc, #408]	@ (801e094 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801defc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801defe:	e011      	b.n	801df24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801df00:	4b62      	ldr	r3, [pc, #392]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801df02:	681b      	ldr	r3, [r3, #0]
 801df04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801df08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801df0c:	d106      	bne.n	801df1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801df0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801df10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801df14:	d102      	bne.n	801df1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801df16:	4b60      	ldr	r3, [pc, #384]	@ (801e098 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801df18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801df1a:	e003      	b.n	801df24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801df1c:	2300      	movs	r3, #0
 801df1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801df20:	f000 bce1 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801df24:	f000 bcdf 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801df28:	4b5c      	ldr	r3, [pc, #368]	@ (801e09c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801df2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801df2c:	f000 bcdb 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801df30:	2300      	movs	r3, #0
 801df32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801df34:	f000 bcd7 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801df38:	e9d7 2300 	ldrd	r2, r3, [r7]
 801df3c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 801df40:	430b      	orrs	r3, r1
 801df42:	f040 80ad 	bne.w	801e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801df46:	4b51      	ldr	r3, [pc, #324]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801df48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801df4a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 801df4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801df50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801df56:	d056      	beq.n	801e006 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 801df58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801df5e:	f200 8090 	bhi.w	801e082 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801df62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df64:	2bc0      	cmp	r3, #192	@ 0xc0
 801df66:	f000 8088 	beq.w	801e07a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 801df6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df6c:	2bc0      	cmp	r3, #192	@ 0xc0
 801df6e:	f200 8088 	bhi.w	801e082 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801df72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df74:	2b80      	cmp	r3, #128	@ 0x80
 801df76:	d032      	beq.n	801dfde <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801df78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df7a:	2b80      	cmp	r3, #128	@ 0x80
 801df7c:	f200 8081 	bhi.w	801e082 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801df80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df82:	2b00      	cmp	r3, #0
 801df84:	d003      	beq.n	801df8e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801df86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df88:	2b40      	cmp	r3, #64	@ 0x40
 801df8a:	d014      	beq.n	801dfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 801df8c:	e079      	b.n	801e082 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801df8e:	4b3f      	ldr	r3, [pc, #252]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801df96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801df9a:	d108      	bne.n	801dfae <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801df9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801dfa0:	4618      	mov	r0, r3
 801dfa2:	f000 ff67 	bl	801ee74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801dfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dfa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dfaa:	f000 bc9c 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801dfae:	2300      	movs	r3, #0
 801dfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801dfb2:	f000 bc98 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801dfb6:	4b35      	ldr	r3, [pc, #212]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801dfbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801dfc2:	d108      	bne.n	801dfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801dfc4:	f107 0318 	add.w	r3, r7, #24
 801dfc8:	4618      	mov	r0, r3
 801dfca:	f000 fcab 	bl	801e924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801dfce:	69bb      	ldr	r3, [r7, #24]
 801dfd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dfd2:	f000 bc88 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801dfd6:	2300      	movs	r3, #0
 801dfd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801dfda:	f000 bc84 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801dfde:	4b2b      	ldr	r3, [pc, #172]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801dfe0:	681b      	ldr	r3, [r3, #0]
 801dfe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801dfe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dfea:	d108      	bne.n	801dffe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801dfec:	f107 030c 	add.w	r3, r7, #12
 801dff0:	4618      	mov	r0, r3
 801dff2:	f000 fdeb 	bl	801ebcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801dff6:	68fb      	ldr	r3, [r7, #12]
 801dff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801dffa:	f000 bc74 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801dffe:	2300      	movs	r3, #0
 801e000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e002:	f000 bc70 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e006:	4b21      	ldr	r3, [pc, #132]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e00a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e00e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e010:	4b1e      	ldr	r3, [pc, #120]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	f003 0304 	and.w	r3, r3, #4
 801e018:	2b04      	cmp	r3, #4
 801e01a:	d10c      	bne.n	801e036 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 801e01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d109      	bne.n	801e036 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e022:	4b1a      	ldr	r3, [pc, #104]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e024:	681b      	ldr	r3, [r3, #0]
 801e026:	08db      	lsrs	r3, r3, #3
 801e028:	f003 0303 	and.w	r3, r3, #3
 801e02c:	4a18      	ldr	r2, [pc, #96]	@ (801e090 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801e02e:	fa22 f303 	lsr.w	r3, r2, r3
 801e032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e034:	e01f      	b.n	801e076 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e036:	4b15      	ldr	r3, [pc, #84]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e038:	681b      	ldr	r3, [r3, #0]
 801e03a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e03e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e042:	d106      	bne.n	801e052 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 801e044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e046:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e04a:	d102      	bne.n	801e052 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e04c:	4b11      	ldr	r3, [pc, #68]	@ (801e094 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801e04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e050:	e011      	b.n	801e076 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e052:	4b0e      	ldr	r3, [pc, #56]	@ (801e08c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e05a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e05e:	d106      	bne.n	801e06e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 801e060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e062:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e066:	d102      	bne.n	801e06e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e068:	4b0b      	ldr	r3, [pc, #44]	@ (801e098 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801e06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e06c:	e003      	b.n	801e076 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e06e:	2300      	movs	r3, #0
 801e070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e072:	f000 bc38 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e076:	f000 bc36 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e07a:	4b08      	ldr	r3, [pc, #32]	@ (801e09c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801e07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e07e:	f000 bc32 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801e082:	2300      	movs	r3, #0
 801e084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e086:	f000 bc2e 	b.w	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e08a:	bf00      	nop
 801e08c:	58024400 	.word	0x58024400
 801e090:	03d09000 	.word	0x03d09000
 801e094:	003d0900 	.word	0x003d0900
 801e098:	017d7840 	.word	0x017d7840
 801e09c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801e0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e0a4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 801e0a8:	430b      	orrs	r3, r1
 801e0aa:	f040 809c 	bne.w	801e1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801e0ae:	4b9e      	ldr	r3, [pc, #632]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e0b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e0b2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801e0b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801e0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e0be:	d054      	beq.n	801e16a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 801e0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e0c6:	f200 808b 	bhi.w	801e1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801e0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e0d0:	f000 8083 	beq.w	801e1da <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 801e0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e0da:	f200 8081 	bhi.w	801e1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801e0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e0e4:	d02f      	beq.n	801e146 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 801e0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e0ec:	d878      	bhi.n	801e1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801e0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d004      	beq.n	801e0fe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 801e0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e0fa:	d012      	beq.n	801e122 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 801e0fc:	e070      	b.n	801e1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e0fe:	4b8a      	ldr	r3, [pc, #552]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e10a:	d107      	bne.n	801e11c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e10c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e110:	4618      	mov	r0, r3
 801e112:	f000 feaf 	bl	801ee74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e11a:	e3e4      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e11c:	2300      	movs	r3, #0
 801e11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e120:	e3e1      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e122:	4b81      	ldr	r3, [pc, #516]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e12a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e12e:	d107      	bne.n	801e140 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e130:	f107 0318 	add.w	r3, r7, #24
 801e134:	4618      	mov	r0, r3
 801e136:	f000 fbf5 	bl	801e924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e13a:	69bb      	ldr	r3, [r7, #24]
 801e13c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e13e:	e3d2      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e140:	2300      	movs	r3, #0
 801e142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e144:	e3cf      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e146:	4b78      	ldr	r3, [pc, #480]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e148:	681b      	ldr	r3, [r3, #0]
 801e14a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e14e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e152:	d107      	bne.n	801e164 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e154:	f107 030c 	add.w	r3, r7, #12
 801e158:	4618      	mov	r0, r3
 801e15a:	f000 fd37 	bl	801ebcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801e15e:	68fb      	ldr	r3, [r7, #12]
 801e160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e162:	e3c0      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e164:	2300      	movs	r3, #0
 801e166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e168:	e3bd      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e16a:	4b6f      	ldr	r3, [pc, #444]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e16c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e16e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e172:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e174:	4b6c      	ldr	r3, [pc, #432]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e176:	681b      	ldr	r3, [r3, #0]
 801e178:	f003 0304 	and.w	r3, r3, #4
 801e17c:	2b04      	cmp	r3, #4
 801e17e:	d10c      	bne.n	801e19a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 801e180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e182:	2b00      	cmp	r3, #0
 801e184:	d109      	bne.n	801e19a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e186:	4b68      	ldr	r3, [pc, #416]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	08db      	lsrs	r3, r3, #3
 801e18c:	f003 0303 	and.w	r3, r3, #3
 801e190:	4a66      	ldr	r2, [pc, #408]	@ (801e32c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801e192:	fa22 f303 	lsr.w	r3, r2, r3
 801e196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e198:	e01e      	b.n	801e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e19a:	4b63      	ldr	r3, [pc, #396]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e1a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e1a6:	d106      	bne.n	801e1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 801e1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e1ae:	d102      	bne.n	801e1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e1b0:	4b5f      	ldr	r3, [pc, #380]	@ (801e330 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801e1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e1b4:	e010      	b.n	801e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e1b6:	4b5c      	ldr	r3, [pc, #368]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e1b8:	681b      	ldr	r3, [r3, #0]
 801e1ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e1be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e1c2:	d106      	bne.n	801e1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 801e1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e1ca:	d102      	bne.n	801e1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e1cc:	4b59      	ldr	r3, [pc, #356]	@ (801e334 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801e1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e1d0:	e002      	b.n	801e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e1d2:	2300      	movs	r3, #0
 801e1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e1d6:	e386      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e1d8:	e385      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e1da:	4b57      	ldr	r3, [pc, #348]	@ (801e338 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801e1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e1de:	e382      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801e1e0:	2300      	movs	r3, #0
 801e1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e1e4:	e37f      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801e1e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e1ea:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801e1ee:	430b      	orrs	r3, r1
 801e1f0:	f040 80a7 	bne.w	801e342 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801e1f4:	4b4c      	ldr	r3, [pc, #304]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e1f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e1f8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801e1fc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801e1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e204:	d055      	beq.n	801e2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 801e206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e20c:	f200 8096 	bhi.w	801e33c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801e210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e212:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e216:	f000 8084 	beq.w	801e322 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801e21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e21c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e220:	f200 808c 	bhi.w	801e33c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801e224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e22a:	d030      	beq.n	801e28e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 801e22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e22e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e232:	f200 8083 	bhi.w	801e33c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801e236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e238:	2b00      	cmp	r3, #0
 801e23a:	d004      	beq.n	801e246 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801e23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e23e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e242:	d012      	beq.n	801e26a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 801e244:	e07a      	b.n	801e33c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e246:	4b38      	ldr	r3, [pc, #224]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e24e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e252:	d107      	bne.n	801e264 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e258:	4618      	mov	r0, r3
 801e25a:	f000 fe0b 	bl	801ee74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e262:	e340      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e264:	2300      	movs	r3, #0
 801e266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e268:	e33d      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e26a:	4b2f      	ldr	r3, [pc, #188]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e276:	d107      	bne.n	801e288 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e278:	f107 0318 	add.w	r3, r7, #24
 801e27c:	4618      	mov	r0, r3
 801e27e:	f000 fb51 	bl	801e924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e282:	69bb      	ldr	r3, [r7, #24]
 801e284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e286:	e32e      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e288:	2300      	movs	r3, #0
 801e28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e28c:	e32b      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e28e:	4b26      	ldr	r3, [pc, #152]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e290:	681b      	ldr	r3, [r3, #0]
 801e292:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e29a:	d107      	bne.n	801e2ac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e29c:	f107 030c 	add.w	r3, r7, #12
 801e2a0:	4618      	mov	r0, r3
 801e2a2:	f000 fc93 	bl	801ebcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801e2a6:	68fb      	ldr	r3, [r7, #12]
 801e2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e2aa:	e31c      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e2ac:	2300      	movs	r3, #0
 801e2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e2b0:	e319      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e2b2:	4b1d      	ldr	r3, [pc, #116]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e2b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e2b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e2ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e2bc:	4b1a      	ldr	r3, [pc, #104]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	f003 0304 	and.w	r3, r3, #4
 801e2c4:	2b04      	cmp	r3, #4
 801e2c6:	d10c      	bne.n	801e2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 801e2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d109      	bne.n	801e2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e2ce:	4b16      	ldr	r3, [pc, #88]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e2d0:	681b      	ldr	r3, [r3, #0]
 801e2d2:	08db      	lsrs	r3, r3, #3
 801e2d4:	f003 0303 	and.w	r3, r3, #3
 801e2d8:	4a14      	ldr	r2, [pc, #80]	@ (801e32c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801e2da:	fa22 f303 	lsr.w	r3, r2, r3
 801e2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e2e0:	e01e      	b.n	801e320 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e2e2:	4b11      	ldr	r3, [pc, #68]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e2ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e2ee:	d106      	bne.n	801e2fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801e2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e2f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e2f6:	d102      	bne.n	801e2fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e2f8:	4b0d      	ldr	r3, [pc, #52]	@ (801e330 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801e2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e2fc:	e010      	b.n	801e320 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e2fe:	4b0a      	ldr	r3, [pc, #40]	@ (801e328 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e30a:	d106      	bne.n	801e31a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 801e30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e30e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e312:	d102      	bne.n	801e31a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e314:	4b07      	ldr	r3, [pc, #28]	@ (801e334 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801e316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e318:	e002      	b.n	801e320 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e31a:	2300      	movs	r3, #0
 801e31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e31e:	e2e2      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e320:	e2e1      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e322:	4b05      	ldr	r3, [pc, #20]	@ (801e338 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801e324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e326:	e2de      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e328:	58024400 	.word	0x58024400
 801e32c:	03d09000 	.word	0x03d09000
 801e330:	003d0900 	.word	0x003d0900
 801e334:	017d7840 	.word	0x017d7840
 801e338:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 801e33c:	2300      	movs	r3, #0
 801e33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e340:	e2d1      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801e342:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e346:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801e34a:	430b      	orrs	r3, r1
 801e34c:	f040 809c 	bne.w	801e488 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801e350:	4b93      	ldr	r3, [pc, #588]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e354:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801e358:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801e35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e35c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e360:	d054      	beq.n	801e40c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 801e362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e368:	f200 808b 	bhi.w	801e482 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801e36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e36e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e372:	f000 8083 	beq.w	801e47c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 801e376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e378:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e37c:	f200 8081 	bhi.w	801e482 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801e380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e386:	d02f      	beq.n	801e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 801e388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e38a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e38e:	d878      	bhi.n	801e482 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801e390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e392:	2b00      	cmp	r3, #0
 801e394:	d004      	beq.n	801e3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801e396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e39c:	d012      	beq.n	801e3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 801e39e:	e070      	b.n	801e482 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e3a0:	4b7f      	ldr	r3, [pc, #508]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e3a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e3ac:	d107      	bne.n	801e3be <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e3ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e3b2:	4618      	mov	r0, r3
 801e3b4:	f000 fd5e 	bl	801ee74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e3bc:	e293      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e3be:	2300      	movs	r3, #0
 801e3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e3c2:	e290      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e3c4:	4b76      	ldr	r3, [pc, #472]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e3c6:	681b      	ldr	r3, [r3, #0]
 801e3c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e3cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e3d0:	d107      	bne.n	801e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e3d2:	f107 0318 	add.w	r3, r7, #24
 801e3d6:	4618      	mov	r0, r3
 801e3d8:	f000 faa4 	bl	801e924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e3dc:	69bb      	ldr	r3, [r7, #24]
 801e3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e3e0:	e281      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e3e2:	2300      	movs	r3, #0
 801e3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e3e6:	e27e      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e3e8:	4b6d      	ldr	r3, [pc, #436]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e3ea:	681b      	ldr	r3, [r3, #0]
 801e3ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e3f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e3f4:	d107      	bne.n	801e406 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e3f6:	f107 030c 	add.w	r3, r7, #12
 801e3fa:	4618      	mov	r0, r3
 801e3fc:	f000 fbe6 	bl	801ebcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801e400:	68fb      	ldr	r3, [r7, #12]
 801e402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e404:	e26f      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e406:	2300      	movs	r3, #0
 801e408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e40a:	e26c      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e40c:	4b64      	ldr	r3, [pc, #400]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e40e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e410:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e414:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e416:	4b62      	ldr	r3, [pc, #392]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e418:	681b      	ldr	r3, [r3, #0]
 801e41a:	f003 0304 	and.w	r3, r3, #4
 801e41e:	2b04      	cmp	r3, #4
 801e420:	d10c      	bne.n	801e43c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 801e422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e424:	2b00      	cmp	r3, #0
 801e426:	d109      	bne.n	801e43c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e428:	4b5d      	ldr	r3, [pc, #372]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e42a:	681b      	ldr	r3, [r3, #0]
 801e42c:	08db      	lsrs	r3, r3, #3
 801e42e:	f003 0303 	and.w	r3, r3, #3
 801e432:	4a5c      	ldr	r2, [pc, #368]	@ (801e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801e434:	fa22 f303 	lsr.w	r3, r2, r3
 801e438:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e43a:	e01e      	b.n	801e47a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e43c:	4b58      	ldr	r3, [pc, #352]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e448:	d106      	bne.n	801e458 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801e44a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e44c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e450:	d102      	bne.n	801e458 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e452:	4b55      	ldr	r3, [pc, #340]	@ (801e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801e454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e456:	e010      	b.n	801e47a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e458:	4b51      	ldr	r3, [pc, #324]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e45a:	681b      	ldr	r3, [r3, #0]
 801e45c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e464:	d106      	bne.n	801e474 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801e466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e46c:	d102      	bne.n	801e474 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e46e:	4b4f      	ldr	r3, [pc, #316]	@ (801e5ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801e470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e472:	e002      	b.n	801e47a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e474:	2300      	movs	r3, #0
 801e476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e478:	e235      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e47a:	e234      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801e47c:	4b4c      	ldr	r3, [pc, #304]	@ (801e5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801e47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e480:	e231      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801e482:	2300      	movs	r3, #0
 801e484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e486:	e22e      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801e488:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e48c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801e490:	430b      	orrs	r3, r1
 801e492:	f040 808f 	bne.w	801e5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801e496:	4b42      	ldr	r3, [pc, #264]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e49a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801e49e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801e4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e4a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e4a6:	d06b      	beq.n	801e580 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 801e4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e4aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e4ae:	d874      	bhi.n	801e59a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801e4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e4b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e4b6:	d056      	beq.n	801e566 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 801e4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e4ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e4be:	d86c      	bhi.n	801e59a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801e4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e4c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e4c6:	d03b      	beq.n	801e540 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 801e4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e4ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e4ce:	d864      	bhi.n	801e59a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801e4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e4d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e4d6:	d021      	beq.n	801e51c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801e4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e4da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e4de:	d85c      	bhi.n	801e59a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801e4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d004      	beq.n	801e4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801e4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e4ec:	d004      	beq.n	801e4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801e4ee:	e054      	b.n	801e59a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801e4f0:	f7fe fa20 	bl	801c934 <HAL_RCC_GetPCLK1Freq>
 801e4f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801e4f6:	e1f6      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e4f8:	4b29      	ldr	r3, [pc, #164]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e4fa:	681b      	ldr	r3, [r3, #0]
 801e4fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e500:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e504:	d107      	bne.n	801e516 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e506:	f107 0318 	add.w	r3, r7, #24
 801e50a:	4618      	mov	r0, r3
 801e50c:	f000 fa0a 	bl	801e924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801e510:	69fb      	ldr	r3, [r7, #28]
 801e512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e514:	e1e7      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e516:	2300      	movs	r3, #0
 801e518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e51a:	e1e4      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e51c:	4b20      	ldr	r3, [pc, #128]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e51e:	681b      	ldr	r3, [r3, #0]
 801e520:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e528:	d107      	bne.n	801e53a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e52a:	f107 030c 	add.w	r3, r7, #12
 801e52e:	4618      	mov	r0, r3
 801e530:	f000 fb4c 	bl	801ebcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801e534:	693b      	ldr	r3, [r7, #16]
 801e536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e538:	e1d5      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e53a:	2300      	movs	r3, #0
 801e53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e53e:	e1d2      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801e540:	4b17      	ldr	r3, [pc, #92]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	f003 0304 	and.w	r3, r3, #4
 801e548:	2b04      	cmp	r3, #4
 801e54a:	d109      	bne.n	801e560 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e54c:	4b14      	ldr	r3, [pc, #80]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	08db      	lsrs	r3, r3, #3
 801e552:	f003 0303 	and.w	r3, r3, #3
 801e556:	4a13      	ldr	r2, [pc, #76]	@ (801e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801e558:	fa22 f303 	lsr.w	r3, r2, r3
 801e55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e55e:	e1c2      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e560:	2300      	movs	r3, #0
 801e562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e564:	e1bf      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801e566:	4b0e      	ldr	r3, [pc, #56]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e56e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e572:	d102      	bne.n	801e57a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 801e574:	4b0c      	ldr	r3, [pc, #48]	@ (801e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801e576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e578:	e1b5      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e57a:	2300      	movs	r3, #0
 801e57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e57e:	e1b2      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801e580:	4b07      	ldr	r3, [pc, #28]	@ (801e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801e582:	681b      	ldr	r3, [r3, #0]
 801e584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e58c:	d102      	bne.n	801e594 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801e58e:	4b07      	ldr	r3, [pc, #28]	@ (801e5ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801e590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e592:	e1a8      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e594:	2300      	movs	r3, #0
 801e596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e598:	e1a5      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801e59a:	2300      	movs	r3, #0
 801e59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e59e:	e1a2      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e5a0:	58024400 	.word	0x58024400
 801e5a4:	03d09000 	.word	0x03d09000
 801e5a8:	003d0900 	.word	0x003d0900
 801e5ac:	017d7840 	.word	0x017d7840
 801e5b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801e5b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e5b8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801e5bc:	430b      	orrs	r3, r1
 801e5be:	d173      	bne.n	801e6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801e5c0:	4b9c      	ldr	r3, [pc, #624]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e5c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e5c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801e5c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801e5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e5d0:	d02f      	beq.n	801e632 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801e5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e5d8:	d863      	bhi.n	801e6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801e5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	d004      	beq.n	801e5ea <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 801e5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e5e6:	d012      	beq.n	801e60e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 801e5e8:	e05b      	b.n	801e6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e5ea:	4b92      	ldr	r3, [pc, #584]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e5ec:	681b      	ldr	r3, [r3, #0]
 801e5ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e5f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e5f6:	d107      	bne.n	801e608 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e5f8:	f107 0318 	add.w	r3, r7, #24
 801e5fc:	4618      	mov	r0, r3
 801e5fe:	f000 f991 	bl	801e924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801e602:	69bb      	ldr	r3, [r7, #24]
 801e604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e606:	e16e      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e608:	2300      	movs	r3, #0
 801e60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e60c:	e16b      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e60e:	4b89      	ldr	r3, [pc, #548]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e610:	681b      	ldr	r3, [r3, #0]
 801e612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e61a:	d107      	bne.n	801e62c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e61c:	f107 030c 	add.w	r3, r7, #12
 801e620:	4618      	mov	r0, r3
 801e622:	f000 fad3 	bl	801ebcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801e626:	697b      	ldr	r3, [r7, #20]
 801e628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e62a:	e15c      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e62c:	2300      	movs	r3, #0
 801e62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e630:	e159      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801e632:	4b80      	ldr	r3, [pc, #512]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e636:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e63a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801e63c:	4b7d      	ldr	r3, [pc, #500]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e63e:	681b      	ldr	r3, [r3, #0]
 801e640:	f003 0304 	and.w	r3, r3, #4
 801e644:	2b04      	cmp	r3, #4
 801e646:	d10c      	bne.n	801e662 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801e648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e64a:	2b00      	cmp	r3, #0
 801e64c:	d109      	bne.n	801e662 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e64e:	4b79      	ldr	r3, [pc, #484]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e650:	681b      	ldr	r3, [r3, #0]
 801e652:	08db      	lsrs	r3, r3, #3
 801e654:	f003 0303 	and.w	r3, r3, #3
 801e658:	4a77      	ldr	r2, [pc, #476]	@ (801e838 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801e65a:	fa22 f303 	lsr.w	r3, r2, r3
 801e65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e660:	e01e      	b.n	801e6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801e662:	4b74      	ldr	r3, [pc, #464]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e664:	681b      	ldr	r3, [r3, #0]
 801e666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e66a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e66e:	d106      	bne.n	801e67e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 801e670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e672:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e676:	d102      	bne.n	801e67e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801e678:	4b70      	ldr	r3, [pc, #448]	@ (801e83c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801e67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e67c:	e010      	b.n	801e6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801e67e:	4b6d      	ldr	r3, [pc, #436]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e680:	681b      	ldr	r3, [r3, #0]
 801e682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e68a:	d106      	bne.n	801e69a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 801e68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e68e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e692:	d102      	bne.n	801e69a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801e694:	4b6a      	ldr	r3, [pc, #424]	@ (801e840 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801e696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e698:	e002      	b.n	801e6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801e69a:	2300      	movs	r3, #0
 801e69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801e69e:	e122      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e6a0:	e121      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801e6a2:	2300      	movs	r3, #0
 801e6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e6a6:	e11e      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801e6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e6ac:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801e6b0:	430b      	orrs	r3, r1
 801e6b2:	d133      	bne.n	801e71c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801e6b4:	4b5f      	ldr	r3, [pc, #380]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e6b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e6b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e6bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801e6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	d004      	beq.n	801e6ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801e6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e6c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e6ca:	d012      	beq.n	801e6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801e6cc:	e023      	b.n	801e716 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e6ce:	4b59      	ldr	r3, [pc, #356]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e6d0:	681b      	ldr	r3, [r3, #0]
 801e6d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e6d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e6da:	d107      	bne.n	801e6ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e6dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e6e0:	4618      	mov	r0, r3
 801e6e2:	f000 fbc7 	bl	801ee74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e6ea:	e0fc      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e6ec:	2300      	movs	r3, #0
 801e6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e6f0:	e0f9      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e6f2:	4b50      	ldr	r3, [pc, #320]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e6f4:	681b      	ldr	r3, [r3, #0]
 801e6f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e6fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e6fe:	d107      	bne.n	801e710 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e700:	f107 0318 	add.w	r3, r7, #24
 801e704:	4618      	mov	r0, r3
 801e706:	f000 f90d 	bl	801e924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801e70a:	6a3b      	ldr	r3, [r7, #32]
 801e70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e70e:	e0ea      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e710:	2300      	movs	r3, #0
 801e712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e714:	e0e7      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801e716:	2300      	movs	r3, #0
 801e718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e71a:	e0e4      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801e71c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e720:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801e724:	430b      	orrs	r3, r1
 801e726:	f040 808d 	bne.w	801e844 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801e72a:	4b42      	ldr	r3, [pc, #264]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e72c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e72e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801e732:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801e734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e73a:	d06b      	beq.n	801e814 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801e73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e73e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e742:	d874      	bhi.n	801e82e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801e744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e74a:	d056      	beq.n	801e7fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 801e74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e74e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e752:	d86c      	bhi.n	801e82e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801e754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e756:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e75a:	d03b      	beq.n	801e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 801e75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e75e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e762:	d864      	bhi.n	801e82e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801e764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e76a:	d021      	beq.n	801e7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 801e76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e76e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e772:	d85c      	bhi.n	801e82e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801e774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e776:	2b00      	cmp	r3, #0
 801e778:	d004      	beq.n	801e784 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801e77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e77c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e780:	d004      	beq.n	801e78c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801e782:	e054      	b.n	801e82e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801e784:	f000 f8b8 	bl	801e8f8 <HAL_RCCEx_GetD3PCLK1Freq>
 801e788:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801e78a:	e0ac      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e78c:	4b29      	ldr	r3, [pc, #164]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e798:	d107      	bne.n	801e7aa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e79a:	f107 0318 	add.w	r3, r7, #24
 801e79e:	4618      	mov	r0, r3
 801e7a0:	f000 f8c0 	bl	801e924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801e7a4:	69fb      	ldr	r3, [r7, #28]
 801e7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e7a8:	e09d      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e7aa:	2300      	movs	r3, #0
 801e7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e7ae:	e09a      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801e7b0:	4b20      	ldr	r3, [pc, #128]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e7b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e7bc:	d107      	bne.n	801e7ce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801e7be:	f107 030c 	add.w	r3, r7, #12
 801e7c2:	4618      	mov	r0, r3
 801e7c4:	f000 fa02 	bl	801ebcc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801e7c8:	693b      	ldr	r3, [r7, #16]
 801e7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e7cc:	e08b      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e7ce:	2300      	movs	r3, #0
 801e7d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e7d2:	e088      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801e7d4:	4b17      	ldr	r3, [pc, #92]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e7d6:	681b      	ldr	r3, [r3, #0]
 801e7d8:	f003 0304 	and.w	r3, r3, #4
 801e7dc:	2b04      	cmp	r3, #4
 801e7de:	d109      	bne.n	801e7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e7e0:	4b14      	ldr	r3, [pc, #80]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e7e2:	681b      	ldr	r3, [r3, #0]
 801e7e4:	08db      	lsrs	r3, r3, #3
 801e7e6:	f003 0303 	and.w	r3, r3, #3
 801e7ea:	4a13      	ldr	r2, [pc, #76]	@ (801e838 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801e7ec:	fa22 f303 	lsr.w	r3, r2, r3
 801e7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e7f2:	e078      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e7f4:	2300      	movs	r3, #0
 801e7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e7f8:	e075      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801e7fa:	4b0e      	ldr	r3, [pc, #56]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e7fc:	681b      	ldr	r3, [r3, #0]
 801e7fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e806:	d102      	bne.n	801e80e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 801e808:	4b0c      	ldr	r3, [pc, #48]	@ (801e83c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801e80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e80c:	e06b      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e80e:	2300      	movs	r3, #0
 801e810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e812:	e068      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801e814:	4b07      	ldr	r3, [pc, #28]	@ (801e834 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801e816:	681b      	ldr	r3, [r3, #0]
 801e818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e81c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e820:	d102      	bne.n	801e828 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801e822:	4b07      	ldr	r3, [pc, #28]	@ (801e840 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801e824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e826:	e05e      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e828:	2300      	movs	r3, #0
 801e82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e82c:	e05b      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801e82e:	2300      	movs	r3, #0
 801e830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e832:	e058      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801e834:	58024400 	.word	0x58024400
 801e838:	03d09000 	.word	0x03d09000
 801e83c:	003d0900 	.word	0x003d0900
 801e840:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801e844:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e848:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 801e84c:	430b      	orrs	r3, r1
 801e84e:	d148      	bne.n	801e8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801e850:	4b27      	ldr	r3, [pc, #156]	@ (801e8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801e852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e854:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801e858:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801e85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e85c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e860:	d02a      	beq.n	801e8b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801e862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e868:	d838      	bhi.n	801e8dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801e86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	d004      	beq.n	801e87a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 801e870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e876:	d00d      	beq.n	801e894 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 801e878:	e030      	b.n	801e8dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801e87a:	4b1d      	ldr	r3, [pc, #116]	@ (801e8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e886:	d102      	bne.n	801e88e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 801e888:	4b1a      	ldr	r3, [pc, #104]	@ (801e8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 801e88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e88c:	e02b      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e88e:	2300      	movs	r3, #0
 801e890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e892:	e028      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801e894:	4b16      	ldr	r3, [pc, #88]	@ (801e8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801e896:	681b      	ldr	r3, [r3, #0]
 801e898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801e89c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e8a0:	d107      	bne.n	801e8b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801e8a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801e8a6:	4618      	mov	r0, r3
 801e8a8:	f000 fae4 	bl	801ee74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801e8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e8b0:	e019      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e8b2:	2300      	movs	r3, #0
 801e8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e8b6:	e016      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801e8b8:	4b0d      	ldr	r3, [pc, #52]	@ (801e8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801e8ba:	681b      	ldr	r3, [r3, #0]
 801e8bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e8c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801e8c4:	d107      	bne.n	801e8d6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801e8c6:	f107 0318 	add.w	r3, r7, #24
 801e8ca:	4618      	mov	r0, r3
 801e8cc:	f000 f82a 	bl	801e924 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801e8d0:	69fb      	ldr	r3, [r7, #28]
 801e8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801e8d4:	e007      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801e8d6:	2300      	movs	r3, #0
 801e8d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e8da:	e004      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801e8dc:	2300      	movs	r3, #0
 801e8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801e8e0:	e001      	b.n	801e8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801e8e2:	2300      	movs	r3, #0
 801e8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801e8e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801e8e8:	4618      	mov	r0, r3
 801e8ea:	3740      	adds	r7, #64	@ 0x40
 801e8ec:	46bd      	mov	sp, r7
 801e8ee:	bd80      	pop	{r7, pc}
 801e8f0:	58024400 	.word	0x58024400
 801e8f4:	017d7840 	.word	0x017d7840

0801e8f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801e8f8:	b580      	push	{r7, lr}
 801e8fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801e8fc:	f7fd ffea 	bl	801c8d4 <HAL_RCC_GetHCLKFreq>
 801e900:	4602      	mov	r2, r0
 801e902:	4b06      	ldr	r3, [pc, #24]	@ (801e91c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801e904:	6a1b      	ldr	r3, [r3, #32]
 801e906:	091b      	lsrs	r3, r3, #4
 801e908:	f003 0307 	and.w	r3, r3, #7
 801e90c:	4904      	ldr	r1, [pc, #16]	@ (801e920 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801e90e:	5ccb      	ldrb	r3, [r1, r3]
 801e910:	f003 031f 	and.w	r3, r3, #31
 801e914:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801e918:	4618      	mov	r0, r3
 801e91a:	bd80      	pop	{r7, pc}
 801e91c:	58024400 	.word	0x58024400
 801e920:	08026344 	.word	0x08026344

0801e924 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801e924:	b480      	push	{r7}
 801e926:	b089      	sub	sp, #36	@ 0x24
 801e928:	af00      	add	r7, sp, #0
 801e92a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e92c:	4ba1      	ldr	r3, [pc, #644]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e92e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e930:	f003 0303 	and.w	r3, r3, #3
 801e934:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801e936:	4b9f      	ldr	r3, [pc, #636]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e93a:	0b1b      	lsrs	r3, r3, #12
 801e93c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e940:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801e942:	4b9c      	ldr	r3, [pc, #624]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e946:	091b      	lsrs	r3, r3, #4
 801e948:	f003 0301 	and.w	r3, r3, #1
 801e94c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801e94e:	4b99      	ldr	r3, [pc, #612]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e952:	08db      	lsrs	r3, r3, #3
 801e954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e958:	693a      	ldr	r2, [r7, #16]
 801e95a:	fb02 f303 	mul.w	r3, r2, r3
 801e95e:	ee07 3a90 	vmov	s15, r3
 801e962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e966:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801e96a:	697b      	ldr	r3, [r7, #20]
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	f000 8111 	beq.w	801eb94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801e972:	69bb      	ldr	r3, [r7, #24]
 801e974:	2b02      	cmp	r3, #2
 801e976:	f000 8083 	beq.w	801ea80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801e97a:	69bb      	ldr	r3, [r7, #24]
 801e97c:	2b02      	cmp	r3, #2
 801e97e:	f200 80a1 	bhi.w	801eac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801e982:	69bb      	ldr	r3, [r7, #24]
 801e984:	2b00      	cmp	r3, #0
 801e986:	d003      	beq.n	801e990 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801e988:	69bb      	ldr	r3, [r7, #24]
 801e98a:	2b01      	cmp	r3, #1
 801e98c:	d056      	beq.n	801ea3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801e98e:	e099      	b.n	801eac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e990:	4b88      	ldr	r3, [pc, #544]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e992:	681b      	ldr	r3, [r3, #0]
 801e994:	f003 0320 	and.w	r3, r3, #32
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d02d      	beq.n	801e9f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e99c:	4b85      	ldr	r3, [pc, #532]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	08db      	lsrs	r3, r3, #3
 801e9a2:	f003 0303 	and.w	r3, r3, #3
 801e9a6:	4a84      	ldr	r2, [pc, #528]	@ (801ebb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801e9a8:	fa22 f303 	lsr.w	r3, r2, r3
 801e9ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e9ae:	68bb      	ldr	r3, [r7, #8]
 801e9b0:	ee07 3a90 	vmov	s15, r3
 801e9b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e9b8:	697b      	ldr	r3, [r7, #20]
 801e9ba:	ee07 3a90 	vmov	s15, r3
 801e9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e9c6:	4b7b      	ldr	r3, [pc, #492]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e9c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e9ce:	ee07 3a90 	vmov	s15, r3
 801e9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 801e9da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801ebbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e9e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e9f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e9f6:	e087      	b.n	801eb08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e9f8:	697b      	ldr	r3, [r7, #20]
 801e9fa:	ee07 3a90 	vmov	s15, r3
 801e9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801ebc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801ea06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ea0a:	4b6a      	ldr	r3, [pc, #424]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ea12:	ee07 3a90 	vmov	s15, r3
 801ea16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ea1a:	ed97 6a03 	vldr	s12, [r7, #12]
 801ea1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801ebbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ea22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ea26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ea2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ea2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ea32:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ea36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ea3a:	e065      	b.n	801eb08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ea3c:	697b      	ldr	r3, [r7, #20]
 801ea3e:	ee07 3a90 	vmov	s15, r3
 801ea42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801ebc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801ea4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ea4e:	4b59      	ldr	r3, [pc, #356]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ea56:	ee07 3a90 	vmov	s15, r3
 801ea5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ea5e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ea62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801ebbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ea66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ea6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ea6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ea72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ea76:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ea7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ea7e:	e043      	b.n	801eb08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ea80:	697b      	ldr	r3, [r7, #20]
 801ea82:	ee07 3a90 	vmov	s15, r3
 801ea86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801ebc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801ea8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ea92:	4b48      	ldr	r3, [pc, #288]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ea94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ea9a:	ee07 3a90 	vmov	s15, r3
 801ea9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eaa2:	ed97 6a03 	vldr	s12, [r7, #12]
 801eaa6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801ebbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801eaaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eaae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eaba:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eabe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801eac2:	e021      	b.n	801eb08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801eac4:	697b      	ldr	r3, [r7, #20]
 801eac6:	ee07 3a90 	vmov	s15, r3
 801eaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eace:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ebc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801ead2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ead6:	4b37      	ldr	r3, [pc, #220]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ead8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eade:	ee07 3a90 	vmov	s15, r3
 801eae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eae6:	ed97 6a03 	vldr	s12, [r7, #12]
 801eaea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801ebbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801eaee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eaf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eaf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eb02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801eb06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801eb08:	4b2a      	ldr	r3, [pc, #168]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb0c:	0a5b      	lsrs	r3, r3, #9
 801eb0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801eb12:	ee07 3a90 	vmov	s15, r3
 801eb16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eb1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eb22:	edd7 6a07 	vldr	s13, [r7, #28]
 801eb26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eb2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eb2e:	ee17 2a90 	vmov	r2, s15
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801eb36:	4b1f      	ldr	r3, [pc, #124]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb3a:	0c1b      	lsrs	r3, r3, #16
 801eb3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801eb40:	ee07 3a90 	vmov	s15, r3
 801eb44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eb4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eb50:	edd7 6a07 	vldr	s13, [r7, #28]
 801eb54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eb58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eb5c:	ee17 2a90 	vmov	r2, s15
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801eb64:	4b13      	ldr	r3, [pc, #76]	@ (801ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb68:	0e1b      	lsrs	r3, r3, #24
 801eb6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801eb6e:	ee07 3a90 	vmov	s15, r3
 801eb72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eb7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eb7e:	edd7 6a07 	vldr	s13, [r7, #28]
 801eb82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eb86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eb8a:	ee17 2a90 	vmov	r2, s15
 801eb8e:	687b      	ldr	r3, [r7, #4]
 801eb90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801eb92:	e008      	b.n	801eba6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	2200      	movs	r2, #0
 801eb98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801eb9a:	687b      	ldr	r3, [r7, #4]
 801eb9c:	2200      	movs	r2, #0
 801eb9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	2200      	movs	r2, #0
 801eba4:	609a      	str	r2, [r3, #8]
}
 801eba6:	bf00      	nop
 801eba8:	3724      	adds	r7, #36	@ 0x24
 801ebaa:	46bd      	mov	sp, r7
 801ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebb0:	4770      	bx	lr
 801ebb2:	bf00      	nop
 801ebb4:	58024400 	.word	0x58024400
 801ebb8:	03d09000 	.word	0x03d09000
 801ebbc:	46000000 	.word	0x46000000
 801ebc0:	4c742400 	.word	0x4c742400
 801ebc4:	4a742400 	.word	0x4a742400
 801ebc8:	4bbebc20 	.word	0x4bbebc20

0801ebcc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801ebcc:	b480      	push	{r7}
 801ebce:	b089      	sub	sp, #36	@ 0x24
 801ebd0:	af00      	add	r7, sp, #0
 801ebd2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ebd4:	4ba1      	ldr	r3, [pc, #644]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ebd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebd8:	f003 0303 	and.w	r3, r3, #3
 801ebdc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801ebde:	4b9f      	ldr	r3, [pc, #636]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ebe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebe2:	0d1b      	lsrs	r3, r3, #20
 801ebe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ebe8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801ebea:	4b9c      	ldr	r3, [pc, #624]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ebec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ebee:	0a1b      	lsrs	r3, r3, #8
 801ebf0:	f003 0301 	and.w	r3, r3, #1
 801ebf4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801ebf6:	4b99      	ldr	r3, [pc, #612]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ebf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ebfa:	08db      	lsrs	r3, r3, #3
 801ebfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ec00:	693a      	ldr	r2, [r7, #16]
 801ec02:	fb02 f303 	mul.w	r3, r2, r3
 801ec06:	ee07 3a90 	vmov	s15, r3
 801ec0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801ec12:	697b      	ldr	r3, [r7, #20]
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	f000 8111 	beq.w	801ee3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801ec1a:	69bb      	ldr	r3, [r7, #24]
 801ec1c:	2b02      	cmp	r3, #2
 801ec1e:	f000 8083 	beq.w	801ed28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801ec22:	69bb      	ldr	r3, [r7, #24]
 801ec24:	2b02      	cmp	r3, #2
 801ec26:	f200 80a1 	bhi.w	801ed6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801ec2a:	69bb      	ldr	r3, [r7, #24]
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d003      	beq.n	801ec38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801ec30:	69bb      	ldr	r3, [r7, #24]
 801ec32:	2b01      	cmp	r3, #1
 801ec34:	d056      	beq.n	801ece4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801ec36:	e099      	b.n	801ed6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ec38:	4b88      	ldr	r3, [pc, #544]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec3a:	681b      	ldr	r3, [r3, #0]
 801ec3c:	f003 0320 	and.w	r3, r3, #32
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	d02d      	beq.n	801eca0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ec44:	4b85      	ldr	r3, [pc, #532]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec46:	681b      	ldr	r3, [r3, #0]
 801ec48:	08db      	lsrs	r3, r3, #3
 801ec4a:	f003 0303 	and.w	r3, r3, #3
 801ec4e:	4a84      	ldr	r2, [pc, #528]	@ (801ee60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801ec50:	fa22 f303 	lsr.w	r3, r2, r3
 801ec54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ec56:	68bb      	ldr	r3, [r7, #8]
 801ec58:	ee07 3a90 	vmov	s15, r3
 801ec5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ec60:	697b      	ldr	r3, [r7, #20]
 801ec62:	ee07 3a90 	vmov	s15, r3
 801ec66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ec6e:	4b7b      	ldr	r3, [pc, #492]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ec70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ec72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ec76:	ee07 3a90 	vmov	s15, r3
 801ec7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ec7e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ec82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801ee64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ec86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ec8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ec8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec96:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ec9e:	e087      	b.n	801edb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801eca0:	697b      	ldr	r3, [r7, #20]
 801eca2:	ee07 3a90 	vmov	s15, r3
 801eca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecaa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801ee68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801ecae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ecb2:	4b6a      	ldr	r3, [pc, #424]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ecb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ecb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ecba:	ee07 3a90 	vmov	s15, r3
 801ecbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ecc2:	ed97 6a03 	vldr	s12, [r7, #12]
 801ecc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801ee64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ecca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ecce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ecd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ecd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ecda:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ecde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ece2:	e065      	b.n	801edb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ece4:	697b      	ldr	r3, [r7, #20]
 801ece6:	ee07 3a90 	vmov	s15, r3
 801ecea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801ee6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ecf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ecf6:	4b59      	ldr	r3, [pc, #356]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ecf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ecfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ecfe:	ee07 3a90 	vmov	s15, r3
 801ed02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ed06:	ed97 6a03 	vldr	s12, [r7, #12]
 801ed0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801ee64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ed0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ed12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ed16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ed1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ed1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ed26:	e043      	b.n	801edb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ed28:	697b      	ldr	r3, [r7, #20]
 801ed2a:	ee07 3a90 	vmov	s15, r3
 801ed2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801ee70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801ed36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ed3a:	4b48      	ldr	r3, [pc, #288]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ed3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ed3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ed42:	ee07 3a90 	vmov	s15, r3
 801ed46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ed4a:	ed97 6a03 	vldr	s12, [r7, #12]
 801ed4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801ee64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ed52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ed56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ed5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ed5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ed62:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ed6a:	e021      	b.n	801edb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ed6c:	697b      	ldr	r3, [r7, #20]
 801ed6e:	ee07 3a90 	vmov	s15, r3
 801ed72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ee6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ed7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ed7e:	4b37      	ldr	r3, [pc, #220]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ed80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ed82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ed86:	ee07 3a90 	vmov	s15, r3
 801ed8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ed8e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ed92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801ee64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ed96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ed9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ed9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801edaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801edae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801edb0:	4b2a      	ldr	r3, [pc, #168]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801edb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801edb4:	0a5b      	lsrs	r3, r3, #9
 801edb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801edba:	ee07 3a90 	vmov	s15, r3
 801edbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801edc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801edc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801edca:	edd7 6a07 	vldr	s13, [r7, #28]
 801edce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801edd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801edd6:	ee17 2a90 	vmov	r2, s15
 801edda:	687b      	ldr	r3, [r7, #4]
 801eddc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801edde:	4b1f      	ldr	r3, [pc, #124]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ede0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ede2:	0c1b      	lsrs	r3, r3, #16
 801ede4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ede8:	ee07 3a90 	vmov	s15, r3
 801edec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801edf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801edf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801edf8:	edd7 6a07 	vldr	s13, [r7, #28]
 801edfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ee00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ee04:	ee17 2a90 	vmov	r2, s15
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801ee0c:	4b13      	ldr	r3, [pc, #76]	@ (801ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ee0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee10:	0e1b      	lsrs	r3, r3, #24
 801ee12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ee16:	ee07 3a90 	vmov	s15, r3
 801ee1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ee22:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ee26:	edd7 6a07 	vldr	s13, [r7, #28]
 801ee2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ee2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ee32:	ee17 2a90 	vmov	r2, s15
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801ee3a:	e008      	b.n	801ee4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	2200      	movs	r2, #0
 801ee40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	2200      	movs	r2, #0
 801ee46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	2200      	movs	r2, #0
 801ee4c:	609a      	str	r2, [r3, #8]
}
 801ee4e:	bf00      	nop
 801ee50:	3724      	adds	r7, #36	@ 0x24
 801ee52:	46bd      	mov	sp, r7
 801ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee58:	4770      	bx	lr
 801ee5a:	bf00      	nop
 801ee5c:	58024400 	.word	0x58024400
 801ee60:	03d09000 	.word	0x03d09000
 801ee64:	46000000 	.word	0x46000000
 801ee68:	4c742400 	.word	0x4c742400
 801ee6c:	4a742400 	.word	0x4a742400
 801ee70:	4bbebc20 	.word	0x4bbebc20

0801ee74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801ee74:	b480      	push	{r7}
 801ee76:	b089      	sub	sp, #36	@ 0x24
 801ee78:	af00      	add	r7, sp, #0
 801ee7a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ee7c:	4ba0      	ldr	r3, [pc, #640]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ee7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee80:	f003 0303 	and.w	r3, r3, #3
 801ee84:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801ee86:	4b9e      	ldr	r3, [pc, #632]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ee88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee8a:	091b      	lsrs	r3, r3, #4
 801ee8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ee90:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801ee92:	4b9b      	ldr	r3, [pc, #620]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ee94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee96:	f003 0301 	and.w	r3, r3, #1
 801ee9a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801ee9c:	4b98      	ldr	r3, [pc, #608]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ee9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801eea0:	08db      	lsrs	r3, r3, #3
 801eea2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eea6:	693a      	ldr	r2, [r7, #16]
 801eea8:	fb02 f303 	mul.w	r3, r2, r3
 801eeac:	ee07 3a90 	vmov	s15, r3
 801eeb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eeb4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801eeb8:	697b      	ldr	r3, [r7, #20]
 801eeba:	2b00      	cmp	r3, #0
 801eebc:	f000 8111 	beq.w	801f0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801eec0:	69bb      	ldr	r3, [r7, #24]
 801eec2:	2b02      	cmp	r3, #2
 801eec4:	f000 8083 	beq.w	801efce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801eec8:	69bb      	ldr	r3, [r7, #24]
 801eeca:	2b02      	cmp	r3, #2
 801eecc:	f200 80a1 	bhi.w	801f012 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801eed0:	69bb      	ldr	r3, [r7, #24]
 801eed2:	2b00      	cmp	r3, #0
 801eed4:	d003      	beq.n	801eede <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801eed6:	69bb      	ldr	r3, [r7, #24]
 801eed8:	2b01      	cmp	r3, #1
 801eeda:	d056      	beq.n	801ef8a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801eedc:	e099      	b.n	801f012 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801eede:	4b88      	ldr	r3, [pc, #544]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801eee0:	681b      	ldr	r3, [r3, #0]
 801eee2:	f003 0320 	and.w	r3, r3, #32
 801eee6:	2b00      	cmp	r3, #0
 801eee8:	d02d      	beq.n	801ef46 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801eeea:	4b85      	ldr	r3, [pc, #532]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	08db      	lsrs	r3, r3, #3
 801eef0:	f003 0303 	and.w	r3, r3, #3
 801eef4:	4a83      	ldr	r2, [pc, #524]	@ (801f104 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801eef6:	fa22 f303 	lsr.w	r3, r2, r3
 801eefa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801eefc:	68bb      	ldr	r3, [r7, #8]
 801eefe:	ee07 3a90 	vmov	s15, r3
 801ef02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ef06:	697b      	ldr	r3, [r7, #20]
 801ef08:	ee07 3a90 	vmov	s15, r3
 801ef0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ef14:	4b7a      	ldr	r3, [pc, #488]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ef16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ef18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ef1c:	ee07 3a90 	vmov	s15, r3
 801ef20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ef24:	ed97 6a03 	vldr	s12, [r7, #12]
 801ef28:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801f108 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801ef2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ef30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ef34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ef38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ef3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef40:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ef44:	e087      	b.n	801f056 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ef46:	697b      	ldr	r3, [r7, #20]
 801ef48:	ee07 3a90 	vmov	s15, r3
 801ef4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef50:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 801f10c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801ef54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ef58:	4b69      	ldr	r3, [pc, #420]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ef5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ef5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ef60:	ee07 3a90 	vmov	s15, r3
 801ef64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ef68:	ed97 6a03 	vldr	s12, [r7, #12]
 801ef6c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801f108 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801ef70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ef74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ef78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ef7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ef80:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ef88:	e065      	b.n	801f056 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ef8a:	697b      	ldr	r3, [r7, #20]
 801ef8c:	ee07 3a90 	vmov	s15, r3
 801ef90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef94:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801f110 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801ef98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ef9c:	4b58      	ldr	r3, [pc, #352]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801ef9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801efa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801efa4:	ee07 3a90 	vmov	s15, r3
 801efa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801efac:	ed97 6a03 	vldr	s12, [r7, #12]
 801efb0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801f108 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801efb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801efb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801efbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801efc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801efc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801efc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801efcc:	e043      	b.n	801f056 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801efce:	697b      	ldr	r3, [r7, #20]
 801efd0:	ee07 3a90 	vmov	s15, r3
 801efd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801efd8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 801f114 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801efdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801efe0:	4b47      	ldr	r3, [pc, #284]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801efe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801efe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801efe8:	ee07 3a90 	vmov	s15, r3
 801efec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eff0:	ed97 6a03 	vldr	s12, [r7, #12]
 801eff4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801f108 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801eff8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801effc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f000:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f008:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f00c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f010:	e021      	b.n	801f056 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f012:	697b      	ldr	r3, [r7, #20]
 801f014:	ee07 3a90 	vmov	s15, r3
 801f018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f01c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801f10c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801f020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f024:	4b36      	ldr	r3, [pc, #216]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f02c:	ee07 3a90 	vmov	s15, r3
 801f030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f034:	ed97 6a03 	vldr	s12, [r7, #12]
 801f038:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801f108 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801f03c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f044:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f04c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f050:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f054:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801f056:	4b2a      	ldr	r3, [pc, #168]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f05a:	0a5b      	lsrs	r3, r3, #9
 801f05c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f060:	ee07 3a90 	vmov	s15, r3
 801f064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f068:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f06c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f070:	edd7 6a07 	vldr	s13, [r7, #28]
 801f074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f07c:	ee17 2a90 	vmov	r2, s15
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801f084:	4b1e      	ldr	r3, [pc, #120]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f088:	0c1b      	lsrs	r3, r3, #16
 801f08a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f08e:	ee07 3a90 	vmov	s15, r3
 801f092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f096:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f09a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f09e:	edd7 6a07 	vldr	s13, [r7, #28]
 801f0a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f0a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f0aa:	ee17 2a90 	vmov	r2, s15
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801f0b2:	4b13      	ldr	r3, [pc, #76]	@ (801f100 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801f0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f0b6:	0e1b      	lsrs	r3, r3, #24
 801f0b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f0bc:	ee07 3a90 	vmov	s15, r3
 801f0c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f0c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f0c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f0cc:	edd7 6a07 	vldr	s13, [r7, #28]
 801f0d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f0d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f0d8:	ee17 2a90 	vmov	r2, s15
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801f0e0:	e008      	b.n	801f0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	2200      	movs	r2, #0
 801f0e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	2200      	movs	r2, #0
 801f0ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	2200      	movs	r2, #0
 801f0f2:	609a      	str	r2, [r3, #8]
}
 801f0f4:	bf00      	nop
 801f0f6:	3724      	adds	r7, #36	@ 0x24
 801f0f8:	46bd      	mov	sp, r7
 801f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0fe:	4770      	bx	lr
 801f100:	58024400 	.word	0x58024400
 801f104:	03d09000 	.word	0x03d09000
 801f108:	46000000 	.word	0x46000000
 801f10c:	4c742400 	.word	0x4c742400
 801f110:	4a742400 	.word	0x4a742400
 801f114:	4bbebc20 	.word	0x4bbebc20

0801f118 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801f118:	b580      	push	{r7, lr}
 801f11a:	b084      	sub	sp, #16
 801f11c:	af00      	add	r7, sp, #0
 801f11e:	6078      	str	r0, [r7, #4]
 801f120:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f122:	2300      	movs	r3, #0
 801f124:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f126:	4b53      	ldr	r3, [pc, #332]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f12a:	f003 0303 	and.w	r3, r3, #3
 801f12e:	2b03      	cmp	r3, #3
 801f130:	d101      	bne.n	801f136 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801f132:	2301      	movs	r3, #1
 801f134:	e099      	b.n	801f26a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801f136:	4b4f      	ldr	r3, [pc, #316]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	4a4e      	ldr	r2, [pc, #312]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f13c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801f140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f142:	f7fa f8e7 	bl	8019314 <HAL_GetTick>
 801f146:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f148:	e008      	b.n	801f15c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f14a:	f7fa f8e3 	bl	8019314 <HAL_GetTick>
 801f14e:	4602      	mov	r2, r0
 801f150:	68bb      	ldr	r3, [r7, #8]
 801f152:	1ad3      	subs	r3, r2, r3
 801f154:	2b02      	cmp	r3, #2
 801f156:	d901      	bls.n	801f15c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f158:	2303      	movs	r3, #3
 801f15a:	e086      	b.n	801f26a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f15c:	4b45      	ldr	r3, [pc, #276]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f164:	2b00      	cmp	r3, #0
 801f166:	d1f0      	bne.n	801f14a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801f168:	4b42      	ldr	r3, [pc, #264]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f16c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	681b      	ldr	r3, [r3, #0]
 801f174:	031b      	lsls	r3, r3, #12
 801f176:	493f      	ldr	r1, [pc, #252]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f178:	4313      	orrs	r3, r2
 801f17a:	628b      	str	r3, [r1, #40]	@ 0x28
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	685b      	ldr	r3, [r3, #4]
 801f180:	3b01      	subs	r3, #1
 801f182:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	689b      	ldr	r3, [r3, #8]
 801f18a:	3b01      	subs	r3, #1
 801f18c:	025b      	lsls	r3, r3, #9
 801f18e:	b29b      	uxth	r3, r3
 801f190:	431a      	orrs	r2, r3
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	68db      	ldr	r3, [r3, #12]
 801f196:	3b01      	subs	r3, #1
 801f198:	041b      	lsls	r3, r3, #16
 801f19a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f19e:	431a      	orrs	r2, r3
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	691b      	ldr	r3, [r3, #16]
 801f1a4:	3b01      	subs	r3, #1
 801f1a6:	061b      	lsls	r3, r3, #24
 801f1a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f1ac:	4931      	ldr	r1, [pc, #196]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f1ae:	4313      	orrs	r3, r2
 801f1b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801f1b2:	4b30      	ldr	r3, [pc, #192]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f1b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	695b      	ldr	r3, [r3, #20]
 801f1be:	492d      	ldr	r1, [pc, #180]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f1c0:	4313      	orrs	r3, r2
 801f1c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801f1c4:	4b2b      	ldr	r3, [pc, #172]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1c8:	f023 0220 	bic.w	r2, r3, #32
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	699b      	ldr	r3, [r3, #24]
 801f1d0:	4928      	ldr	r1, [pc, #160]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f1d2:	4313      	orrs	r3, r2
 801f1d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801f1d6:	4b27      	ldr	r3, [pc, #156]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1da:	4a26      	ldr	r2, [pc, #152]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f1dc:	f023 0310 	bic.w	r3, r3, #16
 801f1e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801f1e2:	4b24      	ldr	r3, [pc, #144]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f1e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f1e6:	4b24      	ldr	r3, [pc, #144]	@ (801f278 <RCCEx_PLL2_Config+0x160>)
 801f1e8:	4013      	ands	r3, r2
 801f1ea:	687a      	ldr	r2, [r7, #4]
 801f1ec:	69d2      	ldr	r2, [r2, #28]
 801f1ee:	00d2      	lsls	r2, r2, #3
 801f1f0:	4920      	ldr	r1, [pc, #128]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f1f2:	4313      	orrs	r3, r2
 801f1f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801f1f6:	4b1f      	ldr	r3, [pc, #124]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1fa:	4a1e      	ldr	r2, [pc, #120]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f1fc:	f043 0310 	orr.w	r3, r3, #16
 801f200:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f202:	683b      	ldr	r3, [r7, #0]
 801f204:	2b00      	cmp	r3, #0
 801f206:	d106      	bne.n	801f216 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801f208:	4b1a      	ldr	r3, [pc, #104]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f20c:	4a19      	ldr	r2, [pc, #100]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f20e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f212:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f214:	e00f      	b.n	801f236 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f216:	683b      	ldr	r3, [r7, #0]
 801f218:	2b01      	cmp	r3, #1
 801f21a:	d106      	bne.n	801f22a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801f21c:	4b15      	ldr	r3, [pc, #84]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f220:	4a14      	ldr	r2, [pc, #80]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f226:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f228:	e005      	b.n	801f236 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801f22a:	4b12      	ldr	r3, [pc, #72]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f22e:	4a11      	ldr	r2, [pc, #68]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f230:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801f234:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801f236:	4b0f      	ldr	r3, [pc, #60]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	4a0e      	ldr	r2, [pc, #56]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f23c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801f240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f242:	f7fa f867 	bl	8019314 <HAL_GetTick>
 801f246:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f248:	e008      	b.n	801f25c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f24a:	f7fa f863 	bl	8019314 <HAL_GetTick>
 801f24e:	4602      	mov	r2, r0
 801f250:	68bb      	ldr	r3, [r7, #8]
 801f252:	1ad3      	subs	r3, r2, r3
 801f254:	2b02      	cmp	r3, #2
 801f256:	d901      	bls.n	801f25c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f258:	2303      	movs	r3, #3
 801f25a:	e006      	b.n	801f26a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f25c:	4b05      	ldr	r3, [pc, #20]	@ (801f274 <RCCEx_PLL2_Config+0x15c>)
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f264:	2b00      	cmp	r3, #0
 801f266:	d0f0      	beq.n	801f24a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801f268:	7bfb      	ldrb	r3, [r7, #15]
}
 801f26a:	4618      	mov	r0, r3
 801f26c:	3710      	adds	r7, #16
 801f26e:	46bd      	mov	sp, r7
 801f270:	bd80      	pop	{r7, pc}
 801f272:	bf00      	nop
 801f274:	58024400 	.word	0x58024400
 801f278:	ffff0007 	.word	0xffff0007

0801f27c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801f27c:	b580      	push	{r7, lr}
 801f27e:	b084      	sub	sp, #16
 801f280:	af00      	add	r7, sp, #0
 801f282:	6078      	str	r0, [r7, #4]
 801f284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f286:	2300      	movs	r3, #0
 801f288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f28a:	4b53      	ldr	r3, [pc, #332]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f28e:	f003 0303 	and.w	r3, r3, #3
 801f292:	2b03      	cmp	r3, #3
 801f294:	d101      	bne.n	801f29a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801f296:	2301      	movs	r3, #1
 801f298:	e099      	b.n	801f3ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801f29a:	4b4f      	ldr	r3, [pc, #316]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f29c:	681b      	ldr	r3, [r3, #0]
 801f29e:	4a4e      	ldr	r2, [pc, #312]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f2a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801f2a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f2a6:	f7fa f835 	bl	8019314 <HAL_GetTick>
 801f2aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f2ac:	e008      	b.n	801f2c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f2ae:	f7fa f831 	bl	8019314 <HAL_GetTick>
 801f2b2:	4602      	mov	r2, r0
 801f2b4:	68bb      	ldr	r3, [r7, #8]
 801f2b6:	1ad3      	subs	r3, r2, r3
 801f2b8:	2b02      	cmp	r3, #2
 801f2ba:	d901      	bls.n	801f2c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f2bc:	2303      	movs	r3, #3
 801f2be:	e086      	b.n	801f3ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f2c0:	4b45      	ldr	r3, [pc, #276]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f2c2:	681b      	ldr	r3, [r3, #0]
 801f2c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	d1f0      	bne.n	801f2ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801f2cc:	4b42      	ldr	r3, [pc, #264]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f2d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	681b      	ldr	r3, [r3, #0]
 801f2d8:	051b      	lsls	r3, r3, #20
 801f2da:	493f      	ldr	r1, [pc, #252]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f2dc:	4313      	orrs	r3, r2
 801f2de:	628b      	str	r3, [r1, #40]	@ 0x28
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	685b      	ldr	r3, [r3, #4]
 801f2e4:	3b01      	subs	r3, #1
 801f2e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	689b      	ldr	r3, [r3, #8]
 801f2ee:	3b01      	subs	r3, #1
 801f2f0:	025b      	lsls	r3, r3, #9
 801f2f2:	b29b      	uxth	r3, r3
 801f2f4:	431a      	orrs	r2, r3
 801f2f6:	687b      	ldr	r3, [r7, #4]
 801f2f8:	68db      	ldr	r3, [r3, #12]
 801f2fa:	3b01      	subs	r3, #1
 801f2fc:	041b      	lsls	r3, r3, #16
 801f2fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f302:	431a      	orrs	r2, r3
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	691b      	ldr	r3, [r3, #16]
 801f308:	3b01      	subs	r3, #1
 801f30a:	061b      	lsls	r3, r3, #24
 801f30c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f310:	4931      	ldr	r1, [pc, #196]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f312:	4313      	orrs	r3, r2
 801f314:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801f316:	4b30      	ldr	r3, [pc, #192]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f31a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801f31e:	687b      	ldr	r3, [r7, #4]
 801f320:	695b      	ldr	r3, [r3, #20]
 801f322:	492d      	ldr	r1, [pc, #180]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f324:	4313      	orrs	r3, r2
 801f326:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801f328:	4b2b      	ldr	r3, [pc, #172]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f32c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	699b      	ldr	r3, [r3, #24]
 801f334:	4928      	ldr	r1, [pc, #160]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f336:	4313      	orrs	r3, r2
 801f338:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801f33a:	4b27      	ldr	r3, [pc, #156]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f33e:	4a26      	ldr	r2, [pc, #152]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801f344:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801f346:	4b24      	ldr	r3, [pc, #144]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801f34a:	4b24      	ldr	r3, [pc, #144]	@ (801f3dc <RCCEx_PLL3_Config+0x160>)
 801f34c:	4013      	ands	r3, r2
 801f34e:	687a      	ldr	r2, [r7, #4]
 801f350:	69d2      	ldr	r2, [r2, #28]
 801f352:	00d2      	lsls	r2, r2, #3
 801f354:	4920      	ldr	r1, [pc, #128]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f356:	4313      	orrs	r3, r2
 801f358:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801f35a:	4b1f      	ldr	r3, [pc, #124]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f35e:	4a1e      	ldr	r2, [pc, #120]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f364:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f366:	683b      	ldr	r3, [r7, #0]
 801f368:	2b00      	cmp	r3, #0
 801f36a:	d106      	bne.n	801f37a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801f36c:	4b1a      	ldr	r3, [pc, #104]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f370:	4a19      	ldr	r2, [pc, #100]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f372:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801f376:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f378:	e00f      	b.n	801f39a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f37a:	683b      	ldr	r3, [r7, #0]
 801f37c:	2b01      	cmp	r3, #1
 801f37e:	d106      	bne.n	801f38e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801f380:	4b15      	ldr	r3, [pc, #84]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f384:	4a14      	ldr	r2, [pc, #80]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f386:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801f38a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f38c:	e005      	b.n	801f39a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801f38e:	4b12      	ldr	r3, [pc, #72]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f392:	4a11      	ldr	r2, [pc, #68]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f394:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f398:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801f39a:	4b0f      	ldr	r3, [pc, #60]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f39c:	681b      	ldr	r3, [r3, #0]
 801f39e:	4a0e      	ldr	r2, [pc, #56]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f3a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801f3a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f3a6:	f7f9 ffb5 	bl	8019314 <HAL_GetTick>
 801f3aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f3ac:	e008      	b.n	801f3c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f3ae:	f7f9 ffb1 	bl	8019314 <HAL_GetTick>
 801f3b2:	4602      	mov	r2, r0
 801f3b4:	68bb      	ldr	r3, [r7, #8]
 801f3b6:	1ad3      	subs	r3, r2, r3
 801f3b8:	2b02      	cmp	r3, #2
 801f3ba:	d901      	bls.n	801f3c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f3bc:	2303      	movs	r3, #3
 801f3be:	e006      	b.n	801f3ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f3c0:	4b05      	ldr	r3, [pc, #20]	@ (801f3d8 <RCCEx_PLL3_Config+0x15c>)
 801f3c2:	681b      	ldr	r3, [r3, #0]
 801f3c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d0f0      	beq.n	801f3ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801f3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801f3ce:	4618      	mov	r0, r3
 801f3d0:	3710      	adds	r7, #16
 801f3d2:	46bd      	mov	sp, r7
 801f3d4:	bd80      	pop	{r7, pc}
 801f3d6:	bf00      	nop
 801f3d8:	58024400 	.word	0x58024400
 801f3dc:	ffff0007 	.word	0xffff0007

0801f3e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f3e0:	b580      	push	{r7, lr}
 801f3e2:	b082      	sub	sp, #8
 801f3e4:	af00      	add	r7, sp, #0
 801f3e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	d101      	bne.n	801f3f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f3ee:	2301      	movs	r3, #1
 801f3f0:	e049      	b.n	801f486 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f3f8:	b2db      	uxtb	r3, r3
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	d106      	bne.n	801f40c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	2200      	movs	r2, #0
 801f402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f406:	6878      	ldr	r0, [r7, #4]
 801f408:	f000 f841 	bl	801f48e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f40c:	687b      	ldr	r3, [r7, #4]
 801f40e:	2202      	movs	r2, #2
 801f410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	681a      	ldr	r2, [r3, #0]
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	3304      	adds	r3, #4
 801f41c:	4619      	mov	r1, r3
 801f41e:	4610      	mov	r0, r2
 801f420:	f000 f9e8 	bl	801f7f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	2201      	movs	r2, #1
 801f428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	2201      	movs	r2, #1
 801f430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801f434:	687b      	ldr	r3, [r7, #4]
 801f436:	2201      	movs	r2, #1
 801f438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	2201      	movs	r2, #1
 801f440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	2201      	movs	r2, #1
 801f448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801f44c:	687b      	ldr	r3, [r7, #4]
 801f44e:	2201      	movs	r2, #1
 801f450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801f454:	687b      	ldr	r3, [r7, #4]
 801f456:	2201      	movs	r2, #1
 801f458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	2201      	movs	r2, #1
 801f460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	2201      	movs	r2, #1
 801f468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	2201      	movs	r2, #1
 801f470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801f474:	687b      	ldr	r3, [r7, #4]
 801f476:	2201      	movs	r2, #1
 801f478:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	2201      	movs	r2, #1
 801f480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801f484:	2300      	movs	r3, #0
}
 801f486:	4618      	mov	r0, r3
 801f488:	3708      	adds	r7, #8
 801f48a:	46bd      	mov	sp, r7
 801f48c:	bd80      	pop	{r7, pc}

0801f48e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801f48e:	b480      	push	{r7}
 801f490:	b083      	sub	sp, #12
 801f492:	af00      	add	r7, sp, #0
 801f494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801f496:	bf00      	nop
 801f498:	370c      	adds	r7, #12
 801f49a:	46bd      	mov	sp, r7
 801f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4a0:	4770      	bx	lr
	...

0801f4a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801f4a4:	b480      	push	{r7}
 801f4a6:	b085      	sub	sp, #20
 801f4a8:	af00      	add	r7, sp, #0
 801f4aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f4b2:	b2db      	uxtb	r3, r3
 801f4b4:	2b01      	cmp	r3, #1
 801f4b6:	d001      	beq.n	801f4bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801f4b8:	2301      	movs	r3, #1
 801f4ba:	e054      	b.n	801f566 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	2202      	movs	r2, #2
 801f4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801f4c4:	687b      	ldr	r3, [r7, #4]
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	68da      	ldr	r2, [r3, #12]
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	681b      	ldr	r3, [r3, #0]
 801f4ce:	f042 0201 	orr.w	r2, r2, #1
 801f4d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	681b      	ldr	r3, [r3, #0]
 801f4d8:	4a26      	ldr	r2, [pc, #152]	@ (801f574 <HAL_TIM_Base_Start_IT+0xd0>)
 801f4da:	4293      	cmp	r3, r2
 801f4dc:	d022      	beq.n	801f524 <HAL_TIM_Base_Start_IT+0x80>
 801f4de:	687b      	ldr	r3, [r7, #4]
 801f4e0:	681b      	ldr	r3, [r3, #0]
 801f4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f4e6:	d01d      	beq.n	801f524 <HAL_TIM_Base_Start_IT+0x80>
 801f4e8:	687b      	ldr	r3, [r7, #4]
 801f4ea:	681b      	ldr	r3, [r3, #0]
 801f4ec:	4a22      	ldr	r2, [pc, #136]	@ (801f578 <HAL_TIM_Base_Start_IT+0xd4>)
 801f4ee:	4293      	cmp	r3, r2
 801f4f0:	d018      	beq.n	801f524 <HAL_TIM_Base_Start_IT+0x80>
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	681b      	ldr	r3, [r3, #0]
 801f4f6:	4a21      	ldr	r2, [pc, #132]	@ (801f57c <HAL_TIM_Base_Start_IT+0xd8>)
 801f4f8:	4293      	cmp	r3, r2
 801f4fa:	d013      	beq.n	801f524 <HAL_TIM_Base_Start_IT+0x80>
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	681b      	ldr	r3, [r3, #0]
 801f500:	4a1f      	ldr	r2, [pc, #124]	@ (801f580 <HAL_TIM_Base_Start_IT+0xdc>)
 801f502:	4293      	cmp	r3, r2
 801f504:	d00e      	beq.n	801f524 <HAL_TIM_Base_Start_IT+0x80>
 801f506:	687b      	ldr	r3, [r7, #4]
 801f508:	681b      	ldr	r3, [r3, #0]
 801f50a:	4a1e      	ldr	r2, [pc, #120]	@ (801f584 <HAL_TIM_Base_Start_IT+0xe0>)
 801f50c:	4293      	cmp	r3, r2
 801f50e:	d009      	beq.n	801f524 <HAL_TIM_Base_Start_IT+0x80>
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	4a1c      	ldr	r2, [pc, #112]	@ (801f588 <HAL_TIM_Base_Start_IT+0xe4>)
 801f516:	4293      	cmp	r3, r2
 801f518:	d004      	beq.n	801f524 <HAL_TIM_Base_Start_IT+0x80>
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	681b      	ldr	r3, [r3, #0]
 801f51e:	4a1b      	ldr	r2, [pc, #108]	@ (801f58c <HAL_TIM_Base_Start_IT+0xe8>)
 801f520:	4293      	cmp	r3, r2
 801f522:	d115      	bne.n	801f550 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f524:	687b      	ldr	r3, [r7, #4]
 801f526:	681b      	ldr	r3, [r3, #0]
 801f528:	689a      	ldr	r2, [r3, #8]
 801f52a:	4b19      	ldr	r3, [pc, #100]	@ (801f590 <HAL_TIM_Base_Start_IT+0xec>)
 801f52c:	4013      	ands	r3, r2
 801f52e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f530:	68fb      	ldr	r3, [r7, #12]
 801f532:	2b06      	cmp	r3, #6
 801f534:	d015      	beq.n	801f562 <HAL_TIM_Base_Start_IT+0xbe>
 801f536:	68fb      	ldr	r3, [r7, #12]
 801f538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f53c:	d011      	beq.n	801f562 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	681b      	ldr	r3, [r3, #0]
 801f542:	681a      	ldr	r2, [r3, #0]
 801f544:	687b      	ldr	r3, [r7, #4]
 801f546:	681b      	ldr	r3, [r3, #0]
 801f548:	f042 0201 	orr.w	r2, r2, #1
 801f54c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f54e:	e008      	b.n	801f562 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	681a      	ldr	r2, [r3, #0]
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	f042 0201 	orr.w	r2, r2, #1
 801f55e:	601a      	str	r2, [r3, #0]
 801f560:	e000      	b.n	801f564 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f562:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f564:	2300      	movs	r3, #0
}
 801f566:	4618      	mov	r0, r3
 801f568:	3714      	adds	r7, #20
 801f56a:	46bd      	mov	sp, r7
 801f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f570:	4770      	bx	lr
 801f572:	bf00      	nop
 801f574:	40010000 	.word	0x40010000
 801f578:	40000400 	.word	0x40000400
 801f57c:	40000800 	.word	0x40000800
 801f580:	40000c00 	.word	0x40000c00
 801f584:	40010400 	.word	0x40010400
 801f588:	40001800 	.word	0x40001800
 801f58c:	40014000 	.word	0x40014000
 801f590:	00010007 	.word	0x00010007

0801f594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801f594:	b580      	push	{r7, lr}
 801f596:	b084      	sub	sp, #16
 801f598:	af00      	add	r7, sp, #0
 801f59a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	681b      	ldr	r3, [r3, #0]
 801f5a0:	68db      	ldr	r3, [r3, #12]
 801f5a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	681b      	ldr	r3, [r3, #0]
 801f5a8:	691b      	ldr	r3, [r3, #16]
 801f5aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801f5ac:	68bb      	ldr	r3, [r7, #8]
 801f5ae:	f003 0302 	and.w	r3, r3, #2
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d020      	beq.n	801f5f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801f5b6:	68fb      	ldr	r3, [r7, #12]
 801f5b8:	f003 0302 	and.w	r3, r3, #2
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	d01b      	beq.n	801f5f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801f5c0:	687b      	ldr	r3, [r7, #4]
 801f5c2:	681b      	ldr	r3, [r3, #0]
 801f5c4:	f06f 0202 	mvn.w	r2, #2
 801f5c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801f5ca:	687b      	ldr	r3, [r7, #4]
 801f5cc:	2201      	movs	r2, #1
 801f5ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	681b      	ldr	r3, [r3, #0]
 801f5d4:	699b      	ldr	r3, [r3, #24]
 801f5d6:	f003 0303 	and.w	r3, r3, #3
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	d003      	beq.n	801f5e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801f5de:	6878      	ldr	r0, [r7, #4]
 801f5e0:	f000 f8e9 	bl	801f7b6 <HAL_TIM_IC_CaptureCallback>
 801f5e4:	e005      	b.n	801f5f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801f5e6:	6878      	ldr	r0, [r7, #4]
 801f5e8:	f000 f8db 	bl	801f7a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f5ec:	6878      	ldr	r0, [r7, #4]
 801f5ee:	f000 f8ec 	bl	801f7ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	2200      	movs	r2, #0
 801f5f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801f5f8:	68bb      	ldr	r3, [r7, #8]
 801f5fa:	f003 0304 	and.w	r3, r3, #4
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d020      	beq.n	801f644 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801f602:	68fb      	ldr	r3, [r7, #12]
 801f604:	f003 0304 	and.w	r3, r3, #4
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d01b      	beq.n	801f644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	f06f 0204 	mvn.w	r2, #4
 801f614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	2202      	movs	r2, #2
 801f61a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801f61c:	687b      	ldr	r3, [r7, #4]
 801f61e:	681b      	ldr	r3, [r3, #0]
 801f620:	699b      	ldr	r3, [r3, #24]
 801f622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801f626:	2b00      	cmp	r3, #0
 801f628:	d003      	beq.n	801f632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f62a:	6878      	ldr	r0, [r7, #4]
 801f62c:	f000 f8c3 	bl	801f7b6 <HAL_TIM_IC_CaptureCallback>
 801f630:	e005      	b.n	801f63e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f632:	6878      	ldr	r0, [r7, #4]
 801f634:	f000 f8b5 	bl	801f7a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f638:	6878      	ldr	r0, [r7, #4]
 801f63a:	f000 f8c6 	bl	801f7ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	2200      	movs	r2, #0
 801f642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801f644:	68bb      	ldr	r3, [r7, #8]
 801f646:	f003 0308 	and.w	r3, r3, #8
 801f64a:	2b00      	cmp	r3, #0
 801f64c:	d020      	beq.n	801f690 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801f64e:	68fb      	ldr	r3, [r7, #12]
 801f650:	f003 0308 	and.w	r3, r3, #8
 801f654:	2b00      	cmp	r3, #0
 801f656:	d01b      	beq.n	801f690 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801f658:	687b      	ldr	r3, [r7, #4]
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	f06f 0208 	mvn.w	r2, #8
 801f660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801f662:	687b      	ldr	r3, [r7, #4]
 801f664:	2204      	movs	r2, #4
 801f666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	69db      	ldr	r3, [r3, #28]
 801f66e:	f003 0303 	and.w	r3, r3, #3
 801f672:	2b00      	cmp	r3, #0
 801f674:	d003      	beq.n	801f67e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f676:	6878      	ldr	r0, [r7, #4]
 801f678:	f000 f89d 	bl	801f7b6 <HAL_TIM_IC_CaptureCallback>
 801f67c:	e005      	b.n	801f68a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f67e:	6878      	ldr	r0, [r7, #4]
 801f680:	f000 f88f 	bl	801f7a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f684:	6878      	ldr	r0, [r7, #4]
 801f686:	f000 f8a0 	bl	801f7ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	2200      	movs	r2, #0
 801f68e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801f690:	68bb      	ldr	r3, [r7, #8]
 801f692:	f003 0310 	and.w	r3, r3, #16
 801f696:	2b00      	cmp	r3, #0
 801f698:	d020      	beq.n	801f6dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801f69a:	68fb      	ldr	r3, [r7, #12]
 801f69c:	f003 0310 	and.w	r3, r3, #16
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	d01b      	beq.n	801f6dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	681b      	ldr	r3, [r3, #0]
 801f6a8:	f06f 0210 	mvn.w	r2, #16
 801f6ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	2208      	movs	r2, #8
 801f6b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	681b      	ldr	r3, [r3, #0]
 801f6b8:	69db      	ldr	r3, [r3, #28]
 801f6ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	d003      	beq.n	801f6ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f6c2:	6878      	ldr	r0, [r7, #4]
 801f6c4:	f000 f877 	bl	801f7b6 <HAL_TIM_IC_CaptureCallback>
 801f6c8:	e005      	b.n	801f6d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f6ca:	6878      	ldr	r0, [r7, #4]
 801f6cc:	f000 f869 	bl	801f7a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f6d0:	6878      	ldr	r0, [r7, #4]
 801f6d2:	f000 f87a 	bl	801f7ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f6d6:	687b      	ldr	r3, [r7, #4]
 801f6d8:	2200      	movs	r2, #0
 801f6da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801f6dc:	68bb      	ldr	r3, [r7, #8]
 801f6de:	f003 0301 	and.w	r3, r3, #1
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	d00c      	beq.n	801f700 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801f6e6:	68fb      	ldr	r3, [r7, #12]
 801f6e8:	f003 0301 	and.w	r3, r3, #1
 801f6ec:	2b00      	cmp	r3, #0
 801f6ee:	d007      	beq.n	801f700 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	681b      	ldr	r3, [r3, #0]
 801f6f4:	f06f 0201 	mvn.w	r2, #1
 801f6f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801f6fa:	6878      	ldr	r0, [r7, #4]
 801f6fc:	f7f8 ffd8 	bl	80186b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801f700:	68bb      	ldr	r3, [r7, #8]
 801f702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801f706:	2b00      	cmp	r3, #0
 801f708:	d104      	bne.n	801f714 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801f70a:	68bb      	ldr	r3, [r7, #8]
 801f70c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801f710:	2b00      	cmp	r3, #0
 801f712:	d00c      	beq.n	801f72e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801f714:	68fb      	ldr	r3, [r7, #12]
 801f716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d007      	beq.n	801f72e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801f726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801f728:	6878      	ldr	r0, [r7, #4]
 801f72a:	f000 f90d 	bl	801f948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801f72e:	68bb      	ldr	r3, [r7, #8]
 801f730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f734:	2b00      	cmp	r3, #0
 801f736:	d00c      	beq.n	801f752 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801f738:	68fb      	ldr	r3, [r7, #12]
 801f73a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801f73e:	2b00      	cmp	r3, #0
 801f740:	d007      	beq.n	801f752 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f742:	687b      	ldr	r3, [r7, #4]
 801f744:	681b      	ldr	r3, [r3, #0]
 801f746:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801f74a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f74c:	6878      	ldr	r0, [r7, #4]
 801f74e:	f000 f905 	bl	801f95c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801f752:	68bb      	ldr	r3, [r7, #8]
 801f754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f758:	2b00      	cmp	r3, #0
 801f75a:	d00c      	beq.n	801f776 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801f75c:	68fb      	ldr	r3, [r7, #12]
 801f75e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f762:	2b00      	cmp	r3, #0
 801f764:	d007      	beq.n	801f776 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	681b      	ldr	r3, [r3, #0]
 801f76a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801f76e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f770:	6878      	ldr	r0, [r7, #4]
 801f772:	f000 f834 	bl	801f7de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801f776:	68bb      	ldr	r3, [r7, #8]
 801f778:	f003 0320 	and.w	r3, r3, #32
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	d00c      	beq.n	801f79a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801f780:	68fb      	ldr	r3, [r7, #12]
 801f782:	f003 0320 	and.w	r3, r3, #32
 801f786:	2b00      	cmp	r3, #0
 801f788:	d007      	beq.n	801f79a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801f78a:	687b      	ldr	r3, [r7, #4]
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	f06f 0220 	mvn.w	r2, #32
 801f792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f794:	6878      	ldr	r0, [r7, #4]
 801f796:	f000 f8cd 	bl	801f934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f79a:	bf00      	nop
 801f79c:	3710      	adds	r7, #16
 801f79e:	46bd      	mov	sp, r7
 801f7a0:	bd80      	pop	{r7, pc}

0801f7a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f7a2:	b480      	push	{r7}
 801f7a4:	b083      	sub	sp, #12
 801f7a6:	af00      	add	r7, sp, #0
 801f7a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f7aa:	bf00      	nop
 801f7ac:	370c      	adds	r7, #12
 801f7ae:	46bd      	mov	sp, r7
 801f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7b4:	4770      	bx	lr

0801f7b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801f7b6:	b480      	push	{r7}
 801f7b8:	b083      	sub	sp, #12
 801f7ba:	af00      	add	r7, sp, #0
 801f7bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801f7be:	bf00      	nop
 801f7c0:	370c      	adds	r7, #12
 801f7c2:	46bd      	mov	sp, r7
 801f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7c8:	4770      	bx	lr

0801f7ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f7ca:	b480      	push	{r7}
 801f7cc:	b083      	sub	sp, #12
 801f7ce:	af00      	add	r7, sp, #0
 801f7d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f7d2:	bf00      	nop
 801f7d4:	370c      	adds	r7, #12
 801f7d6:	46bd      	mov	sp, r7
 801f7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7dc:	4770      	bx	lr

0801f7de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f7de:	b480      	push	{r7}
 801f7e0:	b083      	sub	sp, #12
 801f7e2:	af00      	add	r7, sp, #0
 801f7e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f7e6:	bf00      	nop
 801f7e8:	370c      	adds	r7, #12
 801f7ea:	46bd      	mov	sp, r7
 801f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7f0:	4770      	bx	lr
	...

0801f7f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801f7f4:	b480      	push	{r7}
 801f7f6:	b085      	sub	sp, #20
 801f7f8:	af00      	add	r7, sp, #0
 801f7fa:	6078      	str	r0, [r7, #4]
 801f7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	681b      	ldr	r3, [r3, #0]
 801f802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f804:	687b      	ldr	r3, [r7, #4]
 801f806:	4a43      	ldr	r2, [pc, #268]	@ (801f914 <TIM_Base_SetConfig+0x120>)
 801f808:	4293      	cmp	r3, r2
 801f80a:	d013      	beq.n	801f834 <TIM_Base_SetConfig+0x40>
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f812:	d00f      	beq.n	801f834 <TIM_Base_SetConfig+0x40>
 801f814:	687b      	ldr	r3, [r7, #4]
 801f816:	4a40      	ldr	r2, [pc, #256]	@ (801f918 <TIM_Base_SetConfig+0x124>)
 801f818:	4293      	cmp	r3, r2
 801f81a:	d00b      	beq.n	801f834 <TIM_Base_SetConfig+0x40>
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	4a3f      	ldr	r2, [pc, #252]	@ (801f91c <TIM_Base_SetConfig+0x128>)
 801f820:	4293      	cmp	r3, r2
 801f822:	d007      	beq.n	801f834 <TIM_Base_SetConfig+0x40>
 801f824:	687b      	ldr	r3, [r7, #4]
 801f826:	4a3e      	ldr	r2, [pc, #248]	@ (801f920 <TIM_Base_SetConfig+0x12c>)
 801f828:	4293      	cmp	r3, r2
 801f82a:	d003      	beq.n	801f834 <TIM_Base_SetConfig+0x40>
 801f82c:	687b      	ldr	r3, [r7, #4]
 801f82e:	4a3d      	ldr	r2, [pc, #244]	@ (801f924 <TIM_Base_SetConfig+0x130>)
 801f830:	4293      	cmp	r3, r2
 801f832:	d108      	bne.n	801f846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f834:	68fb      	ldr	r3, [r7, #12]
 801f836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f83a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f83c:	683b      	ldr	r3, [r7, #0]
 801f83e:	685b      	ldr	r3, [r3, #4]
 801f840:	68fa      	ldr	r2, [r7, #12]
 801f842:	4313      	orrs	r3, r2
 801f844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	4a32      	ldr	r2, [pc, #200]	@ (801f914 <TIM_Base_SetConfig+0x120>)
 801f84a:	4293      	cmp	r3, r2
 801f84c:	d01f      	beq.n	801f88e <TIM_Base_SetConfig+0x9a>
 801f84e:	687b      	ldr	r3, [r7, #4]
 801f850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f854:	d01b      	beq.n	801f88e <TIM_Base_SetConfig+0x9a>
 801f856:	687b      	ldr	r3, [r7, #4]
 801f858:	4a2f      	ldr	r2, [pc, #188]	@ (801f918 <TIM_Base_SetConfig+0x124>)
 801f85a:	4293      	cmp	r3, r2
 801f85c:	d017      	beq.n	801f88e <TIM_Base_SetConfig+0x9a>
 801f85e:	687b      	ldr	r3, [r7, #4]
 801f860:	4a2e      	ldr	r2, [pc, #184]	@ (801f91c <TIM_Base_SetConfig+0x128>)
 801f862:	4293      	cmp	r3, r2
 801f864:	d013      	beq.n	801f88e <TIM_Base_SetConfig+0x9a>
 801f866:	687b      	ldr	r3, [r7, #4]
 801f868:	4a2d      	ldr	r2, [pc, #180]	@ (801f920 <TIM_Base_SetConfig+0x12c>)
 801f86a:	4293      	cmp	r3, r2
 801f86c:	d00f      	beq.n	801f88e <TIM_Base_SetConfig+0x9a>
 801f86e:	687b      	ldr	r3, [r7, #4]
 801f870:	4a2c      	ldr	r2, [pc, #176]	@ (801f924 <TIM_Base_SetConfig+0x130>)
 801f872:	4293      	cmp	r3, r2
 801f874:	d00b      	beq.n	801f88e <TIM_Base_SetConfig+0x9a>
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	4a2b      	ldr	r2, [pc, #172]	@ (801f928 <TIM_Base_SetConfig+0x134>)
 801f87a:	4293      	cmp	r3, r2
 801f87c:	d007      	beq.n	801f88e <TIM_Base_SetConfig+0x9a>
 801f87e:	687b      	ldr	r3, [r7, #4]
 801f880:	4a2a      	ldr	r2, [pc, #168]	@ (801f92c <TIM_Base_SetConfig+0x138>)
 801f882:	4293      	cmp	r3, r2
 801f884:	d003      	beq.n	801f88e <TIM_Base_SetConfig+0x9a>
 801f886:	687b      	ldr	r3, [r7, #4]
 801f888:	4a29      	ldr	r2, [pc, #164]	@ (801f930 <TIM_Base_SetConfig+0x13c>)
 801f88a:	4293      	cmp	r3, r2
 801f88c:	d108      	bne.n	801f8a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f88e:	68fb      	ldr	r3, [r7, #12]
 801f890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801f894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f896:	683b      	ldr	r3, [r7, #0]
 801f898:	68db      	ldr	r3, [r3, #12]
 801f89a:	68fa      	ldr	r2, [r7, #12]
 801f89c:	4313      	orrs	r3, r2
 801f89e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f8a0:	68fb      	ldr	r3, [r7, #12]
 801f8a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801f8a6:	683b      	ldr	r3, [r7, #0]
 801f8a8:	695b      	ldr	r3, [r3, #20]
 801f8aa:	4313      	orrs	r3, r2
 801f8ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f8ae:	683b      	ldr	r3, [r7, #0]
 801f8b0:	689a      	ldr	r2, [r3, #8]
 801f8b2:	687b      	ldr	r3, [r7, #4]
 801f8b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f8b6:	683b      	ldr	r3, [r7, #0]
 801f8b8:	681a      	ldr	r2, [r3, #0]
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	4a14      	ldr	r2, [pc, #80]	@ (801f914 <TIM_Base_SetConfig+0x120>)
 801f8c2:	4293      	cmp	r3, r2
 801f8c4:	d00f      	beq.n	801f8e6 <TIM_Base_SetConfig+0xf2>
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	4a16      	ldr	r2, [pc, #88]	@ (801f924 <TIM_Base_SetConfig+0x130>)
 801f8ca:	4293      	cmp	r3, r2
 801f8cc:	d00b      	beq.n	801f8e6 <TIM_Base_SetConfig+0xf2>
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	4a15      	ldr	r2, [pc, #84]	@ (801f928 <TIM_Base_SetConfig+0x134>)
 801f8d2:	4293      	cmp	r3, r2
 801f8d4:	d007      	beq.n	801f8e6 <TIM_Base_SetConfig+0xf2>
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	4a14      	ldr	r2, [pc, #80]	@ (801f92c <TIM_Base_SetConfig+0x138>)
 801f8da:	4293      	cmp	r3, r2
 801f8dc:	d003      	beq.n	801f8e6 <TIM_Base_SetConfig+0xf2>
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	4a13      	ldr	r2, [pc, #76]	@ (801f930 <TIM_Base_SetConfig+0x13c>)
 801f8e2:	4293      	cmp	r3, r2
 801f8e4:	d103      	bne.n	801f8ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f8e6:	683b      	ldr	r3, [r7, #0]
 801f8e8:	691a      	ldr	r2, [r3, #16]
 801f8ea:	687b      	ldr	r3, [r7, #4]
 801f8ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	681b      	ldr	r3, [r3, #0]
 801f8f2:	f043 0204 	orr.w	r2, r3, #4
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	2201      	movs	r2, #1
 801f8fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	68fa      	ldr	r2, [r7, #12]
 801f904:	601a      	str	r2, [r3, #0]
}
 801f906:	bf00      	nop
 801f908:	3714      	adds	r7, #20
 801f90a:	46bd      	mov	sp, r7
 801f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f910:	4770      	bx	lr
 801f912:	bf00      	nop
 801f914:	40010000 	.word	0x40010000
 801f918:	40000400 	.word	0x40000400
 801f91c:	40000800 	.word	0x40000800
 801f920:	40000c00 	.word	0x40000c00
 801f924:	40010400 	.word	0x40010400
 801f928:	40014000 	.word	0x40014000
 801f92c:	40014400 	.word	0x40014400
 801f930:	40014800 	.word	0x40014800

0801f934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801f934:	b480      	push	{r7}
 801f936:	b083      	sub	sp, #12
 801f938:	af00      	add	r7, sp, #0
 801f93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801f93c:	bf00      	nop
 801f93e:	370c      	adds	r7, #12
 801f940:	46bd      	mov	sp, r7
 801f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f946:	4770      	bx	lr

0801f948 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801f948:	b480      	push	{r7}
 801f94a:	b083      	sub	sp, #12
 801f94c:	af00      	add	r7, sp, #0
 801f94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801f950:	bf00      	nop
 801f952:	370c      	adds	r7, #12
 801f954:	46bd      	mov	sp, r7
 801f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f95a:	4770      	bx	lr

0801f95c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801f95c:	b480      	push	{r7}
 801f95e:	b083      	sub	sp, #12
 801f960:	af00      	add	r7, sp, #0
 801f962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801f964:	bf00      	nop
 801f966:	370c      	adds	r7, #12
 801f968:	46bd      	mov	sp, r7
 801f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f96e:	4770      	bx	lr

0801f970 <LL_GPIO_SetPinMode>:
{
 801f970:	b480      	push	{r7}
 801f972:	b085      	sub	sp, #20
 801f974:	af00      	add	r7, sp, #0
 801f976:	60f8      	str	r0, [r7, #12]
 801f978:	60b9      	str	r1, [r7, #8]
 801f97a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 801f97c:	68fb      	ldr	r3, [r7, #12]
 801f97e:	6819      	ldr	r1, [r3, #0]
 801f980:	68bb      	ldr	r3, [r7, #8]
 801f982:	fb03 f203 	mul.w	r2, r3, r3
 801f986:	4613      	mov	r3, r2
 801f988:	005b      	lsls	r3, r3, #1
 801f98a:	4413      	add	r3, r2
 801f98c:	43db      	mvns	r3, r3
 801f98e:	ea01 0203 	and.w	r2, r1, r3
 801f992:	68bb      	ldr	r3, [r7, #8]
 801f994:	fb03 f303 	mul.w	r3, r3, r3
 801f998:	6879      	ldr	r1, [r7, #4]
 801f99a:	fb01 f303 	mul.w	r3, r1, r3
 801f99e:	431a      	orrs	r2, r3
 801f9a0:	68fb      	ldr	r3, [r7, #12]
 801f9a2:	601a      	str	r2, [r3, #0]
}
 801f9a4:	bf00      	nop
 801f9a6:	3714      	adds	r7, #20
 801f9a8:	46bd      	mov	sp, r7
 801f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9ae:	4770      	bx	lr

0801f9b0 <LL_GPIO_SetPinOutputType>:
{
 801f9b0:	b480      	push	{r7}
 801f9b2:	b085      	sub	sp, #20
 801f9b4:	af00      	add	r7, sp, #0
 801f9b6:	60f8      	str	r0, [r7, #12]
 801f9b8:	60b9      	str	r1, [r7, #8]
 801f9ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	685a      	ldr	r2, [r3, #4]
 801f9c0:	68bb      	ldr	r3, [r7, #8]
 801f9c2:	43db      	mvns	r3, r3
 801f9c4:	401a      	ands	r2, r3
 801f9c6:	68bb      	ldr	r3, [r7, #8]
 801f9c8:	6879      	ldr	r1, [r7, #4]
 801f9ca:	fb01 f303 	mul.w	r3, r1, r3
 801f9ce:	431a      	orrs	r2, r3
 801f9d0:	68fb      	ldr	r3, [r7, #12]
 801f9d2:	605a      	str	r2, [r3, #4]
}
 801f9d4:	bf00      	nop
 801f9d6:	3714      	adds	r7, #20
 801f9d8:	46bd      	mov	sp, r7
 801f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9de:	4770      	bx	lr

0801f9e0 <LL_GPIO_SetPinSpeed>:
{
 801f9e0:	b480      	push	{r7}
 801f9e2:	b085      	sub	sp, #20
 801f9e4:	af00      	add	r7, sp, #0
 801f9e6:	60f8      	str	r0, [r7, #12]
 801f9e8:	60b9      	str	r1, [r7, #8]
 801f9ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 801f9ec:	68fb      	ldr	r3, [r7, #12]
 801f9ee:	6899      	ldr	r1, [r3, #8]
 801f9f0:	68bb      	ldr	r3, [r7, #8]
 801f9f2:	fb03 f203 	mul.w	r2, r3, r3
 801f9f6:	4613      	mov	r3, r2
 801f9f8:	005b      	lsls	r3, r3, #1
 801f9fa:	4413      	add	r3, r2
 801f9fc:	43db      	mvns	r3, r3
 801f9fe:	ea01 0203 	and.w	r2, r1, r3
 801fa02:	68bb      	ldr	r3, [r7, #8]
 801fa04:	fb03 f303 	mul.w	r3, r3, r3
 801fa08:	6879      	ldr	r1, [r7, #4]
 801fa0a:	fb01 f303 	mul.w	r3, r1, r3
 801fa0e:	431a      	orrs	r2, r3
 801fa10:	68fb      	ldr	r3, [r7, #12]
 801fa12:	609a      	str	r2, [r3, #8]
}
 801fa14:	bf00      	nop
 801fa16:	3714      	adds	r7, #20
 801fa18:	46bd      	mov	sp, r7
 801fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa1e:	4770      	bx	lr

0801fa20 <LL_GPIO_SetPinPull>:
{
 801fa20:	b480      	push	{r7}
 801fa22:	b085      	sub	sp, #20
 801fa24:	af00      	add	r7, sp, #0
 801fa26:	60f8      	str	r0, [r7, #12]
 801fa28:	60b9      	str	r1, [r7, #8]
 801fa2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 801fa2c:	68fb      	ldr	r3, [r7, #12]
 801fa2e:	68d9      	ldr	r1, [r3, #12]
 801fa30:	68bb      	ldr	r3, [r7, #8]
 801fa32:	fb03 f203 	mul.w	r2, r3, r3
 801fa36:	4613      	mov	r3, r2
 801fa38:	005b      	lsls	r3, r3, #1
 801fa3a:	4413      	add	r3, r2
 801fa3c:	43db      	mvns	r3, r3
 801fa3e:	ea01 0203 	and.w	r2, r1, r3
 801fa42:	68bb      	ldr	r3, [r7, #8]
 801fa44:	fb03 f303 	mul.w	r3, r3, r3
 801fa48:	6879      	ldr	r1, [r7, #4]
 801fa4a:	fb01 f303 	mul.w	r3, r1, r3
 801fa4e:	431a      	orrs	r2, r3
 801fa50:	68fb      	ldr	r3, [r7, #12]
 801fa52:	60da      	str	r2, [r3, #12]
}
 801fa54:	bf00      	nop
 801fa56:	3714      	adds	r7, #20
 801fa58:	46bd      	mov	sp, r7
 801fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa5e:	4770      	bx	lr

0801fa60 <LL_GPIO_SetAFPin_0_7>:
{
 801fa60:	b480      	push	{r7}
 801fa62:	b085      	sub	sp, #20
 801fa64:	af00      	add	r7, sp, #0
 801fa66:	60f8      	str	r0, [r7, #12]
 801fa68:	60b9      	str	r1, [r7, #8]
 801fa6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 801fa6c:	68fb      	ldr	r3, [r7, #12]
 801fa6e:	6a19      	ldr	r1, [r3, #32]
 801fa70:	68bb      	ldr	r3, [r7, #8]
 801fa72:	fb03 f303 	mul.w	r3, r3, r3
 801fa76:	68ba      	ldr	r2, [r7, #8]
 801fa78:	fb02 f303 	mul.w	r3, r2, r3
 801fa7c:	68ba      	ldr	r2, [r7, #8]
 801fa7e:	fb03 f202 	mul.w	r2, r3, r2
 801fa82:	4613      	mov	r3, r2
 801fa84:	011b      	lsls	r3, r3, #4
 801fa86:	1a9b      	subs	r3, r3, r2
 801fa88:	43db      	mvns	r3, r3
 801fa8a:	ea01 0203 	and.w	r2, r1, r3
 801fa8e:	68bb      	ldr	r3, [r7, #8]
 801fa90:	fb03 f303 	mul.w	r3, r3, r3
 801fa94:	68b9      	ldr	r1, [r7, #8]
 801fa96:	fb01 f303 	mul.w	r3, r1, r3
 801fa9a:	68b9      	ldr	r1, [r7, #8]
 801fa9c:	fb01 f303 	mul.w	r3, r1, r3
 801faa0:	6879      	ldr	r1, [r7, #4]
 801faa2:	fb01 f303 	mul.w	r3, r1, r3
 801faa6:	431a      	orrs	r2, r3
 801faa8:	68fb      	ldr	r3, [r7, #12]
 801faaa:	621a      	str	r2, [r3, #32]
}
 801faac:	bf00      	nop
 801faae:	3714      	adds	r7, #20
 801fab0:	46bd      	mov	sp, r7
 801fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fab6:	4770      	bx	lr

0801fab8 <LL_GPIO_SetAFPin_8_15>:
{
 801fab8:	b480      	push	{r7}
 801faba:	b085      	sub	sp, #20
 801fabc:	af00      	add	r7, sp, #0
 801fabe:	60f8      	str	r0, [r7, #12]
 801fac0:	60b9      	str	r1, [r7, #8]
 801fac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 801fac4:	68fb      	ldr	r3, [r7, #12]
 801fac6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801fac8:	68bb      	ldr	r3, [r7, #8]
 801faca:	0a1b      	lsrs	r3, r3, #8
 801facc:	68ba      	ldr	r2, [r7, #8]
 801face:	0a12      	lsrs	r2, r2, #8
 801fad0:	fb02 f303 	mul.w	r3, r2, r3
 801fad4:	68ba      	ldr	r2, [r7, #8]
 801fad6:	0a12      	lsrs	r2, r2, #8
 801fad8:	fb02 f303 	mul.w	r3, r2, r3
 801fadc:	68ba      	ldr	r2, [r7, #8]
 801fade:	0a12      	lsrs	r2, r2, #8
 801fae0:	fb03 f202 	mul.w	r2, r3, r2
 801fae4:	4613      	mov	r3, r2
 801fae6:	011b      	lsls	r3, r3, #4
 801fae8:	1a9b      	subs	r3, r3, r2
 801faea:	43db      	mvns	r3, r3
 801faec:	ea01 0203 	and.w	r2, r1, r3
 801faf0:	68bb      	ldr	r3, [r7, #8]
 801faf2:	0a1b      	lsrs	r3, r3, #8
 801faf4:	68b9      	ldr	r1, [r7, #8]
 801faf6:	0a09      	lsrs	r1, r1, #8
 801faf8:	fb01 f303 	mul.w	r3, r1, r3
 801fafc:	68b9      	ldr	r1, [r7, #8]
 801fafe:	0a09      	lsrs	r1, r1, #8
 801fb00:	fb01 f303 	mul.w	r3, r1, r3
 801fb04:	68b9      	ldr	r1, [r7, #8]
 801fb06:	0a09      	lsrs	r1, r1, #8
 801fb08:	fb01 f303 	mul.w	r3, r1, r3
 801fb0c:	6879      	ldr	r1, [r7, #4]
 801fb0e:	fb01 f303 	mul.w	r3, r1, r3
 801fb12:	431a      	orrs	r2, r3
 801fb14:	68fb      	ldr	r3, [r7, #12]
 801fb16:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801fb18:	bf00      	nop
 801fb1a:	3714      	adds	r7, #20
 801fb1c:	46bd      	mov	sp, r7
 801fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb22:	4770      	bx	lr

0801fb24 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801fb24:	b580      	push	{r7, lr}
 801fb26:	b088      	sub	sp, #32
 801fb28:	af00      	add	r7, sp, #0
 801fb2a:	6078      	str	r0, [r7, #4]
 801fb2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801fb2e:	683b      	ldr	r3, [r7, #0]
 801fb30:	681b      	ldr	r3, [r3, #0]
 801fb32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801fb34:	693b      	ldr	r3, [r7, #16]
 801fb36:	fa93 f3a3 	rbit	r3, r3
 801fb3a:	60fb      	str	r3, [r7, #12]
  return result;
 801fb3c:	68fb      	ldr	r3, [r7, #12]
 801fb3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801fb40:	697b      	ldr	r3, [r7, #20]
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	d101      	bne.n	801fb4a <LL_GPIO_Init+0x26>
    return 32U;
 801fb46:	2320      	movs	r3, #32
 801fb48:	e003      	b.n	801fb52 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801fb4a:	697b      	ldr	r3, [r7, #20]
 801fb4c:	fab3 f383 	clz	r3, r3
 801fb50:	b2db      	uxtb	r3, r3
 801fb52:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801fb54:	e048      	b.n	801fbe8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 801fb56:	683b      	ldr	r3, [r7, #0]
 801fb58:	681a      	ldr	r2, [r3, #0]
 801fb5a:	2101      	movs	r1, #1
 801fb5c:	69fb      	ldr	r3, [r7, #28]
 801fb5e:	fa01 f303 	lsl.w	r3, r1, r3
 801fb62:	4013      	ands	r3, r2
 801fb64:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 801fb66:	69bb      	ldr	r3, [r7, #24]
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	d03a      	beq.n	801fbe2 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801fb6c:	683b      	ldr	r3, [r7, #0]
 801fb6e:	685b      	ldr	r3, [r3, #4]
 801fb70:	2b01      	cmp	r3, #1
 801fb72:	d003      	beq.n	801fb7c <LL_GPIO_Init+0x58>
 801fb74:	683b      	ldr	r3, [r7, #0]
 801fb76:	685b      	ldr	r3, [r3, #4]
 801fb78:	2b02      	cmp	r3, #2
 801fb7a:	d10e      	bne.n	801fb9a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801fb7c:	683b      	ldr	r3, [r7, #0]
 801fb7e:	689b      	ldr	r3, [r3, #8]
 801fb80:	461a      	mov	r2, r3
 801fb82:	69b9      	ldr	r1, [r7, #24]
 801fb84:	6878      	ldr	r0, [r7, #4]
 801fb86:	f7ff ff2b 	bl	801f9e0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 801fb8a:	683b      	ldr	r3, [r7, #0]
 801fb8c:	6819      	ldr	r1, [r3, #0]
 801fb8e:	683b      	ldr	r3, [r7, #0]
 801fb90:	68db      	ldr	r3, [r3, #12]
 801fb92:	461a      	mov	r2, r3
 801fb94:	6878      	ldr	r0, [r7, #4]
 801fb96:	f7ff ff0b 	bl	801f9b0 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801fb9a:	683b      	ldr	r3, [r7, #0]
 801fb9c:	691b      	ldr	r3, [r3, #16]
 801fb9e:	461a      	mov	r2, r3
 801fba0:	69b9      	ldr	r1, [r7, #24]
 801fba2:	6878      	ldr	r0, [r7, #4]
 801fba4:	f7ff ff3c 	bl	801fa20 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801fba8:	683b      	ldr	r3, [r7, #0]
 801fbaa:	685b      	ldr	r3, [r3, #4]
 801fbac:	2b02      	cmp	r3, #2
 801fbae:	d111      	bne.n	801fbd4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 801fbb0:	69bb      	ldr	r3, [r7, #24]
 801fbb2:	2bff      	cmp	r3, #255	@ 0xff
 801fbb4:	d807      	bhi.n	801fbc6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801fbb6:	683b      	ldr	r3, [r7, #0]
 801fbb8:	695b      	ldr	r3, [r3, #20]
 801fbba:	461a      	mov	r2, r3
 801fbbc:	69b9      	ldr	r1, [r7, #24]
 801fbbe:	6878      	ldr	r0, [r7, #4]
 801fbc0:	f7ff ff4e 	bl	801fa60 <LL_GPIO_SetAFPin_0_7>
 801fbc4:	e006      	b.n	801fbd4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801fbc6:	683b      	ldr	r3, [r7, #0]
 801fbc8:	695b      	ldr	r3, [r3, #20]
 801fbca:	461a      	mov	r2, r3
 801fbcc:	69b9      	ldr	r1, [r7, #24]
 801fbce:	6878      	ldr	r0, [r7, #4]
 801fbd0:	f7ff ff72 	bl	801fab8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801fbd4:	683b      	ldr	r3, [r7, #0]
 801fbd6:	685b      	ldr	r3, [r3, #4]
 801fbd8:	461a      	mov	r2, r3
 801fbda:	69b9      	ldr	r1, [r7, #24]
 801fbdc:	6878      	ldr	r0, [r7, #4]
 801fbde:	f7ff fec7 	bl	801f970 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801fbe2:	69fb      	ldr	r3, [r7, #28]
 801fbe4:	3301      	adds	r3, #1
 801fbe6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801fbe8:	683b      	ldr	r3, [r7, #0]
 801fbea:	681a      	ldr	r2, [r3, #0]
 801fbec:	69fb      	ldr	r3, [r7, #28]
 801fbee:	fa22 f303 	lsr.w	r3, r2, r3
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	d1af      	bne.n	801fb56 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 801fbf6:	2300      	movs	r3, #0
}
 801fbf8:	4618      	mov	r0, r3
 801fbfa:	3720      	adds	r7, #32
 801fbfc:	46bd      	mov	sp, r7
 801fbfe:	bd80      	pop	{r7, pc}

0801fc00 <LL_I2C_Enable>:
{
 801fc00:	b480      	push	{r7}
 801fc02:	b083      	sub	sp, #12
 801fc04:	af00      	add	r7, sp, #0
 801fc06:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 801fc08:	687b      	ldr	r3, [r7, #4]
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	f043 0201 	orr.w	r2, r3, #1
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	601a      	str	r2, [r3, #0]
}
 801fc14:	bf00      	nop
 801fc16:	370c      	adds	r7, #12
 801fc18:	46bd      	mov	sp, r7
 801fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc1e:	4770      	bx	lr

0801fc20 <LL_I2C_Disable>:
{
 801fc20:	b480      	push	{r7}
 801fc22:	b083      	sub	sp, #12
 801fc24:	af00      	add	r7, sp, #0
 801fc26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	681b      	ldr	r3, [r3, #0]
 801fc2c:	f023 0201 	bic.w	r2, r3, #1
 801fc30:	687b      	ldr	r3, [r7, #4]
 801fc32:	601a      	str	r2, [r3, #0]
}
 801fc34:	bf00      	nop
 801fc36:	370c      	adds	r7, #12
 801fc38:	46bd      	mov	sp, r7
 801fc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc3e:	4770      	bx	lr

0801fc40 <LL_I2C_ConfigFilters>:
{
 801fc40:	b480      	push	{r7}
 801fc42:	b085      	sub	sp, #20
 801fc44:	af00      	add	r7, sp, #0
 801fc46:	60f8      	str	r0, [r7, #12]
 801fc48:	60b9      	str	r1, [r7, #8]
 801fc4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 801fc4c:	68fb      	ldr	r3, [r7, #12]
 801fc4e:	681b      	ldr	r3, [r3, #0]
 801fc50:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	0219      	lsls	r1, r3, #8
 801fc58:	68bb      	ldr	r3, [r7, #8]
 801fc5a:	430b      	orrs	r3, r1
 801fc5c:	431a      	orrs	r2, r3
 801fc5e:	68fb      	ldr	r3, [r7, #12]
 801fc60:	601a      	str	r2, [r3, #0]
}
 801fc62:	bf00      	nop
 801fc64:	3714      	adds	r7, #20
 801fc66:	46bd      	mov	sp, r7
 801fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc6c:	4770      	bx	lr
	...

0801fc70 <LL_I2C_SetOwnAddress1>:
{
 801fc70:	b480      	push	{r7}
 801fc72:	b085      	sub	sp, #20
 801fc74:	af00      	add	r7, sp, #0
 801fc76:	60f8      	str	r0, [r7, #12]
 801fc78:	60b9      	str	r1, [r7, #8]
 801fc7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 801fc7c:	68fb      	ldr	r3, [r7, #12]
 801fc7e:	689a      	ldr	r2, [r3, #8]
 801fc80:	4b06      	ldr	r3, [pc, #24]	@ (801fc9c <LL_I2C_SetOwnAddress1+0x2c>)
 801fc82:	4013      	ands	r3, r2
 801fc84:	68b9      	ldr	r1, [r7, #8]
 801fc86:	687a      	ldr	r2, [r7, #4]
 801fc88:	430a      	orrs	r2, r1
 801fc8a:	431a      	orrs	r2, r3
 801fc8c:	68fb      	ldr	r3, [r7, #12]
 801fc8e:	609a      	str	r2, [r3, #8]
}
 801fc90:	bf00      	nop
 801fc92:	3714      	adds	r7, #20
 801fc94:	46bd      	mov	sp, r7
 801fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc9a:	4770      	bx	lr
 801fc9c:	fffff800 	.word	0xfffff800

0801fca0 <LL_I2C_EnableOwnAddress1>:
{
 801fca0:	b480      	push	{r7}
 801fca2:	b083      	sub	sp, #12
 801fca4:	af00      	add	r7, sp, #0
 801fca6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	689b      	ldr	r3, [r3, #8]
 801fcac:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 801fcb0:	687b      	ldr	r3, [r7, #4]
 801fcb2:	609a      	str	r2, [r3, #8]
}
 801fcb4:	bf00      	nop
 801fcb6:	370c      	adds	r7, #12
 801fcb8:	46bd      	mov	sp, r7
 801fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcbe:	4770      	bx	lr

0801fcc0 <LL_I2C_DisableOwnAddress1>:
{
 801fcc0:	b480      	push	{r7}
 801fcc2:	b083      	sub	sp, #12
 801fcc4:	af00      	add	r7, sp, #0
 801fcc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	689b      	ldr	r3, [r3, #8]
 801fccc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	609a      	str	r2, [r3, #8]
}
 801fcd4:	bf00      	nop
 801fcd6:	370c      	adds	r7, #12
 801fcd8:	46bd      	mov	sp, r7
 801fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcde:	4770      	bx	lr

0801fce0 <LL_I2C_SetTiming>:
{
 801fce0:	b480      	push	{r7}
 801fce2:	b083      	sub	sp, #12
 801fce4:	af00      	add	r7, sp, #0
 801fce6:	6078      	str	r0, [r7, #4]
 801fce8:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 801fcea:	687b      	ldr	r3, [r7, #4]
 801fcec:	683a      	ldr	r2, [r7, #0]
 801fcee:	611a      	str	r2, [r3, #16]
}
 801fcf0:	bf00      	nop
 801fcf2:	370c      	adds	r7, #12
 801fcf4:	46bd      	mov	sp, r7
 801fcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcfa:	4770      	bx	lr

0801fcfc <LL_I2C_SetMode>:
{
 801fcfc:	b480      	push	{r7}
 801fcfe:	b083      	sub	sp, #12
 801fd00:	af00      	add	r7, sp, #0
 801fd02:	6078      	str	r0, [r7, #4]
 801fd04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	681b      	ldr	r3, [r3, #0]
 801fd0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801fd0e:	683b      	ldr	r3, [r7, #0]
 801fd10:	431a      	orrs	r2, r3
 801fd12:	687b      	ldr	r3, [r7, #4]
 801fd14:	601a      	str	r2, [r3, #0]
}
 801fd16:	bf00      	nop
 801fd18:	370c      	adds	r7, #12
 801fd1a:	46bd      	mov	sp, r7
 801fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd20:	4770      	bx	lr

0801fd22 <LL_I2C_AcknowledgeNextData>:
{
 801fd22:	b480      	push	{r7}
 801fd24:	b083      	sub	sp, #12
 801fd26:	af00      	add	r7, sp, #0
 801fd28:	6078      	str	r0, [r7, #4]
 801fd2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	685b      	ldr	r3, [r3, #4]
 801fd30:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801fd34:	683b      	ldr	r3, [r7, #0]
 801fd36:	431a      	orrs	r2, r3
 801fd38:	687b      	ldr	r3, [r7, #4]
 801fd3a:	605a      	str	r2, [r3, #4]
}
 801fd3c:	bf00      	nop
 801fd3e:	370c      	adds	r7, #12
 801fd40:	46bd      	mov	sp, r7
 801fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd46:	4770      	bx	lr

0801fd48 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 801fd48:	b580      	push	{r7, lr}
 801fd4a:	b082      	sub	sp, #8
 801fd4c:	af00      	add	r7, sp, #0
 801fd4e:	6078      	str	r0, [r7, #4]
 801fd50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 801fd52:	6878      	ldr	r0, [r7, #4]
 801fd54:	f7ff ff64 	bl	801fc20 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 801fd58:	683b      	ldr	r3, [r7, #0]
 801fd5a:	6899      	ldr	r1, [r3, #8]
 801fd5c:	683b      	ldr	r3, [r7, #0]
 801fd5e:	68db      	ldr	r3, [r3, #12]
 801fd60:	461a      	mov	r2, r3
 801fd62:	6878      	ldr	r0, [r7, #4]
 801fd64:	f7ff ff6c 	bl	801fc40 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 801fd68:	683b      	ldr	r3, [r7, #0]
 801fd6a:	685b      	ldr	r3, [r3, #4]
 801fd6c:	4619      	mov	r1, r3
 801fd6e:	6878      	ldr	r0, [r7, #4]
 801fd70:	f7ff ffb6 	bl	801fce0 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 801fd74:	6878      	ldr	r0, [r7, #4]
 801fd76:	f7ff ff43 	bl	801fc00 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 801fd7a:	6878      	ldr	r0, [r7, #4]
 801fd7c:	f7ff ffa0 	bl	801fcc0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 801fd80:	683b      	ldr	r3, [r7, #0]
 801fd82:	6919      	ldr	r1, [r3, #16]
 801fd84:	683b      	ldr	r3, [r7, #0]
 801fd86:	699b      	ldr	r3, [r3, #24]
 801fd88:	461a      	mov	r2, r3
 801fd8a:	6878      	ldr	r0, [r7, #4]
 801fd8c:	f7ff ff70 	bl	801fc70 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 801fd90:	683b      	ldr	r3, [r7, #0]
 801fd92:	691b      	ldr	r3, [r3, #16]
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	d002      	beq.n	801fd9e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 801fd98:	6878      	ldr	r0, [r7, #4]
 801fd9a:	f7ff ff81 	bl	801fca0 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 801fd9e:	683b      	ldr	r3, [r7, #0]
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	4619      	mov	r1, r3
 801fda4:	6878      	ldr	r0, [r7, #4]
 801fda6:	f7ff ffa9 	bl	801fcfc <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 801fdaa:	683b      	ldr	r3, [r7, #0]
 801fdac:	695b      	ldr	r3, [r3, #20]
 801fdae:	4619      	mov	r1, r3
 801fdb0:	6878      	ldr	r0, [r7, #4]
 801fdb2:	f7ff ffb6 	bl	801fd22 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 801fdb6:	2300      	movs	r3, #0
}
 801fdb8:	4618      	mov	r0, r3
 801fdba:	3708      	adds	r7, #8
 801fdbc:	46bd      	mov	sp, r7
 801fdbe:	bd80      	pop	{r7, pc}

0801fdc0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 801fdc0:	b480      	push	{r7}
 801fdc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 801fdc4:	4b07      	ldr	r3, [pc, #28]	@ (801fde4 <LL_RCC_HSE_IsReady+0x24>)
 801fdc6:	681b      	ldr	r3, [r3, #0]
 801fdc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801fdcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801fdd0:	d101      	bne.n	801fdd6 <LL_RCC_HSE_IsReady+0x16>
 801fdd2:	2301      	movs	r3, #1
 801fdd4:	e000      	b.n	801fdd8 <LL_RCC_HSE_IsReady+0x18>
 801fdd6:	2300      	movs	r3, #0
}
 801fdd8:	4618      	mov	r0, r3
 801fdda:	46bd      	mov	sp, r7
 801fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fde0:	4770      	bx	lr
 801fde2:	bf00      	nop
 801fde4:	58024400 	.word	0x58024400

0801fde8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 801fde8:	b480      	push	{r7}
 801fdea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801fdec:	4b06      	ldr	r3, [pc, #24]	@ (801fe08 <LL_RCC_HSI_IsReady+0x20>)
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	f003 0304 	and.w	r3, r3, #4
 801fdf4:	2b04      	cmp	r3, #4
 801fdf6:	d101      	bne.n	801fdfc <LL_RCC_HSI_IsReady+0x14>
 801fdf8:	2301      	movs	r3, #1
 801fdfa:	e000      	b.n	801fdfe <LL_RCC_HSI_IsReady+0x16>
 801fdfc:	2300      	movs	r3, #0
}
 801fdfe:	4618      	mov	r0, r3
 801fe00:	46bd      	mov	sp, r7
 801fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe06:	4770      	bx	lr
 801fe08:	58024400 	.word	0x58024400

0801fe0c <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 801fe0c:	b480      	push	{r7}
 801fe0e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 801fe10:	4b04      	ldr	r3, [pc, #16]	@ (801fe24 <LL_RCC_HSI_GetDivider+0x18>)
 801fe12:	681b      	ldr	r3, [r3, #0]
 801fe14:	f003 0318 	and.w	r3, r3, #24
}
 801fe18:	4618      	mov	r0, r3
 801fe1a:	46bd      	mov	sp, r7
 801fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe20:	4770      	bx	lr
 801fe22:	bf00      	nop
 801fe24:	58024400 	.word	0x58024400

0801fe28 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 801fe28:	b480      	push	{r7}
 801fe2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 801fe2c:	4b07      	ldr	r3, [pc, #28]	@ (801fe4c <LL_RCC_CSI_IsReady+0x24>)
 801fe2e:	681b      	ldr	r3, [r3, #0]
 801fe30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801fe34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801fe38:	d101      	bne.n	801fe3e <LL_RCC_CSI_IsReady+0x16>
 801fe3a:	2301      	movs	r3, #1
 801fe3c:	e000      	b.n	801fe40 <LL_RCC_CSI_IsReady+0x18>
 801fe3e:	2300      	movs	r3, #0
}
 801fe40:	4618      	mov	r0, r3
 801fe42:	46bd      	mov	sp, r7
 801fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe48:	4770      	bx	lr
 801fe4a:	bf00      	nop
 801fe4c:	58024400 	.word	0x58024400

0801fe50 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 801fe50:	b480      	push	{r7}
 801fe52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 801fe54:	4b06      	ldr	r3, [pc, #24]	@ (801fe70 <LL_RCC_LSE_IsReady+0x20>)
 801fe56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fe58:	f003 0302 	and.w	r3, r3, #2
 801fe5c:	2b02      	cmp	r3, #2
 801fe5e:	d101      	bne.n	801fe64 <LL_RCC_LSE_IsReady+0x14>
 801fe60:	2301      	movs	r3, #1
 801fe62:	e000      	b.n	801fe66 <LL_RCC_LSE_IsReady+0x16>
 801fe64:	2300      	movs	r3, #0
}
 801fe66:	4618      	mov	r0, r3
 801fe68:	46bd      	mov	sp, r7
 801fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe6e:	4770      	bx	lr
 801fe70:	58024400 	.word	0x58024400

0801fe74 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 801fe74:	b480      	push	{r7}
 801fe76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 801fe78:	4b04      	ldr	r3, [pc, #16]	@ (801fe8c <LL_RCC_GetSysClkSource+0x18>)
 801fe7a:	691b      	ldr	r3, [r3, #16]
 801fe7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 801fe80:	4618      	mov	r0, r3
 801fe82:	46bd      	mov	sp, r7
 801fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe88:	4770      	bx	lr
 801fe8a:	bf00      	nop
 801fe8c:	58024400 	.word	0x58024400

0801fe90 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 801fe90:	b480      	push	{r7}
 801fe92:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 801fe94:	4b04      	ldr	r3, [pc, #16]	@ (801fea8 <LL_RCC_GetSysPrescaler+0x18>)
 801fe96:	699b      	ldr	r3, [r3, #24]
 801fe98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 801fe9c:	4618      	mov	r0, r3
 801fe9e:	46bd      	mov	sp, r7
 801fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fea4:	4770      	bx	lr
 801fea6:	bf00      	nop
 801fea8:	58024400 	.word	0x58024400

0801feac <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 801feac:	b480      	push	{r7}
 801feae:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 801feb0:	4b04      	ldr	r3, [pc, #16]	@ (801fec4 <LL_RCC_GetAHBPrescaler+0x18>)
 801feb2:	699b      	ldr	r3, [r3, #24]
 801feb4:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 801feb8:	4618      	mov	r0, r3
 801feba:	46bd      	mov	sp, r7
 801febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fec0:	4770      	bx	lr
 801fec2:	bf00      	nop
 801fec4:	58024400 	.word	0x58024400

0801fec8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 801fec8:	b480      	push	{r7}
 801feca:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 801fecc:	4b04      	ldr	r3, [pc, #16]	@ (801fee0 <LL_RCC_GetAPB1Prescaler+0x18>)
 801fece:	69db      	ldr	r3, [r3, #28]
 801fed0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 801fed4:	4618      	mov	r0, r3
 801fed6:	46bd      	mov	sp, r7
 801fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fedc:	4770      	bx	lr
 801fede:	bf00      	nop
 801fee0:	58024400 	.word	0x58024400

0801fee4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 801fee4:	b480      	push	{r7}
 801fee6:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 801fee8:	4b04      	ldr	r3, [pc, #16]	@ (801fefc <LL_RCC_GetAPB2Prescaler+0x18>)
 801feea:	69db      	ldr	r3, [r3, #28]
 801feec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 801fef0:	4618      	mov	r0, r3
 801fef2:	46bd      	mov	sp, r7
 801fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fef8:	4770      	bx	lr
 801fefa:	bf00      	nop
 801fefc:	58024400 	.word	0x58024400

0801ff00 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 801ff00:	b480      	push	{r7}
 801ff02:	b085      	sub	sp, #20
 801ff04:	af00      	add	r7, sp, #0
 801ff06:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	b2da      	uxtb	r2, r3
 801ff0c:	4b0e      	ldr	r3, [pc, #56]	@ (801ff48 <LL_RCC_GetClockSource+0x48>)
 801ff0e:	4413      	add	r3, r2
 801ff10:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 801ff12:	68fb      	ldr	r3, [r7, #12]
 801ff14:	681a      	ldr	r2, [r3, #0]
 801ff16:	687b      	ldr	r3, [r7, #4]
 801ff18:	0e19      	lsrs	r1, r3, #24
 801ff1a:	687b      	ldr	r3, [r7, #4]
 801ff1c:	0a1b      	lsrs	r3, r3, #8
 801ff1e:	f003 031f 	and.w	r3, r3, #31
 801ff22:	fa01 f303 	lsl.w	r3, r1, r3
 801ff26:	401a      	ands	r2, r3
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	0a1b      	lsrs	r3, r3, #8
 801ff2c:	f003 031f 	and.w	r3, r3, #31
 801ff30:	fa22 f303 	lsr.w	r3, r2, r3
 801ff34:	041a      	lsls	r2, r3, #16
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	4313      	orrs	r3, r2
}
 801ff3a:	4618      	mov	r0, r3
 801ff3c:	3714      	adds	r7, #20
 801ff3e:	46bd      	mov	sp, r7
 801ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff44:	4770      	bx	lr
 801ff46:	bf00      	nop
 801ff48:	5802444c 	.word	0x5802444c

0801ff4c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 801ff4c:	b580      	push	{r7, lr}
 801ff4e:	b082      	sub	sp, #8
 801ff50:	af00      	add	r7, sp, #0
 801ff52:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 801ff54:	6878      	ldr	r0, [r7, #4]
 801ff56:	f7ff ffd3 	bl	801ff00 <LL_RCC_GetClockSource>
 801ff5a:	4603      	mov	r3, r0
}
 801ff5c:	4618      	mov	r0, r3
 801ff5e:	3708      	adds	r7, #8
 801ff60:	46bd      	mov	sp, r7
 801ff62:	bd80      	pop	{r7, pc}

0801ff64 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 801ff64:	b480      	push	{r7}
 801ff66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 801ff68:	4b04      	ldr	r3, [pc, #16]	@ (801ff7c <LL_RCC_PLL_GetSource+0x18>)
 801ff6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ff6c:	f003 0303 	and.w	r3, r3, #3
}
 801ff70:	4618      	mov	r0, r3
 801ff72:	46bd      	mov	sp, r7
 801ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff78:	4770      	bx	lr
 801ff7a:	bf00      	nop
 801ff7c:	58024400 	.word	0x58024400

0801ff80 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 801ff80:	b480      	push	{r7}
 801ff82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 801ff84:	4b07      	ldr	r3, [pc, #28]	@ (801ffa4 <LL_RCC_PLL1P_IsEnabled+0x24>)
 801ff86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ff88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ff8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ff90:	d101      	bne.n	801ff96 <LL_RCC_PLL1P_IsEnabled+0x16>
 801ff92:	2301      	movs	r3, #1
 801ff94:	e000      	b.n	801ff98 <LL_RCC_PLL1P_IsEnabled+0x18>
 801ff96:	2300      	movs	r3, #0
}
 801ff98:	4618      	mov	r0, r3
 801ff9a:	46bd      	mov	sp, r7
 801ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffa0:	4770      	bx	lr
 801ffa2:	bf00      	nop
 801ffa4:	58024400 	.word	0x58024400

0801ffa8 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 801ffa8:	b480      	push	{r7}
 801ffaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 801ffac:	4b07      	ldr	r3, [pc, #28]	@ (801ffcc <LL_RCC_PLL1Q_IsEnabled+0x24>)
 801ffae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ffb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ffb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ffb8:	d101      	bne.n	801ffbe <LL_RCC_PLL1Q_IsEnabled+0x16>
 801ffba:	2301      	movs	r3, #1
 801ffbc:	e000      	b.n	801ffc0 <LL_RCC_PLL1Q_IsEnabled+0x18>
 801ffbe:	2300      	movs	r3, #0
}
 801ffc0:	4618      	mov	r0, r3
 801ffc2:	46bd      	mov	sp, r7
 801ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffc8:	4770      	bx	lr
 801ffca:	bf00      	nop
 801ffcc:	58024400 	.word	0x58024400

0801ffd0 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 801ffd0:	b480      	push	{r7}
 801ffd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 801ffd4:	4b07      	ldr	r3, [pc, #28]	@ (801fff4 <LL_RCC_PLL1R_IsEnabled+0x24>)
 801ffd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ffd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801ffdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801ffe0:	d101      	bne.n	801ffe6 <LL_RCC_PLL1R_IsEnabled+0x16>
 801ffe2:	2301      	movs	r3, #1
 801ffe4:	e000      	b.n	801ffe8 <LL_RCC_PLL1R_IsEnabled+0x18>
 801ffe6:	2300      	movs	r3, #0
}
 801ffe8:	4618      	mov	r0, r3
 801ffea:	46bd      	mov	sp, r7
 801ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fff0:	4770      	bx	lr
 801fff2:	bf00      	nop
 801fff4:	58024400 	.word	0x58024400

0801fff8 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 801fff8:	b480      	push	{r7}
 801fffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 801fffc:	4b06      	ldr	r3, [pc, #24]	@ (8020018 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 801fffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020000:	f003 0301 	and.w	r3, r3, #1
 8020004:	2b01      	cmp	r3, #1
 8020006:	d101      	bne.n	802000c <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8020008:	2301      	movs	r3, #1
 802000a:	e000      	b.n	802000e <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 802000c:	2300      	movs	r3, #0
}
 802000e:	4618      	mov	r0, r3
 8020010:	46bd      	mov	sp, r7
 8020012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020016:	4770      	bx	lr
 8020018:	58024400 	.word	0x58024400

0802001c <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 802001c:	b480      	push	{r7}
 802001e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8020020:	4b04      	ldr	r3, [pc, #16]	@ (8020034 <LL_RCC_PLL1_GetN+0x18>)
 8020022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020028:	3301      	adds	r3, #1
}
 802002a:	4618      	mov	r0, r3
 802002c:	46bd      	mov	sp, r7
 802002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020032:	4770      	bx	lr
 8020034:	58024400 	.word	0x58024400

08020038 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 8020038:	b480      	push	{r7}
 802003a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 802003c:	4b04      	ldr	r3, [pc, #16]	@ (8020050 <LL_RCC_PLL1_GetM+0x18>)
 802003e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020040:	091b      	lsrs	r3, r3, #4
 8020042:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8020046:	4618      	mov	r0, r3
 8020048:	46bd      	mov	sp, r7
 802004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802004e:	4770      	bx	lr
 8020050:	58024400 	.word	0x58024400

08020054 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8020054:	b480      	push	{r7}
 8020056:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8020058:	4b05      	ldr	r3, [pc, #20]	@ (8020070 <LL_RCC_PLL1_GetP+0x1c>)
 802005a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802005c:	0a5b      	lsrs	r3, r3, #9
 802005e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020062:	3301      	adds	r3, #1
}
 8020064:	4618      	mov	r0, r3
 8020066:	46bd      	mov	sp, r7
 8020068:	f85d 7b04 	ldr.w	r7, [sp], #4
 802006c:	4770      	bx	lr
 802006e:	bf00      	nop
 8020070:	58024400 	.word	0x58024400

08020074 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 8020074:	b480      	push	{r7}
 8020076:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8020078:	4b05      	ldr	r3, [pc, #20]	@ (8020090 <LL_RCC_PLL1_GetQ+0x1c>)
 802007a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802007c:	0c1b      	lsrs	r3, r3, #16
 802007e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020082:	3301      	adds	r3, #1
}
 8020084:	4618      	mov	r0, r3
 8020086:	46bd      	mov	sp, r7
 8020088:	f85d 7b04 	ldr.w	r7, [sp], #4
 802008c:	4770      	bx	lr
 802008e:	bf00      	nop
 8020090:	58024400 	.word	0x58024400

08020094 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8020094:	b480      	push	{r7}
 8020096:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8020098:	4b05      	ldr	r3, [pc, #20]	@ (80200b0 <LL_RCC_PLL1_GetR+0x1c>)
 802009a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802009c:	0e1b      	lsrs	r3, r3, #24
 802009e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80200a2:	3301      	adds	r3, #1
}
 80200a4:	4618      	mov	r0, r3
 80200a6:	46bd      	mov	sp, r7
 80200a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200ac:	4770      	bx	lr
 80200ae:	bf00      	nop
 80200b0:	58024400 	.word	0x58024400

080200b4 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 80200b4:	b480      	push	{r7}
 80200b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 80200b8:	4b04      	ldr	r3, [pc, #16]	@ (80200cc <LL_RCC_PLL1_GetFRACN+0x18>)
 80200ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80200bc:	08db      	lsrs	r3, r3, #3
 80200be:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80200c2:	4618      	mov	r0, r3
 80200c4:	46bd      	mov	sp, r7
 80200c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200ca:	4770      	bx	lr
 80200cc:	58024400 	.word	0x58024400

080200d0 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 80200d0:	b480      	push	{r7}
 80200d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 80200d4:	4b07      	ldr	r3, [pc, #28]	@ (80200f4 <LL_RCC_PLL2_IsReady+0x24>)
 80200d6:	681b      	ldr	r3, [r3, #0]
 80200d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80200dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80200e0:	d101      	bne.n	80200e6 <LL_RCC_PLL2_IsReady+0x16>
 80200e2:	2301      	movs	r3, #1
 80200e4:	e000      	b.n	80200e8 <LL_RCC_PLL2_IsReady+0x18>
 80200e6:	2300      	movs	r3, #0
}
 80200e8:	4618      	mov	r0, r3
 80200ea:	46bd      	mov	sp, r7
 80200ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200f0:	4770      	bx	lr
 80200f2:	bf00      	nop
 80200f4:	58024400 	.word	0x58024400

080200f8 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 80200f8:	b480      	push	{r7}
 80200fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 80200fc:	4b07      	ldr	r3, [pc, #28]	@ (802011c <LL_RCC_PLL2P_IsEnabled+0x24>)
 80200fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020100:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8020104:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8020108:	d101      	bne.n	802010e <LL_RCC_PLL2P_IsEnabled+0x16>
 802010a:	2301      	movs	r3, #1
 802010c:	e000      	b.n	8020110 <LL_RCC_PLL2P_IsEnabled+0x18>
 802010e:	2300      	movs	r3, #0
}
 8020110:	4618      	mov	r0, r3
 8020112:	46bd      	mov	sp, r7
 8020114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020118:	4770      	bx	lr
 802011a:	bf00      	nop
 802011c:	58024400 	.word	0x58024400

08020120 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8020120:	b480      	push	{r7}
 8020122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8020124:	4b07      	ldr	r3, [pc, #28]	@ (8020144 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8020126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802012c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020130:	d101      	bne.n	8020136 <LL_RCC_PLL2Q_IsEnabled+0x16>
 8020132:	2301      	movs	r3, #1
 8020134:	e000      	b.n	8020138 <LL_RCC_PLL2Q_IsEnabled+0x18>
 8020136:	2300      	movs	r3, #0
}
 8020138:	4618      	mov	r0, r3
 802013a:	46bd      	mov	sp, r7
 802013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020140:	4770      	bx	lr
 8020142:	bf00      	nop
 8020144:	58024400 	.word	0x58024400

08020148 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8020148:	b480      	push	{r7}
 802014a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 802014c:	4b07      	ldr	r3, [pc, #28]	@ (802016c <LL_RCC_PLL2R_IsEnabled+0x24>)
 802014e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8020154:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8020158:	d101      	bne.n	802015e <LL_RCC_PLL2R_IsEnabled+0x16>
 802015a:	2301      	movs	r3, #1
 802015c:	e000      	b.n	8020160 <LL_RCC_PLL2R_IsEnabled+0x18>
 802015e:	2300      	movs	r3, #0
}
 8020160:	4618      	mov	r0, r3
 8020162:	46bd      	mov	sp, r7
 8020164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020168:	4770      	bx	lr
 802016a:	bf00      	nop
 802016c:	58024400 	.word	0x58024400

08020170 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8020170:	b480      	push	{r7}
 8020172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8020174:	4b06      	ldr	r3, [pc, #24]	@ (8020190 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8020176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020178:	f003 0310 	and.w	r3, r3, #16
 802017c:	2b10      	cmp	r3, #16
 802017e:	d101      	bne.n	8020184 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8020180:	2301      	movs	r3, #1
 8020182:	e000      	b.n	8020186 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8020184:	2300      	movs	r3, #0
}
 8020186:	4618      	mov	r0, r3
 8020188:	46bd      	mov	sp, r7
 802018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802018e:	4770      	bx	lr
 8020190:	58024400 	.word	0x58024400

08020194 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8020194:	b480      	push	{r7}
 8020196:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8020198:	4b04      	ldr	r3, [pc, #16]	@ (80201ac <LL_RCC_PLL2_GetN+0x18>)
 802019a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802019c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80201a0:	3301      	adds	r3, #1
}
 80201a2:	4618      	mov	r0, r3
 80201a4:	46bd      	mov	sp, r7
 80201a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201aa:	4770      	bx	lr
 80201ac:	58024400 	.word	0x58024400

080201b0 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 80201b0:	b480      	push	{r7}
 80201b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 80201b4:	4b04      	ldr	r3, [pc, #16]	@ (80201c8 <LL_RCC_PLL2_GetM+0x18>)
 80201b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80201b8:	0b1b      	lsrs	r3, r3, #12
 80201ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80201be:	4618      	mov	r0, r3
 80201c0:	46bd      	mov	sp, r7
 80201c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201c6:	4770      	bx	lr
 80201c8:	58024400 	.word	0x58024400

080201cc <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 80201cc:	b480      	push	{r7}
 80201ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 80201d0:	4b05      	ldr	r3, [pc, #20]	@ (80201e8 <LL_RCC_PLL2_GetP+0x1c>)
 80201d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80201d4:	0a5b      	lsrs	r3, r3, #9
 80201d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80201da:	3301      	adds	r3, #1
}
 80201dc:	4618      	mov	r0, r3
 80201de:	46bd      	mov	sp, r7
 80201e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201e4:	4770      	bx	lr
 80201e6:	bf00      	nop
 80201e8:	58024400 	.word	0x58024400

080201ec <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 80201ec:	b480      	push	{r7}
 80201ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 80201f0:	4b05      	ldr	r3, [pc, #20]	@ (8020208 <LL_RCC_PLL2_GetQ+0x1c>)
 80201f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80201f4:	0c1b      	lsrs	r3, r3, #16
 80201f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80201fa:	3301      	adds	r3, #1
}
 80201fc:	4618      	mov	r0, r3
 80201fe:	46bd      	mov	sp, r7
 8020200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020204:	4770      	bx	lr
 8020206:	bf00      	nop
 8020208:	58024400 	.word	0x58024400

0802020c <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 802020c:	b480      	push	{r7}
 802020e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8020210:	4b05      	ldr	r3, [pc, #20]	@ (8020228 <LL_RCC_PLL2_GetR+0x1c>)
 8020212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020214:	0e1b      	lsrs	r3, r3, #24
 8020216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802021a:	3301      	adds	r3, #1
}
 802021c:	4618      	mov	r0, r3
 802021e:	46bd      	mov	sp, r7
 8020220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020224:	4770      	bx	lr
 8020226:	bf00      	nop
 8020228:	58024400 	.word	0x58024400

0802022c <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 802022c:	b480      	push	{r7}
 802022e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8020230:	4b04      	ldr	r3, [pc, #16]	@ (8020244 <LL_RCC_PLL2_GetFRACN+0x18>)
 8020232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020234:	08db      	lsrs	r3, r3, #3
 8020236:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 802023a:	4618      	mov	r0, r3
 802023c:	46bd      	mov	sp, r7
 802023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020242:	4770      	bx	lr
 8020244:	58024400 	.word	0x58024400

08020248 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8020248:	b480      	push	{r7}
 802024a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 802024c:	4b07      	ldr	r3, [pc, #28]	@ (802026c <LL_RCC_PLL3_IsReady+0x24>)
 802024e:	681b      	ldr	r3, [r3, #0]
 8020250:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8020254:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020258:	d101      	bne.n	802025e <LL_RCC_PLL3_IsReady+0x16>
 802025a:	2301      	movs	r3, #1
 802025c:	e000      	b.n	8020260 <LL_RCC_PLL3_IsReady+0x18>
 802025e:	2300      	movs	r3, #0
}
 8020260:	4618      	mov	r0, r3
 8020262:	46bd      	mov	sp, r7
 8020264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020268:	4770      	bx	lr
 802026a:	bf00      	nop
 802026c:	58024400 	.word	0x58024400

08020270 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8020270:	b480      	push	{r7}
 8020272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8020274:	4b07      	ldr	r3, [pc, #28]	@ (8020294 <LL_RCC_PLL3P_IsEnabled+0x24>)
 8020276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020278:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802027c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8020280:	d101      	bne.n	8020286 <LL_RCC_PLL3P_IsEnabled+0x16>
 8020282:	2301      	movs	r3, #1
 8020284:	e000      	b.n	8020288 <LL_RCC_PLL3P_IsEnabled+0x18>
 8020286:	2300      	movs	r3, #0
}
 8020288:	4618      	mov	r0, r3
 802028a:	46bd      	mov	sp, r7
 802028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020290:	4770      	bx	lr
 8020292:	bf00      	nop
 8020294:	58024400 	.word	0x58024400

08020298 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8020298:	b480      	push	{r7}
 802029a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 802029c:	4b07      	ldr	r3, [pc, #28]	@ (80202bc <LL_RCC_PLL3Q_IsEnabled+0x24>)
 802029e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80202a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80202a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80202a8:	d101      	bne.n	80202ae <LL_RCC_PLL3Q_IsEnabled+0x16>
 80202aa:	2301      	movs	r3, #1
 80202ac:	e000      	b.n	80202b0 <LL_RCC_PLL3Q_IsEnabled+0x18>
 80202ae:	2300      	movs	r3, #0
}
 80202b0:	4618      	mov	r0, r3
 80202b2:	46bd      	mov	sp, r7
 80202b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202b8:	4770      	bx	lr
 80202ba:	bf00      	nop
 80202bc:	58024400 	.word	0x58024400

080202c0 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 80202c0:	b480      	push	{r7}
 80202c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 80202c4:	4b07      	ldr	r3, [pc, #28]	@ (80202e4 <LL_RCC_PLL3R_IsEnabled+0x24>)
 80202c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80202c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80202cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80202d0:	d101      	bne.n	80202d6 <LL_RCC_PLL3R_IsEnabled+0x16>
 80202d2:	2301      	movs	r3, #1
 80202d4:	e000      	b.n	80202d8 <LL_RCC_PLL3R_IsEnabled+0x18>
 80202d6:	2300      	movs	r3, #0
}
 80202d8:	4618      	mov	r0, r3
 80202da:	46bd      	mov	sp, r7
 80202dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202e0:	4770      	bx	lr
 80202e2:	bf00      	nop
 80202e4:	58024400 	.word	0x58024400

080202e8 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 80202e8:	b480      	push	{r7}
 80202ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 80202ec:	4b07      	ldr	r3, [pc, #28]	@ (802030c <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 80202ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80202f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80202f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80202f8:	d101      	bne.n	80202fe <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 80202fa:	2301      	movs	r3, #1
 80202fc:	e000      	b.n	8020300 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 80202fe:	2300      	movs	r3, #0
}
 8020300:	4618      	mov	r0, r3
 8020302:	46bd      	mov	sp, r7
 8020304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020308:	4770      	bx	lr
 802030a:	bf00      	nop
 802030c:	58024400 	.word	0x58024400

08020310 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8020310:	b480      	push	{r7}
 8020312:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8020314:	4b04      	ldr	r3, [pc, #16]	@ (8020328 <LL_RCC_PLL3_GetN+0x18>)
 8020316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802031c:	3301      	adds	r3, #1
}
 802031e:	4618      	mov	r0, r3
 8020320:	46bd      	mov	sp, r7
 8020322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020326:	4770      	bx	lr
 8020328:	58024400 	.word	0x58024400

0802032c <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 802032c:	b480      	push	{r7}
 802032e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8020330:	4b04      	ldr	r3, [pc, #16]	@ (8020344 <LL_RCC_PLL3_GetM+0x18>)
 8020332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020334:	0d1b      	lsrs	r3, r3, #20
 8020336:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 802033a:	4618      	mov	r0, r3
 802033c:	46bd      	mov	sp, r7
 802033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020342:	4770      	bx	lr
 8020344:	58024400 	.word	0x58024400

08020348 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8020348:	b480      	push	{r7}
 802034a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 802034c:	4b05      	ldr	r3, [pc, #20]	@ (8020364 <LL_RCC_PLL3_GetP+0x1c>)
 802034e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020350:	0a5b      	lsrs	r3, r3, #9
 8020352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020356:	3301      	adds	r3, #1
}
 8020358:	4618      	mov	r0, r3
 802035a:	46bd      	mov	sp, r7
 802035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020360:	4770      	bx	lr
 8020362:	bf00      	nop
 8020364:	58024400 	.word	0x58024400

08020368 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8020368:	b480      	push	{r7}
 802036a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 802036c:	4b05      	ldr	r3, [pc, #20]	@ (8020384 <LL_RCC_PLL3_GetQ+0x1c>)
 802036e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020370:	0c1b      	lsrs	r3, r3, #16
 8020372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020376:	3301      	adds	r3, #1
}
 8020378:	4618      	mov	r0, r3
 802037a:	46bd      	mov	sp, r7
 802037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020380:	4770      	bx	lr
 8020382:	bf00      	nop
 8020384:	58024400 	.word	0x58024400

08020388 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8020388:	b480      	push	{r7}
 802038a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 802038c:	4b05      	ldr	r3, [pc, #20]	@ (80203a4 <LL_RCC_PLL3_GetR+0x1c>)
 802038e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020390:	0e1b      	lsrs	r3, r3, #24
 8020392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020396:	3301      	adds	r3, #1
}
 8020398:	4618      	mov	r0, r3
 802039a:	46bd      	mov	sp, r7
 802039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a0:	4770      	bx	lr
 80203a2:	bf00      	nop
 80203a4:	58024400 	.word	0x58024400

080203a8 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 80203a8:	b480      	push	{r7}
 80203aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 80203ac:	4b04      	ldr	r3, [pc, #16]	@ (80203c0 <LL_RCC_PLL3_GetFRACN+0x18>)
 80203ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80203b0:	08db      	lsrs	r3, r3, #3
 80203b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80203b6:	4618      	mov	r0, r3
 80203b8:	46bd      	mov	sp, r7
 80203ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203be:	4770      	bx	lr
 80203c0:	58024400 	.word	0x58024400

080203c4 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 80203c4:	b580      	push	{r7, lr}
 80203c6:	b08a      	sub	sp, #40	@ 0x28
 80203c8:	af02      	add	r7, sp, #8
 80203ca:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 80203cc:	2300      	movs	r3, #0
 80203ce:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 80203d0:	2300      	movs	r3, #0
 80203d2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 80203d4:	f7ff fdc6 	bl	801ff64 <LL_RCC_PLL_GetSource>
 80203d8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 80203da:	697b      	ldr	r3, [r7, #20]
 80203dc:	2b02      	cmp	r3, #2
 80203de:	d01f      	beq.n	8020420 <LL_RCC_GetPLL1ClockFreq+0x5c>
 80203e0:	697b      	ldr	r3, [r7, #20]
 80203e2:	2b02      	cmp	r3, #2
 80203e4:	d824      	bhi.n	8020430 <LL_RCC_GetPLL1ClockFreq+0x6c>
 80203e6:	697b      	ldr	r3, [r7, #20]
 80203e8:	2b00      	cmp	r3, #0
 80203ea:	d003      	beq.n	80203f4 <LL_RCC_GetPLL1ClockFreq+0x30>
 80203ec:	697b      	ldr	r3, [r7, #20]
 80203ee:	2b01      	cmp	r3, #1
 80203f0:	d00e      	beq.n	8020410 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 80203f2:	e01d      	b.n	8020430 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 80203f4:	f7ff fcf8 	bl	801fde8 <LL_RCC_HSI_IsReady>
 80203f8:	4603      	mov	r3, r0
 80203fa:	2b00      	cmp	r3, #0
 80203fc:	d01a      	beq.n	8020434 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80203fe:	f7ff fd05 	bl	801fe0c <LL_RCC_HSI_GetDivider>
 8020402:	4603      	mov	r3, r0
 8020404:	08db      	lsrs	r3, r3, #3
 8020406:	4a38      	ldr	r2, [pc, #224]	@ (80204e8 <LL_RCC_GetPLL1ClockFreq+0x124>)
 8020408:	fa22 f303 	lsr.w	r3, r2, r3
 802040c:	61fb      	str	r3, [r7, #28]
      break;
 802040e:	e011      	b.n	8020434 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8020410:	f7ff fd0a 	bl	801fe28 <LL_RCC_CSI_IsReady>
 8020414:	4603      	mov	r3, r0
 8020416:	2b00      	cmp	r3, #0
 8020418:	d00e      	beq.n	8020438 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 802041a:	4b34      	ldr	r3, [pc, #208]	@ (80204ec <LL_RCC_GetPLL1ClockFreq+0x128>)
 802041c:	61fb      	str	r3, [r7, #28]
      break;
 802041e:	e00b      	b.n	8020438 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8020420:	f7ff fcce 	bl	801fdc0 <LL_RCC_HSE_IsReady>
 8020424:	4603      	mov	r3, r0
 8020426:	2b00      	cmp	r3, #0
 8020428:	d008      	beq.n	802043c <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 802042a:	4b31      	ldr	r3, [pc, #196]	@ (80204f0 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 802042c:	61fb      	str	r3, [r7, #28]
      break;
 802042e:	e005      	b.n	802043c <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8020430:	bf00      	nop
 8020432:	e004      	b.n	802043e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8020434:	bf00      	nop
 8020436:	e002      	b.n	802043e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8020438:	bf00      	nop
 802043a:	e000      	b.n	802043e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 802043c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 802043e:	687b      	ldr	r3, [r7, #4]
 8020440:	2200      	movs	r2, #0
 8020442:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8020444:	687b      	ldr	r3, [r7, #4]
 8020446:	2200      	movs	r2, #0
 8020448:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 802044a:	687b      	ldr	r3, [r7, #4]
 802044c:	2200      	movs	r2, #0
 802044e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8020450:	f7ff fdf2 	bl	8020038 <LL_RCC_PLL1_GetM>
 8020454:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8020456:	f7ff fde1 	bl	802001c <LL_RCC_PLL1_GetN>
 802045a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 802045c:	f7ff fdcc 	bl	801fff8 <LL_RCC_PLL1FRACN_IsEnabled>
 8020460:	4603      	mov	r3, r0
 8020462:	2b00      	cmp	r3, #0
 8020464:	d002      	beq.n	802046c <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8020466:	f7ff fe25 	bl	80200b4 <LL_RCC_PLL1_GetFRACN>
 802046a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 802046c:	693b      	ldr	r3, [r7, #16]
 802046e:	2b00      	cmp	r3, #0
 8020470:	d035      	beq.n	80204de <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 8020472:	f7ff fd85 	bl	801ff80 <LL_RCC_PLL1P_IsEnabled>
 8020476:	4603      	mov	r3, r0
 8020478:	2b00      	cmp	r3, #0
 802047a:	d00c      	beq.n	8020496 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 802047c:	f7ff fdea 	bl	8020054 <LL_RCC_PLL1_GetP>
 8020480:	4603      	mov	r3, r0
 8020482:	9300      	str	r3, [sp, #0]
 8020484:	69bb      	ldr	r3, [r7, #24]
 8020486:	68fa      	ldr	r2, [r7, #12]
 8020488:	6939      	ldr	r1, [r7, #16]
 802048a:	69f8      	ldr	r0, [r7, #28]
 802048c:	f000 f964 	bl	8020758 <LL_RCC_CalcPLLClockFreq>
 8020490:	4602      	mov	r2, r0
 8020492:	687b      	ldr	r3, [r7, #4]
 8020494:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 8020496:	f7ff fd87 	bl	801ffa8 <LL_RCC_PLL1Q_IsEnabled>
 802049a:	4603      	mov	r3, r0
 802049c:	2b00      	cmp	r3, #0
 802049e:	d00c      	beq.n	80204ba <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 80204a0:	f7ff fde8 	bl	8020074 <LL_RCC_PLL1_GetQ>
 80204a4:	4603      	mov	r3, r0
 80204a6:	9300      	str	r3, [sp, #0]
 80204a8:	69bb      	ldr	r3, [r7, #24]
 80204aa:	68fa      	ldr	r2, [r7, #12]
 80204ac:	6939      	ldr	r1, [r7, #16]
 80204ae:	69f8      	ldr	r0, [r7, #28]
 80204b0:	f000 f952 	bl	8020758 <LL_RCC_CalcPLLClockFreq>
 80204b4:	4602      	mov	r2, r0
 80204b6:	687b      	ldr	r3, [r7, #4]
 80204b8:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 80204ba:	f7ff fd89 	bl	801ffd0 <LL_RCC_PLL1R_IsEnabled>
 80204be:	4603      	mov	r3, r0
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	d00c      	beq.n	80204de <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 80204c4:	f7ff fde6 	bl	8020094 <LL_RCC_PLL1_GetR>
 80204c8:	4603      	mov	r3, r0
 80204ca:	9300      	str	r3, [sp, #0]
 80204cc:	69bb      	ldr	r3, [r7, #24]
 80204ce:	68fa      	ldr	r2, [r7, #12]
 80204d0:	6939      	ldr	r1, [r7, #16]
 80204d2:	69f8      	ldr	r0, [r7, #28]
 80204d4:	f000 f940 	bl	8020758 <LL_RCC_CalcPLLClockFreq>
 80204d8:	4602      	mov	r2, r0
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	609a      	str	r2, [r3, #8]
    }
  }
}
 80204de:	bf00      	nop
 80204e0:	3720      	adds	r7, #32
 80204e2:	46bd      	mov	sp, r7
 80204e4:	bd80      	pop	{r7, pc}
 80204e6:	bf00      	nop
 80204e8:	03d09000 	.word	0x03d09000
 80204ec:	003d0900 	.word	0x003d0900
 80204f0:	017d7840 	.word	0x017d7840

080204f4 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 80204f4:	b580      	push	{r7, lr}
 80204f6:	b08a      	sub	sp, #40	@ 0x28
 80204f8:	af02      	add	r7, sp, #8
 80204fa:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 80204fc:	2300      	movs	r3, #0
 80204fe:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8020500:	2300      	movs	r3, #0
 8020502:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8020504:	f7ff fd2e 	bl	801ff64 <LL_RCC_PLL_GetSource>
 8020508:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 802050a:	697b      	ldr	r3, [r7, #20]
 802050c:	2b02      	cmp	r3, #2
 802050e:	d01f      	beq.n	8020550 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8020510:	697b      	ldr	r3, [r7, #20]
 8020512:	2b02      	cmp	r3, #2
 8020514:	d824      	bhi.n	8020560 <LL_RCC_GetPLL2ClockFreq+0x6c>
 8020516:	697b      	ldr	r3, [r7, #20]
 8020518:	2b00      	cmp	r3, #0
 802051a:	d003      	beq.n	8020524 <LL_RCC_GetPLL2ClockFreq+0x30>
 802051c:	697b      	ldr	r3, [r7, #20]
 802051e:	2b01      	cmp	r3, #1
 8020520:	d00e      	beq.n	8020540 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8020522:	e01d      	b.n	8020560 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8020524:	f7ff fc60 	bl	801fde8 <LL_RCC_HSI_IsReady>
 8020528:	4603      	mov	r3, r0
 802052a:	2b00      	cmp	r3, #0
 802052c:	d01a      	beq.n	8020564 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 802052e:	f7ff fc6d 	bl	801fe0c <LL_RCC_HSI_GetDivider>
 8020532:	4603      	mov	r3, r0
 8020534:	08db      	lsrs	r3, r3, #3
 8020536:	4a38      	ldr	r2, [pc, #224]	@ (8020618 <LL_RCC_GetPLL2ClockFreq+0x124>)
 8020538:	fa22 f303 	lsr.w	r3, r2, r3
 802053c:	61fb      	str	r3, [r7, #28]
      break;
 802053e:	e011      	b.n	8020564 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8020540:	f7ff fc72 	bl	801fe28 <LL_RCC_CSI_IsReady>
 8020544:	4603      	mov	r3, r0
 8020546:	2b00      	cmp	r3, #0
 8020548:	d00e      	beq.n	8020568 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 802054a:	4b34      	ldr	r3, [pc, #208]	@ (802061c <LL_RCC_GetPLL2ClockFreq+0x128>)
 802054c:	61fb      	str	r3, [r7, #28]
      break;
 802054e:	e00b      	b.n	8020568 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8020550:	f7ff fc36 	bl	801fdc0 <LL_RCC_HSE_IsReady>
 8020554:	4603      	mov	r3, r0
 8020556:	2b00      	cmp	r3, #0
 8020558:	d008      	beq.n	802056c <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 802055a:	4b31      	ldr	r3, [pc, #196]	@ (8020620 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 802055c:	61fb      	str	r3, [r7, #28]
      break;
 802055e:	e005      	b.n	802056c <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8020560:	bf00      	nop
 8020562:	e004      	b.n	802056e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8020564:	bf00      	nop
 8020566:	e002      	b.n	802056e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8020568:	bf00      	nop
 802056a:	e000      	b.n	802056e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 802056c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	2200      	movs	r2, #0
 8020572:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8020574:	687b      	ldr	r3, [r7, #4]
 8020576:	2200      	movs	r2, #0
 8020578:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	2200      	movs	r2, #0
 802057e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8020580:	f7ff fe16 	bl	80201b0 <LL_RCC_PLL2_GetM>
 8020584:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8020586:	f7ff fe05 	bl	8020194 <LL_RCC_PLL2_GetN>
 802058a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 802058c:	f7ff fdf0 	bl	8020170 <LL_RCC_PLL2FRACN_IsEnabled>
 8020590:	4603      	mov	r3, r0
 8020592:	2b00      	cmp	r3, #0
 8020594:	d002      	beq.n	802059c <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8020596:	f7ff fe49 	bl	802022c <LL_RCC_PLL2_GetFRACN>
 802059a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 802059c:	693b      	ldr	r3, [r7, #16]
 802059e:	2b00      	cmp	r3, #0
 80205a0:	d035      	beq.n	802060e <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 80205a2:	f7ff fda9 	bl	80200f8 <LL_RCC_PLL2P_IsEnabled>
 80205a6:	4603      	mov	r3, r0
 80205a8:	2b00      	cmp	r3, #0
 80205aa:	d00c      	beq.n	80205c6 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 80205ac:	f7ff fe0e 	bl	80201cc <LL_RCC_PLL2_GetP>
 80205b0:	4603      	mov	r3, r0
 80205b2:	9300      	str	r3, [sp, #0]
 80205b4:	69bb      	ldr	r3, [r7, #24]
 80205b6:	68fa      	ldr	r2, [r7, #12]
 80205b8:	6939      	ldr	r1, [r7, #16]
 80205ba:	69f8      	ldr	r0, [r7, #28]
 80205bc:	f000 f8cc 	bl	8020758 <LL_RCC_CalcPLLClockFreq>
 80205c0:	4602      	mov	r2, r0
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 80205c6:	f7ff fdab 	bl	8020120 <LL_RCC_PLL2Q_IsEnabled>
 80205ca:	4603      	mov	r3, r0
 80205cc:	2b00      	cmp	r3, #0
 80205ce:	d00c      	beq.n	80205ea <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 80205d0:	f7ff fe0c 	bl	80201ec <LL_RCC_PLL2_GetQ>
 80205d4:	4603      	mov	r3, r0
 80205d6:	9300      	str	r3, [sp, #0]
 80205d8:	69bb      	ldr	r3, [r7, #24]
 80205da:	68fa      	ldr	r2, [r7, #12]
 80205dc:	6939      	ldr	r1, [r7, #16]
 80205de:	69f8      	ldr	r0, [r7, #28]
 80205e0:	f000 f8ba 	bl	8020758 <LL_RCC_CalcPLLClockFreq>
 80205e4:	4602      	mov	r2, r0
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 80205ea:	f7ff fdad 	bl	8020148 <LL_RCC_PLL2R_IsEnabled>
 80205ee:	4603      	mov	r3, r0
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	d00c      	beq.n	802060e <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 80205f4:	f7ff fe0a 	bl	802020c <LL_RCC_PLL2_GetR>
 80205f8:	4603      	mov	r3, r0
 80205fa:	9300      	str	r3, [sp, #0]
 80205fc:	69bb      	ldr	r3, [r7, #24]
 80205fe:	68fa      	ldr	r2, [r7, #12]
 8020600:	6939      	ldr	r1, [r7, #16]
 8020602:	69f8      	ldr	r0, [r7, #28]
 8020604:	f000 f8a8 	bl	8020758 <LL_RCC_CalcPLLClockFreq>
 8020608:	4602      	mov	r2, r0
 802060a:	687b      	ldr	r3, [r7, #4]
 802060c:	609a      	str	r2, [r3, #8]
    }
  }
}
 802060e:	bf00      	nop
 8020610:	3720      	adds	r7, #32
 8020612:	46bd      	mov	sp, r7
 8020614:	bd80      	pop	{r7, pc}
 8020616:	bf00      	nop
 8020618:	03d09000 	.word	0x03d09000
 802061c:	003d0900 	.word	0x003d0900
 8020620:	017d7840 	.word	0x017d7840

08020624 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8020624:	b580      	push	{r7, lr}
 8020626:	b08a      	sub	sp, #40	@ 0x28
 8020628:	af02      	add	r7, sp, #8
 802062a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 802062c:	2300      	movs	r3, #0
 802062e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8020630:	2300      	movs	r3, #0
 8020632:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8020634:	f7ff fc96 	bl	801ff64 <LL_RCC_PLL_GetSource>
 8020638:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 802063a:	697b      	ldr	r3, [r7, #20]
 802063c:	2b02      	cmp	r3, #2
 802063e:	d01f      	beq.n	8020680 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8020640:	697b      	ldr	r3, [r7, #20]
 8020642:	2b02      	cmp	r3, #2
 8020644:	d824      	bhi.n	8020690 <LL_RCC_GetPLL3ClockFreq+0x6c>
 8020646:	697b      	ldr	r3, [r7, #20]
 8020648:	2b00      	cmp	r3, #0
 802064a:	d003      	beq.n	8020654 <LL_RCC_GetPLL3ClockFreq+0x30>
 802064c:	697b      	ldr	r3, [r7, #20]
 802064e:	2b01      	cmp	r3, #1
 8020650:	d00e      	beq.n	8020670 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8020652:	e01d      	b.n	8020690 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8020654:	f7ff fbc8 	bl	801fde8 <LL_RCC_HSI_IsReady>
 8020658:	4603      	mov	r3, r0
 802065a:	2b00      	cmp	r3, #0
 802065c:	d01a      	beq.n	8020694 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 802065e:	f7ff fbd5 	bl	801fe0c <LL_RCC_HSI_GetDivider>
 8020662:	4603      	mov	r3, r0
 8020664:	08db      	lsrs	r3, r3, #3
 8020666:	4a39      	ldr	r2, [pc, #228]	@ (802074c <LL_RCC_GetPLL3ClockFreq+0x128>)
 8020668:	fa22 f303 	lsr.w	r3, r2, r3
 802066c:	61fb      	str	r3, [r7, #28]
      break;
 802066e:	e011      	b.n	8020694 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8020670:	f7ff fbda 	bl	801fe28 <LL_RCC_CSI_IsReady>
 8020674:	4603      	mov	r3, r0
 8020676:	2b00      	cmp	r3, #0
 8020678:	d00e      	beq.n	8020698 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 802067a:	4b35      	ldr	r3, [pc, #212]	@ (8020750 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 802067c:	61fb      	str	r3, [r7, #28]
      break;
 802067e:	e00b      	b.n	8020698 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8020680:	f7ff fb9e 	bl	801fdc0 <LL_RCC_HSE_IsReady>
 8020684:	4603      	mov	r3, r0
 8020686:	2b00      	cmp	r3, #0
 8020688:	d008      	beq.n	802069c <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 802068a:	4b32      	ldr	r3, [pc, #200]	@ (8020754 <LL_RCC_GetPLL3ClockFreq+0x130>)
 802068c:	61fb      	str	r3, [r7, #28]
      break;
 802068e:	e005      	b.n	802069c <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8020690:	bf00      	nop
 8020692:	e004      	b.n	802069e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8020694:	bf00      	nop
 8020696:	e002      	b.n	802069e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8020698:	bf00      	nop
 802069a:	e000      	b.n	802069e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 802069c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 802069e:	687b      	ldr	r3, [r7, #4]
 80206a0:	2200      	movs	r2, #0
 80206a2:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80206a4:	687b      	ldr	r3, [r7, #4]
 80206a6:	2200      	movs	r2, #0
 80206a8:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	2200      	movs	r2, #0
 80206ae:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 80206b0:	f7ff fe3c 	bl	802032c <LL_RCC_PLL3_GetM>
 80206b4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 80206b6:	f7ff fe2b 	bl	8020310 <LL_RCC_PLL3_GetN>
 80206ba:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 80206bc:	f7ff fe14 	bl	80202e8 <LL_RCC_PLL3FRACN_IsEnabled>
 80206c0:	4603      	mov	r3, r0
 80206c2:	2b00      	cmp	r3, #0
 80206c4:	d002      	beq.n	80206cc <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 80206c6:	f7ff fe6f 	bl	80203a8 <LL_RCC_PLL3_GetFRACN>
 80206ca:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 80206cc:	693b      	ldr	r3, [r7, #16]
 80206ce:	2b00      	cmp	r3, #0
 80206d0:	d038      	beq.n	8020744 <LL_RCC_GetPLL3ClockFreq+0x120>
 80206d2:	69fb      	ldr	r3, [r7, #28]
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	d035      	beq.n	8020744 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 80206d8:	f7ff fdca 	bl	8020270 <LL_RCC_PLL3P_IsEnabled>
 80206dc:	4603      	mov	r3, r0
 80206de:	2b00      	cmp	r3, #0
 80206e0:	d00c      	beq.n	80206fc <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 80206e2:	f7ff fe31 	bl	8020348 <LL_RCC_PLL3_GetP>
 80206e6:	4603      	mov	r3, r0
 80206e8:	9300      	str	r3, [sp, #0]
 80206ea:	69bb      	ldr	r3, [r7, #24]
 80206ec:	68fa      	ldr	r2, [r7, #12]
 80206ee:	6939      	ldr	r1, [r7, #16]
 80206f0:	69f8      	ldr	r0, [r7, #28]
 80206f2:	f000 f831 	bl	8020758 <LL_RCC_CalcPLLClockFreq>
 80206f6:	4602      	mov	r2, r0
 80206f8:	687b      	ldr	r3, [r7, #4]
 80206fa:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 80206fc:	f7ff fdcc 	bl	8020298 <LL_RCC_PLL3Q_IsEnabled>
 8020700:	4603      	mov	r3, r0
 8020702:	2b00      	cmp	r3, #0
 8020704:	d00c      	beq.n	8020720 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 8020706:	f7ff fe2f 	bl	8020368 <LL_RCC_PLL3_GetQ>
 802070a:	4603      	mov	r3, r0
 802070c:	9300      	str	r3, [sp, #0]
 802070e:	69bb      	ldr	r3, [r7, #24]
 8020710:	68fa      	ldr	r2, [r7, #12]
 8020712:	6939      	ldr	r1, [r7, #16]
 8020714:	69f8      	ldr	r0, [r7, #28]
 8020716:	f000 f81f 	bl	8020758 <LL_RCC_CalcPLLClockFreq>
 802071a:	4602      	mov	r2, r0
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8020720:	f7ff fdce 	bl	80202c0 <LL_RCC_PLL3R_IsEnabled>
 8020724:	4603      	mov	r3, r0
 8020726:	2b00      	cmp	r3, #0
 8020728:	d00c      	beq.n	8020744 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 802072a:	f7ff fe2d 	bl	8020388 <LL_RCC_PLL3_GetR>
 802072e:	4603      	mov	r3, r0
 8020730:	9300      	str	r3, [sp, #0]
 8020732:	69bb      	ldr	r3, [r7, #24]
 8020734:	68fa      	ldr	r2, [r7, #12]
 8020736:	6939      	ldr	r1, [r7, #16]
 8020738:	69f8      	ldr	r0, [r7, #28]
 802073a:	f000 f80d 	bl	8020758 <LL_RCC_CalcPLLClockFreq>
 802073e:	4602      	mov	r2, r0
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	609a      	str	r2, [r3, #8]
    }
  }
}
 8020744:	bf00      	nop
 8020746:	3720      	adds	r7, #32
 8020748:	46bd      	mov	sp, r7
 802074a:	bd80      	pop	{r7, pc}
 802074c:	03d09000 	.word	0x03d09000
 8020750:	003d0900 	.word	0x003d0900
 8020754:	017d7840 	.word	0x017d7840

08020758 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8020758:	b480      	push	{r7}
 802075a:	b087      	sub	sp, #28
 802075c:	af00      	add	r7, sp, #0
 802075e:	60f8      	str	r0, [r7, #12]
 8020760:	60b9      	str	r1, [r7, #8]
 8020762:	607a      	str	r2, [r7, #4]
 8020764:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8020766:	68fb      	ldr	r3, [r7, #12]
 8020768:	ee07 3a90 	vmov	s15, r3
 802076c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020770:	68bb      	ldr	r3, [r7, #8]
 8020772:	ee07 3a90 	vmov	s15, r3
 8020776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802077a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802077e:	687b      	ldr	r3, [r7, #4]
 8020780:	ee07 3a90 	vmov	s15, r3
 8020784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020788:	683b      	ldr	r3, [r7, #0]
 802078a:	ee07 3a90 	vmov	s15, r3
 802078e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8020792:	eddf 5a10 	vldr	s11, [pc, #64]	@ 80207d4 <LL_RCC_CalcPLLClockFreq+0x7c>
 8020796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802079a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802079e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80207a2:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 80207a6:	6a3b      	ldr	r3, [r7, #32]
 80207a8:	ee07 3a90 	vmov	s15, r3
 80207ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80207b0:	edd7 6a05 	vldr	s13, [r7, #20]
 80207b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80207b8:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 80207bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80207c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80207c4:	ee17 3a90 	vmov	r3, s15
}
 80207c8:	4618      	mov	r0, r3
 80207ca:	371c      	adds	r7, #28
 80207cc:	46bd      	mov	sp, r7
 80207ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207d2:	4770      	bx	lr
 80207d4:	46000000 	.word	0x46000000

080207d8 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80207d8:	b590      	push	{r4, r7, lr}
 80207da:	b087      	sub	sp, #28
 80207dc:	af00      	add	r7, sp, #0
 80207de:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80207e0:	2300      	movs	r3, #0
 80207e2:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80207e4:	6878      	ldr	r0, [r7, #4]
 80207e6:	f7ff fbb1 	bl	801ff4c <LL_RCC_GetUSARTClockSource>
 80207ea:	4603      	mov	r3, r0
 80207ec:	4a62      	ldr	r2, [pc, #392]	@ (8020978 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 80207ee:	4293      	cmp	r3, r2
 80207f0:	f000 80a9 	beq.w	8020946 <LL_RCC_GetUSARTClockFreq+0x16e>
 80207f4:	4a60      	ldr	r2, [pc, #384]	@ (8020978 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 80207f6:	4293      	cmp	r3, r2
 80207f8:	f200 80ae 	bhi.w	8020958 <LL_RCC_GetUSARTClockFreq+0x180>
 80207fc:	4a5f      	ldr	r2, [pc, #380]	@ (802097c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 80207fe:	4293      	cmp	r3, r2
 8020800:	f000 80a1 	beq.w	8020946 <LL_RCC_GetUSARTClockFreq+0x16e>
 8020804:	4a5d      	ldr	r2, [pc, #372]	@ (802097c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8020806:	4293      	cmp	r3, r2
 8020808:	f200 80a6 	bhi.w	8020958 <LL_RCC_GetUSARTClockFreq+0x180>
 802080c:	4a5c      	ldr	r2, [pc, #368]	@ (8020980 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 802080e:	4293      	cmp	r3, r2
 8020810:	f000 8091 	beq.w	8020936 <LL_RCC_GetUSARTClockFreq+0x15e>
 8020814:	4a5a      	ldr	r2, [pc, #360]	@ (8020980 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8020816:	4293      	cmp	r3, r2
 8020818:	f200 809e 	bhi.w	8020958 <LL_RCC_GetUSARTClockFreq+0x180>
 802081c:	4a59      	ldr	r2, [pc, #356]	@ (8020984 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 802081e:	4293      	cmp	r3, r2
 8020820:	f000 8089 	beq.w	8020936 <LL_RCC_GetUSARTClockFreq+0x15e>
 8020824:	4a57      	ldr	r2, [pc, #348]	@ (8020984 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8020826:	4293      	cmp	r3, r2
 8020828:	f200 8096 	bhi.w	8020958 <LL_RCC_GetUSARTClockFreq+0x180>
 802082c:	4a56      	ldr	r2, [pc, #344]	@ (8020988 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 802082e:	4293      	cmp	r3, r2
 8020830:	d073      	beq.n	802091a <LL_RCC_GetUSARTClockFreq+0x142>
 8020832:	4a55      	ldr	r2, [pc, #340]	@ (8020988 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8020834:	4293      	cmp	r3, r2
 8020836:	f200 808f 	bhi.w	8020958 <LL_RCC_GetUSARTClockFreq+0x180>
 802083a:	4a54      	ldr	r2, [pc, #336]	@ (802098c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 802083c:	4293      	cmp	r3, r2
 802083e:	d06c      	beq.n	802091a <LL_RCC_GetUSARTClockFreq+0x142>
 8020840:	4a52      	ldr	r2, [pc, #328]	@ (802098c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8020842:	4293      	cmp	r3, r2
 8020844:	f200 8088 	bhi.w	8020958 <LL_RCC_GetUSARTClockFreq+0x180>
 8020848:	4a51      	ldr	r2, [pc, #324]	@ (8020990 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 802084a:	4293      	cmp	r3, r2
 802084c:	d058      	beq.n	8020900 <LL_RCC_GetUSARTClockFreq+0x128>
 802084e:	4a50      	ldr	r2, [pc, #320]	@ (8020990 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8020850:	4293      	cmp	r3, r2
 8020852:	f200 8081 	bhi.w	8020958 <LL_RCC_GetUSARTClockFreq+0x180>
 8020856:	4a4f      	ldr	r2, [pc, #316]	@ (8020994 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8020858:	4293      	cmp	r3, r2
 802085a:	d051      	beq.n	8020900 <LL_RCC_GetUSARTClockFreq+0x128>
 802085c:	4a4d      	ldr	r2, [pc, #308]	@ (8020994 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 802085e:	4293      	cmp	r3, r2
 8020860:	d87a      	bhi.n	8020958 <LL_RCC_GetUSARTClockFreq+0x180>
 8020862:	4a4d      	ldr	r2, [pc, #308]	@ (8020998 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8020864:	4293      	cmp	r3, r2
 8020866:	d03e      	beq.n	80208e6 <LL_RCC_GetUSARTClockFreq+0x10e>
 8020868:	4a4b      	ldr	r2, [pc, #300]	@ (8020998 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 802086a:	4293      	cmp	r3, r2
 802086c:	d874      	bhi.n	8020958 <LL_RCC_GetUSARTClockFreq+0x180>
 802086e:	4a4b      	ldr	r2, [pc, #300]	@ (802099c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8020870:	4293      	cmp	r3, r2
 8020872:	d038      	beq.n	80208e6 <LL_RCC_GetUSARTClockFreq+0x10e>
 8020874:	4a49      	ldr	r2, [pc, #292]	@ (802099c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8020876:	4293      	cmp	r3, r2
 8020878:	d86e      	bhi.n	8020958 <LL_RCC_GetUSARTClockFreq+0x180>
 802087a:	4a49      	ldr	r2, [pc, #292]	@ (80209a0 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 802087c:	4293      	cmp	r3, r2
 802087e:	d01a      	beq.n	80208b6 <LL_RCC_GetUSARTClockFreq+0xde>
 8020880:	4a48      	ldr	r2, [pc, #288]	@ (80209a4 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8020882:	4293      	cmp	r3, r2
 8020884:	d168      	bne.n	8020958 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8020886:	f000 f895 	bl	80209b4 <RCC_GetSystemClockFreq>
 802088a:	4604      	mov	r4, r0
 802088c:	f7ff fb00 	bl	801fe90 <LL_RCC_GetSysPrescaler>
 8020890:	4603      	mov	r3, r0
 8020892:	0a1b      	lsrs	r3, r3, #8
 8020894:	f003 030f 	and.w	r3, r3, #15
 8020898:	4a43      	ldr	r2, [pc, #268]	@ (80209a8 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 802089a:	5cd3      	ldrb	r3, [r2, r3]
 802089c:	f003 031f 	and.w	r3, r3, #31
 80208a0:	fa24 f303 	lsr.w	r3, r4, r3
 80208a4:	4618      	mov	r0, r3
 80208a6:	f000 f8e7 	bl	8020a78 <RCC_GetHCLKClockFreq>
 80208aa:	4603      	mov	r3, r0
 80208ac:	4618      	mov	r0, r3
 80208ae:	f000 f911 	bl	8020ad4 <RCC_GetPCLK2ClockFreq>
 80208b2:	6178      	str	r0, [r7, #20]
      break;
 80208b4:	e05b      	b.n	802096e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80208b6:	f000 f87d 	bl	80209b4 <RCC_GetSystemClockFreq>
 80208ba:	4604      	mov	r4, r0
 80208bc:	f7ff fae8 	bl	801fe90 <LL_RCC_GetSysPrescaler>
 80208c0:	4603      	mov	r3, r0
 80208c2:	0a1b      	lsrs	r3, r3, #8
 80208c4:	f003 030f 	and.w	r3, r3, #15
 80208c8:	4a37      	ldr	r2, [pc, #220]	@ (80209a8 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80208ca:	5cd3      	ldrb	r3, [r2, r3]
 80208cc:	f003 031f 	and.w	r3, r3, #31
 80208d0:	fa24 f303 	lsr.w	r3, r4, r3
 80208d4:	4618      	mov	r0, r3
 80208d6:	f000 f8cf 	bl	8020a78 <RCC_GetHCLKClockFreq>
 80208da:	4603      	mov	r3, r0
 80208dc:	4618      	mov	r0, r3
 80208de:	f000 f8e1 	bl	8020aa4 <RCC_GetPCLK1ClockFreq>
 80208e2:	6178      	str	r0, [r7, #20]
      break;
 80208e4:	e043      	b.n	802096e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 80208e6:	f7ff fbf3 	bl	80200d0 <LL_RCC_PLL2_IsReady>
 80208ea:	4603      	mov	r3, r0
 80208ec:	2b00      	cmp	r3, #0
 80208ee:	d035      	beq.n	802095c <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 80208f0:	f107 0308 	add.w	r3, r7, #8
 80208f4:	4618      	mov	r0, r3
 80208f6:	f7ff fdfd 	bl	80204f4 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	617b      	str	r3, [r7, #20]
      }
      break;
 80208fe:	e02d      	b.n	802095c <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8020900:	f7ff fca2 	bl	8020248 <LL_RCC_PLL3_IsReady>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	d02a      	beq.n	8020960 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 802090a:	f107 0308 	add.w	r3, r7, #8
 802090e:	4618      	mov	r0, r3
 8020910:	f7ff fe88 	bl	8020624 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8020914:	68fb      	ldr	r3, [r7, #12]
 8020916:	617b      	str	r3, [r7, #20]
      }
      break;
 8020918:	e022      	b.n	8020960 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 802091a:	f7ff fa65 	bl	801fde8 <LL_RCC_HSI_IsReady>
 802091e:	4603      	mov	r3, r0
 8020920:	2b00      	cmp	r3, #0
 8020922:	d01f      	beq.n	8020964 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8020924:	f7ff fa72 	bl	801fe0c <LL_RCC_HSI_GetDivider>
 8020928:	4603      	mov	r3, r0
 802092a:	08db      	lsrs	r3, r3, #3
 802092c:	4a1f      	ldr	r2, [pc, #124]	@ (80209ac <LL_RCC_GetUSARTClockFreq+0x1d4>)
 802092e:	fa22 f303 	lsr.w	r3, r2, r3
 8020932:	617b      	str	r3, [r7, #20]
      }
      break;
 8020934:	e016      	b.n	8020964 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8020936:	f7ff fa77 	bl	801fe28 <LL_RCC_CSI_IsReady>
 802093a:	4603      	mov	r3, r0
 802093c:	2b00      	cmp	r3, #0
 802093e:	d013      	beq.n	8020968 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8020940:	4b1b      	ldr	r3, [pc, #108]	@ (80209b0 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8020942:	617b      	str	r3, [r7, #20]
      }
      break;
 8020944:	e010      	b.n	8020968 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 8020946:	f7ff fa83 	bl	801fe50 <LL_RCC_LSE_IsReady>
 802094a:	4603      	mov	r3, r0
 802094c:	2b00      	cmp	r3, #0
 802094e:	d00d      	beq.n	802096c <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8020950:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020954:	617b      	str	r3, [r7, #20]
      }
      break;
 8020956:	e009      	b.n	802096c <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8020958:	bf00      	nop
 802095a:	e008      	b.n	802096e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 802095c:	bf00      	nop
 802095e:	e006      	b.n	802096e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8020960:	bf00      	nop
 8020962:	e004      	b.n	802096e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8020964:	bf00      	nop
 8020966:	e002      	b.n	802096e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8020968:	bf00      	nop
 802096a:	e000      	b.n	802096e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 802096c:	bf00      	nop
  }

  return usart_frequency;
 802096e:	697b      	ldr	r3, [r7, #20]
}
 8020970:	4618      	mov	r0, r3
 8020972:	371c      	adds	r7, #28
 8020974:	46bd      	mov	sp, r7
 8020976:	bd90      	pop	{r4, r7, pc}
 8020978:	07050308 	.word	0x07050308
 802097c:	07050008 	.word	0x07050008
 8020980:	07040308 	.word	0x07040308
 8020984:	07040008 	.word	0x07040008
 8020988:	07030308 	.word	0x07030308
 802098c:	07030008 	.word	0x07030008
 8020990:	07020308 	.word	0x07020308
 8020994:	07020008 	.word	0x07020008
 8020998:	07010308 	.word	0x07010308
 802099c:	07010008 	.word	0x07010008
 80209a0:	07000008 	.word	0x07000008
 80209a4:	07000308 	.word	0x07000308
 80209a8:	0802636c 	.word	0x0802636c
 80209ac:	03d09000 	.word	0x03d09000
 80209b0:	003d0900 	.word	0x003d0900

080209b4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80209b4:	b580      	push	{r7, lr}
 80209b6:	b084      	sub	sp, #16
 80209b8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80209ba:	2300      	movs	r3, #0
 80209bc:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80209be:	f7ff fa59 	bl	801fe74 <LL_RCC_GetSysClkSource>
 80209c2:	4603      	mov	r3, r0
 80209c4:	2b18      	cmp	r3, #24
 80209c6:	d84b      	bhi.n	8020a60 <RCC_GetSystemClockFreq+0xac>
 80209c8:	a201      	add	r2, pc, #4	@ (adr r2, 80209d0 <RCC_GetSystemClockFreq+0x1c>)
 80209ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209ce:	bf00      	nop
 80209d0:	08020a35 	.word	0x08020a35
 80209d4:	08020a61 	.word	0x08020a61
 80209d8:	08020a61 	.word	0x08020a61
 80209dc:	08020a61 	.word	0x08020a61
 80209e0:	08020a61 	.word	0x08020a61
 80209e4:	08020a61 	.word	0x08020a61
 80209e8:	08020a61 	.word	0x08020a61
 80209ec:	08020a61 	.word	0x08020a61
 80209f0:	08020a47 	.word	0x08020a47
 80209f4:	08020a61 	.word	0x08020a61
 80209f8:	08020a61 	.word	0x08020a61
 80209fc:	08020a61 	.word	0x08020a61
 8020a00:	08020a61 	.word	0x08020a61
 8020a04:	08020a61 	.word	0x08020a61
 8020a08:	08020a61 	.word	0x08020a61
 8020a0c:	08020a61 	.word	0x08020a61
 8020a10:	08020a4d 	.word	0x08020a4d
 8020a14:	08020a61 	.word	0x08020a61
 8020a18:	08020a61 	.word	0x08020a61
 8020a1c:	08020a61 	.word	0x08020a61
 8020a20:	08020a61 	.word	0x08020a61
 8020a24:	08020a61 	.word	0x08020a61
 8020a28:	08020a61 	.word	0x08020a61
 8020a2c:	08020a61 	.word	0x08020a61
 8020a30:	08020a53 	.word	0x08020a53
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8020a34:	f7ff f9ea 	bl	801fe0c <LL_RCC_HSI_GetDivider>
 8020a38:	4603      	mov	r3, r0
 8020a3a:	08db      	lsrs	r3, r3, #3
 8020a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8020a6c <RCC_GetSystemClockFreq+0xb8>)
 8020a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8020a42:	60fb      	str	r3, [r7, #12]
      break;
 8020a44:	e00d      	b.n	8020a62 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8020a46:	4b0a      	ldr	r3, [pc, #40]	@ (8020a70 <RCC_GetSystemClockFreq+0xbc>)
 8020a48:	60fb      	str	r3, [r7, #12]
      break;
 8020a4a:	e00a      	b.n	8020a62 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8020a4c:	4b09      	ldr	r3, [pc, #36]	@ (8020a74 <RCC_GetSystemClockFreq+0xc0>)
 8020a4e:	60fb      	str	r3, [r7, #12]
      break;
 8020a50:	e007      	b.n	8020a62 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8020a52:	463b      	mov	r3, r7
 8020a54:	4618      	mov	r0, r3
 8020a56:	f7ff fcb5 	bl	80203c4 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8020a5a:	683b      	ldr	r3, [r7, #0]
 8020a5c:	60fb      	str	r3, [r7, #12]
      break;
 8020a5e:	e000      	b.n	8020a62 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8020a60:	bf00      	nop
  }

  return frequency;
 8020a62:	68fb      	ldr	r3, [r7, #12]
}
 8020a64:	4618      	mov	r0, r3
 8020a66:	3710      	adds	r7, #16
 8020a68:	46bd      	mov	sp, r7
 8020a6a:	bd80      	pop	{r7, pc}
 8020a6c:	03d09000 	.word	0x03d09000
 8020a70:	003d0900 	.word	0x003d0900
 8020a74:	017d7840 	.word	0x017d7840

08020a78 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8020a78:	b580      	push	{r7, lr}
 8020a7a:	b082      	sub	sp, #8
 8020a7c:	af00      	add	r7, sp, #0
 8020a7e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8020a80:	f7ff fa14 	bl	801feac <LL_RCC_GetAHBPrescaler>
 8020a84:	4603      	mov	r3, r0
 8020a86:	f003 030f 	and.w	r3, r3, #15
 8020a8a:	4a05      	ldr	r2, [pc, #20]	@ (8020aa0 <RCC_GetHCLKClockFreq+0x28>)
 8020a8c:	5cd3      	ldrb	r3, [r2, r3]
 8020a8e:	f003 031f 	and.w	r3, r3, #31
 8020a92:	687a      	ldr	r2, [r7, #4]
 8020a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020a98:	4618      	mov	r0, r3
 8020a9a:	3708      	adds	r7, #8
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	bd80      	pop	{r7, pc}
 8020aa0:	0802636c 	.word	0x0802636c

08020aa4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8020aa4:	b580      	push	{r7, lr}
 8020aa6:	b082      	sub	sp, #8
 8020aa8:	af00      	add	r7, sp, #0
 8020aaa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8020aac:	f7ff fa0c 	bl	801fec8 <LL_RCC_GetAPB1Prescaler>
 8020ab0:	4603      	mov	r3, r0
 8020ab2:	091b      	lsrs	r3, r3, #4
 8020ab4:	f003 0307 	and.w	r3, r3, #7
 8020ab8:	4a05      	ldr	r2, [pc, #20]	@ (8020ad0 <RCC_GetPCLK1ClockFreq+0x2c>)
 8020aba:	5cd3      	ldrb	r3, [r2, r3]
 8020abc:	f003 031f 	and.w	r3, r3, #31
 8020ac0:	687a      	ldr	r2, [r7, #4]
 8020ac2:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020ac6:	4618      	mov	r0, r3
 8020ac8:	3708      	adds	r7, #8
 8020aca:	46bd      	mov	sp, r7
 8020acc:	bd80      	pop	{r7, pc}
 8020ace:	bf00      	nop
 8020ad0:	0802636c 	.word	0x0802636c

08020ad4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8020ad4:	b580      	push	{r7, lr}
 8020ad6:	b082      	sub	sp, #8
 8020ad8:	af00      	add	r7, sp, #0
 8020ada:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8020adc:	f7ff fa02 	bl	801fee4 <LL_RCC_GetAPB2Prescaler>
 8020ae0:	4603      	mov	r3, r0
 8020ae2:	0a1b      	lsrs	r3, r3, #8
 8020ae4:	f003 0307 	and.w	r3, r3, #7
 8020ae8:	4a05      	ldr	r2, [pc, #20]	@ (8020b00 <RCC_GetPCLK2ClockFreq+0x2c>)
 8020aea:	5cd3      	ldrb	r3, [r2, r3]
 8020aec:	f003 031f 	and.w	r3, r3, #31
 8020af0:	687a      	ldr	r2, [r7, #4]
 8020af2:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020af6:	4618      	mov	r0, r3
 8020af8:	3708      	adds	r7, #8
 8020afa:	46bd      	mov	sp, r7
 8020afc:	bd80      	pop	{r7, pc}
 8020afe:	bf00      	nop
 8020b00:	0802636c 	.word	0x0802636c

08020b04 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8020b04:	b084      	sub	sp, #16
 8020b06:	b480      	push	{r7}
 8020b08:	b085      	sub	sp, #20
 8020b0a:	af00      	add	r7, sp, #0
 8020b0c:	6078      	str	r0, [r7, #4]
 8020b0e:	f107 001c 	add.w	r0, r7, #28
 8020b12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8020b16:	2300      	movs	r3, #0
 8020b18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8020b1a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8020b1c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8020b1e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8020b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8020b22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8020b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8020b26:	431a      	orrs	r2, r3
             Init.ClockDiv
 8020b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8020b2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8020b2c:	68fa      	ldr	r2, [r7, #12]
 8020b2e:	4313      	orrs	r3, r2
 8020b30:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8020b32:	687b      	ldr	r3, [r7, #4]
 8020b34:	685a      	ldr	r2, [r3, #4]
 8020b36:	4b07      	ldr	r3, [pc, #28]	@ (8020b54 <SDMMC_Init+0x50>)
 8020b38:	4013      	ands	r3, r2
 8020b3a:	68fa      	ldr	r2, [r7, #12]
 8020b3c:	431a      	orrs	r2, r3
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8020b42:	2300      	movs	r3, #0
}
 8020b44:	4618      	mov	r0, r3
 8020b46:	3714      	adds	r7, #20
 8020b48:	46bd      	mov	sp, r7
 8020b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b4e:	b004      	add	sp, #16
 8020b50:	4770      	bx	lr
 8020b52:	bf00      	nop
 8020b54:	ffc02c00 	.word	0xffc02c00

08020b58 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8020b58:	b480      	push	{r7}
 8020b5a:	b083      	sub	sp, #12
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8020b66:	4618      	mov	r0, r3
 8020b68:	370c      	adds	r7, #12
 8020b6a:	46bd      	mov	sp, r7
 8020b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b70:	4770      	bx	lr

08020b72 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8020b72:	b480      	push	{r7}
 8020b74:	b083      	sub	sp, #12
 8020b76:	af00      	add	r7, sp, #0
 8020b78:	6078      	str	r0, [r7, #4]
 8020b7a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8020b7c:	683b      	ldr	r3, [r7, #0]
 8020b7e:	681a      	ldr	r2, [r3, #0]
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8020b86:	2300      	movs	r3, #0
}
 8020b88:	4618      	mov	r0, r3
 8020b8a:	370c      	adds	r7, #12
 8020b8c:	46bd      	mov	sp, r7
 8020b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b92:	4770      	bx	lr

08020b94 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8020b94:	b480      	push	{r7}
 8020b96:	b083      	sub	sp, #12
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	681b      	ldr	r3, [r3, #0]
 8020ba0:	f043 0203 	orr.w	r2, r3, #3
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8020ba8:	2300      	movs	r3, #0
}
 8020baa:	4618      	mov	r0, r3
 8020bac:	370c      	adds	r7, #12
 8020bae:	46bd      	mov	sp, r7
 8020bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bb4:	4770      	bx	lr

08020bb6 <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8020bb6:	b480      	push	{r7}
 8020bb8:	b083      	sub	sp, #12
 8020bba:	af00      	add	r7, sp, #0
 8020bbc:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8020bbe:	687b      	ldr	r3, [r7, #4]
 8020bc0:	681b      	ldr	r3, [r3, #0]
 8020bc2:	f023 0203 	bic.w	r2, r3, #3
 8020bc6:	687b      	ldr	r3, [r7, #4]
 8020bc8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8020bca:	2300      	movs	r3, #0
}
 8020bcc:	4618      	mov	r0, r3
 8020bce:	370c      	adds	r7, #12
 8020bd0:	46bd      	mov	sp, r7
 8020bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bd6:	4770      	bx	lr

08020bd8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8020bd8:	b480      	push	{r7}
 8020bda:	b083      	sub	sp, #12
 8020bdc:	af00      	add	r7, sp, #0
 8020bde:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8020be0:	687b      	ldr	r3, [r7, #4]
 8020be2:	681b      	ldr	r3, [r3, #0]
 8020be4:	f003 0303 	and.w	r3, r3, #3
}
 8020be8:	4618      	mov	r0, r3
 8020bea:	370c      	adds	r7, #12
 8020bec:	46bd      	mov	sp, r7
 8020bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bf2:	4770      	bx	lr

08020bf4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8020bf4:	b480      	push	{r7}
 8020bf6:	b085      	sub	sp, #20
 8020bf8:	af00      	add	r7, sp, #0
 8020bfa:	6078      	str	r0, [r7, #4]
 8020bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8020bfe:	2300      	movs	r3, #0
 8020c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8020c02:	683b      	ldr	r3, [r7, #0]
 8020c04:	681a      	ldr	r2, [r3, #0]
 8020c06:	687b      	ldr	r3, [r7, #4]
 8020c08:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8020c0a:	683b      	ldr	r3, [r7, #0]
 8020c0c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8020c0e:	683b      	ldr	r3, [r7, #0]
 8020c10:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8020c12:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8020c14:	683b      	ldr	r3, [r7, #0]
 8020c16:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8020c18:	431a      	orrs	r2, r3
                       Command->CPSM);
 8020c1a:	683b      	ldr	r3, [r7, #0]
 8020c1c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8020c1e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8020c20:	68fa      	ldr	r2, [r7, #12]
 8020c22:	4313      	orrs	r3, r2
 8020c24:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8020c26:	687b      	ldr	r3, [r7, #4]
 8020c28:	68da      	ldr	r2, [r3, #12]
 8020c2a:	4b06      	ldr	r3, [pc, #24]	@ (8020c44 <SDMMC_SendCommand+0x50>)
 8020c2c:	4013      	ands	r3, r2
 8020c2e:	68fa      	ldr	r2, [r7, #12]
 8020c30:	431a      	orrs	r2, r3
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8020c36:	2300      	movs	r3, #0
}
 8020c38:	4618      	mov	r0, r3
 8020c3a:	3714      	adds	r7, #20
 8020c3c:	46bd      	mov	sp, r7
 8020c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c42:	4770      	bx	lr
 8020c44:	fffee0c0 	.word	0xfffee0c0

08020c48 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8020c48:	b480      	push	{r7}
 8020c4a:	b083      	sub	sp, #12
 8020c4c:	af00      	add	r7, sp, #0
 8020c4e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8020c50:	687b      	ldr	r3, [r7, #4]
 8020c52:	691b      	ldr	r3, [r3, #16]
 8020c54:	b2db      	uxtb	r3, r3
}
 8020c56:	4618      	mov	r0, r3
 8020c58:	370c      	adds	r7, #12
 8020c5a:	46bd      	mov	sp, r7
 8020c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c60:	4770      	bx	lr

08020c62 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8020c62:	b480      	push	{r7}
 8020c64:	b085      	sub	sp, #20
 8020c66:	af00      	add	r7, sp, #0
 8020c68:	6078      	str	r0, [r7, #4]
 8020c6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	3314      	adds	r3, #20
 8020c70:	461a      	mov	r2, r3
 8020c72:	683b      	ldr	r3, [r7, #0]
 8020c74:	4413      	add	r3, r2
 8020c76:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8020c78:	68fb      	ldr	r3, [r7, #12]
 8020c7a:	681b      	ldr	r3, [r3, #0]
}
 8020c7c:	4618      	mov	r0, r3
 8020c7e:	3714      	adds	r7, #20
 8020c80:	46bd      	mov	sp, r7
 8020c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c86:	4770      	bx	lr

08020c88 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8020c88:	b480      	push	{r7}
 8020c8a:	b085      	sub	sp, #20
 8020c8c:	af00      	add	r7, sp, #0
 8020c8e:	6078      	str	r0, [r7, #4]
 8020c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8020c92:	2300      	movs	r3, #0
 8020c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8020c96:	683b      	ldr	r3, [r7, #0]
 8020c98:	681a      	ldr	r2, [r3, #0]
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8020c9e:	683b      	ldr	r3, [r7, #0]
 8020ca0:	685a      	ldr	r2, [r3, #4]
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8020ca6:	683b      	ldr	r3, [r7, #0]
 8020ca8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8020caa:	683b      	ldr	r3, [r7, #0]
 8020cac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8020cae:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8020cb0:	683b      	ldr	r3, [r7, #0]
 8020cb2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8020cb4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8020cb6:	683b      	ldr	r3, [r7, #0]
 8020cb8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8020cba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8020cbc:	68fa      	ldr	r2, [r7, #12]
 8020cbe:	4313      	orrs	r3, r2
 8020cc0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8020cc2:	687b      	ldr	r3, [r7, #4]
 8020cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020cc6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8020cca:	68fb      	ldr	r3, [r7, #12]
 8020ccc:	431a      	orrs	r2, r3
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8020cd2:	2300      	movs	r3, #0

}
 8020cd4:	4618      	mov	r0, r3
 8020cd6:	3714      	adds	r7, #20
 8020cd8:	46bd      	mov	sp, r7
 8020cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cde:	4770      	bx	lr

08020ce0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8020ce0:	b580      	push	{r7, lr}
 8020ce2:	b088      	sub	sp, #32
 8020ce4:	af00      	add	r7, sp, #0
 8020ce6:	6078      	str	r0, [r7, #4]
 8020ce8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8020cea:	683b      	ldr	r3, [r7, #0]
 8020cec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8020cee:	2310      	movs	r3, #16
 8020cf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020cf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020cf8:	2300      	movs	r3, #0
 8020cfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020d00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020d02:	f107 0308 	add.w	r3, r7, #8
 8020d06:	4619      	mov	r1, r3
 8020d08:	6878      	ldr	r0, [r7, #4]
 8020d0a:	f7ff ff73 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8020d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020d12:	2110      	movs	r1, #16
 8020d14:	6878      	ldr	r0, [r7, #4]
 8020d16:	f000 f9fd 	bl	8021114 <SDMMC_GetCmdResp1>
 8020d1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020d1c:	69fb      	ldr	r3, [r7, #28]
}
 8020d1e:	4618      	mov	r0, r3
 8020d20:	3720      	adds	r7, #32
 8020d22:	46bd      	mov	sp, r7
 8020d24:	bd80      	pop	{r7, pc}

08020d26 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8020d26:	b580      	push	{r7, lr}
 8020d28:	b088      	sub	sp, #32
 8020d2a:	af00      	add	r7, sp, #0
 8020d2c:	6078      	str	r0, [r7, #4]
 8020d2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8020d30:	683b      	ldr	r3, [r7, #0]
 8020d32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8020d34:	2311      	movs	r3, #17
 8020d36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020d38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020d3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020d3e:	2300      	movs	r3, #0
 8020d40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020d46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020d48:	f107 0308 	add.w	r3, r7, #8
 8020d4c:	4619      	mov	r1, r3
 8020d4e:	6878      	ldr	r0, [r7, #4]
 8020d50:	f7ff ff50 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8020d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020d58:	2111      	movs	r1, #17
 8020d5a:	6878      	ldr	r0, [r7, #4]
 8020d5c:	f000 f9da 	bl	8021114 <SDMMC_GetCmdResp1>
 8020d60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020d62:	69fb      	ldr	r3, [r7, #28]
}
 8020d64:	4618      	mov	r0, r3
 8020d66:	3720      	adds	r7, #32
 8020d68:	46bd      	mov	sp, r7
 8020d6a:	bd80      	pop	{r7, pc}

08020d6c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8020d6c:	b580      	push	{r7, lr}
 8020d6e:	b088      	sub	sp, #32
 8020d70:	af00      	add	r7, sp, #0
 8020d72:	6078      	str	r0, [r7, #4]
 8020d74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8020d76:	683b      	ldr	r3, [r7, #0]
 8020d78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8020d7a:	2312      	movs	r3, #18
 8020d7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020d7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020d82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020d84:	2300      	movs	r3, #0
 8020d86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020d8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020d8e:	f107 0308 	add.w	r3, r7, #8
 8020d92:	4619      	mov	r1, r3
 8020d94:	6878      	ldr	r0, [r7, #4]
 8020d96:	f7ff ff2d 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8020d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020d9e:	2112      	movs	r1, #18
 8020da0:	6878      	ldr	r0, [r7, #4]
 8020da2:	f000 f9b7 	bl	8021114 <SDMMC_GetCmdResp1>
 8020da6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020da8:	69fb      	ldr	r3, [r7, #28]
}
 8020daa:	4618      	mov	r0, r3
 8020dac:	3720      	adds	r7, #32
 8020dae:	46bd      	mov	sp, r7
 8020db0:	bd80      	pop	{r7, pc}

08020db2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8020db2:	b580      	push	{r7, lr}
 8020db4:	b088      	sub	sp, #32
 8020db6:	af00      	add	r7, sp, #0
 8020db8:	6078      	str	r0, [r7, #4]
 8020dba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8020dbc:	683b      	ldr	r3, [r7, #0]
 8020dbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8020dc0:	2318      	movs	r3, #24
 8020dc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020dc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020dc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020dca:	2300      	movs	r3, #0
 8020dcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020dce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020dd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020dd4:	f107 0308 	add.w	r3, r7, #8
 8020dd8:	4619      	mov	r1, r3
 8020dda:	6878      	ldr	r0, [r7, #4]
 8020ddc:	f7ff ff0a 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8020de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020de4:	2118      	movs	r1, #24
 8020de6:	6878      	ldr	r0, [r7, #4]
 8020de8:	f000 f994 	bl	8021114 <SDMMC_GetCmdResp1>
 8020dec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020dee:	69fb      	ldr	r3, [r7, #28]
}
 8020df0:	4618      	mov	r0, r3
 8020df2:	3720      	adds	r7, #32
 8020df4:	46bd      	mov	sp, r7
 8020df6:	bd80      	pop	{r7, pc}

08020df8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8020df8:	b580      	push	{r7, lr}
 8020dfa:	b088      	sub	sp, #32
 8020dfc:	af00      	add	r7, sp, #0
 8020dfe:	6078      	str	r0, [r7, #4]
 8020e00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8020e02:	683b      	ldr	r3, [r7, #0]
 8020e04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8020e06:	2319      	movs	r3, #25
 8020e08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020e0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020e10:	2300      	movs	r3, #0
 8020e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020e18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020e1a:	f107 0308 	add.w	r3, r7, #8
 8020e1e:	4619      	mov	r1, r3
 8020e20:	6878      	ldr	r0, [r7, #4]
 8020e22:	f7ff fee7 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8020e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020e2a:	2119      	movs	r1, #25
 8020e2c:	6878      	ldr	r0, [r7, #4]
 8020e2e:	f000 f971 	bl	8021114 <SDMMC_GetCmdResp1>
 8020e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020e34:	69fb      	ldr	r3, [r7, #28]
}
 8020e36:	4618      	mov	r0, r3
 8020e38:	3720      	adds	r7, #32
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	bd80      	pop	{r7, pc}
	...

08020e40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8020e40:	b580      	push	{r7, lr}
 8020e42:	b088      	sub	sp, #32
 8020e44:	af00      	add	r7, sp, #0
 8020e46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8020e48:	2300      	movs	r3, #0
 8020e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8020e4c:	230c      	movs	r3, #12
 8020e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020e56:	2300      	movs	r3, #0
 8020e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020e5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020e5e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	68db      	ldr	r3, [r3, #12]
 8020e64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8020e68:	687b      	ldr	r3, [r7, #4]
 8020e6a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8020e6c:	687b      	ldr	r3, [r7, #4]
 8020e6e:	68db      	ldr	r3, [r3, #12]
 8020e70:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8020e74:	687b      	ldr	r3, [r7, #4]
 8020e76:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020e78:	f107 0308 	add.w	r3, r7, #8
 8020e7c:	4619      	mov	r1, r3
 8020e7e:	6878      	ldr	r0, [r7, #4]
 8020e80:	f7ff feb8 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8020e84:	4a0b      	ldr	r2, [pc, #44]	@ (8020eb4 <SDMMC_CmdStopTransfer+0x74>)
 8020e86:	210c      	movs	r1, #12
 8020e88:	6878      	ldr	r0, [r7, #4]
 8020e8a:	f000 f943 	bl	8021114 <SDMMC_GetCmdResp1>
 8020e8e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	68db      	ldr	r3, [r3, #12]
 8020e94:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8020e98:	687b      	ldr	r3, [r7, #4]
 8020e9a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8020e9c:	69fb      	ldr	r3, [r7, #28]
 8020e9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020ea2:	d101      	bne.n	8020ea8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8020ea4:	2300      	movs	r3, #0
 8020ea6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8020ea8:	69fb      	ldr	r3, [r7, #28]
}
 8020eaa:	4618      	mov	r0, r3
 8020eac:	3720      	adds	r7, #32
 8020eae:	46bd      	mov	sp, r7
 8020eb0:	bd80      	pop	{r7, pc}
 8020eb2:	bf00      	nop
 8020eb4:	05f5e100 	.word	0x05f5e100

08020eb8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8020eb8:	b580      	push	{r7, lr}
 8020eba:	b088      	sub	sp, #32
 8020ebc:	af00      	add	r7, sp, #0
 8020ebe:	6078      	str	r0, [r7, #4]
 8020ec0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8020ec2:	683b      	ldr	r3, [r7, #0]
 8020ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8020ec6:	2307      	movs	r3, #7
 8020ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020eca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020ed0:	2300      	movs	r3, #0
 8020ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020ed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020ed8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020eda:	f107 0308 	add.w	r3, r7, #8
 8020ede:	4619      	mov	r1, r3
 8020ee0:	6878      	ldr	r0, [r7, #4]
 8020ee2:	f7ff fe87 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8020ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020eea:	2107      	movs	r1, #7
 8020eec:	6878      	ldr	r0, [r7, #4]
 8020eee:	f000 f911 	bl	8021114 <SDMMC_GetCmdResp1>
 8020ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020ef4:	69fb      	ldr	r3, [r7, #28]
}
 8020ef6:	4618      	mov	r0, r3
 8020ef8:	3720      	adds	r7, #32
 8020efa:	46bd      	mov	sp, r7
 8020efc:	bd80      	pop	{r7, pc}

08020efe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8020efe:	b580      	push	{r7, lr}
 8020f00:	b088      	sub	sp, #32
 8020f02:	af00      	add	r7, sp, #0
 8020f04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8020f06:	2300      	movs	r3, #0
 8020f08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8020f0a:	2300      	movs	r3, #0
 8020f0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8020f0e:	2300      	movs	r3, #0
 8020f10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020f12:	2300      	movs	r3, #0
 8020f14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020f1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020f1c:	f107 0308 	add.w	r3, r7, #8
 8020f20:	4619      	mov	r1, r3
 8020f22:	6878      	ldr	r0, [r7, #4]
 8020f24:	f7ff fe66 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8020f28:	6878      	ldr	r0, [r7, #4]
 8020f2a:	f000 fa6f 	bl	802140c <SDMMC_GetCmdError>
 8020f2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020f30:	69fb      	ldr	r3, [r7, #28]
}
 8020f32:	4618      	mov	r0, r3
 8020f34:	3720      	adds	r7, #32
 8020f36:	46bd      	mov	sp, r7
 8020f38:	bd80      	pop	{r7, pc}

08020f3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8020f3a:	b580      	push	{r7, lr}
 8020f3c:	b088      	sub	sp, #32
 8020f3e:	af00      	add	r7, sp, #0
 8020f40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8020f42:	2300      	movs	r3, #0
 8020f44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8020f46:	2302      	movs	r3, #2
 8020f48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8020f4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8020f4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020f50:	2300      	movs	r3, #0
 8020f52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020f58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020f5a:	f107 0308 	add.w	r3, r7, #8
 8020f5e:	4619      	mov	r1, r3
 8020f60:	6878      	ldr	r0, [r7, #4]
 8020f62:	f7ff fe47 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8020f66:	6878      	ldr	r0, [r7, #4]
 8020f68:	f000 f9c6 	bl	80212f8 <SDMMC_GetCmdResp2>
 8020f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020f6e:	69fb      	ldr	r3, [r7, #28]
}
 8020f70:	4618      	mov	r0, r3
 8020f72:	3720      	adds	r7, #32
 8020f74:	46bd      	mov	sp, r7
 8020f76:	bd80      	pop	{r7, pc}

08020f78 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8020f78:	b580      	push	{r7, lr}
 8020f7a:	b088      	sub	sp, #32
 8020f7c:	af00      	add	r7, sp, #0
 8020f7e:	6078      	str	r0, [r7, #4]
 8020f80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8020f82:	683b      	ldr	r3, [r7, #0]
 8020f84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8020f86:	2309      	movs	r3, #9
 8020f88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8020f8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8020f8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020f90:	2300      	movs	r3, #0
 8020f92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020f98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020f9a:	f107 0308 	add.w	r3, r7, #8
 8020f9e:	4619      	mov	r1, r3
 8020fa0:	6878      	ldr	r0, [r7, #4]
 8020fa2:	f7ff fe27 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8020fa6:	6878      	ldr	r0, [r7, #4]
 8020fa8:	f000 f9a6 	bl	80212f8 <SDMMC_GetCmdResp2>
 8020fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020fae:	69fb      	ldr	r3, [r7, #28]
}
 8020fb0:	4618      	mov	r0, r3
 8020fb2:	3720      	adds	r7, #32
 8020fb4:	46bd      	mov	sp, r7
 8020fb6:	bd80      	pop	{r7, pc}

08020fb8 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 8020fb8:	b580      	push	{r7, lr}
 8020fba:	b088      	sub	sp, #32
 8020fbc:	af00      	add	r7, sp, #0
 8020fbe:	6078      	str	r0, [r7, #4]
 8020fc0:	460b      	mov	r3, r1
 8020fc2:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 8020fc4:	887b      	ldrh	r3, [r7, #2]
 8020fc6:	041b      	lsls	r3, r3, #16
 8020fc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8020fca:	2303      	movs	r3, #3
 8020fcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8020fce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8020fd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8020fd4:	2300      	movs	r3, #0
 8020fd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8020fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8020fdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8020fde:	f107 0308 	add.w	r3, r7, #8
 8020fe2:	4619      	mov	r1, r3
 8020fe4:	6878      	ldr	r0, [r7, #4]
 8020fe6:	f7ff fe05 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 8020fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8020fee:	2103      	movs	r1, #3
 8020ff0:	6878      	ldr	r0, [r7, #4]
 8020ff2:	f000 f88f 	bl	8021114 <SDMMC_GetCmdResp1>
 8020ff6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8020ff8:	69fb      	ldr	r3, [r7, #28]
}
 8020ffa:	4618      	mov	r0, r3
 8020ffc:	3720      	adds	r7, #32
 8020ffe:	46bd      	mov	sp, r7
 8021000:	bd80      	pop	{r7, pc}

08021002 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021002:	b580      	push	{r7, lr}
 8021004:	b088      	sub	sp, #32
 8021006:	af00      	add	r7, sp, #0
 8021008:	6078      	str	r0, [r7, #4]
 802100a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 802100c:	683b      	ldr	r3, [r7, #0]
 802100e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8021010:	230d      	movs	r3, #13
 8021012:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021014:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802101a:	2300      	movs	r3, #0
 802101c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802101e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021022:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021024:	f107 0308 	add.w	r3, r7, #8
 8021028:	4619      	mov	r1, r3
 802102a:	6878      	ldr	r0, [r7, #4]
 802102c:	f7ff fde2 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8021030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021034:	210d      	movs	r1, #13
 8021036:	6878      	ldr	r0, [r7, #4]
 8021038:	f000 f86c 	bl	8021114 <SDMMC_GetCmdResp1>
 802103c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802103e:	69fb      	ldr	r3, [r7, #28]
}
 8021040:	4618      	mov	r0, r3
 8021042:	3720      	adds	r7, #32
 8021044:	46bd      	mov	sp, r7
 8021046:	bd80      	pop	{r7, pc}

08021048 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021048:	b580      	push	{r7, lr}
 802104a:	b088      	sub	sp, #32
 802104c:	af00      	add	r7, sp, #0
 802104e:	6078      	str	r0, [r7, #4]
 8021050:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8021052:	683b      	ldr	r3, [r7, #0]
 8021054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8021056:	2301      	movs	r3, #1
 8021058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802105a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802105e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021060:	2300      	movs	r3, #0
 8021062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021068:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802106a:	f107 0308 	add.w	r3, r7, #8
 802106e:	4619      	mov	r1, r3
 8021070:	6878      	ldr	r0, [r7, #4]
 8021072:	f7ff fdbf 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8021076:	6878      	ldr	r0, [r7, #4]
 8021078:	f000 f988 	bl	802138c <SDMMC_GetCmdResp3>
 802107c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802107e:	69fb      	ldr	r3, [r7, #28]
}
 8021080:	4618      	mov	r0, r3
 8021082:	3720      	adds	r7, #32
 8021084:	46bd      	mov	sp, r7
 8021086:	bd80      	pop	{r7, pc}

08021088 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021088:	b580      	push	{r7, lr}
 802108a:	b088      	sub	sp, #32
 802108c:	af00      	add	r7, sp, #0
 802108e:	6078      	str	r0, [r7, #4]
 8021090:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 8021092:	683b      	ldr	r3, [r7, #0]
 8021094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8021096:	2306      	movs	r3, #6
 8021098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802109a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802109e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80210a0:	2300      	movs	r3, #0
 80210a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80210a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80210a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80210aa:	f107 0308 	add.w	r3, r7, #8
 80210ae:	4619      	mov	r1, r3
 80210b0:	6878      	ldr	r0, [r7, #4]
 80210b2:	f7ff fd9f 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 80210b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80210ba:	2106      	movs	r1, #6
 80210bc:	6878      	ldr	r0, [r7, #4]
 80210be:	f000 f829 	bl	8021114 <SDMMC_GetCmdResp1>
 80210c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80210c4:	69fb      	ldr	r3, [r7, #28]
}
 80210c6:	4618      	mov	r0, r3
 80210c8:	3720      	adds	r7, #32
 80210ca:	46bd      	mov	sp, r7
 80210cc:	bd80      	pop	{r7, pc}

080210ce <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80210ce:	b580      	push	{r7, lr}
 80210d0:	b088      	sub	sp, #32
 80210d2:	af00      	add	r7, sp, #0
 80210d4:	6078      	str	r0, [r7, #4]
 80210d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80210d8:	683b      	ldr	r3, [r7, #0]
 80210da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80210dc:	2308      	movs	r3, #8
 80210de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80210e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80210e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80210e6:	2300      	movs	r3, #0
 80210e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80210ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80210ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80210f0:	f107 0308 	add.w	r3, r7, #8
 80210f4:	4619      	mov	r1, r3
 80210f6:	6878      	ldr	r0, [r7, #4]
 80210f8:	f7ff fd7c 	bl	8020bf4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 80210fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021100:	2108      	movs	r1, #8
 8021102:	6878      	ldr	r0, [r7, #4]
 8021104:	f000 f806 	bl	8021114 <SDMMC_GetCmdResp1>
 8021108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802110a:	69fb      	ldr	r3, [r7, #28]
}
 802110c:	4618      	mov	r0, r3
 802110e:	3720      	adds	r7, #32
 8021110:	46bd      	mov	sp, r7
 8021112:	bd80      	pop	{r7, pc}

08021114 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8021114:	b580      	push	{r7, lr}
 8021116:	b088      	sub	sp, #32
 8021118:	af00      	add	r7, sp, #0
 802111a:	60f8      	str	r0, [r7, #12]
 802111c:	460b      	mov	r3, r1
 802111e:	607a      	str	r2, [r7, #4]
 8021120:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8021122:	4b70      	ldr	r3, [pc, #448]	@ (80212e4 <SDMMC_GetCmdResp1+0x1d0>)
 8021124:	681b      	ldr	r3, [r3, #0]
 8021126:	4a70      	ldr	r2, [pc, #448]	@ (80212e8 <SDMMC_GetCmdResp1+0x1d4>)
 8021128:	fba2 2303 	umull	r2, r3, r2, r3
 802112c:	0a5a      	lsrs	r2, r3, #9
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	fb02 f303 	mul.w	r3, r2, r3
 8021134:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8021136:	69fb      	ldr	r3, [r7, #28]
 8021138:	1e5a      	subs	r2, r3, #1
 802113a:	61fa      	str	r2, [r7, #28]
 802113c:	2b00      	cmp	r3, #0
 802113e:	d102      	bne.n	8021146 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8021140:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021144:	e0c9      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8021146:	68fb      	ldr	r3, [r7, #12]
 8021148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802114a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 802114c:	69ba      	ldr	r2, [r7, #24]
 802114e:	4b67      	ldr	r3, [pc, #412]	@ (80212ec <SDMMC_GetCmdResp1+0x1d8>)
 8021150:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8021152:	2b00      	cmp	r3, #0
 8021154:	d0ef      	beq.n	8021136 <SDMMC_GetCmdResp1+0x22>
 8021156:	69bb      	ldr	r3, [r7, #24]
 8021158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 802115c:	2b00      	cmp	r3, #0
 802115e:	d1ea      	bne.n	8021136 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8021160:	68fb      	ldr	r3, [r7, #12]
 8021162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021164:	f003 0304 	and.w	r3, r3, #4
 8021168:	2b00      	cmp	r3, #0
 802116a:	d004      	beq.n	8021176 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802116c:	68fb      	ldr	r3, [r7, #12]
 802116e:	2204      	movs	r2, #4
 8021170:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8021172:	2304      	movs	r3, #4
 8021174:	e0b1      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8021176:	68fb      	ldr	r3, [r7, #12]
 8021178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802117a:	f003 0301 	and.w	r3, r3, #1
 802117e:	2b00      	cmp	r3, #0
 8021180:	d004      	beq.n	802118c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8021182:	68fb      	ldr	r3, [r7, #12]
 8021184:	2201      	movs	r2, #1
 8021186:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8021188:	2301      	movs	r3, #1
 802118a:	e0a6      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802118c:	68fb      	ldr	r3, [r7, #12]
 802118e:	4a58      	ldr	r2, [pc, #352]	@ (80212f0 <SDMMC_GetCmdResp1+0x1dc>)
 8021190:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8021192:	68f8      	ldr	r0, [r7, #12]
 8021194:	f7ff fd58 	bl	8020c48 <SDMMC_GetCommandResponse>
 8021198:	4603      	mov	r3, r0
 802119a:	461a      	mov	r2, r3
 802119c:	7afb      	ldrb	r3, [r7, #11]
 802119e:	4293      	cmp	r3, r2
 80211a0:	d001      	beq.n	80211a6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80211a2:	2301      	movs	r3, #1
 80211a4:	e099      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80211a6:	2100      	movs	r1, #0
 80211a8:	68f8      	ldr	r0, [r7, #12]
 80211aa:	f7ff fd5a 	bl	8020c62 <SDMMC_GetResponse>
 80211ae:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80211b0:	697a      	ldr	r2, [r7, #20]
 80211b2:	4b50      	ldr	r3, [pc, #320]	@ (80212f4 <SDMMC_GetCmdResp1+0x1e0>)
 80211b4:	4013      	ands	r3, r2
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	d101      	bne.n	80211be <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80211ba:	2300      	movs	r3, #0
 80211bc:	e08d      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80211be:	697b      	ldr	r3, [r7, #20]
 80211c0:	2b00      	cmp	r3, #0
 80211c2:	da02      	bge.n	80211ca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80211c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80211c8:	e087      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80211ca:	697b      	ldr	r3, [r7, #20]
 80211cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d001      	beq.n	80211d8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80211d4:	2340      	movs	r3, #64	@ 0x40
 80211d6:	e080      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80211d8:	697b      	ldr	r3, [r7, #20]
 80211da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80211de:	2b00      	cmp	r3, #0
 80211e0:	d001      	beq.n	80211e6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80211e2:	2380      	movs	r3, #128	@ 0x80
 80211e4:	e079      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80211e6:	697b      	ldr	r3, [r7, #20]
 80211e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80211ec:	2b00      	cmp	r3, #0
 80211ee:	d002      	beq.n	80211f6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80211f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80211f4:	e071      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80211f6:	697b      	ldr	r3, [r7, #20]
 80211f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d002      	beq.n	8021206 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8021200:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8021204:	e069      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8021206:	697b      	ldr	r3, [r7, #20]
 8021208:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 802120c:	2b00      	cmp	r3, #0
 802120e:	d002      	beq.n	8021216 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8021210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021214:	e061      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8021216:	697b      	ldr	r3, [r7, #20]
 8021218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802121c:	2b00      	cmp	r3, #0
 802121e:	d002      	beq.n	8021226 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8021220:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8021224:	e059      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8021226:	697b      	ldr	r3, [r7, #20]
 8021228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 802122c:	2b00      	cmp	r3, #0
 802122e:	d002      	beq.n	8021236 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8021230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021234:	e051      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8021236:	697b      	ldr	r3, [r7, #20]
 8021238:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802123c:	2b00      	cmp	r3, #0
 802123e:	d002      	beq.n	8021246 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8021240:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8021244:	e049      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8021246:	697b      	ldr	r3, [r7, #20]
 8021248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 802124c:	2b00      	cmp	r3, #0
 802124e:	d002      	beq.n	8021256 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8021250:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8021254:	e041      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8021256:	697b      	ldr	r3, [r7, #20]
 8021258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802125c:	2b00      	cmp	r3, #0
 802125e:	d002      	beq.n	8021266 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8021260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021264:	e039      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8021266:	697b      	ldr	r3, [r7, #20]
 8021268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 802126c:	2b00      	cmp	r3, #0
 802126e:	d002      	beq.n	8021276 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8021270:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8021274:	e031      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8021276:	697b      	ldr	r3, [r7, #20]
 8021278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802127c:	2b00      	cmp	r3, #0
 802127e:	d002      	beq.n	8021286 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8021280:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8021284:	e029      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8021286:	697b      	ldr	r3, [r7, #20]
 8021288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802128c:	2b00      	cmp	r3, #0
 802128e:	d002      	beq.n	8021296 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8021290:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8021294:	e021      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8021296:	697b      	ldr	r3, [r7, #20]
 8021298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 802129c:	2b00      	cmp	r3, #0
 802129e:	d002      	beq.n	80212a6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80212a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80212a4:	e019      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80212a6:	697b      	ldr	r3, [r7, #20]
 80212a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80212ac:	2b00      	cmp	r3, #0
 80212ae:	d002      	beq.n	80212b6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80212b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80212b4:	e011      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80212b6:	697b      	ldr	r3, [r7, #20]
 80212b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d002      	beq.n	80212c6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80212c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80212c4:	e009      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80212c6:	697b      	ldr	r3, [r7, #20]
 80212c8:	f003 0308 	and.w	r3, r3, #8
 80212cc:	2b00      	cmp	r3, #0
 80212ce:	d002      	beq.n	80212d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80212d0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80212d4:	e001      	b.n	80212da <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80212d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80212da:	4618      	mov	r0, r3
 80212dc:	3720      	adds	r7, #32
 80212de:	46bd      	mov	sp, r7
 80212e0:	bd80      	pop	{r7, pc}
 80212e2:	bf00      	nop
 80212e4:	240148d8 	.word	0x240148d8
 80212e8:	10624dd3 	.word	0x10624dd3
 80212ec:	00200045 	.word	0x00200045
 80212f0:	002000c5 	.word	0x002000c5
 80212f4:	fdffe008 	.word	0xfdffe008

080212f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80212f8:	b480      	push	{r7}
 80212fa:	b085      	sub	sp, #20
 80212fc:	af00      	add	r7, sp, #0
 80212fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8021300:	4b1f      	ldr	r3, [pc, #124]	@ (8021380 <SDMMC_GetCmdResp2+0x88>)
 8021302:	681b      	ldr	r3, [r3, #0]
 8021304:	4a1f      	ldr	r2, [pc, #124]	@ (8021384 <SDMMC_GetCmdResp2+0x8c>)
 8021306:	fba2 2303 	umull	r2, r3, r2, r3
 802130a:	0a5b      	lsrs	r3, r3, #9
 802130c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021310:	fb02 f303 	mul.w	r3, r2, r3
 8021314:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8021316:	68fb      	ldr	r3, [r7, #12]
 8021318:	1e5a      	subs	r2, r3, #1
 802131a:	60fa      	str	r2, [r7, #12]
 802131c:	2b00      	cmp	r3, #0
 802131e:	d102      	bne.n	8021326 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8021320:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021324:	e026      	b.n	8021374 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8021326:	687b      	ldr	r3, [r7, #4]
 8021328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802132a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802132c:	68bb      	ldr	r3, [r7, #8]
 802132e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8021332:	2b00      	cmp	r3, #0
 8021334:	d0ef      	beq.n	8021316 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8021336:	68bb      	ldr	r3, [r7, #8]
 8021338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802133c:	2b00      	cmp	r3, #0
 802133e:	d1ea      	bne.n	8021316 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8021340:	687b      	ldr	r3, [r7, #4]
 8021342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021344:	f003 0304 	and.w	r3, r3, #4
 8021348:	2b00      	cmp	r3, #0
 802134a:	d004      	beq.n	8021356 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802134c:	687b      	ldr	r3, [r7, #4]
 802134e:	2204      	movs	r2, #4
 8021350:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8021352:	2304      	movs	r3, #4
 8021354:	e00e      	b.n	8021374 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802135a:	f003 0301 	and.w	r3, r3, #1
 802135e:	2b00      	cmp	r3, #0
 8021360:	d004      	beq.n	802136c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	2201      	movs	r2, #1
 8021366:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8021368:	2301      	movs	r3, #1
 802136a:	e003      	b.n	8021374 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	4a06      	ldr	r2, [pc, #24]	@ (8021388 <SDMMC_GetCmdResp2+0x90>)
 8021370:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8021372:	2300      	movs	r3, #0
}
 8021374:	4618      	mov	r0, r3
 8021376:	3714      	adds	r7, #20
 8021378:	46bd      	mov	sp, r7
 802137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802137e:	4770      	bx	lr
 8021380:	240148d8 	.word	0x240148d8
 8021384:	10624dd3 	.word	0x10624dd3
 8021388:	002000c5 	.word	0x002000c5

0802138c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 802138c:	b480      	push	{r7}
 802138e:	b085      	sub	sp, #20
 8021390:	af00      	add	r7, sp, #0
 8021392:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8021394:	4b1a      	ldr	r3, [pc, #104]	@ (8021400 <SDMMC_GetCmdResp3+0x74>)
 8021396:	681b      	ldr	r3, [r3, #0]
 8021398:	4a1a      	ldr	r2, [pc, #104]	@ (8021404 <SDMMC_GetCmdResp3+0x78>)
 802139a:	fba2 2303 	umull	r2, r3, r2, r3
 802139e:	0a5b      	lsrs	r3, r3, #9
 80213a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80213a4:	fb02 f303 	mul.w	r3, r2, r3
 80213a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80213aa:	68fb      	ldr	r3, [r7, #12]
 80213ac:	1e5a      	subs	r2, r3, #1
 80213ae:	60fa      	str	r2, [r7, #12]
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	d102      	bne.n	80213ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80213b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80213b8:	e01b      	b.n	80213f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80213ba:	687b      	ldr	r3, [r7, #4]
 80213bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80213be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80213c0:	68bb      	ldr	r3, [r7, #8]
 80213c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	d0ef      	beq.n	80213aa <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80213ca:	68bb      	ldr	r3, [r7, #8]
 80213cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80213d0:	2b00      	cmp	r3, #0
 80213d2:	d1ea      	bne.n	80213aa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80213d4:	687b      	ldr	r3, [r7, #4]
 80213d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80213d8:	f003 0304 	and.w	r3, r3, #4
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d004      	beq.n	80213ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80213e0:	687b      	ldr	r3, [r7, #4]
 80213e2:	2204      	movs	r2, #4
 80213e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80213e6:	2304      	movs	r3, #4
 80213e8:	e003      	b.n	80213f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80213ea:	687b      	ldr	r3, [r7, #4]
 80213ec:	4a06      	ldr	r2, [pc, #24]	@ (8021408 <SDMMC_GetCmdResp3+0x7c>)
 80213ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80213f0:	2300      	movs	r3, #0
}
 80213f2:	4618      	mov	r0, r3
 80213f4:	3714      	adds	r7, #20
 80213f6:	46bd      	mov	sp, r7
 80213f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213fc:	4770      	bx	lr
 80213fe:	bf00      	nop
 8021400:	240148d8 	.word	0x240148d8
 8021404:	10624dd3 	.word	0x10624dd3
 8021408:	002000c5 	.word	0x002000c5

0802140c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 802140c:	b480      	push	{r7}
 802140e:	b085      	sub	sp, #20
 8021410:	af00      	add	r7, sp, #0
 8021412:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8021414:	4b11      	ldr	r3, [pc, #68]	@ (802145c <SDMMC_GetCmdError+0x50>)
 8021416:	681b      	ldr	r3, [r3, #0]
 8021418:	4a11      	ldr	r2, [pc, #68]	@ (8021460 <SDMMC_GetCmdError+0x54>)
 802141a:	fba2 2303 	umull	r2, r3, r2, r3
 802141e:	0a5b      	lsrs	r3, r3, #9
 8021420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021424:	fb02 f303 	mul.w	r3, r2, r3
 8021428:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 802142a:	68fb      	ldr	r3, [r7, #12]
 802142c:	1e5a      	subs	r2, r3, #1
 802142e:	60fa      	str	r2, [r7, #12]
 8021430:	2b00      	cmp	r3, #0
 8021432:	d102      	bne.n	802143a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8021434:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021438:	e009      	b.n	802144e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 802143a:	687b      	ldr	r3, [r7, #4]
 802143c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802143e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021442:	2b00      	cmp	r3, #0
 8021444:	d0f1      	beq.n	802142a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8021446:	687b      	ldr	r3, [r7, #4]
 8021448:	4a06      	ldr	r2, [pc, #24]	@ (8021464 <SDMMC_GetCmdError+0x58>)
 802144a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 802144c:	2300      	movs	r3, #0
}
 802144e:	4618      	mov	r0, r3
 8021450:	3714      	adds	r7, #20
 8021452:	46bd      	mov	sp, r7
 8021454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021458:	4770      	bx	lr
 802145a:	bf00      	nop
 802145c:	240148d8 	.word	0x240148d8
 8021460:	10624dd3 	.word	0x10624dd3
 8021464:	002000c5 	.word	0x002000c5

08021468 <LL_SPI_IsEnabled>:
{
 8021468:	b480      	push	{r7}
 802146a:	b083      	sub	sp, #12
 802146c:	af00      	add	r7, sp, #0
 802146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	681b      	ldr	r3, [r3, #0]
 8021474:	f003 0301 	and.w	r3, r3, #1
 8021478:	2b01      	cmp	r3, #1
 802147a:	d101      	bne.n	8021480 <LL_SPI_IsEnabled+0x18>
 802147c:	2301      	movs	r3, #1
 802147e:	e000      	b.n	8021482 <LL_SPI_IsEnabled+0x1a>
 8021480:	2300      	movs	r3, #0
}
 8021482:	4618      	mov	r0, r3
 8021484:	370c      	adds	r7, #12
 8021486:	46bd      	mov	sp, r7
 8021488:	f85d 7b04 	ldr.w	r7, [sp], #4
 802148c:	4770      	bx	lr

0802148e <LL_SPI_SetInternalSSLevel>:
{
 802148e:	b480      	push	{r7}
 8021490:	b083      	sub	sp, #12
 8021492:	af00      	add	r7, sp, #0
 8021494:	6078      	str	r0, [r7, #4]
 8021496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	681b      	ldr	r3, [r3, #0]
 802149c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80214a0:	683b      	ldr	r3, [r7, #0]
 80214a2:	431a      	orrs	r2, r3
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	601a      	str	r2, [r3, #0]
}
 80214a8:	bf00      	nop
 80214aa:	370c      	adds	r7, #12
 80214ac:	46bd      	mov	sp, r7
 80214ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214b2:	4770      	bx	lr

080214b4 <LL_SPI_GetNSSPolarity>:
{
 80214b4:	b480      	push	{r7}
 80214b6:	b083      	sub	sp, #12
 80214b8:	af00      	add	r7, sp, #0
 80214ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 80214bc:	687b      	ldr	r3, [r7, #4]
 80214be:	68db      	ldr	r3, [r3, #12]
 80214c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 80214c4:	4618      	mov	r0, r3
 80214c6:	370c      	adds	r7, #12
 80214c8:	46bd      	mov	sp, r7
 80214ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ce:	4770      	bx	lr

080214d0 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80214d0:	b480      	push	{r7}
 80214d2:	b083      	sub	sp, #12
 80214d4:	af00      	add	r7, sp, #0
 80214d6:	6078      	str	r0, [r7, #4]
 80214d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 80214da:	687b      	ldr	r3, [r7, #4]
 80214dc:	683a      	ldr	r2, [r7, #0]
 80214de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80214e0:	bf00      	nop
 80214e2:	370c      	adds	r7, #12
 80214e4:	46bd      	mov	sp, r7
 80214e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ea:	4770      	bx	lr

080214ec <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80214ec:	b580      	push	{r7, lr}
 80214ee:	b086      	sub	sp, #24
 80214f0:	af00      	add	r7, sp, #0
 80214f2:	6078      	str	r0, [r7, #4]
 80214f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80214f6:	2301      	movs	r3, #1
 80214f8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 80214fa:	6878      	ldr	r0, [r7, #4]
 80214fc:	f7ff ffb4 	bl	8021468 <LL_SPI_IsEnabled>
 8021500:	4603      	mov	r3, r0
 8021502:	2b00      	cmp	r3, #0
 8021504:	d167      	bne.n	80215d6 <LL_SPI_Init+0xea>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 8021506:	687b      	ldr	r3, [r7, #4]
 8021508:	689a      	ldr	r2, [r3, #8]
 802150a:	4b35      	ldr	r3, [pc, #212]	@ (80215e0 <LL_SPI_Init+0xf4>)
 802150c:	4013      	ands	r3, r2
 802150e:	683a      	ldr	r2, [r7, #0]
 8021510:	6991      	ldr	r1, [r2, #24]
 8021512:	683a      	ldr	r2, [r7, #0]
 8021514:	6a12      	ldr	r2, [r2, #32]
 8021516:	4311      	orrs	r1, r2
 8021518:	683a      	ldr	r2, [r7, #0]
 802151a:	6892      	ldr	r2, [r2, #8]
 802151c:	430a      	orrs	r2, r1
 802151e:	431a      	orrs	r2, r3
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 8021524:	683b      	ldr	r3, [r7, #0]
 8021526:	695b      	ldr	r3, [r3, #20]
 8021528:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 802152a:	683b      	ldr	r3, [r7, #0]
 802152c:	685b      	ldr	r3, [r3, #4]
 802152e:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 8021530:	6878      	ldr	r0, [r7, #4]
 8021532:	f7ff ffbf 	bl	80214b4 <LL_SPI_GetNSSPolarity>
 8021536:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 8021538:	693b      	ldr	r3, [r7, #16]
 802153a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 802153e:	d112      	bne.n	8021566 <LL_SPI_Init+0x7a>
 8021540:	68bb      	ldr	r3, [r7, #8]
 8021542:	2b00      	cmp	r3, #0
 8021544:	d103      	bne.n	802154e <LL_SPI_Init+0x62>
 8021546:	68fb      	ldr	r3, [r7, #12]
 8021548:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802154c:	d006      	beq.n	802155c <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 802154e:	68bb      	ldr	r3, [r7, #8]
 8021550:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021554:	d107      	bne.n	8021566 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 8021556:	68fb      	ldr	r3, [r7, #12]
 8021558:	2b00      	cmp	r3, #0
 802155a:	d104      	bne.n	8021566 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 802155c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8021560:	6878      	ldr	r0, [r7, #4]
 8021562:	f7ff ff94 	bl	802148e <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 8021566:	687b      	ldr	r3, [r7, #4]
 8021568:	68da      	ldr	r2, [r3, #12]
 802156a:	4b1e      	ldr	r3, [pc, #120]	@ (80215e4 <LL_SPI_Init+0xf8>)
 802156c:	4013      	ands	r3, r2
 802156e:	683a      	ldr	r2, [r7, #0]
 8021570:	6951      	ldr	r1, [r2, #20]
 8021572:	683a      	ldr	r2, [r7, #0]
 8021574:	68d2      	ldr	r2, [r2, #12]
 8021576:	4311      	orrs	r1, r2
 8021578:	683a      	ldr	r2, [r7, #0]
 802157a:	6912      	ldr	r2, [r2, #16]
 802157c:	4311      	orrs	r1, r2
 802157e:	683a      	ldr	r2, [r7, #0]
 8021580:	69d2      	ldr	r2, [r2, #28]
 8021582:	4311      	orrs	r1, r2
 8021584:	683a      	ldr	r2, [r7, #0]
 8021586:	6852      	ldr	r2, [r2, #4]
 8021588:	4311      	orrs	r1, r2
 802158a:	683a      	ldr	r2, [r7, #0]
 802158c:	6812      	ldr	r2, [r2, #0]
 802158e:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 8021592:	430a      	orrs	r2, r1
 8021594:	431a      	orrs	r2, r3
 8021596:	687b      	ldr	r3, [r7, #4]
 8021598:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	681b      	ldr	r3, [r3, #0]
 802159e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80215a2:	683b      	ldr	r3, [r7, #0]
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80215aa:	431a      	orrs	r2, r3
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80215b0:	683b      	ldr	r3, [r7, #0]
 80215b2:	6a1b      	ldr	r3, [r3, #32]
 80215b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80215b8:	d105      	bne.n	80215c6 <LL_SPI_Init+0xda>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80215ba:	683b      	ldr	r3, [r7, #0]
 80215bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80215be:	4619      	mov	r1, r3
 80215c0:	6878      	ldr	r0, [r7, #4]
 80215c2:	f7ff ff85 	bl	80214d0 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80215ca:	f023 0201 	bic.w	r2, r3, #1
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 80215d2:	2300      	movs	r3, #0
 80215d4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80215d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80215d8:	4618      	mov	r0, r3
 80215da:	3718      	adds	r7, #24
 80215dc:	46bd      	mov	sp, r7
 80215de:	bd80      	pop	{r7, pc}
 80215e0:	8fbfffe0 	.word	0x8fbfffe0
 80215e4:	d839ffff 	.word	0xd839ffff

080215e8 <LL_TIM_SetPrescaler>:
{
 80215e8:	b480      	push	{r7}
 80215ea:	b083      	sub	sp, #12
 80215ec:	af00      	add	r7, sp, #0
 80215ee:	6078      	str	r0, [r7, #4]
 80215f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	683a      	ldr	r2, [r7, #0]
 80215f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80215f8:	bf00      	nop
 80215fa:	370c      	adds	r7, #12
 80215fc:	46bd      	mov	sp, r7
 80215fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021602:	4770      	bx	lr

08021604 <LL_TIM_SetAutoReload>:
{
 8021604:	b480      	push	{r7}
 8021606:	b083      	sub	sp, #12
 8021608:	af00      	add	r7, sp, #0
 802160a:	6078      	str	r0, [r7, #4]
 802160c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 802160e:	687b      	ldr	r3, [r7, #4]
 8021610:	683a      	ldr	r2, [r7, #0]
 8021612:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8021614:	bf00      	nop
 8021616:	370c      	adds	r7, #12
 8021618:	46bd      	mov	sp, r7
 802161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802161e:	4770      	bx	lr

08021620 <LL_TIM_SetRepetitionCounter>:
{
 8021620:	b480      	push	{r7}
 8021622:	b083      	sub	sp, #12
 8021624:	af00      	add	r7, sp, #0
 8021626:	6078      	str	r0, [r7, #4]
 8021628:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 802162a:	687b      	ldr	r3, [r7, #4]
 802162c:	683a      	ldr	r2, [r7, #0]
 802162e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8021630:	bf00      	nop
 8021632:	370c      	adds	r7, #12
 8021634:	46bd      	mov	sp, r7
 8021636:	f85d 7b04 	ldr.w	r7, [sp], #4
 802163a:	4770      	bx	lr

0802163c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 802163c:	b480      	push	{r7}
 802163e:	b083      	sub	sp, #12
 8021640:	af00      	add	r7, sp, #0
 8021642:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8021644:	687b      	ldr	r3, [r7, #4]
 8021646:	695b      	ldr	r3, [r3, #20]
 8021648:	f043 0201 	orr.w	r2, r3, #1
 802164c:	687b      	ldr	r3, [r7, #4]
 802164e:	615a      	str	r2, [r3, #20]
}
 8021650:	bf00      	nop
 8021652:	370c      	adds	r7, #12
 8021654:	46bd      	mov	sp, r7
 8021656:	f85d 7b04 	ldr.w	r7, [sp], #4
 802165a:	4770      	bx	lr

0802165c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 802165c:	b580      	push	{r7, lr}
 802165e:	b084      	sub	sp, #16
 8021660:	af00      	add	r7, sp, #0
 8021662:	6078      	str	r0, [r7, #4]
 8021664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	681b      	ldr	r3, [r3, #0]
 802166a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	4a3d      	ldr	r2, [pc, #244]	@ (8021764 <LL_TIM_Init+0x108>)
 8021670:	4293      	cmp	r3, r2
 8021672:	d013      	beq.n	802169c <LL_TIM_Init+0x40>
 8021674:	687b      	ldr	r3, [r7, #4]
 8021676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802167a:	d00f      	beq.n	802169c <LL_TIM_Init+0x40>
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	4a3a      	ldr	r2, [pc, #232]	@ (8021768 <LL_TIM_Init+0x10c>)
 8021680:	4293      	cmp	r3, r2
 8021682:	d00b      	beq.n	802169c <LL_TIM_Init+0x40>
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	4a39      	ldr	r2, [pc, #228]	@ (802176c <LL_TIM_Init+0x110>)
 8021688:	4293      	cmp	r3, r2
 802168a:	d007      	beq.n	802169c <LL_TIM_Init+0x40>
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	4a38      	ldr	r2, [pc, #224]	@ (8021770 <LL_TIM_Init+0x114>)
 8021690:	4293      	cmp	r3, r2
 8021692:	d003      	beq.n	802169c <LL_TIM_Init+0x40>
 8021694:	687b      	ldr	r3, [r7, #4]
 8021696:	4a37      	ldr	r2, [pc, #220]	@ (8021774 <LL_TIM_Init+0x118>)
 8021698:	4293      	cmp	r3, r2
 802169a:	d106      	bne.n	80216aa <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 802169c:	68fb      	ldr	r3, [r7, #12]
 802169e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80216a2:	683b      	ldr	r3, [r7, #0]
 80216a4:	685b      	ldr	r3, [r3, #4]
 80216a6:	4313      	orrs	r3, r2
 80216a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80216aa:	687b      	ldr	r3, [r7, #4]
 80216ac:	4a2d      	ldr	r2, [pc, #180]	@ (8021764 <LL_TIM_Init+0x108>)
 80216ae:	4293      	cmp	r3, r2
 80216b0:	d01f      	beq.n	80216f2 <LL_TIM_Init+0x96>
 80216b2:	687b      	ldr	r3, [r7, #4]
 80216b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80216b8:	d01b      	beq.n	80216f2 <LL_TIM_Init+0x96>
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	4a2a      	ldr	r2, [pc, #168]	@ (8021768 <LL_TIM_Init+0x10c>)
 80216be:	4293      	cmp	r3, r2
 80216c0:	d017      	beq.n	80216f2 <LL_TIM_Init+0x96>
 80216c2:	687b      	ldr	r3, [r7, #4]
 80216c4:	4a29      	ldr	r2, [pc, #164]	@ (802176c <LL_TIM_Init+0x110>)
 80216c6:	4293      	cmp	r3, r2
 80216c8:	d013      	beq.n	80216f2 <LL_TIM_Init+0x96>
 80216ca:	687b      	ldr	r3, [r7, #4]
 80216cc:	4a28      	ldr	r2, [pc, #160]	@ (8021770 <LL_TIM_Init+0x114>)
 80216ce:	4293      	cmp	r3, r2
 80216d0:	d00f      	beq.n	80216f2 <LL_TIM_Init+0x96>
 80216d2:	687b      	ldr	r3, [r7, #4]
 80216d4:	4a27      	ldr	r2, [pc, #156]	@ (8021774 <LL_TIM_Init+0x118>)
 80216d6:	4293      	cmp	r3, r2
 80216d8:	d00b      	beq.n	80216f2 <LL_TIM_Init+0x96>
 80216da:	687b      	ldr	r3, [r7, #4]
 80216dc:	4a26      	ldr	r2, [pc, #152]	@ (8021778 <LL_TIM_Init+0x11c>)
 80216de:	4293      	cmp	r3, r2
 80216e0:	d007      	beq.n	80216f2 <LL_TIM_Init+0x96>
 80216e2:	687b      	ldr	r3, [r7, #4]
 80216e4:	4a25      	ldr	r2, [pc, #148]	@ (802177c <LL_TIM_Init+0x120>)
 80216e6:	4293      	cmp	r3, r2
 80216e8:	d003      	beq.n	80216f2 <LL_TIM_Init+0x96>
 80216ea:	687b      	ldr	r3, [r7, #4]
 80216ec:	4a24      	ldr	r2, [pc, #144]	@ (8021780 <LL_TIM_Init+0x124>)
 80216ee:	4293      	cmp	r3, r2
 80216f0:	d106      	bne.n	8021700 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80216f2:	68fb      	ldr	r3, [r7, #12]
 80216f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80216f8:	683b      	ldr	r3, [r7, #0]
 80216fa:	68db      	ldr	r3, [r3, #12]
 80216fc:	4313      	orrs	r3, r2
 80216fe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8021700:	687b      	ldr	r3, [r7, #4]
 8021702:	68fa      	ldr	r2, [r7, #12]
 8021704:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8021706:	683b      	ldr	r3, [r7, #0]
 8021708:	689b      	ldr	r3, [r3, #8]
 802170a:	4619      	mov	r1, r3
 802170c:	6878      	ldr	r0, [r7, #4]
 802170e:	f7ff ff79 	bl	8021604 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8021712:	683b      	ldr	r3, [r7, #0]
 8021714:	881b      	ldrh	r3, [r3, #0]
 8021716:	4619      	mov	r1, r3
 8021718:	6878      	ldr	r0, [r7, #4]
 802171a:	f7ff ff65 	bl	80215e8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802171e:	687b      	ldr	r3, [r7, #4]
 8021720:	4a10      	ldr	r2, [pc, #64]	@ (8021764 <LL_TIM_Init+0x108>)
 8021722:	4293      	cmp	r3, r2
 8021724:	d00f      	beq.n	8021746 <LL_TIM_Init+0xea>
 8021726:	687b      	ldr	r3, [r7, #4]
 8021728:	4a12      	ldr	r2, [pc, #72]	@ (8021774 <LL_TIM_Init+0x118>)
 802172a:	4293      	cmp	r3, r2
 802172c:	d00b      	beq.n	8021746 <LL_TIM_Init+0xea>
 802172e:	687b      	ldr	r3, [r7, #4]
 8021730:	4a11      	ldr	r2, [pc, #68]	@ (8021778 <LL_TIM_Init+0x11c>)
 8021732:	4293      	cmp	r3, r2
 8021734:	d007      	beq.n	8021746 <LL_TIM_Init+0xea>
 8021736:	687b      	ldr	r3, [r7, #4]
 8021738:	4a10      	ldr	r2, [pc, #64]	@ (802177c <LL_TIM_Init+0x120>)
 802173a:	4293      	cmp	r3, r2
 802173c:	d003      	beq.n	8021746 <LL_TIM_Init+0xea>
 802173e:	687b      	ldr	r3, [r7, #4]
 8021740:	4a0f      	ldr	r2, [pc, #60]	@ (8021780 <LL_TIM_Init+0x124>)
 8021742:	4293      	cmp	r3, r2
 8021744:	d105      	bne.n	8021752 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8021746:	683b      	ldr	r3, [r7, #0]
 8021748:	691b      	ldr	r3, [r3, #16]
 802174a:	4619      	mov	r1, r3
 802174c:	6878      	ldr	r0, [r7, #4]
 802174e:	f7ff ff67 	bl	8021620 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8021752:	6878      	ldr	r0, [r7, #4]
 8021754:	f7ff ff72 	bl	802163c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8021758:	2300      	movs	r3, #0
}
 802175a:	4618      	mov	r0, r3
 802175c:	3710      	adds	r7, #16
 802175e:	46bd      	mov	sp, r7
 8021760:	bd80      	pop	{r7, pc}
 8021762:	bf00      	nop
 8021764:	40010000 	.word	0x40010000
 8021768:	40000400 	.word	0x40000400
 802176c:	40000800 	.word	0x40000800
 8021770:	40000c00 	.word	0x40000c00
 8021774:	40010400 	.word	0x40010400
 8021778:	40014000 	.word	0x40014000
 802177c:	40014400 	.word	0x40014400
 8021780:	40014800 	.word	0x40014800

08021784 <LL_USART_IsEnabled>:
{
 8021784:	b480      	push	{r7}
 8021786:	b083      	sub	sp, #12
 8021788:	af00      	add	r7, sp, #0
 802178a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 802178c:	687b      	ldr	r3, [r7, #4]
 802178e:	681b      	ldr	r3, [r3, #0]
 8021790:	f003 0301 	and.w	r3, r3, #1
 8021794:	2b01      	cmp	r3, #1
 8021796:	d101      	bne.n	802179c <LL_USART_IsEnabled+0x18>
 8021798:	2301      	movs	r3, #1
 802179a:	e000      	b.n	802179e <LL_USART_IsEnabled+0x1a>
 802179c:	2300      	movs	r3, #0
}
 802179e:	4618      	mov	r0, r3
 80217a0:	370c      	adds	r7, #12
 80217a2:	46bd      	mov	sp, r7
 80217a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217a8:	4770      	bx	lr

080217aa <LL_USART_SetPrescaler>:
{
 80217aa:	b480      	push	{r7}
 80217ac:	b083      	sub	sp, #12
 80217ae:	af00      	add	r7, sp, #0
 80217b0:	6078      	str	r0, [r7, #4]
 80217b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80217b4:	687b      	ldr	r3, [r7, #4]
 80217b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80217b8:	f023 030f 	bic.w	r3, r3, #15
 80217bc:	683a      	ldr	r2, [r7, #0]
 80217be:	b292      	uxth	r2, r2
 80217c0:	431a      	orrs	r2, r3
 80217c2:	687b      	ldr	r3, [r7, #4]
 80217c4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80217c6:	bf00      	nop
 80217c8:	370c      	adds	r7, #12
 80217ca:	46bd      	mov	sp, r7
 80217cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217d0:	4770      	bx	lr

080217d2 <LL_USART_SetStopBitsLength>:
{
 80217d2:	b480      	push	{r7}
 80217d4:	b083      	sub	sp, #12
 80217d6:	af00      	add	r7, sp, #0
 80217d8:	6078      	str	r0, [r7, #4]
 80217da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	685b      	ldr	r3, [r3, #4]
 80217e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80217e4:	683b      	ldr	r3, [r7, #0]
 80217e6:	431a      	orrs	r2, r3
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	605a      	str	r2, [r3, #4]
}
 80217ec:	bf00      	nop
 80217ee:	370c      	adds	r7, #12
 80217f0:	46bd      	mov	sp, r7
 80217f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217f6:	4770      	bx	lr

080217f8 <LL_USART_SetHWFlowCtrl>:
{
 80217f8:	b480      	push	{r7}
 80217fa:	b083      	sub	sp, #12
 80217fc:	af00      	add	r7, sp, #0
 80217fe:	6078      	str	r0, [r7, #4]
 8021800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8021802:	687b      	ldr	r3, [r7, #4]
 8021804:	689b      	ldr	r3, [r3, #8]
 8021806:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 802180a:	683b      	ldr	r3, [r7, #0]
 802180c:	431a      	orrs	r2, r3
 802180e:	687b      	ldr	r3, [r7, #4]
 8021810:	609a      	str	r2, [r3, #8]
}
 8021812:	bf00      	nop
 8021814:	370c      	adds	r7, #12
 8021816:	46bd      	mov	sp, r7
 8021818:	f85d 7b04 	ldr.w	r7, [sp], #4
 802181c:	4770      	bx	lr
	...

08021820 <LL_USART_SetBaudRate>:
{
 8021820:	b480      	push	{r7}
 8021822:	b087      	sub	sp, #28
 8021824:	af00      	add	r7, sp, #0
 8021826:	60f8      	str	r0, [r7, #12]
 8021828:	60b9      	str	r1, [r7, #8]
 802182a:	607a      	str	r2, [r7, #4]
 802182c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	2b0b      	cmp	r3, #11
 8021832:	d83c      	bhi.n	80218ae <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8021834:	6a3b      	ldr	r3, [r7, #32]
 8021836:	2b00      	cmp	r3, #0
 8021838:	d039      	beq.n	80218ae <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 802183a:	683b      	ldr	r3, [r7, #0]
 802183c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021840:	d122      	bne.n	8021888 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8021842:	687b      	ldr	r3, [r7, #4]
 8021844:	b2db      	uxtb	r3, r3
 8021846:	461a      	mov	r2, r3
 8021848:	4b1c      	ldr	r3, [pc, #112]	@ (80218bc <LL_USART_SetBaudRate+0x9c>)
 802184a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802184e:	68ba      	ldr	r2, [r7, #8]
 8021850:	fbb2 f3f3 	udiv	r3, r2, r3
 8021854:	005a      	lsls	r2, r3, #1
 8021856:	6a3b      	ldr	r3, [r7, #32]
 8021858:	085b      	lsrs	r3, r3, #1
 802185a:	441a      	add	r2, r3
 802185c:	6a3b      	ldr	r3, [r7, #32]
 802185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021862:	b29b      	uxth	r3, r3
 8021864:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8021866:	697a      	ldr	r2, [r7, #20]
 8021868:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 802186c:	4013      	ands	r3, r2
 802186e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8021870:	697b      	ldr	r3, [r7, #20]
 8021872:	085b      	lsrs	r3, r3, #1
 8021874:	b29b      	uxth	r3, r3
 8021876:	f003 0307 	and.w	r3, r3, #7
 802187a:	693a      	ldr	r2, [r7, #16]
 802187c:	4313      	orrs	r3, r2
 802187e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	693a      	ldr	r2, [r7, #16]
 8021884:	60da      	str	r2, [r3, #12]
}
 8021886:	e012      	b.n	80218ae <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8021888:	687b      	ldr	r3, [r7, #4]
 802188a:	b2db      	uxtb	r3, r3
 802188c:	461a      	mov	r2, r3
 802188e:	4b0b      	ldr	r3, [pc, #44]	@ (80218bc <LL_USART_SetBaudRate+0x9c>)
 8021890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021894:	68ba      	ldr	r2, [r7, #8]
 8021896:	fbb2 f2f3 	udiv	r2, r2, r3
 802189a:	6a3b      	ldr	r3, [r7, #32]
 802189c:	085b      	lsrs	r3, r3, #1
 802189e:	441a      	add	r2, r3
 80218a0:	6a3b      	ldr	r3, [r7, #32]
 80218a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80218a6:	b29b      	uxth	r3, r3
 80218a8:	461a      	mov	r2, r3
 80218aa:	68fb      	ldr	r3, [r7, #12]
 80218ac:	60da      	str	r2, [r3, #12]
}
 80218ae:	bf00      	nop
 80218b0:	371c      	adds	r7, #28
 80218b2:	46bd      	mov	sp, r7
 80218b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218b8:	4770      	bx	lr
 80218ba:	bf00      	nop
 80218bc:	0802637c 	.word	0x0802637c

080218c0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80218c0:	b580      	push	{r7, lr}
 80218c2:	b086      	sub	sp, #24
 80218c4:	af02      	add	r7, sp, #8
 80218c6:	6078      	str	r0, [r7, #4]
 80218c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80218ca:	2301      	movs	r3, #1
 80218cc:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80218ce:	2300      	movs	r3, #0
 80218d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80218d2:	6878      	ldr	r0, [r7, #4]
 80218d4:	f7ff ff56 	bl	8021784 <LL_USART_IsEnabled>
 80218d8:	4603      	mov	r3, r0
 80218da:	2b00      	cmp	r3, #0
 80218dc:	d17f      	bne.n	80219de <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80218de:	687b      	ldr	r3, [r7, #4]
 80218e0:	681a      	ldr	r2, [r3, #0]
 80218e2:	4b41      	ldr	r3, [pc, #260]	@ (80219e8 <LL_USART_Init+0x128>)
 80218e4:	4013      	ands	r3, r2
 80218e6:	683a      	ldr	r2, [r7, #0]
 80218e8:	6891      	ldr	r1, [r2, #8]
 80218ea:	683a      	ldr	r2, [r7, #0]
 80218ec:	6912      	ldr	r2, [r2, #16]
 80218ee:	4311      	orrs	r1, r2
 80218f0:	683a      	ldr	r2, [r7, #0]
 80218f2:	6952      	ldr	r2, [r2, #20]
 80218f4:	4311      	orrs	r1, r2
 80218f6:	683a      	ldr	r2, [r7, #0]
 80218f8:	69d2      	ldr	r2, [r2, #28]
 80218fa:	430a      	orrs	r2, r1
 80218fc:	431a      	orrs	r2, r3
 80218fe:	687b      	ldr	r3, [r7, #4]
 8021900:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8021902:	683b      	ldr	r3, [r7, #0]
 8021904:	68db      	ldr	r3, [r3, #12]
 8021906:	4619      	mov	r1, r3
 8021908:	6878      	ldr	r0, [r7, #4]
 802190a:	f7ff ff62 	bl	80217d2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 802190e:	683b      	ldr	r3, [r7, #0]
 8021910:	699b      	ldr	r3, [r3, #24]
 8021912:	4619      	mov	r1, r3
 8021914:	6878      	ldr	r0, [r7, #4]
 8021916:	f7ff ff6f 	bl	80217f8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 802191a:	687b      	ldr	r3, [r7, #4]
 802191c:	4a33      	ldr	r2, [pc, #204]	@ (80219ec <LL_USART_Init+0x12c>)
 802191e:	4293      	cmp	r3, r2
 8021920:	d104      	bne.n	802192c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8021922:	4833      	ldr	r0, [pc, #204]	@ (80219f0 <LL_USART_Init+0x130>)
 8021924:	f7fe ff58 	bl	80207d8 <LL_RCC_GetUSARTClockFreq>
 8021928:	60b8      	str	r0, [r7, #8]
 802192a:	e03d      	b.n	80219a8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 802192c:	687b      	ldr	r3, [r7, #4]
 802192e:	4a31      	ldr	r2, [pc, #196]	@ (80219f4 <LL_USART_Init+0x134>)
 8021930:	4293      	cmp	r3, r2
 8021932:	d104      	bne.n	802193e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8021934:	4830      	ldr	r0, [pc, #192]	@ (80219f8 <LL_USART_Init+0x138>)
 8021936:	f7fe ff4f 	bl	80207d8 <LL_RCC_GetUSARTClockFreq>
 802193a:	60b8      	str	r0, [r7, #8]
 802193c:	e034      	b.n	80219a8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 802193e:	687b      	ldr	r3, [r7, #4]
 8021940:	4a2e      	ldr	r2, [pc, #184]	@ (80219fc <LL_USART_Init+0x13c>)
 8021942:	4293      	cmp	r3, r2
 8021944:	d104      	bne.n	8021950 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8021946:	482c      	ldr	r0, [pc, #176]	@ (80219f8 <LL_USART_Init+0x138>)
 8021948:	f7fe ff46 	bl	80207d8 <LL_RCC_GetUSARTClockFreq>
 802194c:	60b8      	str	r0, [r7, #8]
 802194e:	e02b      	b.n	80219a8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 8021950:	687b      	ldr	r3, [r7, #4]
 8021952:	4a2b      	ldr	r2, [pc, #172]	@ (8021a00 <LL_USART_Init+0x140>)
 8021954:	4293      	cmp	r3, r2
 8021956:	d104      	bne.n	8021962 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8021958:	4827      	ldr	r0, [pc, #156]	@ (80219f8 <LL_USART_Init+0x138>)
 802195a:	f7fe ff3d 	bl	80207d8 <LL_RCC_GetUSARTClockFreq>
 802195e:	60b8      	str	r0, [r7, #8]
 8021960:	e022      	b.n	80219a8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 8021962:	687b      	ldr	r3, [r7, #4]
 8021964:	4a27      	ldr	r2, [pc, #156]	@ (8021a04 <LL_USART_Init+0x144>)
 8021966:	4293      	cmp	r3, r2
 8021968:	d104      	bne.n	8021974 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 802196a:	4823      	ldr	r0, [pc, #140]	@ (80219f8 <LL_USART_Init+0x138>)
 802196c:	f7fe ff34 	bl	80207d8 <LL_RCC_GetUSARTClockFreq>
 8021970:	60b8      	str	r0, [r7, #8]
 8021972:	e019      	b.n	80219a8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 8021974:	687b      	ldr	r3, [r7, #4]
 8021976:	4a24      	ldr	r2, [pc, #144]	@ (8021a08 <LL_USART_Init+0x148>)
 8021978:	4293      	cmp	r3, r2
 802197a:	d104      	bne.n	8021986 <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 802197c:	481c      	ldr	r0, [pc, #112]	@ (80219f0 <LL_USART_Init+0x130>)
 802197e:	f7fe ff2b 	bl	80207d8 <LL_RCC_GetUSARTClockFreq>
 8021982:	60b8      	str	r0, [r7, #8]
 8021984:	e010      	b.n	80219a8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 8021986:	687b      	ldr	r3, [r7, #4]
 8021988:	4a20      	ldr	r2, [pc, #128]	@ (8021a0c <LL_USART_Init+0x14c>)
 802198a:	4293      	cmp	r3, r2
 802198c:	d104      	bne.n	8021998 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 802198e:	481a      	ldr	r0, [pc, #104]	@ (80219f8 <LL_USART_Init+0x138>)
 8021990:	f7fe ff22 	bl	80207d8 <LL_RCC_GetUSARTClockFreq>
 8021994:	60b8      	str	r0, [r7, #8]
 8021996:	e007      	b.n	80219a8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	4a1d      	ldr	r2, [pc, #116]	@ (8021a10 <LL_USART_Init+0x150>)
 802199c:	4293      	cmp	r3, r2
 802199e:	d103      	bne.n	80219a8 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80219a0:	4815      	ldr	r0, [pc, #84]	@ (80219f8 <LL_USART_Init+0x138>)
 80219a2:	f7fe ff19 	bl	80207d8 <LL_RCC_GetUSARTClockFreq>
 80219a6:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80219a8:	68bb      	ldr	r3, [r7, #8]
 80219aa:	2b00      	cmp	r3, #0
 80219ac:	d011      	beq.n	80219d2 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 80219ae:	683b      	ldr	r3, [r7, #0]
 80219b0:	685b      	ldr	r3, [r3, #4]
 80219b2:	2b00      	cmp	r3, #0
 80219b4:	d00d      	beq.n	80219d2 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 80219b6:	2300      	movs	r3, #0
 80219b8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 80219ba:	683b      	ldr	r3, [r7, #0]
 80219bc:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 80219be:	683b      	ldr	r3, [r7, #0]
 80219c0:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 80219c2:	683b      	ldr	r3, [r7, #0]
 80219c4:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 80219c6:	9300      	str	r3, [sp, #0]
 80219c8:	460b      	mov	r3, r1
 80219ca:	68b9      	ldr	r1, [r7, #8]
 80219cc:	6878      	ldr	r0, [r7, #4]
 80219ce:	f7ff ff27 	bl	8021820 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80219d2:	683b      	ldr	r3, [r7, #0]
 80219d4:	681b      	ldr	r3, [r3, #0]
 80219d6:	4619      	mov	r1, r3
 80219d8:	6878      	ldr	r0, [r7, #4]
 80219da:	f7ff fee6 	bl	80217aa <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80219de:	7bfb      	ldrb	r3, [r7, #15]
}
 80219e0:	4618      	mov	r0, r3
 80219e2:	3710      	adds	r7, #16
 80219e4:	46bd      	mov	sp, r7
 80219e6:	bd80      	pop	{r7, pc}
 80219e8:	efff69f3 	.word	0xefff69f3
 80219ec:	40011000 	.word	0x40011000
 80219f0:	07000308 	.word	0x07000308
 80219f4:	40004400 	.word	0x40004400
 80219f8:	07000008 	.word	0x07000008
 80219fc:	40004800 	.word	0x40004800
 8021a00:	40004c00 	.word	0x40004c00
 8021a04:	40005000 	.word	0x40005000
 8021a08:	40011400 	.word	0x40011400
 8021a0c:	40007800 	.word	0x40007800
 8021a10:	40007c00 	.word	0x40007c00

08021a14 <atoi>:
 8021a14:	220a      	movs	r2, #10
 8021a16:	2100      	movs	r1, #0
 8021a18:	f000 b8b8 	b.w	8021b8c <strtol>

08021a1c <rand>:
 8021a1c:	4b16      	ldr	r3, [pc, #88]	@ (8021a78 <rand+0x5c>)
 8021a1e:	b510      	push	{r4, lr}
 8021a20:	681c      	ldr	r4, [r3, #0]
 8021a22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021a24:	b9b3      	cbnz	r3, 8021a54 <rand+0x38>
 8021a26:	2018      	movs	r0, #24
 8021a28:	f000 fbda 	bl	80221e0 <malloc>
 8021a2c:	4602      	mov	r2, r0
 8021a2e:	6320      	str	r0, [r4, #48]	@ 0x30
 8021a30:	b920      	cbnz	r0, 8021a3c <rand+0x20>
 8021a32:	4b12      	ldr	r3, [pc, #72]	@ (8021a7c <rand+0x60>)
 8021a34:	4812      	ldr	r0, [pc, #72]	@ (8021a80 <rand+0x64>)
 8021a36:	2152      	movs	r1, #82	@ 0x52
 8021a38:	f000 fb6a 	bl	8022110 <__assert_func>
 8021a3c:	4911      	ldr	r1, [pc, #68]	@ (8021a84 <rand+0x68>)
 8021a3e:	4b12      	ldr	r3, [pc, #72]	@ (8021a88 <rand+0x6c>)
 8021a40:	e9c0 1300 	strd	r1, r3, [r0]
 8021a44:	4b11      	ldr	r3, [pc, #68]	@ (8021a8c <rand+0x70>)
 8021a46:	6083      	str	r3, [r0, #8]
 8021a48:	230b      	movs	r3, #11
 8021a4a:	8183      	strh	r3, [r0, #12]
 8021a4c:	2100      	movs	r1, #0
 8021a4e:	2001      	movs	r0, #1
 8021a50:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021a54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021a56:	480e      	ldr	r0, [pc, #56]	@ (8021a90 <rand+0x74>)
 8021a58:	690b      	ldr	r3, [r1, #16]
 8021a5a:	694c      	ldr	r4, [r1, #20]
 8021a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8021a94 <rand+0x78>)
 8021a5e:	4358      	muls	r0, r3
 8021a60:	fb02 0004 	mla	r0, r2, r4, r0
 8021a64:	fba3 3202 	umull	r3, r2, r3, r2
 8021a68:	3301      	adds	r3, #1
 8021a6a:	eb40 0002 	adc.w	r0, r0, r2
 8021a6e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021a72:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021a76:	bd10      	pop	{r4, pc}
 8021a78:	240149f8 	.word	0x240149f8
 8021a7c:	080263ac 	.word	0x080263ac
 8021a80:	080263c3 	.word	0x080263c3
 8021a84:	abcd330e 	.word	0xabcd330e
 8021a88:	e66d1234 	.word	0xe66d1234
 8021a8c:	0005deec 	.word	0x0005deec
 8021a90:	5851f42d 	.word	0x5851f42d
 8021a94:	4c957f2d 	.word	0x4c957f2d

08021a98 <_strtol_l.isra.0>:
 8021a98:	2b24      	cmp	r3, #36	@ 0x24
 8021a9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021a9e:	4686      	mov	lr, r0
 8021aa0:	4690      	mov	r8, r2
 8021aa2:	d801      	bhi.n	8021aa8 <_strtol_l.isra.0+0x10>
 8021aa4:	2b01      	cmp	r3, #1
 8021aa6:	d106      	bne.n	8021ab6 <_strtol_l.isra.0+0x1e>
 8021aa8:	f000 faf6 	bl	8022098 <__errno>
 8021aac:	2316      	movs	r3, #22
 8021aae:	6003      	str	r3, [r0, #0]
 8021ab0:	2000      	movs	r0, #0
 8021ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ab6:	4834      	ldr	r0, [pc, #208]	@ (8021b88 <_strtol_l.isra.0+0xf0>)
 8021ab8:	460d      	mov	r5, r1
 8021aba:	462a      	mov	r2, r5
 8021abc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021ac0:	5d06      	ldrb	r6, [r0, r4]
 8021ac2:	f016 0608 	ands.w	r6, r6, #8
 8021ac6:	d1f8      	bne.n	8021aba <_strtol_l.isra.0+0x22>
 8021ac8:	2c2d      	cmp	r4, #45	@ 0x2d
 8021aca:	d110      	bne.n	8021aee <_strtol_l.isra.0+0x56>
 8021acc:	782c      	ldrb	r4, [r5, #0]
 8021ace:	2601      	movs	r6, #1
 8021ad0:	1c95      	adds	r5, r2, #2
 8021ad2:	f033 0210 	bics.w	r2, r3, #16
 8021ad6:	d115      	bne.n	8021b04 <_strtol_l.isra.0+0x6c>
 8021ad8:	2c30      	cmp	r4, #48	@ 0x30
 8021ada:	d10d      	bne.n	8021af8 <_strtol_l.isra.0+0x60>
 8021adc:	782a      	ldrb	r2, [r5, #0]
 8021ade:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8021ae2:	2a58      	cmp	r2, #88	@ 0x58
 8021ae4:	d108      	bne.n	8021af8 <_strtol_l.isra.0+0x60>
 8021ae6:	786c      	ldrb	r4, [r5, #1]
 8021ae8:	3502      	adds	r5, #2
 8021aea:	2310      	movs	r3, #16
 8021aec:	e00a      	b.n	8021b04 <_strtol_l.isra.0+0x6c>
 8021aee:	2c2b      	cmp	r4, #43	@ 0x2b
 8021af0:	bf04      	itt	eq
 8021af2:	782c      	ldrbeq	r4, [r5, #0]
 8021af4:	1c95      	addeq	r5, r2, #2
 8021af6:	e7ec      	b.n	8021ad2 <_strtol_l.isra.0+0x3a>
 8021af8:	2b00      	cmp	r3, #0
 8021afa:	d1f6      	bne.n	8021aea <_strtol_l.isra.0+0x52>
 8021afc:	2c30      	cmp	r4, #48	@ 0x30
 8021afe:	bf14      	ite	ne
 8021b00:	230a      	movne	r3, #10
 8021b02:	2308      	moveq	r3, #8
 8021b04:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8021b08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021b0c:	2200      	movs	r2, #0
 8021b0e:	fbbc f9f3 	udiv	r9, ip, r3
 8021b12:	4610      	mov	r0, r2
 8021b14:	fb03 ca19 	mls	sl, r3, r9, ip
 8021b18:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8021b1c:	2f09      	cmp	r7, #9
 8021b1e:	d80f      	bhi.n	8021b40 <_strtol_l.isra.0+0xa8>
 8021b20:	463c      	mov	r4, r7
 8021b22:	42a3      	cmp	r3, r4
 8021b24:	dd1b      	ble.n	8021b5e <_strtol_l.isra.0+0xc6>
 8021b26:	1c57      	adds	r7, r2, #1
 8021b28:	d007      	beq.n	8021b3a <_strtol_l.isra.0+0xa2>
 8021b2a:	4581      	cmp	r9, r0
 8021b2c:	d314      	bcc.n	8021b58 <_strtol_l.isra.0+0xc0>
 8021b2e:	d101      	bne.n	8021b34 <_strtol_l.isra.0+0x9c>
 8021b30:	45a2      	cmp	sl, r4
 8021b32:	db11      	blt.n	8021b58 <_strtol_l.isra.0+0xc0>
 8021b34:	fb00 4003 	mla	r0, r0, r3, r4
 8021b38:	2201      	movs	r2, #1
 8021b3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021b3e:	e7eb      	b.n	8021b18 <_strtol_l.isra.0+0x80>
 8021b40:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8021b44:	2f19      	cmp	r7, #25
 8021b46:	d801      	bhi.n	8021b4c <_strtol_l.isra.0+0xb4>
 8021b48:	3c37      	subs	r4, #55	@ 0x37
 8021b4a:	e7ea      	b.n	8021b22 <_strtol_l.isra.0+0x8a>
 8021b4c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8021b50:	2f19      	cmp	r7, #25
 8021b52:	d804      	bhi.n	8021b5e <_strtol_l.isra.0+0xc6>
 8021b54:	3c57      	subs	r4, #87	@ 0x57
 8021b56:	e7e4      	b.n	8021b22 <_strtol_l.isra.0+0x8a>
 8021b58:	f04f 32ff 	mov.w	r2, #4294967295
 8021b5c:	e7ed      	b.n	8021b3a <_strtol_l.isra.0+0xa2>
 8021b5e:	1c53      	adds	r3, r2, #1
 8021b60:	d108      	bne.n	8021b74 <_strtol_l.isra.0+0xdc>
 8021b62:	2322      	movs	r3, #34	@ 0x22
 8021b64:	f8ce 3000 	str.w	r3, [lr]
 8021b68:	4660      	mov	r0, ip
 8021b6a:	f1b8 0f00 	cmp.w	r8, #0
 8021b6e:	d0a0      	beq.n	8021ab2 <_strtol_l.isra.0+0x1a>
 8021b70:	1e69      	subs	r1, r5, #1
 8021b72:	e006      	b.n	8021b82 <_strtol_l.isra.0+0xea>
 8021b74:	b106      	cbz	r6, 8021b78 <_strtol_l.isra.0+0xe0>
 8021b76:	4240      	negs	r0, r0
 8021b78:	f1b8 0f00 	cmp.w	r8, #0
 8021b7c:	d099      	beq.n	8021ab2 <_strtol_l.isra.0+0x1a>
 8021b7e:	2a00      	cmp	r2, #0
 8021b80:	d1f6      	bne.n	8021b70 <_strtol_l.isra.0+0xd8>
 8021b82:	f8c8 1000 	str.w	r1, [r8]
 8021b86:	e794      	b.n	8021ab2 <_strtol_l.isra.0+0x1a>
 8021b88:	0802648b 	.word	0x0802648b

08021b8c <strtol>:
 8021b8c:	4613      	mov	r3, r2
 8021b8e:	460a      	mov	r2, r1
 8021b90:	4601      	mov	r1, r0
 8021b92:	4802      	ldr	r0, [pc, #8]	@ (8021b9c <strtol+0x10>)
 8021b94:	6800      	ldr	r0, [r0, #0]
 8021b96:	f7ff bf7f 	b.w	8021a98 <_strtol_l.isra.0>
 8021b9a:	bf00      	nop
 8021b9c:	240149f8 	.word	0x240149f8

08021ba0 <_strtoul_l.isra.0>:
 8021ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021ba4:	4e34      	ldr	r6, [pc, #208]	@ (8021c78 <_strtoul_l.isra.0+0xd8>)
 8021ba6:	4686      	mov	lr, r0
 8021ba8:	460d      	mov	r5, r1
 8021baa:	4628      	mov	r0, r5
 8021bac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021bb0:	5d37      	ldrb	r7, [r6, r4]
 8021bb2:	f017 0708 	ands.w	r7, r7, #8
 8021bb6:	d1f8      	bne.n	8021baa <_strtoul_l.isra.0+0xa>
 8021bb8:	2c2d      	cmp	r4, #45	@ 0x2d
 8021bba:	d110      	bne.n	8021bde <_strtoul_l.isra.0+0x3e>
 8021bbc:	782c      	ldrb	r4, [r5, #0]
 8021bbe:	2701      	movs	r7, #1
 8021bc0:	1c85      	adds	r5, r0, #2
 8021bc2:	f033 0010 	bics.w	r0, r3, #16
 8021bc6:	d115      	bne.n	8021bf4 <_strtoul_l.isra.0+0x54>
 8021bc8:	2c30      	cmp	r4, #48	@ 0x30
 8021bca:	d10d      	bne.n	8021be8 <_strtoul_l.isra.0+0x48>
 8021bcc:	7828      	ldrb	r0, [r5, #0]
 8021bce:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8021bd2:	2858      	cmp	r0, #88	@ 0x58
 8021bd4:	d108      	bne.n	8021be8 <_strtoul_l.isra.0+0x48>
 8021bd6:	786c      	ldrb	r4, [r5, #1]
 8021bd8:	3502      	adds	r5, #2
 8021bda:	2310      	movs	r3, #16
 8021bdc:	e00a      	b.n	8021bf4 <_strtoul_l.isra.0+0x54>
 8021bde:	2c2b      	cmp	r4, #43	@ 0x2b
 8021be0:	bf04      	itt	eq
 8021be2:	782c      	ldrbeq	r4, [r5, #0]
 8021be4:	1c85      	addeq	r5, r0, #2
 8021be6:	e7ec      	b.n	8021bc2 <_strtoul_l.isra.0+0x22>
 8021be8:	2b00      	cmp	r3, #0
 8021bea:	d1f6      	bne.n	8021bda <_strtoul_l.isra.0+0x3a>
 8021bec:	2c30      	cmp	r4, #48	@ 0x30
 8021bee:	bf14      	ite	ne
 8021bf0:	230a      	movne	r3, #10
 8021bf2:	2308      	moveq	r3, #8
 8021bf4:	f04f 38ff 	mov.w	r8, #4294967295
 8021bf8:	2600      	movs	r6, #0
 8021bfa:	fbb8 f8f3 	udiv	r8, r8, r3
 8021bfe:	fb03 f908 	mul.w	r9, r3, r8
 8021c02:	ea6f 0909 	mvn.w	r9, r9
 8021c06:	4630      	mov	r0, r6
 8021c08:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8021c0c:	f1bc 0f09 	cmp.w	ip, #9
 8021c10:	d810      	bhi.n	8021c34 <_strtoul_l.isra.0+0x94>
 8021c12:	4664      	mov	r4, ip
 8021c14:	42a3      	cmp	r3, r4
 8021c16:	dd1e      	ble.n	8021c56 <_strtoul_l.isra.0+0xb6>
 8021c18:	f1b6 3fff 	cmp.w	r6, #4294967295
 8021c1c:	d007      	beq.n	8021c2e <_strtoul_l.isra.0+0x8e>
 8021c1e:	4580      	cmp	r8, r0
 8021c20:	d316      	bcc.n	8021c50 <_strtoul_l.isra.0+0xb0>
 8021c22:	d101      	bne.n	8021c28 <_strtoul_l.isra.0+0x88>
 8021c24:	45a1      	cmp	r9, r4
 8021c26:	db13      	blt.n	8021c50 <_strtoul_l.isra.0+0xb0>
 8021c28:	fb00 4003 	mla	r0, r0, r3, r4
 8021c2c:	2601      	movs	r6, #1
 8021c2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021c32:	e7e9      	b.n	8021c08 <_strtoul_l.isra.0+0x68>
 8021c34:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8021c38:	f1bc 0f19 	cmp.w	ip, #25
 8021c3c:	d801      	bhi.n	8021c42 <_strtoul_l.isra.0+0xa2>
 8021c3e:	3c37      	subs	r4, #55	@ 0x37
 8021c40:	e7e8      	b.n	8021c14 <_strtoul_l.isra.0+0x74>
 8021c42:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8021c46:	f1bc 0f19 	cmp.w	ip, #25
 8021c4a:	d804      	bhi.n	8021c56 <_strtoul_l.isra.0+0xb6>
 8021c4c:	3c57      	subs	r4, #87	@ 0x57
 8021c4e:	e7e1      	b.n	8021c14 <_strtoul_l.isra.0+0x74>
 8021c50:	f04f 36ff 	mov.w	r6, #4294967295
 8021c54:	e7eb      	b.n	8021c2e <_strtoul_l.isra.0+0x8e>
 8021c56:	1c73      	adds	r3, r6, #1
 8021c58:	d106      	bne.n	8021c68 <_strtoul_l.isra.0+0xc8>
 8021c5a:	2322      	movs	r3, #34	@ 0x22
 8021c5c:	f8ce 3000 	str.w	r3, [lr]
 8021c60:	4630      	mov	r0, r6
 8021c62:	b932      	cbnz	r2, 8021c72 <_strtoul_l.isra.0+0xd2>
 8021c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021c68:	b107      	cbz	r7, 8021c6c <_strtoul_l.isra.0+0xcc>
 8021c6a:	4240      	negs	r0, r0
 8021c6c:	2a00      	cmp	r2, #0
 8021c6e:	d0f9      	beq.n	8021c64 <_strtoul_l.isra.0+0xc4>
 8021c70:	b106      	cbz	r6, 8021c74 <_strtoul_l.isra.0+0xd4>
 8021c72:	1e69      	subs	r1, r5, #1
 8021c74:	6011      	str	r1, [r2, #0]
 8021c76:	e7f5      	b.n	8021c64 <_strtoul_l.isra.0+0xc4>
 8021c78:	0802648b 	.word	0x0802648b

08021c7c <strtoul>:
 8021c7c:	4613      	mov	r3, r2
 8021c7e:	460a      	mov	r2, r1
 8021c80:	4601      	mov	r1, r0
 8021c82:	4802      	ldr	r0, [pc, #8]	@ (8021c8c <strtoul+0x10>)
 8021c84:	6800      	ldr	r0, [r0, #0]
 8021c86:	f7ff bf8b 	b.w	8021ba0 <_strtoul_l.isra.0>
 8021c8a:	bf00      	nop
 8021c8c:	240149f8 	.word	0x240149f8

08021c90 <std>:
 8021c90:	2300      	movs	r3, #0
 8021c92:	b510      	push	{r4, lr}
 8021c94:	4604      	mov	r4, r0
 8021c96:	e9c0 3300 	strd	r3, r3, [r0]
 8021c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021c9e:	6083      	str	r3, [r0, #8]
 8021ca0:	8181      	strh	r1, [r0, #12]
 8021ca2:	6643      	str	r3, [r0, #100]	@ 0x64
 8021ca4:	81c2      	strh	r2, [r0, #14]
 8021ca6:	6183      	str	r3, [r0, #24]
 8021ca8:	4619      	mov	r1, r3
 8021caa:	2208      	movs	r2, #8
 8021cac:	305c      	adds	r0, #92	@ 0x5c
 8021cae:	f000 f976 	bl	8021f9e <memset>
 8021cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8021ce8 <std+0x58>)
 8021cb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8021cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8021cec <std+0x5c>)
 8021cb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021cba:	4b0d      	ldr	r3, [pc, #52]	@ (8021cf0 <std+0x60>)
 8021cbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8021cf4 <std+0x64>)
 8021cc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8021cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8021cf8 <std+0x68>)
 8021cc4:	6224      	str	r4, [r4, #32]
 8021cc6:	429c      	cmp	r4, r3
 8021cc8:	d006      	beq.n	8021cd8 <std+0x48>
 8021cca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021cce:	4294      	cmp	r4, r2
 8021cd0:	d002      	beq.n	8021cd8 <std+0x48>
 8021cd2:	33d0      	adds	r3, #208	@ 0xd0
 8021cd4:	429c      	cmp	r4, r3
 8021cd6:	d105      	bne.n	8021ce4 <std+0x54>
 8021cd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ce0:	f000 ba04 	b.w	80220ec <__retarget_lock_init_recursive>
 8021ce4:	bd10      	pop	{r4, pc}
 8021ce6:	bf00      	nop
 8021ce8:	08021ec5 	.word	0x08021ec5
 8021cec:	08021ee7 	.word	0x08021ee7
 8021cf0:	08021f1f 	.word	0x08021f1f
 8021cf4:	08021f43 	.word	0x08021f43
 8021cf8:	2405a8b4 	.word	0x2405a8b4

08021cfc <stdio_exit_handler>:
 8021cfc:	4a02      	ldr	r2, [pc, #8]	@ (8021d08 <stdio_exit_handler+0xc>)
 8021cfe:	4903      	ldr	r1, [pc, #12]	@ (8021d0c <stdio_exit_handler+0x10>)
 8021d00:	4803      	ldr	r0, [pc, #12]	@ (8021d10 <stdio_exit_handler+0x14>)
 8021d02:	f000 b869 	b.w	8021dd8 <_fwalk_sglue>
 8021d06:	bf00      	nop
 8021d08:	240149ec 	.word	0x240149ec
 8021d0c:	08022a1d 	.word	0x08022a1d
 8021d10:	240149fc 	.word	0x240149fc

08021d14 <cleanup_stdio>:
 8021d14:	6841      	ldr	r1, [r0, #4]
 8021d16:	4b0c      	ldr	r3, [pc, #48]	@ (8021d48 <cleanup_stdio+0x34>)
 8021d18:	4299      	cmp	r1, r3
 8021d1a:	b510      	push	{r4, lr}
 8021d1c:	4604      	mov	r4, r0
 8021d1e:	d001      	beq.n	8021d24 <cleanup_stdio+0x10>
 8021d20:	f000 fe7c 	bl	8022a1c <_fflush_r>
 8021d24:	68a1      	ldr	r1, [r4, #8]
 8021d26:	4b09      	ldr	r3, [pc, #36]	@ (8021d4c <cleanup_stdio+0x38>)
 8021d28:	4299      	cmp	r1, r3
 8021d2a:	d002      	beq.n	8021d32 <cleanup_stdio+0x1e>
 8021d2c:	4620      	mov	r0, r4
 8021d2e:	f000 fe75 	bl	8022a1c <_fflush_r>
 8021d32:	68e1      	ldr	r1, [r4, #12]
 8021d34:	4b06      	ldr	r3, [pc, #24]	@ (8021d50 <cleanup_stdio+0x3c>)
 8021d36:	4299      	cmp	r1, r3
 8021d38:	d004      	beq.n	8021d44 <cleanup_stdio+0x30>
 8021d3a:	4620      	mov	r0, r4
 8021d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d40:	f000 be6c 	b.w	8022a1c <_fflush_r>
 8021d44:	bd10      	pop	{r4, pc}
 8021d46:	bf00      	nop
 8021d48:	2405a8b4 	.word	0x2405a8b4
 8021d4c:	2405a91c 	.word	0x2405a91c
 8021d50:	2405a984 	.word	0x2405a984

08021d54 <global_stdio_init.part.0>:
 8021d54:	b510      	push	{r4, lr}
 8021d56:	4b0b      	ldr	r3, [pc, #44]	@ (8021d84 <global_stdio_init.part.0+0x30>)
 8021d58:	4c0b      	ldr	r4, [pc, #44]	@ (8021d88 <global_stdio_init.part.0+0x34>)
 8021d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8021d8c <global_stdio_init.part.0+0x38>)
 8021d5c:	601a      	str	r2, [r3, #0]
 8021d5e:	4620      	mov	r0, r4
 8021d60:	2200      	movs	r2, #0
 8021d62:	2104      	movs	r1, #4
 8021d64:	f7ff ff94 	bl	8021c90 <std>
 8021d68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021d6c:	2201      	movs	r2, #1
 8021d6e:	2109      	movs	r1, #9
 8021d70:	f7ff ff8e 	bl	8021c90 <std>
 8021d74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021d78:	2202      	movs	r2, #2
 8021d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d7e:	2112      	movs	r1, #18
 8021d80:	f7ff bf86 	b.w	8021c90 <std>
 8021d84:	2405a9ec 	.word	0x2405a9ec
 8021d88:	2405a8b4 	.word	0x2405a8b4
 8021d8c:	08021cfd 	.word	0x08021cfd

08021d90 <__sfp_lock_acquire>:
 8021d90:	4801      	ldr	r0, [pc, #4]	@ (8021d98 <__sfp_lock_acquire+0x8>)
 8021d92:	f000 b9ac 	b.w	80220ee <__retarget_lock_acquire_recursive>
 8021d96:	bf00      	nop
 8021d98:	2405a9f5 	.word	0x2405a9f5

08021d9c <__sfp_lock_release>:
 8021d9c:	4801      	ldr	r0, [pc, #4]	@ (8021da4 <__sfp_lock_release+0x8>)
 8021d9e:	f000 b9a7 	b.w	80220f0 <__retarget_lock_release_recursive>
 8021da2:	bf00      	nop
 8021da4:	2405a9f5 	.word	0x2405a9f5

08021da8 <__sinit>:
 8021da8:	b510      	push	{r4, lr}
 8021daa:	4604      	mov	r4, r0
 8021dac:	f7ff fff0 	bl	8021d90 <__sfp_lock_acquire>
 8021db0:	6a23      	ldr	r3, [r4, #32]
 8021db2:	b11b      	cbz	r3, 8021dbc <__sinit+0x14>
 8021db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021db8:	f7ff bff0 	b.w	8021d9c <__sfp_lock_release>
 8021dbc:	4b04      	ldr	r3, [pc, #16]	@ (8021dd0 <__sinit+0x28>)
 8021dbe:	6223      	str	r3, [r4, #32]
 8021dc0:	4b04      	ldr	r3, [pc, #16]	@ (8021dd4 <__sinit+0x2c>)
 8021dc2:	681b      	ldr	r3, [r3, #0]
 8021dc4:	2b00      	cmp	r3, #0
 8021dc6:	d1f5      	bne.n	8021db4 <__sinit+0xc>
 8021dc8:	f7ff ffc4 	bl	8021d54 <global_stdio_init.part.0>
 8021dcc:	e7f2      	b.n	8021db4 <__sinit+0xc>
 8021dce:	bf00      	nop
 8021dd0:	08021d15 	.word	0x08021d15
 8021dd4:	2405a9ec 	.word	0x2405a9ec

08021dd8 <_fwalk_sglue>:
 8021dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ddc:	4607      	mov	r7, r0
 8021dde:	4688      	mov	r8, r1
 8021de0:	4614      	mov	r4, r2
 8021de2:	2600      	movs	r6, #0
 8021de4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021de8:	f1b9 0901 	subs.w	r9, r9, #1
 8021dec:	d505      	bpl.n	8021dfa <_fwalk_sglue+0x22>
 8021dee:	6824      	ldr	r4, [r4, #0]
 8021df0:	2c00      	cmp	r4, #0
 8021df2:	d1f7      	bne.n	8021de4 <_fwalk_sglue+0xc>
 8021df4:	4630      	mov	r0, r6
 8021df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021dfa:	89ab      	ldrh	r3, [r5, #12]
 8021dfc:	2b01      	cmp	r3, #1
 8021dfe:	d907      	bls.n	8021e10 <_fwalk_sglue+0x38>
 8021e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021e04:	3301      	adds	r3, #1
 8021e06:	d003      	beq.n	8021e10 <_fwalk_sglue+0x38>
 8021e08:	4629      	mov	r1, r5
 8021e0a:	4638      	mov	r0, r7
 8021e0c:	47c0      	blx	r8
 8021e0e:	4306      	orrs	r6, r0
 8021e10:	3568      	adds	r5, #104	@ 0x68
 8021e12:	e7e9      	b.n	8021de8 <_fwalk_sglue+0x10>

08021e14 <sniprintf>:
 8021e14:	b40c      	push	{r2, r3}
 8021e16:	b530      	push	{r4, r5, lr}
 8021e18:	4b18      	ldr	r3, [pc, #96]	@ (8021e7c <sniprintf+0x68>)
 8021e1a:	1e0c      	subs	r4, r1, #0
 8021e1c:	681d      	ldr	r5, [r3, #0]
 8021e1e:	b09d      	sub	sp, #116	@ 0x74
 8021e20:	da08      	bge.n	8021e34 <sniprintf+0x20>
 8021e22:	238b      	movs	r3, #139	@ 0x8b
 8021e24:	602b      	str	r3, [r5, #0]
 8021e26:	f04f 30ff 	mov.w	r0, #4294967295
 8021e2a:	b01d      	add	sp, #116	@ 0x74
 8021e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021e30:	b002      	add	sp, #8
 8021e32:	4770      	bx	lr
 8021e34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8021e38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021e3c:	f04f 0300 	mov.w	r3, #0
 8021e40:	931b      	str	r3, [sp, #108]	@ 0x6c
 8021e42:	bf14      	ite	ne
 8021e44:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021e48:	4623      	moveq	r3, r4
 8021e4a:	9304      	str	r3, [sp, #16]
 8021e4c:	9307      	str	r3, [sp, #28]
 8021e4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021e52:	9002      	str	r0, [sp, #8]
 8021e54:	9006      	str	r0, [sp, #24]
 8021e56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021e5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021e5c:	ab21      	add	r3, sp, #132	@ 0x84
 8021e5e:	a902      	add	r1, sp, #8
 8021e60:	4628      	mov	r0, r5
 8021e62:	9301      	str	r3, [sp, #4]
 8021e64:	f000 face 	bl	8022404 <_svfiprintf_r>
 8021e68:	1c43      	adds	r3, r0, #1
 8021e6a:	bfbc      	itt	lt
 8021e6c:	238b      	movlt	r3, #139	@ 0x8b
 8021e6e:	602b      	strlt	r3, [r5, #0]
 8021e70:	2c00      	cmp	r4, #0
 8021e72:	d0da      	beq.n	8021e2a <sniprintf+0x16>
 8021e74:	9b02      	ldr	r3, [sp, #8]
 8021e76:	2200      	movs	r2, #0
 8021e78:	701a      	strb	r2, [r3, #0]
 8021e7a:	e7d6      	b.n	8021e2a <sniprintf+0x16>
 8021e7c:	240149f8 	.word	0x240149f8

08021e80 <siprintf>:
 8021e80:	b40e      	push	{r1, r2, r3}
 8021e82:	b510      	push	{r4, lr}
 8021e84:	b09d      	sub	sp, #116	@ 0x74
 8021e86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8021e88:	9002      	str	r0, [sp, #8]
 8021e8a:	9006      	str	r0, [sp, #24]
 8021e8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8021e90:	480a      	ldr	r0, [pc, #40]	@ (8021ebc <siprintf+0x3c>)
 8021e92:	9107      	str	r1, [sp, #28]
 8021e94:	9104      	str	r1, [sp, #16]
 8021e96:	490a      	ldr	r1, [pc, #40]	@ (8021ec0 <siprintf+0x40>)
 8021e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8021e9c:	9105      	str	r1, [sp, #20]
 8021e9e:	2400      	movs	r4, #0
 8021ea0:	a902      	add	r1, sp, #8
 8021ea2:	6800      	ldr	r0, [r0, #0]
 8021ea4:	9301      	str	r3, [sp, #4]
 8021ea6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8021ea8:	f000 faac 	bl	8022404 <_svfiprintf_r>
 8021eac:	9b02      	ldr	r3, [sp, #8]
 8021eae:	701c      	strb	r4, [r3, #0]
 8021eb0:	b01d      	add	sp, #116	@ 0x74
 8021eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021eb6:	b003      	add	sp, #12
 8021eb8:	4770      	bx	lr
 8021eba:	bf00      	nop
 8021ebc:	240149f8 	.word	0x240149f8
 8021ec0:	ffff0208 	.word	0xffff0208

08021ec4 <__sread>:
 8021ec4:	b510      	push	{r4, lr}
 8021ec6:	460c      	mov	r4, r1
 8021ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021ecc:	f000 f8c0 	bl	8022050 <_read_r>
 8021ed0:	2800      	cmp	r0, #0
 8021ed2:	bfab      	itete	ge
 8021ed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8021ed8:	181b      	addge	r3, r3, r0
 8021eda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021ede:	bfac      	ite	ge
 8021ee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021ee2:	81a3      	strhlt	r3, [r4, #12]
 8021ee4:	bd10      	pop	{r4, pc}

08021ee6 <__swrite>:
 8021ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021eea:	461f      	mov	r7, r3
 8021eec:	898b      	ldrh	r3, [r1, #12]
 8021eee:	05db      	lsls	r3, r3, #23
 8021ef0:	4605      	mov	r5, r0
 8021ef2:	460c      	mov	r4, r1
 8021ef4:	4616      	mov	r6, r2
 8021ef6:	d505      	bpl.n	8021f04 <__swrite+0x1e>
 8021ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021efc:	2302      	movs	r3, #2
 8021efe:	2200      	movs	r2, #0
 8021f00:	f000 f894 	bl	802202c <_lseek_r>
 8021f04:	89a3      	ldrh	r3, [r4, #12]
 8021f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021f0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021f0e:	81a3      	strh	r3, [r4, #12]
 8021f10:	4632      	mov	r2, r6
 8021f12:	463b      	mov	r3, r7
 8021f14:	4628      	mov	r0, r5
 8021f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021f1a:	f000 b8ab 	b.w	8022074 <_write_r>

08021f1e <__sseek>:
 8021f1e:	b510      	push	{r4, lr}
 8021f20:	460c      	mov	r4, r1
 8021f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f26:	f000 f881 	bl	802202c <_lseek_r>
 8021f2a:	1c43      	adds	r3, r0, #1
 8021f2c:	89a3      	ldrh	r3, [r4, #12]
 8021f2e:	bf15      	itete	ne
 8021f30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021f32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8021f36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8021f3a:	81a3      	strheq	r3, [r4, #12]
 8021f3c:	bf18      	it	ne
 8021f3e:	81a3      	strhne	r3, [r4, #12]
 8021f40:	bd10      	pop	{r4, pc}

08021f42 <__sclose>:
 8021f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f46:	f000 b861 	b.w	802200c <_close_r>

08021f4a <memcmp>:
 8021f4a:	b510      	push	{r4, lr}
 8021f4c:	3901      	subs	r1, #1
 8021f4e:	4402      	add	r2, r0
 8021f50:	4290      	cmp	r0, r2
 8021f52:	d101      	bne.n	8021f58 <memcmp+0xe>
 8021f54:	2000      	movs	r0, #0
 8021f56:	e005      	b.n	8021f64 <memcmp+0x1a>
 8021f58:	7803      	ldrb	r3, [r0, #0]
 8021f5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021f5e:	42a3      	cmp	r3, r4
 8021f60:	d001      	beq.n	8021f66 <memcmp+0x1c>
 8021f62:	1b18      	subs	r0, r3, r4
 8021f64:	bd10      	pop	{r4, pc}
 8021f66:	3001      	adds	r0, #1
 8021f68:	e7f2      	b.n	8021f50 <memcmp+0x6>

08021f6a <memmove>:
 8021f6a:	4288      	cmp	r0, r1
 8021f6c:	b510      	push	{r4, lr}
 8021f6e:	eb01 0402 	add.w	r4, r1, r2
 8021f72:	d902      	bls.n	8021f7a <memmove+0x10>
 8021f74:	4284      	cmp	r4, r0
 8021f76:	4623      	mov	r3, r4
 8021f78:	d807      	bhi.n	8021f8a <memmove+0x20>
 8021f7a:	1e43      	subs	r3, r0, #1
 8021f7c:	42a1      	cmp	r1, r4
 8021f7e:	d008      	beq.n	8021f92 <memmove+0x28>
 8021f80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021f84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021f88:	e7f8      	b.n	8021f7c <memmove+0x12>
 8021f8a:	4402      	add	r2, r0
 8021f8c:	4601      	mov	r1, r0
 8021f8e:	428a      	cmp	r2, r1
 8021f90:	d100      	bne.n	8021f94 <memmove+0x2a>
 8021f92:	bd10      	pop	{r4, pc}
 8021f94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021f98:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021f9c:	e7f7      	b.n	8021f8e <memmove+0x24>

08021f9e <memset>:
 8021f9e:	4402      	add	r2, r0
 8021fa0:	4603      	mov	r3, r0
 8021fa2:	4293      	cmp	r3, r2
 8021fa4:	d100      	bne.n	8021fa8 <memset+0xa>
 8021fa6:	4770      	bx	lr
 8021fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8021fac:	e7f9      	b.n	8021fa2 <memset+0x4>

08021fae <strcat>:
 8021fae:	b510      	push	{r4, lr}
 8021fb0:	4602      	mov	r2, r0
 8021fb2:	7814      	ldrb	r4, [r2, #0]
 8021fb4:	4613      	mov	r3, r2
 8021fb6:	3201      	adds	r2, #1
 8021fb8:	2c00      	cmp	r4, #0
 8021fba:	d1fa      	bne.n	8021fb2 <strcat+0x4>
 8021fbc:	3b01      	subs	r3, #1
 8021fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021fc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021fc6:	2a00      	cmp	r2, #0
 8021fc8:	d1f9      	bne.n	8021fbe <strcat+0x10>
 8021fca:	bd10      	pop	{r4, pc}

08021fcc <strchr>:
 8021fcc:	b2c9      	uxtb	r1, r1
 8021fce:	4603      	mov	r3, r0
 8021fd0:	4618      	mov	r0, r3
 8021fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021fd6:	b112      	cbz	r2, 8021fde <strchr+0x12>
 8021fd8:	428a      	cmp	r2, r1
 8021fda:	d1f9      	bne.n	8021fd0 <strchr+0x4>
 8021fdc:	4770      	bx	lr
 8021fde:	2900      	cmp	r1, #0
 8021fe0:	bf18      	it	ne
 8021fe2:	2000      	movne	r0, #0
 8021fe4:	4770      	bx	lr

08021fe6 <strncpy>:
 8021fe6:	b510      	push	{r4, lr}
 8021fe8:	3901      	subs	r1, #1
 8021fea:	4603      	mov	r3, r0
 8021fec:	b132      	cbz	r2, 8021ffc <strncpy+0x16>
 8021fee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021ff2:	f803 4b01 	strb.w	r4, [r3], #1
 8021ff6:	3a01      	subs	r2, #1
 8021ff8:	2c00      	cmp	r4, #0
 8021ffa:	d1f7      	bne.n	8021fec <strncpy+0x6>
 8021ffc:	441a      	add	r2, r3
 8021ffe:	2100      	movs	r1, #0
 8022000:	4293      	cmp	r3, r2
 8022002:	d100      	bne.n	8022006 <strncpy+0x20>
 8022004:	bd10      	pop	{r4, pc}
 8022006:	f803 1b01 	strb.w	r1, [r3], #1
 802200a:	e7f9      	b.n	8022000 <strncpy+0x1a>

0802200c <_close_r>:
 802200c:	b538      	push	{r3, r4, r5, lr}
 802200e:	4d06      	ldr	r5, [pc, #24]	@ (8022028 <_close_r+0x1c>)
 8022010:	2300      	movs	r3, #0
 8022012:	4604      	mov	r4, r0
 8022014:	4608      	mov	r0, r1
 8022016:	602b      	str	r3, [r5, #0]
 8022018:	f7f7 f895 	bl	8019146 <_close>
 802201c:	1c43      	adds	r3, r0, #1
 802201e:	d102      	bne.n	8022026 <_close_r+0x1a>
 8022020:	682b      	ldr	r3, [r5, #0]
 8022022:	b103      	cbz	r3, 8022026 <_close_r+0x1a>
 8022024:	6023      	str	r3, [r4, #0]
 8022026:	bd38      	pop	{r3, r4, r5, pc}
 8022028:	2405a9f0 	.word	0x2405a9f0

0802202c <_lseek_r>:
 802202c:	b538      	push	{r3, r4, r5, lr}
 802202e:	4d07      	ldr	r5, [pc, #28]	@ (802204c <_lseek_r+0x20>)
 8022030:	4604      	mov	r4, r0
 8022032:	4608      	mov	r0, r1
 8022034:	4611      	mov	r1, r2
 8022036:	2200      	movs	r2, #0
 8022038:	602a      	str	r2, [r5, #0]
 802203a:	461a      	mov	r2, r3
 802203c:	f7f7 f8aa 	bl	8019194 <_lseek>
 8022040:	1c43      	adds	r3, r0, #1
 8022042:	d102      	bne.n	802204a <_lseek_r+0x1e>
 8022044:	682b      	ldr	r3, [r5, #0]
 8022046:	b103      	cbz	r3, 802204a <_lseek_r+0x1e>
 8022048:	6023      	str	r3, [r4, #0]
 802204a:	bd38      	pop	{r3, r4, r5, pc}
 802204c:	2405a9f0 	.word	0x2405a9f0

08022050 <_read_r>:
 8022050:	b538      	push	{r3, r4, r5, lr}
 8022052:	4d07      	ldr	r5, [pc, #28]	@ (8022070 <_read_r+0x20>)
 8022054:	4604      	mov	r4, r0
 8022056:	4608      	mov	r0, r1
 8022058:	4611      	mov	r1, r2
 802205a:	2200      	movs	r2, #0
 802205c:	602a      	str	r2, [r5, #0]
 802205e:	461a      	mov	r2, r3
 8022060:	f7f7 f838 	bl	80190d4 <_read>
 8022064:	1c43      	adds	r3, r0, #1
 8022066:	d102      	bne.n	802206e <_read_r+0x1e>
 8022068:	682b      	ldr	r3, [r5, #0]
 802206a:	b103      	cbz	r3, 802206e <_read_r+0x1e>
 802206c:	6023      	str	r3, [r4, #0]
 802206e:	bd38      	pop	{r3, r4, r5, pc}
 8022070:	2405a9f0 	.word	0x2405a9f0

08022074 <_write_r>:
 8022074:	b538      	push	{r3, r4, r5, lr}
 8022076:	4d07      	ldr	r5, [pc, #28]	@ (8022094 <_write_r+0x20>)
 8022078:	4604      	mov	r4, r0
 802207a:	4608      	mov	r0, r1
 802207c:	4611      	mov	r1, r2
 802207e:	2200      	movs	r2, #0
 8022080:	602a      	str	r2, [r5, #0]
 8022082:	461a      	mov	r2, r3
 8022084:	f7f7 f843 	bl	801910e <_write>
 8022088:	1c43      	adds	r3, r0, #1
 802208a:	d102      	bne.n	8022092 <_write_r+0x1e>
 802208c:	682b      	ldr	r3, [r5, #0]
 802208e:	b103      	cbz	r3, 8022092 <_write_r+0x1e>
 8022090:	6023      	str	r3, [r4, #0]
 8022092:	bd38      	pop	{r3, r4, r5, pc}
 8022094:	2405a9f0 	.word	0x2405a9f0

08022098 <__errno>:
 8022098:	4b01      	ldr	r3, [pc, #4]	@ (80220a0 <__errno+0x8>)
 802209a:	6818      	ldr	r0, [r3, #0]
 802209c:	4770      	bx	lr
 802209e:	bf00      	nop
 80220a0:	240149f8 	.word	0x240149f8

080220a4 <__libc_init_array>:
 80220a4:	b570      	push	{r4, r5, r6, lr}
 80220a6:	4d0d      	ldr	r5, [pc, #52]	@ (80220dc <__libc_init_array+0x38>)
 80220a8:	4c0d      	ldr	r4, [pc, #52]	@ (80220e0 <__libc_init_array+0x3c>)
 80220aa:	1b64      	subs	r4, r4, r5
 80220ac:	10a4      	asrs	r4, r4, #2
 80220ae:	2600      	movs	r6, #0
 80220b0:	42a6      	cmp	r6, r4
 80220b2:	d109      	bne.n	80220c8 <__libc_init_array+0x24>
 80220b4:	4d0b      	ldr	r5, [pc, #44]	@ (80220e4 <__libc_init_array+0x40>)
 80220b6:	4c0c      	ldr	r4, [pc, #48]	@ (80220e8 <__libc_init_array+0x44>)
 80220b8:	f000 ffd4 	bl	8023064 <_init>
 80220bc:	1b64      	subs	r4, r4, r5
 80220be:	10a4      	asrs	r4, r4, #2
 80220c0:	2600      	movs	r6, #0
 80220c2:	42a6      	cmp	r6, r4
 80220c4:	d105      	bne.n	80220d2 <__libc_init_array+0x2e>
 80220c6:	bd70      	pop	{r4, r5, r6, pc}
 80220c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80220cc:	4798      	blx	r3
 80220ce:	3601      	adds	r6, #1
 80220d0:	e7ee      	b.n	80220b0 <__libc_init_array+0xc>
 80220d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80220d6:	4798      	blx	r3
 80220d8:	3601      	adds	r6, #1
 80220da:	e7f2      	b.n	80220c2 <__libc_init_array+0x1e>
 80220dc:	08026594 	.word	0x08026594
 80220e0:	08026594 	.word	0x08026594
 80220e4:	08026594 	.word	0x08026594
 80220e8:	08026598 	.word	0x08026598

080220ec <__retarget_lock_init_recursive>:
 80220ec:	4770      	bx	lr

080220ee <__retarget_lock_acquire_recursive>:
 80220ee:	4770      	bx	lr

080220f0 <__retarget_lock_release_recursive>:
 80220f0:	4770      	bx	lr

080220f2 <memcpy>:
 80220f2:	440a      	add	r2, r1
 80220f4:	4291      	cmp	r1, r2
 80220f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80220fa:	d100      	bne.n	80220fe <memcpy+0xc>
 80220fc:	4770      	bx	lr
 80220fe:	b510      	push	{r4, lr}
 8022100:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022108:	4291      	cmp	r1, r2
 802210a:	d1f9      	bne.n	8022100 <memcpy+0xe>
 802210c:	bd10      	pop	{r4, pc}
	...

08022110 <__assert_func>:
 8022110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022112:	4614      	mov	r4, r2
 8022114:	461a      	mov	r2, r3
 8022116:	4b09      	ldr	r3, [pc, #36]	@ (802213c <__assert_func+0x2c>)
 8022118:	681b      	ldr	r3, [r3, #0]
 802211a:	4605      	mov	r5, r0
 802211c:	68d8      	ldr	r0, [r3, #12]
 802211e:	b14c      	cbz	r4, 8022134 <__assert_func+0x24>
 8022120:	4b07      	ldr	r3, [pc, #28]	@ (8022140 <__assert_func+0x30>)
 8022122:	9100      	str	r1, [sp, #0]
 8022124:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022128:	4906      	ldr	r1, [pc, #24]	@ (8022144 <__assert_func+0x34>)
 802212a:	462b      	mov	r3, r5
 802212c:	f000 fc9e 	bl	8022a6c <fiprintf>
 8022130:	f000 fcbe 	bl	8022ab0 <abort>
 8022134:	4b04      	ldr	r3, [pc, #16]	@ (8022148 <__assert_func+0x38>)
 8022136:	461c      	mov	r4, r3
 8022138:	e7f3      	b.n	8022122 <__assert_func+0x12>
 802213a:	bf00      	nop
 802213c:	240149f8 	.word	0x240149f8
 8022140:	0802641b 	.word	0x0802641b
 8022144:	08026428 	.word	0x08026428
 8022148:	08026456 	.word	0x08026456

0802214c <_free_r>:
 802214c:	b538      	push	{r3, r4, r5, lr}
 802214e:	4605      	mov	r5, r0
 8022150:	2900      	cmp	r1, #0
 8022152:	d041      	beq.n	80221d8 <_free_r+0x8c>
 8022154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022158:	1f0c      	subs	r4, r1, #4
 802215a:	2b00      	cmp	r3, #0
 802215c:	bfb8      	it	lt
 802215e:	18e4      	addlt	r4, r4, r3
 8022160:	f000 f8e8 	bl	8022334 <__malloc_lock>
 8022164:	4a1d      	ldr	r2, [pc, #116]	@ (80221dc <_free_r+0x90>)
 8022166:	6813      	ldr	r3, [r2, #0]
 8022168:	b933      	cbnz	r3, 8022178 <_free_r+0x2c>
 802216a:	6063      	str	r3, [r4, #4]
 802216c:	6014      	str	r4, [r2, #0]
 802216e:	4628      	mov	r0, r5
 8022170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022174:	f000 b8e4 	b.w	8022340 <__malloc_unlock>
 8022178:	42a3      	cmp	r3, r4
 802217a:	d908      	bls.n	802218e <_free_r+0x42>
 802217c:	6820      	ldr	r0, [r4, #0]
 802217e:	1821      	adds	r1, r4, r0
 8022180:	428b      	cmp	r3, r1
 8022182:	bf01      	itttt	eq
 8022184:	6819      	ldreq	r1, [r3, #0]
 8022186:	685b      	ldreq	r3, [r3, #4]
 8022188:	1809      	addeq	r1, r1, r0
 802218a:	6021      	streq	r1, [r4, #0]
 802218c:	e7ed      	b.n	802216a <_free_r+0x1e>
 802218e:	461a      	mov	r2, r3
 8022190:	685b      	ldr	r3, [r3, #4]
 8022192:	b10b      	cbz	r3, 8022198 <_free_r+0x4c>
 8022194:	42a3      	cmp	r3, r4
 8022196:	d9fa      	bls.n	802218e <_free_r+0x42>
 8022198:	6811      	ldr	r1, [r2, #0]
 802219a:	1850      	adds	r0, r2, r1
 802219c:	42a0      	cmp	r0, r4
 802219e:	d10b      	bne.n	80221b8 <_free_r+0x6c>
 80221a0:	6820      	ldr	r0, [r4, #0]
 80221a2:	4401      	add	r1, r0
 80221a4:	1850      	adds	r0, r2, r1
 80221a6:	4283      	cmp	r3, r0
 80221a8:	6011      	str	r1, [r2, #0]
 80221aa:	d1e0      	bne.n	802216e <_free_r+0x22>
 80221ac:	6818      	ldr	r0, [r3, #0]
 80221ae:	685b      	ldr	r3, [r3, #4]
 80221b0:	6053      	str	r3, [r2, #4]
 80221b2:	4408      	add	r0, r1
 80221b4:	6010      	str	r0, [r2, #0]
 80221b6:	e7da      	b.n	802216e <_free_r+0x22>
 80221b8:	d902      	bls.n	80221c0 <_free_r+0x74>
 80221ba:	230c      	movs	r3, #12
 80221bc:	602b      	str	r3, [r5, #0]
 80221be:	e7d6      	b.n	802216e <_free_r+0x22>
 80221c0:	6820      	ldr	r0, [r4, #0]
 80221c2:	1821      	adds	r1, r4, r0
 80221c4:	428b      	cmp	r3, r1
 80221c6:	bf04      	itt	eq
 80221c8:	6819      	ldreq	r1, [r3, #0]
 80221ca:	685b      	ldreq	r3, [r3, #4]
 80221cc:	6063      	str	r3, [r4, #4]
 80221ce:	bf04      	itt	eq
 80221d0:	1809      	addeq	r1, r1, r0
 80221d2:	6021      	streq	r1, [r4, #0]
 80221d4:	6054      	str	r4, [r2, #4]
 80221d6:	e7ca      	b.n	802216e <_free_r+0x22>
 80221d8:	bd38      	pop	{r3, r4, r5, pc}
 80221da:	bf00      	nop
 80221dc:	2405a9fc 	.word	0x2405a9fc

080221e0 <malloc>:
 80221e0:	4b02      	ldr	r3, [pc, #8]	@ (80221ec <malloc+0xc>)
 80221e2:	4601      	mov	r1, r0
 80221e4:	6818      	ldr	r0, [r3, #0]
 80221e6:	f000 b825 	b.w	8022234 <_malloc_r>
 80221ea:	bf00      	nop
 80221ec:	240149f8 	.word	0x240149f8

080221f0 <sbrk_aligned>:
 80221f0:	b570      	push	{r4, r5, r6, lr}
 80221f2:	4e0f      	ldr	r6, [pc, #60]	@ (8022230 <sbrk_aligned+0x40>)
 80221f4:	460c      	mov	r4, r1
 80221f6:	6831      	ldr	r1, [r6, #0]
 80221f8:	4605      	mov	r5, r0
 80221fa:	b911      	cbnz	r1, 8022202 <sbrk_aligned+0x12>
 80221fc:	f000 fc48 	bl	8022a90 <_sbrk_r>
 8022200:	6030      	str	r0, [r6, #0]
 8022202:	4621      	mov	r1, r4
 8022204:	4628      	mov	r0, r5
 8022206:	f000 fc43 	bl	8022a90 <_sbrk_r>
 802220a:	1c43      	adds	r3, r0, #1
 802220c:	d103      	bne.n	8022216 <sbrk_aligned+0x26>
 802220e:	f04f 34ff 	mov.w	r4, #4294967295
 8022212:	4620      	mov	r0, r4
 8022214:	bd70      	pop	{r4, r5, r6, pc}
 8022216:	1cc4      	adds	r4, r0, #3
 8022218:	f024 0403 	bic.w	r4, r4, #3
 802221c:	42a0      	cmp	r0, r4
 802221e:	d0f8      	beq.n	8022212 <sbrk_aligned+0x22>
 8022220:	1a21      	subs	r1, r4, r0
 8022222:	4628      	mov	r0, r5
 8022224:	f000 fc34 	bl	8022a90 <_sbrk_r>
 8022228:	3001      	adds	r0, #1
 802222a:	d1f2      	bne.n	8022212 <sbrk_aligned+0x22>
 802222c:	e7ef      	b.n	802220e <sbrk_aligned+0x1e>
 802222e:	bf00      	nop
 8022230:	2405a9f8 	.word	0x2405a9f8

08022234 <_malloc_r>:
 8022234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022238:	1ccd      	adds	r5, r1, #3
 802223a:	f025 0503 	bic.w	r5, r5, #3
 802223e:	3508      	adds	r5, #8
 8022240:	2d0c      	cmp	r5, #12
 8022242:	bf38      	it	cc
 8022244:	250c      	movcc	r5, #12
 8022246:	2d00      	cmp	r5, #0
 8022248:	4606      	mov	r6, r0
 802224a:	db01      	blt.n	8022250 <_malloc_r+0x1c>
 802224c:	42a9      	cmp	r1, r5
 802224e:	d904      	bls.n	802225a <_malloc_r+0x26>
 8022250:	230c      	movs	r3, #12
 8022252:	6033      	str	r3, [r6, #0]
 8022254:	2000      	movs	r0, #0
 8022256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802225a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022330 <_malloc_r+0xfc>
 802225e:	f000 f869 	bl	8022334 <__malloc_lock>
 8022262:	f8d8 3000 	ldr.w	r3, [r8]
 8022266:	461c      	mov	r4, r3
 8022268:	bb44      	cbnz	r4, 80222bc <_malloc_r+0x88>
 802226a:	4629      	mov	r1, r5
 802226c:	4630      	mov	r0, r6
 802226e:	f7ff ffbf 	bl	80221f0 <sbrk_aligned>
 8022272:	1c43      	adds	r3, r0, #1
 8022274:	4604      	mov	r4, r0
 8022276:	d158      	bne.n	802232a <_malloc_r+0xf6>
 8022278:	f8d8 4000 	ldr.w	r4, [r8]
 802227c:	4627      	mov	r7, r4
 802227e:	2f00      	cmp	r7, #0
 8022280:	d143      	bne.n	802230a <_malloc_r+0xd6>
 8022282:	2c00      	cmp	r4, #0
 8022284:	d04b      	beq.n	802231e <_malloc_r+0xea>
 8022286:	6823      	ldr	r3, [r4, #0]
 8022288:	4639      	mov	r1, r7
 802228a:	4630      	mov	r0, r6
 802228c:	eb04 0903 	add.w	r9, r4, r3
 8022290:	f000 fbfe 	bl	8022a90 <_sbrk_r>
 8022294:	4581      	cmp	r9, r0
 8022296:	d142      	bne.n	802231e <_malloc_r+0xea>
 8022298:	6821      	ldr	r1, [r4, #0]
 802229a:	1a6d      	subs	r5, r5, r1
 802229c:	4629      	mov	r1, r5
 802229e:	4630      	mov	r0, r6
 80222a0:	f7ff ffa6 	bl	80221f0 <sbrk_aligned>
 80222a4:	3001      	adds	r0, #1
 80222a6:	d03a      	beq.n	802231e <_malloc_r+0xea>
 80222a8:	6823      	ldr	r3, [r4, #0]
 80222aa:	442b      	add	r3, r5
 80222ac:	6023      	str	r3, [r4, #0]
 80222ae:	f8d8 3000 	ldr.w	r3, [r8]
 80222b2:	685a      	ldr	r2, [r3, #4]
 80222b4:	bb62      	cbnz	r2, 8022310 <_malloc_r+0xdc>
 80222b6:	f8c8 7000 	str.w	r7, [r8]
 80222ba:	e00f      	b.n	80222dc <_malloc_r+0xa8>
 80222bc:	6822      	ldr	r2, [r4, #0]
 80222be:	1b52      	subs	r2, r2, r5
 80222c0:	d420      	bmi.n	8022304 <_malloc_r+0xd0>
 80222c2:	2a0b      	cmp	r2, #11
 80222c4:	d917      	bls.n	80222f6 <_malloc_r+0xc2>
 80222c6:	1961      	adds	r1, r4, r5
 80222c8:	42a3      	cmp	r3, r4
 80222ca:	6025      	str	r5, [r4, #0]
 80222cc:	bf18      	it	ne
 80222ce:	6059      	strne	r1, [r3, #4]
 80222d0:	6863      	ldr	r3, [r4, #4]
 80222d2:	bf08      	it	eq
 80222d4:	f8c8 1000 	streq.w	r1, [r8]
 80222d8:	5162      	str	r2, [r4, r5]
 80222da:	604b      	str	r3, [r1, #4]
 80222dc:	4630      	mov	r0, r6
 80222de:	f000 f82f 	bl	8022340 <__malloc_unlock>
 80222e2:	f104 000b 	add.w	r0, r4, #11
 80222e6:	1d23      	adds	r3, r4, #4
 80222e8:	f020 0007 	bic.w	r0, r0, #7
 80222ec:	1ac2      	subs	r2, r0, r3
 80222ee:	bf1c      	itt	ne
 80222f0:	1a1b      	subne	r3, r3, r0
 80222f2:	50a3      	strne	r3, [r4, r2]
 80222f4:	e7af      	b.n	8022256 <_malloc_r+0x22>
 80222f6:	6862      	ldr	r2, [r4, #4]
 80222f8:	42a3      	cmp	r3, r4
 80222fa:	bf0c      	ite	eq
 80222fc:	f8c8 2000 	streq.w	r2, [r8]
 8022300:	605a      	strne	r2, [r3, #4]
 8022302:	e7eb      	b.n	80222dc <_malloc_r+0xa8>
 8022304:	4623      	mov	r3, r4
 8022306:	6864      	ldr	r4, [r4, #4]
 8022308:	e7ae      	b.n	8022268 <_malloc_r+0x34>
 802230a:	463c      	mov	r4, r7
 802230c:	687f      	ldr	r7, [r7, #4]
 802230e:	e7b6      	b.n	802227e <_malloc_r+0x4a>
 8022310:	461a      	mov	r2, r3
 8022312:	685b      	ldr	r3, [r3, #4]
 8022314:	42a3      	cmp	r3, r4
 8022316:	d1fb      	bne.n	8022310 <_malloc_r+0xdc>
 8022318:	2300      	movs	r3, #0
 802231a:	6053      	str	r3, [r2, #4]
 802231c:	e7de      	b.n	80222dc <_malloc_r+0xa8>
 802231e:	230c      	movs	r3, #12
 8022320:	6033      	str	r3, [r6, #0]
 8022322:	4630      	mov	r0, r6
 8022324:	f000 f80c 	bl	8022340 <__malloc_unlock>
 8022328:	e794      	b.n	8022254 <_malloc_r+0x20>
 802232a:	6005      	str	r5, [r0, #0]
 802232c:	e7d6      	b.n	80222dc <_malloc_r+0xa8>
 802232e:	bf00      	nop
 8022330:	2405a9fc 	.word	0x2405a9fc

08022334 <__malloc_lock>:
 8022334:	4801      	ldr	r0, [pc, #4]	@ (802233c <__malloc_lock+0x8>)
 8022336:	f7ff beda 	b.w	80220ee <__retarget_lock_acquire_recursive>
 802233a:	bf00      	nop
 802233c:	2405a9f4 	.word	0x2405a9f4

08022340 <__malloc_unlock>:
 8022340:	4801      	ldr	r0, [pc, #4]	@ (8022348 <__malloc_unlock+0x8>)
 8022342:	f7ff bed5 	b.w	80220f0 <__retarget_lock_release_recursive>
 8022346:	bf00      	nop
 8022348:	2405a9f4 	.word	0x2405a9f4

0802234c <__ssputs_r>:
 802234c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022350:	688e      	ldr	r6, [r1, #8]
 8022352:	461f      	mov	r7, r3
 8022354:	42be      	cmp	r6, r7
 8022356:	680b      	ldr	r3, [r1, #0]
 8022358:	4682      	mov	sl, r0
 802235a:	460c      	mov	r4, r1
 802235c:	4690      	mov	r8, r2
 802235e:	d82d      	bhi.n	80223bc <__ssputs_r+0x70>
 8022360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022364:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8022368:	d026      	beq.n	80223b8 <__ssputs_r+0x6c>
 802236a:	6965      	ldr	r5, [r4, #20]
 802236c:	6909      	ldr	r1, [r1, #16]
 802236e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022372:	eba3 0901 	sub.w	r9, r3, r1
 8022376:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802237a:	1c7b      	adds	r3, r7, #1
 802237c:	444b      	add	r3, r9
 802237e:	106d      	asrs	r5, r5, #1
 8022380:	429d      	cmp	r5, r3
 8022382:	bf38      	it	cc
 8022384:	461d      	movcc	r5, r3
 8022386:	0553      	lsls	r3, r2, #21
 8022388:	d527      	bpl.n	80223da <__ssputs_r+0x8e>
 802238a:	4629      	mov	r1, r5
 802238c:	f7ff ff52 	bl	8022234 <_malloc_r>
 8022390:	4606      	mov	r6, r0
 8022392:	b360      	cbz	r0, 80223ee <__ssputs_r+0xa2>
 8022394:	6921      	ldr	r1, [r4, #16]
 8022396:	464a      	mov	r2, r9
 8022398:	f7ff feab 	bl	80220f2 <memcpy>
 802239c:	89a3      	ldrh	r3, [r4, #12]
 802239e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80223a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80223a6:	81a3      	strh	r3, [r4, #12]
 80223a8:	6126      	str	r6, [r4, #16]
 80223aa:	6165      	str	r5, [r4, #20]
 80223ac:	444e      	add	r6, r9
 80223ae:	eba5 0509 	sub.w	r5, r5, r9
 80223b2:	6026      	str	r6, [r4, #0]
 80223b4:	60a5      	str	r5, [r4, #8]
 80223b6:	463e      	mov	r6, r7
 80223b8:	42be      	cmp	r6, r7
 80223ba:	d900      	bls.n	80223be <__ssputs_r+0x72>
 80223bc:	463e      	mov	r6, r7
 80223be:	6820      	ldr	r0, [r4, #0]
 80223c0:	4632      	mov	r2, r6
 80223c2:	4641      	mov	r1, r8
 80223c4:	f7ff fdd1 	bl	8021f6a <memmove>
 80223c8:	68a3      	ldr	r3, [r4, #8]
 80223ca:	1b9b      	subs	r3, r3, r6
 80223cc:	60a3      	str	r3, [r4, #8]
 80223ce:	6823      	ldr	r3, [r4, #0]
 80223d0:	4433      	add	r3, r6
 80223d2:	6023      	str	r3, [r4, #0]
 80223d4:	2000      	movs	r0, #0
 80223d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80223da:	462a      	mov	r2, r5
 80223dc:	f000 fb6f 	bl	8022abe <_realloc_r>
 80223e0:	4606      	mov	r6, r0
 80223e2:	2800      	cmp	r0, #0
 80223e4:	d1e0      	bne.n	80223a8 <__ssputs_r+0x5c>
 80223e6:	6921      	ldr	r1, [r4, #16]
 80223e8:	4650      	mov	r0, sl
 80223ea:	f7ff feaf 	bl	802214c <_free_r>
 80223ee:	230c      	movs	r3, #12
 80223f0:	f8ca 3000 	str.w	r3, [sl]
 80223f4:	89a3      	ldrh	r3, [r4, #12]
 80223f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80223fa:	81a3      	strh	r3, [r4, #12]
 80223fc:	f04f 30ff 	mov.w	r0, #4294967295
 8022400:	e7e9      	b.n	80223d6 <__ssputs_r+0x8a>
	...

08022404 <_svfiprintf_r>:
 8022404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022408:	4698      	mov	r8, r3
 802240a:	898b      	ldrh	r3, [r1, #12]
 802240c:	061b      	lsls	r3, r3, #24
 802240e:	b09d      	sub	sp, #116	@ 0x74
 8022410:	4607      	mov	r7, r0
 8022412:	460d      	mov	r5, r1
 8022414:	4614      	mov	r4, r2
 8022416:	d510      	bpl.n	802243a <_svfiprintf_r+0x36>
 8022418:	690b      	ldr	r3, [r1, #16]
 802241a:	b973      	cbnz	r3, 802243a <_svfiprintf_r+0x36>
 802241c:	2140      	movs	r1, #64	@ 0x40
 802241e:	f7ff ff09 	bl	8022234 <_malloc_r>
 8022422:	6028      	str	r0, [r5, #0]
 8022424:	6128      	str	r0, [r5, #16]
 8022426:	b930      	cbnz	r0, 8022436 <_svfiprintf_r+0x32>
 8022428:	230c      	movs	r3, #12
 802242a:	603b      	str	r3, [r7, #0]
 802242c:	f04f 30ff 	mov.w	r0, #4294967295
 8022430:	b01d      	add	sp, #116	@ 0x74
 8022432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022436:	2340      	movs	r3, #64	@ 0x40
 8022438:	616b      	str	r3, [r5, #20]
 802243a:	2300      	movs	r3, #0
 802243c:	9309      	str	r3, [sp, #36]	@ 0x24
 802243e:	2320      	movs	r3, #32
 8022440:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022444:	f8cd 800c 	str.w	r8, [sp, #12]
 8022448:	2330      	movs	r3, #48	@ 0x30
 802244a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80225e8 <_svfiprintf_r+0x1e4>
 802244e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022452:	f04f 0901 	mov.w	r9, #1
 8022456:	4623      	mov	r3, r4
 8022458:	469a      	mov	sl, r3
 802245a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802245e:	b10a      	cbz	r2, 8022464 <_svfiprintf_r+0x60>
 8022460:	2a25      	cmp	r2, #37	@ 0x25
 8022462:	d1f9      	bne.n	8022458 <_svfiprintf_r+0x54>
 8022464:	ebba 0b04 	subs.w	fp, sl, r4
 8022468:	d00b      	beq.n	8022482 <_svfiprintf_r+0x7e>
 802246a:	465b      	mov	r3, fp
 802246c:	4622      	mov	r2, r4
 802246e:	4629      	mov	r1, r5
 8022470:	4638      	mov	r0, r7
 8022472:	f7ff ff6b 	bl	802234c <__ssputs_r>
 8022476:	3001      	adds	r0, #1
 8022478:	f000 80a7 	beq.w	80225ca <_svfiprintf_r+0x1c6>
 802247c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802247e:	445a      	add	r2, fp
 8022480:	9209      	str	r2, [sp, #36]	@ 0x24
 8022482:	f89a 3000 	ldrb.w	r3, [sl]
 8022486:	2b00      	cmp	r3, #0
 8022488:	f000 809f 	beq.w	80225ca <_svfiprintf_r+0x1c6>
 802248c:	2300      	movs	r3, #0
 802248e:	f04f 32ff 	mov.w	r2, #4294967295
 8022492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022496:	f10a 0a01 	add.w	sl, sl, #1
 802249a:	9304      	str	r3, [sp, #16]
 802249c:	9307      	str	r3, [sp, #28]
 802249e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80224a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80224a4:	4654      	mov	r4, sl
 80224a6:	2205      	movs	r2, #5
 80224a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80224ac:	484e      	ldr	r0, [pc, #312]	@ (80225e8 <_svfiprintf_r+0x1e4>)
 80224ae:	f7dd ff2f 	bl	8000310 <memchr>
 80224b2:	9a04      	ldr	r2, [sp, #16]
 80224b4:	b9d8      	cbnz	r0, 80224ee <_svfiprintf_r+0xea>
 80224b6:	06d0      	lsls	r0, r2, #27
 80224b8:	bf44      	itt	mi
 80224ba:	2320      	movmi	r3, #32
 80224bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80224c0:	0711      	lsls	r1, r2, #28
 80224c2:	bf44      	itt	mi
 80224c4:	232b      	movmi	r3, #43	@ 0x2b
 80224c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80224ca:	f89a 3000 	ldrb.w	r3, [sl]
 80224ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80224d0:	d015      	beq.n	80224fe <_svfiprintf_r+0xfa>
 80224d2:	9a07      	ldr	r2, [sp, #28]
 80224d4:	4654      	mov	r4, sl
 80224d6:	2000      	movs	r0, #0
 80224d8:	f04f 0c0a 	mov.w	ip, #10
 80224dc:	4621      	mov	r1, r4
 80224de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80224e2:	3b30      	subs	r3, #48	@ 0x30
 80224e4:	2b09      	cmp	r3, #9
 80224e6:	d94b      	bls.n	8022580 <_svfiprintf_r+0x17c>
 80224e8:	b1b0      	cbz	r0, 8022518 <_svfiprintf_r+0x114>
 80224ea:	9207      	str	r2, [sp, #28]
 80224ec:	e014      	b.n	8022518 <_svfiprintf_r+0x114>
 80224ee:	eba0 0308 	sub.w	r3, r0, r8
 80224f2:	fa09 f303 	lsl.w	r3, r9, r3
 80224f6:	4313      	orrs	r3, r2
 80224f8:	9304      	str	r3, [sp, #16]
 80224fa:	46a2      	mov	sl, r4
 80224fc:	e7d2      	b.n	80224a4 <_svfiprintf_r+0xa0>
 80224fe:	9b03      	ldr	r3, [sp, #12]
 8022500:	1d19      	adds	r1, r3, #4
 8022502:	681b      	ldr	r3, [r3, #0]
 8022504:	9103      	str	r1, [sp, #12]
 8022506:	2b00      	cmp	r3, #0
 8022508:	bfbb      	ittet	lt
 802250a:	425b      	neglt	r3, r3
 802250c:	f042 0202 	orrlt.w	r2, r2, #2
 8022510:	9307      	strge	r3, [sp, #28]
 8022512:	9307      	strlt	r3, [sp, #28]
 8022514:	bfb8      	it	lt
 8022516:	9204      	strlt	r2, [sp, #16]
 8022518:	7823      	ldrb	r3, [r4, #0]
 802251a:	2b2e      	cmp	r3, #46	@ 0x2e
 802251c:	d10a      	bne.n	8022534 <_svfiprintf_r+0x130>
 802251e:	7863      	ldrb	r3, [r4, #1]
 8022520:	2b2a      	cmp	r3, #42	@ 0x2a
 8022522:	d132      	bne.n	802258a <_svfiprintf_r+0x186>
 8022524:	9b03      	ldr	r3, [sp, #12]
 8022526:	1d1a      	adds	r2, r3, #4
 8022528:	681b      	ldr	r3, [r3, #0]
 802252a:	9203      	str	r2, [sp, #12]
 802252c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022530:	3402      	adds	r4, #2
 8022532:	9305      	str	r3, [sp, #20]
 8022534:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80225f8 <_svfiprintf_r+0x1f4>
 8022538:	7821      	ldrb	r1, [r4, #0]
 802253a:	2203      	movs	r2, #3
 802253c:	4650      	mov	r0, sl
 802253e:	f7dd fee7 	bl	8000310 <memchr>
 8022542:	b138      	cbz	r0, 8022554 <_svfiprintf_r+0x150>
 8022544:	9b04      	ldr	r3, [sp, #16]
 8022546:	eba0 000a 	sub.w	r0, r0, sl
 802254a:	2240      	movs	r2, #64	@ 0x40
 802254c:	4082      	lsls	r2, r0
 802254e:	4313      	orrs	r3, r2
 8022550:	3401      	adds	r4, #1
 8022552:	9304      	str	r3, [sp, #16]
 8022554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022558:	4824      	ldr	r0, [pc, #144]	@ (80225ec <_svfiprintf_r+0x1e8>)
 802255a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802255e:	2206      	movs	r2, #6
 8022560:	f7dd fed6 	bl	8000310 <memchr>
 8022564:	2800      	cmp	r0, #0
 8022566:	d036      	beq.n	80225d6 <_svfiprintf_r+0x1d2>
 8022568:	4b21      	ldr	r3, [pc, #132]	@ (80225f0 <_svfiprintf_r+0x1ec>)
 802256a:	bb1b      	cbnz	r3, 80225b4 <_svfiprintf_r+0x1b0>
 802256c:	9b03      	ldr	r3, [sp, #12]
 802256e:	3307      	adds	r3, #7
 8022570:	f023 0307 	bic.w	r3, r3, #7
 8022574:	3308      	adds	r3, #8
 8022576:	9303      	str	r3, [sp, #12]
 8022578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802257a:	4433      	add	r3, r6
 802257c:	9309      	str	r3, [sp, #36]	@ 0x24
 802257e:	e76a      	b.n	8022456 <_svfiprintf_r+0x52>
 8022580:	fb0c 3202 	mla	r2, ip, r2, r3
 8022584:	460c      	mov	r4, r1
 8022586:	2001      	movs	r0, #1
 8022588:	e7a8      	b.n	80224dc <_svfiprintf_r+0xd8>
 802258a:	2300      	movs	r3, #0
 802258c:	3401      	adds	r4, #1
 802258e:	9305      	str	r3, [sp, #20]
 8022590:	4619      	mov	r1, r3
 8022592:	f04f 0c0a 	mov.w	ip, #10
 8022596:	4620      	mov	r0, r4
 8022598:	f810 2b01 	ldrb.w	r2, [r0], #1
 802259c:	3a30      	subs	r2, #48	@ 0x30
 802259e:	2a09      	cmp	r2, #9
 80225a0:	d903      	bls.n	80225aa <_svfiprintf_r+0x1a6>
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	d0c6      	beq.n	8022534 <_svfiprintf_r+0x130>
 80225a6:	9105      	str	r1, [sp, #20]
 80225a8:	e7c4      	b.n	8022534 <_svfiprintf_r+0x130>
 80225aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80225ae:	4604      	mov	r4, r0
 80225b0:	2301      	movs	r3, #1
 80225b2:	e7f0      	b.n	8022596 <_svfiprintf_r+0x192>
 80225b4:	ab03      	add	r3, sp, #12
 80225b6:	9300      	str	r3, [sp, #0]
 80225b8:	462a      	mov	r2, r5
 80225ba:	4b0e      	ldr	r3, [pc, #56]	@ (80225f4 <_svfiprintf_r+0x1f0>)
 80225bc:	a904      	add	r1, sp, #16
 80225be:	4638      	mov	r0, r7
 80225c0:	f3af 8000 	nop.w
 80225c4:	1c42      	adds	r2, r0, #1
 80225c6:	4606      	mov	r6, r0
 80225c8:	d1d6      	bne.n	8022578 <_svfiprintf_r+0x174>
 80225ca:	89ab      	ldrh	r3, [r5, #12]
 80225cc:	065b      	lsls	r3, r3, #25
 80225ce:	f53f af2d 	bmi.w	802242c <_svfiprintf_r+0x28>
 80225d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80225d4:	e72c      	b.n	8022430 <_svfiprintf_r+0x2c>
 80225d6:	ab03      	add	r3, sp, #12
 80225d8:	9300      	str	r3, [sp, #0]
 80225da:	462a      	mov	r2, r5
 80225dc:	4b05      	ldr	r3, [pc, #20]	@ (80225f4 <_svfiprintf_r+0x1f0>)
 80225de:	a904      	add	r1, sp, #16
 80225e0:	4638      	mov	r0, r7
 80225e2:	f000 f879 	bl	80226d8 <_printf_i>
 80225e6:	e7ed      	b.n	80225c4 <_svfiprintf_r+0x1c0>
 80225e8:	08026457 	.word	0x08026457
 80225ec:	08026461 	.word	0x08026461
 80225f0:	00000000 	.word	0x00000000
 80225f4:	0802234d 	.word	0x0802234d
 80225f8:	0802645d 	.word	0x0802645d

080225fc <_printf_common>:
 80225fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022600:	4616      	mov	r6, r2
 8022602:	4698      	mov	r8, r3
 8022604:	688a      	ldr	r2, [r1, #8]
 8022606:	690b      	ldr	r3, [r1, #16]
 8022608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802260c:	4293      	cmp	r3, r2
 802260e:	bfb8      	it	lt
 8022610:	4613      	movlt	r3, r2
 8022612:	6033      	str	r3, [r6, #0]
 8022614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022618:	4607      	mov	r7, r0
 802261a:	460c      	mov	r4, r1
 802261c:	b10a      	cbz	r2, 8022622 <_printf_common+0x26>
 802261e:	3301      	adds	r3, #1
 8022620:	6033      	str	r3, [r6, #0]
 8022622:	6823      	ldr	r3, [r4, #0]
 8022624:	0699      	lsls	r1, r3, #26
 8022626:	bf42      	ittt	mi
 8022628:	6833      	ldrmi	r3, [r6, #0]
 802262a:	3302      	addmi	r3, #2
 802262c:	6033      	strmi	r3, [r6, #0]
 802262e:	6825      	ldr	r5, [r4, #0]
 8022630:	f015 0506 	ands.w	r5, r5, #6
 8022634:	d106      	bne.n	8022644 <_printf_common+0x48>
 8022636:	f104 0a19 	add.w	sl, r4, #25
 802263a:	68e3      	ldr	r3, [r4, #12]
 802263c:	6832      	ldr	r2, [r6, #0]
 802263e:	1a9b      	subs	r3, r3, r2
 8022640:	42ab      	cmp	r3, r5
 8022642:	dc26      	bgt.n	8022692 <_printf_common+0x96>
 8022644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022648:	6822      	ldr	r2, [r4, #0]
 802264a:	3b00      	subs	r3, #0
 802264c:	bf18      	it	ne
 802264e:	2301      	movne	r3, #1
 8022650:	0692      	lsls	r2, r2, #26
 8022652:	d42b      	bmi.n	80226ac <_printf_common+0xb0>
 8022654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022658:	4641      	mov	r1, r8
 802265a:	4638      	mov	r0, r7
 802265c:	47c8      	blx	r9
 802265e:	3001      	adds	r0, #1
 8022660:	d01e      	beq.n	80226a0 <_printf_common+0xa4>
 8022662:	6823      	ldr	r3, [r4, #0]
 8022664:	6922      	ldr	r2, [r4, #16]
 8022666:	f003 0306 	and.w	r3, r3, #6
 802266a:	2b04      	cmp	r3, #4
 802266c:	bf02      	ittt	eq
 802266e:	68e5      	ldreq	r5, [r4, #12]
 8022670:	6833      	ldreq	r3, [r6, #0]
 8022672:	1aed      	subeq	r5, r5, r3
 8022674:	68a3      	ldr	r3, [r4, #8]
 8022676:	bf0c      	ite	eq
 8022678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802267c:	2500      	movne	r5, #0
 802267e:	4293      	cmp	r3, r2
 8022680:	bfc4      	itt	gt
 8022682:	1a9b      	subgt	r3, r3, r2
 8022684:	18ed      	addgt	r5, r5, r3
 8022686:	2600      	movs	r6, #0
 8022688:	341a      	adds	r4, #26
 802268a:	42b5      	cmp	r5, r6
 802268c:	d11a      	bne.n	80226c4 <_printf_common+0xc8>
 802268e:	2000      	movs	r0, #0
 8022690:	e008      	b.n	80226a4 <_printf_common+0xa8>
 8022692:	2301      	movs	r3, #1
 8022694:	4652      	mov	r2, sl
 8022696:	4641      	mov	r1, r8
 8022698:	4638      	mov	r0, r7
 802269a:	47c8      	blx	r9
 802269c:	3001      	adds	r0, #1
 802269e:	d103      	bne.n	80226a8 <_printf_common+0xac>
 80226a0:	f04f 30ff 	mov.w	r0, #4294967295
 80226a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226a8:	3501      	adds	r5, #1
 80226aa:	e7c6      	b.n	802263a <_printf_common+0x3e>
 80226ac:	18e1      	adds	r1, r4, r3
 80226ae:	1c5a      	adds	r2, r3, #1
 80226b0:	2030      	movs	r0, #48	@ 0x30
 80226b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80226b6:	4422      	add	r2, r4
 80226b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80226bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80226c0:	3302      	adds	r3, #2
 80226c2:	e7c7      	b.n	8022654 <_printf_common+0x58>
 80226c4:	2301      	movs	r3, #1
 80226c6:	4622      	mov	r2, r4
 80226c8:	4641      	mov	r1, r8
 80226ca:	4638      	mov	r0, r7
 80226cc:	47c8      	blx	r9
 80226ce:	3001      	adds	r0, #1
 80226d0:	d0e6      	beq.n	80226a0 <_printf_common+0xa4>
 80226d2:	3601      	adds	r6, #1
 80226d4:	e7d9      	b.n	802268a <_printf_common+0x8e>
	...

080226d8 <_printf_i>:
 80226d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80226dc:	7e0f      	ldrb	r7, [r1, #24]
 80226de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80226e0:	2f78      	cmp	r7, #120	@ 0x78
 80226e2:	4691      	mov	r9, r2
 80226e4:	4680      	mov	r8, r0
 80226e6:	460c      	mov	r4, r1
 80226e8:	469a      	mov	sl, r3
 80226ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80226ee:	d807      	bhi.n	8022700 <_printf_i+0x28>
 80226f0:	2f62      	cmp	r7, #98	@ 0x62
 80226f2:	d80a      	bhi.n	802270a <_printf_i+0x32>
 80226f4:	2f00      	cmp	r7, #0
 80226f6:	f000 80d1 	beq.w	802289c <_printf_i+0x1c4>
 80226fa:	2f58      	cmp	r7, #88	@ 0x58
 80226fc:	f000 80b8 	beq.w	8022870 <_printf_i+0x198>
 8022700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022708:	e03a      	b.n	8022780 <_printf_i+0xa8>
 802270a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802270e:	2b15      	cmp	r3, #21
 8022710:	d8f6      	bhi.n	8022700 <_printf_i+0x28>
 8022712:	a101      	add	r1, pc, #4	@ (adr r1, 8022718 <_printf_i+0x40>)
 8022714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022718:	08022771 	.word	0x08022771
 802271c:	08022785 	.word	0x08022785
 8022720:	08022701 	.word	0x08022701
 8022724:	08022701 	.word	0x08022701
 8022728:	08022701 	.word	0x08022701
 802272c:	08022701 	.word	0x08022701
 8022730:	08022785 	.word	0x08022785
 8022734:	08022701 	.word	0x08022701
 8022738:	08022701 	.word	0x08022701
 802273c:	08022701 	.word	0x08022701
 8022740:	08022701 	.word	0x08022701
 8022744:	08022883 	.word	0x08022883
 8022748:	080227af 	.word	0x080227af
 802274c:	0802283d 	.word	0x0802283d
 8022750:	08022701 	.word	0x08022701
 8022754:	08022701 	.word	0x08022701
 8022758:	080228a5 	.word	0x080228a5
 802275c:	08022701 	.word	0x08022701
 8022760:	080227af 	.word	0x080227af
 8022764:	08022701 	.word	0x08022701
 8022768:	08022701 	.word	0x08022701
 802276c:	08022845 	.word	0x08022845
 8022770:	6833      	ldr	r3, [r6, #0]
 8022772:	1d1a      	adds	r2, r3, #4
 8022774:	681b      	ldr	r3, [r3, #0]
 8022776:	6032      	str	r2, [r6, #0]
 8022778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802277c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022780:	2301      	movs	r3, #1
 8022782:	e09c      	b.n	80228be <_printf_i+0x1e6>
 8022784:	6833      	ldr	r3, [r6, #0]
 8022786:	6820      	ldr	r0, [r4, #0]
 8022788:	1d19      	adds	r1, r3, #4
 802278a:	6031      	str	r1, [r6, #0]
 802278c:	0606      	lsls	r6, r0, #24
 802278e:	d501      	bpl.n	8022794 <_printf_i+0xbc>
 8022790:	681d      	ldr	r5, [r3, #0]
 8022792:	e003      	b.n	802279c <_printf_i+0xc4>
 8022794:	0645      	lsls	r5, r0, #25
 8022796:	d5fb      	bpl.n	8022790 <_printf_i+0xb8>
 8022798:	f9b3 5000 	ldrsh.w	r5, [r3]
 802279c:	2d00      	cmp	r5, #0
 802279e:	da03      	bge.n	80227a8 <_printf_i+0xd0>
 80227a0:	232d      	movs	r3, #45	@ 0x2d
 80227a2:	426d      	negs	r5, r5
 80227a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80227a8:	4858      	ldr	r0, [pc, #352]	@ (802290c <_printf_i+0x234>)
 80227aa:	230a      	movs	r3, #10
 80227ac:	e011      	b.n	80227d2 <_printf_i+0xfa>
 80227ae:	6821      	ldr	r1, [r4, #0]
 80227b0:	6833      	ldr	r3, [r6, #0]
 80227b2:	0608      	lsls	r0, r1, #24
 80227b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80227b8:	d402      	bmi.n	80227c0 <_printf_i+0xe8>
 80227ba:	0649      	lsls	r1, r1, #25
 80227bc:	bf48      	it	mi
 80227be:	b2ad      	uxthmi	r5, r5
 80227c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80227c2:	4852      	ldr	r0, [pc, #328]	@ (802290c <_printf_i+0x234>)
 80227c4:	6033      	str	r3, [r6, #0]
 80227c6:	bf14      	ite	ne
 80227c8:	230a      	movne	r3, #10
 80227ca:	2308      	moveq	r3, #8
 80227cc:	2100      	movs	r1, #0
 80227ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80227d2:	6866      	ldr	r6, [r4, #4]
 80227d4:	60a6      	str	r6, [r4, #8]
 80227d6:	2e00      	cmp	r6, #0
 80227d8:	db05      	blt.n	80227e6 <_printf_i+0x10e>
 80227da:	6821      	ldr	r1, [r4, #0]
 80227dc:	432e      	orrs	r6, r5
 80227de:	f021 0104 	bic.w	r1, r1, #4
 80227e2:	6021      	str	r1, [r4, #0]
 80227e4:	d04b      	beq.n	802287e <_printf_i+0x1a6>
 80227e6:	4616      	mov	r6, r2
 80227e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80227ec:	fb03 5711 	mls	r7, r3, r1, r5
 80227f0:	5dc7      	ldrb	r7, [r0, r7]
 80227f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80227f6:	462f      	mov	r7, r5
 80227f8:	42bb      	cmp	r3, r7
 80227fa:	460d      	mov	r5, r1
 80227fc:	d9f4      	bls.n	80227e8 <_printf_i+0x110>
 80227fe:	2b08      	cmp	r3, #8
 8022800:	d10b      	bne.n	802281a <_printf_i+0x142>
 8022802:	6823      	ldr	r3, [r4, #0]
 8022804:	07df      	lsls	r7, r3, #31
 8022806:	d508      	bpl.n	802281a <_printf_i+0x142>
 8022808:	6923      	ldr	r3, [r4, #16]
 802280a:	6861      	ldr	r1, [r4, #4]
 802280c:	4299      	cmp	r1, r3
 802280e:	bfde      	ittt	le
 8022810:	2330      	movle	r3, #48	@ 0x30
 8022812:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022816:	f106 36ff 	addle.w	r6, r6, #4294967295
 802281a:	1b92      	subs	r2, r2, r6
 802281c:	6122      	str	r2, [r4, #16]
 802281e:	f8cd a000 	str.w	sl, [sp]
 8022822:	464b      	mov	r3, r9
 8022824:	aa03      	add	r2, sp, #12
 8022826:	4621      	mov	r1, r4
 8022828:	4640      	mov	r0, r8
 802282a:	f7ff fee7 	bl	80225fc <_printf_common>
 802282e:	3001      	adds	r0, #1
 8022830:	d14a      	bne.n	80228c8 <_printf_i+0x1f0>
 8022832:	f04f 30ff 	mov.w	r0, #4294967295
 8022836:	b004      	add	sp, #16
 8022838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802283c:	6823      	ldr	r3, [r4, #0]
 802283e:	f043 0320 	orr.w	r3, r3, #32
 8022842:	6023      	str	r3, [r4, #0]
 8022844:	4832      	ldr	r0, [pc, #200]	@ (8022910 <_printf_i+0x238>)
 8022846:	2778      	movs	r7, #120	@ 0x78
 8022848:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802284c:	6823      	ldr	r3, [r4, #0]
 802284e:	6831      	ldr	r1, [r6, #0]
 8022850:	061f      	lsls	r7, r3, #24
 8022852:	f851 5b04 	ldr.w	r5, [r1], #4
 8022856:	d402      	bmi.n	802285e <_printf_i+0x186>
 8022858:	065f      	lsls	r7, r3, #25
 802285a:	bf48      	it	mi
 802285c:	b2ad      	uxthmi	r5, r5
 802285e:	6031      	str	r1, [r6, #0]
 8022860:	07d9      	lsls	r1, r3, #31
 8022862:	bf44      	itt	mi
 8022864:	f043 0320 	orrmi.w	r3, r3, #32
 8022868:	6023      	strmi	r3, [r4, #0]
 802286a:	b11d      	cbz	r5, 8022874 <_printf_i+0x19c>
 802286c:	2310      	movs	r3, #16
 802286e:	e7ad      	b.n	80227cc <_printf_i+0xf4>
 8022870:	4826      	ldr	r0, [pc, #152]	@ (802290c <_printf_i+0x234>)
 8022872:	e7e9      	b.n	8022848 <_printf_i+0x170>
 8022874:	6823      	ldr	r3, [r4, #0]
 8022876:	f023 0320 	bic.w	r3, r3, #32
 802287a:	6023      	str	r3, [r4, #0]
 802287c:	e7f6      	b.n	802286c <_printf_i+0x194>
 802287e:	4616      	mov	r6, r2
 8022880:	e7bd      	b.n	80227fe <_printf_i+0x126>
 8022882:	6833      	ldr	r3, [r6, #0]
 8022884:	6825      	ldr	r5, [r4, #0]
 8022886:	6961      	ldr	r1, [r4, #20]
 8022888:	1d18      	adds	r0, r3, #4
 802288a:	6030      	str	r0, [r6, #0]
 802288c:	062e      	lsls	r6, r5, #24
 802288e:	681b      	ldr	r3, [r3, #0]
 8022890:	d501      	bpl.n	8022896 <_printf_i+0x1be>
 8022892:	6019      	str	r1, [r3, #0]
 8022894:	e002      	b.n	802289c <_printf_i+0x1c4>
 8022896:	0668      	lsls	r0, r5, #25
 8022898:	d5fb      	bpl.n	8022892 <_printf_i+0x1ba>
 802289a:	8019      	strh	r1, [r3, #0]
 802289c:	2300      	movs	r3, #0
 802289e:	6123      	str	r3, [r4, #16]
 80228a0:	4616      	mov	r6, r2
 80228a2:	e7bc      	b.n	802281e <_printf_i+0x146>
 80228a4:	6833      	ldr	r3, [r6, #0]
 80228a6:	1d1a      	adds	r2, r3, #4
 80228a8:	6032      	str	r2, [r6, #0]
 80228aa:	681e      	ldr	r6, [r3, #0]
 80228ac:	6862      	ldr	r2, [r4, #4]
 80228ae:	2100      	movs	r1, #0
 80228b0:	4630      	mov	r0, r6
 80228b2:	f7dd fd2d 	bl	8000310 <memchr>
 80228b6:	b108      	cbz	r0, 80228bc <_printf_i+0x1e4>
 80228b8:	1b80      	subs	r0, r0, r6
 80228ba:	6060      	str	r0, [r4, #4]
 80228bc:	6863      	ldr	r3, [r4, #4]
 80228be:	6123      	str	r3, [r4, #16]
 80228c0:	2300      	movs	r3, #0
 80228c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80228c6:	e7aa      	b.n	802281e <_printf_i+0x146>
 80228c8:	6923      	ldr	r3, [r4, #16]
 80228ca:	4632      	mov	r2, r6
 80228cc:	4649      	mov	r1, r9
 80228ce:	4640      	mov	r0, r8
 80228d0:	47d0      	blx	sl
 80228d2:	3001      	adds	r0, #1
 80228d4:	d0ad      	beq.n	8022832 <_printf_i+0x15a>
 80228d6:	6823      	ldr	r3, [r4, #0]
 80228d8:	079b      	lsls	r3, r3, #30
 80228da:	d413      	bmi.n	8022904 <_printf_i+0x22c>
 80228dc:	68e0      	ldr	r0, [r4, #12]
 80228de:	9b03      	ldr	r3, [sp, #12]
 80228e0:	4298      	cmp	r0, r3
 80228e2:	bfb8      	it	lt
 80228e4:	4618      	movlt	r0, r3
 80228e6:	e7a6      	b.n	8022836 <_printf_i+0x15e>
 80228e8:	2301      	movs	r3, #1
 80228ea:	4632      	mov	r2, r6
 80228ec:	4649      	mov	r1, r9
 80228ee:	4640      	mov	r0, r8
 80228f0:	47d0      	blx	sl
 80228f2:	3001      	adds	r0, #1
 80228f4:	d09d      	beq.n	8022832 <_printf_i+0x15a>
 80228f6:	3501      	adds	r5, #1
 80228f8:	68e3      	ldr	r3, [r4, #12]
 80228fa:	9903      	ldr	r1, [sp, #12]
 80228fc:	1a5b      	subs	r3, r3, r1
 80228fe:	42ab      	cmp	r3, r5
 8022900:	dcf2      	bgt.n	80228e8 <_printf_i+0x210>
 8022902:	e7eb      	b.n	80228dc <_printf_i+0x204>
 8022904:	2500      	movs	r5, #0
 8022906:	f104 0619 	add.w	r6, r4, #25
 802290a:	e7f5      	b.n	80228f8 <_printf_i+0x220>
 802290c:	08026468 	.word	0x08026468
 8022910:	08026479 	.word	0x08026479

08022914 <__sflush_r>:
 8022914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802291c:	0716      	lsls	r6, r2, #28
 802291e:	4605      	mov	r5, r0
 8022920:	460c      	mov	r4, r1
 8022922:	d454      	bmi.n	80229ce <__sflush_r+0xba>
 8022924:	684b      	ldr	r3, [r1, #4]
 8022926:	2b00      	cmp	r3, #0
 8022928:	dc02      	bgt.n	8022930 <__sflush_r+0x1c>
 802292a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802292c:	2b00      	cmp	r3, #0
 802292e:	dd48      	ble.n	80229c2 <__sflush_r+0xae>
 8022930:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022932:	2e00      	cmp	r6, #0
 8022934:	d045      	beq.n	80229c2 <__sflush_r+0xae>
 8022936:	2300      	movs	r3, #0
 8022938:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802293c:	682f      	ldr	r7, [r5, #0]
 802293e:	6a21      	ldr	r1, [r4, #32]
 8022940:	602b      	str	r3, [r5, #0]
 8022942:	d030      	beq.n	80229a6 <__sflush_r+0x92>
 8022944:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022946:	89a3      	ldrh	r3, [r4, #12]
 8022948:	0759      	lsls	r1, r3, #29
 802294a:	d505      	bpl.n	8022958 <__sflush_r+0x44>
 802294c:	6863      	ldr	r3, [r4, #4]
 802294e:	1ad2      	subs	r2, r2, r3
 8022950:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022952:	b10b      	cbz	r3, 8022958 <__sflush_r+0x44>
 8022954:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022956:	1ad2      	subs	r2, r2, r3
 8022958:	2300      	movs	r3, #0
 802295a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802295c:	6a21      	ldr	r1, [r4, #32]
 802295e:	4628      	mov	r0, r5
 8022960:	47b0      	blx	r6
 8022962:	1c43      	adds	r3, r0, #1
 8022964:	89a3      	ldrh	r3, [r4, #12]
 8022966:	d106      	bne.n	8022976 <__sflush_r+0x62>
 8022968:	6829      	ldr	r1, [r5, #0]
 802296a:	291d      	cmp	r1, #29
 802296c:	d82b      	bhi.n	80229c6 <__sflush_r+0xb2>
 802296e:	4a2a      	ldr	r2, [pc, #168]	@ (8022a18 <__sflush_r+0x104>)
 8022970:	40ca      	lsrs	r2, r1
 8022972:	07d6      	lsls	r6, r2, #31
 8022974:	d527      	bpl.n	80229c6 <__sflush_r+0xb2>
 8022976:	2200      	movs	r2, #0
 8022978:	6062      	str	r2, [r4, #4]
 802297a:	04d9      	lsls	r1, r3, #19
 802297c:	6922      	ldr	r2, [r4, #16]
 802297e:	6022      	str	r2, [r4, #0]
 8022980:	d504      	bpl.n	802298c <__sflush_r+0x78>
 8022982:	1c42      	adds	r2, r0, #1
 8022984:	d101      	bne.n	802298a <__sflush_r+0x76>
 8022986:	682b      	ldr	r3, [r5, #0]
 8022988:	b903      	cbnz	r3, 802298c <__sflush_r+0x78>
 802298a:	6560      	str	r0, [r4, #84]	@ 0x54
 802298c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802298e:	602f      	str	r7, [r5, #0]
 8022990:	b1b9      	cbz	r1, 80229c2 <__sflush_r+0xae>
 8022992:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022996:	4299      	cmp	r1, r3
 8022998:	d002      	beq.n	80229a0 <__sflush_r+0x8c>
 802299a:	4628      	mov	r0, r5
 802299c:	f7ff fbd6 	bl	802214c <_free_r>
 80229a0:	2300      	movs	r3, #0
 80229a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80229a4:	e00d      	b.n	80229c2 <__sflush_r+0xae>
 80229a6:	2301      	movs	r3, #1
 80229a8:	4628      	mov	r0, r5
 80229aa:	47b0      	blx	r6
 80229ac:	4602      	mov	r2, r0
 80229ae:	1c50      	adds	r0, r2, #1
 80229b0:	d1c9      	bne.n	8022946 <__sflush_r+0x32>
 80229b2:	682b      	ldr	r3, [r5, #0]
 80229b4:	2b00      	cmp	r3, #0
 80229b6:	d0c6      	beq.n	8022946 <__sflush_r+0x32>
 80229b8:	2b1d      	cmp	r3, #29
 80229ba:	d001      	beq.n	80229c0 <__sflush_r+0xac>
 80229bc:	2b16      	cmp	r3, #22
 80229be:	d11e      	bne.n	80229fe <__sflush_r+0xea>
 80229c0:	602f      	str	r7, [r5, #0]
 80229c2:	2000      	movs	r0, #0
 80229c4:	e022      	b.n	8022a0c <__sflush_r+0xf8>
 80229c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80229ca:	b21b      	sxth	r3, r3
 80229cc:	e01b      	b.n	8022a06 <__sflush_r+0xf2>
 80229ce:	690f      	ldr	r7, [r1, #16]
 80229d0:	2f00      	cmp	r7, #0
 80229d2:	d0f6      	beq.n	80229c2 <__sflush_r+0xae>
 80229d4:	0793      	lsls	r3, r2, #30
 80229d6:	680e      	ldr	r6, [r1, #0]
 80229d8:	bf08      	it	eq
 80229da:	694b      	ldreq	r3, [r1, #20]
 80229dc:	600f      	str	r7, [r1, #0]
 80229de:	bf18      	it	ne
 80229e0:	2300      	movne	r3, #0
 80229e2:	eba6 0807 	sub.w	r8, r6, r7
 80229e6:	608b      	str	r3, [r1, #8]
 80229e8:	f1b8 0f00 	cmp.w	r8, #0
 80229ec:	dde9      	ble.n	80229c2 <__sflush_r+0xae>
 80229ee:	6a21      	ldr	r1, [r4, #32]
 80229f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80229f2:	4643      	mov	r3, r8
 80229f4:	463a      	mov	r2, r7
 80229f6:	4628      	mov	r0, r5
 80229f8:	47b0      	blx	r6
 80229fa:	2800      	cmp	r0, #0
 80229fc:	dc08      	bgt.n	8022a10 <__sflush_r+0xfc>
 80229fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022a06:	81a3      	strh	r3, [r4, #12]
 8022a08:	f04f 30ff 	mov.w	r0, #4294967295
 8022a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a10:	4407      	add	r7, r0
 8022a12:	eba8 0800 	sub.w	r8, r8, r0
 8022a16:	e7e7      	b.n	80229e8 <__sflush_r+0xd4>
 8022a18:	20400001 	.word	0x20400001

08022a1c <_fflush_r>:
 8022a1c:	b538      	push	{r3, r4, r5, lr}
 8022a1e:	690b      	ldr	r3, [r1, #16]
 8022a20:	4605      	mov	r5, r0
 8022a22:	460c      	mov	r4, r1
 8022a24:	b913      	cbnz	r3, 8022a2c <_fflush_r+0x10>
 8022a26:	2500      	movs	r5, #0
 8022a28:	4628      	mov	r0, r5
 8022a2a:	bd38      	pop	{r3, r4, r5, pc}
 8022a2c:	b118      	cbz	r0, 8022a36 <_fflush_r+0x1a>
 8022a2e:	6a03      	ldr	r3, [r0, #32]
 8022a30:	b90b      	cbnz	r3, 8022a36 <_fflush_r+0x1a>
 8022a32:	f7ff f9b9 	bl	8021da8 <__sinit>
 8022a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022a3a:	2b00      	cmp	r3, #0
 8022a3c:	d0f3      	beq.n	8022a26 <_fflush_r+0xa>
 8022a3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022a40:	07d0      	lsls	r0, r2, #31
 8022a42:	d404      	bmi.n	8022a4e <_fflush_r+0x32>
 8022a44:	0599      	lsls	r1, r3, #22
 8022a46:	d402      	bmi.n	8022a4e <_fflush_r+0x32>
 8022a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022a4a:	f7ff fb50 	bl	80220ee <__retarget_lock_acquire_recursive>
 8022a4e:	4628      	mov	r0, r5
 8022a50:	4621      	mov	r1, r4
 8022a52:	f7ff ff5f 	bl	8022914 <__sflush_r>
 8022a56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022a58:	07da      	lsls	r2, r3, #31
 8022a5a:	4605      	mov	r5, r0
 8022a5c:	d4e4      	bmi.n	8022a28 <_fflush_r+0xc>
 8022a5e:	89a3      	ldrh	r3, [r4, #12]
 8022a60:	059b      	lsls	r3, r3, #22
 8022a62:	d4e1      	bmi.n	8022a28 <_fflush_r+0xc>
 8022a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022a66:	f7ff fb43 	bl	80220f0 <__retarget_lock_release_recursive>
 8022a6a:	e7dd      	b.n	8022a28 <_fflush_r+0xc>

08022a6c <fiprintf>:
 8022a6c:	b40e      	push	{r1, r2, r3}
 8022a6e:	b503      	push	{r0, r1, lr}
 8022a70:	4601      	mov	r1, r0
 8022a72:	ab03      	add	r3, sp, #12
 8022a74:	4805      	ldr	r0, [pc, #20]	@ (8022a8c <fiprintf+0x20>)
 8022a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a7a:	6800      	ldr	r0, [r0, #0]
 8022a7c:	9301      	str	r3, [sp, #4]
 8022a7e:	f000 f875 	bl	8022b6c <_vfiprintf_r>
 8022a82:	b002      	add	sp, #8
 8022a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8022a88:	b003      	add	sp, #12
 8022a8a:	4770      	bx	lr
 8022a8c:	240149f8 	.word	0x240149f8

08022a90 <_sbrk_r>:
 8022a90:	b538      	push	{r3, r4, r5, lr}
 8022a92:	4d06      	ldr	r5, [pc, #24]	@ (8022aac <_sbrk_r+0x1c>)
 8022a94:	2300      	movs	r3, #0
 8022a96:	4604      	mov	r4, r0
 8022a98:	4608      	mov	r0, r1
 8022a9a:	602b      	str	r3, [r5, #0]
 8022a9c:	f7f6 fb88 	bl	80191b0 <_sbrk>
 8022aa0:	1c43      	adds	r3, r0, #1
 8022aa2:	d102      	bne.n	8022aaa <_sbrk_r+0x1a>
 8022aa4:	682b      	ldr	r3, [r5, #0]
 8022aa6:	b103      	cbz	r3, 8022aaa <_sbrk_r+0x1a>
 8022aa8:	6023      	str	r3, [r4, #0]
 8022aaa:	bd38      	pop	{r3, r4, r5, pc}
 8022aac:	2405a9f0 	.word	0x2405a9f0

08022ab0 <abort>:
 8022ab0:	b508      	push	{r3, lr}
 8022ab2:	2006      	movs	r0, #6
 8022ab4:	f000 fa2e 	bl	8022f14 <raise>
 8022ab8:	2001      	movs	r0, #1
 8022aba:	f7f6 fb00 	bl	80190be <_exit>

08022abe <_realloc_r>:
 8022abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ac2:	4607      	mov	r7, r0
 8022ac4:	4614      	mov	r4, r2
 8022ac6:	460d      	mov	r5, r1
 8022ac8:	b921      	cbnz	r1, 8022ad4 <_realloc_r+0x16>
 8022aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022ace:	4611      	mov	r1, r2
 8022ad0:	f7ff bbb0 	b.w	8022234 <_malloc_r>
 8022ad4:	b92a      	cbnz	r2, 8022ae2 <_realloc_r+0x24>
 8022ad6:	f7ff fb39 	bl	802214c <_free_r>
 8022ada:	4625      	mov	r5, r4
 8022adc:	4628      	mov	r0, r5
 8022ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ae2:	f000 fa33 	bl	8022f4c <_malloc_usable_size_r>
 8022ae6:	4284      	cmp	r4, r0
 8022ae8:	4606      	mov	r6, r0
 8022aea:	d802      	bhi.n	8022af2 <_realloc_r+0x34>
 8022aec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8022af0:	d8f4      	bhi.n	8022adc <_realloc_r+0x1e>
 8022af2:	4621      	mov	r1, r4
 8022af4:	4638      	mov	r0, r7
 8022af6:	f7ff fb9d 	bl	8022234 <_malloc_r>
 8022afa:	4680      	mov	r8, r0
 8022afc:	b908      	cbnz	r0, 8022b02 <_realloc_r+0x44>
 8022afe:	4645      	mov	r5, r8
 8022b00:	e7ec      	b.n	8022adc <_realloc_r+0x1e>
 8022b02:	42b4      	cmp	r4, r6
 8022b04:	4622      	mov	r2, r4
 8022b06:	4629      	mov	r1, r5
 8022b08:	bf28      	it	cs
 8022b0a:	4632      	movcs	r2, r6
 8022b0c:	f7ff faf1 	bl	80220f2 <memcpy>
 8022b10:	4629      	mov	r1, r5
 8022b12:	4638      	mov	r0, r7
 8022b14:	f7ff fb1a 	bl	802214c <_free_r>
 8022b18:	e7f1      	b.n	8022afe <_realloc_r+0x40>

08022b1a <__sfputc_r>:
 8022b1a:	6893      	ldr	r3, [r2, #8]
 8022b1c:	3b01      	subs	r3, #1
 8022b1e:	2b00      	cmp	r3, #0
 8022b20:	b410      	push	{r4}
 8022b22:	6093      	str	r3, [r2, #8]
 8022b24:	da08      	bge.n	8022b38 <__sfputc_r+0x1e>
 8022b26:	6994      	ldr	r4, [r2, #24]
 8022b28:	42a3      	cmp	r3, r4
 8022b2a:	db01      	blt.n	8022b30 <__sfputc_r+0x16>
 8022b2c:	290a      	cmp	r1, #10
 8022b2e:	d103      	bne.n	8022b38 <__sfputc_r+0x1e>
 8022b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b34:	f000 b932 	b.w	8022d9c <__swbuf_r>
 8022b38:	6813      	ldr	r3, [r2, #0]
 8022b3a:	1c58      	adds	r0, r3, #1
 8022b3c:	6010      	str	r0, [r2, #0]
 8022b3e:	7019      	strb	r1, [r3, #0]
 8022b40:	4608      	mov	r0, r1
 8022b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b46:	4770      	bx	lr

08022b48 <__sfputs_r>:
 8022b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b4a:	4606      	mov	r6, r0
 8022b4c:	460f      	mov	r7, r1
 8022b4e:	4614      	mov	r4, r2
 8022b50:	18d5      	adds	r5, r2, r3
 8022b52:	42ac      	cmp	r4, r5
 8022b54:	d101      	bne.n	8022b5a <__sfputs_r+0x12>
 8022b56:	2000      	movs	r0, #0
 8022b58:	e007      	b.n	8022b6a <__sfputs_r+0x22>
 8022b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b5e:	463a      	mov	r2, r7
 8022b60:	4630      	mov	r0, r6
 8022b62:	f7ff ffda 	bl	8022b1a <__sfputc_r>
 8022b66:	1c43      	adds	r3, r0, #1
 8022b68:	d1f3      	bne.n	8022b52 <__sfputs_r+0xa>
 8022b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08022b6c <_vfiprintf_r>:
 8022b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b70:	460d      	mov	r5, r1
 8022b72:	b09d      	sub	sp, #116	@ 0x74
 8022b74:	4614      	mov	r4, r2
 8022b76:	4698      	mov	r8, r3
 8022b78:	4606      	mov	r6, r0
 8022b7a:	b118      	cbz	r0, 8022b84 <_vfiprintf_r+0x18>
 8022b7c:	6a03      	ldr	r3, [r0, #32]
 8022b7e:	b90b      	cbnz	r3, 8022b84 <_vfiprintf_r+0x18>
 8022b80:	f7ff f912 	bl	8021da8 <__sinit>
 8022b84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022b86:	07d9      	lsls	r1, r3, #31
 8022b88:	d405      	bmi.n	8022b96 <_vfiprintf_r+0x2a>
 8022b8a:	89ab      	ldrh	r3, [r5, #12]
 8022b8c:	059a      	lsls	r2, r3, #22
 8022b8e:	d402      	bmi.n	8022b96 <_vfiprintf_r+0x2a>
 8022b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022b92:	f7ff faac 	bl	80220ee <__retarget_lock_acquire_recursive>
 8022b96:	89ab      	ldrh	r3, [r5, #12]
 8022b98:	071b      	lsls	r3, r3, #28
 8022b9a:	d501      	bpl.n	8022ba0 <_vfiprintf_r+0x34>
 8022b9c:	692b      	ldr	r3, [r5, #16]
 8022b9e:	b99b      	cbnz	r3, 8022bc8 <_vfiprintf_r+0x5c>
 8022ba0:	4629      	mov	r1, r5
 8022ba2:	4630      	mov	r0, r6
 8022ba4:	f000 f938 	bl	8022e18 <__swsetup_r>
 8022ba8:	b170      	cbz	r0, 8022bc8 <_vfiprintf_r+0x5c>
 8022baa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022bac:	07dc      	lsls	r4, r3, #31
 8022bae:	d504      	bpl.n	8022bba <_vfiprintf_r+0x4e>
 8022bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8022bb4:	b01d      	add	sp, #116	@ 0x74
 8022bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bba:	89ab      	ldrh	r3, [r5, #12]
 8022bbc:	0598      	lsls	r0, r3, #22
 8022bbe:	d4f7      	bmi.n	8022bb0 <_vfiprintf_r+0x44>
 8022bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022bc2:	f7ff fa95 	bl	80220f0 <__retarget_lock_release_recursive>
 8022bc6:	e7f3      	b.n	8022bb0 <_vfiprintf_r+0x44>
 8022bc8:	2300      	movs	r3, #0
 8022bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8022bcc:	2320      	movs	r3, #32
 8022bce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8022bd6:	2330      	movs	r3, #48	@ 0x30
 8022bd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022d88 <_vfiprintf_r+0x21c>
 8022bdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022be0:	f04f 0901 	mov.w	r9, #1
 8022be4:	4623      	mov	r3, r4
 8022be6:	469a      	mov	sl, r3
 8022be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022bec:	b10a      	cbz	r2, 8022bf2 <_vfiprintf_r+0x86>
 8022bee:	2a25      	cmp	r2, #37	@ 0x25
 8022bf0:	d1f9      	bne.n	8022be6 <_vfiprintf_r+0x7a>
 8022bf2:	ebba 0b04 	subs.w	fp, sl, r4
 8022bf6:	d00b      	beq.n	8022c10 <_vfiprintf_r+0xa4>
 8022bf8:	465b      	mov	r3, fp
 8022bfa:	4622      	mov	r2, r4
 8022bfc:	4629      	mov	r1, r5
 8022bfe:	4630      	mov	r0, r6
 8022c00:	f7ff ffa2 	bl	8022b48 <__sfputs_r>
 8022c04:	3001      	adds	r0, #1
 8022c06:	f000 80a7 	beq.w	8022d58 <_vfiprintf_r+0x1ec>
 8022c0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022c0c:	445a      	add	r2, fp
 8022c0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8022c10:	f89a 3000 	ldrb.w	r3, [sl]
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	f000 809f 	beq.w	8022d58 <_vfiprintf_r+0x1ec>
 8022c1a:	2300      	movs	r3, #0
 8022c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8022c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022c24:	f10a 0a01 	add.w	sl, sl, #1
 8022c28:	9304      	str	r3, [sp, #16]
 8022c2a:	9307      	str	r3, [sp, #28]
 8022c2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022c30:	931a      	str	r3, [sp, #104]	@ 0x68
 8022c32:	4654      	mov	r4, sl
 8022c34:	2205      	movs	r2, #5
 8022c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c3a:	4853      	ldr	r0, [pc, #332]	@ (8022d88 <_vfiprintf_r+0x21c>)
 8022c3c:	f7dd fb68 	bl	8000310 <memchr>
 8022c40:	9a04      	ldr	r2, [sp, #16]
 8022c42:	b9d8      	cbnz	r0, 8022c7c <_vfiprintf_r+0x110>
 8022c44:	06d1      	lsls	r1, r2, #27
 8022c46:	bf44      	itt	mi
 8022c48:	2320      	movmi	r3, #32
 8022c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022c4e:	0713      	lsls	r3, r2, #28
 8022c50:	bf44      	itt	mi
 8022c52:	232b      	movmi	r3, #43	@ 0x2b
 8022c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022c58:	f89a 3000 	ldrb.w	r3, [sl]
 8022c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8022c5e:	d015      	beq.n	8022c8c <_vfiprintf_r+0x120>
 8022c60:	9a07      	ldr	r2, [sp, #28]
 8022c62:	4654      	mov	r4, sl
 8022c64:	2000      	movs	r0, #0
 8022c66:	f04f 0c0a 	mov.w	ip, #10
 8022c6a:	4621      	mov	r1, r4
 8022c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022c70:	3b30      	subs	r3, #48	@ 0x30
 8022c72:	2b09      	cmp	r3, #9
 8022c74:	d94b      	bls.n	8022d0e <_vfiprintf_r+0x1a2>
 8022c76:	b1b0      	cbz	r0, 8022ca6 <_vfiprintf_r+0x13a>
 8022c78:	9207      	str	r2, [sp, #28]
 8022c7a:	e014      	b.n	8022ca6 <_vfiprintf_r+0x13a>
 8022c7c:	eba0 0308 	sub.w	r3, r0, r8
 8022c80:	fa09 f303 	lsl.w	r3, r9, r3
 8022c84:	4313      	orrs	r3, r2
 8022c86:	9304      	str	r3, [sp, #16]
 8022c88:	46a2      	mov	sl, r4
 8022c8a:	e7d2      	b.n	8022c32 <_vfiprintf_r+0xc6>
 8022c8c:	9b03      	ldr	r3, [sp, #12]
 8022c8e:	1d19      	adds	r1, r3, #4
 8022c90:	681b      	ldr	r3, [r3, #0]
 8022c92:	9103      	str	r1, [sp, #12]
 8022c94:	2b00      	cmp	r3, #0
 8022c96:	bfbb      	ittet	lt
 8022c98:	425b      	neglt	r3, r3
 8022c9a:	f042 0202 	orrlt.w	r2, r2, #2
 8022c9e:	9307      	strge	r3, [sp, #28]
 8022ca0:	9307      	strlt	r3, [sp, #28]
 8022ca2:	bfb8      	it	lt
 8022ca4:	9204      	strlt	r2, [sp, #16]
 8022ca6:	7823      	ldrb	r3, [r4, #0]
 8022ca8:	2b2e      	cmp	r3, #46	@ 0x2e
 8022caa:	d10a      	bne.n	8022cc2 <_vfiprintf_r+0x156>
 8022cac:	7863      	ldrb	r3, [r4, #1]
 8022cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8022cb0:	d132      	bne.n	8022d18 <_vfiprintf_r+0x1ac>
 8022cb2:	9b03      	ldr	r3, [sp, #12]
 8022cb4:	1d1a      	adds	r2, r3, #4
 8022cb6:	681b      	ldr	r3, [r3, #0]
 8022cb8:	9203      	str	r2, [sp, #12]
 8022cba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022cbe:	3402      	adds	r4, #2
 8022cc0:	9305      	str	r3, [sp, #20]
 8022cc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8022d98 <_vfiprintf_r+0x22c>
 8022cc6:	7821      	ldrb	r1, [r4, #0]
 8022cc8:	2203      	movs	r2, #3
 8022cca:	4650      	mov	r0, sl
 8022ccc:	f7dd fb20 	bl	8000310 <memchr>
 8022cd0:	b138      	cbz	r0, 8022ce2 <_vfiprintf_r+0x176>
 8022cd2:	9b04      	ldr	r3, [sp, #16]
 8022cd4:	eba0 000a 	sub.w	r0, r0, sl
 8022cd8:	2240      	movs	r2, #64	@ 0x40
 8022cda:	4082      	lsls	r2, r0
 8022cdc:	4313      	orrs	r3, r2
 8022cde:	3401      	adds	r4, #1
 8022ce0:	9304      	str	r3, [sp, #16]
 8022ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ce6:	4829      	ldr	r0, [pc, #164]	@ (8022d8c <_vfiprintf_r+0x220>)
 8022ce8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022cec:	2206      	movs	r2, #6
 8022cee:	f7dd fb0f 	bl	8000310 <memchr>
 8022cf2:	2800      	cmp	r0, #0
 8022cf4:	d03f      	beq.n	8022d76 <_vfiprintf_r+0x20a>
 8022cf6:	4b26      	ldr	r3, [pc, #152]	@ (8022d90 <_vfiprintf_r+0x224>)
 8022cf8:	bb1b      	cbnz	r3, 8022d42 <_vfiprintf_r+0x1d6>
 8022cfa:	9b03      	ldr	r3, [sp, #12]
 8022cfc:	3307      	adds	r3, #7
 8022cfe:	f023 0307 	bic.w	r3, r3, #7
 8022d02:	3308      	adds	r3, #8
 8022d04:	9303      	str	r3, [sp, #12]
 8022d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d08:	443b      	add	r3, r7
 8022d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d0c:	e76a      	b.n	8022be4 <_vfiprintf_r+0x78>
 8022d0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022d12:	460c      	mov	r4, r1
 8022d14:	2001      	movs	r0, #1
 8022d16:	e7a8      	b.n	8022c6a <_vfiprintf_r+0xfe>
 8022d18:	2300      	movs	r3, #0
 8022d1a:	3401      	adds	r4, #1
 8022d1c:	9305      	str	r3, [sp, #20]
 8022d1e:	4619      	mov	r1, r3
 8022d20:	f04f 0c0a 	mov.w	ip, #10
 8022d24:	4620      	mov	r0, r4
 8022d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022d2a:	3a30      	subs	r2, #48	@ 0x30
 8022d2c:	2a09      	cmp	r2, #9
 8022d2e:	d903      	bls.n	8022d38 <_vfiprintf_r+0x1cc>
 8022d30:	2b00      	cmp	r3, #0
 8022d32:	d0c6      	beq.n	8022cc2 <_vfiprintf_r+0x156>
 8022d34:	9105      	str	r1, [sp, #20]
 8022d36:	e7c4      	b.n	8022cc2 <_vfiprintf_r+0x156>
 8022d38:	fb0c 2101 	mla	r1, ip, r1, r2
 8022d3c:	4604      	mov	r4, r0
 8022d3e:	2301      	movs	r3, #1
 8022d40:	e7f0      	b.n	8022d24 <_vfiprintf_r+0x1b8>
 8022d42:	ab03      	add	r3, sp, #12
 8022d44:	9300      	str	r3, [sp, #0]
 8022d46:	462a      	mov	r2, r5
 8022d48:	4b12      	ldr	r3, [pc, #72]	@ (8022d94 <_vfiprintf_r+0x228>)
 8022d4a:	a904      	add	r1, sp, #16
 8022d4c:	4630      	mov	r0, r6
 8022d4e:	f3af 8000 	nop.w
 8022d52:	4607      	mov	r7, r0
 8022d54:	1c78      	adds	r0, r7, #1
 8022d56:	d1d6      	bne.n	8022d06 <_vfiprintf_r+0x19a>
 8022d58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022d5a:	07d9      	lsls	r1, r3, #31
 8022d5c:	d405      	bmi.n	8022d6a <_vfiprintf_r+0x1fe>
 8022d5e:	89ab      	ldrh	r3, [r5, #12]
 8022d60:	059a      	lsls	r2, r3, #22
 8022d62:	d402      	bmi.n	8022d6a <_vfiprintf_r+0x1fe>
 8022d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022d66:	f7ff f9c3 	bl	80220f0 <__retarget_lock_release_recursive>
 8022d6a:	89ab      	ldrh	r3, [r5, #12]
 8022d6c:	065b      	lsls	r3, r3, #25
 8022d6e:	f53f af1f 	bmi.w	8022bb0 <_vfiprintf_r+0x44>
 8022d72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022d74:	e71e      	b.n	8022bb4 <_vfiprintf_r+0x48>
 8022d76:	ab03      	add	r3, sp, #12
 8022d78:	9300      	str	r3, [sp, #0]
 8022d7a:	462a      	mov	r2, r5
 8022d7c:	4b05      	ldr	r3, [pc, #20]	@ (8022d94 <_vfiprintf_r+0x228>)
 8022d7e:	a904      	add	r1, sp, #16
 8022d80:	4630      	mov	r0, r6
 8022d82:	f7ff fca9 	bl	80226d8 <_printf_i>
 8022d86:	e7e4      	b.n	8022d52 <_vfiprintf_r+0x1e6>
 8022d88:	08026457 	.word	0x08026457
 8022d8c:	08026461 	.word	0x08026461
 8022d90:	00000000 	.word	0x00000000
 8022d94:	08022b49 	.word	0x08022b49
 8022d98:	0802645d 	.word	0x0802645d

08022d9c <__swbuf_r>:
 8022d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d9e:	460e      	mov	r6, r1
 8022da0:	4614      	mov	r4, r2
 8022da2:	4605      	mov	r5, r0
 8022da4:	b118      	cbz	r0, 8022dae <__swbuf_r+0x12>
 8022da6:	6a03      	ldr	r3, [r0, #32]
 8022da8:	b90b      	cbnz	r3, 8022dae <__swbuf_r+0x12>
 8022daa:	f7fe fffd 	bl	8021da8 <__sinit>
 8022dae:	69a3      	ldr	r3, [r4, #24]
 8022db0:	60a3      	str	r3, [r4, #8]
 8022db2:	89a3      	ldrh	r3, [r4, #12]
 8022db4:	071a      	lsls	r2, r3, #28
 8022db6:	d501      	bpl.n	8022dbc <__swbuf_r+0x20>
 8022db8:	6923      	ldr	r3, [r4, #16]
 8022dba:	b943      	cbnz	r3, 8022dce <__swbuf_r+0x32>
 8022dbc:	4621      	mov	r1, r4
 8022dbe:	4628      	mov	r0, r5
 8022dc0:	f000 f82a 	bl	8022e18 <__swsetup_r>
 8022dc4:	b118      	cbz	r0, 8022dce <__swbuf_r+0x32>
 8022dc6:	f04f 37ff 	mov.w	r7, #4294967295
 8022dca:	4638      	mov	r0, r7
 8022dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022dce:	6823      	ldr	r3, [r4, #0]
 8022dd0:	6922      	ldr	r2, [r4, #16]
 8022dd2:	1a98      	subs	r0, r3, r2
 8022dd4:	6963      	ldr	r3, [r4, #20]
 8022dd6:	b2f6      	uxtb	r6, r6
 8022dd8:	4283      	cmp	r3, r0
 8022dda:	4637      	mov	r7, r6
 8022ddc:	dc05      	bgt.n	8022dea <__swbuf_r+0x4e>
 8022dde:	4621      	mov	r1, r4
 8022de0:	4628      	mov	r0, r5
 8022de2:	f7ff fe1b 	bl	8022a1c <_fflush_r>
 8022de6:	2800      	cmp	r0, #0
 8022de8:	d1ed      	bne.n	8022dc6 <__swbuf_r+0x2a>
 8022dea:	68a3      	ldr	r3, [r4, #8]
 8022dec:	3b01      	subs	r3, #1
 8022dee:	60a3      	str	r3, [r4, #8]
 8022df0:	6823      	ldr	r3, [r4, #0]
 8022df2:	1c5a      	adds	r2, r3, #1
 8022df4:	6022      	str	r2, [r4, #0]
 8022df6:	701e      	strb	r6, [r3, #0]
 8022df8:	6962      	ldr	r2, [r4, #20]
 8022dfa:	1c43      	adds	r3, r0, #1
 8022dfc:	429a      	cmp	r2, r3
 8022dfe:	d004      	beq.n	8022e0a <__swbuf_r+0x6e>
 8022e00:	89a3      	ldrh	r3, [r4, #12]
 8022e02:	07db      	lsls	r3, r3, #31
 8022e04:	d5e1      	bpl.n	8022dca <__swbuf_r+0x2e>
 8022e06:	2e0a      	cmp	r6, #10
 8022e08:	d1df      	bne.n	8022dca <__swbuf_r+0x2e>
 8022e0a:	4621      	mov	r1, r4
 8022e0c:	4628      	mov	r0, r5
 8022e0e:	f7ff fe05 	bl	8022a1c <_fflush_r>
 8022e12:	2800      	cmp	r0, #0
 8022e14:	d0d9      	beq.n	8022dca <__swbuf_r+0x2e>
 8022e16:	e7d6      	b.n	8022dc6 <__swbuf_r+0x2a>

08022e18 <__swsetup_r>:
 8022e18:	b538      	push	{r3, r4, r5, lr}
 8022e1a:	4b29      	ldr	r3, [pc, #164]	@ (8022ec0 <__swsetup_r+0xa8>)
 8022e1c:	4605      	mov	r5, r0
 8022e1e:	6818      	ldr	r0, [r3, #0]
 8022e20:	460c      	mov	r4, r1
 8022e22:	b118      	cbz	r0, 8022e2c <__swsetup_r+0x14>
 8022e24:	6a03      	ldr	r3, [r0, #32]
 8022e26:	b90b      	cbnz	r3, 8022e2c <__swsetup_r+0x14>
 8022e28:	f7fe ffbe 	bl	8021da8 <__sinit>
 8022e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e30:	0719      	lsls	r1, r3, #28
 8022e32:	d422      	bmi.n	8022e7a <__swsetup_r+0x62>
 8022e34:	06da      	lsls	r2, r3, #27
 8022e36:	d407      	bmi.n	8022e48 <__swsetup_r+0x30>
 8022e38:	2209      	movs	r2, #9
 8022e3a:	602a      	str	r2, [r5, #0]
 8022e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022e40:	81a3      	strh	r3, [r4, #12]
 8022e42:	f04f 30ff 	mov.w	r0, #4294967295
 8022e46:	e033      	b.n	8022eb0 <__swsetup_r+0x98>
 8022e48:	0758      	lsls	r0, r3, #29
 8022e4a:	d512      	bpl.n	8022e72 <__swsetup_r+0x5a>
 8022e4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022e4e:	b141      	cbz	r1, 8022e62 <__swsetup_r+0x4a>
 8022e50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022e54:	4299      	cmp	r1, r3
 8022e56:	d002      	beq.n	8022e5e <__swsetup_r+0x46>
 8022e58:	4628      	mov	r0, r5
 8022e5a:	f7ff f977 	bl	802214c <_free_r>
 8022e5e:	2300      	movs	r3, #0
 8022e60:	6363      	str	r3, [r4, #52]	@ 0x34
 8022e62:	89a3      	ldrh	r3, [r4, #12]
 8022e64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022e68:	81a3      	strh	r3, [r4, #12]
 8022e6a:	2300      	movs	r3, #0
 8022e6c:	6063      	str	r3, [r4, #4]
 8022e6e:	6923      	ldr	r3, [r4, #16]
 8022e70:	6023      	str	r3, [r4, #0]
 8022e72:	89a3      	ldrh	r3, [r4, #12]
 8022e74:	f043 0308 	orr.w	r3, r3, #8
 8022e78:	81a3      	strh	r3, [r4, #12]
 8022e7a:	6923      	ldr	r3, [r4, #16]
 8022e7c:	b94b      	cbnz	r3, 8022e92 <__swsetup_r+0x7a>
 8022e7e:	89a3      	ldrh	r3, [r4, #12]
 8022e80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022e88:	d003      	beq.n	8022e92 <__swsetup_r+0x7a>
 8022e8a:	4621      	mov	r1, r4
 8022e8c:	4628      	mov	r0, r5
 8022e8e:	f000 f88b 	bl	8022fa8 <__smakebuf_r>
 8022e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e96:	f013 0201 	ands.w	r2, r3, #1
 8022e9a:	d00a      	beq.n	8022eb2 <__swsetup_r+0x9a>
 8022e9c:	2200      	movs	r2, #0
 8022e9e:	60a2      	str	r2, [r4, #8]
 8022ea0:	6962      	ldr	r2, [r4, #20]
 8022ea2:	4252      	negs	r2, r2
 8022ea4:	61a2      	str	r2, [r4, #24]
 8022ea6:	6922      	ldr	r2, [r4, #16]
 8022ea8:	b942      	cbnz	r2, 8022ebc <__swsetup_r+0xa4>
 8022eaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022eae:	d1c5      	bne.n	8022e3c <__swsetup_r+0x24>
 8022eb0:	bd38      	pop	{r3, r4, r5, pc}
 8022eb2:	0799      	lsls	r1, r3, #30
 8022eb4:	bf58      	it	pl
 8022eb6:	6962      	ldrpl	r2, [r4, #20]
 8022eb8:	60a2      	str	r2, [r4, #8]
 8022eba:	e7f4      	b.n	8022ea6 <__swsetup_r+0x8e>
 8022ebc:	2000      	movs	r0, #0
 8022ebe:	e7f7      	b.n	8022eb0 <__swsetup_r+0x98>
 8022ec0:	240149f8 	.word	0x240149f8

08022ec4 <_raise_r>:
 8022ec4:	291f      	cmp	r1, #31
 8022ec6:	b538      	push	{r3, r4, r5, lr}
 8022ec8:	4605      	mov	r5, r0
 8022eca:	460c      	mov	r4, r1
 8022ecc:	d904      	bls.n	8022ed8 <_raise_r+0x14>
 8022ece:	2316      	movs	r3, #22
 8022ed0:	6003      	str	r3, [r0, #0]
 8022ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8022ed6:	bd38      	pop	{r3, r4, r5, pc}
 8022ed8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022eda:	b112      	cbz	r2, 8022ee2 <_raise_r+0x1e>
 8022edc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022ee0:	b94b      	cbnz	r3, 8022ef6 <_raise_r+0x32>
 8022ee2:	4628      	mov	r0, r5
 8022ee4:	f000 f830 	bl	8022f48 <_getpid_r>
 8022ee8:	4622      	mov	r2, r4
 8022eea:	4601      	mov	r1, r0
 8022eec:	4628      	mov	r0, r5
 8022eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022ef2:	f000 b817 	b.w	8022f24 <_kill_r>
 8022ef6:	2b01      	cmp	r3, #1
 8022ef8:	d00a      	beq.n	8022f10 <_raise_r+0x4c>
 8022efa:	1c59      	adds	r1, r3, #1
 8022efc:	d103      	bne.n	8022f06 <_raise_r+0x42>
 8022efe:	2316      	movs	r3, #22
 8022f00:	6003      	str	r3, [r0, #0]
 8022f02:	2001      	movs	r0, #1
 8022f04:	e7e7      	b.n	8022ed6 <_raise_r+0x12>
 8022f06:	2100      	movs	r1, #0
 8022f08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022f0c:	4620      	mov	r0, r4
 8022f0e:	4798      	blx	r3
 8022f10:	2000      	movs	r0, #0
 8022f12:	e7e0      	b.n	8022ed6 <_raise_r+0x12>

08022f14 <raise>:
 8022f14:	4b02      	ldr	r3, [pc, #8]	@ (8022f20 <raise+0xc>)
 8022f16:	4601      	mov	r1, r0
 8022f18:	6818      	ldr	r0, [r3, #0]
 8022f1a:	f7ff bfd3 	b.w	8022ec4 <_raise_r>
 8022f1e:	bf00      	nop
 8022f20:	240149f8 	.word	0x240149f8

08022f24 <_kill_r>:
 8022f24:	b538      	push	{r3, r4, r5, lr}
 8022f26:	4d07      	ldr	r5, [pc, #28]	@ (8022f44 <_kill_r+0x20>)
 8022f28:	2300      	movs	r3, #0
 8022f2a:	4604      	mov	r4, r0
 8022f2c:	4608      	mov	r0, r1
 8022f2e:	4611      	mov	r1, r2
 8022f30:	602b      	str	r3, [r5, #0]
 8022f32:	f7f6 f8b4 	bl	801909e <_kill>
 8022f36:	1c43      	adds	r3, r0, #1
 8022f38:	d102      	bne.n	8022f40 <_kill_r+0x1c>
 8022f3a:	682b      	ldr	r3, [r5, #0]
 8022f3c:	b103      	cbz	r3, 8022f40 <_kill_r+0x1c>
 8022f3e:	6023      	str	r3, [r4, #0]
 8022f40:	bd38      	pop	{r3, r4, r5, pc}
 8022f42:	bf00      	nop
 8022f44:	2405a9f0 	.word	0x2405a9f0

08022f48 <_getpid_r>:
 8022f48:	f7f6 b8a1 	b.w	801908e <_getpid>

08022f4c <_malloc_usable_size_r>:
 8022f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022f50:	1f18      	subs	r0, r3, #4
 8022f52:	2b00      	cmp	r3, #0
 8022f54:	bfbc      	itt	lt
 8022f56:	580b      	ldrlt	r3, [r1, r0]
 8022f58:	18c0      	addlt	r0, r0, r3
 8022f5a:	4770      	bx	lr

08022f5c <__swhatbuf_r>:
 8022f5c:	b570      	push	{r4, r5, r6, lr}
 8022f5e:	460c      	mov	r4, r1
 8022f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022f64:	2900      	cmp	r1, #0
 8022f66:	b096      	sub	sp, #88	@ 0x58
 8022f68:	4615      	mov	r5, r2
 8022f6a:	461e      	mov	r6, r3
 8022f6c:	da0d      	bge.n	8022f8a <__swhatbuf_r+0x2e>
 8022f6e:	89a3      	ldrh	r3, [r4, #12]
 8022f70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022f74:	f04f 0100 	mov.w	r1, #0
 8022f78:	bf14      	ite	ne
 8022f7a:	2340      	movne	r3, #64	@ 0x40
 8022f7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022f80:	2000      	movs	r0, #0
 8022f82:	6031      	str	r1, [r6, #0]
 8022f84:	602b      	str	r3, [r5, #0]
 8022f86:	b016      	add	sp, #88	@ 0x58
 8022f88:	bd70      	pop	{r4, r5, r6, pc}
 8022f8a:	466a      	mov	r2, sp
 8022f8c:	f000 f848 	bl	8023020 <_fstat_r>
 8022f90:	2800      	cmp	r0, #0
 8022f92:	dbec      	blt.n	8022f6e <__swhatbuf_r+0x12>
 8022f94:	9901      	ldr	r1, [sp, #4]
 8022f96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022f9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022f9e:	4259      	negs	r1, r3
 8022fa0:	4159      	adcs	r1, r3
 8022fa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022fa6:	e7eb      	b.n	8022f80 <__swhatbuf_r+0x24>

08022fa8 <__smakebuf_r>:
 8022fa8:	898b      	ldrh	r3, [r1, #12]
 8022faa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022fac:	079d      	lsls	r5, r3, #30
 8022fae:	4606      	mov	r6, r0
 8022fb0:	460c      	mov	r4, r1
 8022fb2:	d507      	bpl.n	8022fc4 <__smakebuf_r+0x1c>
 8022fb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022fb8:	6023      	str	r3, [r4, #0]
 8022fba:	6123      	str	r3, [r4, #16]
 8022fbc:	2301      	movs	r3, #1
 8022fbe:	6163      	str	r3, [r4, #20]
 8022fc0:	b003      	add	sp, #12
 8022fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022fc4:	ab01      	add	r3, sp, #4
 8022fc6:	466a      	mov	r2, sp
 8022fc8:	f7ff ffc8 	bl	8022f5c <__swhatbuf_r>
 8022fcc:	9f00      	ldr	r7, [sp, #0]
 8022fce:	4605      	mov	r5, r0
 8022fd0:	4639      	mov	r1, r7
 8022fd2:	4630      	mov	r0, r6
 8022fd4:	f7ff f92e 	bl	8022234 <_malloc_r>
 8022fd8:	b948      	cbnz	r0, 8022fee <__smakebuf_r+0x46>
 8022fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022fde:	059a      	lsls	r2, r3, #22
 8022fe0:	d4ee      	bmi.n	8022fc0 <__smakebuf_r+0x18>
 8022fe2:	f023 0303 	bic.w	r3, r3, #3
 8022fe6:	f043 0302 	orr.w	r3, r3, #2
 8022fea:	81a3      	strh	r3, [r4, #12]
 8022fec:	e7e2      	b.n	8022fb4 <__smakebuf_r+0xc>
 8022fee:	89a3      	ldrh	r3, [r4, #12]
 8022ff0:	6020      	str	r0, [r4, #0]
 8022ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022ff6:	81a3      	strh	r3, [r4, #12]
 8022ff8:	9b01      	ldr	r3, [sp, #4]
 8022ffa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022ffe:	b15b      	cbz	r3, 8023018 <__smakebuf_r+0x70>
 8023000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023004:	4630      	mov	r0, r6
 8023006:	f000 f81d 	bl	8023044 <_isatty_r>
 802300a:	b128      	cbz	r0, 8023018 <__smakebuf_r+0x70>
 802300c:	89a3      	ldrh	r3, [r4, #12]
 802300e:	f023 0303 	bic.w	r3, r3, #3
 8023012:	f043 0301 	orr.w	r3, r3, #1
 8023016:	81a3      	strh	r3, [r4, #12]
 8023018:	89a3      	ldrh	r3, [r4, #12]
 802301a:	431d      	orrs	r5, r3
 802301c:	81a5      	strh	r5, [r4, #12]
 802301e:	e7cf      	b.n	8022fc0 <__smakebuf_r+0x18>

08023020 <_fstat_r>:
 8023020:	b538      	push	{r3, r4, r5, lr}
 8023022:	4d07      	ldr	r5, [pc, #28]	@ (8023040 <_fstat_r+0x20>)
 8023024:	2300      	movs	r3, #0
 8023026:	4604      	mov	r4, r0
 8023028:	4608      	mov	r0, r1
 802302a:	4611      	mov	r1, r2
 802302c:	602b      	str	r3, [r5, #0]
 802302e:	f7f6 f896 	bl	801915e <_fstat>
 8023032:	1c43      	adds	r3, r0, #1
 8023034:	d102      	bne.n	802303c <_fstat_r+0x1c>
 8023036:	682b      	ldr	r3, [r5, #0]
 8023038:	b103      	cbz	r3, 802303c <_fstat_r+0x1c>
 802303a:	6023      	str	r3, [r4, #0]
 802303c:	bd38      	pop	{r3, r4, r5, pc}
 802303e:	bf00      	nop
 8023040:	2405a9f0 	.word	0x2405a9f0

08023044 <_isatty_r>:
 8023044:	b538      	push	{r3, r4, r5, lr}
 8023046:	4d06      	ldr	r5, [pc, #24]	@ (8023060 <_isatty_r+0x1c>)
 8023048:	2300      	movs	r3, #0
 802304a:	4604      	mov	r4, r0
 802304c:	4608      	mov	r0, r1
 802304e:	602b      	str	r3, [r5, #0]
 8023050:	f7f6 f895 	bl	801917e <_isatty>
 8023054:	1c43      	adds	r3, r0, #1
 8023056:	d102      	bne.n	802305e <_isatty_r+0x1a>
 8023058:	682b      	ldr	r3, [r5, #0]
 802305a:	b103      	cbz	r3, 802305e <_isatty_r+0x1a>
 802305c:	6023      	str	r3, [r4, #0]
 802305e:	bd38      	pop	{r3, r4, r5, pc}
 8023060:	2405a9f0 	.word	0x2405a9f0

08023064 <_init>:
 8023064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023066:	bf00      	nop
 8023068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802306a:	bc08      	pop	{r3}
 802306c:	469e      	mov	lr, r3
 802306e:	4770      	bx	lr

08023070 <_fini>:
 8023070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023072:	bf00      	nop
 8023074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023076:	bc08      	pop	{r3}
 8023078:	469e      	mov	lr, r3
 802307a:	4770      	bx	lr
