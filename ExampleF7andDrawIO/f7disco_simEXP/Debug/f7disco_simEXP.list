
f7disco_simEXP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cba8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011ac  0800cd78  0800cd78  0000dd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df24  0800df24  0000f144  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800df24  0800df24  0000ef24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df2c  0800df2c  0000f144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df2c  0800df2c  0000ef2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df30  0800df30  0000ef30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000144  20000000  0800df34  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b30  20000144  0800e078  0000f144  2**2
                  ALLOC
 10 .custom_data  00032000  20001c74  0800e078  0000fc74  2**0
                  ALLOC
 11 .chunk_data   00002800  20033c74  0800e078  0000fc74  2**0
                  ALLOC
 12 ._user_heap_stack 00000c04  20036474  0800e078  0000f474  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000f144  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019283  00000000  00000000  0000f174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004b0b  00000000  00000000  000283f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f0  00000000  00000000  0002cf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001162  00000000  00000000  0002e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d130  00000000  00000000  0002f75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d81b  00000000  00000000  0005c88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00100a27  00000000  00000000  0007a0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017aacc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006948  00000000  00000000  0017ab10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  00181458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000144 	.word	0x20000144
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd60 	.word	0x0800cd60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000148 	.word	0x20000148
 800020c:	0800cd60 	.word	0x0800cd60

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <Mgmt_SystemInitStepZero>:

/*************************************************
 *                  Init Step                    *
 *************************************************/
void Mgmt_SystemInitStepZero(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af02      	add	r7, sp, #8
	toOBC_Init();
 8000612:	f000 fae9 	bl	8000be8 <toOBC_Init>
	Utils_SoftTime_Init();
 8000616:	f003 ffef 	bl	80045f8 <Utils_SoftTime_Init>
	(void)SPI_SlaveDevice_Init();
 800061a:	f003 fd31 	bl	8004080 <SPI_SlaveDevice_Init>
	SystemCLI_Init();
 800061e:	f001 fe89 	bl	8002334 <SystemCLI_Init>
    LOG("Step 0A - OK!");
 8000622:	f107 0311 	add.w	r3, r7, #17
 8000626:	f107 0212 	add.w	r2, r7, #18
 800062a:	f107 0113 	add.w	r1, r7, #19
 800062e:	f107 0014 	add.w	r0, r7, #20
 8000632:	f004 f845 	bl	80046c0 <Utils_GetWorkingTime>
 8000636:	7cfb      	ldrb	r3, [r7, #19]
 8000638:	4619      	mov	r1, r3
 800063a:	7cbb      	ldrb	r3, [r7, #18]
 800063c:	461a      	mov	r2, r3
 800063e:	7c7b      	ldrb	r3, [r7, #17]
 8000640:	4618      	mov	r0, r3
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <Mgmt_SystemInitStepZero+0xac>)
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4603      	mov	r3, r0
 8000648:	481c      	ldr	r0, [pc, #112]	@ (80006bc <Mgmt_SystemInitStepZero+0xb0>)
 800064a:	f00b fa4b 	bl	800bae4 <iprintf>
    if (CSP_QUADSPI_Init() != HAL_OK){
 800064e:	f000 fc45 	bl	8000edc <CSP_QUADSPI_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d015      	beq.n	8000684 <Mgmt_SystemInitStepZero+0x78>
    	LOG("QuadSPI - Error!");
 8000658:	f107 0309 	add.w	r3, r7, #9
 800065c:	f107 020a 	add.w	r2, r7, #10
 8000660:	f107 010b 	add.w	r1, r7, #11
 8000664:	f107 000c 	add.w	r0, r7, #12
 8000668:	f004 f82a 	bl	80046c0 <Utils_GetWorkingTime>
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	4619      	mov	r1, r3
 8000670:	7abb      	ldrb	r3, [r7, #10]
 8000672:	461a      	mov	r2, r3
 8000674:	7a7b      	ldrb	r3, [r7, #9]
 8000676:	4618      	mov	r0, r3
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <Mgmt_SystemInitStepZero+0xac>)
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	4603      	mov	r3, r0
 800067e:	4810      	ldr	r0, [pc, #64]	@ (80006c0 <Mgmt_SystemInitStepZero+0xb4>)
 8000680:	f00b fa30 	bl	800bae4 <iprintf>
    };
	UART_Driver_Init();
 8000684:	f000 ff60 	bl	8001548 <UART_Driver_Init>
	MIN_Process_Init();
 8000688:	f003 faea 	bl	8003c60 <MIN_Process_Init>
    LOG("Step 0Z - OK!");
 800068c:	1c7b      	adds	r3, r7, #1
 800068e:	1cba      	adds	r2, r7, #2
 8000690:	1cf9      	adds	r1, r7, #3
 8000692:	1d38      	adds	r0, r7, #4
 8000694:	f004 f814 	bl	80046c0 <Utils_GetWorkingTime>
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	4619      	mov	r1, r3
 800069c:	78bb      	ldrb	r3, [r7, #2]
 800069e:	461a      	mov	r2, r3
 80006a0:	787b      	ldrb	r3, [r7, #1]
 80006a2:	4618      	mov	r0, r3
 80006a4:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <Mgmt_SystemInitStepZero+0xac>)
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4603      	mov	r3, r0
 80006aa:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <Mgmt_SystemInitStepZero+0xb8>)
 80006ac:	f00b fa1a 	bl	800bae4 <iprintf>
}
 80006b0:	bf00      	nop
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	0800cda0 	.word	0x0800cda0
 80006bc:	0800cd78 	.word	0x0800cd78
 80006c0:	0800cdac 	.word	0x0800cdac
 80006c4:	0800cdd8 	.word	0x0800cdd8

080006c8 <Mgmt_SystemInitFinal>:

void Mgmt_SystemInitFinal(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af02      	add	r7, sp, #8
//	SystemCLI_Init();
	SCH_Initialize();
 80006ce:	f000 f83b 	bl	8000748 <SCH_Initialize>
	SchedulerTasks_Create();
 80006d2:	f000 fbc7 	bl	8000e64 <SchedulerTasks_Create>
    LOG("Step Final - OK!");
 80006d6:	1c7b      	adds	r3, r7, #1
 80006d8:	1cba      	adds	r2, r7, #2
 80006da:	1cf9      	adds	r1, r7, #3
 80006dc:	1d38      	adds	r0, r7, #4
 80006de:	f003 ffef 	bl	80046c0 <Utils_GetWorkingTime>
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	4619      	mov	r1, r3
 80006e6:	78bb      	ldrb	r3, [r7, #2]
 80006e8:	461a      	mov	r2, r3
 80006ea:	787b      	ldrb	r3, [r7, #1]
 80006ec:	4618      	mov	r0, r3
 80006ee:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <Mgmt_SystemInitFinal+0x3c>)
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4603      	mov	r3, r0
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <Mgmt_SystemInitFinal+0x40>)
 80006f6:	f00b f9f5 	bl	800bae4 <iprintf>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	0800cda0 	.word	0x0800cda0
 8000708:	0800ce00 	.word	0x0800ce00

0800070c <Mgmt_SystemStart>:

void Mgmt_SystemStart(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af02      	add	r7, sp, #8
    LOG("Start System!");
 8000712:	1c7b      	adds	r3, r7, #1
 8000714:	1cba      	adds	r2, r7, #2
 8000716:	1cf9      	adds	r1, r7, #3
 8000718:	1d38      	adds	r0, r7, #4
 800071a:	f003 ffd1 	bl	80046c0 <Utils_GetWorkingTime>
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	4619      	mov	r1, r3
 8000722:	78bb      	ldrb	r3, [r7, #2]
 8000724:	461a      	mov	r2, r3
 8000726:	787b      	ldrb	r3, [r7, #1]
 8000728:	4618      	mov	r0, r3
 800072a:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <Mgmt_SystemStart+0x34>)
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4603      	mov	r3, r0
 8000730:	4804      	ldr	r0, [pc, #16]	@ (8000744 <Mgmt_SystemStart+0x38>)
 8000732:	f00b f9d7 	bl	800bae4 <iprintf>
	SCH_StartScheduler();
 8000736:	f000 f951 	bl	80009dc <SCH_StartScheduler>
	while(1){
		SCH_HandleScheduledTask();
 800073a:	f000 f95b 	bl	80009f4 <SCH_HandleScheduledTask>
 800073e:	e7fc      	b.n	800073a <Mgmt_SystemStart+0x2e>
 8000740:	0800cda0 	.word	0x0800cda0
 8000744:	0800ce2c 	.word	0x0800ce2c

08000748 <SCH_Initialize>:
 * @brief  Function initializes scheduler
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_Initialize(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    s_SystemTick = RESET;
 800074c:	4b17      	ldr	r3, [pc, #92]	@ (80007ac <SCH_Initialize+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
    s_NumOfTaskScheduled = RESET;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <SCH_Initialize+0x68>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
    s_NumOfTimers = RESET;
 8000758:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <SCH_Initialize+0x6c>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]

#ifdef USE_SCH_SEMAPHORE
    s_NumOfSemaphores = RESET;
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <SCH_Initialize+0x70>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
#endif

    s_SchedulerRunning = FALSE;
 8000764:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <SCH_Initialize+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]

    // Initial Scheduler Context
    memset((uint8_t *)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 800076a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800076e:	2100      	movs	r1, #0
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <SCH_Initialize+0x78>)
 8000772:	f00b fb83 	bl	800be7c <memset>
    memset((uint8_t *)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8000776:	22a0      	movs	r2, #160	@ 0xa0
 8000778:	2100      	movs	r1, #0
 800077a:	4812      	ldr	r0, [pc, #72]	@ (80007c4 <SCH_Initialize+0x7c>)
 800077c:	f00b fb7e 	bl	800be7c <memset>
    memset((uint8_t *)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 8000780:	2208      	movs	r2, #8
 8000782:	2100      	movs	r1, #0
 8000784:	4810      	ldr	r0, [pc, #64]	@ (80007c8 <SCH_Initialize+0x80>)
 8000786:	f00b fb79 	bl	800be7c <memset>
    memset((uint8_t *)&s_TaskPending[0], RESET, (sizeof(uint32_t) * NUM_TASK_PENDING_ARRAYS));
 800078a:	2204      	movs	r2, #4
 800078c:	2100      	movs	r1, #0
 800078e:	480f      	ldr	r0, [pc, #60]	@ (80007cc <SCH_Initialize+0x84>)
 8000790:	f00b fb74 	bl	800be7c <memset>
    memset((uint8_t *)&s_TimerPending[0], RESET, (sizeof(uint32_t) * NUM_TIMER_PENDING_ARRAYS));
 8000794:	2204      	movs	r2, #4
 8000796:	2100      	movs	r1, #0
 8000798:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <SCH_Initialize+0x88>)
 800079a:	f00b fb6f 	bl	800be7c <memset>
#ifdef USE_SCH_SEMAPHORE
    memset((uint8_t *)&s_SemaphoreContext[0], RESET, (sizeof(SCH_SemaphoreTypedef) * MAX_SEMAPHORES));
 800079e:	2204      	movs	r2, #4
 80007a0:	2100      	movs	r1, #0
 80007a2:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <SCH_Initialize+0x8c>)
 80007a4:	f00b fb6a 	bl	800be7c <memset>
#endif
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000039c 	.word	0x2000039c
 80007b0:	200002e4 	.word	0x200002e4
 80007b4:	20000388 	.word	0x20000388
 80007b8:	20000390 	.word	0x20000390
 80007bc:	20000160 	.word	0x20000160
 80007c0:	20000164 	.word	0x20000164
 80007c4:	200002e8 	.word	0x200002e8
 80007c8:	200003a0 	.word	0x200003a0
 80007cc:	20000394 	.word	0x20000394
 80007d0:	20000398 	.word	0x20000398
 80007d4:	2000038c 	.word	0x2000038c

080007d8 <SCH_TASK_CreateTask>:
 * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
 *         SCH_TaskPropertyTypedef TaskProperty
 * @retval status
 *****************************************************************************/
SCH_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE *pHandle, SCH_TaskPropertyTypedef *pTaskProperty)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
    SCH_Status status = SCH_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	73fb      	strb	r3, [r7, #15]
    if (pHandle && pTaskProperty)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d030      	beq.n	800084e <SCH_TASK_CreateTask+0x76>
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d02d      	beq.n	800084e <SCH_TASK_CreateTask+0x76>
    {
        if (s_NumOfTaskScheduled < MAX_TASK)
 80007f2:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <SCH_TASK_CreateTask+0x80>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b0f      	cmp	r3, #15
 80007f8:	d829      	bhi.n	800084e <SCH_TASK_CreateTask+0x76>
        {
            SCH_TaskContextTypedef *pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <SCH_TASK_CreateTask+0x80>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	4a14      	ldr	r2, [pc, #80]	@ (800085c <SCH_TASK_CreateTask+0x84>)
 800080a:	4413      	add	r3, r2
 800080c:	60bb      	str	r3, [r7, #8]
            memcpy(&pTaskContext->taskProperty, pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	3308      	adds	r3, #8
 8000812:	2210      	movs	r2, #16
 8000814:	6839      	ldr	r1, [r7, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f00b fbcb 	bl	800bfb2 <memcpy>
            pTaskContext->currentTick = 0;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
            pTaskContext->taskState = (pTaskProperty->taskType == SCH_TASK_ASYNC) 
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	781b      	ldrb	r3, [r3, #0]
                                                        ? TASK_StateHold : TASK_StateReady;
 8000826:	2b02      	cmp	r3, #2
 8000828:	bf14      	ite	ne
 800082a:	2301      	movne	r3, #1
 800082c:	2300      	moveq	r3, #0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
            pTaskContext->taskState = (pTaskProperty->taskType == SCH_TASK_ASYNC) 
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	701a      	strb	r2, [r3, #0]

            *pHandle = s_NumOfTaskScheduled;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <SCH_TASK_CreateTask+0x80>)
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	701a      	strb	r2, [r3, #0]
            s_NumOfTaskScheduled++;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <SCH_TASK_CreateTask+0x80>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <SCH_TASK_CreateTask+0x80>)
 8000848:	701a      	strb	r2, [r3, #0]
            status = SCH_DONE;
 800084a:	2300      	movs	r3, #0
 800084c:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 800084e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200002e4 	.word	0x200002e4
 800085c:	20000164 	.word	0x20000164

08000860 <SCH_RunSystemTickTimer>:
 * @brief  Function handles system tick timer
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b087      	sub	sp, #28
 8000864:	af00      	add	r7, sp, #0
    if (s_SchedulerRunning)
 8000866:	4b54      	ldr	r3, [pc, #336]	@ (80009b8 <SCH_RunSystemTickTimer+0x158>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	f000 809e 	beq.w	80009ac <SCH_RunSystemTickTimer+0x14c>
    {
        uint8_t taskIndex;
        SCH_TaskContextTypedef *pTaskContext;
        uint8_t timerIndex;
        SCH_TimerContextTypedef *pTimerContext;
        s_SystemTick++;
 8000870:	4b52      	ldr	r3, [pc, #328]	@ (80009bc <SCH_RunSystemTickTimer+0x15c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a51      	ldr	r2, [pc, #324]	@ (80009bc <SCH_RunSystemTickTimer+0x15c>)
 8000878:	6013      	str	r3, [r2, #0]
        // Task
        for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800087a:	2300      	movs	r3, #0
 800087c:	75fb      	strb	r3, [r7, #23]
 800087e:	e035      	b.n	80008ec <SCH_RunSystemTickTimer+0x8c>
        {
            pTaskContext = &s_TaskContext[taskIndex];
 8000880:	7dfa      	ldrb	r2, [r7, #23]
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	4a4d      	ldr	r2, [pc, #308]	@ (80009c0 <SCH_RunSystemTickTimer+0x160>)
 800088c:	4413      	add	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
            if (pTaskContext->taskProperty.taskType == SCH_TASK_SYNC && 
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	7a1b      	ldrb	r3, [r3, #8]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d126      	bne.n	80008e6 <SCH_RunSystemTickTimer+0x86>
                pTaskContext->taskState == TASK_StateReady)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	781b      	ldrb	r3, [r3, #0]
            if (pTaskContext->taskProperty.taskType == SCH_TASK_SYNC && 
 800089c:	2b01      	cmp	r3, #1
 800089e:	d122      	bne.n	80008e6 <SCH_RunSystemTickTimer+0x86>
            {
                pTaskContext->currentTick += 1;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	1c5a      	adds	r2, r3, #1
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	605a      	str	r2, [r3, #4]
                if (pTaskContext->currentTick >= pTaskContext->taskProperty.taskPeriodInMS)
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d317      	bcc.n	80008e6 <SCH_RunSystemTickTimer+0x86>
                {
                    pTaskContext->currentTick = 0;
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
                    uint8_t index = taskIndex / 32;
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	095b      	lsrs	r3, r3, #5
 80008c0:	71fb      	strb	r3, [r7, #7]
                    uint8_t bit = taskIndex % 32;
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	f003 031f 	and.w	r3, r3, #31
 80008c8:	71bb      	strb	r3, [r7, #6]
                    s_TaskPending[index] |= (1 << bit);  // Set bit for task
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	4a3d      	ldr	r2, [pc, #244]	@ (80009c4 <SCH_RunSystemTickTimer+0x164>)
 80008ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	2101      	movs	r1, #1
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	4619      	mov	r1, r3
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	430a      	orrs	r2, r1
 80008e0:	4938      	ldr	r1, [pc, #224]	@ (80009c4 <SCH_RunSystemTickTimer+0x164>)
 80008e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
 80008e8:	3301      	adds	r3, #1
 80008ea:	75fb      	strb	r3, [r7, #23]
 80008ec:	4b36      	ldr	r3, [pc, #216]	@ (80009c8 <SCH_RunSystemTickTimer+0x168>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	7dfa      	ldrb	r2, [r7, #23]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d3c4      	bcc.n	8000880 <SCH_RunSystemTickTimer+0x20>
                }
            }
        }

        // Timer
        for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	75bb      	strb	r3, [r7, #22]
 80008fa:	e03b      	b.n	8000974 <SCH_RunSystemTickTimer+0x114>
        {
            pTimerContext = &s_TimerContext[timerIndex];
 80008fc:	7dba      	ldrb	r2, [r7, #22]
 80008fe:	4613      	mov	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4a31      	ldr	r2, [pc, #196]	@ (80009cc <SCH_RunSystemTickTimer+0x16c>)
 8000908:	4413      	add	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
            if (TIM_StateRun == pTimerContext->timerState)
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d12c      	bne.n	800096e <SCH_RunSystemTickTimer+0x10e>
            {
                pTimerContext->currentTick += 1;
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	605a      	str	r2, [r3, #4]
                if (pTimerContext->currentTick >= pTimerContext->timerProperty.timerPeriodInMS)
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	685a      	ldr	r2, [r3, #4]
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	429a      	cmp	r2, r3
 8000928:	d321      	bcc.n	800096e <SCH_RunSystemTickTimer+0x10e>
                {
                    uint8_t index = timerIndex / 32;
 800092a:	7dbb      	ldrb	r3, [r7, #22]
 800092c:	095b      	lsrs	r3, r3, #5
 800092e:	73fb      	strb	r3, [r7, #15]
                    uint8_t bit = timerIndex % 32;
 8000930:	7dbb      	ldrb	r3, [r7, #22]
 8000932:	f003 031f 	and.w	r3, r3, #31
 8000936:	73bb      	strb	r3, [r7, #14]
                    s_TimerPending[index] |= (1 << bit);  // Set bit for timer
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	4a25      	ldr	r2, [pc, #148]	@ (80009d0 <SCH_RunSystemTickTimer+0x170>)
 800093c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000940:	7bbb      	ldrb	r3, [r7, #14]
 8000942:	2101      	movs	r1, #1
 8000944:	fa01 f303 	lsl.w	r3, r1, r3
 8000948:	4619      	mov	r1, r3
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	430a      	orrs	r2, r1
 800094e:	4920      	ldr	r1, [pc, #128]	@ (80009d0 <SCH_RunSystemTickTimer+0x170>)
 8000950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    pTimerContext->currentTick = 0;
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
                    pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->timerProperty.timerType) ? TIM_StateRun : TIM_StateStop;
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	7a1b      	ldrb	r3, [r3, #8]
 800095e:	2b02      	cmp	r3, #2
 8000960:	bf0c      	ite	eq
 8000962:	2301      	moveq	r3, #1
 8000964:	2300      	movne	r3, #0
 8000966:	b2db      	uxtb	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	701a      	strb	r2, [r3, #0]
        for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800096e:	7dbb      	ldrb	r3, [r7, #22]
 8000970:	3301      	adds	r3, #1
 8000972:	75bb      	strb	r3, [r7, #22]
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <SCH_RunSystemTickTimer+0x174>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	7dba      	ldrb	r2, [r7, #22]
 800097a:	429a      	cmp	r2, r3
 800097c:	d3be      	bcc.n	80008fc <SCH_RunSystemTickTimer+0x9c>
                }
            }
        }

        // Soft timer
        for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800097e:	2300      	movs	r3, #0
 8000980:	75bb      	strb	r3, [r7, #22]
 8000982:	e010      	b.n	80009a6 <SCH_RunSystemTickTimer+0x146>
        {
            if (s_SoftTimers[timerIndex] > 0)
 8000984:	7dbb      	ldrb	r3, [r7, #22]
 8000986:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <SCH_RunSystemTickTimer+0x178>)
 8000988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d007      	beq.n	80009a0 <SCH_RunSystemTickTimer+0x140>
                s_SoftTimers[timerIndex]--;
 8000990:	7dbb      	ldrb	r3, [r7, #22]
 8000992:	4a11      	ldr	r2, [pc, #68]	@ (80009d8 <SCH_RunSystemTickTimer+0x178>)
 8000994:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000998:	3a01      	subs	r2, #1
 800099a:	490f      	ldr	r1, [pc, #60]	@ (80009d8 <SCH_RunSystemTickTimer+0x178>)
 800099c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 80009a0:	7dbb      	ldrb	r3, [r7, #22]
 80009a2:	3301      	adds	r3, #1
 80009a4:	75bb      	strb	r3, [r7, #22]
 80009a6:	7dbb      	ldrb	r3, [r7, #22]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d9eb      	bls.n	8000984 <SCH_RunSystemTickTimer+0x124>
        }
    }
}
 80009ac:	bf00      	nop
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	20000160 	.word	0x20000160
 80009bc:	2000039c 	.word	0x2000039c
 80009c0:	20000164 	.word	0x20000164
 80009c4:	20000394 	.word	0x20000394
 80009c8:	200002e4 	.word	0x200002e4
 80009cc:	200002e8 	.word	0x200002e8
 80009d0:	20000398 	.word	0x20000398
 80009d4:	20000388 	.word	0x20000388
 80009d8:	200003a0 	.word	0x200003a0

080009dc <SCH_StartScheduler>:
 * @brief  Start scheduler
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_StartScheduler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
    s_SchedulerRunning = TRUE;
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <SCH_StartScheduler+0x14>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	20000160 	.word	0x20000160

080009f4 <SCH_HandleScheduledTask>:
 * @brief  Function handles scheduled task and timer events
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
    if (s_SchedulerRunning)
 80009fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000b68 <SCH_HandleScheduledTask+0x174>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 80ad 	beq.w	8000b5e <SCH_HandleScheduledTask+0x16a>
    {
        // Task - Process by priority from highest (SCH_TASK_PRIO_3) to lowest (SCH_TASK_PRIO_0)
        for (int8_t priority = SCH_TASK_PRIO_3; priority >= SCH_TASK_PRIO_0; priority--)
 8000a04:	2303      	movs	r3, #3
 8000a06:	77fb      	strb	r3, [r7, #31]
 8000a08:	e05c      	b.n	8000ac4 <SCH_HandleScheduledTask+0xd0>
        {
            for (uint8_t index = 0; index < NUM_TASK_PENDING_ARRAYS; index++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	77bb      	strb	r3, [r7, #30]
 8000a0e:	e050      	b.n	8000ab2 <SCH_HandleScheduledTask+0xbe>
            {
                uint32_t pending = s_TaskPending[index];
 8000a10:	7fbb      	ldrb	r3, [r7, #30]
 8000a12:	4a56      	ldr	r2, [pc, #344]	@ (8000b6c <SCH_HandleScheduledTask+0x178>)
 8000a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a18:	60bb      	str	r3, [r7, #8]
                for (uint8_t bit = 0; bit < 32; bit++)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	777b      	strb	r3, [r7, #29]
 8000a1e:	e042      	b.n	8000aa6 <SCH_HandleScheduledTask+0xb2>
                {
                    if (pending & (1 << bit))
 8000a20:	7f7b      	ldrb	r3, [r7, #29]
 8000a22:	2201      	movs	r2, #1
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d036      	beq.n	8000aa0 <SCH_HandleScheduledTask+0xac>
                    {
                        uint8_t taskIndex = index * 32 + bit;
 8000a32:	7fbb      	ldrb	r3, [r7, #30]
 8000a34:	015b      	lsls	r3, r3, #5
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	7f7b      	ldrb	r3, [r7, #29]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	71fb      	strb	r3, [r7, #7]
                        if (taskIndex < s_NumOfTaskScheduled)
 8000a3e:	4b4c      	ldr	r3, [pc, #304]	@ (8000b70 <SCH_HandleScheduledTask+0x17c>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d22b      	bcs.n	8000aa0 <SCH_HandleScheduledTask+0xac>
                        {
                            SCH_TaskContextTypedef *pTaskContext = &s_TaskContext[taskIndex];
 8000a48:	79fa      	ldrb	r2, [r7, #7]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	4413      	add	r3, r2
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	4a48      	ldr	r2, [pc, #288]	@ (8000b74 <SCH_HandleScheduledTask+0x180>)
 8000a54:	4413      	add	r3, r2
 8000a56:	603b      	str	r3, [r7, #0]
                            if (pTaskContext->taskProperty.taskPriority == priority &&
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	7a5b      	ldrb	r3, [r3, #9]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d11c      	bne.n	8000aa0 <SCH_HandleScheduledTask+0xac>
                                pTaskContext->taskState == TASK_StateReady)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	781b      	ldrb	r3, [r3, #0]
                            if (pTaskContext->taskProperty.taskPriority == priority &&
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d118      	bne.n	8000aa0 <SCH_HandleScheduledTask+0xac>
                            {
                                s_TaskPending[index] &= ~(1 << bit);  // Clear bit
 8000a6e:	7fbb      	ldrb	r3, [r7, #30]
 8000a70:	4a3e      	ldr	r2, [pc, #248]	@ (8000b6c <SCH_HandleScheduledTask+0x178>)
 8000a72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a76:	7f7b      	ldrb	r3, [r7, #29]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	4619      	mov	r1, r3
 8000a82:	7fbb      	ldrb	r3, [r7, #30]
 8000a84:	400a      	ands	r2, r1
 8000a86:	4939      	ldr	r1, [pc, #228]	@ (8000b6c <SCH_HandleScheduledTask+0x178>)
 8000a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                pTaskContext->taskProperty.taskFunction();
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	4798      	blx	r3
                                // Async tasks, set state to Hold after execution
                                if (pTaskContext->taskProperty.taskType == SCH_TASK_ASYNC)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	7a1b      	ldrb	r3, [r3, #8]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d102      	bne.n	8000aa0 <SCH_HandleScheduledTask+0xac>
                                {
                                    pTaskContext->taskState = TASK_StateHold;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
                for (uint8_t bit = 0; bit < 32; bit++)
 8000aa0:	7f7b      	ldrb	r3, [r7, #29]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	777b      	strb	r3, [r7, #29]
 8000aa6:	7f7b      	ldrb	r3, [r7, #29]
 8000aa8:	2b1f      	cmp	r3, #31
 8000aaa:	d9b9      	bls.n	8000a20 <SCH_HandleScheduledTask+0x2c>
            for (uint8_t index = 0; index < NUM_TASK_PENDING_ARRAYS; index++)
 8000aac:	7fbb      	ldrb	r3, [r7, #30]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	77bb      	strb	r3, [r7, #30]
 8000ab2:	7fbb      	ldrb	r3, [r7, #30]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0ab      	beq.n	8000a10 <SCH_HandleScheduledTask+0x1c>
        for (int8_t priority = SCH_TASK_PRIO_3; priority >= SCH_TASK_PRIO_0; priority--)
 8000ab8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	77fb      	strb	r3, [r7, #31]
 8000ac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	da9e      	bge.n	8000a0a <SCH_HandleScheduledTask+0x16>
                }
            }
        }

        // Timer
        for (uint8_t index = 0; index < NUM_TIMER_PENDING_ARRAYS; index++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	773b      	strb	r3, [r7, #28]
 8000ad0:	e042      	b.n	8000b58 <SCH_HandleScheduledTask+0x164>
        {
            uint32_t pending = s_TimerPending[index];
 8000ad2:	7f3b      	ldrb	r3, [r7, #28]
 8000ad4:	4a28      	ldr	r2, [pc, #160]	@ (8000b78 <SCH_HandleScheduledTask+0x184>)
 8000ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ada:	617b      	str	r3, [r7, #20]
            for (uint8_t bit = 0; bit < 32; bit++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	76fb      	strb	r3, [r7, #27]
 8000ae0:	e034      	b.n	8000b4c <SCH_HandleScheduledTask+0x158>
            {
                if (pending & (1 << bit))
 8000ae2:	7efb      	ldrb	r3, [r7, #27]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	4013      	ands	r3, r2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d028      	beq.n	8000b46 <SCH_HandleScheduledTask+0x152>
                {
                    uint8_t timerIndex = index * 32 + bit;
 8000af4:	7f3b      	ldrb	r3, [r7, #28]
 8000af6:	015b      	lsls	r3, r3, #5
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	7efb      	ldrb	r3, [r7, #27]
 8000afc:	4413      	add	r3, r2
 8000afe:	74fb      	strb	r3, [r7, #19]
                    if (timerIndex < s_NumOfTimers)
 8000b00:	4b1e      	ldr	r3, [pc, #120]	@ (8000b7c <SCH_HandleScheduledTask+0x188>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	7cfa      	ldrb	r2, [r7, #19]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d21d      	bcs.n	8000b46 <SCH_HandleScheduledTask+0x152>
                    {
                        s_TimerPending[index] &= ~(1 << bit);  // Clear bit
 8000b0a:	7f3b      	ldrb	r3, [r7, #28]
 8000b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000b78 <SCH_HandleScheduledTask+0x184>)
 8000b0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b12:	7efb      	ldrb	r3, [r7, #27]
 8000b14:	2101      	movs	r1, #1
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	7f3b      	ldrb	r3, [r7, #28]
 8000b20:	400a      	ands	r2, r1
 8000b22:	4915      	ldr	r1, [pc, #84]	@ (8000b78 <SCH_HandleScheduledTask+0x184>)
 8000b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 8000b28:	7cfa      	ldrb	r2, [r7, #19]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <SCH_HandleScheduledTask+0x18c>)
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
                        if (pTimerContext->timerProperty.timerCallbackFunction)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	691b      	ldr	r3, [r3, #16]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <SCH_HandleScheduledTask+0x152>
                        {
                            pTimerContext->timerProperty.timerCallbackFunction();
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	4798      	blx	r3
            for (uint8_t bit = 0; bit < 32; bit++)
 8000b46:	7efb      	ldrb	r3, [r7, #27]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	76fb      	strb	r3, [r7, #27]
 8000b4c:	7efb      	ldrb	r3, [r7, #27]
 8000b4e:	2b1f      	cmp	r3, #31
 8000b50:	d9c7      	bls.n	8000ae2 <SCH_HandleScheduledTask+0xee>
        for (uint8_t index = 0; index < NUM_TIMER_PENDING_ARRAYS; index++)
 8000b52:	7f3b      	ldrb	r3, [r7, #28]
 8000b54:	3301      	adds	r3, #1
 8000b56:	773b      	strb	r3, [r7, #28]
 8000b58:	7f3b      	ldrb	r3, [r7, #28]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0b9      	beq.n	8000ad2 <SCH_HandleScheduledTask+0xde>
                    }
                }
            }
        }
    }
}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000160 	.word	0x20000160
 8000b6c:	20000394 	.word	0x20000394
 8000b70:	200002e4 	.word	0x200002e4
 8000b74:	20000164 	.word	0x20000164
 8000b78:	20000398 	.word	0x20000398
 8000b7c:	20000388 	.word	0x20000388
 8000b80:	200002e8 	.word	0x200002e8

08000b84 <LL_GPIO_IsOutputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	4013      	ands	r3, r2
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	bf0c      	ite	eq
 8000b9c:	2301      	moveq	r3, #1
 8000b9e:	2300      	movne	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	619a      	str	r2, [r3, #24]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	041a      	lsls	r2, r3, #16
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	619a      	str	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <toOBC_Init>:

#include "main.h"
#include "Macro/macro.h"
#include "gpio_state.h"

void toOBC_Init(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	GPIO_SetHigh(BUSY_GPIO_Port, BUSY_Pin);
 8000bec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <toOBC_Init+0x20>)
 8000bf2:	f7ff ffdc 	bl	8000bae <LL_GPIO_SetOutputPin>
	GPIO_SetHigh(READYSEND_GPIO_Port, READYSEND_Pin);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <toOBC_Init+0x20>)
 8000bfa:	f7ff ffd8 	bl	8000bae <LL_GPIO_SetOutputPin>
    toOBC_SetState(toOBC_IDLE);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f804 	bl	8000c0c <toOBC_SetState>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40020000 	.word	0x40020000

08000c0c <toOBC_SetState>:

void toOBC_SetState(toOBC_State_t state) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d833      	bhi.n	8000c84 <toOBC_SetState+0x78>
 8000c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c24 <toOBC_SetState+0x18>)
 8000c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c22:	bf00      	nop
 8000c24:	08000c35 	.word	0x08000c35
 8000c28:	08000c49 	.word	0x08000c49
 8000c2c:	08000c5d 	.word	0x08000c5d
 8000c30:	08000c71 	.word	0x08000c71
        case toOBC_ERROR:
            GPIO_SetLow(BUSY_GPIO_Port, BUSY_Pin);
 8000c34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c38:	4819      	ldr	r0, [pc, #100]	@ (8000ca0 <toOBC_SetState+0x94>)
 8000c3a:	f7ff ffc6 	bl	8000bca <LL_GPIO_ResetOutputPin>
            GPIO_SetLow(READYSEND_GPIO_Port, READYSEND_Pin);
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4817      	ldr	r0, [pc, #92]	@ (8000ca0 <toOBC_SetState+0x94>)
 8000c42:	f7ff ffc2 	bl	8000bca <LL_GPIO_ResetOutputPin>
            break;
 8000c46:	e027      	b.n	8000c98 <toOBC_SetState+0x8c>
        case toOBC_READYSEND:
            GPIO_SetLow(BUSY_GPIO_Port, BUSY_Pin);
 8000c48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c4c:	4814      	ldr	r0, [pc, #80]	@ (8000ca0 <toOBC_SetState+0x94>)
 8000c4e:	f7ff ffbc 	bl	8000bca <LL_GPIO_ResetOutputPin>
            GPIO_SetHigh(READYSEND_GPIO_Port, READYSEND_Pin);
 8000c52:	2101      	movs	r1, #1
 8000c54:	4812      	ldr	r0, [pc, #72]	@ (8000ca0 <toOBC_SetState+0x94>)
 8000c56:	f7ff ffaa 	bl	8000bae <LL_GPIO_SetOutputPin>
            break;
 8000c5a:	e01d      	b.n	8000c98 <toOBC_SetState+0x8c>
        case toOBC_BUSY:
            GPIO_SetHigh(BUSY_GPIO_Port, BUSY_Pin);
 8000c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c60:	480f      	ldr	r0, [pc, #60]	@ (8000ca0 <toOBC_SetState+0x94>)
 8000c62:	f7ff ffa4 	bl	8000bae <LL_GPIO_SetOutputPin>
            GPIO_SetLow(READYSEND_GPIO_Port, READYSEND_Pin);
 8000c66:	2101      	movs	r1, #1
 8000c68:	480d      	ldr	r0, [pc, #52]	@ (8000ca0 <toOBC_SetState+0x94>)
 8000c6a:	f7ff ffae 	bl	8000bca <LL_GPIO_ResetOutputPin>
            break;
 8000c6e:	e013      	b.n	8000c98 <toOBC_SetState+0x8c>
        case toOBC_IDLE:
            GPIO_SetHigh(BUSY_GPIO_Port, BUSY_Pin);
 8000c70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c74:	480a      	ldr	r0, [pc, #40]	@ (8000ca0 <toOBC_SetState+0x94>)
 8000c76:	f7ff ff9a 	bl	8000bae <LL_GPIO_SetOutputPin>
            GPIO_SetHigh(READYSEND_GPIO_Port, READYSEND_Pin);
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	4808      	ldr	r0, [pc, #32]	@ (8000ca0 <toOBC_SetState+0x94>)
 8000c7e:	f7ff ff96 	bl	8000bae <LL_GPIO_SetOutputPin>
            break;
 8000c82:	e009      	b.n	8000c98 <toOBC_SetState+0x8c>
        default:
            GPIO_SetLow(BUSY_GPIO_Port, BUSY_Pin);
 8000c84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <toOBC_SetState+0x94>)
 8000c8a:	f7ff ff9e 	bl	8000bca <LL_GPIO_ResetOutputPin>
            GPIO_SetLow(READYSEND_GPIO_Port, READYSEND_Pin);
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4803      	ldr	r0, [pc, #12]	@ (8000ca0 <toOBC_SetState+0x94>)
 8000c92:	f7ff ff9a 	bl	8000bca <LL_GPIO_ResetOutputPin>
            break;
 8000c96:	bf00      	nop
    }
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <toOBC_GetState>:

toOBC_State_t toOBC_GetState(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
    uint8_t busy_state = GPIO_IsOutHigh(BUSY_GPIO_Port, BUSY_Pin);
 8000caa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cae:	4819      	ldr	r0, [pc, #100]	@ (8000d14 <toOBC_GetState+0x70>)
 8000cb0:	f7ff ff68 	bl	8000b84 <LL_GPIO_IsOutputPinSet>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf14      	ite	ne
 8000cba:	2301      	movne	r3, #1
 8000cbc:	2300      	moveq	r3, #0
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	71fb      	strb	r3, [r7, #7]
    uint8_t readysend_state = GPIO_IsOutHigh(READYSEND_GPIO_Port, READYSEND_Pin);
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	4813      	ldr	r0, [pc, #76]	@ (8000d14 <toOBC_GetState+0x70>)
 8000cc6:	f7ff ff5d 	bl	8000b84 <LL_GPIO_IsOutputPinSet>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf14      	ite	ne
 8000cd0:	2301      	movne	r3, #1
 8000cd2:	2300      	moveq	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	71bb      	strb	r3, [r7, #6]

    if (busy_state == 0 && readysend_state == 0) {
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d104      	bne.n	8000ce8 <toOBC_GetState+0x44>
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d101      	bne.n	8000ce8 <toOBC_GetState+0x44>
        return toOBC_ERROR;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e010      	b.n	8000d0a <toOBC_GetState+0x66>
    } else if (busy_state == 0 && readysend_state == 1) {
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d104      	bne.n	8000cf8 <toOBC_GetState+0x54>
 8000cee:	79bb      	ldrb	r3, [r7, #6]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d101      	bne.n	8000cf8 <toOBC_GetState+0x54>
        return toOBC_READYSEND;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e008      	b.n	8000d0a <toOBC_GetState+0x66>
    } else if (busy_state == 1 && readysend_state == 0) {
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d104      	bne.n	8000d08 <toOBC_GetState+0x64>
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <toOBC_GetState+0x64>
        return toOBC_BUSY;
 8000d04:	2302      	movs	r3, #2
 8000d06:	e000      	b.n	8000d0a <toOBC_GetState+0x66>
    } else { // busy_state == 1 && readysend_state == 1
        return toOBC_IDLE;
 8000d08:	2303      	movs	r3, #3
    }
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40020000 	.word	0x40020000

08000d18 <CPROCESS_Init>:

void CPROCESS_Init(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    GPIO_SetHigh(CPROCESS_GPIO_Port, CPROCESS_Pin);
 8000d1c:	2140      	movs	r1, #64	@ 0x40
 8000d1e:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <CPROCESS_Init+0x10>)
 8000d20:	f7ff ff45 	bl	8000bae <LL_GPIO_SetOutputPin>
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021800 	.word	0x40021800

08000d2c <CPROCESS_SetState>:

void CPROCESS_SetState(CPROCESS_State_t state) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
    if (state == CPROCESS_FREE) {
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d104      	bne.n	8000d46 <CPROCESS_SetState+0x1a>
        GPIO_SetHigh(CPROCESS_GPIO_Port, CPROCESS_Pin);
 8000d3c:	2140      	movs	r1, #64	@ 0x40
 8000d3e:	4806      	ldr	r0, [pc, #24]	@ (8000d58 <CPROCESS_SetState+0x2c>)
 8000d40:	f7ff ff35 	bl	8000bae <LL_GPIO_SetOutputPin>
    } else { // CPROCESS_BUSY
        GPIO_SetLow(CPROCESS_GPIO_Port, CPROCESS_Pin);
    }
}
 8000d44:	e003      	b.n	8000d4e <CPROCESS_SetState+0x22>
        GPIO_SetLow(CPROCESS_GPIO_Port, CPROCESS_Pin);
 8000d46:	2140      	movs	r1, #64	@ 0x40
 8000d48:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <CPROCESS_SetState+0x2c>)
 8000d4a:	f7ff ff3e 	bl	8000bca <LL_GPIO_ResetOutputPin>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021800 	.word	0x40021800

08000d5c <LL_GPIO_SetOutputPin>:
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	619a      	str	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <LL_GPIO_ResetOutputPin>:
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	041a      	lsls	r2, r3, #16
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	619a      	str	r2, [r3, #24]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <BlinkLed_Task>:
 *                    Task List                  *
 *************************************************/


static void BlinkLed_Task(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
    static uint8_t ledState = 0;
    if (ledState == 0)
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <BlinkLed_Task+0x30>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d107      	bne.n	8000db4 <BlinkLed_Task+0x1c>
    {
    	LL_GPIO_SetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8000da4:	2110      	movs	r1, #16
 8000da6:	4809      	ldr	r0, [pc, #36]	@ (8000dcc <BlinkLed_Task+0x34>)
 8000da8:	f7ff ffd8 	bl	8000d5c <LL_GPIO_SetOutputPin>
        ledState = 1;
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <BlinkLed_Task+0x30>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
    else
    {
    	LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
        ledState = 0;
    }
}
 8000db2:	e006      	b.n	8000dc2 <BlinkLed_Task+0x2a>
    	LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8000db4:	2110      	movs	r1, #16
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <BlinkLed_Task+0x34>)
 8000db8:	f7ff ffde 	bl	8000d78 <LL_GPIO_ResetOutputPin>
        ledState = 0;
 8000dbc:	4b02      	ldr	r3, [pc, #8]	@ (8000dc8 <BlinkLed_Task+0x30>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200003aa 	.word	0x200003aa
 8000dcc:	40020c00 	.word	0x40020c00

08000dd0 <HelloWorld_Task>:

static void HelloWorld_Task(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
//	LOG("HelloWorld!");
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <CliProcess_Task>:

static uint8_t rx_byte;
static uint8_t inited = E_ERROR;

static void CliProcess_Task(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	if(inited == E_ERROR){
 8000de4:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <CliProcess_Task+0x2c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d107      	bne.n	8000dfc <CliProcess_Task+0x1c>
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <CliProcess_Task+0x30>)
 8000df0:	4808      	ldr	r0, [pc, #32]	@ (8000e14 <CliProcess_Task+0x34>)
 8000df2:	f008 fc1e 	bl	8009632 <HAL_UART_Receive_IT>
        inited = E_OK;
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <CliProcess_Task+0x2c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
	}
    embeddedCliProcess(getCliPointer());
 8000dfc:	f001 fae6 	bl	80023cc <getCliPointer>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fbfb 	bl	80025fe <embeddedCliProcess>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000050 	.word	0x20000050
 8000e10:	200003a9 	.word	0x200003a9
 8000e14:	20001a98 	.word	0x20001a98

08000e18 <MINProcess_Task>:

static void MINProcess_Task(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	MIN_Processing();
 8000e1c:	f002 ff4c 	bl	8003cb8 <MIN_Processing>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <HAL_UART_RxCpltCallback+0x38>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d10d      	bne.n	8000e52 <HAL_UART_RxCpltCallback+0x2e>
    {
    	embeddedCliReceiveChar(getCliPointer(), (char)rx_byte);
 8000e36:	f001 fac9 	bl	80023cc <getCliPointer>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <HAL_UART_RxCpltCallback+0x3c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4610      	mov	r0, r2
 8000e44:	f001 fbb8 	bl	80025b8 <embeddedCliReceiveChar>
        HAL_UART_Receive_IT(huart, &rx_byte, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4905      	ldr	r1, [pc, #20]	@ (8000e60 <HAL_UART_RxCpltCallback+0x3c>)
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f008 fbf0 	bl	8009632 <HAL_UART_Receive_IT>
    }
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40011000 	.word	0x40011000
 8000e60:	200003a9 	.word	0x200003a9

08000e64 <SchedulerTasks_Create>:
 *************************************************/

#define NUM_SCHEDULER_TASKS (sizeof(schedulerTasks) / sizeof(schedulerTasks[0]))

void SchedulerTasks_Create(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUM_SCHEDULER_TASKS; i++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	e029      	b.n	8000ec4 <SchedulerTasks_Create+0x60>
        SCH_TASK_CreateTask(&schedulerTasks[i].taskHandle, &schedulerTasks[i].taskProperty);
 8000e70:	79fa      	ldrb	r2, [r7, #7]
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4a16      	ldr	r2, [pc, #88]	@ (8000ed4 <SchedulerTasks_Create+0x70>)
 8000e7c:	1898      	adds	r0, r3, r2
 8000e7e:	79fa      	ldrb	r2, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4a12      	ldr	r2, [pc, #72]	@ (8000ed4 <SchedulerTasks_Create+0x70>)
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f7ff fca2 	bl	80007d8 <SCH_TASK_CreateTask>
        if (schedulerTasks[i].taskProperty.taskType == SCH_TASK_ASYNC) {
 8000e94:	79fa      	ldrb	r2, [r7, #7]
 8000e96:	490f      	ldr	r1, [pc, #60]	@ (8000ed4 <SchedulerTasks_Create+0x70>)
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d109      	bne.n	8000ebe <SchedulerTasks_Create+0x5a>
            asyncTaskHandle = schedulerTasks[i].taskHandle;
 8000eaa:	79fa      	ldrb	r2, [r7, #7]
 8000eac:	4909      	ldr	r1, [pc, #36]	@ (8000ed4 <SchedulerTasks_Create+0x70>)
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <SchedulerTasks_Create+0x74>)
 8000ebc:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_SCHEDULER_TASKS; i++) {
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d9d2      	bls.n	8000e70 <SchedulerTasks_Create+0xc>
        }
    }
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	200003a8 	.word	0x200003a8

08000edc <CSP_QUADSPI_Init>:
uint8_t QSPI_Configuration(void);

/* QUADSPI init function */

uint8_t CSP_QUADSPI_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
//        return HAL_ERROR;
//    }
//
//    MX_QUADSPI_Init();

    if (QSPI_ResetChip() != HAL_OK) {
 8000ee0:	f000 f92a 	bl	8001138 <QSPI_ResetChip>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <CSP_QUADSPI_Init+0x12>
        return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e018      	b.n	8000f20 <CSP_QUADSPI_Init+0x44>
    }

    HAL_Delay(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f006 fa0c 	bl	800730c <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000ef4:	f000 f816 	bl	8000f24 <QSPI_AutoPollingMemReady>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <CSP_QUADSPI_Init+0x26>
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <CSP_QUADSPI_Init+0x44>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 8000f02:	f000 f847 	bl	8000f94 <QSPI_WriteEnable>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <CSP_QUADSPI_Init+0x34>

        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e007      	b.n	8000f20 <CSP_QUADSPI_Init+0x44>
    }

    if (QSPI_Configuration() != HAL_OK) {
 8000f10:	f000 f88a 	bl	8001028 <QSPI_Configuration>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <CSP_QUADSPI_Init+0x42>
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <CSP_QUADSPI_Init+0x44>
    }

    return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <QSPI_AutoPollingMemReady>:

    return HAL_OK;
}

uint8_t QSPI_AutoPollingMemReady(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	@ 0x50
 8000f28:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000f30:	2305      	movs	r3, #5
 8000f32:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000f3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DummyCycles = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	64fb      	str	r3, [r7, #76]	@ 0x4c

    sConfig.Match = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000f62:	2310      	movs	r3, #16
 8000f64:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000f66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f6a:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f6c:	463a      	mov	r2, r7
 8000f6e:	f107 0118 	add.w	r1, r7, #24
 8000f72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f76:	4806      	ldr	r0, [pc, #24]	@ (8000f90 <QSPI_AutoPollingMemReady+0x6c>)
 8000f78:	f006 ff4f 	bl	8007e1a <HAL_QSPI_AutoPolling>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3750      	adds	r7, #80	@ 0x50
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20001a4c 	.word	0x20001a4c

08000f94 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	@ 0x50
 8000f98:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DummyCycles = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4816      	ldr	r0, [pc, #88]	@ (8001024 <QSPI_WriteEnable+0x90>)
 8000fcc:	f006 fd8e 	bl	8007aec <HAL_QSPI_Command>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e01f      	b.n	800101a <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000fea:	2310      	movs	r3, #16
 8000fec:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000fee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ff2:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000ff8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000ffe:	463a      	mov	r2, r7
 8001000:	f107 0118 	add.w	r1, r7, #24
 8001004:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001008:	4806      	ldr	r0, [pc, #24]	@ (8001024 <QSPI_WriteEnable+0x90>)
 800100a:	f006 ff06 	bl	8007e1a <HAL_QSPI_AutoPolling>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3750      	adds	r7, #80	@ 0x50
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20001a4c 	.word	0x20001a4c

08001028 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b092      	sub	sp, #72	@ 0x48
 800102c:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800102e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001032:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
 8001034:	2385      	movs	r3, #133	@ 0x85
 8001036:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8001040:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DummyCycles = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800104e:	2300      	movs	r3, #0
 8001050:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001052:	2300      	movs	r3, #0
 8001054:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.NbData = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001062:	4619      	mov	r1, r3
 8001064:	4833      	ldr	r0, [pc, #204]	@ (8001134 <QSPI_Configuration+0x10c>)
 8001066:	f006 fd41 	bl	8007aec <HAL_QSPI_Command>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <QSPI_Configuration+0x4c>
        != HAL_OK) {
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e05b      	b.n	800112c <QSPI_Configuration+0x104>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800107a:	4619      	mov	r1, r3
 800107c:	482d      	ldr	r0, [pc, #180]	@ (8001134 <QSPI_Configuration+0x10c>)
 800107e:	f006 fe2a 	bl	8007cd6 <HAL_QSPI_Receive>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <QSPI_Configuration+0x64>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e04f      	b.n	800112c <QSPI_Configuration+0x104>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 800108c:	f7ff ff82 	bl	8000f94 <QSPI_WriteEnable>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <QSPI_Configuration+0x72>

        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e048      	b.n	800112c <QSPI_Configuration+0x104>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	b25b      	sxtb	r3, r3
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	b25a      	sxtb	r2, r3
 80010a4:	23f0      	movs	r3, #240	@ 0xf0
 80010a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	643b      	str	r3, [r7, #64]	@ 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010b2:	fab3 f383 	clz	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	230a      	movs	r3, #10
 80010bc:	408b      	lsls	r3, r1
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	71fb      	strb	r3, [r7, #7]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010cc:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80010d6:	2300      	movs	r3, #0
 80010d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80010da:	2300      	movs	r3, #0
 80010dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 80010de:	2381      	movs	r3, #129	@ 0x81
 80010e0:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80010e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DummyCycles = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
    sCommand.NbData = 1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	@ (8001134 <QSPI_Configuration+0x10c>)
 8001100:	f006 fcf4 	bl	8007aec <HAL_QSPI_Command>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <QSPI_Configuration+0xe6>
        != HAL_OK) {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <QSPI_Configuration+0x104>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001114:	4619      	mov	r1, r3
 8001116:	4807      	ldr	r0, [pc, #28]	@ (8001134 <QSPI_Configuration+0x10c>)
 8001118:	f006 fd46 	bl	8007ba8 <HAL_QSPI_Transmit>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <QSPI_Configuration+0x102>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
 8001122:	f005 fd83 	bl	8006c2c <Error_Handler>
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <QSPI_Configuration+0x104>
    }
    return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3748      	adds	r7, #72	@ 0x48
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20001a4c 	.word	0x20001a4c

08001138 <QSPI_ResetChip>:
    }
    return HAL_OK;
}

uint8_t QSPI_ResetChip()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b090      	sub	sp, #64	@ 0x40
 800113c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001142:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001146:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8001148:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800114c:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800115a:	2300      	movs	r3, #0
 800115c:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 800115e:	2366      	movs	r3, #102	@ 0x66
 8001160:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 800116a:	2300      	movs	r3, #0
 800116c:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DummyCycles = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001178:	4619      	mov	r1, r3
 800117a:	481d      	ldr	r0, [pc, #116]	@ (80011f0 <QSPI_ResetChip+0xb8>)
 800117c:	f006 fcb6 	bl	8007aec <HAL_QSPI_Command>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e02e      	b.n	80011e8 <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 800118a:	2300      	movs	r3, #0
 800118c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800118e:	e003      	b.n	8001198 <QSPI_ResetChip+0x60>
        __NOP();
 8001190:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 8001192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001194:	3301      	adds	r3, #1
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800119a:	2b2e      	cmp	r3, #46	@ 0x2e
 800119c:	d9f8      	bls.n	8001190 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800119e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a2:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80011a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a8:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
 80011ba:	2399      	movs	r3, #153	@ 0x99
 80011bc:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DummyCycles = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <QSPI_ResetChip+0xb8>)
 80011d8:	f006 fc88 	bl	8007aec <HAL_QSPI_Command>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3740      	adds	r7, #64	@ 0x40
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20001a4c 	.word	0x20001a4c

080011f4 <CSP_QSPI_Read>:
  return HAL_OK;
}


uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b092      	sub	sp, #72	@ 0x48
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001200:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001206:	23eb      	movs	r3, #235	@ 0xeb
 8001208:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800120a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001210:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001214:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800121a:	2300      	movs	r3, #0
 800121c:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800121e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001222:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8001224:	230a      	movs	r3, #10
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = Size;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001230:	2300      	movs	r3, #0
 8001232:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001234:	2300      	movs	r3, #0
 8001236:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001240:	4619      	mov	r1, r3
 8001242:	4816      	ldr	r0, [pc, #88]	@ (800129c <CSP_QSPI_Read+0xa8>)
 8001244:	f006 fc52 	bl	8007aec <HAL_QSPI_Command>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <CSP_QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e01f      	b.n	8001292 <CSP_QSPI_Read+0x9e>
  }

  /* Set S# timing for Read command */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 8001252:	4b12      	ldr	r3, [pc, #72]	@ (800129c <CSP_QSPI_Read+0xa8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <CSP_QSPI_Read+0xa8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001264:	605a      	str	r2, [r3, #4]

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800126a:	68f9      	ldr	r1, [r7, #12]
 800126c:	480b      	ldr	r0, [pc, #44]	@ (800129c <CSP_QSPI_Read+0xa8>)
 800126e:	f006 fd32 	bl	8007cd6 <HAL_QSPI_Receive>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <CSP_QSPI_Read+0x88>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e00a      	b.n	8001292 <CSP_QSPI_Read+0x9e>
  }

  /* Restore S# timing for nonRead commands */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <CSP_QSPI_Read+0xa8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001286:	4b05      	ldr	r3, [pc, #20]	@ (800129c <CSP_QSPI_Read+0xa8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 62a0 	orr.w	r2, r2, #1280	@ 0x500
 800128e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3748      	adds	r7, #72	@ 0x48
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20001a4c 	.word	0x20001a4c

080012a0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll ISR          FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d101      	bne.n	80012b8 <LL_USART_IsActiveFlag_FE+0x18>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <LL_USART_IsActiveFlag_FE+0x1a>
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll ISR          NE            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d101      	bne.n	80012de <LL_USART_IsActiveFlag_NE+0x18>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <LL_USART_IsActiveFlag_NE+0x1a>
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d101      	bne.n	8001304 <LL_USART_IsActiveFlag_ORE+0x18>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <LL_USART_IsActiveFlag_ORE+0x1a>
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	2b20      	cmp	r3, #32
 8001324:	d101      	bne.n	800132a <LL_USART_IsActiveFlag_RXNE+0x18>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <LL_USART_IsActiveFlag_RXNE+0x1a>
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001348:	2b80      	cmp	r3, #128	@ 0x80
 800134a:	d101      	bne.n	8001350 <LL_USART_IsActiveFlag_TXE+0x18>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2202      	movs	r2, #2
 800136a:	621a      	str	r2, [r3, #32]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NCF           LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2204      	movs	r2, #4
 8001384:	621a      	str	r2, [r3, #32]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2208      	movs	r2, #8
 800139e:	621a      	str	r2, [r3, #32]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	@ 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	e853 3f00 	ldrex	r3, [r3]
 80013be:	60bb      	str	r3, [r7, #8]
   return(result);
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f043 0320 	orr.w	r3, r3, #32
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	61ba      	str	r2, [r7, #24]
 80013ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013d0:	6979      	ldr	r1, [r7, #20]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	e841 2300 	strex	r3, r2, [r1]
 80013d8:	613b      	str	r3, [r7, #16]
   return(result);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e9      	bne.n	80013b4 <LL_USART_EnableIT_RXNE+0x8>
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b089      	sub	sp, #36	@ 0x24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	e853 3f00 	ldrex	r3, [r3]
 8001400:	60bb      	str	r3, [r7, #8]
   return(result);
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	61ba      	str	r2, [r7, #24]
 8001410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001412:	6979      	ldr	r1, [r7, #20]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	e841 2300 	strex	r3, r2, [r1]
 800141a:	613b      	str	r3, [r7, #16]
   return(result);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1e9      	bne.n	80013f6 <LL_USART_EnableIT_TXE+0x8>
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	3724      	adds	r7, #36	@ 0x24
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	@ 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	e853 3f00 	ldrex	r3, [r3]
 8001442:	60bb      	str	r3, [r7, #8]
   return(result);
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	61ba      	str	r2, [r7, #24]
 8001452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001454:	6979      	ldr	r1, [r7, #20]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	e841 2300 	strex	r3, r2, [r1]
 800145c:	613b      	str	r3, [r7, #16]
   return(result);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e9      	bne.n	8001438 <LL_USART_DisableIT_TXE+0x8>
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0320 	and.w	r3, r3, #32
 8001482:	2b20      	cmp	r3, #32
 8001484:	d101      	bne.n	800148a <LL_USART_IsEnabledIT_RXNE+0x18>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <LL_USART_IsEnabledIT_RXNE+0x1a>
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a8:	2b80      	cmp	r3, #128	@ 0x80
 80014aa:	d101      	bne.n	80014b0 <LL_USART_IsEnabledIT_TXE+0x18>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <LL_USART_IsEnabledIT_TXE+0x1a>
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ca:	b2db      	uxtb	r3, r3
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80014e4:	78fa      	ldrb	r2, [r7, #3]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <UART_Driver_Get>:
/*************************************************
 *                  HELPER                       *
 *************************************************/

static UART_Driver_t *UART_Driver_Get(USART_TypeDef *uart)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_DRIVER_COUNT; i++)
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	e013      	b.n	800152e <UART_Driver_Get+0x36>
    {
        if (uart_drivers[i].uart == uart)
 8001506:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <UART_Driver_Get+0x4c>)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2164      	movs	r1, #100	@ 0x64
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	4413      	add	r3, r2
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	d106      	bne.n	8001528 <UART_Driver_Get+0x30>
        {
            return &uart_drivers[i];
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2264      	movs	r2, #100	@ 0x64
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <UART_Driver_Get+0x4c>)
 8001524:	4413      	add	r3, r2
 8001526:	e006      	b.n	8001536 <UART_Driver_Get+0x3e>
    for (int i = 0; i < UART_DRIVER_COUNT; i++)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3301      	adds	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	dde8      	ble.n	8001506 <UART_Driver_Get+0xe>
        }
    }
    return NULL;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000054 	.word	0x20000054

08001548 <UART_Driver_Init>:
/*************************************************
 *                    Init                       *
 *************************************************/

Std_ReturnType UART_Driver_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af02      	add	r7, sp, #8
    RingBuffer_Create(&uart_drivers[0].rx_buffer, 1, "UART6_RX", uart6_rx_data, UART6_BUFFER_SIZE);
 800154e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <UART_Driver_Init+0x38>)
 8001556:	4a0b      	ldr	r2, [pc, #44]	@ (8001584 <UART_Driver_Init+0x3c>)
 8001558:	2101      	movs	r1, #1
 800155a:	480b      	ldr	r0, [pc, #44]	@ (8001588 <UART_Driver_Init+0x40>)
 800155c:	f003 f8dc 	bl	8004718 <RingBuffer_Create>
    RingBuffer_Create(&uart_drivers[0].tx_buffer, 2, "UART6_TX", uart6_tx_data, UART6_BUFFER_SIZE);
 8001560:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <UART_Driver_Init+0x44>)
 8001568:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <UART_Driver_Init+0x48>)
 800156a:	2102      	movs	r1, #2
 800156c:	4809      	ldr	r0, [pc, #36]	@ (8001594 <UART_Driver_Init+0x4c>)
 800156e:	f003 f8d3 	bl	8004718 <RingBuffer_Create>

//    LL_USART_EnableIT_ERROR(USART6);
    LL_USART_EnableIT_RXNE(USART6);
 8001572:	4809      	ldr	r0, [pc, #36]	@ (8001598 <UART_Driver_Init+0x50>)
 8001574:	f7ff ff1a 	bl	80013ac <LL_USART_EnableIT_RXNE>

    return E_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200003ac 	.word	0x200003ac
 8001584:	0800ce54 	.word	0x0800ce54
 8001588:	20000058 	.word	0x20000058
 800158c:	200007ac 	.word	0x200007ac
 8001590:	0800ce60 	.word	0x0800ce60
 8001594:	20000088 	.word	0x20000088
 8001598:	40011400 	.word	0x40011400

0800159c <UART_Driver_Read>:
/*************************************************
 *                     API                       *
 *************************************************/

int UART_Driver_Read(USART_TypeDef *uart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ffa7 	bl	80014f8 <UART_Driver_Get>
 80015aa:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <UART_Driver_Read+0x1c>
        return -1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e00e      	b.n	80015d6 <UART_Driver_Read+0x3a>

    RingBufElement data;
    if (RingBuffer_Get(&driver->rx_buffer, &data))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3304      	adds	r3, #4
 80015bc:	f107 020b 	add.w	r2, r7, #11
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 f921 	bl	800480a <RingBuffer_Get>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <UART_Driver_Read+0x36>
    {
        return data;
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	e001      	b.n	80015d6 <UART_Driver_Read+0x3a>
    }
    return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <UART_Driver_Write>:

void UART_Driver_Write(USART_TypeDef *uart, uint8_t data)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	460b      	mov	r3, r1
 80015e8:	70fb      	strb	r3, [r7, #3]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ff84 	bl	80014f8 <UART_Driver_Get>
 80015f0:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d011      	beq.n	800161c <UART_Driver_Write+0x3e>
        return;

    while (!RingBuffer_Put(&driver->tx_buffer, data))
 80015f8:	bf00      	nop
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3334      	adds	r3, #52	@ 0x34
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f003 f8bb 	bl	800477e <RingBuffer_Put>
 8001608:	4603      	mov	r3, r0
 800160a:	f083 0301 	eor.w	r3, r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f2      	bne.n	80015fa <UART_Driver_Write+0x1c>
    {
        // vTaskDelay(pdMS_TO_TICKS(1));
    }
    LL_USART_EnableIT_TXE(uart);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff feea 	bl	80013ee <LL_USART_EnableIT_TXE>
 800161a:	e000      	b.n	800161e <UART_Driver_Write+0x40>
        return;
 800161c:	bf00      	nop
}
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <UART_Driver_IsDataAvailable>:
        str++;
    }
}

_Bool UART_Driver_IsDataAvailable(USART_TypeDef *uart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff63 	bl	80014f8 <UART_Driver_Get>
 8001632:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <UART_Driver_IsDataAvailable+0x1a>
        return false;
 800163a:	2300      	movs	r3, #0
 800163c:	e005      	b.n	800164a <UART_Driver_IsDataAvailable+0x26>

    return RingBuffer_IsDataAvailable(&driver->rx_buffer);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3304      	adds	r3, #4
 8001642:	4618      	mov	r0, r3
 8001644:	f003 f95e 	bl	8004904 <RingBuffer_IsDataAvailable>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <UART_Driver_TXNumFreeSlots>:

uint16_t UART_Driver_TXNumFreeSlots(USART_TypeDef *uart)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ff4c 	bl	80014f8 <UART_Driver_Get>
 8001660:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <UART_Driver_TXNumFreeSlots+0x1a>
        return 0;
 8001668:	2300      	movs	r3, #0
 800166a:	e006      	b.n	800167a <UART_Driver_TXNumFreeSlots+0x28>

    return (uint16_t)RingBuffer_NumFreeSlots(&driver->tx_buffer);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3334      	adds	r3, #52	@ 0x34
 8001670:	4618      	mov	r0, r3
 8001672:	f003 f90b 	bl	800488c <RingBuffer_NumFreeSlots>
 8001676:	4603      	mov	r3, r0
 8001678:	bf00      	nop
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <UART_Driver_ISR>:
    UART_Driver_FlushRx(uart);
    UART_Driver_FlushTx(uart);
}

void UART_Driver_ISR(USART_TypeDef *uart)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ff34 	bl	80014f8 <UART_Driver_Get>
 8001690:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d053      	beq.n	8001740 <UART_Driver_ISR+0xbe>
        return;

    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) &&
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fe3a 	bl	8001312 <LL_USART_IsActiveFlag_RXNE>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d02c      	beq.n	80016fe <UART_Driver_ISR+0x7c>
        (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fee4 	bl	8001472 <LL_USART_IsEnabledIT_RXNE>
 80016aa:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) &&
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d026      	beq.n	80016fe <UART_Driver_ISR+0x7c>
    {
        uint8_t data = LL_USART_ReceiveData8(uart);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff04 	bl	80014be <LL_USART_ReceiveData8>
 80016b6:	4603      	mov	r3, r0
 80016b8:	72fb      	strb	r3, [r7, #11]

        if (LL_USART_IsActiveFlag_ORE(uart))
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fe16 	bl	80012ec <LL_USART_IsActiveFlag_ORE>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <UART_Driver_ISR+0x4a>
        {
            LL_USART_ClearFlag_ORE(uart);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fe63 	bl	8001392 <LL_USART_ClearFlag_ORE>
        }
        if (LL_USART_IsActiveFlag_FE(uart))
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fde7 	bl	80012a0 <LL_USART_IsActiveFlag_FE>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <UART_Driver_ISR+0x5c>
        {
            LL_USART_ClearFlag_FE(uart);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fe40 	bl	800135e <LL_USART_ClearFlag_FE>
        }
        if (LL_USART_IsActiveFlag_NE(uart))
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fdf1 	bl	80012c6 <LL_USART_IsActiveFlag_NE>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d002      	beq.n	80016f0 <UART_Driver_ISR+0x6e>
        {
            LL_USART_ClearFlag_NE(uart);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fe44 	bl	8001378 <LL_USART_ClearFlag_NE>
        }
        RingBuffer_Put(&driver->rx_buffer, data);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3304      	adds	r3, #4
 80016f4:	7afa      	ldrb	r2, [r7, #11]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 f840 	bl	800477e <RingBuffer_Put>
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fe1a 	bl	8001338 <LL_USART_IsActiveFlag_TXE>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01b      	beq.n	8001742 <UART_Driver_ISR+0xc0>
        (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fec4 	bl	8001498 <LL_USART_IsEnabledIT_TXE>
 8001710:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d015      	beq.n	8001742 <UART_Driver_ISR+0xc0>
    {
        uint8_t tx_data;
        if (RingBuffer_Get(&driver->tx_buffer, &tx_data))
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3334      	adds	r3, #52	@ 0x34
 800171a:	f107 020a 	add.w	r2, r7, #10
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f872 	bl	800480a <RingBuffer_Get>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <UART_Driver_ISR+0xb6>
        {
            LL_USART_TransmitData8(uart, tx_data);
 800172c:	7abb      	ldrb	r3, [r7, #10]
 800172e:	4619      	mov	r1, r3
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fed1 	bl	80014d8 <LL_USART_TransmitData8>
 8001736:	e004      	b.n	8001742 <UART_Driver_ISR+0xc0>
        }
        else
        {
            LL_USART_DisableIT_TXE(uart);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fe79 	bl	8001430 <LL_USART_DisableIT_TXE>
 800173e:	e000      	b.n	8001742 <UART_Driver_ISR+0xc0>
        return;
 8001740:	bf00      	nop
        }
    }
}
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <UpdateCRC16_XMODEM>:
#define SPI_RAM_SIZE  (10 * 1024)

extern uint8_t _schunk_data[];
extern uint8_t _echunk_data[];

static uint16_t UpdateCRC16_XMODEM(uint16_t crc, uint8_t byte) {
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	460a      	mov	r2, r1
 8001752:	80fb      	strh	r3, [r7, #6]
 8001754:	4613      	mov	r3, r2
 8001756:	717b      	strb	r3, [r7, #5]
    const uint16_t polynomial = 0x1021; // CRC16 XMODEM
 8001758:	f241 0321 	movw	r3, #4129	@ 0x1021
 800175c:	81bb      	strh	r3, [r7, #12]
    crc ^= (uint16_t)byte << 8;
 800175e:	797b      	ldrb	r3, [r7, #5]
 8001760:	b21b      	sxth	r3, r3
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	b21a      	sxth	r2, r3
 8001766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176a:	4053      	eors	r3, r2
 800176c:	b21b      	sxth	r3, r3
 800176e:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e013      	b.n	800179e <UpdateCRC16_XMODEM+0x56>
        if (crc & 0x8000) {
 8001776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177a:	2b00      	cmp	r3, #0
 800177c:	da09      	bge.n	8001792 <UpdateCRC16_XMODEM+0x4a>
            crc = (crc << 1) ^ polynomial;
 800177e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	b21a      	sxth	r2, r3
 8001786:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800178a:	4053      	eors	r3, r2
 800178c:	b21b      	sxth	r3, r3
 800178e:	80fb      	strh	r3, [r7, #6]
 8001790:	e002      	b.n	8001798 <UpdateCRC16_XMODEM+0x50>
        } else {
            crc <<= 1;
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	3301      	adds	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	2b07      	cmp	r3, #7
 80017a2:	d9e8      	bls.n	8001776 <UpdateCRC16_XMODEM+0x2e>
        }
    }
    return crc;
 80017a4:	88fb      	ldrh	r3, [r7, #6]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <dump_buffer>:

void dump_buffer(EmbeddedCli *cli, const char *buffer, size_t size) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b09e      	sub	sp, #120	@ 0x78
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
    char line[80];
    const uint32_t bytes_per_line = 16;
 80017c0:	2310      	movs	r3, #16
 80017c2:	667b      	str	r3, [r7, #100]	@ 0x64

    for (size_t i = 0; i < size; i += bytes_per_line) {
 80017c4:	2300      	movs	r3, #0
 80017c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80017c8:	e082      	b.n	80018d0 <dump_buffer+0x11c>
        snprintf(line, sizeof(line), "%04X: ", (unsigned int)i);
 80017ca:	f107 0010 	add.w	r0, r7, #16
 80017ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017d0:	4a44      	ldr	r2, [pc, #272]	@ (80018e4 <dump_buffer+0x130>)
 80017d2:	2150      	movs	r1, #80	@ 0x50
 80017d4:	f00a f9fe 	bl	800bbd4 <sniprintf>
        char *ptr = line + strlen(line);
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fd21 	bl	8000224 <strlen>
 80017e2:	4602      	mov	r2, r0
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4413      	add	r3, r2
 80017ea:	673b      	str	r3, [r7, #112]	@ 0x70

        for (size_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 80017ec:	2300      	movs	r3, #0
 80017ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80017f0:	e015      	b.n	800181e <dump_buffer+0x6a>
            snprintf(ptr, sizeof(line) - (ptr - line), "%02X ", (unsigned char)buffer[i + j]);
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f1c3 0150 	rsb	r1, r3, #80	@ 0x50
 80017fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001802:	4413      	add	r3, r2
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4a37      	ldr	r2, [pc, #220]	@ (80018e8 <dump_buffer+0x134>)
 800180c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800180e:	f00a f9e1 	bl	800bbd4 <sniprintf>
            ptr += 3;
 8001812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001814:	3303      	adds	r3, #3
 8001816:	673b      	str	r3, [r7, #112]	@ 0x70
        for (size_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 8001818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800181a:	3301      	adds	r3, #1
 800181c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800181e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001822:	429a      	cmp	r2, r3
 8001824:	d20b      	bcs.n	800183e <dump_buffer+0x8a>
 8001826:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800182a:	4413      	add	r3, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	429a      	cmp	r2, r3
 8001830:	d8df      	bhi.n	80017f2 <dump_buffer+0x3e>
        }

        while (ptr < line + 3 * bytes_per_line + 6) {
 8001832:	e004      	b.n	800183e <dump_buffer+0x8a>
            *ptr++ = ' ';
 8001834:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	673a      	str	r2, [r7, #112]	@ 0x70
 800183a:	2220      	movs	r2, #32
 800183c:	701a      	strb	r2, [r3, #0]
        while (ptr < line + 3 * bytes_per_line + 6) {
 800183e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	3306      	adds	r3, #6
 8001848:	f107 0210 	add.w	r2, r7, #16
 800184c:	4413      	add	r3, r2
 800184e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001850:	429a      	cmp	r2, r3
 8001852:	d3ef      	bcc.n	8001834 <dump_buffer+0x80>
        }

        *ptr++ = '|';
 8001854:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	673a      	str	r2, [r7, #112]	@ 0x70
 800185a:	227c      	movs	r2, #124	@ 0x7c
 800185c:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 800185e:	2300      	movs	r3, #0
 8001860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001862:	e01b      	b.n	800189c <dump_buffer+0xe8>
            char c = buffer[i + j];
 8001864:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001866:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001868:	4413      	add	r3, r2
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	4413      	add	r3, r2
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            *ptr++ = (c >= 32 && c <= 126) ? c : '.';
 8001874:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001878:	2b1f      	cmp	r3, #31
 800187a:	d906      	bls.n	800188a <dump_buffer+0xd6>
 800187c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001880:	2b7e      	cmp	r3, #126	@ 0x7e
 8001882:	d802      	bhi.n	800188a <dump_buffer+0xd6>
 8001884:	f897 1063 	ldrb.w	r1, [r7, #99]	@ 0x63
 8001888:	e000      	b.n	800188c <dump_buffer+0xd8>
 800188a:	212e      	movs	r1, #46	@ 0x2e
 800188c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	673a      	str	r2, [r7, #112]	@ 0x70
 8001892:	460a      	mov	r2, r1
 8001894:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < bytes_per_line && (i + j) < size; j++) {
 8001896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001898:	3301      	adds	r3, #1
 800189a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800189c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800189e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d205      	bcs.n	80018b0 <dump_buffer+0xfc>
 80018a4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80018a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018a8:	4413      	add	r3, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8d9      	bhi.n	8001864 <dump_buffer+0xb0>
        }
        *ptr = '\0';
 80018b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]

        embeddedCliPrint(cli, line);
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	4619      	mov	r1, r3
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 ff2f 	bl	8002720 <embeddedCliPrint>
        HAL_Delay(1);// Nhường CPU
 80018c2:	2001      	movs	r0, #1
 80018c4:	f005 fd22 	bl	800730c <HAL_Delay>
    for (size_t i = 0; i < size; i += bytes_per_line) {
 80018c8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80018ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018cc:	4413      	add	r3, r2
 80018ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80018d0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f4ff af78 	bcc.w	80017ca <dump_buffer+0x16>
    }
}
 80018da:	bf00      	nop
 80018dc:	bf00      	nop
 80018de:	3778      	adds	r7, #120	@ 0x78
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	0800d060 	.word	0x0800d060
 80018e8:	0800d068 	.word	0x0800d068

080018ec <CMD_ClearCLI>:
/*************************************************
 *             Command List Function             *
 *************************************************/
static void CMD_ClearCLI(EmbeddedCli *cli, char *args, void *context) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "\33[2J");
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4a07      	ldr	r2, [pc, #28]	@ (800191c <CMD_ClearCLI+0x30>)
 80018fe:	210a      	movs	r1, #10
 8001900:	4618      	mov	r0, r3
 8001902:	f00a f967 	bl	800bbd4 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 ff07 	bl	8002720 <embeddedCliPrint>
}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	0800d070 	.word	0x0800d070

08001920 <CMD_RtcSet>:

static void CMD_RtcSet(EmbeddedCli *cli, char *args, void *context) {
 8001920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001922:	b0b3      	sub	sp, #204	@ 0xcc
 8001924:	af06      	add	r7, sp, #24
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // hour
 800192c:	2101      	movs	r1, #1
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f000 ffb8 	bl	80028a4 <embeddedCliGetToken>
 8001934:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    const char *arg2 = embeddedCliGetToken(args, 2); // minute
 8001938:	2102      	movs	r1, #2
 800193a:	68b8      	ldr	r0, [r7, #8]
 800193c:	f000 ffb2 	bl	80028a4 <embeddedCliGetToken>
 8001940:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    const char *arg3 = embeddedCliGetToken(args, 3); // second
 8001944:	2103      	movs	r1, #3
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	f000 ffac 	bl	80028a4 <embeddedCliGetToken>
 800194c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    const char *arg4 = embeddedCliGetToken(args, 4); // day
 8001950:	2104      	movs	r1, #4
 8001952:	68b8      	ldr	r0, [r7, #8]
 8001954:	f000 ffa6 	bl	80028a4 <embeddedCliGetToken>
 8001958:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    const char *arg5 = embeddedCliGetToken(args, 5); // month
 800195c:	2105      	movs	r1, #5
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f000 ffa0 	bl	80028a4 <embeddedCliGetToken>
 8001964:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    const char *arg6 = embeddedCliGetToken(args, 6); // year
 8001968:	2106      	movs	r1, #6
 800196a:	68b8      	ldr	r0, [r7, #8]
 800196c:	f000 ff9a 	bl	80028a4 <embeddedCliGetToken>
 8001970:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    char buffer[100];
    if (arg1 == NULL || arg2 == NULL || arg3 == NULL ||
 8001974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <CMD_RtcSet+0x84>
 800197c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00f      	beq.n	80019a4 <CMD_RtcSet+0x84>
 8001984:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00b      	beq.n	80019a4 <CMD_RtcSet+0x84>
 800198c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <CMD_RtcSet+0x84>
        arg4 == NULL || arg5 == NULL || arg6 == NULL) {
 8001994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <CMD_RtcSet+0x84>
 800199c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10d      	bne.n	80019c0 <CMD_RtcSet+0xa0>
        snprintf(buffer, sizeof(buffer),
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4a5e      	ldr	r2, [pc, #376]	@ (8001b24 <CMD_RtcSet+0x204>)
 80019aa:	2164      	movs	r1, #100	@ 0x64
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00a f911 	bl	800bbd4 <sniprintf>
                 "Usage: rtc_set <hour> <minute> <second> <day> <month> <year>");
        embeddedCliPrint(cli, buffer);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 feb1 	bl	8002720 <embeddedCliPrint>
        return;
 80019be:	e0ad      	b.n	8001b1c <CMD_RtcSet+0x1fc>
    }

    int hour   = atoi(arg1);
 80019c0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80019c4:	f009 fecc 	bl	800b760 <atoi>
 80019c8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    int minute = atoi(arg2);
 80019cc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80019d0:	f009 fec6 	bl	800b760 <atoi>
 80019d4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    int second = atoi(arg3);
 80019d8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80019dc:	f009 fec0 	bl	800b760 <atoi>
 80019e0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    int day    = atoi(arg4);
 80019e4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80019e8:	f009 feba 	bl	800b760 <atoi>
 80019ec:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    int month  = atoi(arg5);
 80019f0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80019f4:	f009 feb4 	bl	800b760 <atoi>
 80019f8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    int year   = atoi(arg6);
 80019fc:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001a00:	f009 feae 	bl	800b760 <atoi>
 8001a04:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

    if (hour < 0 || hour > 23) {
 8001a08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db03      	blt.n	8001a18 <CMD_RtcSet+0xf8>
 8001a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a14:	2b17      	cmp	r3, #23
 8001a16:	dd04      	ble.n	8001a22 <CMD_RtcSet+0x102>
        embeddedCliPrint(cli, "Invalid hour (must be 0-23). Please enter again.");
 8001a18:	4943      	ldr	r1, [pc, #268]	@ (8001b28 <CMD_RtcSet+0x208>)
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 fe80 	bl	8002720 <embeddedCliPrint>
        return;
 8001a20:	e07c      	b.n	8001b1c <CMD_RtcSet+0x1fc>
    }
    if (minute < 0 || minute > 59) {
 8001a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db03      	blt.n	8001a32 <CMD_RtcSet+0x112>
 8001a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a2e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001a30:	dd04      	ble.n	8001a3c <CMD_RtcSet+0x11c>
        embeddedCliPrint(cli, "Invalid minute (must be 0-59). Please enter again.");
 8001a32:	493e      	ldr	r1, [pc, #248]	@ (8001b2c <CMD_RtcSet+0x20c>)
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 fe73 	bl	8002720 <embeddedCliPrint>
        return;
 8001a3a:	e06f      	b.n	8001b1c <CMD_RtcSet+0x1fc>
    }
    if (second < 0 || second > 59) {
 8001a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db03      	blt.n	8001a4c <CMD_RtcSet+0x12c>
 8001a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a48:	2b3b      	cmp	r3, #59	@ 0x3b
 8001a4a:	dd04      	ble.n	8001a56 <CMD_RtcSet+0x136>
        embeddedCliPrint(cli, "Invalid second (must be 0-59). Please enter again.");
 8001a4c:	4938      	ldr	r1, [pc, #224]	@ (8001b30 <CMD_RtcSet+0x210>)
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fe66 	bl	8002720 <embeddedCliPrint>
        return;
 8001a54:	e062      	b.n	8001b1c <CMD_RtcSet+0x1fc>
    }
    if (day < 1 || day > 31) {
 8001a56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	dd03      	ble.n	8001a66 <CMD_RtcSet+0x146>
 8001a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a62:	2b1f      	cmp	r3, #31
 8001a64:	dd04      	ble.n	8001a70 <CMD_RtcSet+0x150>
        embeddedCliPrint(cli, "Invalid day (must be 1-31). Please enter again.");
 8001a66:	4933      	ldr	r1, [pc, #204]	@ (8001b34 <CMD_RtcSet+0x214>)
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 fe59 	bl	8002720 <embeddedCliPrint>
        return;
 8001a6e:	e055      	b.n	8001b1c <CMD_RtcSet+0x1fc>
    }
    if (month < 1 || month > 12) {
 8001a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	dd03      	ble.n	8001a80 <CMD_RtcSet+0x160>
 8001a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	dd04      	ble.n	8001a8a <CMD_RtcSet+0x16a>
        embeddedCliPrint(cli, "Invalid month (must be 1-12). Please enter again.");
 8001a80:	492d      	ldr	r1, [pc, #180]	@ (8001b38 <CMD_RtcSet+0x218>)
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fe4c 	bl	8002720 <embeddedCliPrint>
        return;
 8001a88:	e048      	b.n	8001b1c <CMD_RtcSet+0x1fc>
    }
    if (year < 0 || year > 99) {
 8001a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db03      	blt.n	8001a9a <CMD_RtcSet+0x17a>
 8001a92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a96:	2b63      	cmp	r3, #99	@ 0x63
 8001a98:	dd04      	ble.n	8001aa4 <CMD_RtcSet+0x184>
        embeddedCliPrint(cli, "Invalid year (must be 2 digits, e.g., 25 for 2025). Please enter again.");
 8001a9a:	4928      	ldr	r1, [pc, #160]	@ (8001b3c <CMD_RtcSet+0x21c>)
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 fe3f 	bl	8002720 <embeddedCliPrint>
        return;
 8001aa2:	e03b      	b.n	8001b1c <CMD_RtcSet+0x1fc>
    }

    s_DateTime dt;
    dt.hour   = (uint8_t)hour;
 8001aa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	75fb      	strb	r3, [r7, #23]
    dt.minute = (uint8_t)minute;
 8001aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	763b      	strb	r3, [r7, #24]
    dt.second = (uint8_t)second;
 8001ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	767b      	strb	r3, [r7, #25]
    dt.day    = (uint8_t)day;
 8001abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	753b      	strb	r3, [r7, #20]
    dt.month  = (uint8_t)month;
 8001ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	757b      	strb	r3, [r7, #21]
    dt.year   = (uint8_t)year;
 8001acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	75bb      	strb	r3, [r7, #22]

    Utils_SetRTC(&dt);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 fdcd 	bl	8004678 <Utils_SetRTC>

    snprintf(buffer, sizeof(buffer),
             "--> RTC set to %02d:%02d:%02d, %02d/%02d/20%02d",
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
    snprintf(buffer, sizeof(buffer),
 8001ae0:	461e      	mov	r6, r3
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8001ae2:	7e3b      	ldrb	r3, [r7, #24]
 8001ae4:	7e7a      	ldrb	r2, [r7, #25]
 8001ae6:	7d39      	ldrb	r1, [r7, #20]
 8001ae8:	7d78      	ldrb	r0, [r7, #21]
    snprintf(buffer, sizeof(buffer),
 8001aea:	4604      	mov	r4, r0
             dt.hour, dt.minute, dt.second, dt.day, dt.month, dt.year);
 8001aec:	7db8      	ldrb	r0, [r7, #22]
    snprintf(buffer, sizeof(buffer),
 8001aee:	4605      	mov	r5, r0
 8001af0:	f107 001c 	add.w	r0, r7, #28
 8001af4:	9504      	str	r5, [sp, #16]
 8001af6:	9403      	str	r4, [sp, #12]
 8001af8:	9102      	str	r1, [sp, #8]
 8001afa:	9201      	str	r2, [sp, #4]
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	4633      	mov	r3, r6
 8001b00:	4a0f      	ldr	r2, [pc, #60]	@ (8001b40 <CMD_RtcSet+0x220>)
 8001b02:	2164      	movs	r1, #100	@ 0x64
 8001b04:	f00a f866 	bl	800bbd4 <sniprintf>
    embeddedCliPrint(cli, buffer);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fe06 	bl	8002720 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8001b14:	490b      	ldr	r1, [pc, #44]	@ (8001b44 <CMD_RtcSet+0x224>)
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fe02 	bl	8002720 <embeddedCliPrint>
}
 8001b1c:	37b4      	adds	r7, #180	@ 0xb4
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	0800d078 	.word	0x0800d078
 8001b28:	0800d0b8 	.word	0x0800d0b8
 8001b2c:	0800d0ec 	.word	0x0800d0ec
 8001b30:	0800d120 	.word	0x0800d120
 8001b34:	0800d154 	.word	0x0800d154
 8001b38:	0800d184 	.word	0x0800d184
 8001b3c:	0800d1b8 	.word	0x0800d1b8
 8001b40:	0800d200 	.word	0x0800d200
 8001b44:	0800d230 	.word	0x0800d230

08001b48 <CMD_RtcGet>:

static void CMD_RtcGet(EmbeddedCli *cli, char *args, void *context) {
 8001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4a:	b0af      	sub	sp, #188	@ 0xbc
 8001b4c:	af06      	add	r7, sp, #24
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
    const char *mode = embeddedCliGetToken(args, 1);
 8001b54:	2101      	movs	r1, #1
 8001b56:	68b8      	ldr	r0, [r7, #8]
 8001b58:	f000 fea4 	bl	80028a4 <embeddedCliGetToken>
 8001b5c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    char buffer[100];

    if (mode == NULL) {
 8001b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10d      	bne.n	8001b84 <CMD_RtcGet+0x3c>
        snprintf(buffer, sizeof(buffer), "Usage: rtc_get <soft|work|all>");
 8001b68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b6c:	4a75      	ldr	r2, [pc, #468]	@ (8001d44 <CMD_RtcGet+0x1fc>)
 8001b6e:	2164      	movs	r1, #100	@ 0x64
 8001b70:	4618      	mov	r0, r3
 8001b72:	f00a f82f 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001b76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 fdcf 	bl	8002720 <embeddedCliPrint>
 8001b82:	e0db      	b.n	8001d3c <CMD_RtcGet+0x1f4>
        return;
    }

    if (strcmp(mode, "soft") == 0) {
 8001b84:	4970      	ldr	r1, [pc, #448]	@ (8001d48 <CMD_RtcGet+0x200>)
 8001b86:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001b8a:	f7fe fb41 	bl	8000210 <strcmp>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d126      	bne.n	8001be2 <CMD_RtcGet+0x9a>
        s_DateTime rtc;
        Utils_GetRTC(&rtc);
 8001b94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 fd57 	bl	800464c <Utils_GetRTC>
        snprintf(buffer, sizeof(buffer),
                 "--> Soft RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d",
                 rtc.hour, rtc.minute, rtc.second,
 8001b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
        snprintf(buffer, sizeof(buffer),
 8001ba2:	461e      	mov	r6, r3
                 rtc.hour, rtc.minute, rtc.second,
 8001ba4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ba8:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
                 rtc.day, rtc.month, rtc.year);
 8001bac:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001bb0:	f897 002d 	ldrb.w	r0, [r7, #45]	@ 0x2d
        snprintf(buffer, sizeof(buffer),
 8001bb4:	4604      	mov	r4, r0
                 rtc.day, rtc.month, rtc.year);
 8001bb6:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
        snprintf(buffer, sizeof(buffer),
 8001bba:	4605      	mov	r5, r0
 8001bbc:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001bc0:	9504      	str	r5, [sp, #16]
 8001bc2:	9403      	str	r4, [sp, #12]
 8001bc4:	9102      	str	r1, [sp, #8]
 8001bc6:	9201      	str	r2, [sp, #4]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	4633      	mov	r3, r6
 8001bcc:	4a5f      	ldr	r2, [pc, #380]	@ (8001d4c <CMD_RtcGet+0x204>)
 8001bce:	2164      	movs	r1, #100	@ 0x64
 8001bd0:	f00a f800 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001bd4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bd8:	4619      	mov	r1, r3
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fda0 	bl	8002720 <embeddedCliPrint>
 8001be0:	e0a8      	b.n	8001d34 <CMD_RtcGet+0x1ec>
    } else if (strcmp(mode, "work") == 0) {
 8001be2:	495b      	ldr	r1, [pc, #364]	@ (8001d50 <CMD_RtcGet+0x208>)
 8001be4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001be8:	f7fe fb12 	bl	8000210 <strcmp>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d12e      	bne.n	8001c50 <CMD_RtcGet+0x108>
        uint32_t days = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint8_t hours = 0, minutes = 0, seconds = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 8001c08:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 8001c0c:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 8001c10:	f107 0127 	add.w	r1, r7, #39	@ 0x27
 8001c14:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001c18:	f002 fd52 	bl	80046c0 <Utils_GetWorkingTime>
        snprintf(buffer, sizeof(buffer),
 8001c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c20:	461c      	mov	r4, r3
 8001c22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001c26:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
                        "--> Working Uptime: Time: %02d:%02d:%02d, Days: %d",
                        hours, minutes, seconds, (uint8_t)days);
 8001c2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c2c:	b2c9      	uxtb	r1, r1
        snprintf(buffer, sizeof(buffer),
 8001c2e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001c32:	9102      	str	r1, [sp, #8]
 8001c34:	9201      	str	r2, [sp, #4]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	4623      	mov	r3, r4
 8001c3a:	4a46      	ldr	r2, [pc, #280]	@ (8001d54 <CMD_RtcGet+0x20c>)
 8001c3c:	2164      	movs	r1, #100	@ 0x64
 8001c3e:	f009 ffc9 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001c42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c46:	4619      	mov	r1, r3
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fd69 	bl	8002720 <embeddedCliPrint>
 8001c4e:	e071      	b.n	8001d34 <CMD_RtcGet+0x1ec>
    } else if (strcmp(mode, "all") == 0) {
 8001c50:	4941      	ldr	r1, [pc, #260]	@ (8001d58 <CMD_RtcGet+0x210>)
 8001c52:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001c56:	f7fe fadb 	bl	8000210 <strcmp>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d15c      	bne.n	8001d1a <CMD_RtcGet+0x1d2>
        // Soft RTC
        s_DateTime rtc;
        Utils_GetRTC(&rtc);
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fcf1 	bl	800464c <Utils_GetRTC>
        snprintf(buffer, sizeof(buffer),
                 "--> Soft RTC: Time: %02d:%02d:%02d, Date: %02d/%02d/20%02d",
                 rtc.hour, rtc.minute, rtc.second,
 8001c6a:	7ffb      	ldrb	r3, [r7, #31]
        snprintf(buffer, sizeof(buffer),
 8001c6c:	461e      	mov	r6, r3
                 rtc.hour, rtc.minute, rtc.second,
 8001c6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c72:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
                 rtc.day, rtc.month, rtc.year);
 8001c76:	7f39      	ldrb	r1, [r7, #28]
 8001c78:	7f78      	ldrb	r0, [r7, #29]
        snprintf(buffer, sizeof(buffer),
 8001c7a:	4604      	mov	r4, r0
                 rtc.day, rtc.month, rtc.year);
 8001c7c:	7fb8      	ldrb	r0, [r7, #30]
        snprintf(buffer, sizeof(buffer),
 8001c7e:	4605      	mov	r5, r0
 8001c80:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001c84:	9504      	str	r5, [sp, #16]
 8001c86:	9403      	str	r4, [sp, #12]
 8001c88:	9102      	str	r1, [sp, #8]
 8001c8a:	9201      	str	r2, [sp, #4]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	4633      	mov	r3, r6
 8001c90:	4a2e      	ldr	r2, [pc, #184]	@ (8001d4c <CMD_RtcGet+0x204>)
 8001c92:	2164      	movs	r1, #100	@ 0x64
 8001c94:	f009 ff9e 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001c98:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fd3e 	bl	8002720 <embeddedCliPrint>
        // Working uptime:
        uint32_t days = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
        uint8_t hours = 0, minutes = 0, seconds = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	75fb      	strb	r3, [r7, #23]
 8001cac:	2300      	movs	r3, #0
 8001cae:	75bb      	strb	r3, [r7, #22]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	757b      	strb	r3, [r7, #21]
        Utils_GetWorkingTime(&days, &hours, &minutes, &seconds);
 8001cb4:	f107 0315 	add.w	r3, r7, #21
 8001cb8:	f107 0216 	add.w	r2, r7, #22
 8001cbc:	f107 0117 	add.w	r1, r7, #23
 8001cc0:	f107 0018 	add.w	r0, r7, #24
 8001cc4:	f002 fcfc 	bl	80046c0 <Utils_GetWorkingTime>
        snprintf(buffer, sizeof(buffer),
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	461c      	mov	r4, r3
 8001ccc:	7dbb      	ldrb	r3, [r7, #22]
 8001cce:	7d7a      	ldrb	r2, [r7, #21]
                        "--> Working Uptime: Time: %02d:%02d:%02d, Days: %d",
                        hours, minutes, seconds, (uint8_t)days);
 8001cd0:	69b9      	ldr	r1, [r7, #24]
 8001cd2:	b2c9      	uxtb	r1, r1
        snprintf(buffer, sizeof(buffer),
 8001cd4:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001cd8:	9102      	str	r1, [sp, #8]
 8001cda:	9201      	str	r2, [sp, #4]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4623      	mov	r3, r4
 8001ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <CMD_RtcGet+0x20c>)
 8001ce2:	2164      	movs	r1, #100	@ 0x64
 8001ce4:	f009 ff76 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001ce8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cec:	4619      	mov	r1, r3
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fd16 	bl	8002720 <embeddedCliPrint>
        // Epoch
        uint32_t epoch = Utils_GetEpoch();
 8001cf4:	f002 fcd6 	bl	80046a4 <Utils_GetEpoch>
 8001cf8:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
        snprintf(buffer, sizeof(buffer), "--> Epoch: %lu", (unsigned long)epoch);
 8001cfc:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d04:	4a15      	ldr	r2, [pc, #84]	@ (8001d5c <CMD_RtcGet+0x214>)
 8001d06:	2164      	movs	r1, #100	@ 0x64
 8001d08:	f009 ff64 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001d0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d10:	4619      	mov	r1, r3
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 fd04 	bl	8002720 <embeddedCliPrint>
 8001d18:	e00c      	b.n	8001d34 <CMD_RtcGet+0x1ec>
    } else {
        snprintf(buffer, sizeof(buffer), "Unknown mode. Use: rtc_get <soft|work|all>");
 8001d1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d1e:	4a10      	ldr	r2, [pc, #64]	@ (8001d60 <CMD_RtcGet+0x218>)
 8001d20:	2164      	movs	r1, #100	@ 0x64
 8001d22:	4618      	mov	r0, r3
 8001d24:	f009 ff56 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001d28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fcf6 	bl	8002720 <embeddedCliPrint>
    }
    embeddedCliPrint(cli, "");
 8001d34:	490b      	ldr	r1, [pc, #44]	@ (8001d64 <CMD_RtcGet+0x21c>)
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fcf2 	bl	8002720 <embeddedCliPrint>
}
 8001d3c:	37a4      	adds	r7, #164	@ 0xa4
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	0800d234 	.word	0x0800d234
 8001d48:	0800d254 	.word	0x0800d254
 8001d4c:	0800d25c 	.word	0x0800d25c
 8001d50:	0800d298 	.word	0x0800d298
 8001d54:	0800d2a0 	.word	0x0800d2a0
 8001d58:	0800d2d4 	.word	0x0800d2d4
 8001d5c:	0800d2d8 	.word	0x0800d2d8
 8001d60:	0800d2e8 	.word	0x0800d2e8
 8001d64:	0800d230 	.word	0x0800d230

08001d68 <CMD_CollectData>:

static void CMD_CollectData(EmbeddedCli *cli, char *args, void *context) {
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b0ab      	sub	sp, #172	@ 0xac
 8001d6c:	af04      	add	r7, sp, #16
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // type
 8001d74:	2101      	movs	r1, #1
 8001d76:	68b8      	ldr	r0, [r7, #8]
 8001d78:	f000 fd94 	bl	80028a4 <embeddedCliGetToken>
 8001d7c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    const char *arg2 = embeddedCliGetToken(args, 2); // sample
 8001d80:	2102      	movs	r1, #2
 8001d82:	68b8      	ldr	r0, [r7, #8]
 8001d84:	f000 fd8e 	bl	80028a4 <embeddedCliGetToken>
 8001d88:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    char buffer[100];

    if (arg1 == NULL || arg2 == NULL) {
 8001d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <CMD_CollectData+0x34>
 8001d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d104      	bne.n	8001da6 <CMD_CollectData+0x3e>
        embeddedCliPrint(cli, "Usage: collect_data <type> <sample>");
 8001d9c:	4934      	ldr	r1, [pc, #208]	@ (8001e70 <CMD_CollectData+0x108>)
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fcbe 	bl	8002720 <embeddedCliPrint>
 8001da4:	e061      	b.n	8001e6a <CMD_CollectData+0x102>
        return;
    }

    uint8_t type = (uint8_t)atoi(arg1);
 8001da6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001daa:	f009 fcd9 	bl	800b760 <atoi>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint32_t sample = (uint32_t)strtoul(arg2, NULL, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001dbc:	f009 fdc6 	bl	800b94c <strtoul>
 8001dc0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

    Std_ReturnType ret = SPI_SlaveDevice_CollectData(type, sample, (uint32_t)RAM_D2_200KB_START);
 8001dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e74 <CMD_CollectData+0x10c>)
 8001dc6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001dca:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 f988 	bl	80040e4 <SPI_SlaveDevice_CollectData>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (ret == E_OK) {
 8001dda:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d11e      	bne.n	8001e20 <CMD_CollectData+0xb8>
        DataProcessContext_t ctx;
        if (SPI_SlaveDevice_GetDataInfo(&ctx) == E_OK) {
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 fa18 	bl	800421c <SPI_SlaveDevice_GetDataInfo>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d137      	bne.n	8001e62 <CMD_CollectData+0xfa>
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
                     (unsigned long)ctx.sample, ctx.type, (unsigned long)ctx.data_size, ctx.crc);
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	7c3b      	ldrb	r3, [r7, #16]
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
 8001df6:	4619      	mov	r1, r3
                     (unsigned long)ctx.sample, ctx.type, (unsigned long)ctx.data_size, ctx.crc);
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	8bb8      	ldrh	r0, [r7, #28]
            snprintf(buffer, sizeof(buffer), "Collected %lu samples (type %d), size: %lu bytes, CRC: 0x%04X",
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	f107 0020 	add.w	r0, r7, #32
 8001e02:	9402      	str	r4, [sp, #8]
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	9100      	str	r1, [sp, #0]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e78 <CMD_CollectData+0x110>)
 8001e0c:	2164      	movs	r1, #100	@ 0x64
 8001e0e:	f009 fee1 	bl	800bbd4 <sniprintf>
            embeddedCliPrint(cli, buffer);
 8001e12:	f107 0320 	add.w	r3, r7, #32
 8001e16:	4619      	mov	r1, r3
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fc81 	bl	8002720 <embeddedCliPrint>
 8001e1e:	e020      	b.n	8001e62 <CMD_CollectData+0xfa>
        }
    } else if (ret == E_BUSY) {
 8001e20:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d10e      	bne.n	8001e46 <CMD_CollectData+0xde>
        snprintf(buffer, sizeof(buffer), "Type %d not implemented yet.", type);
 8001e28:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001e2c:	f107 0020 	add.w	r0, r7, #32
 8001e30:	4a12      	ldr	r2, [pc, #72]	@ (8001e7c <CMD_CollectData+0x114>)
 8001e32:	2164      	movs	r1, #100	@ 0x64
 8001e34:	f009 fece 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001e38:	f107 0320 	add.w	r3, r7, #32
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fc6e 	bl	8002720 <embeddedCliPrint>
 8001e44:	e00d      	b.n	8001e62 <CMD_CollectData+0xfa>
    } else {
        snprintf(buffer, sizeof(buffer), "Failed to collect data. Error code: %d", ret);
 8001e46:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001e4a:	f107 0020 	add.w	r0, r7, #32
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e80 <CMD_CollectData+0x118>)
 8001e50:	2164      	movs	r1, #100	@ 0x64
 8001e52:	f009 febf 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001e56:	f107 0320 	add.w	r3, r7, #32
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 fc5f 	bl	8002720 <embeddedCliPrint>
    }

    embeddedCliPrint(cli, "");
 8001e62:	4908      	ldr	r1, [pc, #32]	@ (8001e84 <CMD_CollectData+0x11c>)
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fc5b 	bl	8002720 <embeddedCliPrint>
}
 8001e6a:	379c      	adds	r7, #156	@ 0x9c
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}
 8001e70:	0800d314 	.word	0x0800d314
 8001e74:	20001c74 	.word	0x20001c74
 8001e78:	0800d338 	.word	0x0800d338
 8001e7c:	0800d378 	.word	0x0800d378
 8001e80:	0800d398 	.word	0x0800d398
 8001e84:	0800d230 	.word	0x0800d230

08001e88 <CMD_QspiRead>:

static void CMD_QspiRead(EmbeddedCli *cli, char *args, void *context) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0a4      	sub	sp, #144	@ 0x90
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // size
 8001e94:	2101      	movs	r1, #1
 8001e96:	68b8      	ldr	r0, [r7, #8]
 8001e98:	f000 fd04 	bl	80028a4 <embeddedCliGetToken>
 8001e9c:	67f8      	str	r0, [r7, #124]	@ 0x7c
    char buffer[100];

    if (arg1 == NULL) {
 8001e9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <CMD_QspiRead+0x38>
        snprintf(buffer, sizeof(buffer), "Usage: qspi_read <size> (size: 1-100KB)");
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4a3b      	ldr	r2, [pc, #236]	@ (8001f98 <CMD_QspiRead+0x110>)
 8001eaa:	2164      	movs	r1, #100	@ 0x64
 8001eac:	4618      	mov	r0, r3
 8001eae:	f009 fe91 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fc31 	bl	8002720 <embeddedCliPrint>
        return;
 8001ebe:	e067      	b.n	8001f90 <CMD_QspiRead+0x108>
    }

    uint32_t size = (uint32_t)strtoul(arg1, NULL, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001ec6:	f009 fd41 	bl	800b94c <strtoul>
 8001eca:	67b8      	str	r0, [r7, #120]	@ 0x78
    if (size < 1 || size > MAX_SIZE) {
 8001ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <CMD_QspiRead+0x52>
 8001ed2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ed4:	f5b3 3fc8 	cmp.w	r3, #102400	@ 0x19000
 8001ed8:	d90e      	bls.n	8001ef8 <CMD_QspiRead+0x70>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)MAX_SIZE);
 8001eda:	f107 0014 	add.w	r0, r7, #20
 8001ede:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8001ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f9c <CMD_QspiRead+0x114>)
 8001ee4:	2164      	movs	r1, #100	@ 0x64
 8001ee6:	f009 fe75 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fc15 	bl	8002720 <embeddedCliPrint>
        return;
 8001ef6:	e04b      	b.n	8001f90 <CMD_QspiRead+0x108>
    }

    if (CSP_QSPI_Read(RAM_D2_200KB_START, 0, size) != HAL_OK) {
 8001ef8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001efa:	2100      	movs	r1, #0
 8001efc:	4828      	ldr	r0, [pc, #160]	@ (8001fa0 <CMD_QspiRead+0x118>)
 8001efe:	f7ff f979 	bl	80011f4 <CSP_QSPI_Read>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00d      	beq.n	8001f24 <CMD_QspiRead+0x9c>
        snprintf(buffer, sizeof(buffer), "Error reading QSPI Flash.");
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4a25      	ldr	r2, [pc, #148]	@ (8001fa4 <CMD_QspiRead+0x11c>)
 8001f0e:	2164      	movs	r1, #100	@ 0x64
 8001f10:	4618      	mov	r0, r3
 8001f12:	f009 fe5f 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 fbff 	bl	8002720 <embeddedCliPrint>
        return;
 8001f22:	e035      	b.n	8001f90 <CMD_QspiRead+0x108>
    }

    uint16_t crc = 0x0000;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    for (uint32_t i = 0; i < size; i++) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f30:	e012      	b.n	8001f58 <CMD_QspiRead+0xd0>
        crc = UpdateCRC16_XMODEM(crc, RAM_D2_200KB_START[i]);
 8001f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f36:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa0 <CMD_QspiRead+0x118>)
 8001f38:	4413      	add	r3, r2
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fc00 	bl	8001748 <UpdateCRC16_XMODEM>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    for (uint32_t i = 0; i < size; i++) {
 8001f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f52:	3301      	adds	r3, #1
 8001f54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f58:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001f5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d3e7      	bcc.n	8001f32 <CMD_QspiRead+0xaa>
    }

    HAL_Delay(1);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f005 f9d2 	bl	800730c <HAL_Delay>
    snprintf(buffer, sizeof(buffer), "Read %lu bytes from QSPI Flash, CRC16-XMODEM: 0x%04X",
 8001f68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f6c:	f107 0014 	add.w	r0, r7, #20
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f74:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa8 <CMD_QspiRead+0x120>)
 8001f76:	2164      	movs	r1, #100	@ 0x64
 8001f78:	f009 fe2c 	bl	800bbd4 <sniprintf>
             (unsigned long)size, crc);
    embeddedCliPrint(cli, buffer);
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4619      	mov	r1, r3
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fbcc 	bl	8002720 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 8001f88:	4908      	ldr	r1, [pc, #32]	@ (8001fac <CMD_QspiRead+0x124>)
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fbc8 	bl	8002720 <embeddedCliPrint>
}
 8001f90:	3788      	adds	r7, #136	@ 0x88
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	0800d3c0 	.word	0x0800d3c0
 8001f9c:	0800d3e8 	.word	0x0800d3e8
 8001fa0:	20001c74 	.word	0x20001c74
 8001fa4:	0800d410 	.word	0x0800d410
 8001fa8:	0800d42c 	.word	0x0800d42c
 8001fac:	0800d230 	.word	0x0800d230

08001fb0 <CMD_DumpQspi>:

static void CMD_DumpQspi(EmbeddedCli *cli, char *args, void *context) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b0a0      	sub	sp, #128	@ 0x80
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // size
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	68b8      	ldr	r0, [r7, #8]
 8001fc0:	f000 fc70 	bl	80028a4 <embeddedCliGetToken>
 8001fc4:	67f8      	str	r0, [r7, #124]	@ 0x7c
    char buffer[100];

    if (arg1 == NULL) {
 8001fc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <CMD_DumpQspi+0x38>
        snprintf(buffer, sizeof(buffer), "Usage: dump_qspi <size> (size: 1-100KB)");
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4a22      	ldr	r2, [pc, #136]	@ (800205c <CMD_DumpQspi+0xac>)
 8001fd2:	2164      	movs	r1, #100	@ 0x64
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f009 fdfd 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 fb9d 	bl	8002720 <embeddedCliPrint>
        return;
 8001fe6:	e035      	b.n	8002054 <CMD_DumpQspi+0xa4>
    }

    uint32_t size = (uint32_t)strtoul(arg1, NULL, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001fee:	f009 fcad 	bl	800b94c <strtoul>
 8001ff2:	67b8      	str	r0, [r7, #120]	@ 0x78
    if (size < 1 || size > MAX_SIZE) {
 8001ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <CMD_DumpQspi+0x52>
 8001ffa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ffc:	f5b3 3fc8 	cmp.w	r3, #102400	@ 0x19000
 8002000:	d90e      	bls.n	8002020 <CMD_DumpQspi+0x70>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)MAX_SIZE);
 8002002:	f107 0014 	add.w	r0, r7, #20
 8002006:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800200a:	4a15      	ldr	r2, [pc, #84]	@ (8002060 <CMD_DumpQspi+0xb0>)
 800200c:	2164      	movs	r1, #100	@ 0x64
 800200e:	f009 fde1 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 fb81 	bl	8002720 <embeddedCliPrint>
        return;
 800201e:	e019      	b.n	8002054 <CMD_DumpQspi+0xa4>
    }

    snprintf(buffer, sizeof(buffer), "Dumping %lu bytes from custom RAM:", (unsigned long)size);
 8002020:	f107 0014 	add.w	r0, r7, #20
 8002024:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002026:	4a0f      	ldr	r2, [pc, #60]	@ (8002064 <CMD_DumpQspi+0xb4>)
 8002028:	2164      	movs	r1, #100	@ 0x64
 800202a:	f009 fdd3 	bl	800bbd4 <sniprintf>
    embeddedCliPrint(cli, buffer);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fb73 	bl	8002720 <embeddedCliPrint>
    dump_buffer(cli, (const char*)SPI_RAM_START, size);
 800203a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800203c:	490a      	ldr	r1, [pc, #40]	@ (8002068 <CMD_DumpQspi+0xb8>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff fbb8 	bl	80017b4 <dump_buffer>
    embeddedCliPrint(cli, "Dump complete.");
 8002044:	4909      	ldr	r1, [pc, #36]	@ (800206c <CMD_DumpQspi+0xbc>)
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fb6a 	bl	8002720 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 800204c:	4908      	ldr	r1, [pc, #32]	@ (8002070 <CMD_DumpQspi+0xc0>)
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fb66 	bl	8002720 <embeddedCliPrint>
}
 8002054:	3780      	adds	r7, #128	@ 0x80
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	0800d464 	.word	0x0800d464
 8002060:	0800d3e8 	.word	0x0800d3e8
 8002064:	0800d48c 	.word	0x0800d48c
 8002068:	20033c74 	.word	0x20033c74
 800206c:	0800d4b0 	.word	0x0800d4b0
 8002070:	0800d230 	.word	0x0800d230

08002074 <CMD_DumpChunk>:

static void CMD_DumpChunk(EmbeddedCli *cli, char *args, void *context) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b0a6      	sub	sp, #152	@ 0x98
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // slot
 8002080:	2101      	movs	r1, #1
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f000 fc0e 	bl	80028a4 <embeddedCliGetToken>
 8002088:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    char buffer[100];

    if (arg1 == NULL) {
 800208c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10d      	bne.n	80020b0 <CMD_DumpChunk+0x3c>
        snprintf(buffer, sizeof(buffer), "Usage: dump_chunk <slot>");
 8002094:	f107 0310 	add.w	r3, r7, #16
 8002098:	4a59      	ldr	r2, [pc, #356]	@ (8002200 <CMD_DumpChunk+0x18c>)
 800209a:	2164      	movs	r1, #100	@ 0x64
 800209c:	4618      	mov	r0, r3
 800209e:	f009 fd99 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4619      	mov	r1, r3
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fb39 	bl	8002720 <embeddedCliPrint>
        return;
 80020ae:	e0a4      	b.n	80021fa <CMD_DumpChunk+0x186>
    }

    uint32_t slot = (uint32_t)strtoul(arg1, NULL, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80020b8:	f009 fc48 	bl	800b94c <strtoul>
 80020bc:	67f8      	str	r0, [r7, #124]	@ 0x7c
    uint32_t num_chunks = (g_total_size + g_chunk_size - 1) / g_chunk_size;
 80020be:	4b51      	ldr	r3, [pc, #324]	@ (8002204 <CMD_DumpChunk+0x190>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b50      	ldr	r3, [pc, #320]	@ (8002208 <CMD_DumpChunk+0x194>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	3b01      	subs	r3, #1
 80020cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002204 <CMD_DumpChunk+0x190>)
 80020ce:	8812      	ldrh	r2, [r2, #0]
 80020d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80020d4:	67bb      	str	r3, [r7, #120]	@ 0x78

    if (g_total_size == 0 || g_chunk_size == 0) {
 80020d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002208 <CMD_DumpChunk+0x194>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <CMD_DumpChunk+0x72>
 80020de:	4b49      	ldr	r3, [pc, #292]	@ (8002204 <CMD_DumpChunk+0x190>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10d      	bne.n	8002102 <CMD_DumpChunk+0x8e>
        snprintf(buffer, sizeof(buffer), "No data or chunk size set.");
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	4a48      	ldr	r2, [pc, #288]	@ (800220c <CMD_DumpChunk+0x198>)
 80020ec:	2164      	movs	r1, #100	@ 0x64
 80020ee:	4618      	mov	r0, r3
 80020f0:	f009 fd70 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	4619      	mov	r1, r3
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fb10 	bl	8002720 <embeddedCliPrint>
        return;
 8002100:	e07b      	b.n	80021fa <CMD_DumpChunk+0x186>
    }

    if (slot >= num_chunks) {
 8002102:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002106:	429a      	cmp	r2, r3
 8002108:	d30f      	bcc.n	800212a <CMD_DumpChunk+0xb6>
        snprintf(buffer, sizeof(buffer), "Invalid slot (%lu >= %lu).", (unsigned long)slot, (unsigned long)num_chunks);
 800210a:	f107 0010 	add.w	r0, r7, #16
 800210e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002114:	4a3e      	ldr	r2, [pc, #248]	@ (8002210 <CMD_DumpChunk+0x19c>)
 8002116:	2164      	movs	r1, #100	@ 0x64
 8002118:	f009 fd5c 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	4619      	mov	r1, r3
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 fafc 	bl	8002720 <embeddedCliPrint>
        return;
 8002128:	e067      	b.n	80021fa <CMD_DumpChunk+0x186>
    }

    uint32_t offset = slot * g_chunk_size;
 800212a:	4b36      	ldr	r3, [pc, #216]	@ (8002204 <CMD_DumpChunk+0x190>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t size = (slot == num_chunks - 1) ? (g_total_size % g_chunk_size) : g_chunk_size;
 8002138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800213a:	3b01      	subs	r3, #1
 800213c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800213e:	429a      	cmp	r2, r3
 8002140:	d109      	bne.n	8002156 <CMD_DumpChunk+0xe2>
 8002142:	4b31      	ldr	r3, [pc, #196]	@ (8002208 <CMD_DumpChunk+0x194>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2f      	ldr	r2, [pc, #188]	@ (8002204 <CMD_DumpChunk+0x190>)
 8002148:	8812      	ldrh	r2, [r2, #0]
 800214a:	fbb3 f1f2 	udiv	r1, r3, r2
 800214e:	fb01 f202 	mul.w	r2, r1, r2
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	e001      	b.n	800215a <CMD_DumpChunk+0xe6>
 8002156:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <CMD_DumpChunk+0x190>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (size == 0) size = g_chunk_size;
 800215e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <CMD_DumpChunk+0xfa>
 8002166:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <CMD_DumpChunk+0x190>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    // Tính CRC16
    uint16_t crc = 0x0000;
 800216e:	2300      	movs	r3, #0
 8002170:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    for (uint32_t i = 0; i < size; i++) {
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800217a:	e014      	b.n	80021a6 <CMD_DumpChunk+0x132>
        crc = UpdateCRC16_XMODEM(crc, RAM_D2_200KB_START[offset + i]);
 800217c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800217e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002182:	4413      	add	r3, r2
 8002184:	4a23      	ldr	r2, [pc, #140]	@ (8002214 <CMD_DumpChunk+0x1a0>)
 8002186:	4413      	add	r3, r2
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fad9 	bl	8001748 <UpdateCRC16_XMODEM>
 8002196:	4603      	mov	r3, r0
 8002198:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    for (uint32_t i = 0; i < size; i++) {
 800219c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021a0:	3301      	adds	r3, #1
 80021a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80021a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80021aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d3e4      	bcc.n	800217c <CMD_DumpChunk+0x108>
    }

    snprintf(buffer, sizeof(buffer), "Dumping chunk %lu (size: %lu bytes, CRC16: 0x%04X):",
 80021b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80021b6:	f107 0010 	add.w	r0, r7, #16
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021c4:	4a14      	ldr	r2, [pc, #80]	@ (8002218 <CMD_DumpChunk+0x1a4>)
 80021c6:	2164      	movs	r1, #100	@ 0x64
 80021c8:	f009 fd04 	bl	800bbd4 <sniprintf>
             (unsigned long)slot, (unsigned long)size, crc);
    embeddedCliPrint(cli, buffer);
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	4619      	mov	r1, r3
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 faa4 	bl	8002720 <embeddedCliPrint>
    dump_buffer(cli, (const char*)(RAM_D2_200KB_START + offset), size);
 80021d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021da:	4a0e      	ldr	r2, [pc, #56]	@ (8002214 <CMD_DumpChunk+0x1a0>)
 80021dc:	4413      	add	r3, r2
 80021de:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80021e2:	4619      	mov	r1, r3
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f7ff fae5 	bl	80017b4 <dump_buffer>
    embeddedCliPrint(cli, "Dump complete.");
 80021ea:	490c      	ldr	r1, [pc, #48]	@ (800221c <CMD_DumpChunk+0x1a8>)
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fa97 	bl	8002720 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80021f2:	490b      	ldr	r1, [pc, #44]	@ (8002220 <CMD_DumpChunk+0x1ac>)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fa93 	bl	8002720 <embeddedCliPrint>
}
 80021fa:	3790      	adds	r7, #144	@ 0x90
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	0800d4c0 	.word	0x0800d4c0
 8002204:	20001a1c 	.word	0x20001a1c
 8002208:	20001a18 	.word	0x20001a18
 800220c:	0800d4dc 	.word	0x0800d4dc
 8002210:	0800d4f8 	.word	0x0800d4f8
 8002214:	20001c74 	.word	0x20001c74
 8002218:	0800d514 	.word	0x0800d514
 800221c:	0800d4b0 	.word	0x0800d4b0
 8002220:	0800d230 	.word	0x0800d230

08002224 <CMD_DumpPreSpi>:

static void CMD_DumpPreSpi(EmbeddedCli *cli, char *args, void *context) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b0a0      	sub	sp, #128	@ 0x80
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1); // size
 8002230:	2101      	movs	r1, #1
 8002232:	68b8      	ldr	r0, [r7, #8]
 8002234:	f000 fb36 	bl	80028a4 <embeddedCliGetToken>
 8002238:	67f8      	str	r0, [r7, #124]	@ 0x7c
    char buffer[100];

    if (arg1 == NULL) {
 800223a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10d      	bne.n	800225c <CMD_DumpPreSpi+0x38>
        snprintf(buffer, sizeof(buffer), "Usage: dump_prespi <size> (1-10KB)");
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4a22      	ldr	r2, [pc, #136]	@ (80022d0 <CMD_DumpPreSpi+0xac>)
 8002246:	2164      	movs	r1, #100	@ 0x64
 8002248:	4618      	mov	r0, r3
 800224a:	f009 fcc3 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa63 	bl	8002720 <embeddedCliPrint>
        return;
 800225a:	e035      	b.n	80022c8 <CMD_DumpPreSpi+0xa4>
    }

    uint32_t size = (uint32_t)strtoul(arg1, NULL, 0);
 800225c:	2200      	movs	r2, #0
 800225e:	2100      	movs	r1, #0
 8002260:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002262:	f009 fb73 	bl	800b94c <strtoul>
 8002266:	67b8      	str	r0, [r7, #120]	@ 0x78
    if (size < 1 || size > SPI_RAM_SIZE) {
 8002268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <CMD_DumpPreSpi+0x52>
 800226e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002270:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8002274:	d90e      	bls.n	8002294 <CMD_DumpPreSpi+0x70>
        snprintf(buffer, sizeof(buffer), "Invalid size. Must be 1 to %lu bytes.", (unsigned long)SPI_RAM_SIZE);
 8002276:	f107 0014 	add.w	r0, r7, #20
 800227a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800227e:	4a15      	ldr	r2, [pc, #84]	@ (80022d4 <CMD_DumpPreSpi+0xb0>)
 8002280:	2164      	movs	r1, #100	@ 0x64
 8002282:	f009 fca7 	bl	800bbd4 <sniprintf>
        embeddedCliPrint(cli, buffer);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 fa47 	bl	8002720 <embeddedCliPrint>
        return;
 8002292:	e019      	b.n	80022c8 <CMD_DumpPreSpi+0xa4>
    }

    snprintf(buffer, sizeof(buffer), "Dumping %lu bytes from SPI RAM:", (unsigned long)size);
 8002294:	f107 0014 	add.w	r0, r7, #20
 8002298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800229a:	4a0f      	ldr	r2, [pc, #60]	@ (80022d8 <CMD_DumpPreSpi+0xb4>)
 800229c:	2164      	movs	r1, #100	@ 0x64
 800229e:	f009 fc99 	bl	800bbd4 <sniprintf>
    embeddedCliPrint(cli, buffer);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fa39 	bl	8002720 <embeddedCliPrint>
    dump_buffer(cli, (const char*)SPI_RAM_START, size);
 80022ae:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80022b0:	490a      	ldr	r1, [pc, #40]	@ (80022dc <CMD_DumpPreSpi+0xb8>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7ff fa7e 	bl	80017b4 <dump_buffer>
    embeddedCliPrint(cli, "Dump complete.");
 80022b8:	4909      	ldr	r1, [pc, #36]	@ (80022e0 <CMD_DumpPreSpi+0xbc>)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fa30 	bl	8002720 <embeddedCliPrint>
    embeddedCliPrint(cli, "");
 80022c0:	4908      	ldr	r1, [pc, #32]	@ (80022e4 <CMD_DumpPreSpi+0xc0>)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fa2c 	bl	8002720 <embeddedCliPrint>
}
 80022c8:	3780      	adds	r7, #128	@ 0x80
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	0800d548 	.word	0x0800d548
 80022d4:	0800d3e8 	.word	0x0800d3e8
 80022d8:	0800d56c 	.word	0x0800d56c
 80022dc:	20033c74 	.word	0x20033c74
 80022e0:	0800d4b0 	.word	0x0800d4b0
 80022e4:	0800d230 	.word	0x0800d230

080022e8 <getCliStaticBindings>:
 *************************************************/

/*************************************************
 *                Getter - Helper                *
 *************************************************/
const CliCommandBinding *getCliStaticBindings(void) {
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
    return cliStaticBindings_internal;
 80022ec:	4b02      	ldr	r3, [pc, #8]	@ (80022f8 <getCliStaticBindings+0x10>)
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	0800dc40 	.word	0x0800dc40

080022fc <getCliStaticBindingCount>:

uint16_t getCliStaticBindingCount(void) {
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
    return sizeof(cliStaticBindings_internal) / sizeof(cliStaticBindings_internal[0]);
 8002300:	2309      	movs	r3, #9
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <writeCharToCli>:

/*************************************************
 *          Tx Transmit CLI Byte Buffer          *
 *************************************************/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart1, (uint8_t *) &c, 1, 0xFFFF);
 8002318:	1cf9      	adds	r1, r7, #3
 800231a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800231e:	2201      	movs	r2, #1
 8002320:	4803      	ldr	r0, [pc, #12]	@ (8002330 <writeCharToCli+0x24>)
 8002322:	f007 f8fd 	bl	8009520 <HAL_UART_Transmit>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20001a98 	.word	0x20001a98

08002334 <SystemCLI_Init>:

//Call before FREERTOS be initialized
//Call After UART Driver Init (or Peripheral use CLI)

Std_ReturnType SystemCLI_Init() {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
    // Initialize the CLI configuration settings
    // Initialize UART CM4 CLI
    EmbeddedCliConfig *native_config = embeddedCliDefaultConfig();
 800233a:	f000 f853 	bl	80023e4 <embeddedCliDefaultConfig>
 800233e:	6078      	str	r0, [r7, #4]
    native_config->cliBuffer = cliStaticBuffer;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a1d      	ldr	r2, [pc, #116]	@ (80023b8 <SystemCLI_Init+0x84>)
 8002344:	60da      	str	r2, [r3, #12]
    native_config->cliBufferSize = CLI_BUFFER_SIZE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800234c:	821a      	strh	r2, [r3, #16]
    native_config->rxBufferSize = CLI_RX_BUFFER_SIZE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2210      	movs	r2, #16
 8002352:	809a      	strh	r2, [r3, #4]
    native_config->cmdBufferSize = CLI_CMD_BUFFER_SIZE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2240      	movs	r2, #64	@ 0x40
 8002358:	80da      	strh	r2, [r3, #6]
    native_config->historyBufferSize = CLI_HISTORY_SIZE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2280      	movs	r2, #128	@ 0x80
 800235e:	811a      	strh	r2, [r3, #8]
    native_config->maxBindingCount = CLI_MAX_BINDING_COUNT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	815a      	strh	r2, [r3, #10]
    native_config->enableAutoComplete = CLI_AUTO_COMPLETE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	749a      	strb	r2, [r3, #18]
    native_config->invitation = CLI_INITATION;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a13      	ldr	r2, [pc, #76]	@ (80023bc <SystemCLI_Init+0x88>)
 8002370:	601a      	str	r2, [r3, #0]
    native_config->staticBindings = getCliStaticBindings();
 8002372:	f7ff ffb9 	bl	80022e8 <getCliStaticBindings>
 8002376:	4602      	mov	r2, r0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	615a      	str	r2, [r3, #20]
    native_config->staticBindingCount = getCliStaticBindingCount();
 800237c:	f7ff ffbe 	bl	80022fc <getCliStaticBindingCount>
 8002380:	4603      	mov	r3, r0
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	831a      	strh	r2, [r3, #24]

    cli_native = embeddedCliNew(native_config);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f886 	bl	800249a <embeddedCliNew>
 800238e:	4603      	mov	r3, r0
 8002390:	4a0b      	ldr	r2, [pc, #44]	@ (80023c0 <SystemCLI_Init+0x8c>)
 8002392:	6013      	str	r3, [r2, #0]
    if (cli_native == NULL) {
 8002394:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <SystemCLI_Init+0x8c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <SystemCLI_Init+0x6c>
        return E_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e007      	b.n	80023b0 <SystemCLI_Init+0x7c>
    }
    cli_native->writeChar = writeCharToCli;
 80023a0:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <SystemCLI_Init+0x8c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a07      	ldr	r2, [pc, #28]	@ (80023c4 <SystemCLI_Init+0x90>)
 80023a6:	601a      	str	r2, [r3, #0]

    // Init the CLI with blank screen
//    onClearCLI(cli, NULL, NULL);

    // CLI has now been initialized, set bool to true to enable interrupts.
    cliIsReady = true;
 80023a8:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <SystemCLI_Init+0x94>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]

    return E_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000bac 	.word	0x20000bac
 80023bc:	0800d58c 	.word	0x0800d58c
 80023c0:	200013ac 	.word	0x200013ac
 80023c4:	0800230d 	.word	0x0800230d
 80023c8:	200013b0 	.word	0x200013b0

080023cc <getCliPointer>:


/*************************************************
 *             Get CLI Pointers                  *
 *************************************************/
EmbeddedCli *getCliPointer() {
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
    return cli_native;
 80023d0:	4b03      	ldr	r3, [pc, #12]	@ (80023e0 <getCliPointer+0x14>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	200013ac 	.word	0x200013ac

080023e4 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <embeddedCliDefaultConfig+0x4c>)
 80023ea:	2240      	movs	r2, #64	@ 0x40
 80023ec:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <embeddedCliDefaultConfig+0x4c>)
 80023f0:	2240      	movs	r2, #64	@ 0x40
 80023f2:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 80023f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <embeddedCliDefaultConfig+0x4c>)
 80023f6:	2280      	movs	r2, #128	@ 0x80
 80023f8:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 80023fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <embeddedCliDefaultConfig+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <embeddedCliDefaultConfig+0x4c>)
 8002402:	2200      	movs	r2, #0
 8002404:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 8;
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <embeddedCliDefaultConfig+0x4c>)
 8002408:	2208      	movs	r2, #8
 800240a:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <embeddedCliDefaultConfig+0x4c>)
 800240e:	2201      	movs	r2, #1
 8002410:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8002412:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <embeddedCliDefaultConfig+0x4c>)
 8002414:	4a07      	ldr	r2, [pc, #28]	@ (8002434 <embeddedCliDefaultConfig+0x50>)
 8002416:	601a      	str	r2, [r3, #0]
    defaultConfig.staticBindingCount = 0;
 8002418:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <embeddedCliDefaultConfig+0x4c>)
 800241a:	2200      	movs	r2, #0
 800241c:	831a      	strh	r2, [r3, #24]
    defaultConfig.staticBindings = NULL;
 800241e:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <embeddedCliDefaultConfig+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	615a      	str	r2, [r3, #20]
    return &defaultConfig;
 8002424:	4b02      	ldr	r3, [pc, #8]	@ (8002430 <embeddedCliDefaultConfig+0x4c>)
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	200013b4 	.word	0x200013b4
 8002434:	0800d5b8 	.word	0x0800d5b8

08002438 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (config->staticBindings == NULL) ?
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <embeddedCliRequiredSize+0x16>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	895b      	ldrh	r3, [r3, #10]
 800244c:	e000      	b.n	8002450 <embeddedCliRequiredSize+0x18>
 800244e:	2300      	movs	r3, #0
 8002450:	81fb      	strh	r3, [r7, #14]
                            (config->maxBindingCount) : 0;
    return (CLI_UINT_SIZE * (
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	889b      	ldrh	r3, [r3, #4]
 8002456:	3303      	adds	r3, #3
 8002458:	089a      	lsrs	r2, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	88db      	ldrh	r3, [r3, #6]
 800245e:	3303      	adds	r3, #3
 8002460:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8002462:	441a      	add	r2, r3
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	891b      	ldrh	r3, [r3, #8]
 8002468:	3303      	adds	r3, #3
 800246a:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 800246c:	18d1      	adds	r1, r2, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 800246e:	89fa      	ldrh	r2, [r7, #14]
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	3303      	adds	r3, #3
 800247a:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 800247c:	18ca      	adds	r2, r1, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))
 800247e:	89fb      	ldrh	r3, [r7, #14]
 8002480:	3303      	adds	r3, #3
 8002482:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8002484:	4413      	add	r3, r2
 8002486:	3312      	adds	r3, #18
    return (CLI_UINT_SIZE * (
 8002488:	b29b      	uxth	r3, r3
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	b29b      	uxth	r3, r3
    ));
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 800249a:	b580      	push	{r7, lr}
 800249c:	b088      	sub	sp, #32
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]

    size_t totalSize = embeddedCliRequiredSize(config);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffc6 	bl	8002438 <embeddedCliRequiredSize>
 80024ac:	4603      	mov	r3, r0
 80024ae:	61bb      	str	r3, [r7, #24]

    _Bool allocated = false;
 80024b0:	2300      	movs	r3, #0
 80024b2:	75fb      	strb	r3, [r7, #23]

    if (config->cliBuffer == NULL || config->cliBufferSize < totalSize) {
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <embeddedCliNew+0x2e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8a1b      	ldrh	r3, [r3, #16]
 80024c0:	461a      	mov	r2, r3
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <embeddedCliNew+0x32>
        return NULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e071      	b.n	80025b0 <embeddedCliNew+0x116>
    }

    CLI_UINT *buf = config->cliBuffer;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	613b      	str	r3, [r7, #16]

    memset(buf, 0, totalSize);
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	2100      	movs	r1, #0
 80024d6:	6938      	ldr	r0, [r7, #16]
 80024d8:	f009 fcd0 	bl	800be7c <memset>

    cli = (EmbeddedCli *) buf;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	61fb      	str	r3, [r7, #28]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	3310      	adds	r3, #16
 80024e4:	613b      	str	r3, [r7, #16]

    cli->_impl = (EmbeddedCliImpl *) buf;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	3338      	adds	r3, #56	@ 0x38
 80024f0:	613b      	str	r3, [r7, #16]

    PREPARE_IMPL(cli);
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	60fb      	str	r3, [r7, #12]
    impl->rxBuffer.buf = (char *) buf;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	889b      	ldrh	r3, [r3, #4]
 8002502:	3303      	adds	r3, #3
 8002504:	f023 0303 	bic.w	r3, r3, #3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	613b      	str	r3, [r7, #16]

    impl->cmdBuffer = (char *) buf;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	88db      	ldrh	r3, [r3, #6]
 8002518:	3303      	adds	r3, #3
 800251a:	f023 0303 	bic.w	r3, r3, #3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4413      	add	r3, r2
 8002522:	613b      	str	r3, [r7, #16]


    impl->bindings = (CliCommandBinding *) config->staticBindings;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24
    impl->bindingsCount = config->staticBindingCount;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	8b1a      	ldrh	r2, [r3, #24]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = config->staticBindingCount;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8b1a      	ldrh	r2, [r3, #24]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	85da      	strh	r2, [r3, #46]	@ 0x2e


    impl->history.buf = (char *) buf;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	891a      	ldrh	r2, [r3, #8]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	811a      	strh	r2, [r3, #8]

    if (allocated)
 800254a:	7dfb      	ldrb	r3, [r7, #23]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <embeddedCliNew+0xc8>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7c9b      	ldrb	r3, [r3, #18]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <embeddedCliNew+0xe2>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002570:	f043 0320 	orr.w	r3, r3, #32
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	889a      	ldrh	r2, [r3, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	88da      	ldrh	r2, [r3, #6]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->lastChar = '\0';
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	601a      	str	r2, [r3, #0]
    impl->cursorPos = 0;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	869a      	strh	r2, [r3, #52]	@ 0x34

    return cli;
 80025ae:	69fb      	ldr	r3, [r7, #28]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3310      	adds	r3, #16
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 ff8a 	bl	80034ec <fifoBufPush>
 80025d8:	4603      	mov	r3, r0
 80025da:	f083 0301 	eor.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8083 	beq.w	8002716 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d155      	bne.n	80026d0 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	b2da      	uxtb	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fe7e 	bl	800333e <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8002642:	e045      	b.n	80026d0 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3310      	adds	r3, #16
 8002648:	4618      	mov	r0, r3
 800264a:	f000 ff27 	bl	800349c <fifoBufPop>
 800264e:	4603      	mov	r3, r0
 8002650:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8002660:	7afb      	ldrb	r3, [r7, #11]
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f9f5 	bl	8002a54 <onEscapedInput>
 800266a:	e02a      	b.n	80026c2 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002672:	2b1b      	cmp	r3, #27
 8002674:	d10c      	bne.n	8002690 <embeddedCliProcess+0x92>
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	2b5b      	cmp	r3, #91	@ 0x5b
 800267a:	d109      	bne.n	8002690 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002682:	f043 0308 	orr.w	r3, r3, #8
 8002686:	b2da      	uxtb	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 800268e:	e018      	b.n	80026c2 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8002690:	7afb      	ldrb	r3, [r7, #11]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 feaa 	bl	80033ec <isControlChar>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 800269e:	7afb      	ldrb	r3, [r7, #11]
 80026a0:	4619      	mov	r1, r3
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fa86 	bl	8002bb4 <onControlInput>
 80026a8:	e00b      	b.n	80026c2 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 febd 	bl	800342c <isDisplayableChar>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 80026b8:	7afb      	ldrb	r3, [r7, #11]
 80026ba:	4619      	mov	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fa27 	bl	8002b10 <onCharInput>
        }

        printLiveAutocompletion(cli);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fd12 	bl	80030ec <printLiveAutocompletion>

        impl->lastChar = c;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	7afa      	ldrb	r2, [r7, #11]
 80026cc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3310      	adds	r3, #16
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 fec0 	bl	800345a <fifoBufAvailable>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1b1      	bne.n	8002644 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d014      	beq.n	8002718 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	8c12      	ldrh	r2, [r2, #32]
 80026fc:	4413      	add	r3, r2
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8002714:	e000      	b.n	8002718 <embeddedCliProcess+0x11a>
        return;
 8002716:	bf00      	nop
    }
}
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d03e      	beq.n	80027b0 <embeddedCliPrint+0x90>
        return;

    PREPARE_IMPL(cli);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	60fb      	str	r3, [r7, #12]

    // Save cursor position
    uint16_t cursorPosSave = impl->cursorPos;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800273c:	817b      	strh	r3, [r7, #10]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <embeddedCliPrint+0x32>
        clearCurrentLine(cli);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fdc1 	bl	80032d4 <clearCurrentLine>

    // Restore cursor position
    impl->cursorPos = cursorPosSave;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	897a      	ldrh	r2, [r7, #10]
 8002756:	869a      	strh	r2, [r3, #52]	@ 0x34

    // print provided string
    writeToOutput(cli, string);
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fdef 	bl	800333e <writeToOutput>
    writeToOutput(cli, lineBreak);
 8002760:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <embeddedCliPrint+0x98>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fde9 	bl	800333e <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	d11b      	bne.n	80027b2 <embeddedCliPrint+0x92>
        writeToOutput(cli, impl->invitation);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4619      	mov	r1, r3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fddc 	bl	800333e <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4619      	mov	r1, r3
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fdd6 	bl	800333e <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8c1a      	ldrh	r2, [r3, #32]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	861a      	strh	r2, [r3, #48]	@ 0x30
        moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_BACKWARD);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800279e:	2200      	movs	r2, #0
 80027a0:	4619      	mov	r1, r3
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fdec 	bl	8003380 <moveCursor>

        printLiveAutocompletion(cli);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fc9f 	bl	80030ec <printLiveAutocompletion>
 80027ae:	e000      	b.n	80027b2 <embeddedCliPrint+0x92>
        return;
 80027b0:	bf00      	nop
    }
}
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200000b8 	.word	0x200000b8

080027bc <embeddedCliTokenizeArgs>:

void embeddedCliTokenizeArgs(char *args) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d066      	beq.n	8002898 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 80027ca:	4b35      	ldr	r3, [pc, #212]	@ (80028a0 <embeddedCliTokenizeArgs+0xe4>)
 80027cc:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 80027ce:	2300      	movs	r3, #0
 80027d0:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 80027d2:	2300      	movs	r3, #0
 80027d4:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]

    int i = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 80027de:	e047      	b.n	8002870 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3301      	adds	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 80027e6:	7fbb      	ldrb	r3, [r7, #30]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 80027ec:	2300      	movs	r3, #0
 80027ee:	77bb      	strb	r3, [r7, #30]
 80027f0:	e029      	b.n	8002846 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80027f6:	d102      	bne.n	80027fe <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 80027f8:	2301      	movs	r3, #1
 80027fa:	77bb      	strb	r3, [r7, #30]
            continue;
 80027fc:	e038      	b.n	8002870 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	2b22      	cmp	r3, #34	@ 0x22
 8002802:	d110      	bne.n	8002826 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8002804:	7ffb      	ldrb	r3, [r7, #31]
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf14      	ite	ne
 800280a:	2301      	movne	r3, #1
 800280c:	2300      	moveq	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f083 0301 	eor.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	77fb      	strb	r3, [r7, #31]
 8002818:	7ffb      	ldrb	r3, [r7, #31]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8002820:	2300      	movs	r3, #0
 8002822:	74fb      	strb	r3, [r7, #19]
 8002824:	e00f      	b.n	8002846 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8002826:	7ffb      	ldrb	r3, [r7, #31]
 8002828:	f083 0301 	eor.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <embeddedCliTokenizeArgs+0x8a>
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	4619      	mov	r1, r3
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f009 fb28 	bl	800be8c <strchr>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8002842:	2300      	movs	r3, #0
 8002844:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <embeddedCliTokenizeArgs+0xa4>
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	dd0e      	ble.n	8002870 <embeddedCliTokenizeArgs+0xb4>
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	3b01      	subs	r3, #1
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	7cfa      	ldrb	r2, [r7, #19]
 8002868:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	3301      	adds	r3, #1
 800286e:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	74fb      	strb	r3, [r7, #19]
 800287a:	7cfb      	ldrb	r3, [r7, #19]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1af      	bne.n	80027e0 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	3301      	adds	r3, #1
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	e000      	b.n	800289a <embeddedCliTokenizeArgs+0xde>
        return;
 8002898:	bf00      	nop
}
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	0800d5bc 	.word	0x0800d5bc

080028a4 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 ff20 	bl	80036fa <getTokenPosition>
 80028ba:	4603      	mov	r3, r0
 80028bc:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80028be:	89fb      	ldrh	r3, [r7, #14]
 80028c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 80028c8:	89fb      	ldrh	r3, [r7, #14]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	e000      	b.n	80028d2 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 ff05 	bl	80036fa <getTokenPosition>
 80028f0:	4603      	mov	r3, r0
 80028f2:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d003      	beq.n	8002906 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	e000      	b.n	8002908 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <embeddedCliGetTokenCount+0x16>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <embeddedCliGetTokenCount+0x1a>
        return 0;
 8002926:	2300      	movs	r3, #0
 8002928:	e019      	b.n	800295e <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 800292e:	2301      	movs	r3, #1
 8002930:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3301      	adds	r3, #1
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 800294c:	897b      	ldrh	r3, [r7, #10]
 800294e:	3301      	adds	r3, #1
 8002950:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3301      	adds	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8002958:	e7eb      	b.n	8002932 <embeddedCliGetTokenCount+0x22>
                break;
 800295a:	bf00      	nop
    }

    return tokenCount;
 800295c:	897b      	ldrh	r3, [r7, #10]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	899b      	ldrh	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d05f      	beq.n	8002a46 <navigateHistory+0xda>
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	895a      	ldrh	r2, [r3, #10]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	899b      	ldrh	r3, [r3, #12]
 8002994:	429a      	cmp	r2, r3
 8002996:	d056      	beq.n	8002a46 <navigateHistory+0xda>
        (!navigateUp && impl->history.current == 0))
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f083 0301 	eor.w	r3, r3, #1
 800299e:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	895b      	ldrh	r3, [r3, #10]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d04c      	beq.n	8002a46 <navigateHistory+0xda>
        return;

    clearCurrentLine(cli);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fc91 	bl	80032d4 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4619      	mov	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fcc0 	bl	800333e <writeToOutput>

    if (navigateUp)
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <navigateHistory+0x66>
        ++impl->history.current;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	895b      	ldrh	r3, [r3, #10]
 80029c8:	3301      	adds	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	815a      	strh	r2, [r3, #10]
 80029d0:	e005      	b.n	80029de <navigateHistory+0x72>
    else
        --impl->history.current;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	895b      	ldrh	r3, [r3, #10]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1d1a      	adds	r2, r3, #4
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	895b      	ldrh	r3, [r3, #10]
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f000 fe0d 	bl	8003608 <historyGet>
 80029ee:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <navigateHistory+0x8e>
        item = "";
 80029f6:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <navigateHistory+0xe4>)
 80029f8:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f7fd fc12 	bl	8000224 <strlen>
 8002a00:	4603      	mov	r3, r0
 8002a02:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	89fa      	ldrh	r2, [r7, #14]
 8002a0a:	6979      	ldr	r1, [r7, #20]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f009 fad0 	bl	800bfb2 <memcpy>
    impl->cmdBuffer[len] = '\0';
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	4413      	add	r3, r2
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	89fa      	ldrh	r2, [r7, #14]
 8002a22:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fc87 	bl	800333e <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	8c1a      	ldrh	r2, [r3, #32]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cursorPos = 0;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	869a      	strh	r2, [r3, #52]	@ 0x34

    printLiveAutocompletion(cli);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fb54 	bl	80030ec <printLiveAutocompletion>
 8002a44:	e000      	b.n	8002a48 <navigateHistory+0xdc>
        return;
 8002a46:	bf00      	nop
}
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	0800d5c0 	.word	0x0800d5c0

08002a54 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a6a:	d948      	bls.n	8002afe <onEscapedInput+0xaa>
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002a70:	d845      	bhi.n	8002afe <onEscapedInput+0xaa>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002a78:	f023 0308 	bic.w	r3, r3, #8
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	2b41      	cmp	r3, #65	@ 0x41
 8002a88:	d002      	beq.n	8002a90 <onEscapedInput+0x3c>
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	2b42      	cmp	r3, #66	@ 0x42
 8002a8e:	d109      	bne.n	8002aa4 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	2b41      	cmp	r3, #65	@ 0x41
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ff64 	bl	800296c <navigateHistory>
        }

        if (c == 'C' && impl->cursorPos > 0) {
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	2b43      	cmp	r3, #67	@ 0x43
 8002aa8:	d10f      	bne.n	8002aca <onEscapedInput+0x76>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <onEscapedInput+0x76>
            impl->cursorPos--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorRight);
 8002abe:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <onEscapedInput+0xb4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fc3a 	bl	800333e <writeToOutput>
        }

        if (c == 'D' && impl->cursorPos < strlen(impl->cmdBuffer)) {
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	2b44      	cmp	r3, #68	@ 0x44
 8002ace:	d116      	bne.n	8002afe <onEscapedInput+0xaa>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002ad4:	461c      	mov	r4, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fba2 	bl	8000224 <strlen>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	429c      	cmp	r4, r3
 8002ae4:	d20b      	bcs.n	8002afe <onEscapedInput+0xaa>
            impl->cursorPos++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002aea:	3301      	adds	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorLeft);
 8002af2:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <onEscapedInput+0xb8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fc20 	bl	800333e <writeToOutput>
        }
    }
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200000bc 	.word	0x200000bc
 8002b0c:	200000c0 	.word	0x200000c0

08002b10 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8c1b      	ldrh	r3, [r3, #32]
 8002b26:	3302      	adds	r3, #2
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	da3b      	bge.n	8002ba8 <onCharInput+0x98>
        return;

    size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fb75 	bl	8000224 <strlen>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	60bb      	str	r3, [r7, #8]

    memmove(&impl->cmdBuffer[insertPos + 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	18d0      	adds	r0, r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	18d1      	adds	r1, r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f009 f973 	bl	800be48 <memmove>

    ++impl->cmdSize;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8c1b      	ldrh	r3, [r3, #32]
 8002b66:	3301      	adds	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	841a      	strh	r2, [r3, #32]
    ++impl->inputLineLength;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002b72:	3301      	adds	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cmdBuffer[insertPos] = c;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4413      	add	r3, r2
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	701a      	strb	r2, [r3, #0]

    if (impl->cursorPos > 0)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <onCharInput+0x8a>
        writeToOutput(cli, escSeqInsertChar); // Insert Character
 8002b8e:	4b08      	ldr	r3, [pc, #32]	@ (8002bb0 <onCharInput+0xa0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4619      	mov	r1, r3
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fbd2 	bl	800333e <writeToOutput>

    cli->writeChar(cli, c);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
 8002ba6:	e000      	b.n	8002baa <onCharInput+0x9a>
        return;
 8002ba8:	bf00      	nop
}
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200000cc 	.word	0x200000cc

08002bb4 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002bcc:	2b0d      	cmp	r3, #13
 8002bce:	d102      	bne.n	8002bd6 <onControlInput+0x22>
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	2b0a      	cmp	r3, #10
 8002bd4:	d078      	beq.n	8002cc8 <onControlInput+0x114>
        (impl->lastChar == '\n' && c == '\r'))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8002bdc:	2b0a      	cmp	r3, #10
 8002bde:	d102      	bne.n	8002be6 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	2b0d      	cmp	r3, #13
 8002be4:	d070      	beq.n	8002cc8 <onControlInput+0x114>
        return;

    if (c == '\r' || c == '\n') {
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	2b0d      	cmp	r3, #13
 8002bea:	d002      	beq.n	8002bf2 <onControlInput+0x3e>
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	2b0a      	cmp	r3, #10
 8002bf0:	d129      	bne.n	8002c46 <onControlInput+0x92>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fadc 	bl	80031b0 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8002bf8:	4b35      	ldr	r3, [pc, #212]	@ (8002cd0 <onControlInput+0x11c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fb9d 	bl	800333e <writeToOutput>

        if (impl->cmdSize > 0)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8c1b      	ldrh	r3, [r3, #32]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <onControlInput+0x5e>
            parseCommand(cli);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f865 	bl	8002cdc <parseCommand>
        impl->cmdSize = 0;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	8c12      	ldrh	r2, [r2, #32]
 8002c20:	4413      	add	r3, r2
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	815a      	strh	r2, [r3, #10]
        impl->cursorPos = 0;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	869a      	strh	r2, [r3, #52]	@ 0x34

        writeToOutput(cli, impl->invitation);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fb7d 	bl	800333e <writeToOutput>
 8002c44:	e041      	b.n	8002cca <onControlInput+0x116>
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d002      	beq.n	8002c52 <onControlInput+0x9e>
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c50:	d133      	bne.n	8002cba <onControlInput+0x106>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8c1b      	ldrh	r3, [r3, #32]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	dd2b      	ble.n	8002cba <onControlInput+0x106>
        // remove char from screen
        writeToOutput(cli, escSeqCursorLeft); // Move cursor to left
 8002c62:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd4 <onControlInput+0x120>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fb68 	bl	800333e <writeToOutput>
        writeToOutput(cli, escSeqDeleteChar); // And remove character
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <onControlInput+0x124>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fb62 	bl	800333e <writeToOutput>
        // and from buffer
        size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fad0 	bl	8000224 <strlen>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	60bb      	str	r3, [r7, #8]
        memmove(&impl->cmdBuffer[insertPos - 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	18d0      	adds	r0, r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	18d1      	adds	r1, r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f009 f8ce 	bl	800be48 <memmove>
        --impl->cmdSize;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8c1b      	ldrh	r3, [r3, #32]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	841a      	strh	r2, [r3, #32]
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 8002cb8:	e007      	b.n	8002cca <onControlInput+0x116>
    } else if (c == '\t') {
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d104      	bne.n	8002cca <onControlInput+0x116>
        onAutocompleteRequest(cli);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fa75 	bl	80031b0 <onAutocompleteRequest>
 8002cc6:	e000      	b.n	8002cca <onControlInput+0x116>
        return;
 8002cc8:	bf00      	nop
    }

}
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	200000b8 	.word	0x200000b8
 8002cd4:	200000c0 	.word	0x200000c0
 8002cd8:	200000d0 	.word	0x200000d0

08002cdc <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b08f      	sub	sp, #60	@ 0x3c
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cf4:	e00d      	b.n	8002d12 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfc:	4413      	add	r3, r2
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d003      	beq.n	8002d0c <parseCommand+0x30>
            isEmpty = false;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8002d0a:	e008      	b.n	8002d1e <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0e:	3301      	adds	r3, #1
 8002d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	8c1b      	ldrh	r3, [r3, #32]
 8002d16:	461a      	mov	r2, r3
 8002d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	dbeb      	blt.n	8002cf6 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8002d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f040 80fa 	bne.w	8002f1c <parseCommand+0x240>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	1d1a      	adds	r2, r3, #4
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f000 fc04 	bl	8003540 <historyPut>

    char *cmdName = NULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	e030      	b.n	8002dae <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d10f      	bne.n	8002d7e <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8002d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8002d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d018      	beq.n	8002da8 <parseCommand+0xcc>
                nameFinished = true;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002d7c:	e014      	b.n	8002da8 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8002d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d8e:	e00b      	b.n	8002da8 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8002d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d108      	bne.n	8002da8 <parseCommand+0xcc>
 8002d96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	4413      	add	r3, r2
 8002da6:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	3301      	adds	r3, #1
 8002dac:	623b      	str	r3, [r7, #32]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	8c1b      	ldrh	r3, [r3, #32]
 8002db2:	461a      	mov	r2, r3
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	4293      	cmp	r3, r2
 8002db8:	dbc8      	blt.n	8002d4c <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	8c1b      	ldrh	r3, [r3, #32]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8002dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80a7 	beq.w	8002f20 <parseCommand+0x244>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e072      	b.n	8002ebe <parseCommand+0x1e2>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	440b      	add	r3, r1
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4619      	mov	r1, r3
 8002dec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002dee:	f7fd fa0f 	bl	8000210 <strcmp>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d15f      	bne.n	8002eb8 <parseCommand+0x1dc>
            if (impl->bindings[i].binding == NULL)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	440b      	add	r3, r1
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d05e      	beq.n	8002ecc <parseCommand+0x1f0>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	7b1b      	ldrb	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8002e24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e26:	f7ff fcc9 	bl	80027bc <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002e30:	f043 0310 	orr.w	r3, r3, #16
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            // check if help was requested (help is printed when no other options are set)
            if (cmdArgs != NULL && (strcmp(cmdArgs, "-h") == 0 || strcmp(cmdArgs, "--help") == 0)) {
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d01a      	beq.n	8002e78 <parseCommand+0x19c>
 8002e42:	4939      	ldr	r1, [pc, #228]	@ (8002f28 <parseCommand+0x24c>)
 8002e44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e46:	f7fd f9e3 	bl	8000210 <strcmp>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <parseCommand+0x182>
 8002e50:	4936      	ldr	r1, [pc, #216]	@ (8002f2c <parseCommand+0x250>)
 8002e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e54:	f7fd f9dc 	bl	8000210 <strcmp>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10c      	bne.n	8002e78 <parseCommand+0x19c>
                printBindingHelp(cli, &impl->bindings[i]);
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f85d 	bl	8002f30 <printBindingHelp>
 8002e76:	e015      	b.n	8002ea4 <parseCommand+0x1c8>
            } else {
                impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	440b      	add	r3, r1
 8002e88:	695c      	ldr	r4, [r3, #20]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	47a0      	blx	r4
            }
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002eaa:	f023 0310 	bic.w	r3, r3, #16
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8002eb6:	e034      	b.n	8002f22 <parseCommand+0x246>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	db86      	blt.n	8002dd8 <parseCommand+0xfc>
 8002eca:	e000      	b.n	8002ece <parseCommand+0x1f2>
                break;
 8002ecc:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01d      	beq.n	8002f12 <parseCommand+0x236>
        CliCommand command;
        command.name = cmdName;
 8002ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed8:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8002eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002edc:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002ee4:	f043 0310 	orr.w	r3, r3, #16
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f107 020c 	add.w	r2, r7, #12
 8002ef8:	4611      	mov	r1, r2
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002f04:	f023 0310 	bic.w	r3, r3, #16
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8002f10:	e007      	b.n	8002f22 <parseCommand+0x246>
    } else {
        onUnknownCommand(cli, cmdName);
 8002f12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fe5f 	bl	8003bd8 <onUnknownCommand>
 8002f1a:	e002      	b.n	8002f22 <parseCommand+0x246>
        return;
 8002f1c:	bf00      	nop
 8002f1e:	e000      	b.n	8002f22 <parseCommand+0x246>
        return;
 8002f20:	bf00      	nop
    }
}
 8002f22:	373c      	adds	r7, #60	@ 0x3c
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd90      	pop	{r4, r7, pc}
 8002f28:	0800d5c4 	.word	0x0800d5c4
 8002f2c:	0800d5c8 	.word	0x0800d5c8

08002f30 <printBindingHelp>:

static void printBindingHelp(EmbeddedCli *cli, CliCommandBinding *binding) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
    if (binding->help != NULL) {
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <printBindingHelp+0x34>
        cli->writeChar(cli, '\t');
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2109      	movs	r1, #9
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
        writeToOutput(cli, binding->help);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f9f3 	bl	800333e <writeToOutput>
        writeToOutput(cli, lineBreak);
 8002f58:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <printBindingHelp+0x3c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f9ed 	bl	800333e <writeToOutput>
    }
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200000b8 	.word	0x200000b8

08002f70 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08e      	sub	sp, #56	@ 0x38
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	2300      	movs	r3, #0
 8002f82:	82bb      	strh	r3, [r7, #20]
 8002f84:	2300      	movs	r3, #0
 8002f86:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7fd f94b 	bl	8000224 <strlen>
 8002f8e:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <getAutocompletedCommand+0x34>
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d108      	bne.n	8002fb6 <getAutocompletedCommand+0x46>
        return cmd;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fb0:	e882 0003 	stmia.w	r2, {r0, r1}
 8002fb4:	e095      	b.n	80030e2 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fba:	e083      	b.n	80030c4 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002fc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	440b      	add	r3, r1
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8002fd0:	69f8      	ldr	r0, [r7, #28]
 8002fd2:	f7fd f927 	bl	8000224 <strlen>
 8002fd6:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fde:	4413      	add	r3, r2
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe8:	440b      	add	r3, r1
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d35e      	bcc.n	80030b8 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003004:	e010      	b.n	8003028 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300a:	4413      	add	r3, r2
 800300c:	781a      	ldrb	r2, [r3, #0]
 800300e:	69f9      	ldr	r1, [r7, #28]
 8003010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003012:	440b      	add	r3, r1
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d003      	beq.n	8003022 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 800301a:	2300      	movs	r3, #0
 800301c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8003020:	e006      	b.n	8003030 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8003022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003024:	3301      	adds	r3, #1
 8003026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003028:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	429a      	cmp	r2, r3
 800302e:	d3ea      	bcc.n	8003006 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8003030:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003034:	f083 0301 	eor.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d13e      	bne.n	80030bc <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003044:	4413      	add	r3, r2
 8003046:	781a      	ldrb	r2, [r3, #0]
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800304c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304e:	440b      	add	r3, r1
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8003058:	8afb      	ldrh	r3, [r7, #22]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <getAutocompletedCommand+0xf8>
 800305e:	8abb      	ldrh	r3, [r7, #20]
 8003060:	461a      	mov	r2, r3
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4293      	cmp	r3, r2
 8003066:	d202      	bcs.n	800306e <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	b29b      	uxth	r3, r3
 800306c:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 800306e:	8afb      	ldrh	r3, [r7, #22]
 8003070:	3301      	adds	r3, #1
 8003072:	b29b      	uxth	r3, r3
 8003074:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8003076:	8afb      	ldrh	r3, [r7, #22]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d102      	bne.n	8003082 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	613b      	str	r3, [r7, #16]
            continue;
 8003080:	e01d      	b.n	80030be <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	8c1b      	ldrh	r3, [r3, #32]
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003088:	e010      	b.n	80030ac <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308e:	4413      	add	r3, r2
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	69f9      	ldr	r1, [r7, #28]
 8003094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003096:	440b      	add	r3, r1
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d003      	beq.n	80030a6 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 800309e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	82bb      	strh	r3, [r7, #20]
                break;
 80030a4:	e00b      	b.n	80030be <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 80030a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a8:	3301      	adds	r3, #1
 80030aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ac:	8abb      	ldrh	r3, [r7, #20]
 80030ae:	461a      	mov	r2, r3
 80030b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d3e9      	bcc.n	800308a <getAutocompletedCommand+0x11a>
 80030b6:	e002      	b.n	80030be <getAutocompletedCommand+0x14e>
            continue;
 80030b8:	bf00      	nop
 80030ba:	e000      	b.n	80030be <getAutocompletedCommand+0x14e>
            continue;
 80030bc:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80030be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c0:	3301      	adds	r3, #1
 80030c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030c8:	461a      	mov	r2, r3
 80030ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030cc:	4293      	cmp	r3, r2
 80030ce:	f6ff af75 	blt.w	8002fbc <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	3738      	adds	r7, #56	@ 0x38
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d04a      	beq.n	800319e <printLiveAutocompletion+0xb2>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	f107 030c 	add.w	r3, r7, #12
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff2c 	bl	8002f70 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8003118:	8a7b      	ldrh	r3, [r7, #18]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	8c1b      	ldrh	r3, [r3, #32]
 8003122:	823b      	strh	r3, [r7, #16]
    }

    // save cursor location
    writeToOutput(cli, escSeqCursorSave);
 8003124:	4b20      	ldr	r3, [pc, #128]	@ (80031a8 <printLiveAutocompletion+0xbc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4619      	mov	r1, r3
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f907 	bl	800333e <writeToOutput>

    moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_FORWARD);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003134:	2201      	movs	r2, #1
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f921 	bl	8003380 <moveCursor>

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	8c1b      	ldrh	r3, [r3, #32]
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	e00b      	b.n	800315e <printLiveAutocompletion+0x72>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68f9      	ldr	r1, [r7, #12]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	440a      	add	r2, r1
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	4611      	mov	r1, r2
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	3301      	adds	r3, #1
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	8a3b      	ldrh	r3, [r7, #16]
 8003160:	461a      	mov	r2, r3
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4293      	cmp	r3, r2
 8003166:	d3ee      	bcc.n	8003146 <printLiveAutocompletion+0x5a>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8003168:	8a3b      	ldrh	r3, [r7, #16]
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	e007      	b.n	800317e <printLiveAutocompletion+0x92>
        cli->writeChar(cli, ' ');
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2120      	movs	r1, #32
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	3301      	adds	r3, #1
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003182:	461a      	mov	r2, r3
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	4293      	cmp	r3, r2
 8003188:	d3f1      	bcc.n	800316e <printLiveAutocompletion+0x82>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 800318a:	8a3a      	ldrh	r2, [r7, #16]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	861a      	strh	r2, [r3, #48]	@ 0x30

    // restore cursor
    writeToOutput(cli, escSeqCursorRestore);
 8003190:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <printLiveAutocompletion+0xc0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8d1 	bl	800333e <writeToOutput>
 800319c:	e000      	b.n	80031a0 <printLiveAutocompletion+0xb4>
        return;
 800319e:	bf00      	nop
}
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	200000c4 	.word	0x200000c4
 80031ac:	200000c8 	.word	0x200000c8

080031b0 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fed1 	bl	8002f70 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 80031ce:	8a7b      	ldrh	r3, [r7, #18]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d078      	beq.n	80032c6 <onAutocompleteRequest+0x116>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 80031d4:	8a7b      	ldrh	r3, [r7, #18]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d004      	beq.n	80031e4 <onAutocompleteRequest+0x34>
 80031da:	8a3a      	ldrh	r2, [r7, #16]
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	8c1b      	ldrh	r3, [r3, #32]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d931      	bls.n	8003248 <onAutocompleteRequest+0x98>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	68f9      	ldr	r1, [r7, #12]
 80031ea:	8a3a      	ldrh	r2, [r7, #16]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f008 fee0 	bl	800bfb2 <memcpy>
        if (cmd.candidateCount == 1) {
 80031f2:	8a7b      	ldrh	r3, [r7, #18]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d109      	bne.n	800320c <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	8a3a      	ldrh	r2, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	2220      	movs	r2, #32
 8003202:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8003204:	8a3b      	ldrh	r3, [r7, #16]
 8003206:	3301      	adds	r3, #1
 8003208:	b29b      	uxth	r3, r3
 800320a:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	8a3a      	ldrh	r2, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize - impl->cursorPos]);
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	8c12      	ldrh	r2, [r2, #32]
 8003220:	4611      	mov	r1, r2
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8003226:	1a8a      	subs	r2, r1, r2
 8003228:	4413      	add	r3, r2
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f886 	bl	800333e <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8003232:	8a3a      	ldrh	r2, [r7, #16]
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	8c1a      	ldrh	r2, [r3, #32]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->cursorPos = 0; // Cursor has been moved to the end
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2200      	movs	r2, #0
 8003244:	869a      	strh	r2, [r3, #52]	@ 0x34
        return;
 8003246:	e03f      	b.n	80032c8 <onAutocompleteRequest+0x118>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f843 	bl	80032d4 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e021      	b.n	8003298 <onAutocompleteRequest+0xe8>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	4413      	add	r3, r2
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d014      	beq.n	8003290 <onAutocompleteRequest+0xe0>
            continue;

        const char *name = impl->bindings[i].name;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 800327a:	6979      	ldr	r1, [r7, #20]
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f85e 	bl	800333e <writeToOutput>
        writeToOutput(cli, lineBreak);
 8003282:	4b13      	ldr	r3, [pc, #76]	@ (80032d0 <onAutocompleteRequest+0x120>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f858 	bl	800333e <writeToOutput>
 800328e:	e000      	b.n	8003292 <onAutocompleteRequest+0xe2>
            continue;
 8003290:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800329c:	461a      	mov	r2, r3
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4293      	cmp	r3, r2
 80032a2:	dbd7      	blt.n	8003254 <onAutocompleteRequest+0xa4>
    }

    writeToOutput(cli, impl->invitation);
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4619      	mov	r1, r3
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f847 	bl	800333e <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4619      	mov	r1, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f841 	bl	800333e <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	8c1a      	ldrh	r2, [r3, #32]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80032c4:	e000      	b.n	80032c8 <onAutocompleteRequest+0x118>
        return;
 80032c6:	bf00      	nop
}
 80032c8:	3720      	adds	r7, #32
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200000b8 	.word	0x200000b8

080032d4 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80032e6:	461c      	mov	r4, r3
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fc ff99 	bl	8000224 <strlen>
 80032f2:	4603      	mov	r3, r0
 80032f4:	4423      	add	r3, r4
 80032f6:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	210d      	movs	r1, #13
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e007      	b.n	8003318 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2120      	movs	r1, #32
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	3301      	adds	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	429a      	cmp	r2, r3
 800331e:	d3f3      	bcc.n	8003308 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	210d      	movs	r1, #13
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
    impl->inputLineLength = 0;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2200      	movs	r2, #0
 800332e:	861a      	strh	r2, [r3, #48]	@ 0x30

    impl->cursorPos = 0;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2200      	movs	r2, #0
 8003334:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}

0800333e <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8003348:	6838      	ldr	r0, [r7, #0]
 800334a:	f7fc ff6b 	bl	8000224 <strlen>
 800334e:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e00b      	b.n	800336e <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6839      	ldr	r1, [r7, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	440a      	add	r2, r1
 8003360:	7812      	ldrb	r2, [r2, #0]
 8003362:	4611      	mov	r1, r2
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3301      	adds	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d3ef      	bcc.n	8003356 <writeToOutput+0x18>
    }
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <moveCursor>:

static void moveCursor(EmbeddedCli* cli, uint16_t count, bool direction) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	807b      	strh	r3, [r7, #2]
 800338c:	4613      	mov	r3, r2
 800338e:	707b      	strb	r3, [r7, #1]
    // Check if we need to send any command
    if (count == 0)
 8003390:	887b      	ldrh	r3, [r7, #2]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d020      	beq.n	80033d8 <moveCursor+0x58>
        return;

    // 5 = uint16_t max, 3 = escape sequence, 1 = string termination
    char escBuffer[5 + 3 + 1] = { 0 };
 8003396:	f107 030c 	add.w	r3, r7, #12
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	721a      	strb	r2, [r3, #8]
    char dirChar = direction ? escSeqCursorRight[2] : escSeqCursorLeft[2];
 80033a2:	787b      	ldrb	r3, [r7, #1]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d004      	beq.n	80033b2 <moveCursor+0x32>
 80033a8:	4b0d      	ldr	r3, [pc, #52]	@ (80033e0 <moveCursor+0x60>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3302      	adds	r3, #2
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	e003      	b.n	80033ba <moveCursor+0x3a>
 80033b2:	4b0c      	ldr	r3, [pc, #48]	@ (80033e4 <moveCursor+0x64>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3302      	adds	r3, #2
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	75fb      	strb	r3, [r7, #23]
    sprintf(escBuffer, "\x1B[%u%c", count, dirChar);
 80033bc:	887a      	ldrh	r2, [r7, #2]
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	f107 000c 	add.w	r0, r7, #12
 80033c4:	4908      	ldr	r1, [pc, #32]	@ (80033e8 <moveCursor+0x68>)
 80033c6:	f008 fc3b 	bl	800bc40 <siprintf>
    writeToOutput(cli, escBuffer);
 80033ca:	f107 030c 	add.w	r3, r7, #12
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ffb4 	bl	800333e <writeToOutput>
 80033d6:	e000      	b.n	80033da <moveCursor+0x5a>
        return;
 80033d8:	bf00      	nop
}
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	200000bc 	.word	0x200000bc
 80033e4:	200000c0 	.word	0x200000c0
 80033e8:	0800d5d0 	.word	0x0800d5d0

080033ec <isControlChar>:

static bool isControlChar(char c) {
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	2b0d      	cmp	r3, #13
 80033fa:	d00b      	beq.n	8003414 <isControlChar+0x28>
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	2b0a      	cmp	r3, #10
 8003400:	d008      	beq.n	8003414 <isControlChar+0x28>
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d005      	beq.n	8003414 <isControlChar+0x28>
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	2b09      	cmp	r3, #9
 800340c:	d002      	beq.n	8003414 <isControlChar+0x28>
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	2b7f      	cmp	r3, #127	@ 0x7f
 8003412:	d101      	bne.n	8003418 <isControlChar+0x2c>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <isControlChar+0x2e>
 8003418:	2300      	movs	r3, #0
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	b2db      	uxtb	r3, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	2b1f      	cmp	r3, #31
 800343a:	d904      	bls.n	8003446 <isDisplayableChar+0x1a>
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	2b7e      	cmp	r3, #126	@ 0x7e
 8003440:	d801      	bhi.n	8003446 <isDisplayableChar+0x1a>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <isDisplayableChar+0x1c>
 8003446:	2300      	movs	r3, #0
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	b2db      	uxtb	r3, r3
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	88da      	ldrh	r2, [r3, #6]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	889b      	ldrh	r3, [r3, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d306      	bcc.n	800347c <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	88da      	ldrh	r2, [r3, #6]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	889b      	ldrh	r3, [r3, #4]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	b29b      	uxth	r3, r3
 800347a:	e009      	b.n	8003490 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	891a      	ldrh	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	889b      	ldrh	r3, [r3, #4]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	b29a      	uxth	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	88db      	ldrh	r3, [r3, #6]
 800348c:	4413      	add	r3, r2
 800348e:	b29b      	uxth	r3, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
    char a = '\0';
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	889a      	ldrh	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	88db      	ldrh	r3, [r3, #6]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d014      	beq.n	80034de <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	8892      	ldrh	r2, [r2, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	889b      	ldrh	r3, [r3, #4]
 80034c6:	3301      	adds	r3, #1
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	8912      	ldrh	r2, [r2, #8]
 80034ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80034d2:	fb01 f202 	mul.w	r2, r1, r2
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	b29a      	uxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	809a      	strh	r2, [r3, #4]
    }
    return a;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	88db      	ldrh	r3, [r3, #6]
 80034fc:	3301      	adds	r3, #1
 80034fe:	b29b      	uxth	r3, r3
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	8912      	ldrh	r2, [r2, #8]
 8003504:	fbb3 f1f2 	udiv	r1, r3, r2
 8003508:	fb01 f202 	mul.w	r2, r1, r2
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	889b      	ldrh	r3, [r3, #4]
 8003514:	89fa      	ldrh	r2, [r7, #14]
 8003516:	429a      	cmp	r2, r3
 8003518:	d00b      	beq.n	8003532 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	88d2      	ldrh	r2, [r2, #6]
 8003522:	4413      	add	r3, r2
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	89fa      	ldrh	r2, [r7, #14]
 800352c:	80da      	strh	r2, [r3, #6]
        return true;
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <fifoBufPush+0x48>
    }
    return false;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 800354a:	6838      	ldr	r0, [r7, #0]
 800354c:	f7fc fe6a 	bl	8000224 <strlen>
 8003550:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	889b      	ldrh	r3, [r3, #4]
 8003556:	461a      	mov	r2, r3
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	3301      	adds	r3, #1
 800355c:	429a      	cmp	r2, r3
 800355e:	d201      	bcs.n	8003564 <historyPut+0x24>
        return false;
 8003560:	2300      	movs	r3, #0
 8003562:	e04d      	b.n	8003600 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8003564:	6839      	ldr	r1, [r7, #0]
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f86a 	bl	8003640 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 800356c:	e024      	b.n	80035b8 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	891b      	ldrh	r3, [r3, #8]
 8003572:	4619      	mov	r1, r3
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f847 	bl	8003608 <historyGet>
 800357a:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 800357c:	6978      	ldr	r0, [r7, #20]
 800357e:	f7fc fe51 	bl	8000224 <strlen>
 8003582:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	461a      	mov	r2, r3
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	3301      	adds	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	889b      	ldrh	r3, [r3, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	3301      	adds	r3, #1
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d20a      	bcs.n	80035c2 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	891b      	ldrh	r3, [r3, #8]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	891b      	ldrh	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1d6      	bne.n	800356e <historyPut+0x2e>
 80035c0:	e000      	b.n	80035c4 <historyPut+0x84>
            break;
 80035c2:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	891b      	ldrh	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	3301      	adds	r3, #1
 80035d4:	18d0      	adds	r0, r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	4619      	mov	r1, r3
 80035de:	f008 fc33 	bl	800be48 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	3301      	adds	r3, #1
 80035ea:	461a      	mov	r2, r3
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	f008 fce0 	bl	800bfb2 <memcpy>
    ++history->itemsCount;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	891b      	ldrh	r3, [r3, #8]
 80035f6:	3301      	adds	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	811a      	strh	r2, [r3, #8]

    return true;
 80035fe:	2301      	movs	r3, #1
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <historyGet+0x1c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	891b      	ldrh	r3, [r3, #8]
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	429a      	cmp	r2, r3
 8003622:	d901      	bls.n	8003628 <historyGet+0x20>
        return NULL;
 8003624:	2300      	movs	r3, #0
 8003626:	e007      	b.n	8003638 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	887a      	ldrh	r2, [r7, #2]
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f937 	bl	80028a4 <embeddedCliGetToken>
 8003636:	4603      	mov	r3, r0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d04c      	beq.n	80036ea <historyRemove+0xaa>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	891b      	ldrh	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d048      	beq.n	80036ea <historyRemove+0xaa>
        return;
    char *item = NULL;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 800365c:	2301      	movs	r3, #1
 800365e:	827b      	strh	r3, [r7, #18]
 8003660:	e013      	b.n	800368a <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	8a7a      	ldrh	r2, [r7, #18]
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff f935 	bl	80028da <embeddedCliGetTokenVariable>
 8003670:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8003672:	6839      	ldr	r1, [r7, #0]
 8003674:	6978      	ldr	r0, [r7, #20]
 8003676:	f7fc fdcb 	bl	8000210 <strcmp>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <historyRemove+0x56>
            break;
        }
        item = NULL;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8003684:	8a7b      	ldrh	r3, [r7, #18]
 8003686:	3301      	adds	r3, #1
 8003688:	827b      	strh	r3, [r7, #18]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	891b      	ldrh	r3, [r3, #8]
 800368e:	8a7a      	ldrh	r2, [r7, #18]
 8003690:	429a      	cmp	r2, r3
 8003692:	d9e6      	bls.n	8003662 <historyRemove+0x22>
 8003694:	e000      	b.n	8003698 <historyRemove+0x58>
            break;
 8003696:	bf00      	nop
    }
    if (item == NULL)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d027      	beq.n	80036ee <historyRemove+0xae>
        return;

    --history->itemsCount;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	891b      	ldrh	r3, [r3, #8]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 80036aa:	8a7a      	ldrh	r2, [r7, #18]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	891b      	ldrh	r3, [r3, #8]
 80036b0:	3301      	adds	r3, #1
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d01d      	beq.n	80036f2 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f7fc fdb4 	bl	8000224 <strlen>
 80036bc:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	4619      	mov	r1, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3301      	adds	r3, #1
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	441a      	add	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	1acb      	subs	r3, r1, r3
 80036d4:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3301      	adds	r3, #1
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4413      	add	r3, r2
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	4619      	mov	r1, r3
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f008 fbb0 	bl	800be48 <memmove>
 80036e8:	e004      	b.n	80036f4 <historyRemove+0xb4>
        return;
 80036ea:	bf00      	nop
 80036ec:	e002      	b.n	80036f4 <historyRemove+0xb4>
        return;
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <historyRemove+0xb4>
        return;
 80036f2:	bf00      	nop
}
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <getTokenPosition+0x18>
 800370c:	887b      	ldrh	r3, [r7, #2]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8003712:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003716:	e028      	b.n	800376a <getTokenPosition+0x70>
    uint16_t i = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 800371c:	2301      	movs	r3, #1
 800371e:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 8003720:	89ba      	ldrh	r2, [r7, #12]
 8003722:	887b      	ldrh	r3, [r7, #2]
 8003724:	429a      	cmp	r2, r3
 8003726:	d013      	beq.n	8003750 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8003728:	89fb      	ldrh	r3, [r7, #14]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <getTokenPosition+0x4e>
            ++tokenCount;
 8003734:	89bb      	ldrh	r3, [r7, #12]
 8003736:	3301      	adds	r3, #1
 8003738:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 800373a:	89fb      	ldrh	r3, [r7, #14]
 800373c:	3301      	adds	r3, #1
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8003748:	89fb      	ldrh	r3, [r7, #14]
 800374a:	3301      	adds	r3, #1
 800374c:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 800374e:	e7e7      	b.n	8003720 <getTokenPosition+0x26>
            break;
 8003750:	bf00      	nop
 8003752:	e000      	b.n	8003756 <getTokenPosition+0x5c>
                break;
 8003754:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8003756:	89fb      	ldrh	r3, [r7, #14]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <getTokenPosition+0x6c>
        return i;
 8003762:	89fb      	ldrh	r3, [r7, #14]
 8003764:	e001      	b.n	800376a <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8003766:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <findCategoryIndex>:

/*************************************************
 *                   Helper API                  *
 *************************************************/
static int findCategoryIndex(const char* cat, const char* categories[], int catCount) {
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < catCount; i++) {
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e010      	b.n	80037aa <findCategoryIndex+0x34>
        if (strcmp(cat, categories[i]) == 0) {
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	4413      	add	r3, r2
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4619      	mov	r1, r3
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f7fc fd3b 	bl	8000210 <strcmp>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <findCategoryIndex+0x2e>
            return i;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	e008      	b.n	80037b6 <findCategoryIndex+0x40>
    for (int i = 0; i < catCount; i++) {
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3301      	adds	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	dbea      	blt.n	8003788 <findCategoryIndex+0x12>
        }
    }
    return -1;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <printAlignedColumn>:

static void printAlignedColumn(EmbeddedCli *cli, const char *str, int colWidth) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
    int len = strlen(str);
 80037cc:	68b8      	ldr	r0, [r7, #8]
 80037ce:	f7fc fd29 	bl	8000224 <strlen>
 80037d2:	4603      	mov	r3, r0
 80037d4:	613b      	str	r3, [r7, #16]
    writeToOutput(cli, str);
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff fdb0 	bl	800333e <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e006      	b.n	80037f2 <printAlignedColumn+0x32>
        writeToOutput(cli, " ");
 80037e4:	4908      	ldr	r1, [pc, #32]	@ (8003808 <printAlignedColumn+0x48>)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f7ff fda9 	bl	800333e <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3301      	adds	r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	dbf2      	blt.n	80037e4 <printAlignedColumn+0x24>
    }
}
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	0800d5bc 	.word	0x0800d5bc

0800380c <CMD_Help>:
void CMD_Help(EmbeddedCli *cli, char *tokens, void *context) {
 800380c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003810:	b095      	sub	sp, #84	@ 0x54
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	637b      	str	r3, [r7, #52]	@ 0x34

    if (impl->bindingsCount == 0) {
 8003820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003822:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <CMD_Help+0x32>
        writeToOutput(cli, "Help is not available");
 8003828:	498c      	ldr	r1, [pc, #560]	@ (8003a5c <CMD_Help+0x250>)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7ff fd87 	bl	800333e <writeToOutput>
        writeToOutput(cli, lineBreak);
 8003830:	4b8b      	ldr	r3, [pc, #556]	@ (8003a60 <CMD_Help+0x254>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4619      	mov	r1, r3
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f7ff fd81 	bl	800333e <writeToOutput>
        return;
 800383c:	e1ba      	b.n	8003bb4 <CMD_Help+0x3a8>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 800383e:	68b8      	ldr	r0, [r7, #8]
 8003840:	f7ff f866 	bl	8002910 <embeddedCliGetTokenCount>
 8003844:	4603      	mov	r3, r0
 8003846:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (tokenCount == 0) {
 8003848:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 80f6 	bne.w	8003a3c <CMD_Help+0x230>
 8003850:	466b      	mov	r3, sp
 8003852:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 8003854:	2320      	movs	r3, #32
 8003856:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char* categories[MAX_CAT];
 8003858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
 800385e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003860:	2200      	movs	r2, #0
 8003862:	4698      	mov	r8, r3
 8003864:	4691      	mov	r9, r2
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003872:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003876:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387c:	2200      	movs	r2, #0
 800387e:	461c      	mov	r4, r3
 8003880:	4615      	mov	r5, r2
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	016b      	lsls	r3, r5, #5
 800388c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003890:	0162      	lsls	r2, r4, #5
 8003892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	3307      	adds	r3, #7
 8003898:	08db      	lsrs	r3, r3, #3
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	ebad 0d03 	sub.w	sp, sp, r3
 80038a0:	466b      	mov	r3, sp
 80038a2:	3303      	adds	r3, #3
 80038a4:	089b      	lsrs	r3, r3, #2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	623b      	str	r3, [r7, #32]
        int catCount = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

        for (int i = 0; i < impl->bindingsCount; i++) {
 80038ae:	2300      	movs	r3, #0
 80038b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038b2:	e02d      	b.n	8003910 <CMD_Help+0x104>
            const char* cat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 80038b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80038b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038ba:	4613      	mov	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <CMD_Help+0xd2>
 80038ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038cc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80038ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038d0:	4613      	mov	r3, r2
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	440b      	add	r3, r1
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	e000      	b.n	80038e0 <CMD_Help+0xd4>
 80038de:	4b61      	ldr	r3, [pc, #388]	@ (8003a64 <CMD_Help+0x258>)
 80038e0:	61bb      	str	r3, [r7, #24]
            int idx = findCategoryIndex(cat, categories, catCount);
 80038e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038e4:	6a39      	ldr	r1, [r7, #32]
 80038e6:	69b8      	ldr	r0, [r7, #24]
 80038e8:	f7ff ff45 	bl	8003776 <findCategoryIndex>
 80038ec:	6178      	str	r0, [r7, #20]
            if (idx < 0 && catCount < MAX_CAT) {
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da0a      	bge.n	800390a <CMD_Help+0xfe>
 80038f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f8:	429a      	cmp	r2, r3
 80038fa:	da06      	bge.n	800390a <CMD_Help+0xfe>
                categories[catCount++] = cat;
 80038fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003902:	6a3a      	ldr	r2, [r7, #32]
 8003904:	69b9      	ldr	r1, [r7, #24]
 8003906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < impl->bindingsCount; i++) {
 800390a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800390c:	3301      	adds	r3, #1
 800390e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003912:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003914:	461a      	mov	r2, r3
 8003916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003918:	4293      	cmp	r3, r2
 800391a:	dbcb      	blt.n	80038b4 <CMD_Help+0xa8>
            }
        }

        for (int c = 0; c < catCount; c++) {
 800391c:	2300      	movs	r3, #0
 800391e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003920:	e085      	b.n	8003a2e <CMD_Help+0x222>
            writeToOutput(cli, "[");
 8003922:	4951      	ldr	r1, [pc, #324]	@ (8003a68 <CMD_Help+0x25c>)
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7ff fd0a 	bl	800333e <writeToOutput>
            writeToOutput(cli, categories[c]);
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800392e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003932:	4619      	mov	r1, r3
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff fd02 	bl	800333e <writeToOutput>
            writeToOutput(cli, "]");
 800393a:	494c      	ldr	r1, [pc, #304]	@ (8003a6c <CMD_Help+0x260>)
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f7ff fcfe 	bl	800333e <writeToOutput>
            writeToOutput(cli, lineBreak);
 8003942:	4b47      	ldr	r3, [pc, #284]	@ (8003a60 <CMD_Help+0x254>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4619      	mov	r1, r3
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7ff fcf8 	bl	800333e <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 800394e:	2300      	movs	r3, #0
 8003950:	643b      	str	r3, [r7, #64]	@ 0x40
 8003952:	e05d      	b.n	8003a10 <CMD_Help+0x204>
                const char* cmdCat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 8003954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003956:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003958:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	440b      	add	r3, r1
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <CMD_Help+0x172>
 800396a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800396e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003970:	4613      	mov	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	4413      	add	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	440b      	add	r3, r1
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	e000      	b.n	8003980 <CMD_Help+0x174>
 800397e:	4b39      	ldr	r3, [pc, #228]	@ (8003a64 <CMD_Help+0x258>)
 8003980:	61fb      	str	r3, [r7, #28]
                if (strcmp(cmdCat, categories[c]) == 0) {
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398a:	4619      	mov	r1, r3
 800398c:	69f8      	ldr	r0, [r7, #28]
 800398e:	f7fc fc3f 	bl	8000210 <strcmp>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d138      	bne.n	8003a0a <CMD_Help+0x1fe>
                	writeToOutput(cli, "    ");
 8003998:	4935      	ldr	r1, [pc, #212]	@ (8003a70 <CMD_Help+0x264>)
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff fccf 	bl	800333e <writeToOutput>
                	printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 80039a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80039a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2210      	movs	r2, #16
 80039b4:	4619      	mov	r1, r3
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7ff ff02 	bl	80037c0 <printAlignedColumn>
                	writeToOutput(cli, "| ");
 80039bc:	492d      	ldr	r1, [pc, #180]	@ (8003a74 <CMD_Help+0x268>)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f7ff fcbd 	bl	800333e <writeToOutput>
                	if (impl->bindings[i].help) {
 80039c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80039c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039ca:	4613      	mov	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	440b      	add	r3, r1
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <CMD_Help+0x1ea>
                	    writeToOutput(cli, impl->bindings[i].help);
 80039da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80039de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039e0:	4613      	mov	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	440b      	add	r3, r1
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4619      	mov	r1, r3
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff fca5 	bl	800333e <writeToOutput>
 80039f4:	e003      	b.n	80039fe <CMD_Help+0x1f2>
                	} else {
                	    writeToOutput(cli, "(no help)");
 80039f6:	4920      	ldr	r1, [pc, #128]	@ (8003a78 <CMD_Help+0x26c>)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff fca0 	bl	800333e <writeToOutput>
                	}
                	writeToOutput(cli, lineBreak);
 80039fe:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <CMD_Help+0x254>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4619      	mov	r1, r3
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f7ff fc9a 	bl	800333e <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 8003a0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a12:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a14:	461a      	mov	r2, r3
 8003a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	db9b      	blt.n	8003954 <CMD_Help+0x148>
                }
            }
            writeToOutput(cli, lineBreak);
 8003a1c:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <CMD_Help+0x254>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4619      	mov	r1, r3
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff fc8b 	bl	800333e <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 8003a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a32:	429a      	cmp	r2, r3
 8003a34:	f6ff af75 	blt.w	8003922 <CMD_Help+0x116>
 8003a38:	46b5      	mov	sp, r6
 8003a3a:	e0bb      	b.n	8003bb4 <CMD_Help+0x3a8>
        }
    } else if (tokenCount == 1) {
 8003a3c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	f040 80ae 	bne.w	8003ba0 <CMD_Help+0x394>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8003a44:	2101      	movs	r1, #1
 8003a46:	68b8      	ldr	r0, [r7, #8]
 8003a48:	f7fe ff2c 	bl	80028a4 <embeddedCliGetToken>
 8003a4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool found = false;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8003a54:	2300      	movs	r3, #0
 8003a56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a58:	e08f      	b.n	8003b7a <CMD_Help+0x36e>
 8003a5a:	bf00      	nop
 8003a5c:	0800d5d8 	.word	0x0800d5d8
 8003a60:	200000b8 	.word	0x200000b8
 8003a64:	0800d5f0 	.word	0x0800d5f0
 8003a68:	0800d600 	.word	0x0800d600
 8003a6c:	0800d604 	.word	0x0800d604
 8003a70:	0800d608 	.word	0x0800d608
 8003a74:	0800d610 	.word	0x0800d610
 8003a78:	0800d614 	.word	0x0800d614
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	440b      	add	r3, r1
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fc fbbd 	bl	8000210 <strcmp>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d16b      	bne.n	8003b74 <CMD_Help+0x368>
                found = true;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                writeToOutput(cli, "Command: ");
 8003aa2:	4946      	ldr	r1, [pc, #280]	@ (8003bbc <CMD_Help+0x3b0>)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff fc4a 	bl	800333e <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 8003aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003aae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	440b      	add	r3, r1
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4619      	mov	r1, r3
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f7ff fc3d 	bl	800333e <writeToOutput>
                writeToOutput(cli, lineBreak);
 8003ac4:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc0 <CMD_Help+0x3b4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f7ff fc37 	bl	800333e <writeToOutput>

                writeToOutput(cli, "Category: ");
 8003ad0:	493c      	ldr	r1, [pc, #240]	@ (8003bc4 <CMD_Help+0x3b8>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f7ff fc33 	bl	800333e <writeToOutput>
                writeToOutput(cli, impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized");
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ada:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003adc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	440b      	add	r3, r1
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <CMD_Help+0x2f6>
 8003aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003af2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003af4:	4613      	mov	r3, r2
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4413      	add	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	440b      	add	r3, r1
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	e000      	b.n	8003b04 <CMD_Help+0x2f8>
 8003b02:	4b31      	ldr	r3, [pc, #196]	@ (8003bc8 <CMD_Help+0x3bc>)
 8003b04:	4619      	mov	r1, r3
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f7ff fc19 	bl	800333e <writeToOutput>
                writeToOutput(cli, lineBreak);
 8003b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc0 <CMD_Help+0x3b4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f7ff fc13 	bl	800333e <writeToOutput>

                if (impl->bindings[i].help) {
 8003b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003b1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b1e:	4613      	mov	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4413      	add	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	440b      	add	r3, r1
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d017      	beq.n	8003b5e <CMD_Help+0x352>
                    writeToOutput(cli, "Help: ");
 8003b2e:	4927      	ldr	r1, [pc, #156]	@ (8003bcc <CMD_Help+0x3c0>)
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7ff fc04 	bl	800333e <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 8003b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b38:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003b3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	440b      	add	r3, r1
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff fbf7 	bl	800333e <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8003b50:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc0 <CMD_Help+0x3b4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4619      	mov	r1, r3
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f7ff fbf1 	bl	800333e <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 8003b5c:	e014      	b.n	8003b88 <CMD_Help+0x37c>
                    writeToOutput(cli, "(no help)");
 8003b5e:	491c      	ldr	r1, [pc, #112]	@ (8003bd0 <CMD_Help+0x3c4>)
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff fbec 	bl	800333e <writeToOutput>
                    writeToOutput(cli, lineBreak);
 8003b66:	4b16      	ldr	r3, [pc, #88]	@ (8003bc0 <CMD_Help+0x3b4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7ff fbe6 	bl	800333e <writeToOutput>
                break;
 8003b72:	e009      	b.n	8003b88 <CMD_Help+0x37c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8003b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b76:	3301      	adds	r3, #1
 8003b78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b82:	4293      	cmp	r3, r2
 8003b84:	f6ff af7a 	blt.w	8003a7c <CMD_Help+0x270>
            }
        }
        if (!found) {
 8003b88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003b8c:	f083 0301 	eor.w	r3, r3, #1
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00e      	beq.n	8003bb4 <CMD_Help+0x3a8>
            onUnknownCommand(cli, cmdName);
 8003b96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f81d 	bl	8003bd8 <onUnknownCommand>
 8003b9e:	e009      	b.n	8003bb4 <CMD_Help+0x3a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8003ba0:	490c      	ldr	r1, [pc, #48]	@ (8003bd4 <CMD_Help+0x3c8>)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff fbcb 	bl	800333e <writeToOutput>
        writeToOutput(cli, lineBreak);
 8003ba8:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <CMD_Help+0x3b4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4619      	mov	r1, r3
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff fbc5 	bl	800333e <writeToOutput>
    }
}
 8003bb4:	3754      	adds	r7, #84	@ 0x54
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bbc:	0800d620 	.word	0x0800d620
 8003bc0:	200000b8 	.word	0x200000b8
 8003bc4:	0800d62c 	.word	0x0800d62c
 8003bc8:	0800d5f0 	.word	0x0800d5f0
 8003bcc:	0800d638 	.word	0x0800d638
 8003bd0:	0800d614 	.word	0x0800d614
 8003bd4:	0800d640 	.word	0x0800d640

08003bd8 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8003be2:	490b      	ldr	r1, [pc, #44]	@ (8003c10 <onUnknownCommand+0x38>)
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fbaa 	bl	800333e <writeToOutput>
    writeToOutput(cli, name);
 8003bea:	6839      	ldr	r1, [r7, #0]
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fba6 	bl	800333e <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8003bf2:	4908      	ldr	r1, [pc, #32]	@ (8003c14 <onUnknownCommand+0x3c>)
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff fba2 	bl	800333e <writeToOutput>
    writeToOutput(cli, lineBreak);
 8003bfa:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <onUnknownCommand+0x40>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fb9c 	bl	800333e <writeToOutput>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	0800d670 	.word	0x0800d670
 8003c14:	0800d684 	.word	0x0800d684
 8003c18:	200000b8 	.word	0x200000b8

08003c1c <MIN_Timeout_Handler>:
#include "UART/uart_driver.h"
#include "Struct/gpio_state.h"

MIN_Context_t F7_MinCtx;

void MIN_Timeout_Handler(MIN_Context_t *ctx) {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	6078      	str	r0, [r7, #4]
    LOG("MIN-Timeout!");
 8003c24:	f107 0309 	add.w	r3, r7, #9
 8003c28:	f107 020a 	add.w	r2, r7, #10
 8003c2c:	f107 010b 	add.w	r1, r7, #11
 8003c30:	f107 000c 	add.w	r0, r7, #12
 8003c34:	f000 fd44 	bl	80046c0 <Utils_GetWorkingTime>
 8003c38:	7afb      	ldrb	r3, [r7, #11]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	7abb      	ldrb	r3, [r7, #10]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	7a7b      	ldrb	r3, [r7, #9]
 8003c42:	4618      	mov	r0, r3
 8003c44:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <MIN_Timeout_Handler+0x3c>)
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4804      	ldr	r0, [pc, #16]	@ (8003c5c <MIN_Timeout_Handler+0x40>)
 8003c4c:	f007 ff4a 	bl	800bae4 <iprintf>
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	0800d6e0 	.word	0x0800d6e0
 8003c5c:	0800d6b8 	.word	0x0800d6b8

08003c60 <MIN_Process_Init>:

void MIN_Process_Init(void){
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af02      	add	r7, sp, #8
	MIN_Context_Init(&F7_MinCtx, F7Disco_PORT);
 8003c66:	2100      	movs	r1, #0
 8003c68:	480f      	ldr	r0, [pc, #60]	@ (8003ca8 <MIN_Process_Init+0x48>)
 8003c6a:	f001 fd93 	bl	8005794 <MIN_Context_Init>
	CPROCESS_Init();
 8003c6e:	f7fd f853 	bl	8000d18 <CPROCESS_Init>
	MIN_RegisterTimeoutCallback(&F7_MinCtx, MIN_Timeout_Handler);
 8003c72:	490e      	ldr	r1, [pc, #56]	@ (8003cac <MIN_Process_Init+0x4c>)
 8003c74:	480c      	ldr	r0, [pc, #48]	@ (8003ca8 <MIN_Process_Init+0x48>)
 8003c76:	f001 fdda 	bl	800582e <MIN_RegisterTimeoutCallback>
	LOG("MIN Process Init!");
 8003c7a:	1c7b      	adds	r3, r7, #1
 8003c7c:	1cba      	adds	r2, r7, #2
 8003c7e:	1cf9      	adds	r1, r7, #3
 8003c80:	1d38      	adds	r0, r7, #4
 8003c82:	f000 fd1d 	bl	80046c0 <Utils_GetWorkingTime>
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	78bb      	ldrb	r3, [r7, #2]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	787b      	ldrb	r3, [r7, #1]
 8003c90:	4618      	mov	r0, r3
 8003c92:	4b07      	ldr	r3, [pc, #28]	@ (8003cb0 <MIN_Process_Init+0x50>)
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	4603      	mov	r3, r0
 8003c98:	4806      	ldr	r0, [pc, #24]	@ (8003cb4 <MIN_Process_Init+0x54>)
 8003c9a:	f007 ff23 	bl	800bae4 <iprintf>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	200013d0 	.word	0x200013d0
 8003cac:	08003c1d 	.word	0x08003c1d
 8003cb0:	0800d6e0 	.word	0x0800d6e0
 8003cb4:	0800d6ec 	.word	0x0800d6ec

08003cb8 <MIN_Processing>:

void MIN_Processing(void){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
    while (UART_Driver_IsDataAvailable(USART6)) {
 8003cbe:	e012      	b.n	8003ce6 <MIN_Processing+0x2e>
        int data = UART_Driver_Read(USART6);
 8003cc0:	4810      	ldr	r0, [pc, #64]	@ (8003d04 <MIN_Processing+0x4c>)
 8003cc2:	f7fd fc6b 	bl	800159c <UART_Driver_Read>
 8003cc6:	6078      	str	r0, [r7, #4]
        if (data >= 0) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	db0b      	blt.n	8003ce6 <MIN_Processing+0x2e>
            uint8_t byte = (uint8_t)data;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	70fb      	strb	r3, [r7, #3]
            MIN_App_Poll(&F7_MinCtx, &byte, 1);
 8003cd4:	1cfb      	adds	r3, r7, #3
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	4619      	mov	r1, r3
 8003cda:	480b      	ldr	r0, [pc, #44]	@ (8003d08 <MIN_Processing+0x50>)
 8003cdc:	f001 fdb6 	bl	800584c <MIN_App_Poll>
            CPROCESS_SetState(CPROCESS_BUSY);
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	f7fd f823 	bl	8000d2c <CPROCESS_SetState>
    while (UART_Driver_IsDataAvailable(USART6)) {
 8003ce6:	4807      	ldr	r0, [pc, #28]	@ (8003d04 <MIN_Processing+0x4c>)
 8003ce8:	f7fd fc9c 	bl	8001624 <UART_Driver_IsDataAvailable>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e6      	bne.n	8003cc0 <MIN_Processing+0x8>
        }
    }
	MIN_App_Poll(&F7_MinCtx, NULL, 0);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4804      	ldr	r0, [pc, #16]	@ (8003d08 <MIN_Processing+0x50>)
 8003cf8:	f001 fda8 	bl	800584c <MIN_App_Poll>
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40011400 	.word	0x40011400
 8003d08:	200013d0 	.word	0x200013d0

08003d0c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	601a      	str	r2, [r3, #0]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	601a      	str	r2, [r3, #0]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f043 0202 	orr.w	r2, r3, #2
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	605a      	str	r2, [r3, #4]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_SPI_DisableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_DisableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f023 0202 	bic.w	r2, r3, #2
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	605a      	str	r2, [r3, #4]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	330c      	adds	r3, #12
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003dae:	4a0c      	ldr	r2, [pc, #48]	@ (8003de0 <LL_DMA_EnableStream+0x3c>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4908      	ldr	r1, [pc, #32]	@ (8003de0 <LL_DMA_EnableStream+0x3c>)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	7812      	ldrb	r2, [r2, #0]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	440a      	add	r2, r1
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	6013      	str	r3, [r2, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	0800dd18 	.word	0x0800dd18

08003de4 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003dee:	4a0c      	ldr	r2, [pc, #48]	@ (8003e20 <LL_DMA_DisableStream+0x3c>)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4413      	add	r3, r2
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4908      	ldr	r1, [pc, #32]	@ (8003e20 <LL_DMA_DisableStream+0x3c>)
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	440a      	add	r2, r1
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	4611      	mov	r1, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	6013      	str	r3, [r2, #0]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	0800dd18 	.word	0x0800dd18

08003e24 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8003e30:	4a0d      	ldr	r2, [pc, #52]	@ (8003e68 <LL_DMA_SetMemorySize+0x44>)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4413      	add	r3, r2
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8003e44:	4908      	ldr	r1, [pc, #32]	@ (8003e68 <LL_DMA_SetMemorySize+0x44>)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	440b      	add	r3, r1
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	440b      	add	r3, r1
 8003e52:	4619      	mov	r1, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	0800dd18 	.word	0x0800dd18

08003e6c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003e78:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb0 <LL_DMA_SetDataLength+0x44>)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <LL_DMA_SetDataLength+0x48>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	4908      	ldr	r1, [pc, #32]	@ (8003eb0 <LL_DMA_SetDataLength+0x44>)
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	440a      	add	r2, r1
 8003e92:	7812      	ldrb	r2, [r2, #0]
 8003e94:	4611      	mov	r1, r2
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	440a      	add	r2, r1
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	0800dd18 	.word	0x0800dd18
 8003eb4:	ffff0000 	.word	0xffff0000

08003eb8 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b40      	cmp	r3, #64	@ 0x40
 8003eca:	d114      	bne.n	8003ef6 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8003ecc:	4a17      	ldr	r2, [pc, #92]	@ (8003f2c <LL_DMA_ConfigAddresses+0x74>)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4413      	add	r3, r2
 8003eda:	461a      	mov	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 8003ee0:	4a12      	ldr	r2, [pc, #72]	@ (8003f2c <LL_DMA_ConfigAddresses+0x74>)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	461a      	mov	r2, r3
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 8003ef4:	e013      	b.n	8003f1e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8003ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8003f2c <LL_DMA_ConfigAddresses+0x74>)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4413      	add	r3, r2
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8003f0a:	4a08      	ldr	r2, [pc, #32]	@ (8003f2c <LL_DMA_ConfigAddresses+0x74>)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4413      	add	r3, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	60d3      	str	r3, [r2, #12]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	0800dd18 	.word	0x0800dd18

08003f30 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003f3c:	4a07      	ldr	r2, [pc, #28]	@ (8003f5c <LL_DMA_SetPeriphAddress+0x2c>)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4413      	add	r3, r2
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6093      	str	r3, [r2, #8]
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	0800dd18 	.word	0x0800dd18

08003f60 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	60da      	str	r2, [r3, #12]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <LL_DMA_ClearFlag_TE4>:
  * @rmtoll HIFCR  CTEIF4    LL_DMA_ClearFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2208      	movs	r2, #8
 8003f86:	60da      	str	r2, [r3, #12]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
 8003f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd0 <LL_DMA_EnableIT_TE+0x3c>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4413      	add	r3, r2
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4908      	ldr	r1, [pc, #32]	@ (8003fd0 <LL_DMA_EnableIT_TE+0x3c>)
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	7812      	ldrb	r2, [r2, #0]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f043 0304 	orr.w	r3, r3, #4
 8003fc0:	6013      	str	r3, [r2, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	0800dd18 	.word	0x0800dd18

08003fd4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003fde:	4a0c      	ldr	r2, [pc, #48]	@ (8004010 <LL_DMA_EnableIT_TC+0x3c>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4413      	add	r3, r2
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4908      	ldr	r1, [pc, #32]	@ (8004010 <LL_DMA_EnableIT_TC+0x3c>)
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f043 0310 	orr.w	r3, r3, #16
 8004000:	6013      	str	r3, [r2, #0]
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	0800dd18 	.word	0x0800dd18

08004014 <UpdateCRC16_XMODEM>:
    .transfer_state = SPI_TRANSFER_WAIT,
    .data_context = {0},
    .is_initialized = false
};

static uint16_t UpdateCRC16_XMODEM(uint16_t crc, uint8_t byte) {
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	460a      	mov	r2, r1
 800401e:	80fb      	strh	r3, [r7, #6]
 8004020:	4613      	mov	r3, r2
 8004022:	717b      	strb	r3, [r7, #5]
    const uint16_t polynomial = 0x1021; // CRC16 XMODEM
 8004024:	f241 0321 	movw	r3, #4129	@ 0x1021
 8004028:	81bb      	strh	r3, [r7, #12]
    crc ^= (uint16_t)byte << 8;
 800402a:	797b      	ldrb	r3, [r7, #5]
 800402c:	b21b      	sxth	r3, r3
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	b21a      	sxth	r2, r3
 8004032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004036:	4053      	eors	r3, r2
 8004038:	b21b      	sxth	r3, r3
 800403a:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 800403c:	2300      	movs	r3, #0
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e013      	b.n	800406a <UpdateCRC16_XMODEM+0x56>
        if (crc & 0x8000) {
 8004042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004046:	2b00      	cmp	r3, #0
 8004048:	da09      	bge.n	800405e <UpdateCRC16_XMODEM+0x4a>
            crc = (crc << 1) ^ polynomial;
 800404a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	b21a      	sxth	r2, r3
 8004052:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004056:	4053      	eors	r3, r2
 8004058:	b21b      	sxth	r3, r3
 800405a:	80fb      	strh	r3, [r7, #6]
 800405c:	e002      	b.n	8004064 <UpdateCRC16_XMODEM+0x50>
        } else {
            crc <<= 1;
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	3301      	adds	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	2b07      	cmp	r3, #7
 800406e:	d9e8      	bls.n	8004042 <UpdateCRC16_XMODEM+0x2e>
        }
    }
    return crc;
 8004070:	88fb      	ldrh	r3, [r7, #6]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <SPI_SlaveDevice_Init>:
{
    return &spi_device_instance;
}

Std_ReturnType SPI_SlaveDevice_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
    if (spi_device_instance.is_initialized) {
 8004084:	4b14      	ldr	r3, [pc, #80]	@ (80040d8 <SPI_SlaveDevice_Init+0x58>)
 8004086:	7d1b      	ldrb	r3, [r3, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <SPI_SlaveDevice_Init+0x10>
        return E_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e021      	b.n	80040d4 <SPI_SlaveDevice_Init+0x54>
    }

    LL_DMA_SetMemorySize(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, LL_DMA_MDATAALIGN_BYTE);
 8004090:	2200      	movs	r2, #0
 8004092:	2104      	movs	r1, #4
 8004094:	4811      	ldr	r0, [pc, #68]	@ (80040dc <SPI_SlaveDevice_Init+0x5c>)
 8004096:	f7ff fec5 	bl	8003e24 <LL_DMA_SetMemorySize>
    LL_DMA_SetPeriphAddress(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, LL_SPI_DMA_GetRegAddr(SPI_SLAVE_INSTANCE));
 800409a:	4811      	ldr	r0, [pc, #68]	@ (80040e0 <SPI_SlaveDevice_Init+0x60>)
 800409c:	f7ff fe76 	bl	8003d8c <LL_SPI_DMA_GetRegAddr>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	2104      	movs	r1, #4
 80040a6:	480d      	ldr	r0, [pc, #52]	@ (80040dc <SPI_SlaveDevice_Init+0x5c>)
 80040a8:	f7ff ff42 	bl	8003f30 <LL_DMA_SetPeriphAddress>

    LL_DMA_EnableIT_TC(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 80040ac:	2104      	movs	r1, #4
 80040ae:	480b      	ldr	r0, [pc, #44]	@ (80040dc <SPI_SlaveDevice_Init+0x5c>)
 80040b0:	f7ff ff90 	bl	8003fd4 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_TE(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 80040b4:	2104      	movs	r1, #4
 80040b6:	4809      	ldr	r0, [pc, #36]	@ (80040dc <SPI_SlaveDevice_Init+0x5c>)
 80040b8:	f7ff ff6c 	bl	8003f94 <LL_DMA_EnableIT_TE>

    toOBC_Init();
 80040bc:	f7fc fd94 	bl	8000be8 <toOBC_Init>
    spi_device_instance.data_context.is_valid = false;
 80040c0:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <SPI_SlaveDevice_Init+0x58>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	749a      	strb	r2, [r3, #18]
    spi_device_instance.is_initialized = true;
 80040c6:	4b04      	ldr	r3, [pc, #16]	@ (80040d8 <SPI_SlaveDevice_Init+0x58>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	751a      	strb	r2, [r3, #20]
    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 80040cc:	4b02      	ldr	r3, [pc, #8]	@ (80040d8 <SPI_SlaveDevice_Init+0x58>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
    return E_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200015e0 	.word	0x200015e0
 80040dc:	40026400 	.word	0x40026400
 80040e0:	40015000 	.word	0x40015000

080040e4 <SPI_SlaveDevice_CollectData>:

Std_ReturnType SPI_SlaveDevice_CollectData(uint8_t type, uint32_t sample, uint32_t data_addr)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	73fb      	strb	r3, [r7, #15]
    if (!spi_device_instance.is_initialized) {
 80040f2:	4b47      	ldr	r3, [pc, #284]	@ (8004210 <SPI_SlaveDevice_CollectData+0x12c>)
 80040f4:	7d1b      	ldrb	r3, [r3, #20]
 80040f6:	f083 0301 	eor.w	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <SPI_SlaveDevice_CollectData+0x20>
        return E_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e080      	b.n	8004206 <SPI_SlaveDevice_CollectData+0x122>
    }

    if (toOBC_GetState() != toOBC_IDLE) {
 8004104:	f7fc fdce 	bl	8000ca4 <toOBC_GetState>
 8004108:	4603      	mov	r3, r0
 800410a:	2b03      	cmp	r3, #3
 800410c:	d001      	beq.n	8004112 <SPI_SlaveDevice_CollectData+0x2e>
        return E_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e079      	b.n	8004206 <SPI_SlaveDevice_CollectData+0x122>
    }

    if (type > 3) {
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d901      	bls.n	800411c <SPI_SlaveDevice_CollectData+0x38>
        return E_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e074      	b.n	8004206 <SPI_SlaveDevice_CollectData+0x122>
    }

    if (sample < 1 || sample > 100000 || sample * 2 > RAM_D2_200KB_SIZE) {
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <SPI_SlaveDevice_CollectData+0x50>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4a3b      	ldr	r2, [pc, #236]	@ (8004214 <SPI_SlaveDevice_CollectData+0x130>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d804      	bhi.n	8004134 <SPI_SlaveDevice_CollectData+0x50>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8004132:	d901      	bls.n	8004138 <SPI_SlaveDevice_CollectData+0x54>
        return E_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e066      	b.n	8004206 <SPI_SlaveDevice_CollectData+0x122>
    }

    toOBC_SetState(toOBC_BUSY);
 8004138:	2002      	movs	r0, #2
 800413a:	f7fc fd67 	bl	8000c0c <toOBC_SetState>
    spi_device_instance.data_context.is_valid = false;
 800413e:	4b34      	ldr	r3, [pc, #208]	@ (8004210 <SPI_SlaveDevice_CollectData+0x12c>)
 8004140:	2200      	movs	r2, #0
 8004142:	749a      	strb	r2, [r3, #18]

    if (type == 0) {
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d159      	bne.n	80041fe <SPI_SlaveDevice_CollectData+0x11a>
        uint16_t crc = 0x0000;
 800414a:	2300      	movs	r3, #0
 800414c:	83fb      	strh	r3, [r7, #30]
        uint16_t *data = (uint16_t *)data_addr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	617b      	str	r3, [r7, #20]

        for (uint32_t i = 0; i < sample; i++) {
 8004152:	2300      	movs	r3, #0
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	e02b      	b.n	80041b0 <SPI_SlaveDevice_CollectData+0xcc>
            uint16_t value = (uint16_t)(i % 1001);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	4a2f      	ldr	r2, [pc, #188]	@ (8004218 <SPI_SlaveDevice_CollectData+0x134>)
 800415c:	fba2 1203 	umull	r1, r2, r2, r3
 8004160:	1a99      	subs	r1, r3, r2
 8004162:	0849      	lsrs	r1, r1, #1
 8004164:	440a      	add	r2, r1
 8004166:	0a52      	lsrs	r2, r2, #9
 8004168:	f240 31e9 	movw	r1, #1001	@ 0x3e9
 800416c:	fb01 f202 	mul.w	r2, r1, r2
 8004170:	1a9a      	subs	r2, r3, r2
 8004172:	4613      	mov	r3, r2
 8004174:	827b      	strh	r3, [r7, #18]
            data[i] = value;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4413      	add	r3, r2
 800417e:	8a7a      	ldrh	r2, [r7, #18]
 8004180:	801a      	strh	r2, [r3, #0]
            crc = UpdateCRC16_XMODEM(crc, (uint8_t)(value & 0xFF));
 8004182:	8a7b      	ldrh	r3, [r7, #18]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	8bfb      	ldrh	r3, [r7, #30]
 8004188:	4611      	mov	r1, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff ff42 	bl	8004014 <UpdateCRC16_XMODEM>
 8004190:	4603      	mov	r3, r0
 8004192:	83fb      	strh	r3, [r7, #30]
            crc = UpdateCRC16_XMODEM(crc, (uint8_t)((value >> 8) & 0xFF));
 8004194:	8a7b      	ldrh	r3, [r7, #18]
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	b29b      	uxth	r3, r3
 800419a:	b2da      	uxtb	r2, r3
 800419c:	8bfb      	ldrh	r3, [r7, #30]
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff ff37 	bl	8004014 <UpdateCRC16_XMODEM>
 80041a6:	4603      	mov	r3, r0
 80041a8:	83fb      	strh	r3, [r7, #30]
        for (uint32_t i = 0; i < sample; i++) {
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	3301      	adds	r3, #1
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d3cf      	bcc.n	8004158 <SPI_SlaveDevice_CollectData+0x74>
        }

        spi_device_instance.data_context.type = type;
 80041b8:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <SPI_SlaveDevice_CollectData+0x12c>)
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	7113      	strb	r3, [r2, #4]
        spi_device_instance.data_context.sample = sample;
 80041be:	4a14      	ldr	r2, [pc, #80]	@ (8004210 <SPI_SlaveDevice_CollectData+0x12c>)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	6093      	str	r3, [r2, #8]
        spi_device_instance.data_context.data_size = sample * 2;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4a11      	ldr	r2, [pc, #68]	@ (8004210 <SPI_SlaveDevice_CollectData+0x12c>)
 80041ca:	60d3      	str	r3, [r2, #12]
        spi_device_instance.data_context.crc = crc;
 80041cc:	4a10      	ldr	r2, [pc, #64]	@ (8004210 <SPI_SlaveDevice_CollectData+0x12c>)
 80041ce:	8bfb      	ldrh	r3, [r7, #30]
 80041d0:	8213      	strh	r3, [r2, #16]
        spi_device_instance.data_context.is_valid = true;
 80041d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004210 <SPI_SlaveDevice_CollectData+0x12c>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	749a      	strb	r2, [r3, #18]

        if (SPI_SlaveDevice_ResetDMA(data_addr, spi_device_instance.data_context.data_size) != E_OK) {
 80041d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <SPI_SlaveDevice_CollectData+0x12c>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4619      	mov	r1, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f840 	bl	8004264 <SPI_SlaveDevice_ResetDMA>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <SPI_SlaveDevice_CollectData+0x110>
            toOBC_SetState(toOBC_ERROR);
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7fc fd0e 	bl	8000c0c <toOBC_SetState>
            return E_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e008      	b.n	8004206 <SPI_SlaveDevice_CollectData+0x122>
        }

        toOBC_SetState(toOBC_READYSEND);
 80041f4:	2001      	movs	r0, #1
 80041f6:	f7fc fd09 	bl	8000c0c <toOBC_SetState>
    } else {
        toOBC_SetState(toOBC_IDLE);
        return E_BUSY;
    }

    return E_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e003      	b.n	8004206 <SPI_SlaveDevice_CollectData+0x122>
        toOBC_SetState(toOBC_IDLE);
 80041fe:	2003      	movs	r0, #3
 8004200:	f7fc fd04 	bl	8000c0c <toOBC_SetState>
        return E_BUSY;
 8004204:	2302      	movs	r3, #2
}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200015e0 	.word	0x200015e0
 8004214:	000186a0 	.word	0x000186a0
 8004218:	05e1d27b 	.word	0x05e1d27b

0800421c <SPI_SlaveDevice_GetDataInfo>:

Std_ReturnType SPI_SlaveDevice_GetDataInfo(DataProcessContext_t *context)
{
 800421c:	b490      	push	{r4, r7}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
    if (!spi_device_instance.is_initialized || !spi_device_instance.data_context.is_valid) {
 8004224:	4b0e      	ldr	r3, [pc, #56]	@ (8004260 <SPI_SlaveDevice_GetDataInfo+0x44>)
 8004226:	7d1b      	ldrb	r3, [r3, #20]
 8004228:	f083 0301 	eor.w	r3, r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <SPI_SlaveDevice_GetDataInfo+0x24>
 8004232:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <SPI_SlaveDevice_GetDataInfo+0x44>)
 8004234:	7c9b      	ldrb	r3, [r3, #18]
 8004236:	f083 0301 	eor.w	r3, r3, #1
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <SPI_SlaveDevice_GetDataInfo+0x28>
        return E_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e007      	b.n	8004254 <SPI_SlaveDevice_GetDataInfo+0x38>
    }

    *context = spi_device_instance.data_context;
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <SPI_SlaveDevice_GetDataInfo+0x44>)
 8004248:	4614      	mov	r4, r2
 800424a:	3304      	adds	r3, #4
 800424c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800424e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return E_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bc90      	pop	{r4, r7}
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	200015e0 	.word	0x200015e0

08004264 <SPI_SlaveDevice_ResetDMA>:

Std_ReturnType SPI_SlaveDevice_ResetDMA(uint32_t data_addr, uint32_t data_size)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af02      	add	r7, sp, #8
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
    if (!spi_device_instance.is_initialized) {
 800426e:	4b1f      	ldr	r3, [pc, #124]	@ (80042ec <SPI_SlaveDevice_ResetDMA+0x88>)
 8004270:	7d1b      	ldrb	r3, [r3, #20]
 8004272:	f083 0301 	eor.w	r3, r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <SPI_SlaveDevice_ResetDMA+0x1c>
        return E_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e030      	b.n	80042e2 <SPI_SlaveDevice_ResetDMA+0x7e>
    }

//    if (toOBC_GetState() != toOBC_BUSY && toOBC_GetState() != toOBC_READYSEND) {
//        return E_ERROR;
//    }
    toOBC_SetState(toOBC_BUSY);
 8004280:	2002      	movs	r0, #2
 8004282:	f7fc fcc3 	bl	8000c0c <toOBC_SetState>

    LL_DMA_DisableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 8004286:	2104      	movs	r1, #4
 8004288:	4819      	ldr	r0, [pc, #100]	@ (80042f0 <SPI_SlaveDevice_ResetDMA+0x8c>)
 800428a:	f7ff fdab 	bl	8003de4 <LL_DMA_DisableStream>
    LL_SPI_DisableDMAReq_TX(SPI_SLAVE_INSTANCE);
 800428e:	4819      	ldr	r0, [pc, #100]	@ (80042f4 <SPI_SlaveDevice_ResetDMA+0x90>)
 8004290:	f7ff fd6c 	bl	8003d6c <LL_SPI_DisableDMAReq_TX>
    LL_SPI_Disable(SPI_SLAVE_INSTANCE);
 8004294:	4817      	ldr	r0, [pc, #92]	@ (80042f4 <SPI_SlaveDevice_ResetDMA+0x90>)
 8004296:	f7ff fd49 	bl	8003d2c <LL_SPI_Disable>

    LL_DMA_ClearFlag_TC4(SPI_DMA_INSTANCE);
 800429a:	4815      	ldr	r0, [pc, #84]	@ (80042f0 <SPI_SlaveDevice_ResetDMA+0x8c>)
 800429c:	f7ff fe60 	bl	8003f60 <LL_DMA_ClearFlag_TC4>
    LL_DMA_ClearFlag_TE4(SPI_DMA_INSTANCE);
 80042a0:	4813      	ldr	r0, [pc, #76]	@ (80042f0 <SPI_SlaveDevice_ResetDMA+0x8c>)
 80042a2:	f7ff fe6a 	bl	8003f7a <LL_DMA_ClearFlag_TE4>

    LL_DMA_ConfigAddresses(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM,
 80042a6:	4813      	ldr	r0, [pc, #76]	@ (80042f4 <SPI_SlaveDevice_ResetDMA+0x90>)
 80042a8:	f7ff fd70 	bl	8003d8c <LL_SPI_DMA_GetRegAddr>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2240      	movs	r2, #64	@ 0x40
 80042b0:	9200      	str	r2, [sp, #0]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	2104      	movs	r1, #4
 80042b6:	480e      	ldr	r0, [pc, #56]	@ (80042f0 <SPI_SlaveDevice_ResetDMA+0x8c>)
 80042b8:	f7ff fdfe 	bl	8003eb8 <LL_DMA_ConfigAddresses>
                           data_addr, LL_SPI_DMA_GetRegAddr(SPI_SLAVE_INSTANCE),
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
    LL_DMA_SetDataLength(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM, data_size);
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	2104      	movs	r1, #4
 80042c0:	480b      	ldr	r0, [pc, #44]	@ (80042f0 <SPI_SlaveDevice_ResetDMA+0x8c>)
 80042c2:	f7ff fdd3 	bl	8003e6c <LL_DMA_SetDataLength>

    LL_SPI_Enable(SPI_SLAVE_INSTANCE);
 80042c6:	480b      	ldr	r0, [pc, #44]	@ (80042f4 <SPI_SlaveDevice_ResetDMA+0x90>)
 80042c8:	f7ff fd20 	bl	8003d0c <LL_SPI_Enable>
    LL_SPI_EnableDMAReq_TX(SPI_SLAVE_INSTANCE);
 80042cc:	4809      	ldr	r0, [pc, #36]	@ (80042f4 <SPI_SlaveDevice_ResetDMA+0x90>)
 80042ce:	f7ff fd3d 	bl	8003d4c <LL_SPI_EnableDMAReq_TX>
    LL_DMA_EnableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 80042d2:	2104      	movs	r1, #4
 80042d4:	4806      	ldr	r0, [pc, #24]	@ (80042f0 <SPI_SlaveDevice_ResetDMA+0x8c>)
 80042d6:	f7ff fd65 	bl	8003da4 <LL_DMA_EnableStream>

    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 80042da:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <SPI_SlaveDevice_ResetDMA+0x88>)
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
    return E_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	200015e0 	.word	0x200015e0
 80042f0:	40026400 	.word	0x40026400
 80042f4:	40015000 	.word	0x40015000

080042f8 <SPI_SlaveDevice_Disable>:

Std_ReturnType SPI_SlaveDevice_Disable(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
    if (!spi_device_instance.is_initialized) {
 80042fc:	4b10      	ldr	r3, [pc, #64]	@ (8004340 <SPI_SlaveDevice_Disable+0x48>)
 80042fe:	7d1b      	ldrb	r3, [r3, #20]
 8004300:	f083 0301 	eor.w	r3, r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <SPI_SlaveDevice_Disable+0x16>
        return E_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e016      	b.n	800433c <SPI_SlaveDevice_Disable+0x44>
    }

    LL_DMA_DisableStream(SPI_DMA_INSTANCE, SPI_DMA_TX_STREAM);
 800430e:	2104      	movs	r1, #4
 8004310:	480c      	ldr	r0, [pc, #48]	@ (8004344 <SPI_SlaveDevice_Disable+0x4c>)
 8004312:	f7ff fd67 	bl	8003de4 <LL_DMA_DisableStream>
    LL_SPI_DisableDMAReq_TX(SPI_SLAVE_INSTANCE);
 8004316:	480c      	ldr	r0, [pc, #48]	@ (8004348 <SPI_SlaveDevice_Disable+0x50>)
 8004318:	f7ff fd28 	bl	8003d6c <LL_SPI_DisableDMAReq_TX>
//    LL_SPI_Disable(SPI_SLAVE_INSTANCE);

    LL_DMA_ClearFlag_TC4(SPI_DMA_INSTANCE);
 800431c:	4809      	ldr	r0, [pc, #36]	@ (8004344 <SPI_SlaveDevice_Disable+0x4c>)
 800431e:	f7ff fe1f 	bl	8003f60 <LL_DMA_ClearFlag_TC4>
    LL_DMA_ClearFlag_TE4(SPI_DMA_INSTANCE);
 8004322:	4808      	ldr	r0, [pc, #32]	@ (8004344 <SPI_SlaveDevice_Disable+0x4c>)
 8004324:	f7ff fe29 	bl	8003f7a <LL_DMA_ClearFlag_TE4>

    spi_device_instance.transfer_state = SPI_TRANSFER_WAIT;
 8004328:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <SPI_SlaveDevice_Disable+0x48>)
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
    spi_device_instance.data_context.is_valid = false;
 800432e:	4b04      	ldr	r3, [pc, #16]	@ (8004340 <SPI_SlaveDevice_Disable+0x48>)
 8004330:	2200      	movs	r2, #0
 8004332:	749a      	strb	r2, [r3, #18]
    toOBC_SetState(toOBC_IDLE);
 8004334:	2003      	movs	r0, #3
 8004336:	f7fc fc69 	bl	8000c0c <toOBC_SetState>
    return E_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	200015e0 	.word	0x200015e0
 8004344:	40026400 	.word	0x40026400
 8004348:	40015000 	.word	0x40015000

0800434c <SPI_SlaveDevice_SetTransferState>:
{
    return spi_device_instance.transfer_state;
}

void SPI_SlaveDevice_SetTransferState(SPI_TransferState_t state)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
    spi_device_instance.transfer_state = state;
 8004356:	4a04      	ldr	r2, [pc, #16]	@ (8004368 <SPI_SlaveDevice_SetTransferState+0x1c>)
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	7013      	strb	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	200015e0 	.word	0x200015e0

0800436c <isLeapYear>:
    uint8_t minutes;
    uint8_t seconds;
} s_WorkingTimeClock_context = {0, 0, 0, 0};

static inline uint8_t isLeapYear(uint16_t fullYear)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	80fb      	strh	r3, [r7, #6]
    return ((fullYear % 4 == 0) && ((fullYear % 100 != 0) || (fullYear % 400 == 0))) ? 1 : 0;
 8004376:	88fb      	ldrh	r3, [r7, #6]
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11a      	bne.n	80043b8 <isLeapYear+0x4c>
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	4a10      	ldr	r2, [pc, #64]	@ (80043c8 <isLeapYear+0x5c>)
 8004386:	fba2 1203 	umull	r1, r2, r2, r3
 800438a:	0952      	lsrs	r2, r2, #5
 800438c:	2164      	movs	r1, #100	@ 0x64
 800438e:	fb01 f202 	mul.w	r2, r1, r2
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <isLeapYear+0x48>
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	4a0a      	ldr	r2, [pc, #40]	@ (80043c8 <isLeapYear+0x5c>)
 800439e:	fba2 1203 	umull	r1, r2, r2, r3
 80043a2:	09d2      	lsrs	r2, r2, #7
 80043a4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80043a8:	fb01 f202 	mul.w	r2, r1, r2
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <isLeapYear+0x4c>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <isLeapYear+0x4e>
 80043b8:	2300      	movs	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	51eb851f 	.word	0x51eb851f

080043cc <getMaxDays>:

static inline uint8_t getMaxDays(uint8_t month, uint16_t fullYear)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	460a      	mov	r2, r1
 80043d6:	71fb      	strb	r3, [r7, #7]
 80043d8:	4613      	mov	r3, r2
 80043da:	80bb      	strh	r3, [r7, #4]
    static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    if (month == 2) {
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d107      	bne.n	80043f2 <getMaxDays+0x26>
        return 28 + isLeapYear(fullYear);
 80043e2:	88bb      	ldrh	r3, [r7, #4]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ffc1 	bl	800436c <isLeapYear>
 80043ea:	4603      	mov	r3, r0
 80043ec:	331c      	adds	r3, #28
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	e003      	b.n	80043fa <getMaxDays+0x2e>
    } else {
        return daysInMonth[month - 1];
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	4a03      	ldr	r2, [pc, #12]	@ (8004404 <getMaxDays+0x38>)
 80043f8:	5cd3      	ldrb	r3, [r2, r3]
    }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	0800dd20 	.word	0x0800dd20

08004408 <DateTimeToEpoch>:

static uint32_t DateTimeToEpoch(const s_DateTime *dt)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
    uint32_t days = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
    uint16_t fullYear = 2000 + dt->year;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	789b      	ldrb	r3, [r3, #2]
 8004418:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800441c:	81fb      	strh	r3, [r7, #14]

    for (uint16_t year = 2000; year < fullYear; year++)
 800441e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004422:	827b      	strh	r3, [r7, #18]
 8004424:	e00d      	b.n	8004442 <DateTimeToEpoch+0x3a>
    {
        days += 365 + isLeapYear(year);
 8004426:	8a7b      	ldrh	r3, [r7, #18]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff ff9f 	bl	800436c <isLeapYear>
 800442e:	4603      	mov	r3, r0
 8004430:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 8004434:	461a      	mov	r2, r3
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	4413      	add	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
    for (uint16_t year = 2000; year < fullYear; year++)
 800443c:	8a7b      	ldrh	r3, [r7, #18]
 800443e:	3301      	adds	r3, #1
 8004440:	827b      	strh	r3, [r7, #18]
 8004442:	8a7a      	ldrh	r2, [r7, #18]
 8004444:	89fb      	ldrh	r3, [r7, #14]
 8004446:	429a      	cmp	r2, r3
 8004448:	d3ed      	bcc.n	8004426 <DateTimeToEpoch+0x1e>
    }
    for (uint8_t m = 1; m < dt->month; m++)
 800444a:	2301      	movs	r3, #1
 800444c:	747b      	strb	r3, [r7, #17]
 800444e:	e00d      	b.n	800446c <DateTimeToEpoch+0x64>
    {
        days += getMaxDays(m, fullYear);
 8004450:	89fa      	ldrh	r2, [r7, #14]
 8004452:	7c7b      	ldrb	r3, [r7, #17]
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff ffb8 	bl	80043cc <getMaxDays>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	4413      	add	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
    for (uint8_t m = 1; m < dt->month; m++)
 8004466:	7c7b      	ldrb	r3, [r7, #17]
 8004468:	3301      	adds	r3, #1
 800446a:	747b      	strb	r3, [r7, #17]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	785b      	ldrb	r3, [r3, #1]
 8004470:	7c7a      	ldrb	r2, [r7, #17]
 8004472:	429a      	cmp	r2, r3
 8004474:	d3ec      	bcc.n	8004450 <DateTimeToEpoch+0x48>
    }
    days += dt->day - 1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	3b01      	subs	r3, #1
 8004482:	617b      	str	r3, [r7, #20]

    return days * 86400UL + dt->hour * 3600UL + dt->minute * 60UL + dt->second;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	4a0d      	ldr	r2, [pc, #52]	@ (80044bc <DateTimeToEpoch+0xb4>)
 8004488:	fb03 f202 	mul.w	r2, r3, r2
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	78db      	ldrb	r3, [r3, #3]
 8004490:	4619      	mov	r1, r3
 8004492:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	441a      	add	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	791b      	ldrb	r3, [r3, #4]
 80044a0:	4619      	mov	r1, r3
 80044a2:	460b      	mov	r3, r1
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	1a5b      	subs	r3, r3, r1
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	7952      	ldrb	r2, [r2, #5]
 80044b0:	4413      	add	r3, r2
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	00015180 	.word	0x00015180

080044c0 <Utils_SoftTime_Update>:
    dt->month = month;
    dt->day = days + 1;
}

void Utils_SoftTime_Update(void)
{
 80044c0:	b598      	push	{r3, r4, r7, lr}
 80044c2:	af00      	add	r7, sp, #0
    static uint16_t ms_counter = 0;

    if (++ms_counter >= 1000) // 1000 ms = 1 second
 80044c4:	4b49      	ldr	r3, [pc, #292]	@ (80045ec <Utils_SoftTime_Update+0x12c>)
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	3301      	adds	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	4b47      	ldr	r3, [pc, #284]	@ (80045ec <Utils_SoftTime_Update+0x12c>)
 80044ce:	801a      	strh	r2, [r3, #0]
 80044d0:	4b46      	ldr	r3, [pc, #280]	@ (80045ec <Utils_SoftTime_Update+0x12c>)
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044d8:	f0c0 8086 	bcc.w	80045e8 <Utils_SoftTime_Update+0x128>
    {
        ms_counter = 0;
 80044dc:	4b43      	ldr	r3, [pc, #268]	@ (80045ec <Utils_SoftTime_Update+0x12c>)
 80044de:	2200      	movs	r2, #0
 80044e0:	801a      	strh	r2, [r3, #0]

        // Update real-time clock
        if (++s_RealTimeClock_context.second >= 60)
 80044e2:	4b43      	ldr	r3, [pc, #268]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 80044e4:	795b      	ldrb	r3, [r3, #5]
 80044e6:	3301      	adds	r3, #1
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4b41      	ldr	r3, [pc, #260]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 80044ec:	715a      	strb	r2, [r3, #5]
 80044ee:	4b40      	ldr	r3, [pc, #256]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 80044f0:	795b      	ldrb	r3, [r3, #5]
 80044f2:	2b3b      	cmp	r3, #59	@ 0x3b
 80044f4:	d94c      	bls.n	8004590 <Utils_SoftTime_Update+0xd0>
        {
            s_RealTimeClock_context.second = 0;
 80044f6:	4b3e      	ldr	r3, [pc, #248]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	715a      	strb	r2, [r3, #5]
            if (++s_RealTimeClock_context.minute >= 60)
 80044fc:	4b3c      	ldr	r3, [pc, #240]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 80044fe:	791b      	ldrb	r3, [r3, #4]
 8004500:	3301      	adds	r3, #1
 8004502:	b2da      	uxtb	r2, r3
 8004504:	4b3a      	ldr	r3, [pc, #232]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004506:	711a      	strb	r2, [r3, #4]
 8004508:	4b39      	ldr	r3, [pc, #228]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 800450a:	791b      	ldrb	r3, [r3, #4]
 800450c:	2b3b      	cmp	r3, #59	@ 0x3b
 800450e:	d93f      	bls.n	8004590 <Utils_SoftTime_Update+0xd0>
            {
                s_RealTimeClock_context.minute = 0;
 8004510:	4b37      	ldr	r3, [pc, #220]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004512:	2200      	movs	r2, #0
 8004514:	711a      	strb	r2, [r3, #4]
                if (++s_RealTimeClock_context.hour >= 24)
 8004516:	4b36      	ldr	r3, [pc, #216]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004518:	78db      	ldrb	r3, [r3, #3]
 800451a:	3301      	adds	r3, #1
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4b34      	ldr	r3, [pc, #208]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004520:	70da      	strb	r2, [r3, #3]
 8004522:	4b33      	ldr	r3, [pc, #204]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004524:	78db      	ldrb	r3, [r3, #3]
 8004526:	2b17      	cmp	r3, #23
 8004528:	d932      	bls.n	8004590 <Utils_SoftTime_Update+0xd0>
                {
                    s_RealTimeClock_context.hour = 0;
 800452a:	4b31      	ldr	r3, [pc, #196]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 800452c:	2200      	movs	r2, #0
 800452e:	70da      	strb	r2, [r3, #3]
                    if (++s_RealTimeClock_context.day > getMaxDays(s_RealTimeClock_context.month, s_RealTimeClock_context.year))
 8004530:	4b2f      	ldr	r3, [pc, #188]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	b2da      	uxtb	r2, r3
 8004538:	4b2d      	ldr	r3, [pc, #180]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	4b2c      	ldr	r3, [pc, #176]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 800453e:	781c      	ldrb	r4, [r3, #0]
 8004540:	4b2b      	ldr	r3, [pc, #172]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004542:	785b      	ldrb	r3, [r3, #1]
 8004544:	4a2a      	ldr	r2, [pc, #168]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004546:	7892      	ldrb	r2, [r2, #2]
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff ff3e 	bl	80043cc <getMaxDays>
 8004550:	4603      	mov	r3, r0
 8004552:	429c      	cmp	r4, r3
 8004554:	d91c      	bls.n	8004590 <Utils_SoftTime_Update+0xd0>
                    {
                        s_RealTimeClock_context.day = 1;
 8004556:	4b26      	ldr	r3, [pc, #152]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
                        if (++s_RealTimeClock_context.month > 12)
 800455c:	4b24      	ldr	r3, [pc, #144]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 800455e:	785b      	ldrb	r3, [r3, #1]
 8004560:	3301      	adds	r3, #1
 8004562:	b2da      	uxtb	r2, r3
 8004564:	4b22      	ldr	r3, [pc, #136]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004566:	705a      	strb	r2, [r3, #1]
 8004568:	4b21      	ldr	r3, [pc, #132]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 800456a:	785b      	ldrb	r3, [r3, #1]
 800456c:	2b0c      	cmp	r3, #12
 800456e:	d90f      	bls.n	8004590 <Utils_SoftTime_Update+0xd0>
                        {
                            s_RealTimeClock_context.month = 1;
 8004570:	4b1f      	ldr	r3, [pc, #124]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004572:	2201      	movs	r2, #1
 8004574:	705a      	strb	r2, [r3, #1]
                            if (++s_RealTimeClock_context.year > 99)
 8004576:	4b1e      	ldr	r3, [pc, #120]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004578:	789b      	ldrb	r3, [r3, #2]
 800457a:	3301      	adds	r3, #1
 800457c:	b2da      	uxtb	r2, r3
 800457e:	4b1c      	ldr	r3, [pc, #112]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004580:	709a      	strb	r2, [r3, #2]
 8004582:	4b1b      	ldr	r3, [pc, #108]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 8004584:	789b      	ldrb	r3, [r3, #2]
 8004586:	2b63      	cmp	r3, #99	@ 0x63
 8004588:	d902      	bls.n	8004590 <Utils_SoftTime_Update+0xd0>
                            {
                                s_RealTimeClock_context.year = 0;
 800458a:	4b19      	ldr	r3, [pc, #100]	@ (80045f0 <Utils_SoftTime_Update+0x130>)
 800458c:	2200      	movs	r2, #0
 800458e:	709a      	strb	r2, [r3, #2]
                }
            }
        }

        // Update working time clock
        if (++s_WorkingTimeClock_context.seconds >= 60)
 8004590:	4b18      	ldr	r3, [pc, #96]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 8004592:	799b      	ldrb	r3, [r3, #6]
 8004594:	3301      	adds	r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	4b16      	ldr	r3, [pc, #88]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 800459a:	719a      	strb	r2, [r3, #6]
 800459c:	4b15      	ldr	r3, [pc, #84]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 800459e:	799b      	ldrb	r3, [r3, #6]
 80045a0:	2b3b      	cmp	r3, #59	@ 0x3b
 80045a2:	d921      	bls.n	80045e8 <Utils_SoftTime_Update+0x128>
        {
            s_WorkingTimeClock_context.seconds = 0;
 80045a4:	4b13      	ldr	r3, [pc, #76]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	719a      	strb	r2, [r3, #6]
            if (++s_WorkingTimeClock_context.minutes >= 60)
 80045aa:	4b12      	ldr	r3, [pc, #72]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 80045ac:	795b      	ldrb	r3, [r3, #5]
 80045ae:	3301      	adds	r3, #1
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	4b10      	ldr	r3, [pc, #64]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 80045b4:	715a      	strb	r2, [r3, #5]
 80045b6:	4b0f      	ldr	r3, [pc, #60]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 80045b8:	795b      	ldrb	r3, [r3, #5]
 80045ba:	2b3b      	cmp	r3, #59	@ 0x3b
 80045bc:	d914      	bls.n	80045e8 <Utils_SoftTime_Update+0x128>
            {
                s_WorkingTimeClock_context.minutes = 0;
 80045be:	4b0d      	ldr	r3, [pc, #52]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	715a      	strb	r2, [r3, #5]
                if (++s_WorkingTimeClock_context.hours >= 24)
 80045c4:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 80045c6:	791b      	ldrb	r3, [r3, #4]
 80045c8:	3301      	adds	r3, #1
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 80045ce:	711a      	strb	r2, [r3, #4]
 80045d0:	4b08      	ldr	r3, [pc, #32]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 80045d2:	791b      	ldrb	r3, [r3, #4]
 80045d4:	2b17      	cmp	r3, #23
 80045d6:	d907      	bls.n	80045e8 <Utils_SoftTime_Update+0x128>
                {
                    s_WorkingTimeClock_context.hours = 0;
 80045d8:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 80045da:	2200      	movs	r2, #0
 80045dc:	711a      	strb	r2, [r3, #4]
                    s_WorkingTimeClock_context.days++;
 80045de:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a03      	ldr	r2, [pc, #12]	@ (80045f4 <Utils_SoftTime_Update+0x134>)
 80045e6:	6013      	str	r3, [r2, #0]
                }
            }
        }
    }
}
 80045e8:	bf00      	nop
 80045ea:	bd98      	pop	{r3, r4, r7, pc}
 80045ec:	20001600 	.word	0x20001600
 80045f0:	200000d4 	.word	0x200000d4
 80045f4:	200015f8 	.word	0x200015f8

080045f8 <Utils_SoftTime_Init>:


void Utils_SoftTime_Init(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
    s_RealTimeClock_context.year = 0;  // 2000
 80045fc:	4b11      	ldr	r3, [pc, #68]	@ (8004644 <Utils_SoftTime_Init+0x4c>)
 80045fe:	2200      	movs	r2, #0
 8004600:	709a      	strb	r2, [r3, #2]
    s_RealTimeClock_context.month = 1; // January
 8004602:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <Utils_SoftTime_Init+0x4c>)
 8004604:	2201      	movs	r2, #1
 8004606:	705a      	strb	r2, [r3, #1]
    s_RealTimeClock_context.day = 1;
 8004608:	4b0e      	ldr	r3, [pc, #56]	@ (8004644 <Utils_SoftTime_Init+0x4c>)
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
    s_RealTimeClock_context.hour = 0;
 800460e:	4b0d      	ldr	r3, [pc, #52]	@ (8004644 <Utils_SoftTime_Init+0x4c>)
 8004610:	2200      	movs	r2, #0
 8004612:	70da      	strb	r2, [r3, #3]
    s_RealTimeClock_context.minute = 0;
 8004614:	4b0b      	ldr	r3, [pc, #44]	@ (8004644 <Utils_SoftTime_Init+0x4c>)
 8004616:	2200      	movs	r2, #0
 8004618:	711a      	strb	r2, [r3, #4]
    s_RealTimeClock_context.second = 0;
 800461a:	4b0a      	ldr	r3, [pc, #40]	@ (8004644 <Utils_SoftTime_Init+0x4c>)
 800461c:	2200      	movs	r2, #0
 800461e:	715a      	strb	r2, [r3, #5]

    s_WorkingTimeClock_context.days = 0;
 8004620:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <Utils_SoftTime_Init+0x50>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
    s_WorkingTimeClock_context.hours = 0;
 8004626:	4b08      	ldr	r3, [pc, #32]	@ (8004648 <Utils_SoftTime_Init+0x50>)
 8004628:	2200      	movs	r2, #0
 800462a:	711a      	strb	r2, [r3, #4]
    s_WorkingTimeClock_context.minutes = 0;
 800462c:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <Utils_SoftTime_Init+0x50>)
 800462e:	2200      	movs	r2, #0
 8004630:	715a      	strb	r2, [r3, #5]
    s_WorkingTimeClock_context.seconds = 0;
 8004632:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <Utils_SoftTime_Init+0x50>)
 8004634:	2200      	movs	r2, #0
 8004636:	719a      	strb	r2, [r3, #6]
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	200000d4 	.word	0x200000d4
 8004648:	200015f8 	.word	0x200015f8

0800464c <Utils_GetRTC>:

// ================= Helper Functions =================
void Utils_GetRTC(s_DateTime *dateTime)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    if (dateTime == NULL) return;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d006      	beq.n	8004668 <Utils_GetRTC+0x1c>
    *dateTime = s_RealTimeClock_context;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a05      	ldr	r2, [pc, #20]	@ (8004674 <Utils_GetRTC+0x28>)
 800465e:	6810      	ldr	r0, [r2, #0]
 8004660:	6018      	str	r0, [r3, #0]
 8004662:	8892      	ldrh	r2, [r2, #4]
 8004664:	809a      	strh	r2, [r3, #4]
 8004666:	e000      	b.n	800466a <Utils_GetRTC+0x1e>
    if (dateTime == NULL) return;
 8004668:	bf00      	nop
}
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	200000d4 	.word	0x200000d4

08004678 <Utils_SetRTC>:

void Utils_SetRTC(const s_DateTime *dateTime)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
    if (dateTime == NULL) return;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d006      	beq.n	8004694 <Utils_SetRTC+0x1c>
    s_RealTimeClock_context = *dateTime;
 8004686:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <Utils_SetRTC+0x28>)
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6810      	ldr	r0, [r2, #0]
 800468c:	6018      	str	r0, [r3, #0]
 800468e:	8892      	ldrh	r2, [r2, #4]
 8004690:	809a      	strh	r2, [r3, #4]
 8004692:	e000      	b.n	8004696 <Utils_SetRTC+0x1e>
    if (dateTime == NULL) return;
 8004694:	bf00      	nop
}
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	200000d4 	.word	0x200000d4

080046a4 <Utils_GetEpoch>:
    EpochToDateTime(epoch - EPOCH_OFFSET_UNIX, &dt);
    Utils_SetRTC(&dt);
}

uint32_t Utils_GetEpoch(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
    return DateTimeToEpoch(&s_RealTimeClock_context) + EPOCH_OFFSET_UNIX;
 80046a8:	4803      	ldr	r0, [pc, #12]	@ (80046b8 <Utils_GetEpoch+0x14>)
 80046aa:	f7ff fead 	bl	8004408 <DateTimeToEpoch>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b02      	ldr	r3, [pc, #8]	@ (80046bc <Utils_GetEpoch+0x18>)
 80046b2:	4413      	add	r3, r2
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200000d4 	.word	0x200000d4
 80046bc:	386d4380 	.word	0x386d4380

080046c0 <Utils_GetWorkingTime>:

void Utils_GetWorkingTime(uint32_t *days, uint8_t *hours, uint8_t *minutes, uint8_t *seconds)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
    if (days) *days = s_WorkingTimeClock_context.days;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <Utils_GetWorkingTime+0x1c>
 80046d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004714 <Utils_GetWorkingTime+0x54>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]
    if (hours) *hours = s_WorkingTimeClock_context.hours;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <Utils_GetWorkingTime+0x2a>
 80046e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <Utils_GetWorkingTime+0x54>)
 80046e4:	791a      	ldrb	r2, [r3, #4]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	701a      	strb	r2, [r3, #0]
    if (minutes) *minutes = s_WorkingTimeClock_context.minutes;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <Utils_GetWorkingTime+0x38>
 80046f0:	4b08      	ldr	r3, [pc, #32]	@ (8004714 <Utils_GetWorkingTime+0x54>)
 80046f2:	795a      	ldrb	r2, [r3, #5]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	701a      	strb	r2, [r3, #0]
    if (seconds) *seconds = s_WorkingTimeClock_context.seconds;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <Utils_GetWorkingTime+0x46>
 80046fe:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <Utils_GetWorkingTime+0x54>)
 8004700:	799a      	ldrb	r2, [r3, #6]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	701a      	strb	r2, [r3, #0]
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	200015f8 	.word	0x200015f8

08004718 <RingBuffer_Create>:

#include "ring_buffer.h"

void RingBuffer_Create(s_RingBufferType *rb, uint32_t id, const char *name,
                         RingBufElement *buffer, RingBufCtr max_size)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
    rb->id = id;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	601a      	str	r2, [r3, #0]

    strncpy(rb->name, name, RINGBUFFER_NAME_MAX_LEN - 1);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3304      	adds	r3, #4
 8004730:	221f      	movs	r2, #31
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	f007 fbb6 	bl	800bea6 <strncpy>
    rb->name[RINGBUFFER_NAME_MAX_LEN - 1] = '\0';
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    rb->buffer = buffer;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	625a      	str	r2, [r3, #36]	@ 0x24
    rb->max_size = max_size;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800474c:	851a      	strh	r2, [r3, #40]	@ 0x28

    atomic_store_explicit(&rb->head, 0U, memory_order_release);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	332a      	adds	r3, #42	@ 0x2a
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	2300      	movs	r3, #0
 8004756:	82fb      	strh	r3, [r7, #22]
 8004758:	8afa      	ldrh	r2, [r7, #22]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f3bf 8f5b 	dmb	ish
 8004760:	801a      	strh	r2, [r3, #0]
    atomic_store_explicit(&rb->tail, 0U, memory_order_release);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	332c      	adds	r3, #44	@ 0x2c
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	2300      	movs	r3, #0
 800476a:	82bb      	strh	r3, [r7, #20]
 800476c:	8aba      	ldrh	r2, [r7, #20]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f3bf 8f5b 	dmb	ish
 8004774:	801a      	strh	r2, [r3, #0]
}
 8004776:	bf00      	nop
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <RingBuffer_Put>:

_Bool RingBuffer_Put(s_RingBufferType * const rb, RingBufElement const el)
{
 800477e:	b480      	push	{r7}
 8004780:	b08b      	sub	sp, #44	@ 0x2c
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_relaxed) + 1U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	332a      	adds	r3, #42	@ 0x2a
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	81fb      	strh	r3, [r7, #14]
 8004798:	89fb      	ldrh	r3, [r7, #14]
 800479a:	3301      	adds	r3, #1
 800479c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (head == rb->max_size)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d101      	bne.n	80047ac <RingBuffer_Put+0x2e>
    {
        head = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_acquire);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	332c      	adds	r3, #44	@ 0x2c
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	f3bf 8f5b 	dmb	ish
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	81bb      	strh	r3, [r7, #12]
 80047be:	89bb      	ldrh	r3, [r7, #12]
 80047c0:	837b      	strh	r3, [r7, #26]
    if (head != tail) // buffer NOT full?
 80047c2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80047c4:	8b7b      	ldrh	r3, [r7, #26]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d018      	beq.n	80047fc <RingBuffer_Put+0x7e>
    {
        rb->buffer[atomic_load_explicit(&rb->head, memory_order_relaxed)] = el;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	322a      	adds	r2, #42	@ 0x2a
 80047d2:	617a      	str	r2, [r7, #20]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	8812      	ldrh	r2, [r2, #0]
 80047d8:	b292      	uxth	r2, r2
 80047da:	817a      	strh	r2, [r7, #10]
 80047dc:	897a      	ldrh	r2, [r7, #10]
 80047de:	4413      	add	r3, r2
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	701a      	strb	r2, [r3, #0]
        atomic_store_explicit(&rb->head, head, memory_order_release);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	332a      	adds	r3, #42	@ 0x2a
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047ec:	813b      	strh	r3, [r7, #8]
 80047ee:	893a      	ldrh	r2, [r7, #8]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f3bf 8f5b 	dmb	ish
 80047f6:	801a      	strh	r2, [r3, #0]
//        __enable_irq();
        return true;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <RingBuffer_Put+0x80>
    }
    else
    {
//    	__enable_irq();
        return false;
 80047fc:	2300      	movs	r3, #0
    }
}
 80047fe:	4618      	mov	r0, r3
 8004800:	372c      	adds	r7, #44	@ 0x2c
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <RingBuffer_Get>:

_Bool RingBuffer_Get(s_RingBufferType * const rb, RingBufElement *pel)
{
 800480a:	b480      	push	{r7}
 800480c:	b08b      	sub	sp, #44	@ 0x2c
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
//	__disable_irq();
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	332c      	adds	r3, #44	@ 0x2c
 8004818:	623b      	str	r3, [r7, #32]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	827b      	strh	r3, [r7, #18]
 8004822:	8a7b      	ldrh	r3, [r7, #18]
 8004824:	84fb      	strh	r3, [r7, #38]	@ 0x26
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	332a      	adds	r3, #42	@ 0x2a
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	f3bf 8f5b 	dmb	ish
 8004834:	b29b      	uxth	r3, r3
 8004836:	823b      	strh	r3, [r7, #16]
 8004838:	8a3b      	ldrh	r3, [r7, #16]
 800483a:	837b      	strh	r3, [r7, #26]
    if (head != tail)  // buffer NOT empty?
 800483c:	8b7a      	ldrh	r2, [r7, #26]
 800483e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004840:	429a      	cmp	r2, r3
 8004842:	d01c      	beq.n	800487e <RingBuffer_Get+0x74>
    {
        *pel = rb->buffer[tail];
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004848:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800484a:	4413      	add	r3, r2
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	701a      	strb	r2, [r3, #0]
        ++tail;
 8004852:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004854:	3301      	adds	r3, #1
 8004856:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (tail == rb->max_size)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800485e:	429a      	cmp	r2, r3
 8004860:	d101      	bne.n	8004866 <RingBuffer_Get+0x5c>
        {
            tail = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        atomic_store_explicit(&rb->tail, tail, memory_order_release);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	332c      	adds	r3, #44	@ 0x2c
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800486e:	81fb      	strh	r3, [r7, #14]
 8004870:	89fa      	ldrh	r2, [r7, #14]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f3bf 8f5b 	dmb	ish
 8004878:	801a      	strh	r2, [r3, #0]
//    	__enable_irq();
        return true;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <RingBuffer_Get+0x76>
    }
    else
    {
//    	__enable_irq();
        return false;
 800487e:	2300      	movs	r3, #0
    }
}
 8004880:	4618      	mov	r0, r3
 8004882:	372c      	adds	r7, #44	@ 0x2c
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <RingBuffer_NumFreeSlots>:

// Function to calculate the number of free slots in the ring buffer.
// Note: We always leave one empty slot to distinguish between an empty and a full buffer.
RingBufCtr RingBuffer_NumFreeSlots(s_RingBufferType * const rb)
{
 800488c:	b480      	push	{r7}
 800488e:	b089      	sub	sp, #36	@ 0x24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	332a      	adds	r3, #42	@ 0x2a
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	f3bf 8f5b 	dmb	ish
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	823b      	strh	r3, [r7, #16]
 80048a6:	8a3b      	ldrh	r3, [r7, #16]
 80048a8:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	332c      	adds	r3, #44	@ 0x2c
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	81fb      	strh	r3, [r7, #14]
 80048b8:	89fb      	ldrh	r3, [r7, #14]
 80048ba:	827b      	strh	r3, [r7, #18]

    if (head == tail)
 80048bc:	8b7a      	ldrh	r2, [r7, #26]
 80048be:	8a7b      	ldrh	r3, [r7, #18]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d104      	bne.n	80048ce <RingBuffer_NumFreeSlots+0x42>
    {
        return (RingBufCtr)(rb->max_size - 1U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	e014      	b.n	80048f8 <RingBuffer_NumFreeSlots+0x6c>
    }
    else if (head < tail)
 80048ce:	8b7a      	ldrh	r2, [r7, #26]
 80048d0:	8a7b      	ldrh	r3, [r7, #18]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d206      	bcs.n	80048e4 <RingBuffer_NumFreeSlots+0x58>
    {
        return (RingBufCtr)(tail - head - 1U);
 80048d6:	8a7a      	ldrh	r2, [r7, #18]
 80048d8:	8b7b      	ldrh	r3, [r7, #26]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	e009      	b.n	80048f8 <RingBuffer_NumFreeSlots+0x6c>
    }
    else
    {
        return (RingBufCtr)(rb->max_size + tail - head - 1U);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80048e8:	8a7b      	ldrh	r3, [r7, #18]
 80048ea:	4413      	add	r3, r2
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	8b7b      	ldrh	r3, [r7, #26]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29b      	uxth	r3, r3
    }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3724      	adds	r7, #36	@ 0x24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <RingBuffer_IsDataAvailable>:
    }
    return rb->buffer[tail];
}

_Bool RingBuffer_IsDataAvailable(s_RingBufferType * const rb)
{
 8004904:	b480      	push	{r7}
 8004906:	b089      	sub	sp, #36	@ 0x24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	332a      	adds	r3, #42	@ 0x2a
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	f3bf 8f5b 	dmb	ish
 800491a:	b29b      	uxth	r3, r3
 800491c:	823b      	strh	r3, [r7, #16]
 800491e:	8a3b      	ldrh	r3, [r7, #16]
 8004920:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	332c      	adds	r3, #44	@ 0x2c
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	81fb      	strh	r3, [r7, #14]
 8004930:	89fb      	ldrh	r3, [r7, #14]
 8004932:	827b      	strh	r3, [r7, #18]
    return (head != tail);
 8004934:	8b7a      	ldrh	r2, [r7, #26]
 8004936:	8a7b      	ldrh	r3, [r7, #18]
 8004938:	429a      	cmp	r2, r3
 800493a:	bf14      	ite	ne
 800493c:	2301      	movne	r3, #1
 800493e:	2300      	moveq	r3, #0
 8004940:	b2db      	uxtb	r3, r3
}
 8004942:	4618      	mov	r0, r3
 8004944:	3724      	adds	r7, #36	@ 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <crc32_init_context>:
static uint32_t now;
static void send_reset(struct min_context *self);
#endif

static void crc32_init_context(struct crc32_context *context)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
    context->crc = 0xffffffffU;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f04f 32ff 	mov.w	r2, #4294967295
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <crc32_step>:

static void crc32_step(struct crc32_context *context, uint8_t byte)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	70fb      	strb	r3, [r7, #3]
    uint32_t j;
    context->crc ^= byte;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	405a      	eors	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]
    for (j = 0; j < 8; j++) {
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e011      	b.n	80049ae <crc32_step+0x42>
        uint32_t mask = (uint32_t) - (context->crc & 1U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	425b      	negs	r3, r3
 8004994:	60bb      	str	r3, [r7, #8]
        context->crc = (context->crc >> 1) ^ (0xedb88320U & mask);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	085a      	lsrs	r2, r3, #1
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <crc32_step+0x58>)
 80049a0:	400b      	ands	r3, r1
 80049a2:	405a      	eors	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	601a      	str	r2, [r3, #0]
    for (j = 0; j < 8; j++) {
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b07      	cmp	r3, #7
 80049b2:	d9ea      	bls.n	800498a <crc32_step+0x1e>
    }
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	edb88320 	.word	0xedb88320

080049c8 <crc32_finalize>:

static uint32_t crc32_finalize(struct crc32_context *context)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
    return ~context->crc;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	43db      	mvns	r3, r3
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <stuffed_tx_byte>:

static void stuffed_tx_byte(struct min_context *self, uint8_t byte, bool crc)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	70fb      	strb	r3, [r7, #3]
 80049ee:	4613      	mov	r3, r2
 80049f0:	70bb      	strb	r3, [r7, #2]
    // Transmit the byte
    min_tx_byte(self->port, byte);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80049f8:	78fa      	ldrb	r2, [r7, #3]
 80049fa:	4611      	mov	r1, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fe95 	bl	800572c <min_tx_byte>
    if (crc) {
 8004a02:	78bb      	ldrb	r3, [r7, #2]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <stuffed_tx_byte+0x36>
        crc32_step(&self->tx_checksum, byte);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff ffaa 	bl	800496c <crc32_step>
    }

    // See if an additional stuff byte is needed
    if (byte == HEADER_BYTE) {
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	2baa      	cmp	r3, #170	@ 0xaa
 8004a1c:	d118      	bne.n	8004a50 <stuffed_tx_byte+0x6e>
        if (--self->tx_header_byte_countdown == 0) {
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10f      	bne.n	8004a58 <stuffed_tx_byte+0x76>
            min_tx_byte(self->port, STUFF_BYTE); // Stuff byte
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004a3e:	2155      	movs	r1, #85	@ 0x55
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fe73 	bl	800572c <min_tx_byte>
            self->tx_header_byte_countdown = 2U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
        }
    } else {
        self->tx_header_byte_countdown = 2U;
    }
}
 8004a4e:	e003      	b.n	8004a58 <stuffed_tx_byte+0x76>
        self->tx_header_byte_countdown = 2U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <on_wire_bytes>:

static void on_wire_bytes(struct min_context *self, uint8_t id_control, uint8_t seq, uint8_t const *payload_base, uint16_t payload_offset, uint16_t payload_mask, uint8_t payload_len)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	607b      	str	r3, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	72fb      	strb	r3, [r7, #11]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	72bb      	strb	r3, [r7, #10]
    uint8_t n, i;
    uint32_t checksum;

    self->tx_header_byte_countdown = 2U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2202      	movs	r2, #2
 8004a76:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    crc32_init_context(&self->tx_checksum);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff ff64 	bl	800494e <crc32_init_context>

    min_tx_start(self->port);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fe63 	bl	8005758 <min_tx_start>

    // Header is 3 bytes; because unstuffed will reset receiver immediately
    min_tx_byte(self->port, HEADER_BYTE);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004a98:	21aa      	movs	r1, #170	@ 0xaa
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fe46 	bl	800572c <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004aa6:	21aa      	movs	r1, #170	@ 0xaa
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fe3f 	bl	800572c <min_tx_byte>
    min_tx_byte(self->port, HEADER_BYTE);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004ab4:	21aa      	movs	r1, #170	@ 0xaa
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fe38 	bl	800572c <min_tx_byte>

    stuffed_tx_byte(self, id_control, true);
 8004abc:	7afb      	ldrb	r3, [r7, #11]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff ff8d 	bl	80049e2 <stuffed_tx_byte>
    if (id_control & 0x80U) {
 8004ac8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da05      	bge.n	8004adc <on_wire_bytes+0x7c>
        // Send the sequence number if it is a transport frame
        stuffed_tx_byte(self, seq, true);
 8004ad0:	7abb      	ldrb	r3, [r7, #10]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f7ff ff83 	bl	80049e2 <stuffed_tx_byte>
    }

    stuffed_tx_byte(self, payload_len, true);
 8004adc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff ff7c 	bl	80049e2 <stuffed_tx_byte>

    for (i = 0, n = payload_len; n > 0; n--, i++) {
 8004aea:	2300      	movs	r3, #0
 8004aec:	75bb      	strb	r3, [r7, #22]
 8004aee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004af2:	75fb      	strb	r3, [r7, #23]
 8004af4:	e015      	b.n	8004b22 <on_wire_bytes+0xc2>
        stuffed_tx_byte(self, payload_base[payload_offset], true);
 8004af6:	8c3b      	ldrh	r3, [r7, #32]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4413      	add	r3, r2
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2201      	movs	r2, #1
 8004b00:	4619      	mov	r1, r3
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff ff6d 	bl	80049e2 <stuffed_tx_byte>
        payload_offset++;
 8004b08:	8c3b      	ldrh	r3, [r7, #32]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	843b      	strh	r3, [r7, #32]
        payload_offset &= payload_mask;
 8004b0e:	8c3a      	ldrh	r2, [r7, #32]
 8004b10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b12:	4013      	ands	r3, r2
 8004b14:	843b      	strh	r3, [r7, #32]
    for (i = 0, n = payload_len; n > 0; n--, i++) {
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
 8004b1c:	7dbb      	ldrb	r3, [r7, #22]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	75bb      	strb	r3, [r7, #22]
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e6      	bne.n	8004af6 <on_wire_bytes+0x96>
    }

    checksum = crc32_finalize(&self->tx_checksum);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ff4a 	bl	80049c8 <crc32_finalize>
 8004b34:	6138      	str	r0, [r7, #16]

    // Network order is big-endian. A decent C compiler will spot that this
    // is extracting bytes and will use efficient instructions.
    stuffed_tx_byte(self, (uint8_t)((checksum >> 24) & 0xffU), false);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	0e1b      	lsrs	r3, r3, #24
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4619      	mov	r1, r3
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff ff4e 	bl	80049e2 <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 16) & 0xffU), false);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	0c1b      	lsrs	r3, r3, #16
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff ff46 	bl	80049e2 <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 8) & 0xffU), false);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4619      	mov	r1, r3
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff ff3e 	bl	80049e2 <stuffed_tx_byte>
    stuffed_tx_byte(self, (uint8_t)((checksum >> 0) & 0xffU), false);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff ff37 	bl	80049e2 <stuffed_tx_byte>

    // Ensure end-of-frame doesn't contain 0xaa and confuse search for start-of-frame
    min_tx_byte(self->port, EOF_BYTE);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004b7a:	2155      	movs	r1, #85	@ 0x55
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fdd5 	bl	800572c <min_tx_byte>

    min_tx_finished(self->port);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fdf0 	bl	800576e <min_tx_finished>
}
 8004b8e:	bf00      	nop
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <transport_fifo_pop>:

#ifdef TRANSPORT_PROTOCOL

// Pops frame from front of queue, reclaims its ring buffer space
static void transport_fifo_pop(struct min_context *self)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_frames != 0);
#endif
    struct transport_frame *frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4613      	mov	r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
    min_debug_print("Popping frame id=%d seq=%d\n", frame->min_id, frame->seq);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	79db      	ldrb	r3, [r3, #7]
 8004bba:	4619      	mov	r1, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	7a1b      	ldrb	r3, [r3, #8]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4815      	ldr	r0, [pc, #84]	@ (8004c18 <transport_fifo_pop+0x80>)
 8004bc4:	f000 fd8c 	bl	80056e0 <min_debug_print>

#ifdef ASSERTION_CHECKING
    assert(self->transport_fifo.n_ring_buffer_bytes >= frame->payload_len);
#endif

    self->transport_fifo.n_frames--;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    self->transport_fifo.head_idx++;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8004bde:	3301      	adds	r3, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.head_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.n_ring_buffer_bytes -= frame->payload_len;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	7992      	ldrb	r2, [r2, #6]
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
}
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	0800d718 	.word	0x0800d718

08004c1c <transport_fifo_push>:

// Claim a buffer slot from the FIFO. Returns 0 if there is no space.
static struct transport_frame *transport_fifo_push(struct min_context *self, uint16_t data_size)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	807b      	strh	r3, [r7, #2]
    // A frame is only queued if there aren't too many frames in the FIFO and there is space in the
    // data ring buffer.
    struct transport_frame *ret = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
    if (self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8004c32:	2b0f      	cmp	r3, #15
 8004c34:	d872      	bhi.n	8004d1c <transport_fifo_push+0x100>
        // Is there space in the ring buffer for the frame payload?
        if (self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - data_size) {
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	887b      	ldrh	r3, [r7, #2]
 8004c40:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d860      	bhi.n	8004d0a <transport_fifo_push+0xee>
            self->transport_fifo.n_frames++;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8004c4e:	3301      	adds	r3, #1
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            if (self->transport_fifo.n_frames > self->transport_fifo.n_frames_max) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 20e2 	ldrb.w	r2, [r3, #226]	@ 0xe2
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d905      	bls.n	8004c74 <transport_fifo_push+0x58>
                // High-water mark of FIFO (for diagnostic purposes)
                self->transport_fifo.n_frames_max = self->transport_fifo.n_frames;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 20e2 	ldrb.w	r2, [r3, #226]	@ 0xe2
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            }
            // Create FIFO entry
            ret = &(self->transport_fifo.frames[self->transport_fifo.tail_idx]);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	4413      	add	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
            ret->payload_offset = self->transport_fifo.ring_buffer_tail_offset;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	809a      	strh	r2, [r3, #4]

            // Claim ring buffer space
            self->transport_fifo.n_ring_buffer_bytes += data_size;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8004c9a:	887b      	ldrh	r3, [r7, #2]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
            if (self->transport_fifo.n_ring_buffer_bytes > self->transport_fifo.n_ring_buffer_bytes_max) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 30de 	ldrh.w	r3, [r3, #222]	@ 0xde
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d905      	bls.n	8004cc2 <transport_fifo_push+0xa6>
                // High-water mark of ring buffer usage (for diagnostic purposes)
                self->transport_fifo.n_ring_buffer_bytes_max = self->transport_fifo.n_ring_buffer_bytes;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	@ 0xdc
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
            }
            self->transport_fifo.ring_buffer_tail_offset += data_size;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	4413      	add	r3, r2
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
            self->transport_fifo.ring_buffer_tail_offset &= TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	@ 0xe0
 8004cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0

            // Claim FIFO space
            self->transport_fifo.tail_idx++;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8004cec:	3301      	adds	r3, #1
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            self->transport_fifo.tail_idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 8004d08:	e00b      	b.n	8004d22 <transport_fifo_push+0x106>
        } else {
            min_debug_print("No FIFO payload space: data_size=%d, n_ring_buffer_bytes=%d\n", data_size, self->transport_fifo.n_ring_buffer_bytes);
 8004d0a:	8879      	ldrh	r1, [r7, #2]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8004d12:	461a      	mov	r2, r3
 8004d14:	4805      	ldr	r0, [pc, #20]	@ (8004d2c <transport_fifo_push+0x110>)
 8004d16:	f000 fce3 	bl	80056e0 <min_debug_print>
 8004d1a:	e002      	b.n	8004d22 <transport_fifo_push+0x106>
        }
    } else {
        min_debug_print("No FIFO frame slots\n");
 8004d1c:	4804      	ldr	r0, [pc, #16]	@ (8004d30 <transport_fifo_push+0x114>)
 8004d1e:	f000 fcdf 	bl	80056e0 <min_debug_print>
    }
    return ret;
 8004d22:	68fb      	ldr	r3, [r7, #12]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	0800d734 	.word	0x0800d734
 8004d30:	0800d774 	.word	0x0800d774

08004d34 <transport_fifo_get>:

// Return the nth frame in the FIFO
static struct transport_frame *transport_fifo_get(struct min_context *self, uint8_t n)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
    uint8_t idx = self->transport_fifo.head_idx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8004d46:	73fb      	strb	r3, [r7, #15]
    return &self->transport_fifo.frames[(idx + n) & TRANSPORT_FIFO_SIZE_FRAMES_MASK];
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f003 020f 	and.w	r2, r3, #15
 8004d54:	4613      	mov	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	4413      	add	r3, r2
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <transport_fifo_send>:

// Sends the given frame to the serial line
static void transport_fifo_send(struct min_context *self, struct transport_frame *frame)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af04      	add	r7, sp, #16
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
    min_debug_print("transport_fifo_send: min_id=%d, seq=%d, payload_len=%d\n", frame->min_id, frame->seq, frame->payload_len);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	79db      	ldrb	r3, [r3, #7]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	7a1b      	ldrb	r3, [r3, #8]
 8004d80:	461a      	mov	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	799b      	ldrb	r3, [r3, #6]
 8004d86:	4810      	ldr	r0, [pc, #64]	@ (8004dc8 <transport_fifo_send+0x5c>)
 8004d88:	f000 fcaa 	bl	80056e0 <min_debug_print>
    on_wire_bytes(self, frame->min_id | (uint8_t)0x80U, frame->seq, payloads_ring_buffer, frame->payload_offset, TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK, frame->payload_len);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	79db      	ldrb	r3, [r3, #7]
 8004d90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d94:	b2d9      	uxtb	r1, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	7a18      	ldrb	r0, [r3, #8]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	889b      	ldrh	r3, [r3, #4]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	7992      	ldrb	r2, [r2, #6]
 8004da2:	9202      	str	r2, [sp, #8]
 8004da4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8004da8:	9201      	str	r2, [sp, #4]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <transport_fifo_send+0x60>)
 8004dae:	4602      	mov	r2, r0
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fe55 	bl	8004a60 <on_wire_bytes>
    frame->last_sent_time_ms = now;
 8004db6:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <transport_fifo_send+0x64>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	601a      	str	r2, [r3, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	0800d78c 	.word	0x0800d78c
 8004dcc:	20001604 	.word	0x20001604
 8004dd0:	20001a04 	.word	0x20001a04

08004dd4 <send_ack>:

// We don't queue an ACK frame - we send it straight away (if there's space to do so)
static void send_ack(struct min_context *self)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af04      	add	r7, sp, #16
 8004dda:	6078      	str	r0, [r7, #4]
    // In the embedded end we don't reassemble out-of-order frames and so never ask for retransmits. Payload is
    // always the same as the sequence number.
    min_debug_print("send ACK: seq=%d\n", self->transport_fifo.rn);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8004de2:	4619      	mov	r1, r3
 8004de4:	4811      	ldr	r0, [pc, #68]	@ (8004e2c <send_ack+0x58>)
 8004de6:	f000 fc7b 	bl	80056e0 <min_debug_print>
    if (ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fc8b 	bl	800570c <min_tx_space>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b0a      	cmp	r3, #10
 8004dfa:	d913      	bls.n	8004e24 <send_ack+0x50>
        on_wire_bytes(self, ACK, self->transport_fifo.rn, &self->transport_fifo.rn, 0, 0xffU, 1U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 20e8 	ldrb.w	r2, [r3, #232]	@ 0xe8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	33e8      	adds	r3, #232	@ 0xe8
 8004e06:	2101      	movs	r1, #1
 8004e08:	9102      	str	r1, [sp, #8]
 8004e0a:	21ff      	movs	r1, #255	@ 0xff
 8004e0c:	9101      	str	r1, [sp, #4]
 8004e0e:	2100      	movs	r1, #0
 8004e10:	9100      	str	r1, [sp, #0]
 8004e12:	21ff      	movs	r1, #255	@ 0xff
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fe23 	bl	8004a60 <on_wire_bytes>
        self->transport_fifo.last_sent_ack_time_ms = now;
 8004e1a:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <send_ack+0x5c>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    }
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	0800d7c4 	.word	0x0800d7c4
 8004e30:	20001a04 	.word	0x20001a04

08004e34 <send_reset>:

// We don't queue an RESET frame - we send it straight away (if there's space to do so)
static void send_reset(struct min_context *self)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af04      	add	r7, sp, #16
 8004e3a:	6078      	str	r0, [r7, #4]
    min_debug_print("send RESET\n");
 8004e3c:	480d      	ldr	r0, [pc, #52]	@ (8004e74 <send_reset+0x40>)
 8004e3e:	f000 fc4f 	bl	80056e0 <min_debug_print>
    if (ON_WIRE_SIZE(0) <= min_tx_space(self->port)) {
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fc5f 	bl	800570c <min_tx_space>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b0a      	cmp	r3, #10
 8004e52:	d90b      	bls.n	8004e6c <send_reset+0x38>
        on_wire_bytes(self, RESET, 0, 0, 0, 0, 0);
 8004e54:	2300      	movs	r3, #0
 8004e56:	9302      	str	r3, [sp, #8]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9301      	str	r3, [sp, #4]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	2300      	movs	r3, #0
 8004e62:	2200      	movs	r2, #0
 8004e64:	21fe      	movs	r1, #254	@ 0xfe
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fdfa 	bl	8004a60 <on_wire_bytes>
    }
}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	0800d7d8 	.word	0x0800d7d8

08004e78 <transport_fifo_reset>:

static void transport_fifo_reset(struct min_context *self)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
    // Clear down the transmission FIFO queue
    self->transport_fifo.n_frames = 0;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    self->transport_fifo.head_idx = 0;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    self->transport_fifo.tail_idx = 0;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
    self->transport_fifo.n_ring_buffer_bytes = 0;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
    self->transport_fifo.ring_buffer_tail_offset = 0;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
    self->transport_fifo.sn_max = 0;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    self->transport_fifo.sn_min = 0;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
    self->transport_fifo.rn = 0;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

    // Reset the timers
    self->transport_fifo.last_received_anything_ms = now;
 8004ec0:	4b09      	ldr	r3, [pc, #36]	@ (8004ee8 <transport_fifo_reset+0x70>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    self->transport_fifo.last_sent_ack_time_ms = now;
 8004eca:	4b07      	ldr	r3, [pc, #28]	@ (8004ee8 <transport_fifo_reset+0x70>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    self->transport_fifo.last_received_frame_ms = 0;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    CPROCESS_Init();
 8004edc:	f7fb ff1c 	bl	8000d18 <CPROCESS_Init>
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20001a04 	.word	0x20001a04

08004eec <min_transport_reset>:

void min_transport_reset(struct min_context *self, bool inform_other_side)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
    min_debug_print("Resetting %s other side\n", inform_other_side ? "and informing" : "without informing");
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <min_transport_reset+0x16>
 8004efe:	4b0a      	ldr	r3, [pc, #40]	@ (8004f28 <min_transport_reset+0x3c>)
 8004f00:	e000      	b.n	8004f04 <min_transport_reset+0x18>
 8004f02:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <min_transport_reset+0x40>)
 8004f04:	4619      	mov	r1, r3
 8004f06:	480a      	ldr	r0, [pc, #40]	@ (8004f30 <min_transport_reset+0x44>)
 8004f08:	f000 fbea 	bl	80056e0 <min_debug_print>
    if (inform_other_side) {
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <min_transport_reset+0x2c>
        // Tell the other end we have gone away
        send_reset(self);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff ff8e 	bl	8004e34 <send_reset>
    }

    // Throw our frames away
    transport_fifo_reset(self);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff ffad 	bl	8004e78 <transport_fifo_reset>
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	0800d7e4 	.word	0x0800d7e4
 8004f2c:	0800d7f4 	.word	0x0800d7f4
 8004f30:	0800d808 	.word	0x0800d808

08004f34 <min_queue_frame>:

// Queues a MIN ID / payload frame into the outgoing FIFO
// API call.
// Returns true if the frame was queued OK.
bool min_queue_frame(struct min_context *self, uint8_t min_id, uint8_t const *payload, uint8_t payload_len)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	607a      	str	r2, [r7, #4]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	460b      	mov	r3, r1
 8004f42:	72fb      	strb	r3, [r7, #11]
 8004f44:	4613      	mov	r3, r2
 8004f46:	72bb      	strb	r3, [r7, #10]
    struct transport_frame *frame = transport_fifo_push(self, payload_len); // Claim a FIFO slot, reserve space for payload
 8004f48:	7abb      	ldrb	r3, [r7, #10]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f7ff fe64 	bl	8004c1c <transport_fifo_push>
 8004f54:	6178      	str	r0, [r7, #20]

    // We are just queueing here: the poll() function puts the frame into the window and on to the wire
    if (frame != 0) {
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d02b      	beq.n	8004fb4 <min_queue_frame+0x80>
        uint32_t i;
        // Copy frame details into frame slot, copy payload into ring buffer
        frame->min_id = min_id & (uint8_t)0x3fU;
 8004f5c:	7afb      	ldrb	r3, [r7, #11]
 8004f5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	71da      	strb	r2, [r3, #7]
        frame->payload_len = payload_len;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	7aba      	ldrb	r2, [r7, #10]
 8004f6c:	719a      	strb	r2, [r3, #6]

        uint16_t payload_offset = frame->payload_offset;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	889b      	ldrh	r3, [r3, #4]
 8004f72:	837b      	strh	r3, [r7, #26]
        for (i = 0; i < payload_len; i++) {
 8004f74:	2300      	movs	r3, #0
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	e010      	b.n	8004f9c <min_queue_frame+0x68>
            payloads_ring_buffer[payload_offset] = payload[i];
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	441a      	add	r2, r3
 8004f80:	8b7b      	ldrh	r3, [r7, #26]
 8004f82:	7811      	ldrb	r1, [r2, #0]
 8004f84:	4a11      	ldr	r2, [pc, #68]	@ (8004fcc <min_queue_frame+0x98>)
 8004f86:	54d1      	strb	r1, [r2, r3]
            payload_offset++;
 8004f88:	8b7b      	ldrh	r3, [r7, #26]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	837b      	strh	r3, [r7, #26]
            payload_offset &= TRANSPORT_FIFO_SIZE_FRAME_DATA_MASK;
 8004f8e:	8b7b      	ldrh	r3, [r7, #26]
 8004f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f94:	837b      	strh	r3, [r7, #26]
        for (i = 0; i < payload_len; i++) {
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	61fb      	str	r3, [r7, #28]
 8004f9c:	7abb      	ldrb	r3, [r7, #10]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d3ea      	bcc.n	8004f7a <min_queue_frame+0x46>
        }
        min_debug_print("Queued ID=%d, len=%d\n", min_id, payload_len);
 8004fa4:	7afb      	ldrb	r3, [r7, #11]
 8004fa6:	7aba      	ldrb	r2, [r7, #10]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4809      	ldr	r0, [pc, #36]	@ (8004fd0 <min_queue_frame+0x9c>)
 8004fac:	f000 fb98 	bl	80056e0 <min_debug_print>
        return true;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e007      	b.n	8004fc4 <min_queue_frame+0x90>
    } else {
        self->transport_fifo.dropped_frames++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        return false;
 8004fc2:	2300      	movs	r3, #0
    }
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20001604 	.word	0x20001604
 8004fd0:	0800d824 	.word	0x0800d824

08004fd4 <min_queue_has_space_for_frame>:

bool min_queue_has_space_for_frame(struct min_context *self, uint8_t payload_len)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	70fb      	strb	r3, [r7, #3]
    return self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES &&
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8004fe6:	2b0f      	cmp	r3, #15
 8004fe8:	d80a      	bhi.n	8005000 <min_queue_has_space_for_frame+0x2c>
           self->transport_fifo.n_ring_buffer_bytes <= TRANSPORT_FIFO_MAX_FRAME_DATA - payload_len;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	@ 0xdc
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
    return self->transport_fifo.n_frames < TRANSPORT_FIFO_MAX_FRAMES &&
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d801      	bhi.n	8005000 <min_queue_has_space_for_frame+0x2c>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <min_queue_has_space_for_frame+0x2e>
 8005000:	2300      	movs	r3, #0
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	b2db      	uxtb	r3, r3
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <find_retransmit_frame>:

// Finds the frame in the window that was sent least recently
static struct transport_frame *find_retransmit_frame(struct min_context *self)
{
 8005014:	b480      	push	{r7}
 8005016:	b089      	sub	sp, #36	@ 0x24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
    uint8_t idx;
    uint8_t i;
    uint8_t window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	74fb      	strb	r3, [r7, #19]
    assert(window_size > 0);
    assert(window_size <= self->transport_fifo.n_frames);
#endif

    // Start with the head of the queue and call this the oldest
    struct transport_frame *oldest_frame = &self->transport_fifo.frames[self->transport_fifo.head_idx];
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8005032:	461a      	mov	r2, r3
 8005034:	4613      	mov	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4413      	add	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
    uint32_t oldest_elapsed_time = now - oldest_frame->last_sent_time_ms;
 8005042:	4b1e      	ldr	r3, [pc, #120]	@ (80050bc <find_retransmit_frame+0xa8>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	617b      	str	r3, [r7, #20]

    idx = self->transport_fifo.head_idx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8005054:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < window_size; i++) {
 8005056:	2300      	movs	r3, #0
 8005058:	77bb      	strb	r3, [r7, #30]
 800505a:	e023      	b.n	80050a4 <find_retransmit_frame+0x90>
        uint32_t elapsed = now - self->transport_fifo.frames[idx].last_sent_time_ms;
 800505c:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <find_retransmit_frame+0xa8>)
 800505e:	6819      	ldr	r1, [r3, #0]
 8005060:	7ffa      	ldrb	r2, [r7, #31]
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4403      	add	r3, r0
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	1acb      	subs	r3, r1, r3
 8005072:	60fb      	str	r3, [r7, #12]
        if (elapsed > oldest_elapsed_time) { // Strictly older only; otherwise the earlier frame is deemed the older
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	429a      	cmp	r2, r3
 800507a:	d909      	bls.n	8005090 <find_retransmit_frame+0x7c>
            oldest_elapsed_time = elapsed;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	617b      	str	r3, [r7, #20]
            oldest_frame = &self->transport_fifo.frames[idx];
 8005080:	7ffa      	ldrb	r2, [r7, #31]
 8005082:	4613      	mov	r3, r2
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        }
        idx++;
 8005090:	7ffb      	ldrb	r3, [r7, #31]
 8005092:	3301      	adds	r3, #1
 8005094:	77fb      	strb	r3, [r7, #31]
        idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8005096:	7ffb      	ldrb	r3, [r7, #31]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < window_size; i++) {
 800509e:	7fbb      	ldrb	r3, [r7, #30]
 80050a0:	3301      	adds	r3, #1
 80050a2:	77bb      	strb	r3, [r7, #30]
 80050a4:	7fba      	ldrb	r2, [r7, #30]
 80050a6:	7cfb      	ldrb	r3, [r7, #19]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d3d7      	bcc.n	800505c <find_retransmit_frame+0x48>
    }

    return oldest_frame;
 80050ac:	69bb      	ldr	r3, [r7, #24]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3724      	adds	r7, #36	@ 0x24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20001a04 	.word	0x20001a04

080050c0 <valid_frame_received>:
#endif // TRANSPORT_PROTOCOL

// This runs the receiving half of the transport protocol, acknowledging frames received, discarding
// duplicates received, and handling RESET requests.
static void valid_frame_received(struct min_context *self)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
    uint8_t id_control = self->rx_frame_id_control;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 31fb 	ldrb.w	r3, [r3, #507]	@ 0x1fb
 80050ce:	777b      	strb	r3, [r7, #29]
    uint8_t *payload = self->rx_frame_payload_buf;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	33ec      	adds	r3, #236	@ 0xec
 80050d4:	61bb      	str	r3, [r7, #24]
    uint8_t payload_len = self->rx_control;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80050dc:	75fb      	strb	r3, [r7, #23]

#ifdef TRANSPORT_PROTOCOL
    uint8_t seq = self->rx_frame_seq;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 80050e4:	75bb      	strb	r3, [r7, #22]
    uint8_t num_acked;
    uint8_t num_nacked;
    uint8_t num_in_window;

    // When we receive anything we know the other end is still active and won't shut down
    self->transport_fifo.last_received_anything_ms = now;
 80050e6:	4b65      	ldr	r3, [pc, #404]	@ (800527c <valid_frame_received+0x1bc>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    switch (id_control) {
 80050f0:	7f7b      	ldrb	r3, [r7, #29]
 80050f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80050f4:	d05e      	beq.n	80051b4 <valid_frame_received+0xf4>
 80050f6:	2bff      	cmp	r3, #255	@ 0xff
 80050f8:	d16a      	bne.n	80051d0 <valid_frame_received+0x110>
    case ACK:
        // If we get an ACK then we remove all the acknowledged frames with seq < rn
        // The payload byte specifies the number of NACKed frames: how many we want retransmitted because
        // they have gone missing.
        // But we need to make sure we don't accidentally ACK too many because of a stale ACK from an old session
        num_acked = seq - self->transport_fifo.sn_min;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8005100:	7dba      	ldrb	r2, [r7, #22]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	757b      	strb	r3, [r7, #21]
        num_nacked = payload[0] - seq;
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	7dbb      	ldrb	r3, [r7, #22]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	753b      	strb	r3, [r7, #20]
        num_in_window = self->transport_fifo.sn_max - self->transport_fifo.sn_min;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	74fb      	strb	r3, [r7, #19]

        if (num_acked <= num_in_window) {
 8005120:	7d7a      	ldrb	r2, [r7, #21]
 8005122:	7cfb      	ldrb	r3, [r7, #19]
 8005124:	429a      	cmp	r2, r3
 8005126:	d838      	bhi.n	800519a <valid_frame_received+0xda>
            uint8_t i;

            self->transport_fifo.sn_min = seq;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	7dba      	ldrb	r2, [r7, #22]
 800512c:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            assert(num_in_window <= TRANSPORT_MAX_WINDOW_SIZE);
            assert(num_nacked <= TRANSPORT_MAX_WINDOW_SIZE);
#endif
            // Now pop off all the frames up to (but not including) rn
            // The ACK contains Rn; all frames before Rn are ACKed and can be removed from the window
            min_debug_print("Received ACK seq=%d, num_acked=%d, num_nacked=%d\n", seq, num_acked, num_nacked);
 8005130:	7db9      	ldrb	r1, [r7, #22]
 8005132:	7d7a      	ldrb	r2, [r7, #21]
 8005134:	7d3b      	ldrb	r3, [r7, #20]
 8005136:	4852      	ldr	r0, [pc, #328]	@ (8005280 <valid_frame_received+0x1c0>)
 8005138:	f000 fad2 	bl	80056e0 <min_debug_print>
            for (i = 0; i < num_acked; i++) {
 800513c:	2300      	movs	r3, #0
 800513e:	77fb      	strb	r3, [r7, #31]
 8005140:	e005      	b.n	800514e <valid_frame_received+0x8e>
                transport_fifo_pop(self);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff fd28 	bl	8004b98 <transport_fifo_pop>
            for (i = 0; i < num_acked; i++) {
 8005148:	7ffb      	ldrb	r3, [r7, #31]
 800514a:	3301      	adds	r3, #1
 800514c:	77fb      	strb	r3, [r7, #31]
 800514e:	7ffa      	ldrb	r2, [r7, #31]
 8005150:	7d7b      	ldrb	r3, [r7, #21]
 8005152:	429a      	cmp	r2, r3
 8005154:	d3f5      	bcc.n	8005142 <valid_frame_received+0x82>
            }
            uint8_t idx = self->transport_fifo.head_idx;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800515c:	77bb      	strb	r3, [r7, #30]
            // Now retransmit the number of frames that were requested
            for (i = 0; i < num_nacked; i++) {
 800515e:	2300      	movs	r3, #0
 8005160:	77fb      	strb	r3, [r7, #31]
 8005162:	e015      	b.n	8005190 <valid_frame_received+0xd0>
                struct transport_frame *retransmit_frame = &self->transport_fifo.frames[idx];
 8005164:	7fba      	ldrb	r2, [r7, #30]
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4413      	add	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
                transport_fifo_send(self, retransmit_frame);
 8005174:	68f9      	ldr	r1, [r7, #12]
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff fdf8 	bl	8004d6c <transport_fifo_send>
                idx++;
 800517c:	7fbb      	ldrb	r3, [r7, #30]
 800517e:	3301      	adds	r3, #1
 8005180:	77bb      	strb	r3, [r7, #30]
                idx &= TRANSPORT_FIFO_SIZE_FRAMES_MASK;
 8005182:	7fbb      	ldrb	r3, [r7, #30]
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	77bb      	strb	r3, [r7, #30]
            for (i = 0; i < num_nacked; i++) {
 800518a:	7ffb      	ldrb	r3, [r7, #31]
 800518c:	3301      	adds	r3, #1
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	7ffa      	ldrb	r2, [r7, #31]
 8005192:	7d3b      	ldrb	r3, [r7, #20]
 8005194:	429a      	cmp	r2, r3
 8005196:	d3e5      	bcc.n	8005164 <valid_frame_received+0xa4>
            }
        } else {
            min_debug_print("Received spurious ACK seq=%d\n", seq);
            self->transport_fifo.spurious_acks++;
        }
        break;
 8005198:	e06c      	b.n	8005274 <valid_frame_received+0x1b4>
            min_debug_print("Received spurious ACK seq=%d\n", seq);
 800519a:	7dbb      	ldrb	r3, [r7, #22]
 800519c:	4619      	mov	r1, r3
 800519e:	4839      	ldr	r0, [pc, #228]	@ (8005284 <valid_frame_received+0x1c4>)
 80051a0:	f000 fa9e 	bl	80056e0 <min_debug_print>
            self->transport_fifo.spurious_acks++;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        break;
 80051b2:	e05f      	b.n	8005274 <valid_frame_received+0x1b4>
    case RESET:
        // If we get a RESET demand then we reset the transport protocol (empty the FIFO, reset the
        // sequence numbers, etc.)
        // We don't send anything, we just do it. The other end can send frames to see if this end is
        // alive (pings, etc.) or just wait to get application frames.
        min_debug_print("Received reset\n");
 80051b4:	4834      	ldr	r0, [pc, #208]	@ (8005288 <valid_frame_received+0x1c8>)
 80051b6:	f000 fa93 	bl	80056e0 <min_debug_print>
        self->transport_fifo.resets_received++;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        transport_fifo_reset(self);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff fe55 	bl	8004e78 <transport_fifo_reset>
        break;
 80051ce:	e051      	b.n	8005274 <valid_frame_received+0x1b4>
    default:
        if (id_control & 0x80U) {
 80051d0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	da39      	bge.n	800524c <valid_frame_received+0x18c>
            // Incoming application frames

            // Reset the activity time (an idle connection will be stalled)
            self->transport_fifo.last_received_frame_ms = now;
 80051d8:	4b28      	ldr	r3, [pc, #160]	@ (800527c <valid_frame_received+0x1bc>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

            if (seq == self->transport_fifo.rn) {
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80051e8:	7dba      	ldrb	r2, [r7, #22]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d11e      	bne.n	800522c <valid_frame_received+0x16c>
                // Accept this frame as matching the sequence number we were looking for

                // Now looking for the next one in the sequence
                self->transport_fifo.rn++;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80051f4:	3301      	adds	r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                // Always send an ACK back for the frame we received
                // ACKs are short (should be about 9 microseconds to send on the wire) and
                // this will cut the latency down.
                // We also periodically send an ACK in case the ACK was lost, and in any case
                // frames are re-sent.
                send_ack(self);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fde8 	bl	8004dd4 <send_ack>

                // Now ready to pass this up to the application handlers

                // Pass frame up to application handler to deal with
                min_debug_print("Incoming app transport frame seq=%d, id=%d, payload len=%d\n", seq, id_control & (uint8_t)0x3fU, payload_len);
 8005204:	7db9      	ldrb	r1, [r7, #22]
 8005206:	7f7b      	ldrb	r3, [r7, #29]
 8005208:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800520c:	7dfb      	ldrb	r3, [r7, #23]
 800520e:	481f      	ldr	r0, [pc, #124]	@ (800528c <valid_frame_received+0x1cc>)
 8005210:	f000 fa66 	bl	80056e0 <min_debug_print>
                min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 8005214:	7f7b      	ldrb	r3, [r7, #29]
 8005216:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800521a:	b2d8      	uxtb	r0, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005222:	7dfa      	ldrb	r2, [r7, #23]
 8005224:	69b9      	ldr	r1, [r7, #24]
 8005226:	f000 fb81 	bl	800592c <min_application_handler>
        } else {
            // Not a transport frame
            min_debug_print("Incoming app frame id=%d, payload len=%d\n", id_control & (uint8_t)0x3fU, payload_len);
            min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
        }
        break;
 800522a:	e022      	b.n	8005272 <valid_frame_received+0x1b2>
                self->transport_fifo.sequence_mismatch_drop++;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
                min_debug_print("Received mismatched frame seq=%d, looking for seq=%d\n", seq, self->transport_fifo.rn);
 800523a:	7db9      	ldrb	r1, [r7, #22]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8005242:	461a      	mov	r2, r3
 8005244:	4812      	ldr	r0, [pc, #72]	@ (8005290 <valid_frame_received+0x1d0>)
 8005246:	f000 fa4b 	bl	80056e0 <min_debug_print>
        break;
 800524a:	e012      	b.n	8005272 <valid_frame_received+0x1b2>
            min_debug_print("Incoming app frame id=%d, payload len=%d\n", id_control & (uint8_t)0x3fU, payload_len);
 800524c:	7f7b      	ldrb	r3, [r7, #29]
 800524e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005252:	7dfa      	ldrb	r2, [r7, #23]
 8005254:	4619      	mov	r1, r3
 8005256:	480f      	ldr	r0, [pc, #60]	@ (8005294 <valid_frame_received+0x1d4>)
 8005258:	f000 fa42 	bl	80056e0 <min_debug_print>
            min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
 800525c:	7f7b      	ldrb	r3, [r7, #29]
 800525e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005262:	b2d8      	uxtb	r0, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800526a:	7dfa      	ldrb	r2, [r7, #23]
 800526c:	69b9      	ldr	r1, [r7, #24]
 800526e:	f000 fb5d 	bl	800592c <min_application_handler>
        break;
 8005272:	bf00      	nop
    }
#else  // TRANSPORT_PROTOCOL
    min_application_handler(id_control & (uint8_t)0x3fU, payload, payload_len, self->port);
#endif // TRANSPORT_PROTOCOL
}
 8005274:	bf00      	nop
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20001a04 	.word	0x20001a04
 8005280:	0800d83c 	.word	0x0800d83c
 8005284:	0800d870 	.word	0x0800d870
 8005288:	0800d890 	.word	0x0800d890
 800528c:	0800d8a0 	.word	0x0800d8a0
 8005290:	0800d8dc 	.word	0x0800d8dc
 8005294:	0800d914 	.word	0x0800d914

08005298 <rx_byte>:

static void rx_byte(struct min_context *self, uint8_t byte)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
    // should reset the frame buffer and be ready to receive frame data
    //
    // Two in a row in over the frame means to expect a stuff byte.
    uint32_t crc;

    if (self->rx_header_bytes_seen == 2) {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d114      	bne.n	80052d8 <rx_byte+0x40>
        self->rx_header_bytes_seen = 0;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
        if (byte == HEADER_BYTE) {
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	2baa      	cmp	r3, #170	@ 0xaa
 80052ba:	d104      	bne.n	80052c6 <rx_byte+0x2e>
            self->rx_frame_state = RECEIVING_ID_CONTROL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
            return;
 80052c4:	e126      	b.n	8005514 <rx_byte+0x27c>
        }
        if (byte == STUFF_BYTE) {
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	2b55      	cmp	r3, #85	@ 0x55
 80052ca:	f000 811e 	beq.w	800550a <rx_byte+0x272>
            /* Discard this byte; carry on receiving on the next character */
            return;
        } else {
            /* Something has gone wrong, give up on this frame and look for header again */
            self->rx_frame_state = SEARCHING_FOR_SOF;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
            return;
 80052d6:	e11d      	b.n	8005514 <rx_byte+0x27c>
        }
    }

    if (byte == HEADER_BYTE) {
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	2baa      	cmp	r3, #170	@ 0xaa
 80052dc:	d108      	bne.n	80052f0 <rx_byte+0x58>
        self->rx_header_bytes_seen++;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 80052e4:	3301      	adds	r3, #1
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
 80052ee:	e003      	b.n	80052f8 <rx_byte+0x60>
    } else {
        self->rx_header_bytes_seen = 0;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
    }

    switch (self->rx_frame_state) {
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 80052fe:	2b09      	cmp	r3, #9
 8005300:	f200 80f6 	bhi.w	80054f0 <rx_byte+0x258>
 8005304:	a201      	add	r2, pc, #4	@ (adr r2, 800530c <rx_byte+0x74>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	0800550f 	.word	0x0800550f
 8005310:	08005335 	.word	0x08005335
 8005314:	08005385 	.word	0x08005385
 8005318:	080053a7 	.word	0x080053a7
 800531c:	080053e5 	.word	0x080053e5
 8005320:	08005435 	.word	0x08005435
 8005324:	08005449 	.word	0x08005449
 8005328:	08005465 	.word	0x08005465
 800532c:	08005481 	.word	0x08005481
 8005330:	080054cf 	.word	0x080054cf
    case SEARCHING_FOR_SOF:
        break;
    case RECEIVING_ID_CONTROL:
        self->rx_frame_id_control = byte;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	f883 21fb 	strb.w	r2, [r3, #507]	@ 0x1fb
        self->rx_frame_payload_bytes = 0;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa
        crc32_init_context(&self->rx_checksum);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff faff 	bl	800494e <crc32_init_context>
        crc32_step(&self->rx_checksum, byte);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8005356:	78fa      	ldrb	r2, [r7, #3]
 8005358:	4611      	mov	r1, r2
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fb06 	bl	800496c <crc32_step>
        if (byte & 0x80U) {
 8005360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005364:	2b00      	cmp	r3, #0
 8005366:	da04      	bge.n	8005372 <rx_byte+0xda>
#ifdef TRANSPORT_PROTOCOL
            self->rx_frame_state = RECEIVING_SEQ;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
#endif // TRANSPORT_PROTOCOL
        } else {
            self->rx_frame_seq = 0;
            self->rx_frame_state = RECEIVING_LENGTH;
        }
        break;
 8005370:	e0d0      	b.n	8005514 <rx_byte+0x27c>
            self->rx_frame_seq = 0;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
            self->rx_frame_state = RECEIVING_LENGTH;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2203      	movs	r2, #3
 800537e:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8005382:	e0c7      	b.n	8005514 <rx_byte+0x27c>
    case RECEIVING_SEQ:
        self->rx_frame_seq = byte;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
        crc32_step(&self->rx_checksum, byte);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fae8 	bl	800496c <crc32_step>
        self->rx_frame_state = RECEIVING_LENGTH;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2203      	movs	r2, #3
 80053a0:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80053a4:	e0b6      	b.n	8005514 <rx_byte+0x27c>
    case RECEIVING_LENGTH:
        self->rx_frame_length = byte;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
        self->rx_control = byte;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
        crc32_step(&self->rx_checksum, byte);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80053bc:	78fa      	ldrb	r2, [r7, #3]
 80053be:	4611      	mov	r1, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff fad3 	bl	800496c <crc32_step>
        if (self->rx_frame_length > 0) {
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d004      	beq.n	80053da <rx_byte+0x142>
            // Can reduce the RAM size by compiling limits to frame sizes
            if (self->rx_frame_length <= MAX_PAYLOAD) {
                self->rx_frame_state = RECEIVING_PAYLOAD;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2204      	movs	r2, #4
 80053d4:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
                self->rx_frame_state = SEARCHING_FOR_SOF;
            }
        } else {
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
        }
        break;
 80053d8:	e09c      	b.n	8005514 <rx_byte+0x27c>
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2205      	movs	r2, #5
 80053de:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80053e2:	e097      	b.n	8005514 <rx_byte+0x27c>
    case RECEIVING_PAYLOAD:
        self->rx_frame_payload_buf[self->rx_frame_payload_bytes++] = byte;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	b2d1      	uxtb	r1, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	f882 11fa 	strb.w	r1, [r2, #506]	@ 0x1fa
 80053f4:	461a      	mov	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4413      	add	r3, r2
 80053fa:	78fa      	ldrb	r2, [r7, #3]
 80053fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        crc32_step(&self->rx_checksum, byte);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8005406:	78fa      	ldrb	r2, [r7, #3]
 8005408:	4611      	mov	r1, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff faae 	bl	800496c <crc32_step>
        if (--self->rx_frame_length == 0) {
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 8005416:	3b01      	subs	r3, #1
 8005418:	b2da      	uxtb	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 8005426:	2b00      	cmp	r3, #0
 8005428:	d173      	bne.n	8005512 <rx_byte+0x27a>
            self->rx_frame_state = RECEIVING_CHECKSUM_3;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2205      	movs	r2, #5
 800542e:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        }
        break;
 8005432:	e06e      	b.n	8005512 <rx_byte+0x27a>
    case RECEIVING_CHECKSUM_3:
        self->rx_frame_checksum = ((uint32_t)byte) << 24;
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	061a      	lsls	r2, r3, #24
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2206      	movs	r2, #6
 8005442:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8005446:	e065      	b.n	8005514 <rx_byte+0x27c>
    case RECEIVING_CHECKSUM_2:
        self->rx_frame_checksum |= ((uint32_t)byte) << 16;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2207      	movs	r2, #7
 800545e:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8005462:	e057      	b.n	8005514 <rx_byte+0x27c>
    case RECEIVING_CHECKSUM_1:
        self->rx_frame_checksum |= ((uint32_t)byte) << 8;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        self->rx_frame_state = RECEIVING_CHECKSUM_0;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2208      	movs	r2, #8
 800547a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 800547e:	e049      	b.n	8005514 <rx_byte+0x27c>
    case RECEIVING_CHECKSUM_0:
        self->rx_frame_checksum |= byte;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 21ec 	ldr.w	r2, [r3, #492]	@ 0x1ec
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        crc = crc32_finalize(&self->rx_checksum);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff fa96 	bl	80049c8 <crc32_finalize>
 800549c:	60f8      	str	r0, [r7, #12]
        if (self->rx_frame_checksum != crc) {
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 31ec 	ldr.w	r3, [r3, #492]	@ 0x1ec
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d00c      	beq.n	80054c4 <rx_byte+0x22c>
            min_debug_print("Checksum failed, received 0x%08X, computed 0x%08X", self->rx_frame_checksum, crc);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 31ec 	ldr.w	r3, [r3, #492]	@ 0x1ec
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4619      	mov	r1, r3
 80054b4:	4819      	ldr	r0, [pc, #100]	@ (800551c <rx_byte+0x284>)
 80054b6:	f000 f913 	bl	80056e0 <min_debug_print>
            // Frame fails the checksum and so is dropped
            self->rx_frame_state = SEARCHING_FOR_SOF;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        } else {
            // Checksum passes, go on to check for the end-of-frame marker
            self->rx_frame_state = RECEIVING_EOF;
        }
        break;
 80054c2:	e027      	b.n	8005514 <rx_byte+0x27c>
            self->rx_frame_state = RECEIVING_EOF;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2209      	movs	r2, #9
 80054c8:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80054cc:	e022      	b.n	8005514 <rx_byte+0x27c>
    case RECEIVING_EOF:
        if (byte == 0x55u) {
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	2b55      	cmp	r3, #85	@ 0x55
 80054d2:	d103      	bne.n	80054dc <rx_byte+0x244>
            // Frame received OK, pass up data to handler
            valid_frame_received(self);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fdf3 	bl	80050c0 <valid_frame_received>
 80054da:	e004      	b.n	80054e6 <rx_byte+0x24e>
        } else {
            // else discard
            min_debug_print("Received invalid EOF 0x%02X", byte);
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	4619      	mov	r1, r3
 80054e0:	480f      	ldr	r0, [pc, #60]	@ (8005520 <rx_byte+0x288>)
 80054e2:	f000 f8fd 	bl	80056e0 <min_debug_print>
        }
        // Look for next frame */
        self->rx_frame_state = SEARCHING_FOR_SOF;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 80054ee:	e011      	b.n	8005514 <rx_byte+0x27c>
    default:
        // Should never get here but in case we do then reset to a safe state
        min_debug_print("Received byte 0x%02X in invalid state %d", byte, self->rx_frame_state);
 80054f0:	78f9      	ldrb	r1, [r7, #3]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 80054f8:	461a      	mov	r2, r3
 80054fa:	480a      	ldr	r0, [pc, #40]	@ (8005524 <rx_byte+0x28c>)
 80054fc:	f000 f8f0 	bl	80056e0 <min_debug_print>
        self->rx_frame_state = SEARCHING_FOR_SOF;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
        break;
 8005508:	e004      	b.n	8005514 <rx_byte+0x27c>
            return;
 800550a:	bf00      	nop
 800550c:	e002      	b.n	8005514 <rx_byte+0x27c>
        break;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <rx_byte+0x27c>
        break;
 8005512:	bf00      	nop
    }
}
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	0800d940 	.word	0x0800d940
 8005520:	0800d974 	.word	0x0800d974
 8005524:	0800d990 	.word	0x0800d990

08005528 <min_poll>:

// API call: sends received bytes into a MIN context and runs the transport timeouts
void min_poll(struct min_context *self, uint8_t const *buf, uint32_t buf_len)
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b089      	sub	sp, #36	@ 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
    uint32_t i;
    for (i = 0; i < buf_len; i++) {
 8005534:	2300      	movs	r3, #0
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	e00a      	b.n	8005550 <min_poll+0x28>
        rx_byte(self, buf[i]);
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	4619      	mov	r1, r3
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff fea7 	bl	8005298 <rx_byte>
    for (i = 0; i < buf_len; i++) {
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3301      	adds	r3, #1
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d3f0      	bcc.n	800553a <min_poll+0x12>
    }

#ifdef TRANSPORT_PROTOCOL
    uint8_t window_size;

    now = min_time_ms();
 8005558:	f000 f914 	bl	8005784 <min_time_ms>
 800555c:	4603      	mov	r3, r0
 800555e:	4a44      	ldr	r2, [pc, #272]	@ (8005670 <min_poll+0x148>)
 8005560:	6013      	str	r3, [r2, #0]

    bool remote_connected = (now - self->transport_fifo.last_received_anything_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 8005562:	4b43      	ldr	r3, [pc, #268]	@ (8005670 <min_poll+0x148>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005572:	4293      	cmp	r3, r2
 8005574:	bf94      	ite	ls
 8005576:	2301      	movls	r3, #1
 8005578:	2300      	movhi	r3, #0
 800557a:	76fb      	strb	r3, [r7, #27]
    bool remote_active = (now - self->transport_fifo.last_received_frame_ms < TRANSPORT_IDLE_TIMEOUT_MS);
 800557c:	4b3c      	ldr	r3, [pc, #240]	@ (8005670 <min_poll+0x148>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800558c:	4293      	cmp	r3, r2
 800558e:	bf94      	ite	ls
 8005590:	2301      	movls	r3, #1
 8005592:	2300      	movhi	r3, #0
 8005594:	76bb      	strb	r3, [r7, #26]

    // This sends one new frame or resends one old frame
    window_size = self->transport_fifo.sn_max - self->transport_fifo.sn_min; // Window size
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	767b      	strb	r3, [r7, #25]
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 80055a6:	7e7b      	ldrb	r3, [r7, #25]
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d82a      	bhi.n	8005602 <min_poll+0xda>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80055b2:	7e7a      	ldrb	r2, [r7, #25]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d224      	bcs.n	8005602 <min_poll+0xda>
        // There are new frames we can send; but don't even bother if there's no buffer space for them
        struct transport_frame *frame = transport_fifo_get(self, window_size);
 80055b8:	7e7b      	ldrb	r3, [r7, #25]
 80055ba:	4619      	mov	r1, r3
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff fbb9 	bl	8004d34 <transport_fifo_get>
 80055c2:	6178      	str	r0, [r7, #20]
        if (ON_WIRE_SIZE(frame->payload_len) <= min_tx_space(self->port)) {
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	799b      	ldrb	r3, [r3, #6]
 80055c8:	f103 040b 	add.w	r4, r3, #11
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f89a 	bl	800570c <min_tx_space>
 80055d8:	4603      	mov	r3, r0
 80055da:	429c      	cmp	r4, r3
 80055dc:	d834      	bhi.n	8005648 <min_poll+0x120>
            frame->seq = self->transport_fifo.sn_max;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 20e7 	ldrb.w	r2, [r3, #231]	@ 0xe7
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	721a      	strb	r2, [r3, #8]
            transport_fifo_send(self, frame);
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f7ff fbbe 	bl	8004d6c <transport_fifo_send>

            // Move window on
            self->transport_fifo.sn_max++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80055f6:	3301      	adds	r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 8005600:	e022      	b.n	8005648 <min_poll+0x120>
        }
    } else {
        // Sender cannot send new frames so resend old ones (if there's anyone there)
        if ((window_size > 0) && remote_connected) {
 8005602:	7e7b      	ldrb	r3, [r7, #25]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d020      	beq.n	800564a <min_poll+0x122>
 8005608:	7efb      	ldrb	r3, [r7, #27]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01d      	beq.n	800564a <min_poll+0x122>
            // There are unacknowledged frames. Can re-send an old frame. Pick the least recently sent one.
            struct transport_frame *oldest_frame = find_retransmit_frame(self);
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7ff fd00 	bl	8005014 <find_retransmit_frame>
 8005614:	6138      	str	r0, [r7, #16]
            if (now - oldest_frame->last_sent_time_ms >= TRANSPORT_FRAME_RETRANSMIT_TIMEOUT_MS) {
 8005616:	4b16      	ldr	r3, [pc, #88]	@ (8005670 <min_poll+0x148>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2bf9      	cmp	r3, #249	@ 0xf9
 8005622:	d912      	bls.n	800564a <min_poll+0x122>
                // Resending oldest frame if there's a chance there's enough space to send it
                if (ON_WIRE_SIZE(oldest_frame->payload_len) <= min_tx_space(self->port)) {
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	799b      	ldrb	r3, [r3, #6]
 8005628:	f103 040b 	add.w	r4, r3, #11
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005632:	4618      	mov	r0, r3
 8005634:	f000 f86a 	bl	800570c <min_tx_space>
 8005638:	4603      	mov	r3, r0
 800563a:	429c      	cmp	r4, r3
 800563c:	d805      	bhi.n	800564a <min_poll+0x122>
                    transport_fifo_send(self, oldest_frame);
 800563e:	6939      	ldr	r1, [r7, #16]
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff fb93 	bl	8004d6c <transport_fifo_send>
 8005646:	e000      	b.n	800564a <min_poll+0x122>
    if ((window_size < TRANSPORT_MAX_WINDOW_SIZE) && (self->transport_fifo.n_frames > window_size)) {
 8005648:	bf00      	nop
        }
    }

#ifndef DISABLE_TRANSPORT_ACK_RETRANSMIT
    // Periodically transmit the ACK with the rn value, unless the line has gone idle
    if (now - self->transport_fifo.last_sent_ack_time_ms > TRANSPORT_ACK_RETRANSMIT_TIMEOUT_MS) {
 800564a:	4b09      	ldr	r3, [pc, #36]	@ (8005670 <min_poll+0x148>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2bfa      	cmp	r3, #250	@ 0xfa
 8005658:	d905      	bls.n	8005666 <min_poll+0x13e>
        if (remote_active) {
 800565a:	7ebb      	ldrb	r3, [r7, #26]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <min_poll+0x13e>
            send_ack(self);
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f7ff fbb7 	bl	8004dd4 <send_ack>
        }
    }
#endif // DISABLE_TRANSPORT_ACK_RETRANSMIT
#endif // TRANSPORT_PROTOCOL
}
 8005666:	bf00      	nop
 8005668:	3724      	adds	r7, #36	@ 0x24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd90      	pop	{r4, r7, pc}
 800566e:	bf00      	nop
 8005670:	20001a04 	.word	0x20001a04

08005674 <min_init_context>:
#ifdef VALIDATE_MAX_PAYLOAD
void min_init_context_validate(struct min_context *self, uint8_t port, void *p_rx_frame_checksum)
#else
void min_init_context(struct min_context *self, uint8_t port)
#endif
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
    // compiling calling code and this code.
    assert((void *)(self->rx_frame_payload_buf + MAX_PAYLOAD) <= p_rx_frame_checksum);
#endif
#endif
    // Initialize context
    self->rx_header_bytes_seen = 0;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
    self->rx_frame_state = SEARCHING_FOR_SOF;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
    self->port = port;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	78fa      	ldrb	r2, [r7, #3]
 8005694:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

#ifdef TRANSPORT_PROTOCOL
    // Counters for diagnosis purposes
    self->transport_fifo.spurious_acks = 0;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    self->transport_fifo.sequence_mismatch_drop = 0;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    self->transport_fifo.dropped_frames = 0;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    self->transport_fifo.resets_received = 0;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    self->transport_fifo.n_ring_buffer_bytes_max = 0;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
    self->transport_fifo.n_frames_max = 0;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
    transport_fifo_reset(self);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff fbd5 	bl	8004e78 <transport_fifo_reset>
#endif // TRANSPORT_PROTOCOL
    min_debug_print("MIN init complete\n");
 80056ce:	4803      	ldr	r0, [pc, #12]	@ (80056dc <min_init_context+0x68>)
 80056d0:	f000 f806 	bl	80056e0 <min_debug_print>
}
 80056d4:	bf00      	nop
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	0800d9bc 	.word	0x0800d9bc

080056e0 <min_debug_print>:
#include "UART/uart_driver.h"

#ifdef MIN_DEBUG_PRINTING
#include "stdio.h"
#include "stdarg.h"
void min_debug_print(const char *msg, ...) {
 80056e0:	b40f      	push	{r0, r1, r2, r3}
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, msg);
 80056e8:	f107 0314 	add.w	r3, r7, #20
 80056ec:	607b      	str	r3, [r7, #4]
    vprintf(msg, args);
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	6938      	ldr	r0, [r7, #16]
 80056f2:	f006 fb0b 	bl	800bd0c <viprintf>
    printf("\r");
 80056f6:	200d      	movs	r0, #13
 80056f8:	f006 fa06 	bl	800bb08 <putchar>
    va_end(args);
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005706:	b004      	add	sp, #16
 8005708:	4770      	bx	lr
	...

0800570c <min_tx_space>:
#endif

static MIN_Context_t *registered_contexts[MAX_MIN_CONTEXTS] = {0};

uint16_t min_tx_space(uint8_t port)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	71fb      	strb	r3, [r7, #7]
    return UART_Driver_TXNumFreeSlots(USART6);
 8005716:	4804      	ldr	r0, [pc, #16]	@ (8005728 <min_tx_space+0x1c>)
 8005718:	f7fb ff9b 	bl	8001652 <UART_Driver_TXNumFreeSlots>
 800571c:	4603      	mov	r3, r0
/*
 * Since the implementation uses UART TX in Blocking/IRQ mode, we assume that
 * the buffer always has enough space, so this function returns a constant value.
 */
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40011400 	.word	0x40011400

0800572c <min_tx_byte>:

void min_tx_byte(uint8_t port, uint8_t byte)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	460a      	mov	r2, r1
 8005736:	71fb      	strb	r3, [r7, #7]
 8005738:	4613      	mov	r3, r2
 800573a:	71bb      	strb	r3, [r7, #6]
    if (port == F7Disco_PORT)
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <min_tx_byte+0x20>
    {
    	UART_Driver_Write(USART6, byte);
 8005742:	79bb      	ldrb	r3, [r7, #6]
 8005744:	4619      	mov	r1, r3
 8005746:	4803      	ldr	r0, [pc, #12]	@ (8005754 <min_tx_byte+0x28>)
 8005748:	f7fb ff49 	bl	80015de <UART_Driver_Write>
#ifdef TEST_DEMO_MIN
        HAL_UART_Transmit(&huart6, &byte, 1, 10);
#endif
    }
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40011400 	.word	0x40011400

08005758 <min_tx_start>:
 * This function is called before sending data. It can be used to
 * perform actions such as disabling TX interrupts or preparing
 * the hardware for transmission.
 */
void min_tx_start(uint8_t port)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	71fb      	strb	r3, [r7, #7]
    (void)port;
    // Example: Disable TX interrupt if needed (not required in this case)
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <min_tx_finished>:
 * This function is called when data transmission is finished.
 * It can be used to restore the previous state if any changes
 * were made in `min_tx_start()`.
 */
void min_tx_finished(uint8_t port)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	4603      	mov	r3, r0
 8005776:	71fb      	strb	r3, [r7, #7]
    (void)port;
    // Example: Restore TX interrupt state if modified earlier
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <min_time_ms>:
 * a timestamp for timeout handling and scheduling.
 *
 * @return uint32_t The current system time in milliseconds.
 */
uint32_t min_time_ms(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
    return HAL_GetTick(); // Uses HAL function to get system uptime
 8005788:	f001 fdb4 	bl	80072f4 <HAL_GetTick>
 800578c:	4603      	mov	r3, r0
}
 800578e:	4618      	mov	r0, r3
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <MIN_Context_Init>:

void MIN_Context_Init(MIN_Context_t *ctx, uint8_t port) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	70fb      	strb	r3, [r7, #3]
    min_init_context(&ctx->min_ctx, port);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	4611      	mov	r1, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff ff64 	bl	8005674 <min_init_context>
    min_transport_reset(&ctx->min_ctx, true);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2101      	movs	r1, #1
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fb9b 	bl	8004eec <min_transport_reset>
    ctx->last_poll_time = min_time_ms();
 80057b6:	f7ff ffe5 	bl	8005784 <min_time_ms>
 80057ba:	4602      	mov	r2, r0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    ctx->timeout_triggered = false;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
#ifdef AUTO_REINIT_ON_TIMEOUT
    ctx->auto_reinit = true;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 220d 	strb.w	r2, [r3, #525]	@ 0x20d
#endif
    if (port < MAX_MIN_CONTEXTS) {
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d804      	bhi.n	80057e2 <MIN_Context_Init+0x4e>
        registered_contexts[port] = ctx;
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	4904      	ldr	r1, [pc, #16]	@ (80057ec <MIN_Context_Init+0x58>)
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20001a08 	.word	0x20001a08

080057f0 <MIN_ReInit>:

void MIN_ReInit(MIN_Context_t *ctx) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
    min_init_context(&ctx->min_ctx, ctx->min_ctx.port);
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f7ff ff36 	bl	8005674 <min_init_context>
    min_transport_reset(&ctx->min_ctx, true);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2101      	movs	r1, #1
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff fb6d 	bl	8004eec <min_transport_reset>
    ctx->last_poll_time = min_time_ms();
 8005812:	f7ff ffb7 	bl	8005784 <min_time_ms>
 8005816:	4602      	mov	r2, r0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    ctx->timeout_triggered = false;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <MIN_RegisterTimeoutCallback>:

void MIN_RegisterTimeoutCallback(MIN_Context_t *ctx, void (*callback)(MIN_Context_t *ctx)) {
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
    ctx->timeout_callback = callback;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <MIN_App_Poll>:

void MIN_App_Poll(MIN_Context_t *ctx, const uint8_t *rx_data, uint32_t rx_len) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
    min_poll(&ctx->min_ctx, rx_data, rx_len);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff fe62 	bl	8005528 <min_poll>
    uint32_t now = min_time_ms();
 8005864:	f7ff ff8e 	bl	8005784 <min_time_ms>
 8005868:	6178      	str	r0, [r7, #20]
    if (ctx->min_ctx.transport_fifo.n_frames > 0) {
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d035      	beq.n	80058e0 <MIN_App_Poll+0x94>
        struct transport_frame *oldest = &ctx->min_ctx.transport_fifo.frames[ctx->min_ctx.transport_fifo.head_idx];
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800587a:	461a      	mov	r2, r3
 800587c:	4613      	mov	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	613b      	str	r3, [r7, #16]
        if ((now - oldest->last_sent_time_ms) > MIN_FRAME_TIMEOUT_MS) {
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005896:	4293      	cmp	r3, r2
 8005898:	d91e      	bls.n	80058d8 <MIN_App_Poll+0x8c>
            if (!ctx->timeout_triggered) {
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 320c 	ldrb.w	r3, [r3, #524]	@ 0x20c
 80058a0:	f083 0301 	eor.w	r3, r3, #1
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01a      	beq.n	80058e0 <MIN_App_Poll+0x94>
                if (ctx->timeout_callback) {
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <MIN_App_Poll+0x72>
                    ctx->timeout_callback(ctx);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	4798      	blx	r3
                }
                ctx->timeout_triggered = true;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
#ifdef AUTO_REINIT_ON_TIMEOUT
                if (ctx->auto_reinit) {
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 320d 	ldrb.w	r3, [r3, #525]	@ 0x20d
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <MIN_App_Poll+0x94>
                    MIN_ReInit(ctx);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f7ff ff8d 	bl	80057f0 <MIN_ReInit>
 80058d6:	e003      	b.n	80058e0 <MIN_App_Poll+0x94>
                }
#endif
            }
        } else {
            ctx->timeout_triggered = false;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
        }
    }
    ctx->last_poll_time = now;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
}
 80058e8:	bf00      	nop
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <MIN_Send>:
void MIN_Send(MIN_Context_t *ctx, uint8_t min_id, const uint8_t *payload, uint8_t len) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	607a      	str	r2, [r7, #4]
 80058fa:	461a      	mov	r2, r3
 80058fc:	460b      	mov	r3, r1
 80058fe:	72fb      	strb	r3, [r7, #11]
 8005900:	4613      	mov	r3, r2
 8005902:	72bb      	strb	r3, [r7, #10]
    if (min_queue_has_space_for_frame(&ctx->min_ctx, len)) {
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	7aba      	ldrb	r2, [r7, #10]
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fb62 	bl	8004fd4 <min_queue_has_space_for_frame>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d005      	beq.n	8005922 <MIN_Send+0x32>
        min_queue_frame(&ctx->min_ctx, min_id, payload, len);
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	7abb      	ldrb	r3, [r7, #10]
 800591a:	7af9      	ldrb	r1, [r7, #11]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	f7ff fb09 	bl	8004f34 <min_queue_frame>
    }
}
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <min_application_handler>:
 *
 * @note This function is responsible for dispatching commands
 *       to the appropriate handlers based on `min_id`.
 */

void min_application_handler(uint8_t min_id, const uint8_t *min_payload, uint8_t len_payload, uint8_t port) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6039      	str	r1, [r7, #0]
 8005934:	4611      	mov	r1, r2
 8005936:	461a      	mov	r2, r3
 8005938:	4603      	mov	r3, r0
 800593a:	71fb      	strb	r3, [r7, #7]
 800593c:	460b      	mov	r3, r1
 800593e:	71bb      	strb	r3, [r7, #6]
 8005940:	4613      	mov	r3, r2
 8005942:	717b      	strb	r3, [r7, #5]
    if (port >= MAX_MIN_CONTEXTS) {
 8005944:	797b      	ldrb	r3, [r7, #5]
 8005946:	2b03      	cmp	r3, #3
 8005948:	d82d      	bhi.n	80059a6 <min_application_handler+0x7a>
        return;
    }
    MIN_Context_t *ctx = registered_contexts[port];
 800594a:	797b      	ldrb	r3, [r7, #5]
 800594c:	4a19      	ldr	r2, [pc, #100]	@ (80059b4 <min_application_handler+0x88>)
 800594e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005952:	613b      	str	r3, [r7, #16]
    if (ctx == NULL) {
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d027      	beq.n	80059aa <min_application_handler+0x7e>
        return;
    }
    CPROCESS_SetState(CPROCESS_FREE);
 800595a:	2000      	movs	r0, #0
 800595c:	f7fb f9e6 	bl	8000d2c <CPROCESS_SetState>
    const MIN_Command_t *command_table = MIN_GetCommandTable();
 8005960:	f000 fbf4 	bl	800614c <MIN_GetCommandTable>
 8005964:	60f8      	str	r0, [r7, #12]
    int table_size = MIN_GetCommandTableSize();
 8005966:	f000 fbfb 	bl	8006160 <MIN_GetCommandTableSize>
 800596a:	60b8      	str	r0, [r7, #8]
    for (int i = 0; i < table_size; i++) {
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	e014      	b.n	800599c <min_application_handler+0x70>
        if (command_table[i].id == min_id) {
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	79fa      	ldrb	r2, [r7, #7]
 800597e:	429a      	cmp	r2, r3
 8005980:	d109      	bne.n	8005996 <min_application_handler+0x6a>
            command_table[i].handler(ctx, min_payload, len_payload);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4413      	add	r3, r2
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	79ba      	ldrb	r2, [r7, #6]
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6938      	ldr	r0, [r7, #16]
 8005992:	4798      	blx	r3
            return;
 8005994:	e00a      	b.n	80059ac <min_application_handler+0x80>
    for (int i = 0; i < table_size; i++) {
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	3301      	adds	r3, #1
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	dbe6      	blt.n	8005972 <min_application_handler+0x46>
 80059a4:	e002      	b.n	80059ac <min_application_handler+0x80>
        return;
 80059a6:	bf00      	nop
 80059a8:	e000      	b.n	80059ac <min_application_handler+0x80>
        return;
 80059aa:	bf00      	nop
        }
    }
    // Optional: Add default handler for unmatched commands
}
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20001a08 	.word	0x20001a08

080059b8 <UpdateCRC16_XMODEM>:
//           chunk_size, chunk_size, (unsigned long)sample, (unsigned long)sample);
//
//    MIN_Send(ctx, GOT_IT, NULL, 0);
//}

static uint16_t UpdateCRC16_XMODEM(uint16_t crc, uint8_t byte) {
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	460a      	mov	r2, r1
 80059c2:	80fb      	strh	r3, [r7, #6]
 80059c4:	4613      	mov	r3, r2
 80059c6:	717b      	strb	r3, [r7, #5]
    const uint16_t polynomial = 0x1021; // CRC16 XMODEM
 80059c8:	f241 0321 	movw	r3, #4129	@ 0x1021
 80059cc:	81bb      	strh	r3, [r7, #12]
    crc ^= (uint16_t)byte << 8;
 80059ce:	797b      	ldrb	r3, [r7, #5]
 80059d0:	b21b      	sxth	r3, r3
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	b21a      	sxth	r2, r3
 80059d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059da:	4053      	eors	r3, r2
 80059dc:	b21b      	sxth	r3, r3
 80059de:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 80059e0:	2300      	movs	r3, #0
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e013      	b.n	8005a0e <UpdateCRC16_XMODEM+0x56>
        if (crc & 0x8000) {
 80059e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da09      	bge.n	8005a02 <UpdateCRC16_XMODEM+0x4a>
            crc = (crc << 1) ^ polynomial;
 80059ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	b21a      	sxth	r2, r3
 80059f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80059fa:	4053      	eors	r3, r2
 80059fc:	b21b      	sxth	r3, r3
 80059fe:	80fb      	strh	r3, [r7, #6]
 8005a00:	e002      	b.n	8005a08 <UpdateCRC16_XMODEM+0x50>
        } else {
            crc <<= 1;
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	80fb      	strh	r3, [r7, #6]
    for (uint8_t bit = 0; bit < 8; bit++) {
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b07      	cmp	r3, #7
 8005a12:	d9e8      	bls.n	80059e6 <UpdateCRC16_XMODEM+0x2e>
        }
    }
    return crc;
 8005a14:	88fb      	ldrh	r3, [r7, #6]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <MIN_Handler_SAMPLERATE_SET>:

static void MIN_Handler_SAMPLERATE_SET(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	71fb      	strb	r3, [r7, #7]
    if (len < 4) {
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d803      	bhi.n	8005a40 <MIN_Handler_SAMPLERATE_SET+0x1c>
        printf("Invalid payload length.\r\n");
 8005a38:	4813      	ldr	r0, [pc, #76]	@ (8005a88 <MIN_Handler_SAMPLERATE_SET+0x64>)
 8005a3a:	f006 f8c3 	bl	800bbc4 <puts>
        return;
 8005a3e:	e01f      	b.n	8005a80 <MIN_Handler_SAMPLERATE_SET+0x5c>
    }

    g_sample_rate = (payload[3] << 24) | (payload[2] << 16) | (payload[1] << 8) | payload[0];
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	3303      	adds	r3, #3
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	061a      	lsls	r2, r3, #24
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	041b      	lsls	r3, r3, #16
 8005a50:	431a      	orrs	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	3301      	adds	r3, #1
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	7812      	ldrb	r2, [r2, #0]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	461a      	mov	r2, r3
 8005a64:	4b09      	ldr	r3, [pc, #36]	@ (8005a8c <MIN_Handler_SAMPLERATE_SET+0x68>)
 8005a66:	601a      	str	r2, [r3, #0]

    printf("Sample rate set to %lu Hz\r\n", (unsigned long)g_sample_rate);
 8005a68:	4b08      	ldr	r3, [pc, #32]	@ (8005a8c <MIN_Handler_SAMPLERATE_SET+0x68>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4808      	ldr	r0, [pc, #32]	@ (8005a90 <MIN_Handler_SAMPLERATE_SET+0x6c>)
 8005a70:	f006 f838 	bl	800bae4 <iprintf>
    MIN_Send(ctx, DONE, NULL, 0);
 8005a74:	2300      	movs	r3, #0
 8005a76:	2200      	movs	r2, #0
 8005a78:	213f      	movs	r1, #63	@ 0x3f
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7ff ff38 	bl	80058f0 <MIN_Send>
}
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	0800d9d0 	.word	0x0800d9d0
 8005a8c:	20001a20 	.word	0x20001a20
 8005a90:	0800d9ec 	.word	0x0800d9ec

08005a94 <MIN_Handler_SAMPLERATE_GET>:

static void MIN_Handler_SAMPLERATE_GET(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    uint8_t response[4];

    response[0] = (uint8_t)(g_sample_rate & 0xFF);
 8005aa2:	4b12      	ldr	r3, [pc, #72]	@ (8005aec <MIN_Handler_SAMPLERATE_GET+0x58>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	753b      	strb	r3, [r7, #20]
    response[1] = (uint8_t)((g_sample_rate >> 8) & 0xFF);
 8005aaa:	4b10      	ldr	r3, [pc, #64]	@ (8005aec <MIN_Handler_SAMPLERATE_GET+0x58>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	0a1b      	lsrs	r3, r3, #8
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	757b      	strb	r3, [r7, #21]
    response[2] = (uint8_t)((g_sample_rate >> 16) & 0xFF);
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8005aec <MIN_Handler_SAMPLERATE_GET+0x58>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	0c1b      	lsrs	r3, r3, #16
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	75bb      	strb	r3, [r7, #22]
    response[3] = (uint8_t)((g_sample_rate >> 24) & 0xFF);
 8005abe:	4b0b      	ldr	r3, [pc, #44]	@ (8005aec <MIN_Handler_SAMPLERATE_GET+0x58>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	0e1b      	lsrs	r3, r3, #24
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	75fb      	strb	r3, [r7, #23]

    printf("Sample rate retrieved: %lu Hz\r\n", (unsigned long)g_sample_rate);
 8005ac8:	4b08      	ldr	r3, [pc, #32]	@ (8005aec <MIN_Handler_SAMPLERATE_GET+0x58>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4619      	mov	r1, r3
 8005ace:	4808      	ldr	r0, [pc, #32]	@ (8005af0 <MIN_Handler_SAMPLERATE_GET+0x5c>)
 8005ad0:	f006 f808 	bl	800bae4 <iprintf>
    MIN_Send(ctx, SAMPLERATE_GET_ACK, response, sizeof(response));
 8005ad4:	f107 0214 	add.w	r2, r7, #20
 8005ad8:	2304      	movs	r3, #4
 8005ada:	2119      	movs	r1, #25
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f7ff ff07 	bl	80058f0 <MIN_Send>
}
 8005ae2:	bf00      	nop
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20001a20 	.word	0x20001a20
 8005af0:	0800da08 	.word	0x0800da08

08005af4 <MIN_Handler_COLLECT_DATA>:

static void MIN_Handler_COLLECT_DATA(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	71fb      	strb	r3, [r7, #7]

	toOBC_SetState(toOBC_BUSY);
 8005b02:	2002      	movs	r0, #2
 8005b04:	f7fb f882 	bl	8000c0c <toOBC_SetState>

    if (len < 4) {
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d806      	bhi.n	8005b1c <MIN_Handler_COLLECT_DATA+0x28>
        printf("Invalid payload length.\r\n");
 8005b0e:	4826      	ldr	r0, [pc, #152]	@ (8005ba8 <MIN_Handler_COLLECT_DATA+0xb4>)
 8005b10:	f006 f858 	bl	800bbc4 <puts>
    	toOBC_SetState(toOBC_ERROR);
 8005b14:	2000      	movs	r0, #0
 8005b16:	f7fb f879 	bl	8000c0c <toOBC_SetState>
        return;
 8005b1a:	e042      	b.n	8005ba2 <MIN_Handler_COLLECT_DATA+0xae>
    }

    uint32_t sample = (payload[3] << 24) | (payload[2] << 16) | (payload[1] << 8) | payload[0];
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	3303      	adds	r3, #3
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	061a      	lsls	r2, r3, #24
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	3302      	adds	r3, #2
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	3301      	adds	r3, #1
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	4313      	orrs	r3, r2
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	7812      	ldrb	r2, [r2, #0]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
    uint32_t total_size = sample * 2;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	613b      	str	r3, [r7, #16]

    if (total_size > RAM_D2_200KB_SIZE) {
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f5b3 3f48 	cmp.w	r3, #204800	@ 0x32000
 8005b4c:	d909      	bls.n	8005b62 <MIN_Handler_COLLECT_DATA+0x6e>
        printf("Data size exceeds available RAM (%lu > %lu).\r\n",
 8005b4e:	f44f 3248 	mov.w	r2, #204800	@ 0x32000
 8005b52:	6939      	ldr	r1, [r7, #16]
 8005b54:	4815      	ldr	r0, [pc, #84]	@ (8005bac <MIN_Handler_COLLECT_DATA+0xb8>)
 8005b56:	f005 ffc5 	bl	800bae4 <iprintf>
               (unsigned long)total_size, (unsigned long)RAM_D2_200KB_SIZE);
    	toOBC_SetState(toOBC_ERROR);
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	f7fb f856 	bl	8000c0c <toOBC_SetState>
        return;
 8005b60:	e01f      	b.n	8005ba2 <MIN_Handler_COLLECT_DATA+0xae>
    }

    if (CSP_QSPI_Read(RAM_D2_200KB_START, 0, total_size) != HAL_OK) {
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	2100      	movs	r1, #0
 8005b66:	4812      	ldr	r0, [pc, #72]	@ (8005bb0 <MIN_Handler_COLLECT_DATA+0xbc>)
 8005b68:	f7fb fb44 	bl	80011f4 <CSP_QSPI_Read>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <MIN_Handler_COLLECT_DATA+0x8c>
        printf("Error reading QSPI Flash.\r\n");
 8005b72:	4810      	ldr	r0, [pc, #64]	@ (8005bb4 <MIN_Handler_COLLECT_DATA+0xc0>)
 8005b74:	f006 f826 	bl	800bbc4 <puts>
    	toOBC_SetState(toOBC_ERROR);
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f7fb f847 	bl	8000c0c <toOBC_SetState>
        return;
 8005b7e:	e010      	b.n	8005ba2 <MIN_Handler_COLLECT_DATA+0xae>
    }

    g_total_size = total_size;
 8005b80:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb8 <MIN_Handler_COLLECT_DATA+0xc4>)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	6013      	str	r3, [r2, #0]

    printf("Collected %lu samples, total size: %lu bytes\r\n",
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	6979      	ldr	r1, [r7, #20]
 8005b8a:	480c      	ldr	r0, [pc, #48]	@ (8005bbc <MIN_Handler_COLLECT_DATA+0xc8>)
 8005b8c:	f005 ffaa 	bl	800bae4 <iprintf>
           (unsigned long)sample, (unsigned long)total_size);
    MIN_Send(ctx, DONE, NULL, 0);
 8005b90:	2300      	movs	r3, #0
 8005b92:	2200      	movs	r2, #0
 8005b94:	213f      	movs	r1, #63	@ 0x3f
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff feaa 	bl	80058f0 <MIN_Send>
	toOBC_SetState(toOBC_READYSEND);
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	f7fb f835 	bl	8000c0c <toOBC_SetState>
}
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	0800d9d0 	.word	0x0800d9d0
 8005bac:	0800da28 	.word	0x0800da28
 8005bb0:	20001c74 	.word	0x20001c74
 8005bb4:	0800da58 	.word	0x0800da58
 8005bb8:	20001a18 	.word	0x20001a18
 8005bbc:	0800da74 	.word	0x0800da74

08005bc0 <MIN_Handler_PRE_DATA>:

static void MIN_Handler_PRE_DATA(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8005bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	b08e      	sub	sp, #56	@ 0x38
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	71fb      	strb	r3, [r7, #7]
 8005bd0:	466b      	mov	r3, sp
 8005bd2:	469a      	mov	sl, r3
    if (len < 2) {
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d803      	bhi.n	8005be2 <MIN_Handler_PRE_DATA+0x22>
        printf("Invalid payload length.\r\n");
 8005bda:	486d      	ldr	r0, [pc, #436]	@ (8005d90 <MIN_Handler_PRE_DATA+0x1d0>)
 8005bdc:	f005 fff2 	bl	800bbc4 <puts>
        return;
 8005be0:	e0d0      	b.n	8005d84 <MIN_Handler_PRE_DATA+0x1c4>
    }

    if (g_total_size == 0) {
 8005be2:	4b6c      	ldr	r3, [pc, #432]	@ (8005d94 <MIN_Handler_PRE_DATA+0x1d4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d103      	bne.n	8005bf2 <MIN_Handler_PRE_DATA+0x32>
        printf("No data collected yet.\r\n");
 8005bea:	486b      	ldr	r0, [pc, #428]	@ (8005d98 <MIN_Handler_PRE_DATA+0x1d8>)
 8005bec:	f005 ffea 	bl	800bbc4 <puts>
        return;
 8005bf0:	e0c8      	b.n	8005d84 <MIN_Handler_PRE_DATA+0x1c4>
    }

    uint16_t chunk_size = (payload[1] << 8) | payload[0];
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	b21b      	sxth	r3, r3
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	b21a      	sxth	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	b21b      	sxth	r3, r3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	b21b      	sxth	r3, r3
 8005c08:	847b      	strh	r3, [r7, #34]	@ 0x22
    g_chunk_size = chunk_size;
 8005c0a:	4a64      	ldr	r2, [pc, #400]	@ (8005d9c <MIN_Handler_PRE_DATA+0x1dc>)
 8005c0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c0e:	8013      	strh	r3, [r2, #0]

    uint32_t num_chunks = (g_total_size + g_chunk_size - 1) / g_chunk_size;
 8005c10:	4b62      	ldr	r3, [pc, #392]	@ (8005d9c <MIN_Handler_PRE_DATA+0x1dc>)
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	4b5f      	ldr	r3, [pc, #380]	@ (8005d94 <MIN_Handler_PRE_DATA+0x1d4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8005d9c <MIN_Handler_PRE_DATA+0x1dc>)
 8005c20:	8812      	ldrh	r2, [r2, #0]
 8005c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c26:	61fb      	str	r3, [r7, #28]
    if (num_chunks > MAX_CHUNKS) {
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	2b14      	cmp	r3, #20
 8005c2c:	d905      	bls.n	8005c3a <MIN_Handler_PRE_DATA+0x7a>
        printf("Too many chunks (%lu > %d).\r\n", (unsigned long)num_chunks, MAX_CHUNKS);
 8005c2e:	2214      	movs	r2, #20
 8005c30:	69f9      	ldr	r1, [r7, #28]
 8005c32:	485b      	ldr	r0, [pc, #364]	@ (8005da0 <MIN_Handler_PRE_DATA+0x1e0>)
 8005c34:	f005 ff56 	bl	800bae4 <iprintf>
        return;
 8005c38:	e0a4      	b.n	8005d84 <MIN_Handler_PRE_DATA+0x1c4>
    }

    memset(g_chunk_crcs, 0, sizeof(g_chunk_crcs));
 8005c3a:	2228      	movs	r2, #40	@ 0x28
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4859      	ldr	r0, [pc, #356]	@ (8005da4 <MIN_Handler_PRE_DATA+0x1e4>)
 8005c40:	f006 f91c 	bl	800be7c <memset>

    uint8_t response[1 + 2 * num_chunks];
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	1c5e      	adds	r6, r3, #1
 8005c4a:	4633      	mov	r3, r6
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	2300      	movs	r3, #0
 8005c52:	46b0      	mov	r8, r6
 8005c54:	4699      	mov	r9, r3
 8005c56:	f04f 0200 	mov.w	r2, #0
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4634      	mov	r4, r6
 8005c6e:	461d      	mov	r5, r3
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	00eb      	lsls	r3, r5, #3
 8005c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c7e:	00e2      	lsls	r2, r4, #3
 8005c80:	1df3      	adds	r3, r6, #7
 8005c82:	08db      	lsrs	r3, r3, #3
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	ebad 0d03 	sub.w	sp, sp, r3
 8005c8a:	466b      	mov	r3, sp
 8005c8c:	3300      	adds	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
    response[0] = (uint8_t)num_chunks;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < num_chunks; i++) {
 8005c98:	2300      	movs	r3, #0
 8005c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c9c:	e04f      	b.n	8005d3e <MIN_Handler_PRE_DATA+0x17e>
        uint32_t offset = i * g_chunk_size;
 8005c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d9c <MIN_Handler_PRE_DATA+0x1dc>)
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	613b      	str	r3, [r7, #16]
        uint32_t size = (i == num_chunks - 1) ? (g_total_size % g_chunk_size) : g_chunk_size;
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d109      	bne.n	8005cca <MIN_Handler_PRE_DATA+0x10a>
 8005cb6:	4b37      	ldr	r3, [pc, #220]	@ (8005d94 <MIN_Handler_PRE_DATA+0x1d4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a38      	ldr	r2, [pc, #224]	@ (8005d9c <MIN_Handler_PRE_DATA+0x1dc>)
 8005cbc:	8812      	ldrh	r2, [r2, #0]
 8005cbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cc2:	fb01 f202 	mul.w	r2, r1, r2
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	e001      	b.n	8005cce <MIN_Handler_PRE_DATA+0x10e>
 8005cca:	4b34      	ldr	r3, [pc, #208]	@ (8005d9c <MIN_Handler_PRE_DATA+0x1dc>)
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	633b      	str	r3, [r7, #48]	@ 0x30
        if (size == 0) size = g_chunk_size;
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <MIN_Handler_PRE_DATA+0x11c>
 8005cd6:	4b31      	ldr	r3, [pc, #196]	@ (8005d9c <MIN_Handler_PRE_DATA+0x1dc>)
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	633b      	str	r3, [r7, #48]	@ 0x30
        uint16_t crc = 0x0000;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        for (uint32_t j = 0; j < size; j++) {
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ce4:	e00f      	b.n	8005d06 <MIN_Handler_PRE_DATA+0x146>
            crc = UpdateCRC16_XMODEM(crc, RAM_D2_200KB_START[offset + j]);
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cea:	4413      	add	r3, r2
 8005cec:	4a2e      	ldr	r2, [pc, #184]	@ (8005da8 <MIN_Handler_PRE_DATA+0x1e8>)
 8005cee:	4413      	add	r3, r2
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fe5e 	bl	80059b8 <UpdateCRC16_XMODEM>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        for (uint32_t j = 0; j < size; j++) {
 8005d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d02:	3301      	adds	r3, #1
 8005d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d3eb      	bcc.n	8005ce6 <MIN_Handler_PRE_DATA+0x126>
        }
        g_chunk_crcs[i] = crc;
 8005d0e:	4925      	ldr	r1, [pc, #148]	@ (8005da4 <MIN_Handler_PRE_DATA+0x1e4>)
 8005d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005d14:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        response[1 + 2 * i] = (uint8_t)(crc >> 8);
 8005d18:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	3301      	adds	r3, #1
 8005d24:	b2d1      	uxtb	r1, r2
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	54d1      	strb	r1, [r2, r3]
        response[2 + 2 * i] = (uint8_t)(crc & 0xFF);
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005d32:	b2d1      	uxtb	r1, r2
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	54d1      	strb	r1, [r2, r3]
    for (uint32_t i = 0; i < num_chunks; i++) {
 8005d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d3ab      	bcc.n	8005c9e <MIN_Handler_PRE_DATA+0xde>
    }

    MIN_Send(ctx, PRE_DATA_ACK, response, sizeof(response));
 8005d46:	b2f3      	uxtb	r3, r6
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	2116      	movs	r1, #22
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff fdcf 	bl	80058f0 <MIN_Send>
    printf("Pre Data Success: %lu Chunks\r\n", (unsigned long)num_chunks);
 8005d52:	69f9      	ldr	r1, [r7, #28]
 8005d54:	4815      	ldr	r0, [pc, #84]	@ (8005dac <MIN_Handler_PRE_DATA+0x1ec>)
 8005d56:	f005 fec5 	bl	800bae4 <iprintf>
    for (uint32_t i = 0; i < num_chunks; i++) {
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d5e:	e00b      	b.n	8005d78 <MIN_Handler_PRE_DATA+0x1b8>
        printf("%lu -> CRC16: 0x%04X\r\n", (unsigned long)i, g_chunk_crcs[i]);
 8005d60:	4a10      	ldr	r2, [pc, #64]	@ (8005da4 <MIN_Handler_PRE_DATA+0x1e4>)
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d6c:	4810      	ldr	r0, [pc, #64]	@ (8005db0 <MIN_Handler_PRE_DATA+0x1f0>)
 8005d6e:	f005 feb9 	bl	800bae4 <iprintf>
    for (uint32_t i = 0; i < num_chunks; i++) {
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	3301      	adds	r3, #1
 8005d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d3ef      	bcc.n	8005d60 <MIN_Handler_PRE_DATA+0x1a0>
 8005d80:	46d5      	mov	sp, sl
 8005d82:	e000      	b.n	8005d86 <MIN_Handler_PRE_DATA+0x1c6>
        return;
 8005d84:	46d5      	mov	sp, sl
    }
}
 8005d86:	3738      	adds	r7, #56	@ 0x38
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8e:	bf00      	nop
 8005d90:	0800d9d0 	.word	0x0800d9d0
 8005d94:	20001a18 	.word	0x20001a18
 8005d98:	0800daa4 	.word	0x0800daa4
 8005d9c:	20001a1c 	.word	0x20001a1c
 8005da0:	0800dabc 	.word	0x0800dabc
 8005da4:	20001a24 	.word	0x20001a24
 8005da8:	20001c74 	.word	0x20001c74
 8005dac:	0800dadc 	.word	0x0800dadc
 8005db0:	0800dafc 	.word	0x0800dafc

08005db4 <MIN_Handler_PRE_CHUNK>:

static void MIN_Handler_PRE_CHUNK(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	@ 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	71fb      	strb	r3, [r7, #7]
    if (len < 1) {
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d103      	bne.n	8005dd0 <MIN_Handler_PRE_CHUNK+0x1c>
        printf("Invalid payload length.\r\n");
 8005dc8:	483d      	ldr	r0, [pc, #244]	@ (8005ec0 <MIN_Handler_PRE_CHUNK+0x10c>)
 8005dca:	f005 fefb 	bl	800bbc4 <puts>
        return;
 8005dce:	e073      	b.n	8005eb8 <MIN_Handler_PRE_CHUNK+0x104>
    }

    uint8_t chunk_num = payload[0];
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint32_t num_chunks = (g_total_size + g_chunk_size - 1) / g_chunk_size;
 8005dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ec4 <MIN_Handler_PRE_CHUNK+0x110>)
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4b3a      	ldr	r3, [pc, #232]	@ (8005ec8 <MIN_Handler_PRE_CHUNK+0x114>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4413      	add	r3, r2
 8005de4:	3b01      	subs	r3, #1
 8005de6:	4a37      	ldr	r2, [pc, #220]	@ (8005ec4 <MIN_Handler_PRE_CHUNK+0x110>)
 8005de8:	8812      	ldrh	r2, [r2, #0]
 8005dea:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dee:	61fb      	str	r3, [r7, #28]

    if (chunk_num >= num_chunks) {
 8005df0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d807      	bhi.n	8005e0a <MIN_Handler_PRE_CHUNK+0x56>
        printf("Invalid chunk number (%u >= %lu).\r\n", chunk_num, (unsigned long)num_chunks);
 8005dfa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	4619      	mov	r1, r3
 8005e02:	4832      	ldr	r0, [pc, #200]	@ (8005ecc <MIN_Handler_PRE_CHUNK+0x118>)
 8005e04:	f005 fe6e 	bl	800bae4 <iprintf>
        return;
 8005e08:	e056      	b.n	8005eb8 <MIN_Handler_PRE_CHUNK+0x104>
    }

    uint32_t offset = chunk_num * g_chunk_size;
 8005e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ec4 <MIN_Handler_PRE_CHUNK+0x110>)
 8005e10:	8812      	ldrh	r2, [r2, #0]
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	61bb      	str	r3, [r7, #24]
    uint32_t size = (chunk_num == num_chunks - 1) ? (g_total_size % g_chunk_size) : g_chunk_size;
 8005e18:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d109      	bne.n	8005e38 <MIN_Handler_PRE_CHUNK+0x84>
 8005e24:	4b28      	ldr	r3, [pc, #160]	@ (8005ec8 <MIN_Handler_PRE_CHUNK+0x114>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a26      	ldr	r2, [pc, #152]	@ (8005ec4 <MIN_Handler_PRE_CHUNK+0x110>)
 8005e2a:	8812      	ldrh	r2, [r2, #0]
 8005e2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e30:	fb01 f202 	mul.w	r2, r1, r2
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	e001      	b.n	8005e3c <MIN_Handler_PRE_CHUNK+0x88>
 8005e38:	4b22      	ldr	r3, [pc, #136]	@ (8005ec4 <MIN_Handler_PRE_CHUNK+0x110>)
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (size == 0) size = g_chunk_size;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <MIN_Handler_PRE_CHUNK+0x96>
 8005e44:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec4 <MIN_Handler_PRE_CHUNK+0x110>)
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24

    memset(SPI_RAM_START, 0, SPI_RAM_SIZE);
 8005e4a:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8005e4e:	2100      	movs	r1, #0
 8005e50:	481f      	ldr	r0, [pc, #124]	@ (8005ed0 <MIN_Handler_PRE_CHUNK+0x11c>)
 8005e52:	f006 f813 	bl	800be7c <memset>
    memcpy(SPI_RAM_START, RAM_D2_200KB_START + offset, size);
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed4 <MIN_Handler_PRE_CHUNK+0x120>)
 8005e5a:	4413      	add	r3, r2
 8005e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e5e:	4619      	mov	r1, r3
 8005e60:	481b      	ldr	r0, [pc, #108]	@ (8005ed0 <MIN_Handler_PRE_CHUNK+0x11c>)
 8005e62:	f006 f8a6 	bl	800bfb2 <memcpy>

    SPI_SlaveDevice_ResetDMA((uint32_t)SPI_RAM_START, g_chunk_size);
 8005e66:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed0 <MIN_Handler_PRE_CHUNK+0x11c>)
 8005e68:	4b16      	ldr	r3, [pc, #88]	@ (8005ec4 <MIN_Handler_PRE_CHUNK+0x110>)
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7fe f9f8 	bl	8004264 <SPI_SlaveDevice_ResetDMA>

    uint8_t response[2];
    response[0] = (uint8_t)(g_chunk_crcs[chunk_num] >> 8);
 8005e74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e78:	4a17      	ldr	r2, [pc, #92]	@ (8005ed8 <MIN_Handler_PRE_CHUNK+0x124>)
 8005e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e7e:	0a1b      	lsrs	r3, r3, #8
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	753b      	strb	r3, [r7, #20]
    response[1] = (uint8_t)(g_chunk_crcs[chunk_num] & 0xFF);
 8005e86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e8a:	4a13      	ldr	r2, [pc, #76]	@ (8005ed8 <MIN_Handler_PRE_CHUNK+0x124>)
 8005e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	757b      	strb	r3, [r7, #21]

    MIN_Send(ctx, PRE_CHUNK_ACK, response, sizeof(response));
 8005e94:	f107 0214 	add.w	r2, r7, #20
 8005e98:	2302      	movs	r3, #2
 8005e9a:	2114      	movs	r1, #20
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff fd27 	bl	80058f0 <MIN_Send>
    printf("Prepared chunk %u for SPI read, size: %lu bytes, CRC16: 0x%04X\r\n",
 8005ea2:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
           chunk_num, (unsigned long)size, g_chunk_crcs[chunk_num]);
 8005ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8005ed8 <MIN_Handler_PRE_CHUNK+0x124>)
 8005eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    printf("Prepared chunk %u for SPI read, size: %lu bytes, CRC16: 0x%04X\r\n",
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb2:	480a      	ldr	r0, [pc, #40]	@ (8005edc <MIN_Handler_PRE_CHUNK+0x128>)
 8005eb4:	f005 fe16 	bl	800bae4 <iprintf>
}
 8005eb8:	3728      	adds	r7, #40	@ 0x28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	0800d9d0 	.word	0x0800d9d0
 8005ec4:	20001a1c 	.word	0x20001a1c
 8005ec8:	20001a18 	.word	0x20001a18
 8005ecc:	0800db14 	.word	0x0800db14
 8005ed0:	20033c74 	.word	0x20033c74
 8005ed4:	20001c74 	.word	0x20001c74
 8005ed8:	20001a24 	.word	0x20001a24
 8005edc:	0800db38 	.word	0x0800db38

08005ee0 <MIN_Handler_COLLECT_PACKAGE>:

static void MIN_Handler_COLLECT_PACKAGE(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08a      	sub	sp, #40	@ 0x28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    const uint32_t package_size = SPI_RAM_SIZE;
 8005eee:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005ef2:	61fb      	str	r3, [r7, #28]
    const uint32_t sample_count = package_size / 2;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	61bb      	str	r3, [r7, #24]

    memset(SPI_RAM_START, 0, SPI_RAM_SIZE);
 8005efa:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8005efe:	2100      	movs	r1, #0
 8005f00:	481f      	ldr	r0, [pc, #124]	@ (8005f80 <MIN_Handler_COLLECT_PACKAGE+0xa0>)
 8005f02:	f005 ffbb 	bl	800be7c <memset>

    if (CSP_QSPI_Read(SPI_RAM_START, 0, SPI_RAM_SIZE) != HAL_OK) {
 8005f06:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	481c      	ldr	r0, [pc, #112]	@ (8005f80 <MIN_Handler_COLLECT_PACKAGE+0xa0>)
 8005f0e:	f7fb f971 	bl	80011f4 <CSP_QSPI_Read>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <MIN_Handler_COLLECT_PACKAGE+0x40>
        printf("Error reading QSPI Flash.\r\n");
 8005f18:	481a      	ldr	r0, [pc, #104]	@ (8005f84 <MIN_Handler_COLLECT_PACKAGE+0xa4>)
 8005f1a:	f005 fe53 	bl	800bbc4 <puts>
 8005f1e:	e02b      	b.n	8005f78 <MIN_Handler_COLLECT_PACKAGE+0x98>
        return;
    }

    uint16_t crc = 0x0000;
 8005f20:	2300      	movs	r3, #0
 8005f22:	84fb      	strh	r3, [r7, #38]	@ 0x26
    for (uint32_t i = 0; i < package_size; i++) {
 8005f24:	2300      	movs	r3, #0
 8005f26:	623b      	str	r3, [r7, #32]
 8005f28:	e00d      	b.n	8005f46 <MIN_Handler_COLLECT_PACKAGE+0x66>
        crc = UpdateCRC16_XMODEM(crc, SPI_RAM_START[i]);
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	4a14      	ldr	r2, [pc, #80]	@ (8005f80 <MIN_Handler_COLLECT_PACKAGE+0xa0>)
 8005f2e:	4413      	add	r3, r2
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f34:	4611      	mov	r1, r2
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fd3e 	bl	80059b8 <UpdateCRC16_XMODEM>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    for (uint32_t i = 0; i < package_size; i++) {
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	3301      	adds	r3, #1
 8005f44:	623b      	str	r3, [r7, #32]
 8005f46:	6a3a      	ldr	r2, [r7, #32]
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d3ed      	bcc.n	8005f2a <MIN_Handler_COLLECT_PACKAGE+0x4a>
    }

    uint8_t response[2];
    response[0] = (uint8_t)(crc >> 8);
 8005f4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f50:	0a1b      	lsrs	r3, r3, #8
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	753b      	strb	r3, [r7, #20]
    response[1] = (uint8_t)(crc & 0xFF);
 8005f58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	757b      	strb	r3, [r7, #21]

    printf("Collected package: %lu samples, size: %lu bytes, CRC16: 0x%04X\r\n",
 8005f5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	69b9      	ldr	r1, [r7, #24]
 8005f64:	4808      	ldr	r0, [pc, #32]	@ (8005f88 <MIN_Handler_COLLECT_PACKAGE+0xa8>)
 8005f66:	f005 fdbd 	bl	800bae4 <iprintf>
           (unsigned long)sample_count, (unsigned long)package_size, crc);
    MIN_Send(ctx, COLLECT_PACKAGE_ACK, response, sizeof(response));
 8005f6a:	f107 0214 	add.w	r2, r7, #20
 8005f6e:	2302      	movs	r3, #2
 8005f70:	211b      	movs	r1, #27
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff fcbc 	bl	80058f0 <MIN_Send>
}
 8005f78:	3728      	adds	r7, #40	@ 0x28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20033c74 	.word	0x20033c74
 8005f84:	0800da58 	.word	0x0800da58
 8005f88:	0800db7c 	.word	0x0800db7c

08005f8c <MIN_Handler_READ_TEMP_CMD>:

static void MIN_Handler_READ_TEMP_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "25.3";

    MIN_Send(ctx, TEMP_RESPONSE, response, sizeof(response) - 1);
 8005f9a:	2304      	movs	r3, #4
 8005f9c:	4a04      	ldr	r2, [pc, #16]	@ (8005fb0 <MIN_Handler_READ_TEMP_CMD+0x24>)
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff fca5 	bl	80058f0 <MIN_Send>
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	0800ddac 	.word	0x0800ddac

08005fb4 <MIN_Handler_CONTROL_TEMP_CMD>:

static void MIN_Handler_CONTROL_TEMP_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71fb      	strb	r3, [r7, #7]
    printf("Payload (%u bytes):", len);
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4811      	ldr	r0, [pc, #68]	@ (800600c <MIN_Handler_CONTROL_TEMP_CMD+0x58>)
 8005fc8:	f005 fd8c 	bl	800bae4 <iprintf>
    for (uint8_t i = 0; i < len; i++) {
 8005fcc:	2300      	movs	r3, #0
 8005fce:	75fb      	strb	r3, [r7, #23]
 8005fd0:	e00a      	b.n	8005fe8 <MIN_Handler_CONTROL_TEMP_CMD+0x34>
        printf(" %02X", payload[i]);
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	480c      	ldr	r0, [pc, #48]	@ (8006010 <MIN_Handler_CONTROL_TEMP_CMD+0x5c>)
 8005fde:	f005 fd81 	bl	800bae4 <iprintf>
    for (uint8_t i = 0; i < len; i++) {
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
 8005fe8:	7dfa      	ldrb	r2, [r7, #23]
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d3f0      	bcc.n	8005fd2 <MIN_Handler_CONTROL_TEMP_CMD+0x1e>
    }
    printf("\r\n");
 8005ff0:	4808      	ldr	r0, [pc, #32]	@ (8006014 <MIN_Handler_CONTROL_TEMP_CMD+0x60>)
 8005ff2:	f005 fde7 	bl	800bbc4 <puts>

    static const uint8_t response[] = "OK";
    MIN_Send(ctx, CONTROL_TEMP_ACK, response, sizeof(response) - 1);
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	4a07      	ldr	r2, [pc, #28]	@ (8006018 <MIN_Handler_CONTROL_TEMP_CMD+0x64>)
 8005ffa:	2104      	movs	r1, #4
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7ff fc77 	bl	80058f0 <MIN_Send>
}
 8006002:	bf00      	nop
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	0800dbc0 	.word	0x0800dbc0
 8006010:	0800dbd4 	.word	0x0800dbd4
 8006014:	0800dbdc 	.word	0x0800dbdc
 8006018:	0800ddb4 	.word	0x0800ddb4

0800601c <MIN_Handler_HEARTBEAT_CMD>:


static void MIN_Handler_HEARTBEAT_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "HB";
    MIN_Send(ctx, HEARTBEAT_ACK, response, sizeof(response) - 1);
 800602a:	2302      	movs	r3, #2
 800602c:	4a04      	ldr	r2, [pc, #16]	@ (8006040 <MIN_Handler_HEARTBEAT_CMD+0x24>)
 800602e:	2106      	movs	r1, #6
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f7ff fc5d 	bl	80058f0 <MIN_Send>
}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	0800ddb8 	.word	0x0800ddb8

08006044 <MIN_Handler_GET_STATUS_CMD>:

static void MIN_Handler_GET_STATUS_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	4613      	mov	r3, r2
 8006050:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "OK";
    MIN_Send(ctx, STATUS_RESPONSE, response, sizeof(response) - 1);
 8006052:	2302      	movs	r3, #2
 8006054:	4a04      	ldr	r2, [pc, #16]	@ (8006068 <MIN_Handler_GET_STATUS_CMD+0x24>)
 8006056:	2108      	movs	r1, #8
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff fc49 	bl	80058f0 <MIN_Send>
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	0800ddbc 	.word	0x0800ddbc

0800606c <MIN_Handler_RESET_CMD>:

static void MIN_Handler_RESET_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    MIN_ReInit(ctx);
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f7ff fbb8 	bl	80057f0 <MIN_ReInit>
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <MIN_Handler_PING_CMD>:

static void MIN_Handler_PING_CMD(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    MIN_Send(ctx, PONG_CMD, NULL, 0);
 8006096:	2300      	movs	r3, #0
 8006098:	2200      	movs	r2, #0
 800609a:	210b      	movs	r1, #11
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff fc27 	bl	80058f0 <MIN_Send>
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <MIN_Handler_DUMMY_CMD_1>:

static void MIN_Handler_DUMMY_CMD_1(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	4613      	mov	r3, r2
 80060b8:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "D1";
    MIN_Send(ctx, DUMMY_CMD_1, response, sizeof(response) - 1);
 80060ba:	2302      	movs	r3, #2
 80060bc:	4a04      	ldr	r2, [pc, #16]	@ (80060d0 <MIN_Handler_DUMMY_CMD_1+0x24>)
 80060be:	210c      	movs	r1, #12
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7ff fc15 	bl	80058f0 <MIN_Send>
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	0800ddc0 	.word	0x0800ddc0

080060d4 <MIN_Handler_DUMMY_CMD_2>:

static void MIN_Handler_DUMMY_CMD_2(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "D2";
    MIN_Send(ctx, DUMMY_CMD_2, response, sizeof(response) - 1);
 80060e2:	2302      	movs	r3, #2
 80060e4:	4a04      	ldr	r2, [pc, #16]	@ (80060f8 <MIN_Handler_DUMMY_CMD_2+0x24>)
 80060e6:	210d      	movs	r1, #13
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7ff fc01 	bl	80058f0 <MIN_Send>
}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	0800ddc4 	.word	0x0800ddc4

080060fc <MIN_Handler_CUSTOM_CMD_1>:

static void MIN_Handler_CUSTOM_CMD_1(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "C1";
    MIN_Send(ctx, CUSTOM_CMD_1_ACK, response, sizeof(response) - 1);
 800610a:	2302      	movs	r3, #2
 800610c:	4a04      	ldr	r2, [pc, #16]	@ (8006120 <MIN_Handler_CUSTOM_CMD_1+0x24>)
 800610e:	210f      	movs	r1, #15
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7ff fbed 	bl	80058f0 <MIN_Send>
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	0800ddc8 	.word	0x0800ddc8

08006124 <MIN_Handler_CUSTOM_CMD_2>:

static void MIN_Handler_CUSTOM_CMD_2(MIN_Context_t *ctx, const uint8_t *payload, uint8_t len) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4613      	mov	r3, r2
 8006130:	71fb      	strb	r3, [r7, #7]
    (void)payload; (void)len;
    static const uint8_t response[] = "C2";
    MIN_Send(ctx, CUSTOM_CMD_2_ACK, response, sizeof(response) - 1);
 8006132:	2302      	movs	r3, #2
 8006134:	4a04      	ldr	r2, [pc, #16]	@ (8006148 <MIN_Handler_CUSTOM_CMD_2+0x24>)
 8006136:	2111      	movs	r1, #17
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff fbd9 	bl	80058f0 <MIN_Send>
}
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	0800ddcc 	.word	0x0800ddcc

0800614c <MIN_GetCommandTable>:

// =================================================================
// Helper Functions
// =================================================================

const MIN_Command_t *MIN_GetCommandTable(void) {
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
    return command_table;
 8006150:	4b02      	ldr	r3, [pc, #8]	@ (800615c <MIN_GetCommandTable+0x10>)
}
 8006152:	4618      	mov	r0, r3
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	0800dd2c 	.word	0x0800dd2c

08006160 <MIN_GetCommandTableSize>:

int MIN_GetCommandTableSize(void) {
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
    return command_table_size;
 8006164:	2310      	movs	r3, #16
}
 8006166:	4618      	mov	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006174:	4b04      	ldr	r3, [pc, #16]	@ (8006188 <__NVIC_GetPriorityGrouping+0x18>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	0a1b      	lsrs	r3, r3, #8
 800617a:	f003 0307 	and.w	r3, r3, #7
}
 800617e:	4618      	mov	r0, r3
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	e000ed00 	.word	0xe000ed00

0800618c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	4603      	mov	r3, r0
 8006194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800619a:	2b00      	cmp	r3, #0
 800619c:	db0b      	blt.n	80061b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	f003 021f 	and.w	r2, r3, #31
 80061a4:	4907      	ldr	r1, [pc, #28]	@ (80061c4 <__NVIC_EnableIRQ+0x38>)
 80061a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	2001      	movs	r0, #1
 80061ae:	fa00 f202 	lsl.w	r2, r0, r2
 80061b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	e000e100 	.word	0xe000e100

080061c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	4603      	mov	r3, r0
 80061d0:	6039      	str	r1, [r7, #0]
 80061d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	db0a      	blt.n	80061f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	490c      	ldr	r1, [pc, #48]	@ (8006214 <__NVIC_SetPriority+0x4c>)
 80061e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e6:	0112      	lsls	r2, r2, #4
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	440b      	add	r3, r1
 80061ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061f0:	e00a      	b.n	8006208 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	4908      	ldr	r1, [pc, #32]	@ (8006218 <__NVIC_SetPriority+0x50>)
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	3b04      	subs	r3, #4
 8006200:	0112      	lsls	r2, r2, #4
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	440b      	add	r3, r1
 8006206:	761a      	strb	r2, [r3, #24]
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	e000e100 	.word	0xe000e100
 8006218:	e000ed00 	.word	0xe000ed00

0800621c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800621c:	b480      	push	{r7}
 800621e:	b089      	sub	sp, #36	@ 0x24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	f1c3 0307 	rsb	r3, r3, #7
 8006236:	2b04      	cmp	r3, #4
 8006238:	bf28      	it	cs
 800623a:	2304      	movcs	r3, #4
 800623c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	3304      	adds	r3, #4
 8006242:	2b06      	cmp	r3, #6
 8006244:	d902      	bls.n	800624c <NVIC_EncodePriority+0x30>
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3b03      	subs	r3, #3
 800624a:	e000      	b.n	800624e <NVIC_EncodePriority+0x32>
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006250:	f04f 32ff 	mov.w	r2, #4294967295
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	43da      	mvns	r2, r3
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	401a      	ands	r2, r3
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006264:	f04f 31ff 	mov.w	r1, #4294967295
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	fa01 f303 	lsl.w	r3, r1, r3
 800626e:	43d9      	mvns	r1, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006274:	4313      	orrs	r3, r2
         );
}
 8006276:	4618      	mov	r0, r3
 8006278:	3724      	adds	r7, #36	@ 0x24
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <LL_DMA_SetDataTransferDirection>:
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8006290:	4a0d      	ldr	r2, [pc, #52]	@ (80062c8 <LL_DMA_SetDataTransferDirection+0x44>)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4413      	add	r3, r2
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4413      	add	r3, r2
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062a4:	4908      	ldr	r1, [pc, #32]	@ (80062c8 <LL_DMA_SetDataTransferDirection+0x44>)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	440b      	add	r3, r1
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	4619      	mov	r1, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	440b      	add	r3, r1
 80062b2:	4619      	mov	r1, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	600b      	str	r3, [r1, #0]
}
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	0800ddd0 	.word	0x0800ddd0

080062cc <LL_DMA_SetMode>:
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80062d8:	4a0d      	ldr	r2, [pc, #52]	@ (8006310 <LL_DMA_SetMode+0x44>)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4413      	add	r3, r2
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 80062ec:	4908      	ldr	r1, [pc, #32]	@ (8006310 <LL_DMA_SetMode+0x44>)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	440b      	add	r3, r1
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	4619      	mov	r1, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	440b      	add	r3, r1
 80062fa:	4619      	mov	r1, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4313      	orrs	r3, r2
 8006300:	600b      	str	r3, [r1, #0]
}
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	0800ddd0 	.word	0x0800ddd0

08006314 <LL_DMA_SetPeriphIncMode>:
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8006320:	4a0d      	ldr	r2, [pc, #52]	@ (8006358 <LL_DMA_SetPeriphIncMode+0x44>)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4413      	add	r3, r2
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006334:	4908      	ldr	r1, [pc, #32]	@ (8006358 <LL_DMA_SetPeriphIncMode+0x44>)
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	440b      	add	r3, r1
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	4619      	mov	r1, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	440b      	add	r3, r1
 8006342:	4619      	mov	r1, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	0800ddd0 	.word	0x0800ddd0

0800635c <LL_DMA_SetMemoryIncMode>:
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8006368:	4a0d      	ldr	r2, [pc, #52]	@ (80063a0 <LL_DMA_SetMemoryIncMode+0x44>)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4413      	add	r3, r2
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800637c:	4908      	ldr	r1, [pc, #32]	@ (80063a0 <LL_DMA_SetMemoryIncMode+0x44>)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	440b      	add	r3, r1
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	4619      	mov	r1, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	440b      	add	r3, r1
 800638a:	4619      	mov	r1, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4313      	orrs	r3, r2
 8006390:	600b      	str	r3, [r1, #0]
}
 8006392:	bf00      	nop
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	0800ddd0 	.word	0x0800ddd0

080063a4 <LL_DMA_SetPeriphSize>:
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80063b0:	4a0d      	ldr	r2, [pc, #52]	@ (80063e8 <LL_DMA_SetPeriphSize+0x44>)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4413      	add	r3, r2
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80063c4:	4908      	ldr	r1, [pc, #32]	@ (80063e8 <LL_DMA_SetPeriphSize+0x44>)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	440b      	add	r3, r1
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	4619      	mov	r1, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	440b      	add	r3, r1
 80063d2:	4619      	mov	r1, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	600b      	str	r3, [r1, #0]
}
 80063da:	bf00      	nop
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	0800ddd0 	.word	0x0800ddd0

080063ec <LL_DMA_SetMemorySize>:
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80063f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006430 <LL_DMA_SetMemorySize+0x44>)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	4413      	add	r3, r2
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 800640c:	4908      	ldr	r1, [pc, #32]	@ (8006430 <LL_DMA_SetMemorySize+0x44>)
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	440b      	add	r3, r1
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	4619      	mov	r1, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	440b      	add	r3, r1
 800641a:	4619      	mov	r1, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4313      	orrs	r3, r2
 8006420:	600b      	str	r3, [r1, #0]
}
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	0800ddd0 	.word	0x0800ddd0

08006434 <LL_DMA_SetStreamPriorityLevel>:
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8006440:	4a0d      	ldr	r2, [pc, #52]	@ (8006478 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4413      	add	r3, r2
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	461a      	mov	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4413      	add	r3, r2
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006454:	4908      	ldr	r1, [pc, #32]	@ (8006478 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	440b      	add	r3, r1
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	4619      	mov	r1, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	440b      	add	r3, r1
 8006462:	4619      	mov	r1, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4313      	orrs	r3, r2
 8006468:	600b      	str	r3, [r1, #0]
}
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	0800ddd0 	.word	0x0800ddd0

0800647c <LL_DMA_SetChannelSelection>:
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8006488:	4a0d      	ldr	r2, [pc, #52]	@ (80064c0 <LL_DMA_SetChannelSelection+0x44>)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	4413      	add	r3, r2
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4413      	add	r3, r2
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800649c:	4908      	ldr	r1, [pc, #32]	@ (80064c0 <LL_DMA_SetChannelSelection+0x44>)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	440b      	add	r3, r1
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	4619      	mov	r1, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	440b      	add	r3, r1
 80064aa:	4619      	mov	r1, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	600b      	str	r3, [r1, #0]
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	0800ddd0 	.word	0x0800ddd0

080064c4 <LL_DMA_DisableFifoMode>:
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80064ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006500 <LL_DMA_DisableFifoMode+0x3c>)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	4413      	add	r3, r2
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4413      	add	r3, r2
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	4908      	ldr	r1, [pc, #32]	@ (8006500 <LL_DMA_DisableFifoMode+0x3c>)
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	440a      	add	r2, r1
 80064e4:	7812      	ldrb	r2, [r2, #0]
 80064e6:	4611      	mov	r1, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	440a      	add	r2, r1
 80064ec:	f023 0304 	bic.w	r3, r3, #4
 80064f0:	6153      	str	r3, [r2, #20]
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	0800ddd0 	.word	0x0800ddd0

08006504 <LL_SPI_SetStandard>:
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f023 0210 	bic.w	r2, r3, #16
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <LL_SPI_DisableNSSPulseMgt>:
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f023 0208 	bic.w	r2, r3, #8
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	605a      	str	r2, [r3, #4]
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <LL_USART_Enable>:
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f043 0201 	orr.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <LL_USART_ConfigAsyncMode>:
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	609a      	str	r2, [r3, #8]
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <LL_GPIO_SetOutputPin>:
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	619a      	str	r2, [r3, #24]
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <LL_GPIO_ResetOutputPin>:
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	041a      	lsls	r2, r3, #16
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	619a      	str	r2, [r3, #24]
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80065d8:	4b08      	ldr	r3, [pc, #32]	@ (80065fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80065da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065dc:	4907      	ldr	r1, [pc, #28]	@ (80065fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80065e4:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80065e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4013      	ands	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80065ee:	68fb      	ldr	r3, [r7, #12]
}
 80065f0:	bf00      	nop
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	40023800 	.word	0x40023800

08006600 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006608:	4b08      	ldr	r3, [pc, #32]	@ (800662c <LL_APB2_GRP1_EnableClock+0x2c>)
 800660a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800660c:	4907      	ldr	r1, [pc, #28]	@ (800662c <LL_APB2_GRP1_EnableClock+0x2c>)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4313      	orrs	r3, r2
 8006612:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006614:	4b05      	ldr	r3, [pc, #20]	@ (800662c <LL_APB2_GRP1_EnableClock+0x2c>)
 8006616:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4013      	ands	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800661e:	68fb      	ldr	r3, [r7, #12]
}
 8006620:	bf00      	nop
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	40023800 	.word	0x40023800

08006630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006634:	f000 fe0d 	bl	8007252 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006638:	f000 f814 	bl	8006664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800663c:	f000 fa50 	bl	8006ae0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006640:	f000 fa36 	bl	8006ab0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8006644:	f000 f96a 	bl	800691c <MX_USART1_UART_Init>
  MX_QUADSPI_Init();
 8006648:	f000 f874 	bl	8006734 <MX_QUADSPI_Init>
  MX_USART6_UART_Init();
 800664c:	f000 f996 	bl	800697c <MX_USART6_UART_Init>
  MX_SPI5_Init();
 8006650:	f000 f89c 	bl	800678c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  Mgmt_SystemInitStepZero();
 8006654:	f7f9 ffda 	bl	800060c <Mgmt_SystemInitStepZero>

  Mgmt_SystemInitFinal();
 8006658:	f7fa f836 	bl	80006c8 <Mgmt_SystemInitFinal>

  Mgmt_SystemStart();
 800665c:	f7fa f856 	bl	800070c <Mgmt_SystemStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006660:	bf00      	nop
 8006662:	e7fd      	b.n	8006660 <main+0x30>

08006664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b094      	sub	sp, #80	@ 0x50
 8006668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800666a:	f107 0320 	add.w	r3, r7, #32
 800666e:	2230      	movs	r2, #48	@ 0x30
 8006670:	2100      	movs	r1, #0
 8006672:	4618      	mov	r0, r3
 8006674:	f005 fc02 	bl	800be7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006678:	f107 030c 	add.w	r3, r7, #12
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	605a      	str	r2, [r3, #4]
 8006682:	609a      	str	r2, [r3, #8]
 8006684:	60da      	str	r2, [r3, #12]
 8006686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006688:	4b28      	ldr	r3, [pc, #160]	@ (800672c <SystemClock_Config+0xc8>)
 800668a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668c:	4a27      	ldr	r2, [pc, #156]	@ (800672c <SystemClock_Config+0xc8>)
 800668e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006692:	6413      	str	r3, [r2, #64]	@ 0x40
 8006694:	4b25      	ldr	r3, [pc, #148]	@ (800672c <SystemClock_Config+0xc8>)
 8006696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80066a0:	4b23      	ldr	r3, [pc, #140]	@ (8006730 <SystemClock_Config+0xcc>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80066a8:	4a21      	ldr	r2, [pc, #132]	@ (8006730 <SystemClock_Config+0xcc>)
 80066aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006730 <SystemClock_Config+0xcc>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80066bc:	2301      	movs	r3, #1
 80066be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80066c0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066c6:	2302      	movs	r3, #2
 80066c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80066ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80066d0:	2319      	movs	r3, #25
 80066d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 240;
 80066d4:	23f0      	movs	r3, #240	@ 0xf0
 80066d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80066d8:	2302      	movs	r3, #2
 80066da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80066dc:	2302      	movs	r3, #2
 80066de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066e0:	f107 0320 	add.w	r3, r7, #32
 80066e4:	4618      	mov	r0, r3
 80066e6:	f001 fe53 	bl	8008390 <HAL_RCC_OscConfig>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80066f0:	f000 fa9c 	bl	8006c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066f4:	230f      	movs	r3, #15
 80066f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066f8:	2302      	movs	r3, #2
 80066fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066fc:	2300      	movs	r3, #0
 80066fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006700:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800670a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800670c:	f107 030c 	add.w	r3, r7, #12
 8006710:	2103      	movs	r1, #3
 8006712:	4618      	mov	r0, r3
 8006714:	f002 f8e0 	bl	80088d8 <HAL_RCC_ClockConfig>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800671e:	f000 fa85 	bl	8006c2c <Error_Handler>
  }
}
 8006722:	bf00      	nop
 8006724:	3750      	adds	r7, #80	@ 0x50
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40023800 	.word	0x40023800
 8006730:	40007000 	.word	0x40007000

08006734 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8006738:	4b12      	ldr	r3, [pc, #72]	@ (8006784 <MX_QUADSPI_Init+0x50>)
 800673a:	4a13      	ldr	r2, [pc, #76]	@ (8006788 <MX_QUADSPI_Init+0x54>)
 800673c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 23;
 800673e:	4b11      	ldr	r3, [pc, #68]	@ (8006784 <MX_QUADSPI_Init+0x50>)
 8006740:	2217      	movs	r2, #23
 8006742:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8006744:	4b0f      	ldr	r3, [pc, #60]	@ (8006784 <MX_QUADSPI_Init+0x50>)
 8006746:	2204      	movs	r2, #4
 8006748:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800674a:	4b0e      	ldr	r3, [pc, #56]	@ (8006784 <MX_QUADSPI_Init+0x50>)
 800674c:	2210      	movs	r2, #16
 800674e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8006750:	4b0c      	ldr	r3, [pc, #48]	@ (8006784 <MX_QUADSPI_Init+0x50>)
 8006752:	2217      	movs	r2, #23
 8006754:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8006756:	4b0b      	ldr	r3, [pc, #44]	@ (8006784 <MX_QUADSPI_Init+0x50>)
 8006758:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800675c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800675e:	4b09      	ldr	r3, [pc, #36]	@ (8006784 <MX_QUADSPI_Init+0x50>)
 8006760:	2200      	movs	r2, #0
 8006762:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8006764:	4b07      	ldr	r3, [pc, #28]	@ (8006784 <MX_QUADSPI_Init+0x50>)
 8006766:	2200      	movs	r2, #0
 8006768:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800676a:	4b06      	ldr	r3, [pc, #24]	@ (8006784 <MX_QUADSPI_Init+0x50>)
 800676c:	2200      	movs	r2, #0
 800676e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006770:	4804      	ldr	r0, [pc, #16]	@ (8006784 <MX_QUADSPI_Init+0x50>)
 8006772:	f001 f93f 	bl	80079f4 <HAL_QSPI_Init>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800677c:	f000 fa56 	bl	8006c2c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8006780:	bf00      	nop
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20001a4c 	.word	0x20001a4c
 8006788:	a0001000 	.word	0xa0001000

0800678c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b090      	sub	sp, #64	@ 0x40
 8006790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 0 */

  /* USER CODE END SPI5_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8006792:	f107 0318 	add.w	r3, r7, #24
 8006796:	2228      	movs	r2, #40	@ 0x28
 8006798:	2100      	movs	r1, #0
 800679a:	4618      	mov	r0, r3
 800679c:	f005 fb6e 	bl	800be7c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a0:	463b      	mov	r3, r7
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	605a      	str	r2, [r3, #4]
 80067a8:	609a      	str	r2, [r3, #8]
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	611a      	str	r2, [r3, #16]
 80067ae:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
 80067b0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80067b4:	f7ff ff24 	bl	8006600 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80067b8:	2020      	movs	r0, #32
 80067ba:	f7ff ff09 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>
  PF7   ------> SPI5_SCK
  PF6   ------> SPI5_NSS
  PF9   ------> SPI5_MOSI
  PF8   ------> SPI5_MISO
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80067be:	2380      	movs	r3, #128	@ 0x80
 80067c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80067c2:	2302      	movs	r3, #2
 80067c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80067c6:	2303      	movs	r3, #3
 80067c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80067ce:	2300      	movs	r3, #0
 80067d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80067d2:	2305      	movs	r3, #5
 80067d4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80067d6:	463b      	mov	r3, r7
 80067d8:	4619      	mov	r1, r3
 80067da:	484d      	ldr	r0, [pc, #308]	@ (8006910 <MX_SPI5_Init+0x184>)
 80067dc:	f004 fa41 	bl	800ac62 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80067e0:	2340      	movs	r3, #64	@ 0x40
 80067e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80067e4:	2302      	movs	r3, #2
 80067e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80067e8:	2303      	movs	r3, #3
 80067ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80067f4:	2305      	movs	r3, #5
 80067f6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80067f8:	463b      	mov	r3, r7
 80067fa:	4619      	mov	r1, r3
 80067fc:	4844      	ldr	r0, [pc, #272]	@ (8006910 <MX_SPI5_Init+0x184>)
 80067fe:	f004 fa30 	bl	800ac62 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8006802:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006806:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006808:	2302      	movs	r3, #2
 800680a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800680c:	2303      	movs	r3, #3
 800680e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006814:	2300      	movs	r3, #0
 8006816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8006818:	2305      	movs	r3, #5
 800681a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800681c:	463b      	mov	r3, r7
 800681e:	4619      	mov	r1, r3
 8006820:	483b      	ldr	r0, [pc, #236]	@ (8006910 <MX_SPI5_Init+0x184>)
 8006822:	f004 fa1e 	bl	800ac62 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8006826:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800682a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800682c:	2302      	movs	r3, #2
 800682e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006830:	2303      	movs	r3, #3
 8006832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800683c:	2305      	movs	r3, #5
 800683e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006840:	463b      	mov	r3, r7
 8006842:	4619      	mov	r1, r3
 8006844:	4832      	ldr	r0, [pc, #200]	@ (8006910 <MX_SPI5_Init+0x184>)
 8006846:	f004 fa0c 	bl	800ac62 <LL_GPIO_Init>

  /* SPI5 DMA Init */

  /* SPI5_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
 800684a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800684e:	2104      	movs	r1, #4
 8006850:	4830      	ldr	r0, [pc, #192]	@ (8006914 <MX_SPI5_Init+0x188>)
 8006852:	f7ff fe13 	bl	800647c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8006856:	2240      	movs	r2, #64	@ 0x40
 8006858:	2104      	movs	r1, #4
 800685a:	482e      	ldr	r0, [pc, #184]	@ (8006914 <MX_SPI5_Init+0x188>)
 800685c:	f7ff fd12 	bl	8006284 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8006860:	2200      	movs	r2, #0
 8006862:	2104      	movs	r1, #4
 8006864:	482b      	ldr	r0, [pc, #172]	@ (8006914 <MX_SPI5_Init+0x188>)
 8006866:	f7ff fde5 	bl	8006434 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 800686a:	2200      	movs	r2, #0
 800686c:	2104      	movs	r1, #4
 800686e:	4829      	ldr	r0, [pc, #164]	@ (8006914 <MX_SPI5_Init+0x188>)
 8006870:	f7ff fd2c 	bl	80062cc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8006874:	2200      	movs	r2, #0
 8006876:	2104      	movs	r1, #4
 8006878:	4826      	ldr	r0, [pc, #152]	@ (8006914 <MX_SPI5_Init+0x188>)
 800687a:	f7ff fd4b 	bl	8006314 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 800687e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006882:	2104      	movs	r1, #4
 8006884:	4823      	ldr	r0, [pc, #140]	@ (8006914 <MX_SPI5_Init+0x188>)
 8006886:	f7ff fd69 	bl	800635c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 800688a:	2200      	movs	r2, #0
 800688c:	2104      	movs	r1, #4
 800688e:	4821      	ldr	r0, [pc, #132]	@ (8006914 <MX_SPI5_Init+0x188>)
 8006890:	f7ff fd88 	bl	80063a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8006894:	2200      	movs	r2, #0
 8006896:	2104      	movs	r1, #4
 8006898:	481e      	ldr	r0, [pc, #120]	@ (8006914 <MX_SPI5_Init+0x188>)
 800689a:	f7ff fda7 	bl	80063ec <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
 800689e:	2104      	movs	r1, #4
 80068a0:	481c      	ldr	r0, [pc, #112]	@ (8006914 <MX_SPI5_Init+0x188>)
 80068a2:	f7ff fe0f 	bl	80064c4 <LL_DMA_DisableFifoMode>

  /* SPI5 interrupt Init */
  NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80068a6:	f7ff fc63 	bl	8006170 <__NVIC_GetPriorityGrouping>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2200      	movs	r2, #0
 80068ae:	2100      	movs	r1, #0
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff fcb3 	bl	800621c <NVIC_EncodePriority>
 80068b6:	4603      	mov	r3, r0
 80068b8:	4619      	mov	r1, r3
 80068ba:	2055      	movs	r0, #85	@ 0x55
 80068bc:	f7ff fc84 	bl	80061c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI5_IRQn);
 80068c0:	2055      	movs	r0, #85	@ 0x55
 80068c2:	f7ff fc63 	bl	800618c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_SLAVE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80068ce:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80068d2:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80068d4:	2300      	movs	r3, #0
 80068d6:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80068d8:	2300      	movs	r3, #0
 80068da:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_INPUT;
 80068dc:	2300      	movs	r3, #0
 80068de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80068e0:	2300      	movs	r3, #0
 80068e2:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 80068e8:	2307      	movs	r3, #7
 80068ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI5, &SPI_InitStruct);
 80068ec:	f107 0318 	add.w	r3, r7, #24
 80068f0:	4619      	mov	r1, r3
 80068f2:	4809      	ldr	r0, [pc, #36]	@ (8006918 <MX_SPI5_Init+0x18c>)
 80068f4:	f004 fdc6 	bl	800b484 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
 80068f8:	2100      	movs	r1, #0
 80068fa:	4807      	ldr	r0, [pc, #28]	@ (8006918 <MX_SPI5_Init+0x18c>)
 80068fc:	f7ff fe02 	bl	8006504 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI5);
 8006900:	4805      	ldr	r0, [pc, #20]	@ (8006918 <MX_SPI5_Init+0x18c>)
 8006902:	f7ff fe12 	bl	800652a <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8006906:	bf00      	nop
 8006908:	3740      	adds	r7, #64	@ 0x40
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40021400 	.word	0x40021400
 8006914:	40026400 	.word	0x40026400
 8006918:	40015000 	.word	0x40015000

0800691c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006920:	4b14      	ldr	r3, [pc, #80]	@ (8006974 <MX_USART1_UART_Init+0x58>)
 8006922:	4a15      	ldr	r2, [pc, #84]	@ (8006978 <MX_USART1_UART_Init+0x5c>)
 8006924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006926:	4b13      	ldr	r3, [pc, #76]	@ (8006974 <MX_USART1_UART_Init+0x58>)
 8006928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800692c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800692e:	4b11      	ldr	r3, [pc, #68]	@ (8006974 <MX_USART1_UART_Init+0x58>)
 8006930:	2200      	movs	r2, #0
 8006932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006934:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <MX_USART1_UART_Init+0x58>)
 8006936:	2200      	movs	r2, #0
 8006938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800693a:	4b0e      	ldr	r3, [pc, #56]	@ (8006974 <MX_USART1_UART_Init+0x58>)
 800693c:	2200      	movs	r2, #0
 800693e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006940:	4b0c      	ldr	r3, [pc, #48]	@ (8006974 <MX_USART1_UART_Init+0x58>)
 8006942:	220c      	movs	r2, #12
 8006944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006946:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <MX_USART1_UART_Init+0x58>)
 8006948:	2200      	movs	r2, #0
 800694a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800694c:	4b09      	ldr	r3, [pc, #36]	@ (8006974 <MX_USART1_UART_Init+0x58>)
 800694e:	2200      	movs	r2, #0
 8006950:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006952:	4b08      	ldr	r3, [pc, #32]	@ (8006974 <MX_USART1_UART_Init+0x58>)
 8006954:	2200      	movs	r2, #0
 8006956:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006958:	4b06      	ldr	r3, [pc, #24]	@ (8006974 <MX_USART1_UART_Init+0x58>)
 800695a:	2200      	movs	r2, #0
 800695c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800695e:	4805      	ldr	r0, [pc, #20]	@ (8006974 <MX_USART1_UART_Init+0x58>)
 8006960:	f002 fd90 	bl	8009484 <HAL_UART_Init>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800696a:	f000 f95f 	bl	8006c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800696e:	bf00      	nop
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20001a98 	.word	0x20001a98
 8006978:	40011000 	.word	0x40011000

0800697c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b0ae      	sub	sp, #184	@ 0xb8
 8006980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006982:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	605a      	str	r2, [r3, #4]
 800698c:	609a      	str	r2, [r3, #8]
 800698e:	60da      	str	r2, [r3, #12]
 8006990:	611a      	str	r2, [r3, #16]
 8006992:	615a      	str	r2, [r3, #20]
 8006994:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006996:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	605a      	str	r2, [r3, #4]
 80069a0:	609a      	str	r2, [r3, #8]
 80069a2:	60da      	str	r2, [r3, #12]
 80069a4:	611a      	str	r2, [r3, #16]
 80069a6:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80069a8:	463b      	mov	r3, r7
 80069aa:	2284      	movs	r2, #132	@ 0x84
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f005 fa64 	bl	800be7c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80069b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80069b8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80069ba:	2300      	movs	r3, #0
 80069bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80069be:	463b      	mov	r3, r7
 80069c0:	4618      	mov	r0, r3
 80069c2:	f002 f96f 	bl	8008ca4 <HAL_RCCEx_PeriphCLKConfig>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 80069cc:	f000 f92e 	bl	8006c2c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80069d0:	2020      	movs	r0, #32
 80069d2:	f7ff fe15 	bl	8006600 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80069d6:	2004      	movs	r0, #4
 80069d8:	f7ff fdfa 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC7   ------> USART6_RX
  PC6   ------> USART6_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80069dc:	2380      	movs	r3, #128	@ 0x80
 80069de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80069e2:	2302      	movs	r3, #2
 80069e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80069e8:	2303      	movs	r3, #3
 80069ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80069f4:	2300      	movs	r3, #0
 80069f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80069fa:	2308      	movs	r3, #8
 80069fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a00:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8006a04:	4619      	mov	r1, r3
 8006a06:	4828      	ldr	r0, [pc, #160]	@ (8006aa8 <MX_USART6_UART_Init+0x12c>)
 8006a08:	f004 f92b 	bl	800ac62 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8006a0c:	2340      	movs	r3, #64	@ 0x40
 8006a0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006a12:	2302      	movs	r3, #2
 8006a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006a24:	2300      	movs	r3, #0
 8006a26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a30:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8006a34:	4619      	mov	r1, r3
 8006a36:	481c      	ldr	r0, [pc, #112]	@ (8006aa8 <MX_USART6_UART_Init+0x12c>)
 8006a38:	f004 f913 	bl	800ac62 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006a3c:	f7ff fb98 	bl	8006170 <__NVIC_GetPriorityGrouping>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2200      	movs	r2, #0
 8006a44:	2100      	movs	r1, #0
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fbe8 	bl	800621c <NVIC_EncodePriority>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	4619      	mov	r1, r3
 8006a50:	2047      	movs	r0, #71	@ 0x47
 8006a52:	f7ff fbb9 	bl	80061c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8006a56:	2047      	movs	r0, #71	@ 0x47
 8006a58:	f7ff fb98 	bl	800618c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8006a5c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8006a60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006a64:	2300      	movs	r3, #0
 8006a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006a70:	2300      	movs	r3, #0
 8006a72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006a76:	230c      	movs	r3, #12
 8006a78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006a82:	2300      	movs	r3, #0
 8006a84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  LL_USART_Init(USART6, &USART_InitStruct);
 8006a88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4807      	ldr	r0, [pc, #28]	@ (8006aac <MX_USART6_UART_Init+0x130>)
 8006a90:	f004 fdc6 	bl	800b620 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8006a94:	4805      	ldr	r0, [pc, #20]	@ (8006aac <MX_USART6_UART_Init+0x130>)
 8006a96:	f7ff fd68 	bl	800656a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8006a9a:	4804      	ldr	r0, [pc, #16]	@ (8006aac <MX_USART6_UART_Init+0x130>)
 8006a9c:	f7ff fd55 	bl	800654a <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006aa0:	bf00      	nop
 8006aa2:	37b8      	adds	r7, #184	@ 0xb8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40020800 	.word	0x40020800
 8006aac:	40011400 	.word	0x40011400

08006ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8006ab4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8006ab8:	f7ff fd8a 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006abc:	f7ff fb58 	bl	8006170 <__NVIC_GetPriorityGrouping>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff fba8 	bl	800621c <NVIC_EncodePriority>
 8006acc:	4603      	mov	r3, r0
 8006ace:	4619      	mov	r1, r3
 8006ad0:	203c      	movs	r0, #60	@ 0x3c
 8006ad2:	f7ff fb79 	bl	80061c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8006ad6:	203c      	movs	r0, #60	@ 0x3c
 8006ad8:	f7ff fb58 	bl	800618c <__NVIC_EnableIRQ>

}
 8006adc:	bf00      	nop
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	605a      	str	r2, [r3, #4]
 8006aee:	609a      	str	r2, [r3, #8]
 8006af0:	60da      	str	r2, [r3, #12]
 8006af2:	611a      	str	r2, [r3, #16]
 8006af4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8006af6:	2010      	movs	r0, #16
 8006af8:	f7ff fd6a 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006afc:	2002      	movs	r0, #2
 8006afe:	f7ff fd67 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOK);
 8006b02:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006b06:	f7ff fd63 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8006b0a:	2008      	movs	r0, #8
 8006b0c:	f7ff fd60 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006b10:	2001      	movs	r0, #1
 8006b12:	f7ff fd5d 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8006b16:	2080      	movs	r0, #128	@ 0x80
 8006b18:	f7ff fd5a 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8006b1c:	2004      	movs	r0, #4
 8006b1e:	f7ff fd57 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 8006b22:	2040      	movs	r0, #64	@ 0x40
 8006b24:	f7ff fd54 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8006b28:	2020      	movs	r0, #32
 8006b2a:	f7ff fd51 	bl	80065d0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(BACKLIGHT_GPIO_Port, BACKLIGHT_Pin);
 8006b2e:	2108      	movs	r1, #8
 8006b30:	4831      	ldr	r0, [pc, #196]	@ (8006bf8 <MX_GPIO_Init+0x118>)
 8006b32:	f7ff fd3e 	bl	80065b2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8006b36:	2110      	movs	r1, #16
 8006b38:	4830      	ldr	r0, [pc, #192]	@ (8006bfc <MX_GPIO_Init+0x11c>)
 8006b3a:	f7ff fd3a 	bl	80065b2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BUSY_GPIO_Port, BUSY_Pin);
 8006b3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006b42:	482f      	ldr	r0, [pc, #188]	@ (8006c00 <MX_GPIO_Init+0x120>)
 8006b44:	f7ff fd27 	bl	8006596 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(CPROCESS_GPIO_Port, CPROCESS_Pin);
 8006b48:	2140      	movs	r1, #64	@ 0x40
 8006b4a:	482e      	ldr	r0, [pc, #184]	@ (8006c04 <MX_GPIO_Init+0x124>)
 8006b4c:	f7ff fd23 	bl	8006596 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(READYSEND_GPIO_Port, READYSEND_Pin);
 8006b50:	2101      	movs	r1, #1
 8006b52:	482b      	ldr	r0, [pc, #172]	@ (8006c00 <MX_GPIO_Init+0x120>)
 8006b54:	f7ff fd1f 	bl	8006596 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = BACKLIGHT_Pin;
 8006b58:	2308      	movs	r3, #8
 8006b5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006b60:	2300      	movs	r3, #0
 8006b62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8006b6c:	463b      	mov	r3, r7
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4821      	ldr	r0, [pc, #132]	@ (8006bf8 <MX_GPIO_Init+0x118>)
 8006b72:	f004 f876 	bl	800ac62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 8006b76:	2310      	movs	r3, #16
 8006b78:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006b86:	2300      	movs	r3, #0
 8006b88:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	481b      	ldr	r0, [pc, #108]	@ (8006bfc <MX_GPIO_Init+0x11c>)
 8006b90:	f004 f867 	bl	800ac62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BUSY_Pin;
 8006b94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b98:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8006baa:	463b      	mov	r3, r7
 8006bac:	4619      	mov	r1, r3
 8006bae:	4814      	ldr	r0, [pc, #80]	@ (8006c00 <MX_GPIO_Init+0x120>)
 8006bb0:	f004 f857 	bl	800ac62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CPROCESS_Pin;
 8006bb4:	2340      	movs	r3, #64	@ 0x40
 8006bb6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CPROCESS_GPIO_Port, &GPIO_InitStruct);
 8006bc8:	463b      	mov	r3, r7
 8006bca:	4619      	mov	r1, r3
 8006bcc:	480d      	ldr	r0, [pc, #52]	@ (8006c04 <MX_GPIO_Init+0x124>)
 8006bce:	f004 f848 	bl	800ac62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = READYSEND_Pin;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006be2:	2300      	movs	r3, #0
 8006be4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(READYSEND_GPIO_Port, &GPIO_InitStruct);
 8006be6:	463b      	mov	r3, r7
 8006be8:	4619      	mov	r1, r3
 8006bea:	4805      	ldr	r0, [pc, #20]	@ (8006c00 <MX_GPIO_Init+0x120>)
 8006bec:	f004 f839 	bl	800ac62 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8006bf0:	bf00      	nop
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40022800 	.word	0x40022800
 8006bfc:	40020c00 	.word	0x40020c00
 8006c00:	40020000 	.word	0x40020000
 8006c04:	40021800 	.word	0x40021800

08006c08 <__io_putchar>:

/* USER CODE BEGIN 4 */
PRINTF2USART1{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &data, 1, 0xFFFF);
 8006c10:	1d39      	adds	r1, r7, #4
 8006c12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c16:	2201      	movs	r2, #1
 8006c18:	4803      	ldr	r0, [pc, #12]	@ (8006c28 <__io_putchar+0x20>)
 8006c1a:	f002 fc81 	bl	8009520 <HAL_UART_Transmit>
	return data;
 8006c1e:	687b      	ldr	r3, [r7, #4]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20001a98 	.word	0x20001a98

08006c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
  {
		LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8006c30:	2110      	movs	r1, #16
 8006c32:	4807      	ldr	r0, [pc, #28]	@ (8006c50 <Error_Handler+0x24>)
 8006c34:	f7ff fcbd 	bl	80065b2 <LL_GPIO_ResetOutputPin>
		HAL_Delay(50);
 8006c38:	2032      	movs	r0, #50	@ 0x32
 8006c3a:	f000 fb67 	bl	800730c <HAL_Delay>
		LL_GPIO_SetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8006c3e:	2110      	movs	r1, #16
 8006c40:	4803      	ldr	r0, [pc, #12]	@ (8006c50 <Error_Handler+0x24>)
 8006c42:	f7ff fca8 	bl	8006596 <LL_GPIO_SetOutputPin>
		HAL_Delay(50);
 8006c46:	2032      	movs	r0, #50	@ 0x32
 8006c48:	f000 fb60 	bl	800730c <HAL_Delay>
		LL_GPIO_ResetOutputPin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8006c4c:	bf00      	nop
 8006c4e:	e7ef      	b.n	8006c30 <Error_Handler+0x4>
 8006c50:	40020c00 	.word	0x40020c00

08006c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c98 <HAL_MspInit+0x44>)
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006c98 <HAL_MspInit+0x44>)
 8006c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c66:	4b0c      	ldr	r3, [pc, #48]	@ (8006c98 <HAL_MspInit+0x44>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c6e:	607b      	str	r3, [r7, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c72:	4b09      	ldr	r3, [pc, #36]	@ (8006c98 <HAL_MspInit+0x44>)
 8006c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c76:	4a08      	ldr	r2, [pc, #32]	@ (8006c98 <HAL_MspInit+0x44>)
 8006c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c7e:	4b06      	ldr	r3, [pc, #24]	@ (8006c98 <HAL_MspInit+0x44>)
 8006c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40023800 	.word	0x40023800

08006c9c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08c      	sub	sp, #48	@ 0x30
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ca4:	f107 031c 	add.w	r3, r7, #28
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	605a      	str	r2, [r3, #4]
 8006cae:	609a      	str	r2, [r3, #8]
 8006cb0:	60da      	str	r2, [r3, #12]
 8006cb2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a3b      	ldr	r2, [pc, #236]	@ (8006da8 <HAL_QSPI_MspInit+0x10c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d170      	bne.n	8006da0 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc2:	4a3a      	ldr	r2, [pc, #232]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006cc4:	f043 0302 	orr.w	r3, r3, #2
 8006cc8:	6393      	str	r3, [r2, #56]	@ 0x38
 8006cca:	4b38      	ldr	r3, [pc, #224]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cd6:	4b35      	ldr	r3, [pc, #212]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cda:	4a34      	ldr	r2, [pc, #208]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006cdc:	f043 0310 	orr.w	r3, r3, #16
 8006ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ce2:	4b32      	ldr	r3, [pc, #200]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce6:	f003 0310 	and.w	r3, r3, #16
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cee:	4b2f      	ldr	r3, [pc, #188]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf2:	4a2e      	ldr	r2, [pc, #184]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006cf4:	f043 0302 	orr.w	r3, r3, #2
 8006cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d06:	4b29      	ldr	r3, [pc, #164]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0a:	4a28      	ldr	r2, [pc, #160]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006d0c:	f043 0308 	orr.w	r3, r3, #8
 8006d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d12:	4b26      	ldr	r3, [pc, #152]	@ (8006dac <HAL_QSPI_MspInit+0x110>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d1e:	2304      	movs	r3, #4
 8006d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d22:	2302      	movs	r3, #2
 8006d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006d2e:	2309      	movs	r3, #9
 8006d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d32:	f107 031c 	add.w	r3, r7, #28
 8006d36:	4619      	mov	r1, r3
 8006d38:	481d      	ldr	r0, [pc, #116]	@ (8006db0 <HAL_QSPI_MspInit+0x114>)
 8006d3a:	f000 fcaf 	bl	800769c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006d3e:	2340      	movs	r3, #64	@ 0x40
 8006d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d42:	2302      	movs	r3, #2
 8006d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006d4e:	230a      	movs	r3, #10
 8006d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d52:	f107 031c 	add.w	r3, r7, #28
 8006d56:	4619      	mov	r1, r3
 8006d58:	4816      	ldr	r0, [pc, #88]	@ (8006db4 <HAL_QSPI_MspInit+0x118>)
 8006d5a:	f000 fc9f 	bl	800769c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d5e:	2304      	movs	r3, #4
 8006d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d62:	2302      	movs	r3, #2
 8006d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006d6e:	2309      	movs	r3, #9
 8006d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d72:	f107 031c 	add.w	r3, r7, #28
 8006d76:	4619      	mov	r1, r3
 8006d78:	480e      	ldr	r0, [pc, #56]	@ (8006db4 <HAL_QSPI_MspInit+0x118>)
 8006d7a:	f000 fc8f 	bl	800769c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8006d7e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8006d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d84:	2302      	movs	r3, #2
 8006d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006d90:	2309      	movs	r3, #9
 8006d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d94:	f107 031c 	add.w	r3, r7, #28
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4807      	ldr	r0, [pc, #28]	@ (8006db8 <HAL_QSPI_MspInit+0x11c>)
 8006d9c:	f000 fc7e 	bl	800769c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8006da0:	bf00      	nop
 8006da2:	3730      	adds	r7, #48	@ 0x30
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	a0001000 	.word	0xa0001000
 8006dac:	40023800 	.word	0x40023800
 8006db0:	40021000 	.word	0x40021000
 8006db4:	40020400 	.word	0x40020400
 8006db8:	40020c00 	.word	0x40020c00

08006dbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b0ac      	sub	sp, #176	@ 0xb0
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	605a      	str	r2, [r3, #4]
 8006dce:	609a      	str	r2, [r3, #8]
 8006dd0:	60da      	str	r2, [r3, #12]
 8006dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006dd4:	f107 0318 	add.w	r3, r7, #24
 8006dd8:	2284      	movs	r2, #132	@ 0x84
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f005 f84d 	bl	800be7c <memset>
  if(huart->Instance==USART1)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a36      	ldr	r2, [pc, #216]	@ (8006ec0 <HAL_UART_MspInit+0x104>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d164      	bne.n	8006eb6 <HAL_UART_MspInit+0xfa>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006dec:	2340      	movs	r3, #64	@ 0x40
 8006dee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006df0:	2300      	movs	r3, #0
 8006df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006df4:	f107 0318 	add.w	r3, r7, #24
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 ff53 	bl	8008ca4 <HAL_RCCEx_PeriphCLKConfig>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006e04:	f7ff ff12 	bl	8006c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e08:	4b2e      	ldr	r3, [pc, #184]	@ (8006ec4 <HAL_UART_MspInit+0x108>)
 8006e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ec4 <HAL_UART_MspInit+0x108>)
 8006e0e:	f043 0310 	orr.w	r3, r3, #16
 8006e12:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e14:	4b2b      	ldr	r3, [pc, #172]	@ (8006ec4 <HAL_UART_MspInit+0x108>)
 8006e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e18:	f003 0310 	and.w	r3, r3, #16
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e20:	4b28      	ldr	r3, [pc, #160]	@ (8006ec4 <HAL_UART_MspInit+0x108>)
 8006e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e24:	4a27      	ldr	r2, [pc, #156]	@ (8006ec4 <HAL_UART_MspInit+0x108>)
 8006e26:	f043 0302 	orr.w	r3, r3, #2
 8006e2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e2c:	4b25      	ldr	r3, [pc, #148]	@ (8006ec4 <HAL_UART_MspInit+0x108>)
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e38:	4b22      	ldr	r3, [pc, #136]	@ (8006ec4 <HAL_UART_MspInit+0x108>)
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3c:	4a21      	ldr	r2, [pc, #132]	@ (8006ec4 <HAL_UART_MspInit+0x108>)
 8006e3e:	f043 0301 	orr.w	r3, r3, #1
 8006e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e44:	4b1f      	ldr	r3, [pc, #124]	@ (8006ec4 <HAL_UART_MspInit+0x108>)
 8006e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006e50:	2380      	movs	r3, #128	@ 0x80
 8006e52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e56:	2302      	movs	r3, #2
 8006e58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e62:	2303      	movs	r3, #3
 8006e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e68:	2307      	movs	r3, #7
 8006e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e6e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006e72:	4619      	mov	r1, r3
 8006e74:	4814      	ldr	r0, [pc, #80]	@ (8006ec8 <HAL_UART_MspInit+0x10c>)
 8006e76:	f000 fc11 	bl	800769c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e82:	2302      	movs	r3, #2
 8006e84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e94:	2307      	movs	r3, #7
 8006e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e9a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	480a      	ldr	r0, [pc, #40]	@ (8006ecc <HAL_UART_MspInit+0x110>)
 8006ea2:	f000 fbfb 	bl	800769c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	2025      	movs	r0, #37	@ 0x25
 8006eac:	f000 fb2d 	bl	800750a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006eb0:	2025      	movs	r0, #37	@ 0x25
 8006eb2:	f000 fb46 	bl	8007542 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8006eb6:	bf00      	nop
 8006eb8:	37b0      	adds	r7, #176	@ 0xb0
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40011000 	.word	0x40011000
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	40020400 	.word	0x40020400
 8006ecc:	40020000 	.word	0x40020000

08006ed0 <LL_DMA_IsActiveFlag_TC4>:
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	bf0c      	ite	eq
 8006ee4:	2301      	moveq	r3, #1
 8006ee6:	2300      	movne	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <LL_DMA_IsActiveFlag_TE4>:
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF4)==(DMA_HISR_TEIF4));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	bf0c      	ite	eq
 8006f0a:	2301      	moveq	r3, #1
 8006f0c:	2300      	movne	r3, #0
 8006f0e:	b2db      	uxtb	r3, r3
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <LL_DMA_ClearFlag_TC4>:
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	60da      	str	r2, [r3, #12]
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <LL_DMA_ClearFlag_TE4>:
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2208      	movs	r2, #8
 8006f42:	60da      	str	r2, [r3, #12]
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006f54:	bf00      	nop
 8006f56:	e7fd      	b.n	8006f54 <NMI_Handler+0x4>

08006f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f5c:	bf00      	nop
 8006f5e:	e7fd      	b.n	8006f5c <HardFault_Handler+0x4>

08006f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <MemManage_Handler+0x4>

08006f68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f6c:	bf00      	nop
 8006f6e:	e7fd      	b.n	8006f6c <BusFault_Handler+0x4>

08006f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f74:	bf00      	nop
 8006f76:	e7fd      	b.n	8006f74 <UsageFault_Handler+0x4>

08006f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f7c:	bf00      	nop
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f86:	b480      	push	{r7}
 8006f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f8a:	bf00      	nop
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f98:	bf00      	nop
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006fa6:	f000 f991 	bl	80072cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SCH_RunSystemTickTimer();
 8006faa:	f7f9 fc59 	bl	8000860 <SCH_RunSystemTickTimer>
  Utils_SoftTime_Update();
 8006fae:	f7fd fa87 	bl	80044c0 <Utils_SoftTime_Update>
  /* USER CODE END SysTick_IRQn 1 */
}
 8006fb2:	bf00      	nop
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006fbc:	4802      	ldr	r0, [pc, #8]	@ (8006fc8 <USART1_IRQHandler+0x10>)
 8006fbe:	f002 fb7d 	bl	80096bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006fc2:	bf00      	nop
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20001a98 	.word	0x20001a98

08006fcc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */
  LOG("SPI IRQ!");
 8006fd2:	f107 0309 	add.w	r3, r7, #9
 8006fd6:	f107 020a 	add.w	r2, r7, #10
 8006fda:	f107 010b 	add.w	r1, r7, #11
 8006fde:	f107 000c 	add.w	r0, r7, #12
 8006fe2:	f7fd fb6d 	bl	80046c0 <Utils_GetWorkingTime>
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	7abb      	ldrb	r3, [r7, #10]
 8006fec:	461a      	mov	r2, r3
 8006fee:	7a7b      	ldrb	r3, [r7, #9]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8007064 <DMA2_Stream4_IRQHandler+0x98>)
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	481b      	ldr	r0, [pc, #108]	@ (8007068 <DMA2_Stream4_IRQHandler+0x9c>)
 8006ffa:	f004 fd73 	bl	800bae4 <iprintf>
  /* USER CODE END DMA2_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */
  if (LL_DMA_IsActiveFlag_TC4(DMA2))
 8006ffe:	481b      	ldr	r0, [pc, #108]	@ (800706c <DMA2_Stream4_IRQHandler+0xa0>)
 8007000:	f7ff ff66 	bl	8006ed0 <LL_DMA_IsActiveFlag_TC4>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d019      	beq.n	800703e <DMA2_Stream4_IRQHandler+0x72>
  {
     LL_DMA_ClearFlag_TC4(DMA2);
 800700a:	4818      	ldr	r0, [pc, #96]	@ (800706c <DMA2_Stream4_IRQHandler+0xa0>)
 800700c:	f7ff ff86 	bl	8006f1c <LL_DMA_ClearFlag_TC4>
     SPI_SlaveDevice_SetTransferState(SPI_TRANSFER_COMPLETE);
 8007010:	2001      	movs	r0, #1
 8007012:	f7fd f99b 	bl	800434c <SPI_SlaveDevice_SetTransferState>
     SPI_SlaveDevice_Disable();
 8007016:	f7fd f96f 	bl	80042f8 <SPI_SlaveDevice_Disable>
     LOG("SPI Transmit Complete!");
 800701a:	1c7b      	adds	r3, r7, #1
 800701c:	1cba      	adds	r2, r7, #2
 800701e:	1cf9      	adds	r1, r7, #3
 8007020:	1d38      	adds	r0, r7, #4
 8007022:	f7fd fb4d 	bl	80046c0 <Utils_GetWorkingTime>
 8007026:	78fb      	ldrb	r3, [r7, #3]
 8007028:	4619      	mov	r1, r3
 800702a:	78bb      	ldrb	r3, [r7, #2]
 800702c:	461a      	mov	r2, r3
 800702e:	787b      	ldrb	r3, [r7, #1]
 8007030:	4618      	mov	r0, r3
 8007032:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <DMA2_Stream4_IRQHandler+0x98>)
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	4603      	mov	r3, r0
 8007038:	480d      	ldr	r0, [pc, #52]	@ (8007070 <DMA2_Stream4_IRQHandler+0xa4>)
 800703a:	f004 fd53 	bl	800bae4 <iprintf>
  }
  if (LL_DMA_IsActiveFlag_TE4(DMA2))
 800703e:	480b      	ldr	r0, [pc, #44]	@ (800706c <DMA2_Stream4_IRQHandler+0xa0>)
 8007040:	f7ff ff59 	bl	8006ef6 <LL_DMA_IsActiveFlag_TE4>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d008      	beq.n	800705c <DMA2_Stream4_IRQHandler+0x90>
  {
     LL_DMA_ClearFlag_TE4(DMA2);
 800704a:	4808      	ldr	r0, [pc, #32]	@ (800706c <DMA2_Stream4_IRQHandler+0xa0>)
 800704c:	f7ff ff73 	bl	8006f36 <LL_DMA_ClearFlag_TE4>
     SPI_SlaveDevice_SetTransferState(SPI_TRANSFER_ERROR);
 8007050:	2002      	movs	r0, #2
 8007052:	f7fd f97b 	bl	800434c <SPI_SlaveDevice_SetTransferState>
     toOBC_SetState(toOBC_ERROR);
 8007056:	2000      	movs	r0, #0
 8007058:	f7f9 fdd8 	bl	8000c0c <toOBC_SetState>
  }
  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800705c:	bf00      	nop
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	0800dc04 	.word	0x0800dc04
 8007068:	0800dbe0 	.word	0x0800dbe0
 800706c:	40026400 	.word	0x40026400
 8007070:	0800dc10 	.word	0x0800dc10

08007074 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
  UART_Driver_ISR(USART6);
 8007078:	4802      	ldr	r0, [pc, #8]	@ (8007084 <USART6_IRQHandler+0x10>)
 800707a:	f7fa fb02 	bl	8001682 <UART_Driver_ISR>
  /* USER CODE END USART6_IRQn 1 */
}
 800707e:	bf00      	nop
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	40011400 	.word	0x40011400

08007088 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0

  /* USER CODE END SPI5_IRQn 0 */
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 800708c:	bf00      	nop
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b086      	sub	sp, #24
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	e00a      	b.n	80070be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80070a8:	f3af 8000 	nop.w
 80070ac:	4601      	mov	r1, r0
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	60ba      	str	r2, [r7, #8]
 80070b4:	b2ca      	uxtb	r2, r1
 80070b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	3301      	adds	r3, #1
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	dbf0      	blt.n	80070a8 <_read+0x12>
  }

  return len;
 80070c6:	687b      	ldr	r3, [r7, #4]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	e009      	b.n	80070f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	60ba      	str	r2, [r7, #8]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff fd8c 	bl	8006c08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	3301      	adds	r3, #1
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	dbf1      	blt.n	80070e2 <_write+0x12>
  }
  return len;
 80070fe:	687b      	ldr	r3, [r7, #4]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <_close>:

int _close(int file)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007130:	605a      	str	r2, [r3, #4]
  return 0;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <_isatty>:

int _isatty(int file)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007148:	2301      	movs	r3, #1
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007156:	b480      	push	{r7}
 8007158:	b085      	sub	sp, #20
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007178:	4a14      	ldr	r2, [pc, #80]	@ (80071cc <_sbrk+0x5c>)
 800717a:	4b15      	ldr	r3, [pc, #84]	@ (80071d0 <_sbrk+0x60>)
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007184:	4b13      	ldr	r3, [pc, #76]	@ (80071d4 <_sbrk+0x64>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d102      	bne.n	8007192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800718c:	4b11      	ldr	r3, [pc, #68]	@ (80071d4 <_sbrk+0x64>)
 800718e:	4a12      	ldr	r2, [pc, #72]	@ (80071d8 <_sbrk+0x68>)
 8007190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007192:	4b10      	ldr	r3, [pc, #64]	@ (80071d4 <_sbrk+0x64>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4413      	add	r3, r2
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	429a      	cmp	r2, r3
 800719e:	d207      	bcs.n	80071b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071a0:	f004 feda 	bl	800bf58 <__errno>
 80071a4:	4603      	mov	r3, r0
 80071a6:	220c      	movs	r2, #12
 80071a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80071aa:	f04f 33ff 	mov.w	r3, #4294967295
 80071ae:	e009      	b.n	80071c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071b0:	4b08      	ldr	r3, [pc, #32]	@ (80071d4 <_sbrk+0x64>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071b6:	4b07      	ldr	r3, [pc, #28]	@ (80071d4 <_sbrk+0x64>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4413      	add	r3, r2
 80071be:	4a05      	ldr	r2, [pc, #20]	@ (80071d4 <_sbrk+0x64>)
 80071c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80071c2:	68fb      	ldr	r3, [r7, #12]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20050000 	.word	0x20050000
 80071d0:	00000800 	.word	0x00000800
 80071d4:	20001b20 	.word	0x20001b20
 80071d8:	20036478 	.word	0x20036478

080071dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80071e0:	4b06      	ldr	r3, [pc, #24]	@ (80071fc <SystemInit+0x20>)
 80071e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e6:	4a05      	ldr	r2, [pc, #20]	@ (80071fc <SystemInit+0x20>)
 80071e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80071f0:	bf00      	nop
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	e000ed00 	.word	0xe000ed00

08007200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007200:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007238 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007204:	f7ff ffea 	bl	80071dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007208:	480c      	ldr	r0, [pc, #48]	@ (800723c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800720a:	490d      	ldr	r1, [pc, #52]	@ (8007240 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800720c:	4a0d      	ldr	r2, [pc, #52]	@ (8007244 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800720e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007210:	e002      	b.n	8007218 <LoopCopyDataInit>

08007212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007216:	3304      	adds	r3, #4

08007218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800721a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800721c:	d3f9      	bcc.n	8007212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800721e:	4a0a      	ldr	r2, [pc, #40]	@ (8007248 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007220:	4c0a      	ldr	r4, [pc, #40]	@ (800724c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007224:	e001      	b.n	800722a <LoopFillZerobss>

08007226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007228:	3204      	adds	r2, #4

0800722a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800722a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800722c:	d3fb      	bcc.n	8007226 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800722e:	f004 fe99 	bl	800bf64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007232:	f7ff f9fd 	bl	8006630 <main>
  bx  lr    
 8007236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007238:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800723c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007240:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8007244:	0800df34 	.word	0x0800df34
  ldr r2, =_sbss
 8007248:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 800724c:	20001c74 	.word	0x20001c74

08007250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007250:	e7fe      	b.n	8007250 <ADC_IRQHandler>

08007252 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007256:	2003      	movs	r0, #3
 8007258:	f000 f94c 	bl	80074f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800725c:	200f      	movs	r0, #15
 800725e:	f000 f805 	bl	800726c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007262:	f7ff fcf7 	bl	8006c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007274:	4b12      	ldr	r3, [pc, #72]	@ (80072c0 <HAL_InitTick+0x54>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	4b12      	ldr	r3, [pc, #72]	@ (80072c4 <HAL_InitTick+0x58>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	4619      	mov	r1, r3
 800727e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007282:	fbb3 f3f1 	udiv	r3, r3, r1
 8007286:	fbb2 f3f3 	udiv	r3, r2, r3
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f967 	bl	800755e <HAL_SYSTICK_Config>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e00e      	b.n	80072b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b0f      	cmp	r3, #15
 800729e:	d80a      	bhi.n	80072b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80072a0:	2200      	movs	r2, #0
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295
 80072a8:	f000 f92f 	bl	800750a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80072ac:	4a06      	ldr	r2, [pc, #24]	@ (80072c8 <HAL_InitTick+0x5c>)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	e000      	b.n	80072b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	200000dc 	.word	0x200000dc
 80072c4:	200000e4 	.word	0x200000e4
 80072c8:	200000e0 	.word	0x200000e0

080072cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80072d0:	4b06      	ldr	r3, [pc, #24]	@ (80072ec <HAL_IncTick+0x20>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	4b06      	ldr	r3, [pc, #24]	@ (80072f0 <HAL_IncTick+0x24>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4413      	add	r3, r2
 80072dc:	4a04      	ldr	r2, [pc, #16]	@ (80072f0 <HAL_IncTick+0x24>)
 80072de:	6013      	str	r3, [r2, #0]
}
 80072e0:	bf00      	nop
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	200000e4 	.word	0x200000e4
 80072f0:	20001b24 	.word	0x20001b24

080072f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
  return uwTick;
 80072f8:	4b03      	ldr	r3, [pc, #12]	@ (8007308 <HAL_GetTick+0x14>)
 80072fa:	681b      	ldr	r3, [r3, #0]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20001b24 	.word	0x20001b24

0800730c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007314:	f7ff ffee 	bl	80072f4 <HAL_GetTick>
 8007318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007324:	d005      	beq.n	8007332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007326:	4b0a      	ldr	r3, [pc, #40]	@ (8007350 <HAL_Delay+0x44>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007332:	bf00      	nop
 8007334:	f7ff ffde 	bl	80072f4 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	429a      	cmp	r2, r3
 8007342:	d8f7      	bhi.n	8007334 <HAL_Delay+0x28>
  {
  }
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	200000e4 	.word	0x200000e4

08007354 <__NVIC_SetPriorityGrouping>:
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007364:	4b0b      	ldr	r3, [pc, #44]	@ (8007394 <__NVIC_SetPriorityGrouping+0x40>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007370:	4013      	ands	r3, r2
 8007372:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800737c:	4b06      	ldr	r3, [pc, #24]	@ (8007398 <__NVIC_SetPriorityGrouping+0x44>)
 800737e:	4313      	orrs	r3, r2
 8007380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007382:	4a04      	ldr	r2, [pc, #16]	@ (8007394 <__NVIC_SetPriorityGrouping+0x40>)
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	60d3      	str	r3, [r2, #12]
}
 8007388:	bf00      	nop
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	e000ed00 	.word	0xe000ed00
 8007398:	05fa0000 	.word	0x05fa0000

0800739c <__NVIC_GetPriorityGrouping>:
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073a0:	4b04      	ldr	r3, [pc, #16]	@ (80073b4 <__NVIC_GetPriorityGrouping+0x18>)
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	0a1b      	lsrs	r3, r3, #8
 80073a6:	f003 0307 	and.w	r3, r3, #7
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	e000ed00 	.word	0xe000ed00

080073b8 <__NVIC_EnableIRQ>:
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	db0b      	blt.n	80073e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	f003 021f 	and.w	r2, r3, #31
 80073d0:	4907      	ldr	r1, [pc, #28]	@ (80073f0 <__NVIC_EnableIRQ+0x38>)
 80073d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	2001      	movs	r0, #1
 80073da:	fa00 f202 	lsl.w	r2, r0, r2
 80073de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	e000e100 	.word	0xe000e100

080073f4 <__NVIC_SetPriority>:
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	6039      	str	r1, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007404:	2b00      	cmp	r3, #0
 8007406:	db0a      	blt.n	800741e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	b2da      	uxtb	r2, r3
 800740c:	490c      	ldr	r1, [pc, #48]	@ (8007440 <__NVIC_SetPriority+0x4c>)
 800740e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007412:	0112      	lsls	r2, r2, #4
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	440b      	add	r3, r1
 8007418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800741c:	e00a      	b.n	8007434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	b2da      	uxtb	r2, r3
 8007422:	4908      	ldr	r1, [pc, #32]	@ (8007444 <__NVIC_SetPriority+0x50>)
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	3b04      	subs	r3, #4
 800742c:	0112      	lsls	r2, r2, #4
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	440b      	add	r3, r1
 8007432:	761a      	strb	r2, [r3, #24]
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	e000e100 	.word	0xe000e100
 8007444:	e000ed00 	.word	0xe000ed00

08007448 <NVIC_EncodePriority>:
{
 8007448:	b480      	push	{r7}
 800744a:	b089      	sub	sp, #36	@ 0x24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	f1c3 0307 	rsb	r3, r3, #7
 8007462:	2b04      	cmp	r3, #4
 8007464:	bf28      	it	cs
 8007466:	2304      	movcs	r3, #4
 8007468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	3304      	adds	r3, #4
 800746e:	2b06      	cmp	r3, #6
 8007470:	d902      	bls.n	8007478 <NVIC_EncodePriority+0x30>
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	3b03      	subs	r3, #3
 8007476:	e000      	b.n	800747a <NVIC_EncodePriority+0x32>
 8007478:	2300      	movs	r3, #0
 800747a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800747c:	f04f 32ff 	mov.w	r2, #4294967295
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	43da      	mvns	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	401a      	ands	r2, r3
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007490:	f04f 31ff 	mov.w	r1, #4294967295
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	fa01 f303 	lsl.w	r3, r1, r3
 800749a:	43d9      	mvns	r1, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074a0:	4313      	orrs	r3, r2
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3724      	adds	r7, #36	@ 0x24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
	...

080074b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074c0:	d301      	bcc.n	80074c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80074c2:	2301      	movs	r3, #1
 80074c4:	e00f      	b.n	80074e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074c6:	4a0a      	ldr	r2, [pc, #40]	@ (80074f0 <SysTick_Config+0x40>)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80074ce:	210f      	movs	r1, #15
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	f7ff ff8e 	bl	80073f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074d8:	4b05      	ldr	r3, [pc, #20]	@ (80074f0 <SysTick_Config+0x40>)
 80074da:	2200      	movs	r2, #0
 80074dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074de:	4b04      	ldr	r3, [pc, #16]	@ (80074f0 <SysTick_Config+0x40>)
 80074e0:	2207      	movs	r2, #7
 80074e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	e000e010 	.word	0xe000e010

080074f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff ff29 	bl	8007354 <__NVIC_SetPriorityGrouping>
}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	4603      	mov	r3, r0
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
 8007516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800751c:	f7ff ff3e 	bl	800739c <__NVIC_GetPriorityGrouping>
 8007520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	6978      	ldr	r0, [r7, #20]
 8007528:	f7ff ff8e 	bl	8007448 <NVIC_EncodePriority>
 800752c:	4602      	mov	r2, r0
 800752e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f7ff ff5d 	bl	80073f4 <__NVIC_SetPriority>
}
 800753a:	bf00      	nop
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	4603      	mov	r3, r0
 800754a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800754c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff ff31 	bl	80073b8 <__NVIC_EnableIRQ>
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff ffa2 	bl	80074b0 <SysTick_Config>
 800756c:	4603      	mov	r3, r0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007582:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007584:	f7ff feb6 	bl	80072f4 <HAL_GetTick>
 8007588:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d008      	beq.n	80075a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2280      	movs	r2, #128	@ 0x80
 800759a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e052      	b.n	800764e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0216 	bic.w	r2, r2, #22
 80075b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695a      	ldr	r2, [r3, #20]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <HAL_DMA_Abort+0x62>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d007      	beq.n	80075e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0208 	bic.w	r2, r2, #8
 80075e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0201 	bic.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075f8:	e013      	b.n	8007622 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075fa:	f7ff fe7b 	bl	80072f4 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b05      	cmp	r3, #5
 8007606:	d90c      	bls.n	8007622 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2220      	movs	r2, #32
 800760c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2203      	movs	r2, #3
 8007612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e015      	b.n	800764e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e4      	bne.n	80075fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007634:	223f      	movs	r2, #63	@ 0x3f
 8007636:	409a      	lsls	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d004      	beq.n	8007674 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2280      	movs	r2, #128	@ 0x80
 800766e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e00c      	b.n	800768e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2205      	movs	r2, #5
 8007678:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0201 	bic.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
	...

0800769c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800769c:	b480      	push	{r7}
 800769e:	b089      	sub	sp, #36	@ 0x24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80076a6:	2300      	movs	r3, #0
 80076a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80076ae:	2300      	movs	r3, #0
 80076b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	e175      	b.n	80079a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80076bc:	2201      	movs	r2, #1
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	fa02 f303 	lsl.w	r3, r2, r3
 80076c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4013      	ands	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	f040 8164 	bne.w	80079a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d005      	beq.n	80076f2 <HAL_GPIO_Init+0x56>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d130      	bne.n	8007754 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	2203      	movs	r2, #3
 80076fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007702:	43db      	mvns	r3, r3
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	4013      	ands	r3, r2
 8007708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	4313      	orrs	r3, r2
 800771a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007728:	2201      	movs	r2, #1
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	fa02 f303 	lsl.w	r3, r2, r3
 8007730:	43db      	mvns	r3, r3
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	4013      	ands	r3, r2
 8007736:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	091b      	lsrs	r3, r3, #4
 800773e:	f003 0201 	and.w	r2, r3, #1
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	fa02 f303 	lsl.w	r3, r2, r3
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	4313      	orrs	r3, r2
 800774c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f003 0303 	and.w	r3, r3, #3
 800775c:	2b03      	cmp	r3, #3
 800775e:	d017      	beq.n	8007790 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	2203      	movs	r2, #3
 800776c:	fa02 f303 	lsl.w	r3, r2, r3
 8007770:	43db      	mvns	r3, r3
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	4013      	ands	r3, r2
 8007776:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	fa02 f303 	lsl.w	r3, r2, r3
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	4313      	orrs	r3, r2
 8007788:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d123      	bne.n	80077e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	08da      	lsrs	r2, r3, #3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3208      	adds	r2, #8
 80077a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	f003 0307 	and.w	r3, r3, #7
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	220f      	movs	r2, #15
 80077b4:	fa02 f303 	lsl.w	r3, r2, r3
 80077b8:	43db      	mvns	r3, r3
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	4013      	ands	r3, r2
 80077be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	fa02 f303 	lsl.w	r3, r2, r3
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	08da      	lsrs	r2, r3, #3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3208      	adds	r2, #8
 80077de:	69b9      	ldr	r1, [r7, #24]
 80077e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	2203      	movs	r2, #3
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	43db      	mvns	r3, r3
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	4013      	ands	r3, r2
 80077fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f003 0203 	and.w	r2, r3, #3
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	4313      	orrs	r3, r2
 8007810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80be 	beq.w	80079a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007826:	4b66      	ldr	r3, [pc, #408]	@ (80079c0 <HAL_GPIO_Init+0x324>)
 8007828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782a:	4a65      	ldr	r2, [pc, #404]	@ (80079c0 <HAL_GPIO_Init+0x324>)
 800782c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007830:	6453      	str	r3, [r2, #68]	@ 0x44
 8007832:	4b63      	ldr	r3, [pc, #396]	@ (80079c0 <HAL_GPIO_Init+0x324>)
 8007834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800783e:	4a61      	ldr	r2, [pc, #388]	@ (80079c4 <HAL_GPIO_Init+0x328>)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	089b      	lsrs	r3, r3, #2
 8007844:	3302      	adds	r3, #2
 8007846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800784a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	220f      	movs	r2, #15
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	43db      	mvns	r3, r3
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	4013      	ands	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a58      	ldr	r2, [pc, #352]	@ (80079c8 <HAL_GPIO_Init+0x32c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d037      	beq.n	80078da <HAL_GPIO_Init+0x23e>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a57      	ldr	r2, [pc, #348]	@ (80079cc <HAL_GPIO_Init+0x330>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d031      	beq.n	80078d6 <HAL_GPIO_Init+0x23a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a56      	ldr	r2, [pc, #344]	@ (80079d0 <HAL_GPIO_Init+0x334>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d02b      	beq.n	80078d2 <HAL_GPIO_Init+0x236>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a55      	ldr	r2, [pc, #340]	@ (80079d4 <HAL_GPIO_Init+0x338>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d025      	beq.n	80078ce <HAL_GPIO_Init+0x232>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a54      	ldr	r2, [pc, #336]	@ (80079d8 <HAL_GPIO_Init+0x33c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d01f      	beq.n	80078ca <HAL_GPIO_Init+0x22e>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a53      	ldr	r2, [pc, #332]	@ (80079dc <HAL_GPIO_Init+0x340>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d019      	beq.n	80078c6 <HAL_GPIO_Init+0x22a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a52      	ldr	r2, [pc, #328]	@ (80079e0 <HAL_GPIO_Init+0x344>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d013      	beq.n	80078c2 <HAL_GPIO_Init+0x226>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a51      	ldr	r2, [pc, #324]	@ (80079e4 <HAL_GPIO_Init+0x348>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00d      	beq.n	80078be <HAL_GPIO_Init+0x222>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a50      	ldr	r2, [pc, #320]	@ (80079e8 <HAL_GPIO_Init+0x34c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d007      	beq.n	80078ba <HAL_GPIO_Init+0x21e>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a4f      	ldr	r2, [pc, #316]	@ (80079ec <HAL_GPIO_Init+0x350>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d101      	bne.n	80078b6 <HAL_GPIO_Init+0x21a>
 80078b2:	2309      	movs	r3, #9
 80078b4:	e012      	b.n	80078dc <HAL_GPIO_Init+0x240>
 80078b6:	230a      	movs	r3, #10
 80078b8:	e010      	b.n	80078dc <HAL_GPIO_Init+0x240>
 80078ba:	2308      	movs	r3, #8
 80078bc:	e00e      	b.n	80078dc <HAL_GPIO_Init+0x240>
 80078be:	2307      	movs	r3, #7
 80078c0:	e00c      	b.n	80078dc <HAL_GPIO_Init+0x240>
 80078c2:	2306      	movs	r3, #6
 80078c4:	e00a      	b.n	80078dc <HAL_GPIO_Init+0x240>
 80078c6:	2305      	movs	r3, #5
 80078c8:	e008      	b.n	80078dc <HAL_GPIO_Init+0x240>
 80078ca:	2304      	movs	r3, #4
 80078cc:	e006      	b.n	80078dc <HAL_GPIO_Init+0x240>
 80078ce:	2303      	movs	r3, #3
 80078d0:	e004      	b.n	80078dc <HAL_GPIO_Init+0x240>
 80078d2:	2302      	movs	r3, #2
 80078d4:	e002      	b.n	80078dc <HAL_GPIO_Init+0x240>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <HAL_GPIO_Init+0x240>
 80078da:	2300      	movs	r3, #0
 80078dc:	69fa      	ldr	r2, [r7, #28]
 80078de:	f002 0203 	and.w	r2, r2, #3
 80078e2:	0092      	lsls	r2, r2, #2
 80078e4:	4093      	lsls	r3, r2
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80078ec:	4935      	ldr	r1, [pc, #212]	@ (80079c4 <HAL_GPIO_Init+0x328>)
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	089b      	lsrs	r3, r3, #2
 80078f2:	3302      	adds	r3, #2
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80078fa:	4b3d      	ldr	r3, [pc, #244]	@ (80079f0 <HAL_GPIO_Init+0x354>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	43db      	mvns	r3, r3
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	4013      	ands	r3, r2
 8007908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800791e:	4a34      	ldr	r2, [pc, #208]	@ (80079f0 <HAL_GPIO_Init+0x354>)
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007924:	4b32      	ldr	r3, [pc, #200]	@ (80079f0 <HAL_GPIO_Init+0x354>)
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	43db      	mvns	r3, r3
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	4013      	ands	r3, r2
 8007932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007948:	4a29      	ldr	r2, [pc, #164]	@ (80079f0 <HAL_GPIO_Init+0x354>)
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800794e:	4b28      	ldr	r3, [pc, #160]	@ (80079f0 <HAL_GPIO_Init+0x354>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	43db      	mvns	r3, r3
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	4013      	ands	r3, r2
 800795c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007972:	4a1f      	ldr	r2, [pc, #124]	@ (80079f0 <HAL_GPIO_Init+0x354>)
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007978:	4b1d      	ldr	r3, [pc, #116]	@ (80079f0 <HAL_GPIO_Init+0x354>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	43db      	mvns	r3, r3
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	4013      	ands	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	4313      	orrs	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800799c:	4a14      	ldr	r2, [pc, #80]	@ (80079f0 <HAL_GPIO_Init+0x354>)
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	3301      	adds	r3, #1
 80079a6:	61fb      	str	r3, [r7, #28]
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	2b0f      	cmp	r3, #15
 80079ac:	f67f ae86 	bls.w	80076bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	3724      	adds	r7, #36	@ 0x24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	40023800 	.word	0x40023800
 80079c4:	40013800 	.word	0x40013800
 80079c8:	40020000 	.word	0x40020000
 80079cc:	40020400 	.word	0x40020400
 80079d0:	40020800 	.word	0x40020800
 80079d4:	40020c00 	.word	0x40020c00
 80079d8:	40021000 	.word	0x40021000
 80079dc:	40021400 	.word	0x40021400
 80079e0:	40021800 	.word	0x40021800
 80079e4:	40021c00 	.word	0x40021c00
 80079e8:	40022000 	.word	0x40022000
 80079ec:	40022400 	.word	0x40022400
 80079f0:	40013c00 	.word	0x40013c00

080079f4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80079fc:	f7ff fc7a 	bl	80072f4 <HAL_GetTick>
 8007a00:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e067      	b.n	8007adc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10b      	bne.n	8007a30 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff f93b 	bl	8006c9c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007a26:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fae5 	bl	8007ffa <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	021a      	lsls	r2, r3, #8
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	2120      	movs	r1, #32
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fadd 	bl	8008016 <QSPI_WaitFlagStateUntilTimeout>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007a60:	7afb      	ldrb	r3, [r7, #11]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d135      	bne.n	8007ad2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae4 <HAL_QSPI_Init+0xf0>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6852      	ldr	r2, [r2, #4]
 8007a74:	0611      	lsls	r1, r2, #24
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	68d2      	ldr	r2, [r2, #12]
 8007a7a:	4311      	orrs	r1, r2
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	69d2      	ldr	r2, [r2, #28]
 8007a80:	4311      	orrs	r1, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6a12      	ldr	r2, [r2, #32]
 8007a86:	4311      	orrs	r1, r2
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6812      	ldr	r2, [r2, #0]
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	4b14      	ldr	r3, [pc, #80]	@ (8007ae8 <HAL_QSPI_Init+0xf4>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	6912      	ldr	r2, [r2, #16]
 8007a9e:	0411      	lsls	r1, r2, #16
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6952      	ldr	r2, [r2, #20]
 8007aa4:	4311      	orrs	r1, r2
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6992      	ldr	r2, [r2, #24]
 8007aaa:	4311      	orrs	r1, r2
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6812      	ldr	r2, [r2, #0]
 8007ab0:	430b      	orrs	r3, r1
 8007ab2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0201 	orr.w	r2, r2, #1
 8007ac2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8007ada:	7afb      	ldrb	r3, [r7, #11]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	00ffff2f 	.word	0x00ffff2f
 8007ae8:	ffe0f8fe 	.word	0xffe0f8fe

08007aec <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007af8:	f7ff fbfc 	bl	80072f4 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d101      	bne.n	8007b0e <HAL_QSPI_Command+0x22>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e048      	b.n	8007ba0 <HAL_QSPI_Command+0xb4>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d137      	bne.n	8007b92 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2200      	movs	r2, #0
 8007b38:	2120      	movs	r1, #32
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 fa6b 	bl	8008016 <QSPI_WaitFlagStateUntilTimeout>
 8007b40:	4603      	mov	r3, r0
 8007b42:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d125      	bne.n	8007b96 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 fa98 	bl	8008084 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d115      	bne.n	8007b88 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	2201      	movs	r2, #1
 8007b64:	2102      	movs	r1, #2
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 fa55 	bl	8008016 <QSPI_WaitFlagStateUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10f      	bne.n	8007b96 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b86:	e006      	b.n	8007b96 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b90:	e001      	b.n	8007b96 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8007b92:	2302      	movs	r3, #2
 8007b94:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	@ 0x28
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007bb8:	f7ff fb9c 	bl	80072f4 <HAL_GetTick>
 8007bbc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3320      	adds	r3, #32
 8007bc4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d101      	bne.n	8007bd6 <HAL_QSPI_Transmit+0x2e>
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	e07b      	b.n	8007cce <HAL_QSPI_Transmit+0x126>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d16a      	bne.n	8007cc0 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d05b      	beq.n	8007cae <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2212      	movs	r2, #18
 8007bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	695a      	ldr	r2, [r3, #20]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8007c2a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8007c2c:	e01b      	b.n	8007c66 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2201      	movs	r2, #1
 8007c36:	2104      	movs	r1, #4
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 f9ec 	bl	8008016 <QSPI_WaitFlagStateUntilTimeout>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8007c42:	7ffb      	ldrb	r3, [r7, #31]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d113      	bne.n	8007c70 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c60:	1e5a      	subs	r2, r3, #1
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1df      	bne.n	8007c2e <HAL_QSPI_Transmit+0x86>
 8007c6e:	e000      	b.n	8007c72 <HAL_QSPI_Transmit+0xca>
          break;
 8007c70:	bf00      	nop
      }

      if (status == HAL_OK)
 8007c72:	7ffb      	ldrb	r3, [r7, #31]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d115      	bne.n	8007ca4 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	2102      	movs	r1, #2
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 f9c7 	bl	8008016 <QSPI_WaitFlagStateUntilTimeout>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8007c8c:	7ffb      	ldrb	r3, [r7, #31]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d108      	bne.n	8007ca4 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2202      	movs	r2, #2
 8007c98:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 f934 	bl	8007f08 <HAL_QSPI_Abort>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cac:	e00a      	b.n	8007cc4 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb2:	f043 0208 	orr.w	r2, r3, #8
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	77fb      	strb	r3, [r7, #31]
 8007cbe:	e001      	b.n	8007cc4 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8007ccc:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3720      	adds	r7, #32
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b08a      	sub	sp, #40	@ 0x28
 8007cda:	af02      	add	r7, sp, #8
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	60b9      	str	r1, [r7, #8]
 8007ce0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007ce6:	f7ff fb05 	bl	80072f4 <HAL_GetTick>
 8007cea:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3320      	adds	r3, #32
 8007cfa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_QSPI_Receive+0x36>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e082      	b.n	8007e12 <HAL_QSPI_Receive+0x13c>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d171      	bne.n	8007e04 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d062      	beq.n	8007df2 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2222      	movs	r2, #34	@ 0x22
 8007d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8007d64:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8007d6e:	e01c      	b.n	8007daa <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	2201      	movs	r2, #1
 8007d78:	2106      	movs	r1, #6
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 f94b 	bl	8008016 <QSPI_WaitFlagStateUntilTimeout>
 8007d80:	4603      	mov	r3, r0
 8007d82:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8007d84:	7ffb      	ldrb	r3, [r7, #31]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d114      	bne.n	8007db4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	7812      	ldrb	r2, [r2, #0]
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da4:	1e5a      	subs	r2, r3, #1
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1de      	bne.n	8007d70 <HAL_QSPI_Receive+0x9a>
 8007db2:	e000      	b.n	8007db6 <HAL_QSPI_Receive+0xe0>
          break;
 8007db4:	bf00      	nop
      }

      if (status == HAL_OK)
 8007db6:	7ffb      	ldrb	r3, [r7, #31]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d115      	bne.n	8007de8 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	2102      	movs	r1, #2
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 f925 	bl	8008016 <QSPI_WaitFlagStateUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8007dd0:	7ffb      	ldrb	r3, [r7, #31]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d108      	bne.n	8007de8 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 f892 	bl	8007f08 <HAL_QSPI_Abort>
 8007de4:	4603      	mov	r3, r0
 8007de6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007df0:	e00a      	b.n	8007e08 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df6:	f043 0208 	orr.w	r2, r3, #8
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	77fb      	strb	r3, [r7, #31]
 8007e02:	e001      	b.n	8007e08 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007e04:	2302      	movs	r3, #2
 8007e06:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8007e10:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3720      	adds	r7, #32
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b088      	sub	sp, #32
 8007e1e:	af02      	add	r7, sp, #8
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
 8007e26:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007e28:	f7ff fa64 	bl	80072f4 <HAL_GetTick>
 8007e2c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d101      	bne.n	8007e3e <HAL_QSPI_AutoPolling+0x24>
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	e060      	b.n	8007f00 <HAL_QSPI_AutoPolling+0xe6>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d14f      	bne.n	8007ef2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2242      	movs	r2, #66	@ 0x42
 8007e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	2200      	movs	r2, #0
 8007e68:	2120      	movs	r1, #32
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 f8d3 	bl	8008016 <QSPI_WaitFlagStateUntilTimeout>
 8007e70:	4603      	mov	r3, r0
 8007e72:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d13d      	bne.n	8007ef6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6812      	ldr	r2, [r2, #0]
 8007e82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	6852      	ldr	r2, [r2, #4]
 8007e8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6892      	ldr	r2, [r2, #8]
 8007e96:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8007eb0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007eba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007ebe:	68b9      	ldr	r1, [r7, #8]
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 f8df 	bl	8008084 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	2108      	movs	r1, #8
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 f8a0 	bl	8008016 <QSPI_WaitFlagStateUntilTimeout>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10a      	bne.n	8007ef6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2208      	movs	r2, #8
 8007ee6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ef0:	e001      	b.n	8007ef6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007f14:	f7ff f9ee 	bl	80072f4 <HAL_GetTick>
 8007f18:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d062      	beq.n	8007ff0 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d017      	beq.n	8007f70 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0204 	bic.w	r2, r2, #4
 8007f4e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7ff fb0e 	bl	8007576 <HAL_DMA_Abort>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f68:	f043 0204 	orr.w	r2, r3, #4
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d034      	beq.n	8007fe8 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f042 0202 	orr.w	r2, r2, #2
 8007f8c:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2201      	movs	r2, #1
 8007f98:	2102      	movs	r1, #2
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f83b 	bl	8008016 <QSPI_WaitFlagStateUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10e      	bne.n	8007fc8 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2120      	movs	r1, #32
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f829 	bl	8008016 <QSPI_WaitFlagStateUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d110      	bne.n	8007ff0 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	695a      	ldr	r2, [r3, #20]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8007fdc:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fe6:	e003      	b.n	8007ff0 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
  }

  return status;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	603b      	str	r3, [r7, #0]
 8008022:	4613      	mov	r3, r2
 8008024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008026:	e01a      	b.n	800805e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d016      	beq.n	800805e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008030:	f7ff f960 	bl	80072f4 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	429a      	cmp	r2, r3
 800803e:	d302      	bcc.n	8008046 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10b      	bne.n	800805e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2204      	movs	r2, #4
 800804a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008052:	f043 0201 	orr.w	r2, r3, #1
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e00e      	b.n	800807c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	bf14      	ite	ne
 800806c:	2301      	movne	r3, #1
 800806e:	2300      	moveq	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	461a      	mov	r2, r3
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	429a      	cmp	r2, r3
 8008078:	d1d6      	bne.n	8008028 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008094:	2b00      	cmp	r3, #0
 8008096:	d009      	beq.n	80080ac <QSPI_Config+0x28>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800809e:	d005      	beq.n	80080ac <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3a01      	subs	r2, #1
 80080aa:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 80b9 	beq.w	8008228 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d05f      	beq.n	800817e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	6892      	ldr	r2, [r2, #8]
 80080c6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d031      	beq.n	8008134 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d8:	431a      	orrs	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080de:	431a      	orrs	r2, r3
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	431a      	orrs	r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	049b      	lsls	r3, r3, #18
 80080ec:	431a      	orrs	r2, r3
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	6a1b      	ldr	r3, [r3, #32]
 80080f8:	431a      	orrs	r2, r3
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	431a      	orrs	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	431a      	orrs	r2, r3
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	431a      	orrs	r2, r3
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	ea42 0103 	orr.w	r1, r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	430a      	orrs	r2, r1
 800811c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008124:	f000 812e 	beq.w	8008384 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	6852      	ldr	r2, [r2, #4]
 8008130:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008132:	e127      	b.n	8008384 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800813c:	431a      	orrs	r2, r3
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008142:	431a      	orrs	r2, r3
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008148:	431a      	orrs	r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	049b      	lsls	r3, r3, #18
 8008150:	431a      	orrs	r2, r3
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	431a      	orrs	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	431a      	orrs	r2, r3
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	431a      	orrs	r2, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	431a      	orrs	r2, r3
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	ea42 0103 	orr.w	r1, r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	430a      	orrs	r2, r1
 800817a:	615a      	str	r2, [r3, #20]
}
 800817c:	e102      	b.n	8008384 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d02e      	beq.n	80081e4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800818e:	431a      	orrs	r2, r3
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008194:	431a      	orrs	r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819a:	431a      	orrs	r2, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	049b      	lsls	r3, r3, #18
 80081a2:	431a      	orrs	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	431a      	orrs	r2, r3
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	431a      	orrs	r2, r3
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	431a      	orrs	r2, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	ea42 0103 	orr.w	r1, r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80081d4:	f000 80d6 	beq.w	8008384 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	6852      	ldr	r2, [r2, #4]
 80081e0:	619a      	str	r2, [r3, #24]
}
 80081e2:	e0cf      	b.n	8008384 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ec:	431a      	orrs	r2, r3
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081f2:	431a      	orrs	r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f8:	431a      	orrs	r2, r3
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	049b      	lsls	r3, r3, #18
 8008200:	431a      	orrs	r2, r3
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	431a      	orrs	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	431a      	orrs	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	431a      	orrs	r2, r3
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	ea42 0103 	orr.w	r1, r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	430a      	orrs	r2, r1
 8008224:	615a      	str	r2, [r3, #20]
}
 8008226:	e0ad      	b.n	8008384 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d058      	beq.n	80082e2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	6892      	ldr	r2, [r2, #8]
 8008238:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d02d      	beq.n	800829e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824a:	431a      	orrs	r2, r3
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008250:	431a      	orrs	r2, r3
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008256:	431a      	orrs	r2, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	049b      	lsls	r3, r3, #18
 800825e:	431a      	orrs	r2, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	431a      	orrs	r2, r3
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	431a      	orrs	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	431a      	orrs	r2, r3
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	431a      	orrs	r2, r3
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	ea42 0103 	orr.w	r1, r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	430a      	orrs	r2, r1
 8008288:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008290:	d078      	beq.n	8008384 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	6852      	ldr	r2, [r2, #4]
 800829a:	619a      	str	r2, [r3, #24]
}
 800829c:	e072      	b.n	8008384 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a6:	431a      	orrs	r2, r3
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ac:	431a      	orrs	r2, r3
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b2:	431a      	orrs	r2, r3
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	049b      	lsls	r3, r3, #18
 80082ba:	431a      	orrs	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	431a      	orrs	r2, r3
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	431a      	orrs	r2, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	431a      	orrs	r2, r3
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	ea42 0103 	orr.w	r1, r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	430a      	orrs	r2, r1
 80082de:	615a      	str	r2, [r3, #20]
}
 80082e0:	e050      	b.n	8008384 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d02a      	beq.n	8008340 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f2:	431a      	orrs	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f8:	431a      	orrs	r2, r3
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fe:	431a      	orrs	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	049b      	lsls	r3, r3, #18
 8008306:	431a      	orrs	r2, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	431a      	orrs	r2, r3
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	431a      	orrs	r2, r3
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	431a      	orrs	r2, r3
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	ea42 0103 	orr.w	r1, r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	430a      	orrs	r2, r1
 800832a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008332:	d027      	beq.n	8008384 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	6852      	ldr	r2, [r2, #4]
 800833c:	619a      	str	r2, [r3, #24]
}
 800833e:	e021      	b.n	8008384 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01d      	beq.n	8008384 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008350:	431a      	orrs	r2, r3
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008356:	431a      	orrs	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835c:	431a      	orrs	r2, r3
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	049b      	lsls	r3, r3, #18
 8008364:	431a      	orrs	r2, r3
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	431a      	orrs	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	431a      	orrs	r2, r3
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	ea42 0103 	orr.w	r1, r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	430a      	orrs	r2, r1
 8008382:	615a      	str	r2, [r3, #20]
}
 8008384:	bf00      	nop
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008398:	2300      	movs	r3, #0
 800839a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e291      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 8087 	beq.w	80084c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80083b4:	4b96      	ldr	r3, [pc, #600]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f003 030c 	and.w	r3, r3, #12
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d00c      	beq.n	80083da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083c0:	4b93      	ldr	r3, [pc, #588]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 030c 	and.w	r3, r3, #12
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d112      	bne.n	80083f2 <HAL_RCC_OscConfig+0x62>
 80083cc:	4b90      	ldr	r3, [pc, #576]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083d8:	d10b      	bne.n	80083f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083da:	4b8d      	ldr	r3, [pc, #564]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d06c      	beq.n	80084c0 <HAL_RCC_OscConfig+0x130>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d168      	bne.n	80084c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e26b      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083fa:	d106      	bne.n	800840a <HAL_RCC_OscConfig+0x7a>
 80083fc:	4b84      	ldr	r3, [pc, #528]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a83      	ldr	r2, [pc, #524]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	e02e      	b.n	8008468 <HAL_RCC_OscConfig+0xd8>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10c      	bne.n	800842c <HAL_RCC_OscConfig+0x9c>
 8008412:	4b7f      	ldr	r3, [pc, #508]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a7e      	ldr	r2, [pc, #504]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	4b7c      	ldr	r3, [pc, #496]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a7b      	ldr	r2, [pc, #492]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008424:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	e01d      	b.n	8008468 <HAL_RCC_OscConfig+0xd8>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008434:	d10c      	bne.n	8008450 <HAL_RCC_OscConfig+0xc0>
 8008436:	4b76      	ldr	r3, [pc, #472]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a75      	ldr	r2, [pc, #468]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 800843c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	4b73      	ldr	r3, [pc, #460]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a72      	ldr	r2, [pc, #456]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	e00b      	b.n	8008468 <HAL_RCC_OscConfig+0xd8>
 8008450:	4b6f      	ldr	r3, [pc, #444]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a6e      	ldr	r2, [pc, #440]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	4b6c      	ldr	r3, [pc, #432]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a6b      	ldr	r2, [pc, #428]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d013      	beq.n	8008498 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008470:	f7fe ff40 	bl	80072f4 <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008476:	e008      	b.n	800848a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008478:	f7fe ff3c 	bl	80072f4 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b64      	cmp	r3, #100	@ 0x64
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e21f      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800848a:	4b61      	ldr	r3, [pc, #388]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0f0      	beq.n	8008478 <HAL_RCC_OscConfig+0xe8>
 8008496:	e014      	b.n	80084c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008498:	f7fe ff2c 	bl	80072f4 <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084a0:	f7fe ff28 	bl	80072f4 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b64      	cmp	r3, #100	@ 0x64
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e20b      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084b2:	4b57      	ldr	r3, [pc, #348]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f0      	bne.n	80084a0 <HAL_RCC_OscConfig+0x110>
 80084be:	e000      	b.n	80084c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d069      	beq.n	80085a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80084ce:	4b50      	ldr	r3, [pc, #320]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f003 030c 	and.w	r3, r3, #12
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00b      	beq.n	80084f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084da:	4b4d      	ldr	r3, [pc, #308]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f003 030c 	and.w	r3, r3, #12
 80084e2:	2b08      	cmp	r3, #8
 80084e4:	d11c      	bne.n	8008520 <HAL_RCC_OscConfig+0x190>
 80084e6:	4b4a      	ldr	r3, [pc, #296]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d116      	bne.n	8008520 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084f2:	4b47      	ldr	r3, [pc, #284]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <HAL_RCC_OscConfig+0x17a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d001      	beq.n	800850a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e1df      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800850a:	4b41      	ldr	r3, [pc, #260]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	493d      	ldr	r1, [pc, #244]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 800851a:	4313      	orrs	r3, r2
 800851c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800851e:	e040      	b.n	80085a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d023      	beq.n	8008570 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008528:	4b39      	ldr	r3, [pc, #228]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a38      	ldr	r2, [pc, #224]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008534:	f7fe fede 	bl	80072f4 <HAL_GetTick>
 8008538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800853a:	e008      	b.n	800854e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800853c:	f7fe feda 	bl	80072f4 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d901      	bls.n	800854e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e1bd      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800854e:	4b30      	ldr	r3, [pc, #192]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0f0      	beq.n	800853c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800855a:	4b2d      	ldr	r3, [pc, #180]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	4929      	ldr	r1, [pc, #164]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 800856a:	4313      	orrs	r3, r2
 800856c:	600b      	str	r3, [r1, #0]
 800856e:	e018      	b.n	80085a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008570:	4b27      	ldr	r3, [pc, #156]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a26      	ldr	r2, [pc, #152]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008576:	f023 0301 	bic.w	r3, r3, #1
 800857a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800857c:	f7fe feba 	bl	80072f4 <HAL_GetTick>
 8008580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008582:	e008      	b.n	8008596 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008584:	f7fe feb6 	bl	80072f4 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	2b02      	cmp	r3, #2
 8008590:	d901      	bls.n	8008596 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e199      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008596:	4b1e      	ldr	r3, [pc, #120]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1f0      	bne.n	8008584 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d038      	beq.n	8008620 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d019      	beq.n	80085ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085b6:	4b16      	ldr	r3, [pc, #88]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80085b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ba:	4a15      	ldr	r2, [pc, #84]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80085bc:	f043 0301 	orr.w	r3, r3, #1
 80085c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085c2:	f7fe fe97 	bl	80072f4 <HAL_GetTick>
 80085c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085c8:	e008      	b.n	80085dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085ca:	f7fe fe93 	bl	80072f4 <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d901      	bls.n	80085dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e176      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80085de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0f0      	beq.n	80085ca <HAL_RCC_OscConfig+0x23a>
 80085e8:	e01a      	b.n	8008620 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085ea:	4b09      	ldr	r3, [pc, #36]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80085ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ee:	4a08      	ldr	r2, [pc, #32]	@ (8008610 <HAL_RCC_OscConfig+0x280>)
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085f6:	f7fe fe7d 	bl	80072f4 <HAL_GetTick>
 80085fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085fc:	e00a      	b.n	8008614 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085fe:	f7fe fe79 	bl	80072f4 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d903      	bls.n	8008614 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e15c      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
 8008610:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008614:	4b91      	ldr	r3, [pc, #580]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 8008616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008618:	f003 0302 	and.w	r3, r3, #2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1ee      	bne.n	80085fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 80a4 	beq.w	8008776 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800862e:	4b8b      	ldr	r3, [pc, #556]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 8008630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10d      	bne.n	8008656 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800863a:	4b88      	ldr	r3, [pc, #544]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 800863c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863e:	4a87      	ldr	r2, [pc, #540]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 8008640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008644:	6413      	str	r3, [r2, #64]	@ 0x40
 8008646:	4b85      	ldr	r3, [pc, #532]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 8008648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800864e:	60bb      	str	r3, [r7, #8]
 8008650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008652:	2301      	movs	r3, #1
 8008654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008656:	4b82      	ldr	r3, [pc, #520]	@ (8008860 <HAL_RCC_OscConfig+0x4d0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800865e:	2b00      	cmp	r3, #0
 8008660:	d118      	bne.n	8008694 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008662:	4b7f      	ldr	r3, [pc, #508]	@ (8008860 <HAL_RCC_OscConfig+0x4d0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a7e      	ldr	r2, [pc, #504]	@ (8008860 <HAL_RCC_OscConfig+0x4d0>)
 8008668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800866c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800866e:	f7fe fe41 	bl	80072f4 <HAL_GetTick>
 8008672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008674:	e008      	b.n	8008688 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008676:	f7fe fe3d 	bl	80072f4 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b64      	cmp	r3, #100	@ 0x64
 8008682:	d901      	bls.n	8008688 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e120      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008688:	4b75      	ldr	r3, [pc, #468]	@ (8008860 <HAL_RCC_OscConfig+0x4d0>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0f0      	beq.n	8008676 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d106      	bne.n	80086aa <HAL_RCC_OscConfig+0x31a>
 800869c:	4b6f      	ldr	r3, [pc, #444]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 800869e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a0:	4a6e      	ldr	r2, [pc, #440]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086a2:	f043 0301 	orr.w	r3, r3, #1
 80086a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80086a8:	e02d      	b.n	8008706 <HAL_RCC_OscConfig+0x376>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10c      	bne.n	80086cc <HAL_RCC_OscConfig+0x33c>
 80086b2:	4b6a      	ldr	r3, [pc, #424]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b6:	4a69      	ldr	r2, [pc, #420]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086b8:	f023 0301 	bic.w	r3, r3, #1
 80086bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80086be:	4b67      	ldr	r3, [pc, #412]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c2:	4a66      	ldr	r2, [pc, #408]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086c4:	f023 0304 	bic.w	r3, r3, #4
 80086c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80086ca:	e01c      	b.n	8008706 <HAL_RCC_OscConfig+0x376>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	2b05      	cmp	r3, #5
 80086d2:	d10c      	bne.n	80086ee <HAL_RCC_OscConfig+0x35e>
 80086d4:	4b61      	ldr	r3, [pc, #388]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d8:	4a60      	ldr	r2, [pc, #384]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086da:	f043 0304 	orr.w	r3, r3, #4
 80086de:	6713      	str	r3, [r2, #112]	@ 0x70
 80086e0:	4b5e      	ldr	r3, [pc, #376]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e4:	4a5d      	ldr	r2, [pc, #372]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086e6:	f043 0301 	orr.w	r3, r3, #1
 80086ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80086ec:	e00b      	b.n	8008706 <HAL_RCC_OscConfig+0x376>
 80086ee:	4b5b      	ldr	r3, [pc, #364]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f2:	4a5a      	ldr	r2, [pc, #360]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086f4:	f023 0301 	bic.w	r3, r3, #1
 80086f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80086fa:	4b58      	ldr	r3, [pc, #352]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80086fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086fe:	4a57      	ldr	r2, [pc, #348]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 8008700:	f023 0304 	bic.w	r3, r3, #4
 8008704:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d015      	beq.n	800873a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800870e:	f7fe fdf1 	bl	80072f4 <HAL_GetTick>
 8008712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008714:	e00a      	b.n	800872c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008716:	f7fe fded 	bl	80072f4 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008724:	4293      	cmp	r3, r2
 8008726:	d901      	bls.n	800872c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e0ce      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800872c:	4b4b      	ldr	r3, [pc, #300]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 800872e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0ee      	beq.n	8008716 <HAL_RCC_OscConfig+0x386>
 8008738:	e014      	b.n	8008764 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800873a:	f7fe fddb 	bl	80072f4 <HAL_GetTick>
 800873e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008740:	e00a      	b.n	8008758 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008742:	f7fe fdd7 	bl	80072f4 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008750:	4293      	cmp	r3, r2
 8008752:	d901      	bls.n	8008758 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e0b8      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008758:	4b40      	ldr	r3, [pc, #256]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 800875a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1ee      	bne.n	8008742 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d105      	bne.n	8008776 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800876a:	4b3c      	ldr	r3, [pc, #240]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 800876c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800876e:	4a3b      	ldr	r2, [pc, #236]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 8008770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008774:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	2b00      	cmp	r3, #0
 800877c:	f000 80a4 	beq.w	80088c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008780:	4b36      	ldr	r3, [pc, #216]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f003 030c 	and.w	r3, r3, #12
 8008788:	2b08      	cmp	r3, #8
 800878a:	d06b      	beq.n	8008864 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	2b02      	cmp	r3, #2
 8008792:	d149      	bne.n	8008828 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008794:	4b31      	ldr	r3, [pc, #196]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a30      	ldr	r2, [pc, #192]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 800879a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800879e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a0:	f7fe fda8 	bl	80072f4 <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087a8:	f7fe fda4 	bl	80072f4 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e087      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087ba:	4b28      	ldr	r3, [pc, #160]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1f0      	bne.n	80087a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69da      	ldr	r2, [r3, #28]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d4:	019b      	lsls	r3, r3, #6
 80087d6:	431a      	orrs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	3b01      	subs	r3, #1
 80087e0:	041b      	lsls	r3, r3, #16
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e8:	061b      	lsls	r3, r3, #24
 80087ea:	4313      	orrs	r3, r2
 80087ec:	4a1b      	ldr	r2, [pc, #108]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80087ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087f4:	4b19      	ldr	r3, [pc, #100]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a18      	ldr	r2, [pc, #96]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 80087fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7fe fd78 	bl	80072f4 <HAL_GetTick>
 8008804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008808:	f7fe fd74 	bl	80072f4 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e057      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800881a:	4b10      	ldr	r3, [pc, #64]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0f0      	beq.n	8008808 <HAL_RCC_OscConfig+0x478>
 8008826:	e04f      	b.n	80088c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008828:	4b0c      	ldr	r3, [pc, #48]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a0b      	ldr	r2, [pc, #44]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 800882e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008834:	f7fe fd5e 	bl	80072f4 <HAL_GetTick>
 8008838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800883a:	e008      	b.n	800884e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800883c:	f7fe fd5a 	bl	80072f4 <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b02      	cmp	r3, #2
 8008848:	d901      	bls.n	800884e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e03d      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800884e:	4b03      	ldr	r3, [pc, #12]	@ (800885c <HAL_RCC_OscConfig+0x4cc>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1f0      	bne.n	800883c <HAL_RCC_OscConfig+0x4ac>
 800885a:	e035      	b.n	80088c8 <HAL_RCC_OscConfig+0x538>
 800885c:	40023800 	.word	0x40023800
 8008860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008864:	4b1b      	ldr	r3, [pc, #108]	@ (80088d4 <HAL_RCC_OscConfig+0x544>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d028      	beq.n	80088c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800887c:	429a      	cmp	r2, r3
 800887e:	d121      	bne.n	80088c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800888a:	429a      	cmp	r2, r3
 800888c:	d11a      	bne.n	80088c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008894:	4013      	ands	r3, r2
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800889a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800889c:	4293      	cmp	r3, r2
 800889e:	d111      	bne.n	80088c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	3b01      	subs	r3, #1
 80088ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d107      	bne.n	80088c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d001      	beq.n	80088c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e000      	b.n	80088ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	40023800 	.word	0x40023800

080088d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e0d0      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088f0:	4b6a      	ldr	r3, [pc, #424]	@ (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d910      	bls.n	8008920 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088fe:	4b67      	ldr	r3, [pc, #412]	@ (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f023 020f 	bic.w	r2, r3, #15
 8008906:	4965      	ldr	r1, [pc, #404]	@ (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	4313      	orrs	r3, r2
 800890c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800890e:	4b63      	ldr	r3, [pc, #396]	@ (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d001      	beq.n	8008920 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e0b8      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d020      	beq.n	800896e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008938:	4b59      	ldr	r3, [pc, #356]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	4a58      	ldr	r2, [pc, #352]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800893e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008942:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0308 	and.w	r3, r3, #8
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008950:	4b53      	ldr	r3, [pc, #332]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	4a52      	ldr	r2, [pc, #328]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8008956:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800895a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800895c:	4b50      	ldr	r3, [pc, #320]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	494d      	ldr	r1, [pc, #308]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800896a:	4313      	orrs	r3, r2
 800896c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d040      	beq.n	80089fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d107      	bne.n	8008992 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008982:	4b47      	ldr	r3, [pc, #284]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d115      	bne.n	80089ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e07f      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d107      	bne.n	80089aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800899a:	4b41      	ldr	r3, [pc, #260]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e073      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089aa:	4b3d      	ldr	r3, [pc, #244]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e06b      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089ba:	4b39      	ldr	r3, [pc, #228]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f023 0203 	bic.w	r2, r3, #3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	4936      	ldr	r1, [pc, #216]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089cc:	f7fe fc92 	bl	80072f4 <HAL_GetTick>
 80089d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089d2:	e00a      	b.n	80089ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089d4:	f7fe fc8e 	bl	80072f4 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e053      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ea:	4b2d      	ldr	r3, [pc, #180]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 020c 	and.w	r2, r3, #12
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d1eb      	bne.n	80089d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089fc:	4b27      	ldr	r3, [pc, #156]	@ (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d210      	bcs.n	8008a2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a0a:	4b24      	ldr	r3, [pc, #144]	@ (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f023 020f 	bic.w	r2, r3, #15
 8008a12:	4922      	ldr	r1, [pc, #136]	@ (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a1a:	4b20      	ldr	r3, [pc, #128]	@ (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 030f 	and.w	r3, r3, #15
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d001      	beq.n	8008a2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e032      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d008      	beq.n	8008a4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a38:	4b19      	ldr	r3, [pc, #100]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	4916      	ldr	r1, [pc, #88]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0308 	and.w	r3, r3, #8
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d009      	beq.n	8008a6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008a56:	4b12      	ldr	r3, [pc, #72]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	490e      	ldr	r1, [pc, #56]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a6a:	f000 f821 	bl	8008ab0 <HAL_RCC_GetSysClockFreq>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	091b      	lsrs	r3, r3, #4
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	490a      	ldr	r1, [pc, #40]	@ (8008aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8008a7c:	5ccb      	ldrb	r3, [r1, r3]
 8008a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a82:	4a09      	ldr	r2, [pc, #36]	@ (8008aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8008a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008a86:	4b09      	ldr	r3, [pc, #36]	@ (8008aac <HAL_RCC_ClockConfig+0x1d4>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fbee 	bl	800726c <HAL_InitTick>

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	40023c00 	.word	0x40023c00
 8008aa0:	40023800 	.word	0x40023800
 8008aa4:	0800ddd8 	.word	0x0800ddd8
 8008aa8:	200000dc 	.word	0x200000dc
 8008aac:	200000e0 	.word	0x200000e0

08008ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab4:	b090      	sub	sp, #64	@ 0x40
 8008ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008abc:	2300      	movs	r3, #0
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ac8:	4b59      	ldr	r3, [pc, #356]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f003 030c 	and.w	r3, r3, #12
 8008ad0:	2b08      	cmp	r3, #8
 8008ad2:	d00d      	beq.n	8008af0 <HAL_RCC_GetSysClockFreq+0x40>
 8008ad4:	2b08      	cmp	r3, #8
 8008ad6:	f200 80a1 	bhi.w	8008c1c <HAL_RCC_GetSysClockFreq+0x16c>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d003      	beq.n	8008aea <HAL_RCC_GetSysClockFreq+0x3a>
 8008ae2:	e09b      	b.n	8008c1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ae4:	4b53      	ldr	r3, [pc, #332]	@ (8008c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ae8:	e09b      	b.n	8008c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008aea:	4b53      	ldr	r3, [pc, #332]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8008aec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008aee:	e098      	b.n	8008c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008af0:	4b4f      	ldr	r3, [pc, #316]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008afa:	4b4d      	ldr	r3, [pc, #308]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d028      	beq.n	8008b58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b06:	4b4a      	ldr	r3, [pc, #296]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	099b      	lsrs	r3, r3, #6
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	623b      	str	r3, [r7, #32]
 8008b10:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008b18:	2100      	movs	r1, #0
 8008b1a:	4b47      	ldr	r3, [pc, #284]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8008b1c:	fb03 f201 	mul.w	r2, r3, r1
 8008b20:	2300      	movs	r3, #0
 8008b22:	fb00 f303 	mul.w	r3, r0, r3
 8008b26:	4413      	add	r3, r2
 8008b28:	4a43      	ldr	r2, [pc, #268]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8008b2a:	fba0 1202 	umull	r1, r2, r0, r2
 8008b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b30:	460a      	mov	r2, r1
 8008b32:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b36:	4413      	add	r3, r2
 8008b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	61bb      	str	r3, [r7, #24]
 8008b40:	61fa      	str	r2, [r7, #28]
 8008b42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008b4a:	f7f7 fbc9 	bl	80002e0 <__aeabi_uldivmod>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4613      	mov	r3, r2
 8008b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b56:	e053      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b58:	4b35      	ldr	r3, [pc, #212]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	099b      	lsrs	r3, r3, #6
 8008b5e:	2200      	movs	r2, #0
 8008b60:	613b      	str	r3, [r7, #16]
 8008b62:	617a      	str	r2, [r7, #20]
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008b6a:	f04f 0b00 	mov.w	fp, #0
 8008b6e:	4652      	mov	r2, sl
 8008b70:	465b      	mov	r3, fp
 8008b72:	f04f 0000 	mov.w	r0, #0
 8008b76:	f04f 0100 	mov.w	r1, #0
 8008b7a:	0159      	lsls	r1, r3, #5
 8008b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b80:	0150      	lsls	r0, r2, #5
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	ebb2 080a 	subs.w	r8, r2, sl
 8008b8a:	eb63 090b 	sbc.w	r9, r3, fp
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008b9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008b9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008ba2:	ebb2 0408 	subs.w	r4, r2, r8
 8008ba6:	eb63 0509 	sbc.w	r5, r3, r9
 8008baa:	f04f 0200 	mov.w	r2, #0
 8008bae:	f04f 0300 	mov.w	r3, #0
 8008bb2:	00eb      	lsls	r3, r5, #3
 8008bb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008bb8:	00e2      	lsls	r2, r4, #3
 8008bba:	4614      	mov	r4, r2
 8008bbc:	461d      	mov	r5, r3
 8008bbe:	eb14 030a 	adds.w	r3, r4, sl
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	eb45 030b 	adc.w	r3, r5, fp
 8008bc8:	607b      	str	r3, [r7, #4]
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	f04f 0300 	mov.w	r3, #0
 8008bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	028b      	lsls	r3, r1, #10
 8008bda:	4621      	mov	r1, r4
 8008bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008be0:	4621      	mov	r1, r4
 8008be2:	028a      	lsls	r2, r1, #10
 8008be4:	4610      	mov	r0, r2
 8008be6:	4619      	mov	r1, r3
 8008be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bea:	2200      	movs	r2, #0
 8008bec:	60bb      	str	r3, [r7, #8]
 8008bee:	60fa      	str	r2, [r7, #12]
 8008bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bf4:	f7f7 fb74 	bl	80002e0 <__aeabi_uldivmod>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008c00:	4b0b      	ldr	r3, [pc, #44]	@ (8008c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	0c1b      	lsrs	r3, r3, #16
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008c10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c1a:	e002      	b.n	8008c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c1c:	4b05      	ldr	r3, [pc, #20]	@ (8008c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3740      	adds	r7, #64	@ 0x40
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c2e:	bf00      	nop
 8008c30:	40023800 	.word	0x40023800
 8008c34:	00f42400 	.word	0x00f42400
 8008c38:	017d7840 	.word	0x017d7840

08008c3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c40:	4b03      	ldr	r3, [pc, #12]	@ (8008c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c42:	681b      	ldr	r3, [r3, #0]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	200000dc 	.word	0x200000dc

08008c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008c58:	f7ff fff0 	bl	8008c3c <HAL_RCC_GetHCLKFreq>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	4b05      	ldr	r3, [pc, #20]	@ (8008c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	0a9b      	lsrs	r3, r3, #10
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	4903      	ldr	r1, [pc, #12]	@ (8008c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c6a:	5ccb      	ldrb	r3, [r1, r3]
 8008c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	40023800 	.word	0x40023800
 8008c78:	0800dde8 	.word	0x0800dde8

08008c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008c80:	f7ff ffdc 	bl	8008c3c <HAL_RCC_GetHCLKFreq>
 8008c84:	4602      	mov	r2, r0
 8008c86:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	0b5b      	lsrs	r3, r3, #13
 8008c8c:	f003 0307 	and.w	r3, r3, #7
 8008c90:	4903      	ldr	r1, [pc, #12]	@ (8008ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c92:	5ccb      	ldrb	r3, [r1, r3]
 8008c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	40023800 	.word	0x40023800
 8008ca0:	0800dde8 	.word	0x0800dde8

08008ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d012      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008ccc:	4b69      	ldr	r3, [pc, #420]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	4a68      	ldr	r2, [pc, #416]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cd2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008cd6:	6093      	str	r3, [r2, #8]
 8008cd8:	4b66      	ldr	r3, [pc, #408]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cda:	689a      	ldr	r2, [r3, #8]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce0:	4964      	ldr	r1, [pc, #400]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d017      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d04:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d0c:	4959      	ldr	r1, [pc, #356]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d1c:	d101      	bne.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d017      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d40:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d48:	494a      	ldr	r1, [pc, #296]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d58:	d101      	bne.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008d66:	2301      	movs	r3, #1
 8008d68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008d76:	2301      	movs	r3, #1
 8008d78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0320 	and.w	r3, r3, #32
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 808b 	beq.w	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d88:	4b3a      	ldr	r3, [pc, #232]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8c:	4a39      	ldr	r2, [pc, #228]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d94:	4b37      	ldr	r3, [pc, #220]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d9c:	60bb      	str	r3, [r7, #8]
 8008d9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008da0:	4b35      	ldr	r3, [pc, #212]	@ (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a34      	ldr	r2, [pc, #208]	@ (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008da6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dac:	f7fe faa2 	bl	80072f4 <HAL_GetTick>
 8008db0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008db2:	e008      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008db4:	f7fe fa9e 	bl	80072f4 <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	2b64      	cmp	r3, #100	@ 0x64
 8008dc0:	d901      	bls.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e357      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0f0      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008dd2:	4b28      	ldr	r3, [pc, #160]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d035      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d02e      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008df0:	4b20      	ldr	r3, [pc, #128]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008df8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e04:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e06:	4b1b      	ldr	r3, [pc, #108]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e10:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008e12:	4a18      	ldr	r2, [pc, #96]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008e18:	4b16      	ldr	r3, [pc, #88]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d114      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e24:	f7fe fa66 	bl	80072f4 <HAL_GetTick>
 8008e28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e2a:	e00a      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e2c:	f7fe fa62 	bl	80072f4 <HAL_GetTick>
 8008e30:	4602      	mov	r2, r0
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d901      	bls.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e319      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e42:	4b0c      	ldr	r3, [pc, #48]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0ee      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e5a:	d111      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008e5c:	4b05      	ldr	r3, [pc, #20]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008e68:	4b04      	ldr	r3, [pc, #16]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008e6a:	400b      	ands	r3, r1
 8008e6c:	4901      	ldr	r1, [pc, #4]	@ (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	608b      	str	r3, [r1, #8]
 8008e72:	e00b      	b.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008e74:	40023800 	.word	0x40023800
 8008e78:	40007000 	.word	0x40007000
 8008e7c:	0ffffcff 	.word	0x0ffffcff
 8008e80:	4baa      	ldr	r3, [pc, #680]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	4aa9      	ldr	r2, [pc, #676]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e86:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008e8a:	6093      	str	r3, [r2, #8]
 8008e8c:	4ba7      	ldr	r3, [pc, #668]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e98:	49a4      	ldr	r1, [pc, #656]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0310 	and.w	r3, r3, #16
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d010      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008eaa:	4ba0      	ldr	r3, [pc, #640]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eb0:	4a9e      	ldr	r2, [pc, #632]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008eb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008eba:	4b9c      	ldr	r3, [pc, #624]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ebc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec4:	4999      	ldr	r1, [pc, #612]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00a      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ed8:	4b94      	ldr	r3, [pc, #592]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ede:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ee6:	4991      	ldr	r1, [pc, #580]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008efa:	4b8c      	ldr	r3, [pc, #560]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f08:	4988      	ldr	r1, [pc, #544]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00a      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f1c:	4b83      	ldr	r3, [pc, #524]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f2a:	4980      	ldr	r1, [pc, #512]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f3e:	4b7b      	ldr	r3, [pc, #492]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f44:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f4c:	4977      	ldr	r1, [pc, #476]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00a      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f60:	4b72      	ldr	r3, [pc, #456]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f66:	f023 0203 	bic.w	r2, r3, #3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f6e:	496f      	ldr	r1, [pc, #444]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f70:	4313      	orrs	r3, r2
 8008f72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f82:	4b6a      	ldr	r3, [pc, #424]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f88:	f023 020c 	bic.w	r2, r3, #12
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f90:	4966      	ldr	r1, [pc, #408]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00a      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008fa4:	4b61      	ldr	r3, [pc, #388]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008faa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fb2:	495e      	ldr	r1, [pc, #376]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008fc6:	4b59      	ldr	r3, [pc, #356]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fcc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fd4:	4955      	ldr	r1, [pc, #340]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00a      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008fe8:	4b50      	ldr	r3, [pc, #320]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff6:	494d      	ldr	r1, [pc, #308]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800900a:	4b48      	ldr	r3, [pc, #288]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800900c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009010:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009018:	4944      	ldr	r1, [pc, #272]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800901a:	4313      	orrs	r3, r2
 800901c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00a      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800902c:	4b3f      	ldr	r3, [pc, #252]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800902e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009032:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800903a:	493c      	ldr	r1, [pc, #240]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800903c:	4313      	orrs	r3, r2
 800903e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800904e:	4b37      	ldr	r3, [pc, #220]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009054:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800905c:	4933      	ldr	r1, [pc, #204]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800905e:	4313      	orrs	r3, r2
 8009060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00a      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009070:	4b2e      	ldr	r3, [pc, #184]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009076:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800907e:	492b      	ldr	r1, [pc, #172]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009080:	4313      	orrs	r3, r2
 8009082:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d011      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009092:	4b26      	ldr	r3, [pc, #152]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009098:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090a0:	4922      	ldr	r1, [pc, #136]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090b0:	d101      	bne.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80090b2:	2301      	movs	r3, #1
 80090b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80090c2:	2301      	movs	r3, #1
 80090c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090d2:	4b16      	ldr	r3, [pc, #88]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090e0:	4912      	ldr	r1, [pc, #72]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00b      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80090f4:	4b0d      	ldr	r3, [pc, #52]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009104:	4909      	ldr	r1, [pc, #36]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009106:	4313      	orrs	r3, r2
 8009108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d006      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 80d9 	beq.w	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009120:	4b02      	ldr	r3, [pc, #8]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a01      	ldr	r2, [pc, #4]	@ (800912c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009126:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800912a:	e001      	b.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800912c:	40023800 	.word	0x40023800
 8009130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009132:	f7fe f8df 	bl	80072f4 <HAL_GetTick>
 8009136:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009138:	e008      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800913a:	f7fe f8db 	bl	80072f4 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	2b64      	cmp	r3, #100	@ 0x64
 8009146:	d901      	bls.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e194      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800914c:	4b6c      	ldr	r3, [pc, #432]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1f0      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d021      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009168:	2b00      	cmp	r3, #0
 800916a:	d11d      	bne.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800916c:	4b64      	ldr	r3, [pc, #400]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800916e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009172:	0c1b      	lsrs	r3, r3, #16
 8009174:	f003 0303 	and.w	r3, r3, #3
 8009178:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800917a:	4b61      	ldr	r3, [pc, #388]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800917c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009180:	0e1b      	lsrs	r3, r3, #24
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	019a      	lsls	r2, r3, #6
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	041b      	lsls	r3, r3, #16
 8009192:	431a      	orrs	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	061b      	lsls	r3, r3, #24
 8009198:	431a      	orrs	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	071b      	lsls	r3, r3, #28
 80091a0:	4957      	ldr	r1, [pc, #348]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091bc:	d00a      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d02e      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091d2:	d129      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80091d4:	4b4a      	ldr	r3, [pc, #296]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091da:	0c1b      	lsrs	r3, r3, #16
 80091dc:	f003 0303 	and.w	r3, r3, #3
 80091e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80091e2:	4b47      	ldr	r3, [pc, #284]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091e8:	0f1b      	lsrs	r3, r3, #28
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	019a      	lsls	r2, r3, #6
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	041b      	lsls	r3, r3, #16
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	061b      	lsls	r3, r3, #24
 8009202:	431a      	orrs	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	071b      	lsls	r3, r3, #28
 8009208:	493d      	ldr	r1, [pc, #244]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800920a:	4313      	orrs	r3, r2
 800920c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009210:	4b3b      	ldr	r3, [pc, #236]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009212:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009216:	f023 021f 	bic.w	r2, r3, #31
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921e:	3b01      	subs	r3, #1
 8009220:	4937      	ldr	r1, [pc, #220]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009222:	4313      	orrs	r3, r2
 8009224:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01d      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009234:	4b32      	ldr	r3, [pc, #200]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800923a:	0e1b      	lsrs	r3, r3, #24
 800923c:	f003 030f 	and.w	r3, r3, #15
 8009240:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009242:	4b2f      	ldr	r3, [pc, #188]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009248:	0f1b      	lsrs	r3, r3, #28
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	019a      	lsls	r2, r3, #6
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	041b      	lsls	r3, r3, #16
 800925c:	431a      	orrs	r2, r3
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	061b      	lsls	r3, r3, #24
 8009262:	431a      	orrs	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	071b      	lsls	r3, r3, #28
 8009268:	4925      	ldr	r1, [pc, #148]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800926a:	4313      	orrs	r3, r2
 800926c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d011      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	019a      	lsls	r2, r3, #6
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	041b      	lsls	r3, r3, #16
 8009288:	431a      	orrs	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	061b      	lsls	r3, r3, #24
 8009290:	431a      	orrs	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	071b      	lsls	r3, r3, #28
 8009298:	4919      	ldr	r1, [pc, #100]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800929a:	4313      	orrs	r3, r2
 800929c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80092a0:	4b17      	ldr	r3, [pc, #92]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a16      	ldr	r2, [pc, #88]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ac:	f7fe f822 	bl	80072f4 <HAL_GetTick>
 80092b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092b2:	e008      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80092b4:	f7fe f81e 	bl	80072f4 <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	2b64      	cmp	r3, #100	@ 0x64
 80092c0:	d901      	bls.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e0d7      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092c6:	4b0e      	ldr	r3, [pc, #56]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0f0      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	f040 80cd 	bne.w	8009474 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80092da:	4b09      	ldr	r3, [pc, #36]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a08      	ldr	r2, [pc, #32]	@ (8009300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092e6:	f7fe f805 	bl	80072f4 <HAL_GetTick>
 80092ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80092ec:	e00a      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80092ee:	f7fe f801 	bl	80072f4 <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	2b64      	cmp	r3, #100	@ 0x64
 80092fa:	d903      	bls.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e0ba      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009300:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009304:	4b5e      	ldr	r3, [pc, #376]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800930c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009310:	d0ed      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d009      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800932e:	2b00      	cmp	r3, #0
 8009330:	d02e      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	d12a      	bne.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800933a:	4b51      	ldr	r3, [pc, #324]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800933c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009340:	0c1b      	lsrs	r3, r3, #16
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009348:	4b4d      	ldr	r3, [pc, #308]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800934a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800934e:	0f1b      	lsrs	r3, r3, #28
 8009350:	f003 0307 	and.w	r3, r3, #7
 8009354:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	019a      	lsls	r2, r3, #6
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	041b      	lsls	r3, r3, #16
 8009360:	431a      	orrs	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	061b      	lsls	r3, r3, #24
 8009368:	431a      	orrs	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	071b      	lsls	r3, r3, #28
 800936e:	4944      	ldr	r1, [pc, #272]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009370:	4313      	orrs	r3, r2
 8009372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009376:	4b42      	ldr	r3, [pc, #264]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009378:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800937c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009384:	3b01      	subs	r3, #1
 8009386:	021b      	lsls	r3, r3, #8
 8009388:	493d      	ldr	r1, [pc, #244]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800938a:	4313      	orrs	r3, r2
 800938c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d022      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093a4:	d11d      	bne.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80093a6:	4b36      	ldr	r3, [pc, #216]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ac:	0e1b      	lsrs	r3, r3, #24
 80093ae:	f003 030f 	and.w	r3, r3, #15
 80093b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80093b4:	4b32      	ldr	r3, [pc, #200]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ba:	0f1b      	lsrs	r3, r3, #28
 80093bc:	f003 0307 	and.w	r3, r3, #7
 80093c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	019a      	lsls	r2, r3, #6
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a1b      	ldr	r3, [r3, #32]
 80093cc:	041b      	lsls	r3, r3, #16
 80093ce:	431a      	orrs	r2, r3
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	061b      	lsls	r3, r3, #24
 80093d4:	431a      	orrs	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	071b      	lsls	r3, r3, #28
 80093da:	4929      	ldr	r1, [pc, #164]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093dc:	4313      	orrs	r3, r2
 80093de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0308 	and.w	r3, r3, #8
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d028      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80093ee:	4b24      	ldr	r3, [pc, #144]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f4:	0e1b      	lsrs	r3, r3, #24
 80093f6:	f003 030f 	and.w	r3, r3, #15
 80093fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80093fc:	4b20      	ldr	r3, [pc, #128]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009402:	0c1b      	lsrs	r3, r3, #16
 8009404:	f003 0303 	and.w	r3, r3, #3
 8009408:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	019a      	lsls	r2, r3, #6
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	041b      	lsls	r3, r3, #16
 8009414:	431a      	orrs	r2, r3
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	061b      	lsls	r3, r3, #24
 800941a:	431a      	orrs	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	69db      	ldr	r3, [r3, #28]
 8009420:	071b      	lsls	r3, r3, #28
 8009422:	4917      	ldr	r1, [pc, #92]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009424:	4313      	orrs	r3, r2
 8009426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800942a:	4b15      	ldr	r3, [pc, #84]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800942c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009430:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009438:	4911      	ldr	r1, [pc, #68]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800943a:	4313      	orrs	r3, r2
 800943c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009440:	4b0f      	ldr	r3, [pc, #60]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a0e      	ldr	r2, [pc, #56]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800944a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800944c:	f7fd ff52 	bl	80072f4 <HAL_GetTick>
 8009450:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009452:	e008      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009454:	f7fd ff4e 	bl	80072f4 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b64      	cmp	r3, #100	@ 0x64
 8009460:	d901      	bls.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e007      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009466:	4b06      	ldr	r3, [pc, #24]	@ (8009480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800946e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009472:	d1ef      	bne.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	40023800 	.word	0x40023800

08009484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e040      	b.n	8009518 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800949a:	2b00      	cmp	r3, #0
 800949c:	d106      	bne.n	80094ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7fd fc88 	bl	8006dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2224      	movs	r2, #36	@ 0x24
 80094b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 0201 	bic.w	r2, r2, #1
 80094c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fe4c 	bl	800a168 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fbe5 	bl	8009ca0 <UART_SetConfig>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d101      	bne.n	80094e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e01b      	b.n	8009518 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80094ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689a      	ldr	r2, [r3, #8]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80094fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fecb 	bl	800a2ac <UART_CheckIdleState>
 8009516:	4603      	mov	r3, r0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b08a      	sub	sp, #40	@ 0x28
 8009524:	af02      	add	r7, sp, #8
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	603b      	str	r3, [r7, #0]
 800952c:	4613      	mov	r3, r2
 800952e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009534:	2b20      	cmp	r3, #32
 8009536:	d177      	bne.n	8009628 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <HAL_UART_Transmit+0x24>
 800953e:	88fb      	ldrh	r3, [r7, #6]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e070      	b.n	800962a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2221      	movs	r2, #33	@ 0x21
 8009554:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009556:	f7fd fecd 	bl	80072f4 <HAL_GetTick>
 800955a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	88fa      	ldrh	r2, [r7, #6]
 8009568:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009574:	d108      	bne.n	8009588 <HAL_UART_Transmit+0x68>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d104      	bne.n	8009588 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	61bb      	str	r3, [r7, #24]
 8009586:	e003      	b.n	8009590 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800958c:	2300      	movs	r3, #0
 800958e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009590:	e02f      	b.n	80095f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2200      	movs	r2, #0
 800959a:	2180      	movs	r1, #128	@ 0x80
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fedc 	bl	800a35a <UART_WaitOnFlagUntilTimeout>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d004      	beq.n	80095b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2220      	movs	r2, #32
 80095ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e03b      	b.n	800962a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10b      	bne.n	80095d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	461a      	mov	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	3302      	adds	r3, #2
 80095cc:	61bb      	str	r3, [r7, #24]
 80095ce:	e007      	b.n	80095e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	781a      	ldrb	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	3301      	adds	r3, #1
 80095de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	3b01      	subs	r3, #1
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1c9      	bne.n	8009592 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2200      	movs	r2, #0
 8009606:	2140      	movs	r1, #64	@ 0x40
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 fea6 	bl	800a35a <UART_WaitOnFlagUntilTimeout>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d004      	beq.n	800961e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2220      	movs	r2, #32
 8009618:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	e005      	b.n	800962a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2220      	movs	r2, #32
 8009622:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	e000      	b.n	800962a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009628:	2302      	movs	r3, #2
  }
}
 800962a:	4618      	mov	r0, r3
 800962c:	3720      	adds	r7, #32
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b08a      	sub	sp, #40	@ 0x28
 8009636:	af00      	add	r7, sp, #0
 8009638:	60f8      	str	r0, [r7, #12]
 800963a:	60b9      	str	r1, [r7, #8]
 800963c:	4613      	mov	r3, r2
 800963e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009646:	2b20      	cmp	r3, #32
 8009648:	d132      	bne.n	80096b0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <HAL_UART_Receive_IT+0x24>
 8009650:	88fb      	ldrh	r3, [r7, #6]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e02b      	b.n	80096b2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d018      	beq.n	80096a0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	613b      	str	r3, [r7, #16]
   return(result);
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009682:	627b      	str	r3, [r7, #36]	@ 0x24
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	461a      	mov	r2, r3
 800968a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968c:	623b      	str	r3, [r7, #32]
 800968e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	69f9      	ldr	r1, [r7, #28]
 8009692:	6a3a      	ldr	r2, [r7, #32]
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	61bb      	str	r3, [r7, #24]
   return(result);
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e6      	bne.n	800966e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80096a0:	88fb      	ldrh	r3, [r7, #6]
 80096a2:	461a      	mov	r2, r3
 80096a4:	68b9      	ldr	r1, [r7, #8]
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 fec4 	bl	800a434 <UART_Start_Receive_IT>
 80096ac:	4603      	mov	r3, r0
 80096ae:	e000      	b.n	80096b2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80096b0:	2302      	movs	r3, #2
  }
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3728      	adds	r7, #40	@ 0x28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b0ba      	sub	sp, #232	@ 0xe8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	69db      	ldr	r3, [r3, #28]
 80096ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80096e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80096ea:	4013      	ands	r3, r2
 80096ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80096f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d115      	bne.n	8009724 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80096f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096fc:	f003 0320 	and.w	r3, r3, #32
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00f      	beq.n	8009724 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009708:	f003 0320 	and.w	r3, r3, #32
 800970c:	2b00      	cmp	r3, #0
 800970e:	d009      	beq.n	8009724 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 8297 	beq.w	8009c48 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	4798      	blx	r3
      }
      return;
 8009722:	e291      	b.n	8009c48 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 8117 	beq.w	800995c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800972e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800973a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800973e:	4b85      	ldr	r3, [pc, #532]	@ (8009954 <HAL_UART_IRQHandler+0x298>)
 8009740:	4013      	ands	r3, r2
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 810a 	beq.w	800995c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	d011      	beq.n	8009778 <HAL_UART_IRQHandler+0xbc>
 8009754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00b      	beq.n	8009778 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2201      	movs	r2, #1
 8009766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800976e:	f043 0201 	orr.w	r2, r3, #1
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	2b00      	cmp	r3, #0
 8009782:	d011      	beq.n	80097a8 <HAL_UART_IRQHandler+0xec>
 8009784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009788:	f003 0301 	and.w	r3, r3, #1
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2202      	movs	r2, #2
 8009796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800979e:	f043 0204 	orr.w	r2, r3, #4
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ac:	f003 0304 	and.w	r3, r3, #4
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d011      	beq.n	80097d8 <HAL_UART_IRQHandler+0x11c>
 80097b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00b      	beq.n	80097d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2204      	movs	r2, #4
 80097c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097ce:	f043 0202 	orr.w	r2, r3, #2
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097dc:	f003 0308 	and.w	r3, r3, #8
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d017      	beq.n	8009814 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80097e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e8:	f003 0320 	and.w	r3, r3, #32
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d105      	bne.n	80097fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80097f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00b      	beq.n	8009814 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2208      	movs	r2, #8
 8009802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800980a:	f043 0208 	orr.w	r2, r3, #8
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800981c:	2b00      	cmp	r3, #0
 800981e:	d012      	beq.n	8009846 <HAL_UART_IRQHandler+0x18a>
 8009820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009824:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00c      	beq.n	8009846 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009834:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800983c:	f043 0220 	orr.w	r2, r3, #32
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 81fd 	beq.w	8009c4c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009856:	f003 0320 	and.w	r3, r3, #32
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00d      	beq.n	800987a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800985e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009862:	f003 0320 	and.w	r3, r3, #32
 8009866:	2b00      	cmp	r3, #0
 8009868:	d007      	beq.n	800987a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009880:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988e:	2b40      	cmp	r3, #64	@ 0x40
 8009890:	d005      	beq.n	800989e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009896:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800989a:	2b00      	cmp	r3, #0
 800989c:	d04f      	beq.n	800993e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fe8e 	bl	800a5c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ae:	2b40      	cmp	r3, #64	@ 0x40
 80098b0:	d141      	bne.n	8009936 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3308      	adds	r3, #8
 80098b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3308      	adds	r3, #8
 80098da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80098de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80098e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80098f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1d9      	bne.n	80098b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009902:	2b00      	cmp	r3, #0
 8009904:	d013      	beq.n	800992e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800990a:	4a13      	ldr	r2, [pc, #76]	@ (8009958 <HAL_UART_IRQHandler+0x29c>)
 800990c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009912:	4618      	mov	r0, r3
 8009914:	f7fd fe9f 	bl	8007656 <HAL_DMA_Abort_IT>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d017      	beq.n	800994e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009928:	4610      	mov	r0, r2
 800992a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800992c:	e00f      	b.n	800994e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f9a0 	bl	8009c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009934:	e00b      	b.n	800994e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f99c 	bl	8009c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800993c:	e007      	b.n	800994e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f998 	bl	8009c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800994c:	e17e      	b.n	8009c4c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800994e:	bf00      	nop
    return;
 8009950:	e17c      	b.n	8009c4c <HAL_UART_IRQHandler+0x590>
 8009952:	bf00      	nop
 8009954:	04000120 	.word	0x04000120
 8009958:	0800a689 	.word	0x0800a689

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009960:	2b01      	cmp	r3, #1
 8009962:	f040 814c 	bne.w	8009bfe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800996a:	f003 0310 	and.w	r3, r3, #16
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 8145 	beq.w	8009bfe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009978:	f003 0310 	and.w	r3, r3, #16
 800997c:	2b00      	cmp	r3, #0
 800997e:	f000 813e 	beq.w	8009bfe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2210      	movs	r2, #16
 8009988:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009994:	2b40      	cmp	r3, #64	@ 0x40
 8009996:	f040 80b6 	bne.w	8009b06 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 8150 	beq.w	8009c50 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80099b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099ba:	429a      	cmp	r2, r3
 80099bc:	f080 8148 	bcs.w	8009c50 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099d4:	f000 8086 	beq.w	8009ae4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80099ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009a0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1da      	bne.n	80099d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3308      	adds	r3, #8
 8009a28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a34:	f023 0301 	bic.w	r3, r3, #1
 8009a38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3308      	adds	r3, #8
 8009a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e1      	bne.n	8009a22 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3308      	adds	r3, #8
 8009a64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a8a:	e841 2300 	strex	r3, r2, [r1]
 8009a8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1e3      	bne.n	8009a5e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aac:	e853 3f00 	ldrex	r3, [r3]
 8009ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ab4:	f023 0310 	bic.w	r3, r3, #16
 8009ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ac8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009acc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ace:	e841 2300 	strex	r3, r2, [r1]
 8009ad2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1e4      	bne.n	8009aa4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fd fd49 	bl	8007576 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f8c2 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b04:	e0a4      	b.n	8009c50 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f000 8096 	beq.w	8009c54 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 8091 	beq.w	8009c54 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3a:	e853 3f00 	ldrex	r3, [r3]
 8009b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b5c:	e841 2300 	strex	r3, r2, [r1]
 8009b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e4      	bne.n	8009b32 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	e853 3f00 	ldrex	r3, [r3]
 8009b76:	623b      	str	r3, [r7, #32]
   return(result);
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	f023 0301 	bic.w	r3, r3, #1
 8009b7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3308      	adds	r3, #8
 8009b88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b94:	e841 2300 	strex	r3, r2, [r1]
 8009b98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1e3      	bne.n	8009b68 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	e853 3f00 	ldrex	r3, [r3]
 8009bc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f023 0310 	bic.w	r3, r3, #16
 8009bc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009bd6:	61fb      	str	r3, [r7, #28]
 8009bd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bda:	69b9      	ldr	r1, [r7, #24]
 8009bdc:	69fa      	ldr	r2, [r7, #28]
 8009bde:	e841 2300 	strex	r3, r2, [r1]
 8009be2:	617b      	str	r3, [r7, #20]
   return(result);
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1e4      	bne.n	8009bb4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2202      	movs	r2, #2
 8009bee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f846 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bfc:	e02a      	b.n	8009c54 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00e      	beq.n	8009c28 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d008      	beq.n	8009c28 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d01c      	beq.n	8009c58 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	4798      	blx	r3
    }
    return;
 8009c26:	e017      	b.n	8009c58 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d012      	beq.n	8009c5a <HAL_UART_IRQHandler+0x59e>
 8009c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00c      	beq.n	8009c5a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fd37 	bl	800a6b4 <UART_EndTransmit_IT>
    return;
 8009c46:	e008      	b.n	8009c5a <HAL_UART_IRQHandler+0x59e>
      return;
 8009c48:	bf00      	nop
 8009c4a:	e006      	b.n	8009c5a <HAL_UART_IRQHandler+0x59e>
    return;
 8009c4c:	bf00      	nop
 8009c4e:	e004      	b.n	8009c5a <HAL_UART_IRQHandler+0x59e>
      return;
 8009c50:	bf00      	nop
 8009c52:	e002      	b.n	8009c5a <HAL_UART_IRQHandler+0x59e>
      return;
 8009c54:	bf00      	nop
 8009c56:	e000      	b.n	8009c5a <HAL_UART_IRQHandler+0x59e>
    return;
 8009c58:	bf00      	nop
  }

}
 8009c5a:	37e8      	adds	r7, #232	@ 0xe8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b088      	sub	sp, #32
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689a      	ldr	r2, [r3, #8]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4ba6      	ldr	r3, [pc, #664]	@ (8009f64 <UART_SetConfig+0x2c4>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6812      	ldr	r2, [r2, #0]
 8009cd2:	6979      	ldr	r1, [r7, #20]
 8009cd4:	430b      	orrs	r3, r1
 8009cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a94      	ldr	r2, [pc, #592]	@ (8009f68 <UART_SetConfig+0x2c8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d120      	bne.n	8009d5e <UART_SetConfig+0xbe>
 8009d1c:	4b93      	ldr	r3, [pc, #588]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d22:	f003 0303 	and.w	r3, r3, #3
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d816      	bhi.n	8009d58 <UART_SetConfig+0xb8>
 8009d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <UART_SetConfig+0x90>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d41 	.word	0x08009d41
 8009d34:	08009d4d 	.word	0x08009d4d
 8009d38:	08009d47 	.word	0x08009d47
 8009d3c:	08009d53 	.word	0x08009d53
 8009d40:	2301      	movs	r3, #1
 8009d42:	77fb      	strb	r3, [r7, #31]
 8009d44:	e150      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009d46:	2302      	movs	r3, #2
 8009d48:	77fb      	strb	r3, [r7, #31]
 8009d4a:	e14d      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009d4c:	2304      	movs	r3, #4
 8009d4e:	77fb      	strb	r3, [r7, #31]
 8009d50:	e14a      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009d52:	2308      	movs	r3, #8
 8009d54:	77fb      	strb	r3, [r7, #31]
 8009d56:	e147      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009d58:	2310      	movs	r3, #16
 8009d5a:	77fb      	strb	r3, [r7, #31]
 8009d5c:	e144      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a83      	ldr	r2, [pc, #524]	@ (8009f70 <UART_SetConfig+0x2d0>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d132      	bne.n	8009dce <UART_SetConfig+0x12e>
 8009d68:	4b80      	ldr	r3, [pc, #512]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d6e:	f003 030c 	and.w	r3, r3, #12
 8009d72:	2b0c      	cmp	r3, #12
 8009d74:	d828      	bhi.n	8009dc8 <UART_SetConfig+0x128>
 8009d76:	a201      	add	r2, pc, #4	@ (adr r2, 8009d7c <UART_SetConfig+0xdc>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009db1 	.word	0x08009db1
 8009d80:	08009dc9 	.word	0x08009dc9
 8009d84:	08009dc9 	.word	0x08009dc9
 8009d88:	08009dc9 	.word	0x08009dc9
 8009d8c:	08009dbd 	.word	0x08009dbd
 8009d90:	08009dc9 	.word	0x08009dc9
 8009d94:	08009dc9 	.word	0x08009dc9
 8009d98:	08009dc9 	.word	0x08009dc9
 8009d9c:	08009db7 	.word	0x08009db7
 8009da0:	08009dc9 	.word	0x08009dc9
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	08009dc9 	.word	0x08009dc9
 8009dac:	08009dc3 	.word	0x08009dc3
 8009db0:	2300      	movs	r3, #0
 8009db2:	77fb      	strb	r3, [r7, #31]
 8009db4:	e118      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009db6:	2302      	movs	r3, #2
 8009db8:	77fb      	strb	r3, [r7, #31]
 8009dba:	e115      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	77fb      	strb	r3, [r7, #31]
 8009dc0:	e112      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009dc2:	2308      	movs	r3, #8
 8009dc4:	77fb      	strb	r3, [r7, #31]
 8009dc6:	e10f      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009dc8:	2310      	movs	r3, #16
 8009dca:	77fb      	strb	r3, [r7, #31]
 8009dcc:	e10c      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a68      	ldr	r2, [pc, #416]	@ (8009f74 <UART_SetConfig+0x2d4>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d120      	bne.n	8009e1a <UART_SetConfig+0x17a>
 8009dd8:	4b64      	ldr	r3, [pc, #400]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dde:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009de2:	2b30      	cmp	r3, #48	@ 0x30
 8009de4:	d013      	beq.n	8009e0e <UART_SetConfig+0x16e>
 8009de6:	2b30      	cmp	r3, #48	@ 0x30
 8009de8:	d814      	bhi.n	8009e14 <UART_SetConfig+0x174>
 8009dea:	2b20      	cmp	r3, #32
 8009dec:	d009      	beq.n	8009e02 <UART_SetConfig+0x162>
 8009dee:	2b20      	cmp	r3, #32
 8009df0:	d810      	bhi.n	8009e14 <UART_SetConfig+0x174>
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <UART_SetConfig+0x15c>
 8009df6:	2b10      	cmp	r3, #16
 8009df8:	d006      	beq.n	8009e08 <UART_SetConfig+0x168>
 8009dfa:	e00b      	b.n	8009e14 <UART_SetConfig+0x174>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	77fb      	strb	r3, [r7, #31]
 8009e00:	e0f2      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e02:	2302      	movs	r3, #2
 8009e04:	77fb      	strb	r3, [r7, #31]
 8009e06:	e0ef      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	77fb      	strb	r3, [r7, #31]
 8009e0c:	e0ec      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e0e:	2308      	movs	r3, #8
 8009e10:	77fb      	strb	r3, [r7, #31]
 8009e12:	e0e9      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e14:	2310      	movs	r3, #16
 8009e16:	77fb      	strb	r3, [r7, #31]
 8009e18:	e0e6      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a56      	ldr	r2, [pc, #344]	@ (8009f78 <UART_SetConfig+0x2d8>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d120      	bne.n	8009e66 <UART_SetConfig+0x1c6>
 8009e24:	4b51      	ldr	r3, [pc, #324]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009e2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e30:	d013      	beq.n	8009e5a <UART_SetConfig+0x1ba>
 8009e32:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e34:	d814      	bhi.n	8009e60 <UART_SetConfig+0x1c0>
 8009e36:	2b80      	cmp	r3, #128	@ 0x80
 8009e38:	d009      	beq.n	8009e4e <UART_SetConfig+0x1ae>
 8009e3a:	2b80      	cmp	r3, #128	@ 0x80
 8009e3c:	d810      	bhi.n	8009e60 <UART_SetConfig+0x1c0>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <UART_SetConfig+0x1a8>
 8009e42:	2b40      	cmp	r3, #64	@ 0x40
 8009e44:	d006      	beq.n	8009e54 <UART_SetConfig+0x1b4>
 8009e46:	e00b      	b.n	8009e60 <UART_SetConfig+0x1c0>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	77fb      	strb	r3, [r7, #31]
 8009e4c:	e0cc      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e4e:	2302      	movs	r3, #2
 8009e50:	77fb      	strb	r3, [r7, #31]
 8009e52:	e0c9      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e54:	2304      	movs	r3, #4
 8009e56:	77fb      	strb	r3, [r7, #31]
 8009e58:	e0c6      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e5a:	2308      	movs	r3, #8
 8009e5c:	77fb      	strb	r3, [r7, #31]
 8009e5e:	e0c3      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e60:	2310      	movs	r3, #16
 8009e62:	77fb      	strb	r3, [r7, #31]
 8009e64:	e0c0      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a44      	ldr	r2, [pc, #272]	@ (8009f7c <UART_SetConfig+0x2dc>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d125      	bne.n	8009ebc <UART_SetConfig+0x21c>
 8009e70:	4b3e      	ldr	r3, [pc, #248]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e7e:	d017      	beq.n	8009eb0 <UART_SetConfig+0x210>
 8009e80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e84:	d817      	bhi.n	8009eb6 <UART_SetConfig+0x216>
 8009e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e8a:	d00b      	beq.n	8009ea4 <UART_SetConfig+0x204>
 8009e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e90:	d811      	bhi.n	8009eb6 <UART_SetConfig+0x216>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d003      	beq.n	8009e9e <UART_SetConfig+0x1fe>
 8009e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e9a:	d006      	beq.n	8009eaa <UART_SetConfig+0x20a>
 8009e9c:	e00b      	b.n	8009eb6 <UART_SetConfig+0x216>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	77fb      	strb	r3, [r7, #31]
 8009ea2:	e0a1      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	77fb      	strb	r3, [r7, #31]
 8009ea8:	e09e      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009eaa:	2304      	movs	r3, #4
 8009eac:	77fb      	strb	r3, [r7, #31]
 8009eae:	e09b      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009eb0:	2308      	movs	r3, #8
 8009eb2:	77fb      	strb	r3, [r7, #31]
 8009eb4:	e098      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009eb6:	2310      	movs	r3, #16
 8009eb8:	77fb      	strb	r3, [r7, #31]
 8009eba:	e095      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8009f80 <UART_SetConfig+0x2e0>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d125      	bne.n	8009f12 <UART_SetConfig+0x272>
 8009ec6:	4b29      	ldr	r3, [pc, #164]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ecc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009ed0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ed4:	d017      	beq.n	8009f06 <UART_SetConfig+0x266>
 8009ed6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009eda:	d817      	bhi.n	8009f0c <UART_SetConfig+0x26c>
 8009edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ee0:	d00b      	beq.n	8009efa <UART_SetConfig+0x25a>
 8009ee2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ee6:	d811      	bhi.n	8009f0c <UART_SetConfig+0x26c>
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d003      	beq.n	8009ef4 <UART_SetConfig+0x254>
 8009eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ef0:	d006      	beq.n	8009f00 <UART_SetConfig+0x260>
 8009ef2:	e00b      	b.n	8009f0c <UART_SetConfig+0x26c>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	77fb      	strb	r3, [r7, #31]
 8009ef8:	e076      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009efa:	2302      	movs	r3, #2
 8009efc:	77fb      	strb	r3, [r7, #31]
 8009efe:	e073      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f00:	2304      	movs	r3, #4
 8009f02:	77fb      	strb	r3, [r7, #31]
 8009f04:	e070      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f06:	2308      	movs	r3, #8
 8009f08:	77fb      	strb	r3, [r7, #31]
 8009f0a:	e06d      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	77fb      	strb	r3, [r7, #31]
 8009f10:	e06a      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a1b      	ldr	r2, [pc, #108]	@ (8009f84 <UART_SetConfig+0x2e4>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d138      	bne.n	8009f8e <UART_SetConfig+0x2ee>
 8009f1c:	4b13      	ldr	r3, [pc, #76]	@ (8009f6c <UART_SetConfig+0x2cc>)
 8009f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f22:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009f26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f2a:	d017      	beq.n	8009f5c <UART_SetConfig+0x2bc>
 8009f2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f30:	d82a      	bhi.n	8009f88 <UART_SetConfig+0x2e8>
 8009f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f36:	d00b      	beq.n	8009f50 <UART_SetConfig+0x2b0>
 8009f38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f3c:	d824      	bhi.n	8009f88 <UART_SetConfig+0x2e8>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <UART_SetConfig+0x2aa>
 8009f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f46:	d006      	beq.n	8009f56 <UART_SetConfig+0x2b6>
 8009f48:	e01e      	b.n	8009f88 <UART_SetConfig+0x2e8>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	77fb      	strb	r3, [r7, #31]
 8009f4e:	e04b      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f50:	2302      	movs	r3, #2
 8009f52:	77fb      	strb	r3, [r7, #31]
 8009f54:	e048      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f56:	2304      	movs	r3, #4
 8009f58:	77fb      	strb	r3, [r7, #31]
 8009f5a:	e045      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f5c:	2308      	movs	r3, #8
 8009f5e:	77fb      	strb	r3, [r7, #31]
 8009f60:	e042      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f62:	bf00      	nop
 8009f64:	efff69f3 	.word	0xefff69f3
 8009f68:	40011000 	.word	0x40011000
 8009f6c:	40023800 	.word	0x40023800
 8009f70:	40004400 	.word	0x40004400
 8009f74:	40004800 	.word	0x40004800
 8009f78:	40004c00 	.word	0x40004c00
 8009f7c:	40005000 	.word	0x40005000
 8009f80:	40011400 	.word	0x40011400
 8009f84:	40007800 	.word	0x40007800
 8009f88:	2310      	movs	r3, #16
 8009f8a:	77fb      	strb	r3, [r7, #31]
 8009f8c:	e02c      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a72      	ldr	r2, [pc, #456]	@ (800a15c <UART_SetConfig+0x4bc>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d125      	bne.n	8009fe4 <UART_SetConfig+0x344>
 8009f98:	4b71      	ldr	r3, [pc, #452]	@ (800a160 <UART_SetConfig+0x4c0>)
 8009f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009fa2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009fa6:	d017      	beq.n	8009fd8 <UART_SetConfig+0x338>
 8009fa8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009fac:	d817      	bhi.n	8009fde <UART_SetConfig+0x33e>
 8009fae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fb2:	d00b      	beq.n	8009fcc <UART_SetConfig+0x32c>
 8009fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fb8:	d811      	bhi.n	8009fde <UART_SetConfig+0x33e>
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <UART_SetConfig+0x326>
 8009fbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fc2:	d006      	beq.n	8009fd2 <UART_SetConfig+0x332>
 8009fc4:	e00b      	b.n	8009fde <UART_SetConfig+0x33e>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	77fb      	strb	r3, [r7, #31]
 8009fca:	e00d      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	77fb      	strb	r3, [r7, #31]
 8009fd0:	e00a      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009fd2:	2304      	movs	r3, #4
 8009fd4:	77fb      	strb	r3, [r7, #31]
 8009fd6:	e007      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009fd8:	2308      	movs	r3, #8
 8009fda:	77fb      	strb	r3, [r7, #31]
 8009fdc:	e004      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009fde:	2310      	movs	r3, #16
 8009fe0:	77fb      	strb	r3, [r7, #31]
 8009fe2:	e001      	b.n	8009fe8 <UART_SetConfig+0x348>
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ff0:	d15b      	bne.n	800a0aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009ff2:	7ffb      	ldrb	r3, [r7, #31]
 8009ff4:	2b08      	cmp	r3, #8
 8009ff6:	d828      	bhi.n	800a04a <UART_SetConfig+0x3aa>
 8009ff8:	a201      	add	r2, pc, #4	@ (adr r2, 800a000 <UART_SetConfig+0x360>)
 8009ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffe:	bf00      	nop
 800a000:	0800a025 	.word	0x0800a025
 800a004:	0800a02d 	.word	0x0800a02d
 800a008:	0800a035 	.word	0x0800a035
 800a00c:	0800a04b 	.word	0x0800a04b
 800a010:	0800a03b 	.word	0x0800a03b
 800a014:	0800a04b 	.word	0x0800a04b
 800a018:	0800a04b 	.word	0x0800a04b
 800a01c:	0800a04b 	.word	0x0800a04b
 800a020:	0800a043 	.word	0x0800a043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a024:	f7fe fe16 	bl	8008c54 <HAL_RCC_GetPCLK1Freq>
 800a028:	61b8      	str	r0, [r7, #24]
        break;
 800a02a:	e013      	b.n	800a054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a02c:	f7fe fe26 	bl	8008c7c <HAL_RCC_GetPCLK2Freq>
 800a030:	61b8      	str	r0, [r7, #24]
        break;
 800a032:	e00f      	b.n	800a054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a034:	4b4b      	ldr	r3, [pc, #300]	@ (800a164 <UART_SetConfig+0x4c4>)
 800a036:	61bb      	str	r3, [r7, #24]
        break;
 800a038:	e00c      	b.n	800a054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a03a:	f7fe fd39 	bl	8008ab0 <HAL_RCC_GetSysClockFreq>
 800a03e:	61b8      	str	r0, [r7, #24]
        break;
 800a040:	e008      	b.n	800a054 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a046:	61bb      	str	r3, [r7, #24]
        break;
 800a048:	e004      	b.n	800a054 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	77bb      	strb	r3, [r7, #30]
        break;
 800a052:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d074      	beq.n	800a144 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	005a      	lsls	r2, r3, #1
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	085b      	lsrs	r3, r3, #1
 800a064:	441a      	add	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a06e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	2b0f      	cmp	r3, #15
 800a074:	d916      	bls.n	800a0a4 <UART_SetConfig+0x404>
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a07c:	d212      	bcs.n	800a0a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	b29b      	uxth	r3, r3
 800a082:	f023 030f 	bic.w	r3, r3, #15
 800a086:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	085b      	lsrs	r3, r3, #1
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f003 0307 	and.w	r3, r3, #7
 800a092:	b29a      	uxth	r2, r3
 800a094:	89fb      	ldrh	r3, [r7, #14]
 800a096:	4313      	orrs	r3, r2
 800a098:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	89fa      	ldrh	r2, [r7, #14]
 800a0a0:	60da      	str	r2, [r3, #12]
 800a0a2:	e04f      	b.n	800a144 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	77bb      	strb	r3, [r7, #30]
 800a0a8:	e04c      	b.n	800a144 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0aa:	7ffb      	ldrb	r3, [r7, #31]
 800a0ac:	2b08      	cmp	r3, #8
 800a0ae:	d828      	bhi.n	800a102 <UART_SetConfig+0x462>
 800a0b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b8 <UART_SetConfig+0x418>)
 800a0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b6:	bf00      	nop
 800a0b8:	0800a0dd 	.word	0x0800a0dd
 800a0bc:	0800a0e5 	.word	0x0800a0e5
 800a0c0:	0800a0ed 	.word	0x0800a0ed
 800a0c4:	0800a103 	.word	0x0800a103
 800a0c8:	0800a0f3 	.word	0x0800a0f3
 800a0cc:	0800a103 	.word	0x0800a103
 800a0d0:	0800a103 	.word	0x0800a103
 800a0d4:	0800a103 	.word	0x0800a103
 800a0d8:	0800a0fb 	.word	0x0800a0fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0dc:	f7fe fdba 	bl	8008c54 <HAL_RCC_GetPCLK1Freq>
 800a0e0:	61b8      	str	r0, [r7, #24]
        break;
 800a0e2:	e013      	b.n	800a10c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0e4:	f7fe fdca 	bl	8008c7c <HAL_RCC_GetPCLK2Freq>
 800a0e8:	61b8      	str	r0, [r7, #24]
        break;
 800a0ea:	e00f      	b.n	800a10c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0ec:	4b1d      	ldr	r3, [pc, #116]	@ (800a164 <UART_SetConfig+0x4c4>)
 800a0ee:	61bb      	str	r3, [r7, #24]
        break;
 800a0f0:	e00c      	b.n	800a10c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0f2:	f7fe fcdd 	bl	8008ab0 <HAL_RCC_GetSysClockFreq>
 800a0f6:	61b8      	str	r0, [r7, #24]
        break;
 800a0f8:	e008      	b.n	800a10c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0fe:	61bb      	str	r3, [r7, #24]
        break;
 800a100:	e004      	b.n	800a10c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	77bb      	strb	r3, [r7, #30]
        break;
 800a10a:	bf00      	nop
    }

    if (pclk != 0U)
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d018      	beq.n	800a144 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	085a      	lsrs	r2, r3, #1
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	441a      	add	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	fbb2 f3f3 	udiv	r3, r2, r3
 800a124:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	2b0f      	cmp	r3, #15
 800a12a:	d909      	bls.n	800a140 <UART_SetConfig+0x4a0>
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a132:	d205      	bcs.n	800a140 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	b29a      	uxth	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	60da      	str	r2, [r3, #12]
 800a13e:	e001      	b.n	800a144 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a150:	7fbb      	ldrb	r3, [r7, #30]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3720      	adds	r7, #32
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	40007c00 	.word	0x40007c00
 800a160:	40023800 	.word	0x40023800
 800a164:	00f42400 	.word	0x00f42400

0800a168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a174:	f003 0308 	and.w	r3, r3, #8
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00a      	beq.n	800a192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	430a      	orrs	r2, r1
 800a190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00a      	beq.n	800a1b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b8:	f003 0302 	and.w	r3, r3, #2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00a      	beq.n	800a1d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	430a      	orrs	r2, r1
 800a1d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1da:	f003 0304 	and.w	r3, r3, #4
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00a      	beq.n	800a1f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	430a      	orrs	r2, r1
 800a1f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1fc:	f003 0310 	and.w	r3, r3, #16
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00a      	beq.n	800a21a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	430a      	orrs	r2, r1
 800a218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21e:	f003 0320 	and.w	r3, r3, #32
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	430a      	orrs	r2, r1
 800a23a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a244:	2b00      	cmp	r3, #0
 800a246:	d01a      	beq.n	800a27e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a266:	d10a      	bne.n	800a27e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	605a      	str	r2, [r3, #4]
  }
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08c      	sub	sp, #48	@ 0x30
 800a2b0:	af02      	add	r7, sp, #8
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2bc:	f7fd f81a 	bl	80072f4 <HAL_GetTick>
 800a2c0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0308 	and.w	r3, r3, #8
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d12e      	bne.n	800a32e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f83b 	bl	800a35a <UART_WaitOnFlagUntilTimeout>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d021      	beq.n	800a32e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2fe:	623b      	str	r3, [r7, #32]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	461a      	mov	r2, r3
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	61fb      	str	r3, [r7, #28]
 800a30a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	69b9      	ldr	r1, [r7, #24]
 800a30e:	69fa      	ldr	r2, [r7, #28]
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	617b      	str	r3, [r7, #20]
   return(result);
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e6      	bne.n	800a2ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2220      	movs	r2, #32
 800a320:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e011      	b.n	800a352 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2220      	movs	r2, #32
 800a332:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2220      	movs	r2, #32
 800a338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3728      	adds	r7, #40	@ 0x28
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	60f8      	str	r0, [r7, #12]
 800a362:	60b9      	str	r1, [r7, #8]
 800a364:	603b      	str	r3, [r7, #0]
 800a366:	4613      	mov	r3, r2
 800a368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a36a:	e04f      	b.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a372:	d04b      	beq.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a374:	f7fc ffbe 	bl	80072f4 <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	429a      	cmp	r2, r3
 800a382:	d302      	bcc.n	800a38a <UART_WaitOnFlagUntilTimeout+0x30>
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e04e      	b.n	800a42c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0304 	and.w	r3, r3, #4
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d037      	beq.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b80      	cmp	r3, #128	@ 0x80
 800a3a0:	d034      	beq.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b40      	cmp	r3, #64	@ 0x40
 800a3a6:	d031      	beq.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	f003 0308 	and.w	r3, r3, #8
 800a3b2:	2b08      	cmp	r3, #8
 800a3b4:	d110      	bne.n	800a3d8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2208      	movs	r2, #8
 800a3bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 f8fe 	bl	800a5c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2208      	movs	r2, #8
 800a3c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e029      	b.n	800a42c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3e6:	d111      	bne.n	800a40c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a3f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 f8e4 	bl	800a5c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2220      	movs	r2, #32
 800a3fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e00f      	b.n	800a42c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	69da      	ldr	r2, [r3, #28]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	4013      	ands	r3, r2
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	429a      	cmp	r2, r3
 800a41a:	bf0c      	ite	eq
 800a41c:	2301      	moveq	r3, #1
 800a41e:	2300      	movne	r3, #0
 800a420:	b2db      	uxtb	r3, r3
 800a422:	461a      	mov	r2, r3
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	429a      	cmp	r2, r3
 800a428:	d0a0      	beq.n	800a36c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a434:	b480      	push	{r7}
 800a436:	b097      	sub	sp, #92	@ 0x5c
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	88fa      	ldrh	r2, [r7, #6]
 800a44c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	88fa      	ldrh	r2, [r7, #6]
 800a454:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a466:	d10e      	bne.n	800a486 <UART_Start_Receive_IT+0x52>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d105      	bne.n	800a47c <UART_Start_Receive_IT+0x48>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a476:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a47a:	e02d      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	22ff      	movs	r2, #255	@ 0xff
 800a480:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a484:	e028      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10d      	bne.n	800a4aa <UART_Start_Receive_IT+0x76>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d104      	bne.n	800a4a0 <UART_Start_Receive_IT+0x6c>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	22ff      	movs	r2, #255	@ 0xff
 800a49a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a49e:	e01b      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	227f      	movs	r2, #127	@ 0x7f
 800a4a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a4a8:	e016      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4b2:	d10d      	bne.n	800a4d0 <UART_Start_Receive_IT+0x9c>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d104      	bne.n	800a4c6 <UART_Start_Receive_IT+0x92>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	227f      	movs	r2, #127	@ 0x7f
 800a4c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a4c4:	e008      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	223f      	movs	r2, #63	@ 0x3f
 800a4ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a4ce:	e003      	b.n	800a4d8 <UART_Start_Receive_IT+0xa4>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2222      	movs	r2, #34	@ 0x22
 800a4e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4f2:	e853 3f00 	ldrex	r3, [r3]
 800a4f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fa:	f043 0301 	orr.w	r3, r3, #1
 800a4fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3308      	adds	r3, #8
 800a506:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a508:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a50a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a50e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a510:	e841 2300 	strex	r3, r2, [r1]
 800a514:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1e5      	bne.n	800a4e8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a524:	d107      	bne.n	800a536 <UART_Start_Receive_IT+0x102>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d103      	bne.n	800a536 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	4a21      	ldr	r2, [pc, #132]	@ (800a5b8 <UART_Start_Receive_IT+0x184>)
 800a532:	669a      	str	r2, [r3, #104]	@ 0x68
 800a534:	e002      	b.n	800a53c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	4a20      	ldr	r2, [pc, #128]	@ (800a5bc <UART_Start_Receive_IT+0x188>)
 800a53a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d019      	beq.n	800a578 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a54c:	e853 3f00 	ldrex	r3, [r3]
 800a550:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a554:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a562:	637b      	str	r3, [r7, #52]	@ 0x34
 800a564:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a566:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a568:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a56a:	e841 2300 	strex	r3, r2, [r1]
 800a56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e6      	bne.n	800a544 <UART_Start_Receive_IT+0x110>
 800a576:	e018      	b.n	800a5aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	e853 3f00 	ldrex	r3, [r3]
 800a584:	613b      	str	r3, [r7, #16]
   return(result);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	f043 0320 	orr.w	r3, r3, #32
 800a58c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a596:	623b      	str	r3, [r7, #32]
 800a598:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59a:	69f9      	ldr	r1, [r7, #28]
 800a59c:	6a3a      	ldr	r2, [r7, #32]
 800a59e:	e841 2300 	strex	r3, r2, [r1]
 800a5a2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1e6      	bne.n	800a578 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	375c      	adds	r7, #92	@ 0x5c
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	0800a8b1 	.word	0x0800a8b1
 800a5bc:	0800a709 	.word	0x0800a709

0800a5c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b095      	sub	sp, #84	@ 0x54
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d0:	e853 3f00 	ldrex	r3, [r3]
 800a5d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a5ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5ee:	e841 2300 	strex	r3, r2, [r1]
 800a5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1e6      	bne.n	800a5c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	3308      	adds	r3, #8
 800a600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	e853 3f00 	ldrex	r3, [r3]
 800a608:	61fb      	str	r3, [r7, #28]
   return(result);
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	f023 0301 	bic.w	r3, r3, #1
 800a610:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3308      	adds	r3, #8
 800a618:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a61a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a61c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a622:	e841 2300 	strex	r3, r2, [r1]
 800a626:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1e5      	bne.n	800a5fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a632:	2b01      	cmp	r3, #1
 800a634:	d118      	bne.n	800a668 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	e853 3f00 	ldrex	r3, [r3]
 800a642:	60bb      	str	r3, [r7, #8]
   return(result);
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f023 0310 	bic.w	r3, r3, #16
 800a64a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	461a      	mov	r2, r3
 800a652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a654:	61bb      	str	r3, [r7, #24]
 800a656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a658:	6979      	ldr	r1, [r7, #20]
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	e841 2300 	strex	r3, r2, [r1]
 800a660:	613b      	str	r3, [r7, #16]
   return(result);
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1e6      	bne.n	800a636 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a67c:	bf00      	nop
 800a67e:	3754      	adds	r7, #84	@ 0x54
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f7ff fae4 	bl	8009c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6ac:	bf00      	nop
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	e853 3f00 	ldrex	r3, [r3]
 800a6c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6d0:	61fb      	str	r3, [r7, #28]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	61bb      	str	r3, [r7, #24]
 800a6dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	6979      	ldr	r1, [r7, #20]
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	e841 2300 	strex	r3, r2, [r1]
 800a6e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1e6      	bne.n	800a6bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7ff fab0 	bl	8009c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a700:	bf00      	nop
 800a702:	3720      	adds	r7, #32
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b09c      	sub	sp, #112	@ 0x70
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a716:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a720:	2b22      	cmp	r3, #34	@ 0x22
 800a722:	f040 80b9 	bne.w	800a898 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a730:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a734:	b2d9      	uxtb	r1, r3
 800a736:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a740:	400a      	ands	r2, r1
 800a742:	b2d2      	uxtb	r2, r2
 800a744:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a74a:	1c5a      	adds	r2, r3, #1
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a756:	b29b      	uxth	r3, r3
 800a758:	3b01      	subs	r3, #1
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a768:	b29b      	uxth	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f040 809c 	bne.w	800a8a8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a778:	e853 3f00 	ldrex	r3, [r3]
 800a77c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a77e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a784:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a78e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a790:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a792:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a794:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a796:	e841 2300 	strex	r3, r2, [r1]
 800a79a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a79c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1e6      	bne.n	800a770 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ac:	e853 3f00 	ldrex	r3, [r3]
 800a7b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b4:	f023 0301 	bic.w	r3, r3, #1
 800a7b8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3308      	adds	r3, #8
 800a7c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a7c2:	647a      	str	r2, [r7, #68]	@ 0x44
 800a7c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e5      	bne.n	800a7a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d018      	beq.n	800a82a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	623b      	str	r3, [r7, #32]
   return(result);
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a80c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a816:	633b      	str	r3, [r7, #48]	@ 0x30
 800a818:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a81c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e6      	bne.n	800a7f8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d12e      	bne.n	800a890 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	60fb      	str	r3, [r7, #12]
   return(result);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f023 0310 	bic.w	r3, r3, #16
 800a84c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a856:	61fb      	str	r3, [r7, #28]
 800a858:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	69b9      	ldr	r1, [r7, #24]
 800a85c:	69fa      	ldr	r2, [r7, #28]
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	617b      	str	r3, [r7, #20]
   return(result);
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e6      	bne.n	800a838 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	f003 0310 	and.w	r3, r3, #16
 800a874:	2b10      	cmp	r3, #16
 800a876:	d103      	bne.n	800a880 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2210      	movs	r2, #16
 800a87e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff f9fd 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a88e:	e00b      	b.n	800a8a8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7f6 fac7 	bl	8000e24 <HAL_UART_RxCpltCallback>
}
 800a896:	e007      	b.n	800a8a8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	699a      	ldr	r2, [r3, #24]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f042 0208 	orr.w	r2, r2, #8
 800a8a6:	619a      	str	r2, [r3, #24]
}
 800a8a8:	bf00      	nop
 800a8aa:	3770      	adds	r7, #112	@ 0x70
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b09c      	sub	sp, #112	@ 0x70
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8c8:	2b22      	cmp	r3, #34	@ 0x22
 800a8ca:	f040 80b9 	bne.w	800aa40 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a8de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a8e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8f2:	1c9a      	adds	r2, r3, #2
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	3b01      	subs	r3, #1
 800a902:	b29a      	uxth	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a910:	b29b      	uxth	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	f040 809c 	bne.w	800aa50 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a92c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a936:	657b      	str	r3, [r7, #84]	@ 0x54
 800a938:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a93c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e6      	bne.n	800a918 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3308      	adds	r3, #8
 800a950:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95c:	f023 0301 	bic.w	r3, r3, #1
 800a960:	663b      	str	r3, [r7, #96]	@ 0x60
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3308      	adds	r3, #8
 800a968:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a96a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a970:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a972:	e841 2300 	strex	r3, r2, [r1]
 800a976:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1e5      	bne.n	800a94a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2220      	movs	r2, #32
 800a982:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d018      	beq.n	800a9d2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a9b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9c6:	e841 2300 	strex	r3, r2, [r1]
 800a9ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e6      	bne.n	800a9a0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d12e      	bne.n	800aa38 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	e853 3f00 	ldrex	r3, [r3]
 800a9ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	f023 0310 	bic.w	r3, r3, #16
 800a9f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a9fe:	61bb      	str	r3, [r7, #24]
 800aa00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa02:	6979      	ldr	r1, [r7, #20]
 800aa04:	69ba      	ldr	r2, [r7, #24]
 800aa06:	e841 2300 	strex	r3, r2, [r1]
 800aa0a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1e6      	bne.n	800a9e0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b10      	cmp	r3, #16
 800aa1e:	d103      	bne.n	800aa28 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2210      	movs	r2, #16
 800aa26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff f929 	bl	8009c88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa36:	e00b      	b.n	800aa50 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f7f6 f9f3 	bl	8000e24 <HAL_UART_RxCpltCallback>
}
 800aa3e:	e007      	b.n	800aa50 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	699a      	ldr	r2, [r3, #24]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f042 0208 	orr.w	r2, r2, #8
 800aa4e:	619a      	str	r2, [r3, #24]
}
 800aa50:	bf00      	nop
 800aa52:	3770      	adds	r7, #112	@ 0x70
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <LL_GPIO_SetPinMode>:
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b089      	sub	sp, #36	@ 0x24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	fa93 f3a3 	rbit	r3, r3
 800aa72:	613b      	str	r3, [r7, #16]
  return result;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	fab3 f383 	clz	r3, r3
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	2103      	movs	r1, #3
 800aa80:	fa01 f303 	lsl.w	r3, r1, r3
 800aa84:	43db      	mvns	r3, r3
 800aa86:	401a      	ands	r2, r3
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	fa93 f3a3 	rbit	r3, r3
 800aa92:	61bb      	str	r3, [r7, #24]
  return result;
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	fab3 f383 	clz	r3, r3
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	005b      	lsls	r3, r3, #1
 800aa9e:	6879      	ldr	r1, [r7, #4]
 800aaa0:	fa01 f303 	lsl.w	r3, r1, r3
 800aaa4:	431a      	orrs	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	601a      	str	r2, [r3, #0]
}
 800aaaa:	bf00      	nop
 800aaac:	3724      	adds	r7, #36	@ 0x24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <LL_GPIO_SetPinOutputType>:
{
 800aab6:	b480      	push	{r7}
 800aab8:	b085      	sub	sp, #20
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	43db      	mvns	r3, r3
 800aaca:	401a      	ands	r2, r3
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	fb01 f303 	mul.w	r3, r1, r3
 800aad4:	431a      	orrs	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	605a      	str	r2, [r3, #4]
}
 800aada:	bf00      	nop
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <LL_GPIO_SetPinSpeed>:
{
 800aae6:	b480      	push	{r7}
 800aae8:	b089      	sub	sp, #36	@ 0x24
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	60f8      	str	r0, [r7, #12]
 800aaee:	60b9      	str	r1, [r7, #8]
 800aaf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	689a      	ldr	r2, [r3, #8]
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	fa93 f3a3 	rbit	r3, r3
 800ab00:	613b      	str	r3, [r7, #16]
  return result;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	fab3 f383 	clz	r3, r3
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	005b      	lsls	r3, r3, #1
 800ab0c:	2103      	movs	r1, #3
 800ab0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab12:	43db      	mvns	r3, r3
 800ab14:	401a      	ands	r2, r3
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	fa93 f3a3 	rbit	r3, r3
 800ab20:	61bb      	str	r3, [r7, #24]
  return result;
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	fab3 f383 	clz	r3, r3
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	005b      	lsls	r3, r3, #1
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab32:	431a      	orrs	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	609a      	str	r2, [r3, #8]
}
 800ab38:	bf00      	nop
 800ab3a:	3724      	adds	r7, #36	@ 0x24
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <LL_GPIO_SetPinPull>:
{
 800ab44:	b480      	push	{r7}
 800ab46:	b089      	sub	sp, #36	@ 0x24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	68da      	ldr	r2, [r3, #12]
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	fa93 f3a3 	rbit	r3, r3
 800ab5e:	613b      	str	r3, [r7, #16]
  return result;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	fab3 f383 	clz	r3, r3
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	2103      	movs	r1, #3
 800ab6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab70:	43db      	mvns	r3, r3
 800ab72:	401a      	ands	r2, r3
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	fa93 f3a3 	rbit	r3, r3
 800ab7e:	61bb      	str	r3, [r7, #24]
  return result;
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	fab3 f383 	clz	r3, r3
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	005b      	lsls	r3, r3, #1
 800ab8a:	6879      	ldr	r1, [r7, #4]
 800ab8c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab90:	431a      	orrs	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	60da      	str	r2, [r3, #12]
}
 800ab96:	bf00      	nop
 800ab98:	3724      	adds	r7, #36	@ 0x24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <LL_GPIO_SetAFPin_0_7>:
{
 800aba2:	b480      	push	{r7}
 800aba4:	b089      	sub	sp, #36	@ 0x24
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	60f8      	str	r0, [r7, #12]
 800abaa:	60b9      	str	r1, [r7, #8]
 800abac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6a1a      	ldr	r2, [r3, #32]
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	fa93 f3a3 	rbit	r3, r3
 800abbc:	613b      	str	r3, [r7, #16]
  return result;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	fab3 f383 	clz	r3, r3
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	210f      	movs	r1, #15
 800abca:	fa01 f303 	lsl.w	r3, r1, r3
 800abce:	43db      	mvns	r3, r3
 800abd0:	401a      	ands	r2, r3
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	fa93 f3a3 	rbit	r3, r3
 800abdc:	61bb      	str	r3, [r7, #24]
  return result;
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	fab3 f383 	clz	r3, r3
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	6879      	ldr	r1, [r7, #4]
 800abea:	fa01 f303 	lsl.w	r3, r1, r3
 800abee:	431a      	orrs	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	621a      	str	r2, [r3, #32]
}
 800abf4:	bf00      	nop
 800abf6:	3724      	adds	r7, #36	@ 0x24
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <LL_GPIO_SetAFPin_8_15>:
{
 800ac00:	b480      	push	{r7}
 800ac02:	b089      	sub	sp, #36	@ 0x24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	0a1b      	lsrs	r3, r3, #8
 800ac14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	fa93 f3a3 	rbit	r3, r3
 800ac1c:	613b      	str	r3, [r7, #16]
  return result;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	fab3 f383 	clz	r3, r3
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	210f      	movs	r1, #15
 800ac2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac2e:	43db      	mvns	r3, r3
 800ac30:	401a      	ands	r2, r3
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	0a1b      	lsrs	r3, r3, #8
 800ac36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	fa93 f3a3 	rbit	r3, r3
 800ac3e:	61bb      	str	r3, [r7, #24]
  return result;
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	fab3 f383 	clz	r3, r3
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	6879      	ldr	r1, [r7, #4]
 800ac4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac50:	431a      	orrs	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ac56:	bf00      	nop
 800ac58:	3724      	adds	r7, #36	@ 0x24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b088      	sub	sp, #32
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800ac70:	2300      	movs	r3, #0
 800ac72:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	fa93 f3a3 	rbit	r3, r3
 800ac80:	613b      	str	r3, [r7, #16]
  return result;
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	fab3 f383 	clz	r3, r3
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ac8c:	e051      	b.n	800ad32 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	2101      	movs	r1, #1
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	fa01 f303 	lsl.w	r3, r1, r3
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d043      	beq.n	800ad2c <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d003      	beq.n	800acb4 <LL_GPIO_Init+0x52>
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d10e      	bne.n	800acd2 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	461a      	mov	r2, r3
 800acba:	69b9      	ldr	r1, [r7, #24]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff ff12 	bl	800aae6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	6819      	ldr	r1, [r3, #0]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	461a      	mov	r2, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7ff fef2 	bl	800aab6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	461a      	mov	r2, r3
 800acd8:	69b9      	ldr	r1, [r7, #24]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7ff ff32 	bl	800ab44 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d11a      	bne.n	800ad1e <LL_GPIO_Init+0xbc>
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	fa93 f3a3 	rbit	r3, r3
 800acf2:	60bb      	str	r3, [r7, #8]
  return result;
 800acf4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800acf6:	fab3 f383 	clz	r3, r3
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	2b07      	cmp	r3, #7
 800acfe:	d807      	bhi.n	800ad10 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	695b      	ldr	r3, [r3, #20]
 800ad04:	461a      	mov	r2, r3
 800ad06:	69b9      	ldr	r1, [r7, #24]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7ff ff4a 	bl	800aba2 <LL_GPIO_SetAFPin_0_7>
 800ad0e:	e006      	b.n	800ad1e <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	695b      	ldr	r3, [r3, #20]
 800ad14:	461a      	mov	r2, r3
 800ad16:	69b9      	ldr	r1, [r7, #24]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7ff ff71 	bl	800ac00 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	461a      	mov	r2, r3
 800ad24:	69b9      	ldr	r1, [r7, #24]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7ff fe96 	bl	800aa58 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1a6      	bne.n	800ac8e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3720      	adds	r7, #32
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800ad50:	4b06      	ldr	r3, [pc, #24]	@ (800ad6c <LL_RCC_HSI_IsReady+0x20>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0302 	and.w	r3, r3, #2
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	bf0c      	ite	eq
 800ad5c:	2301      	moveq	r3, #1
 800ad5e:	2300      	movne	r3, #0
 800ad60:	b2db      	uxtb	r3, r3
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	40023800 	.word	0x40023800

0800ad70 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800ad70:	b480      	push	{r7}
 800ad72:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800ad74:	4b06      	ldr	r3, [pc, #24]	@ (800ad90 <LL_RCC_LSE_IsReady+0x20>)
 800ad76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad78:	f003 0302 	and.w	r3, r3, #2
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	bf0c      	ite	eq
 800ad80:	2301      	moveq	r3, #1
 800ad82:	2300      	movne	r3, #0
 800ad84:	b2db      	uxtb	r3, r3
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	40023800 	.word	0x40023800

0800ad94 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800ad94:	b480      	push	{r7}
 800ad96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ad98:	4b04      	ldr	r3, [pc, #16]	@ (800adac <LL_RCC_GetSysClkSource+0x18>)
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	f003 030c 	and.w	r3, r3, #12
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	40023800 	.word	0x40023800

0800adb0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800adb0:	b480      	push	{r7}
 800adb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800adb4:	4b04      	ldr	r3, [pc, #16]	@ (800adc8 <LL_RCC_GetAHBPrescaler+0x18>)
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	40023800 	.word	0x40023800

0800adcc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800adcc:	b480      	push	{r7}
 800adce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800add0:	4b04      	ldr	r3, [pc, #16]	@ (800ade4 <LL_RCC_GetAPB1Prescaler+0x18>)
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800add8:	4618      	mov	r0, r3
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	40023800 	.word	0x40023800

0800ade8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800ade8:	b480      	push	{r7}
 800adea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800adec:	4b04      	ldr	r3, [pc, #16]	@ (800ae00 <LL_RCC_GetAPB2Prescaler+0x18>)
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	40023800 	.word	0x40023800

0800ae04 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 800ae0c:	4b06      	ldr	r3, [pc, #24]	@ (800ae28 <LL_RCC_GetUSARTClockSource+0x24>)
 800ae0e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	401a      	ands	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	041b      	lsls	r3, r3, #16
 800ae1a:	4313      	orrs	r3, r2
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr
 800ae28:	40023800 	.word	0x40023800

0800ae2c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 800ae34:	4b06      	ldr	r3, [pc, #24]	@ (800ae50 <LL_RCC_GetUARTClockSource+0x24>)
 800ae36:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	401a      	ands	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	041b      	lsls	r3, r3, #16
 800ae42:	4313      	orrs	r3, r2
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	40023800 	.word	0x40023800

0800ae54 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ae54:	b480      	push	{r7}
 800ae56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ae58:	4b04      	ldr	r3, [pc, #16]	@ (800ae6c <LL_RCC_PLL_GetMainSource+0x18>)
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	40023800 	.word	0x40023800

0800ae70 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800ae70:	b480      	push	{r7}
 800ae72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800ae74:	4b04      	ldr	r3, [pc, #16]	@ (800ae88 <LL_RCC_PLL_GetN+0x18>)
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	099b      	lsrs	r3, r3, #6
 800ae7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	40023800 	.word	0x40023800

0800ae8c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800ae90:	4b04      	ldr	r3, [pc, #16]	@ (800aea4 <LL_RCC_PLL_GetP+0x18>)
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	40023800 	.word	0x40023800

0800aea8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800aeac:	4b04      	ldr	r3, [pc, #16]	@ (800aec0 <LL_RCC_PLL_GetDivider+0x18>)
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	40023800 	.word	0x40023800

0800aec4 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800aecc:	2300      	movs	r3, #0
 800aece:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b03      	cmp	r3, #3
 800aed4:	d133      	bne.n	800af3e <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7ff ff94 	bl	800ae04 <LL_RCC_GetUSARTClockSource>
 800aedc:	4603      	mov	r3, r0
 800aede:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800aee2:	d016      	beq.n	800af12 <LL_RCC_GetUSARTClockFreq+0x4e>
 800aee4:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 800aee8:	d81d      	bhi.n	800af26 <LL_RCC_GetUSARTClockFreq+0x62>
 800aeea:	4a70      	ldr	r2, [pc, #448]	@ (800b0ac <LL_RCC_GetUSARTClockFreq+0x1e8>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d003      	beq.n	800aef8 <LL_RCC_GetUSARTClockFreq+0x34>
 800aef0:	4a6f      	ldr	r2, [pc, #444]	@ (800b0b0 <LL_RCC_GetUSARTClockFreq+0x1ec>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d004      	beq.n	800af00 <LL_RCC_GetUSARTClockFreq+0x3c>
 800aef6:	e016      	b.n	800af26 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800aef8:	f000 f9f2 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800aefc:	60f8      	str	r0, [r7, #12]
        break;
 800aefe:	e0cf      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800af00:	f7ff ff24 	bl	800ad4c <LL_RCC_HSI_IsReady>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	f000 80bb 	beq.w	800b082 <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 800af0c:	4b69      	ldr	r3, [pc, #420]	@ (800b0b4 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800af0e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800af10:	e0b7      	b.n	800b082 <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800af12:	f7ff ff2d 	bl	800ad70 <LL_RCC_LSE_IsReady>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 80b4 	beq.w	800b086 <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 800af1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af22:	60fb      	str	r3, [r7, #12]
        }
        break;
 800af24:	e0af      	b.n	800b086 <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800af26:	f000 f9db 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800af2a:	4603      	mov	r3, r0
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 f9ff 	bl	800b330 <RCC_GetHCLKClockFreq>
 800af32:	4603      	mov	r3, r0
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fa25 	bl	800b384 <RCC_GetPCLK2ClockFreq>
 800af3a:	60f8      	str	r0, [r7, #12]
        break;
 800af3c:	e0b0      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b0c      	cmp	r3, #12
 800af42:	d133      	bne.n	800afac <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7ff ff5d 	bl	800ae04 <LL_RCC_GetUSARTClockSource>
 800af4a:	4603      	mov	r3, r0
 800af4c:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 800af50:	d016      	beq.n	800af80 <LL_RCC_GetUSARTClockFreq+0xbc>
 800af52:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 800af56:	d81d      	bhi.n	800af94 <LL_RCC_GetUSARTClockFreq+0xd0>
 800af58:	4a57      	ldr	r2, [pc, #348]	@ (800b0b8 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d003      	beq.n	800af66 <LL_RCC_GetUSARTClockFreq+0xa2>
 800af5e:	4a57      	ldr	r2, [pc, #348]	@ (800b0bc <LL_RCC_GetUSARTClockFreq+0x1f8>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d004      	beq.n	800af6e <LL_RCC_GetUSARTClockFreq+0xaa>
 800af64:	e016      	b.n	800af94 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800af66:	f000 f9bb 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800af6a:	60f8      	str	r0, [r7, #12]
        break;
 800af6c:	e098      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800af6e:	f7ff feed 	bl	800ad4c <LL_RCC_HSI_IsReady>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	f000 8088 	beq.w	800b08a <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 800af7a:	4b4e      	ldr	r3, [pc, #312]	@ (800b0b4 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800af7c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800af7e:	e084      	b.n	800b08a <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800af80:	f7ff fef6 	bl	800ad70 <LL_RCC_LSE_IsReady>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 8081 	beq.w	800b08e <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 800af8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af90:	60fb      	str	r3, [r7, #12]
        }
        break;
 800af92:	e07c      	b.n	800b08e <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800af94:	f000 f9a4 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800af98:	4603      	mov	r3, r0
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f9c8 	bl	800b330 <RCC_GetHCLKClockFreq>
 800afa0:	4603      	mov	r3, r0
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 f9da 	bl	800b35c <RCC_GetPCLK1ClockFreq>
 800afa8:	60f8      	str	r0, [r7, #12]
        break;
 800afaa:	e079      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800afb2:	d131      	bne.n	800b018 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7ff ff25 	bl	800ae04 <LL_RCC_GetUSARTClockSource>
 800afba:	4603      	mov	r3, r0
 800afbc:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 800afc0:	d015      	beq.n	800afee <LL_RCC_GetUSARTClockFreq+0x12a>
 800afc2:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 800afc6:	d81b      	bhi.n	800b000 <LL_RCC_GetUSARTClockFreq+0x13c>
 800afc8:	4a3d      	ldr	r2, [pc, #244]	@ (800b0c0 <LL_RCC_GetUSARTClockFreq+0x1fc>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d003      	beq.n	800afd6 <LL_RCC_GetUSARTClockFreq+0x112>
 800afce:	4a3d      	ldr	r2, [pc, #244]	@ (800b0c4 <LL_RCC_GetUSARTClockFreq+0x200>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d004      	beq.n	800afde <LL_RCC_GetUSARTClockFreq+0x11a>
 800afd4:	e014      	b.n	800b000 <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800afd6:	f000 f983 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800afda:	60f8      	str	r0, [r7, #12]
        break;
 800afdc:	e060      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800afde:	f7ff feb5 	bl	800ad4c <LL_RCC_HSI_IsReady>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d054      	beq.n	800b092 <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 800afe8:	4b32      	ldr	r3, [pc, #200]	@ (800b0b4 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800afea:	60fb      	str	r3, [r7, #12]
        }
        break;
 800afec:	e051      	b.n	800b092 <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800afee:	f7ff febf 	bl	800ad70 <LL_RCC_LSE_IsReady>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d04e      	beq.n	800b096 <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 800aff8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800affc:	60fb      	str	r3, [r7, #12]
        }
        break;
 800affe:	e04a      	b.n	800b096 <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b000:	f000 f96e 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800b004:	4603      	mov	r3, r0
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f992 	bl	800b330 <RCC_GetHCLKClockFreq>
 800b00c:	4603      	mov	r3, r0
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 f9b8 	bl	800b384 <RCC_GetPCLK2ClockFreq>
 800b014:	60f8      	str	r0, [r7, #12]
        break;
 800b016:	e043      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b30      	cmp	r3, #48	@ 0x30
 800b01c:	d140      	bne.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7ff fef0 	bl	800ae04 <LL_RCC_GetUSARTClockSource>
 800b024:	4603      	mov	r3, r0
 800b026:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800b02a:	d015      	beq.n	800b058 <LL_RCC_GetUSARTClockFreq+0x194>
 800b02c:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800b030:	d81b      	bhi.n	800b06a <LL_RCC_GetUSARTClockFreq+0x1a6>
 800b032:	4a25      	ldr	r2, [pc, #148]	@ (800b0c8 <LL_RCC_GetUSARTClockFreq+0x204>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d003      	beq.n	800b040 <LL_RCC_GetUSARTClockFreq+0x17c>
 800b038:	4a24      	ldr	r2, [pc, #144]	@ (800b0cc <LL_RCC_GetUSARTClockFreq+0x208>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d004      	beq.n	800b048 <LL_RCC_GetUSARTClockFreq+0x184>
 800b03e:	e014      	b.n	800b06a <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800b040:	f000 f94e 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800b044:	60f8      	str	r0, [r7, #12]
          break;
 800b046:	e02b      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 800b048:	f7ff fe80 	bl	800ad4c <LL_RCC_HSI_IsReady>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d023      	beq.n	800b09a <LL_RCC_GetUSARTClockFreq+0x1d6>
          {
            usart_frequency = HSI_VALUE;
 800b052:	4b18      	ldr	r3, [pc, #96]	@ (800b0b4 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 800b054:	60fb      	str	r3, [r7, #12]
          }
          break;
 800b056:	e020      	b.n	800b09a <LL_RCC_GetUSARTClockFreq+0x1d6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 800b058:	f7ff fe8a 	bl	800ad70 <LL_RCC_LSE_IsReady>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d01d      	beq.n	800b09e <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = LSE_VALUE;
 800b062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b066:	60fb      	str	r3, [r7, #12]
          }
          break;
 800b068:	e019      	b.n	800b09e <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b06a:	f000 f939 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800b06e:	4603      	mov	r3, r0
 800b070:	4618      	mov	r0, r3
 800b072:	f000 f95d 	bl	800b330 <RCC_GetHCLKClockFreq>
 800b076:	4603      	mov	r3, r0
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 f96f 	bl	800b35c <RCC_GetPCLK1ClockFreq>
 800b07e:	60f8      	str	r0, [r7, #12]
          break;
 800b080:	e00e      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800b082:	bf00      	nop
 800b084:	e00c      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800b086:	bf00      	nop
 800b088:	e00a      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800b08a:	bf00      	nop
 800b08c:	e008      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800b08e:	bf00      	nop
 800b090:	e006      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800b092:	bf00      	nop
 800b094:	e004      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 800b096:	bf00      	nop
 800b098:	e002      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 800b09a:	bf00      	nop
 800b09c:	e000      	b.n	800b0a0 <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 800b09e:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	00030001 	.word	0x00030001
 800b0b0:	00030002 	.word	0x00030002
 800b0b4:	00f42400 	.word	0x00f42400
 800b0b8:	000c0004 	.word	0x000c0004
 800b0bc:	000c0008 	.word	0x000c0008
 800b0c0:	0c000400 	.word	0x0c000400
 800b0c4:	0c000800 	.word	0x0c000800
 800b0c8:	00300010 	.word	0x00300010
 800b0cc:	00300020 	.word	0x00300020

0800b0d0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2bc0      	cmp	r3, #192	@ 0xc0
 800b0e0:	d133      	bne.n	800b14a <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7ff fea2 	bl	800ae2c <LL_RCC_GetUARTClockSource>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800b0ee:	d016      	beq.n	800b11e <LL_RCC_GetUARTClockFreq+0x4e>
 800b0f0:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800b0f4:	d81d      	bhi.n	800b132 <LL_RCC_GetUARTClockFreq+0x62>
 800b0f6:	4a71      	ldr	r2, [pc, #452]	@ (800b2bc <LL_RCC_GetUARTClockFreq+0x1ec>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d003      	beq.n	800b104 <LL_RCC_GetUARTClockFreq+0x34>
 800b0fc:	4a70      	ldr	r2, [pc, #448]	@ (800b2c0 <LL_RCC_GetUARTClockFreq+0x1f0>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d004      	beq.n	800b10c <LL_RCC_GetUARTClockFreq+0x3c>
 800b102:	e016      	b.n	800b132 <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800b104:	f000 f8ec 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800b108:	60f8      	str	r0, [r7, #12]
        break;
 800b10a:	e0d1      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800b10c:	f7ff fe1e 	bl	800ad4c <LL_RCC_HSI_IsReady>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 80bd 	beq.w	800b292 <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 800b118:	4b6a      	ldr	r3, [pc, #424]	@ (800b2c4 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800b11a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b11c:	e0b9      	b.n	800b292 <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800b11e:	f7ff fe27 	bl	800ad70 <LL_RCC_LSE_IsReady>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	f000 80b6 	beq.w	800b296 <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 800b12a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b12e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b130:	e0b1      	b.n	800b296 <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b132:	f000 f8d5 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800b136:	4603      	mov	r3, r0
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 f8f9 	bl	800b330 <RCC_GetHCLKClockFreq>
 800b13e:	4603      	mov	r3, r0
 800b140:	4618      	mov	r0, r3
 800b142:	f000 f90b 	bl	800b35c <RCC_GetPCLK1ClockFreq>
 800b146:	60f8      	str	r0, [r7, #12]
        break;
 800b148:	e0b2      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b150:	d133      	bne.n	800b1ba <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7ff fe6a 	bl	800ae2c <LL_RCC_GetUARTClockSource>
 800b158:	4603      	mov	r3, r0
 800b15a:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800b15e:	d016      	beq.n	800b18e <LL_RCC_GetUARTClockFreq+0xbe>
 800b160:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 800b164:	d81d      	bhi.n	800b1a2 <LL_RCC_GetUARTClockFreq+0xd2>
 800b166:	4a58      	ldr	r2, [pc, #352]	@ (800b2c8 <LL_RCC_GetUARTClockFreq+0x1f8>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d003      	beq.n	800b174 <LL_RCC_GetUARTClockFreq+0xa4>
 800b16c:	4a57      	ldr	r2, [pc, #348]	@ (800b2cc <LL_RCC_GetUARTClockFreq+0x1fc>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d004      	beq.n	800b17c <LL_RCC_GetUARTClockFreq+0xac>
 800b172:	e016      	b.n	800b1a2 <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800b174:	f000 f8b4 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800b178:	60f8      	str	r0, [r7, #12]
        break;
 800b17a:	e099      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800b17c:	f7ff fde6 	bl	800ad4c <LL_RCC_HSI_IsReady>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	f000 8089 	beq.w	800b29a <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 800b188:	4b4e      	ldr	r3, [pc, #312]	@ (800b2c4 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800b18a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b18c:	e085      	b.n	800b29a <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800b18e:	f7ff fdef 	bl	800ad70 <LL_RCC_LSE_IsReady>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 8082 	beq.w	800b29e <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 800b19a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b19e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b1a0:	e07d      	b.n	800b29e <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b1a2:	f000 f89d 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f000 f8c1 	bl	800b330 <RCC_GetHCLKClockFreq>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 f8d3 	bl	800b35c <RCC_GetPCLK1ClockFreq>
 800b1b6:	60f8      	str	r0, [r7, #12]
        break;
 800b1b8:	e07a      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b1c0:	d131      	bne.n	800b226 <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff fe32 	bl	800ae2c <LL_RCC_GetUARTClockSource>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 800b1ce:	d015      	beq.n	800b1fc <LL_RCC_GetUARTClockFreq+0x12c>
 800b1d0:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 800b1d4:	d81b      	bhi.n	800b20e <LL_RCC_GetUARTClockFreq+0x13e>
 800b1d6:	4a3e      	ldr	r2, [pc, #248]	@ (800b2d0 <LL_RCC_GetUARTClockFreq+0x200>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d003      	beq.n	800b1e4 <LL_RCC_GetUARTClockFreq+0x114>
 800b1dc:	4a3d      	ldr	r2, [pc, #244]	@ (800b2d4 <LL_RCC_GetUARTClockFreq+0x204>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d004      	beq.n	800b1ec <LL_RCC_GetUARTClockFreq+0x11c>
 800b1e2:	e014      	b.n	800b20e <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800b1e4:	f000 f87c 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800b1e8:	60f8      	str	r0, [r7, #12]
        break;
 800b1ea:	e061      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800b1ec:	f7ff fdae 	bl	800ad4c <LL_RCC_HSI_IsReady>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d055      	beq.n	800b2a2 <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 800b1f6:	4b33      	ldr	r3, [pc, #204]	@ (800b2c4 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800b1f8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b1fa:	e052      	b.n	800b2a2 <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800b1fc:	f7ff fdb8 	bl	800ad70 <LL_RCC_LSE_IsReady>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d04f      	beq.n	800b2a6 <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 800b206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b20a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800b20c:	e04b      	b.n	800b2a6 <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b20e:	f000 f867 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800b212:	4603      	mov	r3, r0
 800b214:	4618      	mov	r0, r3
 800b216:	f000 f88b 	bl	800b330 <RCC_GetHCLKClockFreq>
 800b21a:	4603      	mov	r3, r0
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 f89d 	bl	800b35c <RCC_GetPCLK1ClockFreq>
 800b222:	60f8      	str	r0, [r7, #12]
        break;
 800b224:	e044      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b22c:	d140      	bne.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7ff fdfc 	bl	800ae2c <LL_RCC_GetUARTClockSource>
 800b234:	4603      	mov	r3, r0
 800b236:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 800b23a:	d015      	beq.n	800b268 <LL_RCC_GetUARTClockFreq+0x198>
 800b23c:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 800b240:	d81b      	bhi.n	800b27a <LL_RCC_GetUARTClockFreq+0x1aa>
 800b242:	4a25      	ldr	r2, [pc, #148]	@ (800b2d8 <LL_RCC_GetUARTClockFreq+0x208>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d003      	beq.n	800b250 <LL_RCC_GetUARTClockFreq+0x180>
 800b248:	4a24      	ldr	r2, [pc, #144]	@ (800b2dc <LL_RCC_GetUARTClockFreq+0x20c>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d004      	beq.n	800b258 <LL_RCC_GetUARTClockFreq+0x188>
 800b24e:	e014      	b.n	800b27a <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 800b250:	f000 f846 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800b254:	60f8      	str	r0, [r7, #12]
          break;
 800b256:	e02b      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 800b258:	f7ff fd78 	bl	800ad4c <LL_RCC_HSI_IsReady>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d023      	beq.n	800b2aa <LL_RCC_GetUARTClockFreq+0x1da>
          {
            uart_frequency = HSI_VALUE;
 800b262:	4b18      	ldr	r3, [pc, #96]	@ (800b2c4 <LL_RCC_GetUARTClockFreq+0x1f4>)
 800b264:	60fb      	str	r3, [r7, #12]
          }
          break;
 800b266:	e020      	b.n	800b2aa <LL_RCC_GetUARTClockFreq+0x1da>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 800b268:	f7ff fd82 	bl	800ad70 <LL_RCC_LSE_IsReady>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d01d      	beq.n	800b2ae <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = LSE_VALUE;
 800b272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b276:	60fb      	str	r3, [r7, #12]
          }
          break;
 800b278:	e019      	b.n	800b2ae <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800b27a:	f000 f831 	bl	800b2e0 <RCC_GetSystemClockFreq>
 800b27e:	4603      	mov	r3, r0
 800b280:	4618      	mov	r0, r3
 800b282:	f000 f855 	bl	800b330 <RCC_GetHCLKClockFreq>
 800b286:	4603      	mov	r3, r0
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 f867 	bl	800b35c <RCC_GetPCLK1ClockFreq>
 800b28e:	60f8      	str	r0, [r7, #12]
          break;
 800b290:	e00e      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800b292:	bf00      	nop
 800b294:	e00c      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800b296:	bf00      	nop
 800b298:	e00a      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800b29a:	bf00      	nop
 800b29c:	e008      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800b29e:	bf00      	nop
 800b2a0:	e006      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800b2a2:	bf00      	nop
 800b2a4:	e004      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 800b2a6:	bf00      	nop
 800b2a8:	e002      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 800b2aa:	bf00      	nop
 800b2ac:	e000      	b.n	800b2b0 <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 800b2ae:	bf00      	nop
      }
    }
  }
  return uart_frequency;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	00c00040 	.word	0x00c00040
 800b2c0:	00c00080 	.word	0x00c00080
 800b2c4:	00f42400 	.word	0x00f42400
 800b2c8:	03000100 	.word	0x03000100
 800b2cc:	03000200 	.word	0x03000200
 800b2d0:	30001000 	.word	0x30001000
 800b2d4:	30002000 	.word	0x30002000
 800b2d8:	c0004000 	.word	0xc0004000
 800b2dc:	c0008000 	.word	0xc0008000

0800b2e0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b2ea:	f7ff fd53 	bl	800ad94 <LL_RCC_GetSysClkSource>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b08      	cmp	r3, #8
 800b2f2:	d00c      	beq.n	800b30e <RCC_GetSystemClockFreq+0x2e>
 800b2f4:	2b08      	cmp	r3, #8
 800b2f6:	d80e      	bhi.n	800b316 <RCC_GetSystemClockFreq+0x36>
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <RCC_GetSystemClockFreq+0x22>
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	d003      	beq.n	800b308 <RCC_GetSystemClockFreq+0x28>
 800b300:	e009      	b.n	800b316 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b302:	4b09      	ldr	r3, [pc, #36]	@ (800b328 <RCC_GetSystemClockFreq+0x48>)
 800b304:	607b      	str	r3, [r7, #4]
      break;
 800b306:	e009      	b.n	800b31c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b308:	4b08      	ldr	r3, [pc, #32]	@ (800b32c <RCC_GetSystemClockFreq+0x4c>)
 800b30a:	607b      	str	r3, [r7, #4]
      break;
 800b30c:	e006      	b.n	800b31c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800b30e:	f000 f84d 	bl	800b3ac <RCC_PLL_GetFreqDomain_SYS>
 800b312:	6078      	str	r0, [r7, #4]
      break;
 800b314:	e002      	b.n	800b31c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800b316:	4b04      	ldr	r3, [pc, #16]	@ (800b328 <RCC_GetSystemClockFreq+0x48>)
 800b318:	607b      	str	r3, [r7, #4]
      break;
 800b31a:	bf00      	nop
  }

  return frequency;
 800b31c:	687b      	ldr	r3, [r7, #4]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	00f42400 	.word	0x00f42400
 800b32c:	017d7840 	.word	0x017d7840

0800b330 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b338:	f7ff fd3a 	bl	800adb0 <LL_RCC_GetAHBPrescaler>
 800b33c:	4603      	mov	r3, r0
 800b33e:	091b      	lsrs	r3, r3, #4
 800b340:	f003 030f 	and.w	r3, r3, #15
 800b344:	4a04      	ldr	r2, [pc, #16]	@ (800b358 <RCC_GetHCLKClockFreq+0x28>)
 800b346:	5cd3      	ldrb	r3, [r2, r3]
 800b348:	461a      	mov	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	40d3      	lsrs	r3, r2
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	0800ddd8 	.word	0x0800ddd8

0800b35c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800b364:	f7ff fd32 	bl	800adcc <LL_RCC_GetAPB1Prescaler>
 800b368:	4603      	mov	r3, r0
 800b36a:	0a9b      	lsrs	r3, r3, #10
 800b36c:	4a04      	ldr	r2, [pc, #16]	@ (800b380 <RCC_GetPCLK1ClockFreq+0x24>)
 800b36e:	5cd3      	ldrb	r3, [r2, r3]
 800b370:	461a      	mov	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	40d3      	lsrs	r3, r2
}
 800b376:	4618      	mov	r0, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	0800dde8 	.word	0x0800dde8

0800b384 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800b38c:	f7ff fd2c 	bl	800ade8 <LL_RCC_GetAPB2Prescaler>
 800b390:	4603      	mov	r3, r0
 800b392:	0b5b      	lsrs	r3, r3, #13
 800b394:	4a04      	ldr	r2, [pc, #16]	@ (800b3a8 <RCC_GetPCLK2ClockFreq+0x24>)
 800b396:	5cd3      	ldrb	r3, [r2, r3]
 800b398:	461a      	mov	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	40d3      	lsrs	r3, r2
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	0800dde8 	.word	0x0800dde8

0800b3ac <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800b3ac:	b590      	push	{r4, r7, lr}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	607b      	str	r3, [r7, #4]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800b3ba:	f7ff fd4b 	bl	800ae54 <LL_RCC_PLL_GetMainSource>
 800b3be:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d004      	beq.n	800b3d0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3cc:	d003      	beq.n	800b3d6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800b3ce:	e005      	b.n	800b3dc <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800b3d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b410 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800b3d2:	607b      	str	r3, [r7, #4]
      break;
 800b3d4:	e005      	b.n	800b3e2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800b3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800b414 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800b3d8:	607b      	str	r3, [r7, #4]
      break;
 800b3da:	e002      	b.n	800b3e2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 800b3dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b410 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800b3de:	607b      	str	r3, [r7, #4]
      break;
 800b3e0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800b3e2:	f7ff fd61 	bl	800aea8 <LL_RCC_PLL_GetDivider>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	fbb3 f4f2 	udiv	r4, r3, r2
 800b3ee:	f7ff fd3f 	bl	800ae70 <LL_RCC_PLL_GetN>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	fb03 f404 	mul.w	r4, r3, r4
 800b3f8:	f7ff fd48 	bl	800ae8c <LL_RCC_PLL_GetP>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	0c1b      	lsrs	r3, r3, #16
 800b400:	3301      	adds	r3, #1
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd90      	pop	{r4, r7, pc}
 800b410:	00f42400 	.word	0x00f42400
 800b414:	017d7840 	.word	0x017d7840

0800b418 <LL_SPI_IsEnabled>:
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b428:	2b40      	cmp	r3, #64	@ 0x40
 800b42a:	d101      	bne.n	800b430 <LL_SPI_IsEnabled+0x18>
 800b42c:	2301      	movs	r3, #1
 800b42e:	e000      	b.n	800b432 <LL_SPI_IsEnabled+0x1a>
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	370c      	adds	r7, #12
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr

0800b43e <LL_SPI_SetRxFIFOThreshold>:
{
 800b43e:	b480      	push	{r7}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	431a      	orrs	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	605a      	str	r2, [r3, #4]
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <LL_SPI_SetCRCPolynomial>:
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	b29b      	uxth	r3, r3
 800b472:	461a      	mov	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	611a      	str	r2, [r3, #16]
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff ffc0 	bl	800b418 <LL_SPI_IsEnabled>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d141      	bne.n	800b522 <LL_SPI_Init+0x9e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	4b25      	ldr	r3, [pc, #148]	@ (800b538 <LL_SPI_Init+0xb4>)
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	6811      	ldr	r1, [r2, #0]
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	6852      	ldr	r2, [r2, #4]
 800b4ae:	4311      	orrs	r1, r2
 800b4b0:	683a      	ldr	r2, [r7, #0]
 800b4b2:	68d2      	ldr	r2, [r2, #12]
 800b4b4:	4311      	orrs	r1, r2
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	6912      	ldr	r2, [r2, #16]
 800b4ba:	4311      	orrs	r1, r2
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	6952      	ldr	r2, [r2, #20]
 800b4c0:	4311      	orrs	r1, r2
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	6992      	ldr	r2, [r2, #24]
 800b4c6:	4311      	orrs	r1, r2
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	69d2      	ldr	r2, [r2, #28]
 800b4cc:	4311      	orrs	r1, r2
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	6a12      	ldr	r2, [r2, #32]
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	431a      	orrs	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	4b17      	ldr	r3, [pc, #92]	@ (800b53c <LL_SPI_Init+0xb8>)
 800b4e0:	4013      	ands	r3, r2
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	6891      	ldr	r1, [r2, #8]
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	6952      	ldr	r2, [r2, #20]
 800b4ea:	0c12      	lsrs	r2, r2, #16
 800b4ec:	430a      	orrs	r2, r1
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4fc:	d204      	bcs.n	800b508 <LL_SPI_Init+0x84>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800b4fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f7ff ff9b 	bl	800b43e <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	6a1b      	ldr	r3, [r3, #32]
 800b50c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b510:	d105      	bne.n	800b51e <LL_SPI_Init+0x9a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b516:	4619      	mov	r1, r3
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff ffa3 	bl	800b464 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800b51e:	2300      	movs	r3, #0
 800b520:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	61da      	str	r2, [r3, #28]
  return status;
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	ffff0040 	.word	0xffff0040
 800b53c:	fffff0fb 	.word	0xfffff0fb

0800b540 <LL_USART_IsEnabled>:
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	2b01      	cmp	r3, #1
 800b552:	d101      	bne.n	800b558 <LL_USART_IsEnabled+0x18>
 800b554:	2301      	movs	r3, #1
 800b556:	e000      	b.n	800b55a <LL_USART_IsEnabled+0x1a>
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <LL_USART_SetStopBitsLength>:
{
 800b566:	b480      	push	{r7}
 800b568:	b083      	sub	sp, #12
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	431a      	orrs	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	605a      	str	r2, [r3, #4]
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <LL_USART_SetHWFlowCtrl>:
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	431a      	orrs	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	609a      	str	r2, [r3, #8]
}
 800b5a6:	bf00      	nop
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <LL_USART_SetBaudRate>:
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b087      	sub	sp, #28
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	60f8      	str	r0, [r7, #12]
 800b5ba:	60b9      	str	r1, [r7, #8]
 800b5bc:	607a      	str	r2, [r7, #4]
 800b5be:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b5c6:	d11a      	bne.n	800b5fe <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	005a      	lsls	r2, r3, #1
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	085b      	lsrs	r3, r3, #1
 800b5d0:	441a      	add	r2, r3
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	085b      	lsrs	r3, r3, #1
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	f003 0307 	and.w	r3, r3, #7
 800b5f0:	693a      	ldr	r2, [r7, #16]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	60da      	str	r2, [r3, #12]
}
 800b5fc:	e00a      	b.n	800b614 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	085a      	lsrs	r2, r3, #1
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	441a      	add	r2, r3
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	fbb2 f3f3 	udiv	r3, r2, r3
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	461a      	mov	r2, r3
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	60da      	str	r2, [r3, #12]
}
 800b614:	bf00      	nop
 800b616:	371c      	adds	r7, #28
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800b62e:	2300      	movs	r3, #0
 800b630:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7ff ff84 	bl	800b540 <LL_USART_IsEnabled>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d179      	bne.n	800b732 <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	4b3e      	ldr	r3, [pc, #248]	@ (800b73c <LL_USART_Init+0x11c>)
 800b644:	4013      	ands	r3, r2
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	6851      	ldr	r1, [r2, #4]
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	68d2      	ldr	r2, [r2, #12]
 800b64e:	4311      	orrs	r1, r2
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	6912      	ldr	r2, [r2, #16]
 800b654:	4311      	orrs	r1, r2
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	6992      	ldr	r2, [r2, #24]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	431a      	orrs	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	4619      	mov	r1, r3
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7ff ff7c 	bl	800b566 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	4619      	mov	r1, r3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff ff89 	bl	800b58c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a30      	ldr	r2, [pc, #192]	@ (800b740 <LL_USART_Init+0x120>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d104      	bne.n	800b68c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800b682:	2003      	movs	r0, #3
 800b684:	f7ff fc1e 	bl	800aec4 <LL_RCC_GetUSARTClockFreq>
 800b688:	60b8      	str	r0, [r7, #8]
 800b68a:	e041      	b.n	800b710 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a2d      	ldr	r2, [pc, #180]	@ (800b744 <LL_USART_Init+0x124>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d104      	bne.n	800b69e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800b694:	200c      	movs	r0, #12
 800b696:	f7ff fc15 	bl	800aec4 <LL_RCC_GetUSARTClockFreq>
 800b69a:	60b8      	str	r0, [r7, #8]
 800b69c:	e038      	b.n	800b710 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a29      	ldr	r2, [pc, #164]	@ (800b748 <LL_USART_Init+0x128>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d104      	bne.n	800b6b0 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800b6a6:	2030      	movs	r0, #48	@ 0x30
 800b6a8:	f7ff fc0c 	bl	800aec4 <LL_RCC_GetUSARTClockFreq>
 800b6ac:	60b8      	str	r0, [r7, #8]
 800b6ae:	e02f      	b.n	800b710 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a26      	ldr	r2, [pc, #152]	@ (800b74c <LL_USART_Init+0x12c>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d104      	bne.n	800b6c2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800b6b8:	20c0      	movs	r0, #192	@ 0xc0
 800b6ba:	f7ff fd09 	bl	800b0d0 <LL_RCC_GetUARTClockFreq>
 800b6be:	60b8      	str	r0, [r7, #8]
 800b6c0:	e026      	b.n	800b710 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a22      	ldr	r2, [pc, #136]	@ (800b750 <LL_USART_Init+0x130>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d105      	bne.n	800b6d6 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800b6ca:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800b6ce:	f7ff fcff 	bl	800b0d0 <LL_RCC_GetUARTClockFreq>
 800b6d2:	60b8      	str	r0, [r7, #8]
 800b6d4:	e01c      	b.n	800b710 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a1e      	ldr	r2, [pc, #120]	@ (800b754 <LL_USART_Init+0x134>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d105      	bne.n	800b6ea <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 800b6de:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800b6e2:	f7ff fbef 	bl	800aec4 <LL_RCC_GetUSARTClockFreq>
 800b6e6:	60b8      	str	r0, [r7, #8]
 800b6e8:	e012      	b.n	800b710 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a1a      	ldr	r2, [pc, #104]	@ (800b758 <LL_USART_Init+0x138>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d105      	bne.n	800b6fe <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 800b6f2:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 800b6f6:	f7ff fceb 	bl	800b0d0 <LL_RCC_GetUARTClockFreq>
 800b6fa:	60b8      	str	r0, [r7, #8]
 800b6fc:	e008      	b.n	800b710 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a16      	ldr	r2, [pc, #88]	@ (800b75c <LL_USART_Init+0x13c>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d104      	bne.n	800b710 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 800b706:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800b70a:	f7ff fce1 	bl	800b0d0 <LL_RCC_GetUARTClockFreq>
 800b70e:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00d      	beq.n	800b732 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d009      	beq.n	800b732 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 800b71e:	2300      	movs	r3, #0
 800b720:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800b72a:	68b9      	ldr	r1, [r7, #8]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7ff ff40 	bl	800b5b2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800b732:	7bfb      	ldrb	r3, [r7, #15]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	efff69f3 	.word	0xefff69f3
 800b740:	40011000 	.word	0x40011000
 800b744:	40004400 	.word	0x40004400
 800b748:	40004800 	.word	0x40004800
 800b74c:	40004c00 	.word	0x40004c00
 800b750:	40005000 	.word	0x40005000
 800b754:	40011400 	.word	0x40011400
 800b758:	40007800 	.word	0x40007800
 800b75c:	40007c00 	.word	0x40007c00

0800b760 <atoi>:
 800b760:	220a      	movs	r2, #10
 800b762:	2100      	movs	r1, #0
 800b764:	f000 b87a 	b.w	800b85c <strtol>

0800b768 <_strtol_l.isra.0>:
 800b768:	2b24      	cmp	r3, #36	@ 0x24
 800b76a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b76e:	4686      	mov	lr, r0
 800b770:	4690      	mov	r8, r2
 800b772:	d801      	bhi.n	800b778 <_strtol_l.isra.0+0x10>
 800b774:	2b01      	cmp	r3, #1
 800b776:	d106      	bne.n	800b786 <_strtol_l.isra.0+0x1e>
 800b778:	f000 fbee 	bl	800bf58 <__errno>
 800b77c:	2316      	movs	r3, #22
 800b77e:	6003      	str	r3, [r0, #0]
 800b780:	2000      	movs	r0, #0
 800b782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b786:	4834      	ldr	r0, [pc, #208]	@ (800b858 <_strtol_l.isra.0+0xf0>)
 800b788:	460d      	mov	r5, r1
 800b78a:	462a      	mov	r2, r5
 800b78c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b790:	5d06      	ldrb	r6, [r0, r4]
 800b792:	f016 0608 	ands.w	r6, r6, #8
 800b796:	d1f8      	bne.n	800b78a <_strtol_l.isra.0+0x22>
 800b798:	2c2d      	cmp	r4, #45	@ 0x2d
 800b79a:	d110      	bne.n	800b7be <_strtol_l.isra.0+0x56>
 800b79c:	782c      	ldrb	r4, [r5, #0]
 800b79e:	2601      	movs	r6, #1
 800b7a0:	1c95      	adds	r5, r2, #2
 800b7a2:	f033 0210 	bics.w	r2, r3, #16
 800b7a6:	d115      	bne.n	800b7d4 <_strtol_l.isra.0+0x6c>
 800b7a8:	2c30      	cmp	r4, #48	@ 0x30
 800b7aa:	d10d      	bne.n	800b7c8 <_strtol_l.isra.0+0x60>
 800b7ac:	782a      	ldrb	r2, [r5, #0]
 800b7ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b7b2:	2a58      	cmp	r2, #88	@ 0x58
 800b7b4:	d108      	bne.n	800b7c8 <_strtol_l.isra.0+0x60>
 800b7b6:	786c      	ldrb	r4, [r5, #1]
 800b7b8:	3502      	adds	r5, #2
 800b7ba:	2310      	movs	r3, #16
 800b7bc:	e00a      	b.n	800b7d4 <_strtol_l.isra.0+0x6c>
 800b7be:	2c2b      	cmp	r4, #43	@ 0x2b
 800b7c0:	bf04      	itt	eq
 800b7c2:	782c      	ldrbeq	r4, [r5, #0]
 800b7c4:	1c95      	addeq	r5, r2, #2
 800b7c6:	e7ec      	b.n	800b7a2 <_strtol_l.isra.0+0x3a>
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1f6      	bne.n	800b7ba <_strtol_l.isra.0+0x52>
 800b7cc:	2c30      	cmp	r4, #48	@ 0x30
 800b7ce:	bf14      	ite	ne
 800b7d0:	230a      	movne	r3, #10
 800b7d2:	2308      	moveq	r3, #8
 800b7d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b7d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b7dc:	2200      	movs	r2, #0
 800b7de:	fbbc f9f3 	udiv	r9, ip, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	fb03 ca19 	mls	sl, r3, r9, ip
 800b7e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b7ec:	2f09      	cmp	r7, #9
 800b7ee:	d80f      	bhi.n	800b810 <_strtol_l.isra.0+0xa8>
 800b7f0:	463c      	mov	r4, r7
 800b7f2:	42a3      	cmp	r3, r4
 800b7f4:	dd1b      	ble.n	800b82e <_strtol_l.isra.0+0xc6>
 800b7f6:	1c57      	adds	r7, r2, #1
 800b7f8:	d007      	beq.n	800b80a <_strtol_l.isra.0+0xa2>
 800b7fa:	4581      	cmp	r9, r0
 800b7fc:	d314      	bcc.n	800b828 <_strtol_l.isra.0+0xc0>
 800b7fe:	d101      	bne.n	800b804 <_strtol_l.isra.0+0x9c>
 800b800:	45a2      	cmp	sl, r4
 800b802:	db11      	blt.n	800b828 <_strtol_l.isra.0+0xc0>
 800b804:	fb00 4003 	mla	r0, r0, r3, r4
 800b808:	2201      	movs	r2, #1
 800b80a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b80e:	e7eb      	b.n	800b7e8 <_strtol_l.isra.0+0x80>
 800b810:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b814:	2f19      	cmp	r7, #25
 800b816:	d801      	bhi.n	800b81c <_strtol_l.isra.0+0xb4>
 800b818:	3c37      	subs	r4, #55	@ 0x37
 800b81a:	e7ea      	b.n	800b7f2 <_strtol_l.isra.0+0x8a>
 800b81c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b820:	2f19      	cmp	r7, #25
 800b822:	d804      	bhi.n	800b82e <_strtol_l.isra.0+0xc6>
 800b824:	3c57      	subs	r4, #87	@ 0x57
 800b826:	e7e4      	b.n	800b7f2 <_strtol_l.isra.0+0x8a>
 800b828:	f04f 32ff 	mov.w	r2, #4294967295
 800b82c:	e7ed      	b.n	800b80a <_strtol_l.isra.0+0xa2>
 800b82e:	1c53      	adds	r3, r2, #1
 800b830:	d108      	bne.n	800b844 <_strtol_l.isra.0+0xdc>
 800b832:	2322      	movs	r3, #34	@ 0x22
 800b834:	f8ce 3000 	str.w	r3, [lr]
 800b838:	4660      	mov	r0, ip
 800b83a:	f1b8 0f00 	cmp.w	r8, #0
 800b83e:	d0a0      	beq.n	800b782 <_strtol_l.isra.0+0x1a>
 800b840:	1e69      	subs	r1, r5, #1
 800b842:	e006      	b.n	800b852 <_strtol_l.isra.0+0xea>
 800b844:	b106      	cbz	r6, 800b848 <_strtol_l.isra.0+0xe0>
 800b846:	4240      	negs	r0, r0
 800b848:	f1b8 0f00 	cmp.w	r8, #0
 800b84c:	d099      	beq.n	800b782 <_strtol_l.isra.0+0x1a>
 800b84e:	2a00      	cmp	r2, #0
 800b850:	d1f6      	bne.n	800b840 <_strtol_l.isra.0+0xd8>
 800b852:	f8c8 1000 	str.w	r1, [r8]
 800b856:	e794      	b.n	800b782 <_strtol_l.isra.0+0x1a>
 800b858:	0800ddf1 	.word	0x0800ddf1

0800b85c <strtol>:
 800b85c:	4613      	mov	r3, r2
 800b85e:	460a      	mov	r2, r1
 800b860:	4601      	mov	r1, r0
 800b862:	4802      	ldr	r0, [pc, #8]	@ (800b86c <strtol+0x10>)
 800b864:	6800      	ldr	r0, [r0, #0]
 800b866:	f7ff bf7f 	b.w	800b768 <_strtol_l.isra.0>
 800b86a:	bf00      	nop
 800b86c:	200000f4 	.word	0x200000f4

0800b870 <_strtoul_l.isra.0>:
 800b870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b874:	4e34      	ldr	r6, [pc, #208]	@ (800b948 <_strtoul_l.isra.0+0xd8>)
 800b876:	4686      	mov	lr, r0
 800b878:	460d      	mov	r5, r1
 800b87a:	4628      	mov	r0, r5
 800b87c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b880:	5d37      	ldrb	r7, [r6, r4]
 800b882:	f017 0708 	ands.w	r7, r7, #8
 800b886:	d1f8      	bne.n	800b87a <_strtoul_l.isra.0+0xa>
 800b888:	2c2d      	cmp	r4, #45	@ 0x2d
 800b88a:	d110      	bne.n	800b8ae <_strtoul_l.isra.0+0x3e>
 800b88c:	782c      	ldrb	r4, [r5, #0]
 800b88e:	2701      	movs	r7, #1
 800b890:	1c85      	adds	r5, r0, #2
 800b892:	f033 0010 	bics.w	r0, r3, #16
 800b896:	d115      	bne.n	800b8c4 <_strtoul_l.isra.0+0x54>
 800b898:	2c30      	cmp	r4, #48	@ 0x30
 800b89a:	d10d      	bne.n	800b8b8 <_strtoul_l.isra.0+0x48>
 800b89c:	7828      	ldrb	r0, [r5, #0]
 800b89e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b8a2:	2858      	cmp	r0, #88	@ 0x58
 800b8a4:	d108      	bne.n	800b8b8 <_strtoul_l.isra.0+0x48>
 800b8a6:	786c      	ldrb	r4, [r5, #1]
 800b8a8:	3502      	adds	r5, #2
 800b8aa:	2310      	movs	r3, #16
 800b8ac:	e00a      	b.n	800b8c4 <_strtoul_l.isra.0+0x54>
 800b8ae:	2c2b      	cmp	r4, #43	@ 0x2b
 800b8b0:	bf04      	itt	eq
 800b8b2:	782c      	ldrbeq	r4, [r5, #0]
 800b8b4:	1c85      	addeq	r5, r0, #2
 800b8b6:	e7ec      	b.n	800b892 <_strtoul_l.isra.0+0x22>
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1f6      	bne.n	800b8aa <_strtoul_l.isra.0+0x3a>
 800b8bc:	2c30      	cmp	r4, #48	@ 0x30
 800b8be:	bf14      	ite	ne
 800b8c0:	230a      	movne	r3, #10
 800b8c2:	2308      	moveq	r3, #8
 800b8c4:	f04f 38ff 	mov.w	r8, #4294967295
 800b8c8:	2600      	movs	r6, #0
 800b8ca:	fbb8 f8f3 	udiv	r8, r8, r3
 800b8ce:	fb03 f908 	mul.w	r9, r3, r8
 800b8d2:	ea6f 0909 	mvn.w	r9, r9
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b8dc:	f1bc 0f09 	cmp.w	ip, #9
 800b8e0:	d810      	bhi.n	800b904 <_strtoul_l.isra.0+0x94>
 800b8e2:	4664      	mov	r4, ip
 800b8e4:	42a3      	cmp	r3, r4
 800b8e6:	dd1e      	ble.n	800b926 <_strtoul_l.isra.0+0xb6>
 800b8e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b8ec:	d007      	beq.n	800b8fe <_strtoul_l.isra.0+0x8e>
 800b8ee:	4580      	cmp	r8, r0
 800b8f0:	d316      	bcc.n	800b920 <_strtoul_l.isra.0+0xb0>
 800b8f2:	d101      	bne.n	800b8f8 <_strtoul_l.isra.0+0x88>
 800b8f4:	45a1      	cmp	r9, r4
 800b8f6:	db13      	blt.n	800b920 <_strtoul_l.isra.0+0xb0>
 800b8f8:	fb00 4003 	mla	r0, r0, r3, r4
 800b8fc:	2601      	movs	r6, #1
 800b8fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b902:	e7e9      	b.n	800b8d8 <_strtoul_l.isra.0+0x68>
 800b904:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b908:	f1bc 0f19 	cmp.w	ip, #25
 800b90c:	d801      	bhi.n	800b912 <_strtoul_l.isra.0+0xa2>
 800b90e:	3c37      	subs	r4, #55	@ 0x37
 800b910:	e7e8      	b.n	800b8e4 <_strtoul_l.isra.0+0x74>
 800b912:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b916:	f1bc 0f19 	cmp.w	ip, #25
 800b91a:	d804      	bhi.n	800b926 <_strtoul_l.isra.0+0xb6>
 800b91c:	3c57      	subs	r4, #87	@ 0x57
 800b91e:	e7e1      	b.n	800b8e4 <_strtoul_l.isra.0+0x74>
 800b920:	f04f 36ff 	mov.w	r6, #4294967295
 800b924:	e7eb      	b.n	800b8fe <_strtoul_l.isra.0+0x8e>
 800b926:	1c73      	adds	r3, r6, #1
 800b928:	d106      	bne.n	800b938 <_strtoul_l.isra.0+0xc8>
 800b92a:	2322      	movs	r3, #34	@ 0x22
 800b92c:	f8ce 3000 	str.w	r3, [lr]
 800b930:	4630      	mov	r0, r6
 800b932:	b932      	cbnz	r2, 800b942 <_strtoul_l.isra.0+0xd2>
 800b934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b938:	b107      	cbz	r7, 800b93c <_strtoul_l.isra.0+0xcc>
 800b93a:	4240      	negs	r0, r0
 800b93c:	2a00      	cmp	r2, #0
 800b93e:	d0f9      	beq.n	800b934 <_strtoul_l.isra.0+0xc4>
 800b940:	b106      	cbz	r6, 800b944 <_strtoul_l.isra.0+0xd4>
 800b942:	1e69      	subs	r1, r5, #1
 800b944:	6011      	str	r1, [r2, #0]
 800b946:	e7f5      	b.n	800b934 <_strtoul_l.isra.0+0xc4>
 800b948:	0800ddf1 	.word	0x0800ddf1

0800b94c <strtoul>:
 800b94c:	4613      	mov	r3, r2
 800b94e:	460a      	mov	r2, r1
 800b950:	4601      	mov	r1, r0
 800b952:	4802      	ldr	r0, [pc, #8]	@ (800b95c <strtoul+0x10>)
 800b954:	6800      	ldr	r0, [r0, #0]
 800b956:	f7ff bf8b 	b.w	800b870 <_strtoul_l.isra.0>
 800b95a:	bf00      	nop
 800b95c:	200000f4 	.word	0x200000f4

0800b960 <std>:
 800b960:	2300      	movs	r3, #0
 800b962:	b510      	push	{r4, lr}
 800b964:	4604      	mov	r4, r0
 800b966:	e9c0 3300 	strd	r3, r3, [r0]
 800b96a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b96e:	6083      	str	r3, [r0, #8]
 800b970:	8181      	strh	r1, [r0, #12]
 800b972:	6643      	str	r3, [r0, #100]	@ 0x64
 800b974:	81c2      	strh	r2, [r0, #14]
 800b976:	6183      	str	r3, [r0, #24]
 800b978:	4619      	mov	r1, r3
 800b97a:	2208      	movs	r2, #8
 800b97c:	305c      	adds	r0, #92	@ 0x5c
 800b97e:	f000 fa7d 	bl	800be7c <memset>
 800b982:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b8 <std+0x58>)
 800b984:	6263      	str	r3, [r4, #36]	@ 0x24
 800b986:	4b0d      	ldr	r3, [pc, #52]	@ (800b9bc <std+0x5c>)
 800b988:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b98a:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c0 <std+0x60>)
 800b98c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b98e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c4 <std+0x64>)
 800b990:	6323      	str	r3, [r4, #48]	@ 0x30
 800b992:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c8 <std+0x68>)
 800b994:	6224      	str	r4, [r4, #32]
 800b996:	429c      	cmp	r4, r3
 800b998:	d006      	beq.n	800b9a8 <std+0x48>
 800b99a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b99e:	4294      	cmp	r4, r2
 800b9a0:	d002      	beq.n	800b9a8 <std+0x48>
 800b9a2:	33d0      	adds	r3, #208	@ 0xd0
 800b9a4:	429c      	cmp	r4, r3
 800b9a6:	d105      	bne.n	800b9b4 <std+0x54>
 800b9a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b0:	f000 bafc 	b.w	800bfac <__retarget_lock_init_recursive>
 800b9b4:	bd10      	pop	{r4, pc}
 800b9b6:	bf00      	nop
 800b9b8:	0800bc85 	.word	0x0800bc85
 800b9bc:	0800bca7 	.word	0x0800bca7
 800b9c0:	0800bcdf 	.word	0x0800bcdf
 800b9c4:	0800bd03 	.word	0x0800bd03
 800b9c8:	20001b28 	.word	0x20001b28

0800b9cc <stdio_exit_handler>:
 800b9cc:	4a02      	ldr	r2, [pc, #8]	@ (800b9d8 <stdio_exit_handler+0xc>)
 800b9ce:	4903      	ldr	r1, [pc, #12]	@ (800b9dc <stdio_exit_handler+0x10>)
 800b9d0:	4803      	ldr	r0, [pc, #12]	@ (800b9e0 <stdio_exit_handler+0x14>)
 800b9d2:	f000 b869 	b.w	800baa8 <_fwalk_sglue>
 800b9d6:	bf00      	nop
 800b9d8:	200000e8 	.word	0x200000e8
 800b9dc:	0800cb15 	.word	0x0800cb15
 800b9e0:	200000f8 	.word	0x200000f8

0800b9e4 <cleanup_stdio>:
 800b9e4:	6841      	ldr	r1, [r0, #4]
 800b9e6:	4b0c      	ldr	r3, [pc, #48]	@ (800ba18 <cleanup_stdio+0x34>)
 800b9e8:	4299      	cmp	r1, r3
 800b9ea:	b510      	push	{r4, lr}
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	d001      	beq.n	800b9f4 <cleanup_stdio+0x10>
 800b9f0:	f001 f890 	bl	800cb14 <_fflush_r>
 800b9f4:	68a1      	ldr	r1, [r4, #8]
 800b9f6:	4b09      	ldr	r3, [pc, #36]	@ (800ba1c <cleanup_stdio+0x38>)
 800b9f8:	4299      	cmp	r1, r3
 800b9fa:	d002      	beq.n	800ba02 <cleanup_stdio+0x1e>
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f001 f889 	bl	800cb14 <_fflush_r>
 800ba02:	68e1      	ldr	r1, [r4, #12]
 800ba04:	4b06      	ldr	r3, [pc, #24]	@ (800ba20 <cleanup_stdio+0x3c>)
 800ba06:	4299      	cmp	r1, r3
 800ba08:	d004      	beq.n	800ba14 <cleanup_stdio+0x30>
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba10:	f001 b880 	b.w	800cb14 <_fflush_r>
 800ba14:	bd10      	pop	{r4, pc}
 800ba16:	bf00      	nop
 800ba18:	20001b28 	.word	0x20001b28
 800ba1c:	20001b90 	.word	0x20001b90
 800ba20:	20001bf8 	.word	0x20001bf8

0800ba24 <global_stdio_init.part.0>:
 800ba24:	b510      	push	{r4, lr}
 800ba26:	4b0b      	ldr	r3, [pc, #44]	@ (800ba54 <global_stdio_init.part.0+0x30>)
 800ba28:	4c0b      	ldr	r4, [pc, #44]	@ (800ba58 <global_stdio_init.part.0+0x34>)
 800ba2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ba5c <global_stdio_init.part.0+0x38>)
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	4620      	mov	r0, r4
 800ba30:	2200      	movs	r2, #0
 800ba32:	2104      	movs	r1, #4
 800ba34:	f7ff ff94 	bl	800b960 <std>
 800ba38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	2109      	movs	r1, #9
 800ba40:	f7ff ff8e 	bl	800b960 <std>
 800ba44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba48:	2202      	movs	r2, #2
 800ba4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba4e:	2112      	movs	r1, #18
 800ba50:	f7ff bf86 	b.w	800b960 <std>
 800ba54:	20001c60 	.word	0x20001c60
 800ba58:	20001b28 	.word	0x20001b28
 800ba5c:	0800b9cd 	.word	0x0800b9cd

0800ba60 <__sfp_lock_acquire>:
 800ba60:	4801      	ldr	r0, [pc, #4]	@ (800ba68 <__sfp_lock_acquire+0x8>)
 800ba62:	f000 baa4 	b.w	800bfae <__retarget_lock_acquire_recursive>
 800ba66:	bf00      	nop
 800ba68:	20001c69 	.word	0x20001c69

0800ba6c <__sfp_lock_release>:
 800ba6c:	4801      	ldr	r0, [pc, #4]	@ (800ba74 <__sfp_lock_release+0x8>)
 800ba6e:	f000 ba9f 	b.w	800bfb0 <__retarget_lock_release_recursive>
 800ba72:	bf00      	nop
 800ba74:	20001c69 	.word	0x20001c69

0800ba78 <__sinit>:
 800ba78:	b510      	push	{r4, lr}
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	f7ff fff0 	bl	800ba60 <__sfp_lock_acquire>
 800ba80:	6a23      	ldr	r3, [r4, #32]
 800ba82:	b11b      	cbz	r3, 800ba8c <__sinit+0x14>
 800ba84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba88:	f7ff bff0 	b.w	800ba6c <__sfp_lock_release>
 800ba8c:	4b04      	ldr	r3, [pc, #16]	@ (800baa0 <__sinit+0x28>)
 800ba8e:	6223      	str	r3, [r4, #32]
 800ba90:	4b04      	ldr	r3, [pc, #16]	@ (800baa4 <__sinit+0x2c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1f5      	bne.n	800ba84 <__sinit+0xc>
 800ba98:	f7ff ffc4 	bl	800ba24 <global_stdio_init.part.0>
 800ba9c:	e7f2      	b.n	800ba84 <__sinit+0xc>
 800ba9e:	bf00      	nop
 800baa0:	0800b9e5 	.word	0x0800b9e5
 800baa4:	20001c60 	.word	0x20001c60

0800baa8 <_fwalk_sglue>:
 800baa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baac:	4607      	mov	r7, r0
 800baae:	4688      	mov	r8, r1
 800bab0:	4614      	mov	r4, r2
 800bab2:	2600      	movs	r6, #0
 800bab4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bab8:	f1b9 0901 	subs.w	r9, r9, #1
 800babc:	d505      	bpl.n	800baca <_fwalk_sglue+0x22>
 800babe:	6824      	ldr	r4, [r4, #0]
 800bac0:	2c00      	cmp	r4, #0
 800bac2:	d1f7      	bne.n	800bab4 <_fwalk_sglue+0xc>
 800bac4:	4630      	mov	r0, r6
 800bac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baca:	89ab      	ldrh	r3, [r5, #12]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d907      	bls.n	800bae0 <_fwalk_sglue+0x38>
 800bad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bad4:	3301      	adds	r3, #1
 800bad6:	d003      	beq.n	800bae0 <_fwalk_sglue+0x38>
 800bad8:	4629      	mov	r1, r5
 800bada:	4638      	mov	r0, r7
 800badc:	47c0      	blx	r8
 800bade:	4306      	orrs	r6, r0
 800bae0:	3568      	adds	r5, #104	@ 0x68
 800bae2:	e7e9      	b.n	800bab8 <_fwalk_sglue+0x10>

0800bae4 <iprintf>:
 800bae4:	b40f      	push	{r0, r1, r2, r3}
 800bae6:	b507      	push	{r0, r1, r2, lr}
 800bae8:	4906      	ldr	r1, [pc, #24]	@ (800bb04 <iprintf+0x20>)
 800baea:	ab04      	add	r3, sp, #16
 800baec:	6808      	ldr	r0, [r1, #0]
 800baee:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf2:	6881      	ldr	r1, [r0, #8]
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	f000 fce5 	bl	800c4c4 <_vfiprintf_r>
 800bafa:	b003      	add	sp, #12
 800bafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb00:	b004      	add	sp, #16
 800bb02:	4770      	bx	lr
 800bb04:	200000f4 	.word	0x200000f4

0800bb08 <putchar>:
 800bb08:	4b02      	ldr	r3, [pc, #8]	@ (800bb14 <putchar+0xc>)
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	6818      	ldr	r0, [r3, #0]
 800bb0e:	6882      	ldr	r2, [r0, #8]
 800bb10:	f001 b88a 	b.w	800cc28 <_putc_r>
 800bb14:	200000f4 	.word	0x200000f4

0800bb18 <_puts_r>:
 800bb18:	6a03      	ldr	r3, [r0, #32]
 800bb1a:	b570      	push	{r4, r5, r6, lr}
 800bb1c:	6884      	ldr	r4, [r0, #8]
 800bb1e:	4605      	mov	r5, r0
 800bb20:	460e      	mov	r6, r1
 800bb22:	b90b      	cbnz	r3, 800bb28 <_puts_r+0x10>
 800bb24:	f7ff ffa8 	bl	800ba78 <__sinit>
 800bb28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb2a:	07db      	lsls	r3, r3, #31
 800bb2c:	d405      	bmi.n	800bb3a <_puts_r+0x22>
 800bb2e:	89a3      	ldrh	r3, [r4, #12]
 800bb30:	0598      	lsls	r0, r3, #22
 800bb32:	d402      	bmi.n	800bb3a <_puts_r+0x22>
 800bb34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb36:	f000 fa3a 	bl	800bfae <__retarget_lock_acquire_recursive>
 800bb3a:	89a3      	ldrh	r3, [r4, #12]
 800bb3c:	0719      	lsls	r1, r3, #28
 800bb3e:	d502      	bpl.n	800bb46 <_puts_r+0x2e>
 800bb40:	6923      	ldr	r3, [r4, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d135      	bne.n	800bbb2 <_puts_r+0x9a>
 800bb46:	4621      	mov	r1, r4
 800bb48:	4628      	mov	r0, r5
 800bb4a:	f000 f927 	bl	800bd9c <__swsetup_r>
 800bb4e:	b380      	cbz	r0, 800bbb2 <_puts_r+0x9a>
 800bb50:	f04f 35ff 	mov.w	r5, #4294967295
 800bb54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb56:	07da      	lsls	r2, r3, #31
 800bb58:	d405      	bmi.n	800bb66 <_puts_r+0x4e>
 800bb5a:	89a3      	ldrh	r3, [r4, #12]
 800bb5c:	059b      	lsls	r3, r3, #22
 800bb5e:	d402      	bmi.n	800bb66 <_puts_r+0x4e>
 800bb60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb62:	f000 fa25 	bl	800bfb0 <__retarget_lock_release_recursive>
 800bb66:	4628      	mov	r0, r5
 800bb68:	bd70      	pop	{r4, r5, r6, pc}
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	da04      	bge.n	800bb78 <_puts_r+0x60>
 800bb6e:	69a2      	ldr	r2, [r4, #24]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	dc17      	bgt.n	800bba4 <_puts_r+0x8c>
 800bb74:	290a      	cmp	r1, #10
 800bb76:	d015      	beq.n	800bba4 <_puts_r+0x8c>
 800bb78:	6823      	ldr	r3, [r4, #0]
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	6022      	str	r2, [r4, #0]
 800bb7e:	7019      	strb	r1, [r3, #0]
 800bb80:	68a3      	ldr	r3, [r4, #8]
 800bb82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bb86:	3b01      	subs	r3, #1
 800bb88:	60a3      	str	r3, [r4, #8]
 800bb8a:	2900      	cmp	r1, #0
 800bb8c:	d1ed      	bne.n	800bb6a <_puts_r+0x52>
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	da11      	bge.n	800bbb6 <_puts_r+0x9e>
 800bb92:	4622      	mov	r2, r4
 800bb94:	210a      	movs	r1, #10
 800bb96:	4628      	mov	r0, r5
 800bb98:	f000 f8c2 	bl	800bd20 <__swbuf_r>
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d0d7      	beq.n	800bb50 <_puts_r+0x38>
 800bba0:	250a      	movs	r5, #10
 800bba2:	e7d7      	b.n	800bb54 <_puts_r+0x3c>
 800bba4:	4622      	mov	r2, r4
 800bba6:	4628      	mov	r0, r5
 800bba8:	f000 f8ba 	bl	800bd20 <__swbuf_r>
 800bbac:	3001      	adds	r0, #1
 800bbae:	d1e7      	bne.n	800bb80 <_puts_r+0x68>
 800bbb0:	e7ce      	b.n	800bb50 <_puts_r+0x38>
 800bbb2:	3e01      	subs	r6, #1
 800bbb4:	e7e4      	b.n	800bb80 <_puts_r+0x68>
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	6022      	str	r2, [r4, #0]
 800bbbc:	220a      	movs	r2, #10
 800bbbe:	701a      	strb	r2, [r3, #0]
 800bbc0:	e7ee      	b.n	800bba0 <_puts_r+0x88>
	...

0800bbc4 <puts>:
 800bbc4:	4b02      	ldr	r3, [pc, #8]	@ (800bbd0 <puts+0xc>)
 800bbc6:	4601      	mov	r1, r0
 800bbc8:	6818      	ldr	r0, [r3, #0]
 800bbca:	f7ff bfa5 	b.w	800bb18 <_puts_r>
 800bbce:	bf00      	nop
 800bbd0:	200000f4 	.word	0x200000f4

0800bbd4 <sniprintf>:
 800bbd4:	b40c      	push	{r2, r3}
 800bbd6:	b530      	push	{r4, r5, lr}
 800bbd8:	4b18      	ldr	r3, [pc, #96]	@ (800bc3c <sniprintf+0x68>)
 800bbda:	1e0c      	subs	r4, r1, #0
 800bbdc:	681d      	ldr	r5, [r3, #0]
 800bbde:	b09d      	sub	sp, #116	@ 0x74
 800bbe0:	da08      	bge.n	800bbf4 <sniprintf+0x20>
 800bbe2:	238b      	movs	r3, #139	@ 0x8b
 800bbe4:	602b      	str	r3, [r5, #0]
 800bbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbea:	b01d      	add	sp, #116	@ 0x74
 800bbec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbf0:	b002      	add	sp, #8
 800bbf2:	4770      	bx	lr
 800bbf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bbf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bbfc:	f04f 0300 	mov.w	r3, #0
 800bc00:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bc02:	bf14      	ite	ne
 800bc04:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bc08:	4623      	moveq	r3, r4
 800bc0a:	9304      	str	r3, [sp, #16]
 800bc0c:	9307      	str	r3, [sp, #28]
 800bc0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bc12:	9002      	str	r0, [sp, #8]
 800bc14:	9006      	str	r0, [sp, #24]
 800bc16:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bc1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bc1c:	ab21      	add	r3, sp, #132	@ 0x84
 800bc1e:	a902      	add	r1, sp, #8
 800bc20:	4628      	mov	r0, r5
 800bc22:	9301      	str	r3, [sp, #4]
 800bc24:	f000 fb28 	bl	800c278 <_svfiprintf_r>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	bfbc      	itt	lt
 800bc2c:	238b      	movlt	r3, #139	@ 0x8b
 800bc2e:	602b      	strlt	r3, [r5, #0]
 800bc30:	2c00      	cmp	r4, #0
 800bc32:	d0da      	beq.n	800bbea <sniprintf+0x16>
 800bc34:	9b02      	ldr	r3, [sp, #8]
 800bc36:	2200      	movs	r2, #0
 800bc38:	701a      	strb	r2, [r3, #0]
 800bc3a:	e7d6      	b.n	800bbea <sniprintf+0x16>
 800bc3c:	200000f4 	.word	0x200000f4

0800bc40 <siprintf>:
 800bc40:	b40e      	push	{r1, r2, r3}
 800bc42:	b510      	push	{r4, lr}
 800bc44:	b09d      	sub	sp, #116	@ 0x74
 800bc46:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bc48:	9002      	str	r0, [sp, #8]
 800bc4a:	9006      	str	r0, [sp, #24]
 800bc4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc50:	480a      	ldr	r0, [pc, #40]	@ (800bc7c <siprintf+0x3c>)
 800bc52:	9107      	str	r1, [sp, #28]
 800bc54:	9104      	str	r1, [sp, #16]
 800bc56:	490a      	ldr	r1, [pc, #40]	@ (800bc80 <siprintf+0x40>)
 800bc58:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc5c:	9105      	str	r1, [sp, #20]
 800bc5e:	2400      	movs	r4, #0
 800bc60:	a902      	add	r1, sp, #8
 800bc62:	6800      	ldr	r0, [r0, #0]
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bc68:	f000 fb06 	bl	800c278 <_svfiprintf_r>
 800bc6c:	9b02      	ldr	r3, [sp, #8]
 800bc6e:	701c      	strb	r4, [r3, #0]
 800bc70:	b01d      	add	sp, #116	@ 0x74
 800bc72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc76:	b003      	add	sp, #12
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	200000f4 	.word	0x200000f4
 800bc80:	ffff0208 	.word	0xffff0208

0800bc84 <__sread>:
 800bc84:	b510      	push	{r4, lr}
 800bc86:	460c      	mov	r4, r1
 800bc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8c:	f000 f940 	bl	800bf10 <_read_r>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	bfab      	itete	ge
 800bc94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc96:	89a3      	ldrhlt	r3, [r4, #12]
 800bc98:	181b      	addge	r3, r3, r0
 800bc9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc9e:	bfac      	ite	ge
 800bca0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bca2:	81a3      	strhlt	r3, [r4, #12]
 800bca4:	bd10      	pop	{r4, pc}

0800bca6 <__swrite>:
 800bca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcaa:	461f      	mov	r7, r3
 800bcac:	898b      	ldrh	r3, [r1, #12]
 800bcae:	05db      	lsls	r3, r3, #23
 800bcb0:	4605      	mov	r5, r0
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	4616      	mov	r6, r2
 800bcb6:	d505      	bpl.n	800bcc4 <__swrite+0x1e>
 800bcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f000 f914 	bl	800beec <_lseek_r>
 800bcc4:	89a3      	ldrh	r3, [r4, #12]
 800bcc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bcce:	81a3      	strh	r3, [r4, #12]
 800bcd0:	4632      	mov	r2, r6
 800bcd2:	463b      	mov	r3, r7
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcda:	f000 b92b 	b.w	800bf34 <_write_r>

0800bcde <__sseek>:
 800bcde:	b510      	push	{r4, lr}
 800bce0:	460c      	mov	r4, r1
 800bce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bce6:	f000 f901 	bl	800beec <_lseek_r>
 800bcea:	1c43      	adds	r3, r0, #1
 800bcec:	89a3      	ldrh	r3, [r4, #12]
 800bcee:	bf15      	itete	ne
 800bcf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bcf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bcf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bcfa:	81a3      	strheq	r3, [r4, #12]
 800bcfc:	bf18      	it	ne
 800bcfe:	81a3      	strhne	r3, [r4, #12]
 800bd00:	bd10      	pop	{r4, pc}

0800bd02 <__sclose>:
 800bd02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd06:	f000 b8e1 	b.w	800becc <_close_r>
	...

0800bd0c <viprintf>:
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	4903      	ldr	r1, [pc, #12]	@ (800bd1c <viprintf+0x10>)
 800bd10:	4602      	mov	r2, r0
 800bd12:	6808      	ldr	r0, [r1, #0]
 800bd14:	6881      	ldr	r1, [r0, #8]
 800bd16:	f000 bbd5 	b.w	800c4c4 <_vfiprintf_r>
 800bd1a:	bf00      	nop
 800bd1c:	200000f4 	.word	0x200000f4

0800bd20 <__swbuf_r>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	460e      	mov	r6, r1
 800bd24:	4614      	mov	r4, r2
 800bd26:	4605      	mov	r5, r0
 800bd28:	b118      	cbz	r0, 800bd32 <__swbuf_r+0x12>
 800bd2a:	6a03      	ldr	r3, [r0, #32]
 800bd2c:	b90b      	cbnz	r3, 800bd32 <__swbuf_r+0x12>
 800bd2e:	f7ff fea3 	bl	800ba78 <__sinit>
 800bd32:	69a3      	ldr	r3, [r4, #24]
 800bd34:	60a3      	str	r3, [r4, #8]
 800bd36:	89a3      	ldrh	r3, [r4, #12]
 800bd38:	071a      	lsls	r2, r3, #28
 800bd3a:	d501      	bpl.n	800bd40 <__swbuf_r+0x20>
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	b943      	cbnz	r3, 800bd52 <__swbuf_r+0x32>
 800bd40:	4621      	mov	r1, r4
 800bd42:	4628      	mov	r0, r5
 800bd44:	f000 f82a 	bl	800bd9c <__swsetup_r>
 800bd48:	b118      	cbz	r0, 800bd52 <__swbuf_r+0x32>
 800bd4a:	f04f 37ff 	mov.w	r7, #4294967295
 800bd4e:	4638      	mov	r0, r7
 800bd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	6922      	ldr	r2, [r4, #16]
 800bd56:	1a98      	subs	r0, r3, r2
 800bd58:	6963      	ldr	r3, [r4, #20]
 800bd5a:	b2f6      	uxtb	r6, r6
 800bd5c:	4283      	cmp	r3, r0
 800bd5e:	4637      	mov	r7, r6
 800bd60:	dc05      	bgt.n	800bd6e <__swbuf_r+0x4e>
 800bd62:	4621      	mov	r1, r4
 800bd64:	4628      	mov	r0, r5
 800bd66:	f000 fed5 	bl	800cb14 <_fflush_r>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d1ed      	bne.n	800bd4a <__swbuf_r+0x2a>
 800bd6e:	68a3      	ldr	r3, [r4, #8]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	60a3      	str	r3, [r4, #8]
 800bd74:	6823      	ldr	r3, [r4, #0]
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	6022      	str	r2, [r4, #0]
 800bd7a:	701e      	strb	r6, [r3, #0]
 800bd7c:	6962      	ldr	r2, [r4, #20]
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d004      	beq.n	800bd8e <__swbuf_r+0x6e>
 800bd84:	89a3      	ldrh	r3, [r4, #12]
 800bd86:	07db      	lsls	r3, r3, #31
 800bd88:	d5e1      	bpl.n	800bd4e <__swbuf_r+0x2e>
 800bd8a:	2e0a      	cmp	r6, #10
 800bd8c:	d1df      	bne.n	800bd4e <__swbuf_r+0x2e>
 800bd8e:	4621      	mov	r1, r4
 800bd90:	4628      	mov	r0, r5
 800bd92:	f000 febf 	bl	800cb14 <_fflush_r>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d0d9      	beq.n	800bd4e <__swbuf_r+0x2e>
 800bd9a:	e7d6      	b.n	800bd4a <__swbuf_r+0x2a>

0800bd9c <__swsetup_r>:
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	4b29      	ldr	r3, [pc, #164]	@ (800be44 <__swsetup_r+0xa8>)
 800bda0:	4605      	mov	r5, r0
 800bda2:	6818      	ldr	r0, [r3, #0]
 800bda4:	460c      	mov	r4, r1
 800bda6:	b118      	cbz	r0, 800bdb0 <__swsetup_r+0x14>
 800bda8:	6a03      	ldr	r3, [r0, #32]
 800bdaa:	b90b      	cbnz	r3, 800bdb0 <__swsetup_r+0x14>
 800bdac:	f7ff fe64 	bl	800ba78 <__sinit>
 800bdb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb4:	0719      	lsls	r1, r3, #28
 800bdb6:	d422      	bmi.n	800bdfe <__swsetup_r+0x62>
 800bdb8:	06da      	lsls	r2, r3, #27
 800bdba:	d407      	bmi.n	800bdcc <__swsetup_r+0x30>
 800bdbc:	2209      	movs	r2, #9
 800bdbe:	602a      	str	r2, [r5, #0]
 800bdc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdca:	e033      	b.n	800be34 <__swsetup_r+0x98>
 800bdcc:	0758      	lsls	r0, r3, #29
 800bdce:	d512      	bpl.n	800bdf6 <__swsetup_r+0x5a>
 800bdd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdd2:	b141      	cbz	r1, 800bde6 <__swsetup_r+0x4a>
 800bdd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdd8:	4299      	cmp	r1, r3
 800bdda:	d002      	beq.n	800bde2 <__swsetup_r+0x46>
 800bddc:	4628      	mov	r0, r5
 800bdde:	f000 f8f7 	bl	800bfd0 <_free_r>
 800bde2:	2300      	movs	r3, #0
 800bde4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bdec:	81a3      	strh	r3, [r4, #12]
 800bdee:	2300      	movs	r3, #0
 800bdf0:	6063      	str	r3, [r4, #4]
 800bdf2:	6923      	ldr	r3, [r4, #16]
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	f043 0308 	orr.w	r3, r3, #8
 800bdfc:	81a3      	strh	r3, [r4, #12]
 800bdfe:	6923      	ldr	r3, [r4, #16]
 800be00:	b94b      	cbnz	r3, 800be16 <__swsetup_r+0x7a>
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be0c:	d003      	beq.n	800be16 <__swsetup_r+0x7a>
 800be0e:	4621      	mov	r1, r4
 800be10:	4628      	mov	r0, r5
 800be12:	f000 fecd 	bl	800cbb0 <__smakebuf_r>
 800be16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be1a:	f013 0201 	ands.w	r2, r3, #1
 800be1e:	d00a      	beq.n	800be36 <__swsetup_r+0x9a>
 800be20:	2200      	movs	r2, #0
 800be22:	60a2      	str	r2, [r4, #8]
 800be24:	6962      	ldr	r2, [r4, #20]
 800be26:	4252      	negs	r2, r2
 800be28:	61a2      	str	r2, [r4, #24]
 800be2a:	6922      	ldr	r2, [r4, #16]
 800be2c:	b942      	cbnz	r2, 800be40 <__swsetup_r+0xa4>
 800be2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be32:	d1c5      	bne.n	800bdc0 <__swsetup_r+0x24>
 800be34:	bd38      	pop	{r3, r4, r5, pc}
 800be36:	0799      	lsls	r1, r3, #30
 800be38:	bf58      	it	pl
 800be3a:	6962      	ldrpl	r2, [r4, #20]
 800be3c:	60a2      	str	r2, [r4, #8]
 800be3e:	e7f4      	b.n	800be2a <__swsetup_r+0x8e>
 800be40:	2000      	movs	r0, #0
 800be42:	e7f7      	b.n	800be34 <__swsetup_r+0x98>
 800be44:	200000f4 	.word	0x200000f4

0800be48 <memmove>:
 800be48:	4288      	cmp	r0, r1
 800be4a:	b510      	push	{r4, lr}
 800be4c:	eb01 0402 	add.w	r4, r1, r2
 800be50:	d902      	bls.n	800be58 <memmove+0x10>
 800be52:	4284      	cmp	r4, r0
 800be54:	4623      	mov	r3, r4
 800be56:	d807      	bhi.n	800be68 <memmove+0x20>
 800be58:	1e43      	subs	r3, r0, #1
 800be5a:	42a1      	cmp	r1, r4
 800be5c:	d008      	beq.n	800be70 <memmove+0x28>
 800be5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be66:	e7f8      	b.n	800be5a <memmove+0x12>
 800be68:	4402      	add	r2, r0
 800be6a:	4601      	mov	r1, r0
 800be6c:	428a      	cmp	r2, r1
 800be6e:	d100      	bne.n	800be72 <memmove+0x2a>
 800be70:	bd10      	pop	{r4, pc}
 800be72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be7a:	e7f7      	b.n	800be6c <memmove+0x24>

0800be7c <memset>:
 800be7c:	4402      	add	r2, r0
 800be7e:	4603      	mov	r3, r0
 800be80:	4293      	cmp	r3, r2
 800be82:	d100      	bne.n	800be86 <memset+0xa>
 800be84:	4770      	bx	lr
 800be86:	f803 1b01 	strb.w	r1, [r3], #1
 800be8a:	e7f9      	b.n	800be80 <memset+0x4>

0800be8c <strchr>:
 800be8c:	b2c9      	uxtb	r1, r1
 800be8e:	4603      	mov	r3, r0
 800be90:	4618      	mov	r0, r3
 800be92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be96:	b112      	cbz	r2, 800be9e <strchr+0x12>
 800be98:	428a      	cmp	r2, r1
 800be9a:	d1f9      	bne.n	800be90 <strchr+0x4>
 800be9c:	4770      	bx	lr
 800be9e:	2900      	cmp	r1, #0
 800bea0:	bf18      	it	ne
 800bea2:	2000      	movne	r0, #0
 800bea4:	4770      	bx	lr

0800bea6 <strncpy>:
 800bea6:	b510      	push	{r4, lr}
 800bea8:	3901      	subs	r1, #1
 800beaa:	4603      	mov	r3, r0
 800beac:	b132      	cbz	r2, 800bebc <strncpy+0x16>
 800beae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800beb2:	f803 4b01 	strb.w	r4, [r3], #1
 800beb6:	3a01      	subs	r2, #1
 800beb8:	2c00      	cmp	r4, #0
 800beba:	d1f7      	bne.n	800beac <strncpy+0x6>
 800bebc:	441a      	add	r2, r3
 800bebe:	2100      	movs	r1, #0
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d100      	bne.n	800bec6 <strncpy+0x20>
 800bec4:	bd10      	pop	{r4, pc}
 800bec6:	f803 1b01 	strb.w	r1, [r3], #1
 800beca:	e7f9      	b.n	800bec0 <strncpy+0x1a>

0800becc <_close_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4d06      	ldr	r5, [pc, #24]	@ (800bee8 <_close_r+0x1c>)
 800bed0:	2300      	movs	r3, #0
 800bed2:	4604      	mov	r4, r0
 800bed4:	4608      	mov	r0, r1
 800bed6:	602b      	str	r3, [r5, #0]
 800bed8:	f7fb f916 	bl	8007108 <_close>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d102      	bne.n	800bee6 <_close_r+0x1a>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	b103      	cbz	r3, 800bee6 <_close_r+0x1a>
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	20001c64 	.word	0x20001c64

0800beec <_lseek_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4d07      	ldr	r5, [pc, #28]	@ (800bf0c <_lseek_r+0x20>)
 800bef0:	4604      	mov	r4, r0
 800bef2:	4608      	mov	r0, r1
 800bef4:	4611      	mov	r1, r2
 800bef6:	2200      	movs	r2, #0
 800bef8:	602a      	str	r2, [r5, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	f7fb f92b 	bl	8007156 <_lseek>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d102      	bne.n	800bf0a <_lseek_r+0x1e>
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	b103      	cbz	r3, 800bf0a <_lseek_r+0x1e>
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	20001c64 	.word	0x20001c64

0800bf10 <_read_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d07      	ldr	r5, [pc, #28]	@ (800bf30 <_read_r+0x20>)
 800bf14:	4604      	mov	r4, r0
 800bf16:	4608      	mov	r0, r1
 800bf18:	4611      	mov	r1, r2
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	602a      	str	r2, [r5, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f7fb f8b9 	bl	8007096 <_read>
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	d102      	bne.n	800bf2e <_read_r+0x1e>
 800bf28:	682b      	ldr	r3, [r5, #0]
 800bf2a:	b103      	cbz	r3, 800bf2e <_read_r+0x1e>
 800bf2c:	6023      	str	r3, [r4, #0]
 800bf2e:	bd38      	pop	{r3, r4, r5, pc}
 800bf30:	20001c64 	.word	0x20001c64

0800bf34 <_write_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	4d07      	ldr	r5, [pc, #28]	@ (800bf54 <_write_r+0x20>)
 800bf38:	4604      	mov	r4, r0
 800bf3a:	4608      	mov	r0, r1
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	2200      	movs	r2, #0
 800bf40:	602a      	str	r2, [r5, #0]
 800bf42:	461a      	mov	r2, r3
 800bf44:	f7fb f8c4 	bl	80070d0 <_write>
 800bf48:	1c43      	adds	r3, r0, #1
 800bf4a:	d102      	bne.n	800bf52 <_write_r+0x1e>
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	b103      	cbz	r3, 800bf52 <_write_r+0x1e>
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	bd38      	pop	{r3, r4, r5, pc}
 800bf54:	20001c64 	.word	0x20001c64

0800bf58 <__errno>:
 800bf58:	4b01      	ldr	r3, [pc, #4]	@ (800bf60 <__errno+0x8>)
 800bf5a:	6818      	ldr	r0, [r3, #0]
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	200000f4 	.word	0x200000f4

0800bf64 <__libc_init_array>:
 800bf64:	b570      	push	{r4, r5, r6, lr}
 800bf66:	4d0d      	ldr	r5, [pc, #52]	@ (800bf9c <__libc_init_array+0x38>)
 800bf68:	4c0d      	ldr	r4, [pc, #52]	@ (800bfa0 <__libc_init_array+0x3c>)
 800bf6a:	1b64      	subs	r4, r4, r5
 800bf6c:	10a4      	asrs	r4, r4, #2
 800bf6e:	2600      	movs	r6, #0
 800bf70:	42a6      	cmp	r6, r4
 800bf72:	d109      	bne.n	800bf88 <__libc_init_array+0x24>
 800bf74:	4d0b      	ldr	r5, [pc, #44]	@ (800bfa4 <__libc_init_array+0x40>)
 800bf76:	4c0c      	ldr	r4, [pc, #48]	@ (800bfa8 <__libc_init_array+0x44>)
 800bf78:	f000 fef2 	bl	800cd60 <_init>
 800bf7c:	1b64      	subs	r4, r4, r5
 800bf7e:	10a4      	asrs	r4, r4, #2
 800bf80:	2600      	movs	r6, #0
 800bf82:	42a6      	cmp	r6, r4
 800bf84:	d105      	bne.n	800bf92 <__libc_init_array+0x2e>
 800bf86:	bd70      	pop	{r4, r5, r6, pc}
 800bf88:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf8c:	4798      	blx	r3
 800bf8e:	3601      	adds	r6, #1
 800bf90:	e7ee      	b.n	800bf70 <__libc_init_array+0xc>
 800bf92:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf96:	4798      	blx	r3
 800bf98:	3601      	adds	r6, #1
 800bf9a:	e7f2      	b.n	800bf82 <__libc_init_array+0x1e>
 800bf9c:	0800df2c 	.word	0x0800df2c
 800bfa0:	0800df2c 	.word	0x0800df2c
 800bfa4:	0800df2c 	.word	0x0800df2c
 800bfa8:	0800df30 	.word	0x0800df30

0800bfac <__retarget_lock_init_recursive>:
 800bfac:	4770      	bx	lr

0800bfae <__retarget_lock_acquire_recursive>:
 800bfae:	4770      	bx	lr

0800bfb0 <__retarget_lock_release_recursive>:
 800bfb0:	4770      	bx	lr

0800bfb2 <memcpy>:
 800bfb2:	440a      	add	r2, r1
 800bfb4:	4291      	cmp	r1, r2
 800bfb6:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfba:	d100      	bne.n	800bfbe <memcpy+0xc>
 800bfbc:	4770      	bx	lr
 800bfbe:	b510      	push	{r4, lr}
 800bfc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfc8:	4291      	cmp	r1, r2
 800bfca:	d1f9      	bne.n	800bfc0 <memcpy+0xe>
 800bfcc:	bd10      	pop	{r4, pc}
	...

0800bfd0 <_free_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	4605      	mov	r5, r0
 800bfd4:	2900      	cmp	r1, #0
 800bfd6:	d041      	beq.n	800c05c <_free_r+0x8c>
 800bfd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfdc:	1f0c      	subs	r4, r1, #4
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	bfb8      	it	lt
 800bfe2:	18e4      	addlt	r4, r4, r3
 800bfe4:	f000 f8e0 	bl	800c1a8 <__malloc_lock>
 800bfe8:	4a1d      	ldr	r2, [pc, #116]	@ (800c060 <_free_r+0x90>)
 800bfea:	6813      	ldr	r3, [r2, #0]
 800bfec:	b933      	cbnz	r3, 800bffc <_free_r+0x2c>
 800bfee:	6063      	str	r3, [r4, #4]
 800bff0:	6014      	str	r4, [r2, #0]
 800bff2:	4628      	mov	r0, r5
 800bff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bff8:	f000 b8dc 	b.w	800c1b4 <__malloc_unlock>
 800bffc:	42a3      	cmp	r3, r4
 800bffe:	d908      	bls.n	800c012 <_free_r+0x42>
 800c000:	6820      	ldr	r0, [r4, #0]
 800c002:	1821      	adds	r1, r4, r0
 800c004:	428b      	cmp	r3, r1
 800c006:	bf01      	itttt	eq
 800c008:	6819      	ldreq	r1, [r3, #0]
 800c00a:	685b      	ldreq	r3, [r3, #4]
 800c00c:	1809      	addeq	r1, r1, r0
 800c00e:	6021      	streq	r1, [r4, #0]
 800c010:	e7ed      	b.n	800bfee <_free_r+0x1e>
 800c012:	461a      	mov	r2, r3
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	b10b      	cbz	r3, 800c01c <_free_r+0x4c>
 800c018:	42a3      	cmp	r3, r4
 800c01a:	d9fa      	bls.n	800c012 <_free_r+0x42>
 800c01c:	6811      	ldr	r1, [r2, #0]
 800c01e:	1850      	adds	r0, r2, r1
 800c020:	42a0      	cmp	r0, r4
 800c022:	d10b      	bne.n	800c03c <_free_r+0x6c>
 800c024:	6820      	ldr	r0, [r4, #0]
 800c026:	4401      	add	r1, r0
 800c028:	1850      	adds	r0, r2, r1
 800c02a:	4283      	cmp	r3, r0
 800c02c:	6011      	str	r1, [r2, #0]
 800c02e:	d1e0      	bne.n	800bff2 <_free_r+0x22>
 800c030:	6818      	ldr	r0, [r3, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	6053      	str	r3, [r2, #4]
 800c036:	4408      	add	r0, r1
 800c038:	6010      	str	r0, [r2, #0]
 800c03a:	e7da      	b.n	800bff2 <_free_r+0x22>
 800c03c:	d902      	bls.n	800c044 <_free_r+0x74>
 800c03e:	230c      	movs	r3, #12
 800c040:	602b      	str	r3, [r5, #0]
 800c042:	e7d6      	b.n	800bff2 <_free_r+0x22>
 800c044:	6820      	ldr	r0, [r4, #0]
 800c046:	1821      	adds	r1, r4, r0
 800c048:	428b      	cmp	r3, r1
 800c04a:	bf04      	itt	eq
 800c04c:	6819      	ldreq	r1, [r3, #0]
 800c04e:	685b      	ldreq	r3, [r3, #4]
 800c050:	6063      	str	r3, [r4, #4]
 800c052:	bf04      	itt	eq
 800c054:	1809      	addeq	r1, r1, r0
 800c056:	6021      	streq	r1, [r4, #0]
 800c058:	6054      	str	r4, [r2, #4]
 800c05a:	e7ca      	b.n	800bff2 <_free_r+0x22>
 800c05c:	bd38      	pop	{r3, r4, r5, pc}
 800c05e:	bf00      	nop
 800c060:	20001c70 	.word	0x20001c70

0800c064 <sbrk_aligned>:
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	4e0f      	ldr	r6, [pc, #60]	@ (800c0a4 <sbrk_aligned+0x40>)
 800c068:	460c      	mov	r4, r1
 800c06a:	6831      	ldr	r1, [r6, #0]
 800c06c:	4605      	mov	r5, r0
 800c06e:	b911      	cbnz	r1, 800c076 <sbrk_aligned+0x12>
 800c070:	f000 fe30 	bl	800ccd4 <_sbrk_r>
 800c074:	6030      	str	r0, [r6, #0]
 800c076:	4621      	mov	r1, r4
 800c078:	4628      	mov	r0, r5
 800c07a:	f000 fe2b 	bl	800ccd4 <_sbrk_r>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	d103      	bne.n	800c08a <sbrk_aligned+0x26>
 800c082:	f04f 34ff 	mov.w	r4, #4294967295
 800c086:	4620      	mov	r0, r4
 800c088:	bd70      	pop	{r4, r5, r6, pc}
 800c08a:	1cc4      	adds	r4, r0, #3
 800c08c:	f024 0403 	bic.w	r4, r4, #3
 800c090:	42a0      	cmp	r0, r4
 800c092:	d0f8      	beq.n	800c086 <sbrk_aligned+0x22>
 800c094:	1a21      	subs	r1, r4, r0
 800c096:	4628      	mov	r0, r5
 800c098:	f000 fe1c 	bl	800ccd4 <_sbrk_r>
 800c09c:	3001      	adds	r0, #1
 800c09e:	d1f2      	bne.n	800c086 <sbrk_aligned+0x22>
 800c0a0:	e7ef      	b.n	800c082 <sbrk_aligned+0x1e>
 800c0a2:	bf00      	nop
 800c0a4:	20001c6c 	.word	0x20001c6c

0800c0a8 <_malloc_r>:
 800c0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0ac:	1ccd      	adds	r5, r1, #3
 800c0ae:	f025 0503 	bic.w	r5, r5, #3
 800c0b2:	3508      	adds	r5, #8
 800c0b4:	2d0c      	cmp	r5, #12
 800c0b6:	bf38      	it	cc
 800c0b8:	250c      	movcc	r5, #12
 800c0ba:	2d00      	cmp	r5, #0
 800c0bc:	4606      	mov	r6, r0
 800c0be:	db01      	blt.n	800c0c4 <_malloc_r+0x1c>
 800c0c0:	42a9      	cmp	r1, r5
 800c0c2:	d904      	bls.n	800c0ce <_malloc_r+0x26>
 800c0c4:	230c      	movs	r3, #12
 800c0c6:	6033      	str	r3, [r6, #0]
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1a4 <_malloc_r+0xfc>
 800c0d2:	f000 f869 	bl	800c1a8 <__malloc_lock>
 800c0d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c0da:	461c      	mov	r4, r3
 800c0dc:	bb44      	cbnz	r4, 800c130 <_malloc_r+0x88>
 800c0de:	4629      	mov	r1, r5
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f7ff ffbf 	bl	800c064 <sbrk_aligned>
 800c0e6:	1c43      	adds	r3, r0, #1
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	d158      	bne.n	800c19e <_malloc_r+0xf6>
 800c0ec:	f8d8 4000 	ldr.w	r4, [r8]
 800c0f0:	4627      	mov	r7, r4
 800c0f2:	2f00      	cmp	r7, #0
 800c0f4:	d143      	bne.n	800c17e <_malloc_r+0xd6>
 800c0f6:	2c00      	cmp	r4, #0
 800c0f8:	d04b      	beq.n	800c192 <_malloc_r+0xea>
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	4630      	mov	r0, r6
 800c100:	eb04 0903 	add.w	r9, r4, r3
 800c104:	f000 fde6 	bl	800ccd4 <_sbrk_r>
 800c108:	4581      	cmp	r9, r0
 800c10a:	d142      	bne.n	800c192 <_malloc_r+0xea>
 800c10c:	6821      	ldr	r1, [r4, #0]
 800c10e:	1a6d      	subs	r5, r5, r1
 800c110:	4629      	mov	r1, r5
 800c112:	4630      	mov	r0, r6
 800c114:	f7ff ffa6 	bl	800c064 <sbrk_aligned>
 800c118:	3001      	adds	r0, #1
 800c11a:	d03a      	beq.n	800c192 <_malloc_r+0xea>
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	442b      	add	r3, r5
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	f8d8 3000 	ldr.w	r3, [r8]
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	bb62      	cbnz	r2, 800c184 <_malloc_r+0xdc>
 800c12a:	f8c8 7000 	str.w	r7, [r8]
 800c12e:	e00f      	b.n	800c150 <_malloc_r+0xa8>
 800c130:	6822      	ldr	r2, [r4, #0]
 800c132:	1b52      	subs	r2, r2, r5
 800c134:	d420      	bmi.n	800c178 <_malloc_r+0xd0>
 800c136:	2a0b      	cmp	r2, #11
 800c138:	d917      	bls.n	800c16a <_malloc_r+0xc2>
 800c13a:	1961      	adds	r1, r4, r5
 800c13c:	42a3      	cmp	r3, r4
 800c13e:	6025      	str	r5, [r4, #0]
 800c140:	bf18      	it	ne
 800c142:	6059      	strne	r1, [r3, #4]
 800c144:	6863      	ldr	r3, [r4, #4]
 800c146:	bf08      	it	eq
 800c148:	f8c8 1000 	streq.w	r1, [r8]
 800c14c:	5162      	str	r2, [r4, r5]
 800c14e:	604b      	str	r3, [r1, #4]
 800c150:	4630      	mov	r0, r6
 800c152:	f000 f82f 	bl	800c1b4 <__malloc_unlock>
 800c156:	f104 000b 	add.w	r0, r4, #11
 800c15a:	1d23      	adds	r3, r4, #4
 800c15c:	f020 0007 	bic.w	r0, r0, #7
 800c160:	1ac2      	subs	r2, r0, r3
 800c162:	bf1c      	itt	ne
 800c164:	1a1b      	subne	r3, r3, r0
 800c166:	50a3      	strne	r3, [r4, r2]
 800c168:	e7af      	b.n	800c0ca <_malloc_r+0x22>
 800c16a:	6862      	ldr	r2, [r4, #4]
 800c16c:	42a3      	cmp	r3, r4
 800c16e:	bf0c      	ite	eq
 800c170:	f8c8 2000 	streq.w	r2, [r8]
 800c174:	605a      	strne	r2, [r3, #4]
 800c176:	e7eb      	b.n	800c150 <_malloc_r+0xa8>
 800c178:	4623      	mov	r3, r4
 800c17a:	6864      	ldr	r4, [r4, #4]
 800c17c:	e7ae      	b.n	800c0dc <_malloc_r+0x34>
 800c17e:	463c      	mov	r4, r7
 800c180:	687f      	ldr	r7, [r7, #4]
 800c182:	e7b6      	b.n	800c0f2 <_malloc_r+0x4a>
 800c184:	461a      	mov	r2, r3
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	42a3      	cmp	r3, r4
 800c18a:	d1fb      	bne.n	800c184 <_malloc_r+0xdc>
 800c18c:	2300      	movs	r3, #0
 800c18e:	6053      	str	r3, [r2, #4]
 800c190:	e7de      	b.n	800c150 <_malloc_r+0xa8>
 800c192:	230c      	movs	r3, #12
 800c194:	6033      	str	r3, [r6, #0]
 800c196:	4630      	mov	r0, r6
 800c198:	f000 f80c 	bl	800c1b4 <__malloc_unlock>
 800c19c:	e794      	b.n	800c0c8 <_malloc_r+0x20>
 800c19e:	6005      	str	r5, [r0, #0]
 800c1a0:	e7d6      	b.n	800c150 <_malloc_r+0xa8>
 800c1a2:	bf00      	nop
 800c1a4:	20001c70 	.word	0x20001c70

0800c1a8 <__malloc_lock>:
 800c1a8:	4801      	ldr	r0, [pc, #4]	@ (800c1b0 <__malloc_lock+0x8>)
 800c1aa:	f7ff bf00 	b.w	800bfae <__retarget_lock_acquire_recursive>
 800c1ae:	bf00      	nop
 800c1b0:	20001c68 	.word	0x20001c68

0800c1b4 <__malloc_unlock>:
 800c1b4:	4801      	ldr	r0, [pc, #4]	@ (800c1bc <__malloc_unlock+0x8>)
 800c1b6:	f7ff befb 	b.w	800bfb0 <__retarget_lock_release_recursive>
 800c1ba:	bf00      	nop
 800c1bc:	20001c68 	.word	0x20001c68

0800c1c0 <__ssputs_r>:
 800c1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c4:	688e      	ldr	r6, [r1, #8]
 800c1c6:	461f      	mov	r7, r3
 800c1c8:	42be      	cmp	r6, r7
 800c1ca:	680b      	ldr	r3, [r1, #0]
 800c1cc:	4682      	mov	sl, r0
 800c1ce:	460c      	mov	r4, r1
 800c1d0:	4690      	mov	r8, r2
 800c1d2:	d82d      	bhi.n	800c230 <__ssputs_r+0x70>
 800c1d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c1dc:	d026      	beq.n	800c22c <__ssputs_r+0x6c>
 800c1de:	6965      	ldr	r5, [r4, #20]
 800c1e0:	6909      	ldr	r1, [r1, #16]
 800c1e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1e6:	eba3 0901 	sub.w	r9, r3, r1
 800c1ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1ee:	1c7b      	adds	r3, r7, #1
 800c1f0:	444b      	add	r3, r9
 800c1f2:	106d      	asrs	r5, r5, #1
 800c1f4:	429d      	cmp	r5, r3
 800c1f6:	bf38      	it	cc
 800c1f8:	461d      	movcc	r5, r3
 800c1fa:	0553      	lsls	r3, r2, #21
 800c1fc:	d527      	bpl.n	800c24e <__ssputs_r+0x8e>
 800c1fe:	4629      	mov	r1, r5
 800c200:	f7ff ff52 	bl	800c0a8 <_malloc_r>
 800c204:	4606      	mov	r6, r0
 800c206:	b360      	cbz	r0, 800c262 <__ssputs_r+0xa2>
 800c208:	6921      	ldr	r1, [r4, #16]
 800c20a:	464a      	mov	r2, r9
 800c20c:	f7ff fed1 	bl	800bfb2 <memcpy>
 800c210:	89a3      	ldrh	r3, [r4, #12]
 800c212:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c21a:	81a3      	strh	r3, [r4, #12]
 800c21c:	6126      	str	r6, [r4, #16]
 800c21e:	6165      	str	r5, [r4, #20]
 800c220:	444e      	add	r6, r9
 800c222:	eba5 0509 	sub.w	r5, r5, r9
 800c226:	6026      	str	r6, [r4, #0]
 800c228:	60a5      	str	r5, [r4, #8]
 800c22a:	463e      	mov	r6, r7
 800c22c:	42be      	cmp	r6, r7
 800c22e:	d900      	bls.n	800c232 <__ssputs_r+0x72>
 800c230:	463e      	mov	r6, r7
 800c232:	6820      	ldr	r0, [r4, #0]
 800c234:	4632      	mov	r2, r6
 800c236:	4641      	mov	r1, r8
 800c238:	f7ff fe06 	bl	800be48 <memmove>
 800c23c:	68a3      	ldr	r3, [r4, #8]
 800c23e:	1b9b      	subs	r3, r3, r6
 800c240:	60a3      	str	r3, [r4, #8]
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	4433      	add	r3, r6
 800c246:	6023      	str	r3, [r4, #0]
 800c248:	2000      	movs	r0, #0
 800c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24e:	462a      	mov	r2, r5
 800c250:	f000 fd50 	bl	800ccf4 <_realloc_r>
 800c254:	4606      	mov	r6, r0
 800c256:	2800      	cmp	r0, #0
 800c258:	d1e0      	bne.n	800c21c <__ssputs_r+0x5c>
 800c25a:	6921      	ldr	r1, [r4, #16]
 800c25c:	4650      	mov	r0, sl
 800c25e:	f7ff feb7 	bl	800bfd0 <_free_r>
 800c262:	230c      	movs	r3, #12
 800c264:	f8ca 3000 	str.w	r3, [sl]
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c26e:	81a3      	strh	r3, [r4, #12]
 800c270:	f04f 30ff 	mov.w	r0, #4294967295
 800c274:	e7e9      	b.n	800c24a <__ssputs_r+0x8a>
	...

0800c278 <_svfiprintf_r>:
 800c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27c:	4698      	mov	r8, r3
 800c27e:	898b      	ldrh	r3, [r1, #12]
 800c280:	061b      	lsls	r3, r3, #24
 800c282:	b09d      	sub	sp, #116	@ 0x74
 800c284:	4607      	mov	r7, r0
 800c286:	460d      	mov	r5, r1
 800c288:	4614      	mov	r4, r2
 800c28a:	d510      	bpl.n	800c2ae <_svfiprintf_r+0x36>
 800c28c:	690b      	ldr	r3, [r1, #16]
 800c28e:	b973      	cbnz	r3, 800c2ae <_svfiprintf_r+0x36>
 800c290:	2140      	movs	r1, #64	@ 0x40
 800c292:	f7ff ff09 	bl	800c0a8 <_malloc_r>
 800c296:	6028      	str	r0, [r5, #0]
 800c298:	6128      	str	r0, [r5, #16]
 800c29a:	b930      	cbnz	r0, 800c2aa <_svfiprintf_r+0x32>
 800c29c:	230c      	movs	r3, #12
 800c29e:	603b      	str	r3, [r7, #0]
 800c2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a4:	b01d      	add	sp, #116	@ 0x74
 800c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2aa:	2340      	movs	r3, #64	@ 0x40
 800c2ac:	616b      	str	r3, [r5, #20]
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2b2:	2320      	movs	r3, #32
 800c2b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2bc:	2330      	movs	r3, #48	@ 0x30
 800c2be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c45c <_svfiprintf_r+0x1e4>
 800c2c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2c6:	f04f 0901 	mov.w	r9, #1
 800c2ca:	4623      	mov	r3, r4
 800c2cc:	469a      	mov	sl, r3
 800c2ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2d2:	b10a      	cbz	r2, 800c2d8 <_svfiprintf_r+0x60>
 800c2d4:	2a25      	cmp	r2, #37	@ 0x25
 800c2d6:	d1f9      	bne.n	800c2cc <_svfiprintf_r+0x54>
 800c2d8:	ebba 0b04 	subs.w	fp, sl, r4
 800c2dc:	d00b      	beq.n	800c2f6 <_svfiprintf_r+0x7e>
 800c2de:	465b      	mov	r3, fp
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	4638      	mov	r0, r7
 800c2e6:	f7ff ff6b 	bl	800c1c0 <__ssputs_r>
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	f000 80a7 	beq.w	800c43e <_svfiprintf_r+0x1c6>
 800c2f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2f2:	445a      	add	r2, fp
 800c2f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	f000 809f 	beq.w	800c43e <_svfiprintf_r+0x1c6>
 800c300:	2300      	movs	r3, #0
 800c302:	f04f 32ff 	mov.w	r2, #4294967295
 800c306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c30a:	f10a 0a01 	add.w	sl, sl, #1
 800c30e:	9304      	str	r3, [sp, #16]
 800c310:	9307      	str	r3, [sp, #28]
 800c312:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c316:	931a      	str	r3, [sp, #104]	@ 0x68
 800c318:	4654      	mov	r4, sl
 800c31a:	2205      	movs	r2, #5
 800c31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c320:	484e      	ldr	r0, [pc, #312]	@ (800c45c <_svfiprintf_r+0x1e4>)
 800c322:	f7f3 ff8d 	bl	8000240 <memchr>
 800c326:	9a04      	ldr	r2, [sp, #16]
 800c328:	b9d8      	cbnz	r0, 800c362 <_svfiprintf_r+0xea>
 800c32a:	06d0      	lsls	r0, r2, #27
 800c32c:	bf44      	itt	mi
 800c32e:	2320      	movmi	r3, #32
 800c330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c334:	0711      	lsls	r1, r2, #28
 800c336:	bf44      	itt	mi
 800c338:	232b      	movmi	r3, #43	@ 0x2b
 800c33a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c33e:	f89a 3000 	ldrb.w	r3, [sl]
 800c342:	2b2a      	cmp	r3, #42	@ 0x2a
 800c344:	d015      	beq.n	800c372 <_svfiprintf_r+0xfa>
 800c346:	9a07      	ldr	r2, [sp, #28]
 800c348:	4654      	mov	r4, sl
 800c34a:	2000      	movs	r0, #0
 800c34c:	f04f 0c0a 	mov.w	ip, #10
 800c350:	4621      	mov	r1, r4
 800c352:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c356:	3b30      	subs	r3, #48	@ 0x30
 800c358:	2b09      	cmp	r3, #9
 800c35a:	d94b      	bls.n	800c3f4 <_svfiprintf_r+0x17c>
 800c35c:	b1b0      	cbz	r0, 800c38c <_svfiprintf_r+0x114>
 800c35e:	9207      	str	r2, [sp, #28]
 800c360:	e014      	b.n	800c38c <_svfiprintf_r+0x114>
 800c362:	eba0 0308 	sub.w	r3, r0, r8
 800c366:	fa09 f303 	lsl.w	r3, r9, r3
 800c36a:	4313      	orrs	r3, r2
 800c36c:	9304      	str	r3, [sp, #16]
 800c36e:	46a2      	mov	sl, r4
 800c370:	e7d2      	b.n	800c318 <_svfiprintf_r+0xa0>
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	1d19      	adds	r1, r3, #4
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	9103      	str	r1, [sp, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	bfbb      	ittet	lt
 800c37e:	425b      	neglt	r3, r3
 800c380:	f042 0202 	orrlt.w	r2, r2, #2
 800c384:	9307      	strge	r3, [sp, #28]
 800c386:	9307      	strlt	r3, [sp, #28]
 800c388:	bfb8      	it	lt
 800c38a:	9204      	strlt	r2, [sp, #16]
 800c38c:	7823      	ldrb	r3, [r4, #0]
 800c38e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c390:	d10a      	bne.n	800c3a8 <_svfiprintf_r+0x130>
 800c392:	7863      	ldrb	r3, [r4, #1]
 800c394:	2b2a      	cmp	r3, #42	@ 0x2a
 800c396:	d132      	bne.n	800c3fe <_svfiprintf_r+0x186>
 800c398:	9b03      	ldr	r3, [sp, #12]
 800c39a:	1d1a      	adds	r2, r3, #4
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	9203      	str	r2, [sp, #12]
 800c3a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3a4:	3402      	adds	r4, #2
 800c3a6:	9305      	str	r3, [sp, #20]
 800c3a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c46c <_svfiprintf_r+0x1f4>
 800c3ac:	7821      	ldrb	r1, [r4, #0]
 800c3ae:	2203      	movs	r2, #3
 800c3b0:	4650      	mov	r0, sl
 800c3b2:	f7f3 ff45 	bl	8000240 <memchr>
 800c3b6:	b138      	cbz	r0, 800c3c8 <_svfiprintf_r+0x150>
 800c3b8:	9b04      	ldr	r3, [sp, #16]
 800c3ba:	eba0 000a 	sub.w	r0, r0, sl
 800c3be:	2240      	movs	r2, #64	@ 0x40
 800c3c0:	4082      	lsls	r2, r0
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	3401      	adds	r4, #1
 800c3c6:	9304      	str	r3, [sp, #16]
 800c3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3cc:	4824      	ldr	r0, [pc, #144]	@ (800c460 <_svfiprintf_r+0x1e8>)
 800c3ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3d2:	2206      	movs	r2, #6
 800c3d4:	f7f3 ff34 	bl	8000240 <memchr>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d036      	beq.n	800c44a <_svfiprintf_r+0x1d2>
 800c3dc:	4b21      	ldr	r3, [pc, #132]	@ (800c464 <_svfiprintf_r+0x1ec>)
 800c3de:	bb1b      	cbnz	r3, 800c428 <_svfiprintf_r+0x1b0>
 800c3e0:	9b03      	ldr	r3, [sp, #12]
 800c3e2:	3307      	adds	r3, #7
 800c3e4:	f023 0307 	bic.w	r3, r3, #7
 800c3e8:	3308      	adds	r3, #8
 800c3ea:	9303      	str	r3, [sp, #12]
 800c3ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ee:	4433      	add	r3, r6
 800c3f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3f2:	e76a      	b.n	800c2ca <_svfiprintf_r+0x52>
 800c3f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	2001      	movs	r0, #1
 800c3fc:	e7a8      	b.n	800c350 <_svfiprintf_r+0xd8>
 800c3fe:	2300      	movs	r3, #0
 800c400:	3401      	adds	r4, #1
 800c402:	9305      	str	r3, [sp, #20]
 800c404:	4619      	mov	r1, r3
 800c406:	f04f 0c0a 	mov.w	ip, #10
 800c40a:	4620      	mov	r0, r4
 800c40c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c410:	3a30      	subs	r2, #48	@ 0x30
 800c412:	2a09      	cmp	r2, #9
 800c414:	d903      	bls.n	800c41e <_svfiprintf_r+0x1a6>
 800c416:	2b00      	cmp	r3, #0
 800c418:	d0c6      	beq.n	800c3a8 <_svfiprintf_r+0x130>
 800c41a:	9105      	str	r1, [sp, #20]
 800c41c:	e7c4      	b.n	800c3a8 <_svfiprintf_r+0x130>
 800c41e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c422:	4604      	mov	r4, r0
 800c424:	2301      	movs	r3, #1
 800c426:	e7f0      	b.n	800c40a <_svfiprintf_r+0x192>
 800c428:	ab03      	add	r3, sp, #12
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	462a      	mov	r2, r5
 800c42e:	4b0e      	ldr	r3, [pc, #56]	@ (800c468 <_svfiprintf_r+0x1f0>)
 800c430:	a904      	add	r1, sp, #16
 800c432:	4638      	mov	r0, r7
 800c434:	f3af 8000 	nop.w
 800c438:	1c42      	adds	r2, r0, #1
 800c43a:	4606      	mov	r6, r0
 800c43c:	d1d6      	bne.n	800c3ec <_svfiprintf_r+0x174>
 800c43e:	89ab      	ldrh	r3, [r5, #12]
 800c440:	065b      	lsls	r3, r3, #25
 800c442:	f53f af2d 	bmi.w	800c2a0 <_svfiprintf_r+0x28>
 800c446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c448:	e72c      	b.n	800c2a4 <_svfiprintf_r+0x2c>
 800c44a:	ab03      	add	r3, sp, #12
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	462a      	mov	r2, r5
 800c450:	4b05      	ldr	r3, [pc, #20]	@ (800c468 <_svfiprintf_r+0x1f0>)
 800c452:	a904      	add	r1, sp, #16
 800c454:	4638      	mov	r0, r7
 800c456:	f000 f9bb 	bl	800c7d0 <_printf_i>
 800c45a:	e7ed      	b.n	800c438 <_svfiprintf_r+0x1c0>
 800c45c:	0800def1 	.word	0x0800def1
 800c460:	0800defb 	.word	0x0800defb
 800c464:	00000000 	.word	0x00000000
 800c468:	0800c1c1 	.word	0x0800c1c1
 800c46c:	0800def7 	.word	0x0800def7

0800c470 <__sfputc_r>:
 800c470:	6893      	ldr	r3, [r2, #8]
 800c472:	3b01      	subs	r3, #1
 800c474:	2b00      	cmp	r3, #0
 800c476:	b410      	push	{r4}
 800c478:	6093      	str	r3, [r2, #8]
 800c47a:	da08      	bge.n	800c48e <__sfputc_r+0x1e>
 800c47c:	6994      	ldr	r4, [r2, #24]
 800c47e:	42a3      	cmp	r3, r4
 800c480:	db01      	blt.n	800c486 <__sfputc_r+0x16>
 800c482:	290a      	cmp	r1, #10
 800c484:	d103      	bne.n	800c48e <__sfputc_r+0x1e>
 800c486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c48a:	f7ff bc49 	b.w	800bd20 <__swbuf_r>
 800c48e:	6813      	ldr	r3, [r2, #0]
 800c490:	1c58      	adds	r0, r3, #1
 800c492:	6010      	str	r0, [r2, #0]
 800c494:	7019      	strb	r1, [r3, #0]
 800c496:	4608      	mov	r0, r1
 800c498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <__sfputs_r>:
 800c49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a0:	4606      	mov	r6, r0
 800c4a2:	460f      	mov	r7, r1
 800c4a4:	4614      	mov	r4, r2
 800c4a6:	18d5      	adds	r5, r2, r3
 800c4a8:	42ac      	cmp	r4, r5
 800c4aa:	d101      	bne.n	800c4b0 <__sfputs_r+0x12>
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	e007      	b.n	800c4c0 <__sfputs_r+0x22>
 800c4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b4:	463a      	mov	r2, r7
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	f7ff ffda 	bl	800c470 <__sfputc_r>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d1f3      	bne.n	800c4a8 <__sfputs_r+0xa>
 800c4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4c4 <_vfiprintf_r>:
 800c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c8:	460d      	mov	r5, r1
 800c4ca:	b09d      	sub	sp, #116	@ 0x74
 800c4cc:	4614      	mov	r4, r2
 800c4ce:	4698      	mov	r8, r3
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	b118      	cbz	r0, 800c4dc <_vfiprintf_r+0x18>
 800c4d4:	6a03      	ldr	r3, [r0, #32]
 800c4d6:	b90b      	cbnz	r3, 800c4dc <_vfiprintf_r+0x18>
 800c4d8:	f7ff face 	bl	800ba78 <__sinit>
 800c4dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4de:	07d9      	lsls	r1, r3, #31
 800c4e0:	d405      	bmi.n	800c4ee <_vfiprintf_r+0x2a>
 800c4e2:	89ab      	ldrh	r3, [r5, #12]
 800c4e4:	059a      	lsls	r2, r3, #22
 800c4e6:	d402      	bmi.n	800c4ee <_vfiprintf_r+0x2a>
 800c4e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4ea:	f7ff fd60 	bl	800bfae <__retarget_lock_acquire_recursive>
 800c4ee:	89ab      	ldrh	r3, [r5, #12]
 800c4f0:	071b      	lsls	r3, r3, #28
 800c4f2:	d501      	bpl.n	800c4f8 <_vfiprintf_r+0x34>
 800c4f4:	692b      	ldr	r3, [r5, #16]
 800c4f6:	b99b      	cbnz	r3, 800c520 <_vfiprintf_r+0x5c>
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	f7ff fc4e 	bl	800bd9c <__swsetup_r>
 800c500:	b170      	cbz	r0, 800c520 <_vfiprintf_r+0x5c>
 800c502:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c504:	07dc      	lsls	r4, r3, #31
 800c506:	d504      	bpl.n	800c512 <_vfiprintf_r+0x4e>
 800c508:	f04f 30ff 	mov.w	r0, #4294967295
 800c50c:	b01d      	add	sp, #116	@ 0x74
 800c50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	0598      	lsls	r0, r3, #22
 800c516:	d4f7      	bmi.n	800c508 <_vfiprintf_r+0x44>
 800c518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c51a:	f7ff fd49 	bl	800bfb0 <__retarget_lock_release_recursive>
 800c51e:	e7f3      	b.n	800c508 <_vfiprintf_r+0x44>
 800c520:	2300      	movs	r3, #0
 800c522:	9309      	str	r3, [sp, #36]	@ 0x24
 800c524:	2320      	movs	r3, #32
 800c526:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c52a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c52e:	2330      	movs	r3, #48	@ 0x30
 800c530:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c6e0 <_vfiprintf_r+0x21c>
 800c534:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c538:	f04f 0901 	mov.w	r9, #1
 800c53c:	4623      	mov	r3, r4
 800c53e:	469a      	mov	sl, r3
 800c540:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c544:	b10a      	cbz	r2, 800c54a <_vfiprintf_r+0x86>
 800c546:	2a25      	cmp	r2, #37	@ 0x25
 800c548:	d1f9      	bne.n	800c53e <_vfiprintf_r+0x7a>
 800c54a:	ebba 0b04 	subs.w	fp, sl, r4
 800c54e:	d00b      	beq.n	800c568 <_vfiprintf_r+0xa4>
 800c550:	465b      	mov	r3, fp
 800c552:	4622      	mov	r2, r4
 800c554:	4629      	mov	r1, r5
 800c556:	4630      	mov	r0, r6
 800c558:	f7ff ffa1 	bl	800c49e <__sfputs_r>
 800c55c:	3001      	adds	r0, #1
 800c55e:	f000 80a7 	beq.w	800c6b0 <_vfiprintf_r+0x1ec>
 800c562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c564:	445a      	add	r2, fp
 800c566:	9209      	str	r2, [sp, #36]	@ 0x24
 800c568:	f89a 3000 	ldrb.w	r3, [sl]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 809f 	beq.w	800c6b0 <_vfiprintf_r+0x1ec>
 800c572:	2300      	movs	r3, #0
 800c574:	f04f 32ff 	mov.w	r2, #4294967295
 800c578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c57c:	f10a 0a01 	add.w	sl, sl, #1
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	9307      	str	r3, [sp, #28]
 800c584:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c588:	931a      	str	r3, [sp, #104]	@ 0x68
 800c58a:	4654      	mov	r4, sl
 800c58c:	2205      	movs	r2, #5
 800c58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c592:	4853      	ldr	r0, [pc, #332]	@ (800c6e0 <_vfiprintf_r+0x21c>)
 800c594:	f7f3 fe54 	bl	8000240 <memchr>
 800c598:	9a04      	ldr	r2, [sp, #16]
 800c59a:	b9d8      	cbnz	r0, 800c5d4 <_vfiprintf_r+0x110>
 800c59c:	06d1      	lsls	r1, r2, #27
 800c59e:	bf44      	itt	mi
 800c5a0:	2320      	movmi	r3, #32
 800c5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5a6:	0713      	lsls	r3, r2, #28
 800c5a8:	bf44      	itt	mi
 800c5aa:	232b      	movmi	r3, #43	@ 0x2b
 800c5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5b6:	d015      	beq.n	800c5e4 <_vfiprintf_r+0x120>
 800c5b8:	9a07      	ldr	r2, [sp, #28]
 800c5ba:	4654      	mov	r4, sl
 800c5bc:	2000      	movs	r0, #0
 800c5be:	f04f 0c0a 	mov.w	ip, #10
 800c5c2:	4621      	mov	r1, r4
 800c5c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5c8:	3b30      	subs	r3, #48	@ 0x30
 800c5ca:	2b09      	cmp	r3, #9
 800c5cc:	d94b      	bls.n	800c666 <_vfiprintf_r+0x1a2>
 800c5ce:	b1b0      	cbz	r0, 800c5fe <_vfiprintf_r+0x13a>
 800c5d0:	9207      	str	r2, [sp, #28]
 800c5d2:	e014      	b.n	800c5fe <_vfiprintf_r+0x13a>
 800c5d4:	eba0 0308 	sub.w	r3, r0, r8
 800c5d8:	fa09 f303 	lsl.w	r3, r9, r3
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	9304      	str	r3, [sp, #16]
 800c5e0:	46a2      	mov	sl, r4
 800c5e2:	e7d2      	b.n	800c58a <_vfiprintf_r+0xc6>
 800c5e4:	9b03      	ldr	r3, [sp, #12]
 800c5e6:	1d19      	adds	r1, r3, #4
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	9103      	str	r1, [sp, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	bfbb      	ittet	lt
 800c5f0:	425b      	neglt	r3, r3
 800c5f2:	f042 0202 	orrlt.w	r2, r2, #2
 800c5f6:	9307      	strge	r3, [sp, #28]
 800c5f8:	9307      	strlt	r3, [sp, #28]
 800c5fa:	bfb8      	it	lt
 800c5fc:	9204      	strlt	r2, [sp, #16]
 800c5fe:	7823      	ldrb	r3, [r4, #0]
 800c600:	2b2e      	cmp	r3, #46	@ 0x2e
 800c602:	d10a      	bne.n	800c61a <_vfiprintf_r+0x156>
 800c604:	7863      	ldrb	r3, [r4, #1]
 800c606:	2b2a      	cmp	r3, #42	@ 0x2a
 800c608:	d132      	bne.n	800c670 <_vfiprintf_r+0x1ac>
 800c60a:	9b03      	ldr	r3, [sp, #12]
 800c60c:	1d1a      	adds	r2, r3, #4
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	9203      	str	r2, [sp, #12]
 800c612:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c616:	3402      	adds	r4, #2
 800c618:	9305      	str	r3, [sp, #20]
 800c61a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c6f0 <_vfiprintf_r+0x22c>
 800c61e:	7821      	ldrb	r1, [r4, #0]
 800c620:	2203      	movs	r2, #3
 800c622:	4650      	mov	r0, sl
 800c624:	f7f3 fe0c 	bl	8000240 <memchr>
 800c628:	b138      	cbz	r0, 800c63a <_vfiprintf_r+0x176>
 800c62a:	9b04      	ldr	r3, [sp, #16]
 800c62c:	eba0 000a 	sub.w	r0, r0, sl
 800c630:	2240      	movs	r2, #64	@ 0x40
 800c632:	4082      	lsls	r2, r0
 800c634:	4313      	orrs	r3, r2
 800c636:	3401      	adds	r4, #1
 800c638:	9304      	str	r3, [sp, #16]
 800c63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c63e:	4829      	ldr	r0, [pc, #164]	@ (800c6e4 <_vfiprintf_r+0x220>)
 800c640:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c644:	2206      	movs	r2, #6
 800c646:	f7f3 fdfb 	bl	8000240 <memchr>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d03f      	beq.n	800c6ce <_vfiprintf_r+0x20a>
 800c64e:	4b26      	ldr	r3, [pc, #152]	@ (800c6e8 <_vfiprintf_r+0x224>)
 800c650:	bb1b      	cbnz	r3, 800c69a <_vfiprintf_r+0x1d6>
 800c652:	9b03      	ldr	r3, [sp, #12]
 800c654:	3307      	adds	r3, #7
 800c656:	f023 0307 	bic.w	r3, r3, #7
 800c65a:	3308      	adds	r3, #8
 800c65c:	9303      	str	r3, [sp, #12]
 800c65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c660:	443b      	add	r3, r7
 800c662:	9309      	str	r3, [sp, #36]	@ 0x24
 800c664:	e76a      	b.n	800c53c <_vfiprintf_r+0x78>
 800c666:	fb0c 3202 	mla	r2, ip, r2, r3
 800c66a:	460c      	mov	r4, r1
 800c66c:	2001      	movs	r0, #1
 800c66e:	e7a8      	b.n	800c5c2 <_vfiprintf_r+0xfe>
 800c670:	2300      	movs	r3, #0
 800c672:	3401      	adds	r4, #1
 800c674:	9305      	str	r3, [sp, #20]
 800c676:	4619      	mov	r1, r3
 800c678:	f04f 0c0a 	mov.w	ip, #10
 800c67c:	4620      	mov	r0, r4
 800c67e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c682:	3a30      	subs	r2, #48	@ 0x30
 800c684:	2a09      	cmp	r2, #9
 800c686:	d903      	bls.n	800c690 <_vfiprintf_r+0x1cc>
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d0c6      	beq.n	800c61a <_vfiprintf_r+0x156>
 800c68c:	9105      	str	r1, [sp, #20]
 800c68e:	e7c4      	b.n	800c61a <_vfiprintf_r+0x156>
 800c690:	fb0c 2101 	mla	r1, ip, r1, r2
 800c694:	4604      	mov	r4, r0
 800c696:	2301      	movs	r3, #1
 800c698:	e7f0      	b.n	800c67c <_vfiprintf_r+0x1b8>
 800c69a:	ab03      	add	r3, sp, #12
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	462a      	mov	r2, r5
 800c6a0:	4b12      	ldr	r3, [pc, #72]	@ (800c6ec <_vfiprintf_r+0x228>)
 800c6a2:	a904      	add	r1, sp, #16
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	f3af 8000 	nop.w
 800c6aa:	4607      	mov	r7, r0
 800c6ac:	1c78      	adds	r0, r7, #1
 800c6ae:	d1d6      	bne.n	800c65e <_vfiprintf_r+0x19a>
 800c6b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6b2:	07d9      	lsls	r1, r3, #31
 800c6b4:	d405      	bmi.n	800c6c2 <_vfiprintf_r+0x1fe>
 800c6b6:	89ab      	ldrh	r3, [r5, #12]
 800c6b8:	059a      	lsls	r2, r3, #22
 800c6ba:	d402      	bmi.n	800c6c2 <_vfiprintf_r+0x1fe>
 800c6bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6be:	f7ff fc77 	bl	800bfb0 <__retarget_lock_release_recursive>
 800c6c2:	89ab      	ldrh	r3, [r5, #12]
 800c6c4:	065b      	lsls	r3, r3, #25
 800c6c6:	f53f af1f 	bmi.w	800c508 <_vfiprintf_r+0x44>
 800c6ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6cc:	e71e      	b.n	800c50c <_vfiprintf_r+0x48>
 800c6ce:	ab03      	add	r3, sp, #12
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	462a      	mov	r2, r5
 800c6d4:	4b05      	ldr	r3, [pc, #20]	@ (800c6ec <_vfiprintf_r+0x228>)
 800c6d6:	a904      	add	r1, sp, #16
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f000 f879 	bl	800c7d0 <_printf_i>
 800c6de:	e7e4      	b.n	800c6aa <_vfiprintf_r+0x1e6>
 800c6e0:	0800def1 	.word	0x0800def1
 800c6e4:	0800defb 	.word	0x0800defb
 800c6e8:	00000000 	.word	0x00000000
 800c6ec:	0800c49f 	.word	0x0800c49f
 800c6f0:	0800def7 	.word	0x0800def7

0800c6f4 <_printf_common>:
 800c6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f8:	4616      	mov	r6, r2
 800c6fa:	4698      	mov	r8, r3
 800c6fc:	688a      	ldr	r2, [r1, #8]
 800c6fe:	690b      	ldr	r3, [r1, #16]
 800c700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c704:	4293      	cmp	r3, r2
 800c706:	bfb8      	it	lt
 800c708:	4613      	movlt	r3, r2
 800c70a:	6033      	str	r3, [r6, #0]
 800c70c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c710:	4607      	mov	r7, r0
 800c712:	460c      	mov	r4, r1
 800c714:	b10a      	cbz	r2, 800c71a <_printf_common+0x26>
 800c716:	3301      	adds	r3, #1
 800c718:	6033      	str	r3, [r6, #0]
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	0699      	lsls	r1, r3, #26
 800c71e:	bf42      	ittt	mi
 800c720:	6833      	ldrmi	r3, [r6, #0]
 800c722:	3302      	addmi	r3, #2
 800c724:	6033      	strmi	r3, [r6, #0]
 800c726:	6825      	ldr	r5, [r4, #0]
 800c728:	f015 0506 	ands.w	r5, r5, #6
 800c72c:	d106      	bne.n	800c73c <_printf_common+0x48>
 800c72e:	f104 0a19 	add.w	sl, r4, #25
 800c732:	68e3      	ldr	r3, [r4, #12]
 800c734:	6832      	ldr	r2, [r6, #0]
 800c736:	1a9b      	subs	r3, r3, r2
 800c738:	42ab      	cmp	r3, r5
 800c73a:	dc26      	bgt.n	800c78a <_printf_common+0x96>
 800c73c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c740:	6822      	ldr	r2, [r4, #0]
 800c742:	3b00      	subs	r3, #0
 800c744:	bf18      	it	ne
 800c746:	2301      	movne	r3, #1
 800c748:	0692      	lsls	r2, r2, #26
 800c74a:	d42b      	bmi.n	800c7a4 <_printf_common+0xb0>
 800c74c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c750:	4641      	mov	r1, r8
 800c752:	4638      	mov	r0, r7
 800c754:	47c8      	blx	r9
 800c756:	3001      	adds	r0, #1
 800c758:	d01e      	beq.n	800c798 <_printf_common+0xa4>
 800c75a:	6823      	ldr	r3, [r4, #0]
 800c75c:	6922      	ldr	r2, [r4, #16]
 800c75e:	f003 0306 	and.w	r3, r3, #6
 800c762:	2b04      	cmp	r3, #4
 800c764:	bf02      	ittt	eq
 800c766:	68e5      	ldreq	r5, [r4, #12]
 800c768:	6833      	ldreq	r3, [r6, #0]
 800c76a:	1aed      	subeq	r5, r5, r3
 800c76c:	68a3      	ldr	r3, [r4, #8]
 800c76e:	bf0c      	ite	eq
 800c770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c774:	2500      	movne	r5, #0
 800c776:	4293      	cmp	r3, r2
 800c778:	bfc4      	itt	gt
 800c77a:	1a9b      	subgt	r3, r3, r2
 800c77c:	18ed      	addgt	r5, r5, r3
 800c77e:	2600      	movs	r6, #0
 800c780:	341a      	adds	r4, #26
 800c782:	42b5      	cmp	r5, r6
 800c784:	d11a      	bne.n	800c7bc <_printf_common+0xc8>
 800c786:	2000      	movs	r0, #0
 800c788:	e008      	b.n	800c79c <_printf_common+0xa8>
 800c78a:	2301      	movs	r3, #1
 800c78c:	4652      	mov	r2, sl
 800c78e:	4641      	mov	r1, r8
 800c790:	4638      	mov	r0, r7
 800c792:	47c8      	blx	r9
 800c794:	3001      	adds	r0, #1
 800c796:	d103      	bne.n	800c7a0 <_printf_common+0xac>
 800c798:	f04f 30ff 	mov.w	r0, #4294967295
 800c79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a0:	3501      	adds	r5, #1
 800c7a2:	e7c6      	b.n	800c732 <_printf_common+0x3e>
 800c7a4:	18e1      	adds	r1, r4, r3
 800c7a6:	1c5a      	adds	r2, r3, #1
 800c7a8:	2030      	movs	r0, #48	@ 0x30
 800c7aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7ae:	4422      	add	r2, r4
 800c7b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c7b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c7b8:	3302      	adds	r3, #2
 800c7ba:	e7c7      	b.n	800c74c <_printf_common+0x58>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	4622      	mov	r2, r4
 800c7c0:	4641      	mov	r1, r8
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	47c8      	blx	r9
 800c7c6:	3001      	adds	r0, #1
 800c7c8:	d0e6      	beq.n	800c798 <_printf_common+0xa4>
 800c7ca:	3601      	adds	r6, #1
 800c7cc:	e7d9      	b.n	800c782 <_printf_common+0x8e>
	...

0800c7d0 <_printf_i>:
 800c7d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d4:	7e0f      	ldrb	r7, [r1, #24]
 800c7d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7d8:	2f78      	cmp	r7, #120	@ 0x78
 800c7da:	4691      	mov	r9, r2
 800c7dc:	4680      	mov	r8, r0
 800c7de:	460c      	mov	r4, r1
 800c7e0:	469a      	mov	sl, r3
 800c7e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7e6:	d807      	bhi.n	800c7f8 <_printf_i+0x28>
 800c7e8:	2f62      	cmp	r7, #98	@ 0x62
 800c7ea:	d80a      	bhi.n	800c802 <_printf_i+0x32>
 800c7ec:	2f00      	cmp	r7, #0
 800c7ee:	f000 80d1 	beq.w	800c994 <_printf_i+0x1c4>
 800c7f2:	2f58      	cmp	r7, #88	@ 0x58
 800c7f4:	f000 80b8 	beq.w	800c968 <_printf_i+0x198>
 800c7f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c800:	e03a      	b.n	800c878 <_printf_i+0xa8>
 800c802:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c806:	2b15      	cmp	r3, #21
 800c808:	d8f6      	bhi.n	800c7f8 <_printf_i+0x28>
 800c80a:	a101      	add	r1, pc, #4	@ (adr r1, 800c810 <_printf_i+0x40>)
 800c80c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c810:	0800c869 	.word	0x0800c869
 800c814:	0800c87d 	.word	0x0800c87d
 800c818:	0800c7f9 	.word	0x0800c7f9
 800c81c:	0800c7f9 	.word	0x0800c7f9
 800c820:	0800c7f9 	.word	0x0800c7f9
 800c824:	0800c7f9 	.word	0x0800c7f9
 800c828:	0800c87d 	.word	0x0800c87d
 800c82c:	0800c7f9 	.word	0x0800c7f9
 800c830:	0800c7f9 	.word	0x0800c7f9
 800c834:	0800c7f9 	.word	0x0800c7f9
 800c838:	0800c7f9 	.word	0x0800c7f9
 800c83c:	0800c97b 	.word	0x0800c97b
 800c840:	0800c8a7 	.word	0x0800c8a7
 800c844:	0800c935 	.word	0x0800c935
 800c848:	0800c7f9 	.word	0x0800c7f9
 800c84c:	0800c7f9 	.word	0x0800c7f9
 800c850:	0800c99d 	.word	0x0800c99d
 800c854:	0800c7f9 	.word	0x0800c7f9
 800c858:	0800c8a7 	.word	0x0800c8a7
 800c85c:	0800c7f9 	.word	0x0800c7f9
 800c860:	0800c7f9 	.word	0x0800c7f9
 800c864:	0800c93d 	.word	0x0800c93d
 800c868:	6833      	ldr	r3, [r6, #0]
 800c86a:	1d1a      	adds	r2, r3, #4
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6032      	str	r2, [r6, #0]
 800c870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c874:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c878:	2301      	movs	r3, #1
 800c87a:	e09c      	b.n	800c9b6 <_printf_i+0x1e6>
 800c87c:	6833      	ldr	r3, [r6, #0]
 800c87e:	6820      	ldr	r0, [r4, #0]
 800c880:	1d19      	adds	r1, r3, #4
 800c882:	6031      	str	r1, [r6, #0]
 800c884:	0606      	lsls	r6, r0, #24
 800c886:	d501      	bpl.n	800c88c <_printf_i+0xbc>
 800c888:	681d      	ldr	r5, [r3, #0]
 800c88a:	e003      	b.n	800c894 <_printf_i+0xc4>
 800c88c:	0645      	lsls	r5, r0, #25
 800c88e:	d5fb      	bpl.n	800c888 <_printf_i+0xb8>
 800c890:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c894:	2d00      	cmp	r5, #0
 800c896:	da03      	bge.n	800c8a0 <_printf_i+0xd0>
 800c898:	232d      	movs	r3, #45	@ 0x2d
 800c89a:	426d      	negs	r5, r5
 800c89c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8a0:	4858      	ldr	r0, [pc, #352]	@ (800ca04 <_printf_i+0x234>)
 800c8a2:	230a      	movs	r3, #10
 800c8a4:	e011      	b.n	800c8ca <_printf_i+0xfa>
 800c8a6:	6821      	ldr	r1, [r4, #0]
 800c8a8:	6833      	ldr	r3, [r6, #0]
 800c8aa:	0608      	lsls	r0, r1, #24
 800c8ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800c8b0:	d402      	bmi.n	800c8b8 <_printf_i+0xe8>
 800c8b2:	0649      	lsls	r1, r1, #25
 800c8b4:	bf48      	it	mi
 800c8b6:	b2ad      	uxthmi	r5, r5
 800c8b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c8ba:	4852      	ldr	r0, [pc, #328]	@ (800ca04 <_printf_i+0x234>)
 800c8bc:	6033      	str	r3, [r6, #0]
 800c8be:	bf14      	ite	ne
 800c8c0:	230a      	movne	r3, #10
 800c8c2:	2308      	moveq	r3, #8
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8ca:	6866      	ldr	r6, [r4, #4]
 800c8cc:	60a6      	str	r6, [r4, #8]
 800c8ce:	2e00      	cmp	r6, #0
 800c8d0:	db05      	blt.n	800c8de <_printf_i+0x10e>
 800c8d2:	6821      	ldr	r1, [r4, #0]
 800c8d4:	432e      	orrs	r6, r5
 800c8d6:	f021 0104 	bic.w	r1, r1, #4
 800c8da:	6021      	str	r1, [r4, #0]
 800c8dc:	d04b      	beq.n	800c976 <_printf_i+0x1a6>
 800c8de:	4616      	mov	r6, r2
 800c8e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8e4:	fb03 5711 	mls	r7, r3, r1, r5
 800c8e8:	5dc7      	ldrb	r7, [r0, r7]
 800c8ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8ee:	462f      	mov	r7, r5
 800c8f0:	42bb      	cmp	r3, r7
 800c8f2:	460d      	mov	r5, r1
 800c8f4:	d9f4      	bls.n	800c8e0 <_printf_i+0x110>
 800c8f6:	2b08      	cmp	r3, #8
 800c8f8:	d10b      	bne.n	800c912 <_printf_i+0x142>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	07df      	lsls	r7, r3, #31
 800c8fe:	d508      	bpl.n	800c912 <_printf_i+0x142>
 800c900:	6923      	ldr	r3, [r4, #16]
 800c902:	6861      	ldr	r1, [r4, #4]
 800c904:	4299      	cmp	r1, r3
 800c906:	bfde      	ittt	le
 800c908:	2330      	movle	r3, #48	@ 0x30
 800c90a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c90e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c912:	1b92      	subs	r2, r2, r6
 800c914:	6122      	str	r2, [r4, #16]
 800c916:	f8cd a000 	str.w	sl, [sp]
 800c91a:	464b      	mov	r3, r9
 800c91c:	aa03      	add	r2, sp, #12
 800c91e:	4621      	mov	r1, r4
 800c920:	4640      	mov	r0, r8
 800c922:	f7ff fee7 	bl	800c6f4 <_printf_common>
 800c926:	3001      	adds	r0, #1
 800c928:	d14a      	bne.n	800c9c0 <_printf_i+0x1f0>
 800c92a:	f04f 30ff 	mov.w	r0, #4294967295
 800c92e:	b004      	add	sp, #16
 800c930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	f043 0320 	orr.w	r3, r3, #32
 800c93a:	6023      	str	r3, [r4, #0]
 800c93c:	4832      	ldr	r0, [pc, #200]	@ (800ca08 <_printf_i+0x238>)
 800c93e:	2778      	movs	r7, #120	@ 0x78
 800c940:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	6831      	ldr	r1, [r6, #0]
 800c948:	061f      	lsls	r7, r3, #24
 800c94a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c94e:	d402      	bmi.n	800c956 <_printf_i+0x186>
 800c950:	065f      	lsls	r7, r3, #25
 800c952:	bf48      	it	mi
 800c954:	b2ad      	uxthmi	r5, r5
 800c956:	6031      	str	r1, [r6, #0]
 800c958:	07d9      	lsls	r1, r3, #31
 800c95a:	bf44      	itt	mi
 800c95c:	f043 0320 	orrmi.w	r3, r3, #32
 800c960:	6023      	strmi	r3, [r4, #0]
 800c962:	b11d      	cbz	r5, 800c96c <_printf_i+0x19c>
 800c964:	2310      	movs	r3, #16
 800c966:	e7ad      	b.n	800c8c4 <_printf_i+0xf4>
 800c968:	4826      	ldr	r0, [pc, #152]	@ (800ca04 <_printf_i+0x234>)
 800c96a:	e7e9      	b.n	800c940 <_printf_i+0x170>
 800c96c:	6823      	ldr	r3, [r4, #0]
 800c96e:	f023 0320 	bic.w	r3, r3, #32
 800c972:	6023      	str	r3, [r4, #0]
 800c974:	e7f6      	b.n	800c964 <_printf_i+0x194>
 800c976:	4616      	mov	r6, r2
 800c978:	e7bd      	b.n	800c8f6 <_printf_i+0x126>
 800c97a:	6833      	ldr	r3, [r6, #0]
 800c97c:	6825      	ldr	r5, [r4, #0]
 800c97e:	6961      	ldr	r1, [r4, #20]
 800c980:	1d18      	adds	r0, r3, #4
 800c982:	6030      	str	r0, [r6, #0]
 800c984:	062e      	lsls	r6, r5, #24
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	d501      	bpl.n	800c98e <_printf_i+0x1be>
 800c98a:	6019      	str	r1, [r3, #0]
 800c98c:	e002      	b.n	800c994 <_printf_i+0x1c4>
 800c98e:	0668      	lsls	r0, r5, #25
 800c990:	d5fb      	bpl.n	800c98a <_printf_i+0x1ba>
 800c992:	8019      	strh	r1, [r3, #0]
 800c994:	2300      	movs	r3, #0
 800c996:	6123      	str	r3, [r4, #16]
 800c998:	4616      	mov	r6, r2
 800c99a:	e7bc      	b.n	800c916 <_printf_i+0x146>
 800c99c:	6833      	ldr	r3, [r6, #0]
 800c99e:	1d1a      	adds	r2, r3, #4
 800c9a0:	6032      	str	r2, [r6, #0]
 800c9a2:	681e      	ldr	r6, [r3, #0]
 800c9a4:	6862      	ldr	r2, [r4, #4]
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f7f3 fc49 	bl	8000240 <memchr>
 800c9ae:	b108      	cbz	r0, 800c9b4 <_printf_i+0x1e4>
 800c9b0:	1b80      	subs	r0, r0, r6
 800c9b2:	6060      	str	r0, [r4, #4]
 800c9b4:	6863      	ldr	r3, [r4, #4]
 800c9b6:	6123      	str	r3, [r4, #16]
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9be:	e7aa      	b.n	800c916 <_printf_i+0x146>
 800c9c0:	6923      	ldr	r3, [r4, #16]
 800c9c2:	4632      	mov	r2, r6
 800c9c4:	4649      	mov	r1, r9
 800c9c6:	4640      	mov	r0, r8
 800c9c8:	47d0      	blx	sl
 800c9ca:	3001      	adds	r0, #1
 800c9cc:	d0ad      	beq.n	800c92a <_printf_i+0x15a>
 800c9ce:	6823      	ldr	r3, [r4, #0]
 800c9d0:	079b      	lsls	r3, r3, #30
 800c9d2:	d413      	bmi.n	800c9fc <_printf_i+0x22c>
 800c9d4:	68e0      	ldr	r0, [r4, #12]
 800c9d6:	9b03      	ldr	r3, [sp, #12]
 800c9d8:	4298      	cmp	r0, r3
 800c9da:	bfb8      	it	lt
 800c9dc:	4618      	movlt	r0, r3
 800c9de:	e7a6      	b.n	800c92e <_printf_i+0x15e>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	4632      	mov	r2, r6
 800c9e4:	4649      	mov	r1, r9
 800c9e6:	4640      	mov	r0, r8
 800c9e8:	47d0      	blx	sl
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	d09d      	beq.n	800c92a <_printf_i+0x15a>
 800c9ee:	3501      	adds	r5, #1
 800c9f0:	68e3      	ldr	r3, [r4, #12]
 800c9f2:	9903      	ldr	r1, [sp, #12]
 800c9f4:	1a5b      	subs	r3, r3, r1
 800c9f6:	42ab      	cmp	r3, r5
 800c9f8:	dcf2      	bgt.n	800c9e0 <_printf_i+0x210>
 800c9fa:	e7eb      	b.n	800c9d4 <_printf_i+0x204>
 800c9fc:	2500      	movs	r5, #0
 800c9fe:	f104 0619 	add.w	r6, r4, #25
 800ca02:	e7f5      	b.n	800c9f0 <_printf_i+0x220>
 800ca04:	0800df02 	.word	0x0800df02
 800ca08:	0800df13 	.word	0x0800df13

0800ca0c <__sflush_r>:
 800ca0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca14:	0716      	lsls	r6, r2, #28
 800ca16:	4605      	mov	r5, r0
 800ca18:	460c      	mov	r4, r1
 800ca1a:	d454      	bmi.n	800cac6 <__sflush_r+0xba>
 800ca1c:	684b      	ldr	r3, [r1, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	dc02      	bgt.n	800ca28 <__sflush_r+0x1c>
 800ca22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	dd48      	ble.n	800caba <__sflush_r+0xae>
 800ca28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca2a:	2e00      	cmp	r6, #0
 800ca2c:	d045      	beq.n	800caba <__sflush_r+0xae>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca34:	682f      	ldr	r7, [r5, #0]
 800ca36:	6a21      	ldr	r1, [r4, #32]
 800ca38:	602b      	str	r3, [r5, #0]
 800ca3a:	d030      	beq.n	800ca9e <__sflush_r+0x92>
 800ca3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	0759      	lsls	r1, r3, #29
 800ca42:	d505      	bpl.n	800ca50 <__sflush_r+0x44>
 800ca44:	6863      	ldr	r3, [r4, #4]
 800ca46:	1ad2      	subs	r2, r2, r3
 800ca48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca4a:	b10b      	cbz	r3, 800ca50 <__sflush_r+0x44>
 800ca4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca4e:	1ad2      	subs	r2, r2, r3
 800ca50:	2300      	movs	r3, #0
 800ca52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca54:	6a21      	ldr	r1, [r4, #32]
 800ca56:	4628      	mov	r0, r5
 800ca58:	47b0      	blx	r6
 800ca5a:	1c43      	adds	r3, r0, #1
 800ca5c:	89a3      	ldrh	r3, [r4, #12]
 800ca5e:	d106      	bne.n	800ca6e <__sflush_r+0x62>
 800ca60:	6829      	ldr	r1, [r5, #0]
 800ca62:	291d      	cmp	r1, #29
 800ca64:	d82b      	bhi.n	800cabe <__sflush_r+0xb2>
 800ca66:	4a2a      	ldr	r2, [pc, #168]	@ (800cb10 <__sflush_r+0x104>)
 800ca68:	40ca      	lsrs	r2, r1
 800ca6a:	07d6      	lsls	r6, r2, #31
 800ca6c:	d527      	bpl.n	800cabe <__sflush_r+0xb2>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	6062      	str	r2, [r4, #4]
 800ca72:	04d9      	lsls	r1, r3, #19
 800ca74:	6922      	ldr	r2, [r4, #16]
 800ca76:	6022      	str	r2, [r4, #0]
 800ca78:	d504      	bpl.n	800ca84 <__sflush_r+0x78>
 800ca7a:	1c42      	adds	r2, r0, #1
 800ca7c:	d101      	bne.n	800ca82 <__sflush_r+0x76>
 800ca7e:	682b      	ldr	r3, [r5, #0]
 800ca80:	b903      	cbnz	r3, 800ca84 <__sflush_r+0x78>
 800ca82:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca86:	602f      	str	r7, [r5, #0]
 800ca88:	b1b9      	cbz	r1, 800caba <__sflush_r+0xae>
 800ca8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca8e:	4299      	cmp	r1, r3
 800ca90:	d002      	beq.n	800ca98 <__sflush_r+0x8c>
 800ca92:	4628      	mov	r0, r5
 800ca94:	f7ff fa9c 	bl	800bfd0 <_free_r>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca9c:	e00d      	b.n	800caba <__sflush_r+0xae>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	4628      	mov	r0, r5
 800caa2:	47b0      	blx	r6
 800caa4:	4602      	mov	r2, r0
 800caa6:	1c50      	adds	r0, r2, #1
 800caa8:	d1c9      	bne.n	800ca3e <__sflush_r+0x32>
 800caaa:	682b      	ldr	r3, [r5, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d0c6      	beq.n	800ca3e <__sflush_r+0x32>
 800cab0:	2b1d      	cmp	r3, #29
 800cab2:	d001      	beq.n	800cab8 <__sflush_r+0xac>
 800cab4:	2b16      	cmp	r3, #22
 800cab6:	d11e      	bne.n	800caf6 <__sflush_r+0xea>
 800cab8:	602f      	str	r7, [r5, #0]
 800caba:	2000      	movs	r0, #0
 800cabc:	e022      	b.n	800cb04 <__sflush_r+0xf8>
 800cabe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cac2:	b21b      	sxth	r3, r3
 800cac4:	e01b      	b.n	800cafe <__sflush_r+0xf2>
 800cac6:	690f      	ldr	r7, [r1, #16]
 800cac8:	2f00      	cmp	r7, #0
 800caca:	d0f6      	beq.n	800caba <__sflush_r+0xae>
 800cacc:	0793      	lsls	r3, r2, #30
 800cace:	680e      	ldr	r6, [r1, #0]
 800cad0:	bf08      	it	eq
 800cad2:	694b      	ldreq	r3, [r1, #20]
 800cad4:	600f      	str	r7, [r1, #0]
 800cad6:	bf18      	it	ne
 800cad8:	2300      	movne	r3, #0
 800cada:	eba6 0807 	sub.w	r8, r6, r7
 800cade:	608b      	str	r3, [r1, #8]
 800cae0:	f1b8 0f00 	cmp.w	r8, #0
 800cae4:	dde9      	ble.n	800caba <__sflush_r+0xae>
 800cae6:	6a21      	ldr	r1, [r4, #32]
 800cae8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800caea:	4643      	mov	r3, r8
 800caec:	463a      	mov	r2, r7
 800caee:	4628      	mov	r0, r5
 800caf0:	47b0      	blx	r6
 800caf2:	2800      	cmp	r0, #0
 800caf4:	dc08      	bgt.n	800cb08 <__sflush_r+0xfc>
 800caf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cafa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cafe:	81a3      	strh	r3, [r4, #12]
 800cb00:	f04f 30ff 	mov.w	r0, #4294967295
 800cb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb08:	4407      	add	r7, r0
 800cb0a:	eba8 0800 	sub.w	r8, r8, r0
 800cb0e:	e7e7      	b.n	800cae0 <__sflush_r+0xd4>
 800cb10:	20400001 	.word	0x20400001

0800cb14 <_fflush_r>:
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	690b      	ldr	r3, [r1, #16]
 800cb18:	4605      	mov	r5, r0
 800cb1a:	460c      	mov	r4, r1
 800cb1c:	b913      	cbnz	r3, 800cb24 <_fflush_r+0x10>
 800cb1e:	2500      	movs	r5, #0
 800cb20:	4628      	mov	r0, r5
 800cb22:	bd38      	pop	{r3, r4, r5, pc}
 800cb24:	b118      	cbz	r0, 800cb2e <_fflush_r+0x1a>
 800cb26:	6a03      	ldr	r3, [r0, #32]
 800cb28:	b90b      	cbnz	r3, 800cb2e <_fflush_r+0x1a>
 800cb2a:	f7fe ffa5 	bl	800ba78 <__sinit>
 800cb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d0f3      	beq.n	800cb1e <_fflush_r+0xa>
 800cb36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb38:	07d0      	lsls	r0, r2, #31
 800cb3a:	d404      	bmi.n	800cb46 <_fflush_r+0x32>
 800cb3c:	0599      	lsls	r1, r3, #22
 800cb3e:	d402      	bmi.n	800cb46 <_fflush_r+0x32>
 800cb40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb42:	f7ff fa34 	bl	800bfae <__retarget_lock_acquire_recursive>
 800cb46:	4628      	mov	r0, r5
 800cb48:	4621      	mov	r1, r4
 800cb4a:	f7ff ff5f 	bl	800ca0c <__sflush_r>
 800cb4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb50:	07da      	lsls	r2, r3, #31
 800cb52:	4605      	mov	r5, r0
 800cb54:	d4e4      	bmi.n	800cb20 <_fflush_r+0xc>
 800cb56:	89a3      	ldrh	r3, [r4, #12]
 800cb58:	059b      	lsls	r3, r3, #22
 800cb5a:	d4e1      	bmi.n	800cb20 <_fflush_r+0xc>
 800cb5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb5e:	f7ff fa27 	bl	800bfb0 <__retarget_lock_release_recursive>
 800cb62:	e7dd      	b.n	800cb20 <_fflush_r+0xc>

0800cb64 <__swhatbuf_r>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	460c      	mov	r4, r1
 800cb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb6c:	2900      	cmp	r1, #0
 800cb6e:	b096      	sub	sp, #88	@ 0x58
 800cb70:	4615      	mov	r5, r2
 800cb72:	461e      	mov	r6, r3
 800cb74:	da0d      	bge.n	800cb92 <__swhatbuf_r+0x2e>
 800cb76:	89a3      	ldrh	r3, [r4, #12]
 800cb78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb7c:	f04f 0100 	mov.w	r1, #0
 800cb80:	bf14      	ite	ne
 800cb82:	2340      	movne	r3, #64	@ 0x40
 800cb84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb88:	2000      	movs	r0, #0
 800cb8a:	6031      	str	r1, [r6, #0]
 800cb8c:	602b      	str	r3, [r5, #0]
 800cb8e:	b016      	add	sp, #88	@ 0x58
 800cb90:	bd70      	pop	{r4, r5, r6, pc}
 800cb92:	466a      	mov	r2, sp
 800cb94:	f000 f87c 	bl	800cc90 <_fstat_r>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	dbec      	blt.n	800cb76 <__swhatbuf_r+0x12>
 800cb9c:	9901      	ldr	r1, [sp, #4]
 800cb9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cba2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cba6:	4259      	negs	r1, r3
 800cba8:	4159      	adcs	r1, r3
 800cbaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbae:	e7eb      	b.n	800cb88 <__swhatbuf_r+0x24>

0800cbb0 <__smakebuf_r>:
 800cbb0:	898b      	ldrh	r3, [r1, #12]
 800cbb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbb4:	079d      	lsls	r5, r3, #30
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	460c      	mov	r4, r1
 800cbba:	d507      	bpl.n	800cbcc <__smakebuf_r+0x1c>
 800cbbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	6123      	str	r3, [r4, #16]
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	6163      	str	r3, [r4, #20]
 800cbc8:	b003      	add	sp, #12
 800cbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbcc:	ab01      	add	r3, sp, #4
 800cbce:	466a      	mov	r2, sp
 800cbd0:	f7ff ffc8 	bl	800cb64 <__swhatbuf_r>
 800cbd4:	9f00      	ldr	r7, [sp, #0]
 800cbd6:	4605      	mov	r5, r0
 800cbd8:	4639      	mov	r1, r7
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f7ff fa64 	bl	800c0a8 <_malloc_r>
 800cbe0:	b948      	cbnz	r0, 800cbf6 <__smakebuf_r+0x46>
 800cbe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe6:	059a      	lsls	r2, r3, #22
 800cbe8:	d4ee      	bmi.n	800cbc8 <__smakebuf_r+0x18>
 800cbea:	f023 0303 	bic.w	r3, r3, #3
 800cbee:	f043 0302 	orr.w	r3, r3, #2
 800cbf2:	81a3      	strh	r3, [r4, #12]
 800cbf4:	e7e2      	b.n	800cbbc <__smakebuf_r+0xc>
 800cbf6:	89a3      	ldrh	r3, [r4, #12]
 800cbf8:	6020      	str	r0, [r4, #0]
 800cbfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbfe:	81a3      	strh	r3, [r4, #12]
 800cc00:	9b01      	ldr	r3, [sp, #4]
 800cc02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc06:	b15b      	cbz	r3, 800cc20 <__smakebuf_r+0x70>
 800cc08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	f000 f851 	bl	800ccb4 <_isatty_r>
 800cc12:	b128      	cbz	r0, 800cc20 <__smakebuf_r+0x70>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	f023 0303 	bic.w	r3, r3, #3
 800cc1a:	f043 0301 	orr.w	r3, r3, #1
 800cc1e:	81a3      	strh	r3, [r4, #12]
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	431d      	orrs	r5, r3
 800cc24:	81a5      	strh	r5, [r4, #12]
 800cc26:	e7cf      	b.n	800cbc8 <__smakebuf_r+0x18>

0800cc28 <_putc_r>:
 800cc28:	b570      	push	{r4, r5, r6, lr}
 800cc2a:	460d      	mov	r5, r1
 800cc2c:	4614      	mov	r4, r2
 800cc2e:	4606      	mov	r6, r0
 800cc30:	b118      	cbz	r0, 800cc3a <_putc_r+0x12>
 800cc32:	6a03      	ldr	r3, [r0, #32]
 800cc34:	b90b      	cbnz	r3, 800cc3a <_putc_r+0x12>
 800cc36:	f7fe ff1f 	bl	800ba78 <__sinit>
 800cc3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc3c:	07d8      	lsls	r0, r3, #31
 800cc3e:	d405      	bmi.n	800cc4c <_putc_r+0x24>
 800cc40:	89a3      	ldrh	r3, [r4, #12]
 800cc42:	0599      	lsls	r1, r3, #22
 800cc44:	d402      	bmi.n	800cc4c <_putc_r+0x24>
 800cc46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc48:	f7ff f9b1 	bl	800bfae <__retarget_lock_acquire_recursive>
 800cc4c:	68a3      	ldr	r3, [r4, #8]
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	60a3      	str	r3, [r4, #8]
 800cc54:	da05      	bge.n	800cc62 <_putc_r+0x3a>
 800cc56:	69a2      	ldr	r2, [r4, #24]
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	db12      	blt.n	800cc82 <_putc_r+0x5a>
 800cc5c:	b2eb      	uxtb	r3, r5
 800cc5e:	2b0a      	cmp	r3, #10
 800cc60:	d00f      	beq.n	800cc82 <_putc_r+0x5a>
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	1c5a      	adds	r2, r3, #1
 800cc66:	6022      	str	r2, [r4, #0]
 800cc68:	701d      	strb	r5, [r3, #0]
 800cc6a:	b2ed      	uxtb	r5, r5
 800cc6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc6e:	07da      	lsls	r2, r3, #31
 800cc70:	d405      	bmi.n	800cc7e <_putc_r+0x56>
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	059b      	lsls	r3, r3, #22
 800cc76:	d402      	bmi.n	800cc7e <_putc_r+0x56>
 800cc78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc7a:	f7ff f999 	bl	800bfb0 <__retarget_lock_release_recursive>
 800cc7e:	4628      	mov	r0, r5
 800cc80:	bd70      	pop	{r4, r5, r6, pc}
 800cc82:	4629      	mov	r1, r5
 800cc84:	4622      	mov	r2, r4
 800cc86:	4630      	mov	r0, r6
 800cc88:	f7ff f84a 	bl	800bd20 <__swbuf_r>
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	e7ed      	b.n	800cc6c <_putc_r+0x44>

0800cc90 <_fstat_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4d07      	ldr	r5, [pc, #28]	@ (800ccb0 <_fstat_r+0x20>)
 800cc94:	2300      	movs	r3, #0
 800cc96:	4604      	mov	r4, r0
 800cc98:	4608      	mov	r0, r1
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	602b      	str	r3, [r5, #0]
 800cc9e:	f7fa fa3f 	bl	8007120 <_fstat>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	d102      	bne.n	800ccac <_fstat_r+0x1c>
 800cca6:	682b      	ldr	r3, [r5, #0]
 800cca8:	b103      	cbz	r3, 800ccac <_fstat_r+0x1c>
 800ccaa:	6023      	str	r3, [r4, #0]
 800ccac:	bd38      	pop	{r3, r4, r5, pc}
 800ccae:	bf00      	nop
 800ccb0:	20001c64 	.word	0x20001c64

0800ccb4 <_isatty_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4d06      	ldr	r5, [pc, #24]	@ (800ccd0 <_isatty_r+0x1c>)
 800ccb8:	2300      	movs	r3, #0
 800ccba:	4604      	mov	r4, r0
 800ccbc:	4608      	mov	r0, r1
 800ccbe:	602b      	str	r3, [r5, #0]
 800ccc0:	f7fa fa3e 	bl	8007140 <_isatty>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_isatty_r+0x1a>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_isatty_r+0x1a>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	20001c64 	.word	0x20001c64

0800ccd4 <_sbrk_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d06      	ldr	r5, [pc, #24]	@ (800ccf0 <_sbrk_r+0x1c>)
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4604      	mov	r4, r0
 800ccdc:	4608      	mov	r0, r1
 800ccde:	602b      	str	r3, [r5, #0]
 800cce0:	f7fa fa46 	bl	8007170 <_sbrk>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d102      	bne.n	800ccee <_sbrk_r+0x1a>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	b103      	cbz	r3, 800ccee <_sbrk_r+0x1a>
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	bd38      	pop	{r3, r4, r5, pc}
 800ccf0:	20001c64 	.word	0x20001c64

0800ccf4 <_realloc_r>:
 800ccf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf8:	4607      	mov	r7, r0
 800ccfa:	4614      	mov	r4, r2
 800ccfc:	460d      	mov	r5, r1
 800ccfe:	b921      	cbnz	r1, 800cd0a <_realloc_r+0x16>
 800cd00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd04:	4611      	mov	r1, r2
 800cd06:	f7ff b9cf 	b.w	800c0a8 <_malloc_r>
 800cd0a:	b92a      	cbnz	r2, 800cd18 <_realloc_r+0x24>
 800cd0c:	f7ff f960 	bl	800bfd0 <_free_r>
 800cd10:	4625      	mov	r5, r4
 800cd12:	4628      	mov	r0, r5
 800cd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd18:	f000 f81a 	bl	800cd50 <_malloc_usable_size_r>
 800cd1c:	4284      	cmp	r4, r0
 800cd1e:	4606      	mov	r6, r0
 800cd20:	d802      	bhi.n	800cd28 <_realloc_r+0x34>
 800cd22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd26:	d8f4      	bhi.n	800cd12 <_realloc_r+0x1e>
 800cd28:	4621      	mov	r1, r4
 800cd2a:	4638      	mov	r0, r7
 800cd2c:	f7ff f9bc 	bl	800c0a8 <_malloc_r>
 800cd30:	4680      	mov	r8, r0
 800cd32:	b908      	cbnz	r0, 800cd38 <_realloc_r+0x44>
 800cd34:	4645      	mov	r5, r8
 800cd36:	e7ec      	b.n	800cd12 <_realloc_r+0x1e>
 800cd38:	42b4      	cmp	r4, r6
 800cd3a:	4622      	mov	r2, r4
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	bf28      	it	cs
 800cd40:	4632      	movcs	r2, r6
 800cd42:	f7ff f936 	bl	800bfb2 <memcpy>
 800cd46:	4629      	mov	r1, r5
 800cd48:	4638      	mov	r0, r7
 800cd4a:	f7ff f941 	bl	800bfd0 <_free_r>
 800cd4e:	e7f1      	b.n	800cd34 <_realloc_r+0x40>

0800cd50 <_malloc_usable_size_r>:
 800cd50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd54:	1f18      	subs	r0, r3, #4
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	bfbc      	itt	lt
 800cd5a:	580b      	ldrlt	r3, [r1, r0]
 800cd5c:	18c0      	addlt	r0, r0, r3
 800cd5e:	4770      	bx	lr

0800cd60 <_init>:
 800cd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd62:	bf00      	nop
 800cd64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd66:	bc08      	pop	{r3}
 800cd68:	469e      	mov	lr, r3
 800cd6a:	4770      	bx	lr

0800cd6c <_fini>:
 800cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6e:	bf00      	nop
 800cd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd72:	bc08      	pop	{r3}
 800cd74:	469e      	mov	lr, r3
 800cd76:	4770      	bx	lr
