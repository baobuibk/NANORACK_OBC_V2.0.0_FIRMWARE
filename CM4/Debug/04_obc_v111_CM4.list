
04_obc_v111_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8fc  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0810eb94  0810eb94  0000fb94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810ec80  0810ec80  0000fc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0810ec84  0810ec84  0000fc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000001fc  10032000  0810ec88  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004980  100321fc  0810ee84  000101fc  2**2
                  ALLOC
  7 ._user_heap_stack 00000a04  10036b7c  0810ee84  00010b7c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00026eb2  00000000  00000000  0001022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005afd  00000000  00000000  000370de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000023a0  00000000  00000000  0003cbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001b08  00000000  00000000  0003ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00045b0c  00000000  00000000  00040a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002c95e  00000000  00000000  00086594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001a8808  00000000  00000000  000b2ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0025b6fa  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009690  00000000  00000000  0025b740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000068  00000000  00000000  00264dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100321fc 	.word	0x100321fc
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810eb7c 	.word	0x0810eb7c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10032200 	.word	0x10032200
 81002d4:	0810eb7c 	.word	0x0810eb7c

081002d8 <Mgmt_HardwareSystemPreparing>:
//#include "UART_DMA/uart_dma_driver.h"
/*************************************************
 *                   Function                    *
 *************************************************/

void Mgmt_HardwareSystemPreparing(void){
 81002d8:	b580      	push	{r7, lr}
 81002da:	af00      	add	r7, sp, #0
	UART_DMA_Driver_Init();
 81002dc:	f000 fdb6 	bl	8100e4c <UART_DMA_Driver_Init>
	CDC_RingBuffer_Init();
 81002e0:	f000 ff8c 	bl	81011fc <CDC_RingBuffer_Init>
	SharedREG_Init(DIR_M4_TO_M7);
 81002e4:	2001      	movs	r0, #1
 81002e6:	f000 fb93 	bl	8100a10 <SharedREG_Init>
//	UART_Driver_SendString(UART_PORT, "Hello");
}
 81002ea:	bf00      	nop
 81002ec:	bd80      	pop	{r7, pc}

081002ee <Mgmt_SystemStart>:

void Mgmt_SystemStart(void){
 81002ee:	b580      	push	{r7, lr}
 81002f0:	af00      	add	r7, sp, #0

	  SCH_Initialize();
 81002f2:	f000 f807 	bl	8100304 <SCH_Initialize>

	  SchedulerTasks_Create();
 81002f6:	f000 fb03 	bl	8100900 <SchedulerTasks_Create>

	  SCH_StartScheduler();
 81002fa:	f000 f94d 	bl	8100598 <SCH_StartScheduler>

	  while(1){
			SCH_HandleScheduledTask();
 81002fe:	f000 f957 	bl	81005b0 <SCH_HandleScheduledTask>
 8100302:	e7fc      	b.n	81002fe <Mgmt_SystemStart+0x10>

08100304 <SCH_Initialize>:
 * @brief  Function initializes scheduler
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_Initialize(void)
{
 8100304:	b580      	push	{r7, lr}
 8100306:	af00      	add	r7, sp, #0
    s_SystemTick = RESET;
 8100308:	4b17      	ldr	r3, [pc, #92]	@ (8100368 <SCH_Initialize+0x64>)
 810030a:	2200      	movs	r2, #0
 810030c:	601a      	str	r2, [r3, #0]
    s_NumOfTaskScheduled = RESET;
 810030e:	4b17      	ldr	r3, [pc, #92]	@ (810036c <SCH_Initialize+0x68>)
 8100310:	2200      	movs	r2, #0
 8100312:	701a      	strb	r2, [r3, #0]
    s_NumOfTimers = RESET;
 8100314:	4b16      	ldr	r3, [pc, #88]	@ (8100370 <SCH_Initialize+0x6c>)
 8100316:	2200      	movs	r2, #0
 8100318:	701a      	strb	r2, [r3, #0]
    
#ifdef USE_SCH_SEMAPHORE
    s_NumOfSemaphores = RESET;
 810031a:	4b16      	ldr	r3, [pc, #88]	@ (8100374 <SCH_Initialize+0x70>)
 810031c:	2200      	movs	r2, #0
 810031e:	701a      	strb	r2, [r3, #0]
#endif

    s_SchedulerRunning = FALSE;
 8100320:	4b15      	ldr	r3, [pc, #84]	@ (8100378 <SCH_Initialize+0x74>)
 8100322:	2200      	movs	r2, #0
 8100324:	701a      	strb	r2, [r3, #0]

    // Initial Scheduler Context
    memset((uint8_t *)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8100326:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 810032a:	2100      	movs	r1, #0
 810032c:	4813      	ldr	r0, [pc, #76]	@ (810037c <SCH_Initialize+0x78>)
 810032e:	f00e fbd7 	bl	810eae0 <memset>
    memset((uint8_t *)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8100332:	22a0      	movs	r2, #160	@ 0xa0
 8100334:	2100      	movs	r1, #0
 8100336:	4812      	ldr	r0, [pc, #72]	@ (8100380 <SCH_Initialize+0x7c>)
 8100338:	f00e fbd2 	bl	810eae0 <memset>
    memset((uint8_t *)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 810033c:	2208      	movs	r2, #8
 810033e:	2100      	movs	r1, #0
 8100340:	4810      	ldr	r0, [pc, #64]	@ (8100384 <SCH_Initialize+0x80>)
 8100342:	f00e fbcd 	bl	810eae0 <memset>
    memset((uint8_t *)&s_TaskPending[0], RESET, (sizeof(uint32_t) * NUM_TASK_PENDING_ARRAYS));
 8100346:	2204      	movs	r2, #4
 8100348:	2100      	movs	r1, #0
 810034a:	480f      	ldr	r0, [pc, #60]	@ (8100388 <SCH_Initialize+0x84>)
 810034c:	f00e fbc8 	bl	810eae0 <memset>
    memset((uint8_t *)&s_TimerPending[0], RESET, (sizeof(uint32_t) * NUM_TIMER_PENDING_ARRAYS));
 8100350:	2204      	movs	r2, #4
 8100352:	2100      	movs	r1, #0
 8100354:	480d      	ldr	r0, [pc, #52]	@ (810038c <SCH_Initialize+0x88>)
 8100356:	f00e fbc3 	bl	810eae0 <memset>
#ifdef USE_SCH_SEMAPHORE
    memset((uint8_t *)&s_SemaphoreContext[0], RESET, (sizeof(SCH_SemaphoreTypedef) * MAX_SEMAPHORES));
 810035a:	2204      	movs	r2, #4
 810035c:	2100      	movs	r1, #0
 810035e:	480c      	ldr	r0, [pc, #48]	@ (8100390 <SCH_Initialize+0x8c>)
 8100360:	f00e fbbe 	bl	810eae0 <memset>
#endif
}
 8100364:	bf00      	nop
 8100366:	bd80      	pop	{r7, pc}
 8100368:	10032454 	.word	0x10032454
 810036c:	1003239c 	.word	0x1003239c
 8100370:	10032440 	.word	0x10032440
 8100374:	10032448 	.word	0x10032448
 8100378:	10032218 	.word	0x10032218
 810037c:	1003221c 	.word	0x1003221c
 8100380:	100323a0 	.word	0x100323a0
 8100384:	10032458 	.word	0x10032458
 8100388:	1003244c 	.word	0x1003244c
 810038c:	10032450 	.word	0x10032450
 8100390:	10032444 	.word	0x10032444

08100394 <SCH_TASK_CreateTask>:
 * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
 *         SCH_TaskPropertyTypedef TaskProperty
 * @retval status
 *****************************************************************************/
SCH_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE *pHandle, SCH_TaskPropertyTypedef *pTaskProperty)
{
 8100394:	b580      	push	{r7, lr}
 8100396:	b084      	sub	sp, #16
 8100398:	af00      	add	r7, sp, #0
 810039a:	6078      	str	r0, [r7, #4]
 810039c:	6039      	str	r1, [r7, #0]
    SCH_Status status = SCH_ERROR;
 810039e:	2301      	movs	r3, #1
 81003a0:	73fb      	strb	r3, [r7, #15]
    if (pHandle && pTaskProperty)
 81003a2:	687b      	ldr	r3, [r7, #4]
 81003a4:	2b00      	cmp	r3, #0
 81003a6:	d030      	beq.n	810040a <SCH_TASK_CreateTask+0x76>
 81003a8:	683b      	ldr	r3, [r7, #0]
 81003aa:	2b00      	cmp	r3, #0
 81003ac:	d02d      	beq.n	810040a <SCH_TASK_CreateTask+0x76>
    {
        if (s_NumOfTaskScheduled < MAX_TASK)
 81003ae:	4b19      	ldr	r3, [pc, #100]	@ (8100414 <SCH_TASK_CreateTask+0x80>)
 81003b0:	781b      	ldrb	r3, [r3, #0]
 81003b2:	2b0f      	cmp	r3, #15
 81003b4:	d829      	bhi.n	810040a <SCH_TASK_CreateTask+0x76>
        {
            SCH_TaskContextTypedef *pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 81003b6:	4b17      	ldr	r3, [pc, #92]	@ (8100414 <SCH_TASK_CreateTask+0x80>)
 81003b8:	781b      	ldrb	r3, [r3, #0]
 81003ba:	461a      	mov	r2, r3
 81003bc:	4613      	mov	r3, r2
 81003be:	005b      	lsls	r3, r3, #1
 81003c0:	4413      	add	r3, r2
 81003c2:	00db      	lsls	r3, r3, #3
 81003c4:	4a14      	ldr	r2, [pc, #80]	@ (8100418 <SCH_TASK_CreateTask+0x84>)
 81003c6:	4413      	add	r3, r2
 81003c8:	60bb      	str	r3, [r7, #8]
            memcpy(&pTaskContext->taskProperty, pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
 81003ca:	68bb      	ldr	r3, [r7, #8]
 81003cc:	3308      	adds	r3, #8
 81003ce:	2210      	movs	r2, #16
 81003d0:	6839      	ldr	r1, [r7, #0]
 81003d2:	4618      	mov	r0, r3
 81003d4:	f00e fbc4 	bl	810eb60 <memcpy>
            pTaskContext->currentTick = 0;
 81003d8:	68bb      	ldr	r3, [r7, #8]
 81003da:	2200      	movs	r2, #0
 81003dc:	605a      	str	r2, [r3, #4]
            pTaskContext->taskState = (pTaskProperty->taskType == SCH_TASK_ASYNC) 
 81003de:	683b      	ldr	r3, [r7, #0]
 81003e0:	781b      	ldrb	r3, [r3, #0]
                                                        ? TASK_StateHold : TASK_StateReady;
 81003e2:	2b02      	cmp	r3, #2
 81003e4:	bf14      	ite	ne
 81003e6:	2301      	movne	r3, #1
 81003e8:	2300      	moveq	r3, #0
 81003ea:	b2db      	uxtb	r3, r3
 81003ec:	461a      	mov	r2, r3
            pTaskContext->taskState = (pTaskProperty->taskType == SCH_TASK_ASYNC) 
 81003ee:	68bb      	ldr	r3, [r7, #8]
 81003f0:	701a      	strb	r2, [r3, #0]

            *pHandle = s_NumOfTaskScheduled;
 81003f2:	4b08      	ldr	r3, [pc, #32]	@ (8100414 <SCH_TASK_CreateTask+0x80>)
 81003f4:	781a      	ldrb	r2, [r3, #0]
 81003f6:	687b      	ldr	r3, [r7, #4]
 81003f8:	701a      	strb	r2, [r3, #0]
            s_NumOfTaskScheduled++;
 81003fa:	4b06      	ldr	r3, [pc, #24]	@ (8100414 <SCH_TASK_CreateTask+0x80>)
 81003fc:	781b      	ldrb	r3, [r3, #0]
 81003fe:	3301      	adds	r3, #1
 8100400:	b2da      	uxtb	r2, r3
 8100402:	4b04      	ldr	r3, [pc, #16]	@ (8100414 <SCH_TASK_CreateTask+0x80>)
 8100404:	701a      	strb	r2, [r3, #0]
            status = SCH_DONE;
 8100406:	2300      	movs	r3, #0
 8100408:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 810040a:	7bfb      	ldrb	r3, [r7, #15]
}
 810040c:	4618      	mov	r0, r3
 810040e:	3710      	adds	r7, #16
 8100410:	46bd      	mov	sp, r7
 8100412:	bd80      	pop	{r7, pc}
 8100414:	1003239c 	.word	0x1003239c
 8100418:	1003221c 	.word	0x1003221c

0810041c <SCH_RunSystemTickTimer>:
 * @brief  Function handles system tick timer
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 810041c:	b480      	push	{r7}
 810041e:	b087      	sub	sp, #28
 8100420:	af00      	add	r7, sp, #0
    if (s_SchedulerRunning)
 8100422:	4b54      	ldr	r3, [pc, #336]	@ (8100574 <SCH_RunSystemTickTimer+0x158>)
 8100424:	781b      	ldrb	r3, [r3, #0]
 8100426:	2b00      	cmp	r3, #0
 8100428:	f000 809e 	beq.w	8100568 <SCH_RunSystemTickTimer+0x14c>
    {
        uint8_t taskIndex;
        SCH_TaskContextTypedef *pTaskContext;
        uint8_t timerIndex;
        SCH_TimerContextTypedef *pTimerContext;
        s_SystemTick++;
 810042c:	4b52      	ldr	r3, [pc, #328]	@ (8100578 <SCH_RunSystemTickTimer+0x15c>)
 810042e:	681b      	ldr	r3, [r3, #0]
 8100430:	3301      	adds	r3, #1
 8100432:	4a51      	ldr	r2, [pc, #324]	@ (8100578 <SCH_RunSystemTickTimer+0x15c>)
 8100434:	6013      	str	r3, [r2, #0]
        // Task
        for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8100436:	2300      	movs	r3, #0
 8100438:	75fb      	strb	r3, [r7, #23]
 810043a:	e035      	b.n	81004a8 <SCH_RunSystemTickTimer+0x8c>
        {
            pTaskContext = &s_TaskContext[taskIndex];
 810043c:	7dfa      	ldrb	r2, [r7, #23]
 810043e:	4613      	mov	r3, r2
 8100440:	005b      	lsls	r3, r3, #1
 8100442:	4413      	add	r3, r2
 8100444:	00db      	lsls	r3, r3, #3
 8100446:	4a4d      	ldr	r2, [pc, #308]	@ (810057c <SCH_RunSystemTickTimer+0x160>)
 8100448:	4413      	add	r3, r2
 810044a:	60bb      	str	r3, [r7, #8]
            if (pTaskContext->taskProperty.taskType == SCH_TASK_SYNC && 
 810044c:	68bb      	ldr	r3, [r7, #8]
 810044e:	7a1b      	ldrb	r3, [r3, #8]
 8100450:	2b01      	cmp	r3, #1
 8100452:	d126      	bne.n	81004a2 <SCH_RunSystemTickTimer+0x86>
                pTaskContext->taskState == TASK_StateReady)
 8100454:	68bb      	ldr	r3, [r7, #8]
 8100456:	781b      	ldrb	r3, [r3, #0]
            if (pTaskContext->taskProperty.taskType == SCH_TASK_SYNC && 
 8100458:	2b01      	cmp	r3, #1
 810045a:	d122      	bne.n	81004a2 <SCH_RunSystemTickTimer+0x86>
            {
                pTaskContext->currentTick += 1;
 810045c:	68bb      	ldr	r3, [r7, #8]
 810045e:	685b      	ldr	r3, [r3, #4]
 8100460:	1c5a      	adds	r2, r3, #1
 8100462:	68bb      	ldr	r3, [r7, #8]
 8100464:	605a      	str	r2, [r3, #4]
                if (pTaskContext->currentTick >= pTaskContext->taskProperty.taskPeriodInMS)
 8100466:	68bb      	ldr	r3, [r7, #8]
 8100468:	685a      	ldr	r2, [r3, #4]
 810046a:	68bb      	ldr	r3, [r7, #8]
 810046c:	68db      	ldr	r3, [r3, #12]
 810046e:	429a      	cmp	r2, r3
 8100470:	d317      	bcc.n	81004a2 <SCH_RunSystemTickTimer+0x86>
                {
                    pTaskContext->currentTick = 0;
 8100472:	68bb      	ldr	r3, [r7, #8]
 8100474:	2200      	movs	r2, #0
 8100476:	605a      	str	r2, [r3, #4]
                    uint8_t index = taskIndex / 32;
 8100478:	7dfb      	ldrb	r3, [r7, #23]
 810047a:	095b      	lsrs	r3, r3, #5
 810047c:	71fb      	strb	r3, [r7, #7]
                    uint8_t bit = taskIndex % 32;
 810047e:	7dfb      	ldrb	r3, [r7, #23]
 8100480:	f003 031f 	and.w	r3, r3, #31
 8100484:	71bb      	strb	r3, [r7, #6]
                    s_TaskPending[index] |= (1 << bit);  // Set bit for task
 8100486:	79fb      	ldrb	r3, [r7, #7]
 8100488:	4a3d      	ldr	r2, [pc, #244]	@ (8100580 <SCH_RunSystemTickTimer+0x164>)
 810048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810048e:	79bb      	ldrb	r3, [r7, #6]
 8100490:	2101      	movs	r1, #1
 8100492:	fa01 f303 	lsl.w	r3, r1, r3
 8100496:	4619      	mov	r1, r3
 8100498:	79fb      	ldrb	r3, [r7, #7]
 810049a:	430a      	orrs	r2, r1
 810049c:	4938      	ldr	r1, [pc, #224]	@ (8100580 <SCH_RunSystemTickTimer+0x164>)
 810049e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 81004a2:	7dfb      	ldrb	r3, [r7, #23]
 81004a4:	3301      	adds	r3, #1
 81004a6:	75fb      	strb	r3, [r7, #23]
 81004a8:	4b36      	ldr	r3, [pc, #216]	@ (8100584 <SCH_RunSystemTickTimer+0x168>)
 81004aa:	781b      	ldrb	r3, [r3, #0]
 81004ac:	7dfa      	ldrb	r2, [r7, #23]
 81004ae:	429a      	cmp	r2, r3
 81004b0:	d3c4      	bcc.n	810043c <SCH_RunSystemTickTimer+0x20>
                }
            }
        }

        // Timer
        for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 81004b2:	2300      	movs	r3, #0
 81004b4:	75bb      	strb	r3, [r7, #22]
 81004b6:	e03b      	b.n	8100530 <SCH_RunSystemTickTimer+0x114>
        {
            pTimerContext = &s_TimerContext[timerIndex];
 81004b8:	7dba      	ldrb	r2, [r7, #22]
 81004ba:	4613      	mov	r3, r2
 81004bc:	009b      	lsls	r3, r3, #2
 81004be:	4413      	add	r3, r2
 81004c0:	009b      	lsls	r3, r3, #2
 81004c2:	4a31      	ldr	r2, [pc, #196]	@ (8100588 <SCH_RunSystemTickTimer+0x16c>)
 81004c4:	4413      	add	r3, r2
 81004c6:	613b      	str	r3, [r7, #16]
            if (TIM_StateRun == pTimerContext->timerState)
 81004c8:	693b      	ldr	r3, [r7, #16]
 81004ca:	781b      	ldrb	r3, [r3, #0]
 81004cc:	2b01      	cmp	r3, #1
 81004ce:	d12c      	bne.n	810052a <SCH_RunSystemTickTimer+0x10e>
            {
                pTimerContext->currentTick += 1;
 81004d0:	693b      	ldr	r3, [r7, #16]
 81004d2:	685b      	ldr	r3, [r3, #4]
 81004d4:	1c5a      	adds	r2, r3, #1
 81004d6:	693b      	ldr	r3, [r7, #16]
 81004d8:	605a      	str	r2, [r3, #4]
                if (pTimerContext->currentTick >= pTimerContext->timerProperty.timerPeriodInMS)
 81004da:	693b      	ldr	r3, [r7, #16]
 81004dc:	685a      	ldr	r2, [r3, #4]
 81004de:	693b      	ldr	r3, [r7, #16]
 81004e0:	68db      	ldr	r3, [r3, #12]
 81004e2:	429a      	cmp	r2, r3
 81004e4:	d321      	bcc.n	810052a <SCH_RunSystemTickTimer+0x10e>
                {
                    uint8_t index = timerIndex / 32;
 81004e6:	7dbb      	ldrb	r3, [r7, #22]
 81004e8:	095b      	lsrs	r3, r3, #5
 81004ea:	73fb      	strb	r3, [r7, #15]
                    uint8_t bit = timerIndex % 32;
 81004ec:	7dbb      	ldrb	r3, [r7, #22]
 81004ee:	f003 031f 	and.w	r3, r3, #31
 81004f2:	73bb      	strb	r3, [r7, #14]
                    s_TimerPending[index] |= (1 << bit);  // Set bit for timer
 81004f4:	7bfb      	ldrb	r3, [r7, #15]
 81004f6:	4a25      	ldr	r2, [pc, #148]	@ (810058c <SCH_RunSystemTickTimer+0x170>)
 81004f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81004fc:	7bbb      	ldrb	r3, [r7, #14]
 81004fe:	2101      	movs	r1, #1
 8100500:	fa01 f303 	lsl.w	r3, r1, r3
 8100504:	4619      	mov	r1, r3
 8100506:	7bfb      	ldrb	r3, [r7, #15]
 8100508:	430a      	orrs	r2, r1
 810050a:	4920      	ldr	r1, [pc, #128]	@ (810058c <SCH_RunSystemTickTimer+0x170>)
 810050c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    pTimerContext->currentTick = 0;
 8100510:	693b      	ldr	r3, [r7, #16]
 8100512:	2200      	movs	r2, #0
 8100514:	605a      	str	r2, [r3, #4]
                    pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->timerProperty.timerType) ? TIM_StateRun : TIM_StateStop;
 8100516:	693b      	ldr	r3, [r7, #16]
 8100518:	7a1b      	ldrb	r3, [r3, #8]
 810051a:	2b02      	cmp	r3, #2
 810051c:	bf0c      	ite	eq
 810051e:	2301      	moveq	r3, #1
 8100520:	2300      	movne	r3, #0
 8100522:	b2db      	uxtb	r3, r3
 8100524:	461a      	mov	r2, r3
 8100526:	693b      	ldr	r3, [r7, #16]
 8100528:	701a      	strb	r2, [r3, #0]
        for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 810052a:	7dbb      	ldrb	r3, [r7, #22]
 810052c:	3301      	adds	r3, #1
 810052e:	75bb      	strb	r3, [r7, #22]
 8100530:	4b17      	ldr	r3, [pc, #92]	@ (8100590 <SCH_RunSystemTickTimer+0x174>)
 8100532:	781b      	ldrb	r3, [r3, #0]
 8100534:	7dba      	ldrb	r2, [r7, #22]
 8100536:	429a      	cmp	r2, r3
 8100538:	d3be      	bcc.n	81004b8 <SCH_RunSystemTickTimer+0x9c>
                }
            }
        }

        // Soft timer
        for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 810053a:	2300      	movs	r3, #0
 810053c:	75bb      	strb	r3, [r7, #22]
 810053e:	e010      	b.n	8100562 <SCH_RunSystemTickTimer+0x146>
        {
            if (s_SoftTimers[timerIndex] > 0)
 8100540:	7dbb      	ldrb	r3, [r7, #22]
 8100542:	4a14      	ldr	r2, [pc, #80]	@ (8100594 <SCH_RunSystemTickTimer+0x178>)
 8100544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100548:	2b00      	cmp	r3, #0
 810054a:	d007      	beq.n	810055c <SCH_RunSystemTickTimer+0x140>
                s_SoftTimers[timerIndex]--;
 810054c:	7dbb      	ldrb	r3, [r7, #22]
 810054e:	4a11      	ldr	r2, [pc, #68]	@ (8100594 <SCH_RunSystemTickTimer+0x178>)
 8100550:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8100554:	3a01      	subs	r2, #1
 8100556:	490f      	ldr	r1, [pc, #60]	@ (8100594 <SCH_RunSystemTickTimer+0x178>)
 8100558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 810055c:	7dbb      	ldrb	r3, [r7, #22]
 810055e:	3301      	adds	r3, #1
 8100560:	75bb      	strb	r3, [r7, #22]
 8100562:	7dbb      	ldrb	r3, [r7, #22]
 8100564:	2b01      	cmp	r3, #1
 8100566:	d9eb      	bls.n	8100540 <SCH_RunSystemTickTimer+0x124>
        }
    }
}
 8100568:	bf00      	nop
 810056a:	371c      	adds	r7, #28
 810056c:	46bd      	mov	sp, r7
 810056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100572:	4770      	bx	lr
 8100574:	10032218 	.word	0x10032218
 8100578:	10032454 	.word	0x10032454
 810057c:	1003221c 	.word	0x1003221c
 8100580:	1003244c 	.word	0x1003244c
 8100584:	1003239c 	.word	0x1003239c
 8100588:	100323a0 	.word	0x100323a0
 810058c:	10032450 	.word	0x10032450
 8100590:	10032440 	.word	0x10032440
 8100594:	10032458 	.word	0x10032458

08100598 <SCH_StartScheduler>:
 * @brief  Start scheduler
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_StartScheduler(void)
{
 8100598:	b480      	push	{r7}
 810059a:	af00      	add	r7, sp, #0
    s_SchedulerRunning = TRUE;
 810059c:	4b03      	ldr	r3, [pc, #12]	@ (81005ac <SCH_StartScheduler+0x14>)
 810059e:	2201      	movs	r2, #1
 81005a0:	701a      	strb	r2, [r3, #0]
}
 81005a2:	bf00      	nop
 81005a4:	46bd      	mov	sp, r7
 81005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005aa:	4770      	bx	lr
 81005ac:	10032218 	.word	0x10032218

081005b0 <SCH_HandleScheduledTask>:
 * @brief  Function handles scheduled task and timer events
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 81005b0:	b580      	push	{r7, lr}
 81005b2:	b088      	sub	sp, #32
 81005b4:	af00      	add	r7, sp, #0
    if (s_SchedulerRunning)
 81005b6:	4b5b      	ldr	r3, [pc, #364]	@ (8100724 <SCH_HandleScheduledTask+0x174>)
 81005b8:	781b      	ldrb	r3, [r3, #0]
 81005ba:	2b00      	cmp	r3, #0
 81005bc:	f000 80ad 	beq.w	810071a <SCH_HandleScheduledTask+0x16a>
    {
        // Task - Process by priority from highest (SCH_TASK_PRIO_3) to lowest (SCH_TASK_PRIO_0)
        for (int8_t priority = SCH_TASK_PRIO_3; priority >= SCH_TASK_PRIO_0; priority--)
 81005c0:	2303      	movs	r3, #3
 81005c2:	77fb      	strb	r3, [r7, #31]
 81005c4:	e05c      	b.n	8100680 <SCH_HandleScheduledTask+0xd0>
        {
            for (uint8_t index = 0; index < NUM_TASK_PENDING_ARRAYS; index++)
 81005c6:	2300      	movs	r3, #0
 81005c8:	77bb      	strb	r3, [r7, #30]
 81005ca:	e050      	b.n	810066e <SCH_HandleScheduledTask+0xbe>
            {
                uint32_t pending = s_TaskPending[index];
 81005cc:	7fbb      	ldrb	r3, [r7, #30]
 81005ce:	4a56      	ldr	r2, [pc, #344]	@ (8100728 <SCH_HandleScheduledTask+0x178>)
 81005d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81005d4:	60bb      	str	r3, [r7, #8]
                for (uint8_t bit = 0; bit < 32; bit++)
 81005d6:	2300      	movs	r3, #0
 81005d8:	777b      	strb	r3, [r7, #29]
 81005da:	e042      	b.n	8100662 <SCH_HandleScheduledTask+0xb2>
                {
                    if (pending & (1 << bit))
 81005dc:	7f7b      	ldrb	r3, [r7, #29]
 81005de:	2201      	movs	r2, #1
 81005e0:	fa02 f303 	lsl.w	r3, r2, r3
 81005e4:	461a      	mov	r2, r3
 81005e6:	68bb      	ldr	r3, [r7, #8]
 81005e8:	4013      	ands	r3, r2
 81005ea:	2b00      	cmp	r3, #0
 81005ec:	d036      	beq.n	810065c <SCH_HandleScheduledTask+0xac>
                    {
                        uint8_t taskIndex = index * 32 + bit;
 81005ee:	7fbb      	ldrb	r3, [r7, #30]
 81005f0:	015b      	lsls	r3, r3, #5
 81005f2:	b2da      	uxtb	r2, r3
 81005f4:	7f7b      	ldrb	r3, [r7, #29]
 81005f6:	4413      	add	r3, r2
 81005f8:	71fb      	strb	r3, [r7, #7]
                        if (taskIndex < s_NumOfTaskScheduled)
 81005fa:	4b4c      	ldr	r3, [pc, #304]	@ (810072c <SCH_HandleScheduledTask+0x17c>)
 81005fc:	781b      	ldrb	r3, [r3, #0]
 81005fe:	79fa      	ldrb	r2, [r7, #7]
 8100600:	429a      	cmp	r2, r3
 8100602:	d22b      	bcs.n	810065c <SCH_HandleScheduledTask+0xac>
                        {
                            SCH_TaskContextTypedef *pTaskContext = &s_TaskContext[taskIndex];
 8100604:	79fa      	ldrb	r2, [r7, #7]
 8100606:	4613      	mov	r3, r2
 8100608:	005b      	lsls	r3, r3, #1
 810060a:	4413      	add	r3, r2
 810060c:	00db      	lsls	r3, r3, #3
 810060e:	4a48      	ldr	r2, [pc, #288]	@ (8100730 <SCH_HandleScheduledTask+0x180>)
 8100610:	4413      	add	r3, r2
 8100612:	603b      	str	r3, [r7, #0]
                            if (pTaskContext->taskProperty.taskPriority == priority &&
 8100614:	683b      	ldr	r3, [r7, #0]
 8100616:	7a5b      	ldrb	r3, [r3, #9]
 8100618:	461a      	mov	r2, r3
 810061a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 810061e:	429a      	cmp	r2, r3
 8100620:	d11c      	bne.n	810065c <SCH_HandleScheduledTask+0xac>
                                pTaskContext->taskState == TASK_StateReady)
 8100622:	683b      	ldr	r3, [r7, #0]
 8100624:	781b      	ldrb	r3, [r3, #0]
                            if (pTaskContext->taskProperty.taskPriority == priority &&
 8100626:	2b01      	cmp	r3, #1
 8100628:	d118      	bne.n	810065c <SCH_HandleScheduledTask+0xac>
                            {
                                s_TaskPending[index] &= ~(1 << bit);  // Clear bit
 810062a:	7fbb      	ldrb	r3, [r7, #30]
 810062c:	4a3e      	ldr	r2, [pc, #248]	@ (8100728 <SCH_HandleScheduledTask+0x178>)
 810062e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8100632:	7f7b      	ldrb	r3, [r7, #29]
 8100634:	2101      	movs	r1, #1
 8100636:	fa01 f303 	lsl.w	r3, r1, r3
 810063a:	43db      	mvns	r3, r3
 810063c:	4619      	mov	r1, r3
 810063e:	7fbb      	ldrb	r3, [r7, #30]
 8100640:	400a      	ands	r2, r1
 8100642:	4939      	ldr	r1, [pc, #228]	@ (8100728 <SCH_HandleScheduledTask+0x178>)
 8100644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                pTaskContext->taskProperty.taskFunction();
 8100648:	683b      	ldr	r3, [r7, #0]
 810064a:	691b      	ldr	r3, [r3, #16]
 810064c:	4798      	blx	r3
                                // Async tasks, set state to Hold after execution
                                if (pTaskContext->taskProperty.taskType == SCH_TASK_ASYNC)
 810064e:	683b      	ldr	r3, [r7, #0]
 8100650:	7a1b      	ldrb	r3, [r3, #8]
 8100652:	2b02      	cmp	r3, #2
 8100654:	d102      	bne.n	810065c <SCH_HandleScheduledTask+0xac>
                                {
                                    pTaskContext->taskState = TASK_StateHold;
 8100656:	683b      	ldr	r3, [r7, #0]
 8100658:	2200      	movs	r2, #0
 810065a:	701a      	strb	r2, [r3, #0]
                for (uint8_t bit = 0; bit < 32; bit++)
 810065c:	7f7b      	ldrb	r3, [r7, #29]
 810065e:	3301      	adds	r3, #1
 8100660:	777b      	strb	r3, [r7, #29]
 8100662:	7f7b      	ldrb	r3, [r7, #29]
 8100664:	2b1f      	cmp	r3, #31
 8100666:	d9b9      	bls.n	81005dc <SCH_HandleScheduledTask+0x2c>
            for (uint8_t index = 0; index < NUM_TASK_PENDING_ARRAYS; index++)
 8100668:	7fbb      	ldrb	r3, [r7, #30]
 810066a:	3301      	adds	r3, #1
 810066c:	77bb      	strb	r3, [r7, #30]
 810066e:	7fbb      	ldrb	r3, [r7, #30]
 8100670:	2b00      	cmp	r3, #0
 8100672:	d0ab      	beq.n	81005cc <SCH_HandleScheduledTask+0x1c>
        for (int8_t priority = SCH_TASK_PRIO_3; priority >= SCH_TASK_PRIO_0; priority--)
 8100674:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8100678:	b2db      	uxtb	r3, r3
 810067a:	3b01      	subs	r3, #1
 810067c:	b2db      	uxtb	r3, r3
 810067e:	77fb      	strb	r3, [r7, #31]
 8100680:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8100684:	2b00      	cmp	r3, #0
 8100686:	da9e      	bge.n	81005c6 <SCH_HandleScheduledTask+0x16>
                }
            }
        }

        // Timer
        for (uint8_t index = 0; index < NUM_TIMER_PENDING_ARRAYS; index++)
 8100688:	2300      	movs	r3, #0
 810068a:	773b      	strb	r3, [r7, #28]
 810068c:	e042      	b.n	8100714 <SCH_HandleScheduledTask+0x164>
        {
            uint32_t pending = s_TimerPending[index];
 810068e:	7f3b      	ldrb	r3, [r7, #28]
 8100690:	4a28      	ldr	r2, [pc, #160]	@ (8100734 <SCH_HandleScheduledTask+0x184>)
 8100692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100696:	617b      	str	r3, [r7, #20]
            for (uint8_t bit = 0; bit < 32; bit++)
 8100698:	2300      	movs	r3, #0
 810069a:	76fb      	strb	r3, [r7, #27]
 810069c:	e034      	b.n	8100708 <SCH_HandleScheduledTask+0x158>
            {
                if (pending & (1 << bit))
 810069e:	7efb      	ldrb	r3, [r7, #27]
 81006a0:	2201      	movs	r2, #1
 81006a2:	fa02 f303 	lsl.w	r3, r2, r3
 81006a6:	461a      	mov	r2, r3
 81006a8:	697b      	ldr	r3, [r7, #20]
 81006aa:	4013      	ands	r3, r2
 81006ac:	2b00      	cmp	r3, #0
 81006ae:	d028      	beq.n	8100702 <SCH_HandleScheduledTask+0x152>
                {
                    uint8_t timerIndex = index * 32 + bit;
 81006b0:	7f3b      	ldrb	r3, [r7, #28]
 81006b2:	015b      	lsls	r3, r3, #5
 81006b4:	b2da      	uxtb	r2, r3
 81006b6:	7efb      	ldrb	r3, [r7, #27]
 81006b8:	4413      	add	r3, r2
 81006ba:	74fb      	strb	r3, [r7, #19]
                    if (timerIndex < s_NumOfTimers)
 81006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8100738 <SCH_HandleScheduledTask+0x188>)
 81006be:	781b      	ldrb	r3, [r3, #0]
 81006c0:	7cfa      	ldrb	r2, [r7, #19]
 81006c2:	429a      	cmp	r2, r3
 81006c4:	d21d      	bcs.n	8100702 <SCH_HandleScheduledTask+0x152>
                    {
                        s_TimerPending[index] &= ~(1 << bit);  // Clear bit
 81006c6:	7f3b      	ldrb	r3, [r7, #28]
 81006c8:	4a1a      	ldr	r2, [pc, #104]	@ (8100734 <SCH_HandleScheduledTask+0x184>)
 81006ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81006ce:	7efb      	ldrb	r3, [r7, #27]
 81006d0:	2101      	movs	r1, #1
 81006d2:	fa01 f303 	lsl.w	r3, r1, r3
 81006d6:	43db      	mvns	r3, r3
 81006d8:	4619      	mov	r1, r3
 81006da:	7f3b      	ldrb	r3, [r7, #28]
 81006dc:	400a      	ands	r2, r1
 81006de:	4915      	ldr	r1, [pc, #84]	@ (8100734 <SCH_HandleScheduledTask+0x184>)
 81006e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 81006e4:	7cfa      	ldrb	r2, [r7, #19]
 81006e6:	4613      	mov	r3, r2
 81006e8:	009b      	lsls	r3, r3, #2
 81006ea:	4413      	add	r3, r2
 81006ec:	009b      	lsls	r3, r3, #2
 81006ee:	4a13      	ldr	r2, [pc, #76]	@ (810073c <SCH_HandleScheduledTask+0x18c>)
 81006f0:	4413      	add	r3, r2
 81006f2:	60fb      	str	r3, [r7, #12]
                        if (pTimerContext->timerProperty.timerCallbackFunction)
 81006f4:	68fb      	ldr	r3, [r7, #12]
 81006f6:	691b      	ldr	r3, [r3, #16]
 81006f8:	2b00      	cmp	r3, #0
 81006fa:	d002      	beq.n	8100702 <SCH_HandleScheduledTask+0x152>
                        {
                            pTimerContext->timerProperty.timerCallbackFunction();
 81006fc:	68fb      	ldr	r3, [r7, #12]
 81006fe:	691b      	ldr	r3, [r3, #16]
 8100700:	4798      	blx	r3
            for (uint8_t bit = 0; bit < 32; bit++)
 8100702:	7efb      	ldrb	r3, [r7, #27]
 8100704:	3301      	adds	r3, #1
 8100706:	76fb      	strb	r3, [r7, #27]
 8100708:	7efb      	ldrb	r3, [r7, #27]
 810070a:	2b1f      	cmp	r3, #31
 810070c:	d9c7      	bls.n	810069e <SCH_HandleScheduledTask+0xee>
        for (uint8_t index = 0; index < NUM_TIMER_PENDING_ARRAYS; index++)
 810070e:	7f3b      	ldrb	r3, [r7, #28]
 8100710:	3301      	adds	r3, #1
 8100712:	773b      	strb	r3, [r7, #28]
 8100714:	7f3b      	ldrb	r3, [r7, #28]
 8100716:	2b00      	cmp	r3, #0
 8100718:	d0b9      	beq.n	810068e <SCH_HandleScheduledTask+0xde>
                    }
                }
            }
        }
    }
}
 810071a:	bf00      	nop
 810071c:	3720      	adds	r7, #32
 810071e:	46bd      	mov	sp, r7
 8100720:	bd80      	pop	{r7, pc}
 8100722:	bf00      	nop
 8100724:	10032218 	.word	0x10032218
 8100728:	1003244c 	.word	0x1003244c
 810072c:	1003239c 	.word	0x1003239c
 8100730:	1003221c 	.word	0x1003221c
 8100734:	10032450 	.word	0x10032450
 8100738:	10032440 	.word	0x10032440
 810073c:	100323a0 	.word	0x100323a0

08100740 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8100740:	b480      	push	{r7}
 8100742:	b083      	sub	sp, #12
 8100744:	af00      	add	r7, sp, #0
 8100746:	6078      	str	r0, [r7, #4]
 8100748:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 810074a:	687b      	ldr	r3, [r7, #4]
 810074c:	683a      	ldr	r2, [r7, #0]
 810074e:	619a      	str	r2, [r3, #24]
}
 8100750:	bf00      	nop
 8100752:	370c      	adds	r7, #12
 8100754:	46bd      	mov	sp, r7
 8100756:	f85d 7b04 	ldr.w	r7, [sp], #4
 810075a:	4770      	bx	lr

0810075c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 810075c:	b480      	push	{r7}
 810075e:	b083      	sub	sp, #12
 8100760:	af00      	add	r7, sp, #0
 8100762:	6078      	str	r0, [r7, #4]
 8100764:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8100766:	683b      	ldr	r3, [r7, #0]
 8100768:	041a      	lsls	r2, r3, #16
 810076a:	687b      	ldr	r3, [r7, #4]
 810076c:	619a      	str	r2, [r3, #24]
}
 810076e:	bf00      	nop
 8100770:	370c      	adds	r7, #12
 8100772:	46bd      	mov	sp, r7
 8100774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100778:	4770      	bx	lr
	...

0810077c <BlinkLed1_Task>:

/*************************************************
 *                    Task List                  *
 *************************************************/
static void BlinkLed1_Task(void)
{
 810077c:	b580      	push	{r7, lr}
 810077e:	af00      	add	r7, sp, #0
    static uint8_t ledState = 0;
    if (ledState == 0)
 8100780:	4b0b      	ldr	r3, [pc, #44]	@ (81007b0 <BlinkLed1_Task+0x34>)
 8100782:	781b      	ldrb	r3, [r3, #0]
 8100784:	2b00      	cmp	r3, #0
 8100786:	d108      	bne.n	810079a <BlinkLed1_Task+0x1e>
    {
        ledState = 1;
 8100788:	4b09      	ldr	r3, [pc, #36]	@ (81007b0 <BlinkLed1_Task+0x34>)
 810078a:	2201      	movs	r2, #1
 810078c:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED2_GPIO_Port, MCU_IO_DEBUG_LED2_Pin);
 810078e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8100792:	4808      	ldr	r0, [pc, #32]	@ (81007b4 <BlinkLed1_Task+0x38>)
 8100794:	f7ff ffd4 	bl	8100740 <LL_GPIO_SetOutputPin>
    else
    {
        LL_GPIO_ResetOutputPin(MCU_IO_DEBUG_LED2_GPIO_Port, MCU_IO_DEBUG_LED2_Pin);
        ledState = 0;
    }
}
 8100798:	e007      	b.n	81007aa <BlinkLed1_Task+0x2e>
        LL_GPIO_ResetOutputPin(MCU_IO_DEBUG_LED2_GPIO_Port, MCU_IO_DEBUG_LED2_Pin);
 810079a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 810079e:	4805      	ldr	r0, [pc, #20]	@ (81007b4 <BlinkLed1_Task+0x38>)
 81007a0:	f7ff ffdc 	bl	810075c <LL_GPIO_ResetOutputPin>
        ledState = 0;
 81007a4:	4b02      	ldr	r3, [pc, #8]	@ (81007b0 <BlinkLed1_Task+0x34>)
 81007a6:	2200      	movs	r2, #0
 81007a8:	701a      	strb	r2, [r3, #0]
}
 81007aa:	bf00      	nop
 81007ac:	bd80      	pop	{r7, pc}
 81007ae:	bf00      	nop
 81007b0:	10032461 	.word	0x10032461
 81007b4:	58020c00 	.word	0x58020c00

081007b8 <BlinkLed2_Task>:

static void BlinkLed2_Task(void)
{
 81007b8:	b480      	push	{r7}
 81007ba:	af00      	add	r7, sp, #0
//    else
//    {
//        LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED3_GPIO_Port, MCU_IO_DEBUG_LED3_Pin);
//        ledState = 0;
//    }
}
 81007bc:	bf00      	nop
 81007be:	46bd      	mov	sp, r7
 81007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007c4:	4770      	bx	lr
	...

081007c8 <CDC_RxPoll_Task>:

static void CDC_RxPoll_Task(void)
{
 81007c8:	b580      	push	{r7, lr}
 81007ca:	b082      	sub	sp, #8
 81007cc:	af00      	add	r7, sp, #0
    if (!CDC_getRxReady()) return;
 81007ce:	f000 fddb 	bl	8101388 <CDC_getRxReady>
 81007d2:	4603      	mov	r3, r0
 81007d4:	2b00      	cmp	r3, #0
 81007d6:	d010      	beq.n	81007fa <CDC_RxPoll_Task+0x32>
    CDC_setRxReady(0);
 81007d8:	2000      	movs	r0, #0
 81007da:	f000 fde1 	bl	81013a0 <CDC_setRxReady>

    uint8_t ch;
    while (CDC_RX_RingBuffer_Get(&ch))
 81007de:	e004      	b.n	81007ea <CDC_RxPoll_Task+0x22>
    {
        UART_Driver_Write(UART_PORT, ch);
 81007e0:	79fb      	ldrb	r3, [r7, #7]
 81007e2:	4619      	mov	r1, r3
 81007e4:	4807      	ldr	r0, [pc, #28]	@ (8100804 <CDC_RxPoll_Task+0x3c>)
 81007e6:	f000 fc09 	bl	8100ffc <UART_Driver_Write>
    while (CDC_RX_RingBuffer_Get(&ch))
 81007ea:	1dfb      	adds	r3, r7, #7
 81007ec:	4618      	mov	r0, r3
 81007ee:	f000 fda3 	bl	8101338 <CDC_RX_RingBuffer_Get>
 81007f2:	4603      	mov	r3, r0
 81007f4:	2b00      	cmp	r3, #0
 81007f6:	d1f3      	bne.n	81007e0 <CDC_RxPoll_Task+0x18>
 81007f8:	e000      	b.n	81007fc <CDC_RxPoll_Task+0x34>
    if (!CDC_getRxReady()) return;
 81007fa:	bf00      	nop
    }
}
 81007fc:	3708      	adds	r7, #8
 81007fe:	46bd      	mov	sp, r7
 8100800:	bd80      	pop	{r7, pc}
 8100802:	bf00      	nop
 8100804:	40011400 	.word	0x40011400

08100808 <CDC_TxPoll_Task>:

static void CDC_TxPoll_Task(void)
{
 8100808:	b580      	push	{r7, lr}
 810080a:	f6ad 0d08 	subw	sp, sp, #2056	@ 0x808
 810080e:	af00      	add	r7, sp, #0
    if (!CDC_IsTxReady())
 8100810:	f00d fd00 	bl	810e214 <CDC_IsTxReady>
 8100814:	4603      	mov	r3, r0
 8100816:	f083 0301 	eor.w	r3, r3, #1
 810081a:	b2db      	uxtb	r3, r3
 810081c:	2b00      	cmp	r3, #0
 810081e:	d125      	bne.n	810086c <CDC_TxPoll_Task+0x64>
    {
        return;
    }

    uint8_t pkt[CDC_USB_MAX_PKT];
    uint16_t cnt = 0;
 8100820:	2300      	movs	r3, #0
 8100822:	f8a7 3806 	strh.w	r3, [r7, #2054]	@ 0x806
    while (cnt < CDC_USB_MAX_PKT && CDC_TX_RingBuffer_Get(&pkt[cnt]))
 8100826:	e004      	b.n	8100832 <CDC_TxPoll_Task+0x2a>
    {
        ++cnt;
 8100828:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 810082c:	3301      	adds	r3, #1
 810082e:	f8a7 3806 	strh.w	r3, [r7, #2054]	@ 0x806
    while (cnt < CDC_USB_MAX_PKT && CDC_TX_RingBuffer_Get(&pkt[cnt]))
 8100832:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8100836:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810083a:	d209      	bcs.n	8100850 <CDC_TxPoll_Task+0x48>
 810083c:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8100840:	1d3a      	adds	r2, r7, #4
 8100842:	4413      	add	r3, r2
 8100844:	4618      	mov	r0, r3
 8100846:	f000 fd67 	bl	8101318 <CDC_TX_RingBuffer_Get>
 810084a:	4603      	mov	r3, r0
 810084c:	2b00      	cmp	r3, #0
 810084e:	d1eb      	bne.n	8100828 <CDC_TxPoll_Task+0x20>
    }

    if (cnt == 0)
 8100850:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8100854:	2b00      	cmp	r3, #0
 8100856:	d00b      	beq.n	8100870 <CDC_TxPoll_Task+0x68>
    {
        return;
    }

    if (CDC_Transmit_FS(pkt, cnt) != USBD_OK)
 8100858:	f8b7 2806 	ldrh.w	r2, [r7, #2054]	@ 0x806
 810085c:	1d3b      	adds	r3, r7, #4
 810085e:	4611      	mov	r1, r2
 8100860:	4618      	mov	r0, r3
 8100862:	f00d fc93 	bl	810e18c <CDC_Transmit_FS>
 8100866:	4603      	mov	r3, r0
 8100868:	2b00      	cmp	r3, #0
 810086a:	e002      	b.n	8100872 <CDC_TxPoll_Task+0x6a>
        return;
 810086c:	bf00      	nop
 810086e:	e000      	b.n	8100872 <CDC_TxPoll_Task+0x6a>
        return;
 8100870:	bf00      	nop
    {
        return;
    }
}
 8100872:	f607 0708 	addw	r7, r7, #2056	@ 0x808
 8100876:	46bd      	mov	sp, r7
 8100878:	bd80      	pop	{r7, pc}
	...

0810087c <USB_Check_Task>:

static void USB_Check_Task(void)
{
 810087c:	b580      	push	{r7, lr}
 810087e:	b082      	sub	sp, #8
 8100880:	af00      	add	r7, sp, #0
    if (USB_checkUSB())
 8100882:	f000 fd9d 	bl	81013c0 <USB_checkUSB>
 8100886:	4603      	mov	r3, r0
 8100888:	2b00      	cmp	r3, #0
 810088a:	d01a      	beq.n	81008c2 <USB_Check_Task+0x46>
    {
    	USB_setCheckFlag(0);
 810088c:	2000      	movs	r0, #0
 810088e:	f000 fda3 	bl	81013d8 <USB_setCheckFlag>
        uint8_t comPortState = CDC_ComPort_IsOpen() ? 1 : 0;
 8100892:	f00d fcb3 	bl	810e1fc <CDC_ComPort_IsOpen>
 8100896:	4603      	mov	r3, r0
 8100898:	71fb      	strb	r3, [r7, #7]
        if(comPortState){
 810089a:	79fb      	ldrb	r3, [r7, #7]
 810089c:	2b00      	cmp	r3, #0
 810089e:	d005      	beq.n	81008ac <USB_Check_Task+0x30>
        	LL_GPIO_ResetOutputPin(MCU_IO_DEBUG_LED3_GPIO_Port, MCU_IO_DEBUG_LED3_Pin);
 81008a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81008a4:	4809      	ldr	r0, [pc, #36]	@ (81008cc <USB_Check_Task+0x50>)
 81008a6:	f7ff ff59 	bl	810075c <LL_GPIO_ResetOutputPin>
 81008aa:	e004      	b.n	81008b6 <USB_Check_Task+0x3a>
        }else{
        	LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED3_GPIO_Port, MCU_IO_DEBUG_LED3_Pin);
 81008ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81008b0:	4806      	ldr	r0, [pc, #24]	@ (81008cc <USB_Check_Task+0x50>)
 81008b2:	f7ff ff45 	bl	8100740 <LL_GPIO_SetOutputPin>
        }
        SharedREG_Write(DIR_M4_TO_M7, 0, comPortState);
 81008b6:	79fb      	ldrb	r3, [r7, #7]
 81008b8:	461a      	mov	r2, r3
 81008ba:	2100      	movs	r1, #0
 81008bc:	2001      	movs	r0, #1
 81008be:	f000 f85b 	bl	8100978 <SharedREG_Write>
    }
}
 81008c2:	bf00      	nop
 81008c4:	3708      	adds	r7, #8
 81008c6:	46bd      	mov	sp, r7
 81008c8:	bd80      	pop	{r7, pc}
 81008ca:	bf00      	nop
 81008cc:	58020c00 	.word	0x58020c00

081008d0 <UART_Port_RxPoll_Task>:
static void UART_Port_RxPoll_Task(void)
{
 81008d0:	b580      	push	{r7, lr}
 81008d2:	b082      	sub	sp, #8
 81008d4:	af00      	add	r7, sp, #0

        int c;
        while ((c = UART_DMA_Driver_Read(UART_PORT)) != -1)
 81008d6:	e004      	b.n	81008e2 <UART_Port_RxPoll_Task+0x12>
        {
            CDC_SendChar((char)c);
 81008d8:	687b      	ldr	r3, [r7, #4]
 81008da:	b2db      	uxtb	r3, r3
 81008dc:	4618      	mov	r0, r3
 81008de:	f000 fda8 	bl	8101432 <CDC_SendChar>
        while ((c = UART_DMA_Driver_Read(UART_PORT)) != -1)
 81008e2:	4806      	ldr	r0, [pc, #24]	@ (81008fc <UART_Port_RxPoll_Task+0x2c>)
 81008e4:	f000 fc69 	bl	81011ba <UART_DMA_Driver_Read>
 81008e8:	6078      	str	r0, [r7, #4]
 81008ea:	687b      	ldr	r3, [r7, #4]
 81008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 81008f0:	d1f2      	bne.n	81008d8 <UART_Port_RxPoll_Task+0x8>
        }

}
 81008f2:	bf00      	nop
 81008f4:	bf00      	nop
 81008f6:	3708      	adds	r7, #8
 81008f8:	46bd      	mov	sp, r7
 81008fa:	bd80      	pop	{r7, pc}
 81008fc:	40011400 	.word	0x40011400

08100900 <SchedulerTasks_Create>:
 *************************************************/

#define NUM_SCHEDULER_TASKS (sizeof(schedulerTasks) / sizeof(schedulerTasks[0]))

void SchedulerTasks_Create(void)
{
 8100900:	b580      	push	{r7, lr}
 8100902:	b082      	sub	sp, #8
 8100904:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUM_SCHEDULER_TASKS; i++)
 8100906:	2300      	movs	r3, #0
 8100908:	71fb      	strb	r3, [r7, #7]
 810090a:	e029      	b.n	8100960 <SchedulerTasks_Create+0x60>
    {
        SCH_TASK_CreateTask(&schedulerTasks[i].taskHandle, &schedulerTasks[i].taskProperty);
 810090c:	79fa      	ldrb	r2, [r7, #7]
 810090e:	4613      	mov	r3, r2
 8100910:	009b      	lsls	r3, r3, #2
 8100912:	4413      	add	r3, r2
 8100914:	009b      	lsls	r3, r3, #2
 8100916:	4a16      	ldr	r2, [pc, #88]	@ (8100970 <SchedulerTasks_Create+0x70>)
 8100918:	1898      	adds	r0, r3, r2
 810091a:	79fa      	ldrb	r2, [r7, #7]
 810091c:	4613      	mov	r3, r2
 810091e:	009b      	lsls	r3, r3, #2
 8100920:	4413      	add	r3, r2
 8100922:	009b      	lsls	r3, r3, #2
 8100924:	4a12      	ldr	r2, [pc, #72]	@ (8100970 <SchedulerTasks_Create+0x70>)
 8100926:	4413      	add	r3, r2
 8100928:	3304      	adds	r3, #4
 810092a:	4619      	mov	r1, r3
 810092c:	f7ff fd32 	bl	8100394 <SCH_TASK_CreateTask>
        if (schedulerTasks[i].taskProperty.taskType == SCH_TASK_ASYNC)
 8100930:	79fa      	ldrb	r2, [r7, #7]
 8100932:	490f      	ldr	r1, [pc, #60]	@ (8100970 <SchedulerTasks_Create+0x70>)
 8100934:	4613      	mov	r3, r2
 8100936:	009b      	lsls	r3, r3, #2
 8100938:	4413      	add	r3, r2
 810093a:	009b      	lsls	r3, r3, #2
 810093c:	440b      	add	r3, r1
 810093e:	3304      	adds	r3, #4
 8100940:	781b      	ldrb	r3, [r3, #0]
 8100942:	2b02      	cmp	r3, #2
 8100944:	d109      	bne.n	810095a <SchedulerTasks_Create+0x5a>
        {
            asyncTaskHandle = schedulerTasks[i].taskHandle;
 8100946:	79fa      	ldrb	r2, [r7, #7]
 8100948:	4909      	ldr	r1, [pc, #36]	@ (8100970 <SchedulerTasks_Create+0x70>)
 810094a:	4613      	mov	r3, r2
 810094c:	009b      	lsls	r3, r3, #2
 810094e:	4413      	add	r3, r2
 8100950:	009b      	lsls	r3, r3, #2
 8100952:	440b      	add	r3, r1
 8100954:	781a      	ldrb	r2, [r3, #0]
 8100956:	4b07      	ldr	r3, [pc, #28]	@ (8100974 <SchedulerTasks_Create+0x74>)
 8100958:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_SCHEDULER_TASKS; i++)
 810095a:	79fb      	ldrb	r3, [r7, #7]
 810095c:	3301      	adds	r3, #1
 810095e:	71fb      	strb	r3, [r7, #7]
 8100960:	79fb      	ldrb	r3, [r7, #7]
 8100962:	2b05      	cmp	r3, #5
 8100964:	d9d2      	bls.n	810090c <SchedulerTasks_Create+0xc>
        }
    }
}
 8100966:	bf00      	nop
 8100968:	bf00      	nop
 810096a:	3708      	adds	r7, #8
 810096c:	46bd      	mov	sp, r7
 810096e:	bd80      	pop	{r7, pc}
 8100970:	10032000 	.word	0x10032000
 8100974:	10032460 	.word	0x10032460

08100978 <SharedREG_Write>:

#include "shared_reg.h"
#include <string.h>

void SharedREG_Write(SharedDir_t dir, uint16_t slot, uint8_t data)
{
 8100978:	b480      	push	{r7}
 810097a:	b083      	sub	sp, #12
 810097c:	af00      	add	r7, sp, #0
 810097e:	4603      	mov	r3, r0
 8100980:	71fb      	strb	r3, [r7, #7]
 8100982:	460b      	mov	r3, r1
 8100984:	80bb      	strh	r3, [r7, #4]
 8100986:	4613      	mov	r3, r2
 8100988:	71bb      	strb	r3, [r7, #6]
    if (slot > SHARED_SLOT_MAX) return;
 810098a:	88bb      	ldrh	r3, [r7, #4]
 810098c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8100990:	d211      	bcs.n	81009b6 <SharedREG_Write+0x3e>
    if (!SHARED_IS_WRITER(dir)) return;
 8100992:	79fb      	ldrb	r3, [r7, #7]
 8100994:	2b01      	cmp	r3, #1
 8100996:	d110      	bne.n	81009ba <SharedREG_Write+0x42>

    if (dir == DIR_M7_TO_M4)
 8100998:	79fb      	ldrb	r3, [r7, #7]
 810099a:	2b00      	cmp	r3, #0
 810099c:	d104      	bne.n	81009a8 <SharedREG_Write+0x30>
        SHARED.M7_to_M4[slot] = data;
 810099e:	490a      	ldr	r1, [pc, #40]	@ (81009c8 <SharedREG_Write+0x50>)
 81009a0:	88bb      	ldrh	r3, [r7, #4]
 81009a2:	79ba      	ldrb	r2, [r7, #6]
 81009a4:	54ca      	strb	r2, [r1, r3]
 81009a6:	e009      	b.n	81009bc <SharedREG_Write+0x44>
    else
        SHARED.M4_to_M7[slot] = data;
 81009a8:	4a07      	ldr	r2, [pc, #28]	@ (81009c8 <SharedREG_Write+0x50>)
 81009aa:	88bb      	ldrh	r3, [r7, #4]
 81009ac:	4413      	add	r3, r2
 81009ae:	79ba      	ldrb	r2, [r7, #6]
 81009b0:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 81009b4:	e002      	b.n	81009bc <SharedREG_Write+0x44>
    if (slot > SHARED_SLOT_MAX) return;
 81009b6:	bf00      	nop
 81009b8:	e000      	b.n	81009bc <SharedREG_Write+0x44>
    if (!SHARED_IS_WRITER(dir)) return;
 81009ba:	bf00      	nop
}
 81009bc:	370c      	adds	r7, #12
 81009be:	46bd      	mov	sp, r7
 81009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009c4:	4770      	bx	lr
 81009c6:	bf00      	nop
 81009c8:	3800f800 	.word	0x3800f800

081009cc <SharedREG_Clear>:
            SHARED.M7_to_M4[slot] :
            SHARED.M4_to_M7[slot];
}

void SharedREG_Clear(SharedDir_t dir)
{
 81009cc:	b580      	push	{r7, lr}
 81009ce:	b082      	sub	sp, #8
 81009d0:	af00      	add	r7, sp, #0
 81009d2:	4603      	mov	r3, r0
 81009d4:	71fb      	strb	r3, [r7, #7]
    if (!SHARED_IS_WRITER(dir)) return;
 81009d6:	79fb      	ldrb	r3, [r7, #7]
 81009d8:	2b01      	cmp	r3, #1
 81009da:	d110      	bne.n	81009fe <SharedREG_Clear+0x32>

    if (dir == DIR_M7_TO_M4)
 81009dc:	79fb      	ldrb	r3, [r7, #7]
 81009de:	2b00      	cmp	r3, #0
 81009e0:	d106      	bne.n	81009f0 <SharedREG_Clear+0x24>
        memset((void *)SHARED.M7_to_M4, 0, sizeof(SHARED.M7_to_M4));
 81009e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81009e6:	2100      	movs	r1, #0
 81009e8:	4807      	ldr	r0, [pc, #28]	@ (8100a08 <SharedREG_Clear+0x3c>)
 81009ea:	f00e f879 	bl	810eae0 <memset>
 81009ee:	e007      	b.n	8100a00 <SharedREG_Clear+0x34>
    else
        memset((void *)SHARED.M4_to_M7, 0, sizeof(SHARED.M4_to_M7));
 81009f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81009f4:	2100      	movs	r1, #0
 81009f6:	4805      	ldr	r0, [pc, #20]	@ (8100a0c <SharedREG_Clear+0x40>)
 81009f8:	f00e f872 	bl	810eae0 <memset>
 81009fc:	e000      	b.n	8100a00 <SharedREG_Clear+0x34>
    if (!SHARED_IS_WRITER(dir)) return;
 81009fe:	bf00      	nop
}
 8100a00:	3708      	adds	r7, #8
 8100a02:	46bd      	mov	sp, r7
 8100a04:	bd80      	pop	{r7, pc}
 8100a06:	bf00      	nop
 8100a08:	3800f800 	.word	0x3800f800
 8100a0c:	3800fc00 	.word	0x3800fc00

08100a10 <SharedREG_Init>:

void SharedREG_Init(SharedDir_t dir)
{
 8100a10:	b580      	push	{r7, lr}
 8100a12:	b082      	sub	sp, #8
 8100a14:	af00      	add	r7, sp, #0
 8100a16:	4603      	mov	r3, r0
 8100a18:	71fb      	strb	r3, [r7, #7]
    if (!SHARED_IS_WRITER(dir)) return;
 8100a1a:	79fb      	ldrb	r3, [r7, #7]
 8100a1c:	2b01      	cmp	r3, #1
 8100a1e:	d104      	bne.n	8100a2a <SharedREG_Init+0x1a>

    SharedREG_Clear(dir);
 8100a20:	79fb      	ldrb	r3, [r7, #7]
 8100a22:	4618      	mov	r0, r3
 8100a24:	f7ff ffd2 	bl	81009cc <SharedREG_Clear>
 8100a28:	e000      	b.n	8100a2c <SharedREG_Init+0x1c>
    if (!SHARED_IS_WRITER(dir)) return;
 8100a2a:	bf00      	nop
//    if (dir == DIR_M4_TO_M7)
//    {
//        SharedREG_Write(DIR_M4_TO_M7, 0, 0);
//    }
}
 8100a2c:	3708      	adds	r7, #8
 8100a2e:	46bd      	mov	sp, r7
 8100a30:	bd80      	pop	{r7, pc}

08100a32 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8100a32:	b480      	push	{r7}
 8100a34:	b083      	sub	sp, #12
 8100a36:	af00      	add	r7, sp, #0
 8100a38:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8100a3a:	687b      	ldr	r3, [r7, #4]
 8100a3c:	681b      	ldr	r3, [r3, #0]
 8100a3e:	f043 0201 	orr.w	r2, r3, #1
 8100a42:	687b      	ldr	r3, [r7, #4]
 8100a44:	601a      	str	r2, [r3, #0]
}
 8100a46:	bf00      	nop
 8100a48:	370c      	adds	r7, #12
 8100a4a:	46bd      	mov	sp, r7
 8100a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a50:	4770      	bx	lr

08100a52 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 8100a52:	b480      	push	{r7}
 8100a54:	b083      	sub	sp, #12
 8100a56:	af00      	add	r7, sp, #0
 8100a58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8100a5a:	687b      	ldr	r3, [r7, #4]
 8100a5c:	681b      	ldr	r3, [r3, #0]
 8100a5e:	f023 0201 	bic.w	r2, r3, #1
 8100a62:	687b      	ldr	r3, [r7, #4]
 8100a64:	601a      	str	r2, [r3, #0]
}
 8100a66:	bf00      	nop
 8100a68:	370c      	adds	r7, #12
 8100a6a:	46bd      	mov	sp, r7
 8100a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a70:	4770      	bx	lr

08100a72 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8100a72:	b480      	push	{r7}
 8100a74:	b083      	sub	sp, #12
 8100a76:	af00      	add	r7, sp, #0
 8100a78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8100a7a:	687b      	ldr	r3, [r7, #4]
 8100a7c:	69db      	ldr	r3, [r3, #28]
 8100a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100a82:	2b80      	cmp	r3, #128	@ 0x80
 8100a84:	d101      	bne.n	8100a8a <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8100a86:	2301      	movs	r3, #1
 8100a88:	e000      	b.n	8100a8c <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8100a8a:	2300      	movs	r3, #0
}
 8100a8c:	4618      	mov	r0, r3
 8100a8e:	370c      	adds	r7, #12
 8100a90:	46bd      	mov	sp, r7
 8100a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a96:	4770      	bx	lr

08100a98 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8100a98:	b480      	push	{r7}
 8100a9a:	b089      	sub	sp, #36	@ 0x24
 8100a9c:	af00      	add	r7, sp, #0
 8100a9e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8100aa0:	687b      	ldr	r3, [r7, #4]
 8100aa2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100aa4:	68fb      	ldr	r3, [r7, #12]
 8100aa6:	e853 3f00 	ldrex	r3, [r3]
 8100aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8100aac:	68bb      	ldr	r3, [r7, #8]
 8100aae:	f043 0310 	orr.w	r3, r3, #16
 8100ab2:	61fb      	str	r3, [r7, #28]
 8100ab4:	687b      	ldr	r3, [r7, #4]
 8100ab6:	69fa      	ldr	r2, [r7, #28]
 8100ab8:	61ba      	str	r2, [r7, #24]
 8100aba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100abc:	6979      	ldr	r1, [r7, #20]
 8100abe:	69ba      	ldr	r2, [r7, #24]
 8100ac0:	e841 2300 	strex	r3, r2, [r1]
 8100ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8100ac6:	693b      	ldr	r3, [r7, #16]
 8100ac8:	2b00      	cmp	r3, #0
 8100aca:	d1e9      	bne.n	8100aa0 <LL_USART_EnableIT_IDLE+0x8>
}
 8100acc:	bf00      	nop
 8100ace:	bf00      	nop
 8100ad0:	3724      	adds	r7, #36	@ 0x24
 8100ad2:	46bd      	mov	sp, r7
 8100ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ad8:	4770      	bx	lr

08100ada <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8100ada:	b480      	push	{r7}
 8100adc:	b089      	sub	sp, #36	@ 0x24
 8100ade:	af00      	add	r7, sp, #0
 8100ae0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8100ae2:	687b      	ldr	r3, [r7, #4]
 8100ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100ae6:	68fb      	ldr	r3, [r7, #12]
 8100ae8:	e853 3f00 	ldrex	r3, [r3]
 8100aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8100aee:	68bb      	ldr	r3, [r7, #8]
 8100af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100af4:	61fb      	str	r3, [r7, #28]
 8100af6:	687b      	ldr	r3, [r7, #4]
 8100af8:	69fa      	ldr	r2, [r7, #28]
 8100afa:	61ba      	str	r2, [r7, #24]
 8100afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100afe:	6979      	ldr	r1, [r7, #20]
 8100b00:	69ba      	ldr	r2, [r7, #24]
 8100b02:	e841 2300 	strex	r3, r2, [r1]
 8100b06:	613b      	str	r3, [r7, #16]
   return(result);
 8100b08:	693b      	ldr	r3, [r7, #16]
 8100b0a:	2b00      	cmp	r3, #0
 8100b0c:	d1e9      	bne.n	8100ae2 <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 8100b0e:	bf00      	nop
 8100b10:	bf00      	nop
 8100b12:	3724      	adds	r7, #36	@ 0x24
 8100b14:	46bd      	mov	sp, r7
 8100b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b1a:	4770      	bx	lr

08100b1c <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8100b1c:	b480      	push	{r7}
 8100b1e:	b089      	sub	sp, #36	@ 0x24
 8100b20:	af00      	add	r7, sp, #0
 8100b22:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8100b24:	687b      	ldr	r3, [r7, #4]
 8100b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100b28:	68fb      	ldr	r3, [r7, #12]
 8100b2a:	e853 3f00 	ldrex	r3, [r3]
 8100b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8100b30:	68bb      	ldr	r3, [r7, #8]
 8100b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8100b36:	61fb      	str	r3, [r7, #28]
 8100b38:	687b      	ldr	r3, [r7, #4]
 8100b3a:	69fa      	ldr	r2, [r7, #28]
 8100b3c:	61ba      	str	r2, [r7, #24]
 8100b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100b40:	6979      	ldr	r1, [r7, #20]
 8100b42:	69ba      	ldr	r2, [r7, #24]
 8100b44:	e841 2300 	strex	r3, r2, [r1]
 8100b48:	613b      	str	r3, [r7, #16]
   return(result);
 8100b4a:	693b      	ldr	r3, [r7, #16]
 8100b4c:	2b00      	cmp	r3, #0
 8100b4e:	d1e9      	bne.n	8100b24 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8100b50:	bf00      	nop
 8100b52:	bf00      	nop
 8100b54:	3724      	adds	r7, #36	@ 0x24
 8100b56:	46bd      	mov	sp, r7
 8100b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b5c:	4770      	bx	lr

08100b5e <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8100b5e:	b480      	push	{r7}
 8100b60:	b083      	sub	sp, #12
 8100b62:	af00      	add	r7, sp, #0
 8100b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8100b66:	687b      	ldr	r3, [r7, #4]
 8100b68:	681b      	ldr	r3, [r3, #0]
 8100b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100b6e:	2b80      	cmp	r3, #128	@ 0x80
 8100b70:	d101      	bne.n	8100b76 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8100b72:	2301      	movs	r3, #1
 8100b74:	e000      	b.n	8100b78 <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8100b76:	2300      	movs	r3, #0
}
 8100b78:	4618      	mov	r0, r3
 8100b7a:	370c      	adds	r7, #12
 8100b7c:	46bd      	mov	sp, r7
 8100b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b82:	4770      	bx	lr

08100b84 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8100b84:	b480      	push	{r7}
 8100b86:	b089      	sub	sp, #36	@ 0x24
 8100b88:	af00      	add	r7, sp, #0
 8100b8a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8100b8c:	687b      	ldr	r3, [r7, #4]
 8100b8e:	3308      	adds	r3, #8
 8100b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100b92:	68fb      	ldr	r3, [r7, #12]
 8100b94:	e853 3f00 	ldrex	r3, [r3]
 8100b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8100b9a:	68bb      	ldr	r3, [r7, #8]
 8100b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100ba0:	61fb      	str	r3, [r7, #28]
 8100ba2:	687b      	ldr	r3, [r7, #4]
 8100ba4:	3308      	adds	r3, #8
 8100ba6:	69fa      	ldr	r2, [r7, #28]
 8100ba8:	61ba      	str	r2, [r7, #24]
 8100baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100bac:	6979      	ldr	r1, [r7, #20]
 8100bae:	69ba      	ldr	r2, [r7, #24]
 8100bb0:	e841 2300 	strex	r3, r2, [r1]
 8100bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8100bb6:	693b      	ldr	r3, [r7, #16]
 8100bb8:	2b00      	cmp	r3, #0
 8100bba:	d1e7      	bne.n	8100b8c <LL_USART_EnableDMAReq_RX+0x8>
}
 8100bbc:	bf00      	nop
 8100bbe:	bf00      	nop
 8100bc0:	3724      	adds	r7, #36	@ 0x24
 8100bc2:	46bd      	mov	sp, r7
 8100bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bc8:	4770      	bx	lr

08100bca <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8100bca:	b480      	push	{r7}
 8100bcc:	b085      	sub	sp, #20
 8100bce:	af00      	add	r7, sp, #0
 8100bd0:	6078      	str	r0, [r7, #4]
 8100bd2:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8100bd4:	683b      	ldr	r3, [r7, #0]
 8100bd6:	2b00      	cmp	r3, #0
 8100bd8:	d103      	bne.n	8100be2 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8100bda:	687b      	ldr	r3, [r7, #4]
 8100bdc:	3328      	adds	r3, #40	@ 0x28
 8100bde:	60fb      	str	r3, [r7, #12]
 8100be0:	e002      	b.n	8100be8 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8100be2:	687b      	ldr	r3, [r7, #4]
 8100be4:	3324      	adds	r3, #36	@ 0x24
 8100be6:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8100be8:	68fb      	ldr	r3, [r7, #12]
}
 8100bea:	4618      	mov	r0, r3
 8100bec:	3714      	adds	r7, #20
 8100bee:	46bd      	mov	sp, r7
 8100bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bf4:	4770      	bx	lr

08100bf6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8100bf6:	b480      	push	{r7}
 8100bf8:	b083      	sub	sp, #12
 8100bfa:	af00      	add	r7, sp, #0
 8100bfc:	6078      	str	r0, [r7, #4]
 8100bfe:	460b      	mov	r3, r1
 8100c00:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8100c02:	78fa      	ldrb	r2, [r7, #3]
 8100c04:	687b      	ldr	r3, [r7, #4]
 8100c06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8100c08:	bf00      	nop
 8100c0a:	370c      	adds	r7, #12
 8100c0c:	46bd      	mov	sp, r7
 8100c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c12:	4770      	bx	lr

08100c14 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100c14:	b480      	push	{r7}
 8100c16:	b085      	sub	sp, #20
 8100c18:	af00      	add	r7, sp, #0
 8100c1a:	6078      	str	r0, [r7, #4]
 8100c1c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100c1e:	687b      	ldr	r3, [r7, #4]
 8100c20:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8100c22:	4a0c      	ldr	r2, [pc, #48]	@ (8100c54 <LL_DMA_EnableStream+0x40>)
 8100c24:	683b      	ldr	r3, [r7, #0]
 8100c26:	4413      	add	r3, r2
 8100c28:	781b      	ldrb	r3, [r3, #0]
 8100c2a:	461a      	mov	r2, r3
 8100c2c:	68fb      	ldr	r3, [r7, #12]
 8100c2e:	4413      	add	r3, r2
 8100c30:	681b      	ldr	r3, [r3, #0]
 8100c32:	4908      	ldr	r1, [pc, #32]	@ (8100c54 <LL_DMA_EnableStream+0x40>)
 8100c34:	683a      	ldr	r2, [r7, #0]
 8100c36:	440a      	add	r2, r1
 8100c38:	7812      	ldrb	r2, [r2, #0]
 8100c3a:	4611      	mov	r1, r2
 8100c3c:	68fa      	ldr	r2, [r7, #12]
 8100c3e:	440a      	add	r2, r1
 8100c40:	f043 0301 	orr.w	r3, r3, #1
 8100c44:	6013      	str	r3, [r2, #0]
}
 8100c46:	bf00      	nop
 8100c48:	3714      	adds	r7, #20
 8100c4a:	46bd      	mov	sp, r7
 8100c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c50:	4770      	bx	lr
 8100c52:	bf00      	nop
 8100c54:	0810ec18 	.word	0x0810ec18

08100c58 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100c58:	b480      	push	{r7}
 8100c5a:	b085      	sub	sp, #20
 8100c5c:	af00      	add	r7, sp, #0
 8100c5e:	6078      	str	r0, [r7, #4]
 8100c60:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100c62:	687b      	ldr	r3, [r7, #4]
 8100c64:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8100c66:	4a0c      	ldr	r2, [pc, #48]	@ (8100c98 <LL_DMA_DisableStream+0x40>)
 8100c68:	683b      	ldr	r3, [r7, #0]
 8100c6a:	4413      	add	r3, r2
 8100c6c:	781b      	ldrb	r3, [r3, #0]
 8100c6e:	461a      	mov	r2, r3
 8100c70:	68fb      	ldr	r3, [r7, #12]
 8100c72:	4413      	add	r3, r2
 8100c74:	681b      	ldr	r3, [r3, #0]
 8100c76:	4908      	ldr	r1, [pc, #32]	@ (8100c98 <LL_DMA_DisableStream+0x40>)
 8100c78:	683a      	ldr	r2, [r7, #0]
 8100c7a:	440a      	add	r2, r1
 8100c7c:	7812      	ldrb	r2, [r2, #0]
 8100c7e:	4611      	mov	r1, r2
 8100c80:	68fa      	ldr	r2, [r7, #12]
 8100c82:	440a      	add	r2, r1
 8100c84:	f023 0301 	bic.w	r3, r3, #1
 8100c88:	6013      	str	r3, [r2, #0]
}
 8100c8a:	bf00      	nop
 8100c8c:	3714      	adds	r7, #20
 8100c8e:	46bd      	mov	sp, r7
 8100c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c94:	4770      	bx	lr
 8100c96:	bf00      	nop
 8100c98:	0810ec18 	.word	0x0810ec18

08100c9c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t NbData)
{
 8100c9c:	b480      	push	{r7}
 8100c9e:	b087      	sub	sp, #28
 8100ca0:	af00      	add	r7, sp, #0
 8100ca2:	60f8      	str	r0, [r7, #12]
 8100ca4:	60b9      	str	r1, [r7, #8]
 8100ca6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100ca8:	68fb      	ldr	r3, [r7, #12]
 8100caa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8100cac:	4a0d      	ldr	r2, [pc, #52]	@ (8100ce4 <LL_DMA_SetDataLength+0x48>)
 8100cae:	68bb      	ldr	r3, [r7, #8]
 8100cb0:	4413      	add	r3, r2
 8100cb2:	781b      	ldrb	r3, [r3, #0]
 8100cb4:	461a      	mov	r2, r3
 8100cb6:	697b      	ldr	r3, [r7, #20]
 8100cb8:	4413      	add	r3, r2
 8100cba:	685b      	ldr	r3, [r3, #4]
 8100cbc:	0c1b      	lsrs	r3, r3, #16
 8100cbe:	041b      	lsls	r3, r3, #16
 8100cc0:	4908      	ldr	r1, [pc, #32]	@ (8100ce4 <LL_DMA_SetDataLength+0x48>)
 8100cc2:	68ba      	ldr	r2, [r7, #8]
 8100cc4:	440a      	add	r2, r1
 8100cc6:	7812      	ldrb	r2, [r2, #0]
 8100cc8:	4611      	mov	r1, r2
 8100cca:	697a      	ldr	r2, [r7, #20]
 8100ccc:	440a      	add	r2, r1
 8100cce:	4611      	mov	r1, r2
 8100cd0:	687a      	ldr	r2, [r7, #4]
 8100cd2:	4313      	orrs	r3, r2
 8100cd4:	604b      	str	r3, [r1, #4]
}
 8100cd6:	bf00      	nop
 8100cd8:	371c      	adds	r7, #28
 8100cda:	46bd      	mov	sp, r7
 8100cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ce0:	4770      	bx	lr
 8100ce2:	bf00      	nop
 8100ce4:	0810ec18 	.word	0x0810ec18

08100ce8 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100ce8:	b480      	push	{r7}
 8100cea:	b085      	sub	sp, #20
 8100cec:	af00      	add	r7, sp, #0
 8100cee:	6078      	str	r0, [r7, #4]
 8100cf0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100cf2:	687b      	ldr	r3, [r7, #4]
 8100cf4:	60fb      	str	r3, [r7, #12]

  return (READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT));
 8100cf6:	4a07      	ldr	r2, [pc, #28]	@ (8100d14 <LL_DMA_GetDataLength+0x2c>)
 8100cf8:	683b      	ldr	r3, [r7, #0]
 8100cfa:	4413      	add	r3, r2
 8100cfc:	781b      	ldrb	r3, [r3, #0]
 8100cfe:	461a      	mov	r2, r3
 8100d00:	68fb      	ldr	r3, [r7, #12]
 8100d02:	4413      	add	r3, r2
 8100d04:	685b      	ldr	r3, [r3, #4]
 8100d06:	b29b      	uxth	r3, r3
}
 8100d08:	4618      	mov	r0, r3
 8100d0a:	3714      	adds	r7, #20
 8100d0c:	46bd      	mov	sp, r7
 8100d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d12:	4770      	bx	lr
 8100d14:	0810ec18 	.word	0x0810ec18

08100d18 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8100d18:	b480      	push	{r7}
 8100d1a:	b087      	sub	sp, #28
 8100d1c:	af00      	add	r7, sp, #0
 8100d1e:	60f8      	str	r0, [r7, #12]
 8100d20:	60b9      	str	r1, [r7, #8]
 8100d22:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100d24:	68fb      	ldr	r3, [r7, #12]
 8100d26:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 8100d28:	4a07      	ldr	r2, [pc, #28]	@ (8100d48 <LL_DMA_SetMemoryAddress+0x30>)
 8100d2a:	68bb      	ldr	r3, [r7, #8]
 8100d2c:	4413      	add	r3, r2
 8100d2e:	781b      	ldrb	r3, [r3, #0]
 8100d30:	461a      	mov	r2, r3
 8100d32:	697b      	ldr	r3, [r7, #20]
 8100d34:	4413      	add	r3, r2
 8100d36:	461a      	mov	r2, r3
 8100d38:	687b      	ldr	r3, [r7, #4]
 8100d3a:	60d3      	str	r3, [r2, #12]
}
 8100d3c:	bf00      	nop
 8100d3e:	371c      	adds	r7, #28
 8100d40:	46bd      	mov	sp, r7
 8100d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d46:	4770      	bx	lr
 8100d48:	0810ec18 	.word	0x0810ec18

08100d4c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8100d4c:	b480      	push	{r7}
 8100d4e:	b087      	sub	sp, #28
 8100d50:	af00      	add	r7, sp, #0
 8100d52:	60f8      	str	r0, [r7, #12]
 8100d54:	60b9      	str	r1, [r7, #8]
 8100d56:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100d58:	68fb      	ldr	r3, [r7, #12]
 8100d5a:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8100d5c:	4a07      	ldr	r2, [pc, #28]	@ (8100d7c <LL_DMA_SetPeriphAddress+0x30>)
 8100d5e:	68bb      	ldr	r3, [r7, #8]
 8100d60:	4413      	add	r3, r2
 8100d62:	781b      	ldrb	r3, [r3, #0]
 8100d64:	461a      	mov	r2, r3
 8100d66:	697b      	ldr	r3, [r7, #20]
 8100d68:	4413      	add	r3, r2
 8100d6a:	461a      	mov	r2, r3
 8100d6c:	687b      	ldr	r3, [r7, #4]
 8100d6e:	6093      	str	r3, [r2, #8]
}
 8100d70:	bf00      	nop
 8100d72:	371c      	adds	r7, #28
 8100d74:	46bd      	mov	sp, r7
 8100d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d7a:	4770      	bx	lr
 8100d7c:	0810ec18 	.word	0x0810ec18

08100d80 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100d80:	b480      	push	{r7}
 8100d82:	b085      	sub	sp, #20
 8100d84:	af00      	add	r7, sp, #0
 8100d86:	6078      	str	r0, [r7, #4]
 8100d88:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100d8a:	687b      	ldr	r3, [r7, #4]
 8100d8c:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8100d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8100dc0 <LL_DMA_EnableIT_HT+0x40>)
 8100d90:	683b      	ldr	r3, [r7, #0]
 8100d92:	4413      	add	r3, r2
 8100d94:	781b      	ldrb	r3, [r3, #0]
 8100d96:	461a      	mov	r2, r3
 8100d98:	68fb      	ldr	r3, [r7, #12]
 8100d9a:	4413      	add	r3, r2
 8100d9c:	681b      	ldr	r3, [r3, #0]
 8100d9e:	4908      	ldr	r1, [pc, #32]	@ (8100dc0 <LL_DMA_EnableIT_HT+0x40>)
 8100da0:	683a      	ldr	r2, [r7, #0]
 8100da2:	440a      	add	r2, r1
 8100da4:	7812      	ldrb	r2, [r2, #0]
 8100da6:	4611      	mov	r1, r2
 8100da8:	68fa      	ldr	r2, [r7, #12]
 8100daa:	440a      	add	r2, r1
 8100dac:	f043 0308 	orr.w	r3, r3, #8
 8100db0:	6013      	str	r3, [r2, #0]
}
 8100db2:	bf00      	nop
 8100db4:	3714      	adds	r7, #20
 8100db6:	46bd      	mov	sp, r7
 8100db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dbc:	4770      	bx	lr
 8100dbe:	bf00      	nop
 8100dc0:	0810ec18 	.word	0x0810ec18

08100dc4 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100dc4:	b480      	push	{r7}
 8100dc6:	b085      	sub	sp, #20
 8100dc8:	af00      	add	r7, sp, #0
 8100dca:	6078      	str	r0, [r7, #4]
 8100dcc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100dce:	687b      	ldr	r3, [r7, #4]
 8100dd0:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE);
 8100dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8100e04 <LL_DMA_EnableIT_TE+0x40>)
 8100dd4:	683b      	ldr	r3, [r7, #0]
 8100dd6:	4413      	add	r3, r2
 8100dd8:	781b      	ldrb	r3, [r3, #0]
 8100dda:	461a      	mov	r2, r3
 8100ddc:	68fb      	ldr	r3, [r7, #12]
 8100dde:	4413      	add	r3, r2
 8100de0:	681b      	ldr	r3, [r3, #0]
 8100de2:	4908      	ldr	r1, [pc, #32]	@ (8100e04 <LL_DMA_EnableIT_TE+0x40>)
 8100de4:	683a      	ldr	r2, [r7, #0]
 8100de6:	440a      	add	r2, r1
 8100de8:	7812      	ldrb	r2, [r2, #0]
 8100dea:	4611      	mov	r1, r2
 8100dec:	68fa      	ldr	r2, [r7, #12]
 8100dee:	440a      	add	r2, r1
 8100df0:	f043 0304 	orr.w	r3, r3, #4
 8100df4:	6013      	str	r3, [r2, #0]
}
 8100df6:	bf00      	nop
 8100df8:	3714      	adds	r7, #20
 8100dfa:	46bd      	mov	sp, r7
 8100dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e00:	4770      	bx	lr
 8100e02:	bf00      	nop
 8100e04:	0810ec18 	.word	0x0810ec18

08100e08 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100e08:	b480      	push	{r7}
 8100e0a:	b085      	sub	sp, #20
 8100e0c:	af00      	add	r7, sp, #0
 8100e0e:	6078      	str	r0, [r7, #4]
 8100e10:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100e12:	687b      	ldr	r3, [r7, #4]
 8100e14:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8100e16:	4a0c      	ldr	r2, [pc, #48]	@ (8100e48 <LL_DMA_EnableIT_TC+0x40>)
 8100e18:	683b      	ldr	r3, [r7, #0]
 8100e1a:	4413      	add	r3, r2
 8100e1c:	781b      	ldrb	r3, [r3, #0]
 8100e1e:	461a      	mov	r2, r3
 8100e20:	68fb      	ldr	r3, [r7, #12]
 8100e22:	4413      	add	r3, r2
 8100e24:	681b      	ldr	r3, [r3, #0]
 8100e26:	4908      	ldr	r1, [pc, #32]	@ (8100e48 <LL_DMA_EnableIT_TC+0x40>)
 8100e28:	683a      	ldr	r2, [r7, #0]
 8100e2a:	440a      	add	r2, r1
 8100e2c:	7812      	ldrb	r2, [r2, #0]
 8100e2e:	4611      	mov	r1, r2
 8100e30:	68fa      	ldr	r2, [r7, #12]
 8100e32:	440a      	add	r2, r1
 8100e34:	f043 0310 	orr.w	r3, r3, #16
 8100e38:	6013      	str	r3, [r2, #0]
}
 8100e3a:	bf00      	nop
 8100e3c:	3714      	adds	r7, #20
 8100e3e:	46bd      	mov	sp, r7
 8100e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e44:	4770      	bx	lr
 8100e46:	bf00      	nop
 8100e48:	0810ec18 	.word	0x0810ec18

08100e4c <UART_DMA_Driver_Init>:
        .old_dma_pos       = 0
    }
};

Std_ReturnType UART_DMA_Driver_Init(void)
{
 8100e4c:	b5b0      	push	{r4, r5, r7, lr}
 8100e4e:	b084      	sub	sp, #16
 8100e50:	af02      	add	r7, sp, #8
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100e52:	2300      	movs	r3, #0
 8100e54:	607b      	str	r3, [r7, #4]
 8100e56:	e022      	b.n	8100e9e <UART_DMA_Driver_Init+0x52>
        LL_USART_Disable(uart_dma_drivers[i].uart);
 8100e58:	494b      	ldr	r1, [pc, #300]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100e5a:	687a      	ldr	r2, [r7, #4]
 8100e5c:	4613      	mov	r3, r2
 8100e5e:	011b      	lsls	r3, r3, #4
 8100e60:	1a9b      	subs	r3, r3, r2
 8100e62:	00db      	lsls	r3, r3, #3
 8100e64:	440b      	add	r3, r1
 8100e66:	681b      	ldr	r3, [r3, #0]
 8100e68:	4618      	mov	r0, r3
 8100e6a:	f7ff fdf2 	bl	8100a52 <LL_USART_Disable>
        LL_DMA_DisableStream(uart_dma_drivers[i].dma_rx_instance, uart_dma_drivers[i].dma_rx_channel);
 8100e6e:	4946      	ldr	r1, [pc, #280]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100e70:	687a      	ldr	r2, [r7, #4]
 8100e72:	4613      	mov	r3, r2
 8100e74:	011b      	lsls	r3, r3, #4
 8100e76:	1a9b      	subs	r3, r3, r2
 8100e78:	00db      	lsls	r3, r3, #3
 8100e7a:	440b      	add	r3, r1
 8100e7c:	3364      	adds	r3, #100	@ 0x64
 8100e7e:	6818      	ldr	r0, [r3, #0]
 8100e80:	4941      	ldr	r1, [pc, #260]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100e82:	687a      	ldr	r2, [r7, #4]
 8100e84:	4613      	mov	r3, r2
 8100e86:	011b      	lsls	r3, r3, #4
 8100e88:	1a9b      	subs	r3, r3, r2
 8100e8a:	00db      	lsls	r3, r3, #3
 8100e8c:	440b      	add	r3, r1
 8100e8e:	3368      	adds	r3, #104	@ 0x68
 8100e90:	681b      	ldr	r3, [r3, #0]
 8100e92:	4619      	mov	r1, r3
 8100e94:	f7ff fee0 	bl	8100c58 <LL_DMA_DisableStream>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100e98:	687b      	ldr	r3, [r7, #4]
 8100e9a:	3301      	adds	r3, #1
 8100e9c:	607b      	str	r3, [r7, #4]
 8100e9e:	687b      	ldr	r3, [r7, #4]
 8100ea0:	2b00      	cmp	r3, #0
 8100ea2:	ddd9      	ble.n	8100e58 <UART_DMA_Driver_Init+0xc>
    }
    /* Index 0 – USART6 ------------------------------------------------- */
    RingBuffer_Create(&uart_dma_drivers[0].rx_buffer, 1,
 8100ea4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8100ea8:	9300      	str	r3, [sp, #0]
 8100eaa:	4b38      	ldr	r3, [pc, #224]	@ (8100f8c <UART_DMA_Driver_Init+0x140>)
 8100eac:	4a38      	ldr	r2, [pc, #224]	@ (8100f90 <UART_DMA_Driver_Init+0x144>)
 8100eae:	2101      	movs	r1, #1
 8100eb0:	4838      	ldr	r0, [pc, #224]	@ (8100f94 <UART_DMA_Driver_Init+0x148>)
 8100eb2:	f000 facc 	bl	810144e <RingBuffer_Create>
                      "UART6_RX", uart6_rx_data, UART6_BUFFER_SIZE);
    RingBuffer_Create(&uart_dma_drivers[0].tx_buffer, 2,
 8100eb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8100eba:	9300      	str	r3, [sp, #0]
 8100ebc:	4b36      	ldr	r3, [pc, #216]	@ (8100f98 <UART_DMA_Driver_Init+0x14c>)
 8100ebe:	4a37      	ldr	r2, [pc, #220]	@ (8100f9c <UART_DMA_Driver_Init+0x150>)
 8100ec0:	2102      	movs	r1, #2
 8100ec2:	4837      	ldr	r0, [pc, #220]	@ (8100fa0 <UART_DMA_Driver_Init+0x154>)
 8100ec4:	f000 fac3 	bl	810144e <RingBuffer_Create>
                      "UART6_TX", uart6_tx_data, UART6_BUFFER_SIZE);

    /* DMA circular RX --------------------------------------------------- */
    LL_DMA_SetPeriphAddress(uart_dma_drivers[0].dma_rx_instance,
 8100ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100eca:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8100ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100ece:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8100ed0:	2101      	movs	r1, #1
 8100ed2:	4834      	ldr	r0, [pc, #208]	@ (8100fa4 <UART_DMA_Driver_Init+0x158>)
 8100ed4:	f7ff fe79 	bl	8100bca <LL_USART_DMA_GetRegAddr>
 8100ed8:	4603      	mov	r3, r0
 8100eda:	461a      	mov	r2, r3
 8100edc:	4629      	mov	r1, r5
 8100ede:	4620      	mov	r0, r4
 8100ee0:	f7ff ff34 	bl	8100d4c <LL_DMA_SetPeriphAddress>
                            uart_dma_drivers[0].dma_rx_channel,
                            LL_USART_DMA_GetRegAddr(USART6,
                                LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance,
 8100ee4:	4b28      	ldr	r3, [pc, #160]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100ee8:	4a27      	ldr	r2, [pc, #156]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100eea:	6e91      	ldr	r1, [r2, #104]	@ 0x68
                            uart_dma_drivers[0].dma_rx_channel,
                            (uint32_t)uart_dma_drivers[0].dma_rx_buffer);
 8100eec:	4a26      	ldr	r2, [pc, #152]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100eee:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance,
 8100ef0:	4618      	mov	r0, r3
 8100ef2:	f7ff ff11 	bl	8100d18 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength (uart_dma_drivers[0].dma_rx_instance,
 8100ef6:	4b24      	ldr	r3, [pc, #144]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100efa:	4a23      	ldr	r2, [pc, #140]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100efc:	6e91      	ldr	r1, [r2, #104]	@ 0x68
                          uart_dma_drivers[0].dma_rx_channel,
                          uart_dma_drivers[0].dma_rx_buffer_size);
 8100efe:	4a22      	ldr	r2, [pc, #136]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100f00:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
    LL_DMA_SetDataLength (uart_dma_drivers[0].dma_rx_instance,
 8100f04:	4618      	mov	r0, r3
 8100f06:	f7ff fec9 	bl	8100c9c <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(uart_dma_drivers[0].dma_rx_instance,
 8100f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100f10:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8100f12:	4611      	mov	r1, r2
 8100f14:	4618      	mov	r0, r3
 8100f16:	f7ff ff77 	bl	8100e08 <LL_DMA_EnableIT_TC>
                       uart_dma_drivers[0].dma_rx_channel);
    LL_DMA_EnableIT_HT(uart_dma_drivers[0].dma_rx_instance,
 8100f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100f20:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8100f22:	4611      	mov	r1, r2
 8100f24:	4618      	mov	r0, r3
 8100f26:	f7ff ff2b 	bl	8100d80 <LL_DMA_EnableIT_HT>
                       uart_dma_drivers[0].dma_rx_channel);
    LL_DMA_EnableIT_TE(uart_dma_drivers[0].dma_rx_instance,
 8100f2a:	4b17      	ldr	r3, [pc, #92]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100f2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100f2e:	4a16      	ldr	r2, [pc, #88]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100f30:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8100f32:	4611      	mov	r1, r2
 8100f34:	4618      	mov	r0, r3
 8100f36:	f7ff ff45 	bl	8100dc4 <LL_DMA_EnableIT_TE>
                       uart_dma_drivers[0].dma_rx_channel);

    LL_DMA_EnableStream(uart_dma_drivers[0].dma_rx_instance,
 8100f3a:	4b13      	ldr	r3, [pc, #76]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100f3e:	4a12      	ldr	r2, [pc, #72]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100f40:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8100f42:	4611      	mov	r1, r2
 8100f44:	4618      	mov	r0, r3
 8100f46:	f7ff fe65 	bl	8100c14 <LL_DMA_EnableStream>
                        uart_dma_drivers[0].dma_rx_channel);

    LL_USART_EnableDMAReq_RX(USART6);
 8100f4a:	4816      	ldr	r0, [pc, #88]	@ (8100fa4 <UART_DMA_Driver_Init+0x158>)
 8100f4c:	f7ff fe1a 	bl	8100b84 <LL_USART_EnableDMAReq_RX>
    LL_USART_EnableIT_IDLE(USART6);
 8100f50:	4814      	ldr	r0, [pc, #80]	@ (8100fa4 <UART_DMA_Driver_Init+0x158>)
 8100f52:	f7ff fda1 	bl	8100a98 <LL_USART_EnableIT_IDLE>

    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100f56:	2300      	movs	r3, #0
 8100f58:	603b      	str	r3, [r7, #0]
 8100f5a:	e00d      	b.n	8100f78 <UART_DMA_Driver_Init+0x12c>
        LL_USART_Enable(uart_dma_drivers[i].uart);
 8100f5c:	490a      	ldr	r1, [pc, #40]	@ (8100f88 <UART_DMA_Driver_Init+0x13c>)
 8100f5e:	683a      	ldr	r2, [r7, #0]
 8100f60:	4613      	mov	r3, r2
 8100f62:	011b      	lsls	r3, r3, #4
 8100f64:	1a9b      	subs	r3, r3, r2
 8100f66:	00db      	lsls	r3, r3, #3
 8100f68:	440b      	add	r3, r1
 8100f6a:	681b      	ldr	r3, [r3, #0]
 8100f6c:	4618      	mov	r0, r3
 8100f6e:	f7ff fd60 	bl	8100a32 <LL_USART_Enable>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100f72:	683b      	ldr	r3, [r7, #0]
 8100f74:	3301      	adds	r3, #1
 8100f76:	603b      	str	r3, [r7, #0]
 8100f78:	683b      	ldr	r3, [r7, #0]
 8100f7a:	2b00      	cmp	r3, #0
 8100f7c:	ddee      	ble.n	8100f5c <UART_DMA_Driver_Init+0x110>
    }
    return E_OK;
 8100f7e:	2300      	movs	r3, #0
}
 8100f80:	4618      	mov	r0, r3
 8100f82:	3708      	adds	r7, #8
 8100f84:	46bd      	mov	sp, r7
 8100f86:	bdb0      	pop	{r4, r5, r7, pc}
 8100f88:	10032078 	.word	0x10032078
 8100f8c:	10032c64 	.word	0x10032c64
 8100f90:	0810eb94 	.word	0x0810eb94
 8100f94:	1003207c 	.word	0x1003207c
 8100f98:	10033464 	.word	0x10033464
 8100f9c:	0810eba0 	.word	0x0810eba0
 8100fa0:	100320ac 	.word	0x100320ac
 8100fa4:	40011400 	.word	0x40011400

08100fa8 <UART_DMA_Driver_Get>:
#define RESET 						    0U
#endif


UART_DMA_Driver_t* UART_DMA_Driver_Get(USART_TypeDef *uart)
{
 8100fa8:	b480      	push	{r7}
 8100faa:	b085      	sub	sp, #20
 8100fac:	af00      	add	r7, sp, #0
 8100fae:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100fb0:	2300      	movs	r3, #0
 8100fb2:	60fb      	str	r3, [r7, #12]
 8100fb4:	e015      	b.n	8100fe2 <UART_DMA_Driver_Get+0x3a>
        if (uart_dma_drivers[i].uart == uart) {
 8100fb6:	4910      	ldr	r1, [pc, #64]	@ (8100ff8 <UART_DMA_Driver_Get+0x50>)
 8100fb8:	68fa      	ldr	r2, [r7, #12]
 8100fba:	4613      	mov	r3, r2
 8100fbc:	011b      	lsls	r3, r3, #4
 8100fbe:	1a9b      	subs	r3, r3, r2
 8100fc0:	00db      	lsls	r3, r3, #3
 8100fc2:	440b      	add	r3, r1
 8100fc4:	681b      	ldr	r3, [r3, #0]
 8100fc6:	687a      	ldr	r2, [r7, #4]
 8100fc8:	429a      	cmp	r2, r3
 8100fca:	d107      	bne.n	8100fdc <UART_DMA_Driver_Get+0x34>
            return &uart_dma_drivers[i];
 8100fcc:	68fa      	ldr	r2, [r7, #12]
 8100fce:	4613      	mov	r3, r2
 8100fd0:	011b      	lsls	r3, r3, #4
 8100fd2:	1a9b      	subs	r3, r3, r2
 8100fd4:	00db      	lsls	r3, r3, #3
 8100fd6:	4a08      	ldr	r2, [pc, #32]	@ (8100ff8 <UART_DMA_Driver_Get+0x50>)
 8100fd8:	4413      	add	r3, r2
 8100fda:	e006      	b.n	8100fea <UART_DMA_Driver_Get+0x42>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100fdc:	68fb      	ldr	r3, [r7, #12]
 8100fde:	3301      	adds	r3, #1
 8100fe0:	60fb      	str	r3, [r7, #12]
 8100fe2:	68fb      	ldr	r3, [r7, #12]
 8100fe4:	2b00      	cmp	r3, #0
 8100fe6:	dde6      	ble.n	8100fb6 <UART_DMA_Driver_Get+0xe>
        }
    }
    return NULL;
 8100fe8:	2300      	movs	r3, #0
}
 8100fea:	4618      	mov	r0, r3
 8100fec:	3714      	adds	r7, #20
 8100fee:	46bd      	mov	sp, r7
 8100ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ff4:	4770      	bx	lr
 8100ff6:	bf00      	nop
 8100ff8:	10032078 	.word	0x10032078

08100ffc <UART_Driver_Write>:

void UART_Driver_Write(USART_TypeDef *uart, uint8_t data)
{
 8100ffc:	b580      	push	{r7, lr}
 8100ffe:	b084      	sub	sp, #16
 8101000:	af00      	add	r7, sp, #0
 8101002:	6078      	str	r0, [r7, #4]
 8101004:	460b      	mov	r3, r1
 8101006:	70fb      	strb	r3, [r7, #3]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8101008:	6878      	ldr	r0, [r7, #4]
 810100a:	f7ff ffcd 	bl	8100fa8 <UART_DMA_Driver_Get>
 810100e:	60b8      	str	r0, [r7, #8]
    if (driver == NULL)
 8101010:	68bb      	ldr	r3, [r7, #8]
 8101012:	2b00      	cmp	r3, #0
 8101014:	d01f      	beq.n	8101056 <UART_Driver_Write+0x5a>
        return;

    uint32_t timeout = 500000;
 8101016:	4b13      	ldr	r3, [pc, #76]	@ (8101064 <UART_Driver_Write+0x68>)
 8101018:	60fb      	str	r3, [r7, #12]

    while (!RingBuffer_Put(&driver->tx_buffer, data))
 810101a:	e005      	b.n	8101028 <UART_Driver_Write+0x2c>
    {
        if (--timeout == 0)
 810101c:	68fb      	ldr	r3, [r7, #12]
 810101e:	3b01      	subs	r3, #1
 8101020:	60fb      	str	r3, [r7, #12]
 8101022:	68fb      	ldr	r3, [r7, #12]
 8101024:	2b00      	cmp	r3, #0
 8101026:	d018      	beq.n	810105a <UART_Driver_Write+0x5e>
    while (!RingBuffer_Put(&driver->tx_buffer, data))
 8101028:	68bb      	ldr	r3, [r7, #8]
 810102a:	3334      	adds	r3, #52	@ 0x34
 810102c:	78fa      	ldrb	r2, [r7, #3]
 810102e:	4611      	mov	r1, r2
 8101030:	4618      	mov	r0, r3
 8101032:	f000 fa3f 	bl	81014b4 <RingBuffer_Put>
 8101036:	4603      	mov	r3, r0
 8101038:	f083 0301 	eor.w	r3, r3, #1
 810103c:	b2db      	uxtb	r3, r3
 810103e:	2b00      	cmp	r3, #0
 8101040:	d1ec      	bne.n	810101c <UART_Driver_Write+0x20>
        {
            return;
        }
    }

    if (!LL_USART_IsEnabledIT_TXE(uart)) {
 8101042:	6878      	ldr	r0, [r7, #4]
 8101044:	f7ff fd8b 	bl	8100b5e <LL_USART_IsEnabledIT_TXE_TXFNF>
 8101048:	4603      	mov	r3, r0
 810104a:	2b00      	cmp	r3, #0
 810104c:	d106      	bne.n	810105c <UART_Driver_Write+0x60>
        LL_USART_EnableIT_TXE(uart);
 810104e:	6878      	ldr	r0, [r7, #4]
 8101050:	f7ff fd43 	bl	8100ada <LL_USART_EnableIT_TXE_TXFNF>
 8101054:	e002      	b.n	810105c <UART_Driver_Write+0x60>
        return;
 8101056:	bf00      	nop
 8101058:	e000      	b.n	810105c <UART_Driver_Write+0x60>
            return;
 810105a:	bf00      	nop
    }
}
 810105c:	3710      	adds	r7, #16
 810105e:	46bd      	mov	sp, r7
 8101060:	bd80      	pop	{r7, pc}
 8101062:	bf00      	nop
 8101064:	0007a120 	.word	0x0007a120

08101068 <UART_Driver_TX_ISR>:
    atomic_store_explicit(&driver->tx_buffer.head, 0U, memory_order_release);
    atomic_store_explicit(&driver->tx_buffer.tail, 0U, memory_order_release);
}

void UART_Driver_TX_ISR(USART_TypeDef *uart)
{
 8101068:	b580      	push	{r7, lr}
 810106a:	b084      	sub	sp, #16
 810106c:	af00      	add	r7, sp, #0
 810106e:	6078      	str	r0, [r7, #4]
	UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8101070:	6878      	ldr	r0, [r7, #4]
 8101072:	f7ff ff99 	bl	8100fa8 <UART_DMA_Driver_Get>
 8101076:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8101078:	68fb      	ldr	r3, [r7, #12]
 810107a:	2b00      	cmp	r3, #0
 810107c:	d020      	beq.n	81010c0 <UART_Driver_TX_ISR+0x58>
        return;

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 810107e:	6878      	ldr	r0, [r7, #4]
 8101080:	f7ff fcf7 	bl	8100a72 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8101084:	4603      	mov	r3, r0
 8101086:	2b00      	cmp	r3, #0
 8101088:	d01b      	beq.n	81010c2 <UART_Driver_TX_ISR+0x5a>
        (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 810108a:	6878      	ldr	r0, [r7, #4]
 810108c:	f7ff fd67 	bl	8100b5e <LL_USART_IsEnabledIT_TXE_TXFNF>
 8101090:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8101092:	2b00      	cmp	r3, #0
 8101094:	d015      	beq.n	81010c2 <UART_Driver_TX_ISR+0x5a>
    {
        uint8_t tx_data;
        if (RingBuffer_Get(&driver->tx_buffer, &tx_data))
 8101096:	68fb      	ldr	r3, [r7, #12]
 8101098:	3334      	adds	r3, #52	@ 0x34
 810109a:	f107 020b 	add.w	r2, r7, #11
 810109e:	4611      	mov	r1, r2
 81010a0:	4618      	mov	r0, r3
 81010a2:	f000 fa4d 	bl	8101540 <RingBuffer_Get>
 81010a6:	4603      	mov	r3, r0
 81010a8:	2b00      	cmp	r3, #0
 81010aa:	d005      	beq.n	81010b8 <UART_Driver_TX_ISR+0x50>
        {
            LL_USART_TransmitData8(uart, tx_data);
 81010ac:	7afb      	ldrb	r3, [r7, #11]
 81010ae:	4619      	mov	r1, r3
 81010b0:	6878      	ldr	r0, [r7, #4]
 81010b2:	f7ff fda0 	bl	8100bf6 <LL_USART_TransmitData8>
 81010b6:	e004      	b.n	81010c2 <UART_Driver_TX_ISR+0x5a>
        }
        else
        {
            LL_USART_DisableIT_TXE(uart);
 81010b8:	6878      	ldr	r0, [r7, #4]
 81010ba:	f7ff fd2f 	bl	8100b1c <LL_USART_DisableIT_TXE_TXFNF>
 81010be:	e000      	b.n	81010c2 <UART_Driver_TX_ISR+0x5a>
        return;
 81010c0:	bf00      	nop
        }
    }
}
 81010c2:	3710      	adds	r7, #16
 81010c4:	46bd      	mov	sp, r7
 81010c6:	bd80      	pop	{r7, pc}

081010c8 <UART_DMA_Rx_Check>:

/************************************************
 *                    DMA RX                    *
 ************************************************/
void UART_DMA_Rx_Check(USART_TypeDef *uart)
{
 81010c8:	b580      	push	{r7, lr}
 81010ca:	b08a      	sub	sp, #40	@ 0x28
 81010cc:	af00      	add	r7, sp, #0
 81010ce:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 81010d0:	6878      	ldr	r0, [r7, #4]
 81010d2:	f7ff ff69 	bl	8100fa8 <UART_DMA_Driver_Get>
 81010d6:	61b8      	str	r0, [r7, #24]
    if (driver == NULL)
 81010d8:	69bb      	ldr	r3, [r7, #24]
 81010da:	2b00      	cmp	r3, #0
 81010dc:	d069      	beq.n	81011b2 <UART_DMA_Rx_Check+0xea>
        return;

    size_t old_pos = driver->old_dma_pos;
 81010de:	69bb      	ldr	r3, [r7, #24]
 81010e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81010e2:	617b      	str	r3, [r7, #20]
    size_t pos;

    uint16_t remaining = LL_DMA_GetDataLength(driver->dma_rx_instance,
 81010e4:	69bb      	ldr	r3, [r7, #24]
 81010e6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 81010e8:	69bb      	ldr	r3, [r7, #24]
 81010ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81010ec:	4619      	mov	r1, r3
 81010ee:	4610      	mov	r0, r2
 81010f0:	f7ff fdfa 	bl	8100ce8 <LL_DMA_GetDataLength>
 81010f4:	4603      	mov	r3, r0
 81010f6:	827b      	strh	r3, [r7, #18]
                                              driver->dma_rx_channel);
    pos = driver->dma_rx_buffer_size - remaining;
 81010f8:	69bb      	ldr	r3, [r7, #24]
 81010fa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 81010fe:	461a      	mov	r2, r3
 8101100:	8a7b      	ldrh	r3, [r7, #18]
 8101102:	1ad3      	subs	r3, r2, r3
 8101104:	60fb      	str	r3, [r7, #12]

    if (pos != old_pos)
 8101106:	68fa      	ldr	r2, [r7, #12]
 8101108:	697b      	ldr	r3, [r7, #20]
 810110a:	429a      	cmp	r2, r3
 810110c:	d052      	beq.n	81011b4 <UART_DMA_Rx_Check+0xec>
    {
        if (pos > old_pos) {
 810110e:	68fa      	ldr	r2, [r7, #12]
 8101110:	697b      	ldr	r3, [r7, #20]
 8101112:	429a      	cmp	r2, r3
 8101114:	d914      	bls.n	8101140 <UART_DMA_Rx_Check+0x78>
            for (size_t i = old_pos; i < pos; i++) {
 8101116:	697b      	ldr	r3, [r7, #20]
 8101118:	627b      	str	r3, [r7, #36]	@ 0x24
 810111a:	e00c      	b.n	8101136 <UART_DMA_Rx_Check+0x6e>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 810111c:	69bb      	ldr	r3, [r7, #24]
 810111e:	1d18      	adds	r0, r3, #4
 8101120:	69bb      	ldr	r3, [r7, #24]
 8101122:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8101124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101126:	4413      	add	r3, r2
 8101128:	781b      	ldrb	r3, [r3, #0]
 810112a:	4619      	mov	r1, r3
 810112c:	f000 f9c2 	bl	81014b4 <RingBuffer_Put>
            for (size_t i = old_pos; i < pos; i++) {
 8101130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101132:	3301      	adds	r3, #1
 8101134:	627b      	str	r3, [r7, #36]	@ 0x24
 8101136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101138:	68fb      	ldr	r3, [r7, #12]
 810113a:	429a      	cmp	r2, r3
 810113c:	d3ee      	bcc.n	810111c <UART_DMA_Rx_Check+0x54>
 810113e:	e02a      	b.n	8101196 <UART_DMA_Rx_Check+0xce>
            }
        } else {
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 8101140:	697b      	ldr	r3, [r7, #20]
 8101142:	623b      	str	r3, [r7, #32]
 8101144:	e00c      	b.n	8101160 <UART_DMA_Rx_Check+0x98>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 8101146:	69bb      	ldr	r3, [r7, #24]
 8101148:	1d18      	adds	r0, r3, #4
 810114a:	69bb      	ldr	r3, [r7, #24]
 810114c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810114e:	6a3b      	ldr	r3, [r7, #32]
 8101150:	4413      	add	r3, r2
 8101152:	781b      	ldrb	r3, [r3, #0]
 8101154:	4619      	mov	r1, r3
 8101156:	f000 f9ad 	bl	81014b4 <RingBuffer_Put>
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 810115a:	6a3b      	ldr	r3, [r7, #32]
 810115c:	3301      	adds	r3, #1
 810115e:	623b      	str	r3, [r7, #32]
 8101160:	69bb      	ldr	r3, [r7, #24]
 8101162:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8101166:	461a      	mov	r2, r3
 8101168:	6a3b      	ldr	r3, [r7, #32]
 810116a:	4293      	cmp	r3, r2
 810116c:	d3eb      	bcc.n	8101146 <UART_DMA_Rx_Check+0x7e>
            }
            for (size_t i = 0; i < pos; i++) {
 810116e:	2300      	movs	r3, #0
 8101170:	61fb      	str	r3, [r7, #28]
 8101172:	e00c      	b.n	810118e <UART_DMA_Rx_Check+0xc6>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 8101174:	69bb      	ldr	r3, [r7, #24]
 8101176:	1d18      	adds	r0, r3, #4
 8101178:	69bb      	ldr	r3, [r7, #24]
 810117a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810117c:	69fb      	ldr	r3, [r7, #28]
 810117e:	4413      	add	r3, r2
 8101180:	781b      	ldrb	r3, [r3, #0]
 8101182:	4619      	mov	r1, r3
 8101184:	f000 f996 	bl	81014b4 <RingBuffer_Put>
            for (size_t i = 0; i < pos; i++) {
 8101188:	69fb      	ldr	r3, [r7, #28]
 810118a:	3301      	adds	r3, #1
 810118c:	61fb      	str	r3, [r7, #28]
 810118e:	69fa      	ldr	r2, [r7, #28]
 8101190:	68fb      	ldr	r3, [r7, #12]
 8101192:	429a      	cmp	r2, r3
 8101194:	d3ee      	bcc.n	8101174 <UART_DMA_Rx_Check+0xac>
            }
        }
        driver->old_dma_pos = pos;
 8101196:	69bb      	ldr	r3, [r7, #24]
 8101198:	68fa      	ldr	r2, [r7, #12]
 810119a:	675a      	str	r2, [r3, #116]	@ 0x74
        if (driver->old_dma_pos == driver->dma_rx_buffer_size){
 810119c:	69bb      	ldr	r3, [r7, #24]
 810119e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81011a0:	69ba      	ldr	r2, [r7, #24]
 81011a2:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 81011a6:	4293      	cmp	r3, r2
 81011a8:	d104      	bne.n	81011b4 <UART_DMA_Rx_Check+0xec>
            driver->old_dma_pos = 0;
 81011aa:	69bb      	ldr	r3, [r7, #24]
 81011ac:	2200      	movs	r2, #0
 81011ae:	675a      	str	r2, [r3, #116]	@ 0x74
 81011b0:	e000      	b.n	81011b4 <UART_DMA_Rx_Check+0xec>
        return;
 81011b2:	bf00      	nop
		}
	}
}
 81011b4:	3728      	adds	r7, #40	@ 0x28
 81011b6:	46bd      	mov	sp, r7
 81011b8:	bd80      	pop	{r7, pc}

081011ba <UART_DMA_Driver_Read>:


int UART_DMA_Driver_Read(USART_TypeDef *uart)
{
 81011ba:	b580      	push	{r7, lr}
 81011bc:	b084      	sub	sp, #16
 81011be:	af00      	add	r7, sp, #0
 81011c0:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 81011c2:	6878      	ldr	r0, [r7, #4]
 81011c4:	f7ff fef0 	bl	8100fa8 <UART_DMA_Driver_Get>
 81011c8:	60f8      	str	r0, [r7, #12]
    if(driver == NULL)
 81011ca:	68fb      	ldr	r3, [r7, #12]
 81011cc:	2b00      	cmp	r3, #0
 81011ce:	d102      	bne.n	81011d6 <UART_DMA_Driver_Read+0x1c>
        return -1;
 81011d0:	f04f 33ff 	mov.w	r3, #4294967295
 81011d4:	e00e      	b.n	81011f4 <UART_DMA_Driver_Read+0x3a>

    RingBufElement data;
    if(RingBuffer_Get(&driver->rx_buffer, &data)){
 81011d6:	68fb      	ldr	r3, [r7, #12]
 81011d8:	3304      	adds	r3, #4
 81011da:	f107 020b 	add.w	r2, r7, #11
 81011de:	4611      	mov	r1, r2
 81011e0:	4618      	mov	r0, r3
 81011e2:	f000 f9ad 	bl	8101540 <RingBuffer_Get>
 81011e6:	4603      	mov	r3, r0
 81011e8:	2b00      	cmp	r3, #0
 81011ea:	d001      	beq.n	81011f0 <UART_DMA_Driver_Read+0x36>
        return data;
 81011ec:	7afb      	ldrb	r3, [r7, #11]
 81011ee:	e001      	b.n	81011f4 <UART_DMA_Driver_Read+0x3a>
    }
    return -1;
 81011f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81011f4:	4618      	mov	r0, r3
 81011f6:	3710      	adds	r7, #16
 81011f8:	46bd      	mov	sp, r7
 81011fa:	bd80      	pop	{r7, pc}

081011fc <CDC_RingBuffer_Init>:
/*************************************************
 *                 Function Define               *
 *************************************************/

void CDC_RingBuffer_Init(void)
{
 81011fc:	b580      	push	{r7, lr}
 81011fe:	b082      	sub	sp, #8
 8101200:	af02      	add	r7, sp, #8
	RingBuffer_Create(&cdcTxRingBuffer, 3, "CDC_TX", cdcTxBuffer, CDC_TX_RING_BUFFER_SIZE);
 8101202:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101206:	9300      	str	r3, [sp, #0]
 8101208:	4b08      	ldr	r3, [pc, #32]	@ (810122c <CDC_RingBuffer_Init+0x30>)
 810120a:	4a09      	ldr	r2, [pc, #36]	@ (8101230 <CDC_RingBuffer_Init+0x34>)
 810120c:	2103      	movs	r1, #3
 810120e:	4809      	ldr	r0, [pc, #36]	@ (8101234 <CDC_RingBuffer_Init+0x38>)
 8101210:	f000 f91d 	bl	810144e <RingBuffer_Create>
    RingBuffer_Create(&cdcRxRingBuffer, 4, "CDC_RX", cdcRxBuffer, CDC_RX_RING_BUFFER_SIZE);
 8101214:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101218:	9300      	str	r3, [sp, #0]
 810121a:	4b07      	ldr	r3, [pc, #28]	@ (8101238 <CDC_RingBuffer_Init+0x3c>)
 810121c:	4a07      	ldr	r2, [pc, #28]	@ (810123c <CDC_RingBuffer_Init+0x40>)
 810121e:	2104      	movs	r1, #4
 8101220:	4807      	ldr	r0, [pc, #28]	@ (8101240 <CDC_RingBuffer_Init+0x44>)
 8101222:	f000 f914 	bl	810144e <RingBuffer_Create>
}
 8101226:	bf00      	nop
 8101228:	46bd      	mov	sp, r7
 810122a:	bd80      	pop	{r7, pc}
 810122c:	10034494 	.word	0x10034494
 8101230:	0810ebac 	.word	0x0810ebac
 8101234:	10034c94 	.word	0x10034c94
 8101238:	10033c64 	.word	0x10033c64
 810123c:	0810ebb4 	.word	0x0810ebb4
 8101240:	10034464 	.word	0x10034464

08101244 <CDC_TX_RingBuffer_Put>:
/*************************************************/
static _Bool CDC_TX_RingBuffer_Put(uint8_t data)
{
 8101244:	b580      	push	{r7, lr}
 8101246:	b082      	sub	sp, #8
 8101248:	af00      	add	r7, sp, #0
 810124a:	4603      	mov	r3, r0
 810124c:	71fb      	strb	r3, [r7, #7]
    return RingBuffer_Put(&cdcTxRingBuffer, data);
 810124e:	79fb      	ldrb	r3, [r7, #7]
 8101250:	4619      	mov	r1, r3
 8101252:	4804      	ldr	r0, [pc, #16]	@ (8101264 <CDC_TX_RingBuffer_Put+0x20>)
 8101254:	f000 f92e 	bl	81014b4 <RingBuffer_Put>
 8101258:	4603      	mov	r3, r0
}
 810125a:	4618      	mov	r0, r3
 810125c:	3708      	adds	r7, #8
 810125e:	46bd      	mov	sp, r7
 8101260:	bd80      	pop	{r7, pc}
 8101262:	bf00      	nop
 8101264:	10034c94 	.word	0x10034c94

08101268 <CDC_RX_RingBuffer_Put>:

static _Bool CDC_RX_RingBuffer_Put(uint8_t data)
{
 8101268:	b580      	push	{r7, lr}
 810126a:	b082      	sub	sp, #8
 810126c:	af00      	add	r7, sp, #0
 810126e:	4603      	mov	r3, r0
 8101270:	71fb      	strb	r3, [r7, #7]
    return RingBuffer_Put(&cdcRxRingBuffer, data);
 8101272:	79fb      	ldrb	r3, [r7, #7]
 8101274:	4619      	mov	r1, r3
 8101276:	4804      	ldr	r0, [pc, #16]	@ (8101288 <CDC_RX_RingBuffer_Put+0x20>)
 8101278:	f000 f91c 	bl	81014b4 <RingBuffer_Put>
 810127c:	4603      	mov	r3, r0
}
 810127e:	4618      	mov	r0, r3
 8101280:	3708      	adds	r7, #8
 8101282:	46bd      	mov	sp, r7
 8101284:	bd80      	pop	{r7, pc}
 8101286:	bf00      	nop
 8101288:	10034464 	.word	0x10034464

0810128c <CDC_TX_RingBuffer_PutBuffer>:
/*************************************************/
uint32_t CDC_TX_RingBuffer_PutBuffer(const uint8_t* data, uint32_t len)
{
 810128c:	b580      	push	{r7, lr}
 810128e:	b084      	sub	sp, #16
 8101290:	af00      	add	r7, sp, #0
 8101292:	6078      	str	r0, [r7, #4]
 8101294:	6039      	str	r1, [r7, #0]
    uint32_t count = 0;
 8101296:	2300      	movs	r3, #0
 8101298:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 810129a:	2300      	movs	r3, #0
 810129c:	60bb      	str	r3, [r7, #8]
 810129e:	e00f      	b.n	81012c0 <CDC_TX_RingBuffer_PutBuffer+0x34>
    {
        if(CDC_TX_RingBuffer_Put(data[i]))
 81012a0:	687a      	ldr	r2, [r7, #4]
 81012a2:	68bb      	ldr	r3, [r7, #8]
 81012a4:	4413      	add	r3, r2
 81012a6:	781b      	ldrb	r3, [r3, #0]
 81012a8:	4618      	mov	r0, r3
 81012aa:	f7ff ffcb 	bl	8101244 <CDC_TX_RingBuffer_Put>
 81012ae:	4603      	mov	r3, r0
 81012b0:	2b00      	cmp	r3, #0
 81012b2:	d002      	beq.n	81012ba <CDC_TX_RingBuffer_PutBuffer+0x2e>
        {
            count++;
 81012b4:	68fb      	ldr	r3, [r7, #12]
 81012b6:	3301      	adds	r3, #1
 81012b8:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 81012ba:	68bb      	ldr	r3, [r7, #8]
 81012bc:	3301      	adds	r3, #1
 81012be:	60bb      	str	r3, [r7, #8]
 81012c0:	68ba      	ldr	r2, [r7, #8]
 81012c2:	683b      	ldr	r3, [r7, #0]
 81012c4:	429a      	cmp	r2, r3
 81012c6:	d3eb      	bcc.n	81012a0 <CDC_TX_RingBuffer_PutBuffer+0x14>
        }
    }
    return count;
 81012c8:	68fb      	ldr	r3, [r7, #12]
}
 81012ca:	4618      	mov	r0, r3
 81012cc:	3710      	adds	r7, #16
 81012ce:	46bd      	mov	sp, r7
 81012d0:	bd80      	pop	{r7, pc}

081012d2 <CDC_RX_RingBuffer_PutBuffer>:

uint32_t CDC_RX_RingBuffer_PutBuffer(uint8_t* data, uint32_t len)
{
 81012d2:	b580      	push	{r7, lr}
 81012d4:	b084      	sub	sp, #16
 81012d6:	af00      	add	r7, sp, #0
 81012d8:	6078      	str	r0, [r7, #4]
 81012da:	6039      	str	r1, [r7, #0]
    uint32_t count = 0;
 81012dc:	2300      	movs	r3, #0
 81012de:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 81012e0:	2300      	movs	r3, #0
 81012e2:	60bb      	str	r3, [r7, #8]
 81012e4:	e00f      	b.n	8101306 <CDC_RX_RingBuffer_PutBuffer+0x34>
    {
        if(CDC_RX_RingBuffer_Put(data[i]))
 81012e6:	687a      	ldr	r2, [r7, #4]
 81012e8:	68bb      	ldr	r3, [r7, #8]
 81012ea:	4413      	add	r3, r2
 81012ec:	781b      	ldrb	r3, [r3, #0]
 81012ee:	4618      	mov	r0, r3
 81012f0:	f7ff ffba 	bl	8101268 <CDC_RX_RingBuffer_Put>
 81012f4:	4603      	mov	r3, r0
 81012f6:	2b00      	cmp	r3, #0
 81012f8:	d002      	beq.n	8101300 <CDC_RX_RingBuffer_PutBuffer+0x2e>
        {
            count++;
 81012fa:	68fb      	ldr	r3, [r7, #12]
 81012fc:	3301      	adds	r3, #1
 81012fe:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 8101300:	68bb      	ldr	r3, [r7, #8]
 8101302:	3301      	adds	r3, #1
 8101304:	60bb      	str	r3, [r7, #8]
 8101306:	68ba      	ldr	r2, [r7, #8]
 8101308:	683b      	ldr	r3, [r7, #0]
 810130a:	429a      	cmp	r2, r3
 810130c:	d3eb      	bcc.n	81012e6 <CDC_RX_RingBuffer_PutBuffer+0x14>
        }
    }
    return count;
 810130e:	68fb      	ldr	r3, [r7, #12]
}
 8101310:	4618      	mov	r0, r3
 8101312:	3710      	adds	r7, #16
 8101314:	46bd      	mov	sp, r7
 8101316:	bd80      	pop	{r7, pc}

08101318 <CDC_TX_RingBuffer_Get>:
/*************************************************/
_Bool CDC_TX_RingBuffer_Get(uint8_t* data)
{
 8101318:	b580      	push	{r7, lr}
 810131a:	b082      	sub	sp, #8
 810131c:	af00      	add	r7, sp, #0
 810131e:	6078      	str	r0, [r7, #4]
    return RingBuffer_Get(&cdcTxRingBuffer, data);
 8101320:	6879      	ldr	r1, [r7, #4]
 8101322:	4804      	ldr	r0, [pc, #16]	@ (8101334 <CDC_TX_RingBuffer_Get+0x1c>)
 8101324:	f000 f90c 	bl	8101540 <RingBuffer_Get>
 8101328:	4603      	mov	r3, r0
}
 810132a:	4618      	mov	r0, r3
 810132c:	3708      	adds	r7, #8
 810132e:	46bd      	mov	sp, r7
 8101330:	bd80      	pop	{r7, pc}
 8101332:	bf00      	nop
 8101334:	10034c94 	.word	0x10034c94

08101338 <CDC_RX_RingBuffer_Get>:

_Bool CDC_RX_RingBuffer_Get(uint8_t* data)
{
 8101338:	b580      	push	{r7, lr}
 810133a:	b082      	sub	sp, #8
 810133c:	af00      	add	r7, sp, #0
 810133e:	6078      	str	r0, [r7, #4]
    return RingBuffer_Get(&cdcRxRingBuffer, data);
 8101340:	6879      	ldr	r1, [r7, #4]
 8101342:	4804      	ldr	r0, [pc, #16]	@ (8101354 <CDC_RX_RingBuffer_Get+0x1c>)
 8101344:	f000 f8fc 	bl	8101540 <RingBuffer_Get>
 8101348:	4603      	mov	r3, r0
}
 810134a:	4618      	mov	r0, r3
 810134c:	3708      	adds	r7, #8
 810134e:	46bd      	mov	sp, r7
 8101350:	bd80      	pop	{r7, pc}
 8101352:	bf00      	nop
 8101354:	10034464 	.word	0x10034464

08101358 <CDC_ISR_RxNotify>:
/*************************************************/

void CDC_ISR_RxNotify(void)
{
 8101358:	b480      	push	{r7}
 810135a:	af00      	add	r7, sp, #0
    g_cdcRxReady = 1;
 810135c:	4b03      	ldr	r3, [pc, #12]	@ (810136c <CDC_ISR_RxNotify+0x14>)
 810135e:	2201      	movs	r2, #1
 8101360:	701a      	strb	r2, [r3, #0]
}
 8101362:	bf00      	nop
 8101364:	46bd      	mov	sp, r7
 8101366:	f85d 7b04 	ldr.w	r7, [sp], #4
 810136a:	4770      	bx	lr
 810136c:	10034cc4 	.word	0x10034cc4

08101370 <USB_Check_Notify>:

void USB_Check_Notify(void)
{
 8101370:	b480      	push	{r7}
 8101372:	af00      	add	r7, sp, #0
    g_usbCheckEvt = 1;
 8101374:	4b03      	ldr	r3, [pc, #12]	@ (8101384 <USB_Check_Notify+0x14>)
 8101376:	2201      	movs	r2, #1
 8101378:	701a      	strb	r2, [r3, #0]
}
 810137a:	bf00      	nop
 810137c:	46bd      	mov	sp, r7
 810137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101382:	4770      	bx	lr
 8101384:	10034cc5 	.word	0x10034cc5

08101388 <CDC_getRxReady>:

uint8_t CDC_getRxReady(void)
{
 8101388:	b480      	push	{r7}
 810138a:	af00      	add	r7, sp, #0
    return g_cdcRxReady;
 810138c:	4b03      	ldr	r3, [pc, #12]	@ (810139c <CDC_getRxReady+0x14>)
 810138e:	781b      	ldrb	r3, [r3, #0]
 8101390:	b2db      	uxtb	r3, r3
}
 8101392:	4618      	mov	r0, r3
 8101394:	46bd      	mov	sp, r7
 8101396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810139a:	4770      	bx	lr
 810139c:	10034cc4 	.word	0x10034cc4

081013a0 <CDC_setRxReady>:

void CDC_setRxReady(uint8_t value)
{
 81013a0:	b480      	push	{r7}
 81013a2:	b083      	sub	sp, #12
 81013a4:	af00      	add	r7, sp, #0
 81013a6:	4603      	mov	r3, r0
 81013a8:	71fb      	strb	r3, [r7, #7]
    g_cdcRxReady = value;
 81013aa:	4a04      	ldr	r2, [pc, #16]	@ (81013bc <CDC_setRxReady+0x1c>)
 81013ac:	79fb      	ldrb	r3, [r7, #7]
 81013ae:	7013      	strb	r3, [r2, #0]
}
 81013b0:	bf00      	nop
 81013b2:	370c      	adds	r7, #12
 81013b4:	46bd      	mov	sp, r7
 81013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ba:	4770      	bx	lr
 81013bc:	10034cc4 	.word	0x10034cc4

081013c0 <USB_checkUSB>:

uint8_t USB_checkUSB(void)
{
 81013c0:	b480      	push	{r7}
 81013c2:	af00      	add	r7, sp, #0
    return g_usbCheckEvt;
 81013c4:	4b03      	ldr	r3, [pc, #12]	@ (81013d4 <USB_checkUSB+0x14>)
 81013c6:	781b      	ldrb	r3, [r3, #0]
 81013c8:	b2db      	uxtb	r3, r3
}
 81013ca:	4618      	mov	r0, r3
 81013cc:	46bd      	mov	sp, r7
 81013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013d2:	4770      	bx	lr
 81013d4:	10034cc5 	.word	0x10034cc5

081013d8 <USB_setCheckFlag>:

void USB_setCheckFlag(uint8_t value)
{
 81013d8:	b480      	push	{r7}
 81013da:	b083      	sub	sp, #12
 81013dc:	af00      	add	r7, sp, #0
 81013de:	4603      	mov	r3, r0
 81013e0:	71fb      	strb	r3, [r7, #7]
    g_usbCheckEvt = value;
 81013e2:	4a04      	ldr	r2, [pc, #16]	@ (81013f4 <USB_setCheckFlag+0x1c>)
 81013e4:	79fb      	ldrb	r3, [r7, #7]
 81013e6:	7013      	strb	r3, [r2, #0]
}
 81013e8:	bf00      	nop
 81013ea:	370c      	adds	r7, #12
 81013ec:	46bd      	mov	sp, r7
 81013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013f2:	4770      	bx	lr
 81013f4:	10034cc5 	.word	0x10034cc5

081013f8 <CDC_SendString>:
{
    return RingBuffer_IsDataAvailable(&cdcTxRingBuffer);
}

_Bool CDC_SendString(const char *pStr, uint32_t len)
{
 81013f8:	b580      	push	{r7, lr}
 81013fa:	b084      	sub	sp, #16
 81013fc:	af00      	add	r7, sp, #0
 81013fe:	6078      	str	r0, [r7, #4]
 8101400:	6039      	str	r1, [r7, #0]
    if (len == 0 || pStr == NULL)
 8101402:	683b      	ldr	r3, [r7, #0]
 8101404:	2b00      	cmp	r3, #0
 8101406:	d002      	beq.n	810140e <CDC_SendString+0x16>
 8101408:	687b      	ldr	r3, [r7, #4]
 810140a:	2b00      	cmp	r3, #0
 810140c:	d101      	bne.n	8101412 <CDC_SendString+0x1a>
        return true;
 810140e:	2301      	movs	r3, #1
 8101410:	e00b      	b.n	810142a <CDC_SendString+0x32>
    uint32_t written = CDC_TX_RingBuffer_PutBuffer((const uint8_t *)pStr, len);
 8101412:	6839      	ldr	r1, [r7, #0]
 8101414:	6878      	ldr	r0, [r7, #4]
 8101416:	f7ff ff39 	bl	810128c <CDC_TX_RingBuffer_PutBuffer>
 810141a:	60f8      	str	r0, [r7, #12]
    return (written == len) ? true : false;
 810141c:	68fa      	ldr	r2, [r7, #12]
 810141e:	683b      	ldr	r3, [r7, #0]
 8101420:	429a      	cmp	r2, r3
 8101422:	bf0c      	ite	eq
 8101424:	2301      	moveq	r3, #1
 8101426:	2300      	movne	r3, #0
 8101428:	b2db      	uxtb	r3, r3
}
 810142a:	4618      	mov	r0, r3
 810142c:	3710      	adds	r7, #16
 810142e:	46bd      	mov	sp, r7
 8101430:	bd80      	pop	{r7, pc}

08101432 <CDC_SendChar>:

_Bool CDC_SendChar(char c)
{
 8101432:	b580      	push	{r7, lr}
 8101434:	b082      	sub	sp, #8
 8101436:	af00      	add	r7, sp, #0
 8101438:	4603      	mov	r3, r0
 810143a:	71fb      	strb	r3, [r7, #7]
    return CDC_TX_RingBuffer_Put((uint8_t)c);
 810143c:	79fb      	ldrb	r3, [r7, #7]
 810143e:	4618      	mov	r0, r3
 8101440:	f7ff ff00 	bl	8101244 <CDC_TX_RingBuffer_Put>
 8101444:	4603      	mov	r3, r0
}
 8101446:	4618      	mov	r0, r3
 8101448:	3708      	adds	r7, #8
 810144a:	46bd      	mov	sp, r7
 810144c:	bd80      	pop	{r7, pc}

0810144e <RingBuffer_Create>:

#include "ring_buffer.h"

void RingBuffer_Create(s_RingBufferType *rb, uint32_t id, const char *name,
                         RingBufElement *buffer, RingBufCtr max_size)
{
 810144e:	b580      	push	{r7, lr}
 8101450:	b088      	sub	sp, #32
 8101452:	af00      	add	r7, sp, #0
 8101454:	60f8      	str	r0, [r7, #12]
 8101456:	60b9      	str	r1, [r7, #8]
 8101458:	607a      	str	r2, [r7, #4]
 810145a:	603b      	str	r3, [r7, #0]
    rb->id = id;
 810145c:	68fb      	ldr	r3, [r7, #12]
 810145e:	68ba      	ldr	r2, [r7, #8]
 8101460:	601a      	str	r2, [r3, #0]

    strncpy(rb->name, name, RINGBUFFER_NAME_MAX_LEN - 1);
 8101462:	68fb      	ldr	r3, [r7, #12]
 8101464:	3304      	adds	r3, #4
 8101466:	221f      	movs	r2, #31
 8101468:	6879      	ldr	r1, [r7, #4]
 810146a:	4618      	mov	r0, r3
 810146c:	f00d fb40 	bl	810eaf0 <strncpy>
    rb->name[RINGBUFFER_NAME_MAX_LEN - 1] = '\0';
 8101470:	68fb      	ldr	r3, [r7, #12]
 8101472:	2200      	movs	r2, #0
 8101474:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    rb->buffer = buffer;
 8101478:	68fb      	ldr	r3, [r7, #12]
 810147a:	683a      	ldr	r2, [r7, #0]
 810147c:	625a      	str	r2, [r3, #36]	@ 0x24
    rb->max_size = max_size;
 810147e:	68fb      	ldr	r3, [r7, #12]
 8101480:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8101482:	851a      	strh	r2, [r3, #40]	@ 0x28

    atomic_store_explicit(&rb->head, 0U, memory_order_release);
 8101484:	68fb      	ldr	r3, [r7, #12]
 8101486:	332a      	adds	r3, #42	@ 0x2a
 8101488:	61fb      	str	r3, [r7, #28]
 810148a:	2300      	movs	r3, #0
 810148c:	82fb      	strh	r3, [r7, #22]
 810148e:	8afa      	ldrh	r2, [r7, #22]
 8101490:	69fb      	ldr	r3, [r7, #28]
 8101492:	f3bf 8f5b 	dmb	ish
 8101496:	801a      	strh	r2, [r3, #0]
    atomic_store_explicit(&rb->tail, 0U, memory_order_release);
 8101498:	68fb      	ldr	r3, [r7, #12]
 810149a:	332c      	adds	r3, #44	@ 0x2c
 810149c:	61bb      	str	r3, [r7, #24]
 810149e:	2300      	movs	r3, #0
 81014a0:	82bb      	strh	r3, [r7, #20]
 81014a2:	8aba      	ldrh	r2, [r7, #20]
 81014a4:	69bb      	ldr	r3, [r7, #24]
 81014a6:	f3bf 8f5b 	dmb	ish
 81014aa:	801a      	strh	r2, [r3, #0]
}
 81014ac:	bf00      	nop
 81014ae:	3720      	adds	r7, #32
 81014b0:	46bd      	mov	sp, r7
 81014b2:	bd80      	pop	{r7, pc}

081014b4 <RingBuffer_Put>:

_Bool RingBuffer_Put(s_RingBufferType * const rb, RingBufElement const el)
{
 81014b4:	b480      	push	{r7}
 81014b6:	b08b      	sub	sp, #44	@ 0x2c
 81014b8:	af00      	add	r7, sp, #0
 81014ba:	6078      	str	r0, [r7, #4]
 81014bc:	460b      	mov	r3, r1
 81014be:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_relaxed) + 1U;
 81014c0:	687b      	ldr	r3, [r7, #4]
 81014c2:	332a      	adds	r3, #42	@ 0x2a
 81014c4:	623b      	str	r3, [r7, #32]
 81014c6:	6a3b      	ldr	r3, [r7, #32]
 81014c8:	881b      	ldrh	r3, [r3, #0]
 81014ca:	b29b      	uxth	r3, r3
 81014cc:	81fb      	strh	r3, [r7, #14]
 81014ce:	89fb      	ldrh	r3, [r7, #14]
 81014d0:	3301      	adds	r3, #1
 81014d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (head == rb->max_size)
 81014d4:	687b      	ldr	r3, [r7, #4]
 81014d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81014d8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81014da:	429a      	cmp	r2, r3
 81014dc:	d101      	bne.n	81014e2 <RingBuffer_Put+0x2e>
    {
        head = 0U;
 81014de:	2300      	movs	r3, #0
 81014e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_acquire);
 81014e2:	687b      	ldr	r3, [r7, #4]
 81014e4:	332c      	adds	r3, #44	@ 0x2c
 81014e6:	61fb      	str	r3, [r7, #28]
 81014e8:	69fb      	ldr	r3, [r7, #28]
 81014ea:	881b      	ldrh	r3, [r3, #0]
 81014ec:	f3bf 8f5b 	dmb	ish
 81014f0:	b29b      	uxth	r3, r3
 81014f2:	81bb      	strh	r3, [r7, #12]
 81014f4:	89bb      	ldrh	r3, [r7, #12]
 81014f6:	837b      	strh	r3, [r7, #26]
    if (head != tail) // buffer NOT full?
 81014f8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81014fa:	8b7b      	ldrh	r3, [r7, #26]
 81014fc:	429a      	cmp	r2, r3
 81014fe:	d018      	beq.n	8101532 <RingBuffer_Put+0x7e>
    {
        rb->buffer[atomic_load_explicit(&rb->head, memory_order_relaxed)] = el;
 8101500:	687b      	ldr	r3, [r7, #4]
 8101502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101504:	687a      	ldr	r2, [r7, #4]
 8101506:	322a      	adds	r2, #42	@ 0x2a
 8101508:	617a      	str	r2, [r7, #20]
 810150a:	697a      	ldr	r2, [r7, #20]
 810150c:	8812      	ldrh	r2, [r2, #0]
 810150e:	b292      	uxth	r2, r2
 8101510:	817a      	strh	r2, [r7, #10]
 8101512:	897a      	ldrh	r2, [r7, #10]
 8101514:	4413      	add	r3, r2
 8101516:	78fa      	ldrb	r2, [r7, #3]
 8101518:	701a      	strb	r2, [r3, #0]
        atomic_store_explicit(&rb->head, head, memory_order_release);
 810151a:	687b      	ldr	r3, [r7, #4]
 810151c:	332a      	adds	r3, #42	@ 0x2a
 810151e:	613b      	str	r3, [r7, #16]
 8101520:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8101522:	813b      	strh	r3, [r7, #8]
 8101524:	893a      	ldrh	r2, [r7, #8]
 8101526:	693b      	ldr	r3, [r7, #16]
 8101528:	f3bf 8f5b 	dmb	ish
 810152c:	801a      	strh	r2, [r3, #0]
//        __enable_irq();
        return true;
 810152e:	2301      	movs	r3, #1
 8101530:	e000      	b.n	8101534 <RingBuffer_Put+0x80>
    }
    else
    {
//    	__enable_irq();
        return false;
 8101532:	2300      	movs	r3, #0
    }
}
 8101534:	4618      	mov	r0, r3
 8101536:	372c      	adds	r7, #44	@ 0x2c
 8101538:	46bd      	mov	sp, r7
 810153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810153e:	4770      	bx	lr

08101540 <RingBuffer_Get>:

_Bool RingBuffer_Get(s_RingBufferType * const rb, RingBufElement *pel)
{
 8101540:	b480      	push	{r7}
 8101542:	b08b      	sub	sp, #44	@ 0x2c
 8101544:	af00      	add	r7, sp, #0
 8101546:	6078      	str	r0, [r7, #4]
 8101548:	6039      	str	r1, [r7, #0]
//	__disable_irq();
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 810154a:	687b      	ldr	r3, [r7, #4]
 810154c:	332c      	adds	r3, #44	@ 0x2c
 810154e:	623b      	str	r3, [r7, #32]
 8101550:	6a3b      	ldr	r3, [r7, #32]
 8101552:	881b      	ldrh	r3, [r3, #0]
 8101554:	b29b      	uxth	r3, r3
 8101556:	827b      	strh	r3, [r7, #18]
 8101558:	8a7b      	ldrh	r3, [r7, #18]
 810155a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 810155c:	687b      	ldr	r3, [r7, #4]
 810155e:	332a      	adds	r3, #42	@ 0x2a
 8101560:	61fb      	str	r3, [r7, #28]
 8101562:	69fb      	ldr	r3, [r7, #28]
 8101564:	881b      	ldrh	r3, [r3, #0]
 8101566:	f3bf 8f5b 	dmb	ish
 810156a:	b29b      	uxth	r3, r3
 810156c:	823b      	strh	r3, [r7, #16]
 810156e:	8a3b      	ldrh	r3, [r7, #16]
 8101570:	837b      	strh	r3, [r7, #26]
    if (head != tail)  // buffer NOT empty?
 8101572:	8b7a      	ldrh	r2, [r7, #26]
 8101574:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8101576:	429a      	cmp	r2, r3
 8101578:	d01c      	beq.n	81015b4 <RingBuffer_Get+0x74>
    {
        *pel = rb->buffer[tail];
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810157e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8101580:	4413      	add	r3, r2
 8101582:	781a      	ldrb	r2, [r3, #0]
 8101584:	683b      	ldr	r3, [r7, #0]
 8101586:	701a      	strb	r2, [r3, #0]
        ++tail;
 8101588:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 810158a:	3301      	adds	r3, #1
 810158c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (tail == rb->max_size)
 810158e:	687b      	ldr	r3, [r7, #4]
 8101590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8101592:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8101594:	429a      	cmp	r2, r3
 8101596:	d101      	bne.n	810159c <RingBuffer_Get+0x5c>
        {
            tail = 0U;
 8101598:	2300      	movs	r3, #0
 810159a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        atomic_store_explicit(&rb->tail, tail, memory_order_release);
 810159c:	687b      	ldr	r3, [r7, #4]
 810159e:	332c      	adds	r3, #44	@ 0x2c
 81015a0:	617b      	str	r3, [r7, #20]
 81015a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 81015a4:	81fb      	strh	r3, [r7, #14]
 81015a6:	89fa      	ldrh	r2, [r7, #14]
 81015a8:	697b      	ldr	r3, [r7, #20]
 81015aa:	f3bf 8f5b 	dmb	ish
 81015ae:	801a      	strh	r2, [r3, #0]
//    	__enable_irq();
        return true;
 81015b0:	2301      	movs	r3, #1
 81015b2:	e000      	b.n	81015b6 <RingBuffer_Get+0x76>
    }
    else
    {
//    	__enable_irq();
        return false;
 81015b4:	2300      	movs	r3, #0
    }
}
 81015b6:	4618      	mov	r0, r3
 81015b8:	372c      	adds	r7, #44	@ 0x2c
 81015ba:	46bd      	mov	sp, r7
 81015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015c0:	4770      	bx	lr

081015c2 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 81015c2:	b480      	push	{r7}
 81015c4:	b083      	sub	sp, #12
 81015c6:	af00      	add	r7, sp, #0
 81015c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 81015ca:	687b      	ldr	r3, [r7, #4]
 81015cc:	f06f 0201 	mvn.w	r2, #1
 81015d0:	611a      	str	r2, [r3, #16]
}
 81015d2:	bf00      	nop
 81015d4:	370c      	adds	r7, #12
 81015d6:	46bd      	mov	sp, r7
 81015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015dc:	4770      	bx	lr

081015de <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 81015de:	b480      	push	{r7}
 81015e0:	b083      	sub	sp, #12
 81015e2:	af00      	add	r7, sp, #0
 81015e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 81015e6:	687b      	ldr	r3, [r7, #4]
 81015e8:	691b      	ldr	r3, [r3, #16]
 81015ea:	f003 0301 	and.w	r3, r3, #1
 81015ee:	2b01      	cmp	r3, #1
 81015f0:	d101      	bne.n	81015f6 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 81015f2:	2301      	movs	r3, #1
 81015f4:	e000      	b.n	81015f8 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 81015f6:	2300      	movs	r3, #0
}
 81015f8:	4618      	mov	r0, r3
 81015fa:	370c      	adds	r7, #12
 81015fc:	46bd      	mov	sp, r7
 81015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101602:	4770      	bx	lr

08101604 <TickTimer_IRQHandler>:
#include "stm32h7xx.h"
#include "stm32h7xx_ll_tim.h"

volatile uint32_t LL_Tick = 0;

void TickTimer_IRQHandler(void) {
 8101604:	b580      	push	{r7, lr}
 8101606:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 8101608:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 810160c:	f7ff ffe7 	bl	81015de <LL_TIM_IsActiveFlag_UPDATE>
 8101610:	4603      	mov	r3, r0
 8101612:	2b00      	cmp	r3, #0
 8101614:	d008      	beq.n	8101628 <TickTimer_IRQHandler+0x24>
        LL_TIM_ClearFlag_UPDATE(TIM2);
 8101616:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 810161a:	f7ff ffd2 	bl	81015c2 <LL_TIM_ClearFlag_UPDATE>
        LL_Tick++;
 810161e:	4b03      	ldr	r3, [pc, #12]	@ (810162c <TickTimer_IRQHandler+0x28>)
 8101620:	681b      	ldr	r3, [r3, #0]
 8101622:	3301      	adds	r3, #1
 8101624:	4a01      	ldr	r2, [pc, #4]	@ (810162c <TickTimer_IRQHandler+0x28>)
 8101626:	6013      	str	r3, [r2, #0]
    }
}
 8101628:	bf00      	nop
 810162a:	bd80      	pop	{r7, pc}
 810162c:	10034cc8 	.word	0x10034cc8

08101630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101630:	b480      	push	{r7}
 8101632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101634:	4b09      	ldr	r3, [pc, #36]	@ (810165c <SystemInit+0x2c>)
 8101636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810163a:	4a08      	ldr	r2, [pc, #32]	@ (810165c <SystemInit+0x2c>)
 810163c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101644:	4b05      	ldr	r3, [pc, #20]	@ (810165c <SystemInit+0x2c>)
 8101646:	691b      	ldr	r3, [r3, #16]
 8101648:	4a04      	ldr	r2, [pc, #16]	@ (810165c <SystemInit+0x2c>)
 810164a:	f043 0310 	orr.w	r3, r3, #16
 810164e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101650:	bf00      	nop
 8101652:	46bd      	mov	sp, r7
 8101654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101658:	4770      	bx	lr
 810165a:	bf00      	nop
 810165c:	e000ed00 	.word	0xe000ed00

08101660 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8101660:	b480      	push	{r7}
 8101662:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8101664:	4b0a      	ldr	r3, [pc, #40]	@ (8101690 <ExitRun0Mode+0x30>)
 8101666:	68db      	ldr	r3, [r3, #12]
 8101668:	f023 0306 	bic.w	r3, r3, #6
 810166c:	4a08      	ldr	r2, [pc, #32]	@ (8101690 <ExitRun0Mode+0x30>)
 810166e:	f043 0302 	orr.w	r3, r3, #2
 8101672:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8101674:	bf00      	nop
 8101676:	4b06      	ldr	r3, [pc, #24]	@ (8101690 <ExitRun0Mode+0x30>)
 8101678:	685b      	ldr	r3, [r3, #4]
 810167a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810167e:	2b00      	cmp	r3, #0
 8101680:	d0f9      	beq.n	8101676 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8101682:	bf00      	nop
 8101684:	bf00      	nop
 8101686:	46bd      	mov	sp, r7
 8101688:	f85d 7b04 	ldr.w	r7, [sp], #4
 810168c:	4770      	bx	lr
 810168e:	bf00      	nop
 8101690:	58024800 	.word	0x58024800

08101694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101694:	b480      	push	{r7}
 8101696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101698:	4b04      	ldr	r3, [pc, #16]	@ (81016ac <__NVIC_GetPriorityGrouping+0x18>)
 810169a:	68db      	ldr	r3, [r3, #12]
 810169c:	0a1b      	lsrs	r3, r3, #8
 810169e:	f003 0307 	and.w	r3, r3, #7
}
 81016a2:	4618      	mov	r0, r3
 81016a4:	46bd      	mov	sp, r7
 81016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016aa:	4770      	bx	lr
 81016ac:	e000ed00 	.word	0xe000ed00

081016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81016b0:	b480      	push	{r7}
 81016b2:	b083      	sub	sp, #12
 81016b4:	af00      	add	r7, sp, #0
 81016b6:	4603      	mov	r3, r0
 81016b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016be:	2b00      	cmp	r3, #0
 81016c0:	db0b      	blt.n	81016da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81016c2:	88fb      	ldrh	r3, [r7, #6]
 81016c4:	f003 021f 	and.w	r2, r3, #31
 81016c8:	4907      	ldr	r1, [pc, #28]	@ (81016e8 <__NVIC_EnableIRQ+0x38>)
 81016ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016ce:	095b      	lsrs	r3, r3, #5
 81016d0:	2001      	movs	r0, #1
 81016d2:	fa00 f202 	lsl.w	r2, r0, r2
 81016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81016da:	bf00      	nop
 81016dc:	370c      	adds	r7, #12
 81016de:	46bd      	mov	sp, r7
 81016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016e4:	4770      	bx	lr
 81016e6:	bf00      	nop
 81016e8:	e000e100 	.word	0xe000e100

081016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81016ec:	b480      	push	{r7}
 81016ee:	b083      	sub	sp, #12
 81016f0:	af00      	add	r7, sp, #0
 81016f2:	4603      	mov	r3, r0
 81016f4:	6039      	str	r1, [r7, #0]
 81016f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81016f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016fc:	2b00      	cmp	r3, #0
 81016fe:	db0a      	blt.n	8101716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101700:	683b      	ldr	r3, [r7, #0]
 8101702:	b2da      	uxtb	r2, r3
 8101704:	490c      	ldr	r1, [pc, #48]	@ (8101738 <__NVIC_SetPriority+0x4c>)
 8101706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810170a:	0112      	lsls	r2, r2, #4
 810170c:	b2d2      	uxtb	r2, r2
 810170e:	440b      	add	r3, r1
 8101710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101714:	e00a      	b.n	810172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101716:	683b      	ldr	r3, [r7, #0]
 8101718:	b2da      	uxtb	r2, r3
 810171a:	4908      	ldr	r1, [pc, #32]	@ (810173c <__NVIC_SetPriority+0x50>)
 810171c:	88fb      	ldrh	r3, [r7, #6]
 810171e:	f003 030f 	and.w	r3, r3, #15
 8101722:	3b04      	subs	r3, #4
 8101724:	0112      	lsls	r2, r2, #4
 8101726:	b2d2      	uxtb	r2, r2
 8101728:	440b      	add	r3, r1
 810172a:	761a      	strb	r2, [r3, #24]
}
 810172c:	bf00      	nop
 810172e:	370c      	adds	r7, #12
 8101730:	46bd      	mov	sp, r7
 8101732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101736:	4770      	bx	lr
 8101738:	e000e100 	.word	0xe000e100
 810173c:	e000ed00 	.word	0xe000ed00

08101740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101740:	b480      	push	{r7}
 8101742:	b089      	sub	sp, #36	@ 0x24
 8101744:	af00      	add	r7, sp, #0
 8101746:	60f8      	str	r0, [r7, #12]
 8101748:	60b9      	str	r1, [r7, #8]
 810174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810174c:	68fb      	ldr	r3, [r7, #12]
 810174e:	f003 0307 	and.w	r3, r3, #7
 8101752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101754:	69fb      	ldr	r3, [r7, #28]
 8101756:	f1c3 0307 	rsb	r3, r3, #7
 810175a:	2b04      	cmp	r3, #4
 810175c:	bf28      	it	cs
 810175e:	2304      	movcs	r3, #4
 8101760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101762:	69fb      	ldr	r3, [r7, #28]
 8101764:	3304      	adds	r3, #4
 8101766:	2b06      	cmp	r3, #6
 8101768:	d902      	bls.n	8101770 <NVIC_EncodePriority+0x30>
 810176a:	69fb      	ldr	r3, [r7, #28]
 810176c:	3b03      	subs	r3, #3
 810176e:	e000      	b.n	8101772 <NVIC_EncodePriority+0x32>
 8101770:	2300      	movs	r3, #0
 8101772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101774:	f04f 32ff 	mov.w	r2, #4294967295
 8101778:	69bb      	ldr	r3, [r7, #24]
 810177a:	fa02 f303 	lsl.w	r3, r2, r3
 810177e:	43da      	mvns	r2, r3
 8101780:	68bb      	ldr	r3, [r7, #8]
 8101782:	401a      	ands	r2, r3
 8101784:	697b      	ldr	r3, [r7, #20]
 8101786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101788:	f04f 31ff 	mov.w	r1, #4294967295
 810178c:	697b      	ldr	r3, [r7, #20]
 810178e:	fa01 f303 	lsl.w	r3, r1, r3
 8101792:	43d9      	mvns	r1, r3
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101798:	4313      	orrs	r3, r2
         );
}
 810179a:	4618      	mov	r0, r3
 810179c:	3724      	adds	r7, #36	@ 0x24
 810179e:	46bd      	mov	sp, r7
 81017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a4:	4770      	bx	lr

081017a6 <LL_TIM_EnableCounter>:
{
 81017a6:	b480      	push	{r7}
 81017a8:	b083      	sub	sp, #12
 81017aa:	af00      	add	r7, sp, #0
 81017ac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 81017ae:	687b      	ldr	r3, [r7, #4]
 81017b0:	681b      	ldr	r3, [r3, #0]
 81017b2:	f043 0201 	orr.w	r2, r3, #1
 81017b6:	687b      	ldr	r3, [r7, #4]
 81017b8:	601a      	str	r2, [r3, #0]
}
 81017ba:	bf00      	nop
 81017bc:	370c      	adds	r7, #12
 81017be:	46bd      	mov	sp, r7
 81017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017c4:	4770      	bx	lr

081017c6 <LL_TIM_EnableUpdateEvent>:
{
 81017c6:	b480      	push	{r7}
 81017c8:	b083      	sub	sp, #12
 81017ca:	af00      	add	r7, sp, #0
 81017cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 81017ce:	687b      	ldr	r3, [r7, #4]
 81017d0:	681b      	ldr	r3, [r3, #0]
 81017d2:	f023 0202 	bic.w	r2, r3, #2
 81017d6:	687b      	ldr	r3, [r7, #4]
 81017d8:	601a      	str	r2, [r3, #0]
}
 81017da:	bf00      	nop
 81017dc:	370c      	adds	r7, #12
 81017de:	46bd      	mov	sp, r7
 81017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e4:	4770      	bx	lr

081017e6 <LL_TIM_EnableARRPreload>:
{
 81017e6:	b480      	push	{r7}
 81017e8:	b083      	sub	sp, #12
 81017ea:	af00      	add	r7, sp, #0
 81017ec:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 81017ee:	687b      	ldr	r3, [r7, #4]
 81017f0:	681b      	ldr	r3, [r3, #0]
 81017f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81017f6:	687b      	ldr	r3, [r7, #4]
 81017f8:	601a      	str	r2, [r3, #0]
}
 81017fa:	bf00      	nop
 81017fc:	370c      	adds	r7, #12
 81017fe:	46bd      	mov	sp, r7
 8101800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101804:	4770      	bx	lr

08101806 <LL_TIM_SetClockSource>:
{
 8101806:	b480      	push	{r7}
 8101808:	b083      	sub	sp, #12
 810180a:	af00      	add	r7, sp, #0
 810180c:	6078      	str	r0, [r7, #4]
 810180e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8101810:	687b      	ldr	r3, [r7, #4]
 8101812:	689b      	ldr	r3, [r3, #8]
 8101814:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8101818:	f023 0307 	bic.w	r3, r3, #7
 810181c:	683a      	ldr	r2, [r7, #0]
 810181e:	431a      	orrs	r2, r3
 8101820:	687b      	ldr	r3, [r7, #4]
 8101822:	609a      	str	r2, [r3, #8]
}
 8101824:	bf00      	nop
 8101826:	370c      	adds	r7, #12
 8101828:	46bd      	mov	sp, r7
 810182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810182e:	4770      	bx	lr

08101830 <LL_TIM_SetTriggerOutput>:
{
 8101830:	b480      	push	{r7}
 8101832:	b083      	sub	sp, #12
 8101834:	af00      	add	r7, sp, #0
 8101836:	6078      	str	r0, [r7, #4]
 8101838:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 810183a:	687b      	ldr	r3, [r7, #4]
 810183c:	685b      	ldr	r3, [r3, #4]
 810183e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8101842:	683b      	ldr	r3, [r7, #0]
 8101844:	431a      	orrs	r2, r3
 8101846:	687b      	ldr	r3, [r7, #4]
 8101848:	605a      	str	r2, [r3, #4]
}
 810184a:	bf00      	nop
 810184c:	370c      	adds	r7, #12
 810184e:	46bd      	mov	sp, r7
 8101850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101854:	4770      	bx	lr

08101856 <LL_TIM_DisableMasterSlaveMode>:
{
 8101856:	b480      	push	{r7}
 8101858:	b083      	sub	sp, #12
 810185a:	af00      	add	r7, sp, #0
 810185c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 810185e:	687b      	ldr	r3, [r7, #4]
 8101860:	689b      	ldr	r3, [r3, #8]
 8101862:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8101866:	687b      	ldr	r3, [r7, #4]
 8101868:	609a      	str	r2, [r3, #8]
}
 810186a:	bf00      	nop
 810186c:	370c      	adds	r7, #12
 810186e:	46bd      	mov	sp, r7
 8101870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101874:	4770      	bx	lr

08101876 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8101876:	b480      	push	{r7}
 8101878:	b083      	sub	sp, #12
 810187a:	af00      	add	r7, sp, #0
 810187c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 810187e:	687b      	ldr	r3, [r7, #4]
 8101880:	68db      	ldr	r3, [r3, #12]
 8101882:	f043 0201 	orr.w	r2, r3, #1
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	60da      	str	r2, [r3, #12]
}
 810188a:	bf00      	nop
 810188c:	370c      	adds	r7, #12
 810188e:	46bd      	mov	sp, r7
 8101890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101894:	4770      	bx	lr

08101896 <LL_USART_Enable>:
{
 8101896:	b480      	push	{r7}
 8101898:	b083      	sub	sp, #12
 810189a:	af00      	add	r7, sp, #0
 810189c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 810189e:	687b      	ldr	r3, [r7, #4]
 81018a0:	681b      	ldr	r3, [r3, #0]
 81018a2:	f043 0201 	orr.w	r2, r3, #1
 81018a6:	687b      	ldr	r3, [r7, #4]
 81018a8:	601a      	str	r2, [r3, #0]
}
 81018aa:	bf00      	nop
 81018ac:	370c      	adds	r7, #12
 81018ae:	46bd      	mov	sp, r7
 81018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b4:	4770      	bx	lr

081018b6 <LL_USART_DisableFIFO>:
{
 81018b6:	b480      	push	{r7}
 81018b8:	b083      	sub	sp, #12
 81018ba:	af00      	add	r7, sp, #0
 81018bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 81018be:	687b      	ldr	r3, [r7, #4]
 81018c0:	681b      	ldr	r3, [r3, #0]
 81018c2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 81018c6:	687b      	ldr	r3, [r7, #4]
 81018c8:	601a      	str	r2, [r3, #0]
}
 81018ca:	bf00      	nop
 81018cc:	370c      	adds	r7, #12
 81018ce:	46bd      	mov	sp, r7
 81018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018d4:	4770      	bx	lr

081018d6 <LL_USART_SetTXFIFOThreshold>:
{
 81018d6:	b480      	push	{r7}
 81018d8:	b089      	sub	sp, #36	@ 0x24
 81018da:	af00      	add	r7, sp, #0
 81018dc:	6078      	str	r0, [r7, #4]
 81018de:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 81018e0:	687b      	ldr	r3, [r7, #4]
 81018e2:	3308      	adds	r3, #8
 81018e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81018e6:	68fb      	ldr	r3, [r7, #12]
 81018e8:	e853 3f00 	ldrex	r3, [r3]
 81018ec:	60bb      	str	r3, [r7, #8]
   return(result);
 81018ee:	68bb      	ldr	r3, [r7, #8]
 81018f0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 81018f4:	683b      	ldr	r3, [r7, #0]
 81018f6:	075b      	lsls	r3, r3, #29
 81018f8:	4313      	orrs	r3, r2
 81018fa:	61fb      	str	r3, [r7, #28]
 81018fc:	687b      	ldr	r3, [r7, #4]
 81018fe:	3308      	adds	r3, #8
 8101900:	69fa      	ldr	r2, [r7, #28]
 8101902:	61ba      	str	r2, [r7, #24]
 8101904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101906:	6979      	ldr	r1, [r7, #20]
 8101908:	69ba      	ldr	r2, [r7, #24]
 810190a:	e841 2300 	strex	r3, r2, [r1]
 810190e:	613b      	str	r3, [r7, #16]
   return(result);
 8101910:	693b      	ldr	r3, [r7, #16]
 8101912:	2b00      	cmp	r3, #0
 8101914:	d1e4      	bne.n	81018e0 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8101916:	bf00      	nop
 8101918:	bf00      	nop
 810191a:	3724      	adds	r7, #36	@ 0x24
 810191c:	46bd      	mov	sp, r7
 810191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101922:	4770      	bx	lr

08101924 <LL_USART_SetRXFIFOThreshold>:
{
 8101924:	b480      	push	{r7}
 8101926:	b089      	sub	sp, #36	@ 0x24
 8101928:	af00      	add	r7, sp, #0
 810192a:	6078      	str	r0, [r7, #4]
 810192c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	3308      	adds	r3, #8
 8101932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101934:	68fb      	ldr	r3, [r7, #12]
 8101936:	e853 3f00 	ldrex	r3, [r3]
 810193a:	60bb      	str	r3, [r7, #8]
   return(result);
 810193c:	68bb      	ldr	r3, [r7, #8]
 810193e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8101942:	683b      	ldr	r3, [r7, #0]
 8101944:	065b      	lsls	r3, r3, #25
 8101946:	4313      	orrs	r3, r2
 8101948:	61fb      	str	r3, [r7, #28]
 810194a:	687b      	ldr	r3, [r7, #4]
 810194c:	3308      	adds	r3, #8
 810194e:	69fa      	ldr	r2, [r7, #28]
 8101950:	61ba      	str	r2, [r7, #24]
 8101952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101954:	6979      	ldr	r1, [r7, #20]
 8101956:	69ba      	ldr	r2, [r7, #24]
 8101958:	e841 2300 	strex	r3, r2, [r1]
 810195c:	613b      	str	r3, [r7, #16]
   return(result);
 810195e:	693b      	ldr	r3, [r7, #16]
 8101960:	2b00      	cmp	r3, #0
 8101962:	d1e4      	bne.n	810192e <LL_USART_SetRXFIFOThreshold+0xa>
}
 8101964:	bf00      	nop
 8101966:	bf00      	nop
 8101968:	3724      	adds	r7, #36	@ 0x24
 810196a:	46bd      	mov	sp, r7
 810196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101970:	4770      	bx	lr

08101972 <LL_USART_ConfigAsyncMode>:
{
 8101972:	b480      	push	{r7}
 8101974:	b083      	sub	sp, #12
 8101976:	af00      	add	r7, sp, #0
 8101978:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810197a:	687b      	ldr	r3, [r7, #4]
 810197c:	685b      	ldr	r3, [r3, #4]
 810197e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8101982:	687b      	ldr	r3, [r7, #4]
 8101984:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8101986:	687b      	ldr	r3, [r7, #4]
 8101988:	689b      	ldr	r3, [r3, #8]
 810198a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 810198e:	687b      	ldr	r3, [r7, #4]
 8101990:	609a      	str	r2, [r3, #8]
}
 8101992:	bf00      	nop
 8101994:	370c      	adds	r7, #12
 8101996:	46bd      	mov	sp, r7
 8101998:	f85d 7b04 	ldr.w	r7, [sp], #4
 810199c:	4770      	bx	lr

0810199e <LL_USART_IsActiveFlag_TEACK>:
{
 810199e:	b480      	push	{r7}
 81019a0:	b083      	sub	sp, #12
 81019a2:	af00      	add	r7, sp, #0
 81019a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 81019a6:	687b      	ldr	r3, [r7, #4]
 81019a8:	69db      	ldr	r3, [r3, #28]
 81019aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81019ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81019b2:	d101      	bne.n	81019b8 <LL_USART_IsActiveFlag_TEACK+0x1a>
 81019b4:	2301      	movs	r3, #1
 81019b6:	e000      	b.n	81019ba <LL_USART_IsActiveFlag_TEACK+0x1c>
 81019b8:	2300      	movs	r3, #0
}
 81019ba:	4618      	mov	r0, r3
 81019bc:	370c      	adds	r7, #12
 81019be:	46bd      	mov	sp, r7
 81019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019c4:	4770      	bx	lr

081019c6 <LL_USART_IsActiveFlag_REACK>:
{
 81019c6:	b480      	push	{r7}
 81019c8:	b083      	sub	sp, #12
 81019ca:	af00      	add	r7, sp, #0
 81019cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 81019ce:	687b      	ldr	r3, [r7, #4]
 81019d0:	69db      	ldr	r3, [r3, #28]
 81019d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81019d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81019da:	d101      	bne.n	81019e0 <LL_USART_IsActiveFlag_REACK+0x1a>
 81019dc:	2301      	movs	r3, #1
 81019de:	e000      	b.n	81019e2 <LL_USART_IsActiveFlag_REACK+0x1c>
 81019e0:	2300      	movs	r3, #0
}
 81019e2:	4618      	mov	r0, r3
 81019e4:	370c      	adds	r7, #12
 81019e6:	46bd      	mov	sp, r7
 81019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ec:	4770      	bx	lr

081019ee <LL_GPIO_ResetOutputPin>:
{
 81019ee:	b480      	push	{r7}
 81019f0:	b083      	sub	sp, #12
 81019f2:	af00      	add	r7, sp, #0
 81019f4:	6078      	str	r0, [r7, #4]
 81019f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 81019f8:	683b      	ldr	r3, [r7, #0]
 81019fa:	041a      	lsls	r2, r3, #16
 81019fc:	687b      	ldr	r3, [r7, #4]
 81019fe:	619a      	str	r2, [r3, #24]
}
 8101a00:	bf00      	nop
 8101a02:	370c      	adds	r7, #12
 8101a04:	46bd      	mov	sp, r7
 8101a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a0a:	4770      	bx	lr

08101a0c <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8101a0c:	b480      	push	{r7}
 8101a0e:	b085      	sub	sp, #20
 8101a10:	af00      	add	r7, sp, #0
 8101a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8101a14:	4b0a      	ldr	r3, [pc, #40]	@ (8101a40 <LL_AHB4_GRP1_EnableClock+0x34>)
 8101a16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101a1a:	4909      	ldr	r1, [pc, #36]	@ (8101a40 <LL_AHB4_GRP1_EnableClock+0x34>)
 8101a1c:	687b      	ldr	r3, [r7, #4]
 8101a1e:	4313      	orrs	r3, r2
 8101a20:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8101a24:	4b06      	ldr	r3, [pc, #24]	@ (8101a40 <LL_AHB4_GRP1_EnableClock+0x34>)
 8101a26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	4013      	ands	r3, r2
 8101a2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8101a30:	68fb      	ldr	r3, [r7, #12]
}
 8101a32:	bf00      	nop
 8101a34:	3714      	adds	r7, #20
 8101a36:	46bd      	mov	sp, r7
 8101a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a3c:	4770      	bx	lr
 8101a3e:	bf00      	nop
 8101a40:	58024400 	.word	0x58024400

08101a44 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8101a44:	b480      	push	{r7}
 8101a46:	b085      	sub	sp, #20
 8101a48:	af00      	add	r7, sp, #0
 8101a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8101a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8101a78 <LL_APB1_GRP1_EnableClock+0x34>)
 8101a4e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8101a52:	4909      	ldr	r1, [pc, #36]	@ (8101a78 <LL_APB1_GRP1_EnableClock+0x34>)
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	4313      	orrs	r3, r2
 8101a58:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8101a5c:	4b06      	ldr	r3, [pc, #24]	@ (8101a78 <LL_APB1_GRP1_EnableClock+0x34>)
 8101a5e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8101a62:	687b      	ldr	r3, [r7, #4]
 8101a64:	4013      	ands	r3, r2
 8101a66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8101a68:	68fb      	ldr	r3, [r7, #12]
}
 8101a6a:	bf00      	nop
 8101a6c:	3714      	adds	r7, #20
 8101a6e:	46bd      	mov	sp, r7
 8101a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a74:	4770      	bx	lr
 8101a76:	bf00      	nop
 8101a78:	58024400 	.word	0x58024400

08101a7c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8101a7c:	b480      	push	{r7}
 8101a7e:	b085      	sub	sp, #20
 8101a80:	af00      	add	r7, sp, #0
 8101a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8101a84:	4b0a      	ldr	r3, [pc, #40]	@ (8101ab0 <LL_APB2_GRP1_EnableClock+0x34>)
 8101a86:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8101a8a:	4909      	ldr	r1, [pc, #36]	@ (8101ab0 <LL_APB2_GRP1_EnableClock+0x34>)
 8101a8c:	687b      	ldr	r3, [r7, #4]
 8101a8e:	4313      	orrs	r3, r2
 8101a90:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8101a94:	4b06      	ldr	r3, [pc, #24]	@ (8101ab0 <LL_APB2_GRP1_EnableClock+0x34>)
 8101a96:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8101a9a:	687b      	ldr	r3, [r7, #4]
 8101a9c:	4013      	ands	r3, r2
 8101a9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8101aa0:	68fb      	ldr	r3, [r7, #12]
}
 8101aa2:	bf00      	nop
 8101aa4:	3714      	adds	r7, #20
 8101aa6:	46bd      	mov	sp, r7
 8101aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aac:	4770      	bx	lr
 8101aae:	bf00      	nop
 8101ab0:	58024400 	.word	0x58024400

08101ab4 <LL_DMA_SetDataTransferDirection>:
{
 8101ab4:	b480      	push	{r7}
 8101ab6:	b087      	sub	sp, #28
 8101ab8:	af00      	add	r7, sp, #0
 8101aba:	60f8      	str	r0, [r7, #12]
 8101abc:	60b9      	str	r1, [r7, #8]
 8101abe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101ac0:	68fb      	ldr	r3, [r7, #12]
 8101ac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8101ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8101afc <LL_DMA_SetDataTransferDirection+0x48>)
 8101ac6:	68bb      	ldr	r3, [r7, #8]
 8101ac8:	4413      	add	r3, r2
 8101aca:	781b      	ldrb	r3, [r3, #0]
 8101acc:	461a      	mov	r2, r3
 8101ace:	697b      	ldr	r3, [r7, #20]
 8101ad0:	4413      	add	r3, r2
 8101ad2:	681b      	ldr	r3, [r3, #0]
 8101ad4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8101ad8:	4908      	ldr	r1, [pc, #32]	@ (8101afc <LL_DMA_SetDataTransferDirection+0x48>)
 8101ada:	68bb      	ldr	r3, [r7, #8]
 8101adc:	440b      	add	r3, r1
 8101ade:	781b      	ldrb	r3, [r3, #0]
 8101ae0:	4619      	mov	r1, r3
 8101ae2:	697b      	ldr	r3, [r7, #20]
 8101ae4:	440b      	add	r3, r1
 8101ae6:	4619      	mov	r1, r3
 8101ae8:	687b      	ldr	r3, [r7, #4]
 8101aea:	4313      	orrs	r3, r2
 8101aec:	600b      	str	r3, [r1, #0]
}
 8101aee:	bf00      	nop
 8101af0:	371c      	adds	r7, #28
 8101af2:	46bd      	mov	sp, r7
 8101af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101af8:	4770      	bx	lr
 8101afa:	bf00      	nop
 8101afc:	0810ec30 	.word	0x0810ec30

08101b00 <LL_DMA_SetMode>:
{
 8101b00:	b480      	push	{r7}
 8101b02:	b087      	sub	sp, #28
 8101b04:	af00      	add	r7, sp, #0
 8101b06:	60f8      	str	r0, [r7, #12]
 8101b08:	60b9      	str	r1, [r7, #8]
 8101b0a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101b0c:	68fb      	ldr	r3, [r7, #12]
 8101b0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8101b10:	4a0d      	ldr	r2, [pc, #52]	@ (8101b48 <LL_DMA_SetMode+0x48>)
 8101b12:	68bb      	ldr	r3, [r7, #8]
 8101b14:	4413      	add	r3, r2
 8101b16:	781b      	ldrb	r3, [r3, #0]
 8101b18:	461a      	mov	r2, r3
 8101b1a:	697b      	ldr	r3, [r7, #20]
 8101b1c:	4413      	add	r3, r2
 8101b1e:	681b      	ldr	r3, [r3, #0]
 8101b20:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8101b24:	4908      	ldr	r1, [pc, #32]	@ (8101b48 <LL_DMA_SetMode+0x48>)
 8101b26:	68bb      	ldr	r3, [r7, #8]
 8101b28:	440b      	add	r3, r1
 8101b2a:	781b      	ldrb	r3, [r3, #0]
 8101b2c:	4619      	mov	r1, r3
 8101b2e:	697b      	ldr	r3, [r7, #20]
 8101b30:	440b      	add	r3, r1
 8101b32:	4619      	mov	r1, r3
 8101b34:	687b      	ldr	r3, [r7, #4]
 8101b36:	4313      	orrs	r3, r2
 8101b38:	600b      	str	r3, [r1, #0]
}
 8101b3a:	bf00      	nop
 8101b3c:	371c      	adds	r7, #28
 8101b3e:	46bd      	mov	sp, r7
 8101b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b44:	4770      	bx	lr
 8101b46:	bf00      	nop
 8101b48:	0810ec30 	.word	0x0810ec30

08101b4c <LL_DMA_SetPeriphIncMode>:
{
 8101b4c:	b480      	push	{r7}
 8101b4e:	b087      	sub	sp, #28
 8101b50:	af00      	add	r7, sp, #0
 8101b52:	60f8      	str	r0, [r7, #12]
 8101b54:	60b9      	str	r1, [r7, #8]
 8101b56:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101b58:	68fb      	ldr	r3, [r7, #12]
 8101b5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 8101b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8101b94 <LL_DMA_SetPeriphIncMode+0x48>)
 8101b5e:	68bb      	ldr	r3, [r7, #8]
 8101b60:	4413      	add	r3, r2
 8101b62:	781b      	ldrb	r3, [r3, #0]
 8101b64:	461a      	mov	r2, r3
 8101b66:	697b      	ldr	r3, [r7, #20]
 8101b68:	4413      	add	r3, r2
 8101b6a:	681b      	ldr	r3, [r3, #0]
 8101b6c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8101b70:	4908      	ldr	r1, [pc, #32]	@ (8101b94 <LL_DMA_SetPeriphIncMode+0x48>)
 8101b72:	68bb      	ldr	r3, [r7, #8]
 8101b74:	440b      	add	r3, r1
 8101b76:	781b      	ldrb	r3, [r3, #0]
 8101b78:	4619      	mov	r1, r3
 8101b7a:	697b      	ldr	r3, [r7, #20]
 8101b7c:	440b      	add	r3, r1
 8101b7e:	4619      	mov	r1, r3
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	4313      	orrs	r3, r2
 8101b84:	600b      	str	r3, [r1, #0]
}
 8101b86:	bf00      	nop
 8101b88:	371c      	adds	r7, #28
 8101b8a:	46bd      	mov	sp, r7
 8101b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b90:	4770      	bx	lr
 8101b92:	bf00      	nop
 8101b94:	0810ec30 	.word	0x0810ec30

08101b98 <LL_DMA_SetMemoryIncMode>:
{
 8101b98:	b480      	push	{r7}
 8101b9a:	b087      	sub	sp, #28
 8101b9c:	af00      	add	r7, sp, #0
 8101b9e:	60f8      	str	r0, [r7, #12]
 8101ba0:	60b9      	str	r1, [r7, #8]
 8101ba2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101ba4:	68fb      	ldr	r3, [r7, #12]
 8101ba6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 8101ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8101be0 <LL_DMA_SetMemoryIncMode+0x48>)
 8101baa:	68bb      	ldr	r3, [r7, #8]
 8101bac:	4413      	add	r3, r2
 8101bae:	781b      	ldrb	r3, [r3, #0]
 8101bb0:	461a      	mov	r2, r3
 8101bb2:	697b      	ldr	r3, [r7, #20]
 8101bb4:	4413      	add	r3, r2
 8101bb6:	681b      	ldr	r3, [r3, #0]
 8101bb8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8101bbc:	4908      	ldr	r1, [pc, #32]	@ (8101be0 <LL_DMA_SetMemoryIncMode+0x48>)
 8101bbe:	68bb      	ldr	r3, [r7, #8]
 8101bc0:	440b      	add	r3, r1
 8101bc2:	781b      	ldrb	r3, [r3, #0]
 8101bc4:	4619      	mov	r1, r3
 8101bc6:	697b      	ldr	r3, [r7, #20]
 8101bc8:	440b      	add	r3, r1
 8101bca:	4619      	mov	r1, r3
 8101bcc:	687b      	ldr	r3, [r7, #4]
 8101bce:	4313      	orrs	r3, r2
 8101bd0:	600b      	str	r3, [r1, #0]
}
 8101bd2:	bf00      	nop
 8101bd4:	371c      	adds	r7, #28
 8101bd6:	46bd      	mov	sp, r7
 8101bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bdc:	4770      	bx	lr
 8101bde:	bf00      	nop
 8101be0:	0810ec30 	.word	0x0810ec30

08101be4 <LL_DMA_SetPeriphSize>:
{
 8101be4:	b480      	push	{r7}
 8101be6:	b087      	sub	sp, #28
 8101be8:	af00      	add	r7, sp, #0
 8101bea:	60f8      	str	r0, [r7, #12]
 8101bec:	60b9      	str	r1, [r7, #8]
 8101bee:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101bf0:	68fb      	ldr	r3, [r7, #12]
 8101bf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 8101bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8101c2c <LL_DMA_SetPeriphSize+0x48>)
 8101bf6:	68bb      	ldr	r3, [r7, #8]
 8101bf8:	4413      	add	r3, r2
 8101bfa:	781b      	ldrb	r3, [r3, #0]
 8101bfc:	461a      	mov	r2, r3
 8101bfe:	697b      	ldr	r3, [r7, #20]
 8101c00:	4413      	add	r3, r2
 8101c02:	681b      	ldr	r3, [r3, #0]
 8101c04:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8101c08:	4908      	ldr	r1, [pc, #32]	@ (8101c2c <LL_DMA_SetPeriphSize+0x48>)
 8101c0a:	68bb      	ldr	r3, [r7, #8]
 8101c0c:	440b      	add	r3, r1
 8101c0e:	781b      	ldrb	r3, [r3, #0]
 8101c10:	4619      	mov	r1, r3
 8101c12:	697b      	ldr	r3, [r7, #20]
 8101c14:	440b      	add	r3, r1
 8101c16:	4619      	mov	r1, r3
 8101c18:	687b      	ldr	r3, [r7, #4]
 8101c1a:	4313      	orrs	r3, r2
 8101c1c:	600b      	str	r3, [r1, #0]
}
 8101c1e:	bf00      	nop
 8101c20:	371c      	adds	r7, #28
 8101c22:	46bd      	mov	sp, r7
 8101c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c28:	4770      	bx	lr
 8101c2a:	bf00      	nop
 8101c2c:	0810ec30 	.word	0x0810ec30

08101c30 <LL_DMA_SetMemorySize>:
{
 8101c30:	b480      	push	{r7}
 8101c32:	b087      	sub	sp, #28
 8101c34:	af00      	add	r7, sp, #0
 8101c36:	60f8      	str	r0, [r7, #12]
 8101c38:	60b9      	str	r1, [r7, #8]
 8101c3a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101c3c:	68fb      	ldr	r3, [r7, #12]
 8101c3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8101c40:	4a0d      	ldr	r2, [pc, #52]	@ (8101c78 <LL_DMA_SetMemorySize+0x48>)
 8101c42:	68bb      	ldr	r3, [r7, #8]
 8101c44:	4413      	add	r3, r2
 8101c46:	781b      	ldrb	r3, [r3, #0]
 8101c48:	461a      	mov	r2, r3
 8101c4a:	697b      	ldr	r3, [r7, #20]
 8101c4c:	4413      	add	r3, r2
 8101c4e:	681b      	ldr	r3, [r3, #0]
 8101c50:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8101c54:	4908      	ldr	r1, [pc, #32]	@ (8101c78 <LL_DMA_SetMemorySize+0x48>)
 8101c56:	68bb      	ldr	r3, [r7, #8]
 8101c58:	440b      	add	r3, r1
 8101c5a:	781b      	ldrb	r3, [r3, #0]
 8101c5c:	4619      	mov	r1, r3
 8101c5e:	697b      	ldr	r3, [r7, #20]
 8101c60:	440b      	add	r3, r1
 8101c62:	4619      	mov	r1, r3
 8101c64:	687b      	ldr	r3, [r7, #4]
 8101c66:	4313      	orrs	r3, r2
 8101c68:	600b      	str	r3, [r1, #0]
}
 8101c6a:	bf00      	nop
 8101c6c:	371c      	adds	r7, #28
 8101c6e:	46bd      	mov	sp, r7
 8101c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c74:	4770      	bx	lr
 8101c76:	bf00      	nop
 8101c78:	0810ec30 	.word	0x0810ec30

08101c7c <LL_DMA_SetStreamPriorityLevel>:
{
 8101c7c:	b480      	push	{r7}
 8101c7e:	b087      	sub	sp, #28
 8101c80:	af00      	add	r7, sp, #0
 8101c82:	60f8      	str	r0, [r7, #12]
 8101c84:	60b9      	str	r1, [r7, #8]
 8101c86:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101c88:	68fb      	ldr	r3, [r7, #12]
 8101c8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 8101c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8101cc4 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8101c8e:	68bb      	ldr	r3, [r7, #8]
 8101c90:	4413      	add	r3, r2
 8101c92:	781b      	ldrb	r3, [r3, #0]
 8101c94:	461a      	mov	r2, r3
 8101c96:	697b      	ldr	r3, [r7, #20]
 8101c98:	4413      	add	r3, r2
 8101c9a:	681b      	ldr	r3, [r3, #0]
 8101c9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8101ca0:	4908      	ldr	r1, [pc, #32]	@ (8101cc4 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8101ca2:	68bb      	ldr	r3, [r7, #8]
 8101ca4:	440b      	add	r3, r1
 8101ca6:	781b      	ldrb	r3, [r3, #0]
 8101ca8:	4619      	mov	r1, r3
 8101caa:	697b      	ldr	r3, [r7, #20]
 8101cac:	440b      	add	r3, r1
 8101cae:	4619      	mov	r1, r3
 8101cb0:	687b      	ldr	r3, [r7, #4]
 8101cb2:	4313      	orrs	r3, r2
 8101cb4:	600b      	str	r3, [r1, #0]
}
 8101cb6:	bf00      	nop
 8101cb8:	371c      	adds	r7, #28
 8101cba:	46bd      	mov	sp, r7
 8101cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cc0:	4770      	bx	lr
 8101cc2:	bf00      	nop
 8101cc4:	0810ec30 	.word	0x0810ec30

08101cc8 <LL_DMA_SetPeriphRequest>:
{
 8101cc8:	b480      	push	{r7}
 8101cca:	b085      	sub	sp, #20
 8101ccc:	af00      	add	r7, sp, #0
 8101cce:	60f8      	str	r0, [r7, #12]
 8101cd0:	60b9      	str	r1, [r7, #8]
 8101cd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8101cd4:	68bb      	ldr	r3, [r7, #8]
 8101cd6:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8101cda:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8101cde:	009b      	lsls	r3, r3, #2
 8101ce0:	68fa      	ldr	r2, [r7, #12]
 8101ce2:	4911      	ldr	r1, [pc, #68]	@ (8101d28 <LL_DMA_SetPeriphRequest+0x60>)
 8101ce4:	428a      	cmp	r2, r1
 8101ce6:	d101      	bne.n	8101cec <LL_DMA_SetPeriphRequest+0x24>
 8101ce8:	2200      	movs	r2, #0
 8101cea:	e000      	b.n	8101cee <LL_DMA_SetPeriphRequest+0x26>
 8101cec:	2220      	movs	r2, #32
 8101cee:	4413      	add	r3, r2
 8101cf0:	681b      	ldr	r3, [r3, #0]
 8101cf2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8101cf6:	68bb      	ldr	r3, [r7, #8]
 8101cf8:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8101cfc:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8101d00:	009b      	lsls	r3, r3, #2
 8101d02:	68f9      	ldr	r1, [r7, #12]
 8101d04:	4808      	ldr	r0, [pc, #32]	@ (8101d28 <LL_DMA_SetPeriphRequest+0x60>)
 8101d06:	4281      	cmp	r1, r0
 8101d08:	d101      	bne.n	8101d0e <LL_DMA_SetPeriphRequest+0x46>
 8101d0a:	2100      	movs	r1, #0
 8101d0c:	e000      	b.n	8101d10 <LL_DMA_SetPeriphRequest+0x48>
 8101d0e:	2120      	movs	r1, #32
 8101d10:	440b      	add	r3, r1
 8101d12:	4619      	mov	r1, r3
 8101d14:	687b      	ldr	r3, [r7, #4]
 8101d16:	4313      	orrs	r3, r2
 8101d18:	600b      	str	r3, [r1, #0]
}
 8101d1a:	bf00      	nop
 8101d1c:	3714      	adds	r7, #20
 8101d1e:	46bd      	mov	sp, r7
 8101d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d24:	4770      	bx	lr
 8101d26:	bf00      	nop
 8101d28:	40020000 	.word	0x40020000

08101d2c <LL_DMA_DisableFifoMode>:
{
 8101d2c:	b480      	push	{r7}
 8101d2e:	b085      	sub	sp, #20
 8101d30:	af00      	add	r7, sp, #0
 8101d32:	6078      	str	r0, [r7, #4]
 8101d34:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 8101d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8101d6c <LL_DMA_DisableFifoMode+0x40>)
 8101d3c:	683b      	ldr	r3, [r7, #0]
 8101d3e:	4413      	add	r3, r2
 8101d40:	781b      	ldrb	r3, [r3, #0]
 8101d42:	461a      	mov	r2, r3
 8101d44:	68fb      	ldr	r3, [r7, #12]
 8101d46:	4413      	add	r3, r2
 8101d48:	695b      	ldr	r3, [r3, #20]
 8101d4a:	4908      	ldr	r1, [pc, #32]	@ (8101d6c <LL_DMA_DisableFifoMode+0x40>)
 8101d4c:	683a      	ldr	r2, [r7, #0]
 8101d4e:	440a      	add	r2, r1
 8101d50:	7812      	ldrb	r2, [r2, #0]
 8101d52:	4611      	mov	r1, r2
 8101d54:	68fa      	ldr	r2, [r7, #12]
 8101d56:	440a      	add	r2, r1
 8101d58:	f023 0304 	bic.w	r3, r3, #4
 8101d5c:	6153      	str	r3, [r2, #20]
}
 8101d5e:	bf00      	nop
 8101d60:	3714      	adds	r7, #20
 8101d62:	46bd      	mov	sp, r7
 8101d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d68:	4770      	bx	lr
 8101d6a:	bf00      	nop
 8101d6c:	0810ec30 	.word	0x0810ec30

08101d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101d70:	b580      	push	{r7, lr}
 8101d72:	b082      	sub	sp, #8
 8101d74:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101d76:	4b24      	ldr	r3, [pc, #144]	@ (8101e08 <main+0x98>)
 8101d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d7c:	4a22      	ldr	r2, [pc, #136]	@ (8101e08 <main+0x98>)
 8101d7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d86:	4b20      	ldr	r3, [pc, #128]	@ (8101e08 <main+0x98>)
 8101d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101d90:	607b      	str	r3, [r7, #4]
 8101d92:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101d94:	2001      	movs	r0, #1
 8101d96:	f001 f8d7 	bl	8102f48 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101d9a:	f003 fdb1 	bl	8105900 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101d9e:	2201      	movs	r2, #1
 8101da0:	2102      	movs	r1, #2
 8101da2:	2000      	movs	r0, #0
 8101da4:	f003 fd32 	bl	810580c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101da8:	4b18      	ldr	r3, [pc, #96]	@ (8101e0c <main+0x9c>)
 8101daa:	681b      	ldr	r3, [r3, #0]
 8101dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8101db0:	2b70      	cmp	r3, #112	@ 0x70
 8101db2:	d108      	bne.n	8101dc6 <main+0x56>
 8101db4:	4b16      	ldr	r3, [pc, #88]	@ (8101e10 <main+0xa0>)
 8101db6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101dba:	4a15      	ldr	r2, [pc, #84]	@ (8101e10 <main+0xa0>)
 8101dbc:	f043 0301 	orr.w	r3, r3, #1
 8101dc0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101dc4:	e007      	b.n	8101dd6 <main+0x66>
 8101dc6:	4b12      	ldr	r3, [pc, #72]	@ (8101e10 <main+0xa0>)
 8101dc8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101dcc:	4a10      	ldr	r2, [pc, #64]	@ (8101e10 <main+0xa0>)
 8101dce:	f043 0301 	orr.w	r3, r3, #1
 8101dd2:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101dd6:	f000 fd73 	bl	81028c0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 8101dda:	f000 f9af 	bl	810213c <MX_MDMA_Init>
  MX_DMA_Init();
 8101dde:	f000 f975 	bl	81020cc <MX_DMA_Init>
  MX_BDMA_Init();
 8101de2:	f000 f959 	bl	8102098 <MX_BDMA_Init>
  MX_GPIO_Init();
 8101de6:	f000 f9c3 	bl	8102170 <MX_GPIO_Init>
  MX_SDMMC2_MMC_Init();
 8101dea:	f000 f813 	bl	8101e14 <MX_SDMMC2_MMC_Init>
  MX_USART6_UART_Init();
 8101dee:	f000 f883 	bl	8101ef8 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8101df2:	f000 f833 	bl	8101e5c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8101df6:	f00c f8cd 	bl	810df94 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  Mgmt_HardwareSystemPreparing();
 8101dfa:	f7fe fa6d 	bl	81002d8 <Mgmt_HardwareSystemPreparing>

  Mgmt_SystemStart();
 8101dfe:	f7fe fa76 	bl	81002ee <Mgmt_SystemStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101e02:	bf00      	nop
 8101e04:	e7fd      	b.n	8101e02 <main+0x92>
 8101e06:	bf00      	nop
 8101e08:	58024400 	.word	0x58024400
 8101e0c:	e000ed00 	.word	0xe000ed00
 8101e10:	58026400 	.word	0x58026400

08101e14 <MX_SDMMC2_MMC_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_MMC_Init(void)
{
 8101e14:	b580      	push	{r7, lr}
 8101e16:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hmmc2.Instance = SDMMC2;
 8101e18:	4b0e      	ldr	r3, [pc, #56]	@ (8101e54 <MX_SDMMC2_MMC_Init+0x40>)
 8101e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8101e58 <MX_SDMMC2_MMC_Init+0x44>)
 8101e1c:	601a      	str	r2, [r3, #0]
  hmmc2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8101e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8101e54 <MX_SDMMC2_MMC_Init+0x40>)
 8101e20:	2200      	movs	r2, #0
 8101e22:	605a      	str	r2, [r3, #4]
  hmmc2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8101e24:	4b0b      	ldr	r3, [pc, #44]	@ (8101e54 <MX_SDMMC2_MMC_Init+0x40>)
 8101e26:	2200      	movs	r2, #0
 8101e28:	609a      	str	r2, [r3, #8]
  hmmc2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8101e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8101e54 <MX_SDMMC2_MMC_Init+0x40>)
 8101e2c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8101e30:	60da      	str	r2, [r3, #12]
  hmmc2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8101e32:	4b08      	ldr	r3, [pc, #32]	@ (8101e54 <MX_SDMMC2_MMC_Init+0x40>)
 8101e34:	2200      	movs	r2, #0
 8101e36:	611a      	str	r2, [r3, #16]
  hmmc2.Init.ClockDiv = 4;
 8101e38:	4b06      	ldr	r3, [pc, #24]	@ (8101e54 <MX_SDMMC2_MMC_Init+0x40>)
 8101e3a:	2204      	movs	r2, #4
 8101e3c:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc2) != HAL_OK)
 8101e3e:	4805      	ldr	r0, [pc, #20]	@ (8101e54 <MX_SDMMC2_MMC_Init+0x40>)
 8101e40:	f001 f894 	bl	8102f6c <HAL_MMC_Init>
 8101e44:	4603      	mov	r3, r0
 8101e46:	2b00      	cmp	r3, #0
 8101e48:	d001      	beq.n	8101e4e <MX_SDMMC2_MMC_Init+0x3a>
  {
    Error_Handler();
 8101e4a:	f000 f9d9 	bl	8102200 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8101e4e:	bf00      	nop
 8101e50:	bd80      	pop	{r7, pc}
 8101e52:	bf00      	nop
 8101e54:	10034ccc 	.word	0x10034ccc
 8101e58:	48022400 	.word	0x48022400

08101e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8101e5c:	b580      	push	{r7, lr}
 8101e5e:	b086      	sub	sp, #24
 8101e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8101e62:	1d3b      	adds	r3, r7, #4
 8101e64:	2200      	movs	r2, #0
 8101e66:	601a      	str	r2, [r3, #0]
 8101e68:	605a      	str	r2, [r3, #4]
 8101e6a:	609a      	str	r2, [r3, #8]
 8101e6c:	60da      	str	r2, [r3, #12]
 8101e6e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8101e70:	2001      	movs	r0, #1
 8101e72:	f7ff fde7 	bl	8101a44 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8101e76:	f7ff fc0d 	bl	8101694 <__NVIC_GetPriorityGrouping>
 8101e7a:	4603      	mov	r3, r0
 8101e7c:	2200      	movs	r2, #0
 8101e7e:	2100      	movs	r1, #0
 8101e80:	4618      	mov	r0, r3
 8101e82:	f7ff fc5d 	bl	8101740 <NVIC_EncodePriority>
 8101e86:	4603      	mov	r3, r0
 8101e88:	4619      	mov	r1, r3
 8101e8a:	201c      	movs	r0, #28
 8101e8c:	f7ff fc2e 	bl	81016ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8101e90:	201c      	movs	r0, #28
 8101e92:	f7ff fc0d 	bl	81016b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 119;
 8101e96:	2377      	movs	r3, #119	@ 0x77
 8101e98:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8101e9a:	2300      	movs	r3, #0
 8101e9c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8101e9e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8101ea2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8101ea4:	2300      	movs	r3, #0
 8101ea6:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8101ea8:	1d3b      	adds	r3, r7, #4
 8101eaa:	4619      	mov	r1, r3
 8101eac:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101eb0:	f008 fb48 	bl	810a544 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8101eb4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101eb8:	f7ff fc95 	bl	81017e6 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8101ebc:	2100      	movs	r1, #0
 8101ebe:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101ec2:	f7ff fca0 	bl	8101806 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
 8101ec6:	2120      	movs	r1, #32
 8101ec8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101ecc:	f7ff fcb0 	bl	8101830 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8101ed0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101ed4:	f7ff fcbf 	bl	8101856 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM2);
 8101ed8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101edc:	f7ff fccb 	bl	8101876 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableUpdateEvent(TIM2);
 8101ee0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101ee4:	f7ff fc6f 	bl	81017c6 <LL_TIM_EnableUpdateEvent>
  LL_TIM_EnableCounter(TIM2);
 8101ee8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101eec:	f7ff fc5b 	bl	81017a6 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 8101ef0:	bf00      	nop
 8101ef2:	3718      	adds	r7, #24
 8101ef4:	46bd      	mov	sp, r7
 8101ef6:	bd80      	pop	{r7, pc}

08101ef8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8101ef8:	b580      	push	{r7, lr}
 8101efa:	b0be      	sub	sp, #248	@ 0xf8
 8101efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8101efe:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8101f02:	2220      	movs	r2, #32
 8101f04:	2100      	movs	r1, #0
 8101f06:	4618      	mov	r0, r3
 8101f08:	f00c fdea 	bl	810eae0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f0c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101f10:	2200      	movs	r2, #0
 8101f12:	601a      	str	r2, [r3, #0]
 8101f14:	605a      	str	r2, [r3, #4]
 8101f16:	609a      	str	r2, [r3, #8]
 8101f18:	60da      	str	r2, [r3, #12]
 8101f1a:	611a      	str	r2, [r3, #16]
 8101f1c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f1e:	463b      	mov	r3, r7
 8101f20:	22c0      	movs	r2, #192	@ 0xc0
 8101f22:	2100      	movs	r1, #0
 8101f24:	4618      	mov	r0, r3
 8101f26:	f00c fddb 	bl	810eae0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8101f2a:	f04f 0201 	mov.w	r2, #1
 8101f2e:	f04f 0300 	mov.w	r3, #0
 8101f32:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8101f36:	2300      	movs	r3, #0
 8101f38:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101f3a:	463b      	mov	r3, r7
 8101f3c:	4618      	mov	r0, r3
 8101f3e:	f003 ff01 	bl	8105d44 <HAL_RCCEx_PeriphCLKConfig>
 8101f42:	4603      	mov	r3, r0
 8101f44:	2b00      	cmp	r3, #0
 8101f46:	d001      	beq.n	8101f4c <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 8101f48:	f000 f95a 	bl	8102200 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8101f4c:	2020      	movs	r0, #32
 8101f4e:	f7ff fd95 	bl	8101a7c <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 8101f52:	2040      	movs	r0, #64	@ 0x40
 8101f54:	f7ff fd5a 	bl	8101a0c <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PG9   ------> USART6_RX
  PG14   ------> USART6_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_14;
 8101f58:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8101f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8101f60:	2302      	movs	r3, #2
 8101f62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8101f66:	2300      	movs	r3, #0
 8101f68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8101f6c:	2300      	movs	r3, #0
 8101f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8101f72:	2300      	movs	r3, #0
 8101f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8101f78:	2307      	movs	r3, #7
 8101f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101f7e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101f82:	4619      	mov	r1, r3
 8101f84:	4841      	ldr	r0, [pc, #260]	@ (810208c <MX_USART6_UART_Init+0x194>)
 8101f86:	f006 ff7d 	bl	8108e84 <LL_GPIO_Init>

  /* USART6 DMA Init */

  /* USART6_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_STREAM_0, LL_DMAMUX1_REQ_USART6_RX);
 8101f8a:	2247      	movs	r2, #71	@ 0x47
 8101f8c:	2100      	movs	r1, #0
 8101f8e:	4840      	ldr	r0, [pc, #256]	@ (8102090 <MX_USART6_UART_Init+0x198>)
 8101f90:	f7ff fe9a 	bl	8101cc8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8101f94:	2200      	movs	r2, #0
 8101f96:	2100      	movs	r1, #0
 8101f98:	483d      	ldr	r0, [pc, #244]	@ (8102090 <MX_USART6_UART_Init+0x198>)
 8101f9a:	f7ff fd8b 	bl	8101ab4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8101f9e:	2200      	movs	r2, #0
 8101fa0:	2100      	movs	r1, #0
 8101fa2:	483b      	ldr	r0, [pc, #236]	@ (8102090 <MX_USART6_UART_Init+0x198>)
 8101fa4:	f7ff fe6a 	bl	8101c7c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8101fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101fac:	2100      	movs	r1, #0
 8101fae:	4838      	ldr	r0, [pc, #224]	@ (8102090 <MX_USART6_UART_Init+0x198>)
 8101fb0:	f7ff fda6 	bl	8101b00 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8101fb4:	2200      	movs	r2, #0
 8101fb6:	2100      	movs	r1, #0
 8101fb8:	4835      	ldr	r0, [pc, #212]	@ (8102090 <MX_USART6_UART_Init+0x198>)
 8101fba:	f7ff fdc7 	bl	8101b4c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8101fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8101fc2:	2100      	movs	r1, #0
 8101fc4:	4832      	ldr	r0, [pc, #200]	@ (8102090 <MX_USART6_UART_Init+0x198>)
 8101fc6:	f7ff fde7 	bl	8101b98 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 8101fca:	2200      	movs	r2, #0
 8101fcc:	2100      	movs	r1, #0
 8101fce:	4830      	ldr	r0, [pc, #192]	@ (8102090 <MX_USART6_UART_Init+0x198>)
 8101fd0:	f7ff fe08 	bl	8101be4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 8101fd4:	2200      	movs	r2, #0
 8101fd6:	2100      	movs	r1, #0
 8101fd8:	482d      	ldr	r0, [pc, #180]	@ (8102090 <MX_USART6_UART_Init+0x198>)
 8101fda:	f7ff fe29 	bl	8101c30 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8101fde:	2100      	movs	r1, #0
 8101fe0:	482b      	ldr	r0, [pc, #172]	@ (8102090 <MX_USART6_UART_Init+0x198>)
 8101fe2:	f7ff fea3 	bl	8101d2c <LL_DMA_DisableFifoMode>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8101fe6:	f7ff fb55 	bl	8101694 <__NVIC_GetPriorityGrouping>
 8101fea:	4603      	mov	r3, r0
 8101fec:	2200      	movs	r2, #0
 8101fee:	2100      	movs	r1, #0
 8101ff0:	4618      	mov	r0, r3
 8101ff2:	f7ff fba5 	bl	8101740 <NVIC_EncodePriority>
 8101ff6:	4603      	mov	r3, r0
 8101ff8:	4619      	mov	r1, r3
 8101ffa:	2047      	movs	r0, #71	@ 0x47
 8101ffc:	f7ff fb76 	bl	81016ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8102000:	2047      	movs	r0, #71	@ 0x47
 8102002:	f7ff fb55 	bl	81016b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8102006:	2300      	movs	r3, #0
 8102008:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 810200c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8102010:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8102014:	2300      	movs	r3, #0
 8102016:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 810201a:	2300      	movs	r3, #0
 810201c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8102020:	2300      	movs	r3, #0
 8102022:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8102026:	230c      	movs	r3, #12
 8102028:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 810202c:	2300      	movs	r3, #0
 810202e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8102032:	2300      	movs	r3, #0
 8102034:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART6, &USART_InitStruct);
 8102038:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 810203c:	4619      	mov	r1, r3
 810203e:	4815      	ldr	r0, [pc, #84]	@ (8102094 <MX_USART6_UART_Init+0x19c>)
 8102040:	f008 fbb2 	bl	810a7a8 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8102044:	2100      	movs	r1, #0
 8102046:	4813      	ldr	r0, [pc, #76]	@ (8102094 <MX_USART6_UART_Init+0x19c>)
 8102048:	f7ff fc45 	bl	81018d6 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 810204c:	2100      	movs	r1, #0
 810204e:	4811      	ldr	r0, [pc, #68]	@ (8102094 <MX_USART6_UART_Init+0x19c>)
 8102050:	f7ff fc68 	bl	8101924 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8102054:	480f      	ldr	r0, [pc, #60]	@ (8102094 <MX_USART6_UART_Init+0x19c>)
 8102056:	f7ff fc2e 	bl	81018b6 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 810205a:	480e      	ldr	r0, [pc, #56]	@ (8102094 <MX_USART6_UART_Init+0x19c>)
 810205c:	f7ff fc89 	bl	8101972 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 8102060:	480c      	ldr	r0, [pc, #48]	@ (8102094 <MX_USART6_UART_Init+0x19c>)
 8102062:	f7ff fc18 	bl	8101896 <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 8102066:	bf00      	nop
 8102068:	480a      	ldr	r0, [pc, #40]	@ (8102094 <MX_USART6_UART_Init+0x19c>)
 810206a:	f7ff fc98 	bl	810199e <LL_USART_IsActiveFlag_TEACK>
 810206e:	4603      	mov	r3, r0
 8102070:	2b00      	cmp	r3, #0
 8102072:	d0f9      	beq.n	8102068 <MX_USART6_UART_Init+0x170>
 8102074:	4807      	ldr	r0, [pc, #28]	@ (8102094 <MX_USART6_UART_Init+0x19c>)
 8102076:	f7ff fca6 	bl	81019c6 <LL_USART_IsActiveFlag_REACK>
 810207a:	4603      	mov	r3, r0
 810207c:	2b00      	cmp	r3, #0
 810207e:	d0f3      	beq.n	8102068 <MX_USART6_UART_Init+0x170>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8102080:	bf00      	nop
 8102082:	bf00      	nop
 8102084:	37f8      	adds	r7, #248	@ 0xf8
 8102086:	46bd      	mov	sp, r7
 8102088:	bd80      	pop	{r7, pc}
 810208a:	bf00      	nop
 810208c:	58021800 	.word	0x58021800
 8102090:	40020400 	.word	0x40020400
 8102094:	40011400 	.word	0x40011400

08102098 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8102098:	b480      	push	{r7}
 810209a:	b083      	sub	sp, #12
 810209c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 810209e:	4b0a      	ldr	r3, [pc, #40]	@ (81020c8 <MX_BDMA_Init+0x30>)
 81020a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020a4:	4a08      	ldr	r2, [pc, #32]	@ (81020c8 <MX_BDMA_Init+0x30>)
 81020a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81020aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81020ae:	4b06      	ldr	r3, [pc, #24]	@ (81020c8 <MX_BDMA_Init+0x30>)
 81020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81020b8:	607b      	str	r3, [r7, #4]
 81020ba:	687b      	ldr	r3, [r7, #4]

}
 81020bc:	bf00      	nop
 81020be:	370c      	adds	r7, #12
 81020c0:	46bd      	mov	sp, r7
 81020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020c6:	4770      	bx	lr
 81020c8:	58024400 	.word	0x58024400

081020cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 81020cc:	b580      	push	{r7, lr}
 81020ce:	b082      	sub	sp, #8
 81020d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 81020d2:	4b19      	ldr	r3, [pc, #100]	@ (8102138 <MX_DMA_Init+0x6c>)
 81020d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81020d8:	4a17      	ldr	r2, [pc, #92]	@ (8102138 <MX_DMA_Init+0x6c>)
 81020da:	f043 0302 	orr.w	r3, r3, #2
 81020de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81020e2:	4b15      	ldr	r3, [pc, #84]	@ (8102138 <MX_DMA_Init+0x6c>)
 81020e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81020e8:	f003 0302 	and.w	r3, r3, #2
 81020ec:	607b      	str	r3, [r7, #4]
 81020ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 81020f0:	4b11      	ldr	r3, [pc, #68]	@ (8102138 <MX_DMA_Init+0x6c>)
 81020f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81020f6:	4a10      	ldr	r2, [pc, #64]	@ (8102138 <MX_DMA_Init+0x6c>)
 81020f8:	f043 0301 	orr.w	r3, r3, #1
 81020fc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102100:	4b0d      	ldr	r3, [pc, #52]	@ (8102138 <MX_DMA_Init+0x6c>)
 8102102:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102106:	f003 0301 	and.w	r3, r3, #1
 810210a:	603b      	str	r3, [r7, #0]
 810210c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 810210e:	f7ff fac1 	bl	8101694 <__NVIC_GetPriorityGrouping>
 8102112:	4603      	mov	r3, r0
 8102114:	2200      	movs	r2, #0
 8102116:	2100      	movs	r1, #0
 8102118:	4618      	mov	r0, r3
 810211a:	f7ff fb11 	bl	8101740 <NVIC_EncodePriority>
 810211e:	4603      	mov	r3, r0
 8102120:	4619      	mov	r1, r3
 8102122:	2038      	movs	r0, #56	@ 0x38
 8102124:	f7ff fae2 	bl	81016ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8102128:	2038      	movs	r0, #56	@ 0x38
 810212a:	f7ff fac1 	bl	81016b0 <__NVIC_EnableIRQ>

}
 810212e:	bf00      	nop
 8102130:	3708      	adds	r7, #8
 8102132:	46bd      	mov	sp, r7
 8102134:	bd80      	pop	{r7, pc}
 8102136:	bf00      	nop
 8102138:	58024400 	.word	0x58024400

0810213c <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 810213c:	b480      	push	{r7}
 810213e:	b083      	sub	sp, #12
 8102140:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8102142:	4b0a      	ldr	r3, [pc, #40]	@ (810216c <MX_MDMA_Init+0x30>)
 8102144:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8102148:	4a08      	ldr	r2, [pc, #32]	@ (810216c <MX_MDMA_Init+0x30>)
 810214a:	f043 0301 	orr.w	r3, r3, #1
 810214e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8102152:	4b06      	ldr	r3, [pc, #24]	@ (810216c <MX_MDMA_Init+0x30>)
 8102154:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8102158:	f003 0301 	and.w	r3, r3, #1
 810215c:	607b      	str	r3, [r7, #4]
 810215e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8102160:	bf00      	nop
 8102162:	370c      	adds	r7, #12
 8102164:	46bd      	mov	sp, r7
 8102166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810216a:	4770      	bx	lr
 810216c:	58024400 	.word	0x58024400

08102170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8102170:	b580      	push	{r7, lr}
 8102172:	b086      	sub	sp, #24
 8102174:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102176:	463b      	mov	r3, r7
 8102178:	2200      	movs	r2, #0
 810217a:	601a      	str	r2, [r3, #0]
 810217c:	605a      	str	r2, [r3, #4]
 810217e:	609a      	str	r2, [r3, #8]
 8102180:	60da      	str	r2, [r3, #12]
 8102182:	611a      	str	r2, [r3, #16]
 8102184:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8102186:	2004      	movs	r0, #4
 8102188:	f7ff fc40 	bl	8101a0c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 810218c:	2001      	movs	r0, #1
 810218e:	f7ff fc3d 	bl	8101a0c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8102192:	2002      	movs	r0, #2
 8102194:	f7ff fc3a 	bl	8101a0c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 8102198:	2008      	movs	r0, #8
 810219a:	f7ff fc37 	bl	8101a0c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 810219e:	2040      	movs	r0, #64	@ 0x40
 81021a0:	f7ff fc34 	bl	8101a0c <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, MCU_IO_DEBUG_LED2_Pin|MCU_IO_DEBUG_LED3_Pin);
 81021a4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 81021a8:	480b      	ldr	r0, [pc, #44]	@ (81021d8 <MX_GPIO_Init+0x68>)
 81021aa:	f7ff fc20 	bl	81019ee <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MCU_IO_DEBUG_LED2_Pin|MCU_IO_DEBUG_LED3_Pin;
 81021ae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 81021b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 81021b4:	2301      	movs	r3, #1
 81021b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 81021b8:	2300      	movs	r3, #0
 81021ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 81021bc:	2300      	movs	r3, #0
 81021be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 81021c0:	2300      	movs	r3, #0
 81021c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81021c4:	463b      	mov	r3, r7
 81021c6:	4619      	mov	r1, r3
 81021c8:	4803      	ldr	r0, [pc, #12]	@ (81021d8 <MX_GPIO_Init+0x68>)
 81021ca:	f006 fe5b 	bl	8108e84 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81021ce:	bf00      	nop
 81021d0:	3718      	adds	r7, #24
 81021d2:	46bd      	mov	sp, r7
 81021d4:	bd80      	pop	{r7, pc}
 81021d6:	bf00      	nop
 81021d8:	58020c00 	.word	0x58020c00

081021dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81021dc:	b580      	push	{r7, lr}
 81021de:	b082      	sub	sp, #8
 81021e0:	af00      	add	r7, sp, #0
 81021e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 81021e4:	687b      	ldr	r3, [r7, #4]
 81021e6:	681b      	ldr	r3, [r3, #0]
 81021e8:	4a04      	ldr	r2, [pc, #16]	@ (81021fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 81021ea:	4293      	cmp	r3, r2
 81021ec:	d101      	bne.n	81021f2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 81021ee:	f000 fbc5 	bl	810297c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81021f2:	bf00      	nop
 81021f4:	3708      	adds	r7, #8
 81021f6:	46bd      	mov	sp, r7
 81021f8:	bd80      	pop	{r7, pc}
 81021fa:	bf00      	nop
 81021fc:	40000800 	.word	0x40000800

08102200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102200:	b480      	push	{r7}
 8102202:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8102204:	b672      	cpsid	i
}
 8102206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102208:	bf00      	nop
 810220a:	e7fd      	b.n	8102208 <Error_Handler+0x8>

0810220c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810220c:	b480      	push	{r7}
 810220e:	b083      	sub	sp, #12
 8102210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102212:	4b0a      	ldr	r3, [pc, #40]	@ (810223c <HAL_MspInit+0x30>)
 8102214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102218:	4a08      	ldr	r2, [pc, #32]	@ (810223c <HAL_MspInit+0x30>)
 810221a:	f043 0302 	orr.w	r3, r3, #2
 810221e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102222:	4b06      	ldr	r3, [pc, #24]	@ (810223c <HAL_MspInit+0x30>)
 8102224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102228:	f003 0302 	and.w	r3, r3, #2
 810222c:	607b      	str	r3, [r7, #4]
 810222e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102230:	bf00      	nop
 8102232:	370c      	adds	r7, #12
 8102234:	46bd      	mov	sp, r7
 8102236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810223a:	4770      	bx	lr
 810223c:	58024400 	.word	0x58024400

08102240 <HAL_MMC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8102240:	b580      	push	{r7, lr}
 8102242:	b0be      	sub	sp, #248	@ 0xf8
 8102244:	af00      	add	r7, sp, #0
 8102246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102248:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810224c:	2200      	movs	r2, #0
 810224e:	601a      	str	r2, [r3, #0]
 8102250:	605a      	str	r2, [r3, #4]
 8102252:	609a      	str	r2, [r3, #8]
 8102254:	60da      	str	r2, [r3, #12]
 8102256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102258:	f107 0320 	add.w	r3, r7, #32
 810225c:	22c0      	movs	r2, #192	@ 0xc0
 810225e:	2100      	movs	r1, #0
 8102260:	4618      	mov	r0, r3
 8102262:	f00c fc3d 	bl	810eae0 <memset>
  if(hmmc->Instance==SDMMC2)
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	681b      	ldr	r3, [r3, #0]
 810226a:	4a61      	ldr	r2, [pc, #388]	@ (81023f0 <HAL_MMC_MspInit+0x1b0>)
 810226c:	4293      	cmp	r3, r2
 810226e:	f040 80bb 	bne.w	81023e8 <HAL_MMC_MspInit+0x1a8>

    /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8102272:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8102276:	f04f 0300 	mov.w	r3, #0
 810227a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 810227e:	2300      	movs	r3, #0
 8102280:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102282:	f107 0320 	add.w	r3, r7, #32
 8102286:	4618      	mov	r0, r3
 8102288:	f003 fd5c 	bl	8105d44 <HAL_RCCEx_PeriphCLKConfig>
 810228c:	4603      	mov	r3, r0
 810228e:	2b00      	cmp	r3, #0
 8102290:	d001      	beq.n	8102296 <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 8102292:	f7ff ffb5 	bl	8102200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8102296:	4b57      	ldr	r3, [pc, #348]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 8102298:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 810229c:	4a55      	ldr	r2, [pc, #340]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 810229e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81022a2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 81022a6:	4b53      	ldr	r3, [pc, #332]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 81022a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 81022ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81022b0:	61fb      	str	r3, [r7, #28]
 81022b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 81022b4:	4b4f      	ldr	r3, [pc, #316]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 81022b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022ba:	4a4e      	ldr	r2, [pc, #312]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 81022bc:	f043 0304 	orr.w	r3, r3, #4
 81022c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81022c4:	4b4b      	ldr	r3, [pc, #300]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 81022c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022ca:	f003 0304 	and.w	r3, r3, #4
 81022ce:	61bb      	str	r3, [r7, #24]
 81022d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81022d2:	4b48      	ldr	r3, [pc, #288]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 81022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022d8:	4a46      	ldr	r2, [pc, #280]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 81022da:	f043 0301 	orr.w	r3, r3, #1
 81022de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81022e2:	4b44      	ldr	r3, [pc, #272]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 81022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022e8:	f003 0301 	and.w	r3, r3, #1
 81022ec:	617b      	str	r3, [r7, #20]
 81022ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81022f0:	4b40      	ldr	r3, [pc, #256]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 81022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022f6:	4a3f      	ldr	r2, [pc, #252]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 81022f8:	f043 0302 	orr.w	r3, r3, #2
 81022fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102300:	4b3c      	ldr	r3, [pc, #240]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 8102302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102306:	f003 0302 	and.w	r3, r3, #2
 810230a:	613b      	str	r3, [r7, #16]
 810230c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 810230e:	4b39      	ldr	r3, [pc, #228]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 8102310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102314:	4a37      	ldr	r2, [pc, #220]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 8102316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810231a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810231e:	4b35      	ldr	r3, [pc, #212]	@ (81023f4 <HAL_MMC_MspInit+0x1b4>)
 8102320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102328:	60fb      	str	r3, [r7, #12]
 810232a:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> SDMMC2_D0
    PB15     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PB4 (NJTRST)     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 810232c:	2302      	movs	r3, #2
 810232e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102332:	2302      	movs	r3, #2
 8102334:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102338:	2300      	movs	r3, #0
 810233a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810233e:	2303      	movs	r3, #3
 8102340:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8102344:	2309      	movs	r3, #9
 8102346:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810234a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810234e:	4619      	mov	r1, r3
 8102350:	4829      	ldr	r0, [pc, #164]	@ (81023f8 <HAL_MMC_MspInit+0x1b8>)
 8102352:	f000 fc49 	bl	8102be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8102356:	2301      	movs	r3, #1
 8102358:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810235c:	2302      	movs	r3, #2
 810235e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102362:	2300      	movs	r3, #0
 8102364:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102368:	2303      	movs	r3, #3
 810236a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 810236e:	2309      	movs	r3, #9
 8102370:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102374:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8102378:	4619      	mov	r1, r3
 810237a:	4820      	ldr	r0, [pc, #128]	@ (81023fc <HAL_MMC_MspInit+0x1bc>)
 810237c:	f000 fc34 	bl	8102be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4;
 8102380:	f24c 0310 	movw	r3, #49168	@ 0xc010
 8102384:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102388:	2302      	movs	r3, #2
 810238a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810238e:	2300      	movs	r3, #0
 8102390:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102394:	2303      	movs	r3, #3
 8102396:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 810239a:	2309      	movs	r3, #9
 810239c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81023a0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81023a4:	4619      	mov	r1, r3
 81023a6:	4816      	ldr	r0, [pc, #88]	@ (8102400 <HAL_MMC_MspInit+0x1c0>)
 81023a8:	f000 fc1e 	bl	8102be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 81023ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81023b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023b4:	2302      	movs	r3, #2
 81023b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023ba:	2300      	movs	r3, #0
 81023bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81023c0:	2303      	movs	r3, #3
 81023c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDIO2;
 81023c6:	230a      	movs	r3, #10
 81023c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81023cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81023d0:	4619      	mov	r1, r3
 81023d2:	480c      	ldr	r0, [pc, #48]	@ (8102404 <HAL_MMC_MspInit+0x1c4>)
 81023d4:	f000 fc08 	bl	8102be8 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 81023d8:	2200      	movs	r2, #0
 81023da:	2100      	movs	r1, #0
 81023dc:	207c      	movs	r0, #124	@ 0x7c
 81023de:	f000 fbc9 	bl	8102b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 81023e2:	207c      	movs	r0, #124	@ 0x7c
 81023e4:	f000 fbe0 	bl	8102ba8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC2_MspInit 1 */

  }

}
 81023e8:	bf00      	nop
 81023ea:	37f8      	adds	r7, #248	@ 0xf8
 81023ec:	46bd      	mov	sp, r7
 81023ee:	bd80      	pop	{r7, pc}
 81023f0:	48022400 	.word	0x48022400
 81023f4:	58024400 	.word	0x58024400
 81023f8:	58020800 	.word	0x58020800
 81023fc:	58020000 	.word	0x58020000
 8102400:	58020400 	.word	0x58020400
 8102404:	58021800 	.word	0x58021800

08102408 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102408:	b580      	push	{r7, lr}
 810240a:	b090      	sub	sp, #64	@ 0x40
 810240c:	af00      	add	r7, sp, #0
 810240e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	2b0f      	cmp	r3, #15
 8102414:	d827      	bhi.n	8102466 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8102416:	2200      	movs	r2, #0
 8102418:	6879      	ldr	r1, [r7, #4]
 810241a:	201e      	movs	r0, #30
 810241c:	f000 fbaa 	bl	8102b74 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8102420:	201e      	movs	r0, #30
 8102422:	f000 fbc1 	bl	8102ba8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8102426:	4a29      	ldr	r2, [pc, #164]	@ (81024cc <HAL_InitTick+0xc4>)
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 810242c:	4b28      	ldr	r3, [pc, #160]	@ (81024d0 <HAL_InitTick+0xc8>)
 810242e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102432:	4a27      	ldr	r2, [pc, #156]	@ (81024d0 <HAL_InitTick+0xc8>)
 8102434:	f043 0304 	orr.w	r3, r3, #4
 8102438:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810243c:	4b24      	ldr	r3, [pc, #144]	@ (81024d0 <HAL_InitTick+0xc8>)
 810243e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102442:	f003 0304 	and.w	r3, r3, #4
 8102446:	60fb      	str	r3, [r7, #12]
 8102448:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810244a:	f107 0210 	add.w	r2, r7, #16
 810244e:	f107 0314 	add.w	r3, r7, #20
 8102452:	4611      	mov	r1, r2
 8102454:	4618      	mov	r0, r3
 8102456:	f003 fc33 	bl	8105cc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810245c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 810245e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102460:	2b00      	cmp	r3, #0
 8102462:	d106      	bne.n	8102472 <HAL_InitTick+0x6a>
 8102464:	e001      	b.n	810246a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8102466:	2301      	movs	r3, #1
 8102468:	e02b      	b.n	81024c2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810246a:	f003 fc13 	bl	8105c94 <HAL_RCC_GetPCLK1Freq>
 810246e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8102470:	e004      	b.n	810247c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8102472:	f003 fc0f 	bl	8105c94 <HAL_RCC_GetPCLK1Freq>
 8102476:	4603      	mov	r3, r0
 8102478:	005b      	lsls	r3, r3, #1
 810247a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 810247c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810247e:	4a15      	ldr	r2, [pc, #84]	@ (81024d4 <HAL_InitTick+0xcc>)
 8102480:	fba2 2303 	umull	r2, r3, r2, r3
 8102484:	0c9b      	lsrs	r3, r3, #18
 8102486:	3b01      	subs	r3, #1
 8102488:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 810248a:	4b13      	ldr	r3, [pc, #76]	@ (81024d8 <HAL_InitTick+0xd0>)
 810248c:	4a13      	ldr	r2, [pc, #76]	@ (81024dc <HAL_InitTick+0xd4>)
 810248e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8102490:	4b11      	ldr	r3, [pc, #68]	@ (81024d8 <HAL_InitTick+0xd0>)
 8102492:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8102496:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8102498:	4a0f      	ldr	r2, [pc, #60]	@ (81024d8 <HAL_InitTick+0xd0>)
 810249a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810249c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 810249e:	4b0e      	ldr	r3, [pc, #56]	@ (81024d8 <HAL_InitTick+0xd0>)
 81024a0:	2200      	movs	r2, #0
 81024a2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81024a4:	4b0c      	ldr	r3, [pc, #48]	@ (81024d8 <HAL_InitTick+0xd0>)
 81024a6:	2200      	movs	r2, #0
 81024a8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 81024aa:	480b      	ldr	r0, [pc, #44]	@ (81024d8 <HAL_InitTick+0xd0>)
 81024ac:	f006 f948 	bl	8108740 <HAL_TIM_Base_Init>
 81024b0:	4603      	mov	r3, r0
 81024b2:	2b00      	cmp	r3, #0
 81024b4:	d104      	bne.n	81024c0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 81024b6:	4808      	ldr	r0, [pc, #32]	@ (81024d8 <HAL_InitTick+0xd0>)
 81024b8:	f006 f9a4 	bl	8108804 <HAL_TIM_Base_Start_IT>
 81024bc:	4603      	mov	r3, r0
 81024be:	e000      	b.n	81024c2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81024c0:	2301      	movs	r3, #1
}
 81024c2:	4618      	mov	r0, r3
 81024c4:	3740      	adds	r7, #64	@ 0x40
 81024c6:	46bd      	mov	sp, r7
 81024c8:	bd80      	pop	{r7, pc}
 81024ca:	bf00      	nop
 81024cc:	100320f8 	.word	0x100320f8
 81024d0:	58024400 	.word	0x58024400
 81024d4:	431bde83 	.word	0x431bde83
 81024d8:	10034f44 	.word	0x10034f44
 81024dc:	40000800 	.word	0x40000800

081024e0 <LL_USART_IsActiveFlag_IDLE>:
{
 81024e0:	b480      	push	{r7}
 81024e2:	b083      	sub	sp, #12
 81024e4:	af00      	add	r7, sp, #0
 81024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 81024e8:	687b      	ldr	r3, [r7, #4]
 81024ea:	69db      	ldr	r3, [r3, #28]
 81024ec:	f003 0310 	and.w	r3, r3, #16
 81024f0:	2b10      	cmp	r3, #16
 81024f2:	d101      	bne.n	81024f8 <LL_USART_IsActiveFlag_IDLE+0x18>
 81024f4:	2301      	movs	r3, #1
 81024f6:	e000      	b.n	81024fa <LL_USART_IsActiveFlag_IDLE+0x1a>
 81024f8:	2300      	movs	r3, #0
}
 81024fa:	4618      	mov	r0, r3
 81024fc:	370c      	adds	r7, #12
 81024fe:	46bd      	mov	sp, r7
 8102500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102504:	4770      	bx	lr

08102506 <LL_USART_ClearFlag_IDLE>:
{
 8102506:	b480      	push	{r7}
 8102508:	b083      	sub	sp, #12
 810250a:	af00      	add	r7, sp, #0
 810250c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	2210      	movs	r2, #16
 8102512:	621a      	str	r2, [r3, #32]
}
 8102514:	bf00      	nop
 8102516:	370c      	adds	r7, #12
 8102518:	46bd      	mov	sp, r7
 810251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810251e:	4770      	bx	lr

08102520 <LL_USART_IsEnabledIT_IDLE>:
{
 8102520:	b480      	push	{r7}
 8102522:	b083      	sub	sp, #12
 8102524:	af00      	add	r7, sp, #0
 8102526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	f003 0310 	and.w	r3, r3, #16
 8102530:	2b10      	cmp	r3, #16
 8102532:	d101      	bne.n	8102538 <LL_USART_IsEnabledIT_IDLE+0x18>
 8102534:	2301      	movs	r3, #1
 8102536:	e000      	b.n	810253a <LL_USART_IsEnabledIT_IDLE+0x1a>
 8102538:	2300      	movs	r3, #0
}
 810253a:	4618      	mov	r0, r3
 810253c:	370c      	adds	r7, #12
 810253e:	46bd      	mov	sp, r7
 8102540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102544:	4770      	bx	lr
	...

08102548 <LL_DMA_EnableStream>:
{
 8102548:	b480      	push	{r7}
 810254a:	b085      	sub	sp, #20
 810254c:	af00      	add	r7, sp, #0
 810254e:	6078      	str	r0, [r7, #4]
 8102550:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8102556:	4a0c      	ldr	r2, [pc, #48]	@ (8102588 <LL_DMA_EnableStream+0x40>)
 8102558:	683b      	ldr	r3, [r7, #0]
 810255a:	4413      	add	r3, r2
 810255c:	781b      	ldrb	r3, [r3, #0]
 810255e:	461a      	mov	r2, r3
 8102560:	68fb      	ldr	r3, [r7, #12]
 8102562:	4413      	add	r3, r2
 8102564:	681b      	ldr	r3, [r3, #0]
 8102566:	4908      	ldr	r1, [pc, #32]	@ (8102588 <LL_DMA_EnableStream+0x40>)
 8102568:	683a      	ldr	r2, [r7, #0]
 810256a:	440a      	add	r2, r1
 810256c:	7812      	ldrb	r2, [r2, #0]
 810256e:	4611      	mov	r1, r2
 8102570:	68fa      	ldr	r2, [r7, #12]
 8102572:	440a      	add	r2, r1
 8102574:	f043 0301 	orr.w	r3, r3, #1
 8102578:	6013      	str	r3, [r2, #0]
}
 810257a:	bf00      	nop
 810257c:	3714      	adds	r7, #20
 810257e:	46bd      	mov	sp, r7
 8102580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102584:	4770      	bx	lr
 8102586:	bf00      	nop
 8102588:	0810ec38 	.word	0x0810ec38

0810258c <LL_DMA_IsActiveFlag_HT0>:
{
 810258c:	b480      	push	{r7}
 810258e:	b083      	sub	sp, #12
 8102590:	af00      	add	r7, sp, #0
 8102592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	681b      	ldr	r3, [r3, #0]
 8102598:	f003 0310 	and.w	r3, r3, #16
 810259c:	2b10      	cmp	r3, #16
 810259e:	d101      	bne.n	81025a4 <LL_DMA_IsActiveFlag_HT0+0x18>
 81025a0:	2301      	movs	r3, #1
 81025a2:	e000      	b.n	81025a6 <LL_DMA_IsActiveFlag_HT0+0x1a>
 81025a4:	2300      	movs	r3, #0
}
 81025a6:	4618      	mov	r0, r3
 81025a8:	370c      	adds	r7, #12
 81025aa:	46bd      	mov	sp, r7
 81025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025b0:	4770      	bx	lr

081025b2 <LL_DMA_IsActiveFlag_TC0>:
{
 81025b2:	b480      	push	{r7}
 81025b4:	b083      	sub	sp, #12
 81025b6:	af00      	add	r7, sp, #0
 81025b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	681b      	ldr	r3, [r3, #0]
 81025be:	f003 0320 	and.w	r3, r3, #32
 81025c2:	2b20      	cmp	r3, #32
 81025c4:	d101      	bne.n	81025ca <LL_DMA_IsActiveFlag_TC0+0x18>
 81025c6:	2301      	movs	r3, #1
 81025c8:	e000      	b.n	81025cc <LL_DMA_IsActiveFlag_TC0+0x1a>
 81025ca:	2300      	movs	r3, #0
}
 81025cc:	4618      	mov	r0, r3
 81025ce:	370c      	adds	r7, #12
 81025d0:	46bd      	mov	sp, r7
 81025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025d6:	4770      	bx	lr

081025d8 <LL_DMA_IsActiveFlag_TE0>:
{
 81025d8:	b480      	push	{r7}
 81025da:	b083      	sub	sp, #12
 81025dc:	af00      	add	r7, sp, #0
 81025de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TEIF0) == (DMA_LISR_TEIF0)) ? 1UL : 0UL);
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	681b      	ldr	r3, [r3, #0]
 81025e4:	f003 0308 	and.w	r3, r3, #8
 81025e8:	2b08      	cmp	r3, #8
 81025ea:	d101      	bne.n	81025f0 <LL_DMA_IsActiveFlag_TE0+0x18>
 81025ec:	2301      	movs	r3, #1
 81025ee:	e000      	b.n	81025f2 <LL_DMA_IsActiveFlag_TE0+0x1a>
 81025f0:	2300      	movs	r3, #0
}
 81025f2:	4618      	mov	r0, r3
 81025f4:	370c      	adds	r7, #12
 81025f6:	46bd      	mov	sp, r7
 81025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025fc:	4770      	bx	lr

081025fe <LL_DMA_ClearFlag_HT0>:
{
 81025fe:	b480      	push	{r7}
 8102600:	b083      	sub	sp, #12
 8102602:	af00      	add	r7, sp, #0
 8102604:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8102606:	687b      	ldr	r3, [r7, #4]
 8102608:	2210      	movs	r2, #16
 810260a:	609a      	str	r2, [r3, #8]
}
 810260c:	bf00      	nop
 810260e:	370c      	adds	r7, #12
 8102610:	46bd      	mov	sp, r7
 8102612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102616:	4770      	bx	lr

08102618 <LL_DMA_ClearFlag_TC0>:
{
 8102618:	b480      	push	{r7}
 810261a:	b083      	sub	sp, #12
 810261c:	af00      	add	r7, sp, #0
 810261e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8102620:	687b      	ldr	r3, [r7, #4]
 8102622:	2220      	movs	r2, #32
 8102624:	609a      	str	r2, [r3, #8]
}
 8102626:	bf00      	nop
 8102628:	370c      	adds	r7, #12
 810262a:	46bd      	mov	sp, r7
 810262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102630:	4770      	bx	lr

08102632 <LL_DMA_ClearFlag_TE0>:
{
 8102632:	b480      	push	{r7}
 8102634:	b083      	sub	sp, #12
 8102636:	af00      	add	r7, sp, #0
 8102638:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTEIF0);
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	2208      	movs	r2, #8
 810263e:	609a      	str	r2, [r3, #8]
}
 8102640:	bf00      	nop
 8102642:	370c      	adds	r7, #12
 8102644:	46bd      	mov	sp, r7
 8102646:	f85d 7b04 	ldr.w	r7, [sp], #4
 810264a:	4770      	bx	lr

0810264c <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 810264c:	b480      	push	{r7}
 810264e:	b085      	sub	sp, #20
 8102650:	af00      	add	r7, sp, #0
 8102652:	6078      	str	r0, [r7, #4]
 8102654:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE) == DMA_SxCR_HTIE) ? 1UL : 0UL);
 810265a:	4a0a      	ldr	r2, [pc, #40]	@ (8102684 <LL_DMA_IsEnabledIT_HT+0x38>)
 810265c:	683b      	ldr	r3, [r7, #0]
 810265e:	4413      	add	r3, r2
 8102660:	781b      	ldrb	r3, [r3, #0]
 8102662:	461a      	mov	r2, r3
 8102664:	68fb      	ldr	r3, [r7, #12]
 8102666:	4413      	add	r3, r2
 8102668:	681b      	ldr	r3, [r3, #0]
 810266a:	f003 0308 	and.w	r3, r3, #8
 810266e:	2b08      	cmp	r3, #8
 8102670:	d101      	bne.n	8102676 <LL_DMA_IsEnabledIT_HT+0x2a>
 8102672:	2301      	movs	r3, #1
 8102674:	e000      	b.n	8102678 <LL_DMA_IsEnabledIT_HT+0x2c>
 8102676:	2300      	movs	r3, #0
}
 8102678:	4618      	mov	r0, r3
 810267a:	3714      	adds	r7, #20
 810267c:	46bd      	mov	sp, r7
 810267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102682:	4770      	bx	lr
 8102684:	0810ec38 	.word	0x0810ec38

08102688 <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8102688:	b480      	push	{r7}
 810268a:	b085      	sub	sp, #20
 810268c:	af00      	add	r7, sp, #0
 810268e:	6078      	str	r0, [r7, #4]
 8102690:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE) == DMA_SxCR_TEIE) ? 1UL : 0UL);
 8102696:	4a0a      	ldr	r2, [pc, #40]	@ (81026c0 <LL_DMA_IsEnabledIT_TE+0x38>)
 8102698:	683b      	ldr	r3, [r7, #0]
 810269a:	4413      	add	r3, r2
 810269c:	781b      	ldrb	r3, [r3, #0]
 810269e:	461a      	mov	r2, r3
 81026a0:	68fb      	ldr	r3, [r7, #12]
 81026a2:	4413      	add	r3, r2
 81026a4:	681b      	ldr	r3, [r3, #0]
 81026a6:	f003 0304 	and.w	r3, r3, #4
 81026aa:	2b04      	cmp	r3, #4
 81026ac:	d101      	bne.n	81026b2 <LL_DMA_IsEnabledIT_TE+0x2a>
 81026ae:	2301      	movs	r3, #1
 81026b0:	e000      	b.n	81026b4 <LL_DMA_IsEnabledIT_TE+0x2c>
 81026b2:	2300      	movs	r3, #0
}
 81026b4:	4618      	mov	r0, r3
 81026b6:	3714      	adds	r7, #20
 81026b8:	46bd      	mov	sp, r7
 81026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026be:	4770      	bx	lr
 81026c0:	0810ec38 	.word	0x0810ec38

081026c4 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 81026c4:	b480      	push	{r7}
 81026c6:	b085      	sub	sp, #20
 81026c8:	af00      	add	r7, sp, #0
 81026ca:	6078      	str	r0, [r7, #4]
 81026cc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE) ? 1UL : 0UL);
 81026d2:	4a0a      	ldr	r2, [pc, #40]	@ (81026fc <LL_DMA_IsEnabledIT_TC+0x38>)
 81026d4:	683b      	ldr	r3, [r7, #0]
 81026d6:	4413      	add	r3, r2
 81026d8:	781b      	ldrb	r3, [r3, #0]
 81026da:	461a      	mov	r2, r3
 81026dc:	68fb      	ldr	r3, [r7, #12]
 81026de:	4413      	add	r3, r2
 81026e0:	681b      	ldr	r3, [r3, #0]
 81026e2:	f003 0310 	and.w	r3, r3, #16
 81026e6:	2b10      	cmp	r3, #16
 81026e8:	d101      	bne.n	81026ee <LL_DMA_IsEnabledIT_TC+0x2a>
 81026ea:	2301      	movs	r3, #1
 81026ec:	e000      	b.n	81026f0 <LL_DMA_IsEnabledIT_TC+0x2c>
 81026ee:	2300      	movs	r3, #0
}
 81026f0:	4618      	mov	r0, r3
 81026f2:	3714      	adds	r7, #20
 81026f4:	46bd      	mov	sp, r7
 81026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026fa:	4770      	bx	lr
 81026fc:	0810ec38 	.word	0x0810ec38

08102700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102700:	b480      	push	{r7}
 8102702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102704:	bf00      	nop
 8102706:	e7fd      	b.n	8102704 <NMI_Handler+0x4>

08102708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102708:	b480      	push	{r7}
 810270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810270c:	bf00      	nop
 810270e:	e7fd      	b.n	810270c <HardFault_Handler+0x4>

08102710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102710:	b480      	push	{r7}
 8102712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102714:	bf00      	nop
 8102716:	e7fd      	b.n	8102714 <MemManage_Handler+0x4>

08102718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102718:	b480      	push	{r7}
 810271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810271c:	bf00      	nop
 810271e:	e7fd      	b.n	810271c <BusFault_Handler+0x4>

08102720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102720:	b480      	push	{r7}
 8102722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102724:	bf00      	nop
 8102726:	e7fd      	b.n	8102724 <UsageFault_Handler+0x4>

08102728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102728:	b480      	push	{r7}
 810272a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810272c:	bf00      	nop
 810272e:	46bd      	mov	sp, r7
 8102730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102734:	4770      	bx	lr

08102736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102736:	b480      	push	{r7}
 8102738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810273a:	bf00      	nop
 810273c:	46bd      	mov	sp, r7
 810273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102742:	4770      	bx	lr

08102744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102744:	b480      	push	{r7}
 8102746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102748:	bf00      	nop
 810274a:	46bd      	mov	sp, r7
 810274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102750:	4770      	bx	lr

08102752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102752:	b480      	push	{r7}
 8102754:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102756:	bf00      	nop
 8102758:	46bd      	mov	sp, r7
 810275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810275e:	4770      	bx	lr

08102760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8102760:	b580      	push	{r7, lr}
 8102762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  TickTimer_IRQHandler();
 8102764:	f7fe ff4e 	bl	8101604 <TickTimer_IRQHandler>
  SCH_RunSystemTickTimer();
 8102768:	f7fd fe58 	bl	810041c <SCH_RunSystemTickTimer>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810276c:	bf00      	nop
 810276e:	bd80      	pop	{r7, pc}

08102770 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8102770:	b580      	push	{r7, lr}
 8102772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8102774:	4802      	ldr	r0, [pc, #8]	@ (8102780 <TIM4_IRQHandler+0x10>)
 8102776:	f006 f8bd 	bl	81088f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 810277a:	bf00      	nop
 810277c:	bd80      	pop	{r7, pc}
 810277e:	bf00      	nop
 8102780:	10034f44 	.word	0x10034f44

08102784 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8102784:	b580      	push	{r7, lr}
 8102786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA2, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_HT0(DMA2))
 8102788:	2100      	movs	r1, #0
 810278a:	481d      	ldr	r0, [pc, #116]	@ (8102800 <DMA2_Stream0_IRQHandler+0x7c>)
 810278c:	f7ff ff5e 	bl	810264c <LL_DMA_IsEnabledIT_HT>
 8102790:	4603      	mov	r3, r0
 8102792:	2b00      	cmp	r3, #0
 8102794:	d00b      	beq.n	81027ae <DMA2_Stream0_IRQHandler+0x2a>
 8102796:	481a      	ldr	r0, [pc, #104]	@ (8102800 <DMA2_Stream0_IRQHandler+0x7c>)
 8102798:	f7ff fef8 	bl	810258c <LL_DMA_IsActiveFlag_HT0>
 810279c:	4603      	mov	r3, r0
 810279e:	2b00      	cmp	r3, #0
 81027a0:	d005      	beq.n	81027ae <DMA2_Stream0_IRQHandler+0x2a>
  {
	  LL_DMA_ClearFlag_HT0(DMA2);
 81027a2:	4817      	ldr	r0, [pc, #92]	@ (8102800 <DMA2_Stream0_IRQHandler+0x7c>)
 81027a4:	f7ff ff2b 	bl	81025fe <LL_DMA_ClearFlag_HT0>
	  UART_DMA_Rx_Check(USART6);
 81027a8:	4816      	ldr	r0, [pc, #88]	@ (8102804 <DMA2_Stream0_IRQHandler+0x80>)
 81027aa:	f7fe fc8d 	bl	81010c8 <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TC(DMA2, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TC0(DMA2))
 81027ae:	2100      	movs	r1, #0
 81027b0:	4813      	ldr	r0, [pc, #76]	@ (8102800 <DMA2_Stream0_IRQHandler+0x7c>)
 81027b2:	f7ff ff87 	bl	81026c4 <LL_DMA_IsEnabledIT_TC>
 81027b6:	4603      	mov	r3, r0
 81027b8:	2b00      	cmp	r3, #0
 81027ba:	d00b      	beq.n	81027d4 <DMA2_Stream0_IRQHandler+0x50>
 81027bc:	4810      	ldr	r0, [pc, #64]	@ (8102800 <DMA2_Stream0_IRQHandler+0x7c>)
 81027be:	f7ff fef8 	bl	81025b2 <LL_DMA_IsActiveFlag_TC0>
 81027c2:	4603      	mov	r3, r0
 81027c4:	2b00      	cmp	r3, #0
 81027c6:	d005      	beq.n	81027d4 <DMA2_Stream0_IRQHandler+0x50>
  {
	  LL_DMA_ClearFlag_TC0(DMA2);
 81027c8:	480d      	ldr	r0, [pc, #52]	@ (8102800 <DMA2_Stream0_IRQHandler+0x7c>)
 81027ca:	f7ff ff25 	bl	8102618 <LL_DMA_ClearFlag_TC0>
	  UART_DMA_Rx_Check(USART6);
 81027ce:	480d      	ldr	r0, [pc, #52]	@ (8102804 <DMA2_Stream0_IRQHandler+0x80>)
 81027d0:	f7fe fc7a 	bl	81010c8 <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA2, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TE0(DMA2))
 81027d4:	2100      	movs	r1, #0
 81027d6:	480a      	ldr	r0, [pc, #40]	@ (8102800 <DMA2_Stream0_IRQHandler+0x7c>)
 81027d8:	f7ff ff56 	bl	8102688 <LL_DMA_IsEnabledIT_TE>
 81027dc:	4603      	mov	r3, r0
 81027de:	2b00      	cmp	r3, #0
 81027e0:	d00c      	beq.n	81027fc <DMA2_Stream0_IRQHandler+0x78>
 81027e2:	4807      	ldr	r0, [pc, #28]	@ (8102800 <DMA2_Stream0_IRQHandler+0x7c>)
 81027e4:	f7ff fef8 	bl	81025d8 <LL_DMA_IsActiveFlag_TE0>
 81027e8:	4603      	mov	r3, r0
 81027ea:	2b00      	cmp	r3, #0
 81027ec:	d006      	beq.n	81027fc <DMA2_Stream0_IRQHandler+0x78>
  {
	  LL_DMA_ClearFlag_TE0(DMA2);
 81027ee:	4804      	ldr	r0, [pc, #16]	@ (8102800 <DMA2_Stream0_IRQHandler+0x7c>)
 81027f0:	f7ff ff1f 	bl	8102632 <LL_DMA_ClearFlag_TE0>
	  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 81027f4:	2100      	movs	r1, #0
 81027f6:	4802      	ldr	r0, [pc, #8]	@ (8102800 <DMA2_Stream0_IRQHandler+0x7c>)
 81027f8:	f7ff fea6 	bl	8102548 <LL_DMA_EnableStream>

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 81027fc:	bf00      	nop
 81027fe:	bd80      	pop	{r7, pc}
 8102800:	40020400 	.word	0x40020400
 8102804:	40011400 	.word	0x40011400

08102808 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8102808:	b580      	push	{r7, lr}
 810280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(USART6) && LL_USART_IsActiveFlag_IDLE(USART6))
 810280c:	480b      	ldr	r0, [pc, #44]	@ (810283c <USART6_IRQHandler+0x34>)
 810280e:	f7ff fe87 	bl	8102520 <LL_USART_IsEnabledIT_IDLE>
 8102812:	4603      	mov	r3, r0
 8102814:	2b00      	cmp	r3, #0
 8102816:	d00b      	beq.n	8102830 <USART6_IRQHandler+0x28>
 8102818:	4808      	ldr	r0, [pc, #32]	@ (810283c <USART6_IRQHandler+0x34>)
 810281a:	f7ff fe61 	bl	81024e0 <LL_USART_IsActiveFlag_IDLE>
 810281e:	4603      	mov	r3, r0
 8102820:	2b00      	cmp	r3, #0
 8102822:	d005      	beq.n	8102830 <USART6_IRQHandler+0x28>
  {
	  LL_USART_ClearFlag_IDLE(USART6);
 8102824:	4805      	ldr	r0, [pc, #20]	@ (810283c <USART6_IRQHandler+0x34>)
 8102826:	f7ff fe6e 	bl	8102506 <LL_USART_ClearFlag_IDLE>
	  UART_DMA_Rx_Check(USART6);
 810282a:	4804      	ldr	r0, [pc, #16]	@ (810283c <USART6_IRQHandler+0x34>)
 810282c:	f7fe fc4c 	bl	81010c8 <UART_DMA_Rx_Check>
  }
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
  UART_Driver_TX_ISR(USART6);
 8102830:	4802      	ldr	r0, [pc, #8]	@ (810283c <USART6_IRQHandler+0x34>)
 8102832:	f7fe fc19 	bl	8101068 <UART_Driver_TX_ISR>
  /* USER CODE END USART6_IRQn 1 */
}
 8102836:	bf00      	nop
 8102838:	bd80      	pop	{r7, pc}
 810283a:	bf00      	nop
 810283c:	40011400 	.word	0x40011400

08102840 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8102840:	b580      	push	{r7, lr}
 8102842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8102844:	4802      	ldr	r0, [pc, #8]	@ (8102850 <OTG_FS_IRQHandler+0x10>)
 8102846:	f001 fe82 	bl	810454e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 810284a:	bf00      	nop
 810284c:	bd80      	pop	{r7, pc}
 810284e:	bf00      	nop
 8102850:	10036478 	.word	0x10036478

08102854 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8102854:	b580      	push	{r7, lr}
 8102856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_MMC_IRQHandler(&hmmc2);
 8102858:	4802      	ldr	r0, [pc, #8]	@ (8102864 <SDMMC2_IRQHandler+0x10>)
 810285a:	f000 fc63 	bl	8103124 <HAL_MMC_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 810285e:	bf00      	nop
 8102860:	bd80      	pop	{r7, pc}
 8102862:	bf00      	nop
 8102864:	10034ccc 	.word	0x10034ccc

08102868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102868:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81028a4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 810286c:	f7fe fef8 	bl	8101660 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8102870:	f7fe fede 	bl	8101630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102874:	480c      	ldr	r0, [pc, #48]	@ (81028a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102876:	490d      	ldr	r1, [pc, #52]	@ (81028ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102878:	4a0d      	ldr	r2, [pc, #52]	@ (81028b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810287a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810287c:	e002      	b.n	8102884 <LoopCopyDataInit>

0810287e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810287e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102882:	3304      	adds	r3, #4

08102884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102888:	d3f9      	bcc.n	810287e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810288a:	4a0a      	ldr	r2, [pc, #40]	@ (81028b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810288c:	4c0a      	ldr	r4, [pc, #40]	@ (81028b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 810288e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102890:	e001      	b.n	8102896 <LoopFillZerobss>

08102892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102894:	3204      	adds	r2, #4

08102896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102898:	d3fb      	bcc.n	8102892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810289a:	f00c f93d 	bl	810eb18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810289e:	f7ff fa67 	bl	8101d70 <main>
  bx  lr
 81028a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81028a4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81028a8:	10032000 	.word	0x10032000
  ldr r1, =_edata
 81028ac:	100321fc 	.word	0x100321fc
  ldr r2, =_sidata
 81028b0:	0810ec88 	.word	0x0810ec88
  ldr r2, =_sbss
 81028b4:	100321fc 	.word	0x100321fc
  ldr r4, =_ebss
 81028b8:	10036b7c 	.word	0x10036b7c

081028bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81028bc:	e7fe      	b.n	81028bc <ADC3_IRQHandler>
	...

081028c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81028c0:	b580      	push	{r7, lr}
 81028c2:	b082      	sub	sp, #8
 81028c4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81028c6:	4b28      	ldr	r3, [pc, #160]	@ (8102968 <HAL_Init+0xa8>)
 81028c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81028cc:	4a26      	ldr	r2, [pc, #152]	@ (8102968 <HAL_Init+0xa8>)
 81028ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81028d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81028d6:	4b24      	ldr	r3, [pc, #144]	@ (8102968 <HAL_Init+0xa8>)
 81028d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81028dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81028e0:	603b      	str	r3, [r7, #0]
 81028e2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81028e4:	4b21      	ldr	r3, [pc, #132]	@ (810296c <HAL_Init+0xac>)
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81028ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81028f0:	4a1e      	ldr	r2, [pc, #120]	@ (810296c <HAL_Init+0xac>)
 81028f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81028f6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81028f8:	4b1c      	ldr	r3, [pc, #112]	@ (810296c <HAL_Init+0xac>)
 81028fa:	681b      	ldr	r3, [r3, #0]
 81028fc:	4a1b      	ldr	r2, [pc, #108]	@ (810296c <HAL_Init+0xac>)
 81028fe:	f043 0301 	orr.w	r3, r3, #1
 8102902:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102904:	2003      	movs	r0, #3
 8102906:	f000 f92a 	bl	8102b5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810290a:	f003 f817 	bl	810593c <HAL_RCC_GetSysClockFreq>
 810290e:	4602      	mov	r2, r0
 8102910:	4b15      	ldr	r3, [pc, #84]	@ (8102968 <HAL_Init+0xa8>)
 8102912:	699b      	ldr	r3, [r3, #24]
 8102914:	0a1b      	lsrs	r3, r3, #8
 8102916:	f003 030f 	and.w	r3, r3, #15
 810291a:	4915      	ldr	r1, [pc, #84]	@ (8102970 <HAL_Init+0xb0>)
 810291c:	5ccb      	ldrb	r3, [r1, r3]
 810291e:	f003 031f 	and.w	r3, r3, #31
 8102922:	fa22 f303 	lsr.w	r3, r2, r3
 8102926:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102928:	4b0f      	ldr	r3, [pc, #60]	@ (8102968 <HAL_Init+0xa8>)
 810292a:	699b      	ldr	r3, [r3, #24]
 810292c:	f003 030f 	and.w	r3, r3, #15
 8102930:	4a0f      	ldr	r2, [pc, #60]	@ (8102970 <HAL_Init+0xb0>)
 8102932:	5cd3      	ldrb	r3, [r2, r3]
 8102934:	f003 031f 	and.w	r3, r3, #31
 8102938:	687a      	ldr	r2, [r7, #4]
 810293a:	fa22 f303 	lsr.w	r3, r2, r3
 810293e:	4a0d      	ldr	r2, [pc, #52]	@ (8102974 <HAL_Init+0xb4>)
 8102940:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102942:	4b0c      	ldr	r3, [pc, #48]	@ (8102974 <HAL_Init+0xb4>)
 8102944:	681b      	ldr	r3, [r3, #0]
 8102946:	4a0c      	ldr	r2, [pc, #48]	@ (8102978 <HAL_Init+0xb8>)
 8102948:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810294a:	200f      	movs	r0, #15
 810294c:	f7ff fd5c 	bl	8102408 <HAL_InitTick>
 8102950:	4603      	mov	r3, r0
 8102952:	2b00      	cmp	r3, #0
 8102954:	d001      	beq.n	810295a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102956:	2301      	movs	r3, #1
 8102958:	e002      	b.n	8102960 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810295a:	f7ff fc57 	bl	810220c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810295e:	2300      	movs	r3, #0
}
 8102960:	4618      	mov	r0, r3
 8102962:	3708      	adds	r7, #8
 8102964:	46bd      	mov	sp, r7
 8102966:	bd80      	pop	{r7, pc}
 8102968:	58024400 	.word	0x58024400
 810296c:	40024400 	.word	0x40024400
 8102970:	0810ec20 	.word	0x0810ec20
 8102974:	100320f4 	.word	0x100320f4
 8102978:	100320f0 	.word	0x100320f0

0810297c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810297c:	b480      	push	{r7}
 810297e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102980:	4b06      	ldr	r3, [pc, #24]	@ (810299c <HAL_IncTick+0x20>)
 8102982:	781b      	ldrb	r3, [r3, #0]
 8102984:	461a      	mov	r2, r3
 8102986:	4b06      	ldr	r3, [pc, #24]	@ (81029a0 <HAL_IncTick+0x24>)
 8102988:	681b      	ldr	r3, [r3, #0]
 810298a:	4413      	add	r3, r2
 810298c:	4a04      	ldr	r2, [pc, #16]	@ (81029a0 <HAL_IncTick+0x24>)
 810298e:	6013      	str	r3, [r2, #0]
}
 8102990:	bf00      	nop
 8102992:	46bd      	mov	sp, r7
 8102994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102998:	4770      	bx	lr
 810299a:	bf00      	nop
 810299c:	100320fc 	.word	0x100320fc
 81029a0:	10034f90 	.word	0x10034f90

081029a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81029a4:	b480      	push	{r7}
 81029a6:	af00      	add	r7, sp, #0
  return uwTick;
 81029a8:	4b03      	ldr	r3, [pc, #12]	@ (81029b8 <HAL_GetTick+0x14>)
 81029aa:	681b      	ldr	r3, [r3, #0]
}
 81029ac:	4618      	mov	r0, r3
 81029ae:	46bd      	mov	sp, r7
 81029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029b4:	4770      	bx	lr
 81029b6:	bf00      	nop
 81029b8:	10034f90 	.word	0x10034f90

081029bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81029bc:	b580      	push	{r7, lr}
 81029be:	b084      	sub	sp, #16
 81029c0:	af00      	add	r7, sp, #0
 81029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81029c4:	f7ff ffee 	bl	81029a4 <HAL_GetTick>
 81029c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81029ce:	68fb      	ldr	r3, [r7, #12]
 81029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81029d4:	d005      	beq.n	81029e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81029d6:	4b0a      	ldr	r3, [pc, #40]	@ (8102a00 <HAL_Delay+0x44>)
 81029d8:	781b      	ldrb	r3, [r3, #0]
 81029da:	461a      	mov	r2, r3
 81029dc:	68fb      	ldr	r3, [r7, #12]
 81029de:	4413      	add	r3, r2
 81029e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81029e2:	bf00      	nop
 81029e4:	f7ff ffde 	bl	81029a4 <HAL_GetTick>
 81029e8:	4602      	mov	r2, r0
 81029ea:	68bb      	ldr	r3, [r7, #8]
 81029ec:	1ad3      	subs	r3, r2, r3
 81029ee:	68fa      	ldr	r2, [r7, #12]
 81029f0:	429a      	cmp	r2, r3
 81029f2:	d8f7      	bhi.n	81029e4 <HAL_Delay+0x28>
  {
  }
}
 81029f4:	bf00      	nop
 81029f6:	bf00      	nop
 81029f8:	3710      	adds	r7, #16
 81029fa:	46bd      	mov	sp, r7
 81029fc:	bd80      	pop	{r7, pc}
 81029fe:	bf00      	nop
 8102a00:	100320fc 	.word	0x100320fc

08102a04 <__NVIC_SetPriorityGrouping>:
{
 8102a04:	b480      	push	{r7}
 8102a06:	b085      	sub	sp, #20
 8102a08:	af00      	add	r7, sp, #0
 8102a0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	f003 0307 	and.w	r3, r3, #7
 8102a12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102a14:	4b0c      	ldr	r3, [pc, #48]	@ (8102a48 <__NVIC_SetPriorityGrouping+0x44>)
 8102a16:	68db      	ldr	r3, [r3, #12]
 8102a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102a1a:	68ba      	ldr	r2, [r7, #8]
 8102a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102a20:	4013      	ands	r3, r2
 8102a22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102a24:	68fb      	ldr	r3, [r7, #12]
 8102a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102a28:	68bb      	ldr	r3, [r7, #8]
 8102a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102a36:	4a04      	ldr	r2, [pc, #16]	@ (8102a48 <__NVIC_SetPriorityGrouping+0x44>)
 8102a38:	68bb      	ldr	r3, [r7, #8]
 8102a3a:	60d3      	str	r3, [r2, #12]
}
 8102a3c:	bf00      	nop
 8102a3e:	3714      	adds	r7, #20
 8102a40:	46bd      	mov	sp, r7
 8102a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a46:	4770      	bx	lr
 8102a48:	e000ed00 	.word	0xe000ed00

08102a4c <__NVIC_GetPriorityGrouping>:
{
 8102a4c:	b480      	push	{r7}
 8102a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102a50:	4b04      	ldr	r3, [pc, #16]	@ (8102a64 <__NVIC_GetPriorityGrouping+0x18>)
 8102a52:	68db      	ldr	r3, [r3, #12]
 8102a54:	0a1b      	lsrs	r3, r3, #8
 8102a56:	f003 0307 	and.w	r3, r3, #7
}
 8102a5a:	4618      	mov	r0, r3
 8102a5c:	46bd      	mov	sp, r7
 8102a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a62:	4770      	bx	lr
 8102a64:	e000ed00 	.word	0xe000ed00

08102a68 <__NVIC_EnableIRQ>:
{
 8102a68:	b480      	push	{r7}
 8102a6a:	b083      	sub	sp, #12
 8102a6c:	af00      	add	r7, sp, #0
 8102a6e:	4603      	mov	r3, r0
 8102a70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102a76:	2b00      	cmp	r3, #0
 8102a78:	db0b      	blt.n	8102a92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102a7a:	88fb      	ldrh	r3, [r7, #6]
 8102a7c:	f003 021f 	and.w	r2, r3, #31
 8102a80:	4907      	ldr	r1, [pc, #28]	@ (8102aa0 <__NVIC_EnableIRQ+0x38>)
 8102a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102a86:	095b      	lsrs	r3, r3, #5
 8102a88:	2001      	movs	r0, #1
 8102a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8102a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8102a92:	bf00      	nop
 8102a94:	370c      	adds	r7, #12
 8102a96:	46bd      	mov	sp, r7
 8102a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a9c:	4770      	bx	lr
 8102a9e:	bf00      	nop
 8102aa0:	e000e100 	.word	0xe000e100

08102aa4 <__NVIC_SetPriority>:
{
 8102aa4:	b480      	push	{r7}
 8102aa6:	b083      	sub	sp, #12
 8102aa8:	af00      	add	r7, sp, #0
 8102aaa:	4603      	mov	r3, r0
 8102aac:	6039      	str	r1, [r7, #0]
 8102aae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ab4:	2b00      	cmp	r3, #0
 8102ab6:	db0a      	blt.n	8102ace <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102ab8:	683b      	ldr	r3, [r7, #0]
 8102aba:	b2da      	uxtb	r2, r3
 8102abc:	490c      	ldr	r1, [pc, #48]	@ (8102af0 <__NVIC_SetPriority+0x4c>)
 8102abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ac2:	0112      	lsls	r2, r2, #4
 8102ac4:	b2d2      	uxtb	r2, r2
 8102ac6:	440b      	add	r3, r1
 8102ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8102acc:	e00a      	b.n	8102ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102ace:	683b      	ldr	r3, [r7, #0]
 8102ad0:	b2da      	uxtb	r2, r3
 8102ad2:	4908      	ldr	r1, [pc, #32]	@ (8102af4 <__NVIC_SetPriority+0x50>)
 8102ad4:	88fb      	ldrh	r3, [r7, #6]
 8102ad6:	f003 030f 	and.w	r3, r3, #15
 8102ada:	3b04      	subs	r3, #4
 8102adc:	0112      	lsls	r2, r2, #4
 8102ade:	b2d2      	uxtb	r2, r2
 8102ae0:	440b      	add	r3, r1
 8102ae2:	761a      	strb	r2, [r3, #24]
}
 8102ae4:	bf00      	nop
 8102ae6:	370c      	adds	r7, #12
 8102ae8:	46bd      	mov	sp, r7
 8102aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aee:	4770      	bx	lr
 8102af0:	e000e100 	.word	0xe000e100
 8102af4:	e000ed00 	.word	0xe000ed00

08102af8 <NVIC_EncodePriority>:
{
 8102af8:	b480      	push	{r7}
 8102afa:	b089      	sub	sp, #36	@ 0x24
 8102afc:	af00      	add	r7, sp, #0
 8102afe:	60f8      	str	r0, [r7, #12]
 8102b00:	60b9      	str	r1, [r7, #8]
 8102b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102b04:	68fb      	ldr	r3, [r7, #12]
 8102b06:	f003 0307 	and.w	r3, r3, #7
 8102b0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102b0c:	69fb      	ldr	r3, [r7, #28]
 8102b0e:	f1c3 0307 	rsb	r3, r3, #7
 8102b12:	2b04      	cmp	r3, #4
 8102b14:	bf28      	it	cs
 8102b16:	2304      	movcs	r3, #4
 8102b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102b1a:	69fb      	ldr	r3, [r7, #28]
 8102b1c:	3304      	adds	r3, #4
 8102b1e:	2b06      	cmp	r3, #6
 8102b20:	d902      	bls.n	8102b28 <NVIC_EncodePriority+0x30>
 8102b22:	69fb      	ldr	r3, [r7, #28]
 8102b24:	3b03      	subs	r3, #3
 8102b26:	e000      	b.n	8102b2a <NVIC_EncodePriority+0x32>
 8102b28:	2300      	movs	r3, #0
 8102b2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8102b30:	69bb      	ldr	r3, [r7, #24]
 8102b32:	fa02 f303 	lsl.w	r3, r2, r3
 8102b36:	43da      	mvns	r2, r3
 8102b38:	68bb      	ldr	r3, [r7, #8]
 8102b3a:	401a      	ands	r2, r3
 8102b3c:	697b      	ldr	r3, [r7, #20]
 8102b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102b40:	f04f 31ff 	mov.w	r1, #4294967295
 8102b44:	697b      	ldr	r3, [r7, #20]
 8102b46:	fa01 f303 	lsl.w	r3, r1, r3
 8102b4a:	43d9      	mvns	r1, r3
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102b50:	4313      	orrs	r3, r2
}
 8102b52:	4618      	mov	r0, r3
 8102b54:	3724      	adds	r7, #36	@ 0x24
 8102b56:	46bd      	mov	sp, r7
 8102b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b5c:	4770      	bx	lr

08102b5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102b5e:	b580      	push	{r7, lr}
 8102b60:	b082      	sub	sp, #8
 8102b62:	af00      	add	r7, sp, #0
 8102b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102b66:	6878      	ldr	r0, [r7, #4]
 8102b68:	f7ff ff4c 	bl	8102a04 <__NVIC_SetPriorityGrouping>
}
 8102b6c:	bf00      	nop
 8102b6e:	3708      	adds	r7, #8
 8102b70:	46bd      	mov	sp, r7
 8102b72:	bd80      	pop	{r7, pc}

08102b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102b74:	b580      	push	{r7, lr}
 8102b76:	b086      	sub	sp, #24
 8102b78:	af00      	add	r7, sp, #0
 8102b7a:	4603      	mov	r3, r0
 8102b7c:	60b9      	str	r1, [r7, #8]
 8102b7e:	607a      	str	r2, [r7, #4]
 8102b80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102b82:	f7ff ff63 	bl	8102a4c <__NVIC_GetPriorityGrouping>
 8102b86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102b88:	687a      	ldr	r2, [r7, #4]
 8102b8a:	68b9      	ldr	r1, [r7, #8]
 8102b8c:	6978      	ldr	r0, [r7, #20]
 8102b8e:	f7ff ffb3 	bl	8102af8 <NVIC_EncodePriority>
 8102b92:	4602      	mov	r2, r0
 8102b94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102b98:	4611      	mov	r1, r2
 8102b9a:	4618      	mov	r0, r3
 8102b9c:	f7ff ff82 	bl	8102aa4 <__NVIC_SetPriority>
}
 8102ba0:	bf00      	nop
 8102ba2:	3718      	adds	r7, #24
 8102ba4:	46bd      	mov	sp, r7
 8102ba6:	bd80      	pop	{r7, pc}

08102ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102ba8:	b580      	push	{r7, lr}
 8102baa:	b082      	sub	sp, #8
 8102bac:	af00      	add	r7, sp, #0
 8102bae:	4603      	mov	r3, r0
 8102bb0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102bb6:	4618      	mov	r0, r3
 8102bb8:	f7ff ff56 	bl	8102a68 <__NVIC_EnableIRQ>
}
 8102bbc:	bf00      	nop
 8102bbe:	3708      	adds	r7, #8
 8102bc0:	46bd      	mov	sp, r7
 8102bc2:	bd80      	pop	{r7, pc}

08102bc4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102bc4:	b480      	push	{r7}
 8102bc6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102bc8:	4b06      	ldr	r3, [pc, #24]	@ (8102be4 <HAL_GetCurrentCPUID+0x20>)
 8102bca:	681b      	ldr	r3, [r3, #0]
 8102bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8102bd0:	2b70      	cmp	r3, #112	@ 0x70
 8102bd2:	d101      	bne.n	8102bd8 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8102bd4:	2303      	movs	r3, #3
 8102bd6:	e000      	b.n	8102bda <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8102bd8:	2301      	movs	r3, #1
  }
}
 8102bda:	4618      	mov	r0, r3
 8102bdc:	46bd      	mov	sp, r7
 8102bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102be2:	4770      	bx	lr
 8102be4:	e000ed00 	.word	0xe000ed00

08102be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8102be8:	b480      	push	{r7}
 8102bea:	b089      	sub	sp, #36	@ 0x24
 8102bec:	af00      	add	r7, sp, #0
 8102bee:	6078      	str	r0, [r7, #4]
 8102bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102bf2:	2300      	movs	r3, #0
 8102bf4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102bf6:	4b89      	ldr	r3, [pc, #548]	@ (8102e1c <HAL_GPIO_Init+0x234>)
 8102bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102bfa:	e194      	b.n	8102f26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102bfc:	683b      	ldr	r3, [r7, #0]
 8102bfe:	681a      	ldr	r2, [r3, #0]
 8102c00:	2101      	movs	r1, #1
 8102c02:	69fb      	ldr	r3, [r7, #28]
 8102c04:	fa01 f303 	lsl.w	r3, r1, r3
 8102c08:	4013      	ands	r3, r2
 8102c0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102c0c:	693b      	ldr	r3, [r7, #16]
 8102c0e:	2b00      	cmp	r3, #0
 8102c10:	f000 8186 	beq.w	8102f20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102c14:	683b      	ldr	r3, [r7, #0]
 8102c16:	685b      	ldr	r3, [r3, #4]
 8102c18:	f003 0303 	and.w	r3, r3, #3
 8102c1c:	2b01      	cmp	r3, #1
 8102c1e:	d005      	beq.n	8102c2c <HAL_GPIO_Init+0x44>
 8102c20:	683b      	ldr	r3, [r7, #0]
 8102c22:	685b      	ldr	r3, [r3, #4]
 8102c24:	f003 0303 	and.w	r3, r3, #3
 8102c28:	2b02      	cmp	r3, #2
 8102c2a:	d130      	bne.n	8102c8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102c2c:	687b      	ldr	r3, [r7, #4]
 8102c2e:	689b      	ldr	r3, [r3, #8]
 8102c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102c32:	69fb      	ldr	r3, [r7, #28]
 8102c34:	005b      	lsls	r3, r3, #1
 8102c36:	2203      	movs	r2, #3
 8102c38:	fa02 f303 	lsl.w	r3, r2, r3
 8102c3c:	43db      	mvns	r3, r3
 8102c3e:	69ba      	ldr	r2, [r7, #24]
 8102c40:	4013      	ands	r3, r2
 8102c42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102c44:	683b      	ldr	r3, [r7, #0]
 8102c46:	68da      	ldr	r2, [r3, #12]
 8102c48:	69fb      	ldr	r3, [r7, #28]
 8102c4a:	005b      	lsls	r3, r3, #1
 8102c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8102c50:	69ba      	ldr	r2, [r7, #24]
 8102c52:	4313      	orrs	r3, r2
 8102c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	69ba      	ldr	r2, [r7, #24]
 8102c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102c5c:	687b      	ldr	r3, [r7, #4]
 8102c5e:	685b      	ldr	r3, [r3, #4]
 8102c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102c62:	2201      	movs	r2, #1
 8102c64:	69fb      	ldr	r3, [r7, #28]
 8102c66:	fa02 f303 	lsl.w	r3, r2, r3
 8102c6a:	43db      	mvns	r3, r3
 8102c6c:	69ba      	ldr	r2, [r7, #24]
 8102c6e:	4013      	ands	r3, r2
 8102c70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102c72:	683b      	ldr	r3, [r7, #0]
 8102c74:	685b      	ldr	r3, [r3, #4]
 8102c76:	091b      	lsrs	r3, r3, #4
 8102c78:	f003 0201 	and.w	r2, r3, #1
 8102c7c:	69fb      	ldr	r3, [r7, #28]
 8102c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8102c82:	69ba      	ldr	r2, [r7, #24]
 8102c84:	4313      	orrs	r3, r2
 8102c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102c88:	687b      	ldr	r3, [r7, #4]
 8102c8a:	69ba      	ldr	r2, [r7, #24]
 8102c8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102c8e:	683b      	ldr	r3, [r7, #0]
 8102c90:	685b      	ldr	r3, [r3, #4]
 8102c92:	f003 0303 	and.w	r3, r3, #3
 8102c96:	2b03      	cmp	r3, #3
 8102c98:	d017      	beq.n	8102cca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	68db      	ldr	r3, [r3, #12]
 8102c9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102ca0:	69fb      	ldr	r3, [r7, #28]
 8102ca2:	005b      	lsls	r3, r3, #1
 8102ca4:	2203      	movs	r2, #3
 8102ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8102caa:	43db      	mvns	r3, r3
 8102cac:	69ba      	ldr	r2, [r7, #24]
 8102cae:	4013      	ands	r3, r2
 8102cb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102cb2:	683b      	ldr	r3, [r7, #0]
 8102cb4:	689a      	ldr	r2, [r3, #8]
 8102cb6:	69fb      	ldr	r3, [r7, #28]
 8102cb8:	005b      	lsls	r3, r3, #1
 8102cba:	fa02 f303 	lsl.w	r3, r2, r3
 8102cbe:	69ba      	ldr	r2, [r7, #24]
 8102cc0:	4313      	orrs	r3, r2
 8102cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102cc4:	687b      	ldr	r3, [r7, #4]
 8102cc6:	69ba      	ldr	r2, [r7, #24]
 8102cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102cca:	683b      	ldr	r3, [r7, #0]
 8102ccc:	685b      	ldr	r3, [r3, #4]
 8102cce:	f003 0303 	and.w	r3, r3, #3
 8102cd2:	2b02      	cmp	r3, #2
 8102cd4:	d123      	bne.n	8102d1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102cd6:	69fb      	ldr	r3, [r7, #28]
 8102cd8:	08da      	lsrs	r2, r3, #3
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	3208      	adds	r2, #8
 8102cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102ce4:	69fb      	ldr	r3, [r7, #28]
 8102ce6:	f003 0307 	and.w	r3, r3, #7
 8102cea:	009b      	lsls	r3, r3, #2
 8102cec:	220f      	movs	r2, #15
 8102cee:	fa02 f303 	lsl.w	r3, r2, r3
 8102cf2:	43db      	mvns	r3, r3
 8102cf4:	69ba      	ldr	r2, [r7, #24]
 8102cf6:	4013      	ands	r3, r2
 8102cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102cfa:	683b      	ldr	r3, [r7, #0]
 8102cfc:	691a      	ldr	r2, [r3, #16]
 8102cfe:	69fb      	ldr	r3, [r7, #28]
 8102d00:	f003 0307 	and.w	r3, r3, #7
 8102d04:	009b      	lsls	r3, r3, #2
 8102d06:	fa02 f303 	lsl.w	r3, r2, r3
 8102d0a:	69ba      	ldr	r2, [r7, #24]
 8102d0c:	4313      	orrs	r3, r2
 8102d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102d10:	69fb      	ldr	r3, [r7, #28]
 8102d12:	08da      	lsrs	r2, r3, #3
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	3208      	adds	r2, #8
 8102d18:	69b9      	ldr	r1, [r7, #24]
 8102d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102d1e:	687b      	ldr	r3, [r7, #4]
 8102d20:	681b      	ldr	r3, [r3, #0]
 8102d22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102d24:	69fb      	ldr	r3, [r7, #28]
 8102d26:	005b      	lsls	r3, r3, #1
 8102d28:	2203      	movs	r2, #3
 8102d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8102d2e:	43db      	mvns	r3, r3
 8102d30:	69ba      	ldr	r2, [r7, #24]
 8102d32:	4013      	ands	r3, r2
 8102d34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102d36:	683b      	ldr	r3, [r7, #0]
 8102d38:	685b      	ldr	r3, [r3, #4]
 8102d3a:	f003 0203 	and.w	r2, r3, #3
 8102d3e:	69fb      	ldr	r3, [r7, #28]
 8102d40:	005b      	lsls	r3, r3, #1
 8102d42:	fa02 f303 	lsl.w	r3, r2, r3
 8102d46:	69ba      	ldr	r2, [r7, #24]
 8102d48:	4313      	orrs	r3, r2
 8102d4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	69ba      	ldr	r2, [r7, #24]
 8102d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102d52:	683b      	ldr	r3, [r7, #0]
 8102d54:	685b      	ldr	r3, [r3, #4]
 8102d56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102d5a:	2b00      	cmp	r3, #0
 8102d5c:	f000 80e0 	beq.w	8102f20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102d60:	4b2f      	ldr	r3, [pc, #188]	@ (8102e20 <HAL_GPIO_Init+0x238>)
 8102d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102d66:	4a2e      	ldr	r2, [pc, #184]	@ (8102e20 <HAL_GPIO_Init+0x238>)
 8102d68:	f043 0302 	orr.w	r3, r3, #2
 8102d6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102d70:	4b2b      	ldr	r3, [pc, #172]	@ (8102e20 <HAL_GPIO_Init+0x238>)
 8102d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102d76:	f003 0302 	and.w	r3, r3, #2
 8102d7a:	60fb      	str	r3, [r7, #12]
 8102d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102d7e:	4a29      	ldr	r2, [pc, #164]	@ (8102e24 <HAL_GPIO_Init+0x23c>)
 8102d80:	69fb      	ldr	r3, [r7, #28]
 8102d82:	089b      	lsrs	r3, r3, #2
 8102d84:	3302      	adds	r3, #2
 8102d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102d8c:	69fb      	ldr	r3, [r7, #28]
 8102d8e:	f003 0303 	and.w	r3, r3, #3
 8102d92:	009b      	lsls	r3, r3, #2
 8102d94:	220f      	movs	r2, #15
 8102d96:	fa02 f303 	lsl.w	r3, r2, r3
 8102d9a:	43db      	mvns	r3, r3
 8102d9c:	69ba      	ldr	r2, [r7, #24]
 8102d9e:	4013      	ands	r3, r2
 8102da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	4a20      	ldr	r2, [pc, #128]	@ (8102e28 <HAL_GPIO_Init+0x240>)
 8102da6:	4293      	cmp	r3, r2
 8102da8:	d052      	beq.n	8102e50 <HAL_GPIO_Init+0x268>
 8102daa:	687b      	ldr	r3, [r7, #4]
 8102dac:	4a1f      	ldr	r2, [pc, #124]	@ (8102e2c <HAL_GPIO_Init+0x244>)
 8102dae:	4293      	cmp	r3, r2
 8102db0:	d031      	beq.n	8102e16 <HAL_GPIO_Init+0x22e>
 8102db2:	687b      	ldr	r3, [r7, #4]
 8102db4:	4a1e      	ldr	r2, [pc, #120]	@ (8102e30 <HAL_GPIO_Init+0x248>)
 8102db6:	4293      	cmp	r3, r2
 8102db8:	d02b      	beq.n	8102e12 <HAL_GPIO_Init+0x22a>
 8102dba:	687b      	ldr	r3, [r7, #4]
 8102dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8102e34 <HAL_GPIO_Init+0x24c>)
 8102dbe:	4293      	cmp	r3, r2
 8102dc0:	d025      	beq.n	8102e0e <HAL_GPIO_Init+0x226>
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8102e38 <HAL_GPIO_Init+0x250>)
 8102dc6:	4293      	cmp	r3, r2
 8102dc8:	d01f      	beq.n	8102e0a <HAL_GPIO_Init+0x222>
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8102e3c <HAL_GPIO_Init+0x254>)
 8102dce:	4293      	cmp	r3, r2
 8102dd0:	d019      	beq.n	8102e06 <HAL_GPIO_Init+0x21e>
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8102e40 <HAL_GPIO_Init+0x258>)
 8102dd6:	4293      	cmp	r3, r2
 8102dd8:	d013      	beq.n	8102e02 <HAL_GPIO_Init+0x21a>
 8102dda:	687b      	ldr	r3, [r7, #4]
 8102ddc:	4a19      	ldr	r2, [pc, #100]	@ (8102e44 <HAL_GPIO_Init+0x25c>)
 8102dde:	4293      	cmp	r3, r2
 8102de0:	d00d      	beq.n	8102dfe <HAL_GPIO_Init+0x216>
 8102de2:	687b      	ldr	r3, [r7, #4]
 8102de4:	4a18      	ldr	r2, [pc, #96]	@ (8102e48 <HAL_GPIO_Init+0x260>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d007      	beq.n	8102dfa <HAL_GPIO_Init+0x212>
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	4a17      	ldr	r2, [pc, #92]	@ (8102e4c <HAL_GPIO_Init+0x264>)
 8102dee:	4293      	cmp	r3, r2
 8102df0:	d101      	bne.n	8102df6 <HAL_GPIO_Init+0x20e>
 8102df2:	2309      	movs	r3, #9
 8102df4:	e02d      	b.n	8102e52 <HAL_GPIO_Init+0x26a>
 8102df6:	230a      	movs	r3, #10
 8102df8:	e02b      	b.n	8102e52 <HAL_GPIO_Init+0x26a>
 8102dfa:	2308      	movs	r3, #8
 8102dfc:	e029      	b.n	8102e52 <HAL_GPIO_Init+0x26a>
 8102dfe:	2307      	movs	r3, #7
 8102e00:	e027      	b.n	8102e52 <HAL_GPIO_Init+0x26a>
 8102e02:	2306      	movs	r3, #6
 8102e04:	e025      	b.n	8102e52 <HAL_GPIO_Init+0x26a>
 8102e06:	2305      	movs	r3, #5
 8102e08:	e023      	b.n	8102e52 <HAL_GPIO_Init+0x26a>
 8102e0a:	2304      	movs	r3, #4
 8102e0c:	e021      	b.n	8102e52 <HAL_GPIO_Init+0x26a>
 8102e0e:	2303      	movs	r3, #3
 8102e10:	e01f      	b.n	8102e52 <HAL_GPIO_Init+0x26a>
 8102e12:	2302      	movs	r3, #2
 8102e14:	e01d      	b.n	8102e52 <HAL_GPIO_Init+0x26a>
 8102e16:	2301      	movs	r3, #1
 8102e18:	e01b      	b.n	8102e52 <HAL_GPIO_Init+0x26a>
 8102e1a:	bf00      	nop
 8102e1c:	580000c0 	.word	0x580000c0
 8102e20:	58024400 	.word	0x58024400
 8102e24:	58000400 	.word	0x58000400
 8102e28:	58020000 	.word	0x58020000
 8102e2c:	58020400 	.word	0x58020400
 8102e30:	58020800 	.word	0x58020800
 8102e34:	58020c00 	.word	0x58020c00
 8102e38:	58021000 	.word	0x58021000
 8102e3c:	58021400 	.word	0x58021400
 8102e40:	58021800 	.word	0x58021800
 8102e44:	58021c00 	.word	0x58021c00
 8102e48:	58022000 	.word	0x58022000
 8102e4c:	58022400 	.word	0x58022400
 8102e50:	2300      	movs	r3, #0
 8102e52:	69fa      	ldr	r2, [r7, #28]
 8102e54:	f002 0203 	and.w	r2, r2, #3
 8102e58:	0092      	lsls	r2, r2, #2
 8102e5a:	4093      	lsls	r3, r2
 8102e5c:	69ba      	ldr	r2, [r7, #24]
 8102e5e:	4313      	orrs	r3, r2
 8102e60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102e62:	4938      	ldr	r1, [pc, #224]	@ (8102f44 <HAL_GPIO_Init+0x35c>)
 8102e64:	69fb      	ldr	r3, [r7, #28]
 8102e66:	089b      	lsrs	r3, r3, #2
 8102e68:	3302      	adds	r3, #2
 8102e6a:	69ba      	ldr	r2, [r7, #24]
 8102e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102e74:	681b      	ldr	r3, [r3, #0]
 8102e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102e78:	693b      	ldr	r3, [r7, #16]
 8102e7a:	43db      	mvns	r3, r3
 8102e7c:	69ba      	ldr	r2, [r7, #24]
 8102e7e:	4013      	ands	r3, r2
 8102e80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102e82:	683b      	ldr	r3, [r7, #0]
 8102e84:	685b      	ldr	r3, [r3, #4]
 8102e86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8102e8a:	2b00      	cmp	r3, #0
 8102e8c:	d003      	beq.n	8102e96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102e8e:	69ba      	ldr	r2, [r7, #24]
 8102e90:	693b      	ldr	r3, [r7, #16]
 8102e92:	4313      	orrs	r3, r2
 8102e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102e96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102e9a:	69bb      	ldr	r3, [r7, #24]
 8102e9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102ea2:	685b      	ldr	r3, [r3, #4]
 8102ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102ea6:	693b      	ldr	r3, [r7, #16]
 8102ea8:	43db      	mvns	r3, r3
 8102eaa:	69ba      	ldr	r2, [r7, #24]
 8102eac:	4013      	ands	r3, r2
 8102eae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102eb0:	683b      	ldr	r3, [r7, #0]
 8102eb2:	685b      	ldr	r3, [r3, #4]
 8102eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102eb8:	2b00      	cmp	r3, #0
 8102eba:	d003      	beq.n	8102ec4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102ebc:	69ba      	ldr	r2, [r7, #24]
 8102ebe:	693b      	ldr	r3, [r7, #16]
 8102ec0:	4313      	orrs	r3, r2
 8102ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102ec4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102ec8:	69bb      	ldr	r3, [r7, #24]
 8102eca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102ecc:	697b      	ldr	r3, [r7, #20]
 8102ece:	685b      	ldr	r3, [r3, #4]
 8102ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102ed2:	693b      	ldr	r3, [r7, #16]
 8102ed4:	43db      	mvns	r3, r3
 8102ed6:	69ba      	ldr	r2, [r7, #24]
 8102ed8:	4013      	ands	r3, r2
 8102eda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102edc:	683b      	ldr	r3, [r7, #0]
 8102ede:	685b      	ldr	r3, [r3, #4]
 8102ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102ee4:	2b00      	cmp	r3, #0
 8102ee6:	d003      	beq.n	8102ef0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102ee8:	69ba      	ldr	r2, [r7, #24]
 8102eea:	693b      	ldr	r3, [r7, #16]
 8102eec:	4313      	orrs	r3, r2
 8102eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102ef0:	697b      	ldr	r3, [r7, #20]
 8102ef2:	69ba      	ldr	r2, [r7, #24]
 8102ef4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102ef6:	697b      	ldr	r3, [r7, #20]
 8102ef8:	681b      	ldr	r3, [r3, #0]
 8102efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102efc:	693b      	ldr	r3, [r7, #16]
 8102efe:	43db      	mvns	r3, r3
 8102f00:	69ba      	ldr	r2, [r7, #24]
 8102f02:	4013      	ands	r3, r2
 8102f04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102f06:	683b      	ldr	r3, [r7, #0]
 8102f08:	685b      	ldr	r3, [r3, #4]
 8102f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102f0e:	2b00      	cmp	r3, #0
 8102f10:	d003      	beq.n	8102f1a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102f12:	69ba      	ldr	r2, [r7, #24]
 8102f14:	693b      	ldr	r3, [r7, #16]
 8102f16:	4313      	orrs	r3, r2
 8102f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102f1a:	697b      	ldr	r3, [r7, #20]
 8102f1c:	69ba      	ldr	r2, [r7, #24]
 8102f1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102f20:	69fb      	ldr	r3, [r7, #28]
 8102f22:	3301      	adds	r3, #1
 8102f24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102f26:	683b      	ldr	r3, [r7, #0]
 8102f28:	681a      	ldr	r2, [r3, #0]
 8102f2a:	69fb      	ldr	r3, [r7, #28]
 8102f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8102f30:	2b00      	cmp	r3, #0
 8102f32:	f47f ae63 	bne.w	8102bfc <HAL_GPIO_Init+0x14>
  }
}
 8102f36:	bf00      	nop
 8102f38:	bf00      	nop
 8102f3a:	3724      	adds	r7, #36	@ 0x24
 8102f3c:	46bd      	mov	sp, r7
 8102f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f42:	4770      	bx	lr
 8102f44:	58000400 	.word	0x58000400

08102f48 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102f48:	b480      	push	{r7}
 8102f4a:	b083      	sub	sp, #12
 8102f4c:	af00      	add	r7, sp, #0
 8102f4e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102f50:	4b05      	ldr	r3, [pc, #20]	@ (8102f68 <HAL_HSEM_ActivateNotification+0x20>)
 8102f52:	681a      	ldr	r2, [r3, #0]
 8102f54:	4904      	ldr	r1, [pc, #16]	@ (8102f68 <HAL_HSEM_ActivateNotification+0x20>)
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	4313      	orrs	r3, r2
 8102f5a:	600b      	str	r3, [r1, #0]
#endif
}
 8102f5c:	bf00      	nop
 8102f5e:	370c      	adds	r7, #12
 8102f60:	46bd      	mov	sp, r7
 8102f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f66:	4770      	bx	lr
 8102f68:	58026510 	.word	0x58026510

08102f6c <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8102f6c:	b580      	push	{r7, lr}
 8102f6e:	b082      	sub	sp, #8
 8102f70:	af00      	add	r7, sp, #0
 8102f72:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	2b00      	cmp	r3, #0
 8102f78:	d101      	bne.n	8102f7e <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8102f7a:	2301      	movs	r3, #1
 8102f7c:	e031      	b.n	8102fe2 <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8102f84:	b2db      	uxtb	r3, r3
 8102f86:	2b00      	cmp	r3, #0
 8102f88:	d105      	bne.n	8102f96 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	2200      	movs	r2, #0
 8102f8e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8102f90:	6878      	ldr	r0, [r7, #4]
 8102f92:	f7ff f955 	bl	8102240 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	2203      	movs	r2, #3
 8102f9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8102f9e:	6878      	ldr	r0, [r7, #4]
 8102fa0:	f000 f824 	bl	8102fec <HAL_MMC_InitCard>
 8102fa4:	4603      	mov	r3, r0
 8102fa6:	2b01      	cmp	r3, #1
 8102fa8:	d101      	bne.n	8102fae <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8102faa:	2301      	movs	r3, #1
 8102fac:	e019      	b.n	8102fe2 <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8102fae:	687b      	ldr	r3, [r7, #4]
 8102fb0:	2200      	movs	r2, #0
 8102fb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	2200      	movs	r2, #0
 8102fb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	2201      	movs	r2, #1
 8102fbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	68db      	ldr	r3, [r3, #12]
 8102fc6:	2b00      	cmp	r3, #0
 8102fc8:	d00a      	beq.n	8102fe0 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	68db      	ldr	r3, [r3, #12]
 8102fce:	4619      	mov	r1, r3
 8102fd0:	6878      	ldr	r0, [r7, #4]
 8102fd2:	f000 fd15 	bl	8103a00 <HAL_MMC_ConfigWideBusOperation>
 8102fd6:	4603      	mov	r3, r0
 8102fd8:	2b00      	cmp	r3, #0
 8102fda:	d001      	beq.n	8102fe0 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8102fdc:	2301      	movs	r3, #1
 8102fde:	e000      	b.n	8102fe2 <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8102fe0:	2300      	movs	r3, #0
}
 8102fe2:	4618      	mov	r0, r3
 8102fe4:	3708      	adds	r7, #8
 8102fe6:	46bd      	mov	sp, r7
 8102fe8:	bd80      	pop	{r7, pc}
	...

08102fec <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8102fec:	b590      	push	{r4, r7, lr}
 8102fee:	b08d      	sub	sp, #52	@ 0x34
 8102ff0:	af02      	add	r7, sp, #8
 8102ff2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8102ff4:	2300      	movs	r3, #0
 8102ff6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8102ff8:	2300      	movs	r3, #0
 8102ffa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8102ffc:	2300      	movs	r3, #0
 8102ffe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8103000:	2300      	movs	r3, #0
 8103002:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8103004:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8103008:	f04f 0100 	mov.w	r1, #0
 810300c:	f004 f8a4 	bl	8107158 <HAL_RCCEx_GetPeriphCLKFreq>
 8103010:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8103012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103014:	2b00      	cmp	r3, #0
 8103016:	d109      	bne.n	810302c <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	2201      	movs	r2, #1
 810301c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8103026:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8103028:	2301      	movs	r3, #1
 810302a:	e070      	b.n	810310e <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 810302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810302e:	0a1b      	lsrs	r3, r3, #8
 8103030:	4a39      	ldr	r2, [pc, #228]	@ (8103118 <HAL_MMC_InitCard+0x12c>)
 8103032:	fba2 2303 	umull	r2, r3, r2, r3
 8103036:	091b      	lsrs	r3, r3, #4
 8103038:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	681c      	ldr	r4, [r3, #0]
 810303e:	466a      	mov	r2, sp
 8103040:	f107 0318 	add.w	r3, r7, #24
 8103044:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103048:	e882 0003 	stmia.w	r2, {r0, r1}
 810304c:	f107 030c 	add.w	r3, r7, #12
 8103050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103052:	4620      	mov	r0, r4
 8103054:	f006 fe26 	bl	8109ca4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	4618      	mov	r0, r3
 810305e:	f006 fe69 	bl	8109d34 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 8103062:	69fb      	ldr	r3, [r7, #28]
 8103064:	2b00      	cmp	r3, #0
 8103066:	d005      	beq.n	8103074 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8103068:	69fb      	ldr	r3, [r7, #28]
 810306a:	005b      	lsls	r3, r3, #1
 810306c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103072:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8103074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103076:	2b00      	cmp	r3, #0
 8103078:	d007      	beq.n	810308a <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 810307a:	4a28      	ldr	r2, [pc, #160]	@ (810311c <HAL_MMC_InitCard+0x130>)
 810307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103082:	3301      	adds	r3, #1
 8103084:	4618      	mov	r0, r3
 8103086:	f7ff fc99 	bl	81029bc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 810308a:	6878      	ldr	r0, [r7, #4]
 810308c:	f000 fe82 	bl	8103d94 <MMC_PowerON>
 8103090:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103092:	6a3b      	ldr	r3, [r7, #32]
 8103094:	2b00      	cmp	r3, #0
 8103096:	d00b      	beq.n	81030b0 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8103098:	687b      	ldr	r3, [r7, #4]
 810309a:	2201      	movs	r2, #1
 810309c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 81030a0:	687b      	ldr	r3, [r7, #4]
 81030a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81030a4:	6a3b      	ldr	r3, [r7, #32]
 81030a6:	431a      	orrs	r2, r3
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81030ac:	2301      	movs	r3, #1
 81030ae:	e02e      	b.n	810310e <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 81030b0:	6878      	ldr	r0, [r7, #4]
 81030b2:	f000 fd71 	bl	8103b98 <MMC_InitCard>
 81030b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 81030b8:	6a3b      	ldr	r3, [r7, #32]
 81030ba:	2b00      	cmp	r3, #0
 81030bc:	d00b      	beq.n	81030d6 <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 81030be:	687b      	ldr	r3, [r7, #4]
 81030c0:	2201      	movs	r2, #1
 81030c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81030ca:	6a3b      	ldr	r3, [r7, #32]
 81030cc:	431a      	orrs	r2, r3
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81030d2:	2301      	movs	r3, #1
 81030d4:	e01b      	b.n	810310e <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	681b      	ldr	r3, [r3, #0]
 81030da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 81030de:	4618      	mov	r0, r3
 81030e0:	f006 febe 	bl	8109e60 <SDMMC_CmdBlockLength>
 81030e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 81030e6:	6a3b      	ldr	r3, [r7, #32]
 81030e8:	2b00      	cmp	r3, #0
 81030ea:	d00f      	beq.n	810310c <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	4a0b      	ldr	r2, [pc, #44]	@ (8103120 <HAL_MMC_InitCard+0x134>)
 81030f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81030f8:	6a3b      	ldr	r3, [r7, #32]
 81030fa:	431a      	orrs	r2, r3
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	2201      	movs	r2, #1
 8103104:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103108:	2301      	movs	r3, #1
 810310a:	e000      	b.n	810310e <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 810310c:	2300      	movs	r3, #0
}
 810310e:	4618      	mov	r0, r3
 8103110:	372c      	adds	r7, #44	@ 0x2c
 8103112:	46bd      	mov	sp, r7
 8103114:	bd90      	pop	{r4, r7, pc}
 8103116:	bf00      	nop
 8103118:	014f8b59 	.word	0x014f8b59
 810311c:	00012110 	.word	0x00012110
 8103120:	1fe00fff 	.word	0x1fe00fff

08103124 <HAL_MMC_IRQHandler>:
  * @brief  This function handles MMC card interrupt request.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
void HAL_MMC_IRQHandler(MMC_HandleTypeDef *hmmc)
{
 8103124:	b580      	push	{r7, lr}
 8103126:	b084      	sub	sp, #16
 8103128:	af00      	add	r7, sp, #0
 810312a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hmmc->Context;
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103130:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	681b      	ldr	r3, [r3, #0]
 8103136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810313c:	2b00      	cmp	r3, #0
 810313e:	d008      	beq.n	8103152 <HAL_MMC_IRQHandler+0x2e>
 8103140:	68fb      	ldr	r3, [r7, #12]
 8103142:	f003 0308 	and.w	r3, r3, #8
 8103146:	2b00      	cmp	r3, #0
 8103148:	d003      	beq.n	8103152 <HAL_MMC_IRQHandler+0x2e>
  {
    MMC_Read_IT(hmmc);
 810314a:	6878      	ldr	r0, [r7, #4]
 810314c:	f000 ff66 	bl	810401c <MMC_Read_IT>
 8103150:	e194      	b.n	810347c <HAL_MMC_IRQHandler+0x358>
  }

  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DATAEND) != RESET)
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810315c:	2b00      	cmp	r3, #0
 810315e:	f000 80ac 	beq.w	81032ba <HAL_MMC_IRQHandler+0x196>
  {
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DATAEND);
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810316a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103172:	687a      	ldr	r2, [r7, #4]
 8103174:	6812      	ldr	r2, [r2, #0]
 8103176:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 810317a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 810317e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                         SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                         SDMMC_IT_RXFIFOHF);

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	681b      	ldr	r3, [r3, #0]
 8103184:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	681b      	ldr	r3, [r3, #0]
 810318a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 810318e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	681b      	ldr	r3, [r3, #0]
 8103194:	68da      	ldr	r2, [r3, #12]
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	681b      	ldr	r3, [r3, #0]
 810319a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 810319e:	60da      	str	r2, [r3, #12]

    if ((context & MMC_CONTEXT_DMA) != 0U)
 81031a0:	68fb      	ldr	r3, [r7, #12]
 81031a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81031a6:	2b00      	cmp	r3, #0
 81031a8:	d04b      	beq.n	8103242 <HAL_MMC_IRQHandler+0x11e>
    {
      hmmc->Instance->DLEN = 0;
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	681b      	ldr	r3, [r3, #0]
 81031ae:	2200      	movs	r2, #0
 81031b0:	629a      	str	r2, [r3, #40]	@ 0x28
      hmmc->Instance->DCTRL = 0;
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	681b      	ldr	r3, [r3, #0]
 81031b6:	2200      	movs	r2, #0
 81031b8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA ;
 81031ba:	687b      	ldr	r3, [r7, #4]
 81031bc:	681b      	ldr	r3, [r3, #0]
 81031be:	2200      	movs	r2, #0
 81031c0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Stop Transfer for Write Multi blocks or Read Multi blocks */
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 81031c2:	68fb      	ldr	r3, [r7, #12]
 81031c4:	f003 0302 	and.w	r3, r3, #2
 81031c8:	2b00      	cmp	r3, #0
 81031ca:	d104      	bne.n	81031d6 <HAL_MMC_IRQHandler+0xb2>
 81031cc:	68fb      	ldr	r3, [r7, #12]
 81031ce:	f003 0320 	and.w	r3, r3, #32
 81031d2:	2b00      	cmp	r3, #0
 81031d4:	d011      	beq.n	81031fa <HAL_MMC_IRQHandler+0xd6>
      {
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 81031d6:	687b      	ldr	r3, [r7, #4]
 81031d8:	681b      	ldr	r3, [r3, #0]
 81031da:	4618      	mov	r0, r3
 81031dc:	f006 fe64 	bl	8109ea8 <SDMMC_CmdStopTransfer>
 81031e0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 81031e2:	68bb      	ldr	r3, [r7, #8]
 81031e4:	2b00      	cmp	r3, #0
 81031e6:	d008      	beq.n	81031fa <HAL_MMC_IRQHandler+0xd6>
        {
          hmmc->ErrorCode |= errorstate;
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81031ec:	68bb      	ldr	r3, [r7, #8]
 81031ee:	431a      	orrs	r2, r3
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
          hmmc->ErrorCallback(hmmc);
#else
          HAL_MMC_ErrorCallback(hmmc);
 81031f4:	6878      	ldr	r0, [r7, #4]
 81031f6:	f000 f959 	bl	81034ac <HAL_MMC_ErrorCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	681b      	ldr	r3, [r3, #0]
 81031fe:	4a9c      	ldr	r2, [pc, #624]	@ (8103470 <HAL_MMC_IRQHandler+0x34c>)
 8103200:	639a      	str	r2, [r3, #56]	@ 0x38

      hmmc->State = HAL_MMC_STATE_READY;
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	2201      	movs	r2, #1
 8103206:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810320a:	68fb      	ldr	r3, [r7, #12]
 810320c:	f003 0310 	and.w	r3, r3, #16
 8103210:	2b00      	cmp	r3, #0
 8103212:	d104      	bne.n	810321e <HAL_MMC_IRQHandler+0xfa>
 8103214:	68fb      	ldr	r3, [r7, #12]
 8103216:	f003 0320 	and.w	r3, r3, #32
 810321a:	2b00      	cmp	r3, #0
 810321c:	d002      	beq.n	8103224 <HAL_MMC_IRQHandler+0x100>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->TxCpltCallback(hmmc);
#else
        HAL_MMC_TxCpltCallback(hmmc);
 810321e:	6878      	ldr	r0, [r7, #4]
 8103220:	f000 f930 	bl	8103484 <HAL_MMC_TxCpltCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
      }
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8103224:	68fb      	ldr	r3, [r7, #12]
 8103226:	f003 0301 	and.w	r3, r3, #1
 810322a:	2b00      	cmp	r3, #0
 810322c:	d105      	bne.n	810323a <HAL_MMC_IRQHandler+0x116>
 810322e:	68fb      	ldr	r3, [r7, #12]
 8103230:	f003 0302 	and.w	r3, r3, #2
 8103234:	2b00      	cmp	r3, #0
 8103236:	f000 8121 	beq.w	810347c <HAL_MMC_IRQHandler+0x358>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->RxCpltCallback(hmmc);
#else
        HAL_MMC_RxCpltCallback(hmmc);
 810323a:	6878      	ldr	r0, [r7, #4]
 810323c:	f000 f92c 	bl	8103498 <HAL_MMC_RxCpltCallback>

  else
  {
    /* Nothing to do */
  }
}
 8103240:	e11c      	b.n	810347c <HAL_MMC_IRQHandler+0x358>
    else if ((context & MMC_CONTEXT_IT) != 0U)
 8103242:	68fb      	ldr	r3, [r7, #12]
 8103244:	f003 0308 	and.w	r3, r3, #8
 8103248:	2b00      	cmp	r3, #0
 810324a:	f000 8117 	beq.w	810347c <HAL_MMC_IRQHandler+0x358>
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810324e:	68fb      	ldr	r3, [r7, #12]
 8103250:	f003 0302 	and.w	r3, r3, #2
 8103254:	2b00      	cmp	r3, #0
 8103256:	d104      	bne.n	8103262 <HAL_MMC_IRQHandler+0x13e>
 8103258:	68fb      	ldr	r3, [r7, #12]
 810325a:	f003 0320 	and.w	r3, r3, #32
 810325e:	2b00      	cmp	r3, #0
 8103260:	d011      	beq.n	8103286 <HAL_MMC_IRQHandler+0x162>
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	681b      	ldr	r3, [r3, #0]
 8103266:	4618      	mov	r0, r3
 8103268:	f006 fe1e 	bl	8109ea8 <SDMMC_CmdStopTransfer>
 810326c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 810326e:	68bb      	ldr	r3, [r7, #8]
 8103270:	2b00      	cmp	r3, #0
 8103272:	d008      	beq.n	8103286 <HAL_MMC_IRQHandler+0x162>
          hmmc->ErrorCode |= errorstate;
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103278:	68bb      	ldr	r3, [r7, #8]
 810327a:	431a      	orrs	r2, r3
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_MMC_ErrorCallback(hmmc);
 8103280:	6878      	ldr	r0, [r7, #4]
 8103282:	f000 f913 	bl	81034ac <HAL_MMC_ErrorCallback>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	4a79      	ldr	r2, [pc, #484]	@ (8103470 <HAL_MMC_IRQHandler+0x34c>)
 810328c:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	2201      	movs	r2, #1
 8103292:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8103296:	68fb      	ldr	r3, [r7, #12]
 8103298:	f003 0301 	and.w	r3, r3, #1
 810329c:	2b00      	cmp	r3, #0
 810329e:	d104      	bne.n	81032aa <HAL_MMC_IRQHandler+0x186>
 81032a0:	68fb      	ldr	r3, [r7, #12]
 81032a2:	f003 0302 	and.w	r3, r3, #2
 81032a6:	2b00      	cmp	r3, #0
 81032a8:	d003      	beq.n	81032b2 <HAL_MMC_IRQHandler+0x18e>
        HAL_MMC_RxCpltCallback(hmmc);
 81032aa:	6878      	ldr	r0, [r7, #4]
 81032ac:	f000 f8f4 	bl	8103498 <HAL_MMC_RxCpltCallback>
 81032b0:	e0e4      	b.n	810347c <HAL_MMC_IRQHandler+0x358>
        HAL_MMC_TxCpltCallback(hmmc);
 81032b2:	6878      	ldr	r0, [r7, #4]
 81032b4:	f000 f8e6 	bl	8103484 <HAL_MMC_TxCpltCallback>
}
 81032b8:	e0e0      	b.n	810347c <HAL_MMC_IRQHandler+0x358>
  else if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	681b      	ldr	r3, [r3, #0]
 81032be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81032c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81032c4:	2b00      	cmp	r3, #0
 81032c6:	d008      	beq.n	81032da <HAL_MMC_IRQHandler+0x1b6>
 81032c8:	68fb      	ldr	r3, [r7, #12]
 81032ca:	f003 0308 	and.w	r3, r3, #8
 81032ce:	2b00      	cmp	r3, #0
 81032d0:	d003      	beq.n	81032da <HAL_MMC_IRQHandler+0x1b6>
    MMC_Write_IT(hmmc);
 81032d2:	6878      	ldr	r0, [r7, #4]
 81032d4:	f000 fee8 	bl	81040a8 <MMC_Write_IT>
 81032d8:	e0d0      	b.n	810347c <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL |
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	681b      	ldr	r3, [r3, #0]
 81032de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81032e0:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 81032e4:	2b00      	cmp	r3, #0
 81032e6:	f000 809a 	beq.w	810341e <HAL_MMC_IRQHandler+0x2fa>
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DCRCFAIL) != RESET)
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	681b      	ldr	r3, [r3, #0]
 81032ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81032f0:	f003 0302 	and.w	r3, r3, #2
 81032f4:	2b00      	cmp	r3, #0
 81032f6:	d005      	beq.n	8103304 <HAL_MMC_IRQHandler+0x1e0>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81032fc:	f043 0202 	orr.w	r2, r3, #2
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DTIMEOUT) != RESET)
 8103304:	687b      	ldr	r3, [r7, #4]
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810330a:	f003 0308 	and.w	r3, r3, #8
 810330e:	2b00      	cmp	r3, #0
 8103310:	d005      	beq.n	810331e <HAL_MMC_IRQHandler+0x1fa>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103316:	f043 0208 	orr.w	r2, r3, #8
 810331a:	687b      	ldr	r3, [r7, #4]
 810331c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_RXOVERR) != RESET)
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	681b      	ldr	r3, [r3, #0]
 8103322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103324:	f003 0320 	and.w	r3, r3, #32
 8103328:	2b00      	cmp	r3, #0
 810332a:	d005      	beq.n	8103338 <HAL_MMC_IRQHandler+0x214>
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103330:	f043 0220 	orr.w	r2, r3, #32
 8103334:	687b      	ldr	r3, [r7, #4]
 8103336:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_TXUNDERR) != RESET)
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	681b      	ldr	r3, [r3, #0]
 810333c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810333e:	f003 0310 	and.w	r3, r3, #16
 8103342:	2b00      	cmp	r3, #0
 8103344:	d005      	beq.n	8103352 <HAL_MMC_IRQHandler+0x22e>
      hmmc->ErrorCode |= HAL_MMC_ERROR_TX_UNDERRUN;
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810334a:	f043 0210 	orr.w	r2, r3, #16
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	681b      	ldr	r3, [r3, #0]
 8103356:	4a46      	ldr	r2, [pc, #280]	@ (8103470 <HAL_MMC_IRQHandler+0x34c>)
 8103358:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	681b      	ldr	r3, [r3, #0]
 810335e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8103368:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	681b      	ldr	r3, [r3, #0]
 810336e:	68da      	ldr	r2, [r3, #12]
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	681b      	ldr	r3, [r3, #0]
 8103374:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8103378:	60da      	str	r2, [r3, #12]
    hmmc->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	681b      	ldr	r3, [r3, #0]
 8103384:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8103388:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmmc->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	681b      	ldr	r3, [r3, #0]
 810338e:	68da      	ldr	r2, [r3, #12]
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	681b      	ldr	r3, [r3, #0]
 8103394:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8103398:	60da      	str	r2, [r3, #12]
    hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	681b      	ldr	r3, [r3, #0]
 810339e:	4618      	mov	r0, r3
 81033a0:	f006 fd82 	bl	8109ea8 <SDMMC_CmdStopTransfer>
 81033a4:	4602      	mov	r2, r0
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81033aa:	431a      	orrs	r2, r3
 81033ac:	687b      	ldr	r3, [r7, #4]
 81033ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 81033b0:	687b      	ldr	r3, [r7, #4]
 81033b2:	681b      	ldr	r3, [r3, #0]
 81033b4:	68da      	ldr	r2, [r3, #12]
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	681b      	ldr	r3, [r3, #0]
 81033ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 81033be:	60da      	str	r2, [r3, #12]
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DABORT);
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81033c8:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & MMC_CONTEXT_IT) != 0U)
 81033ca:	68fb      	ldr	r3, [r7, #12]
 81033cc:	f003 0308 	and.w	r3, r3, #8
 81033d0:	2b00      	cmp	r3, #0
 81033d2:	d007      	beq.n	81033e4 <HAL_MMC_IRQHandler+0x2c0>
      hmmc->State = HAL_MMC_STATE_READY;
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	2201      	movs	r2, #1
 81033d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      HAL_MMC_ErrorCallback(hmmc);
 81033dc:	6878      	ldr	r0, [r7, #4]
 81033de:	f000 f865 	bl	81034ac <HAL_MMC_ErrorCallback>
}
 81033e2:	e04b      	b.n	810347c <HAL_MMC_IRQHandler+0x358>
    else if ((context & MMC_CONTEXT_DMA) != 0U)
 81033e4:	68fb      	ldr	r3, [r7, #12]
 81033e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81033ea:	2b00      	cmp	r3, #0
 81033ec:	d046      	beq.n	810347c <HAL_MMC_IRQHandler+0x358>
      if (hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81033f2:	2b00      	cmp	r3, #0
 81033f4:	d042      	beq.n	810347c <HAL_MMC_IRQHandler+0x358>
        __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 81033f6:	687b      	ldr	r3, [r7, #4]
 81033f8:	681b      	ldr	r3, [r3, #0]
 81033fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	681b      	ldr	r3, [r3, #0]
 8103400:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8103404:	63da      	str	r2, [r3, #60]	@ 0x3c
        hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	681b      	ldr	r3, [r3, #0]
 810340a:	2200      	movs	r2, #0
 810340c:	651a      	str	r2, [r3, #80]	@ 0x50
        hmmc->State = HAL_MMC_STATE_READY;
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	2201      	movs	r2, #1
 8103412:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_MMC_ErrorCallback(hmmc);
 8103416:	6878      	ldr	r0, [r7, #4]
 8103418:	f000 f848 	bl	81034ac <HAL_MMC_ErrorCallback>
}
 810341c:	e02e      	b.n	810347c <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_IDMABTC) != RESET)
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8103428:	2b00      	cmp	r3, #0
 810342a:	d027      	beq.n	810347c <HAL_MMC_IRQHandler+0x358>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_IT_IDMABTC);
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8103434:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hmmc->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	681b      	ldr	r3, [r3, #0]
 810343a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810343c:	f003 0304 	and.w	r3, r3, #4
 8103440:	2b00      	cmp	r3, #0
 8103442:	d10c      	bne.n	810345e <HAL_MMC_IRQHandler+0x33a>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8103444:	68fb      	ldr	r3, [r7, #12]
 8103446:	f003 0320 	and.w	r3, r3, #32
 810344a:	2b00      	cmp	r3, #0
 810344c:	d003      	beq.n	8103456 <HAL_MMC_IRQHandler+0x332>
        HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(hmmc);
 810344e:	6878      	ldr	r0, [r7, #4]
 8103450:	f000 ff32 	bl	81042b8 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>
}
 8103454:	e012      	b.n	810347c <HAL_MMC_IRQHandler+0x358>
        HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(hmmc);
 8103456:	6878      	ldr	r0, [r7, #4]
 8103458:	f000 ff1a 	bl	8104290 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>
}
 810345c:	e00e      	b.n	810347c <HAL_MMC_IRQHandler+0x358>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 810345e:	68fb      	ldr	r3, [r7, #12]
 8103460:	f003 0320 	and.w	r3, r3, #32
 8103464:	2b00      	cmp	r3, #0
 8103466:	d005      	beq.n	8103474 <HAL_MMC_IRQHandler+0x350>
        HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(hmmc);
 8103468:	6878      	ldr	r0, [r7, #4]
 810346a:	f000 ff1b 	bl	81042a4 <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>
}
 810346e:	e005      	b.n	810347c <HAL_MMC_IRQHandler+0x358>
 8103470:	18000f3a 	.word	0x18000f3a
        HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(hmmc);
 8103474:	6878      	ldr	r0, [r7, #4]
 8103476:	f000 ff01 	bl	810427c <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>
}
 810347a:	e7ff      	b.n	810347c <HAL_MMC_IRQHandler+0x358>
 810347c:	bf00      	nop
 810347e:	3710      	adds	r7, #16
 8103480:	46bd      	mov	sp, r7
 8103482:	bd80      	pop	{r7, pc}

08103484 <HAL_MMC_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hmmc: Pointer to MMC handle
  * @retval None
  */
__weak void HAL_MMC_TxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8103484:	b480      	push	{r7}
 8103486:	b083      	sub	sp, #12
 8103488:	af00      	add	r7, sp, #0
 810348a:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_TxCpltCallback can be implemented in the user file
   */
}
 810348c:	bf00      	nop
 810348e:	370c      	adds	r7, #12
 8103490:	46bd      	mov	sp, r7
 8103492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103496:	4770      	bx	lr

08103498 <HAL_MMC_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_RxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8103498:	b480      	push	{r7}
 810349a:	b083      	sub	sp, #12
 810349c:	af00      	add	r7, sp, #0
 810349e:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_RxCpltCallback can be implemented in the user file
   */
}
 81034a0:	bf00      	nop
 81034a2:	370c      	adds	r7, #12
 81034a4:	46bd      	mov	sp, r7
 81034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034aa:	4770      	bx	lr

081034ac <HAL_MMC_ErrorCallback>:
  * @brief MMC error callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_ErrorCallback(MMC_HandleTypeDef *hmmc)
{
 81034ac:	b480      	push	{r7}
 81034ae:	b083      	sub	sp, #12
 81034b0:	af00      	add	r7, sp, #0
 81034b2:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_ErrorCallback can be implemented in the user file
   */
}
 81034b4:	bf00      	nop
 81034b6:	370c      	adds	r7, #12
 81034b8:	46bd      	mov	sp, r7
 81034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034be:	4770      	bx	lr

081034c0 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 81034c0:	b580      	push	{r7, lr}
 81034c2:	b084      	sub	sp, #16
 81034c4:	af00      	add	r7, sp, #0
 81034c6:	6078      	str	r0, [r7, #4]
 81034c8:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 81034ca:	2300      	movs	r3, #0
 81034cc:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 81034ce:	687b      	ldr	r3, [r7, #4]
 81034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81034d2:	0f9b      	lsrs	r3, r3, #30
 81034d4:	b2da      	uxtb	r2, r3
 81034d6:	683b      	ldr	r3, [r7, #0]
 81034d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81034de:	0e9b      	lsrs	r3, r3, #26
 81034e0:	b2db      	uxtb	r3, r3
 81034e2:	f003 030f 	and.w	r3, r3, #15
 81034e6:	b2da      	uxtb	r2, r3
 81034e8:	683b      	ldr	r3, [r7, #0]
 81034ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81034f0:	0e1b      	lsrs	r3, r3, #24
 81034f2:	b2db      	uxtb	r3, r3
 81034f4:	f003 0303 	and.w	r3, r3, #3
 81034f8:	b2da      	uxtb	r2, r3
 81034fa:	683b      	ldr	r3, [r7, #0]
 81034fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103502:	0c1b      	lsrs	r3, r3, #16
 8103504:	b2da      	uxtb	r2, r3
 8103506:	683b      	ldr	r3, [r7, #0]
 8103508:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810350e:	0a1b      	lsrs	r3, r3, #8
 8103510:	b2da      	uxtb	r2, r3
 8103512:	683b      	ldr	r3, [r7, #0]
 8103514:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8103516:	687b      	ldr	r3, [r7, #4]
 8103518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810351a:	b2da      	uxtb	r2, r3
 810351c:	683b      	ldr	r3, [r7, #0]
 810351e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103524:	0d1b      	lsrs	r3, r3, #20
 8103526:	b29a      	uxth	r2, r3
 8103528:	683b      	ldr	r3, [r7, #0]
 810352a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103530:	0c1b      	lsrs	r3, r3, #16
 8103532:	b2db      	uxtb	r3, r3
 8103534:	f003 030f 	and.w	r3, r3, #15
 8103538:	b2da      	uxtb	r2, r3
 810353a:	683b      	ldr	r3, [r7, #0]
 810353c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103542:	0bdb      	lsrs	r3, r3, #15
 8103544:	b2db      	uxtb	r3, r3
 8103546:	f003 0301 	and.w	r3, r3, #1
 810354a:	b2da      	uxtb	r2, r3
 810354c:	683b      	ldr	r3, [r7, #0]
 810354e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103554:	0b9b      	lsrs	r3, r3, #14
 8103556:	b2db      	uxtb	r3, r3
 8103558:	f003 0301 	and.w	r3, r3, #1
 810355c:	b2da      	uxtb	r2, r3
 810355e:	683b      	ldr	r3, [r7, #0]
 8103560:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103566:	0b5b      	lsrs	r3, r3, #13
 8103568:	b2db      	uxtb	r3, r3
 810356a:	f003 0301 	and.w	r3, r3, #1
 810356e:	b2da      	uxtb	r2, r3
 8103570:	683b      	ldr	r3, [r7, #0]
 8103572:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103578:	0b1b      	lsrs	r3, r3, #12
 810357a:	b2db      	uxtb	r3, r3
 810357c:	f003 0301 	and.w	r3, r3, #1
 8103580:	b2da      	uxtb	r2, r3
 8103582:	683b      	ldr	r3, [r7, #0]
 8103584:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8103586:	683b      	ldr	r3, [r7, #0]
 8103588:	2200      	movs	r2, #0
 810358a:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 810358c:	f107 010c 	add.w	r1, r7, #12
 8103590:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8103594:	22d4      	movs	r2, #212	@ 0xd4
 8103596:	6878      	ldr	r0, [r7, #4]
 8103598:	f000 fc4c 	bl	8103e34 <MMC_ReadExtCSD>
 810359c:	4603      	mov	r3, r0
 810359e:	2b00      	cmp	r3, #0
 81035a0:	d001      	beq.n	81035a6 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 81035a2:	2301      	movs	r3, #1
 81035a4:	e129      	b.n	81037fa <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 81035a6:	687b      	ldr	r3, [r7, #4]
 81035a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81035aa:	2b00      	cmp	r3, #0
 81035ac:	d163      	bne.n	8103676 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81035b2:	009a      	lsls	r2, r3, #2
 81035b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 81035b8:	4013      	ands	r3, r2
 81035ba:	687a      	ldr	r2, [r7, #4]
 81035bc:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 81035be:	0f92      	lsrs	r2, r2, #30
 81035c0:	431a      	orrs	r2, r3
 81035c2:	683b      	ldr	r3, [r7, #0]
 81035c4:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81035ca:	0edb      	lsrs	r3, r3, #27
 81035cc:	b2db      	uxtb	r3, r3
 81035ce:	f003 0307 	and.w	r3, r3, #7
 81035d2:	b2da      	uxtb	r2, r3
 81035d4:	683b      	ldr	r3, [r7, #0]
 81035d6:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 81035d8:	687b      	ldr	r3, [r7, #4]
 81035da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81035dc:	0e1b      	lsrs	r3, r3, #24
 81035de:	b2db      	uxtb	r3, r3
 81035e0:	f003 0307 	and.w	r3, r3, #7
 81035e4:	b2da      	uxtb	r2, r3
 81035e6:	683b      	ldr	r3, [r7, #0]
 81035e8:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 81035ea:	687b      	ldr	r3, [r7, #4]
 81035ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81035ee:	0d5b      	lsrs	r3, r3, #21
 81035f0:	b2db      	uxtb	r3, r3
 81035f2:	f003 0307 	and.w	r3, r3, #7
 81035f6:	b2da      	uxtb	r2, r3
 81035f8:	683b      	ldr	r3, [r7, #0]
 81035fa:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 81035fc:	687b      	ldr	r3, [r7, #4]
 81035fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103600:	0c9b      	lsrs	r3, r3, #18
 8103602:	b2db      	uxtb	r3, r3
 8103604:	f003 0307 	and.w	r3, r3, #7
 8103608:	b2da      	uxtb	r2, r3
 810360a:	683b      	ldr	r3, [r7, #0]
 810360c:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 810360e:	687b      	ldr	r3, [r7, #4]
 8103610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103612:	0bdb      	lsrs	r3, r3, #15
 8103614:	b2db      	uxtb	r3, r3
 8103616:	f003 0307 	and.w	r3, r3, #7
 810361a:	b2da      	uxtb	r2, r3
 810361c:	683b      	ldr	r3, [r7, #0]
 810361e:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8103620:	683b      	ldr	r3, [r7, #0]
 8103622:	691b      	ldr	r3, [r3, #16]
 8103624:	1c5a      	adds	r2, r3, #1
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 810362a:	683b      	ldr	r3, [r7, #0]
 810362c:	7e1b      	ldrb	r3, [r3, #24]
 810362e:	b2db      	uxtb	r3, r3
 8103630:	f003 0307 	and.w	r3, r3, #7
 8103634:	3302      	adds	r3, #2
 8103636:	2201      	movs	r2, #1
 8103638:	fa02 f303 	lsl.w	r3, r2, r3
 810363c:	687a      	ldr	r2, [r7, #4]
 810363e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8103640:	fb03 f202 	mul.w	r2, r3, r2
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8103648:	683b      	ldr	r3, [r7, #0]
 810364a:	7a1b      	ldrb	r3, [r3, #8]
 810364c:	b2db      	uxtb	r3, r3
 810364e:	f003 030f 	and.w	r3, r3, #15
 8103652:	2201      	movs	r2, #1
 8103654:	409a      	lsls	r2, r3
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	64da      	str	r2, [r3, #76]	@ 0x4c

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 810365a:	687b      	ldr	r3, [r7, #4]
 810365c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810365e:	687a      	ldr	r2, [r7, #4]
 8103660:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8103662:	0a52      	lsrs	r2, r2, #9
 8103664:	fb03 f202 	mul.w	r2, r3, r2
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8103672:	655a      	str	r2, [r3, #84]	@ 0x54
 8103674:	e023      	b.n	81036be <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810367a:	2b01      	cmp	r3, #1
 810367c:	d10f      	bne.n	810369e <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 810367e:	68fa      	ldr	r2, [r7, #12]
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8103692:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	655a      	str	r2, [r3, #84]	@ 0x54
 810369c:	e00f      	b.n	81036be <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	681b      	ldr	r3, [r3, #0]
 81036a2:	4a58      	ldr	r2, [pc, #352]	@ (8103804 <HAL_MMC_GetCardCSD+0x344>)
 81036a4:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 81036a6:	687b      	ldr	r3, [r7, #4]
 81036a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81036aa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 81036ae:	687b      	ldr	r3, [r7, #4]
 81036b0:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	2201      	movs	r2, #1
 81036b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 81036ba:	2301      	movs	r3, #1
 81036bc:	e09d      	b.n	81037fa <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81036c2:	0b9b      	lsrs	r3, r3, #14
 81036c4:	b2db      	uxtb	r3, r3
 81036c6:	f003 0301 	and.w	r3, r3, #1
 81036ca:	b2da      	uxtb	r2, r3
 81036cc:	683b      	ldr	r3, [r7, #0]
 81036ce:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81036d4:	09db      	lsrs	r3, r3, #7
 81036d6:	b2db      	uxtb	r3, r3
 81036d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81036dc:	b2da      	uxtb	r2, r3
 81036de:	683b      	ldr	r3, [r7, #0]
 81036e0:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81036e6:	b2db      	uxtb	r3, r3
 81036e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81036ec:	b2da      	uxtb	r2, r3
 81036ee:	683b      	ldr	r3, [r7, #0]
 81036f0:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81036f6:	0fdb      	lsrs	r3, r3, #31
 81036f8:	b2da      	uxtb	r2, r3
 81036fa:	683b      	ldr	r3, [r7, #0]
 81036fc:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103702:	0f5b      	lsrs	r3, r3, #29
 8103704:	b2db      	uxtb	r3, r3
 8103706:	f003 0303 	and.w	r3, r3, #3
 810370a:	b2da      	uxtb	r2, r3
 810370c:	683b      	ldr	r3, [r7, #0]
 810370e:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103714:	0e9b      	lsrs	r3, r3, #26
 8103716:	b2db      	uxtb	r3, r3
 8103718:	f003 0307 	and.w	r3, r3, #7
 810371c:	b2da      	uxtb	r2, r3
 810371e:	683b      	ldr	r3, [r7, #0]
 8103720:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8103722:	687b      	ldr	r3, [r7, #4]
 8103724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103726:	0d9b      	lsrs	r3, r3, #22
 8103728:	b2db      	uxtb	r3, r3
 810372a:	f003 030f 	and.w	r3, r3, #15
 810372e:	b2da      	uxtb	r2, r3
 8103730:	683b      	ldr	r3, [r7, #0]
 8103732:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103738:	0d5b      	lsrs	r3, r3, #21
 810373a:	b2db      	uxtb	r3, r3
 810373c:	f003 0301 	and.w	r3, r3, #1
 8103740:	b2da      	uxtb	r2, r3
 8103742:	683b      	ldr	r3, [r7, #0]
 8103744:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8103748:	683b      	ldr	r3, [r7, #0]
 810374a:	2200      	movs	r2, #0
 810374c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8103750:	687b      	ldr	r3, [r7, #4]
 8103752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103754:	0c1b      	lsrs	r3, r3, #16
 8103756:	b2db      	uxtb	r3, r3
 8103758:	f003 0301 	and.w	r3, r3, #1
 810375c:	b2da      	uxtb	r2, r3
 810375e:	683b      	ldr	r3, [r7, #0]
 8103760:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8103764:	687b      	ldr	r3, [r7, #4]
 8103766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103768:	0bdb      	lsrs	r3, r3, #15
 810376a:	b2db      	uxtb	r3, r3
 810376c:	f003 0301 	and.w	r3, r3, #1
 8103770:	b2da      	uxtb	r2, r3
 8103772:	683b      	ldr	r3, [r7, #0]
 8103774:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8103778:	687b      	ldr	r3, [r7, #4]
 810377a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810377c:	0b9b      	lsrs	r3, r3, #14
 810377e:	b2db      	uxtb	r3, r3
 8103780:	f003 0301 	and.w	r3, r3, #1
 8103784:	b2da      	uxtb	r2, r3
 8103786:	683b      	ldr	r3, [r7, #0]
 8103788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103790:	0b5b      	lsrs	r3, r3, #13
 8103792:	b2db      	uxtb	r3, r3
 8103794:	f003 0301 	and.w	r3, r3, #1
 8103798:	b2da      	uxtb	r2, r3
 810379a:	683b      	ldr	r3, [r7, #0]
 810379c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81037a4:	0b1b      	lsrs	r3, r3, #12
 81037a6:	b2db      	uxtb	r3, r3
 81037a8:	f003 0301 	and.w	r3, r3, #1
 81037ac:	b2da      	uxtb	r2, r3
 81037ae:	683b      	ldr	r3, [r7, #0]
 81037b0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81037b8:	0a9b      	lsrs	r3, r3, #10
 81037ba:	b2db      	uxtb	r3, r3
 81037bc:	f003 0303 	and.w	r3, r3, #3
 81037c0:	b2da      	uxtb	r2, r3
 81037c2:	683b      	ldr	r3, [r7, #0]
 81037c4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81037cc:	0a1b      	lsrs	r3, r3, #8
 81037ce:	b2db      	uxtb	r3, r3
 81037d0:	f003 0303 	and.w	r3, r3, #3
 81037d4:	b2da      	uxtb	r2, r3
 81037d6:	683b      	ldr	r3, [r7, #0]
 81037d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81037e0:	085b      	lsrs	r3, r3, #1
 81037e2:	b2db      	uxtb	r3, r3
 81037e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81037e8:	b2da      	uxtb	r2, r3
 81037ea:	683b      	ldr	r3, [r7, #0]
 81037ec:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 81037f0:	683b      	ldr	r3, [r7, #0]
 81037f2:	2201      	movs	r2, #1
 81037f4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 81037f8:	2300      	movs	r3, #0
}
 81037fa:	4618      	mov	r0, r3
 81037fc:	3710      	adds	r7, #16
 81037fe:	46bd      	mov	sp, r7
 8103800:	bd80      	pop	{r7, pc}
 8103802:	bf00      	nop
 8103804:	1fe00fff 	.word	0x1fe00fff

08103808 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8103808:	b580      	push	{r7, lr}
 810380a:	b08e      	sub	sp, #56	@ 0x38
 810380c:	af00      	add	r7, sp, #0
 810380e:	60f8      	str	r0, [r7, #12]
 8103810:	60b9      	str	r1, [r7, #8]
 8103812:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8103814:	f7ff f8c6 	bl	81029a4 <HAL_GetTick>
 8103818:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 810381a:	68bb      	ldr	r3, [r7, #8]
 810381c:	2b00      	cmp	r3, #0
 810381e:	d107      	bne.n	8103830 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8103820:	68fb      	ldr	r3, [r7, #12]
 8103822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103824:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8103828:	68fb      	ldr	r3, [r7, #12]
 810382a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 810382c:	2301      	movs	r3, #1
 810382e:	e0de      	b.n	81039ee <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8103830:	68fb      	ldr	r3, [r7, #12]
 8103832:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8103836:	b2db      	uxtb	r3, r3
 8103838:	2b01      	cmp	r3, #1
 810383a:	f040 80d7 	bne.w	81039ec <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 810383e:	68fb      	ldr	r3, [r7, #12]
 8103840:	2200      	movs	r2, #0
 8103842:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8103844:	68fb      	ldr	r3, [r7, #12]
 8103846:	2203      	movs	r2, #3
 8103848:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 810384c:	68fb      	ldr	r3, [r7, #12]
 810384e:	681b      	ldr	r3, [r3, #0]
 8103850:	2200      	movs	r2, #0
 8103852:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8103854:	68bb      	ldr	r3, [r7, #8]
 8103856:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8103858:	f04f 33ff 	mov.w	r3, #4294967295
 810385c:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 810385e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8103862:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8103864:	2390      	movs	r3, #144	@ 0x90
 8103866:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8103868:	2302      	movs	r3, #2
 810386a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810386c:	2300      	movs	r3, #0
 810386e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8103870:	2300      	movs	r3, #0
 8103872:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8103874:	68fb      	ldr	r3, [r7, #12]
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	f107 0210 	add.w	r2, r7, #16
 810387c:	4611      	mov	r1, r2
 810387e:	4618      	mov	r0, r3
 8103880:	f006 fac2 	bl	8109e08 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8103884:	68fb      	ldr	r3, [r7, #12]
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	68da      	ldr	r2, [r3, #12]
 810388a:	68fb      	ldr	r3, [r7, #12]
 810388c:	681b      	ldr	r3, [r3, #0]
 810388e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8103892:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8103894:	68fb      	ldr	r3, [r7, #12]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	2100      	movs	r1, #0
 810389a:	4618      	mov	r0, r3
 810389c:	f006 fc4b 	bl	810a136 <SDMMC_CmdSendEXTCSD>
 81038a0:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 81038a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81038a4:	2b00      	cmp	r3, #0
 81038a6:	d045      	beq.n	8103934 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81038a8:	68fb      	ldr	r3, [r7, #12]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	4a52      	ldr	r2, [pc, #328]	@ (81039f8 <HAL_MMC_GetCardExtCSD+0x1f0>)
 81038ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 81038b0:	68fb      	ldr	r3, [r7, #12]
 81038b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81038b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81038b6:	431a      	orrs	r2, r3
 81038b8:	68fb      	ldr	r3, [r7, #12]
 81038ba:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 81038bc:	68fb      	ldr	r3, [r7, #12]
 81038be:	2201      	movs	r2, #1
 81038c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 81038c4:	2301      	movs	r3, #1
 81038c6:	e092      	b.n	81039ee <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 81038c8:	68fb      	ldr	r3, [r7, #12]
 81038ca:	681b      	ldr	r3, [r3, #0]
 81038cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81038ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81038d2:	2b00      	cmp	r3, #0
 81038d4:	d013      	beq.n	81038fe <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 81038d6:	2300      	movs	r3, #0
 81038d8:	637b      	str	r3, [r7, #52]	@ 0x34
 81038da:	e00d      	b.n	81038f8 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 81038dc:	68fb      	ldr	r3, [r7, #12]
 81038de:	681b      	ldr	r3, [r3, #0]
 81038e0:	4618      	mov	r0, r3
 81038e2:	f006 fa09 	bl	8109cf8 <SDMMC_ReadFIFO>
 81038e6:	4602      	mov	r2, r0
 81038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81038ea:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 81038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81038ee:	3304      	adds	r3, #4
 81038f0:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 81038f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81038f4:	3301      	adds	r3, #1
 81038f6:	637b      	str	r3, [r7, #52]	@ 0x34
 81038f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81038fa:	2b07      	cmp	r3, #7
 81038fc:	d9ee      	bls.n	81038dc <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 81038fe:	f7ff f851 	bl	81029a4 <HAL_GetTick>
 8103902:	4602      	mov	r2, r0
 8103904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103906:	1ad3      	subs	r3, r2, r3
 8103908:	687a      	ldr	r2, [r7, #4]
 810390a:	429a      	cmp	r2, r3
 810390c:	d902      	bls.n	8103914 <HAL_MMC_GetCardExtCSD+0x10c>
 810390e:	687b      	ldr	r3, [r7, #4]
 8103910:	2b00      	cmp	r3, #0
 8103912:	d10f      	bne.n	8103934 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103914:	68fb      	ldr	r3, [r7, #12]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	4a37      	ldr	r2, [pc, #220]	@ (81039f8 <HAL_MMC_GetCardExtCSD+0x1f0>)
 810391a:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 810391c:	68fb      	ldr	r3, [r7, #12]
 810391e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103920:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8103924:	68fb      	ldr	r3, [r7, #12]
 8103926:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8103928:	68fb      	ldr	r3, [r7, #12]
 810392a:	2201      	movs	r2, #1
 810392c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8103930:	2303      	movs	r3, #3
 8103932:	e05c      	b.n	81039ee <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8103934:	68fb      	ldr	r3, [r7, #12]
 8103936:	681b      	ldr	r3, [r3, #0]
 8103938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810393a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 810393e:	2b00      	cmp	r3, #0
 8103940:	d0c2      	beq.n	81038c8 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8103942:	68fb      	ldr	r3, [r7, #12]
 8103944:	681b      	ldr	r3, [r3, #0]
 8103946:	68da      	ldr	r2, [r3, #12]
 8103948:	68fb      	ldr	r3, [r7, #12]
 810394a:	681b      	ldr	r3, [r3, #0]
 810394c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8103950:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8103952:	68fb      	ldr	r3, [r7, #12]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103958:	f003 0308 	and.w	r3, r3, #8
 810395c:	2b00      	cmp	r3, #0
 810395e:	d00f      	beq.n	8103980 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103960:	68fb      	ldr	r3, [r7, #12]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	4a24      	ldr	r2, [pc, #144]	@ (81039f8 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103966:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8103968:	68fb      	ldr	r3, [r7, #12]
 810396a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810396c:	f043 0208 	orr.w	r2, r3, #8
 8103970:	68fb      	ldr	r3, [r7, #12]
 8103972:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103974:	68fb      	ldr	r3, [r7, #12]
 8103976:	2201      	movs	r2, #1
 8103978:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 810397c:	2301      	movs	r3, #1
 810397e:	e036      	b.n	81039ee <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8103980:	68fb      	ldr	r3, [r7, #12]
 8103982:	681b      	ldr	r3, [r3, #0]
 8103984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103986:	f003 0302 	and.w	r3, r3, #2
 810398a:	2b00      	cmp	r3, #0
 810398c:	d00f      	beq.n	81039ae <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810398e:	68fb      	ldr	r3, [r7, #12]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	4a19      	ldr	r2, [pc, #100]	@ (81039f8 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103994:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8103996:	68fb      	ldr	r3, [r7, #12]
 8103998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810399a:	f043 0202 	orr.w	r2, r3, #2
 810399e:	68fb      	ldr	r3, [r7, #12]
 81039a0:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 81039a2:	68fb      	ldr	r3, [r7, #12]
 81039a4:	2201      	movs	r2, #1
 81039a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 81039aa:	2301      	movs	r3, #1
 81039ac:	e01f      	b.n	81039ee <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 81039ae:	68fb      	ldr	r3, [r7, #12]
 81039b0:	681b      	ldr	r3, [r3, #0]
 81039b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81039b4:	f003 0320 	and.w	r3, r3, #32
 81039b8:	2b00      	cmp	r3, #0
 81039ba:	d00f      	beq.n	81039dc <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81039bc:	68fb      	ldr	r3, [r7, #12]
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	4a0d      	ldr	r2, [pc, #52]	@ (81039f8 <HAL_MMC_GetCardExtCSD+0x1f0>)
 81039c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 81039c4:	68fb      	ldr	r3, [r7, #12]
 81039c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81039c8:	f043 0220 	orr.w	r2, r3, #32
 81039cc:	68fb      	ldr	r3, [r7, #12]
 81039ce:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 81039d0:	68fb      	ldr	r3, [r7, #12]
 81039d2:	2201      	movs	r2, #1
 81039d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 81039d8:	2301      	movs	r3, #1
 81039da:	e008      	b.n	81039ee <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 81039dc:	68fb      	ldr	r3, [r7, #12]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	4a06      	ldr	r2, [pc, #24]	@ (81039fc <HAL_MMC_GetCardExtCSD+0x1f4>)
 81039e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 81039e4:	68fb      	ldr	r3, [r7, #12]
 81039e6:	2201      	movs	r2, #1
 81039e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 81039ec:	2300      	movs	r3, #0
}
 81039ee:	4618      	mov	r0, r3
 81039f0:	3738      	adds	r7, #56	@ 0x38
 81039f2:	46bd      	mov	sp, r7
 81039f4:	bd80      	pop	{r7, pc}
 81039f6:	bf00      	nop
 81039f8:	1fe00fff 	.word	0x1fe00fff
 81039fc:	18000f3a 	.word	0x18000f3a

08103a00 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8103a00:	b5b0      	push	{r4, r5, r7, lr}
 8103a02:	b08c      	sub	sp, #48	@ 0x30
 8103a04:	af02      	add	r7, sp, #8
 8103a06:	6078      	str	r0, [r7, #4]
 8103a08:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8103a0a:	2300      	movs	r3, #0
 8103a0c:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	2203      	movs	r2, #3
 8103a12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	685b      	ldr	r3, [r3, #4]
 8103a1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8103a20:	2b00      	cmp	r3, #0
 8103a22:	d014      	beq.n	8103a4e <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	681b      	ldr	r3, [r3, #0]
 8103a28:	685b      	ldr	r3, [r3, #4]
 8103a2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103a2e:	2b00      	cmp	r3, #0
 8103a30:	d006      	beq.n	8103a40 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 8103a32:	2204      	movs	r2, #4
 8103a34:	6839      	ldr	r1, [r7, #0]
 8103a36:	6878      	ldr	r0, [r7, #4]
 8103a38:	f000 fb80 	bl	810413c <MMC_PwrClassUpdate>
 8103a3c:	6238      	str	r0, [r7, #32]
 8103a3e:	e00c      	b.n	8103a5a <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8103a40:	2202      	movs	r2, #2
 8103a42:	6839      	ldr	r1, [r7, #0]
 8103a44:	6878      	ldr	r0, [r7, #4]
 8103a46:	f000 fb79 	bl	810413c <MMC_PwrClassUpdate>
 8103a4a:	6238      	str	r0, [r7, #32]
 8103a4c:	e005      	b.n	8103a5a <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8103a4e:	2201      	movs	r2, #1
 8103a50:	6839      	ldr	r1, [r7, #0]
 8103a52:	6878      	ldr	r0, [r7, #4]
 8103a54:	f000 fb72 	bl	810413c <MMC_PwrClassUpdate>
 8103a58:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8103a5a:	6a3b      	ldr	r3, [r7, #32]
 8103a5c:	2b00      	cmp	r3, #0
 8103a5e:	d17b      	bne.n	8103b58 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8103a60:	683b      	ldr	r3, [r7, #0]
 8103a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103a66:	d107      	bne.n	8103a78 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	4946      	ldr	r1, [pc, #280]	@ (8103b88 <HAL_MMC_ConfigWideBusOperation+0x188>)
 8103a6e:	4618      	mov	r0, r3
 8103a70:	f006 fb3e 	bl	810a0f0 <SDMMC_CmdSwitch>
 8103a74:	6238      	str	r0, [r7, #32]
 8103a76:	e019      	b.n	8103aac <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8103a78:	683b      	ldr	r3, [r7, #0]
 8103a7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103a7e:	d107      	bne.n	8103a90 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	681b      	ldr	r3, [r3, #0]
 8103a84:	4941      	ldr	r1, [pc, #260]	@ (8103b8c <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8103a86:	4618      	mov	r0, r3
 8103a88:	f006 fb32 	bl	810a0f0 <SDMMC_CmdSwitch>
 8103a8c:	6238      	str	r0, [r7, #32]
 8103a8e:	e00d      	b.n	8103aac <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8103a90:	683b      	ldr	r3, [r7, #0]
 8103a92:	2b00      	cmp	r3, #0
 8103a94:	d107      	bne.n	8103aa6 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	493d      	ldr	r1, [pc, #244]	@ (8103b90 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8103a9c:	4618      	mov	r0, r3
 8103a9e:	f006 fb27 	bl	810a0f0 <SDMMC_CmdSwitch>
 8103aa2:	6238      	str	r0, [r7, #32]
 8103aa4:	e002      	b.n	8103aac <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8103aa6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8103aaa:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8103aac:	6a3b      	ldr	r3, [r7, #32]
 8103aae:	2b00      	cmp	r3, #0
 8103ab0:	d152      	bne.n	8103b58 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8103ab2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103ab6:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	681a      	ldr	r2, [r3, #0]
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103ac0:	041b      	lsls	r3, r3, #16
 8103ac2:	4619      	mov	r1, r3
 8103ac4:	4610      	mov	r0, r2
 8103ac6:	f006 fad0 	bl	810a06a <SDMMC_CmdSendStatus>
 8103aca:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8103acc:	6a3b      	ldr	r3, [r7, #32]
 8103ace:	2b00      	cmp	r3, #0
 8103ad0:	d112      	bne.n	8103af8 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	2100      	movs	r1, #0
 8103ad8:	4618      	mov	r0, r3
 8103ada:	f006 f982 	bl	8109de2 <SDMMC_GetResponse>
 8103ade:	61f8      	str	r0, [r7, #28]
        count--;
 8103ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103ae2:	3b01      	subs	r3, #1
 8103ae4:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8103ae6:	69fb      	ldr	r3, [r7, #28]
 8103ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103aec:	2b00      	cmp	r3, #0
 8103aee:	d104      	bne.n	8103afa <HAL_MMC_ConfigWideBusOperation+0xfa>
 8103af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103af2:	2b00      	cmp	r3, #0
 8103af4:	d1e0      	bne.n	8103ab8 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8103af6:	e000      	b.n	8103afa <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8103af8:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8103afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103afc:	2b00      	cmp	r3, #0
 8103afe:	d025      	beq.n	8103b4c <HAL_MMC_ConfigWideBusOperation+0x14c>
 8103b00:	6a3b      	ldr	r3, [r7, #32]
 8103b02:	2b00      	cmp	r3, #0
 8103b04:	d122      	bne.n	8103b4c <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8103b06:	69fb      	ldr	r3, [r7, #28]
 8103b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103b0c:	2b00      	cmp	r3, #0
 8103b0e:	d003      	beq.n	8103b18 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8103b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8103b14:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8103b16:	e01f      	b.n	8103b58 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	f107 0408 	add.w	r4, r7, #8
 8103b1e:	1d1d      	adds	r5, r3, #4
 8103b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103b24:	682b      	ldr	r3, [r5, #0]
 8103b26:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8103b28:	683b      	ldr	r3, [r7, #0]
 8103b2a:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	681c      	ldr	r4, [r3, #0]
 8103b30:	466a      	mov	r2, sp
 8103b32:	f107 0314 	add.w	r3, r7, #20
 8103b36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103b3a:	e882 0003 	stmia.w	r2, {r0, r1}
 8103b3e:	f107 0308 	add.w	r3, r7, #8
 8103b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103b44:	4620      	mov	r0, r4
 8103b46:	f006 f8ad 	bl	8109ca4 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8103b4a:	e005      	b.n	8103b58 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8103b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103b4e:	2b00      	cmp	r3, #0
 8103b50:	d102      	bne.n	8103b58 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8103b52:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8103b56:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	2201      	movs	r2, #1
 8103b5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 8103b60:	6a3b      	ldr	r3, [r7, #32]
 8103b62:	2b00      	cmp	r3, #0
 8103b64:	d00b      	beq.n	8103b7e <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8103b94 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8103b6c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8103b6e:	687b      	ldr	r3, [r7, #4]
 8103b70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103b72:	6a3b      	ldr	r3, [r7, #32]
 8103b74:	431a      	orrs	r2, r3
 8103b76:	687b      	ldr	r3, [r7, #4]
 8103b78:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8103b7a:	2301      	movs	r3, #1
 8103b7c:	e000      	b.n	8103b80 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 8103b7e:	2300      	movs	r3, #0
}
 8103b80:	4618      	mov	r0, r3
 8103b82:	3728      	adds	r7, #40	@ 0x28
 8103b84:	46bd      	mov	sp, r7
 8103b86:	bdb0      	pop	{r4, r5, r7, pc}
 8103b88:	03b70200 	.word	0x03b70200
 8103b8c:	03b70100 	.word	0x03b70100
 8103b90:	03b70000 	.word	0x03b70000
 8103b94:	1fe00fff 	.word	0x1fe00fff

08103b98 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8103b98:	b5b0      	push	{r4, r5, r7, lr}
 8103b9a:	b096      	sub	sp, #88	@ 0x58
 8103b9c:	af02      	add	r7, sp, #8
 8103b9e:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8103ba0:	2302      	movs	r3, #2
 8103ba2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	4618      	mov	r0, r3
 8103bac:	f006 f8d3 	bl	8109d56 <SDMMC_GetPowerState>
 8103bb0:	4603      	mov	r3, r0
 8103bb2:	2b00      	cmp	r3, #0
 8103bb4:	d102      	bne.n	8103bbc <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8103bb6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8103bba:	e0e6      	b.n	8103d8a <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	4618      	mov	r0, r3
 8103bc2:	f006 f9ee 	bl	8109fa2 <SDMMC_CmdSendCID>
 8103bc6:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103bca:	2b00      	cmp	r3, #0
 8103bcc:	d001      	beq.n	8103bd2 <MMC_InitCard+0x3a>
  {
    return errorstate;
 8103bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103bd0:	e0db      	b.n	8103d8a <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	681b      	ldr	r3, [r3, #0]
 8103bd6:	2100      	movs	r1, #0
 8103bd8:	4618      	mov	r0, r3
 8103bda:	f006 f902 	bl	8109de2 <SDMMC_GetResponse>
 8103bde:	4602      	mov	r2, r0
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	2104      	movs	r1, #4
 8103bea:	4618      	mov	r0, r3
 8103bec:	f006 f8f9 	bl	8109de2 <SDMMC_GetResponse>
 8103bf0:	4602      	mov	r2, r0
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8103bf6:	687b      	ldr	r3, [r7, #4]
 8103bf8:	681b      	ldr	r3, [r3, #0]
 8103bfa:	2108      	movs	r1, #8
 8103bfc:	4618      	mov	r0, r3
 8103bfe:	f006 f8f0 	bl	8109de2 <SDMMC_GetResponse>
 8103c02:	4602      	mov	r2, r0
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	681b      	ldr	r3, [r3, #0]
 8103c0c:	210c      	movs	r1, #12
 8103c0e:	4618      	mov	r0, r3
 8103c10:	f006 f8e7 	bl	8109de2 <SDMMC_GetResponse>
 8103c14:	4602      	mov	r2, r0
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8103c22:	4611      	mov	r1, r2
 8103c24:	4618      	mov	r0, r3
 8103c26:	f006 f9fb 	bl	810a020 <SDMMC_CmdSetRelAddMmc>
 8103c2a:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103c2e:	2b00      	cmp	r3, #0
 8103c30:	d001      	beq.n	8103c36 <MMC_InitCard+0x9e>
  {
    return errorstate;
 8103c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103c34:	e0a9      	b.n	8103d8a <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8103c36:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	681a      	ldr	r2, [r3, #0]
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103c46:	041b      	lsls	r3, r3, #16
 8103c48:	4619      	mov	r1, r3
 8103c4a:	4610      	mov	r0, r2
 8103c4c:	f006 f9c8 	bl	8109fe0 <SDMMC_CmdSendCSD>
 8103c50:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103c54:	2b00      	cmp	r3, #0
 8103c56:	d001      	beq.n	8103c5c <MMC_InitCard+0xc4>
  {
    return errorstate;
 8103c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103c5a:	e096      	b.n	8103d8a <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	681b      	ldr	r3, [r3, #0]
 8103c60:	2100      	movs	r1, #0
 8103c62:	4618      	mov	r0, r3
 8103c64:	f006 f8bd 	bl	8109de2 <SDMMC_GetResponse>
 8103c68:	4602      	mov	r2, r0
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	681b      	ldr	r3, [r3, #0]
 8103c72:	2104      	movs	r1, #4
 8103c74:	4618      	mov	r0, r3
 8103c76:	f006 f8b4 	bl	8109de2 <SDMMC_GetResponse>
 8103c7a:	4602      	mov	r2, r0
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	681b      	ldr	r3, [r3, #0]
 8103c84:	2108      	movs	r1, #8
 8103c86:	4618      	mov	r0, r3
 8103c88:	f006 f8ab 	bl	8109de2 <SDMMC_GetResponse>
 8103c8c:	4602      	mov	r2, r0
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8103c92:	687b      	ldr	r3, [r7, #4]
 8103c94:	681b      	ldr	r3, [r3, #0]
 8103c96:	210c      	movs	r1, #12
 8103c98:	4618      	mov	r0, r3
 8103c9a:	f006 f8a2 	bl	8109de2 <SDMMC_GetResponse>
 8103c9e:	4602      	mov	r2, r0
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	2104      	movs	r1, #4
 8103caa:	4618      	mov	r0, r3
 8103cac:	f006 f899 	bl	8109de2 <SDMMC_GetResponse>
 8103cb0:	4603      	mov	r3, r0
 8103cb2:	0d1a      	lsrs	r2, r3, #20
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	681a      	ldr	r2, [r3, #0]
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103cc0:	041b      	lsls	r3, r3, #16
 8103cc2:	4619      	mov	r1, r3
 8103cc4:	4610      	mov	r0, r2
 8103cc6:	f006 f92b 	bl	8109f20 <SDMMC_CmdSelDesel>
 8103cca:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103ccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103cce:	2b00      	cmp	r3, #0
 8103cd0:	d001      	beq.n	8103cd6 <MMC_InitCard+0x13e>
  {
    return errorstate;
 8103cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103cd4:	e059      	b.n	8103d8a <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8103cd6:	f107 031c 	add.w	r3, r7, #28
 8103cda:	4619      	mov	r1, r3
 8103cdc:	6878      	ldr	r0, [r7, #4]
 8103cde:	f7ff fbef 	bl	81034c0 <HAL_MMC_GetCardCSD>
 8103ce2:	4603      	mov	r3, r0
 8103ce4:	2b00      	cmp	r3, #0
 8103ce6:	d002      	beq.n	8103cee <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103cec:	e04d      	b.n	8103d8a <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	681a      	ldr	r2, [r3, #0]
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103cf6:	041b      	lsls	r3, r3, #16
 8103cf8:	4619      	mov	r1, r3
 8103cfa:	4610      	mov	r0, r2
 8103cfc:	f006 f9b5 	bl	810a06a <SDMMC_CmdSendStatus>
 8103d00:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103d04:	2b00      	cmp	r3, #0
 8103d06:	d005      	beq.n	8103d14 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103d0e:	431a      	orrs	r2, r3
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	3378      	adds	r3, #120	@ 0x78
 8103d18:	f04f 32ff 	mov.w	r2, #4294967295
 8103d1c:	4619      	mov	r1, r3
 8103d1e:	6878      	ldr	r0, [r7, #4]
 8103d20:	f7ff fd72 	bl	8103808 <HAL_MMC_GetCardExtCSD>
 8103d24:	4603      	mov	r3, r0
 8103d26:	2b00      	cmp	r3, #0
 8103d28:	d002      	beq.n	8103d30 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103d2e:	e02c      	b.n	8103d8a <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	681a      	ldr	r2, [r3, #0]
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103d38:	041b      	lsls	r3, r3, #16
 8103d3a:	4619      	mov	r1, r3
 8103d3c:	4610      	mov	r0, r2
 8103d3e:	f006 f994 	bl	810a06a <SDMMC_CmdSendStatus>
 8103d42:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103d46:	2b00      	cmp	r3, #0
 8103d48:	d005      	beq.n	8103d56 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103d50:	431a      	orrs	r2, r3
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8103d56:	687b      	ldr	r3, [r7, #4]
 8103d58:	f107 0408 	add.w	r4, r7, #8
 8103d5c:	1d1d      	adds	r5, r3, #4
 8103d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103d62:	682b      	ldr	r3, [r5, #0]
 8103d64:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8103d66:	2300      	movs	r3, #0
 8103d68:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	681c      	ldr	r4, [r3, #0]
 8103d6e:	466a      	mov	r2, sp
 8103d70:	f107 0314 	add.w	r3, r7, #20
 8103d74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103d78:	e882 0003 	stmia.w	r2, {r0, r1}
 8103d7c:	f107 0308 	add.w	r3, r7, #8
 8103d80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103d82:	4620      	mov	r0, r4
 8103d84:	f005 ff8e 	bl	8109ca4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8103d88:	2300      	movs	r3, #0
}
 8103d8a:	4618      	mov	r0, r3
 8103d8c:	3750      	adds	r7, #80	@ 0x50
 8103d8e:	46bd      	mov	sp, r7
 8103d90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08103d94 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8103d94:	b580      	push	{r7, lr}
 8103d96:	b086      	sub	sp, #24
 8103d98:	af00      	add	r7, sp, #0
 8103d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8103d9c:	2300      	movs	r3, #0
 8103d9e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8103da0:	2300      	movs	r3, #0
 8103da2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8103da4:	2300      	movs	r3, #0
 8103da6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	681b      	ldr	r3, [r3, #0]
 8103dac:	4618      	mov	r0, r3
 8103dae:	f006 f8da 	bl	8109f66 <SDMMC_CmdGoIdleState>
 8103db2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103db4:	68fb      	ldr	r3, [r7, #12]
 8103db6:	2b00      	cmp	r3, #0
 8103db8:	d027      	beq.n	8103e0a <MMC_PowerON+0x76>
  {
    return errorstate;
 8103dba:	68fb      	ldr	r3, [r7, #12]
 8103dbc:	e034      	b.n	8103e28 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8103dbe:	68bb      	ldr	r3, [r7, #8]
 8103dc0:	1c5a      	adds	r2, r3, #1
 8103dc2:	60ba      	str	r2, [r7, #8]
 8103dc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8103dc8:	4293      	cmp	r3, r2
 8103dca:	d102      	bne.n	8103dd2 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8103dcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103dd0:	e02a      	b.n	8103e28 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	4916      	ldr	r1, [pc, #88]	@ (8103e30 <MMC_PowerON+0x9c>)
 8103dd8:	4618      	mov	r0, r3
 8103dda:	f006 f969 	bl	810a0b0 <SDMMC_CmdOpCondition>
 8103dde:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8103de0:	68fb      	ldr	r3, [r7, #12]
 8103de2:	2b00      	cmp	r3, #0
 8103de4:	d002      	beq.n	8103dec <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8103de6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8103dea:	e01d      	b.n	8103e28 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	681b      	ldr	r3, [r3, #0]
 8103df0:	2100      	movs	r1, #0
 8103df2:	4618      	mov	r0, r3
 8103df4:	f005 fff5 	bl	8109de2 <SDMMC_GetResponse>
 8103df8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8103dfa:	697b      	ldr	r3, [r7, #20]
 8103dfc:	0fdb      	lsrs	r3, r3, #31
 8103dfe:	2b01      	cmp	r3, #1
 8103e00:	d101      	bne.n	8103e06 <MMC_PowerON+0x72>
 8103e02:	2301      	movs	r3, #1
 8103e04:	e000      	b.n	8103e08 <MMC_PowerON+0x74>
 8103e06:	2300      	movs	r3, #0
 8103e08:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8103e0a:	693b      	ldr	r3, [r7, #16]
 8103e0c:	2b00      	cmp	r3, #0
 8103e0e:	d0d6      	beq.n	8103dbe <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8103e10:	697b      	ldr	r3, [r7, #20]
 8103e12:	0e1b      	lsrs	r3, r3, #24
 8103e14:	2bc0      	cmp	r3, #192	@ 0xc0
 8103e16:	d103      	bne.n	8103e20 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	2201      	movs	r2, #1
 8103e1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8103e1e:	e002      	b.n	8103e26 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8103e20:	687b      	ldr	r3, [r7, #4]
 8103e22:	2200      	movs	r2, #0
 8103e24:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 8103e26:	2300      	movs	r3, #0
}
 8103e28:	4618      	mov	r0, r3
 8103e2a:	3718      	adds	r7, #24
 8103e2c:	46bd      	mov	sp, r7
 8103e2e:	bd80      	pop	{r7, pc}
 8103e30:	c0ff8000 	.word	0xc0ff8000

08103e34 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8103e34:	b580      	push	{r7, lr}
 8103e36:	b090      	sub	sp, #64	@ 0x40
 8103e38:	af00      	add	r7, sp, #0
 8103e3a:	60f8      	str	r0, [r7, #12]
 8103e3c:	60b9      	str	r1, [r7, #8]
 8103e3e:	603b      	str	r3, [r7, #0]
 8103e40:	4613      	mov	r3, r2
 8103e42:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8103e44:	f7fe fdae 	bl	81029a4 <HAL_GetTick>
 8103e48:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 8103e4a:	2300      	movs	r3, #0
 8103e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8103e4e:	68fb      	ldr	r3, [r7, #12]
 8103e50:	2200      	movs	r2, #0
 8103e52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8103e54:	68fb      	ldr	r3, [r7, #12]
 8103e56:	681b      	ldr	r3, [r3, #0]
 8103e58:	2200      	movs	r2, #0
 8103e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8103e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8103e60:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 8103e62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8103e66:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8103e68:	2390      	movs	r3, #144	@ 0x90
 8103e6a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8103e6c:	2302      	movs	r3, #2
 8103e6e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8103e70:	2300      	movs	r3, #0
 8103e72:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8103e74:	2301      	movs	r3, #1
 8103e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8103e78:	68fb      	ldr	r3, [r7, #12]
 8103e7a:	681b      	ldr	r3, [r3, #0]
 8103e7c:	f107 0214 	add.w	r2, r7, #20
 8103e80:	4611      	mov	r1, r2
 8103e82:	4618      	mov	r0, r3
 8103e84:	f005 ffc0 	bl	8109e08 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8103e88:	68fb      	ldr	r3, [r7, #12]
 8103e8a:	681b      	ldr	r3, [r3, #0]
 8103e8c:	2100      	movs	r1, #0
 8103e8e:	4618      	mov	r0, r3
 8103e90:	f006 f951 	bl	810a136 <SDMMC_CmdSendEXTCSD>
 8103e94:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103e98:	2b00      	cmp	r3, #0
 8103e9a:	d04e      	beq.n	8103f3a <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103e9c:	68fb      	ldr	r3, [r7, #12]
 8103e9e:	681b      	ldr	r3, [r3, #0]
 8103ea0:	4a5c      	ldr	r2, [pc, #368]	@ (8104014 <MMC_ReadExtCSD+0x1e0>)
 8103ea2:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103eaa:	431a      	orrs	r2, r3
 8103eac:	68fb      	ldr	r3, [r7, #12]
 8103eae:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103eb0:	68fb      	ldr	r3, [r7, #12]
 8103eb2:	2201      	movs	r2, #1
 8103eb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103eb8:	2301      	movs	r3, #1
 8103eba:	e0a6      	b.n	810400a <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8103ebc:	68fb      	ldr	r3, [r7, #12]
 8103ebe:	681b      	ldr	r3, [r3, #0]
 8103ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103ec2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103ec6:	2b00      	cmp	r3, #0
 8103ec8:	d01c      	beq.n	8103f04 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8103eca:	2300      	movs	r3, #0
 8103ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103ece:	e013      	b.n	8103ef8 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8103ed0:	68fb      	ldr	r3, [r7, #12]
 8103ed2:	681b      	ldr	r3, [r3, #0]
 8103ed4:	4618      	mov	r0, r3
 8103ed6:	f005 ff0f 	bl	8109cf8 <SDMMC_ReadFIFO>
 8103eda:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8103edc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8103ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103ee0:	4413      	add	r3, r2
 8103ee2:	88fa      	ldrh	r2, [r7, #6]
 8103ee4:	0892      	lsrs	r2, r2, #2
 8103ee6:	b292      	uxth	r2, r2
 8103ee8:	4293      	cmp	r3, r2
 8103eea:	d102      	bne.n	8103ef2 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8103eec:	68bb      	ldr	r3, [r7, #8]
 8103eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8103ef0:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8103ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103ef4:	3301      	adds	r3, #1
 8103ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103efa:	2b07      	cmp	r3, #7
 8103efc:	d9e8      	bls.n	8103ed0 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8103efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103f00:	3308      	adds	r3, #8
 8103f02:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8103f04:	f7fe fd4e 	bl	81029a4 <HAL_GetTick>
 8103f08:	4602      	mov	r2, r0
 8103f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103f0c:	1ad3      	subs	r3, r2, r3
 8103f0e:	683a      	ldr	r2, [r7, #0]
 8103f10:	429a      	cmp	r2, r3
 8103f12:	d902      	bls.n	8103f1a <MMC_ReadExtCSD+0xe6>
 8103f14:	683b      	ldr	r3, [r7, #0]
 8103f16:	2b00      	cmp	r3, #0
 8103f18:	d10f      	bne.n	8103f3a <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103f1a:	68fb      	ldr	r3, [r7, #12]
 8103f1c:	681b      	ldr	r3, [r3, #0]
 8103f1e:	4a3d      	ldr	r2, [pc, #244]	@ (8104014 <MMC_ReadExtCSD+0x1e0>)
 8103f20:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8103f22:	68fb      	ldr	r3, [r7, #12]
 8103f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f26:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8103f2a:	68fb      	ldr	r3, [r7, #12]
 8103f2c:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103f2e:	68fb      	ldr	r3, [r7, #12]
 8103f30:	2201      	movs	r2, #1
 8103f32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8103f36:	2303      	movs	r3, #3
 8103f38:	e067      	b.n	810400a <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8103f3a:	68fb      	ldr	r3, [r7, #12]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f40:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8103f44:	2b00      	cmp	r3, #0
 8103f46:	d0b9      	beq.n	8103ebc <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8103f48:	68fb      	ldr	r3, [r7, #12]
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f4e:	f003 0308 	and.w	r3, r3, #8
 8103f52:	2b00      	cmp	r3, #0
 8103f54:	d00f      	beq.n	8103f76 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103f56:	68fb      	ldr	r3, [r7, #12]
 8103f58:	681b      	ldr	r3, [r3, #0]
 8103f5a:	4a2e      	ldr	r2, [pc, #184]	@ (8104014 <MMC_ReadExtCSD+0x1e0>)
 8103f5c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8103f5e:	68fb      	ldr	r3, [r7, #12]
 8103f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f62:	f043 0208 	orr.w	r2, r3, #8
 8103f66:	68fb      	ldr	r3, [r7, #12]
 8103f68:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103f6a:	68fb      	ldr	r3, [r7, #12]
 8103f6c:	2201      	movs	r2, #1
 8103f6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103f72:	2301      	movs	r3, #1
 8103f74:	e049      	b.n	810400a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8103f76:	68fb      	ldr	r3, [r7, #12]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f7c:	f003 0302 	and.w	r3, r3, #2
 8103f80:	2b00      	cmp	r3, #0
 8103f82:	d00f      	beq.n	8103fa4 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103f84:	68fb      	ldr	r3, [r7, #12]
 8103f86:	681b      	ldr	r3, [r3, #0]
 8103f88:	4a22      	ldr	r2, [pc, #136]	@ (8104014 <MMC_ReadExtCSD+0x1e0>)
 8103f8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8103f8c:	68fb      	ldr	r3, [r7, #12]
 8103f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f90:	f043 0202 	orr.w	r2, r3, #2
 8103f94:	68fb      	ldr	r3, [r7, #12]
 8103f96:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103f98:	68fb      	ldr	r3, [r7, #12]
 8103f9a:	2201      	movs	r2, #1
 8103f9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103fa0:	2301      	movs	r3, #1
 8103fa2:	e032      	b.n	810400a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8103fa4:	68fb      	ldr	r3, [r7, #12]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103faa:	f003 0320 	and.w	r3, r3, #32
 8103fae:	2b00      	cmp	r3, #0
 8103fb0:	d00f      	beq.n	8103fd2 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103fb2:	68fb      	ldr	r3, [r7, #12]
 8103fb4:	681b      	ldr	r3, [r3, #0]
 8103fb6:	4a17      	ldr	r2, [pc, #92]	@ (8104014 <MMC_ReadExtCSD+0x1e0>)
 8103fb8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8103fba:	68fb      	ldr	r3, [r7, #12]
 8103fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103fbe:	f043 0220 	orr.w	r2, r3, #32
 8103fc2:	68fb      	ldr	r3, [r7, #12]
 8103fc4:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103fc6:	68fb      	ldr	r3, [r7, #12]
 8103fc8:	2201      	movs	r2, #1
 8103fca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103fce:	2301      	movs	r3, #1
 8103fd0:	e01b      	b.n	810400a <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8103fd2:	68fb      	ldr	r3, [r7, #12]
 8103fd4:	681a      	ldr	r2, [r3, #0]
 8103fd6:	68fb      	ldr	r3, [r7, #12]
 8103fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103fda:	041b      	lsls	r3, r3, #16
 8103fdc:	4619      	mov	r1, r3
 8103fde:	4610      	mov	r0, r2
 8103fe0:	f006 f843 	bl	810a06a <SDMMC_CmdSendStatus>
 8103fe4:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103fe8:	2b00      	cmp	r3, #0
 8103fea:	d005      	beq.n	8103ff8 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8103fec:	68fb      	ldr	r3, [r7, #12]
 8103fee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103ff2:	431a      	orrs	r2, r3
 8103ff4:	68fb      	ldr	r3, [r7, #12]
 8103ff6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	4a06      	ldr	r2, [pc, #24]	@ (8104018 <MMC_ReadExtCSD+0x1e4>)
 8103ffe:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8104000:	68fb      	ldr	r3, [r7, #12]
 8104002:	2201      	movs	r2, #1
 8104004:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8104008:	2300      	movs	r3, #0
}
 810400a:	4618      	mov	r0, r3
 810400c:	3740      	adds	r7, #64	@ 0x40
 810400e:	46bd      	mov	sp, r7
 8104010:	bd80      	pop	{r7, pc}
 8104012:	bf00      	nop
 8104014:	1fe00fff 	.word	0x1fe00fff
 8104018:	18000f3a 	.word	0x18000f3a

0810401c <MMC_Read_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Read_IT(MMC_HandleTypeDef *hmmc)
{
 810401c:	b580      	push	{r7, lr}
 810401e:	b086      	sub	sp, #24
 8104020:	af00      	add	r7, sp, #0
 8104022:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hmmc->pRxBuffPtr;
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104028:	613b      	str	r3, [r7, #16]

  if (hmmc->RxXferSize >= SDMMC_FIFO_SIZE)
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810402e:	2b1f      	cmp	r3, #31
 8104030:	d936      	bls.n	81040a0 <MMC_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8104032:	2300      	movs	r3, #0
 8104034:	617b      	str	r3, [r7, #20]
 8104036:	e027      	b.n	8104088 <MMC_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hmmc->Instance);
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	4618      	mov	r0, r3
 810403e:	f005 fe5b 	bl	8109cf8 <SDMMC_ReadFIFO>
 8104042:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8104044:	68fb      	ldr	r3, [r7, #12]
 8104046:	b2da      	uxtb	r2, r3
 8104048:	693b      	ldr	r3, [r7, #16]
 810404a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810404c:	693b      	ldr	r3, [r7, #16]
 810404e:	3301      	adds	r3, #1
 8104050:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8104052:	68fb      	ldr	r3, [r7, #12]
 8104054:	0a1b      	lsrs	r3, r3, #8
 8104056:	b2da      	uxtb	r2, r3
 8104058:	693b      	ldr	r3, [r7, #16]
 810405a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810405c:	693b      	ldr	r3, [r7, #16]
 810405e:	3301      	adds	r3, #1
 8104060:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8104062:	68fb      	ldr	r3, [r7, #12]
 8104064:	0c1b      	lsrs	r3, r3, #16
 8104066:	b2da      	uxtb	r2, r3
 8104068:	693b      	ldr	r3, [r7, #16]
 810406a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810406c:	693b      	ldr	r3, [r7, #16]
 810406e:	3301      	adds	r3, #1
 8104070:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8104072:	68fb      	ldr	r3, [r7, #12]
 8104074:	0e1b      	lsrs	r3, r3, #24
 8104076:	b2da      	uxtb	r2, r3
 8104078:	693b      	ldr	r3, [r7, #16]
 810407a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810407c:	693b      	ldr	r3, [r7, #16]
 810407e:	3301      	adds	r3, #1
 8104080:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8104082:	697b      	ldr	r3, [r7, #20]
 8104084:	3301      	adds	r3, #1
 8104086:	617b      	str	r3, [r7, #20]
 8104088:	697b      	ldr	r3, [r7, #20]
 810408a:	2b07      	cmp	r3, #7
 810408c:	d9d4      	bls.n	8104038 <MMC_Read_IT+0x1c>
    }

    hmmc->pRxBuffPtr = tmp;
 810408e:	687b      	ldr	r3, [r7, #4]
 8104090:	693a      	ldr	r2, [r7, #16]
 8104092:	625a      	str	r2, [r3, #36]	@ 0x24
    hmmc->RxXferSize -= SDMMC_FIFO_SIZE;
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104098:	f1a3 0220 	sub.w	r2, r3, #32
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 81040a0:	bf00      	nop
 81040a2:	3718      	adds	r7, #24
 81040a4:	46bd      	mov	sp, r7
 81040a6:	bd80      	pop	{r7, pc}

081040a8 <MMC_Write_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Write_IT(MMC_HandleTypeDef *hmmc)
{
 81040a8:	b580      	push	{r7, lr}
 81040aa:	b086      	sub	sp, #24
 81040ac:	af00      	add	r7, sp, #0
 81040ae:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hmmc->pTxBuffPtr;
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	69db      	ldr	r3, [r3, #28]
 81040b4:	613b      	str	r3, [r7, #16]

  if (hmmc->TxXferSize >= SDMMC_FIFO_SIZE)
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	6a1b      	ldr	r3, [r3, #32]
 81040ba:	2b1f      	cmp	r3, #31
 81040bc:	d93a      	bls.n	8104134 <MMC_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 81040be:	2300      	movs	r3, #0
 81040c0:	617b      	str	r3, [r7, #20]
 81040c2:	e02b      	b.n	810411c <MMC_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 81040c4:	693b      	ldr	r3, [r7, #16]
 81040c6:	781b      	ldrb	r3, [r3, #0]
 81040c8:	60fb      	str	r3, [r7, #12]
      tmp++;
 81040ca:	693b      	ldr	r3, [r7, #16]
 81040cc:	3301      	adds	r3, #1
 81040ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 81040d0:	693b      	ldr	r3, [r7, #16]
 81040d2:	781b      	ldrb	r3, [r3, #0]
 81040d4:	021a      	lsls	r2, r3, #8
 81040d6:	68fb      	ldr	r3, [r7, #12]
 81040d8:	4313      	orrs	r3, r2
 81040da:	60fb      	str	r3, [r7, #12]
      tmp++;
 81040dc:	693b      	ldr	r3, [r7, #16]
 81040de:	3301      	adds	r3, #1
 81040e0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 81040e2:	693b      	ldr	r3, [r7, #16]
 81040e4:	781b      	ldrb	r3, [r3, #0]
 81040e6:	041a      	lsls	r2, r3, #16
 81040e8:	68fb      	ldr	r3, [r7, #12]
 81040ea:	4313      	orrs	r3, r2
 81040ec:	60fb      	str	r3, [r7, #12]
      tmp++;
 81040ee:	693b      	ldr	r3, [r7, #16]
 81040f0:	3301      	adds	r3, #1
 81040f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 81040f4:	693b      	ldr	r3, [r7, #16]
 81040f6:	781b      	ldrb	r3, [r3, #0]
 81040f8:	061a      	lsls	r2, r3, #24
 81040fa:	68fb      	ldr	r3, [r7, #12]
 81040fc:	4313      	orrs	r3, r2
 81040fe:	60fb      	str	r3, [r7, #12]
      tmp++;
 8104100:	693b      	ldr	r3, [r7, #16]
 8104102:	3301      	adds	r3, #1
 8104104:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hmmc->Instance, &data);
 8104106:	687b      	ldr	r3, [r7, #4]
 8104108:	681b      	ldr	r3, [r3, #0]
 810410a:	f107 020c 	add.w	r2, r7, #12
 810410e:	4611      	mov	r1, r2
 8104110:	4618      	mov	r0, r3
 8104112:	f005 fdfe 	bl	8109d12 <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8104116:	697b      	ldr	r3, [r7, #20]
 8104118:	3301      	adds	r3, #1
 810411a:	617b      	str	r3, [r7, #20]
 810411c:	697b      	ldr	r3, [r7, #20]
 810411e:	2b07      	cmp	r3, #7
 8104120:	d9d0      	bls.n	81040c4 <MMC_Write_IT+0x1c>
    }

    hmmc->pTxBuffPtr = tmp;
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	693a      	ldr	r2, [r7, #16]
 8104126:	61da      	str	r2, [r3, #28]
    hmmc->TxXferSize -= SDMMC_FIFO_SIZE;
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	6a1b      	ldr	r3, [r3, #32]
 810412c:	f1a3 0220 	sub.w	r2, r3, #32
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	621a      	str	r2, [r3, #32]
  }
}
 8104134:	bf00      	nop
 8104136:	3718      	adds	r7, #24
 8104138:	46bd      	mov	sp, r7
 810413a:	bd80      	pop	{r7, pc}

0810413c <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 810413c:	b580      	push	{r7, lr}
 810413e:	b08a      	sub	sp, #40	@ 0x28
 8104140:	af00      	add	r7, sp, #0
 8104142:	60f8      	str	r0, [r7, #12]
 8104144:	60b9      	str	r1, [r7, #8]
 8104146:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8104148:	2300      	movs	r3, #0
 810414a:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 810414c:	2300      	movs	r3, #0
 810414e:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8104150:	68bb      	ldr	r3, [r7, #8]
 8104152:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104156:	d004      	beq.n	8104162 <MMC_PwrClassUpdate+0x26>
 8104158:	68bb      	ldr	r3, [r7, #8]
 810415a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810415e:	f040 8088 	bne.w	8104272 <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8104162:	2300      	movs	r3, #0
 8104164:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8104166:	f107 0114 	add.w	r1, r7, #20
 810416a:	f04f 33ff 	mov.w	r3, #4294967295
 810416e:	22bb      	movs	r2, #187	@ 0xbb
 8104170:	68f8      	ldr	r0, [r7, #12]
 8104172:	f7ff fe5f 	bl	8103e34 <MMC_ReadExtCSD>
 8104176:	4603      	mov	r3, r0
 8104178:	2b00      	cmp	r3, #0
 810417a:	d003      	beq.n	8104184 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810417c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8104180:	61fb      	str	r3, [r7, #28]
 8104182:	e002      	b.n	810418a <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8104184:	697b      	ldr	r3, [r7, #20]
 8104186:	0e1b      	lsrs	r3, r3, #24
 8104188:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 810418a:	687b      	ldr	r3, [r7, #4]
 810418c:	2b04      	cmp	r3, #4
 810418e:	d105      	bne.n	810419c <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8104196:	0e1b      	lsrs	r3, r3, #24
 8104198:	61bb      	str	r3, [r7, #24]
 810419a:	e00e      	b.n	81041ba <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 810419c:	687b      	ldr	r3, [r7, #4]
 810419e:	2b02      	cmp	r3, #2
 81041a0:	d106      	bne.n	81041b0 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 81041a2:	68fb      	ldr	r3, [r7, #12]
 81041a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 81041a8:	0c1b      	lsrs	r3, r3, #16
 81041aa:	b2db      	uxtb	r3, r3
 81041ac:	61bb      	str	r3, [r7, #24]
 81041ae:	e004      	b.n	81041ba <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 81041b0:	68fb      	ldr	r3, [r7, #12]
 81041b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 81041b6:	0e1b      	lsrs	r3, r3, #24
 81041b8:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 81041ba:	69fb      	ldr	r3, [r7, #28]
 81041bc:	2b00      	cmp	r3, #0
 81041be:	d158      	bne.n	8104272 <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 81041c0:	68bb      	ldr	r3, [r7, #8]
 81041c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81041c6:	d102      	bne.n	81041ce <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 81041c8:	69bb      	ldr	r3, [r7, #24]
 81041ca:	091b      	lsrs	r3, r3, #4
 81041cc:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 81041ce:	697a      	ldr	r2, [r7, #20]
 81041d0:	69bb      	ldr	r3, [r7, #24]
 81041d2:	4053      	eors	r3, r2
 81041d4:	f003 030f 	and.w	r3, r3, #15
 81041d8:	2b00      	cmp	r3, #0
 81041da:	d04a      	beq.n	8104272 <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 81041dc:	68fb      	ldr	r3, [r7, #12]
 81041de:	681a      	ldr	r2, [r3, #0]
 81041e0:	69bb      	ldr	r3, [r7, #24]
 81041e2:	021b      	lsls	r3, r3, #8
 81041e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 81041e8:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 81041ec:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 81041f0:	4619      	mov	r1, r3
 81041f2:	4610      	mov	r0, r2
 81041f4:	f005 ff7c 	bl	810a0f0 <SDMMC_CmdSwitch>
 81041f8:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 81041fa:	69fb      	ldr	r3, [r7, #28]
 81041fc:	2b00      	cmp	r3, #0
 81041fe:	d138      	bne.n	8104272 <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8104200:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8104204:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8104206:	68fb      	ldr	r3, [r7, #12]
 8104208:	681a      	ldr	r2, [r3, #0]
 810420a:	68fb      	ldr	r3, [r7, #12]
 810420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810420e:	041b      	lsls	r3, r3, #16
 8104210:	4619      	mov	r1, r3
 8104212:	4610      	mov	r0, r2
 8104214:	f005 ff29 	bl	810a06a <SDMMC_CmdSendStatus>
 8104218:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 810421a:	69fb      	ldr	r3, [r7, #28]
 810421c:	2b00      	cmp	r3, #0
 810421e:	d112      	bne.n	8104246 <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8104220:	68fb      	ldr	r3, [r7, #12]
 8104222:	681b      	ldr	r3, [r3, #0]
 8104224:	2100      	movs	r1, #0
 8104226:	4618      	mov	r0, r3
 8104228:	f005 fddb 	bl	8109de2 <SDMMC_GetResponse>
 810422c:	6238      	str	r0, [r7, #32]
            count--;
 810422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104230:	3b01      	subs	r3, #1
 8104232:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8104234:	6a3b      	ldr	r3, [r7, #32]
 8104236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810423a:	2b00      	cmp	r3, #0
 810423c:	d104      	bne.n	8104248 <MMC_PwrClassUpdate+0x10c>
 810423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104240:	2b00      	cmp	r3, #0
 8104242:	d1e0      	bne.n	8104206 <MMC_PwrClassUpdate+0xca>
 8104244:	e000      	b.n	8104248 <MMC_PwrClassUpdate+0x10c>
              break;
 8104246:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8104248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810424a:	2b00      	cmp	r3, #0
 810424c:	d00b      	beq.n	8104266 <MMC_PwrClassUpdate+0x12a>
 810424e:	69fb      	ldr	r3, [r7, #28]
 8104250:	2b00      	cmp	r3, #0
 8104252:	d108      	bne.n	8104266 <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8104254:	6a3b      	ldr	r3, [r7, #32]
 8104256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810425a:	2b00      	cmp	r3, #0
 810425c:	d009      	beq.n	8104272 <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 810425e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8104262:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8104264:	e005      	b.n	8104272 <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 8104266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104268:	2b00      	cmp	r3, #0
 810426a:	d102      	bne.n	8104272 <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 810426c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8104270:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8104272:	69fb      	ldr	r3, [r7, #28]
}
 8104274:	4618      	mov	r0, r3
 8104276:	3728      	adds	r7, #40	@ 0x28
 8104278:	46bd      	mov	sp, r7
 810427a:	bd80      	pop	{r7, pc}

0810427c <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 810427c:	b480      	push	{r7}
 810427e:	b083      	sub	sp, #12
 8104280:	af00      	add	r7, sp, #0
 8104282:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8104284:	bf00      	nop
 8104286:	370c      	adds	r7, #12
 8104288:	46bd      	mov	sp, r7
 810428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810428e:	4770      	bx	lr

08104290 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 8104290:	b480      	push	{r7}
 8104292:	b083      	sub	sp, #12
 8104294:	af00      	add	r7, sp, #0
 8104296:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8104298:	bf00      	nop
 810429a:	370c      	adds	r7, #12
 810429c:	46bd      	mov	sp, r7
 810429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042a2:	4770      	bx	lr

081042a4 <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 81042a4:	b480      	push	{r7}
 81042a6:	b083      	sub	sp, #12
 81042a8:	af00      	add	r7, sp, #0
 81042aa:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 81042ac:	bf00      	nop
 81042ae:	370c      	adds	r7, #12
 81042b0:	46bd      	mov	sp, r7
 81042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042b6:	4770      	bx	lr

081042b8 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 81042b8:	b480      	push	{r7}
 81042ba:	b083      	sub	sp, #12
 81042bc:	af00      	add	r7, sp, #0
 81042be:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 81042c0:	bf00      	nop
 81042c2:	370c      	adds	r7, #12
 81042c4:	46bd      	mov	sp, r7
 81042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042ca:	4770      	bx	lr

081042cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81042cc:	b580      	push	{r7, lr}
 81042ce:	b086      	sub	sp, #24
 81042d0:	af02      	add	r7, sp, #8
 81042d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d101      	bne.n	81042de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 81042da:	2301      	movs	r3, #1
 81042dc:	e0fe      	b.n	81044dc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 81042e4:	b2db      	uxtb	r3, r3
 81042e6:	2b00      	cmp	r3, #0
 81042e8:	d106      	bne.n	81042f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	2200      	movs	r2, #0
 81042ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 81042f2:	6878      	ldr	r0, [r7, #4]
 81042f4:	f00a f8ac 	bl	810e450 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	2203      	movs	r2, #3
 81042fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	4618      	mov	r0, r3
 8104306:	f006 fc1e 	bl	810ab46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	6818      	ldr	r0, [r3, #0]
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	7c1a      	ldrb	r2, [r3, #16]
 8104312:	f88d 2000 	strb.w	r2, [sp]
 8104316:	3304      	adds	r3, #4
 8104318:	cb0e      	ldmia	r3, {r1, r2, r3}
 810431a:	f006 faef 	bl	810a8fc <USB_CoreInit>
 810431e:	4603      	mov	r3, r0
 8104320:	2b00      	cmp	r3, #0
 8104322:	d005      	beq.n	8104330 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	2202      	movs	r2, #2
 8104328:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810432c:	2301      	movs	r3, #1
 810432e:	e0d5      	b.n	81044dc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8104330:	687b      	ldr	r3, [r7, #4]
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	2100      	movs	r1, #0
 8104336:	4618      	mov	r0, r3
 8104338:	f006 fc16 	bl	810ab68 <USB_SetCurrentMode>
 810433c:	4603      	mov	r3, r0
 810433e:	2b00      	cmp	r3, #0
 8104340:	d005      	beq.n	810434e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	2202      	movs	r2, #2
 8104346:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810434a:	2301      	movs	r3, #1
 810434c:	e0c6      	b.n	81044dc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810434e:	2300      	movs	r3, #0
 8104350:	73fb      	strb	r3, [r7, #15]
 8104352:	e04a      	b.n	81043ea <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8104354:	7bfa      	ldrb	r2, [r7, #15]
 8104356:	6879      	ldr	r1, [r7, #4]
 8104358:	4613      	mov	r3, r2
 810435a:	00db      	lsls	r3, r3, #3
 810435c:	4413      	add	r3, r2
 810435e:	009b      	lsls	r3, r3, #2
 8104360:	440b      	add	r3, r1
 8104362:	3315      	adds	r3, #21
 8104364:	2201      	movs	r2, #1
 8104366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8104368:	7bfa      	ldrb	r2, [r7, #15]
 810436a:	6879      	ldr	r1, [r7, #4]
 810436c:	4613      	mov	r3, r2
 810436e:	00db      	lsls	r3, r3, #3
 8104370:	4413      	add	r3, r2
 8104372:	009b      	lsls	r3, r3, #2
 8104374:	440b      	add	r3, r1
 8104376:	3314      	adds	r3, #20
 8104378:	7bfa      	ldrb	r2, [r7, #15]
 810437a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 810437c:	7bfa      	ldrb	r2, [r7, #15]
 810437e:	7bfb      	ldrb	r3, [r7, #15]
 8104380:	b298      	uxth	r0, r3
 8104382:	6879      	ldr	r1, [r7, #4]
 8104384:	4613      	mov	r3, r2
 8104386:	00db      	lsls	r3, r3, #3
 8104388:	4413      	add	r3, r2
 810438a:	009b      	lsls	r3, r3, #2
 810438c:	440b      	add	r3, r1
 810438e:	332e      	adds	r3, #46	@ 0x2e
 8104390:	4602      	mov	r2, r0
 8104392:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8104394:	7bfa      	ldrb	r2, [r7, #15]
 8104396:	6879      	ldr	r1, [r7, #4]
 8104398:	4613      	mov	r3, r2
 810439a:	00db      	lsls	r3, r3, #3
 810439c:	4413      	add	r3, r2
 810439e:	009b      	lsls	r3, r3, #2
 81043a0:	440b      	add	r3, r1
 81043a2:	3318      	adds	r3, #24
 81043a4:	2200      	movs	r2, #0
 81043a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81043a8:	7bfa      	ldrb	r2, [r7, #15]
 81043aa:	6879      	ldr	r1, [r7, #4]
 81043ac:	4613      	mov	r3, r2
 81043ae:	00db      	lsls	r3, r3, #3
 81043b0:	4413      	add	r3, r2
 81043b2:	009b      	lsls	r3, r3, #2
 81043b4:	440b      	add	r3, r1
 81043b6:	331c      	adds	r3, #28
 81043b8:	2200      	movs	r2, #0
 81043ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81043bc:	7bfa      	ldrb	r2, [r7, #15]
 81043be:	6879      	ldr	r1, [r7, #4]
 81043c0:	4613      	mov	r3, r2
 81043c2:	00db      	lsls	r3, r3, #3
 81043c4:	4413      	add	r3, r2
 81043c6:	009b      	lsls	r3, r3, #2
 81043c8:	440b      	add	r3, r1
 81043ca:	3320      	adds	r3, #32
 81043cc:	2200      	movs	r2, #0
 81043ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 81043d0:	7bfa      	ldrb	r2, [r7, #15]
 81043d2:	6879      	ldr	r1, [r7, #4]
 81043d4:	4613      	mov	r3, r2
 81043d6:	00db      	lsls	r3, r3, #3
 81043d8:	4413      	add	r3, r2
 81043da:	009b      	lsls	r3, r3, #2
 81043dc:	440b      	add	r3, r1
 81043de:	3324      	adds	r3, #36	@ 0x24
 81043e0:	2200      	movs	r2, #0
 81043e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81043e4:	7bfb      	ldrb	r3, [r7, #15]
 81043e6:	3301      	adds	r3, #1
 81043e8:	73fb      	strb	r3, [r7, #15]
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	791b      	ldrb	r3, [r3, #4]
 81043ee:	7bfa      	ldrb	r2, [r7, #15]
 81043f0:	429a      	cmp	r2, r3
 81043f2:	d3af      	bcc.n	8104354 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81043f4:	2300      	movs	r3, #0
 81043f6:	73fb      	strb	r3, [r7, #15]
 81043f8:	e044      	b.n	8104484 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 81043fa:	7bfa      	ldrb	r2, [r7, #15]
 81043fc:	6879      	ldr	r1, [r7, #4]
 81043fe:	4613      	mov	r3, r2
 8104400:	00db      	lsls	r3, r3, #3
 8104402:	4413      	add	r3, r2
 8104404:	009b      	lsls	r3, r3, #2
 8104406:	440b      	add	r3, r1
 8104408:	f203 2355 	addw	r3, r3, #597	@ 0x255
 810440c:	2200      	movs	r2, #0
 810440e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8104410:	7bfa      	ldrb	r2, [r7, #15]
 8104412:	6879      	ldr	r1, [r7, #4]
 8104414:	4613      	mov	r3, r2
 8104416:	00db      	lsls	r3, r3, #3
 8104418:	4413      	add	r3, r2
 810441a:	009b      	lsls	r3, r3, #2
 810441c:	440b      	add	r3, r1
 810441e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8104422:	7bfa      	ldrb	r2, [r7, #15]
 8104424:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8104426:	7bfa      	ldrb	r2, [r7, #15]
 8104428:	6879      	ldr	r1, [r7, #4]
 810442a:	4613      	mov	r3, r2
 810442c:	00db      	lsls	r3, r3, #3
 810442e:	4413      	add	r3, r2
 8104430:	009b      	lsls	r3, r3, #2
 8104432:	440b      	add	r3, r1
 8104434:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8104438:	2200      	movs	r2, #0
 810443a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 810443c:	7bfa      	ldrb	r2, [r7, #15]
 810443e:	6879      	ldr	r1, [r7, #4]
 8104440:	4613      	mov	r3, r2
 8104442:	00db      	lsls	r3, r3, #3
 8104444:	4413      	add	r3, r2
 8104446:	009b      	lsls	r3, r3, #2
 8104448:	440b      	add	r3, r1
 810444a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 810444e:	2200      	movs	r2, #0
 8104450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8104452:	7bfa      	ldrb	r2, [r7, #15]
 8104454:	6879      	ldr	r1, [r7, #4]
 8104456:	4613      	mov	r3, r2
 8104458:	00db      	lsls	r3, r3, #3
 810445a:	4413      	add	r3, r2
 810445c:	009b      	lsls	r3, r3, #2
 810445e:	440b      	add	r3, r1
 8104460:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8104464:	2200      	movs	r2, #0
 8104466:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8104468:	7bfa      	ldrb	r2, [r7, #15]
 810446a:	6879      	ldr	r1, [r7, #4]
 810446c:	4613      	mov	r3, r2
 810446e:	00db      	lsls	r3, r3, #3
 8104470:	4413      	add	r3, r2
 8104472:	009b      	lsls	r3, r3, #2
 8104474:	440b      	add	r3, r1
 8104476:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 810447a:	2200      	movs	r2, #0
 810447c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810447e:	7bfb      	ldrb	r3, [r7, #15]
 8104480:	3301      	adds	r3, #1
 8104482:	73fb      	strb	r3, [r7, #15]
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	791b      	ldrb	r3, [r3, #4]
 8104488:	7bfa      	ldrb	r2, [r7, #15]
 810448a:	429a      	cmp	r2, r3
 810448c:	d3b5      	bcc.n	81043fa <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	6818      	ldr	r0, [r3, #0]
 8104492:	687b      	ldr	r3, [r7, #4]
 8104494:	7c1a      	ldrb	r2, [r3, #16]
 8104496:	f88d 2000 	strb.w	r2, [sp]
 810449a:	3304      	adds	r3, #4
 810449c:	cb0e      	ldmia	r3, {r1, r2, r3}
 810449e:	f006 fbaf 	bl	810ac00 <USB_DevInit>
 81044a2:	4603      	mov	r3, r0
 81044a4:	2b00      	cmp	r3, #0
 81044a6:	d005      	beq.n	81044b4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	2202      	movs	r2, #2
 81044ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81044b0:	2301      	movs	r3, #1
 81044b2:	e013      	b.n	81044dc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 81044b4:	687b      	ldr	r3, [r7, #4]
 81044b6:	2200      	movs	r2, #0
 81044b8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 81044ba:	687b      	ldr	r3, [r7, #4]
 81044bc:	2201      	movs	r2, #1
 81044be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	7b1b      	ldrb	r3, [r3, #12]
 81044c6:	2b01      	cmp	r3, #1
 81044c8:	d102      	bne.n	81044d0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 81044ca:	6878      	ldr	r0, [r7, #4]
 81044cc:	f001 f96e 	bl	81057ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	681b      	ldr	r3, [r3, #0]
 81044d4:	4618      	mov	r0, r3
 81044d6:	f007 fbec 	bl	810bcb2 <USB_DevDisconnect>

  return HAL_OK;
 81044da:	2300      	movs	r3, #0
}
 81044dc:	4618      	mov	r0, r3
 81044de:	3710      	adds	r7, #16
 81044e0:	46bd      	mov	sp, r7
 81044e2:	bd80      	pop	{r7, pc}

081044e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 81044e4:	b580      	push	{r7, lr}
 81044e6:	b084      	sub	sp, #16
 81044e8:	af00      	add	r7, sp, #0
 81044ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81044ec:	687b      	ldr	r3, [r7, #4]
 81044ee:	681b      	ldr	r3, [r3, #0]
 81044f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 81044f2:	687b      	ldr	r3, [r7, #4]
 81044f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 81044f8:	2b01      	cmp	r3, #1
 81044fa:	d101      	bne.n	8104500 <HAL_PCD_Start+0x1c>
 81044fc:	2302      	movs	r3, #2
 81044fe:	e022      	b.n	8104546 <HAL_PCD_Start+0x62>
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	2201      	movs	r2, #1
 8104504:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8104508:	68fb      	ldr	r3, [r7, #12]
 810450a:	68db      	ldr	r3, [r3, #12]
 810450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104510:	2b00      	cmp	r3, #0
 8104512:	d009      	beq.n	8104528 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8104518:	2b01      	cmp	r3, #1
 810451a:	d105      	bne.n	8104528 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810451c:	68fb      	ldr	r3, [r7, #12]
 810451e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104520:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8104524:	68fb      	ldr	r3, [r7, #12]
 8104526:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	681b      	ldr	r3, [r3, #0]
 810452c:	4618      	mov	r0, r3
 810452e:	f006 faf9 	bl	810ab24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	681b      	ldr	r3, [r3, #0]
 8104536:	4618      	mov	r0, r3
 8104538:	f007 fb9a 	bl	810bc70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	2200      	movs	r2, #0
 8104540:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8104544:	2300      	movs	r3, #0
}
 8104546:	4618      	mov	r0, r3
 8104548:	3710      	adds	r7, #16
 810454a:	46bd      	mov	sp, r7
 810454c:	bd80      	pop	{r7, pc}

0810454e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 810454e:	b590      	push	{r4, r7, lr}
 8104550:	b08d      	sub	sp, #52	@ 0x34
 8104552:	af00      	add	r7, sp, #0
 8104554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	681b      	ldr	r3, [r3, #0]
 810455a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810455c:	6a3b      	ldr	r3, [r7, #32]
 810455e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	681b      	ldr	r3, [r3, #0]
 8104564:	4618      	mov	r0, r3
 8104566:	f007 fc58 	bl	810be1a <USB_GetMode>
 810456a:	4603      	mov	r3, r0
 810456c:	2b00      	cmp	r3, #0
 810456e:	f040 84b9 	bne.w	8104ee4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	4618      	mov	r0, r3
 8104578:	f007 fbbc 	bl	810bcf4 <USB_ReadInterrupts>
 810457c:	4603      	mov	r3, r0
 810457e:	2b00      	cmp	r3, #0
 8104580:	f000 84af 	beq.w	8104ee2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8104584:	69fb      	ldr	r3, [r7, #28]
 8104586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810458a:	689b      	ldr	r3, [r3, #8]
 810458c:	0a1b      	lsrs	r3, r3, #8
 810458e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8104592:	687b      	ldr	r3, [r7, #4]
 8104594:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	681b      	ldr	r3, [r3, #0]
 810459c:	4618      	mov	r0, r3
 810459e:	f007 fba9 	bl	810bcf4 <USB_ReadInterrupts>
 81045a2:	4603      	mov	r3, r0
 81045a4:	f003 0302 	and.w	r3, r3, #2
 81045a8:	2b02      	cmp	r3, #2
 81045aa:	d107      	bne.n	81045bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 81045ac:	687b      	ldr	r3, [r7, #4]
 81045ae:	681b      	ldr	r3, [r3, #0]
 81045b0:	695a      	ldr	r2, [r3, #20]
 81045b2:	687b      	ldr	r3, [r7, #4]
 81045b4:	681b      	ldr	r3, [r3, #0]
 81045b6:	f002 0202 	and.w	r2, r2, #2
 81045ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	681b      	ldr	r3, [r3, #0]
 81045c0:	4618      	mov	r0, r3
 81045c2:	f007 fb97 	bl	810bcf4 <USB_ReadInterrupts>
 81045c6:	4603      	mov	r3, r0
 81045c8:	f003 0310 	and.w	r3, r3, #16
 81045cc:	2b10      	cmp	r3, #16
 81045ce:	d161      	bne.n	8104694 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	681b      	ldr	r3, [r3, #0]
 81045d4:	699a      	ldr	r2, [r3, #24]
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	681b      	ldr	r3, [r3, #0]
 81045da:	f022 0210 	bic.w	r2, r2, #16
 81045de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 81045e0:	6a3b      	ldr	r3, [r7, #32]
 81045e2:	6a1b      	ldr	r3, [r3, #32]
 81045e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 81045e6:	69bb      	ldr	r3, [r7, #24]
 81045e8:	f003 020f 	and.w	r2, r3, #15
 81045ec:	4613      	mov	r3, r2
 81045ee:	00db      	lsls	r3, r3, #3
 81045f0:	4413      	add	r3, r2
 81045f2:	009b      	lsls	r3, r3, #2
 81045f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 81045f8:	687a      	ldr	r2, [r7, #4]
 81045fa:	4413      	add	r3, r2
 81045fc:	3304      	adds	r3, #4
 81045fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8104600:	69bb      	ldr	r3, [r7, #24]
 8104602:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8104606:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810460a:	d124      	bne.n	8104656 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 810460c:	69ba      	ldr	r2, [r7, #24]
 810460e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8104612:	4013      	ands	r3, r2
 8104614:	2b00      	cmp	r3, #0
 8104616:	d035      	beq.n	8104684 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8104618:	697b      	ldr	r3, [r7, #20]
 810461a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 810461c:	69bb      	ldr	r3, [r7, #24]
 810461e:	091b      	lsrs	r3, r3, #4
 8104620:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8104622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8104626:	b29b      	uxth	r3, r3
 8104628:	461a      	mov	r2, r3
 810462a:	6a38      	ldr	r0, [r7, #32]
 810462c:	f007 f9ce 	bl	810b9cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8104630:	697b      	ldr	r3, [r7, #20]
 8104632:	68da      	ldr	r2, [r3, #12]
 8104634:	69bb      	ldr	r3, [r7, #24]
 8104636:	091b      	lsrs	r3, r3, #4
 8104638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810463c:	441a      	add	r2, r3
 810463e:	697b      	ldr	r3, [r7, #20]
 8104640:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8104642:	697b      	ldr	r3, [r7, #20]
 8104644:	695a      	ldr	r2, [r3, #20]
 8104646:	69bb      	ldr	r3, [r7, #24]
 8104648:	091b      	lsrs	r3, r3, #4
 810464a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810464e:	441a      	add	r2, r3
 8104650:	697b      	ldr	r3, [r7, #20]
 8104652:	615a      	str	r2, [r3, #20]
 8104654:	e016      	b.n	8104684 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8104656:	69bb      	ldr	r3, [r7, #24]
 8104658:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 810465c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8104660:	d110      	bne.n	8104684 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8104668:	2208      	movs	r2, #8
 810466a:	4619      	mov	r1, r3
 810466c:	6a38      	ldr	r0, [r7, #32]
 810466e:	f007 f9ad 	bl	810b9cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8104672:	697b      	ldr	r3, [r7, #20]
 8104674:	695a      	ldr	r2, [r3, #20]
 8104676:	69bb      	ldr	r3, [r7, #24]
 8104678:	091b      	lsrs	r3, r3, #4
 810467a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810467e:	441a      	add	r2, r3
 8104680:	697b      	ldr	r3, [r7, #20]
 8104682:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8104684:	687b      	ldr	r3, [r7, #4]
 8104686:	681b      	ldr	r3, [r3, #0]
 8104688:	699a      	ldr	r2, [r3, #24]
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	681b      	ldr	r3, [r3, #0]
 810468e:	f042 0210 	orr.w	r2, r2, #16
 8104692:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	681b      	ldr	r3, [r3, #0]
 8104698:	4618      	mov	r0, r3
 810469a:	f007 fb2b 	bl	810bcf4 <USB_ReadInterrupts>
 810469e:	4603      	mov	r3, r0
 81046a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81046a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81046a8:	f040 80a7 	bne.w	81047fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 81046ac:	2300      	movs	r3, #0
 81046ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	681b      	ldr	r3, [r3, #0]
 81046b4:	4618      	mov	r0, r3
 81046b6:	f007 fb30 	bl	810bd1a <USB_ReadDevAllOutEpInterrupt>
 81046ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 81046bc:	e099      	b.n	81047f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 81046be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81046c0:	f003 0301 	and.w	r3, r3, #1
 81046c4:	2b00      	cmp	r3, #0
 81046c6:	f000 808e 	beq.w	81047e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	681b      	ldr	r3, [r3, #0]
 81046ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81046d0:	b2d2      	uxtb	r2, r2
 81046d2:	4611      	mov	r1, r2
 81046d4:	4618      	mov	r0, r3
 81046d6:	f007 fb54 	bl	810bd82 <USB_ReadDevOutEPInterrupt>
 81046da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 81046dc:	693b      	ldr	r3, [r7, #16]
 81046de:	f003 0301 	and.w	r3, r3, #1
 81046e2:	2b00      	cmp	r3, #0
 81046e4:	d00c      	beq.n	8104700 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 81046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81046e8:	015a      	lsls	r2, r3, #5
 81046ea:	69fb      	ldr	r3, [r7, #28]
 81046ec:	4413      	add	r3, r2
 81046ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81046f2:	461a      	mov	r2, r3
 81046f4:	2301      	movs	r3, #1
 81046f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 81046f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81046fa:	6878      	ldr	r0, [r7, #4]
 81046fc:	f000 fed0 	bl	81054a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8104700:	693b      	ldr	r3, [r7, #16]
 8104702:	f003 0308 	and.w	r3, r3, #8
 8104706:	2b00      	cmp	r3, #0
 8104708:	d00c      	beq.n	8104724 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 810470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810470c:	015a      	lsls	r2, r3, #5
 810470e:	69fb      	ldr	r3, [r7, #28]
 8104710:	4413      	add	r3, r2
 8104712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8104716:	461a      	mov	r2, r3
 8104718:	2308      	movs	r3, #8
 810471a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 810471c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810471e:	6878      	ldr	r0, [r7, #4]
 8104720:	f000 ffa6 	bl	8105670 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8104724:	693b      	ldr	r3, [r7, #16]
 8104726:	f003 0310 	and.w	r3, r3, #16
 810472a:	2b00      	cmp	r3, #0
 810472c:	d008      	beq.n	8104740 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 810472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104730:	015a      	lsls	r2, r3, #5
 8104732:	69fb      	ldr	r3, [r7, #28]
 8104734:	4413      	add	r3, r2
 8104736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810473a:	461a      	mov	r2, r3
 810473c:	2310      	movs	r3, #16
 810473e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8104740:	693b      	ldr	r3, [r7, #16]
 8104742:	f003 0302 	and.w	r3, r3, #2
 8104746:	2b00      	cmp	r3, #0
 8104748:	d030      	beq.n	81047ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 810474a:	6a3b      	ldr	r3, [r7, #32]
 810474c:	695b      	ldr	r3, [r3, #20]
 810474e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104752:	2b80      	cmp	r3, #128	@ 0x80
 8104754:	d109      	bne.n	810476a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8104756:	69fb      	ldr	r3, [r7, #28]
 8104758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810475c:	685b      	ldr	r3, [r3, #4]
 810475e:	69fa      	ldr	r2, [r7, #28]
 8104760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8104768:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 810476a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810476c:	4613      	mov	r3, r2
 810476e:	00db      	lsls	r3, r3, #3
 8104770:	4413      	add	r3, r2
 8104772:	009b      	lsls	r3, r3, #2
 8104774:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8104778:	687a      	ldr	r2, [r7, #4]
 810477a:	4413      	add	r3, r2
 810477c:	3304      	adds	r3, #4
 810477e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8104780:	697b      	ldr	r3, [r7, #20]
 8104782:	78db      	ldrb	r3, [r3, #3]
 8104784:	2b01      	cmp	r3, #1
 8104786:	d108      	bne.n	810479a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8104788:	697b      	ldr	r3, [r7, #20]
 810478a:	2200      	movs	r2, #0
 810478c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 810478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104790:	b2db      	uxtb	r3, r3
 8104792:	4619      	mov	r1, r3
 8104794:	6878      	ldr	r0, [r7, #4]
 8104796:	f009 ff91 	bl	810e6bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 810479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810479c:	015a      	lsls	r2, r3, #5
 810479e:	69fb      	ldr	r3, [r7, #28]
 81047a0:	4413      	add	r3, r2
 81047a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81047a6:	461a      	mov	r2, r3
 81047a8:	2302      	movs	r3, #2
 81047aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 81047ac:	693b      	ldr	r3, [r7, #16]
 81047ae:	f003 0320 	and.w	r3, r3, #32
 81047b2:	2b00      	cmp	r3, #0
 81047b4:	d008      	beq.n	81047c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 81047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81047b8:	015a      	lsls	r2, r3, #5
 81047ba:	69fb      	ldr	r3, [r7, #28]
 81047bc:	4413      	add	r3, r2
 81047be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81047c2:	461a      	mov	r2, r3
 81047c4:	2320      	movs	r3, #32
 81047c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 81047c8:	693b      	ldr	r3, [r7, #16]
 81047ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81047ce:	2b00      	cmp	r3, #0
 81047d0:	d009      	beq.n	81047e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 81047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81047d4:	015a      	lsls	r2, r3, #5
 81047d6:	69fb      	ldr	r3, [r7, #28]
 81047d8:	4413      	add	r3, r2
 81047da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81047de:	461a      	mov	r2, r3
 81047e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81047e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 81047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81047e8:	3301      	adds	r3, #1
 81047ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 81047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81047ee:	085b      	lsrs	r3, r3, #1
 81047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 81047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81047f4:	2b00      	cmp	r3, #0
 81047f6:	f47f af62 	bne.w	81046be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	681b      	ldr	r3, [r3, #0]
 81047fe:	4618      	mov	r0, r3
 8104800:	f007 fa78 	bl	810bcf4 <USB_ReadInterrupts>
 8104804:	4603      	mov	r3, r0
 8104806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810480a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810480e:	f040 80db 	bne.w	81049c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8104812:	687b      	ldr	r3, [r7, #4]
 8104814:	681b      	ldr	r3, [r3, #0]
 8104816:	4618      	mov	r0, r3
 8104818:	f007 fa99 	bl	810bd4e <USB_ReadDevAllInEpInterrupt>
 810481c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 810481e:	2300      	movs	r3, #0
 8104820:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8104822:	e0cd      	b.n	81049c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8104824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104826:	f003 0301 	and.w	r3, r3, #1
 810482a:	2b00      	cmp	r3, #0
 810482c:	f000 80c2 	beq.w	81049b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8104830:	687b      	ldr	r3, [r7, #4]
 8104832:	681b      	ldr	r3, [r3, #0]
 8104834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104836:	b2d2      	uxtb	r2, r2
 8104838:	4611      	mov	r1, r2
 810483a:	4618      	mov	r0, r3
 810483c:	f007 fabf 	bl	810bdbe <USB_ReadDevInEPInterrupt>
 8104840:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8104842:	693b      	ldr	r3, [r7, #16]
 8104844:	f003 0301 	and.w	r3, r3, #1
 8104848:	2b00      	cmp	r3, #0
 810484a:	d057      	beq.n	81048fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 810484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810484e:	f003 030f 	and.w	r3, r3, #15
 8104852:	2201      	movs	r2, #1
 8104854:	fa02 f303 	lsl.w	r3, r2, r3
 8104858:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 810485a:	69fb      	ldr	r3, [r7, #28]
 810485c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104862:	68fb      	ldr	r3, [r7, #12]
 8104864:	43db      	mvns	r3, r3
 8104866:	69f9      	ldr	r1, [r7, #28]
 8104868:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810486c:	4013      	ands	r3, r2
 810486e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8104870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104872:	015a      	lsls	r2, r3, #5
 8104874:	69fb      	ldr	r3, [r7, #28]
 8104876:	4413      	add	r3, r2
 8104878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810487c:	461a      	mov	r2, r3
 810487e:	2301      	movs	r3, #1
 8104880:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	799b      	ldrb	r3, [r3, #6]
 8104886:	2b01      	cmp	r3, #1
 8104888:	d132      	bne.n	81048f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 810488a:	6879      	ldr	r1, [r7, #4]
 810488c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810488e:	4613      	mov	r3, r2
 8104890:	00db      	lsls	r3, r3, #3
 8104892:	4413      	add	r3, r2
 8104894:	009b      	lsls	r3, r3, #2
 8104896:	440b      	add	r3, r1
 8104898:	3320      	adds	r3, #32
 810489a:	6819      	ldr	r1, [r3, #0]
 810489c:	6878      	ldr	r0, [r7, #4]
 810489e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81048a0:	4613      	mov	r3, r2
 81048a2:	00db      	lsls	r3, r3, #3
 81048a4:	4413      	add	r3, r2
 81048a6:	009b      	lsls	r3, r3, #2
 81048a8:	4403      	add	r3, r0
 81048aa:	331c      	adds	r3, #28
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	4419      	add	r1, r3
 81048b0:	6878      	ldr	r0, [r7, #4]
 81048b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81048b4:	4613      	mov	r3, r2
 81048b6:	00db      	lsls	r3, r3, #3
 81048b8:	4413      	add	r3, r2
 81048ba:	009b      	lsls	r3, r3, #2
 81048bc:	4403      	add	r3, r0
 81048be:	3320      	adds	r3, #32
 81048c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 81048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81048c4:	2b00      	cmp	r3, #0
 81048c6:	d113      	bne.n	81048f0 <HAL_PCD_IRQHandler+0x3a2>
 81048c8:	6879      	ldr	r1, [r7, #4]
 81048ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81048cc:	4613      	mov	r3, r2
 81048ce:	00db      	lsls	r3, r3, #3
 81048d0:	4413      	add	r3, r2
 81048d2:	009b      	lsls	r3, r3, #2
 81048d4:	440b      	add	r3, r1
 81048d6:	3324      	adds	r3, #36	@ 0x24
 81048d8:	681b      	ldr	r3, [r3, #0]
 81048da:	2b00      	cmp	r3, #0
 81048dc:	d108      	bne.n	81048f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 81048de:	687b      	ldr	r3, [r7, #4]
 81048e0:	6818      	ldr	r0, [r3, #0]
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 81048e8:	461a      	mov	r2, r3
 81048ea:	2101      	movs	r1, #1
 81048ec:	f007 fac6 	bl	810be7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 81048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81048f2:	b2db      	uxtb	r3, r3
 81048f4:	4619      	mov	r1, r3
 81048f6:	6878      	ldr	r0, [r7, #4]
 81048f8:	f009 fe5b 	bl	810e5b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 81048fc:	693b      	ldr	r3, [r7, #16]
 81048fe:	f003 0308 	and.w	r3, r3, #8
 8104902:	2b00      	cmp	r3, #0
 8104904:	d008      	beq.n	8104918 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8104906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104908:	015a      	lsls	r2, r3, #5
 810490a:	69fb      	ldr	r3, [r7, #28]
 810490c:	4413      	add	r3, r2
 810490e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8104912:	461a      	mov	r2, r3
 8104914:	2308      	movs	r3, #8
 8104916:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8104918:	693b      	ldr	r3, [r7, #16]
 810491a:	f003 0310 	and.w	r3, r3, #16
 810491e:	2b00      	cmp	r3, #0
 8104920:	d008      	beq.n	8104934 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8104922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104924:	015a      	lsls	r2, r3, #5
 8104926:	69fb      	ldr	r3, [r7, #28]
 8104928:	4413      	add	r3, r2
 810492a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810492e:	461a      	mov	r2, r3
 8104930:	2310      	movs	r3, #16
 8104932:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8104934:	693b      	ldr	r3, [r7, #16]
 8104936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810493a:	2b00      	cmp	r3, #0
 810493c:	d008      	beq.n	8104950 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 810493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104940:	015a      	lsls	r2, r3, #5
 8104942:	69fb      	ldr	r3, [r7, #28]
 8104944:	4413      	add	r3, r2
 8104946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810494a:	461a      	mov	r2, r3
 810494c:	2340      	movs	r3, #64	@ 0x40
 810494e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8104950:	693b      	ldr	r3, [r7, #16]
 8104952:	f003 0302 	and.w	r3, r3, #2
 8104956:	2b00      	cmp	r3, #0
 8104958:	d023      	beq.n	81049a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 810495a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810495c:	6a38      	ldr	r0, [r7, #32]
 810495e:	f006 faad 	bl	810aebc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8104962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104964:	4613      	mov	r3, r2
 8104966:	00db      	lsls	r3, r3, #3
 8104968:	4413      	add	r3, r2
 810496a:	009b      	lsls	r3, r3, #2
 810496c:	3310      	adds	r3, #16
 810496e:	687a      	ldr	r2, [r7, #4]
 8104970:	4413      	add	r3, r2
 8104972:	3304      	adds	r3, #4
 8104974:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8104976:	697b      	ldr	r3, [r7, #20]
 8104978:	78db      	ldrb	r3, [r3, #3]
 810497a:	2b01      	cmp	r3, #1
 810497c:	d108      	bne.n	8104990 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 810497e:	697b      	ldr	r3, [r7, #20]
 8104980:	2200      	movs	r2, #0
 8104982:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8104984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104986:	b2db      	uxtb	r3, r3
 8104988:	4619      	mov	r1, r3
 810498a:	6878      	ldr	r0, [r7, #4]
 810498c:	f009 fea8 	bl	810e6e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8104990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104992:	015a      	lsls	r2, r3, #5
 8104994:	69fb      	ldr	r3, [r7, #28]
 8104996:	4413      	add	r3, r2
 8104998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810499c:	461a      	mov	r2, r3
 810499e:	2302      	movs	r3, #2
 81049a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 81049a2:	693b      	ldr	r3, [r7, #16]
 81049a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81049a8:	2b00      	cmp	r3, #0
 81049aa:	d003      	beq.n	81049b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 81049ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81049ae:	6878      	ldr	r0, [r7, #4]
 81049b0:	f000 fcea 	bl	8105388 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 81049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81049b6:	3301      	adds	r3, #1
 81049b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 81049ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81049bc:	085b      	lsrs	r3, r3, #1
 81049be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 81049c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81049c2:	2b00      	cmp	r3, #0
 81049c4:	f47f af2e 	bne.w	8104824 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 81049c8:	687b      	ldr	r3, [r7, #4]
 81049ca:	681b      	ldr	r3, [r3, #0]
 81049cc:	4618      	mov	r0, r3
 81049ce:	f007 f991 	bl	810bcf4 <USB_ReadInterrupts>
 81049d2:	4603      	mov	r3, r0
 81049d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 81049d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81049dc:	d122      	bne.n	8104a24 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 81049de:	69fb      	ldr	r3, [r7, #28]
 81049e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81049e4:	685b      	ldr	r3, [r3, #4]
 81049e6:	69fa      	ldr	r2, [r7, #28]
 81049e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 81049ec:	f023 0301 	bic.w	r3, r3, #1
 81049f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 81049f2:	687b      	ldr	r3, [r7, #4]
 81049f4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 81049f8:	2b01      	cmp	r3, #1
 81049fa:	d108      	bne.n	8104a0e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 81049fc:	687b      	ldr	r3, [r7, #4]
 81049fe:	2200      	movs	r2, #0
 8104a00:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8104a04:	2100      	movs	r1, #0
 8104a06:	6878      	ldr	r0, [r7, #4]
 8104a08:	f000 fef4 	bl	81057f4 <HAL_PCDEx_LPM_Callback>
 8104a0c:	e002      	b.n	8104a14 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8104a0e:	6878      	ldr	r0, [r7, #4]
 8104a10:	f009 fe46 	bl	810e6a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8104a14:	687b      	ldr	r3, [r7, #4]
 8104a16:	681b      	ldr	r3, [r3, #0]
 8104a18:	695a      	ldr	r2, [r3, #20]
 8104a1a:	687b      	ldr	r3, [r7, #4]
 8104a1c:	681b      	ldr	r3, [r3, #0]
 8104a1e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8104a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	681b      	ldr	r3, [r3, #0]
 8104a28:	4618      	mov	r0, r3
 8104a2a:	f007 f963 	bl	810bcf4 <USB_ReadInterrupts>
 8104a2e:	4603      	mov	r3, r0
 8104a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8104a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104a38:	d112      	bne.n	8104a60 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8104a3a:	69fb      	ldr	r3, [r7, #28]
 8104a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104a40:	689b      	ldr	r3, [r3, #8]
 8104a42:	f003 0301 	and.w	r3, r3, #1
 8104a46:	2b01      	cmp	r3, #1
 8104a48:	d102      	bne.n	8104a50 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8104a4a:	6878      	ldr	r0, [r7, #4]
 8104a4c:	f009 fe02 	bl	810e654 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	681b      	ldr	r3, [r3, #0]
 8104a54:	695a      	ldr	r2, [r3, #20]
 8104a56:	687b      	ldr	r3, [r7, #4]
 8104a58:	681b      	ldr	r3, [r3, #0]
 8104a5a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8104a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	4618      	mov	r0, r3
 8104a66:	f007 f945 	bl	810bcf4 <USB_ReadInterrupts>
 8104a6a:	4603      	mov	r3, r0
 8104a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104a70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104a74:	d121      	bne.n	8104aba <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8104a76:	687b      	ldr	r3, [r7, #4]
 8104a78:	681b      	ldr	r3, [r3, #0]
 8104a7a:	695a      	ldr	r2, [r3, #20]
 8104a7c:	687b      	ldr	r3, [r7, #4]
 8104a7e:	681b      	ldr	r3, [r3, #0]
 8104a80:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8104a84:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8104a86:	687b      	ldr	r3, [r7, #4]
 8104a88:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8104a8c:	2b00      	cmp	r3, #0
 8104a8e:	d111      	bne.n	8104ab4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8104a90:	687b      	ldr	r3, [r7, #4]
 8104a92:	2201      	movs	r2, #1
 8104a94:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8104a98:	687b      	ldr	r3, [r7, #4]
 8104a9a:	681b      	ldr	r3, [r3, #0]
 8104a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104a9e:	089b      	lsrs	r3, r3, #2
 8104aa0:	f003 020f 	and.w	r2, r3, #15
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8104aaa:	2101      	movs	r1, #1
 8104aac:	6878      	ldr	r0, [r7, #4]
 8104aae:	f000 fea1 	bl	81057f4 <HAL_PCDEx_LPM_Callback>
 8104ab2:	e002      	b.n	8104aba <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8104ab4:	6878      	ldr	r0, [r7, #4]
 8104ab6:	f009 fdcd 	bl	810e654 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	4618      	mov	r0, r3
 8104ac0:	f007 f918 	bl	810bcf4 <USB_ReadInterrupts>
 8104ac4:	4603      	mov	r3, r0
 8104ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104ace:	f040 80b7 	bne.w	8104c40 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8104ad2:	69fb      	ldr	r3, [r7, #28]
 8104ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104ad8:	685b      	ldr	r3, [r3, #4]
 8104ada:	69fa      	ldr	r2, [r7, #28]
 8104adc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104ae0:	f023 0301 	bic.w	r3, r3, #1
 8104ae4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	2110      	movs	r1, #16
 8104aec:	4618      	mov	r0, r3
 8104aee:	f006 f9e5 	bl	810aebc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104af2:	2300      	movs	r3, #0
 8104af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104af6:	e046      	b.n	8104b86 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8104af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104afa:	015a      	lsls	r2, r3, #5
 8104afc:	69fb      	ldr	r3, [r7, #28]
 8104afe:	4413      	add	r3, r2
 8104b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8104b04:	461a      	mov	r2, r3
 8104b06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8104b0a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8104b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b0e:	015a      	lsls	r2, r3, #5
 8104b10:	69fb      	ldr	r3, [r7, #28]
 8104b12:	4413      	add	r3, r2
 8104b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8104b18:	681b      	ldr	r3, [r3, #0]
 8104b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104b1c:	0151      	lsls	r1, r2, #5
 8104b1e:	69fa      	ldr	r2, [r7, #28]
 8104b20:	440a      	add	r2, r1
 8104b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8104b26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8104b2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8104b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b2e:	015a      	lsls	r2, r3, #5
 8104b30:	69fb      	ldr	r3, [r7, #28]
 8104b32:	4413      	add	r3, r2
 8104b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8104b38:	461a      	mov	r2, r3
 8104b3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8104b3e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8104b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b42:	015a      	lsls	r2, r3, #5
 8104b44:	69fb      	ldr	r3, [r7, #28]
 8104b46:	4413      	add	r3, r2
 8104b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8104b4c:	681b      	ldr	r3, [r3, #0]
 8104b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104b50:	0151      	lsls	r1, r2, #5
 8104b52:	69fa      	ldr	r2, [r7, #28]
 8104b54:	440a      	add	r2, r1
 8104b56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8104b5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8104b5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8104b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b62:	015a      	lsls	r2, r3, #5
 8104b64:	69fb      	ldr	r3, [r7, #28]
 8104b66:	4413      	add	r3, r2
 8104b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104b70:	0151      	lsls	r1, r2, #5
 8104b72:	69fa      	ldr	r2, [r7, #28]
 8104b74:	440a      	add	r2, r1
 8104b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8104b7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8104b7e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b82:	3301      	adds	r3, #1
 8104b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	791b      	ldrb	r3, [r3, #4]
 8104b8a:	461a      	mov	r2, r3
 8104b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b8e:	4293      	cmp	r3, r2
 8104b90:	d3b2      	bcc.n	8104af8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8104b92:	69fb      	ldr	r3, [r7, #28]
 8104b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104b98:	69db      	ldr	r3, [r3, #28]
 8104b9a:	69fa      	ldr	r2, [r7, #28]
 8104b9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104ba0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8104ba4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	7bdb      	ldrb	r3, [r3, #15]
 8104baa:	2b00      	cmp	r3, #0
 8104bac:	d016      	beq.n	8104bdc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8104bae:	69fb      	ldr	r3, [r7, #28]
 8104bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104bb8:	69fa      	ldr	r2, [r7, #28]
 8104bba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104bbe:	f043 030b 	orr.w	r3, r3, #11
 8104bc2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8104bc6:	69fb      	ldr	r3, [r7, #28]
 8104bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104bce:	69fa      	ldr	r2, [r7, #28]
 8104bd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104bd4:	f043 030b 	orr.w	r3, r3, #11
 8104bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8104bda:	e015      	b.n	8104c08 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8104bdc:	69fb      	ldr	r3, [r7, #28]
 8104bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104be2:	695b      	ldr	r3, [r3, #20]
 8104be4:	69fa      	ldr	r2, [r7, #28]
 8104be6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104bea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8104bee:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8104bf2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8104bf4:	69fb      	ldr	r3, [r7, #28]
 8104bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104bfa:	691b      	ldr	r3, [r3, #16]
 8104bfc:	69fa      	ldr	r2, [r7, #28]
 8104bfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104c02:	f043 030b 	orr.w	r3, r3, #11
 8104c06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8104c08:	69fb      	ldr	r3, [r7, #28]
 8104c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104c0e:	681b      	ldr	r3, [r3, #0]
 8104c10:	69fa      	ldr	r2, [r7, #28]
 8104c12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104c16:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8104c1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	6818      	ldr	r0, [r3, #0]
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8104c24:	687b      	ldr	r3, [r7, #4]
 8104c26:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8104c2a:	461a      	mov	r2, r3
 8104c2c:	f007 f926 	bl	810be7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8104c30:	687b      	ldr	r3, [r7, #4]
 8104c32:	681b      	ldr	r3, [r3, #0]
 8104c34:	695a      	ldr	r2, [r3, #20]
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	681b      	ldr	r3, [r3, #0]
 8104c3a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8104c3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8104c40:	687b      	ldr	r3, [r7, #4]
 8104c42:	681b      	ldr	r3, [r3, #0]
 8104c44:	4618      	mov	r0, r3
 8104c46:	f007 f855 	bl	810bcf4 <USB_ReadInterrupts>
 8104c4a:	4603      	mov	r3, r0
 8104c4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8104c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104c54:	d123      	bne.n	8104c9e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	681b      	ldr	r3, [r3, #0]
 8104c5a:	4618      	mov	r0, r3
 8104c5c:	f007 f8eb 	bl	810be36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	4618      	mov	r0, r3
 8104c66:	f006 f9a2 	bl	810afae <USB_GetDevSpeed>
 8104c6a:	4603      	mov	r3, r0
 8104c6c:	461a      	mov	r2, r3
 8104c6e:	687b      	ldr	r3, [r7, #4]
 8104c70:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8104c72:	687b      	ldr	r3, [r7, #4]
 8104c74:	681c      	ldr	r4, [r3, #0]
 8104c76:	f000 ffdb 	bl	8105c30 <HAL_RCC_GetHCLKFreq>
 8104c7a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8104c80:	461a      	mov	r2, r3
 8104c82:	4620      	mov	r0, r4
 8104c84:	f005 feac 	bl	810a9e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8104c88:	6878      	ldr	r0, [r7, #4]
 8104c8a:	f009 fcba 	bl	810e602 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8104c8e:	687b      	ldr	r3, [r7, #4]
 8104c90:	681b      	ldr	r3, [r3, #0]
 8104c92:	695a      	ldr	r2, [r3, #20]
 8104c94:	687b      	ldr	r3, [r7, #4]
 8104c96:	681b      	ldr	r3, [r3, #0]
 8104c98:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8104c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8104c9e:	687b      	ldr	r3, [r7, #4]
 8104ca0:	681b      	ldr	r3, [r3, #0]
 8104ca2:	4618      	mov	r0, r3
 8104ca4:	f007 f826 	bl	810bcf4 <USB_ReadInterrupts>
 8104ca8:	4603      	mov	r3, r0
 8104caa:	f003 0308 	and.w	r3, r3, #8
 8104cae:	2b08      	cmp	r3, #8
 8104cb0:	d10a      	bne.n	8104cc8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8104cb2:	6878      	ldr	r0, [r7, #4]
 8104cb4:	f009 fc97 	bl	810e5e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8104cb8:	687b      	ldr	r3, [r7, #4]
 8104cba:	681b      	ldr	r3, [r3, #0]
 8104cbc:	695a      	ldr	r2, [r3, #20]
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	681b      	ldr	r3, [r3, #0]
 8104cc2:	f002 0208 	and.w	r2, r2, #8
 8104cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	681b      	ldr	r3, [r3, #0]
 8104ccc:	4618      	mov	r0, r3
 8104cce:	f007 f811 	bl	810bcf4 <USB_ReadInterrupts>
 8104cd2:	4603      	mov	r3, r0
 8104cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104cd8:	2b80      	cmp	r3, #128	@ 0x80
 8104cda:	d123      	bne.n	8104d24 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8104cdc:	6a3b      	ldr	r3, [r7, #32]
 8104cde:	699b      	ldr	r3, [r3, #24]
 8104ce0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8104ce4:	6a3b      	ldr	r3, [r7, #32]
 8104ce6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104ce8:	2301      	movs	r3, #1
 8104cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8104cec:	e014      	b.n	8104d18 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8104cee:	6879      	ldr	r1, [r7, #4]
 8104cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104cf2:	4613      	mov	r3, r2
 8104cf4:	00db      	lsls	r3, r3, #3
 8104cf6:	4413      	add	r3, r2
 8104cf8:	009b      	lsls	r3, r3, #2
 8104cfa:	440b      	add	r3, r1
 8104cfc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8104d00:	781b      	ldrb	r3, [r3, #0]
 8104d02:	2b01      	cmp	r3, #1
 8104d04:	d105      	bne.n	8104d12 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8104d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104d08:	b2db      	uxtb	r3, r3
 8104d0a:	4619      	mov	r1, r3
 8104d0c:	6878      	ldr	r0, [r7, #4]
 8104d0e:	f000 fb0a 	bl	8105326 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104d14:	3301      	adds	r3, #1
 8104d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	791b      	ldrb	r3, [r3, #4]
 8104d1c:	461a      	mov	r2, r3
 8104d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104d20:	4293      	cmp	r3, r2
 8104d22:	d3e4      	bcc.n	8104cee <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8104d24:	687b      	ldr	r3, [r7, #4]
 8104d26:	681b      	ldr	r3, [r3, #0]
 8104d28:	4618      	mov	r0, r3
 8104d2a:	f006 ffe3 	bl	810bcf4 <USB_ReadInterrupts>
 8104d2e:	4603      	mov	r3, r0
 8104d30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8104d34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104d38:	d13c      	bne.n	8104db4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104d3a:	2301      	movs	r3, #1
 8104d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8104d3e:	e02b      	b.n	8104d98 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8104d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104d42:	015a      	lsls	r2, r3, #5
 8104d44:	69fb      	ldr	r3, [r7, #28]
 8104d46:	4413      	add	r3, r2
 8104d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8104d4c:	681b      	ldr	r3, [r3, #0]
 8104d4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8104d50:	6879      	ldr	r1, [r7, #4]
 8104d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104d54:	4613      	mov	r3, r2
 8104d56:	00db      	lsls	r3, r3, #3
 8104d58:	4413      	add	r3, r2
 8104d5a:	009b      	lsls	r3, r3, #2
 8104d5c:	440b      	add	r3, r1
 8104d5e:	3318      	adds	r3, #24
 8104d60:	781b      	ldrb	r3, [r3, #0]
 8104d62:	2b01      	cmp	r3, #1
 8104d64:	d115      	bne.n	8104d92 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8104d66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8104d68:	2b00      	cmp	r3, #0
 8104d6a:	da12      	bge.n	8104d92 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8104d6c:	6879      	ldr	r1, [r7, #4]
 8104d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104d70:	4613      	mov	r3, r2
 8104d72:	00db      	lsls	r3, r3, #3
 8104d74:	4413      	add	r3, r2
 8104d76:	009b      	lsls	r3, r3, #2
 8104d78:	440b      	add	r3, r1
 8104d7a:	3317      	adds	r3, #23
 8104d7c:	2201      	movs	r2, #1
 8104d7e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8104d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104d82:	b2db      	uxtb	r3, r3
 8104d84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8104d88:	b2db      	uxtb	r3, r3
 8104d8a:	4619      	mov	r1, r3
 8104d8c:	6878      	ldr	r0, [r7, #4]
 8104d8e:	f000 faca 	bl	8105326 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104d94:	3301      	adds	r3, #1
 8104d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	791b      	ldrb	r3, [r3, #4]
 8104d9c:	461a      	mov	r2, r3
 8104d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104da0:	4293      	cmp	r3, r2
 8104da2:	d3cd      	bcc.n	8104d40 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8104da4:	687b      	ldr	r3, [r7, #4]
 8104da6:	681b      	ldr	r3, [r3, #0]
 8104da8:	695a      	ldr	r2, [r3, #20]
 8104daa:	687b      	ldr	r3, [r7, #4]
 8104dac:	681b      	ldr	r3, [r3, #0]
 8104dae:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8104db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8104db4:	687b      	ldr	r3, [r7, #4]
 8104db6:	681b      	ldr	r3, [r3, #0]
 8104db8:	4618      	mov	r0, r3
 8104dba:	f006 ff9b 	bl	810bcf4 <USB_ReadInterrupts>
 8104dbe:	4603      	mov	r3, r0
 8104dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8104dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104dc8:	d156      	bne.n	8104e78 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104dca:	2301      	movs	r3, #1
 8104dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8104dce:	e045      	b.n	8104e5c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8104dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104dd2:	015a      	lsls	r2, r3, #5
 8104dd4:	69fb      	ldr	r3, [r7, #28]
 8104dd6:	4413      	add	r3, r2
 8104dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8104ddc:	681b      	ldr	r3, [r3, #0]
 8104dde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8104de0:	6879      	ldr	r1, [r7, #4]
 8104de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104de4:	4613      	mov	r3, r2
 8104de6:	00db      	lsls	r3, r3, #3
 8104de8:	4413      	add	r3, r2
 8104dea:	009b      	lsls	r3, r3, #2
 8104dec:	440b      	add	r3, r1
 8104dee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8104df2:	781b      	ldrb	r3, [r3, #0]
 8104df4:	2b01      	cmp	r3, #1
 8104df6:	d12e      	bne.n	8104e56 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8104df8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8104dfa:	2b00      	cmp	r3, #0
 8104dfc:	da2b      	bge.n	8104e56 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8104dfe:	69bb      	ldr	r3, [r7, #24]
 8104e00:	0c1a      	lsrs	r2, r3, #16
 8104e02:	687b      	ldr	r3, [r7, #4]
 8104e04:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8104e08:	4053      	eors	r3, r2
 8104e0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8104e0e:	2b00      	cmp	r3, #0
 8104e10:	d121      	bne.n	8104e56 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8104e12:	6879      	ldr	r1, [r7, #4]
 8104e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104e16:	4613      	mov	r3, r2
 8104e18:	00db      	lsls	r3, r3, #3
 8104e1a:	4413      	add	r3, r2
 8104e1c:	009b      	lsls	r3, r3, #2
 8104e1e:	440b      	add	r3, r1
 8104e20:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8104e24:	2201      	movs	r2, #1
 8104e26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8104e28:	6a3b      	ldr	r3, [r7, #32]
 8104e2a:	699b      	ldr	r3, [r3, #24]
 8104e2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8104e30:	6a3b      	ldr	r3, [r7, #32]
 8104e32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8104e34:	6a3b      	ldr	r3, [r7, #32]
 8104e36:	695b      	ldr	r3, [r3, #20]
 8104e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104e3c:	2b00      	cmp	r3, #0
 8104e3e:	d10a      	bne.n	8104e56 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8104e40:	69fb      	ldr	r3, [r7, #28]
 8104e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104e46:	685b      	ldr	r3, [r3, #4]
 8104e48:	69fa      	ldr	r2, [r7, #28]
 8104e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104e4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8104e52:	6053      	str	r3, [r2, #4]
            break;
 8104e54:	e008      	b.n	8104e68 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104e58:	3301      	adds	r3, #1
 8104e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8104e5c:	687b      	ldr	r3, [r7, #4]
 8104e5e:	791b      	ldrb	r3, [r3, #4]
 8104e60:	461a      	mov	r2, r3
 8104e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104e64:	4293      	cmp	r3, r2
 8104e66:	d3b3      	bcc.n	8104dd0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	681b      	ldr	r3, [r3, #0]
 8104e6c:	695a      	ldr	r2, [r3, #20]
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8104e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	681b      	ldr	r3, [r3, #0]
 8104e7c:	4618      	mov	r0, r3
 8104e7e:	f006 ff39 	bl	810bcf4 <USB_ReadInterrupts>
 8104e82:	4603      	mov	r3, r0
 8104e84:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8104e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104e8c:	d10a      	bne.n	8104ea4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8104e8e:	6878      	ldr	r0, [r7, #4]
 8104e90:	f009 fc38 	bl	810e704 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	681b      	ldr	r3, [r3, #0]
 8104e98:	695a      	ldr	r2, [r3, #20]
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8104ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	4618      	mov	r0, r3
 8104eaa:	f006 ff23 	bl	810bcf4 <USB_ReadInterrupts>
 8104eae:	4603      	mov	r3, r0
 8104eb0:	f003 0304 	and.w	r3, r3, #4
 8104eb4:	2b04      	cmp	r3, #4
 8104eb6:	d115      	bne.n	8104ee4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	685b      	ldr	r3, [r3, #4]
 8104ebe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8104ec0:	69bb      	ldr	r3, [r7, #24]
 8104ec2:	f003 0304 	and.w	r3, r3, #4
 8104ec6:	2b00      	cmp	r3, #0
 8104ec8:	d002      	beq.n	8104ed0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8104eca:	6878      	ldr	r0, [r7, #4]
 8104ecc:	f009 fc28 	bl	810e720 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	681b      	ldr	r3, [r3, #0]
 8104ed4:	6859      	ldr	r1, [r3, #4]
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	681b      	ldr	r3, [r3, #0]
 8104eda:	69ba      	ldr	r2, [r7, #24]
 8104edc:	430a      	orrs	r2, r1
 8104ede:	605a      	str	r2, [r3, #4]
 8104ee0:	e000      	b.n	8104ee4 <HAL_PCD_IRQHandler+0x996>
      return;
 8104ee2:	bf00      	nop
    }
  }
}
 8104ee4:	3734      	adds	r7, #52	@ 0x34
 8104ee6:	46bd      	mov	sp, r7
 8104ee8:	bd90      	pop	{r4, r7, pc}

08104eea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8104eea:	b580      	push	{r7, lr}
 8104eec:	b082      	sub	sp, #8
 8104eee:	af00      	add	r7, sp, #0
 8104ef0:	6078      	str	r0, [r7, #4]
 8104ef2:	460b      	mov	r3, r1
 8104ef4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8104ef6:	687b      	ldr	r3, [r7, #4]
 8104ef8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8104efc:	2b01      	cmp	r3, #1
 8104efe:	d101      	bne.n	8104f04 <HAL_PCD_SetAddress+0x1a>
 8104f00:	2302      	movs	r3, #2
 8104f02:	e012      	b.n	8104f2a <HAL_PCD_SetAddress+0x40>
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	2201      	movs	r2, #1
 8104f08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8104f0c:	687b      	ldr	r3, [r7, #4]
 8104f0e:	78fa      	ldrb	r2, [r7, #3]
 8104f10:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8104f12:	687b      	ldr	r3, [r7, #4]
 8104f14:	681b      	ldr	r3, [r3, #0]
 8104f16:	78fa      	ldrb	r2, [r7, #3]
 8104f18:	4611      	mov	r1, r2
 8104f1a:	4618      	mov	r0, r3
 8104f1c:	f006 fe82 	bl	810bc24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	2200      	movs	r2, #0
 8104f24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8104f28:	2300      	movs	r3, #0
}
 8104f2a:	4618      	mov	r0, r3
 8104f2c:	3708      	adds	r7, #8
 8104f2e:	46bd      	mov	sp, r7
 8104f30:	bd80      	pop	{r7, pc}

08104f32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8104f32:	b580      	push	{r7, lr}
 8104f34:	b084      	sub	sp, #16
 8104f36:	af00      	add	r7, sp, #0
 8104f38:	6078      	str	r0, [r7, #4]
 8104f3a:	4608      	mov	r0, r1
 8104f3c:	4611      	mov	r1, r2
 8104f3e:	461a      	mov	r2, r3
 8104f40:	4603      	mov	r3, r0
 8104f42:	70fb      	strb	r3, [r7, #3]
 8104f44:	460b      	mov	r3, r1
 8104f46:	803b      	strh	r3, [r7, #0]
 8104f48:	4613      	mov	r3, r2
 8104f4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8104f4c:	2300      	movs	r3, #0
 8104f4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8104f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8104f54:	2b00      	cmp	r3, #0
 8104f56:	da0f      	bge.n	8104f78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8104f58:	78fb      	ldrb	r3, [r7, #3]
 8104f5a:	f003 020f 	and.w	r2, r3, #15
 8104f5e:	4613      	mov	r3, r2
 8104f60:	00db      	lsls	r3, r3, #3
 8104f62:	4413      	add	r3, r2
 8104f64:	009b      	lsls	r3, r3, #2
 8104f66:	3310      	adds	r3, #16
 8104f68:	687a      	ldr	r2, [r7, #4]
 8104f6a:	4413      	add	r3, r2
 8104f6c:	3304      	adds	r3, #4
 8104f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8104f70:	68fb      	ldr	r3, [r7, #12]
 8104f72:	2201      	movs	r2, #1
 8104f74:	705a      	strb	r2, [r3, #1]
 8104f76:	e00f      	b.n	8104f98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8104f78:	78fb      	ldrb	r3, [r7, #3]
 8104f7a:	f003 020f 	and.w	r2, r3, #15
 8104f7e:	4613      	mov	r3, r2
 8104f80:	00db      	lsls	r3, r3, #3
 8104f82:	4413      	add	r3, r2
 8104f84:	009b      	lsls	r3, r3, #2
 8104f86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8104f8a:	687a      	ldr	r2, [r7, #4]
 8104f8c:	4413      	add	r3, r2
 8104f8e:	3304      	adds	r3, #4
 8104f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8104f92:	68fb      	ldr	r3, [r7, #12]
 8104f94:	2200      	movs	r2, #0
 8104f96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8104f98:	78fb      	ldrb	r3, [r7, #3]
 8104f9a:	f003 030f 	and.w	r3, r3, #15
 8104f9e:	b2da      	uxtb	r2, r3
 8104fa0:	68fb      	ldr	r3, [r7, #12]
 8104fa2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8104fa4:	883b      	ldrh	r3, [r7, #0]
 8104fa6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8104faa:	68fb      	ldr	r3, [r7, #12]
 8104fac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8104fae:	68fb      	ldr	r3, [r7, #12]
 8104fb0:	78ba      	ldrb	r2, [r7, #2]
 8104fb2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8104fb4:	68fb      	ldr	r3, [r7, #12]
 8104fb6:	785b      	ldrb	r3, [r3, #1]
 8104fb8:	2b00      	cmp	r3, #0
 8104fba:	d004      	beq.n	8104fc6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8104fbc:	68fb      	ldr	r3, [r7, #12]
 8104fbe:	781b      	ldrb	r3, [r3, #0]
 8104fc0:	461a      	mov	r2, r3
 8104fc2:	68fb      	ldr	r3, [r7, #12]
 8104fc4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8104fc6:	78bb      	ldrb	r3, [r7, #2]
 8104fc8:	2b02      	cmp	r3, #2
 8104fca:	d102      	bne.n	8104fd2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8104fcc:	68fb      	ldr	r3, [r7, #12]
 8104fce:	2200      	movs	r2, #0
 8104fd0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8104fd2:	687b      	ldr	r3, [r7, #4]
 8104fd4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8104fd8:	2b01      	cmp	r3, #1
 8104fda:	d101      	bne.n	8104fe0 <HAL_PCD_EP_Open+0xae>
 8104fdc:	2302      	movs	r3, #2
 8104fde:	e00e      	b.n	8104ffe <HAL_PCD_EP_Open+0xcc>
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	2201      	movs	r2, #1
 8104fe4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	681b      	ldr	r3, [r3, #0]
 8104fec:	68f9      	ldr	r1, [r7, #12]
 8104fee:	4618      	mov	r0, r3
 8104ff0:	f006 f802 	bl	810aff8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8104ff4:	687b      	ldr	r3, [r7, #4]
 8104ff6:	2200      	movs	r2, #0
 8104ff8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8104ffc:	7afb      	ldrb	r3, [r7, #11]
}
 8104ffe:	4618      	mov	r0, r3
 8105000:	3710      	adds	r7, #16
 8105002:	46bd      	mov	sp, r7
 8105004:	bd80      	pop	{r7, pc}

08105006 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8105006:	b580      	push	{r7, lr}
 8105008:	b084      	sub	sp, #16
 810500a:	af00      	add	r7, sp, #0
 810500c:	6078      	str	r0, [r7, #4]
 810500e:	460b      	mov	r3, r1
 8105010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8105012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8105016:	2b00      	cmp	r3, #0
 8105018:	da0f      	bge.n	810503a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 810501a:	78fb      	ldrb	r3, [r7, #3]
 810501c:	f003 020f 	and.w	r2, r3, #15
 8105020:	4613      	mov	r3, r2
 8105022:	00db      	lsls	r3, r3, #3
 8105024:	4413      	add	r3, r2
 8105026:	009b      	lsls	r3, r3, #2
 8105028:	3310      	adds	r3, #16
 810502a:	687a      	ldr	r2, [r7, #4]
 810502c:	4413      	add	r3, r2
 810502e:	3304      	adds	r3, #4
 8105030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8105032:	68fb      	ldr	r3, [r7, #12]
 8105034:	2201      	movs	r2, #1
 8105036:	705a      	strb	r2, [r3, #1]
 8105038:	e00f      	b.n	810505a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 810503a:	78fb      	ldrb	r3, [r7, #3]
 810503c:	f003 020f 	and.w	r2, r3, #15
 8105040:	4613      	mov	r3, r2
 8105042:	00db      	lsls	r3, r3, #3
 8105044:	4413      	add	r3, r2
 8105046:	009b      	lsls	r3, r3, #2
 8105048:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 810504c:	687a      	ldr	r2, [r7, #4]
 810504e:	4413      	add	r3, r2
 8105050:	3304      	adds	r3, #4
 8105052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8105054:	68fb      	ldr	r3, [r7, #12]
 8105056:	2200      	movs	r2, #0
 8105058:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 810505a:	78fb      	ldrb	r3, [r7, #3]
 810505c:	f003 030f 	and.w	r3, r3, #15
 8105060:	b2da      	uxtb	r2, r3
 8105062:	68fb      	ldr	r3, [r7, #12]
 8105064:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 810506c:	2b01      	cmp	r3, #1
 810506e:	d101      	bne.n	8105074 <HAL_PCD_EP_Close+0x6e>
 8105070:	2302      	movs	r3, #2
 8105072:	e00e      	b.n	8105092 <HAL_PCD_EP_Close+0x8c>
 8105074:	687b      	ldr	r3, [r7, #4]
 8105076:	2201      	movs	r2, #1
 8105078:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	681b      	ldr	r3, [r3, #0]
 8105080:	68f9      	ldr	r1, [r7, #12]
 8105082:	4618      	mov	r0, r3
 8105084:	f006 f840 	bl	810b108 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	2200      	movs	r2, #0
 810508c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8105090:	2300      	movs	r3, #0
}
 8105092:	4618      	mov	r0, r3
 8105094:	3710      	adds	r7, #16
 8105096:	46bd      	mov	sp, r7
 8105098:	bd80      	pop	{r7, pc}

0810509a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 810509a:	b580      	push	{r7, lr}
 810509c:	b086      	sub	sp, #24
 810509e:	af00      	add	r7, sp, #0
 81050a0:	60f8      	str	r0, [r7, #12]
 81050a2:	607a      	str	r2, [r7, #4]
 81050a4:	603b      	str	r3, [r7, #0]
 81050a6:	460b      	mov	r3, r1
 81050a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 81050aa:	7afb      	ldrb	r3, [r7, #11]
 81050ac:	f003 020f 	and.w	r2, r3, #15
 81050b0:	4613      	mov	r3, r2
 81050b2:	00db      	lsls	r3, r3, #3
 81050b4:	4413      	add	r3, r2
 81050b6:	009b      	lsls	r3, r3, #2
 81050b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 81050bc:	68fa      	ldr	r2, [r7, #12]
 81050be:	4413      	add	r3, r2
 81050c0:	3304      	adds	r3, #4
 81050c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 81050c4:	697b      	ldr	r3, [r7, #20]
 81050c6:	687a      	ldr	r2, [r7, #4]
 81050c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 81050ca:	697b      	ldr	r3, [r7, #20]
 81050cc:	683a      	ldr	r2, [r7, #0]
 81050ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 81050d0:	697b      	ldr	r3, [r7, #20]
 81050d2:	2200      	movs	r2, #0
 81050d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 81050d6:	697b      	ldr	r3, [r7, #20]
 81050d8:	2200      	movs	r2, #0
 81050da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 81050dc:	7afb      	ldrb	r3, [r7, #11]
 81050de:	f003 030f 	and.w	r3, r3, #15
 81050e2:	b2da      	uxtb	r2, r3
 81050e4:	697b      	ldr	r3, [r7, #20]
 81050e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 81050e8:	68fb      	ldr	r3, [r7, #12]
 81050ea:	799b      	ldrb	r3, [r3, #6]
 81050ec:	2b01      	cmp	r3, #1
 81050ee:	d102      	bne.n	81050f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 81050f0:	687a      	ldr	r2, [r7, #4]
 81050f2:	697b      	ldr	r3, [r7, #20]
 81050f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 81050f6:	68fb      	ldr	r3, [r7, #12]
 81050f8:	6818      	ldr	r0, [r3, #0]
 81050fa:	68fb      	ldr	r3, [r7, #12]
 81050fc:	799b      	ldrb	r3, [r3, #6]
 81050fe:	461a      	mov	r2, r3
 8105100:	6979      	ldr	r1, [r7, #20]
 8105102:	f006 f8dd 	bl	810b2c0 <USB_EPStartXfer>

  return HAL_OK;
 8105106:	2300      	movs	r3, #0
}
 8105108:	4618      	mov	r0, r3
 810510a:	3718      	adds	r7, #24
 810510c:	46bd      	mov	sp, r7
 810510e:	bd80      	pop	{r7, pc}

08105110 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8105110:	b480      	push	{r7}
 8105112:	b083      	sub	sp, #12
 8105114:	af00      	add	r7, sp, #0
 8105116:	6078      	str	r0, [r7, #4]
 8105118:	460b      	mov	r3, r1
 810511a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 810511c:	78fb      	ldrb	r3, [r7, #3]
 810511e:	f003 020f 	and.w	r2, r3, #15
 8105122:	6879      	ldr	r1, [r7, #4]
 8105124:	4613      	mov	r3, r2
 8105126:	00db      	lsls	r3, r3, #3
 8105128:	4413      	add	r3, r2
 810512a:	009b      	lsls	r3, r3, #2
 810512c:	440b      	add	r3, r1
 810512e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8105132:	681b      	ldr	r3, [r3, #0]
}
 8105134:	4618      	mov	r0, r3
 8105136:	370c      	adds	r7, #12
 8105138:	46bd      	mov	sp, r7
 810513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810513e:	4770      	bx	lr

08105140 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8105140:	b580      	push	{r7, lr}
 8105142:	b086      	sub	sp, #24
 8105144:	af00      	add	r7, sp, #0
 8105146:	60f8      	str	r0, [r7, #12]
 8105148:	607a      	str	r2, [r7, #4]
 810514a:	603b      	str	r3, [r7, #0]
 810514c:	460b      	mov	r3, r1
 810514e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8105150:	7afb      	ldrb	r3, [r7, #11]
 8105152:	f003 020f 	and.w	r2, r3, #15
 8105156:	4613      	mov	r3, r2
 8105158:	00db      	lsls	r3, r3, #3
 810515a:	4413      	add	r3, r2
 810515c:	009b      	lsls	r3, r3, #2
 810515e:	3310      	adds	r3, #16
 8105160:	68fa      	ldr	r2, [r7, #12]
 8105162:	4413      	add	r3, r2
 8105164:	3304      	adds	r3, #4
 8105166:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8105168:	697b      	ldr	r3, [r7, #20]
 810516a:	687a      	ldr	r2, [r7, #4]
 810516c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 810516e:	697b      	ldr	r3, [r7, #20]
 8105170:	683a      	ldr	r2, [r7, #0]
 8105172:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8105174:	697b      	ldr	r3, [r7, #20]
 8105176:	2200      	movs	r2, #0
 8105178:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 810517a:	697b      	ldr	r3, [r7, #20]
 810517c:	2201      	movs	r2, #1
 810517e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8105180:	7afb      	ldrb	r3, [r7, #11]
 8105182:	f003 030f 	and.w	r3, r3, #15
 8105186:	b2da      	uxtb	r2, r3
 8105188:	697b      	ldr	r3, [r7, #20]
 810518a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 810518c:	68fb      	ldr	r3, [r7, #12]
 810518e:	799b      	ldrb	r3, [r3, #6]
 8105190:	2b01      	cmp	r3, #1
 8105192:	d102      	bne.n	810519a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8105194:	687a      	ldr	r2, [r7, #4]
 8105196:	697b      	ldr	r3, [r7, #20]
 8105198:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 810519a:	68fb      	ldr	r3, [r7, #12]
 810519c:	6818      	ldr	r0, [r3, #0]
 810519e:	68fb      	ldr	r3, [r7, #12]
 81051a0:	799b      	ldrb	r3, [r3, #6]
 81051a2:	461a      	mov	r2, r3
 81051a4:	6979      	ldr	r1, [r7, #20]
 81051a6:	f006 f88b 	bl	810b2c0 <USB_EPStartXfer>

  return HAL_OK;
 81051aa:	2300      	movs	r3, #0
}
 81051ac:	4618      	mov	r0, r3
 81051ae:	3718      	adds	r7, #24
 81051b0:	46bd      	mov	sp, r7
 81051b2:	bd80      	pop	{r7, pc}

081051b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 81051b4:	b580      	push	{r7, lr}
 81051b6:	b084      	sub	sp, #16
 81051b8:	af00      	add	r7, sp, #0
 81051ba:	6078      	str	r0, [r7, #4]
 81051bc:	460b      	mov	r3, r1
 81051be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 81051c0:	78fb      	ldrb	r3, [r7, #3]
 81051c2:	f003 030f 	and.w	r3, r3, #15
 81051c6:	687a      	ldr	r2, [r7, #4]
 81051c8:	7912      	ldrb	r2, [r2, #4]
 81051ca:	4293      	cmp	r3, r2
 81051cc:	d901      	bls.n	81051d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 81051ce:	2301      	movs	r3, #1
 81051d0:	e04f      	b.n	8105272 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 81051d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81051d6:	2b00      	cmp	r3, #0
 81051d8:	da0f      	bge.n	81051fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 81051da:	78fb      	ldrb	r3, [r7, #3]
 81051dc:	f003 020f 	and.w	r2, r3, #15
 81051e0:	4613      	mov	r3, r2
 81051e2:	00db      	lsls	r3, r3, #3
 81051e4:	4413      	add	r3, r2
 81051e6:	009b      	lsls	r3, r3, #2
 81051e8:	3310      	adds	r3, #16
 81051ea:	687a      	ldr	r2, [r7, #4]
 81051ec:	4413      	add	r3, r2
 81051ee:	3304      	adds	r3, #4
 81051f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 81051f2:	68fb      	ldr	r3, [r7, #12]
 81051f4:	2201      	movs	r2, #1
 81051f6:	705a      	strb	r2, [r3, #1]
 81051f8:	e00d      	b.n	8105216 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 81051fa:	78fa      	ldrb	r2, [r7, #3]
 81051fc:	4613      	mov	r3, r2
 81051fe:	00db      	lsls	r3, r3, #3
 8105200:	4413      	add	r3, r2
 8105202:	009b      	lsls	r3, r3, #2
 8105204:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8105208:	687a      	ldr	r2, [r7, #4]
 810520a:	4413      	add	r3, r2
 810520c:	3304      	adds	r3, #4
 810520e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8105210:	68fb      	ldr	r3, [r7, #12]
 8105212:	2200      	movs	r2, #0
 8105214:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8105216:	68fb      	ldr	r3, [r7, #12]
 8105218:	2201      	movs	r2, #1
 810521a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 810521c:	78fb      	ldrb	r3, [r7, #3]
 810521e:	f003 030f 	and.w	r3, r3, #15
 8105222:	b2da      	uxtb	r2, r3
 8105224:	68fb      	ldr	r3, [r7, #12]
 8105226:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8105228:	687b      	ldr	r3, [r7, #4]
 810522a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 810522e:	2b01      	cmp	r3, #1
 8105230:	d101      	bne.n	8105236 <HAL_PCD_EP_SetStall+0x82>
 8105232:	2302      	movs	r3, #2
 8105234:	e01d      	b.n	8105272 <HAL_PCD_EP_SetStall+0xbe>
 8105236:	687b      	ldr	r3, [r7, #4]
 8105238:	2201      	movs	r2, #1
 810523a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	681b      	ldr	r3, [r3, #0]
 8105242:	68f9      	ldr	r1, [r7, #12]
 8105244:	4618      	mov	r0, r3
 8105246:	f006 fc19 	bl	810ba7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 810524a:	78fb      	ldrb	r3, [r7, #3]
 810524c:	f003 030f 	and.w	r3, r3, #15
 8105250:	2b00      	cmp	r3, #0
 8105252:	d109      	bne.n	8105268 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	6818      	ldr	r0, [r3, #0]
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	7999      	ldrb	r1, [r3, #6]
 810525c:	687b      	ldr	r3, [r7, #4]
 810525e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8105262:	461a      	mov	r2, r3
 8105264:	f006 fe0a 	bl	810be7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8105268:	687b      	ldr	r3, [r7, #4]
 810526a:	2200      	movs	r2, #0
 810526c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8105270:	2300      	movs	r3, #0
}
 8105272:	4618      	mov	r0, r3
 8105274:	3710      	adds	r7, #16
 8105276:	46bd      	mov	sp, r7
 8105278:	bd80      	pop	{r7, pc}

0810527a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 810527a:	b580      	push	{r7, lr}
 810527c:	b084      	sub	sp, #16
 810527e:	af00      	add	r7, sp, #0
 8105280:	6078      	str	r0, [r7, #4]
 8105282:	460b      	mov	r3, r1
 8105284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8105286:	78fb      	ldrb	r3, [r7, #3]
 8105288:	f003 030f 	and.w	r3, r3, #15
 810528c:	687a      	ldr	r2, [r7, #4]
 810528e:	7912      	ldrb	r2, [r2, #4]
 8105290:	4293      	cmp	r3, r2
 8105292:	d901      	bls.n	8105298 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8105294:	2301      	movs	r3, #1
 8105296:	e042      	b.n	810531e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8105298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 810529c:	2b00      	cmp	r3, #0
 810529e:	da0f      	bge.n	81052c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 81052a0:	78fb      	ldrb	r3, [r7, #3]
 81052a2:	f003 020f 	and.w	r2, r3, #15
 81052a6:	4613      	mov	r3, r2
 81052a8:	00db      	lsls	r3, r3, #3
 81052aa:	4413      	add	r3, r2
 81052ac:	009b      	lsls	r3, r3, #2
 81052ae:	3310      	adds	r3, #16
 81052b0:	687a      	ldr	r2, [r7, #4]
 81052b2:	4413      	add	r3, r2
 81052b4:	3304      	adds	r3, #4
 81052b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 81052b8:	68fb      	ldr	r3, [r7, #12]
 81052ba:	2201      	movs	r2, #1
 81052bc:	705a      	strb	r2, [r3, #1]
 81052be:	e00f      	b.n	81052e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 81052c0:	78fb      	ldrb	r3, [r7, #3]
 81052c2:	f003 020f 	and.w	r2, r3, #15
 81052c6:	4613      	mov	r3, r2
 81052c8:	00db      	lsls	r3, r3, #3
 81052ca:	4413      	add	r3, r2
 81052cc:	009b      	lsls	r3, r3, #2
 81052ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 81052d2:	687a      	ldr	r2, [r7, #4]
 81052d4:	4413      	add	r3, r2
 81052d6:	3304      	adds	r3, #4
 81052d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 81052da:	68fb      	ldr	r3, [r7, #12]
 81052dc:	2200      	movs	r2, #0
 81052de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 81052e0:	68fb      	ldr	r3, [r7, #12]
 81052e2:	2200      	movs	r2, #0
 81052e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 81052e6:	78fb      	ldrb	r3, [r7, #3]
 81052e8:	f003 030f 	and.w	r3, r3, #15
 81052ec:	b2da      	uxtb	r2, r3
 81052ee:	68fb      	ldr	r3, [r7, #12]
 81052f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 81052f2:	687b      	ldr	r3, [r7, #4]
 81052f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 81052f8:	2b01      	cmp	r3, #1
 81052fa:	d101      	bne.n	8105300 <HAL_PCD_EP_ClrStall+0x86>
 81052fc:	2302      	movs	r3, #2
 81052fe:	e00e      	b.n	810531e <HAL_PCD_EP_ClrStall+0xa4>
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	2201      	movs	r2, #1
 8105304:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	68f9      	ldr	r1, [r7, #12]
 810530e:	4618      	mov	r0, r3
 8105310:	f006 fc22 	bl	810bb58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8105314:	687b      	ldr	r3, [r7, #4]
 8105316:	2200      	movs	r2, #0
 8105318:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 810531c:	2300      	movs	r3, #0
}
 810531e:	4618      	mov	r0, r3
 8105320:	3710      	adds	r7, #16
 8105322:	46bd      	mov	sp, r7
 8105324:	bd80      	pop	{r7, pc}

08105326 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8105326:	b580      	push	{r7, lr}
 8105328:	b084      	sub	sp, #16
 810532a:	af00      	add	r7, sp, #0
 810532c:	6078      	str	r0, [r7, #4]
 810532e:	460b      	mov	r3, r1
 8105330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8105332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8105336:	2b00      	cmp	r3, #0
 8105338:	da0c      	bge.n	8105354 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 810533a:	78fb      	ldrb	r3, [r7, #3]
 810533c:	f003 020f 	and.w	r2, r3, #15
 8105340:	4613      	mov	r3, r2
 8105342:	00db      	lsls	r3, r3, #3
 8105344:	4413      	add	r3, r2
 8105346:	009b      	lsls	r3, r3, #2
 8105348:	3310      	adds	r3, #16
 810534a:	687a      	ldr	r2, [r7, #4]
 810534c:	4413      	add	r3, r2
 810534e:	3304      	adds	r3, #4
 8105350:	60fb      	str	r3, [r7, #12]
 8105352:	e00c      	b.n	810536e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8105354:	78fb      	ldrb	r3, [r7, #3]
 8105356:	f003 020f 	and.w	r2, r3, #15
 810535a:	4613      	mov	r3, r2
 810535c:	00db      	lsls	r3, r3, #3
 810535e:	4413      	add	r3, r2
 8105360:	009b      	lsls	r3, r3, #2
 8105362:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8105366:	687a      	ldr	r2, [r7, #4]
 8105368:	4413      	add	r3, r2
 810536a:	3304      	adds	r3, #4
 810536c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 810536e:	687b      	ldr	r3, [r7, #4]
 8105370:	681b      	ldr	r3, [r3, #0]
 8105372:	68f9      	ldr	r1, [r7, #12]
 8105374:	4618      	mov	r0, r3
 8105376:	f006 fa41 	bl	810b7fc <USB_EPStopXfer>
 810537a:	4603      	mov	r3, r0
 810537c:	72fb      	strb	r3, [r7, #11]

  return ret;
 810537e:	7afb      	ldrb	r3, [r7, #11]
}
 8105380:	4618      	mov	r0, r3
 8105382:	3710      	adds	r7, #16
 8105384:	46bd      	mov	sp, r7
 8105386:	bd80      	pop	{r7, pc}

08105388 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8105388:	b580      	push	{r7, lr}
 810538a:	b08a      	sub	sp, #40	@ 0x28
 810538c:	af02      	add	r7, sp, #8
 810538e:	6078      	str	r0, [r7, #4]
 8105390:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	681b      	ldr	r3, [r3, #0]
 8105396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105398:	697b      	ldr	r3, [r7, #20]
 810539a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 810539c:	683a      	ldr	r2, [r7, #0]
 810539e:	4613      	mov	r3, r2
 81053a0:	00db      	lsls	r3, r3, #3
 81053a2:	4413      	add	r3, r2
 81053a4:	009b      	lsls	r3, r3, #2
 81053a6:	3310      	adds	r3, #16
 81053a8:	687a      	ldr	r2, [r7, #4]
 81053aa:	4413      	add	r3, r2
 81053ac:	3304      	adds	r3, #4
 81053ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 81053b0:	68fb      	ldr	r3, [r7, #12]
 81053b2:	695a      	ldr	r2, [r3, #20]
 81053b4:	68fb      	ldr	r3, [r7, #12]
 81053b6:	691b      	ldr	r3, [r3, #16]
 81053b8:	429a      	cmp	r2, r3
 81053ba:	d901      	bls.n	81053c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 81053bc:	2301      	movs	r3, #1
 81053be:	e06b      	b.n	8105498 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 81053c0:	68fb      	ldr	r3, [r7, #12]
 81053c2:	691a      	ldr	r2, [r3, #16]
 81053c4:	68fb      	ldr	r3, [r7, #12]
 81053c6:	695b      	ldr	r3, [r3, #20]
 81053c8:	1ad3      	subs	r3, r2, r3
 81053ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 81053cc:	68fb      	ldr	r3, [r7, #12]
 81053ce:	689b      	ldr	r3, [r3, #8]
 81053d0:	69fa      	ldr	r2, [r7, #28]
 81053d2:	429a      	cmp	r2, r3
 81053d4:	d902      	bls.n	81053dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 81053d6:	68fb      	ldr	r3, [r7, #12]
 81053d8:	689b      	ldr	r3, [r3, #8]
 81053da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 81053dc:	69fb      	ldr	r3, [r7, #28]
 81053de:	3303      	adds	r3, #3
 81053e0:	089b      	lsrs	r3, r3, #2
 81053e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 81053e4:	e02a      	b.n	810543c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 81053e6:	68fb      	ldr	r3, [r7, #12]
 81053e8:	691a      	ldr	r2, [r3, #16]
 81053ea:	68fb      	ldr	r3, [r7, #12]
 81053ec:	695b      	ldr	r3, [r3, #20]
 81053ee:	1ad3      	subs	r3, r2, r3
 81053f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 81053f2:	68fb      	ldr	r3, [r7, #12]
 81053f4:	689b      	ldr	r3, [r3, #8]
 81053f6:	69fa      	ldr	r2, [r7, #28]
 81053f8:	429a      	cmp	r2, r3
 81053fa:	d902      	bls.n	8105402 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 81053fc:	68fb      	ldr	r3, [r7, #12]
 81053fe:	689b      	ldr	r3, [r3, #8]
 8105400:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8105402:	69fb      	ldr	r3, [r7, #28]
 8105404:	3303      	adds	r3, #3
 8105406:	089b      	lsrs	r3, r3, #2
 8105408:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 810540a:	68fb      	ldr	r3, [r7, #12]
 810540c:	68d9      	ldr	r1, [r3, #12]
 810540e:	683b      	ldr	r3, [r7, #0]
 8105410:	b2da      	uxtb	r2, r3
 8105412:	69fb      	ldr	r3, [r7, #28]
 8105414:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8105416:	687b      	ldr	r3, [r7, #4]
 8105418:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 810541a:	9300      	str	r3, [sp, #0]
 810541c:	4603      	mov	r3, r0
 810541e:	6978      	ldr	r0, [r7, #20]
 8105420:	f006 fa96 	bl	810b950 <USB_WritePacket>

    ep->xfer_buff  += len;
 8105424:	68fb      	ldr	r3, [r7, #12]
 8105426:	68da      	ldr	r2, [r3, #12]
 8105428:	69fb      	ldr	r3, [r7, #28]
 810542a:	441a      	add	r2, r3
 810542c:	68fb      	ldr	r3, [r7, #12]
 810542e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8105430:	68fb      	ldr	r3, [r7, #12]
 8105432:	695a      	ldr	r2, [r3, #20]
 8105434:	69fb      	ldr	r3, [r7, #28]
 8105436:	441a      	add	r2, r3
 8105438:	68fb      	ldr	r3, [r7, #12]
 810543a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 810543c:	683b      	ldr	r3, [r7, #0]
 810543e:	015a      	lsls	r2, r3, #5
 8105440:	693b      	ldr	r3, [r7, #16]
 8105442:	4413      	add	r3, r2
 8105444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8105448:	699b      	ldr	r3, [r3, #24]
 810544a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 810544c:	69ba      	ldr	r2, [r7, #24]
 810544e:	429a      	cmp	r2, r3
 8105450:	d809      	bhi.n	8105466 <PCD_WriteEmptyTxFifo+0xde>
 8105452:	68fb      	ldr	r3, [r7, #12]
 8105454:	695a      	ldr	r2, [r3, #20]
 8105456:	68fb      	ldr	r3, [r7, #12]
 8105458:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 810545a:	429a      	cmp	r2, r3
 810545c:	d203      	bcs.n	8105466 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 810545e:	68fb      	ldr	r3, [r7, #12]
 8105460:	691b      	ldr	r3, [r3, #16]
 8105462:	2b00      	cmp	r3, #0
 8105464:	d1bf      	bne.n	81053e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8105466:	68fb      	ldr	r3, [r7, #12]
 8105468:	691a      	ldr	r2, [r3, #16]
 810546a:	68fb      	ldr	r3, [r7, #12]
 810546c:	695b      	ldr	r3, [r3, #20]
 810546e:	429a      	cmp	r2, r3
 8105470:	d811      	bhi.n	8105496 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8105472:	683b      	ldr	r3, [r7, #0]
 8105474:	f003 030f 	and.w	r3, r3, #15
 8105478:	2201      	movs	r2, #1
 810547a:	fa02 f303 	lsl.w	r3, r2, r3
 810547e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8105480:	693b      	ldr	r3, [r7, #16]
 8105482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8105486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8105488:	68bb      	ldr	r3, [r7, #8]
 810548a:	43db      	mvns	r3, r3
 810548c:	6939      	ldr	r1, [r7, #16]
 810548e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8105492:	4013      	ands	r3, r2
 8105494:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8105496:	2300      	movs	r3, #0
}
 8105498:	4618      	mov	r0, r3
 810549a:	3720      	adds	r7, #32
 810549c:	46bd      	mov	sp, r7
 810549e:	bd80      	pop	{r7, pc}

081054a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 81054a0:	b580      	push	{r7, lr}
 81054a2:	b088      	sub	sp, #32
 81054a4:	af00      	add	r7, sp, #0
 81054a6:	6078      	str	r0, [r7, #4]
 81054a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81054b0:	69fb      	ldr	r3, [r7, #28]
 81054b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 81054b4:	69fb      	ldr	r3, [r7, #28]
 81054b6:	333c      	adds	r3, #60	@ 0x3c
 81054b8:	3304      	adds	r3, #4
 81054ba:	681b      	ldr	r3, [r3, #0]
 81054bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 81054be:	683b      	ldr	r3, [r7, #0]
 81054c0:	015a      	lsls	r2, r3, #5
 81054c2:	69bb      	ldr	r3, [r7, #24]
 81054c4:	4413      	add	r3, r2
 81054c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81054ca:	689b      	ldr	r3, [r3, #8]
 81054cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 81054ce:	687b      	ldr	r3, [r7, #4]
 81054d0:	799b      	ldrb	r3, [r3, #6]
 81054d2:	2b01      	cmp	r3, #1
 81054d4:	d17b      	bne.n	81055ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 81054d6:	693b      	ldr	r3, [r7, #16]
 81054d8:	f003 0308 	and.w	r3, r3, #8
 81054dc:	2b00      	cmp	r3, #0
 81054de:	d015      	beq.n	810550c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 81054e0:	697b      	ldr	r3, [r7, #20]
 81054e2:	4a61      	ldr	r2, [pc, #388]	@ (8105668 <PCD_EP_OutXfrComplete_int+0x1c8>)
 81054e4:	4293      	cmp	r3, r2
 81054e6:	f240 80b9 	bls.w	810565c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 81054ea:	693b      	ldr	r3, [r7, #16]
 81054ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 81054f0:	2b00      	cmp	r3, #0
 81054f2:	f000 80b3 	beq.w	810565c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 81054f6:	683b      	ldr	r3, [r7, #0]
 81054f8:	015a      	lsls	r2, r3, #5
 81054fa:	69bb      	ldr	r3, [r7, #24]
 81054fc:	4413      	add	r3, r2
 81054fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8105502:	461a      	mov	r2, r3
 8105504:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105508:	6093      	str	r3, [r2, #8]
 810550a:	e0a7      	b.n	810565c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 810550c:	693b      	ldr	r3, [r7, #16]
 810550e:	f003 0320 	and.w	r3, r3, #32
 8105512:	2b00      	cmp	r3, #0
 8105514:	d009      	beq.n	810552a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8105516:	683b      	ldr	r3, [r7, #0]
 8105518:	015a      	lsls	r2, r3, #5
 810551a:	69bb      	ldr	r3, [r7, #24]
 810551c:	4413      	add	r3, r2
 810551e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8105522:	461a      	mov	r2, r3
 8105524:	2320      	movs	r3, #32
 8105526:	6093      	str	r3, [r2, #8]
 8105528:	e098      	b.n	810565c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 810552a:	693b      	ldr	r3, [r7, #16]
 810552c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8105530:	2b00      	cmp	r3, #0
 8105532:	f040 8093 	bne.w	810565c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8105536:	697b      	ldr	r3, [r7, #20]
 8105538:	4a4b      	ldr	r2, [pc, #300]	@ (8105668 <PCD_EP_OutXfrComplete_int+0x1c8>)
 810553a:	4293      	cmp	r3, r2
 810553c:	d90f      	bls.n	810555e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 810553e:	693b      	ldr	r3, [r7, #16]
 8105540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8105544:	2b00      	cmp	r3, #0
 8105546:	d00a      	beq.n	810555e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8105548:	683b      	ldr	r3, [r7, #0]
 810554a:	015a      	lsls	r2, r3, #5
 810554c:	69bb      	ldr	r3, [r7, #24]
 810554e:	4413      	add	r3, r2
 8105550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8105554:	461a      	mov	r2, r3
 8105556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810555a:	6093      	str	r3, [r2, #8]
 810555c:	e07e      	b.n	810565c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 810555e:	683a      	ldr	r2, [r7, #0]
 8105560:	4613      	mov	r3, r2
 8105562:	00db      	lsls	r3, r3, #3
 8105564:	4413      	add	r3, r2
 8105566:	009b      	lsls	r3, r3, #2
 8105568:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 810556c:	687a      	ldr	r2, [r7, #4]
 810556e:	4413      	add	r3, r2
 8105570:	3304      	adds	r3, #4
 8105572:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8105574:	68fb      	ldr	r3, [r7, #12]
 8105576:	6a1a      	ldr	r2, [r3, #32]
 8105578:	683b      	ldr	r3, [r7, #0]
 810557a:	0159      	lsls	r1, r3, #5
 810557c:	69bb      	ldr	r3, [r7, #24]
 810557e:	440b      	add	r3, r1
 8105580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8105584:	691b      	ldr	r3, [r3, #16]
 8105586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 810558a:	1ad2      	subs	r2, r2, r3
 810558c:	68fb      	ldr	r3, [r7, #12]
 810558e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8105590:	683b      	ldr	r3, [r7, #0]
 8105592:	2b00      	cmp	r3, #0
 8105594:	d114      	bne.n	81055c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8105596:	68fb      	ldr	r3, [r7, #12]
 8105598:	691b      	ldr	r3, [r3, #16]
 810559a:	2b00      	cmp	r3, #0
 810559c:	d109      	bne.n	81055b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	6818      	ldr	r0, [r3, #0]
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 81055a8:	461a      	mov	r2, r3
 81055aa:	2101      	movs	r1, #1
 81055ac:	f006 fc66 	bl	810be7c <USB_EP0_OutStart>
 81055b0:	e006      	b.n	81055c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 81055b2:	68fb      	ldr	r3, [r7, #12]
 81055b4:	68da      	ldr	r2, [r3, #12]
 81055b6:	68fb      	ldr	r3, [r7, #12]
 81055b8:	695b      	ldr	r3, [r3, #20]
 81055ba:	441a      	add	r2, r3
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 81055c0:	683b      	ldr	r3, [r7, #0]
 81055c2:	b2db      	uxtb	r3, r3
 81055c4:	4619      	mov	r1, r3
 81055c6:	6878      	ldr	r0, [r7, #4]
 81055c8:	f008 ffd8 	bl	810e57c <HAL_PCD_DataOutStageCallback>
 81055cc:	e046      	b.n	810565c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 81055ce:	697b      	ldr	r3, [r7, #20]
 81055d0:	4a26      	ldr	r2, [pc, #152]	@ (810566c <PCD_EP_OutXfrComplete_int+0x1cc>)
 81055d2:	4293      	cmp	r3, r2
 81055d4:	d124      	bne.n	8105620 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 81055d6:	693b      	ldr	r3, [r7, #16]
 81055d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81055dc:	2b00      	cmp	r3, #0
 81055de:	d00a      	beq.n	81055f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 81055e0:	683b      	ldr	r3, [r7, #0]
 81055e2:	015a      	lsls	r2, r3, #5
 81055e4:	69bb      	ldr	r3, [r7, #24]
 81055e6:	4413      	add	r3, r2
 81055e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81055ec:	461a      	mov	r2, r3
 81055ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81055f2:	6093      	str	r3, [r2, #8]
 81055f4:	e032      	b.n	810565c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 81055f6:	693b      	ldr	r3, [r7, #16]
 81055f8:	f003 0320 	and.w	r3, r3, #32
 81055fc:	2b00      	cmp	r3, #0
 81055fe:	d008      	beq.n	8105612 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8105600:	683b      	ldr	r3, [r7, #0]
 8105602:	015a      	lsls	r2, r3, #5
 8105604:	69bb      	ldr	r3, [r7, #24]
 8105606:	4413      	add	r3, r2
 8105608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810560c:	461a      	mov	r2, r3
 810560e:	2320      	movs	r3, #32
 8105610:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8105612:	683b      	ldr	r3, [r7, #0]
 8105614:	b2db      	uxtb	r3, r3
 8105616:	4619      	mov	r1, r3
 8105618:	6878      	ldr	r0, [r7, #4]
 810561a:	f008 ffaf 	bl	810e57c <HAL_PCD_DataOutStageCallback>
 810561e:	e01d      	b.n	810565c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8105620:	683b      	ldr	r3, [r7, #0]
 8105622:	2b00      	cmp	r3, #0
 8105624:	d114      	bne.n	8105650 <PCD_EP_OutXfrComplete_int+0x1b0>
 8105626:	6879      	ldr	r1, [r7, #4]
 8105628:	683a      	ldr	r2, [r7, #0]
 810562a:	4613      	mov	r3, r2
 810562c:	00db      	lsls	r3, r3, #3
 810562e:	4413      	add	r3, r2
 8105630:	009b      	lsls	r3, r3, #2
 8105632:	440b      	add	r3, r1
 8105634:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8105638:	681b      	ldr	r3, [r3, #0]
 810563a:	2b00      	cmp	r3, #0
 810563c:	d108      	bne.n	8105650 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	6818      	ldr	r0, [r3, #0]
 8105642:	687b      	ldr	r3, [r7, #4]
 8105644:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8105648:	461a      	mov	r2, r3
 810564a:	2100      	movs	r1, #0
 810564c:	f006 fc16 	bl	810be7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8105650:	683b      	ldr	r3, [r7, #0]
 8105652:	b2db      	uxtb	r3, r3
 8105654:	4619      	mov	r1, r3
 8105656:	6878      	ldr	r0, [r7, #4]
 8105658:	f008 ff90 	bl	810e57c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 810565c:	2300      	movs	r3, #0
}
 810565e:	4618      	mov	r0, r3
 8105660:	3720      	adds	r7, #32
 8105662:	46bd      	mov	sp, r7
 8105664:	bd80      	pop	{r7, pc}
 8105666:	bf00      	nop
 8105668:	4f54300a 	.word	0x4f54300a
 810566c:	4f54310a 	.word	0x4f54310a

08105670 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8105670:	b580      	push	{r7, lr}
 8105672:	b086      	sub	sp, #24
 8105674:	af00      	add	r7, sp, #0
 8105676:	6078      	str	r0, [r7, #4]
 8105678:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	681b      	ldr	r3, [r3, #0]
 810567e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8105680:	697b      	ldr	r3, [r7, #20]
 8105682:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8105684:	697b      	ldr	r3, [r7, #20]
 8105686:	333c      	adds	r3, #60	@ 0x3c
 8105688:	3304      	adds	r3, #4
 810568a:	681b      	ldr	r3, [r3, #0]
 810568c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 810568e:	683b      	ldr	r3, [r7, #0]
 8105690:	015a      	lsls	r2, r3, #5
 8105692:	693b      	ldr	r3, [r7, #16]
 8105694:	4413      	add	r3, r2
 8105696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810569a:	689b      	ldr	r3, [r3, #8]
 810569c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 810569e:	68fb      	ldr	r3, [r7, #12]
 81056a0:	4a15      	ldr	r2, [pc, #84]	@ (81056f8 <PCD_EP_OutSetupPacket_int+0x88>)
 81056a2:	4293      	cmp	r3, r2
 81056a4:	d90e      	bls.n	81056c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 81056a6:	68bb      	ldr	r3, [r7, #8]
 81056a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 81056ac:	2b00      	cmp	r3, #0
 81056ae:	d009      	beq.n	81056c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 81056b0:	683b      	ldr	r3, [r7, #0]
 81056b2:	015a      	lsls	r2, r3, #5
 81056b4:	693b      	ldr	r3, [r7, #16]
 81056b6:	4413      	add	r3, r2
 81056b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81056bc:	461a      	mov	r2, r3
 81056be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81056c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 81056c4:	6878      	ldr	r0, [r7, #4]
 81056c6:	f008 ff47 	bl	810e558 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 81056ca:	68fb      	ldr	r3, [r7, #12]
 81056cc:	4a0a      	ldr	r2, [pc, #40]	@ (81056f8 <PCD_EP_OutSetupPacket_int+0x88>)
 81056ce:	4293      	cmp	r3, r2
 81056d0:	d90c      	bls.n	81056ec <PCD_EP_OutSetupPacket_int+0x7c>
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	799b      	ldrb	r3, [r3, #6]
 81056d6:	2b01      	cmp	r3, #1
 81056d8:	d108      	bne.n	81056ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 81056da:	687b      	ldr	r3, [r7, #4]
 81056dc:	6818      	ldr	r0, [r3, #0]
 81056de:	687b      	ldr	r3, [r7, #4]
 81056e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 81056e4:	461a      	mov	r2, r3
 81056e6:	2101      	movs	r1, #1
 81056e8:	f006 fbc8 	bl	810be7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 81056ec:	2300      	movs	r3, #0
}
 81056ee:	4618      	mov	r0, r3
 81056f0:	3718      	adds	r7, #24
 81056f2:	46bd      	mov	sp, r7
 81056f4:	bd80      	pop	{r7, pc}
 81056f6:	bf00      	nop
 81056f8:	4f54300a 	.word	0x4f54300a

081056fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 81056fc:	b480      	push	{r7}
 81056fe:	b085      	sub	sp, #20
 8105700:	af00      	add	r7, sp, #0
 8105702:	6078      	str	r0, [r7, #4]
 8105704:	460b      	mov	r3, r1
 8105706:	70fb      	strb	r3, [r7, #3]
 8105708:	4613      	mov	r3, r2
 810570a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	681b      	ldr	r3, [r3, #0]
 8105710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105712:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8105714:	78fb      	ldrb	r3, [r7, #3]
 8105716:	2b00      	cmp	r3, #0
 8105718:	d107      	bne.n	810572a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 810571a:	883b      	ldrh	r3, [r7, #0]
 810571c:	0419      	lsls	r1, r3, #16
 810571e:	687b      	ldr	r3, [r7, #4]
 8105720:	681b      	ldr	r3, [r3, #0]
 8105722:	68ba      	ldr	r2, [r7, #8]
 8105724:	430a      	orrs	r2, r1
 8105726:	629a      	str	r2, [r3, #40]	@ 0x28
 8105728:	e028      	b.n	810577c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 810572a:	687b      	ldr	r3, [r7, #4]
 810572c:	681b      	ldr	r3, [r3, #0]
 810572e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105730:	0c1b      	lsrs	r3, r3, #16
 8105732:	68ba      	ldr	r2, [r7, #8]
 8105734:	4413      	add	r3, r2
 8105736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8105738:	2300      	movs	r3, #0
 810573a:	73fb      	strb	r3, [r7, #15]
 810573c:	e00d      	b.n	810575a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 810573e:	687b      	ldr	r3, [r7, #4]
 8105740:	681a      	ldr	r2, [r3, #0]
 8105742:	7bfb      	ldrb	r3, [r7, #15]
 8105744:	3340      	adds	r3, #64	@ 0x40
 8105746:	009b      	lsls	r3, r3, #2
 8105748:	4413      	add	r3, r2
 810574a:	685b      	ldr	r3, [r3, #4]
 810574c:	0c1b      	lsrs	r3, r3, #16
 810574e:	68ba      	ldr	r2, [r7, #8]
 8105750:	4413      	add	r3, r2
 8105752:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8105754:	7bfb      	ldrb	r3, [r7, #15]
 8105756:	3301      	adds	r3, #1
 8105758:	73fb      	strb	r3, [r7, #15]
 810575a:	7bfa      	ldrb	r2, [r7, #15]
 810575c:	78fb      	ldrb	r3, [r7, #3]
 810575e:	3b01      	subs	r3, #1
 8105760:	429a      	cmp	r2, r3
 8105762:	d3ec      	bcc.n	810573e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8105764:	883b      	ldrh	r3, [r7, #0]
 8105766:	0418      	lsls	r0, r3, #16
 8105768:	687b      	ldr	r3, [r7, #4]
 810576a:	6819      	ldr	r1, [r3, #0]
 810576c:	78fb      	ldrb	r3, [r7, #3]
 810576e:	3b01      	subs	r3, #1
 8105770:	68ba      	ldr	r2, [r7, #8]
 8105772:	4302      	orrs	r2, r0
 8105774:	3340      	adds	r3, #64	@ 0x40
 8105776:	009b      	lsls	r3, r3, #2
 8105778:	440b      	add	r3, r1
 810577a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 810577c:	2300      	movs	r3, #0
}
 810577e:	4618      	mov	r0, r3
 8105780:	3714      	adds	r7, #20
 8105782:	46bd      	mov	sp, r7
 8105784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105788:	4770      	bx	lr

0810578a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 810578a:	b480      	push	{r7}
 810578c:	b083      	sub	sp, #12
 810578e:	af00      	add	r7, sp, #0
 8105790:	6078      	str	r0, [r7, #4]
 8105792:	460b      	mov	r3, r1
 8105794:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8105796:	687b      	ldr	r3, [r7, #4]
 8105798:	681b      	ldr	r3, [r3, #0]
 810579a:	887a      	ldrh	r2, [r7, #2]
 810579c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 810579e:	2300      	movs	r3, #0
}
 81057a0:	4618      	mov	r0, r3
 81057a2:	370c      	adds	r7, #12
 81057a4:	46bd      	mov	sp, r7
 81057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057aa:	4770      	bx	lr

081057ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 81057ac:	b480      	push	{r7}
 81057ae:	b085      	sub	sp, #20
 81057b0:	af00      	add	r7, sp, #0
 81057b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	681b      	ldr	r3, [r3, #0]
 81057b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 81057ba:	687b      	ldr	r3, [r7, #4]
 81057bc:	2201      	movs	r2, #1
 81057be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	2200      	movs	r2, #0
 81057c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 81057ca:	68fb      	ldr	r3, [r7, #12]
 81057cc:	699b      	ldr	r3, [r3, #24]
 81057ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81057d2:	68fb      	ldr	r3, [r7, #12]
 81057d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 81057d6:	68fb      	ldr	r3, [r7, #12]
 81057d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81057da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81057de:	f043 0303 	orr.w	r3, r3, #3
 81057e2:	68fa      	ldr	r2, [r7, #12]
 81057e4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 81057e6:	2300      	movs	r3, #0
}
 81057e8:	4618      	mov	r0, r3
 81057ea:	3714      	adds	r7, #20
 81057ec:	46bd      	mov	sp, r7
 81057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057f2:	4770      	bx	lr

081057f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 81057f4:	b480      	push	{r7}
 81057f6:	b083      	sub	sp, #12
 81057f8:	af00      	add	r7, sp, #0
 81057fa:	6078      	str	r0, [r7, #4]
 81057fc:	460b      	mov	r3, r1
 81057fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8105800:	bf00      	nop
 8105802:	370c      	adds	r7, #12
 8105804:	46bd      	mov	sp, r7
 8105806:	f85d 7b04 	ldr.w	r7, [sp], #4
 810580a:	4770      	bx	lr

0810580c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810580c:	b580      	push	{r7, lr}
 810580e:	b084      	sub	sp, #16
 8105810:	af00      	add	r7, sp, #0
 8105812:	60f8      	str	r0, [r7, #12]
 8105814:	460b      	mov	r3, r1
 8105816:	607a      	str	r2, [r7, #4]
 8105818:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810581a:	4b37      	ldr	r3, [pc, #220]	@ (81058f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810581c:	681b      	ldr	r3, [r3, #0]
 810581e:	f023 0201 	bic.w	r2, r3, #1
 8105822:	4935      	ldr	r1, [pc, #212]	@ (81058f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105824:	68fb      	ldr	r3, [r7, #12]
 8105826:	4313      	orrs	r3, r2
 8105828:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810582a:	687b      	ldr	r3, [r7, #4]
 810582c:	2b00      	cmp	r3, #0
 810582e:	d123      	bne.n	8105878 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105830:	f7fd f9c8 	bl	8102bc4 <HAL_GetCurrentCPUID>
 8105834:	4603      	mov	r3, r0
 8105836:	2b03      	cmp	r3, #3
 8105838:	d158      	bne.n	81058ec <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810583a:	4b2f      	ldr	r3, [pc, #188]	@ (81058f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810583c:	691b      	ldr	r3, [r3, #16]
 810583e:	4a2e      	ldr	r2, [pc, #184]	@ (81058f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105840:	f023 0301 	bic.w	r3, r3, #1
 8105844:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105846:	4b2d      	ldr	r3, [pc, #180]	@ (81058fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105848:	691b      	ldr	r3, [r3, #16]
 810584a:	4a2c      	ldr	r2, [pc, #176]	@ (81058fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810584c:	f043 0304 	orr.w	r3, r3, #4
 8105850:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105852:	f3bf 8f4f 	dsb	sy
}
 8105856:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105858:	f3bf 8f6f 	isb	sy
}
 810585c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810585e:	7afb      	ldrb	r3, [r7, #11]
 8105860:	2b01      	cmp	r3, #1
 8105862:	d101      	bne.n	8105868 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105864:	bf30      	wfi
 8105866:	e000      	b.n	810586a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105868:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810586a:	4b24      	ldr	r3, [pc, #144]	@ (81058fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810586c:	691b      	ldr	r3, [r3, #16]
 810586e:	4a23      	ldr	r2, [pc, #140]	@ (81058fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105870:	f023 0304 	bic.w	r3, r3, #4
 8105874:	6113      	str	r3, [r2, #16]
 8105876:	e03c      	b.n	81058f2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105878:	687b      	ldr	r3, [r7, #4]
 810587a:	2b01      	cmp	r3, #1
 810587c:	d123      	bne.n	81058c6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810587e:	f7fd f9a1 	bl	8102bc4 <HAL_GetCurrentCPUID>
 8105882:	4603      	mov	r3, r0
 8105884:	2b01      	cmp	r3, #1
 8105886:	d133      	bne.n	81058f0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105888:	4b1b      	ldr	r3, [pc, #108]	@ (81058f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810588a:	695b      	ldr	r3, [r3, #20]
 810588c:	4a1a      	ldr	r2, [pc, #104]	@ (81058f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810588e:	f023 0302 	bic.w	r3, r3, #2
 8105892:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105894:	4b19      	ldr	r3, [pc, #100]	@ (81058fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105896:	691b      	ldr	r3, [r3, #16]
 8105898:	4a18      	ldr	r2, [pc, #96]	@ (81058fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810589a:	f043 0304 	orr.w	r3, r3, #4
 810589e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81058a0:	f3bf 8f4f 	dsb	sy
}
 81058a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81058a6:	f3bf 8f6f 	isb	sy
}
 81058aa:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81058ac:	7afb      	ldrb	r3, [r7, #11]
 81058ae:	2b01      	cmp	r3, #1
 81058b0:	d101      	bne.n	81058b6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81058b2:	bf30      	wfi
 81058b4:	e000      	b.n	81058b8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81058b6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81058b8:	4b10      	ldr	r3, [pc, #64]	@ (81058fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 81058ba:	691b      	ldr	r3, [r3, #16]
 81058bc:	4a0f      	ldr	r2, [pc, #60]	@ (81058fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 81058be:	f023 0304 	bic.w	r3, r3, #4
 81058c2:	6113      	str	r3, [r2, #16]
 81058c4:	e015      	b.n	81058f2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81058c6:	f7fd f97d 	bl	8102bc4 <HAL_GetCurrentCPUID>
 81058ca:	4603      	mov	r3, r0
 81058cc:	2b03      	cmp	r3, #3
 81058ce:	d106      	bne.n	81058de <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81058d0:	4b09      	ldr	r3, [pc, #36]	@ (81058f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81058d2:	691b      	ldr	r3, [r3, #16]
 81058d4:	4a08      	ldr	r2, [pc, #32]	@ (81058f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81058d6:	f023 0304 	bic.w	r3, r3, #4
 81058da:	6113      	str	r3, [r2, #16]
 81058dc:	e009      	b.n	81058f2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81058de:	4b06      	ldr	r3, [pc, #24]	@ (81058f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81058e0:	695b      	ldr	r3, [r3, #20]
 81058e2:	4a05      	ldr	r2, [pc, #20]	@ (81058f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81058e4:	f023 0304 	bic.w	r3, r3, #4
 81058e8:	6153      	str	r3, [r2, #20]
 81058ea:	e002      	b.n	81058f2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81058ec:	bf00      	nop
 81058ee:	e000      	b.n	81058f2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81058f0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81058f2:	3710      	adds	r7, #16
 81058f4:	46bd      	mov	sp, r7
 81058f6:	bd80      	pop	{r7, pc}
 81058f8:	58024800 	.word	0x58024800
 81058fc:	e000ed00 	.word	0xe000ed00

08105900 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105900:	b580      	push	{r7, lr}
 8105902:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105904:	f7fd f95e 	bl	8102bc4 <HAL_GetCurrentCPUID>
 8105908:	4603      	mov	r3, r0
 810590a:	2b03      	cmp	r3, #3
 810590c:	d101      	bne.n	8105912 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810590e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105910:	e001      	b.n	8105916 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105912:	bf40      	sev
    __WFE ();
 8105914:	bf20      	wfe
}
 8105916:	bf00      	nop
 8105918:	bd80      	pop	{r7, pc}
	...

0810591c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 810591c:	b480      	push	{r7}
 810591e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8105920:	4b05      	ldr	r3, [pc, #20]	@ (8105938 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8105922:	68db      	ldr	r3, [r3, #12]
 8105924:	4a04      	ldr	r2, [pc, #16]	@ (8105938 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8105926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810592a:	60d3      	str	r3, [r2, #12]
}
 810592c:	bf00      	nop
 810592e:	46bd      	mov	sp, r7
 8105930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105934:	4770      	bx	lr
 8105936:	bf00      	nop
 8105938:	58024800 	.word	0x58024800

0810593c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810593c:	b480      	push	{r7}
 810593e:	b089      	sub	sp, #36	@ 0x24
 8105940:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105942:	4bb3      	ldr	r3, [pc, #716]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105944:	691b      	ldr	r3, [r3, #16]
 8105946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810594a:	2b18      	cmp	r3, #24
 810594c:	f200 8155 	bhi.w	8105bfa <HAL_RCC_GetSysClockFreq+0x2be>
 8105950:	a201      	add	r2, pc, #4	@ (adr r2, 8105958 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105956:	bf00      	nop
 8105958:	081059bd 	.word	0x081059bd
 810595c:	08105bfb 	.word	0x08105bfb
 8105960:	08105bfb 	.word	0x08105bfb
 8105964:	08105bfb 	.word	0x08105bfb
 8105968:	08105bfb 	.word	0x08105bfb
 810596c:	08105bfb 	.word	0x08105bfb
 8105970:	08105bfb 	.word	0x08105bfb
 8105974:	08105bfb 	.word	0x08105bfb
 8105978:	081059e3 	.word	0x081059e3
 810597c:	08105bfb 	.word	0x08105bfb
 8105980:	08105bfb 	.word	0x08105bfb
 8105984:	08105bfb 	.word	0x08105bfb
 8105988:	08105bfb 	.word	0x08105bfb
 810598c:	08105bfb 	.word	0x08105bfb
 8105990:	08105bfb 	.word	0x08105bfb
 8105994:	08105bfb 	.word	0x08105bfb
 8105998:	081059e9 	.word	0x081059e9
 810599c:	08105bfb 	.word	0x08105bfb
 81059a0:	08105bfb 	.word	0x08105bfb
 81059a4:	08105bfb 	.word	0x08105bfb
 81059a8:	08105bfb 	.word	0x08105bfb
 81059ac:	08105bfb 	.word	0x08105bfb
 81059b0:	08105bfb 	.word	0x08105bfb
 81059b4:	08105bfb 	.word	0x08105bfb
 81059b8:	081059ef 	.word	0x081059ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81059bc:	4b94      	ldr	r3, [pc, #592]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81059be:	681b      	ldr	r3, [r3, #0]
 81059c0:	f003 0320 	and.w	r3, r3, #32
 81059c4:	2b00      	cmp	r3, #0
 81059c6:	d009      	beq.n	81059dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81059c8:	4b91      	ldr	r3, [pc, #580]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81059ca:	681b      	ldr	r3, [r3, #0]
 81059cc:	08db      	lsrs	r3, r3, #3
 81059ce:	f003 0303 	and.w	r3, r3, #3
 81059d2:	4a90      	ldr	r2, [pc, #576]	@ (8105c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81059d4:	fa22 f303 	lsr.w	r3, r2, r3
 81059d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81059da:	e111      	b.n	8105c00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81059dc:	4b8d      	ldr	r3, [pc, #564]	@ (8105c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81059de:	61bb      	str	r3, [r7, #24]
      break;
 81059e0:	e10e      	b.n	8105c00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81059e2:	4b8d      	ldr	r3, [pc, #564]	@ (8105c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81059e4:	61bb      	str	r3, [r7, #24]
      break;
 81059e6:	e10b      	b.n	8105c00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81059e8:	4b8c      	ldr	r3, [pc, #560]	@ (8105c1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 81059ea:	61bb      	str	r3, [r7, #24]
      break;
 81059ec:	e108      	b.n	8105c00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81059ee:	4b88      	ldr	r3, [pc, #544]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81059f2:	f003 0303 	and.w	r3, r3, #3
 81059f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81059f8:	4b85      	ldr	r3, [pc, #532]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81059fc:	091b      	lsrs	r3, r3, #4
 81059fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105a02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105a04:	4b82      	ldr	r3, [pc, #520]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a08:	f003 0301 	and.w	r3, r3, #1
 8105a0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105a0e:	4b80      	ldr	r3, [pc, #512]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105a12:	08db      	lsrs	r3, r3, #3
 8105a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105a18:	68fa      	ldr	r2, [r7, #12]
 8105a1a:	fb02 f303 	mul.w	r3, r2, r3
 8105a1e:	ee07 3a90 	vmov	s15, r3
 8105a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8105a2a:	693b      	ldr	r3, [r7, #16]
 8105a2c:	2b00      	cmp	r3, #0
 8105a2e:	f000 80e1 	beq.w	8105bf4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8105a32:	697b      	ldr	r3, [r7, #20]
 8105a34:	2b02      	cmp	r3, #2
 8105a36:	f000 8083 	beq.w	8105b40 <HAL_RCC_GetSysClockFreq+0x204>
 8105a3a:	697b      	ldr	r3, [r7, #20]
 8105a3c:	2b02      	cmp	r3, #2
 8105a3e:	f200 80a1 	bhi.w	8105b84 <HAL_RCC_GetSysClockFreq+0x248>
 8105a42:	697b      	ldr	r3, [r7, #20]
 8105a44:	2b00      	cmp	r3, #0
 8105a46:	d003      	beq.n	8105a50 <HAL_RCC_GetSysClockFreq+0x114>
 8105a48:	697b      	ldr	r3, [r7, #20]
 8105a4a:	2b01      	cmp	r3, #1
 8105a4c:	d056      	beq.n	8105afc <HAL_RCC_GetSysClockFreq+0x1c0>
 8105a4e:	e099      	b.n	8105b84 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105a50:	4b6f      	ldr	r3, [pc, #444]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a52:	681b      	ldr	r3, [r3, #0]
 8105a54:	f003 0320 	and.w	r3, r3, #32
 8105a58:	2b00      	cmp	r3, #0
 8105a5a:	d02d      	beq.n	8105ab8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a5e:	681b      	ldr	r3, [r3, #0]
 8105a60:	08db      	lsrs	r3, r3, #3
 8105a62:	f003 0303 	and.w	r3, r3, #3
 8105a66:	4a6b      	ldr	r2, [pc, #428]	@ (8105c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105a68:	fa22 f303 	lsr.w	r3, r2, r3
 8105a6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a6e:	687b      	ldr	r3, [r7, #4]
 8105a70:	ee07 3a90 	vmov	s15, r3
 8105a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a78:	693b      	ldr	r3, [r7, #16]
 8105a7a:	ee07 3a90 	vmov	s15, r3
 8105a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a86:	4b62      	ldr	r3, [pc, #392]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a8e:	ee07 3a90 	vmov	s15, r3
 8105a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8105a9a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8105c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8105ab6:	e087      	b.n	8105bc8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105ab8:	693b      	ldr	r3, [r7, #16]
 8105aba:	ee07 3a90 	vmov	s15, r3
 8105abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ac2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8105c24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105aca:	4b51      	ldr	r3, [pc, #324]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ad2:	ee07 3a90 	vmov	s15, r3
 8105ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8105ade:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8105c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105af6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105afa:	e065      	b.n	8105bc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105afc:	693b      	ldr	r3, [r7, #16]
 8105afe:	ee07 3a90 	vmov	s15, r3
 8105b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b06:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8105c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b0e:	4b40      	ldr	r3, [pc, #256]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b16:	ee07 3a90 	vmov	s15, r3
 8105b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105b22:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8105c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105b3e:	e043      	b.n	8105bc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b40:	693b      	ldr	r3, [r7, #16]
 8105b42:	ee07 3a90 	vmov	s15, r3
 8105b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b4a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8105c2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8105b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b52:	4b2f      	ldr	r3, [pc, #188]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b5a:	ee07 3a90 	vmov	s15, r3
 8105b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8105b66:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8105c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105b82:	e021      	b.n	8105bc8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b84:	693b      	ldr	r3, [r7, #16]
 8105b86:	ee07 3a90 	vmov	s15, r3
 8105b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b8e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8105c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b96:	4b1e      	ldr	r3, [pc, #120]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b9e:	ee07 3a90 	vmov	s15, r3
 8105ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8105baa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8105c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105bc6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8105bc8:	4b11      	ldr	r3, [pc, #68]	@ (8105c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105bcc:	0a5b      	lsrs	r3, r3, #9
 8105bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105bd2:	3301      	adds	r3, #1
 8105bd4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8105bd6:	683b      	ldr	r3, [r7, #0]
 8105bd8:	ee07 3a90 	vmov	s15, r3
 8105bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8105be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105bec:	ee17 3a90 	vmov	r3, s15
 8105bf0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8105bf2:	e005      	b.n	8105c00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8105bf4:	2300      	movs	r3, #0
 8105bf6:	61bb      	str	r3, [r7, #24]
      break;
 8105bf8:	e002      	b.n	8105c00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8105bfa:	4b07      	ldr	r3, [pc, #28]	@ (8105c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105bfc:	61bb      	str	r3, [r7, #24]
      break;
 8105bfe:	bf00      	nop
  }

  return sysclockfreq;
 8105c00:	69bb      	ldr	r3, [r7, #24]
}
 8105c02:	4618      	mov	r0, r3
 8105c04:	3724      	adds	r7, #36	@ 0x24
 8105c06:	46bd      	mov	sp, r7
 8105c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c0c:	4770      	bx	lr
 8105c0e:	bf00      	nop
 8105c10:	58024400 	.word	0x58024400
 8105c14:	03d09000 	.word	0x03d09000
 8105c18:	003d0900 	.word	0x003d0900
 8105c1c:	017d7840 	.word	0x017d7840
 8105c20:	46000000 	.word	0x46000000
 8105c24:	4c742400 	.word	0x4c742400
 8105c28:	4a742400 	.word	0x4a742400
 8105c2c:	4bbebc20 	.word	0x4bbebc20

08105c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8105c30:	b580      	push	{r7, lr}
 8105c32:	b082      	sub	sp, #8
 8105c34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105c36:	f7ff fe81 	bl	810593c <HAL_RCC_GetSysClockFreq>
 8105c3a:	4602      	mov	r2, r0
 8105c3c:	4b11      	ldr	r3, [pc, #68]	@ (8105c84 <HAL_RCC_GetHCLKFreq+0x54>)
 8105c3e:	699b      	ldr	r3, [r3, #24]
 8105c40:	0a1b      	lsrs	r3, r3, #8
 8105c42:	f003 030f 	and.w	r3, r3, #15
 8105c46:	4910      	ldr	r1, [pc, #64]	@ (8105c88 <HAL_RCC_GetHCLKFreq+0x58>)
 8105c48:	5ccb      	ldrb	r3, [r1, r3]
 8105c4a:	f003 031f 	and.w	r3, r3, #31
 8105c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8105c52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105c54:	4b0b      	ldr	r3, [pc, #44]	@ (8105c84 <HAL_RCC_GetHCLKFreq+0x54>)
 8105c56:	699b      	ldr	r3, [r3, #24]
 8105c58:	f003 030f 	and.w	r3, r3, #15
 8105c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8105c88 <HAL_RCC_GetHCLKFreq+0x58>)
 8105c5e:	5cd3      	ldrb	r3, [r2, r3]
 8105c60:	f003 031f 	and.w	r3, r3, #31
 8105c64:	687a      	ldr	r2, [r7, #4]
 8105c66:	fa22 f303 	lsr.w	r3, r2, r3
 8105c6a:	4a08      	ldr	r2, [pc, #32]	@ (8105c8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105c6c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105c6e:	4b07      	ldr	r3, [pc, #28]	@ (8105c8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105c70:	681b      	ldr	r3, [r3, #0]
 8105c72:	4a07      	ldr	r2, [pc, #28]	@ (8105c90 <HAL_RCC_GetHCLKFreq+0x60>)
 8105c74:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105c76:	4b05      	ldr	r3, [pc, #20]	@ (8105c8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105c78:	681b      	ldr	r3, [r3, #0]
}
 8105c7a:	4618      	mov	r0, r3
 8105c7c:	3708      	adds	r7, #8
 8105c7e:	46bd      	mov	sp, r7
 8105c80:	bd80      	pop	{r7, pc}
 8105c82:	bf00      	nop
 8105c84:	58024400 	.word	0x58024400
 8105c88:	0810ec20 	.word	0x0810ec20
 8105c8c:	100320f4 	.word	0x100320f4
 8105c90:	100320f0 	.word	0x100320f0

08105c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105c94:	b580      	push	{r7, lr}
 8105c96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105c98:	f7ff ffca 	bl	8105c30 <HAL_RCC_GetHCLKFreq>
 8105c9c:	4602      	mov	r2, r0
 8105c9e:	4b06      	ldr	r3, [pc, #24]	@ (8105cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105ca0:	69db      	ldr	r3, [r3, #28]
 8105ca2:	091b      	lsrs	r3, r3, #4
 8105ca4:	f003 0307 	and.w	r3, r3, #7
 8105ca8:	4904      	ldr	r1, [pc, #16]	@ (8105cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8105caa:	5ccb      	ldrb	r3, [r1, r3]
 8105cac:	f003 031f 	and.w	r3, r3, #31
 8105cb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105cb4:	4618      	mov	r0, r3
 8105cb6:	bd80      	pop	{r7, pc}
 8105cb8:	58024400 	.word	0x58024400
 8105cbc:	0810ec20 	.word	0x0810ec20

08105cc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8105cc0:	b480      	push	{r7}
 8105cc2:	b083      	sub	sp, #12
 8105cc4:	af00      	add	r7, sp, #0
 8105cc6:	6078      	str	r0, [r7, #4]
 8105cc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8105cca:	687b      	ldr	r3, [r7, #4]
 8105ccc:	223f      	movs	r2, #63	@ 0x3f
 8105cce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8105cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8105d3c <HAL_RCC_GetClockConfig+0x7c>)
 8105cd2:	691b      	ldr	r3, [r3, #16]
 8105cd4:	f003 0207 	and.w	r2, r3, #7
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8105cdc:	4b17      	ldr	r3, [pc, #92]	@ (8105d3c <HAL_RCC_GetClockConfig+0x7c>)
 8105cde:	699b      	ldr	r3, [r3, #24]
 8105ce0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8105ce8:	4b14      	ldr	r3, [pc, #80]	@ (8105d3c <HAL_RCC_GetClockConfig+0x7c>)
 8105cea:	699b      	ldr	r3, [r3, #24]
 8105cec:	f003 020f 	and.w	r2, r3, #15
 8105cf0:	687b      	ldr	r3, [r7, #4]
 8105cf2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8105cf4:	4b11      	ldr	r3, [pc, #68]	@ (8105d3c <HAL_RCC_GetClockConfig+0x7c>)
 8105cf6:	699b      	ldr	r3, [r3, #24]
 8105cf8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8105d00:	4b0e      	ldr	r3, [pc, #56]	@ (8105d3c <HAL_RCC_GetClockConfig+0x7c>)
 8105d02:	69db      	ldr	r3, [r3, #28]
 8105d04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105d08:	687b      	ldr	r3, [r7, #4]
 8105d0a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8105d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8105d3c <HAL_RCC_GetClockConfig+0x7c>)
 8105d0e:	69db      	ldr	r3, [r3, #28]
 8105d10:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8105d18:	4b08      	ldr	r3, [pc, #32]	@ (8105d3c <HAL_RCC_GetClockConfig+0x7c>)
 8105d1a:	6a1b      	ldr	r3, [r3, #32]
 8105d1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105d20:	687b      	ldr	r3, [r7, #4]
 8105d22:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8105d24:	4b06      	ldr	r3, [pc, #24]	@ (8105d40 <HAL_RCC_GetClockConfig+0x80>)
 8105d26:	681b      	ldr	r3, [r3, #0]
 8105d28:	f003 020f 	and.w	r2, r3, #15
 8105d2c:	683b      	ldr	r3, [r7, #0]
 8105d2e:	601a      	str	r2, [r3, #0]
}
 8105d30:	bf00      	nop
 8105d32:	370c      	adds	r7, #12
 8105d34:	46bd      	mov	sp, r7
 8105d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d3a:	4770      	bx	lr
 8105d3c:	58024400 	.word	0x58024400
 8105d40:	52002000 	.word	0x52002000

08105d44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105d48:	b0ca      	sub	sp, #296	@ 0x128
 8105d4a:	af00      	add	r7, sp, #0
 8105d4c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105d50:	2300      	movs	r3, #0
 8105d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8105d56:	2300      	movs	r3, #0
 8105d58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8105d68:	2500      	movs	r5, #0
 8105d6a:	ea54 0305 	orrs.w	r3, r4, r5
 8105d6e:	d049      	beq.n	8105e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8105d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105d76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105d7a:	d02f      	beq.n	8105ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8105d7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105d80:	d828      	bhi.n	8105dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105d82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105d86:	d01a      	beq.n	8105dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8105d88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105d8c:	d822      	bhi.n	8105dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105d8e:	2b00      	cmp	r3, #0
 8105d90:	d003      	beq.n	8105d9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8105d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105d96:	d007      	beq.n	8105da8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105d98:	e01c      	b.n	8105dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d9a:	4bb8      	ldr	r3, [pc, #736]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105d9e:	4ab7      	ldr	r2, [pc, #732]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105da6:	e01a      	b.n	8105dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105dac:	3308      	adds	r3, #8
 8105dae:	2102      	movs	r1, #2
 8105db0:	4618      	mov	r0, r3
 8105db2:	f002 fb61 	bl	8108478 <RCCEx_PLL2_Config>
 8105db6:	4603      	mov	r3, r0
 8105db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105dbc:	e00f      	b.n	8105dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105dc2:	3328      	adds	r3, #40	@ 0x28
 8105dc4:	2102      	movs	r1, #2
 8105dc6:	4618      	mov	r0, r3
 8105dc8:	f002 fc08 	bl	81085dc <RCCEx_PLL3_Config>
 8105dcc:	4603      	mov	r3, r0
 8105dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105dd2:	e004      	b.n	8105dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105dd4:	2301      	movs	r3, #1
 8105dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105dda:	e000      	b.n	8105dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8105ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105de2:	2b00      	cmp	r3, #0
 8105de4:	d10a      	bne.n	8105dfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105de6:	4ba5      	ldr	r3, [pc, #660]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8105dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105df2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105df4:	4aa1      	ldr	r2, [pc, #644]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105df6:	430b      	orrs	r3, r1
 8105df8:	6513      	str	r3, [r2, #80]	@ 0x50
 8105dfa:	e003      	b.n	8105e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8105e10:	f04f 0900 	mov.w	r9, #0
 8105e14:	ea58 0309 	orrs.w	r3, r8, r9
 8105e18:	d047      	beq.n	8105eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8105e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105e20:	2b04      	cmp	r3, #4
 8105e22:	d82a      	bhi.n	8105e7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8105e24:	a201      	add	r2, pc, #4	@ (adr r2, 8105e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8105e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e2a:	bf00      	nop
 8105e2c:	08105e41 	.word	0x08105e41
 8105e30:	08105e4f 	.word	0x08105e4f
 8105e34:	08105e65 	.word	0x08105e65
 8105e38:	08105e83 	.word	0x08105e83
 8105e3c:	08105e83 	.word	0x08105e83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e40:	4b8e      	ldr	r3, [pc, #568]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e44:	4a8d      	ldr	r2, [pc, #564]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105e4c:	e01a      	b.n	8105e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e52:	3308      	adds	r3, #8
 8105e54:	2100      	movs	r1, #0
 8105e56:	4618      	mov	r0, r3
 8105e58:	f002 fb0e 	bl	8108478 <RCCEx_PLL2_Config>
 8105e5c:	4603      	mov	r3, r0
 8105e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105e62:	e00f      	b.n	8105e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e68:	3328      	adds	r3, #40	@ 0x28
 8105e6a:	2100      	movs	r1, #0
 8105e6c:	4618      	mov	r0, r3
 8105e6e:	f002 fbb5 	bl	81085dc <RCCEx_PLL3_Config>
 8105e72:	4603      	mov	r3, r0
 8105e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105e78:	e004      	b.n	8105e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105e7a:	2301      	movs	r3, #1
 8105e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105e80:	e000      	b.n	8105e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8105e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e88:	2b00      	cmp	r3, #0
 8105e8a:	d10a      	bne.n	8105ea2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105e8c:	4b7b      	ldr	r3, [pc, #492]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105e90:	f023 0107 	bic.w	r1, r3, #7
 8105e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105e9a:	4a78      	ldr	r2, [pc, #480]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105e9c:	430b      	orrs	r3, r1
 8105e9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8105ea0:	e003      	b.n	8105eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105eb2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8105eb6:	f04f 0b00 	mov.w	fp, #0
 8105eba:	ea5a 030b 	orrs.w	r3, sl, fp
 8105ebe:	d04c      	beq.n	8105f5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8105ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105eca:	d030      	beq.n	8105f2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8105ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105ed0:	d829      	bhi.n	8105f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8105ed4:	d02d      	beq.n	8105f32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8105ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8105ed8:	d825      	bhi.n	8105f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105eda:	2b80      	cmp	r3, #128	@ 0x80
 8105edc:	d018      	beq.n	8105f10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8105ede:	2b80      	cmp	r3, #128	@ 0x80
 8105ee0:	d821      	bhi.n	8105f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105ee2:	2b00      	cmp	r3, #0
 8105ee4:	d002      	beq.n	8105eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8105ee6:	2b40      	cmp	r3, #64	@ 0x40
 8105ee8:	d007      	beq.n	8105efa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8105eea:	e01c      	b.n	8105f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105eec:	4b63      	ldr	r3, [pc, #396]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105ef0:	4a62      	ldr	r2, [pc, #392]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105ef8:	e01c      	b.n	8105f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105efe:	3308      	adds	r3, #8
 8105f00:	2100      	movs	r1, #0
 8105f02:	4618      	mov	r0, r3
 8105f04:	f002 fab8 	bl	8108478 <RCCEx_PLL2_Config>
 8105f08:	4603      	mov	r3, r0
 8105f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105f0e:	e011      	b.n	8105f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f14:	3328      	adds	r3, #40	@ 0x28
 8105f16:	2100      	movs	r1, #0
 8105f18:	4618      	mov	r0, r3
 8105f1a:	f002 fb5f 	bl	81085dc <RCCEx_PLL3_Config>
 8105f1e:	4603      	mov	r3, r0
 8105f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105f24:	e006      	b.n	8105f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f26:	2301      	movs	r3, #1
 8105f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105f2c:	e002      	b.n	8105f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105f2e:	bf00      	nop
 8105f30:	e000      	b.n	8105f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105f38:	2b00      	cmp	r3, #0
 8105f3a:	d10a      	bne.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105f3c:	4b4f      	ldr	r3, [pc, #316]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105f40:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8105f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105f4a:	4a4c      	ldr	r2, [pc, #304]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105f4c:	430b      	orrs	r3, r1
 8105f4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8105f50:	e003      	b.n	8105f5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f62:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8105f66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8105f6a:	2300      	movs	r3, #0
 8105f6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8105f70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8105f74:	460b      	mov	r3, r1
 8105f76:	4313      	orrs	r3, r2
 8105f78:	d053      	beq.n	8106022 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8105f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8105f82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105f86:	d035      	beq.n	8105ff4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8105f88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105f8c:	d82e      	bhi.n	8105fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105f8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105f92:	d031      	beq.n	8105ff8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8105f94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105f98:	d828      	bhi.n	8105fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105f9e:	d01a      	beq.n	8105fd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8105fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105fa4:	d822      	bhi.n	8105fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105fa6:	2b00      	cmp	r3, #0
 8105fa8:	d003      	beq.n	8105fb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8105faa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105fae:	d007      	beq.n	8105fc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8105fb0:	e01c      	b.n	8105fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105fb2:	4b32      	ldr	r3, [pc, #200]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105fb6:	4a31      	ldr	r2, [pc, #196]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105fbe:	e01c      	b.n	8105ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105fc4:	3308      	adds	r3, #8
 8105fc6:	2100      	movs	r1, #0
 8105fc8:	4618      	mov	r0, r3
 8105fca:	f002 fa55 	bl	8108478 <RCCEx_PLL2_Config>
 8105fce:	4603      	mov	r3, r0
 8105fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105fd4:	e011      	b.n	8105ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105fda:	3328      	adds	r3, #40	@ 0x28
 8105fdc:	2100      	movs	r1, #0
 8105fde:	4618      	mov	r0, r3
 8105fe0:	f002 fafc 	bl	81085dc <RCCEx_PLL3_Config>
 8105fe4:	4603      	mov	r3, r0
 8105fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105fea:	e006      	b.n	8105ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105fec:	2301      	movs	r3, #1
 8105fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105ff2:	e002      	b.n	8105ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105ff4:	bf00      	nop
 8105ff6:	e000      	b.n	8105ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105ffe:	2b00      	cmp	r3, #0
 8106000:	d10b      	bne.n	810601a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8106002:	4b1e      	ldr	r3, [pc, #120]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106006:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810600a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810600e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8106012:	4a1a      	ldr	r2, [pc, #104]	@ (810607c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106014:	430b      	orrs	r3, r1
 8106016:	6593      	str	r3, [r2, #88]	@ 0x58
 8106018:	e003      	b.n	8106022 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810601a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810601e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8106022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106026:	e9d3 2300 	ldrd	r2, r3, [r3]
 810602a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810602e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8106032:	2300      	movs	r3, #0
 8106034:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8106038:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810603c:	460b      	mov	r3, r1
 810603e:	4313      	orrs	r3, r2
 8106040:	d056      	beq.n	81060f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8106042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106046:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810604a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810604e:	d038      	beq.n	81060c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8106050:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106054:	d831      	bhi.n	81060ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106056:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810605a:	d034      	beq.n	81060c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810605c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106060:	d82b      	bhi.n	81060ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106066:	d01d      	beq.n	81060a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8106068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810606c:	d825      	bhi.n	81060ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 810606e:	2b00      	cmp	r3, #0
 8106070:	d006      	beq.n	8106080 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8106072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8106076:	d00a      	beq.n	810608e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8106078:	e01f      	b.n	81060ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 810607a:	bf00      	nop
 810607c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106080:	4ba2      	ldr	r3, [pc, #648]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106084:	4aa1      	ldr	r2, [pc, #644]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810608a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810608c:	e01c      	b.n	81060c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106092:	3308      	adds	r3, #8
 8106094:	2100      	movs	r1, #0
 8106096:	4618      	mov	r0, r3
 8106098:	f002 f9ee 	bl	8108478 <RCCEx_PLL2_Config>
 810609c:	4603      	mov	r3, r0
 810609e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81060a2:	e011      	b.n	81060c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060a8:	3328      	adds	r3, #40	@ 0x28
 81060aa:	2100      	movs	r1, #0
 81060ac:	4618      	mov	r0, r3
 81060ae:	f002 fa95 	bl	81085dc <RCCEx_PLL3_Config>
 81060b2:	4603      	mov	r3, r0
 81060b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81060b8:	e006      	b.n	81060c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81060ba:	2301      	movs	r3, #1
 81060bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81060c0:	e002      	b.n	81060c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81060c2:	bf00      	nop
 81060c4:	e000      	b.n	81060c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81060c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81060c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81060cc:	2b00      	cmp	r3, #0
 81060ce:	d10b      	bne.n	81060e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81060d0:	4b8e      	ldr	r3, [pc, #568]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81060d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81060d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81060e0:	4a8a      	ldr	r2, [pc, #552]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81060e2:	430b      	orrs	r3, r1
 81060e4:	6593      	str	r3, [r2, #88]	@ 0x58
 81060e6:	e003      	b.n	81060f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81060ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81060fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8106100:	2300      	movs	r3, #0
 8106102:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8106106:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810610a:	460b      	mov	r3, r1
 810610c:	4313      	orrs	r3, r2
 810610e:	d03a      	beq.n	8106186 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8106110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106116:	2b30      	cmp	r3, #48	@ 0x30
 8106118:	d01f      	beq.n	810615a <HAL_RCCEx_PeriphCLKConfig+0x416>
 810611a:	2b30      	cmp	r3, #48	@ 0x30
 810611c:	d819      	bhi.n	8106152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810611e:	2b20      	cmp	r3, #32
 8106120:	d00c      	beq.n	810613c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8106122:	2b20      	cmp	r3, #32
 8106124:	d815      	bhi.n	8106152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106126:	2b00      	cmp	r3, #0
 8106128:	d019      	beq.n	810615e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810612a:	2b10      	cmp	r3, #16
 810612c:	d111      	bne.n	8106152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810612e:	4b77      	ldr	r3, [pc, #476]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106132:	4a76      	ldr	r2, [pc, #472]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106138:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810613a:	e011      	b.n	8106160 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106140:	3308      	adds	r3, #8
 8106142:	2102      	movs	r1, #2
 8106144:	4618      	mov	r0, r3
 8106146:	f002 f997 	bl	8108478 <RCCEx_PLL2_Config>
 810614a:	4603      	mov	r3, r0
 810614c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106150:	e006      	b.n	8106160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106152:	2301      	movs	r3, #1
 8106154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106158:	e002      	b.n	8106160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810615a:	bf00      	nop
 810615c:	e000      	b.n	8106160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810615e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106164:	2b00      	cmp	r3, #0
 8106166:	d10a      	bne.n	810617e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106168:	4b68      	ldr	r3, [pc, #416]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810616a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810616c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8106170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106176:	4a65      	ldr	r2, [pc, #404]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106178:	430b      	orrs	r3, r1
 810617a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810617c:	e003      	b.n	8106186 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810617e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8106186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810618e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8106192:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8106196:	2300      	movs	r3, #0
 8106198:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810619c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81061a0:	460b      	mov	r3, r1
 81061a2:	4313      	orrs	r3, r2
 81061a4:	d051      	beq.n	810624a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81061ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81061b0:	d035      	beq.n	810621e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81061b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81061b6:	d82e      	bhi.n	8106216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81061b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81061bc:	d031      	beq.n	8106222 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81061be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81061c2:	d828      	bhi.n	8106216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81061c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81061c8:	d01a      	beq.n	8106200 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81061ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81061ce:	d822      	bhi.n	8106216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81061d0:	2b00      	cmp	r3, #0
 81061d2:	d003      	beq.n	81061dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 81061d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81061d8:	d007      	beq.n	81061ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81061da:	e01c      	b.n	8106216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81061dc:	4b4b      	ldr	r3, [pc, #300]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81061e0:	4a4a      	ldr	r2, [pc, #296]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81061e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81061e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81061e8:	e01c      	b.n	8106224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061ee:	3308      	adds	r3, #8
 81061f0:	2100      	movs	r1, #0
 81061f2:	4618      	mov	r0, r3
 81061f4:	f002 f940 	bl	8108478 <RCCEx_PLL2_Config>
 81061f8:	4603      	mov	r3, r0
 81061fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81061fe:	e011      	b.n	8106224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106204:	3328      	adds	r3, #40	@ 0x28
 8106206:	2100      	movs	r1, #0
 8106208:	4618      	mov	r0, r3
 810620a:	f002 f9e7 	bl	81085dc <RCCEx_PLL3_Config>
 810620e:	4603      	mov	r3, r0
 8106210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106214:	e006      	b.n	8106224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106216:	2301      	movs	r3, #1
 8106218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810621c:	e002      	b.n	8106224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810621e:	bf00      	nop
 8106220:	e000      	b.n	8106224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106228:	2b00      	cmp	r3, #0
 810622a:	d10a      	bne.n	8106242 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810622c:	4b37      	ldr	r3, [pc, #220]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810622e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106230:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8106234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810623a:	4a34      	ldr	r2, [pc, #208]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810623c:	430b      	orrs	r3, r1
 810623e:	6513      	str	r3, [r2, #80]	@ 0x50
 8106240:	e003      	b.n	810624a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810624a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106252:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8106256:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810625a:	2300      	movs	r3, #0
 810625c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8106260:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8106264:	460b      	mov	r3, r1
 8106266:	4313      	orrs	r3, r2
 8106268:	d056      	beq.n	8106318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810626e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106274:	d033      	beq.n	81062de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106276:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810627a:	d82c      	bhi.n	81062d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810627c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106280:	d02f      	beq.n	81062e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8106282:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106286:	d826      	bhi.n	81062d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106288:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810628c:	d02b      	beq.n	81062e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810628e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106292:	d820      	bhi.n	81062d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106298:	d012      	beq.n	81062c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810629a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810629e:	d81a      	bhi.n	81062d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81062a0:	2b00      	cmp	r3, #0
 81062a2:	d022      	beq.n	81062ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81062a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81062a8:	d115      	bne.n	81062d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062ae:	3308      	adds	r3, #8
 81062b0:	2101      	movs	r1, #1
 81062b2:	4618      	mov	r0, r3
 81062b4:	f002 f8e0 	bl	8108478 <RCCEx_PLL2_Config>
 81062b8:	4603      	mov	r3, r0
 81062ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81062be:	e015      	b.n	81062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062c4:	3328      	adds	r3, #40	@ 0x28
 81062c6:	2101      	movs	r1, #1
 81062c8:	4618      	mov	r0, r3
 81062ca:	f002 f987 	bl	81085dc <RCCEx_PLL3_Config>
 81062ce:	4603      	mov	r3, r0
 81062d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81062d4:	e00a      	b.n	81062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81062d6:	2301      	movs	r3, #1
 81062d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81062dc:	e006      	b.n	81062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81062de:	bf00      	nop
 81062e0:	e004      	b.n	81062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81062e2:	bf00      	nop
 81062e4:	e002      	b.n	81062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81062e6:	bf00      	nop
 81062e8:	e000      	b.n	81062ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81062ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81062ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81062f0:	2b00      	cmp	r3, #0
 81062f2:	d10d      	bne.n	8106310 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81062f4:	4b05      	ldr	r3, [pc, #20]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81062f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81062f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106302:	4a02      	ldr	r2, [pc, #8]	@ (810630c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106304:	430b      	orrs	r3, r1
 8106306:	6513      	str	r3, [r2, #80]	@ 0x50
 8106308:	e006      	b.n	8106318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810630a:	bf00      	nop
 810630c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106320:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8106324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8106328:	2300      	movs	r3, #0
 810632a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810632e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8106332:	460b      	mov	r3, r1
 8106334:	4313      	orrs	r3, r2
 8106336:	d055      	beq.n	81063e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810633c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106344:	d033      	beq.n	81063ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8106346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810634a:	d82c      	bhi.n	81063a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810634c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106350:	d02f      	beq.n	81063b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8106352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106356:	d826      	bhi.n	81063a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106358:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810635c:	d02b      	beq.n	81063b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810635e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106362:	d820      	bhi.n	81063a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106368:	d012      	beq.n	8106390 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810636a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810636e:	d81a      	bhi.n	81063a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106370:	2b00      	cmp	r3, #0
 8106372:	d022      	beq.n	81063ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8106374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106378:	d115      	bne.n	81063a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810637e:	3308      	adds	r3, #8
 8106380:	2101      	movs	r1, #1
 8106382:	4618      	mov	r0, r3
 8106384:	f002 f878 	bl	8108478 <RCCEx_PLL2_Config>
 8106388:	4603      	mov	r3, r0
 810638a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810638e:	e015      	b.n	81063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106394:	3328      	adds	r3, #40	@ 0x28
 8106396:	2101      	movs	r1, #1
 8106398:	4618      	mov	r0, r3
 810639a:	f002 f91f 	bl	81085dc <RCCEx_PLL3_Config>
 810639e:	4603      	mov	r3, r0
 81063a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81063a4:	e00a      	b.n	81063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81063a6:	2301      	movs	r3, #1
 81063a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81063ac:	e006      	b.n	81063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81063ae:	bf00      	nop
 81063b0:	e004      	b.n	81063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81063b2:	bf00      	nop
 81063b4:	e002      	b.n	81063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81063b6:	bf00      	nop
 81063b8:	e000      	b.n	81063bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81063ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81063bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81063c0:	2b00      	cmp	r3, #0
 81063c2:	d10b      	bne.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81063c4:	4ba4      	ldr	r3, [pc, #656]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81063c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81063c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81063cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81063d4:	4aa0      	ldr	r2, [pc, #640]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81063d6:	430b      	orrs	r3, r1
 81063d8:	6593      	str	r3, [r2, #88]	@ 0x58
 81063da:	e003      	b.n	81063e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81063e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81063f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81063f4:	2300      	movs	r3, #0
 81063f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81063fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81063fe:	460b      	mov	r3, r1
 8106400:	4313      	orrs	r3, r2
 8106402:	d037      	beq.n	8106474 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810640a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810640e:	d00e      	beq.n	810642e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106414:	d816      	bhi.n	8106444 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8106416:	2b00      	cmp	r3, #0
 8106418:	d018      	beq.n	810644c <HAL_RCCEx_PeriphCLKConfig+0x708>
 810641a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810641e:	d111      	bne.n	8106444 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106420:	4b8d      	ldr	r3, [pc, #564]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106424:	4a8c      	ldr	r2, [pc, #560]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810642a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810642c:	e00f      	b.n	810644e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106432:	3308      	adds	r3, #8
 8106434:	2101      	movs	r1, #1
 8106436:	4618      	mov	r0, r3
 8106438:	f002 f81e 	bl	8108478 <RCCEx_PLL2_Config>
 810643c:	4603      	mov	r3, r0
 810643e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106442:	e004      	b.n	810644e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106444:	2301      	movs	r3, #1
 8106446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810644a:	e000      	b.n	810644e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 810644c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810644e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106452:	2b00      	cmp	r3, #0
 8106454:	d10a      	bne.n	810646c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106456:	4b80      	ldr	r3, [pc, #512]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810645a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106464:	4a7c      	ldr	r2, [pc, #496]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106466:	430b      	orrs	r3, r1
 8106468:	6513      	str	r3, [r2, #80]	@ 0x50
 810646a:	e003      	b.n	8106474 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810646c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106478:	e9d3 2300 	ldrd	r2, r3, [r3]
 810647c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8106480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8106484:	2300      	movs	r3, #0
 8106486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810648a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810648e:	460b      	mov	r3, r1
 8106490:	4313      	orrs	r3, r2
 8106492:	d039      	beq.n	8106508 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8106494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810649a:	2b03      	cmp	r3, #3
 810649c:	d81c      	bhi.n	81064d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810649e:	a201      	add	r2, pc, #4	@ (adr r2, 81064a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81064a4:	081064e1 	.word	0x081064e1
 81064a8:	081064b5 	.word	0x081064b5
 81064ac:	081064c3 	.word	0x081064c3
 81064b0:	081064e1 	.word	0x081064e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81064b4:	4b68      	ldr	r3, [pc, #416]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81064b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064b8:	4a67      	ldr	r2, [pc, #412]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81064ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81064be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81064c0:	e00f      	b.n	81064e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81064c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064c6:	3308      	adds	r3, #8
 81064c8:	2102      	movs	r1, #2
 81064ca:	4618      	mov	r0, r3
 81064cc:	f001 ffd4 	bl	8108478 <RCCEx_PLL2_Config>
 81064d0:	4603      	mov	r3, r0
 81064d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81064d6:	e004      	b.n	81064e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81064d8:	2301      	movs	r3, #1
 81064da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81064de:	e000      	b.n	81064e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81064e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81064e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81064e6:	2b00      	cmp	r3, #0
 81064e8:	d10a      	bne.n	8106500 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81064ea:	4b5b      	ldr	r3, [pc, #364]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81064ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81064ee:	f023 0103 	bic.w	r1, r3, #3
 81064f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81064f8:	4a57      	ldr	r2, [pc, #348]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81064fa:	430b      	orrs	r3, r1
 81064fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81064fe:	e003      	b.n	8106508 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106510:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8106514:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8106518:	2300      	movs	r3, #0
 810651a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810651e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8106522:	460b      	mov	r3, r1
 8106524:	4313      	orrs	r3, r2
 8106526:	f000 809f 	beq.w	8106668 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810652a:	4b4c      	ldr	r3, [pc, #304]	@ (810665c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810652c:	681b      	ldr	r3, [r3, #0]
 810652e:	4a4b      	ldr	r2, [pc, #300]	@ (810665c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106534:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106536:	f7fc fa35 	bl	81029a4 <HAL_GetTick>
 810653a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810653e:	e00b      	b.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106540:	f7fc fa30 	bl	81029a4 <HAL_GetTick>
 8106544:	4602      	mov	r2, r0
 8106546:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810654a:	1ad3      	subs	r3, r2, r3
 810654c:	2b64      	cmp	r3, #100	@ 0x64
 810654e:	d903      	bls.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8106550:	2303      	movs	r3, #3
 8106552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106556:	e005      	b.n	8106564 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106558:	4b40      	ldr	r3, [pc, #256]	@ (810665c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810655a:	681b      	ldr	r3, [r3, #0]
 810655c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106560:	2b00      	cmp	r3, #0
 8106562:	d0ed      	beq.n	8106540 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106568:	2b00      	cmp	r3, #0
 810656a:	d179      	bne.n	8106660 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810656c:	4b3a      	ldr	r3, [pc, #232]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810656e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106574:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106578:	4053      	eors	r3, r2
 810657a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810657e:	2b00      	cmp	r3, #0
 8106580:	d015      	beq.n	81065ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106582:	4b35      	ldr	r3, [pc, #212]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810658a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810658e:	4b32      	ldr	r3, [pc, #200]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106592:	4a31      	ldr	r2, [pc, #196]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8106598:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810659a:	4b2f      	ldr	r3, [pc, #188]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810659c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810659e:	4a2e      	ldr	r2, [pc, #184]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81065a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81065a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81065a6:	4a2c      	ldr	r2, [pc, #176]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81065a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81065b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81065ba:	d118      	bne.n	81065ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81065bc:	f7fc f9f2 	bl	81029a4 <HAL_GetTick>
 81065c0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81065c4:	e00d      	b.n	81065e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81065c6:	f7fc f9ed 	bl	81029a4 <HAL_GetTick>
 81065ca:	4602      	mov	r2, r0
 81065cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81065d0:	1ad2      	subs	r2, r2, r3
 81065d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 81065d6:	429a      	cmp	r2, r3
 81065d8:	d903      	bls.n	81065e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81065da:	2303      	movs	r3, #3
 81065dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 81065e0:	e005      	b.n	81065ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81065e2:	4b1d      	ldr	r3, [pc, #116]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81065e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81065e6:	f003 0302 	and.w	r3, r3, #2
 81065ea:	2b00      	cmp	r3, #0
 81065ec:	d0eb      	beq.n	81065c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81065ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81065f2:	2b00      	cmp	r3, #0
 81065f4:	d12b      	bne.n	810664e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81065fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106606:	d110      	bne.n	810662a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8106608:	4b13      	ldr	r3, [pc, #76]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810660a:	691b      	ldr	r3, [r3, #16]
 810660c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106618:	091b      	lsrs	r3, r3, #4
 810661a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810661e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106622:	4a0d      	ldr	r2, [pc, #52]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106624:	430b      	orrs	r3, r1
 8106626:	6113      	str	r3, [r2, #16]
 8106628:	e005      	b.n	8106636 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810662a:	4b0b      	ldr	r3, [pc, #44]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810662c:	691b      	ldr	r3, [r3, #16]
 810662e:	4a0a      	ldr	r2, [pc, #40]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106630:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106634:	6113      	str	r3, [r2, #16]
 8106636:	4b08      	ldr	r3, [pc, #32]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106638:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810663e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106646:	4a04      	ldr	r2, [pc, #16]	@ (8106658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106648:	430b      	orrs	r3, r1
 810664a:	6713      	str	r3, [r2, #112]	@ 0x70
 810664c:	e00c      	b.n	8106668 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810664e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8106656:	e007      	b.n	8106668 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8106658:	58024400 	.word	0x58024400
 810665c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106670:	f002 0301 	and.w	r3, r2, #1
 8106674:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8106678:	2300      	movs	r3, #0
 810667a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810667e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8106682:	460b      	mov	r3, r1
 8106684:	4313      	orrs	r3, r2
 8106686:	f000 8089 	beq.w	810679c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810668a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810668e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106690:	2b28      	cmp	r3, #40	@ 0x28
 8106692:	d86b      	bhi.n	810676c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8106694:	a201      	add	r2, pc, #4	@ (adr r2, 810669c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8106696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810669a:	bf00      	nop
 810669c:	08106775 	.word	0x08106775
 81066a0:	0810676d 	.word	0x0810676d
 81066a4:	0810676d 	.word	0x0810676d
 81066a8:	0810676d 	.word	0x0810676d
 81066ac:	0810676d 	.word	0x0810676d
 81066b0:	0810676d 	.word	0x0810676d
 81066b4:	0810676d 	.word	0x0810676d
 81066b8:	0810676d 	.word	0x0810676d
 81066bc:	08106741 	.word	0x08106741
 81066c0:	0810676d 	.word	0x0810676d
 81066c4:	0810676d 	.word	0x0810676d
 81066c8:	0810676d 	.word	0x0810676d
 81066cc:	0810676d 	.word	0x0810676d
 81066d0:	0810676d 	.word	0x0810676d
 81066d4:	0810676d 	.word	0x0810676d
 81066d8:	0810676d 	.word	0x0810676d
 81066dc:	08106757 	.word	0x08106757
 81066e0:	0810676d 	.word	0x0810676d
 81066e4:	0810676d 	.word	0x0810676d
 81066e8:	0810676d 	.word	0x0810676d
 81066ec:	0810676d 	.word	0x0810676d
 81066f0:	0810676d 	.word	0x0810676d
 81066f4:	0810676d 	.word	0x0810676d
 81066f8:	0810676d 	.word	0x0810676d
 81066fc:	08106775 	.word	0x08106775
 8106700:	0810676d 	.word	0x0810676d
 8106704:	0810676d 	.word	0x0810676d
 8106708:	0810676d 	.word	0x0810676d
 810670c:	0810676d 	.word	0x0810676d
 8106710:	0810676d 	.word	0x0810676d
 8106714:	0810676d 	.word	0x0810676d
 8106718:	0810676d 	.word	0x0810676d
 810671c:	08106775 	.word	0x08106775
 8106720:	0810676d 	.word	0x0810676d
 8106724:	0810676d 	.word	0x0810676d
 8106728:	0810676d 	.word	0x0810676d
 810672c:	0810676d 	.word	0x0810676d
 8106730:	0810676d 	.word	0x0810676d
 8106734:	0810676d 	.word	0x0810676d
 8106738:	0810676d 	.word	0x0810676d
 810673c:	08106775 	.word	0x08106775
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106744:	3308      	adds	r3, #8
 8106746:	2101      	movs	r1, #1
 8106748:	4618      	mov	r0, r3
 810674a:	f001 fe95 	bl	8108478 <RCCEx_PLL2_Config>
 810674e:	4603      	mov	r3, r0
 8106750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106754:	e00f      	b.n	8106776 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810675a:	3328      	adds	r3, #40	@ 0x28
 810675c:	2101      	movs	r1, #1
 810675e:	4618      	mov	r0, r3
 8106760:	f001 ff3c 	bl	81085dc <RCCEx_PLL3_Config>
 8106764:	4603      	mov	r3, r0
 8106766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810676a:	e004      	b.n	8106776 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810676c:	2301      	movs	r3, #1
 810676e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106772:	e000      	b.n	8106776 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8106774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810677a:	2b00      	cmp	r3, #0
 810677c:	d10a      	bne.n	8106794 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810677e:	4bbf      	ldr	r3, [pc, #764]	@ (8106a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106782:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8106786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810678a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810678c:	4abb      	ldr	r2, [pc, #748]	@ (8106a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810678e:	430b      	orrs	r3, r1
 8106790:	6553      	str	r3, [r2, #84]	@ 0x54
 8106792:	e003      	b.n	810679c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067a4:	f002 0302 	and.w	r3, r2, #2
 81067a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81067ac:	2300      	movs	r3, #0
 81067ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81067b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81067b6:	460b      	mov	r3, r1
 81067b8:	4313      	orrs	r3, r2
 81067ba:	d041      	beq.n	8106840 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81067c2:	2b05      	cmp	r3, #5
 81067c4:	d824      	bhi.n	8106810 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81067c6:	a201      	add	r2, pc, #4	@ (adr r2, 81067cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81067c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81067cc:	08106819 	.word	0x08106819
 81067d0:	081067e5 	.word	0x081067e5
 81067d4:	081067fb 	.word	0x081067fb
 81067d8:	08106819 	.word	0x08106819
 81067dc:	08106819 	.word	0x08106819
 81067e0:	08106819 	.word	0x08106819
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81067e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067e8:	3308      	adds	r3, #8
 81067ea:	2101      	movs	r1, #1
 81067ec:	4618      	mov	r0, r3
 81067ee:	f001 fe43 	bl	8108478 <RCCEx_PLL2_Config>
 81067f2:	4603      	mov	r3, r0
 81067f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81067f8:	e00f      	b.n	810681a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067fe:	3328      	adds	r3, #40	@ 0x28
 8106800:	2101      	movs	r1, #1
 8106802:	4618      	mov	r0, r3
 8106804:	f001 feea 	bl	81085dc <RCCEx_PLL3_Config>
 8106808:	4603      	mov	r3, r0
 810680a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810680e:	e004      	b.n	810681a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106810:	2301      	movs	r3, #1
 8106812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106816:	e000      	b.n	810681a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8106818:	bf00      	nop
    }

    if (ret == HAL_OK)
 810681a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810681e:	2b00      	cmp	r3, #0
 8106820:	d10a      	bne.n	8106838 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106822:	4b96      	ldr	r3, [pc, #600]	@ (8106a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106826:	f023 0107 	bic.w	r1, r3, #7
 810682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810682e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8106830:	4a92      	ldr	r2, [pc, #584]	@ (8106a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106832:	430b      	orrs	r3, r1
 8106834:	6553      	str	r3, [r2, #84]	@ 0x54
 8106836:	e003      	b.n	8106840 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810683c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106848:	f002 0304 	and.w	r3, r2, #4
 810684c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8106850:	2300      	movs	r3, #0
 8106852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8106856:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810685a:	460b      	mov	r3, r1
 810685c:	4313      	orrs	r3, r2
 810685e:	d044      	beq.n	81068ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8106860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106868:	2b05      	cmp	r3, #5
 810686a:	d825      	bhi.n	81068b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810686c:	a201      	add	r2, pc, #4	@ (adr r2, 8106874 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106872:	bf00      	nop
 8106874:	081068c1 	.word	0x081068c1
 8106878:	0810688d 	.word	0x0810688d
 810687c:	081068a3 	.word	0x081068a3
 8106880:	081068c1 	.word	0x081068c1
 8106884:	081068c1 	.word	0x081068c1
 8106888:	081068c1 	.word	0x081068c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106890:	3308      	adds	r3, #8
 8106892:	2101      	movs	r1, #1
 8106894:	4618      	mov	r0, r3
 8106896:	f001 fdef 	bl	8108478 <RCCEx_PLL2_Config>
 810689a:	4603      	mov	r3, r0
 810689c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81068a0:	e00f      	b.n	81068c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068a6:	3328      	adds	r3, #40	@ 0x28
 81068a8:	2101      	movs	r1, #1
 81068aa:	4618      	mov	r0, r3
 81068ac:	f001 fe96 	bl	81085dc <RCCEx_PLL3_Config>
 81068b0:	4603      	mov	r3, r0
 81068b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81068b6:	e004      	b.n	81068c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81068b8:	2301      	movs	r3, #1
 81068ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81068be:	e000      	b.n	81068c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81068c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81068c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81068c6:	2b00      	cmp	r3, #0
 81068c8:	d10b      	bne.n	81068e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81068ca:	4b6c      	ldr	r3, [pc, #432]	@ (8106a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81068cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81068ce:	f023 0107 	bic.w	r1, r3, #7
 81068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81068da:	4a68      	ldr	r2, [pc, #416]	@ (8106a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81068dc:	430b      	orrs	r3, r1
 81068de:	6593      	str	r3, [r2, #88]	@ 0x58
 81068e0:	e003      	b.n	81068ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81068e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81068e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81068f2:	f002 0320 	and.w	r3, r2, #32
 81068f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81068fa:	2300      	movs	r3, #0
 81068fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8106900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8106904:	460b      	mov	r3, r1
 8106906:	4313      	orrs	r3, r2
 8106908:	d055      	beq.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8106912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106916:	d033      	beq.n	8106980 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8106918:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810691c:	d82c      	bhi.n	8106978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810691e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106922:	d02f      	beq.n	8106984 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8106924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106928:	d826      	bhi.n	8106978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810692a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810692e:	d02b      	beq.n	8106988 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8106930:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106934:	d820      	bhi.n	8106978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810693a:	d012      	beq.n	8106962 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810693c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106940:	d81a      	bhi.n	8106978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106942:	2b00      	cmp	r3, #0
 8106944:	d022      	beq.n	810698c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8106946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810694a:	d115      	bne.n	8106978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106950:	3308      	adds	r3, #8
 8106952:	2100      	movs	r1, #0
 8106954:	4618      	mov	r0, r3
 8106956:	f001 fd8f 	bl	8108478 <RCCEx_PLL2_Config>
 810695a:	4603      	mov	r3, r0
 810695c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106960:	e015      	b.n	810698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106966:	3328      	adds	r3, #40	@ 0x28
 8106968:	2102      	movs	r1, #2
 810696a:	4618      	mov	r0, r3
 810696c:	f001 fe36 	bl	81085dc <RCCEx_PLL3_Config>
 8106970:	4603      	mov	r3, r0
 8106972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106976:	e00a      	b.n	810698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106978:	2301      	movs	r3, #1
 810697a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810697e:	e006      	b.n	810698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106980:	bf00      	nop
 8106982:	e004      	b.n	810698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106984:	bf00      	nop
 8106986:	e002      	b.n	810698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106988:	bf00      	nop
 810698a:	e000      	b.n	810698e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810698c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810698e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106992:	2b00      	cmp	r3, #0
 8106994:	d10b      	bne.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106996:	4b39      	ldr	r3, [pc, #228]	@ (8106a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810699a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81069a6:	4a35      	ldr	r2, [pc, #212]	@ (8106a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81069a8:	430b      	orrs	r3, r1
 81069aa:	6553      	str	r3, [r2, #84]	@ 0x54
 81069ac:	e003      	b.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81069b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81069c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81069c6:	2300      	movs	r3, #0
 81069c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81069cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81069d0:	460b      	mov	r3, r1
 81069d2:	4313      	orrs	r3, r2
 81069d4:	d058      	beq.n	8106a88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81069de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81069e2:	d033      	beq.n	8106a4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81069e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81069e8:	d82c      	bhi.n	8106a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81069ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81069ee:	d02f      	beq.n	8106a50 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81069f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81069f4:	d826      	bhi.n	8106a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81069f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81069fa:	d02b      	beq.n	8106a54 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81069fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106a00:	d820      	bhi.n	8106a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106a06:	d012      	beq.n	8106a2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8106a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106a0c:	d81a      	bhi.n	8106a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106a0e:	2b00      	cmp	r3, #0
 8106a10:	d022      	beq.n	8106a58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8106a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106a16:	d115      	bne.n	8106a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a1c:	3308      	adds	r3, #8
 8106a1e:	2100      	movs	r1, #0
 8106a20:	4618      	mov	r0, r3
 8106a22:	f001 fd29 	bl	8108478 <RCCEx_PLL2_Config>
 8106a26:	4603      	mov	r3, r0
 8106a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106a2c:	e015      	b.n	8106a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a32:	3328      	adds	r3, #40	@ 0x28
 8106a34:	2102      	movs	r1, #2
 8106a36:	4618      	mov	r0, r3
 8106a38:	f001 fdd0 	bl	81085dc <RCCEx_PLL3_Config>
 8106a3c:	4603      	mov	r3, r0
 8106a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106a42:	e00a      	b.n	8106a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106a44:	2301      	movs	r3, #1
 8106a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106a4a:	e006      	b.n	8106a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106a4c:	bf00      	nop
 8106a4e:	e004      	b.n	8106a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106a50:	bf00      	nop
 8106a52:	e002      	b.n	8106a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106a54:	bf00      	nop
 8106a56:	e000      	b.n	8106a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a5e:	2b00      	cmp	r3, #0
 8106a60:	d10e      	bne.n	8106a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106a62:	4b06      	ldr	r3, [pc, #24]	@ (8106a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106a66:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8106a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8106a72:	4a02      	ldr	r2, [pc, #8]	@ (8106a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106a74:	430b      	orrs	r3, r1
 8106a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8106a78:	e006      	b.n	8106a88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8106a7a:	bf00      	nop
 8106a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a90:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8106a94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8106a98:	2300      	movs	r3, #0
 8106a9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8106a9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8106aa2:	460b      	mov	r3, r1
 8106aa4:	4313      	orrs	r3, r2
 8106aa6:	d055      	beq.n	8106b54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8106aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106aac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106ab0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106ab4:	d033      	beq.n	8106b1e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8106ab6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106aba:	d82c      	bhi.n	8106b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106ac0:	d02f      	beq.n	8106b22 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8106ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106ac6:	d826      	bhi.n	8106b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106ac8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106acc:	d02b      	beq.n	8106b26 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8106ace:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106ad2:	d820      	bhi.n	8106b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106ad8:	d012      	beq.n	8106b00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8106ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106ade:	d81a      	bhi.n	8106b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106ae0:	2b00      	cmp	r3, #0
 8106ae2:	d022      	beq.n	8106b2a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8106ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106ae8:	d115      	bne.n	8106b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106aee:	3308      	adds	r3, #8
 8106af0:	2100      	movs	r1, #0
 8106af2:	4618      	mov	r0, r3
 8106af4:	f001 fcc0 	bl	8108478 <RCCEx_PLL2_Config>
 8106af8:	4603      	mov	r3, r0
 8106afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106afe:	e015      	b.n	8106b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b04:	3328      	adds	r3, #40	@ 0x28
 8106b06:	2102      	movs	r1, #2
 8106b08:	4618      	mov	r0, r3
 8106b0a:	f001 fd67 	bl	81085dc <RCCEx_PLL3_Config>
 8106b0e:	4603      	mov	r3, r0
 8106b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106b14:	e00a      	b.n	8106b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b16:	2301      	movs	r3, #1
 8106b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106b1c:	e006      	b.n	8106b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106b1e:	bf00      	nop
 8106b20:	e004      	b.n	8106b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106b22:	bf00      	nop
 8106b24:	e002      	b.n	8106b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106b26:	bf00      	nop
 8106b28:	e000      	b.n	8106b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106b30:	2b00      	cmp	r3, #0
 8106b32:	d10b      	bne.n	8106b4c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106b34:	4ba1      	ldr	r3, [pc, #644]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106b38:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8106b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106b44:	4a9d      	ldr	r2, [pc, #628]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106b46:	430b      	orrs	r3, r1
 8106b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8106b4a:	e003      	b.n	8106b54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106b50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b5c:	f002 0308 	and.w	r3, r2, #8
 8106b60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8106b64:	2300      	movs	r3, #0
 8106b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8106b6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8106b6e:	460b      	mov	r3, r1
 8106b70:	4313      	orrs	r3, r2
 8106b72:	d01e      	beq.n	8106bb2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8106b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106b80:	d10c      	bne.n	8106b9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b86:	3328      	adds	r3, #40	@ 0x28
 8106b88:	2102      	movs	r1, #2
 8106b8a:	4618      	mov	r0, r3
 8106b8c:	f001 fd26 	bl	81085dc <RCCEx_PLL3_Config>
 8106b90:	4603      	mov	r3, r0
 8106b92:	2b00      	cmp	r3, #0
 8106b94:	d002      	beq.n	8106b9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8106b96:	2301      	movs	r3, #1
 8106b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106b9c:	4b87      	ldr	r3, [pc, #540]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106ba0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8106ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106bac:	4a83      	ldr	r2, [pc, #524]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106bae:	430b      	orrs	r3, r1
 8106bb0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bba:	f002 0310 	and.w	r3, r2, #16
 8106bbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8106bc2:	2300      	movs	r3, #0
 8106bc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8106bc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8106bcc:	460b      	mov	r3, r1
 8106bce:	4313      	orrs	r3, r2
 8106bd0:	d01e      	beq.n	8106c10 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8106bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106bde:	d10c      	bne.n	8106bfa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106be4:	3328      	adds	r3, #40	@ 0x28
 8106be6:	2102      	movs	r1, #2
 8106be8:	4618      	mov	r0, r3
 8106bea:	f001 fcf7 	bl	81085dc <RCCEx_PLL3_Config>
 8106bee:	4603      	mov	r3, r0
 8106bf0:	2b00      	cmp	r3, #0
 8106bf2:	d002      	beq.n	8106bfa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8106bf4:	2301      	movs	r3, #1
 8106bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106bfa:	4b70      	ldr	r3, [pc, #448]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106bfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8106c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106c0a:	4a6c      	ldr	r2, [pc, #432]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106c0c:	430b      	orrs	r3, r1
 8106c0e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c18:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8106c1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8106c20:	2300      	movs	r3, #0
 8106c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8106c26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8106c2a:	460b      	mov	r3, r1
 8106c2c:	4313      	orrs	r3, r2
 8106c2e:	d03e      	beq.n	8106cae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8106c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8106c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c3c:	d022      	beq.n	8106c84 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8106c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c42:	d81b      	bhi.n	8106c7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8106c44:	2b00      	cmp	r3, #0
 8106c46:	d003      	beq.n	8106c50 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8106c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106c4c:	d00b      	beq.n	8106c66 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8106c4e:	e015      	b.n	8106c7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c54:	3308      	adds	r3, #8
 8106c56:	2100      	movs	r1, #0
 8106c58:	4618      	mov	r0, r3
 8106c5a:	f001 fc0d 	bl	8108478 <RCCEx_PLL2_Config>
 8106c5e:	4603      	mov	r3, r0
 8106c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8106c64:	e00f      	b.n	8106c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c6a:	3328      	adds	r3, #40	@ 0x28
 8106c6c:	2102      	movs	r1, #2
 8106c6e:	4618      	mov	r0, r3
 8106c70:	f001 fcb4 	bl	81085dc <RCCEx_PLL3_Config>
 8106c74:	4603      	mov	r3, r0
 8106c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8106c7a:	e004      	b.n	8106c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106c7c:	2301      	movs	r3, #1
 8106c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106c82:	e000      	b.n	8106c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8106c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c8a:	2b00      	cmp	r3, #0
 8106c8c:	d10b      	bne.n	8106ca6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8106c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106c92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8106c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8106c9e:	4a47      	ldr	r2, [pc, #284]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106ca0:	430b      	orrs	r3, r1
 8106ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8106ca4:	e003      	b.n	8106cae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cb6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8106cba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8106cbc:	2300      	movs	r3, #0
 8106cbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8106cc0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8106cc4:	460b      	mov	r3, r1
 8106cc6:	4313      	orrs	r3, r2
 8106cc8:	d03b      	beq.n	8106d42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8106cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106cd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106cd6:	d01f      	beq.n	8106d18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8106cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106cdc:	d818      	bhi.n	8106d10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8106cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106ce2:	d003      	beq.n	8106cec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8106ce4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106ce8:	d007      	beq.n	8106cfa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8106cea:	e011      	b.n	8106d10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106cec:	4b33      	ldr	r3, [pc, #204]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106cf0:	4a32      	ldr	r2, [pc, #200]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8106cf8:	e00f      	b.n	8106d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cfe:	3328      	adds	r3, #40	@ 0x28
 8106d00:	2101      	movs	r1, #1
 8106d02:	4618      	mov	r0, r3
 8106d04:	f001 fc6a 	bl	81085dc <RCCEx_PLL3_Config>
 8106d08:	4603      	mov	r3, r0
 8106d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8106d0e:	e004      	b.n	8106d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106d10:	2301      	movs	r3, #1
 8106d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106d16:	e000      	b.n	8106d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8106d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d1e:	2b00      	cmp	r3, #0
 8106d20:	d10b      	bne.n	8106d3a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106d22:	4b26      	ldr	r3, [pc, #152]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106d26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8106d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106d32:	4a22      	ldr	r2, [pc, #136]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106d34:	430b      	orrs	r3, r1
 8106d36:	6553      	str	r3, [r2, #84]	@ 0x54
 8106d38:	e003      	b.n	8106d42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8106d4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8106d50:	2300      	movs	r3, #0
 8106d52:	677b      	str	r3, [r7, #116]	@ 0x74
 8106d54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8106d58:	460b      	mov	r3, r1
 8106d5a:	4313      	orrs	r3, r2
 8106d5c:	d034      	beq.n	8106dc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8106d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106d64:	2b00      	cmp	r3, #0
 8106d66:	d003      	beq.n	8106d70 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8106d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106d6c:	d007      	beq.n	8106d7e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8106d6e:	e011      	b.n	8106d94 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106d70:	4b12      	ldr	r3, [pc, #72]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106d74:	4a11      	ldr	r2, [pc, #68]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106d7c:	e00e      	b.n	8106d9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d82:	3308      	adds	r3, #8
 8106d84:	2102      	movs	r1, #2
 8106d86:	4618      	mov	r0, r3
 8106d88:	f001 fb76 	bl	8108478 <RCCEx_PLL2_Config>
 8106d8c:	4603      	mov	r3, r0
 8106d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106d92:	e003      	b.n	8106d9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8106d94:	2301      	movs	r3, #1
 8106d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106da0:	2b00      	cmp	r3, #0
 8106da2:	d10d      	bne.n	8106dc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106da4:	4b05      	ldr	r3, [pc, #20]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106da8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8106dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106db2:	4a02      	ldr	r2, [pc, #8]	@ (8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106db4:	430b      	orrs	r3, r1
 8106db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106db8:	e006      	b.n	8106dc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8106dba:	bf00      	nop
 8106dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106dd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8106dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8106dd6:	2300      	movs	r3, #0
 8106dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8106dda:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8106dde:	460b      	mov	r3, r1
 8106de0:	4313      	orrs	r3, r2
 8106de2:	d00c      	beq.n	8106dfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106de8:	3328      	adds	r3, #40	@ 0x28
 8106dea:	2102      	movs	r1, #2
 8106dec:	4618      	mov	r0, r3
 8106dee:	f001 fbf5 	bl	81085dc <RCCEx_PLL3_Config>
 8106df2:	4603      	mov	r3, r0
 8106df4:	2b00      	cmp	r3, #0
 8106df6:	d002      	beq.n	8106dfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8106df8:	2301      	movs	r3, #1
 8106dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8106e0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8106e0c:	2300      	movs	r3, #0
 8106e0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8106e10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8106e14:	460b      	mov	r3, r1
 8106e16:	4313      	orrs	r3, r2
 8106e18:	d038      	beq.n	8106e8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8106e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106e26:	d018      	beq.n	8106e5a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8106e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106e2c:	d811      	bhi.n	8106e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106e32:	d014      	beq.n	8106e5e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8106e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106e38:	d80b      	bhi.n	8106e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106e3a:	2b00      	cmp	r3, #0
 8106e3c:	d011      	beq.n	8106e62 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8106e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106e42:	d106      	bne.n	8106e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106e44:	4bc3      	ldr	r3, [pc, #780]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e48:	4ac2      	ldr	r2, [pc, #776]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8106e50:	e008      	b.n	8106e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106e52:	2301      	movs	r3, #1
 8106e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106e58:	e004      	b.n	8106e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106e5a:	bf00      	nop
 8106e5c:	e002      	b.n	8106e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106e5e:	bf00      	nop
 8106e60:	e000      	b.n	8106e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e68:	2b00      	cmp	r3, #0
 8106e6a:	d10b      	bne.n	8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106e6c:	4bb9      	ldr	r3, [pc, #740]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106e70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8106e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106e7c:	4ab5      	ldr	r2, [pc, #724]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106e7e:	430b      	orrs	r3, r1
 8106e80:	6553      	str	r3, [r2, #84]	@ 0x54
 8106e82:	e003      	b.n	8106e8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e94:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8106e98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8106e9a:	2300      	movs	r3, #0
 8106e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8106e9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8106ea2:	460b      	mov	r3, r1
 8106ea4:	4313      	orrs	r3, r2
 8106ea6:	d009      	beq.n	8106ebc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106ea8:	4baa      	ldr	r3, [pc, #680]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106eac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8106eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106eb6:	4aa7      	ldr	r2, [pc, #668]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106eb8:	430b      	orrs	r3, r1
 8106eba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ec4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8106ec8:	653b      	str	r3, [r7, #80]	@ 0x50
 8106eca:	2300      	movs	r3, #0
 8106ecc:	657b      	str	r3, [r7, #84]	@ 0x54
 8106ece:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8106ed2:	460b      	mov	r3, r1
 8106ed4:	4313      	orrs	r3, r2
 8106ed6:	d00a      	beq.n	8106eee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106ed8:	4b9e      	ldr	r3, [pc, #632]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106eda:	691b      	ldr	r3, [r3, #16]
 8106edc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8106ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ee4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106ee8:	4a9a      	ldr	r2, [pc, #616]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106eea:	430b      	orrs	r3, r1
 8106eec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ef6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8106efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106efc:	2300      	movs	r3, #0
 8106efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106f00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8106f04:	460b      	mov	r3, r1
 8106f06:	4313      	orrs	r3, r2
 8106f08:	d009      	beq.n	8106f1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106f0a:	4b92      	ldr	r3, [pc, #584]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106f0e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8106f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106f18:	4a8e      	ldr	r2, [pc, #568]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f1a:	430b      	orrs	r3, r1
 8106f1c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8106f2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8106f2c:	2300      	movs	r3, #0
 8106f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8106f30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8106f34:	460b      	mov	r3, r1
 8106f36:	4313      	orrs	r3, r2
 8106f38:	d00e      	beq.n	8106f58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106f3a:	4b86      	ldr	r3, [pc, #536]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f3c:	691b      	ldr	r3, [r3, #16]
 8106f3e:	4a85      	ldr	r2, [pc, #532]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8106f44:	6113      	str	r3, [r2, #16]
 8106f46:	4b83      	ldr	r3, [pc, #524]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f48:	6919      	ldr	r1, [r3, #16]
 8106f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8106f52:	4a80      	ldr	r2, [pc, #512]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f54:	430b      	orrs	r3, r1
 8106f56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f60:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8106f64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8106f66:	2300      	movs	r3, #0
 8106f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106f6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8106f6e:	460b      	mov	r3, r1
 8106f70:	4313      	orrs	r3, r2
 8106f72:	d009      	beq.n	8106f88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106f74:	4b77      	ldr	r3, [pc, #476]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106f78:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106f82:	4a74      	ldr	r2, [pc, #464]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f84:	430b      	orrs	r3, r1
 8106f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f90:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8106f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8106f96:	2300      	movs	r3, #0
 8106f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8106f9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8106f9e:	460b      	mov	r3, r1
 8106fa0:	4313      	orrs	r3, r2
 8106fa2:	d00a      	beq.n	8106fba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106fa8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8106fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8106fb4:	4a67      	ldr	r2, [pc, #412]	@ (8107154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106fb6:	430b      	orrs	r3, r1
 8106fb8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8106fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fc2:	2100      	movs	r1, #0
 8106fc4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8106fc6:	f003 0301 	and.w	r3, r3, #1
 8106fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8106fcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8106fd0:	460b      	mov	r3, r1
 8106fd2:	4313      	orrs	r3, r2
 8106fd4:	d011      	beq.n	8106ffa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fda:	3308      	adds	r3, #8
 8106fdc:	2100      	movs	r1, #0
 8106fde:	4618      	mov	r0, r3
 8106fe0:	f001 fa4a 	bl	8108478 <RCCEx_PLL2_Config>
 8106fe4:	4603      	mov	r3, r0
 8106fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8106fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106fee:	2b00      	cmp	r3, #0
 8106ff0:	d003      	beq.n	8106ffa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8106ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107002:	2100      	movs	r1, #0
 8107004:	6239      	str	r1, [r7, #32]
 8107006:	f003 0302 	and.w	r3, r3, #2
 810700a:	627b      	str	r3, [r7, #36]	@ 0x24
 810700c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8107010:	460b      	mov	r3, r1
 8107012:	4313      	orrs	r3, r2
 8107014:	d011      	beq.n	810703a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810701a:	3308      	adds	r3, #8
 810701c:	2101      	movs	r1, #1
 810701e:	4618      	mov	r0, r3
 8107020:	f001 fa2a 	bl	8108478 <RCCEx_PLL2_Config>
 8107024:	4603      	mov	r3, r0
 8107026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810702a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810702e:	2b00      	cmp	r3, #0
 8107030:	d003      	beq.n	810703a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107042:	2100      	movs	r1, #0
 8107044:	61b9      	str	r1, [r7, #24]
 8107046:	f003 0304 	and.w	r3, r3, #4
 810704a:	61fb      	str	r3, [r7, #28]
 810704c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8107050:	460b      	mov	r3, r1
 8107052:	4313      	orrs	r3, r2
 8107054:	d011      	beq.n	810707a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810705a:	3308      	adds	r3, #8
 810705c:	2102      	movs	r1, #2
 810705e:	4618      	mov	r0, r3
 8107060:	f001 fa0a 	bl	8108478 <RCCEx_PLL2_Config>
 8107064:	4603      	mov	r3, r0
 8107066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810706a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810706e:	2b00      	cmp	r3, #0
 8107070:	d003      	beq.n	810707a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107082:	2100      	movs	r1, #0
 8107084:	6139      	str	r1, [r7, #16]
 8107086:	f003 0308 	and.w	r3, r3, #8
 810708a:	617b      	str	r3, [r7, #20]
 810708c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8107090:	460b      	mov	r3, r1
 8107092:	4313      	orrs	r3, r2
 8107094:	d011      	beq.n	81070ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810709a:	3328      	adds	r3, #40	@ 0x28
 810709c:	2100      	movs	r1, #0
 810709e:	4618      	mov	r0, r3
 81070a0:	f001 fa9c 	bl	81085dc <RCCEx_PLL3_Config>
 81070a4:	4603      	mov	r3, r0
 81070a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81070aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070ae:	2b00      	cmp	r3, #0
 81070b0:	d003      	beq.n	81070ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81070b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81070c2:	2100      	movs	r1, #0
 81070c4:	60b9      	str	r1, [r7, #8]
 81070c6:	f003 0310 	and.w	r3, r3, #16
 81070ca:	60fb      	str	r3, [r7, #12]
 81070cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81070d0:	460b      	mov	r3, r1
 81070d2:	4313      	orrs	r3, r2
 81070d4:	d011      	beq.n	81070fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81070d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070da:	3328      	adds	r3, #40	@ 0x28
 81070dc:	2101      	movs	r1, #1
 81070de:	4618      	mov	r0, r3
 81070e0:	f001 fa7c 	bl	81085dc <RCCEx_PLL3_Config>
 81070e4:	4603      	mov	r3, r0
 81070e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81070ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070ee:	2b00      	cmp	r3, #0
 81070f0:	d003      	beq.n	81070fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81070f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81070fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107102:	2100      	movs	r1, #0
 8107104:	6039      	str	r1, [r7, #0]
 8107106:	f003 0320 	and.w	r3, r3, #32
 810710a:	607b      	str	r3, [r7, #4]
 810710c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8107110:	460b      	mov	r3, r1
 8107112:	4313      	orrs	r3, r2
 8107114:	d011      	beq.n	810713a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810711a:	3328      	adds	r3, #40	@ 0x28
 810711c:	2102      	movs	r1, #2
 810711e:	4618      	mov	r0, r3
 8107120:	f001 fa5c 	bl	81085dc <RCCEx_PLL3_Config>
 8107124:	4603      	mov	r3, r0
 8107126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810712a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810712e:	2b00      	cmp	r3, #0
 8107130:	d003      	beq.n	810713a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810713a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810713e:	2b00      	cmp	r3, #0
 8107140:	d101      	bne.n	8107146 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8107142:	2300      	movs	r3, #0
 8107144:	e000      	b.n	8107148 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8107146:	2301      	movs	r3, #1
}
 8107148:	4618      	mov	r0, r3
 810714a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810714e:	46bd      	mov	sp, r7
 8107150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107154:	58024400 	.word	0x58024400

08107158 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8107158:	b580      	push	{r7, lr}
 810715a:	b090      	sub	sp, #64	@ 0x40
 810715c:	af00      	add	r7, sp, #0
 810715e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8107162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107166:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810716a:	430b      	orrs	r3, r1
 810716c:	f040 8094 	bne.w	8107298 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8107170:	4b9e      	ldr	r3, [pc, #632]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107174:	f003 0307 	and.w	r3, r3, #7
 8107178:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810717a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810717c:	2b04      	cmp	r3, #4
 810717e:	f200 8087 	bhi.w	8107290 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8107182:	a201      	add	r2, pc, #4	@ (adr r2, 8107188 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8107184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107188:	0810719d 	.word	0x0810719d
 810718c:	081071c5 	.word	0x081071c5
 8107190:	081071ed 	.word	0x081071ed
 8107194:	08107289 	.word	0x08107289
 8107198:	08107215 	.word	0x08107215
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810719c:	4b93      	ldr	r3, [pc, #588]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810719e:	681b      	ldr	r3, [r3, #0]
 81071a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81071a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81071a8:	d108      	bne.n	81071bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81071aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81071ae:	4618      	mov	r0, r3
 81071b0:	f001 f810 	bl	81081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81071b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81071b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071b8:	f000 bd45 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071bc:	2300      	movs	r3, #0
 81071be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81071c0:	f000 bd41 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81071c4:	4b89      	ldr	r3, [pc, #548]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81071c6:	681b      	ldr	r3, [r3, #0]
 81071c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81071cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81071d0:	d108      	bne.n	81071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81071d2:	f107 0318 	add.w	r3, r7, #24
 81071d6:	4618      	mov	r0, r3
 81071d8:	f000 fd54 	bl	8107c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81071dc:	69bb      	ldr	r3, [r7, #24]
 81071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071e0:	f000 bd31 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071e4:	2300      	movs	r3, #0
 81071e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81071e8:	f000 bd2d 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81071ec:	4b7f      	ldr	r3, [pc, #508]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81071ee:	681b      	ldr	r3, [r3, #0]
 81071f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81071f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81071f8:	d108      	bne.n	810720c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81071fa:	f107 030c 	add.w	r3, r7, #12
 81071fe:	4618      	mov	r0, r3
 8107200:	f000 fe94 	bl	8107f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107204:	68fb      	ldr	r3, [r7, #12]
 8107206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107208:	f000 bd1d 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810720c:	2300      	movs	r3, #0
 810720e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107210:	f000 bd19 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107214:	4b75      	ldr	r3, [pc, #468]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107218:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810721c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810721e:	4b73      	ldr	r3, [pc, #460]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107220:	681b      	ldr	r3, [r3, #0]
 8107222:	f003 0304 	and.w	r3, r3, #4
 8107226:	2b04      	cmp	r3, #4
 8107228:	d10c      	bne.n	8107244 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810722a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810722c:	2b00      	cmp	r3, #0
 810722e:	d109      	bne.n	8107244 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107230:	4b6e      	ldr	r3, [pc, #440]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107232:	681b      	ldr	r3, [r3, #0]
 8107234:	08db      	lsrs	r3, r3, #3
 8107236:	f003 0303 	and.w	r3, r3, #3
 810723a:	4a6d      	ldr	r2, [pc, #436]	@ (81073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810723c:	fa22 f303 	lsr.w	r3, r2, r3
 8107240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107242:	e01f      	b.n	8107284 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107244:	4b69      	ldr	r3, [pc, #420]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107246:	681b      	ldr	r3, [r3, #0]
 8107248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810724c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107250:	d106      	bne.n	8107260 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8107252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107254:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107258:	d102      	bne.n	8107260 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810725a:	4b66      	ldr	r3, [pc, #408]	@ (81073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810725c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810725e:	e011      	b.n	8107284 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107260:	4b62      	ldr	r3, [pc, #392]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107262:	681b      	ldr	r3, [r3, #0]
 8107264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810726c:	d106      	bne.n	810727c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810726e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107274:	d102      	bne.n	810727c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107276:	4b60      	ldr	r3, [pc, #384]	@ (81073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810727a:	e003      	b.n	8107284 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810727c:	2300      	movs	r3, #0
 810727e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107280:	f000 bce1 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107284:	f000 bcdf 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107288:	4b5c      	ldr	r3, [pc, #368]	@ (81073fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810728c:	f000 bcdb 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107290:	2300      	movs	r3, #0
 8107292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107294:	f000 bcd7 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8107298:	e9d7 2300 	ldrd	r2, r3, [r7]
 810729c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 81072a0:	430b      	orrs	r3, r1
 81072a2:	f040 80ad 	bne.w	8107400 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 81072a6:	4b51      	ldr	r3, [pc, #324]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81072a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81072aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 81072ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81072b6:	d056      	beq.n	8107366 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 81072b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81072be:	f200 8090 	bhi.w	81073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072c4:	2bc0      	cmp	r3, #192	@ 0xc0
 81072c6:	f000 8088 	beq.w	81073da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072cc:	2bc0      	cmp	r3, #192	@ 0xc0
 81072ce:	f200 8088 	bhi.w	81073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81072d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072d4:	2b80      	cmp	r3, #128	@ 0x80
 81072d6:	d032      	beq.n	810733e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072da:	2b80      	cmp	r3, #128	@ 0x80
 81072dc:	f200 8081 	bhi.w	81073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072e2:	2b00      	cmp	r3, #0
 81072e4:	d003      	beq.n	81072ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 81072e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072e8:	2b40      	cmp	r3, #64	@ 0x40
 81072ea:	d014      	beq.n	8107316 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81072ec:	e079      	b.n	81073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81072ee:	4b3f      	ldr	r3, [pc, #252]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81072f0:	681b      	ldr	r3, [r3, #0]
 81072f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81072f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81072fa:	d108      	bne.n	810730e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81072fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107300:	4618      	mov	r0, r3
 8107302:	f000 ff67 	bl	81081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810730a:	f000 bc9c 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810730e:	2300      	movs	r3, #0
 8107310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107312:	f000 bc98 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107316:	4b35      	ldr	r3, [pc, #212]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107318:	681b      	ldr	r3, [r3, #0]
 810731a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810731e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107322:	d108      	bne.n	8107336 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107324:	f107 0318 	add.w	r3, r7, #24
 8107328:	4618      	mov	r0, r3
 810732a:	f000 fcab 	bl	8107c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810732e:	69bb      	ldr	r3, [r7, #24]
 8107330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107332:	f000 bc88 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107336:	2300      	movs	r3, #0
 8107338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810733a:	f000 bc84 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810733e:	4b2b      	ldr	r3, [pc, #172]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107340:	681b      	ldr	r3, [r3, #0]
 8107342:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810734a:	d108      	bne.n	810735e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810734c:	f107 030c 	add.w	r3, r7, #12
 8107350:	4618      	mov	r0, r3
 8107352:	f000 fdeb 	bl	8107f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107356:	68fb      	ldr	r3, [r7, #12]
 8107358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810735a:	f000 bc74 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810735e:	2300      	movs	r3, #0
 8107360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107362:	f000 bc70 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107366:	4b21      	ldr	r3, [pc, #132]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810736a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810736e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107370:	4b1e      	ldr	r3, [pc, #120]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107372:	681b      	ldr	r3, [r3, #0]
 8107374:	f003 0304 	and.w	r3, r3, #4
 8107378:	2b04      	cmp	r3, #4
 810737a:	d10c      	bne.n	8107396 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810737c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810737e:	2b00      	cmp	r3, #0
 8107380:	d109      	bne.n	8107396 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107382:	4b1a      	ldr	r3, [pc, #104]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107384:	681b      	ldr	r3, [r3, #0]
 8107386:	08db      	lsrs	r3, r3, #3
 8107388:	f003 0303 	and.w	r3, r3, #3
 810738c:	4a18      	ldr	r2, [pc, #96]	@ (81073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810738e:	fa22 f303 	lsr.w	r3, r2, r3
 8107392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107394:	e01f      	b.n	81073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107396:	4b15      	ldr	r3, [pc, #84]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107398:	681b      	ldr	r3, [r3, #0]
 810739a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810739e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81073a2:	d106      	bne.n	81073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81073a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81073a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81073aa:	d102      	bne.n	81073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81073ac:	4b11      	ldr	r3, [pc, #68]	@ (81073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81073ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81073b0:	e011      	b.n	81073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81073b2:	4b0e      	ldr	r3, [pc, #56]	@ (81073ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81073b4:	681b      	ldr	r3, [r3, #0]
 81073b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81073ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81073be:	d106      	bne.n	81073ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81073c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81073c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81073c6:	d102      	bne.n	81073ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81073c8:	4b0b      	ldr	r3, [pc, #44]	@ (81073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81073ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81073cc:	e003      	b.n	81073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81073ce:	2300      	movs	r3, #0
 81073d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81073d2:	f000 bc38 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81073d6:	f000 bc36 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81073da:	4b08      	ldr	r3, [pc, #32]	@ (81073fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81073dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81073de:	f000 bc32 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81073e2:	2300      	movs	r3, #0
 81073e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81073e6:	f000 bc2e 	b.w	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81073ea:	bf00      	nop
 81073ec:	58024400 	.word	0x58024400
 81073f0:	03d09000 	.word	0x03d09000
 81073f4:	003d0900 	.word	0x003d0900
 81073f8:	017d7840 	.word	0x017d7840
 81073fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107404:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8107408:	430b      	orrs	r3, r1
 810740a:	f040 809c 	bne.w	8107546 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810740e:	4b9e      	ldr	r3, [pc, #632]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107412:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8107416:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810741a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810741e:	d054      	beq.n	81074ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107422:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107426:	f200 808b 	bhi.w	8107540 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810742c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107430:	f000 8083 	beq.w	810753a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107436:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810743a:	f200 8081 	bhi.w	8107540 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107440:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107444:	d02f      	beq.n	81074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8107446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107448:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810744c:	d878      	bhi.n	8107540 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107450:	2b00      	cmp	r3, #0
 8107452:	d004      	beq.n	810745e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8107454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107456:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810745a:	d012      	beq.n	8107482 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810745c:	e070      	b.n	8107540 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810745e:	4b8a      	ldr	r3, [pc, #552]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107460:	681b      	ldr	r3, [r3, #0]
 8107462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107466:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810746a:	d107      	bne.n	810747c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810746c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107470:	4618      	mov	r0, r3
 8107472:	f000 feaf 	bl	81081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810747a:	e3e4      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810747c:	2300      	movs	r3, #0
 810747e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107480:	e3e1      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107482:	4b81      	ldr	r3, [pc, #516]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107484:	681b      	ldr	r3, [r3, #0]
 8107486:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810748a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810748e:	d107      	bne.n	81074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107490:	f107 0318 	add.w	r3, r7, #24
 8107494:	4618      	mov	r0, r3
 8107496:	f000 fbf5 	bl	8107c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810749a:	69bb      	ldr	r3, [r7, #24]
 810749c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810749e:	e3d2      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81074a0:	2300      	movs	r3, #0
 81074a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81074a4:	e3cf      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81074a6:	4b78      	ldr	r3, [pc, #480]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81074a8:	681b      	ldr	r3, [r3, #0]
 81074aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81074ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81074b2:	d107      	bne.n	81074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81074b4:	f107 030c 	add.w	r3, r7, #12
 81074b8:	4618      	mov	r0, r3
 81074ba:	f000 fd37 	bl	8107f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81074be:	68fb      	ldr	r3, [r7, #12]
 81074c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81074c2:	e3c0      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81074c4:	2300      	movs	r3, #0
 81074c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81074c8:	e3bd      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81074ca:	4b6f      	ldr	r3, [pc, #444]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81074cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81074ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81074d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81074d4:	4b6c      	ldr	r3, [pc, #432]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81074d6:	681b      	ldr	r3, [r3, #0]
 81074d8:	f003 0304 	and.w	r3, r3, #4
 81074dc:	2b04      	cmp	r3, #4
 81074de:	d10c      	bne.n	81074fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81074e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81074e2:	2b00      	cmp	r3, #0
 81074e4:	d109      	bne.n	81074fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81074e6:	4b68      	ldr	r3, [pc, #416]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81074e8:	681b      	ldr	r3, [r3, #0]
 81074ea:	08db      	lsrs	r3, r3, #3
 81074ec:	f003 0303 	and.w	r3, r3, #3
 81074f0:	4a66      	ldr	r2, [pc, #408]	@ (810768c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81074f2:	fa22 f303 	lsr.w	r3, r2, r3
 81074f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81074f8:	e01e      	b.n	8107538 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81074fa:	4b63      	ldr	r3, [pc, #396]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81074fc:	681b      	ldr	r3, [r3, #0]
 81074fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107506:	d106      	bne.n	8107516 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8107508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810750a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810750e:	d102      	bne.n	8107516 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107510:	4b5f      	ldr	r3, [pc, #380]	@ (8107690 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107514:	e010      	b.n	8107538 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107516:	4b5c      	ldr	r3, [pc, #368]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107518:	681b      	ldr	r3, [r3, #0]
 810751a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810751e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107522:	d106      	bne.n	8107532 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107526:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810752a:	d102      	bne.n	8107532 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810752c:	4b59      	ldr	r3, [pc, #356]	@ (8107694 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810752e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107530:	e002      	b.n	8107538 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107532:	2300      	movs	r3, #0
 8107534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107536:	e386      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107538:	e385      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810753a:	4b57      	ldr	r3, [pc, #348]	@ (8107698 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810753c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810753e:	e382      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107540:	2300      	movs	r3, #0
 8107542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107544:	e37f      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8107546:	e9d7 2300 	ldrd	r2, r3, [r7]
 810754a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810754e:	430b      	orrs	r3, r1
 8107550:	f040 80a7 	bne.w	81076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8107554:	4b4c      	ldr	r3, [pc, #304]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107558:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 810755c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107560:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107564:	d055      	beq.n	8107612 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8107566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107568:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810756c:	f200 8096 	bhi.w	810769c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107572:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107576:	f000 8084 	beq.w	8107682 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810757c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107580:	f200 808c 	bhi.w	810769c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810758a:	d030      	beq.n	81075ee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810758e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107592:	f200 8083 	bhi.w	810769c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107598:	2b00      	cmp	r3, #0
 810759a:	d004      	beq.n	81075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810759e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81075a2:	d012      	beq.n	81075ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81075a4:	e07a      	b.n	810769c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81075a6:	4b38      	ldr	r3, [pc, #224]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81075a8:	681b      	ldr	r3, [r3, #0]
 81075aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81075ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81075b2:	d107      	bne.n	81075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81075b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81075b8:	4618      	mov	r0, r3
 81075ba:	f000 fe0b 	bl	81081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81075c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075c2:	e340      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075c4:	2300      	movs	r3, #0
 81075c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81075c8:	e33d      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81075ca:	4b2f      	ldr	r3, [pc, #188]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81075cc:	681b      	ldr	r3, [r3, #0]
 81075ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81075d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81075d6:	d107      	bne.n	81075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81075d8:	f107 0318 	add.w	r3, r7, #24
 81075dc:	4618      	mov	r0, r3
 81075de:	f000 fb51 	bl	8107c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81075e2:	69bb      	ldr	r3, [r7, #24]
 81075e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075e6:	e32e      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075e8:	2300      	movs	r3, #0
 81075ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81075ec:	e32b      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81075ee:	4b26      	ldr	r3, [pc, #152]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81075f0:	681b      	ldr	r3, [r3, #0]
 81075f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81075f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81075fa:	d107      	bne.n	810760c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81075fc:	f107 030c 	add.w	r3, r7, #12
 8107600:	4618      	mov	r0, r3
 8107602:	f000 fc93 	bl	8107f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107606:	68fb      	ldr	r3, [r7, #12]
 8107608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810760a:	e31c      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810760c:	2300      	movs	r3, #0
 810760e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107610:	e319      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107612:	4b1d      	ldr	r3, [pc, #116]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107616:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810761a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810761c:	4b1a      	ldr	r3, [pc, #104]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810761e:	681b      	ldr	r3, [r3, #0]
 8107620:	f003 0304 	and.w	r3, r3, #4
 8107624:	2b04      	cmp	r3, #4
 8107626:	d10c      	bne.n	8107642 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8107628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810762a:	2b00      	cmp	r3, #0
 810762c:	d109      	bne.n	8107642 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810762e:	4b16      	ldr	r3, [pc, #88]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107630:	681b      	ldr	r3, [r3, #0]
 8107632:	08db      	lsrs	r3, r3, #3
 8107634:	f003 0303 	and.w	r3, r3, #3
 8107638:	4a14      	ldr	r2, [pc, #80]	@ (810768c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810763a:	fa22 f303 	lsr.w	r3, r2, r3
 810763e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107640:	e01e      	b.n	8107680 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107642:	4b11      	ldr	r3, [pc, #68]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107644:	681b      	ldr	r3, [r3, #0]
 8107646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810764a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810764e:	d106      	bne.n	810765e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8107650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107656:	d102      	bne.n	810765e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107658:	4b0d      	ldr	r3, [pc, #52]	@ (8107690 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810765a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810765c:	e010      	b.n	8107680 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810765e:	4b0a      	ldr	r3, [pc, #40]	@ (8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107660:	681b      	ldr	r3, [r3, #0]
 8107662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810766a:	d106      	bne.n	810767a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810766c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810766e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107672:	d102      	bne.n	810767a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107674:	4b07      	ldr	r3, [pc, #28]	@ (8107694 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107678:	e002      	b.n	8107680 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810767a:	2300      	movs	r3, #0
 810767c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810767e:	e2e2      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107680:	e2e1      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107682:	4b05      	ldr	r3, [pc, #20]	@ (8107698 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107686:	e2de      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107688:	58024400 	.word	0x58024400
 810768c:	03d09000 	.word	0x03d09000
 8107690:	003d0900 	.word	0x003d0900
 8107694:	017d7840 	.word	0x017d7840
 8107698:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810769c:	2300      	movs	r3, #0
 810769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81076a0:	e2d1      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 81076a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81076a6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 81076aa:	430b      	orrs	r3, r1
 81076ac:	f040 809c 	bne.w	81077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81076b0:	4b93      	ldr	r3, [pc, #588]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81076b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81076b4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 81076b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81076ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81076c0:	d054      	beq.n	810776c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81076c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81076c8:	f200 808b 	bhi.w	81077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81076cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81076d2:	f000 8083 	beq.w	81077dc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81076d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81076dc:	f200 8081 	bhi.w	81077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81076e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81076e6:	d02f      	beq.n	8107748 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81076e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81076ee:	d878      	bhi.n	81077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81076f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076f2:	2b00      	cmp	r3, #0
 81076f4:	d004      	beq.n	8107700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81076f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81076fc:	d012      	beq.n	8107724 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81076fe:	e070      	b.n	81077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107700:	4b7f      	ldr	r3, [pc, #508]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107702:	681b      	ldr	r3, [r3, #0]
 8107704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810770c:	d107      	bne.n	810771e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810770e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107712:	4618      	mov	r0, r3
 8107714:	f000 fd5e 	bl	81081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810771a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810771c:	e293      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810771e:	2300      	movs	r3, #0
 8107720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107722:	e290      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107724:	4b76      	ldr	r3, [pc, #472]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107726:	681b      	ldr	r3, [r3, #0]
 8107728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810772c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107730:	d107      	bne.n	8107742 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107732:	f107 0318 	add.w	r3, r7, #24
 8107736:	4618      	mov	r0, r3
 8107738:	f000 faa4 	bl	8107c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810773c:	69bb      	ldr	r3, [r7, #24]
 810773e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107740:	e281      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107742:	2300      	movs	r3, #0
 8107744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107746:	e27e      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107748:	4b6d      	ldr	r3, [pc, #436]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810774a:	681b      	ldr	r3, [r3, #0]
 810774c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107754:	d107      	bne.n	8107766 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107756:	f107 030c 	add.w	r3, r7, #12
 810775a:	4618      	mov	r0, r3
 810775c:	f000 fbe6 	bl	8107f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107760:	68fb      	ldr	r3, [r7, #12]
 8107762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107764:	e26f      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107766:	2300      	movs	r3, #0
 8107768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810776a:	e26c      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810776c:	4b64      	ldr	r3, [pc, #400]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810776e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107770:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107774:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107776:	4b62      	ldr	r3, [pc, #392]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107778:	681b      	ldr	r3, [r3, #0]
 810777a:	f003 0304 	and.w	r3, r3, #4
 810777e:	2b04      	cmp	r3, #4
 8107780:	d10c      	bne.n	810779c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8107782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107784:	2b00      	cmp	r3, #0
 8107786:	d109      	bne.n	810779c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107788:	4b5d      	ldr	r3, [pc, #372]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810778a:	681b      	ldr	r3, [r3, #0]
 810778c:	08db      	lsrs	r3, r3, #3
 810778e:	f003 0303 	and.w	r3, r3, #3
 8107792:	4a5c      	ldr	r2, [pc, #368]	@ (8107904 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8107794:	fa22 f303 	lsr.w	r3, r2, r3
 8107798:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810779a:	e01e      	b.n	81077da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810779c:	4b58      	ldr	r3, [pc, #352]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810779e:	681b      	ldr	r3, [r3, #0]
 81077a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81077a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81077a8:	d106      	bne.n	81077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 81077aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81077ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81077b0:	d102      	bne.n	81077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81077b2:	4b55      	ldr	r3, [pc, #340]	@ (8107908 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81077b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81077b6:	e010      	b.n	81077da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81077b8:	4b51      	ldr	r3, [pc, #324]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81077ba:	681b      	ldr	r3, [r3, #0]
 81077bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81077c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81077c4:	d106      	bne.n	81077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81077c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81077c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81077cc:	d102      	bne.n	81077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81077ce:	4b4f      	ldr	r3, [pc, #316]	@ (810790c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81077d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81077d2:	e002      	b.n	81077da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81077d4:	2300      	movs	r3, #0
 81077d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81077d8:	e235      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81077da:	e234      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81077dc:	4b4c      	ldr	r3, [pc, #304]	@ (8107910 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81077de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077e0:	e231      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81077e2:	2300      	movs	r3, #0
 81077e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077e6:	e22e      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81077e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81077ec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 81077f0:	430b      	orrs	r3, r1
 81077f2:	f040 808f 	bne.w	8107914 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81077f6:	4b42      	ldr	r3, [pc, #264]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81077f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81077fa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 81077fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8107800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107802:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107806:	d06b      	beq.n	81078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8107808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810780a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810780e:	d874      	bhi.n	81078fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107812:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107816:	d056      	beq.n	81078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8107818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810781a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810781e:	d86c      	bhi.n	81078fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107822:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107826:	d03b      	beq.n	81078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8107828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810782a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810782e:	d864      	bhi.n	81078fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107836:	d021      	beq.n	810787c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8107838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810783a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810783e:	d85c      	bhi.n	81078fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107842:	2b00      	cmp	r3, #0
 8107844:	d004      	beq.n	8107850 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8107846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810784c:	d004      	beq.n	8107858 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810784e:	e054      	b.n	81078fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8107850:	f7fe fa20 	bl	8105c94 <HAL_RCC_GetPCLK1Freq>
 8107854:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107856:	e1f6      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107858:	4b29      	ldr	r3, [pc, #164]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810785a:	681b      	ldr	r3, [r3, #0]
 810785c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107864:	d107      	bne.n	8107876 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107866:	f107 0318 	add.w	r3, r7, #24
 810786a:	4618      	mov	r0, r3
 810786c:	f000 fa0a 	bl	8107c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107870:	69fb      	ldr	r3, [r7, #28]
 8107872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107874:	e1e7      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107876:	2300      	movs	r3, #0
 8107878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810787a:	e1e4      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810787c:	4b20      	ldr	r3, [pc, #128]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810787e:	681b      	ldr	r3, [r3, #0]
 8107880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107888:	d107      	bne.n	810789a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810788a:	f107 030c 	add.w	r3, r7, #12
 810788e:	4618      	mov	r0, r3
 8107890:	f000 fb4c 	bl	8107f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107894:	693b      	ldr	r3, [r7, #16]
 8107896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107898:	e1d5      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810789a:	2300      	movs	r3, #0
 810789c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810789e:	e1d2      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81078a0:	4b17      	ldr	r3, [pc, #92]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81078a2:	681b      	ldr	r3, [r3, #0]
 81078a4:	f003 0304 	and.w	r3, r3, #4
 81078a8:	2b04      	cmp	r3, #4
 81078aa:	d109      	bne.n	81078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81078ac:	4b14      	ldr	r3, [pc, #80]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81078ae:	681b      	ldr	r3, [r3, #0]
 81078b0:	08db      	lsrs	r3, r3, #3
 81078b2:	f003 0303 	and.w	r3, r3, #3
 81078b6:	4a13      	ldr	r2, [pc, #76]	@ (8107904 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81078b8:	fa22 f303 	lsr.w	r3, r2, r3
 81078bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81078be:	e1c2      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81078c0:	2300      	movs	r3, #0
 81078c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81078c4:	e1bf      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81078c6:	4b0e      	ldr	r3, [pc, #56]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81078c8:	681b      	ldr	r3, [r3, #0]
 81078ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81078ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81078d2:	d102      	bne.n	81078da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81078d4:	4b0c      	ldr	r3, [pc, #48]	@ (8107908 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81078d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81078d8:	e1b5      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81078da:	2300      	movs	r3, #0
 81078dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81078de:	e1b2      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81078e0:	4b07      	ldr	r3, [pc, #28]	@ (8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81078e2:	681b      	ldr	r3, [r3, #0]
 81078e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81078e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81078ec:	d102      	bne.n	81078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81078ee:	4b07      	ldr	r3, [pc, #28]	@ (810790c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81078f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81078f2:	e1a8      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81078f4:	2300      	movs	r3, #0
 81078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81078f8:	e1a5      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81078fa:	2300      	movs	r3, #0
 81078fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81078fe:	e1a2      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107900:	58024400 	.word	0x58024400
 8107904:	03d09000 	.word	0x03d09000
 8107908:	003d0900 	.word	0x003d0900
 810790c:	017d7840 	.word	0x017d7840
 8107910:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107918:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810791c:	430b      	orrs	r3, r1
 810791e:	d173      	bne.n	8107a08 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8107920:	4b9c      	ldr	r3, [pc, #624]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107924:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8107928:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810792a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810792c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107930:	d02f      	beq.n	8107992 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8107932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107938:	d863      	bhi.n	8107a02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810793a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810793c:	2b00      	cmp	r3, #0
 810793e:	d004      	beq.n	810794a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8107940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107946:	d012      	beq.n	810796e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8107948:	e05b      	b.n	8107a02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810794a:	4b92      	ldr	r3, [pc, #584]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810794c:	681b      	ldr	r3, [r3, #0]
 810794e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107956:	d107      	bne.n	8107968 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107958:	f107 0318 	add.w	r3, r7, #24
 810795c:	4618      	mov	r0, r3
 810795e:	f000 f991 	bl	8107c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107962:	69bb      	ldr	r3, [r7, #24]
 8107964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107966:	e16e      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107968:	2300      	movs	r3, #0
 810796a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810796c:	e16b      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810796e:	4b89      	ldr	r3, [pc, #548]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107970:	681b      	ldr	r3, [r3, #0]
 8107972:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107976:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810797a:	d107      	bne.n	810798c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810797c:	f107 030c 	add.w	r3, r7, #12
 8107980:	4618      	mov	r0, r3
 8107982:	f000 fad3 	bl	8107f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8107986:	697b      	ldr	r3, [r7, #20]
 8107988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810798a:	e15c      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810798c:	2300      	movs	r3, #0
 810798e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107990:	e159      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107992:	4b80      	ldr	r3, [pc, #512]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107996:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810799a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810799c:	4b7d      	ldr	r3, [pc, #500]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810799e:	681b      	ldr	r3, [r3, #0]
 81079a0:	f003 0304 	and.w	r3, r3, #4
 81079a4:	2b04      	cmp	r3, #4
 81079a6:	d10c      	bne.n	81079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 81079a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81079aa:	2b00      	cmp	r3, #0
 81079ac:	d109      	bne.n	81079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81079ae:	4b79      	ldr	r3, [pc, #484]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81079b0:	681b      	ldr	r3, [r3, #0]
 81079b2:	08db      	lsrs	r3, r3, #3
 81079b4:	f003 0303 	and.w	r3, r3, #3
 81079b8:	4a77      	ldr	r2, [pc, #476]	@ (8107b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81079ba:	fa22 f303 	lsr.w	r3, r2, r3
 81079be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81079c0:	e01e      	b.n	8107a00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81079c2:	4b74      	ldr	r3, [pc, #464]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81079c4:	681b      	ldr	r3, [r3, #0]
 81079c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81079ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81079ce:	d106      	bne.n	81079de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81079d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81079d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81079d6:	d102      	bne.n	81079de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81079d8:	4b70      	ldr	r3, [pc, #448]	@ (8107b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81079da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81079dc:	e010      	b.n	8107a00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81079de:	4b6d      	ldr	r3, [pc, #436]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81079e0:	681b      	ldr	r3, [r3, #0]
 81079e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81079e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81079ea:	d106      	bne.n	81079fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 81079ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81079ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81079f2:	d102      	bne.n	81079fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81079f4:	4b6a      	ldr	r3, [pc, #424]	@ (8107ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81079f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81079f8:	e002      	b.n	8107a00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81079fa:	2300      	movs	r3, #0
 81079fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81079fe:	e122      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107a00:	e121      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107a02:	2300      	movs	r3, #0
 8107a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a06:	e11e      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8107a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107a0c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8107a10:	430b      	orrs	r3, r1
 8107a12:	d133      	bne.n	8107a7c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8107a14:	4b5f      	ldr	r3, [pc, #380]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107a1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107a20:	2b00      	cmp	r3, #0
 8107a22:	d004      	beq.n	8107a2e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8107a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107a2a:	d012      	beq.n	8107a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8107a2c:	e023      	b.n	8107a76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107a2e:	4b59      	ldr	r3, [pc, #356]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107a30:	681b      	ldr	r3, [r3, #0]
 8107a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107a36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107a3a:	d107      	bne.n	8107a4c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107a40:	4618      	mov	r0, r3
 8107a42:	f000 fbc7 	bl	81081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107a4a:	e0fc      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107a4c:	2300      	movs	r3, #0
 8107a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a50:	e0f9      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107a52:	4b50      	ldr	r3, [pc, #320]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107a54:	681b      	ldr	r3, [r3, #0]
 8107a56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107a5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107a5e:	d107      	bne.n	8107a70 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107a60:	f107 0318 	add.w	r3, r7, #24
 8107a64:	4618      	mov	r0, r3
 8107a66:	f000 f90d 	bl	8107c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8107a6a:	6a3b      	ldr	r3, [r7, #32]
 8107a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107a6e:	e0ea      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107a70:	2300      	movs	r3, #0
 8107a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a74:	e0e7      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107a76:	2300      	movs	r3, #0
 8107a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a7a:	e0e4      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8107a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107a80:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8107a84:	430b      	orrs	r3, r1
 8107a86:	f040 808d 	bne.w	8107ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8107a8a:	4b42      	ldr	r3, [pc, #264]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107a8e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8107a92:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107a9a:	d06b      	beq.n	8107b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8107a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107aa2:	d874      	bhi.n	8107b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107aaa:	d056      	beq.n	8107b5a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8107aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107ab2:	d86c      	bhi.n	8107b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ab6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107aba:	d03b      	beq.n	8107b34 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8107abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107abe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107ac2:	d864      	bhi.n	8107b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107aca:	d021      	beq.n	8107b10 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8107acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107ad2:	d85c      	bhi.n	8107b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ad6:	2b00      	cmp	r3, #0
 8107ad8:	d004      	beq.n	8107ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8107ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107adc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107ae0:	d004      	beq.n	8107aec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8107ae2:	e054      	b.n	8107b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8107ae4:	f000 f8b8 	bl	8107c58 <HAL_RCCEx_GetD3PCLK1Freq>
 8107ae8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107aea:	e0ac      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107aec:	4b29      	ldr	r3, [pc, #164]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107aee:	681b      	ldr	r3, [r3, #0]
 8107af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107af4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107af8:	d107      	bne.n	8107b0a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107afa:	f107 0318 	add.w	r3, r7, #24
 8107afe:	4618      	mov	r0, r3
 8107b00:	f000 f8c0 	bl	8107c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107b04:	69fb      	ldr	r3, [r7, #28]
 8107b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b08:	e09d      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b0a:	2300      	movs	r3, #0
 8107b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b0e:	e09a      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107b10:	4b20      	ldr	r3, [pc, #128]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107b12:	681b      	ldr	r3, [r3, #0]
 8107b14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107b1c:	d107      	bne.n	8107b2e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b1e:	f107 030c 	add.w	r3, r7, #12
 8107b22:	4618      	mov	r0, r3
 8107b24:	f000 fa02 	bl	8107f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107b28:	693b      	ldr	r3, [r7, #16]
 8107b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b2c:	e08b      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b2e:	2300      	movs	r3, #0
 8107b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b32:	e088      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107b34:	4b17      	ldr	r3, [pc, #92]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	f003 0304 	and.w	r3, r3, #4
 8107b3c:	2b04      	cmp	r3, #4
 8107b3e:	d109      	bne.n	8107b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107b40:	4b14      	ldr	r3, [pc, #80]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107b42:	681b      	ldr	r3, [r3, #0]
 8107b44:	08db      	lsrs	r3, r3, #3
 8107b46:	f003 0303 	and.w	r3, r3, #3
 8107b4a:	4a13      	ldr	r2, [pc, #76]	@ (8107b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8107b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8107b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b52:	e078      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b54:	2300      	movs	r3, #0
 8107b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b58:	e075      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8107b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107b5c:	681b      	ldr	r3, [r3, #0]
 8107b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107b66:	d102      	bne.n	8107b6e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8107b68:	4b0c      	ldr	r3, [pc, #48]	@ (8107b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8107b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b6c:	e06b      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b6e:	2300      	movs	r3, #0
 8107b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b72:	e068      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107b74:	4b07      	ldr	r3, [pc, #28]	@ (8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107b76:	681b      	ldr	r3, [r3, #0]
 8107b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107b80:	d102      	bne.n	8107b88 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8107b82:	4b07      	ldr	r3, [pc, #28]	@ (8107ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8107b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b86:	e05e      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b88:	2300      	movs	r3, #0
 8107b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b8c:	e05b      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8107b8e:	2300      	movs	r3, #0
 8107b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b92:	e058      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107b94:	58024400 	.word	0x58024400
 8107b98:	03d09000 	.word	0x03d09000
 8107b9c:	003d0900 	.word	0x003d0900
 8107ba0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8107ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107ba8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8107bac:	430b      	orrs	r3, r1
 8107bae:	d148      	bne.n	8107c42 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8107bb0:	4b27      	ldr	r3, [pc, #156]	@ (8107c50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107bb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107bb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107bc0:	d02a      	beq.n	8107c18 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8107bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107bc8:	d838      	bhi.n	8107c3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8107bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107bcc:	2b00      	cmp	r3, #0
 8107bce:	d004      	beq.n	8107bda <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8107bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107bd6:	d00d      	beq.n	8107bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8107bd8:	e030      	b.n	8107c3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107bda:	4b1d      	ldr	r3, [pc, #116]	@ (8107c50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107bdc:	681b      	ldr	r3, [r3, #0]
 8107bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107be6:	d102      	bne.n	8107bee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8107be8:	4b1a      	ldr	r3, [pc, #104]	@ (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8107bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107bec:	e02b      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107bee:	2300      	movs	r3, #0
 8107bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107bf2:	e028      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107bf4:	4b16      	ldr	r3, [pc, #88]	@ (8107c50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107bf6:	681b      	ldr	r3, [r3, #0]
 8107bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107bfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107c00:	d107      	bne.n	8107c12 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107c06:	4618      	mov	r0, r3
 8107c08:	f000 fae4 	bl	81081d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c10:	e019      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c12:	2300      	movs	r3, #0
 8107c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c16:	e016      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107c18:	4b0d      	ldr	r3, [pc, #52]	@ (8107c50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107c1a:	681b      	ldr	r3, [r3, #0]
 8107c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107c24:	d107      	bne.n	8107c36 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107c26:	f107 0318 	add.w	r3, r7, #24
 8107c2a:	4618      	mov	r0, r3
 8107c2c:	f000 f82a 	bl	8107c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107c30:	69fb      	ldr	r3, [r7, #28]
 8107c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c34:	e007      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c36:	2300      	movs	r3, #0
 8107c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c3a:	e004      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107c3c:	2300      	movs	r3, #0
 8107c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c40:	e001      	b.n	8107c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8107c42:	2300      	movs	r3, #0
 8107c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8107c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8107c48:	4618      	mov	r0, r3
 8107c4a:	3740      	adds	r7, #64	@ 0x40
 8107c4c:	46bd      	mov	sp, r7
 8107c4e:	bd80      	pop	{r7, pc}
 8107c50:	58024400 	.word	0x58024400
 8107c54:	017d7840 	.word	0x017d7840

08107c58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8107c58:	b580      	push	{r7, lr}
 8107c5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107c5c:	f7fd ffe8 	bl	8105c30 <HAL_RCC_GetHCLKFreq>
 8107c60:	4602      	mov	r2, r0
 8107c62:	4b06      	ldr	r3, [pc, #24]	@ (8107c7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107c64:	6a1b      	ldr	r3, [r3, #32]
 8107c66:	091b      	lsrs	r3, r3, #4
 8107c68:	f003 0307 	and.w	r3, r3, #7
 8107c6c:	4904      	ldr	r1, [pc, #16]	@ (8107c80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8107c6e:	5ccb      	ldrb	r3, [r1, r3]
 8107c70:	f003 031f 	and.w	r3, r3, #31
 8107c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107c78:	4618      	mov	r0, r3
 8107c7a:	bd80      	pop	{r7, pc}
 8107c7c:	58024400 	.word	0x58024400
 8107c80:	0810ec20 	.word	0x0810ec20

08107c84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8107c84:	b480      	push	{r7}
 8107c86:	b089      	sub	sp, #36	@ 0x24
 8107c88:	af00      	add	r7, sp, #0
 8107c8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107c8c:	4ba1      	ldr	r3, [pc, #644]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c90:	f003 0303 	and.w	r3, r3, #3
 8107c94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8107c96:	4b9f      	ldr	r3, [pc, #636]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c9a:	0b1b      	lsrs	r3, r3, #12
 8107c9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107ca0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8107ca2:	4b9c      	ldr	r3, [pc, #624]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107ca6:	091b      	lsrs	r3, r3, #4
 8107ca8:	f003 0301 	and.w	r3, r3, #1
 8107cac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8107cae:	4b99      	ldr	r3, [pc, #612]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107cb2:	08db      	lsrs	r3, r3, #3
 8107cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107cb8:	693a      	ldr	r2, [r7, #16]
 8107cba:	fb02 f303 	mul.w	r3, r2, r3
 8107cbe:	ee07 3a90 	vmov	s15, r3
 8107cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107cc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8107cca:	697b      	ldr	r3, [r7, #20]
 8107ccc:	2b00      	cmp	r3, #0
 8107cce:	f000 8111 	beq.w	8107ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8107cd2:	69bb      	ldr	r3, [r7, #24]
 8107cd4:	2b02      	cmp	r3, #2
 8107cd6:	f000 8083 	beq.w	8107de0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8107cda:	69bb      	ldr	r3, [r7, #24]
 8107cdc:	2b02      	cmp	r3, #2
 8107cde:	f200 80a1 	bhi.w	8107e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8107ce2:	69bb      	ldr	r3, [r7, #24]
 8107ce4:	2b00      	cmp	r3, #0
 8107ce6:	d003      	beq.n	8107cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107ce8:	69bb      	ldr	r3, [r7, #24]
 8107cea:	2b01      	cmp	r3, #1
 8107cec:	d056      	beq.n	8107d9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107cee:	e099      	b.n	8107e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107cf0:	4b88      	ldr	r3, [pc, #544]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107cf2:	681b      	ldr	r3, [r3, #0]
 8107cf4:	f003 0320 	and.w	r3, r3, #32
 8107cf8:	2b00      	cmp	r3, #0
 8107cfa:	d02d      	beq.n	8107d58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107cfc:	4b85      	ldr	r3, [pc, #532]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107cfe:	681b      	ldr	r3, [r3, #0]
 8107d00:	08db      	lsrs	r3, r3, #3
 8107d02:	f003 0303 	and.w	r3, r3, #3
 8107d06:	4a84      	ldr	r2, [pc, #528]	@ (8107f18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107d08:	fa22 f303 	lsr.w	r3, r2, r3
 8107d0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107d0e:	68bb      	ldr	r3, [r7, #8]
 8107d10:	ee07 3a90 	vmov	s15, r3
 8107d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d18:	697b      	ldr	r3, [r7, #20]
 8107d1a:	ee07 3a90 	vmov	s15, r3
 8107d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d26:	4b7b      	ldr	r3, [pc, #492]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d2e:	ee07 3a90 	vmov	s15, r3
 8107d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8107f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107d56:	e087      	b.n	8107e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107d58:	697b      	ldr	r3, [r7, #20]
 8107d5a:	ee07 3a90 	vmov	s15, r3
 8107d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8107f20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d72:	ee07 3a90 	vmov	s15, r3
 8107d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8107f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107d9a:	e065      	b.n	8107e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107d9c:	697b      	ldr	r3, [r7, #20]
 8107d9e:	ee07 3a90 	vmov	s15, r3
 8107da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107da6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8107f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107dae:	4b59      	ldr	r3, [pc, #356]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107db6:	ee07 3a90 	vmov	s15, r3
 8107dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8107dc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8107f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107dde:	e043      	b.n	8107e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107de0:	697b      	ldr	r3, [r7, #20]
 8107de2:	ee07 3a90 	vmov	s15, r3
 8107de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107dea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107df2:	4b48      	ldr	r3, [pc, #288]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107dfa:	ee07 3a90 	vmov	s15, r3
 8107dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8107e06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8107f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107e22:	e021      	b.n	8107e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107e24:	697b      	ldr	r3, [r7, #20]
 8107e26:	ee07 3a90 	vmov	s15, r3
 8107e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8107f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107e36:	4b37      	ldr	r3, [pc, #220]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107e3e:	ee07 3a90 	vmov	s15, r3
 8107e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8107e4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8107f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107e66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107e68:	4b2a      	ldr	r3, [pc, #168]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e6c:	0a5b      	lsrs	r3, r3, #9
 8107e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107e72:	ee07 3a90 	vmov	s15, r3
 8107e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e8e:	ee17 2a90 	vmov	r2, s15
 8107e92:	687b      	ldr	r3, [r7, #4]
 8107e94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8107e96:	4b1f      	ldr	r3, [pc, #124]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e9a:	0c1b      	lsrs	r3, r3, #16
 8107e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107ea0:	ee07 3a90 	vmov	s15, r3
 8107ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ea8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107eac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8107eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107ebc:	ee17 2a90 	vmov	r2, s15
 8107ec0:	687b      	ldr	r3, [r7, #4]
 8107ec2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8107ec4:	4b13      	ldr	r3, [pc, #76]	@ (8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107ec8:	0e1b      	lsrs	r3, r3, #24
 8107eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107ece:	ee07 3a90 	vmov	s15, r3
 8107ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8107ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107eea:	ee17 2a90 	vmov	r2, s15
 8107eee:	687b      	ldr	r3, [r7, #4]
 8107ef0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107ef2:	e008      	b.n	8107f06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107ef4:	687b      	ldr	r3, [r7, #4]
 8107ef6:	2200      	movs	r2, #0
 8107ef8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107efa:	687b      	ldr	r3, [r7, #4]
 8107efc:	2200      	movs	r2, #0
 8107efe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107f00:	687b      	ldr	r3, [r7, #4]
 8107f02:	2200      	movs	r2, #0
 8107f04:	609a      	str	r2, [r3, #8]
}
 8107f06:	bf00      	nop
 8107f08:	3724      	adds	r7, #36	@ 0x24
 8107f0a:	46bd      	mov	sp, r7
 8107f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f10:	4770      	bx	lr
 8107f12:	bf00      	nop
 8107f14:	58024400 	.word	0x58024400
 8107f18:	03d09000 	.word	0x03d09000
 8107f1c:	46000000 	.word	0x46000000
 8107f20:	4c742400 	.word	0x4c742400
 8107f24:	4a742400 	.word	0x4a742400
 8107f28:	4bbebc20 	.word	0x4bbebc20

08107f2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8107f2c:	b480      	push	{r7}
 8107f2e:	b089      	sub	sp, #36	@ 0x24
 8107f30:	af00      	add	r7, sp, #0
 8107f32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107f34:	4ba1      	ldr	r3, [pc, #644]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107f38:	f003 0303 	and.w	r3, r3, #3
 8107f3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8107f3e:	4b9f      	ldr	r3, [pc, #636]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107f42:	0d1b      	lsrs	r3, r3, #20
 8107f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107f48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107f4a:	4b9c      	ldr	r3, [pc, #624]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107f4e:	0a1b      	lsrs	r3, r3, #8
 8107f50:	f003 0301 	and.w	r3, r3, #1
 8107f54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8107f56:	4b99      	ldr	r3, [pc, #612]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107f5a:	08db      	lsrs	r3, r3, #3
 8107f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107f60:	693a      	ldr	r2, [r7, #16]
 8107f62:	fb02 f303 	mul.w	r3, r2, r3
 8107f66:	ee07 3a90 	vmov	s15, r3
 8107f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107f72:	697b      	ldr	r3, [r7, #20]
 8107f74:	2b00      	cmp	r3, #0
 8107f76:	f000 8111 	beq.w	810819c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107f7a:	69bb      	ldr	r3, [r7, #24]
 8107f7c:	2b02      	cmp	r3, #2
 8107f7e:	f000 8083 	beq.w	8108088 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8107f82:	69bb      	ldr	r3, [r7, #24]
 8107f84:	2b02      	cmp	r3, #2
 8107f86:	f200 80a1 	bhi.w	81080cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107f8a:	69bb      	ldr	r3, [r7, #24]
 8107f8c:	2b00      	cmp	r3, #0
 8107f8e:	d003      	beq.n	8107f98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107f90:	69bb      	ldr	r3, [r7, #24]
 8107f92:	2b01      	cmp	r3, #1
 8107f94:	d056      	beq.n	8108044 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107f96:	e099      	b.n	81080cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107f98:	4b88      	ldr	r3, [pc, #544]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107f9a:	681b      	ldr	r3, [r3, #0]
 8107f9c:	f003 0320 	and.w	r3, r3, #32
 8107fa0:	2b00      	cmp	r3, #0
 8107fa2:	d02d      	beq.n	8108000 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107fa4:	4b85      	ldr	r3, [pc, #532]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107fa6:	681b      	ldr	r3, [r3, #0]
 8107fa8:	08db      	lsrs	r3, r3, #3
 8107faa:	f003 0303 	and.w	r3, r3, #3
 8107fae:	4a84      	ldr	r2, [pc, #528]	@ (81081c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8107fb4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107fb6:	68bb      	ldr	r3, [r7, #8]
 8107fb8:	ee07 3a90 	vmov	s15, r3
 8107fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107fc0:	697b      	ldr	r3, [r7, #20]
 8107fc2:	ee07 3a90 	vmov	s15, r3
 8107fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107fce:	4b7b      	ldr	r3, [pc, #492]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107fd6:	ee07 3a90 	vmov	s15, r3
 8107fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8107fe2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107ffe:	e087      	b.n	8108110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108000:	697b      	ldr	r3, [r7, #20]
 8108002:	ee07 3a90 	vmov	s15, r3
 8108006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810800a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81081c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810800e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108012:	4b6a      	ldr	r3, [pc, #424]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810801a:	ee07 3a90 	vmov	s15, r3
 810801e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108022:	ed97 6a03 	vldr	s12, [r7, #12]
 8108026:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810802a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810802e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810803a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810803e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108042:	e065      	b.n	8108110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108044:	697b      	ldr	r3, [r7, #20]
 8108046:	ee07 3a90 	vmov	s15, r3
 810804a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810804e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81081cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108056:	4b59      	ldr	r3, [pc, #356]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810805e:	ee07 3a90 	vmov	s15, r3
 8108062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108066:	ed97 6a03 	vldr	s12, [r7, #12]
 810806a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810806e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810807e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108086:	e043      	b.n	8108110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108088:	697b      	ldr	r3, [r7, #20]
 810808a:	ee07 3a90 	vmov	s15, r3
 810808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108092:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8108096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810809a:	4b48      	ldr	r3, [pc, #288]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810809c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810809e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81080a2:	ee07 3a90 	vmov	s15, r3
 81080a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81080aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81080ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81080b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81080b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81080be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81080c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81080ca:	e021      	b.n	8108110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81080cc:	697b      	ldr	r3, [r7, #20]
 81080ce:	ee07 3a90 	vmov	s15, r3
 81080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81081cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81080da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81080de:	4b37      	ldr	r3, [pc, #220]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81080e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81080e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81080e6:	ee07 3a90 	vmov	s15, r3
 81080ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81080ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81080f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81080f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81080fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108106:	ee67 7a27 	vmul.f32	s15, s14, s15
 810810a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810810e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8108110:	4b2a      	ldr	r3, [pc, #168]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108114:	0a5b      	lsrs	r3, r3, #9
 8108116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810811a:	ee07 3a90 	vmov	s15, r3
 810811e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108122:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108126:	ee37 7a87 	vadd.f32	s14, s15, s14
 810812a:	edd7 6a07 	vldr	s13, [r7, #28]
 810812e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108136:	ee17 2a90 	vmov	r2, s15
 810813a:	687b      	ldr	r3, [r7, #4]
 810813c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810813e:	4b1f      	ldr	r3, [pc, #124]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108142:	0c1b      	lsrs	r3, r3, #16
 8108144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108148:	ee07 3a90 	vmov	s15, r3
 810814c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108150:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108158:	edd7 6a07 	vldr	s13, [r7, #28]
 810815c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108164:	ee17 2a90 	vmov	r2, s15
 8108168:	687b      	ldr	r3, [r7, #4]
 810816a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810816c:	4b13      	ldr	r3, [pc, #76]	@ (81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810816e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108170:	0e1b      	lsrs	r3, r3, #24
 8108172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108176:	ee07 3a90 	vmov	s15, r3
 810817a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810817e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108186:	edd7 6a07 	vldr	s13, [r7, #28]
 810818a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810818e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108192:	ee17 2a90 	vmov	r2, s15
 8108196:	687b      	ldr	r3, [r7, #4]
 8108198:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810819a:	e008      	b.n	81081ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810819c:	687b      	ldr	r3, [r7, #4]
 810819e:	2200      	movs	r2, #0
 81081a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81081a2:	687b      	ldr	r3, [r7, #4]
 81081a4:	2200      	movs	r2, #0
 81081a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81081a8:	687b      	ldr	r3, [r7, #4]
 81081aa:	2200      	movs	r2, #0
 81081ac:	609a      	str	r2, [r3, #8]
}
 81081ae:	bf00      	nop
 81081b0:	3724      	adds	r7, #36	@ 0x24
 81081b2:	46bd      	mov	sp, r7
 81081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081b8:	4770      	bx	lr
 81081ba:	bf00      	nop
 81081bc:	58024400 	.word	0x58024400
 81081c0:	03d09000 	.word	0x03d09000
 81081c4:	46000000 	.word	0x46000000
 81081c8:	4c742400 	.word	0x4c742400
 81081cc:	4a742400 	.word	0x4a742400
 81081d0:	4bbebc20 	.word	0x4bbebc20

081081d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 81081d4:	b480      	push	{r7}
 81081d6:	b089      	sub	sp, #36	@ 0x24
 81081d8:	af00      	add	r7, sp, #0
 81081da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81081dc:	4ba0      	ldr	r3, [pc, #640]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81081de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81081e0:	f003 0303 	and.w	r3, r3, #3
 81081e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 81081e6:	4b9e      	ldr	r3, [pc, #632]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81081e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81081ea:	091b      	lsrs	r3, r3, #4
 81081ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81081f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81081f2:	4b9b      	ldr	r3, [pc, #620]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81081f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81081f6:	f003 0301 	and.w	r3, r3, #1
 81081fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81081fc:	4b98      	ldr	r3, [pc, #608]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81081fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108200:	08db      	lsrs	r3, r3, #3
 8108202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108206:	693a      	ldr	r2, [r7, #16]
 8108208:	fb02 f303 	mul.w	r3, r2, r3
 810820c:	ee07 3a90 	vmov	s15, r3
 8108210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108214:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8108218:	697b      	ldr	r3, [r7, #20]
 810821a:	2b00      	cmp	r3, #0
 810821c:	f000 8111 	beq.w	8108442 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8108220:	69bb      	ldr	r3, [r7, #24]
 8108222:	2b02      	cmp	r3, #2
 8108224:	f000 8083 	beq.w	810832e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8108228:	69bb      	ldr	r3, [r7, #24]
 810822a:	2b02      	cmp	r3, #2
 810822c:	f200 80a1 	bhi.w	8108372 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8108230:	69bb      	ldr	r3, [r7, #24]
 8108232:	2b00      	cmp	r3, #0
 8108234:	d003      	beq.n	810823e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8108236:	69bb      	ldr	r3, [r7, #24]
 8108238:	2b01      	cmp	r3, #1
 810823a:	d056      	beq.n	81082ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810823c:	e099      	b.n	8108372 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810823e:	4b88      	ldr	r3, [pc, #544]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108240:	681b      	ldr	r3, [r3, #0]
 8108242:	f003 0320 	and.w	r3, r3, #32
 8108246:	2b00      	cmp	r3, #0
 8108248:	d02d      	beq.n	81082a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810824a:	4b85      	ldr	r3, [pc, #532]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810824c:	681b      	ldr	r3, [r3, #0]
 810824e:	08db      	lsrs	r3, r3, #3
 8108250:	f003 0303 	and.w	r3, r3, #3
 8108254:	4a83      	ldr	r2, [pc, #524]	@ (8108464 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8108256:	fa22 f303 	lsr.w	r3, r2, r3
 810825a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810825c:	68bb      	ldr	r3, [r7, #8]
 810825e:	ee07 3a90 	vmov	s15, r3
 8108262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108266:	697b      	ldr	r3, [r7, #20]
 8108268:	ee07 3a90 	vmov	s15, r3
 810826c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108274:	4b7a      	ldr	r3, [pc, #488]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810827c:	ee07 3a90 	vmov	s15, r3
 8108280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108284:	ed97 6a03 	vldr	s12, [r7, #12]
 8108288:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8108468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810828c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108294:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810829c:	ee67 7a27 	vmul.f32	s15, s14, s15
 81082a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81082a4:	e087      	b.n	81083b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81082a6:	697b      	ldr	r3, [r7, #20]
 81082a8:	ee07 3a90 	vmov	s15, r3
 81082ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81082b0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810846c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81082b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81082b8:	4b69      	ldr	r3, [pc, #420]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81082ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81082bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81082c0:	ee07 3a90 	vmov	s15, r3
 81082c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81082c8:	ed97 6a03 	vldr	s12, [r7, #12]
 81082cc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8108468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81082d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81082d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81082d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81082dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81082e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81082e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81082e8:	e065      	b.n	81083b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81082ea:	697b      	ldr	r3, [r7, #20]
 81082ec:	ee07 3a90 	vmov	s15, r3
 81082f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81082f4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8108470 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 81082f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81082fc:	4b58      	ldr	r3, [pc, #352]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81082fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108304:	ee07 3a90 	vmov	s15, r3
 8108308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810830c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108310:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8108468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810831c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108328:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810832c:	e043      	b.n	81083b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810832e:	697b      	ldr	r3, [r7, #20]
 8108330:	ee07 3a90 	vmov	s15, r3
 8108334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108338:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8108474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810833c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108340:	4b47      	ldr	r3, [pc, #284]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108348:	ee07 3a90 	vmov	s15, r3
 810834c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108350:	ed97 6a03 	vldr	s12, [r7, #12]
 8108354:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8108468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108358:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810835c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108360:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108368:	ee67 7a27 	vmul.f32	s15, s14, s15
 810836c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108370:	e021      	b.n	81083b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108372:	697b      	ldr	r3, [r7, #20]
 8108374:	ee07 3a90 	vmov	s15, r3
 8108378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810837c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810846c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108384:	4b36      	ldr	r3, [pc, #216]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810838c:	ee07 3a90 	vmov	s15, r3
 8108390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108394:	ed97 6a03 	vldr	s12, [r7, #12]
 8108398:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8108468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810839c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81083a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81083a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81083a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81083ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 81083b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81083b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81083b6:	4b2a      	ldr	r3, [pc, #168]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81083b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81083ba:	0a5b      	lsrs	r3, r3, #9
 81083bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81083c0:	ee07 3a90 	vmov	s15, r3
 81083c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81083c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81083cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81083d0:	edd7 6a07 	vldr	s13, [r7, #28]
 81083d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81083d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81083dc:	ee17 2a90 	vmov	r2, s15
 81083e0:	687b      	ldr	r3, [r7, #4]
 81083e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 81083e4:	4b1e      	ldr	r3, [pc, #120]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81083e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81083e8:	0c1b      	lsrs	r3, r3, #16
 81083ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81083ee:	ee07 3a90 	vmov	s15, r3
 81083f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81083f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81083fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 81083fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8108402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810840a:	ee17 2a90 	vmov	r2, s15
 810840e:	687b      	ldr	r3, [r7, #4]
 8108410:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8108412:	4b13      	ldr	r3, [pc, #76]	@ (8108460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108416:	0e1b      	lsrs	r3, r3, #24
 8108418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810841c:	ee07 3a90 	vmov	s15, r3
 8108420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108424:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108428:	ee37 7a87 	vadd.f32	s14, s15, s14
 810842c:	edd7 6a07 	vldr	s13, [r7, #28]
 8108430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108438:	ee17 2a90 	vmov	r2, s15
 810843c:	687b      	ldr	r3, [r7, #4]
 810843e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8108440:	e008      	b.n	8108454 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8108442:	687b      	ldr	r3, [r7, #4]
 8108444:	2200      	movs	r2, #0
 8108446:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108448:	687b      	ldr	r3, [r7, #4]
 810844a:	2200      	movs	r2, #0
 810844c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810844e:	687b      	ldr	r3, [r7, #4]
 8108450:	2200      	movs	r2, #0
 8108452:	609a      	str	r2, [r3, #8]
}
 8108454:	bf00      	nop
 8108456:	3724      	adds	r7, #36	@ 0x24
 8108458:	46bd      	mov	sp, r7
 810845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810845e:	4770      	bx	lr
 8108460:	58024400 	.word	0x58024400
 8108464:	03d09000 	.word	0x03d09000
 8108468:	46000000 	.word	0x46000000
 810846c:	4c742400 	.word	0x4c742400
 8108470:	4a742400 	.word	0x4a742400
 8108474:	4bbebc20 	.word	0x4bbebc20

08108478 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108478:	b580      	push	{r7, lr}
 810847a:	b084      	sub	sp, #16
 810847c:	af00      	add	r7, sp, #0
 810847e:	6078      	str	r0, [r7, #4]
 8108480:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108482:	2300      	movs	r3, #0
 8108484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108486:	4b54      	ldr	r3, [pc, #336]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810848a:	f003 0303 	and.w	r3, r3, #3
 810848e:	2b03      	cmp	r3, #3
 8108490:	d101      	bne.n	8108496 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8108492:	2301      	movs	r3, #1
 8108494:	e09b      	b.n	81085ce <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8108496:	4b50      	ldr	r3, [pc, #320]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108498:	681b      	ldr	r3, [r3, #0]
 810849a:	4a4f      	ldr	r2, [pc, #316]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 810849c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81084a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81084a2:	f7fa fa7f 	bl	81029a4 <HAL_GetTick>
 81084a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81084a8:	e008      	b.n	81084bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81084aa:	f7fa fa7b 	bl	81029a4 <HAL_GetTick>
 81084ae:	4602      	mov	r2, r0
 81084b0:	68bb      	ldr	r3, [r7, #8]
 81084b2:	1ad3      	subs	r3, r2, r3
 81084b4:	2b02      	cmp	r3, #2
 81084b6:	d901      	bls.n	81084bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81084b8:	2303      	movs	r3, #3
 81084ba:	e088      	b.n	81085ce <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81084bc:	4b46      	ldr	r3, [pc, #280]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 81084be:	681b      	ldr	r3, [r3, #0]
 81084c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81084c4:	2b00      	cmp	r3, #0
 81084c6:	d1f0      	bne.n	81084aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81084c8:	4b43      	ldr	r3, [pc, #268]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 81084ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81084cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81084d0:	687b      	ldr	r3, [r7, #4]
 81084d2:	681b      	ldr	r3, [r3, #0]
 81084d4:	031b      	lsls	r3, r3, #12
 81084d6:	4940      	ldr	r1, [pc, #256]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 81084d8:	4313      	orrs	r3, r2
 81084da:	628b      	str	r3, [r1, #40]	@ 0x28
 81084dc:	687b      	ldr	r3, [r7, #4]
 81084de:	685b      	ldr	r3, [r3, #4]
 81084e0:	3b01      	subs	r3, #1
 81084e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81084e6:	687b      	ldr	r3, [r7, #4]
 81084e8:	689b      	ldr	r3, [r3, #8]
 81084ea:	3b01      	subs	r3, #1
 81084ec:	025b      	lsls	r3, r3, #9
 81084ee:	b29b      	uxth	r3, r3
 81084f0:	431a      	orrs	r2, r3
 81084f2:	687b      	ldr	r3, [r7, #4]
 81084f4:	68db      	ldr	r3, [r3, #12]
 81084f6:	3b01      	subs	r3, #1
 81084f8:	041b      	lsls	r3, r3, #16
 81084fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81084fe:	431a      	orrs	r2, r3
 8108500:	687b      	ldr	r3, [r7, #4]
 8108502:	691b      	ldr	r3, [r3, #16]
 8108504:	3b01      	subs	r3, #1
 8108506:	061b      	lsls	r3, r3, #24
 8108508:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810850c:	4932      	ldr	r1, [pc, #200]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 810850e:	4313      	orrs	r3, r2
 8108510:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108512:	4b31      	ldr	r3, [pc, #196]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108516:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810851a:	687b      	ldr	r3, [r7, #4]
 810851c:	695b      	ldr	r3, [r3, #20]
 810851e:	492e      	ldr	r1, [pc, #184]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108520:	4313      	orrs	r3, r2
 8108522:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108524:	4b2c      	ldr	r3, [pc, #176]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108528:	f023 0220 	bic.w	r2, r3, #32
 810852c:	687b      	ldr	r3, [r7, #4]
 810852e:	699b      	ldr	r3, [r3, #24]
 8108530:	4929      	ldr	r1, [pc, #164]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108532:	4313      	orrs	r3, r2
 8108534:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108536:	4b28      	ldr	r3, [pc, #160]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810853a:	4a27      	ldr	r2, [pc, #156]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 810853c:	f023 0310 	bic.w	r3, r3, #16
 8108540:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108542:	4b25      	ldr	r3, [pc, #148]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810854a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810854e:	687a      	ldr	r2, [r7, #4]
 8108550:	69d2      	ldr	r2, [r2, #28]
 8108552:	00d2      	lsls	r2, r2, #3
 8108554:	4920      	ldr	r1, [pc, #128]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108556:	4313      	orrs	r3, r2
 8108558:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810855a:	4b1f      	ldr	r3, [pc, #124]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 810855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810855e:	4a1e      	ldr	r2, [pc, #120]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108560:	f043 0310 	orr.w	r3, r3, #16
 8108564:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108566:	683b      	ldr	r3, [r7, #0]
 8108568:	2b00      	cmp	r3, #0
 810856a:	d106      	bne.n	810857a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810856c:	4b1a      	ldr	r3, [pc, #104]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 810856e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108570:	4a19      	ldr	r2, [pc, #100]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108572:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108576:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108578:	e00f      	b.n	810859a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810857a:	683b      	ldr	r3, [r7, #0]
 810857c:	2b01      	cmp	r3, #1
 810857e:	d106      	bne.n	810858e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8108580:	4b15      	ldr	r3, [pc, #84]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108584:	4a14      	ldr	r2, [pc, #80]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810858a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810858c:	e005      	b.n	810859a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810858e:	4b12      	ldr	r3, [pc, #72]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108592:	4a11      	ldr	r2, [pc, #68]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 8108594:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108598:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810859a:	4b0f      	ldr	r3, [pc, #60]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 810859c:	681b      	ldr	r3, [r3, #0]
 810859e:	4a0e      	ldr	r2, [pc, #56]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 81085a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81085a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81085a6:	f7fa f9fd 	bl	81029a4 <HAL_GetTick>
 81085aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81085ac:	e008      	b.n	81085c0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81085ae:	f7fa f9f9 	bl	81029a4 <HAL_GetTick>
 81085b2:	4602      	mov	r2, r0
 81085b4:	68bb      	ldr	r3, [r7, #8]
 81085b6:	1ad3      	subs	r3, r2, r3
 81085b8:	2b02      	cmp	r3, #2
 81085ba:	d901      	bls.n	81085c0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81085bc:	2303      	movs	r3, #3
 81085be:	e006      	b.n	81085ce <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81085c0:	4b05      	ldr	r3, [pc, #20]	@ (81085d8 <RCCEx_PLL2_Config+0x160>)
 81085c2:	681b      	ldr	r3, [r3, #0]
 81085c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81085c8:	2b00      	cmp	r3, #0
 81085ca:	d0f0      	beq.n	81085ae <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 81085ce:	4618      	mov	r0, r3
 81085d0:	3710      	adds	r7, #16
 81085d2:	46bd      	mov	sp, r7
 81085d4:	bd80      	pop	{r7, pc}
 81085d6:	bf00      	nop
 81085d8:	58024400 	.word	0x58024400

081085dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81085dc:	b580      	push	{r7, lr}
 81085de:	b084      	sub	sp, #16
 81085e0:	af00      	add	r7, sp, #0
 81085e2:	6078      	str	r0, [r7, #4]
 81085e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81085e6:	2300      	movs	r3, #0
 81085e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81085ea:	4b54      	ldr	r3, [pc, #336]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81085ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81085ee:	f003 0303 	and.w	r3, r3, #3
 81085f2:	2b03      	cmp	r3, #3
 81085f4:	d101      	bne.n	81085fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81085f6:	2301      	movs	r3, #1
 81085f8:	e09b      	b.n	8108732 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81085fa:	4b50      	ldr	r3, [pc, #320]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81085fc:	681b      	ldr	r3, [r3, #0]
 81085fe:	4a4f      	ldr	r2, [pc, #316]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 8108600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108606:	f7fa f9cd 	bl	81029a4 <HAL_GetTick>
 810860a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810860c:	e008      	b.n	8108620 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810860e:	f7fa f9c9 	bl	81029a4 <HAL_GetTick>
 8108612:	4602      	mov	r2, r0
 8108614:	68bb      	ldr	r3, [r7, #8]
 8108616:	1ad3      	subs	r3, r2, r3
 8108618:	2b02      	cmp	r3, #2
 810861a:	d901      	bls.n	8108620 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810861c:	2303      	movs	r3, #3
 810861e:	e088      	b.n	8108732 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108620:	4b46      	ldr	r3, [pc, #280]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 8108622:	681b      	ldr	r3, [r3, #0]
 8108624:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108628:	2b00      	cmp	r3, #0
 810862a:	d1f0      	bne.n	810860e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810862c:	4b43      	ldr	r3, [pc, #268]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 810862e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108630:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108634:	687b      	ldr	r3, [r7, #4]
 8108636:	681b      	ldr	r3, [r3, #0]
 8108638:	051b      	lsls	r3, r3, #20
 810863a:	4940      	ldr	r1, [pc, #256]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 810863c:	4313      	orrs	r3, r2
 810863e:	628b      	str	r3, [r1, #40]	@ 0x28
 8108640:	687b      	ldr	r3, [r7, #4]
 8108642:	685b      	ldr	r3, [r3, #4]
 8108644:	3b01      	subs	r3, #1
 8108646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810864a:	687b      	ldr	r3, [r7, #4]
 810864c:	689b      	ldr	r3, [r3, #8]
 810864e:	3b01      	subs	r3, #1
 8108650:	025b      	lsls	r3, r3, #9
 8108652:	b29b      	uxth	r3, r3
 8108654:	431a      	orrs	r2, r3
 8108656:	687b      	ldr	r3, [r7, #4]
 8108658:	68db      	ldr	r3, [r3, #12]
 810865a:	3b01      	subs	r3, #1
 810865c:	041b      	lsls	r3, r3, #16
 810865e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108662:	431a      	orrs	r2, r3
 8108664:	687b      	ldr	r3, [r7, #4]
 8108666:	691b      	ldr	r3, [r3, #16]
 8108668:	3b01      	subs	r3, #1
 810866a:	061b      	lsls	r3, r3, #24
 810866c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108670:	4932      	ldr	r1, [pc, #200]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 8108672:	4313      	orrs	r3, r2
 8108674:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108676:	4b31      	ldr	r3, [pc, #196]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 8108678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810867a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810867e:	687b      	ldr	r3, [r7, #4]
 8108680:	695b      	ldr	r3, [r3, #20]
 8108682:	492e      	ldr	r1, [pc, #184]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 8108684:	4313      	orrs	r3, r2
 8108686:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108688:	4b2c      	ldr	r3, [pc, #176]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 810868a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810868c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8108690:	687b      	ldr	r3, [r7, #4]
 8108692:	699b      	ldr	r3, [r3, #24]
 8108694:	4929      	ldr	r1, [pc, #164]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 8108696:	4313      	orrs	r3, r2
 8108698:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810869a:	4b28      	ldr	r3, [pc, #160]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 810869c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810869e:	4a27      	ldr	r2, [pc, #156]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81086a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81086a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81086a6:	4b25      	ldr	r3, [pc, #148]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81086a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81086aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81086ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81086b2:	687a      	ldr	r2, [r7, #4]
 81086b4:	69d2      	ldr	r2, [r2, #28]
 81086b6:	00d2      	lsls	r2, r2, #3
 81086b8:	4920      	ldr	r1, [pc, #128]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81086ba:	4313      	orrs	r3, r2
 81086bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81086be:	4b1f      	ldr	r3, [pc, #124]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81086c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81086c2:	4a1e      	ldr	r2, [pc, #120]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81086c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81086c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81086ca:	683b      	ldr	r3, [r7, #0]
 81086cc:	2b00      	cmp	r3, #0
 81086ce:	d106      	bne.n	81086de <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81086d0:	4b1a      	ldr	r3, [pc, #104]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81086d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81086d4:	4a19      	ldr	r2, [pc, #100]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81086d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81086da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81086dc:	e00f      	b.n	81086fe <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81086de:	683b      	ldr	r3, [r7, #0]
 81086e0:	2b01      	cmp	r3, #1
 81086e2:	d106      	bne.n	81086f2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81086e4:	4b15      	ldr	r3, [pc, #84]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81086e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81086e8:	4a14      	ldr	r2, [pc, #80]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81086ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81086ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81086f0:	e005      	b.n	81086fe <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81086f2:	4b12      	ldr	r3, [pc, #72]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81086f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81086f6:	4a11      	ldr	r2, [pc, #68]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 81086f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81086fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81086fe:	4b0f      	ldr	r3, [pc, #60]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 8108700:	681b      	ldr	r3, [r3, #0]
 8108702:	4a0e      	ldr	r2, [pc, #56]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 8108704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8108708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810870a:	f7fa f94b 	bl	81029a4 <HAL_GetTick>
 810870e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108710:	e008      	b.n	8108724 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108712:	f7fa f947 	bl	81029a4 <HAL_GetTick>
 8108716:	4602      	mov	r2, r0
 8108718:	68bb      	ldr	r3, [r7, #8]
 810871a:	1ad3      	subs	r3, r2, r3
 810871c:	2b02      	cmp	r3, #2
 810871e:	d901      	bls.n	8108724 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108720:	2303      	movs	r3, #3
 8108722:	e006      	b.n	8108732 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108724:	4b05      	ldr	r3, [pc, #20]	@ (810873c <RCCEx_PLL3_Config+0x160>)
 8108726:	681b      	ldr	r3, [r3, #0]
 8108728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810872c:	2b00      	cmp	r3, #0
 810872e:	d0f0      	beq.n	8108712 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108730:	7bfb      	ldrb	r3, [r7, #15]
}
 8108732:	4618      	mov	r0, r3
 8108734:	3710      	adds	r7, #16
 8108736:	46bd      	mov	sp, r7
 8108738:	bd80      	pop	{r7, pc}
 810873a:	bf00      	nop
 810873c:	58024400 	.word	0x58024400

08108740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8108740:	b580      	push	{r7, lr}
 8108742:	b082      	sub	sp, #8
 8108744:	af00      	add	r7, sp, #0
 8108746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108748:	687b      	ldr	r3, [r7, #4]
 810874a:	2b00      	cmp	r3, #0
 810874c:	d101      	bne.n	8108752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810874e:	2301      	movs	r3, #1
 8108750:	e049      	b.n	81087e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108752:	687b      	ldr	r3, [r7, #4]
 8108754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8108758:	b2db      	uxtb	r3, r3
 810875a:	2b00      	cmp	r3, #0
 810875c:	d106      	bne.n	810876c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810875e:	687b      	ldr	r3, [r7, #4]
 8108760:	2200      	movs	r2, #0
 8108762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8108766:	6878      	ldr	r0, [r7, #4]
 8108768:	f000 f841 	bl	81087ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810876c:	687b      	ldr	r3, [r7, #4]
 810876e:	2202      	movs	r2, #2
 8108770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108774:	687b      	ldr	r3, [r7, #4]
 8108776:	681a      	ldr	r2, [r3, #0]
 8108778:	687b      	ldr	r3, [r7, #4]
 810877a:	3304      	adds	r3, #4
 810877c:	4619      	mov	r1, r3
 810877e:	4610      	mov	r0, r2
 8108780:	f000 f9e8 	bl	8108b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8108784:	687b      	ldr	r3, [r7, #4]
 8108786:	2201      	movs	r2, #1
 8108788:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810878c:	687b      	ldr	r3, [r7, #4]
 810878e:	2201      	movs	r2, #1
 8108790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8108794:	687b      	ldr	r3, [r7, #4]
 8108796:	2201      	movs	r2, #1
 8108798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810879c:	687b      	ldr	r3, [r7, #4]
 810879e:	2201      	movs	r2, #1
 81087a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81087a4:	687b      	ldr	r3, [r7, #4]
 81087a6:	2201      	movs	r2, #1
 81087a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81087ac:	687b      	ldr	r3, [r7, #4]
 81087ae:	2201      	movs	r2, #1
 81087b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81087b4:	687b      	ldr	r3, [r7, #4]
 81087b6:	2201      	movs	r2, #1
 81087b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81087bc:	687b      	ldr	r3, [r7, #4]
 81087be:	2201      	movs	r2, #1
 81087c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81087c4:	687b      	ldr	r3, [r7, #4]
 81087c6:	2201      	movs	r2, #1
 81087c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81087cc:	687b      	ldr	r3, [r7, #4]
 81087ce:	2201      	movs	r2, #1
 81087d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81087d4:	687b      	ldr	r3, [r7, #4]
 81087d6:	2201      	movs	r2, #1
 81087d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81087dc:	687b      	ldr	r3, [r7, #4]
 81087de:	2201      	movs	r2, #1
 81087e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81087e4:	2300      	movs	r3, #0
}
 81087e6:	4618      	mov	r0, r3
 81087e8:	3708      	adds	r7, #8
 81087ea:	46bd      	mov	sp, r7
 81087ec:	bd80      	pop	{r7, pc}

081087ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81087ee:	b480      	push	{r7}
 81087f0:	b083      	sub	sp, #12
 81087f2:	af00      	add	r7, sp, #0
 81087f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81087f6:	bf00      	nop
 81087f8:	370c      	adds	r7, #12
 81087fa:	46bd      	mov	sp, r7
 81087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108800:	4770      	bx	lr
	...

08108804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8108804:	b480      	push	{r7}
 8108806:	b085      	sub	sp, #20
 8108808:	af00      	add	r7, sp, #0
 810880a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810880c:	687b      	ldr	r3, [r7, #4]
 810880e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8108812:	b2db      	uxtb	r3, r3
 8108814:	2b01      	cmp	r3, #1
 8108816:	d001      	beq.n	810881c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8108818:	2301      	movs	r3, #1
 810881a:	e054      	b.n	81088c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810881c:	687b      	ldr	r3, [r7, #4]
 810881e:	2202      	movs	r2, #2
 8108820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8108824:	687b      	ldr	r3, [r7, #4]
 8108826:	681b      	ldr	r3, [r3, #0]
 8108828:	68da      	ldr	r2, [r3, #12]
 810882a:	687b      	ldr	r3, [r7, #4]
 810882c:	681b      	ldr	r3, [r3, #0]
 810882e:	f042 0201 	orr.w	r2, r2, #1
 8108832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108834:	687b      	ldr	r3, [r7, #4]
 8108836:	681b      	ldr	r3, [r3, #0]
 8108838:	4a26      	ldr	r2, [pc, #152]	@ (81088d4 <HAL_TIM_Base_Start_IT+0xd0>)
 810883a:	4293      	cmp	r3, r2
 810883c:	d022      	beq.n	8108884 <HAL_TIM_Base_Start_IT+0x80>
 810883e:	687b      	ldr	r3, [r7, #4]
 8108840:	681b      	ldr	r3, [r3, #0]
 8108842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108846:	d01d      	beq.n	8108884 <HAL_TIM_Base_Start_IT+0x80>
 8108848:	687b      	ldr	r3, [r7, #4]
 810884a:	681b      	ldr	r3, [r3, #0]
 810884c:	4a22      	ldr	r2, [pc, #136]	@ (81088d8 <HAL_TIM_Base_Start_IT+0xd4>)
 810884e:	4293      	cmp	r3, r2
 8108850:	d018      	beq.n	8108884 <HAL_TIM_Base_Start_IT+0x80>
 8108852:	687b      	ldr	r3, [r7, #4]
 8108854:	681b      	ldr	r3, [r3, #0]
 8108856:	4a21      	ldr	r2, [pc, #132]	@ (81088dc <HAL_TIM_Base_Start_IT+0xd8>)
 8108858:	4293      	cmp	r3, r2
 810885a:	d013      	beq.n	8108884 <HAL_TIM_Base_Start_IT+0x80>
 810885c:	687b      	ldr	r3, [r7, #4]
 810885e:	681b      	ldr	r3, [r3, #0]
 8108860:	4a1f      	ldr	r2, [pc, #124]	@ (81088e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8108862:	4293      	cmp	r3, r2
 8108864:	d00e      	beq.n	8108884 <HAL_TIM_Base_Start_IT+0x80>
 8108866:	687b      	ldr	r3, [r7, #4]
 8108868:	681b      	ldr	r3, [r3, #0]
 810886a:	4a1e      	ldr	r2, [pc, #120]	@ (81088e4 <HAL_TIM_Base_Start_IT+0xe0>)
 810886c:	4293      	cmp	r3, r2
 810886e:	d009      	beq.n	8108884 <HAL_TIM_Base_Start_IT+0x80>
 8108870:	687b      	ldr	r3, [r7, #4]
 8108872:	681b      	ldr	r3, [r3, #0]
 8108874:	4a1c      	ldr	r2, [pc, #112]	@ (81088e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8108876:	4293      	cmp	r3, r2
 8108878:	d004      	beq.n	8108884 <HAL_TIM_Base_Start_IT+0x80>
 810887a:	687b      	ldr	r3, [r7, #4]
 810887c:	681b      	ldr	r3, [r3, #0]
 810887e:	4a1b      	ldr	r2, [pc, #108]	@ (81088ec <HAL_TIM_Base_Start_IT+0xe8>)
 8108880:	4293      	cmp	r3, r2
 8108882:	d115      	bne.n	81088b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8108884:	687b      	ldr	r3, [r7, #4]
 8108886:	681b      	ldr	r3, [r3, #0]
 8108888:	689a      	ldr	r2, [r3, #8]
 810888a:	4b19      	ldr	r3, [pc, #100]	@ (81088f0 <HAL_TIM_Base_Start_IT+0xec>)
 810888c:	4013      	ands	r3, r2
 810888e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108890:	68fb      	ldr	r3, [r7, #12]
 8108892:	2b06      	cmp	r3, #6
 8108894:	d015      	beq.n	81088c2 <HAL_TIM_Base_Start_IT+0xbe>
 8108896:	68fb      	ldr	r3, [r7, #12]
 8108898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810889c:	d011      	beq.n	81088c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810889e:	687b      	ldr	r3, [r7, #4]
 81088a0:	681b      	ldr	r3, [r3, #0]
 81088a2:	681a      	ldr	r2, [r3, #0]
 81088a4:	687b      	ldr	r3, [r7, #4]
 81088a6:	681b      	ldr	r3, [r3, #0]
 81088a8:	f042 0201 	orr.w	r2, r2, #1
 81088ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81088ae:	e008      	b.n	81088c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81088b0:	687b      	ldr	r3, [r7, #4]
 81088b2:	681b      	ldr	r3, [r3, #0]
 81088b4:	681a      	ldr	r2, [r3, #0]
 81088b6:	687b      	ldr	r3, [r7, #4]
 81088b8:	681b      	ldr	r3, [r3, #0]
 81088ba:	f042 0201 	orr.w	r2, r2, #1
 81088be:	601a      	str	r2, [r3, #0]
 81088c0:	e000      	b.n	81088c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81088c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81088c4:	2300      	movs	r3, #0
}
 81088c6:	4618      	mov	r0, r3
 81088c8:	3714      	adds	r7, #20
 81088ca:	46bd      	mov	sp, r7
 81088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088d0:	4770      	bx	lr
 81088d2:	bf00      	nop
 81088d4:	40010000 	.word	0x40010000
 81088d8:	40000400 	.word	0x40000400
 81088dc:	40000800 	.word	0x40000800
 81088e0:	40000c00 	.word	0x40000c00
 81088e4:	40010400 	.word	0x40010400
 81088e8:	40001800 	.word	0x40001800
 81088ec:	40014000 	.word	0x40014000
 81088f0:	00010007 	.word	0x00010007

081088f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81088f4:	b580      	push	{r7, lr}
 81088f6:	b084      	sub	sp, #16
 81088f8:	af00      	add	r7, sp, #0
 81088fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 81088fc:	687b      	ldr	r3, [r7, #4]
 81088fe:	681b      	ldr	r3, [r3, #0]
 8108900:	68db      	ldr	r3, [r3, #12]
 8108902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8108904:	687b      	ldr	r3, [r7, #4]
 8108906:	681b      	ldr	r3, [r3, #0]
 8108908:	691b      	ldr	r3, [r3, #16]
 810890a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810890c:	68bb      	ldr	r3, [r7, #8]
 810890e:	f003 0302 	and.w	r3, r3, #2
 8108912:	2b00      	cmp	r3, #0
 8108914:	d020      	beq.n	8108958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8108916:	68fb      	ldr	r3, [r7, #12]
 8108918:	f003 0302 	and.w	r3, r3, #2
 810891c:	2b00      	cmp	r3, #0
 810891e:	d01b      	beq.n	8108958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8108920:	687b      	ldr	r3, [r7, #4]
 8108922:	681b      	ldr	r3, [r3, #0]
 8108924:	f06f 0202 	mvn.w	r2, #2
 8108928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810892a:	687b      	ldr	r3, [r7, #4]
 810892c:	2201      	movs	r2, #1
 810892e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8108930:	687b      	ldr	r3, [r7, #4]
 8108932:	681b      	ldr	r3, [r3, #0]
 8108934:	699b      	ldr	r3, [r3, #24]
 8108936:	f003 0303 	and.w	r3, r3, #3
 810893a:	2b00      	cmp	r3, #0
 810893c:	d003      	beq.n	8108946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810893e:	6878      	ldr	r0, [r7, #4]
 8108940:	f000 f8e9 	bl	8108b16 <HAL_TIM_IC_CaptureCallback>
 8108944:	e005      	b.n	8108952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8108946:	6878      	ldr	r0, [r7, #4]
 8108948:	f000 f8db 	bl	8108b02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810894c:	6878      	ldr	r0, [r7, #4]
 810894e:	f000 f8ec 	bl	8108b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108952:	687b      	ldr	r3, [r7, #4]
 8108954:	2200      	movs	r2, #0
 8108956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8108958:	68bb      	ldr	r3, [r7, #8]
 810895a:	f003 0304 	and.w	r3, r3, #4
 810895e:	2b00      	cmp	r3, #0
 8108960:	d020      	beq.n	81089a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8108962:	68fb      	ldr	r3, [r7, #12]
 8108964:	f003 0304 	and.w	r3, r3, #4
 8108968:	2b00      	cmp	r3, #0
 810896a:	d01b      	beq.n	81089a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810896c:	687b      	ldr	r3, [r7, #4]
 810896e:	681b      	ldr	r3, [r3, #0]
 8108970:	f06f 0204 	mvn.w	r2, #4
 8108974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8108976:	687b      	ldr	r3, [r7, #4]
 8108978:	2202      	movs	r2, #2
 810897a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810897c:	687b      	ldr	r3, [r7, #4]
 810897e:	681b      	ldr	r3, [r3, #0]
 8108980:	699b      	ldr	r3, [r3, #24]
 8108982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8108986:	2b00      	cmp	r3, #0
 8108988:	d003      	beq.n	8108992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810898a:	6878      	ldr	r0, [r7, #4]
 810898c:	f000 f8c3 	bl	8108b16 <HAL_TIM_IC_CaptureCallback>
 8108990:	e005      	b.n	810899e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108992:	6878      	ldr	r0, [r7, #4]
 8108994:	f000 f8b5 	bl	8108b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108998:	6878      	ldr	r0, [r7, #4]
 810899a:	f000 f8c6 	bl	8108b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810899e:	687b      	ldr	r3, [r7, #4]
 81089a0:	2200      	movs	r2, #0
 81089a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 81089a4:	68bb      	ldr	r3, [r7, #8]
 81089a6:	f003 0308 	and.w	r3, r3, #8
 81089aa:	2b00      	cmp	r3, #0
 81089ac:	d020      	beq.n	81089f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 81089ae:	68fb      	ldr	r3, [r7, #12]
 81089b0:	f003 0308 	and.w	r3, r3, #8
 81089b4:	2b00      	cmp	r3, #0
 81089b6:	d01b      	beq.n	81089f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 81089b8:	687b      	ldr	r3, [r7, #4]
 81089ba:	681b      	ldr	r3, [r3, #0]
 81089bc:	f06f 0208 	mvn.w	r2, #8
 81089c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81089c2:	687b      	ldr	r3, [r7, #4]
 81089c4:	2204      	movs	r2, #4
 81089c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81089c8:	687b      	ldr	r3, [r7, #4]
 81089ca:	681b      	ldr	r3, [r3, #0]
 81089cc:	69db      	ldr	r3, [r3, #28]
 81089ce:	f003 0303 	and.w	r3, r3, #3
 81089d2:	2b00      	cmp	r3, #0
 81089d4:	d003      	beq.n	81089de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81089d6:	6878      	ldr	r0, [r7, #4]
 81089d8:	f000 f89d 	bl	8108b16 <HAL_TIM_IC_CaptureCallback>
 81089dc:	e005      	b.n	81089ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81089de:	6878      	ldr	r0, [r7, #4]
 81089e0:	f000 f88f 	bl	8108b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81089e4:	6878      	ldr	r0, [r7, #4]
 81089e6:	f000 f8a0 	bl	8108b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81089ea:	687b      	ldr	r3, [r7, #4]
 81089ec:	2200      	movs	r2, #0
 81089ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 81089f0:	68bb      	ldr	r3, [r7, #8]
 81089f2:	f003 0310 	and.w	r3, r3, #16
 81089f6:	2b00      	cmp	r3, #0
 81089f8:	d020      	beq.n	8108a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 81089fa:	68fb      	ldr	r3, [r7, #12]
 81089fc:	f003 0310 	and.w	r3, r3, #16
 8108a00:	2b00      	cmp	r3, #0
 8108a02:	d01b      	beq.n	8108a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8108a04:	687b      	ldr	r3, [r7, #4]
 8108a06:	681b      	ldr	r3, [r3, #0]
 8108a08:	f06f 0210 	mvn.w	r2, #16
 8108a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8108a0e:	687b      	ldr	r3, [r7, #4]
 8108a10:	2208      	movs	r2, #8
 8108a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8108a14:	687b      	ldr	r3, [r7, #4]
 8108a16:	681b      	ldr	r3, [r3, #0]
 8108a18:	69db      	ldr	r3, [r3, #28]
 8108a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8108a1e:	2b00      	cmp	r3, #0
 8108a20:	d003      	beq.n	8108a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108a22:	6878      	ldr	r0, [r7, #4]
 8108a24:	f000 f877 	bl	8108b16 <HAL_TIM_IC_CaptureCallback>
 8108a28:	e005      	b.n	8108a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108a2a:	6878      	ldr	r0, [r7, #4]
 8108a2c:	f000 f869 	bl	8108b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108a30:	6878      	ldr	r0, [r7, #4]
 8108a32:	f000 f87a 	bl	8108b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108a36:	687b      	ldr	r3, [r7, #4]
 8108a38:	2200      	movs	r2, #0
 8108a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8108a3c:	68bb      	ldr	r3, [r7, #8]
 8108a3e:	f003 0301 	and.w	r3, r3, #1
 8108a42:	2b00      	cmp	r3, #0
 8108a44:	d00c      	beq.n	8108a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8108a46:	68fb      	ldr	r3, [r7, #12]
 8108a48:	f003 0301 	and.w	r3, r3, #1
 8108a4c:	2b00      	cmp	r3, #0
 8108a4e:	d007      	beq.n	8108a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8108a50:	687b      	ldr	r3, [r7, #4]
 8108a52:	681b      	ldr	r3, [r3, #0]
 8108a54:	f06f 0201 	mvn.w	r2, #1
 8108a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8108a5a:	6878      	ldr	r0, [r7, #4]
 8108a5c:	f7f9 fbbe 	bl	81021dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8108a60:	68bb      	ldr	r3, [r7, #8]
 8108a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108a66:	2b00      	cmp	r3, #0
 8108a68:	d104      	bne.n	8108a74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8108a6a:	68bb      	ldr	r3, [r7, #8]
 8108a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8108a70:	2b00      	cmp	r3, #0
 8108a72:	d00c      	beq.n	8108a8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8108a74:	68fb      	ldr	r3, [r7, #12]
 8108a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108a7a:	2b00      	cmp	r3, #0
 8108a7c:	d007      	beq.n	8108a8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8108a7e:	687b      	ldr	r3, [r7, #4]
 8108a80:	681b      	ldr	r3, [r3, #0]
 8108a82:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8108a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8108a88:	6878      	ldr	r0, [r7, #4]
 8108a8a:	f000 f90d 	bl	8108ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8108a8e:	68bb      	ldr	r3, [r7, #8]
 8108a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108a94:	2b00      	cmp	r3, #0
 8108a96:	d00c      	beq.n	8108ab2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8108a98:	68fb      	ldr	r3, [r7, #12]
 8108a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108a9e:	2b00      	cmp	r3, #0
 8108aa0:	d007      	beq.n	8108ab2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8108aa2:	687b      	ldr	r3, [r7, #4]
 8108aa4:	681b      	ldr	r3, [r3, #0]
 8108aa6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8108aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8108aac:	6878      	ldr	r0, [r7, #4]
 8108aae:	f000 f905 	bl	8108cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8108ab2:	68bb      	ldr	r3, [r7, #8]
 8108ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108ab8:	2b00      	cmp	r3, #0
 8108aba:	d00c      	beq.n	8108ad6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8108abc:	68fb      	ldr	r3, [r7, #12]
 8108abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108ac2:	2b00      	cmp	r3, #0
 8108ac4:	d007      	beq.n	8108ad6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8108ac6:	687b      	ldr	r3, [r7, #4]
 8108ac8:	681b      	ldr	r3, [r3, #0]
 8108aca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8108ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8108ad0:	6878      	ldr	r0, [r7, #4]
 8108ad2:	f000 f834 	bl	8108b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8108ad6:	68bb      	ldr	r3, [r7, #8]
 8108ad8:	f003 0320 	and.w	r3, r3, #32
 8108adc:	2b00      	cmp	r3, #0
 8108ade:	d00c      	beq.n	8108afa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8108ae0:	68fb      	ldr	r3, [r7, #12]
 8108ae2:	f003 0320 	and.w	r3, r3, #32
 8108ae6:	2b00      	cmp	r3, #0
 8108ae8:	d007      	beq.n	8108afa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8108aea:	687b      	ldr	r3, [r7, #4]
 8108aec:	681b      	ldr	r3, [r3, #0]
 8108aee:	f06f 0220 	mvn.w	r2, #32
 8108af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8108af4:	6878      	ldr	r0, [r7, #4]
 8108af6:	f000 f8cd 	bl	8108c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8108afa:	bf00      	nop
 8108afc:	3710      	adds	r7, #16
 8108afe:	46bd      	mov	sp, r7
 8108b00:	bd80      	pop	{r7, pc}

08108b02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8108b02:	b480      	push	{r7}
 8108b04:	b083      	sub	sp, #12
 8108b06:	af00      	add	r7, sp, #0
 8108b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8108b0a:	bf00      	nop
 8108b0c:	370c      	adds	r7, #12
 8108b0e:	46bd      	mov	sp, r7
 8108b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b14:	4770      	bx	lr

08108b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8108b16:	b480      	push	{r7}
 8108b18:	b083      	sub	sp, #12
 8108b1a:	af00      	add	r7, sp, #0
 8108b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8108b1e:	bf00      	nop
 8108b20:	370c      	adds	r7, #12
 8108b22:	46bd      	mov	sp, r7
 8108b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b28:	4770      	bx	lr

08108b2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8108b2a:	b480      	push	{r7}
 8108b2c:	b083      	sub	sp, #12
 8108b2e:	af00      	add	r7, sp, #0
 8108b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8108b32:	bf00      	nop
 8108b34:	370c      	adds	r7, #12
 8108b36:	46bd      	mov	sp, r7
 8108b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b3c:	4770      	bx	lr

08108b3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8108b3e:	b480      	push	{r7}
 8108b40:	b083      	sub	sp, #12
 8108b42:	af00      	add	r7, sp, #0
 8108b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8108b46:	bf00      	nop
 8108b48:	370c      	adds	r7, #12
 8108b4a:	46bd      	mov	sp, r7
 8108b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b50:	4770      	bx	lr
	...

08108b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8108b54:	b480      	push	{r7}
 8108b56:	b085      	sub	sp, #20
 8108b58:	af00      	add	r7, sp, #0
 8108b5a:	6078      	str	r0, [r7, #4]
 8108b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8108b5e:	687b      	ldr	r3, [r7, #4]
 8108b60:	681b      	ldr	r3, [r3, #0]
 8108b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8108b64:	687b      	ldr	r3, [r7, #4]
 8108b66:	4a43      	ldr	r2, [pc, #268]	@ (8108c74 <TIM_Base_SetConfig+0x120>)
 8108b68:	4293      	cmp	r3, r2
 8108b6a:	d013      	beq.n	8108b94 <TIM_Base_SetConfig+0x40>
 8108b6c:	687b      	ldr	r3, [r7, #4]
 8108b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108b72:	d00f      	beq.n	8108b94 <TIM_Base_SetConfig+0x40>
 8108b74:	687b      	ldr	r3, [r7, #4]
 8108b76:	4a40      	ldr	r2, [pc, #256]	@ (8108c78 <TIM_Base_SetConfig+0x124>)
 8108b78:	4293      	cmp	r3, r2
 8108b7a:	d00b      	beq.n	8108b94 <TIM_Base_SetConfig+0x40>
 8108b7c:	687b      	ldr	r3, [r7, #4]
 8108b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8108c7c <TIM_Base_SetConfig+0x128>)
 8108b80:	4293      	cmp	r3, r2
 8108b82:	d007      	beq.n	8108b94 <TIM_Base_SetConfig+0x40>
 8108b84:	687b      	ldr	r3, [r7, #4]
 8108b86:	4a3e      	ldr	r2, [pc, #248]	@ (8108c80 <TIM_Base_SetConfig+0x12c>)
 8108b88:	4293      	cmp	r3, r2
 8108b8a:	d003      	beq.n	8108b94 <TIM_Base_SetConfig+0x40>
 8108b8c:	687b      	ldr	r3, [r7, #4]
 8108b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8108c84 <TIM_Base_SetConfig+0x130>)
 8108b90:	4293      	cmp	r3, r2
 8108b92:	d108      	bne.n	8108ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8108b94:	68fb      	ldr	r3, [r7, #12]
 8108b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8108b9c:	683b      	ldr	r3, [r7, #0]
 8108b9e:	685b      	ldr	r3, [r3, #4]
 8108ba0:	68fa      	ldr	r2, [r7, #12]
 8108ba2:	4313      	orrs	r3, r2
 8108ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8108ba6:	687b      	ldr	r3, [r7, #4]
 8108ba8:	4a32      	ldr	r2, [pc, #200]	@ (8108c74 <TIM_Base_SetConfig+0x120>)
 8108baa:	4293      	cmp	r3, r2
 8108bac:	d01f      	beq.n	8108bee <TIM_Base_SetConfig+0x9a>
 8108bae:	687b      	ldr	r3, [r7, #4]
 8108bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108bb4:	d01b      	beq.n	8108bee <TIM_Base_SetConfig+0x9a>
 8108bb6:	687b      	ldr	r3, [r7, #4]
 8108bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8108c78 <TIM_Base_SetConfig+0x124>)
 8108bba:	4293      	cmp	r3, r2
 8108bbc:	d017      	beq.n	8108bee <TIM_Base_SetConfig+0x9a>
 8108bbe:	687b      	ldr	r3, [r7, #4]
 8108bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8108c7c <TIM_Base_SetConfig+0x128>)
 8108bc2:	4293      	cmp	r3, r2
 8108bc4:	d013      	beq.n	8108bee <TIM_Base_SetConfig+0x9a>
 8108bc6:	687b      	ldr	r3, [r7, #4]
 8108bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8108c80 <TIM_Base_SetConfig+0x12c>)
 8108bca:	4293      	cmp	r3, r2
 8108bcc:	d00f      	beq.n	8108bee <TIM_Base_SetConfig+0x9a>
 8108bce:	687b      	ldr	r3, [r7, #4]
 8108bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8108c84 <TIM_Base_SetConfig+0x130>)
 8108bd2:	4293      	cmp	r3, r2
 8108bd4:	d00b      	beq.n	8108bee <TIM_Base_SetConfig+0x9a>
 8108bd6:	687b      	ldr	r3, [r7, #4]
 8108bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8108c88 <TIM_Base_SetConfig+0x134>)
 8108bda:	4293      	cmp	r3, r2
 8108bdc:	d007      	beq.n	8108bee <TIM_Base_SetConfig+0x9a>
 8108bde:	687b      	ldr	r3, [r7, #4]
 8108be0:	4a2a      	ldr	r2, [pc, #168]	@ (8108c8c <TIM_Base_SetConfig+0x138>)
 8108be2:	4293      	cmp	r3, r2
 8108be4:	d003      	beq.n	8108bee <TIM_Base_SetConfig+0x9a>
 8108be6:	687b      	ldr	r3, [r7, #4]
 8108be8:	4a29      	ldr	r2, [pc, #164]	@ (8108c90 <TIM_Base_SetConfig+0x13c>)
 8108bea:	4293      	cmp	r3, r2
 8108bec:	d108      	bne.n	8108c00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8108bee:	68fb      	ldr	r3, [r7, #12]
 8108bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8108bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8108bf6:	683b      	ldr	r3, [r7, #0]
 8108bf8:	68db      	ldr	r3, [r3, #12]
 8108bfa:	68fa      	ldr	r2, [r7, #12]
 8108bfc:	4313      	orrs	r3, r2
 8108bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8108c00:	68fb      	ldr	r3, [r7, #12]
 8108c02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8108c06:	683b      	ldr	r3, [r7, #0]
 8108c08:	695b      	ldr	r3, [r3, #20]
 8108c0a:	4313      	orrs	r3, r2
 8108c0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8108c0e:	683b      	ldr	r3, [r7, #0]
 8108c10:	689a      	ldr	r2, [r3, #8]
 8108c12:	687b      	ldr	r3, [r7, #4]
 8108c14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8108c16:	683b      	ldr	r3, [r7, #0]
 8108c18:	681a      	ldr	r2, [r3, #0]
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8108c1e:	687b      	ldr	r3, [r7, #4]
 8108c20:	4a14      	ldr	r2, [pc, #80]	@ (8108c74 <TIM_Base_SetConfig+0x120>)
 8108c22:	4293      	cmp	r3, r2
 8108c24:	d00f      	beq.n	8108c46 <TIM_Base_SetConfig+0xf2>
 8108c26:	687b      	ldr	r3, [r7, #4]
 8108c28:	4a16      	ldr	r2, [pc, #88]	@ (8108c84 <TIM_Base_SetConfig+0x130>)
 8108c2a:	4293      	cmp	r3, r2
 8108c2c:	d00b      	beq.n	8108c46 <TIM_Base_SetConfig+0xf2>
 8108c2e:	687b      	ldr	r3, [r7, #4]
 8108c30:	4a15      	ldr	r2, [pc, #84]	@ (8108c88 <TIM_Base_SetConfig+0x134>)
 8108c32:	4293      	cmp	r3, r2
 8108c34:	d007      	beq.n	8108c46 <TIM_Base_SetConfig+0xf2>
 8108c36:	687b      	ldr	r3, [r7, #4]
 8108c38:	4a14      	ldr	r2, [pc, #80]	@ (8108c8c <TIM_Base_SetConfig+0x138>)
 8108c3a:	4293      	cmp	r3, r2
 8108c3c:	d003      	beq.n	8108c46 <TIM_Base_SetConfig+0xf2>
 8108c3e:	687b      	ldr	r3, [r7, #4]
 8108c40:	4a13      	ldr	r2, [pc, #76]	@ (8108c90 <TIM_Base_SetConfig+0x13c>)
 8108c42:	4293      	cmp	r3, r2
 8108c44:	d103      	bne.n	8108c4e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8108c46:	683b      	ldr	r3, [r7, #0]
 8108c48:	691a      	ldr	r2, [r3, #16]
 8108c4a:	687b      	ldr	r3, [r7, #4]
 8108c4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8108c4e:	687b      	ldr	r3, [r7, #4]
 8108c50:	681b      	ldr	r3, [r3, #0]
 8108c52:	f043 0204 	orr.w	r2, r3, #4
 8108c56:	687b      	ldr	r3, [r7, #4]
 8108c58:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8108c5a:	687b      	ldr	r3, [r7, #4]
 8108c5c:	2201      	movs	r2, #1
 8108c5e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8108c60:	687b      	ldr	r3, [r7, #4]
 8108c62:	68fa      	ldr	r2, [r7, #12]
 8108c64:	601a      	str	r2, [r3, #0]
}
 8108c66:	bf00      	nop
 8108c68:	3714      	adds	r7, #20
 8108c6a:	46bd      	mov	sp, r7
 8108c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c70:	4770      	bx	lr
 8108c72:	bf00      	nop
 8108c74:	40010000 	.word	0x40010000
 8108c78:	40000400 	.word	0x40000400
 8108c7c:	40000800 	.word	0x40000800
 8108c80:	40000c00 	.word	0x40000c00
 8108c84:	40010400 	.word	0x40010400
 8108c88:	40014000 	.word	0x40014000
 8108c8c:	40014400 	.word	0x40014400
 8108c90:	40014800 	.word	0x40014800

08108c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8108c94:	b480      	push	{r7}
 8108c96:	b083      	sub	sp, #12
 8108c98:	af00      	add	r7, sp, #0
 8108c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8108c9c:	bf00      	nop
 8108c9e:	370c      	adds	r7, #12
 8108ca0:	46bd      	mov	sp, r7
 8108ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ca6:	4770      	bx	lr

08108ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8108ca8:	b480      	push	{r7}
 8108caa:	b083      	sub	sp, #12
 8108cac:	af00      	add	r7, sp, #0
 8108cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8108cb0:	bf00      	nop
 8108cb2:	370c      	adds	r7, #12
 8108cb4:	46bd      	mov	sp, r7
 8108cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cba:	4770      	bx	lr

08108cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8108cbc:	b480      	push	{r7}
 8108cbe:	b083      	sub	sp, #12
 8108cc0:	af00      	add	r7, sp, #0
 8108cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8108cc4:	bf00      	nop
 8108cc6:	370c      	adds	r7, #12
 8108cc8:	46bd      	mov	sp, r7
 8108cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cce:	4770      	bx	lr

08108cd0 <LL_GPIO_SetPinMode>:
{
 8108cd0:	b480      	push	{r7}
 8108cd2:	b085      	sub	sp, #20
 8108cd4:	af00      	add	r7, sp, #0
 8108cd6:	60f8      	str	r0, [r7, #12]
 8108cd8:	60b9      	str	r1, [r7, #8]
 8108cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8108cdc:	68fb      	ldr	r3, [r7, #12]
 8108cde:	6819      	ldr	r1, [r3, #0]
 8108ce0:	68bb      	ldr	r3, [r7, #8]
 8108ce2:	fb03 f203 	mul.w	r2, r3, r3
 8108ce6:	4613      	mov	r3, r2
 8108ce8:	005b      	lsls	r3, r3, #1
 8108cea:	4413      	add	r3, r2
 8108cec:	43db      	mvns	r3, r3
 8108cee:	ea01 0203 	and.w	r2, r1, r3
 8108cf2:	68bb      	ldr	r3, [r7, #8]
 8108cf4:	fb03 f303 	mul.w	r3, r3, r3
 8108cf8:	6879      	ldr	r1, [r7, #4]
 8108cfa:	fb01 f303 	mul.w	r3, r1, r3
 8108cfe:	431a      	orrs	r2, r3
 8108d00:	68fb      	ldr	r3, [r7, #12]
 8108d02:	601a      	str	r2, [r3, #0]
}
 8108d04:	bf00      	nop
 8108d06:	3714      	adds	r7, #20
 8108d08:	46bd      	mov	sp, r7
 8108d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d0e:	4770      	bx	lr

08108d10 <LL_GPIO_SetPinOutputType>:
{
 8108d10:	b480      	push	{r7}
 8108d12:	b085      	sub	sp, #20
 8108d14:	af00      	add	r7, sp, #0
 8108d16:	60f8      	str	r0, [r7, #12]
 8108d18:	60b9      	str	r1, [r7, #8]
 8108d1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8108d1c:	68fb      	ldr	r3, [r7, #12]
 8108d1e:	685a      	ldr	r2, [r3, #4]
 8108d20:	68bb      	ldr	r3, [r7, #8]
 8108d22:	43db      	mvns	r3, r3
 8108d24:	401a      	ands	r2, r3
 8108d26:	68bb      	ldr	r3, [r7, #8]
 8108d28:	6879      	ldr	r1, [r7, #4]
 8108d2a:	fb01 f303 	mul.w	r3, r1, r3
 8108d2e:	431a      	orrs	r2, r3
 8108d30:	68fb      	ldr	r3, [r7, #12]
 8108d32:	605a      	str	r2, [r3, #4]
}
 8108d34:	bf00      	nop
 8108d36:	3714      	adds	r7, #20
 8108d38:	46bd      	mov	sp, r7
 8108d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d3e:	4770      	bx	lr

08108d40 <LL_GPIO_SetPinSpeed>:
{
 8108d40:	b480      	push	{r7}
 8108d42:	b085      	sub	sp, #20
 8108d44:	af00      	add	r7, sp, #0
 8108d46:	60f8      	str	r0, [r7, #12]
 8108d48:	60b9      	str	r1, [r7, #8]
 8108d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8108d4c:	68fb      	ldr	r3, [r7, #12]
 8108d4e:	6899      	ldr	r1, [r3, #8]
 8108d50:	68bb      	ldr	r3, [r7, #8]
 8108d52:	fb03 f203 	mul.w	r2, r3, r3
 8108d56:	4613      	mov	r3, r2
 8108d58:	005b      	lsls	r3, r3, #1
 8108d5a:	4413      	add	r3, r2
 8108d5c:	43db      	mvns	r3, r3
 8108d5e:	ea01 0203 	and.w	r2, r1, r3
 8108d62:	68bb      	ldr	r3, [r7, #8]
 8108d64:	fb03 f303 	mul.w	r3, r3, r3
 8108d68:	6879      	ldr	r1, [r7, #4]
 8108d6a:	fb01 f303 	mul.w	r3, r1, r3
 8108d6e:	431a      	orrs	r2, r3
 8108d70:	68fb      	ldr	r3, [r7, #12]
 8108d72:	609a      	str	r2, [r3, #8]
}
 8108d74:	bf00      	nop
 8108d76:	3714      	adds	r7, #20
 8108d78:	46bd      	mov	sp, r7
 8108d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d7e:	4770      	bx	lr

08108d80 <LL_GPIO_SetPinPull>:
{
 8108d80:	b480      	push	{r7}
 8108d82:	b085      	sub	sp, #20
 8108d84:	af00      	add	r7, sp, #0
 8108d86:	60f8      	str	r0, [r7, #12]
 8108d88:	60b9      	str	r1, [r7, #8]
 8108d8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8108d8c:	68fb      	ldr	r3, [r7, #12]
 8108d8e:	68d9      	ldr	r1, [r3, #12]
 8108d90:	68bb      	ldr	r3, [r7, #8]
 8108d92:	fb03 f203 	mul.w	r2, r3, r3
 8108d96:	4613      	mov	r3, r2
 8108d98:	005b      	lsls	r3, r3, #1
 8108d9a:	4413      	add	r3, r2
 8108d9c:	43db      	mvns	r3, r3
 8108d9e:	ea01 0203 	and.w	r2, r1, r3
 8108da2:	68bb      	ldr	r3, [r7, #8]
 8108da4:	fb03 f303 	mul.w	r3, r3, r3
 8108da8:	6879      	ldr	r1, [r7, #4]
 8108daa:	fb01 f303 	mul.w	r3, r1, r3
 8108dae:	431a      	orrs	r2, r3
 8108db0:	68fb      	ldr	r3, [r7, #12]
 8108db2:	60da      	str	r2, [r3, #12]
}
 8108db4:	bf00      	nop
 8108db6:	3714      	adds	r7, #20
 8108db8:	46bd      	mov	sp, r7
 8108dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dbe:	4770      	bx	lr

08108dc0 <LL_GPIO_SetAFPin_0_7>:
{
 8108dc0:	b480      	push	{r7}
 8108dc2:	b085      	sub	sp, #20
 8108dc4:	af00      	add	r7, sp, #0
 8108dc6:	60f8      	str	r0, [r7, #12]
 8108dc8:	60b9      	str	r1, [r7, #8]
 8108dca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8108dcc:	68fb      	ldr	r3, [r7, #12]
 8108dce:	6a19      	ldr	r1, [r3, #32]
 8108dd0:	68bb      	ldr	r3, [r7, #8]
 8108dd2:	fb03 f303 	mul.w	r3, r3, r3
 8108dd6:	68ba      	ldr	r2, [r7, #8]
 8108dd8:	fb02 f303 	mul.w	r3, r2, r3
 8108ddc:	68ba      	ldr	r2, [r7, #8]
 8108dde:	fb03 f202 	mul.w	r2, r3, r2
 8108de2:	4613      	mov	r3, r2
 8108de4:	011b      	lsls	r3, r3, #4
 8108de6:	1a9b      	subs	r3, r3, r2
 8108de8:	43db      	mvns	r3, r3
 8108dea:	ea01 0203 	and.w	r2, r1, r3
 8108dee:	68bb      	ldr	r3, [r7, #8]
 8108df0:	fb03 f303 	mul.w	r3, r3, r3
 8108df4:	68b9      	ldr	r1, [r7, #8]
 8108df6:	fb01 f303 	mul.w	r3, r1, r3
 8108dfa:	68b9      	ldr	r1, [r7, #8]
 8108dfc:	fb01 f303 	mul.w	r3, r1, r3
 8108e00:	6879      	ldr	r1, [r7, #4]
 8108e02:	fb01 f303 	mul.w	r3, r1, r3
 8108e06:	431a      	orrs	r2, r3
 8108e08:	68fb      	ldr	r3, [r7, #12]
 8108e0a:	621a      	str	r2, [r3, #32]
}
 8108e0c:	bf00      	nop
 8108e0e:	3714      	adds	r7, #20
 8108e10:	46bd      	mov	sp, r7
 8108e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e16:	4770      	bx	lr

08108e18 <LL_GPIO_SetAFPin_8_15>:
{
 8108e18:	b480      	push	{r7}
 8108e1a:	b085      	sub	sp, #20
 8108e1c:	af00      	add	r7, sp, #0
 8108e1e:	60f8      	str	r0, [r7, #12]
 8108e20:	60b9      	str	r1, [r7, #8]
 8108e22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8108e24:	68fb      	ldr	r3, [r7, #12]
 8108e26:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8108e28:	68bb      	ldr	r3, [r7, #8]
 8108e2a:	0a1b      	lsrs	r3, r3, #8
 8108e2c:	68ba      	ldr	r2, [r7, #8]
 8108e2e:	0a12      	lsrs	r2, r2, #8
 8108e30:	fb02 f303 	mul.w	r3, r2, r3
 8108e34:	68ba      	ldr	r2, [r7, #8]
 8108e36:	0a12      	lsrs	r2, r2, #8
 8108e38:	fb02 f303 	mul.w	r3, r2, r3
 8108e3c:	68ba      	ldr	r2, [r7, #8]
 8108e3e:	0a12      	lsrs	r2, r2, #8
 8108e40:	fb03 f202 	mul.w	r2, r3, r2
 8108e44:	4613      	mov	r3, r2
 8108e46:	011b      	lsls	r3, r3, #4
 8108e48:	1a9b      	subs	r3, r3, r2
 8108e4a:	43db      	mvns	r3, r3
 8108e4c:	ea01 0203 	and.w	r2, r1, r3
 8108e50:	68bb      	ldr	r3, [r7, #8]
 8108e52:	0a1b      	lsrs	r3, r3, #8
 8108e54:	68b9      	ldr	r1, [r7, #8]
 8108e56:	0a09      	lsrs	r1, r1, #8
 8108e58:	fb01 f303 	mul.w	r3, r1, r3
 8108e5c:	68b9      	ldr	r1, [r7, #8]
 8108e5e:	0a09      	lsrs	r1, r1, #8
 8108e60:	fb01 f303 	mul.w	r3, r1, r3
 8108e64:	68b9      	ldr	r1, [r7, #8]
 8108e66:	0a09      	lsrs	r1, r1, #8
 8108e68:	fb01 f303 	mul.w	r3, r1, r3
 8108e6c:	6879      	ldr	r1, [r7, #4]
 8108e6e:	fb01 f303 	mul.w	r3, r1, r3
 8108e72:	431a      	orrs	r2, r3
 8108e74:	68fb      	ldr	r3, [r7, #12]
 8108e76:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8108e78:	bf00      	nop
 8108e7a:	3714      	adds	r7, #20
 8108e7c:	46bd      	mov	sp, r7
 8108e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e82:	4770      	bx	lr

08108e84 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8108e84:	b580      	push	{r7, lr}
 8108e86:	b088      	sub	sp, #32
 8108e88:	af00      	add	r7, sp, #0
 8108e8a:	6078      	str	r0, [r7, #4]
 8108e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8108e8e:	683b      	ldr	r3, [r7, #0]
 8108e90:	681b      	ldr	r3, [r3, #0]
 8108e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8108e94:	693b      	ldr	r3, [r7, #16]
 8108e96:	fa93 f3a3 	rbit	r3, r3
 8108e9a:	60fb      	str	r3, [r7, #12]
  return result;
 8108e9c:	68fb      	ldr	r3, [r7, #12]
 8108e9e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8108ea0:	697b      	ldr	r3, [r7, #20]
 8108ea2:	2b00      	cmp	r3, #0
 8108ea4:	d101      	bne.n	8108eaa <LL_GPIO_Init+0x26>
    return 32U;
 8108ea6:	2320      	movs	r3, #32
 8108ea8:	e003      	b.n	8108eb2 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8108eaa:	697b      	ldr	r3, [r7, #20]
 8108eac:	fab3 f383 	clz	r3, r3
 8108eb0:	b2db      	uxtb	r3, r3
 8108eb2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8108eb4:	e048      	b.n	8108f48 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8108eb6:	683b      	ldr	r3, [r7, #0]
 8108eb8:	681a      	ldr	r2, [r3, #0]
 8108eba:	2101      	movs	r1, #1
 8108ebc:	69fb      	ldr	r3, [r7, #28]
 8108ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8108ec2:	4013      	ands	r3, r2
 8108ec4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8108ec6:	69bb      	ldr	r3, [r7, #24]
 8108ec8:	2b00      	cmp	r3, #0
 8108eca:	d03a      	beq.n	8108f42 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8108ecc:	683b      	ldr	r3, [r7, #0]
 8108ece:	685b      	ldr	r3, [r3, #4]
 8108ed0:	2b01      	cmp	r3, #1
 8108ed2:	d003      	beq.n	8108edc <LL_GPIO_Init+0x58>
 8108ed4:	683b      	ldr	r3, [r7, #0]
 8108ed6:	685b      	ldr	r3, [r3, #4]
 8108ed8:	2b02      	cmp	r3, #2
 8108eda:	d10e      	bne.n	8108efa <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8108edc:	683b      	ldr	r3, [r7, #0]
 8108ede:	689b      	ldr	r3, [r3, #8]
 8108ee0:	461a      	mov	r2, r3
 8108ee2:	69b9      	ldr	r1, [r7, #24]
 8108ee4:	6878      	ldr	r0, [r7, #4]
 8108ee6:	f7ff ff2b 	bl	8108d40 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8108eea:	683b      	ldr	r3, [r7, #0]
 8108eec:	6819      	ldr	r1, [r3, #0]
 8108eee:	683b      	ldr	r3, [r7, #0]
 8108ef0:	68db      	ldr	r3, [r3, #12]
 8108ef2:	461a      	mov	r2, r3
 8108ef4:	6878      	ldr	r0, [r7, #4]
 8108ef6:	f7ff ff0b 	bl	8108d10 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8108efa:	683b      	ldr	r3, [r7, #0]
 8108efc:	691b      	ldr	r3, [r3, #16]
 8108efe:	461a      	mov	r2, r3
 8108f00:	69b9      	ldr	r1, [r7, #24]
 8108f02:	6878      	ldr	r0, [r7, #4]
 8108f04:	f7ff ff3c 	bl	8108d80 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8108f08:	683b      	ldr	r3, [r7, #0]
 8108f0a:	685b      	ldr	r3, [r3, #4]
 8108f0c:	2b02      	cmp	r3, #2
 8108f0e:	d111      	bne.n	8108f34 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8108f10:	69bb      	ldr	r3, [r7, #24]
 8108f12:	2bff      	cmp	r3, #255	@ 0xff
 8108f14:	d807      	bhi.n	8108f26 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8108f16:	683b      	ldr	r3, [r7, #0]
 8108f18:	695b      	ldr	r3, [r3, #20]
 8108f1a:	461a      	mov	r2, r3
 8108f1c:	69b9      	ldr	r1, [r7, #24]
 8108f1e:	6878      	ldr	r0, [r7, #4]
 8108f20:	f7ff ff4e 	bl	8108dc0 <LL_GPIO_SetAFPin_0_7>
 8108f24:	e006      	b.n	8108f34 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8108f26:	683b      	ldr	r3, [r7, #0]
 8108f28:	695b      	ldr	r3, [r3, #20]
 8108f2a:	461a      	mov	r2, r3
 8108f2c:	69b9      	ldr	r1, [r7, #24]
 8108f2e:	6878      	ldr	r0, [r7, #4]
 8108f30:	f7ff ff72 	bl	8108e18 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8108f34:	683b      	ldr	r3, [r7, #0]
 8108f36:	685b      	ldr	r3, [r3, #4]
 8108f38:	461a      	mov	r2, r3
 8108f3a:	69b9      	ldr	r1, [r7, #24]
 8108f3c:	6878      	ldr	r0, [r7, #4]
 8108f3e:	f7ff fec7 	bl	8108cd0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8108f42:	69fb      	ldr	r3, [r7, #28]
 8108f44:	3301      	adds	r3, #1
 8108f46:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8108f48:	683b      	ldr	r3, [r7, #0]
 8108f4a:	681a      	ldr	r2, [r3, #0]
 8108f4c:	69fb      	ldr	r3, [r7, #28]
 8108f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8108f52:	2b00      	cmp	r3, #0
 8108f54:	d1af      	bne.n	8108eb6 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8108f56:	2300      	movs	r3, #0
}
 8108f58:	4618      	mov	r0, r3
 8108f5a:	3720      	adds	r7, #32
 8108f5c:	46bd      	mov	sp, r7
 8108f5e:	bd80      	pop	{r7, pc}

08108f60 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8108f60:	b480      	push	{r7}
 8108f62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8108f64:	4b07      	ldr	r3, [pc, #28]	@ (8108f84 <LL_RCC_HSE_IsReady+0x24>)
 8108f66:	681b      	ldr	r3, [r3, #0]
 8108f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108f70:	d101      	bne.n	8108f76 <LL_RCC_HSE_IsReady+0x16>
 8108f72:	2301      	movs	r3, #1
 8108f74:	e000      	b.n	8108f78 <LL_RCC_HSE_IsReady+0x18>
 8108f76:	2300      	movs	r3, #0
}
 8108f78:	4618      	mov	r0, r3
 8108f7a:	46bd      	mov	sp, r7
 8108f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f80:	4770      	bx	lr
 8108f82:	bf00      	nop
 8108f84:	58024400 	.word	0x58024400

08108f88 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8108f88:	b480      	push	{r7}
 8108f8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8108f8c:	4b06      	ldr	r3, [pc, #24]	@ (8108fa8 <LL_RCC_HSI_IsReady+0x20>)
 8108f8e:	681b      	ldr	r3, [r3, #0]
 8108f90:	f003 0304 	and.w	r3, r3, #4
 8108f94:	2b04      	cmp	r3, #4
 8108f96:	d101      	bne.n	8108f9c <LL_RCC_HSI_IsReady+0x14>
 8108f98:	2301      	movs	r3, #1
 8108f9a:	e000      	b.n	8108f9e <LL_RCC_HSI_IsReady+0x16>
 8108f9c:	2300      	movs	r3, #0
}
 8108f9e:	4618      	mov	r0, r3
 8108fa0:	46bd      	mov	sp, r7
 8108fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fa6:	4770      	bx	lr
 8108fa8:	58024400 	.word	0x58024400

08108fac <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8108fac:	b480      	push	{r7}
 8108fae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8108fb0:	4b04      	ldr	r3, [pc, #16]	@ (8108fc4 <LL_RCC_HSI_GetDivider+0x18>)
 8108fb2:	681b      	ldr	r3, [r3, #0]
 8108fb4:	f003 0318 	and.w	r3, r3, #24
}
 8108fb8:	4618      	mov	r0, r3
 8108fba:	46bd      	mov	sp, r7
 8108fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fc0:	4770      	bx	lr
 8108fc2:	bf00      	nop
 8108fc4:	58024400 	.word	0x58024400

08108fc8 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 8108fc8:	b480      	push	{r7}
 8108fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8108fcc:	4b07      	ldr	r3, [pc, #28]	@ (8108fec <LL_RCC_CSI_IsReady+0x24>)
 8108fce:	681b      	ldr	r3, [r3, #0]
 8108fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108fd8:	d101      	bne.n	8108fde <LL_RCC_CSI_IsReady+0x16>
 8108fda:	2301      	movs	r3, #1
 8108fdc:	e000      	b.n	8108fe0 <LL_RCC_CSI_IsReady+0x18>
 8108fde:	2300      	movs	r3, #0
}
 8108fe0:	4618      	mov	r0, r3
 8108fe2:	46bd      	mov	sp, r7
 8108fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fe8:	4770      	bx	lr
 8108fea:	bf00      	nop
 8108fec:	58024400 	.word	0x58024400

08108ff0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8108ff0:	b480      	push	{r7}
 8108ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8108ff4:	4b06      	ldr	r3, [pc, #24]	@ (8109010 <LL_RCC_LSE_IsReady+0x20>)
 8108ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108ff8:	f003 0302 	and.w	r3, r3, #2
 8108ffc:	2b02      	cmp	r3, #2
 8108ffe:	d101      	bne.n	8109004 <LL_RCC_LSE_IsReady+0x14>
 8109000:	2301      	movs	r3, #1
 8109002:	e000      	b.n	8109006 <LL_RCC_LSE_IsReady+0x16>
 8109004:	2300      	movs	r3, #0
}
 8109006:	4618      	mov	r0, r3
 8109008:	46bd      	mov	sp, r7
 810900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810900e:	4770      	bx	lr
 8109010:	58024400 	.word	0x58024400

08109014 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8109014:	b480      	push	{r7}
 8109016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8109018:	4b04      	ldr	r3, [pc, #16]	@ (810902c <LL_RCC_GetSysClkSource+0x18>)
 810901a:	691b      	ldr	r3, [r3, #16]
 810901c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8109020:	4618      	mov	r0, r3
 8109022:	46bd      	mov	sp, r7
 8109024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109028:	4770      	bx	lr
 810902a:	bf00      	nop
 810902c:	58024400 	.word	0x58024400

08109030 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 8109030:	b480      	push	{r7}
 8109032:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8109034:	4b04      	ldr	r3, [pc, #16]	@ (8109048 <LL_RCC_GetSysPrescaler+0x18>)
 8109036:	699b      	ldr	r3, [r3, #24]
 8109038:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 810903c:	4618      	mov	r0, r3
 810903e:	46bd      	mov	sp, r7
 8109040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109044:	4770      	bx	lr
 8109046:	bf00      	nop
 8109048:	58024400 	.word	0x58024400

0810904c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 810904c:	b480      	push	{r7}
 810904e:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8109050:	4b04      	ldr	r3, [pc, #16]	@ (8109064 <LL_RCC_GetAHBPrescaler+0x18>)
 8109052:	699b      	ldr	r3, [r3, #24]
 8109054:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 8109058:	4618      	mov	r0, r3
 810905a:	46bd      	mov	sp, r7
 810905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109060:	4770      	bx	lr
 8109062:	bf00      	nop
 8109064:	58024400 	.word	0x58024400

08109068 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8109068:	b480      	push	{r7}
 810906a:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 810906c:	4b04      	ldr	r3, [pc, #16]	@ (8109080 <LL_RCC_GetAPB1Prescaler+0x18>)
 810906e:	69db      	ldr	r3, [r3, #28]
 8109070:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8109074:	4618      	mov	r0, r3
 8109076:	46bd      	mov	sp, r7
 8109078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810907c:	4770      	bx	lr
 810907e:	bf00      	nop
 8109080:	58024400 	.word	0x58024400

08109084 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8109084:	b480      	push	{r7}
 8109086:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8109088:	4b04      	ldr	r3, [pc, #16]	@ (810909c <LL_RCC_GetAPB2Prescaler+0x18>)
 810908a:	69db      	ldr	r3, [r3, #28]
 810908c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8109090:	4618      	mov	r0, r3
 8109092:	46bd      	mov	sp, r7
 8109094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109098:	4770      	bx	lr
 810909a:	bf00      	nop
 810909c:	58024400 	.word	0x58024400

081090a0 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 81090a0:	b480      	push	{r7}
 81090a2:	b085      	sub	sp, #20
 81090a4:	af00      	add	r7, sp, #0
 81090a6:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 81090a8:	687b      	ldr	r3, [r7, #4]
 81090aa:	b2da      	uxtb	r2, r3
 81090ac:	4b0e      	ldr	r3, [pc, #56]	@ (81090e8 <LL_RCC_GetClockSource+0x48>)
 81090ae:	4413      	add	r3, r2
 81090b0:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 81090b2:	68fb      	ldr	r3, [r7, #12]
 81090b4:	681a      	ldr	r2, [r3, #0]
 81090b6:	687b      	ldr	r3, [r7, #4]
 81090b8:	0e19      	lsrs	r1, r3, #24
 81090ba:	687b      	ldr	r3, [r7, #4]
 81090bc:	0a1b      	lsrs	r3, r3, #8
 81090be:	f003 031f 	and.w	r3, r3, #31
 81090c2:	fa01 f303 	lsl.w	r3, r1, r3
 81090c6:	401a      	ands	r2, r3
 81090c8:	687b      	ldr	r3, [r7, #4]
 81090ca:	0a1b      	lsrs	r3, r3, #8
 81090cc:	f003 031f 	and.w	r3, r3, #31
 81090d0:	fa22 f303 	lsr.w	r3, r2, r3
 81090d4:	041a      	lsls	r2, r3, #16
 81090d6:	687b      	ldr	r3, [r7, #4]
 81090d8:	4313      	orrs	r3, r2
}
 81090da:	4618      	mov	r0, r3
 81090dc:	3714      	adds	r7, #20
 81090de:	46bd      	mov	sp, r7
 81090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090e4:	4770      	bx	lr
 81090e6:	bf00      	nop
 81090e8:	5802444c 	.word	0x5802444c

081090ec <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 81090ec:	b580      	push	{r7, lr}
 81090ee:	b082      	sub	sp, #8
 81090f0:	af00      	add	r7, sp, #0
 81090f2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 81090f4:	6878      	ldr	r0, [r7, #4]
 81090f6:	f7ff ffd3 	bl	81090a0 <LL_RCC_GetClockSource>
 81090fa:	4603      	mov	r3, r0
}
 81090fc:	4618      	mov	r0, r3
 81090fe:	3708      	adds	r7, #8
 8109100:	46bd      	mov	sp, r7
 8109102:	bd80      	pop	{r7, pc}

08109104 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 8109104:	b480      	push	{r7}
 8109106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8109108:	4b04      	ldr	r3, [pc, #16]	@ (810911c <LL_RCC_PLL_GetSource+0x18>)
 810910a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810910c:	f003 0303 	and.w	r3, r3, #3
}
 8109110:	4618      	mov	r0, r3
 8109112:	46bd      	mov	sp, r7
 8109114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109118:	4770      	bx	lr
 810911a:	bf00      	nop
 810911c:	58024400 	.word	0x58024400

08109120 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8109120:	b480      	push	{r7}
 8109122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8109124:	4b07      	ldr	r3, [pc, #28]	@ (8109144 <LL_RCC_PLL1P_IsEnabled+0x24>)
 8109126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810912c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109130:	d101      	bne.n	8109136 <LL_RCC_PLL1P_IsEnabled+0x16>
 8109132:	2301      	movs	r3, #1
 8109134:	e000      	b.n	8109138 <LL_RCC_PLL1P_IsEnabled+0x18>
 8109136:	2300      	movs	r3, #0
}
 8109138:	4618      	mov	r0, r3
 810913a:	46bd      	mov	sp, r7
 810913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109140:	4770      	bx	lr
 8109142:	bf00      	nop
 8109144:	58024400 	.word	0x58024400

08109148 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 8109148:	b480      	push	{r7}
 810914a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 810914c:	4b07      	ldr	r3, [pc, #28]	@ (810916c <LL_RCC_PLL1Q_IsEnabled+0x24>)
 810914e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109154:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109158:	d101      	bne.n	810915e <LL_RCC_PLL1Q_IsEnabled+0x16>
 810915a:	2301      	movs	r3, #1
 810915c:	e000      	b.n	8109160 <LL_RCC_PLL1Q_IsEnabled+0x18>
 810915e:	2300      	movs	r3, #0
}
 8109160:	4618      	mov	r0, r3
 8109162:	46bd      	mov	sp, r7
 8109164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109168:	4770      	bx	lr
 810916a:	bf00      	nop
 810916c:	58024400 	.word	0x58024400

08109170 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8109170:	b480      	push	{r7}
 8109172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8109174:	4b07      	ldr	r3, [pc, #28]	@ (8109194 <LL_RCC_PLL1R_IsEnabled+0x24>)
 8109176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810917c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8109180:	d101      	bne.n	8109186 <LL_RCC_PLL1R_IsEnabled+0x16>
 8109182:	2301      	movs	r3, #1
 8109184:	e000      	b.n	8109188 <LL_RCC_PLL1R_IsEnabled+0x18>
 8109186:	2300      	movs	r3, #0
}
 8109188:	4618      	mov	r0, r3
 810918a:	46bd      	mov	sp, r7
 810918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109190:	4770      	bx	lr
 8109192:	bf00      	nop
 8109194:	58024400 	.word	0x58024400

08109198 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8109198:	b480      	push	{r7}
 810919a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 810919c:	4b06      	ldr	r3, [pc, #24]	@ (81091b8 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 810919e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81091a0:	f003 0301 	and.w	r3, r3, #1
 81091a4:	2b01      	cmp	r3, #1
 81091a6:	d101      	bne.n	81091ac <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 81091a8:	2301      	movs	r3, #1
 81091aa:	e000      	b.n	81091ae <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 81091ac:	2300      	movs	r3, #0
}
 81091ae:	4618      	mov	r0, r3
 81091b0:	46bd      	mov	sp, r7
 81091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091b6:	4770      	bx	lr
 81091b8:	58024400 	.word	0x58024400

081091bc <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 81091bc:	b480      	push	{r7}
 81091be:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 81091c0:	4b04      	ldr	r3, [pc, #16]	@ (81091d4 <LL_RCC_PLL1_GetN+0x18>)
 81091c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81091c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81091c8:	3301      	adds	r3, #1
}
 81091ca:	4618      	mov	r0, r3
 81091cc:	46bd      	mov	sp, r7
 81091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091d2:	4770      	bx	lr
 81091d4:	58024400 	.word	0x58024400

081091d8 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 81091d8:	b480      	push	{r7}
 81091da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 81091dc:	4b04      	ldr	r3, [pc, #16]	@ (81091f0 <LL_RCC_PLL1_GetM+0x18>)
 81091de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81091e0:	091b      	lsrs	r3, r3, #4
 81091e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 81091e6:	4618      	mov	r0, r3
 81091e8:	46bd      	mov	sp, r7
 81091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091ee:	4770      	bx	lr
 81091f0:	58024400 	.word	0x58024400

081091f4 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 81091f4:	b480      	push	{r7}
 81091f6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 81091f8:	4b05      	ldr	r3, [pc, #20]	@ (8109210 <LL_RCC_PLL1_GetP+0x1c>)
 81091fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81091fc:	0a5b      	lsrs	r3, r3, #9
 81091fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109202:	3301      	adds	r3, #1
}
 8109204:	4618      	mov	r0, r3
 8109206:	46bd      	mov	sp, r7
 8109208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810920c:	4770      	bx	lr
 810920e:	bf00      	nop
 8109210:	58024400 	.word	0x58024400

08109214 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 8109214:	b480      	push	{r7}
 8109216:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8109218:	4b05      	ldr	r3, [pc, #20]	@ (8109230 <LL_RCC_PLL1_GetQ+0x1c>)
 810921a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810921c:	0c1b      	lsrs	r3, r3, #16
 810921e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109222:	3301      	adds	r3, #1
}
 8109224:	4618      	mov	r0, r3
 8109226:	46bd      	mov	sp, r7
 8109228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810922c:	4770      	bx	lr
 810922e:	bf00      	nop
 8109230:	58024400 	.word	0x58024400

08109234 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8109234:	b480      	push	{r7}
 8109236:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8109238:	4b05      	ldr	r3, [pc, #20]	@ (8109250 <LL_RCC_PLL1_GetR+0x1c>)
 810923a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810923c:	0e1b      	lsrs	r3, r3, #24
 810923e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109242:	3301      	adds	r3, #1
}
 8109244:	4618      	mov	r0, r3
 8109246:	46bd      	mov	sp, r7
 8109248:	f85d 7b04 	ldr.w	r7, [sp], #4
 810924c:	4770      	bx	lr
 810924e:	bf00      	nop
 8109250:	58024400 	.word	0x58024400

08109254 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 8109254:	b480      	push	{r7}
 8109256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8109258:	4b04      	ldr	r3, [pc, #16]	@ (810926c <LL_RCC_PLL1_GetFRACN+0x18>)
 810925a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810925c:	08db      	lsrs	r3, r3, #3
 810925e:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8109262:	4618      	mov	r0, r3
 8109264:	46bd      	mov	sp, r7
 8109266:	f85d 7b04 	ldr.w	r7, [sp], #4
 810926a:	4770      	bx	lr
 810926c:	58024400 	.word	0x58024400

08109270 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8109270:	b480      	push	{r7}
 8109272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8109274:	4b07      	ldr	r3, [pc, #28]	@ (8109294 <LL_RCC_PLL2_IsReady+0x24>)
 8109276:	681b      	ldr	r3, [r3, #0]
 8109278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810927c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109280:	d101      	bne.n	8109286 <LL_RCC_PLL2_IsReady+0x16>
 8109282:	2301      	movs	r3, #1
 8109284:	e000      	b.n	8109288 <LL_RCC_PLL2_IsReady+0x18>
 8109286:	2300      	movs	r3, #0
}
 8109288:	4618      	mov	r0, r3
 810928a:	46bd      	mov	sp, r7
 810928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109290:	4770      	bx	lr
 8109292:	bf00      	nop
 8109294:	58024400 	.word	0x58024400

08109298 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8109298:	b480      	push	{r7}
 810929a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 810929c:	4b07      	ldr	r3, [pc, #28]	@ (81092bc <LL_RCC_PLL2P_IsEnabled+0x24>)
 810929e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81092a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81092a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81092a8:	d101      	bne.n	81092ae <LL_RCC_PLL2P_IsEnabled+0x16>
 81092aa:	2301      	movs	r3, #1
 81092ac:	e000      	b.n	81092b0 <LL_RCC_PLL2P_IsEnabled+0x18>
 81092ae:	2300      	movs	r3, #0
}
 81092b0:	4618      	mov	r0, r3
 81092b2:	46bd      	mov	sp, r7
 81092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092b8:	4770      	bx	lr
 81092ba:	bf00      	nop
 81092bc:	58024400 	.word	0x58024400

081092c0 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 81092c0:	b480      	push	{r7}
 81092c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 81092c4:	4b07      	ldr	r3, [pc, #28]	@ (81092e4 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 81092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81092c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81092cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81092d0:	d101      	bne.n	81092d6 <LL_RCC_PLL2Q_IsEnabled+0x16>
 81092d2:	2301      	movs	r3, #1
 81092d4:	e000      	b.n	81092d8 <LL_RCC_PLL2Q_IsEnabled+0x18>
 81092d6:	2300      	movs	r3, #0
}
 81092d8:	4618      	mov	r0, r3
 81092da:	46bd      	mov	sp, r7
 81092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092e0:	4770      	bx	lr
 81092e2:	bf00      	nop
 81092e4:	58024400 	.word	0x58024400

081092e8 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 81092e8:	b480      	push	{r7}
 81092ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 81092ec:	4b07      	ldr	r3, [pc, #28]	@ (810930c <LL_RCC_PLL2R_IsEnabled+0x24>)
 81092ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81092f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81092f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81092f8:	d101      	bne.n	81092fe <LL_RCC_PLL2R_IsEnabled+0x16>
 81092fa:	2301      	movs	r3, #1
 81092fc:	e000      	b.n	8109300 <LL_RCC_PLL2R_IsEnabled+0x18>
 81092fe:	2300      	movs	r3, #0
}
 8109300:	4618      	mov	r0, r3
 8109302:	46bd      	mov	sp, r7
 8109304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109308:	4770      	bx	lr
 810930a:	bf00      	nop
 810930c:	58024400 	.word	0x58024400

08109310 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8109310:	b480      	push	{r7}
 8109312:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8109314:	4b06      	ldr	r3, [pc, #24]	@ (8109330 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8109316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109318:	f003 0310 	and.w	r3, r3, #16
 810931c:	2b10      	cmp	r3, #16
 810931e:	d101      	bne.n	8109324 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8109320:	2301      	movs	r3, #1
 8109322:	e000      	b.n	8109326 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8109324:	2300      	movs	r3, #0
}
 8109326:	4618      	mov	r0, r3
 8109328:	46bd      	mov	sp, r7
 810932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810932e:	4770      	bx	lr
 8109330:	58024400 	.word	0x58024400

08109334 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8109334:	b480      	push	{r7}
 8109336:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8109338:	4b04      	ldr	r3, [pc, #16]	@ (810934c <LL_RCC_PLL2_GetN+0x18>)
 810933a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810933c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109340:	3301      	adds	r3, #1
}
 8109342:	4618      	mov	r0, r3
 8109344:	46bd      	mov	sp, r7
 8109346:	f85d 7b04 	ldr.w	r7, [sp], #4
 810934a:	4770      	bx	lr
 810934c:	58024400 	.word	0x58024400

08109350 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8109350:	b480      	push	{r7}
 8109352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8109354:	4b04      	ldr	r3, [pc, #16]	@ (8109368 <LL_RCC_PLL2_GetM+0x18>)
 8109356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109358:	0b1b      	lsrs	r3, r3, #12
 810935a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 810935e:	4618      	mov	r0, r3
 8109360:	46bd      	mov	sp, r7
 8109362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109366:	4770      	bx	lr
 8109368:	58024400 	.word	0x58024400

0810936c <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 810936c:	b480      	push	{r7}
 810936e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8109370:	4b05      	ldr	r3, [pc, #20]	@ (8109388 <LL_RCC_PLL2_GetP+0x1c>)
 8109372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109374:	0a5b      	lsrs	r3, r3, #9
 8109376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810937a:	3301      	adds	r3, #1
}
 810937c:	4618      	mov	r0, r3
 810937e:	46bd      	mov	sp, r7
 8109380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109384:	4770      	bx	lr
 8109386:	bf00      	nop
 8109388:	58024400 	.word	0x58024400

0810938c <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 810938c:	b480      	push	{r7}
 810938e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8109390:	4b05      	ldr	r3, [pc, #20]	@ (81093a8 <LL_RCC_PLL2_GetQ+0x1c>)
 8109392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109394:	0c1b      	lsrs	r3, r3, #16
 8109396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810939a:	3301      	adds	r3, #1
}
 810939c:	4618      	mov	r0, r3
 810939e:	46bd      	mov	sp, r7
 81093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093a4:	4770      	bx	lr
 81093a6:	bf00      	nop
 81093a8:	58024400 	.word	0x58024400

081093ac <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 81093ac:	b480      	push	{r7}
 81093ae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 81093b0:	4b05      	ldr	r3, [pc, #20]	@ (81093c8 <LL_RCC_PLL2_GetR+0x1c>)
 81093b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81093b4:	0e1b      	lsrs	r3, r3, #24
 81093b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81093ba:	3301      	adds	r3, #1
}
 81093bc:	4618      	mov	r0, r3
 81093be:	46bd      	mov	sp, r7
 81093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093c4:	4770      	bx	lr
 81093c6:	bf00      	nop
 81093c8:	58024400 	.word	0x58024400

081093cc <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 81093cc:	b480      	push	{r7}
 81093ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 81093d0:	4b04      	ldr	r3, [pc, #16]	@ (81093e4 <LL_RCC_PLL2_GetFRACN+0x18>)
 81093d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81093d4:	08db      	lsrs	r3, r3, #3
 81093d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 81093da:	4618      	mov	r0, r3
 81093dc:	46bd      	mov	sp, r7
 81093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093e2:	4770      	bx	lr
 81093e4:	58024400 	.word	0x58024400

081093e8 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 81093e8:	b480      	push	{r7}
 81093ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 81093ec:	4b07      	ldr	r3, [pc, #28]	@ (810940c <LL_RCC_PLL3_IsReady+0x24>)
 81093ee:	681b      	ldr	r3, [r3, #0]
 81093f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81093f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81093f8:	d101      	bne.n	81093fe <LL_RCC_PLL3_IsReady+0x16>
 81093fa:	2301      	movs	r3, #1
 81093fc:	e000      	b.n	8109400 <LL_RCC_PLL3_IsReady+0x18>
 81093fe:	2300      	movs	r3, #0
}
 8109400:	4618      	mov	r0, r3
 8109402:	46bd      	mov	sp, r7
 8109404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109408:	4770      	bx	lr
 810940a:	bf00      	nop
 810940c:	58024400 	.word	0x58024400

08109410 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8109410:	b480      	push	{r7}
 8109412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8109414:	4b07      	ldr	r3, [pc, #28]	@ (8109434 <LL_RCC_PLL3P_IsEnabled+0x24>)
 8109416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810941c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8109420:	d101      	bne.n	8109426 <LL_RCC_PLL3P_IsEnabled+0x16>
 8109422:	2301      	movs	r3, #1
 8109424:	e000      	b.n	8109428 <LL_RCC_PLL3P_IsEnabled+0x18>
 8109426:	2300      	movs	r3, #0
}
 8109428:	4618      	mov	r0, r3
 810942a:	46bd      	mov	sp, r7
 810942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109430:	4770      	bx	lr
 8109432:	bf00      	nop
 8109434:	58024400 	.word	0x58024400

08109438 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8109438:	b480      	push	{r7}
 810943a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 810943c:	4b07      	ldr	r3, [pc, #28]	@ (810945c <LL_RCC_PLL3Q_IsEnabled+0x24>)
 810943e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109440:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8109444:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8109448:	d101      	bne.n	810944e <LL_RCC_PLL3Q_IsEnabled+0x16>
 810944a:	2301      	movs	r3, #1
 810944c:	e000      	b.n	8109450 <LL_RCC_PLL3Q_IsEnabled+0x18>
 810944e:	2300      	movs	r3, #0
}
 8109450:	4618      	mov	r0, r3
 8109452:	46bd      	mov	sp, r7
 8109454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109458:	4770      	bx	lr
 810945a:	bf00      	nop
 810945c:	58024400 	.word	0x58024400

08109460 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8109460:	b480      	push	{r7}
 8109462:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8109464:	4b07      	ldr	r3, [pc, #28]	@ (8109484 <LL_RCC_PLL3R_IsEnabled+0x24>)
 8109466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109468:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810946c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8109470:	d101      	bne.n	8109476 <LL_RCC_PLL3R_IsEnabled+0x16>
 8109472:	2301      	movs	r3, #1
 8109474:	e000      	b.n	8109478 <LL_RCC_PLL3R_IsEnabled+0x18>
 8109476:	2300      	movs	r3, #0
}
 8109478:	4618      	mov	r0, r3
 810947a:	46bd      	mov	sp, r7
 810947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109480:	4770      	bx	lr
 8109482:	bf00      	nop
 8109484:	58024400 	.word	0x58024400

08109488 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8109488:	b480      	push	{r7}
 810948a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 810948c:	4b07      	ldr	r3, [pc, #28]	@ (81094ac <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 810948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109498:	d101      	bne.n	810949e <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 810949a:	2301      	movs	r3, #1
 810949c:	e000      	b.n	81094a0 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 810949e:	2300      	movs	r3, #0
}
 81094a0:	4618      	mov	r0, r3
 81094a2:	46bd      	mov	sp, r7
 81094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094a8:	4770      	bx	lr
 81094aa:	bf00      	nop
 81094ac:	58024400 	.word	0x58024400

081094b0 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 81094b0:	b480      	push	{r7}
 81094b2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 81094b4:	4b04      	ldr	r3, [pc, #16]	@ (81094c8 <LL_RCC_PLL3_GetN+0x18>)
 81094b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81094b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81094bc:	3301      	adds	r3, #1
}
 81094be:	4618      	mov	r0, r3
 81094c0:	46bd      	mov	sp, r7
 81094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094c6:	4770      	bx	lr
 81094c8:	58024400 	.word	0x58024400

081094cc <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 81094cc:	b480      	push	{r7}
 81094ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 81094d0:	4b04      	ldr	r3, [pc, #16]	@ (81094e4 <LL_RCC_PLL3_GetM+0x18>)
 81094d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81094d4:	0d1b      	lsrs	r3, r3, #20
 81094d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 81094da:	4618      	mov	r0, r3
 81094dc:	46bd      	mov	sp, r7
 81094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094e2:	4770      	bx	lr
 81094e4:	58024400 	.word	0x58024400

081094e8 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 81094e8:	b480      	push	{r7}
 81094ea:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 81094ec:	4b05      	ldr	r3, [pc, #20]	@ (8109504 <LL_RCC_PLL3_GetP+0x1c>)
 81094ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81094f0:	0a5b      	lsrs	r3, r3, #9
 81094f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81094f6:	3301      	adds	r3, #1
}
 81094f8:	4618      	mov	r0, r3
 81094fa:	46bd      	mov	sp, r7
 81094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109500:	4770      	bx	lr
 8109502:	bf00      	nop
 8109504:	58024400 	.word	0x58024400

08109508 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8109508:	b480      	push	{r7}
 810950a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 810950c:	4b05      	ldr	r3, [pc, #20]	@ (8109524 <LL_RCC_PLL3_GetQ+0x1c>)
 810950e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109510:	0c1b      	lsrs	r3, r3, #16
 8109512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109516:	3301      	adds	r3, #1
}
 8109518:	4618      	mov	r0, r3
 810951a:	46bd      	mov	sp, r7
 810951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109520:	4770      	bx	lr
 8109522:	bf00      	nop
 8109524:	58024400 	.word	0x58024400

08109528 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8109528:	b480      	push	{r7}
 810952a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 810952c:	4b05      	ldr	r3, [pc, #20]	@ (8109544 <LL_RCC_PLL3_GetR+0x1c>)
 810952e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109530:	0e1b      	lsrs	r3, r3, #24
 8109532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109536:	3301      	adds	r3, #1
}
 8109538:	4618      	mov	r0, r3
 810953a:	46bd      	mov	sp, r7
 810953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109540:	4770      	bx	lr
 8109542:	bf00      	nop
 8109544:	58024400 	.word	0x58024400

08109548 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8109548:	b480      	push	{r7}
 810954a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 810954c:	4b04      	ldr	r3, [pc, #16]	@ (8109560 <LL_RCC_PLL3_GetFRACN+0x18>)
 810954e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109550:	08db      	lsrs	r3, r3, #3
 8109552:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8109556:	4618      	mov	r0, r3
 8109558:	46bd      	mov	sp, r7
 810955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810955e:	4770      	bx	lr
 8109560:	58024400 	.word	0x58024400

08109564 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8109564:	b580      	push	{r7, lr}
 8109566:	b08a      	sub	sp, #40	@ 0x28
 8109568:	af02      	add	r7, sp, #8
 810956a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 810956c:	2300      	movs	r3, #0
 810956e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8109570:	2300      	movs	r3, #0
 8109572:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8109574:	f7ff fdc6 	bl	8109104 <LL_RCC_PLL_GetSource>
 8109578:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 810957a:	697b      	ldr	r3, [r7, #20]
 810957c:	2b02      	cmp	r3, #2
 810957e:	d01f      	beq.n	81095c0 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8109580:	697b      	ldr	r3, [r7, #20]
 8109582:	2b02      	cmp	r3, #2
 8109584:	d824      	bhi.n	81095d0 <LL_RCC_GetPLL1ClockFreq+0x6c>
 8109586:	697b      	ldr	r3, [r7, #20]
 8109588:	2b00      	cmp	r3, #0
 810958a:	d003      	beq.n	8109594 <LL_RCC_GetPLL1ClockFreq+0x30>
 810958c:	697b      	ldr	r3, [r7, #20]
 810958e:	2b01      	cmp	r3, #1
 8109590:	d00e      	beq.n	81095b0 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8109592:	e01d      	b.n	81095d0 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8109594:	f7ff fcf8 	bl	8108f88 <LL_RCC_HSI_IsReady>
 8109598:	4603      	mov	r3, r0
 810959a:	2b00      	cmp	r3, #0
 810959c:	d01a      	beq.n	81095d4 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 810959e:	f7ff fd05 	bl	8108fac <LL_RCC_HSI_GetDivider>
 81095a2:	4603      	mov	r3, r0
 81095a4:	08db      	lsrs	r3, r3, #3
 81095a6:	4a38      	ldr	r2, [pc, #224]	@ (8109688 <LL_RCC_GetPLL1ClockFreq+0x124>)
 81095a8:	fa22 f303 	lsr.w	r3, r2, r3
 81095ac:	61fb      	str	r3, [r7, #28]
      break;
 81095ae:	e011      	b.n	81095d4 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 81095b0:	f7ff fd0a 	bl	8108fc8 <LL_RCC_CSI_IsReady>
 81095b4:	4603      	mov	r3, r0
 81095b6:	2b00      	cmp	r3, #0
 81095b8:	d00e      	beq.n	81095d8 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 81095ba:	4b34      	ldr	r3, [pc, #208]	@ (810968c <LL_RCC_GetPLL1ClockFreq+0x128>)
 81095bc:	61fb      	str	r3, [r7, #28]
      break;
 81095be:	e00b      	b.n	81095d8 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 81095c0:	f7ff fcce 	bl	8108f60 <LL_RCC_HSE_IsReady>
 81095c4:	4603      	mov	r3, r0
 81095c6:	2b00      	cmp	r3, #0
 81095c8:	d008      	beq.n	81095dc <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 81095ca:	4b31      	ldr	r3, [pc, #196]	@ (8109690 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 81095cc:	61fb      	str	r3, [r7, #28]
      break;
 81095ce:	e005      	b.n	81095dc <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 81095d0:	bf00      	nop
 81095d2:	e004      	b.n	81095de <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 81095d4:	bf00      	nop
 81095d6:	e002      	b.n	81095de <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 81095d8:	bf00      	nop
 81095da:	e000      	b.n	81095de <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 81095dc:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 81095de:	687b      	ldr	r3, [r7, #4]
 81095e0:	2200      	movs	r2, #0
 81095e2:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 81095e4:	687b      	ldr	r3, [r7, #4]
 81095e6:	2200      	movs	r2, #0
 81095e8:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 81095ea:	687b      	ldr	r3, [r7, #4]
 81095ec:	2200      	movs	r2, #0
 81095ee:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 81095f0:	f7ff fdf2 	bl	81091d8 <LL_RCC_PLL1_GetM>
 81095f4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 81095f6:	f7ff fde1 	bl	81091bc <LL_RCC_PLL1_GetN>
 81095fa:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 81095fc:	f7ff fdcc 	bl	8109198 <LL_RCC_PLL1FRACN_IsEnabled>
 8109600:	4603      	mov	r3, r0
 8109602:	2b00      	cmp	r3, #0
 8109604:	d002      	beq.n	810960c <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8109606:	f7ff fe25 	bl	8109254 <LL_RCC_PLL1_GetFRACN>
 810960a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 810960c:	693b      	ldr	r3, [r7, #16]
 810960e:	2b00      	cmp	r3, #0
 8109610:	d035      	beq.n	810967e <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 8109612:	f7ff fd85 	bl	8109120 <LL_RCC_PLL1P_IsEnabled>
 8109616:	4603      	mov	r3, r0
 8109618:	2b00      	cmp	r3, #0
 810961a:	d00c      	beq.n	8109636 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 810961c:	f7ff fdea 	bl	81091f4 <LL_RCC_PLL1_GetP>
 8109620:	4603      	mov	r3, r0
 8109622:	9300      	str	r3, [sp, #0]
 8109624:	69bb      	ldr	r3, [r7, #24]
 8109626:	68fa      	ldr	r2, [r7, #12]
 8109628:	6939      	ldr	r1, [r7, #16]
 810962a:	69f8      	ldr	r0, [r7, #28]
 810962c:	f000 f964 	bl	81098f8 <LL_RCC_CalcPLLClockFreq>
 8109630:	4602      	mov	r2, r0
 8109632:	687b      	ldr	r3, [r7, #4]
 8109634:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 8109636:	f7ff fd87 	bl	8109148 <LL_RCC_PLL1Q_IsEnabled>
 810963a:	4603      	mov	r3, r0
 810963c:	2b00      	cmp	r3, #0
 810963e:	d00c      	beq.n	810965a <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8109640:	f7ff fde8 	bl	8109214 <LL_RCC_PLL1_GetQ>
 8109644:	4603      	mov	r3, r0
 8109646:	9300      	str	r3, [sp, #0]
 8109648:	69bb      	ldr	r3, [r7, #24]
 810964a:	68fa      	ldr	r2, [r7, #12]
 810964c:	6939      	ldr	r1, [r7, #16]
 810964e:	69f8      	ldr	r0, [r7, #28]
 8109650:	f000 f952 	bl	81098f8 <LL_RCC_CalcPLLClockFreq>
 8109654:	4602      	mov	r2, r0
 8109656:	687b      	ldr	r3, [r7, #4]
 8109658:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 810965a:	f7ff fd89 	bl	8109170 <LL_RCC_PLL1R_IsEnabled>
 810965e:	4603      	mov	r3, r0
 8109660:	2b00      	cmp	r3, #0
 8109662:	d00c      	beq.n	810967e <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8109664:	f7ff fde6 	bl	8109234 <LL_RCC_PLL1_GetR>
 8109668:	4603      	mov	r3, r0
 810966a:	9300      	str	r3, [sp, #0]
 810966c:	69bb      	ldr	r3, [r7, #24]
 810966e:	68fa      	ldr	r2, [r7, #12]
 8109670:	6939      	ldr	r1, [r7, #16]
 8109672:	69f8      	ldr	r0, [r7, #28]
 8109674:	f000 f940 	bl	81098f8 <LL_RCC_CalcPLLClockFreq>
 8109678:	4602      	mov	r2, r0
 810967a:	687b      	ldr	r3, [r7, #4]
 810967c:	609a      	str	r2, [r3, #8]
    }
  }
}
 810967e:	bf00      	nop
 8109680:	3720      	adds	r7, #32
 8109682:	46bd      	mov	sp, r7
 8109684:	bd80      	pop	{r7, pc}
 8109686:	bf00      	nop
 8109688:	03d09000 	.word	0x03d09000
 810968c:	003d0900 	.word	0x003d0900
 8109690:	017d7840 	.word	0x017d7840

08109694 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8109694:	b580      	push	{r7, lr}
 8109696:	b08a      	sub	sp, #40	@ 0x28
 8109698:	af02      	add	r7, sp, #8
 810969a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 810969c:	2300      	movs	r3, #0
 810969e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 81096a0:	2300      	movs	r3, #0
 81096a2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 81096a4:	f7ff fd2e 	bl	8109104 <LL_RCC_PLL_GetSource>
 81096a8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 81096aa:	697b      	ldr	r3, [r7, #20]
 81096ac:	2b02      	cmp	r3, #2
 81096ae:	d01f      	beq.n	81096f0 <LL_RCC_GetPLL2ClockFreq+0x5c>
 81096b0:	697b      	ldr	r3, [r7, #20]
 81096b2:	2b02      	cmp	r3, #2
 81096b4:	d824      	bhi.n	8109700 <LL_RCC_GetPLL2ClockFreq+0x6c>
 81096b6:	697b      	ldr	r3, [r7, #20]
 81096b8:	2b00      	cmp	r3, #0
 81096ba:	d003      	beq.n	81096c4 <LL_RCC_GetPLL2ClockFreq+0x30>
 81096bc:	697b      	ldr	r3, [r7, #20]
 81096be:	2b01      	cmp	r3, #1
 81096c0:	d00e      	beq.n	81096e0 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 81096c2:	e01d      	b.n	8109700 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 81096c4:	f7ff fc60 	bl	8108f88 <LL_RCC_HSI_IsReady>
 81096c8:	4603      	mov	r3, r0
 81096ca:	2b00      	cmp	r3, #0
 81096cc:	d01a      	beq.n	8109704 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 81096ce:	f7ff fc6d 	bl	8108fac <LL_RCC_HSI_GetDivider>
 81096d2:	4603      	mov	r3, r0
 81096d4:	08db      	lsrs	r3, r3, #3
 81096d6:	4a38      	ldr	r2, [pc, #224]	@ (81097b8 <LL_RCC_GetPLL2ClockFreq+0x124>)
 81096d8:	fa22 f303 	lsr.w	r3, r2, r3
 81096dc:	61fb      	str	r3, [r7, #28]
      break;
 81096de:	e011      	b.n	8109704 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 81096e0:	f7ff fc72 	bl	8108fc8 <LL_RCC_CSI_IsReady>
 81096e4:	4603      	mov	r3, r0
 81096e6:	2b00      	cmp	r3, #0
 81096e8:	d00e      	beq.n	8109708 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 81096ea:	4b34      	ldr	r3, [pc, #208]	@ (81097bc <LL_RCC_GetPLL2ClockFreq+0x128>)
 81096ec:	61fb      	str	r3, [r7, #28]
      break;
 81096ee:	e00b      	b.n	8109708 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 81096f0:	f7ff fc36 	bl	8108f60 <LL_RCC_HSE_IsReady>
 81096f4:	4603      	mov	r3, r0
 81096f6:	2b00      	cmp	r3, #0
 81096f8:	d008      	beq.n	810970c <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 81096fa:	4b31      	ldr	r3, [pc, #196]	@ (81097c0 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 81096fc:	61fb      	str	r3, [r7, #28]
      break;
 81096fe:	e005      	b.n	810970c <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8109700:	bf00      	nop
 8109702:	e004      	b.n	810970e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8109704:	bf00      	nop
 8109706:	e002      	b.n	810970e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8109708:	bf00      	nop
 810970a:	e000      	b.n	810970e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 810970c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 810970e:	687b      	ldr	r3, [r7, #4]
 8109710:	2200      	movs	r2, #0
 8109712:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8109714:	687b      	ldr	r3, [r7, #4]
 8109716:	2200      	movs	r2, #0
 8109718:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 810971a:	687b      	ldr	r3, [r7, #4]
 810971c:	2200      	movs	r2, #0
 810971e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8109720:	f7ff fe16 	bl	8109350 <LL_RCC_PLL2_GetM>
 8109724:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8109726:	f7ff fe05 	bl	8109334 <LL_RCC_PLL2_GetN>
 810972a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 810972c:	f7ff fdf0 	bl	8109310 <LL_RCC_PLL2FRACN_IsEnabled>
 8109730:	4603      	mov	r3, r0
 8109732:	2b00      	cmp	r3, #0
 8109734:	d002      	beq.n	810973c <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8109736:	f7ff fe49 	bl	81093cc <LL_RCC_PLL2_GetFRACN>
 810973a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 810973c:	693b      	ldr	r3, [r7, #16]
 810973e:	2b00      	cmp	r3, #0
 8109740:	d035      	beq.n	81097ae <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8109742:	f7ff fda9 	bl	8109298 <LL_RCC_PLL2P_IsEnabled>
 8109746:	4603      	mov	r3, r0
 8109748:	2b00      	cmp	r3, #0
 810974a:	d00c      	beq.n	8109766 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 810974c:	f7ff fe0e 	bl	810936c <LL_RCC_PLL2_GetP>
 8109750:	4603      	mov	r3, r0
 8109752:	9300      	str	r3, [sp, #0]
 8109754:	69bb      	ldr	r3, [r7, #24]
 8109756:	68fa      	ldr	r2, [r7, #12]
 8109758:	6939      	ldr	r1, [r7, #16]
 810975a:	69f8      	ldr	r0, [r7, #28]
 810975c:	f000 f8cc 	bl	81098f8 <LL_RCC_CalcPLLClockFreq>
 8109760:	4602      	mov	r2, r0
 8109762:	687b      	ldr	r3, [r7, #4]
 8109764:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8109766:	f7ff fdab 	bl	81092c0 <LL_RCC_PLL2Q_IsEnabled>
 810976a:	4603      	mov	r3, r0
 810976c:	2b00      	cmp	r3, #0
 810976e:	d00c      	beq.n	810978a <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8109770:	f7ff fe0c 	bl	810938c <LL_RCC_PLL2_GetQ>
 8109774:	4603      	mov	r3, r0
 8109776:	9300      	str	r3, [sp, #0]
 8109778:	69bb      	ldr	r3, [r7, #24]
 810977a:	68fa      	ldr	r2, [r7, #12]
 810977c:	6939      	ldr	r1, [r7, #16]
 810977e:	69f8      	ldr	r0, [r7, #28]
 8109780:	f000 f8ba 	bl	81098f8 <LL_RCC_CalcPLLClockFreq>
 8109784:	4602      	mov	r2, r0
 8109786:	687b      	ldr	r3, [r7, #4]
 8109788:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 810978a:	f7ff fdad 	bl	81092e8 <LL_RCC_PLL2R_IsEnabled>
 810978e:	4603      	mov	r3, r0
 8109790:	2b00      	cmp	r3, #0
 8109792:	d00c      	beq.n	81097ae <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8109794:	f7ff fe0a 	bl	81093ac <LL_RCC_PLL2_GetR>
 8109798:	4603      	mov	r3, r0
 810979a:	9300      	str	r3, [sp, #0]
 810979c:	69bb      	ldr	r3, [r7, #24]
 810979e:	68fa      	ldr	r2, [r7, #12]
 81097a0:	6939      	ldr	r1, [r7, #16]
 81097a2:	69f8      	ldr	r0, [r7, #28]
 81097a4:	f000 f8a8 	bl	81098f8 <LL_RCC_CalcPLLClockFreq>
 81097a8:	4602      	mov	r2, r0
 81097aa:	687b      	ldr	r3, [r7, #4]
 81097ac:	609a      	str	r2, [r3, #8]
    }
  }
}
 81097ae:	bf00      	nop
 81097b0:	3720      	adds	r7, #32
 81097b2:	46bd      	mov	sp, r7
 81097b4:	bd80      	pop	{r7, pc}
 81097b6:	bf00      	nop
 81097b8:	03d09000 	.word	0x03d09000
 81097bc:	003d0900 	.word	0x003d0900
 81097c0:	017d7840 	.word	0x017d7840

081097c4 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 81097c4:	b580      	push	{r7, lr}
 81097c6:	b08a      	sub	sp, #40	@ 0x28
 81097c8:	af02      	add	r7, sp, #8
 81097ca:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 81097cc:	2300      	movs	r3, #0
 81097ce:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 81097d0:	2300      	movs	r3, #0
 81097d2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 81097d4:	f7ff fc96 	bl	8109104 <LL_RCC_PLL_GetSource>
 81097d8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 81097da:	697b      	ldr	r3, [r7, #20]
 81097dc:	2b02      	cmp	r3, #2
 81097de:	d01f      	beq.n	8109820 <LL_RCC_GetPLL3ClockFreq+0x5c>
 81097e0:	697b      	ldr	r3, [r7, #20]
 81097e2:	2b02      	cmp	r3, #2
 81097e4:	d824      	bhi.n	8109830 <LL_RCC_GetPLL3ClockFreq+0x6c>
 81097e6:	697b      	ldr	r3, [r7, #20]
 81097e8:	2b00      	cmp	r3, #0
 81097ea:	d003      	beq.n	81097f4 <LL_RCC_GetPLL3ClockFreq+0x30>
 81097ec:	697b      	ldr	r3, [r7, #20]
 81097ee:	2b01      	cmp	r3, #1
 81097f0:	d00e      	beq.n	8109810 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 81097f2:	e01d      	b.n	8109830 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 81097f4:	f7ff fbc8 	bl	8108f88 <LL_RCC_HSI_IsReady>
 81097f8:	4603      	mov	r3, r0
 81097fa:	2b00      	cmp	r3, #0
 81097fc:	d01a      	beq.n	8109834 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 81097fe:	f7ff fbd5 	bl	8108fac <LL_RCC_HSI_GetDivider>
 8109802:	4603      	mov	r3, r0
 8109804:	08db      	lsrs	r3, r3, #3
 8109806:	4a39      	ldr	r2, [pc, #228]	@ (81098ec <LL_RCC_GetPLL3ClockFreq+0x128>)
 8109808:	fa22 f303 	lsr.w	r3, r2, r3
 810980c:	61fb      	str	r3, [r7, #28]
      break;
 810980e:	e011      	b.n	8109834 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8109810:	f7ff fbda 	bl	8108fc8 <LL_RCC_CSI_IsReady>
 8109814:	4603      	mov	r3, r0
 8109816:	2b00      	cmp	r3, #0
 8109818:	d00e      	beq.n	8109838 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 810981a:	4b35      	ldr	r3, [pc, #212]	@ (81098f0 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 810981c:	61fb      	str	r3, [r7, #28]
      break;
 810981e:	e00b      	b.n	8109838 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8109820:	f7ff fb9e 	bl	8108f60 <LL_RCC_HSE_IsReady>
 8109824:	4603      	mov	r3, r0
 8109826:	2b00      	cmp	r3, #0
 8109828:	d008      	beq.n	810983c <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 810982a:	4b32      	ldr	r3, [pc, #200]	@ (81098f4 <LL_RCC_GetPLL3ClockFreq+0x130>)
 810982c:	61fb      	str	r3, [r7, #28]
      break;
 810982e:	e005      	b.n	810983c <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8109830:	bf00      	nop
 8109832:	e004      	b.n	810983e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8109834:	bf00      	nop
 8109836:	e002      	b.n	810983e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8109838:	bf00      	nop
 810983a:	e000      	b.n	810983e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 810983c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 810983e:	687b      	ldr	r3, [r7, #4]
 8109840:	2200      	movs	r2, #0
 8109842:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8109844:	687b      	ldr	r3, [r7, #4]
 8109846:	2200      	movs	r2, #0
 8109848:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 810984a:	687b      	ldr	r3, [r7, #4]
 810984c:	2200      	movs	r2, #0
 810984e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8109850:	f7ff fe3c 	bl	81094cc <LL_RCC_PLL3_GetM>
 8109854:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 8109856:	f7ff fe2b 	bl	81094b0 <LL_RCC_PLL3_GetN>
 810985a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 810985c:	f7ff fe14 	bl	8109488 <LL_RCC_PLL3FRACN_IsEnabled>
 8109860:	4603      	mov	r3, r0
 8109862:	2b00      	cmp	r3, #0
 8109864:	d002      	beq.n	810986c <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 8109866:	f7ff fe6f 	bl	8109548 <LL_RCC_PLL3_GetFRACN>
 810986a:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 810986c:	693b      	ldr	r3, [r7, #16]
 810986e:	2b00      	cmp	r3, #0
 8109870:	d038      	beq.n	81098e4 <LL_RCC_GetPLL3ClockFreq+0x120>
 8109872:	69fb      	ldr	r3, [r7, #28]
 8109874:	2b00      	cmp	r3, #0
 8109876:	d035      	beq.n	81098e4 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8109878:	f7ff fdca 	bl	8109410 <LL_RCC_PLL3P_IsEnabled>
 810987c:	4603      	mov	r3, r0
 810987e:	2b00      	cmp	r3, #0
 8109880:	d00c      	beq.n	810989c <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 8109882:	f7ff fe31 	bl	81094e8 <LL_RCC_PLL3_GetP>
 8109886:	4603      	mov	r3, r0
 8109888:	9300      	str	r3, [sp, #0]
 810988a:	69bb      	ldr	r3, [r7, #24]
 810988c:	68fa      	ldr	r2, [r7, #12]
 810988e:	6939      	ldr	r1, [r7, #16]
 8109890:	69f8      	ldr	r0, [r7, #28]
 8109892:	f000 f831 	bl	81098f8 <LL_RCC_CalcPLLClockFreq>
 8109896:	4602      	mov	r2, r0
 8109898:	687b      	ldr	r3, [r7, #4]
 810989a:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 810989c:	f7ff fdcc 	bl	8109438 <LL_RCC_PLL3Q_IsEnabled>
 81098a0:	4603      	mov	r3, r0
 81098a2:	2b00      	cmp	r3, #0
 81098a4:	d00c      	beq.n	81098c0 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 81098a6:	f7ff fe2f 	bl	8109508 <LL_RCC_PLL3_GetQ>
 81098aa:	4603      	mov	r3, r0
 81098ac:	9300      	str	r3, [sp, #0]
 81098ae:	69bb      	ldr	r3, [r7, #24]
 81098b0:	68fa      	ldr	r2, [r7, #12]
 81098b2:	6939      	ldr	r1, [r7, #16]
 81098b4:	69f8      	ldr	r0, [r7, #28]
 81098b6:	f000 f81f 	bl	81098f8 <LL_RCC_CalcPLLClockFreq>
 81098ba:	4602      	mov	r2, r0
 81098bc:	687b      	ldr	r3, [r7, #4]
 81098be:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 81098c0:	f7ff fdce 	bl	8109460 <LL_RCC_PLL3R_IsEnabled>
 81098c4:	4603      	mov	r3, r0
 81098c6:	2b00      	cmp	r3, #0
 81098c8:	d00c      	beq.n	81098e4 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 81098ca:	f7ff fe2d 	bl	8109528 <LL_RCC_PLL3_GetR>
 81098ce:	4603      	mov	r3, r0
 81098d0:	9300      	str	r3, [sp, #0]
 81098d2:	69bb      	ldr	r3, [r7, #24]
 81098d4:	68fa      	ldr	r2, [r7, #12]
 81098d6:	6939      	ldr	r1, [r7, #16]
 81098d8:	69f8      	ldr	r0, [r7, #28]
 81098da:	f000 f80d 	bl	81098f8 <LL_RCC_CalcPLLClockFreq>
 81098de:	4602      	mov	r2, r0
 81098e0:	687b      	ldr	r3, [r7, #4]
 81098e2:	609a      	str	r2, [r3, #8]
    }
  }
}
 81098e4:	bf00      	nop
 81098e6:	3720      	adds	r7, #32
 81098e8:	46bd      	mov	sp, r7
 81098ea:	bd80      	pop	{r7, pc}
 81098ec:	03d09000 	.word	0x03d09000
 81098f0:	003d0900 	.word	0x003d0900
 81098f4:	017d7840 	.word	0x017d7840

081098f8 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 81098f8:	b480      	push	{r7}
 81098fa:	b087      	sub	sp, #28
 81098fc:	af00      	add	r7, sp, #0
 81098fe:	60f8      	str	r0, [r7, #12]
 8109900:	60b9      	str	r1, [r7, #8]
 8109902:	607a      	str	r2, [r7, #4]
 8109904:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8109906:	68fb      	ldr	r3, [r7, #12]
 8109908:	ee07 3a90 	vmov	s15, r3
 810990c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109910:	68bb      	ldr	r3, [r7, #8]
 8109912:	ee07 3a90 	vmov	s15, r3
 8109916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810991e:	687b      	ldr	r3, [r7, #4]
 8109920:	ee07 3a90 	vmov	s15, r3
 8109924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109928:	683b      	ldr	r3, [r7, #0]
 810992a:	ee07 3a90 	vmov	s15, r3
 810992e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8109932:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8109974 <LL_RCC_CalcPLLClockFreq+0x7c>
 8109936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810993e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109942:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 8109946:	6a3b      	ldr	r3, [r7, #32]
 8109948:	ee07 3a90 	vmov	s15, r3
 810994c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8109950:	edd7 6a05 	vldr	s13, [r7, #20]
 8109954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109958:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 810995c:	edd7 7a05 	vldr	s15, [r7, #20]
 8109960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109964:	ee17 3a90 	vmov	r3, s15
}
 8109968:	4618      	mov	r0, r3
 810996a:	371c      	adds	r7, #28
 810996c:	46bd      	mov	sp, r7
 810996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109972:	4770      	bx	lr
 8109974:	46000000 	.word	0x46000000

08109978 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8109978:	b590      	push	{r4, r7, lr}
 810997a:	b087      	sub	sp, #28
 810997c:	af00      	add	r7, sp, #0
 810997e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8109980:	2300      	movs	r3, #0
 8109982:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8109984:	6878      	ldr	r0, [r7, #4]
 8109986:	f7ff fbb1 	bl	81090ec <LL_RCC_GetUSARTClockSource>
 810998a:	4603      	mov	r3, r0
 810998c:	4a62      	ldr	r2, [pc, #392]	@ (8109b18 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 810998e:	4293      	cmp	r3, r2
 8109990:	f000 80a9 	beq.w	8109ae6 <LL_RCC_GetUSARTClockFreq+0x16e>
 8109994:	4a60      	ldr	r2, [pc, #384]	@ (8109b18 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8109996:	4293      	cmp	r3, r2
 8109998:	f200 80ae 	bhi.w	8109af8 <LL_RCC_GetUSARTClockFreq+0x180>
 810999c:	4a5f      	ldr	r2, [pc, #380]	@ (8109b1c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 810999e:	4293      	cmp	r3, r2
 81099a0:	f000 80a1 	beq.w	8109ae6 <LL_RCC_GetUSARTClockFreq+0x16e>
 81099a4:	4a5d      	ldr	r2, [pc, #372]	@ (8109b1c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 81099a6:	4293      	cmp	r3, r2
 81099a8:	f200 80a6 	bhi.w	8109af8 <LL_RCC_GetUSARTClockFreq+0x180>
 81099ac:	4a5c      	ldr	r2, [pc, #368]	@ (8109b20 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 81099ae:	4293      	cmp	r3, r2
 81099b0:	f000 8091 	beq.w	8109ad6 <LL_RCC_GetUSARTClockFreq+0x15e>
 81099b4:	4a5a      	ldr	r2, [pc, #360]	@ (8109b20 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 81099b6:	4293      	cmp	r3, r2
 81099b8:	f200 809e 	bhi.w	8109af8 <LL_RCC_GetUSARTClockFreq+0x180>
 81099bc:	4a59      	ldr	r2, [pc, #356]	@ (8109b24 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 81099be:	4293      	cmp	r3, r2
 81099c0:	f000 8089 	beq.w	8109ad6 <LL_RCC_GetUSARTClockFreq+0x15e>
 81099c4:	4a57      	ldr	r2, [pc, #348]	@ (8109b24 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 81099c6:	4293      	cmp	r3, r2
 81099c8:	f200 8096 	bhi.w	8109af8 <LL_RCC_GetUSARTClockFreq+0x180>
 81099cc:	4a56      	ldr	r2, [pc, #344]	@ (8109b28 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 81099ce:	4293      	cmp	r3, r2
 81099d0:	d073      	beq.n	8109aba <LL_RCC_GetUSARTClockFreq+0x142>
 81099d2:	4a55      	ldr	r2, [pc, #340]	@ (8109b28 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 81099d4:	4293      	cmp	r3, r2
 81099d6:	f200 808f 	bhi.w	8109af8 <LL_RCC_GetUSARTClockFreq+0x180>
 81099da:	4a54      	ldr	r2, [pc, #336]	@ (8109b2c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 81099dc:	4293      	cmp	r3, r2
 81099de:	d06c      	beq.n	8109aba <LL_RCC_GetUSARTClockFreq+0x142>
 81099e0:	4a52      	ldr	r2, [pc, #328]	@ (8109b2c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 81099e2:	4293      	cmp	r3, r2
 81099e4:	f200 8088 	bhi.w	8109af8 <LL_RCC_GetUSARTClockFreq+0x180>
 81099e8:	4a51      	ldr	r2, [pc, #324]	@ (8109b30 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 81099ea:	4293      	cmp	r3, r2
 81099ec:	d058      	beq.n	8109aa0 <LL_RCC_GetUSARTClockFreq+0x128>
 81099ee:	4a50      	ldr	r2, [pc, #320]	@ (8109b30 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 81099f0:	4293      	cmp	r3, r2
 81099f2:	f200 8081 	bhi.w	8109af8 <LL_RCC_GetUSARTClockFreq+0x180>
 81099f6:	4a4f      	ldr	r2, [pc, #316]	@ (8109b34 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 81099f8:	4293      	cmp	r3, r2
 81099fa:	d051      	beq.n	8109aa0 <LL_RCC_GetUSARTClockFreq+0x128>
 81099fc:	4a4d      	ldr	r2, [pc, #308]	@ (8109b34 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 81099fe:	4293      	cmp	r3, r2
 8109a00:	d87a      	bhi.n	8109af8 <LL_RCC_GetUSARTClockFreq+0x180>
 8109a02:	4a4d      	ldr	r2, [pc, #308]	@ (8109b38 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8109a04:	4293      	cmp	r3, r2
 8109a06:	d03e      	beq.n	8109a86 <LL_RCC_GetUSARTClockFreq+0x10e>
 8109a08:	4a4b      	ldr	r2, [pc, #300]	@ (8109b38 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8109a0a:	4293      	cmp	r3, r2
 8109a0c:	d874      	bhi.n	8109af8 <LL_RCC_GetUSARTClockFreq+0x180>
 8109a0e:	4a4b      	ldr	r2, [pc, #300]	@ (8109b3c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8109a10:	4293      	cmp	r3, r2
 8109a12:	d038      	beq.n	8109a86 <LL_RCC_GetUSARTClockFreq+0x10e>
 8109a14:	4a49      	ldr	r2, [pc, #292]	@ (8109b3c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8109a16:	4293      	cmp	r3, r2
 8109a18:	d86e      	bhi.n	8109af8 <LL_RCC_GetUSARTClockFreq+0x180>
 8109a1a:	4a49      	ldr	r2, [pc, #292]	@ (8109b40 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8109a1c:	4293      	cmp	r3, r2
 8109a1e:	d01a      	beq.n	8109a56 <LL_RCC_GetUSARTClockFreq+0xde>
 8109a20:	4a48      	ldr	r2, [pc, #288]	@ (8109b44 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8109a22:	4293      	cmp	r3, r2
 8109a24:	d168      	bne.n	8109af8 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8109a26:	f000 f895 	bl	8109b54 <RCC_GetSystemClockFreq>
 8109a2a:	4604      	mov	r4, r0
 8109a2c:	f7ff fb00 	bl	8109030 <LL_RCC_GetSysPrescaler>
 8109a30:	4603      	mov	r3, r0
 8109a32:	0a1b      	lsrs	r3, r3, #8
 8109a34:	f003 030f 	and.w	r3, r3, #15
 8109a38:	4a43      	ldr	r2, [pc, #268]	@ (8109b48 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8109a3a:	5cd3      	ldrb	r3, [r2, r3]
 8109a3c:	f003 031f 	and.w	r3, r3, #31
 8109a40:	fa24 f303 	lsr.w	r3, r4, r3
 8109a44:	4618      	mov	r0, r3
 8109a46:	f000 f8e7 	bl	8109c18 <RCC_GetHCLKClockFreq>
 8109a4a:	4603      	mov	r3, r0
 8109a4c:	4618      	mov	r0, r3
 8109a4e:	f000 f911 	bl	8109c74 <RCC_GetPCLK2ClockFreq>
 8109a52:	6178      	str	r0, [r7, #20]
      break;
 8109a54:	e05b      	b.n	8109b0e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8109a56:	f000 f87d 	bl	8109b54 <RCC_GetSystemClockFreq>
 8109a5a:	4604      	mov	r4, r0
 8109a5c:	f7ff fae8 	bl	8109030 <LL_RCC_GetSysPrescaler>
 8109a60:	4603      	mov	r3, r0
 8109a62:	0a1b      	lsrs	r3, r3, #8
 8109a64:	f003 030f 	and.w	r3, r3, #15
 8109a68:	4a37      	ldr	r2, [pc, #220]	@ (8109b48 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8109a6a:	5cd3      	ldrb	r3, [r2, r3]
 8109a6c:	f003 031f 	and.w	r3, r3, #31
 8109a70:	fa24 f303 	lsr.w	r3, r4, r3
 8109a74:	4618      	mov	r0, r3
 8109a76:	f000 f8cf 	bl	8109c18 <RCC_GetHCLKClockFreq>
 8109a7a:	4603      	mov	r3, r0
 8109a7c:	4618      	mov	r0, r3
 8109a7e:	f000 f8e1 	bl	8109c44 <RCC_GetPCLK1ClockFreq>
 8109a82:	6178      	str	r0, [r7, #20]
      break;
 8109a84:	e043      	b.n	8109b0e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 8109a86:	f7ff fbf3 	bl	8109270 <LL_RCC_PLL2_IsReady>
 8109a8a:	4603      	mov	r3, r0
 8109a8c:	2b00      	cmp	r3, #0
 8109a8e:	d035      	beq.n	8109afc <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8109a90:	f107 0308 	add.w	r3, r7, #8
 8109a94:	4618      	mov	r0, r3
 8109a96:	f7ff fdfd 	bl	8109694 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8109a9a:	68fb      	ldr	r3, [r7, #12]
 8109a9c:	617b      	str	r3, [r7, #20]
      }
      break;
 8109a9e:	e02d      	b.n	8109afc <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8109aa0:	f7ff fca2 	bl	81093e8 <LL_RCC_PLL3_IsReady>
 8109aa4:	4603      	mov	r3, r0
 8109aa6:	2b00      	cmp	r3, #0
 8109aa8:	d02a      	beq.n	8109b00 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8109aaa:	f107 0308 	add.w	r3, r7, #8
 8109aae:	4618      	mov	r0, r3
 8109ab0:	f7ff fe88 	bl	81097c4 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8109ab4:	68fb      	ldr	r3, [r7, #12]
 8109ab6:	617b      	str	r3, [r7, #20]
      }
      break;
 8109ab8:	e022      	b.n	8109b00 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8109aba:	f7ff fa65 	bl	8108f88 <LL_RCC_HSI_IsReady>
 8109abe:	4603      	mov	r3, r0
 8109ac0:	2b00      	cmp	r3, #0
 8109ac2:	d01f      	beq.n	8109b04 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8109ac4:	f7ff fa72 	bl	8108fac <LL_RCC_HSI_GetDivider>
 8109ac8:	4603      	mov	r3, r0
 8109aca:	08db      	lsrs	r3, r3, #3
 8109acc:	4a1f      	ldr	r2, [pc, #124]	@ (8109b4c <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8109ace:	fa22 f303 	lsr.w	r3, r2, r3
 8109ad2:	617b      	str	r3, [r7, #20]
      }
      break;
 8109ad4:	e016      	b.n	8109b04 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8109ad6:	f7ff fa77 	bl	8108fc8 <LL_RCC_CSI_IsReady>
 8109ada:	4603      	mov	r3, r0
 8109adc:	2b00      	cmp	r3, #0
 8109ade:	d013      	beq.n	8109b08 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8109ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8109b50 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8109ae2:	617b      	str	r3, [r7, #20]
      }
      break;
 8109ae4:	e010      	b.n	8109b08 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 8109ae6:	f7ff fa83 	bl	8108ff0 <LL_RCC_LSE_IsReady>
 8109aea:	4603      	mov	r3, r0
 8109aec:	2b00      	cmp	r3, #0
 8109aee:	d00d      	beq.n	8109b0c <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8109af0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8109af4:	617b      	str	r3, [r7, #20]
      }
      break;
 8109af6:	e009      	b.n	8109b0c <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8109af8:	bf00      	nop
 8109afa:	e008      	b.n	8109b0e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8109afc:	bf00      	nop
 8109afe:	e006      	b.n	8109b0e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8109b00:	bf00      	nop
 8109b02:	e004      	b.n	8109b0e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8109b04:	bf00      	nop
 8109b06:	e002      	b.n	8109b0e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8109b08:	bf00      	nop
 8109b0a:	e000      	b.n	8109b0e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8109b0c:	bf00      	nop
  }

  return usart_frequency;
 8109b0e:	697b      	ldr	r3, [r7, #20]
}
 8109b10:	4618      	mov	r0, r3
 8109b12:	371c      	adds	r7, #28
 8109b14:	46bd      	mov	sp, r7
 8109b16:	bd90      	pop	{r4, r7, pc}
 8109b18:	07050308 	.word	0x07050308
 8109b1c:	07050008 	.word	0x07050008
 8109b20:	07040308 	.word	0x07040308
 8109b24:	07040008 	.word	0x07040008
 8109b28:	07030308 	.word	0x07030308
 8109b2c:	07030008 	.word	0x07030008
 8109b30:	07020308 	.word	0x07020308
 8109b34:	07020008 	.word	0x07020008
 8109b38:	07010308 	.word	0x07010308
 8109b3c:	07010008 	.word	0x07010008
 8109b40:	07000008 	.word	0x07000008
 8109b44:	07000308 	.word	0x07000308
 8109b48:	0810ec40 	.word	0x0810ec40
 8109b4c:	03d09000 	.word	0x03d09000
 8109b50:	003d0900 	.word	0x003d0900

08109b54 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8109b54:	b580      	push	{r7, lr}
 8109b56:	b084      	sub	sp, #16
 8109b58:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8109b5a:	2300      	movs	r3, #0
 8109b5c:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8109b5e:	f7ff fa59 	bl	8109014 <LL_RCC_GetSysClkSource>
 8109b62:	4603      	mov	r3, r0
 8109b64:	2b18      	cmp	r3, #24
 8109b66:	d84b      	bhi.n	8109c00 <RCC_GetSystemClockFreq+0xac>
 8109b68:	a201      	add	r2, pc, #4	@ (adr r2, 8109b70 <RCC_GetSystemClockFreq+0x1c>)
 8109b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109b6e:	bf00      	nop
 8109b70:	08109bd5 	.word	0x08109bd5
 8109b74:	08109c01 	.word	0x08109c01
 8109b78:	08109c01 	.word	0x08109c01
 8109b7c:	08109c01 	.word	0x08109c01
 8109b80:	08109c01 	.word	0x08109c01
 8109b84:	08109c01 	.word	0x08109c01
 8109b88:	08109c01 	.word	0x08109c01
 8109b8c:	08109c01 	.word	0x08109c01
 8109b90:	08109be7 	.word	0x08109be7
 8109b94:	08109c01 	.word	0x08109c01
 8109b98:	08109c01 	.word	0x08109c01
 8109b9c:	08109c01 	.word	0x08109c01
 8109ba0:	08109c01 	.word	0x08109c01
 8109ba4:	08109c01 	.word	0x08109c01
 8109ba8:	08109c01 	.word	0x08109c01
 8109bac:	08109c01 	.word	0x08109c01
 8109bb0:	08109bed 	.word	0x08109bed
 8109bb4:	08109c01 	.word	0x08109c01
 8109bb8:	08109c01 	.word	0x08109c01
 8109bbc:	08109c01 	.word	0x08109c01
 8109bc0:	08109c01 	.word	0x08109c01
 8109bc4:	08109c01 	.word	0x08109c01
 8109bc8:	08109c01 	.word	0x08109c01
 8109bcc:	08109c01 	.word	0x08109c01
 8109bd0:	08109bf3 	.word	0x08109bf3
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8109bd4:	f7ff f9ea 	bl	8108fac <LL_RCC_HSI_GetDivider>
 8109bd8:	4603      	mov	r3, r0
 8109bda:	08db      	lsrs	r3, r3, #3
 8109bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8109c0c <RCC_GetSystemClockFreq+0xb8>)
 8109bde:	fa22 f303 	lsr.w	r3, r2, r3
 8109be2:	60fb      	str	r3, [r7, #12]
      break;
 8109be4:	e00d      	b.n	8109c02 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8109be6:	4b0a      	ldr	r3, [pc, #40]	@ (8109c10 <RCC_GetSystemClockFreq+0xbc>)
 8109be8:	60fb      	str	r3, [r7, #12]
      break;
 8109bea:	e00a      	b.n	8109c02 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8109bec:	4b09      	ldr	r3, [pc, #36]	@ (8109c14 <RCC_GetSystemClockFreq+0xc0>)
 8109bee:	60fb      	str	r3, [r7, #12]
      break;
 8109bf0:	e007      	b.n	8109c02 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8109bf2:	463b      	mov	r3, r7
 8109bf4:	4618      	mov	r0, r3
 8109bf6:	f7ff fcb5 	bl	8109564 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8109bfa:	683b      	ldr	r3, [r7, #0]
 8109bfc:	60fb      	str	r3, [r7, #12]
      break;
 8109bfe:	e000      	b.n	8109c02 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8109c00:	bf00      	nop
  }

  return frequency;
 8109c02:	68fb      	ldr	r3, [r7, #12]
}
 8109c04:	4618      	mov	r0, r3
 8109c06:	3710      	adds	r7, #16
 8109c08:	46bd      	mov	sp, r7
 8109c0a:	bd80      	pop	{r7, pc}
 8109c0c:	03d09000 	.word	0x03d09000
 8109c10:	003d0900 	.word	0x003d0900
 8109c14:	017d7840 	.word	0x017d7840

08109c18 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8109c18:	b580      	push	{r7, lr}
 8109c1a:	b082      	sub	sp, #8
 8109c1c:	af00      	add	r7, sp, #0
 8109c1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8109c20:	f7ff fa14 	bl	810904c <LL_RCC_GetAHBPrescaler>
 8109c24:	4603      	mov	r3, r0
 8109c26:	f003 030f 	and.w	r3, r3, #15
 8109c2a:	4a05      	ldr	r2, [pc, #20]	@ (8109c40 <RCC_GetHCLKClockFreq+0x28>)
 8109c2c:	5cd3      	ldrb	r3, [r2, r3]
 8109c2e:	f003 031f 	and.w	r3, r3, #31
 8109c32:	687a      	ldr	r2, [r7, #4]
 8109c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8109c38:	4618      	mov	r0, r3
 8109c3a:	3708      	adds	r7, #8
 8109c3c:	46bd      	mov	sp, r7
 8109c3e:	bd80      	pop	{r7, pc}
 8109c40:	0810ec40 	.word	0x0810ec40

08109c44 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8109c44:	b580      	push	{r7, lr}
 8109c46:	b082      	sub	sp, #8
 8109c48:	af00      	add	r7, sp, #0
 8109c4a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8109c4c:	f7ff fa0c 	bl	8109068 <LL_RCC_GetAPB1Prescaler>
 8109c50:	4603      	mov	r3, r0
 8109c52:	091b      	lsrs	r3, r3, #4
 8109c54:	f003 0307 	and.w	r3, r3, #7
 8109c58:	4a05      	ldr	r2, [pc, #20]	@ (8109c70 <RCC_GetPCLK1ClockFreq+0x2c>)
 8109c5a:	5cd3      	ldrb	r3, [r2, r3]
 8109c5c:	f003 031f 	and.w	r3, r3, #31
 8109c60:	687a      	ldr	r2, [r7, #4]
 8109c62:	fa22 f303 	lsr.w	r3, r2, r3
}
 8109c66:	4618      	mov	r0, r3
 8109c68:	3708      	adds	r7, #8
 8109c6a:	46bd      	mov	sp, r7
 8109c6c:	bd80      	pop	{r7, pc}
 8109c6e:	bf00      	nop
 8109c70:	0810ec40 	.word	0x0810ec40

08109c74 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8109c74:	b580      	push	{r7, lr}
 8109c76:	b082      	sub	sp, #8
 8109c78:	af00      	add	r7, sp, #0
 8109c7a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8109c7c:	f7ff fa02 	bl	8109084 <LL_RCC_GetAPB2Prescaler>
 8109c80:	4603      	mov	r3, r0
 8109c82:	0a1b      	lsrs	r3, r3, #8
 8109c84:	f003 0307 	and.w	r3, r3, #7
 8109c88:	4a05      	ldr	r2, [pc, #20]	@ (8109ca0 <RCC_GetPCLK2ClockFreq+0x2c>)
 8109c8a:	5cd3      	ldrb	r3, [r2, r3]
 8109c8c:	f003 031f 	and.w	r3, r3, #31
 8109c90:	687a      	ldr	r2, [r7, #4]
 8109c92:	fa22 f303 	lsr.w	r3, r2, r3
}
 8109c96:	4618      	mov	r0, r3
 8109c98:	3708      	adds	r7, #8
 8109c9a:	46bd      	mov	sp, r7
 8109c9c:	bd80      	pop	{r7, pc}
 8109c9e:	bf00      	nop
 8109ca0:	0810ec40 	.word	0x0810ec40

08109ca4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8109ca4:	b084      	sub	sp, #16
 8109ca6:	b480      	push	{r7}
 8109ca8:	b085      	sub	sp, #20
 8109caa:	af00      	add	r7, sp, #0
 8109cac:	6078      	str	r0, [r7, #4]
 8109cae:	f107 001c 	add.w	r0, r7, #28
 8109cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8109cb6:	2300      	movs	r3, #0
 8109cb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8109cba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8109cbc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8109cbe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8109cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8109cc2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8109cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8109cc6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8109cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8109cca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8109ccc:	68fa      	ldr	r2, [r7, #12]
 8109cce:	4313      	orrs	r3, r2
 8109cd0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8109cd2:	687b      	ldr	r3, [r7, #4]
 8109cd4:	685a      	ldr	r2, [r3, #4]
 8109cd6:	4b07      	ldr	r3, [pc, #28]	@ (8109cf4 <SDMMC_Init+0x50>)
 8109cd8:	4013      	ands	r3, r2
 8109cda:	68fa      	ldr	r2, [r7, #12]
 8109cdc:	431a      	orrs	r2, r3
 8109cde:	687b      	ldr	r3, [r7, #4]
 8109ce0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8109ce2:	2300      	movs	r3, #0
}
 8109ce4:	4618      	mov	r0, r3
 8109ce6:	3714      	adds	r7, #20
 8109ce8:	46bd      	mov	sp, r7
 8109cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cee:	b004      	add	sp, #16
 8109cf0:	4770      	bx	lr
 8109cf2:	bf00      	nop
 8109cf4:	ffc02c00 	.word	0xffc02c00

08109cf8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8109cf8:	b480      	push	{r7}
 8109cfa:	b083      	sub	sp, #12
 8109cfc:	af00      	add	r7, sp, #0
 8109cfe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8109d00:	687b      	ldr	r3, [r7, #4]
 8109d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8109d06:	4618      	mov	r0, r3
 8109d08:	370c      	adds	r7, #12
 8109d0a:	46bd      	mov	sp, r7
 8109d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d10:	4770      	bx	lr

08109d12 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8109d12:	b480      	push	{r7}
 8109d14:	b083      	sub	sp, #12
 8109d16:	af00      	add	r7, sp, #0
 8109d18:	6078      	str	r0, [r7, #4]
 8109d1a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8109d1c:	683b      	ldr	r3, [r7, #0]
 8109d1e:	681a      	ldr	r2, [r3, #0]
 8109d20:	687b      	ldr	r3, [r7, #4]
 8109d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8109d26:	2300      	movs	r3, #0
}
 8109d28:	4618      	mov	r0, r3
 8109d2a:	370c      	adds	r7, #12
 8109d2c:	46bd      	mov	sp, r7
 8109d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d32:	4770      	bx	lr

08109d34 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8109d34:	b480      	push	{r7}
 8109d36:	b083      	sub	sp, #12
 8109d38:	af00      	add	r7, sp, #0
 8109d3a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8109d3c:	687b      	ldr	r3, [r7, #4]
 8109d3e:	681b      	ldr	r3, [r3, #0]
 8109d40:	f043 0203 	orr.w	r2, r3, #3
 8109d44:	687b      	ldr	r3, [r7, #4]
 8109d46:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8109d48:	2300      	movs	r3, #0
}
 8109d4a:	4618      	mov	r0, r3
 8109d4c:	370c      	adds	r7, #12
 8109d4e:	46bd      	mov	sp, r7
 8109d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d54:	4770      	bx	lr

08109d56 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8109d56:	b480      	push	{r7}
 8109d58:	b083      	sub	sp, #12
 8109d5a:	af00      	add	r7, sp, #0
 8109d5c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8109d5e:	687b      	ldr	r3, [r7, #4]
 8109d60:	681b      	ldr	r3, [r3, #0]
 8109d62:	f003 0303 	and.w	r3, r3, #3
}
 8109d66:	4618      	mov	r0, r3
 8109d68:	370c      	adds	r7, #12
 8109d6a:	46bd      	mov	sp, r7
 8109d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d70:	4770      	bx	lr
	...

08109d74 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8109d74:	b480      	push	{r7}
 8109d76:	b085      	sub	sp, #20
 8109d78:	af00      	add	r7, sp, #0
 8109d7a:	6078      	str	r0, [r7, #4]
 8109d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8109d7e:	2300      	movs	r3, #0
 8109d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8109d82:	683b      	ldr	r3, [r7, #0]
 8109d84:	681a      	ldr	r2, [r3, #0]
 8109d86:	687b      	ldr	r3, [r7, #4]
 8109d88:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8109d8a:	683b      	ldr	r3, [r7, #0]
 8109d8c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8109d8e:	683b      	ldr	r3, [r7, #0]
 8109d90:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8109d92:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8109d94:	683b      	ldr	r3, [r7, #0]
 8109d96:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8109d98:	431a      	orrs	r2, r3
                       Command->CPSM);
 8109d9a:	683b      	ldr	r3, [r7, #0]
 8109d9c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8109d9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8109da0:	68fa      	ldr	r2, [r7, #12]
 8109da2:	4313      	orrs	r3, r2
 8109da4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8109da6:	687b      	ldr	r3, [r7, #4]
 8109da8:	68da      	ldr	r2, [r3, #12]
 8109daa:	4b06      	ldr	r3, [pc, #24]	@ (8109dc4 <SDMMC_SendCommand+0x50>)
 8109dac:	4013      	ands	r3, r2
 8109dae:	68fa      	ldr	r2, [r7, #12]
 8109db0:	431a      	orrs	r2, r3
 8109db2:	687b      	ldr	r3, [r7, #4]
 8109db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8109db6:	2300      	movs	r3, #0
}
 8109db8:	4618      	mov	r0, r3
 8109dba:	3714      	adds	r7, #20
 8109dbc:	46bd      	mov	sp, r7
 8109dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dc2:	4770      	bx	lr
 8109dc4:	fffee0c0 	.word	0xfffee0c0

08109dc8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8109dc8:	b480      	push	{r7}
 8109dca:	b083      	sub	sp, #12
 8109dcc:	af00      	add	r7, sp, #0
 8109dce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8109dd0:	687b      	ldr	r3, [r7, #4]
 8109dd2:	691b      	ldr	r3, [r3, #16]
 8109dd4:	b2db      	uxtb	r3, r3
}
 8109dd6:	4618      	mov	r0, r3
 8109dd8:	370c      	adds	r7, #12
 8109dda:	46bd      	mov	sp, r7
 8109ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109de0:	4770      	bx	lr

08109de2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8109de2:	b480      	push	{r7}
 8109de4:	b085      	sub	sp, #20
 8109de6:	af00      	add	r7, sp, #0
 8109de8:	6078      	str	r0, [r7, #4]
 8109dea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8109dec:	687b      	ldr	r3, [r7, #4]
 8109dee:	3314      	adds	r3, #20
 8109df0:	461a      	mov	r2, r3
 8109df2:	683b      	ldr	r3, [r7, #0]
 8109df4:	4413      	add	r3, r2
 8109df6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8109df8:	68fb      	ldr	r3, [r7, #12]
 8109dfa:	681b      	ldr	r3, [r3, #0]
}
 8109dfc:	4618      	mov	r0, r3
 8109dfe:	3714      	adds	r7, #20
 8109e00:	46bd      	mov	sp, r7
 8109e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e06:	4770      	bx	lr

08109e08 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8109e08:	b480      	push	{r7}
 8109e0a:	b085      	sub	sp, #20
 8109e0c:	af00      	add	r7, sp, #0
 8109e0e:	6078      	str	r0, [r7, #4]
 8109e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8109e12:	2300      	movs	r3, #0
 8109e14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8109e16:	683b      	ldr	r3, [r7, #0]
 8109e18:	681a      	ldr	r2, [r3, #0]
 8109e1a:	687b      	ldr	r3, [r7, #4]
 8109e1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8109e1e:	683b      	ldr	r3, [r7, #0]
 8109e20:	685a      	ldr	r2, [r3, #4]
 8109e22:	687b      	ldr	r3, [r7, #4]
 8109e24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8109e26:	683b      	ldr	r3, [r7, #0]
 8109e28:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8109e2a:	683b      	ldr	r3, [r7, #0]
 8109e2c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8109e2e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8109e30:	683b      	ldr	r3, [r7, #0]
 8109e32:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8109e34:	431a      	orrs	r2, r3
                       Data->DPSM);
 8109e36:	683b      	ldr	r3, [r7, #0]
 8109e38:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8109e3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8109e3c:	68fa      	ldr	r2, [r7, #12]
 8109e3e:	4313      	orrs	r3, r2
 8109e40:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8109e42:	687b      	ldr	r3, [r7, #4]
 8109e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109e46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8109e4a:	68fb      	ldr	r3, [r7, #12]
 8109e4c:	431a      	orrs	r2, r3
 8109e4e:	687b      	ldr	r3, [r7, #4]
 8109e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8109e52:	2300      	movs	r3, #0

}
 8109e54:	4618      	mov	r0, r3
 8109e56:	3714      	adds	r7, #20
 8109e58:	46bd      	mov	sp, r7
 8109e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e5e:	4770      	bx	lr

08109e60 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8109e60:	b580      	push	{r7, lr}
 8109e62:	b088      	sub	sp, #32
 8109e64:	af00      	add	r7, sp, #0
 8109e66:	6078      	str	r0, [r7, #4]
 8109e68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8109e6a:	683b      	ldr	r3, [r7, #0]
 8109e6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8109e6e:	2310      	movs	r3, #16
 8109e70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109e72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8109e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109e78:	2300      	movs	r3, #0
 8109e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109e80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109e82:	f107 0308 	add.w	r3, r7, #8
 8109e86:	4619      	mov	r1, r3
 8109e88:	6878      	ldr	r0, [r7, #4]
 8109e8a:	f7ff ff73 	bl	8109d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8109e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8109e92:	2110      	movs	r1, #16
 8109e94:	6878      	ldr	r0, [r7, #4]
 8109e96:	f000 f971 	bl	810a17c <SDMMC_GetCmdResp1>
 8109e9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109e9c:	69fb      	ldr	r3, [r7, #28]
}
 8109e9e:	4618      	mov	r0, r3
 8109ea0:	3720      	adds	r7, #32
 8109ea2:	46bd      	mov	sp, r7
 8109ea4:	bd80      	pop	{r7, pc}
	...

08109ea8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8109ea8:	b580      	push	{r7, lr}
 8109eaa:	b088      	sub	sp, #32
 8109eac:	af00      	add	r7, sp, #0
 8109eae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8109eb0:	2300      	movs	r3, #0
 8109eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8109eb4:	230c      	movs	r3, #12
 8109eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109eb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8109ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109ebe:	2300      	movs	r3, #0
 8109ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109ec6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8109ec8:	687b      	ldr	r3, [r7, #4]
 8109eca:	68db      	ldr	r3, [r3, #12]
 8109ecc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8109ed0:	687b      	ldr	r3, [r7, #4]
 8109ed2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8109ed4:	687b      	ldr	r3, [r7, #4]
 8109ed6:	68db      	ldr	r3, [r3, #12]
 8109ed8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8109edc:	687b      	ldr	r3, [r7, #4]
 8109ede:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109ee0:	f107 0308 	add.w	r3, r7, #8
 8109ee4:	4619      	mov	r1, r3
 8109ee6:	6878      	ldr	r0, [r7, #4]
 8109ee8:	f7ff ff44 	bl	8109d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8109eec:	4a0b      	ldr	r2, [pc, #44]	@ (8109f1c <SDMMC_CmdStopTransfer+0x74>)
 8109eee:	210c      	movs	r1, #12
 8109ef0:	6878      	ldr	r0, [r7, #4]
 8109ef2:	f000 f943 	bl	810a17c <SDMMC_GetCmdResp1>
 8109ef6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8109ef8:	687b      	ldr	r3, [r7, #4]
 8109efa:	68db      	ldr	r3, [r3, #12]
 8109efc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8109f00:	687b      	ldr	r3, [r7, #4]
 8109f02:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8109f04:	69fb      	ldr	r3, [r7, #28]
 8109f06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109f0a:	d101      	bne.n	8109f10 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8109f0c:	2300      	movs	r3, #0
 8109f0e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8109f10:	69fb      	ldr	r3, [r7, #28]
}
 8109f12:	4618      	mov	r0, r3
 8109f14:	3720      	adds	r7, #32
 8109f16:	46bd      	mov	sp, r7
 8109f18:	bd80      	pop	{r7, pc}
 8109f1a:	bf00      	nop
 8109f1c:	05f5e100 	.word	0x05f5e100

08109f20 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8109f20:	b580      	push	{r7, lr}
 8109f22:	b088      	sub	sp, #32
 8109f24:	af00      	add	r7, sp, #0
 8109f26:	6078      	str	r0, [r7, #4]
 8109f28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8109f2a:	683b      	ldr	r3, [r7, #0]
 8109f2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8109f2e:	2307      	movs	r3, #7
 8109f30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109f32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8109f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109f38:	2300      	movs	r3, #0
 8109f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109f40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109f42:	f107 0308 	add.w	r3, r7, #8
 8109f46:	4619      	mov	r1, r3
 8109f48:	6878      	ldr	r0, [r7, #4]
 8109f4a:	f7ff ff13 	bl	8109d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8109f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8109f52:	2107      	movs	r1, #7
 8109f54:	6878      	ldr	r0, [r7, #4]
 8109f56:	f000 f911 	bl	810a17c <SDMMC_GetCmdResp1>
 8109f5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109f5c:	69fb      	ldr	r3, [r7, #28]
}
 8109f5e:	4618      	mov	r0, r3
 8109f60:	3720      	adds	r7, #32
 8109f62:	46bd      	mov	sp, r7
 8109f64:	bd80      	pop	{r7, pc}

08109f66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8109f66:	b580      	push	{r7, lr}
 8109f68:	b088      	sub	sp, #32
 8109f6a:	af00      	add	r7, sp, #0
 8109f6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8109f6e:	2300      	movs	r3, #0
 8109f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8109f72:	2300      	movs	r3, #0
 8109f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8109f76:	2300      	movs	r3, #0
 8109f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109f7a:	2300      	movs	r3, #0
 8109f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109f82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109f84:	f107 0308 	add.w	r3, r7, #8
 8109f88:	4619      	mov	r1, r3
 8109f8a:	6878      	ldr	r0, [r7, #4]
 8109f8c:	f7ff fef2 	bl	8109d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8109f90:	6878      	ldr	r0, [r7, #4]
 8109f92:	f000 fa6f 	bl	810a474 <SDMMC_GetCmdError>
 8109f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109f98:	69fb      	ldr	r3, [r7, #28]
}
 8109f9a:	4618      	mov	r0, r3
 8109f9c:	3720      	adds	r7, #32
 8109f9e:	46bd      	mov	sp, r7
 8109fa0:	bd80      	pop	{r7, pc}

08109fa2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8109fa2:	b580      	push	{r7, lr}
 8109fa4:	b088      	sub	sp, #32
 8109fa6:	af00      	add	r7, sp, #0
 8109fa8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8109faa:	2300      	movs	r3, #0
 8109fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8109fae:	2302      	movs	r3, #2
 8109fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8109fb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8109fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109fb8:	2300      	movs	r3, #0
 8109fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109fbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109fc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109fc2:	f107 0308 	add.w	r3, r7, #8
 8109fc6:	4619      	mov	r1, r3
 8109fc8:	6878      	ldr	r0, [r7, #4]
 8109fca:	f7ff fed3 	bl	8109d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8109fce:	6878      	ldr	r0, [r7, #4]
 8109fd0:	f000 f9c6 	bl	810a360 <SDMMC_GetCmdResp2>
 8109fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109fd6:	69fb      	ldr	r3, [r7, #28]
}
 8109fd8:	4618      	mov	r0, r3
 8109fda:	3720      	adds	r7, #32
 8109fdc:	46bd      	mov	sp, r7
 8109fde:	bd80      	pop	{r7, pc}

08109fe0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8109fe0:	b580      	push	{r7, lr}
 8109fe2:	b088      	sub	sp, #32
 8109fe4:	af00      	add	r7, sp, #0
 8109fe6:	6078      	str	r0, [r7, #4]
 8109fe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8109fea:	683b      	ldr	r3, [r7, #0]
 8109fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8109fee:	2309      	movs	r3, #9
 8109ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8109ff2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8109ff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109ff8:	2300      	movs	r3, #0
 8109ffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109ffc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a000:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a002:	f107 0308 	add.w	r3, r7, #8
 810a006:	4619      	mov	r1, r3
 810a008:	6878      	ldr	r0, [r7, #4]
 810a00a:	f7ff feb3 	bl	8109d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810a00e:	6878      	ldr	r0, [r7, #4]
 810a010:	f000 f9a6 	bl	810a360 <SDMMC_GetCmdResp2>
 810a014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a016:	69fb      	ldr	r3, [r7, #28]
}
 810a018:	4618      	mov	r0, r3
 810a01a:	3720      	adds	r7, #32
 810a01c:	46bd      	mov	sp, r7
 810a01e:	bd80      	pop	{r7, pc}

0810a020 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 810a020:	b580      	push	{r7, lr}
 810a022:	b088      	sub	sp, #32
 810a024:	af00      	add	r7, sp, #0
 810a026:	6078      	str	r0, [r7, #4]
 810a028:	460b      	mov	r3, r1
 810a02a:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 810a02c:	887b      	ldrh	r3, [r7, #2]
 810a02e:	041b      	lsls	r3, r3, #16
 810a030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810a032:	2303      	movs	r3, #3
 810a034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a036:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a03a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a03c:	2300      	movs	r3, #0
 810a03e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a040:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a044:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a046:	f107 0308 	add.w	r3, r7, #8
 810a04a:	4619      	mov	r1, r3
 810a04c:	6878      	ldr	r0, [r7, #4]
 810a04e:	f7ff fe91 	bl	8109d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 810a052:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a056:	2103      	movs	r1, #3
 810a058:	6878      	ldr	r0, [r7, #4]
 810a05a:	f000 f88f 	bl	810a17c <SDMMC_GetCmdResp1>
 810a05e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a060:	69fb      	ldr	r3, [r7, #28]
}
 810a062:	4618      	mov	r0, r3
 810a064:	3720      	adds	r7, #32
 810a066:	46bd      	mov	sp, r7
 810a068:	bd80      	pop	{r7, pc}

0810a06a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a06a:	b580      	push	{r7, lr}
 810a06c:	b088      	sub	sp, #32
 810a06e:	af00      	add	r7, sp, #0
 810a070:	6078      	str	r0, [r7, #4]
 810a072:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810a074:	683b      	ldr	r3, [r7, #0]
 810a076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810a078:	230d      	movs	r3, #13
 810a07a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a07c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a082:	2300      	movs	r3, #0
 810a084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a08a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a08c:	f107 0308 	add.w	r3, r7, #8
 810a090:	4619      	mov	r1, r3
 810a092:	6878      	ldr	r0, [r7, #4]
 810a094:	f7ff fe6e 	bl	8109d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810a098:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a09c:	210d      	movs	r1, #13
 810a09e:	6878      	ldr	r0, [r7, #4]
 810a0a0:	f000 f86c 	bl	810a17c <SDMMC_GetCmdResp1>
 810a0a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a0a6:	69fb      	ldr	r3, [r7, #28]
}
 810a0a8:	4618      	mov	r0, r3
 810a0aa:	3720      	adds	r7, #32
 810a0ac:	46bd      	mov	sp, r7
 810a0ae:	bd80      	pop	{r7, pc}

0810a0b0 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a0b0:	b580      	push	{r7, lr}
 810a0b2:	b088      	sub	sp, #32
 810a0b4:	af00      	add	r7, sp, #0
 810a0b6:	6078      	str	r0, [r7, #4]
 810a0b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810a0ba:	683b      	ldr	r3, [r7, #0]
 810a0bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 810a0be:	2301      	movs	r3, #1
 810a0c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a0c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a0c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a0c8:	2300      	movs	r3, #0
 810a0ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a0cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a0d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a0d2:	f107 0308 	add.w	r3, r7, #8
 810a0d6:	4619      	mov	r1, r3
 810a0d8:	6878      	ldr	r0, [r7, #4]
 810a0da:	f7ff fe4b 	bl	8109d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810a0de:	6878      	ldr	r0, [r7, #4]
 810a0e0:	f000 f988 	bl	810a3f4 <SDMMC_GetCmdResp3>
 810a0e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a0e6:	69fb      	ldr	r3, [r7, #28]
}
 810a0e8:	4618      	mov	r0, r3
 810a0ea:	3720      	adds	r7, #32
 810a0ec:	46bd      	mov	sp, r7
 810a0ee:	bd80      	pop	{r7, pc}

0810a0f0 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a0f0:	b580      	push	{r7, lr}
 810a0f2:	b088      	sub	sp, #32
 810a0f4:	af00      	add	r7, sp, #0
 810a0f6:	6078      	str	r0, [r7, #4]
 810a0f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 810a0fa:	683b      	ldr	r3, [r7, #0]
 810a0fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 810a0fe:	2306      	movs	r3, #6
 810a100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a102:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a108:	2300      	movs	r3, #0
 810a10a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a10c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a110:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a112:	f107 0308 	add.w	r3, r7, #8
 810a116:	4619      	mov	r1, r3
 810a118:	6878      	ldr	r0, [r7, #4]
 810a11a:	f7ff fe2b 	bl	8109d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 810a11e:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a122:	2106      	movs	r1, #6
 810a124:	6878      	ldr	r0, [r7, #4]
 810a126:	f000 f829 	bl	810a17c <SDMMC_GetCmdResp1>
 810a12a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a12c:	69fb      	ldr	r3, [r7, #28]
}
 810a12e:	4618      	mov	r0, r3
 810a130:	3720      	adds	r7, #32
 810a132:	46bd      	mov	sp, r7
 810a134:	bd80      	pop	{r7, pc}

0810a136 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a136:	b580      	push	{r7, lr}
 810a138:	b088      	sub	sp, #32
 810a13a:	af00      	add	r7, sp, #0
 810a13c:	6078      	str	r0, [r7, #4]
 810a13e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810a140:	683b      	ldr	r3, [r7, #0]
 810a142:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810a144:	2308      	movs	r3, #8
 810a146:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a14c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a14e:	2300      	movs	r3, #0
 810a150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a156:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a158:	f107 0308 	add.w	r3, r7, #8
 810a15c:	4619      	mov	r1, r3
 810a15e:	6878      	ldr	r0, [r7, #4]
 810a160:	f7ff fe08 	bl	8109d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 810a164:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a168:	2108      	movs	r1, #8
 810a16a:	6878      	ldr	r0, [r7, #4]
 810a16c:	f000 f806 	bl	810a17c <SDMMC_GetCmdResp1>
 810a170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a172:	69fb      	ldr	r3, [r7, #28]
}
 810a174:	4618      	mov	r0, r3
 810a176:	3720      	adds	r7, #32
 810a178:	46bd      	mov	sp, r7
 810a17a:	bd80      	pop	{r7, pc}

0810a17c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810a17c:	b580      	push	{r7, lr}
 810a17e:	b088      	sub	sp, #32
 810a180:	af00      	add	r7, sp, #0
 810a182:	60f8      	str	r0, [r7, #12]
 810a184:	460b      	mov	r3, r1
 810a186:	607a      	str	r2, [r7, #4]
 810a188:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810a18a:	4b70      	ldr	r3, [pc, #448]	@ (810a34c <SDMMC_GetCmdResp1+0x1d0>)
 810a18c:	681b      	ldr	r3, [r3, #0]
 810a18e:	4a70      	ldr	r2, [pc, #448]	@ (810a350 <SDMMC_GetCmdResp1+0x1d4>)
 810a190:	fba2 2303 	umull	r2, r3, r2, r3
 810a194:	0a5a      	lsrs	r2, r3, #9
 810a196:	687b      	ldr	r3, [r7, #4]
 810a198:	fb02 f303 	mul.w	r3, r2, r3
 810a19c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810a19e:	69fb      	ldr	r3, [r7, #28]
 810a1a0:	1e5a      	subs	r2, r3, #1
 810a1a2:	61fa      	str	r2, [r7, #28]
 810a1a4:	2b00      	cmp	r3, #0
 810a1a6:	d102      	bne.n	810a1ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a1a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a1ac:	e0c9      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810a1ae:	68fb      	ldr	r3, [r7, #12]
 810a1b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a1b2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810a1b4:	69ba      	ldr	r2, [r7, #24]
 810a1b6:	4b67      	ldr	r3, [pc, #412]	@ (810a354 <SDMMC_GetCmdResp1+0x1d8>)
 810a1b8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810a1ba:	2b00      	cmp	r3, #0
 810a1bc:	d0ef      	beq.n	810a19e <SDMMC_GetCmdResp1+0x22>
 810a1be:	69bb      	ldr	r3, [r7, #24]
 810a1c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810a1c4:	2b00      	cmp	r3, #0
 810a1c6:	d1ea      	bne.n	810a19e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810a1c8:	68fb      	ldr	r3, [r7, #12]
 810a1ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a1cc:	f003 0304 	and.w	r3, r3, #4
 810a1d0:	2b00      	cmp	r3, #0
 810a1d2:	d004      	beq.n	810a1de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810a1d4:	68fb      	ldr	r3, [r7, #12]
 810a1d6:	2204      	movs	r2, #4
 810a1d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810a1da:	2304      	movs	r3, #4
 810a1dc:	e0b1      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810a1de:	68fb      	ldr	r3, [r7, #12]
 810a1e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a1e2:	f003 0301 	and.w	r3, r3, #1
 810a1e6:	2b00      	cmp	r3, #0
 810a1e8:	d004      	beq.n	810a1f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810a1ea:	68fb      	ldr	r3, [r7, #12]
 810a1ec:	2201      	movs	r2, #1
 810a1ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a1f0:	2301      	movs	r3, #1
 810a1f2:	e0a6      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a1f4:	68fb      	ldr	r3, [r7, #12]
 810a1f6:	4a58      	ldr	r2, [pc, #352]	@ (810a358 <SDMMC_GetCmdResp1+0x1dc>)
 810a1f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810a1fa:	68f8      	ldr	r0, [r7, #12]
 810a1fc:	f7ff fde4 	bl	8109dc8 <SDMMC_GetCommandResponse>
 810a200:	4603      	mov	r3, r0
 810a202:	461a      	mov	r2, r3
 810a204:	7afb      	ldrb	r3, [r7, #11]
 810a206:	4293      	cmp	r3, r2
 810a208:	d001      	beq.n	810a20e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a20a:	2301      	movs	r3, #1
 810a20c:	e099      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810a20e:	2100      	movs	r1, #0
 810a210:	68f8      	ldr	r0, [r7, #12]
 810a212:	f7ff fde6 	bl	8109de2 <SDMMC_GetResponse>
 810a216:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810a218:	697a      	ldr	r2, [r7, #20]
 810a21a:	4b50      	ldr	r3, [pc, #320]	@ (810a35c <SDMMC_GetCmdResp1+0x1e0>)
 810a21c:	4013      	ands	r3, r2
 810a21e:	2b00      	cmp	r3, #0
 810a220:	d101      	bne.n	810a226 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810a222:	2300      	movs	r3, #0
 810a224:	e08d      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810a226:	697b      	ldr	r3, [r7, #20]
 810a228:	2b00      	cmp	r3, #0
 810a22a:	da02      	bge.n	810a232 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810a22c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810a230:	e087      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810a232:	697b      	ldr	r3, [r7, #20]
 810a234:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810a238:	2b00      	cmp	r3, #0
 810a23a:	d001      	beq.n	810a240 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810a23c:	2340      	movs	r3, #64	@ 0x40
 810a23e:	e080      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810a240:	697b      	ldr	r3, [r7, #20]
 810a242:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810a246:	2b00      	cmp	r3, #0
 810a248:	d001      	beq.n	810a24e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810a24a:	2380      	movs	r3, #128	@ 0x80
 810a24c:	e079      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810a24e:	697b      	ldr	r3, [r7, #20]
 810a250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810a254:	2b00      	cmp	r3, #0
 810a256:	d002      	beq.n	810a25e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810a258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a25c:	e071      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810a25e:	697b      	ldr	r3, [r7, #20]
 810a260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a264:	2b00      	cmp	r3, #0
 810a266:	d002      	beq.n	810a26e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810a268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810a26c:	e069      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810a26e:	697b      	ldr	r3, [r7, #20]
 810a270:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810a274:	2b00      	cmp	r3, #0
 810a276:	d002      	beq.n	810a27e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810a278:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810a27c:	e061      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810a27e:	697b      	ldr	r3, [r7, #20]
 810a280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810a284:	2b00      	cmp	r3, #0
 810a286:	d002      	beq.n	810a28e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810a288:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810a28c:	e059      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810a28e:	697b      	ldr	r3, [r7, #20]
 810a290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810a294:	2b00      	cmp	r3, #0
 810a296:	d002      	beq.n	810a29e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810a298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a29c:	e051      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810a29e:	697b      	ldr	r3, [r7, #20]
 810a2a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810a2a4:	2b00      	cmp	r3, #0
 810a2a6:	d002      	beq.n	810a2ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810a2a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810a2ac:	e049      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810a2ae:	697b      	ldr	r3, [r7, #20]
 810a2b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810a2b4:	2b00      	cmp	r3, #0
 810a2b6:	d002      	beq.n	810a2be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810a2b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810a2bc:	e041      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810a2be:	697b      	ldr	r3, [r7, #20]
 810a2c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810a2c4:	2b00      	cmp	r3, #0
 810a2c6:	d002      	beq.n	810a2ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810a2c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a2cc:	e039      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810a2ce:	697b      	ldr	r3, [r7, #20]
 810a2d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810a2d4:	2b00      	cmp	r3, #0
 810a2d6:	d002      	beq.n	810a2de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810a2d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 810a2dc:	e031      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810a2de:	697b      	ldr	r3, [r7, #20]
 810a2e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810a2e4:	2b00      	cmp	r3, #0
 810a2e6:	d002      	beq.n	810a2ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810a2e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 810a2ec:	e029      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810a2ee:	697b      	ldr	r3, [r7, #20]
 810a2f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810a2f4:	2b00      	cmp	r3, #0
 810a2f6:	d002      	beq.n	810a2fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810a2f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810a2fc:	e021      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810a2fe:	697b      	ldr	r3, [r7, #20]
 810a300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810a304:	2b00      	cmp	r3, #0
 810a306:	d002      	beq.n	810a30e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810a308:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810a30c:	e019      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810a30e:	697b      	ldr	r3, [r7, #20]
 810a310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810a314:	2b00      	cmp	r3, #0
 810a316:	d002      	beq.n	810a31e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810a318:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810a31c:	e011      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810a31e:	697b      	ldr	r3, [r7, #20]
 810a320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810a324:	2b00      	cmp	r3, #0
 810a326:	d002      	beq.n	810a32e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810a328:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 810a32c:	e009      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810a32e:	697b      	ldr	r3, [r7, #20]
 810a330:	f003 0308 	and.w	r3, r3, #8
 810a334:	2b00      	cmp	r3, #0
 810a336:	d002      	beq.n	810a33e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810a338:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 810a33c:	e001      	b.n	810a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810a33e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810a342:	4618      	mov	r0, r3
 810a344:	3720      	adds	r7, #32
 810a346:	46bd      	mov	sp, r7
 810a348:	bd80      	pop	{r7, pc}
 810a34a:	bf00      	nop
 810a34c:	100320f0 	.word	0x100320f0
 810a350:	10624dd3 	.word	0x10624dd3
 810a354:	00200045 	.word	0x00200045
 810a358:	002000c5 	.word	0x002000c5
 810a35c:	fdffe008 	.word	0xfdffe008

0810a360 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810a360:	b480      	push	{r7}
 810a362:	b085      	sub	sp, #20
 810a364:	af00      	add	r7, sp, #0
 810a366:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810a368:	4b1f      	ldr	r3, [pc, #124]	@ (810a3e8 <SDMMC_GetCmdResp2+0x88>)
 810a36a:	681b      	ldr	r3, [r3, #0]
 810a36c:	4a1f      	ldr	r2, [pc, #124]	@ (810a3ec <SDMMC_GetCmdResp2+0x8c>)
 810a36e:	fba2 2303 	umull	r2, r3, r2, r3
 810a372:	0a5b      	lsrs	r3, r3, #9
 810a374:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a378:	fb02 f303 	mul.w	r3, r2, r3
 810a37c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810a37e:	68fb      	ldr	r3, [r7, #12]
 810a380:	1e5a      	subs	r2, r3, #1
 810a382:	60fa      	str	r2, [r7, #12]
 810a384:	2b00      	cmp	r3, #0
 810a386:	d102      	bne.n	810a38e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a388:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a38c:	e026      	b.n	810a3dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810a38e:	687b      	ldr	r3, [r7, #4]
 810a390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a392:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a394:	68bb      	ldr	r3, [r7, #8]
 810a396:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810a39a:	2b00      	cmp	r3, #0
 810a39c:	d0ef      	beq.n	810a37e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810a39e:	68bb      	ldr	r3, [r7, #8]
 810a3a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a3a4:	2b00      	cmp	r3, #0
 810a3a6:	d1ea      	bne.n	810a37e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810a3a8:	687b      	ldr	r3, [r7, #4]
 810a3aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a3ac:	f003 0304 	and.w	r3, r3, #4
 810a3b0:	2b00      	cmp	r3, #0
 810a3b2:	d004      	beq.n	810a3be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810a3b4:	687b      	ldr	r3, [r7, #4]
 810a3b6:	2204      	movs	r2, #4
 810a3b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810a3ba:	2304      	movs	r3, #4
 810a3bc:	e00e      	b.n	810a3dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810a3be:	687b      	ldr	r3, [r7, #4]
 810a3c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a3c2:	f003 0301 	and.w	r3, r3, #1
 810a3c6:	2b00      	cmp	r3, #0
 810a3c8:	d004      	beq.n	810a3d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810a3ca:	687b      	ldr	r3, [r7, #4]
 810a3cc:	2201      	movs	r2, #1
 810a3ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a3d0:	2301      	movs	r3, #1
 810a3d2:	e003      	b.n	810a3dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a3d4:	687b      	ldr	r3, [r7, #4]
 810a3d6:	4a06      	ldr	r2, [pc, #24]	@ (810a3f0 <SDMMC_GetCmdResp2+0x90>)
 810a3d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810a3da:	2300      	movs	r3, #0
}
 810a3dc:	4618      	mov	r0, r3
 810a3de:	3714      	adds	r7, #20
 810a3e0:	46bd      	mov	sp, r7
 810a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3e6:	4770      	bx	lr
 810a3e8:	100320f0 	.word	0x100320f0
 810a3ec:	10624dd3 	.word	0x10624dd3
 810a3f0:	002000c5 	.word	0x002000c5

0810a3f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810a3f4:	b480      	push	{r7}
 810a3f6:	b085      	sub	sp, #20
 810a3f8:	af00      	add	r7, sp, #0
 810a3fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810a3fc:	4b1a      	ldr	r3, [pc, #104]	@ (810a468 <SDMMC_GetCmdResp3+0x74>)
 810a3fe:	681b      	ldr	r3, [r3, #0]
 810a400:	4a1a      	ldr	r2, [pc, #104]	@ (810a46c <SDMMC_GetCmdResp3+0x78>)
 810a402:	fba2 2303 	umull	r2, r3, r2, r3
 810a406:	0a5b      	lsrs	r3, r3, #9
 810a408:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a40c:	fb02 f303 	mul.w	r3, r2, r3
 810a410:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810a412:	68fb      	ldr	r3, [r7, #12]
 810a414:	1e5a      	subs	r2, r3, #1
 810a416:	60fa      	str	r2, [r7, #12]
 810a418:	2b00      	cmp	r3, #0
 810a41a:	d102      	bne.n	810a422 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a41c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a420:	e01b      	b.n	810a45a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810a422:	687b      	ldr	r3, [r7, #4]
 810a424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a426:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a428:	68bb      	ldr	r3, [r7, #8]
 810a42a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810a42e:	2b00      	cmp	r3, #0
 810a430:	d0ef      	beq.n	810a412 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810a432:	68bb      	ldr	r3, [r7, #8]
 810a434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a438:	2b00      	cmp	r3, #0
 810a43a:	d1ea      	bne.n	810a412 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810a43c:	687b      	ldr	r3, [r7, #4]
 810a43e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a440:	f003 0304 	and.w	r3, r3, #4
 810a444:	2b00      	cmp	r3, #0
 810a446:	d004      	beq.n	810a452 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810a448:	687b      	ldr	r3, [r7, #4]
 810a44a:	2204      	movs	r2, #4
 810a44c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810a44e:	2304      	movs	r3, #4
 810a450:	e003      	b.n	810a45a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a452:	687b      	ldr	r3, [r7, #4]
 810a454:	4a06      	ldr	r2, [pc, #24]	@ (810a470 <SDMMC_GetCmdResp3+0x7c>)
 810a456:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810a458:	2300      	movs	r3, #0
}
 810a45a:	4618      	mov	r0, r3
 810a45c:	3714      	adds	r7, #20
 810a45e:	46bd      	mov	sp, r7
 810a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a464:	4770      	bx	lr
 810a466:	bf00      	nop
 810a468:	100320f0 	.word	0x100320f0
 810a46c:	10624dd3 	.word	0x10624dd3
 810a470:	002000c5 	.word	0x002000c5

0810a474 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810a474:	b480      	push	{r7}
 810a476:	b085      	sub	sp, #20
 810a478:	af00      	add	r7, sp, #0
 810a47a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810a47c:	4b11      	ldr	r3, [pc, #68]	@ (810a4c4 <SDMMC_GetCmdError+0x50>)
 810a47e:	681b      	ldr	r3, [r3, #0]
 810a480:	4a11      	ldr	r2, [pc, #68]	@ (810a4c8 <SDMMC_GetCmdError+0x54>)
 810a482:	fba2 2303 	umull	r2, r3, r2, r3
 810a486:	0a5b      	lsrs	r3, r3, #9
 810a488:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a48c:	fb02 f303 	mul.w	r3, r2, r3
 810a490:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810a492:	68fb      	ldr	r3, [r7, #12]
 810a494:	1e5a      	subs	r2, r3, #1
 810a496:	60fa      	str	r2, [r7, #12]
 810a498:	2b00      	cmp	r3, #0
 810a49a:	d102      	bne.n	810a4a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a49c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a4a0:	e009      	b.n	810a4b6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810a4a2:	687b      	ldr	r3, [r7, #4]
 810a4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a4a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a4aa:	2b00      	cmp	r3, #0
 810a4ac:	d0f1      	beq.n	810a492 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a4ae:	687b      	ldr	r3, [r7, #4]
 810a4b0:	4a06      	ldr	r2, [pc, #24]	@ (810a4cc <SDMMC_GetCmdError+0x58>)
 810a4b2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 810a4b4:	2300      	movs	r3, #0
}
 810a4b6:	4618      	mov	r0, r3
 810a4b8:	3714      	adds	r7, #20
 810a4ba:	46bd      	mov	sp, r7
 810a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4c0:	4770      	bx	lr
 810a4c2:	bf00      	nop
 810a4c4:	100320f0 	.word	0x100320f0
 810a4c8:	10624dd3 	.word	0x10624dd3
 810a4cc:	002000c5 	.word	0x002000c5

0810a4d0 <LL_TIM_SetPrescaler>:
{
 810a4d0:	b480      	push	{r7}
 810a4d2:	b083      	sub	sp, #12
 810a4d4:	af00      	add	r7, sp, #0
 810a4d6:	6078      	str	r0, [r7, #4]
 810a4d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 810a4da:	687b      	ldr	r3, [r7, #4]
 810a4dc:	683a      	ldr	r2, [r7, #0]
 810a4de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 810a4e0:	bf00      	nop
 810a4e2:	370c      	adds	r7, #12
 810a4e4:	46bd      	mov	sp, r7
 810a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4ea:	4770      	bx	lr

0810a4ec <LL_TIM_SetAutoReload>:
{
 810a4ec:	b480      	push	{r7}
 810a4ee:	b083      	sub	sp, #12
 810a4f0:	af00      	add	r7, sp, #0
 810a4f2:	6078      	str	r0, [r7, #4]
 810a4f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 810a4f6:	687b      	ldr	r3, [r7, #4]
 810a4f8:	683a      	ldr	r2, [r7, #0]
 810a4fa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 810a4fc:	bf00      	nop
 810a4fe:	370c      	adds	r7, #12
 810a500:	46bd      	mov	sp, r7
 810a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a506:	4770      	bx	lr

0810a508 <LL_TIM_SetRepetitionCounter>:
{
 810a508:	b480      	push	{r7}
 810a50a:	b083      	sub	sp, #12
 810a50c:	af00      	add	r7, sp, #0
 810a50e:	6078      	str	r0, [r7, #4]
 810a510:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 810a512:	687b      	ldr	r3, [r7, #4]
 810a514:	683a      	ldr	r2, [r7, #0]
 810a516:	631a      	str	r2, [r3, #48]	@ 0x30
}
 810a518:	bf00      	nop
 810a51a:	370c      	adds	r7, #12
 810a51c:	46bd      	mov	sp, r7
 810a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a522:	4770      	bx	lr

0810a524 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 810a524:	b480      	push	{r7}
 810a526:	b083      	sub	sp, #12
 810a528:	af00      	add	r7, sp, #0
 810a52a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 810a52c:	687b      	ldr	r3, [r7, #4]
 810a52e:	695b      	ldr	r3, [r3, #20]
 810a530:	f043 0201 	orr.w	r2, r3, #1
 810a534:	687b      	ldr	r3, [r7, #4]
 810a536:	615a      	str	r2, [r3, #20]
}
 810a538:	bf00      	nop
 810a53a:	370c      	adds	r7, #12
 810a53c:	46bd      	mov	sp, r7
 810a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a542:	4770      	bx	lr

0810a544 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 810a544:	b580      	push	{r7, lr}
 810a546:	b084      	sub	sp, #16
 810a548:	af00      	add	r7, sp, #0
 810a54a:	6078      	str	r0, [r7, #4]
 810a54c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 810a54e:	687b      	ldr	r3, [r7, #4]
 810a550:	681b      	ldr	r3, [r3, #0]
 810a552:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810a554:	687b      	ldr	r3, [r7, #4]
 810a556:	4a3d      	ldr	r2, [pc, #244]	@ (810a64c <LL_TIM_Init+0x108>)
 810a558:	4293      	cmp	r3, r2
 810a55a:	d013      	beq.n	810a584 <LL_TIM_Init+0x40>
 810a55c:	687b      	ldr	r3, [r7, #4]
 810a55e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a562:	d00f      	beq.n	810a584 <LL_TIM_Init+0x40>
 810a564:	687b      	ldr	r3, [r7, #4]
 810a566:	4a3a      	ldr	r2, [pc, #232]	@ (810a650 <LL_TIM_Init+0x10c>)
 810a568:	4293      	cmp	r3, r2
 810a56a:	d00b      	beq.n	810a584 <LL_TIM_Init+0x40>
 810a56c:	687b      	ldr	r3, [r7, #4]
 810a56e:	4a39      	ldr	r2, [pc, #228]	@ (810a654 <LL_TIM_Init+0x110>)
 810a570:	4293      	cmp	r3, r2
 810a572:	d007      	beq.n	810a584 <LL_TIM_Init+0x40>
 810a574:	687b      	ldr	r3, [r7, #4]
 810a576:	4a38      	ldr	r2, [pc, #224]	@ (810a658 <LL_TIM_Init+0x114>)
 810a578:	4293      	cmp	r3, r2
 810a57a:	d003      	beq.n	810a584 <LL_TIM_Init+0x40>
 810a57c:	687b      	ldr	r3, [r7, #4]
 810a57e:	4a37      	ldr	r2, [pc, #220]	@ (810a65c <LL_TIM_Init+0x118>)
 810a580:	4293      	cmp	r3, r2
 810a582:	d106      	bne.n	810a592 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 810a584:	68fb      	ldr	r3, [r7, #12]
 810a586:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 810a58a:	683b      	ldr	r3, [r7, #0]
 810a58c:	685b      	ldr	r3, [r3, #4]
 810a58e:	4313      	orrs	r3, r2
 810a590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810a592:	687b      	ldr	r3, [r7, #4]
 810a594:	4a2d      	ldr	r2, [pc, #180]	@ (810a64c <LL_TIM_Init+0x108>)
 810a596:	4293      	cmp	r3, r2
 810a598:	d01f      	beq.n	810a5da <LL_TIM_Init+0x96>
 810a59a:	687b      	ldr	r3, [r7, #4]
 810a59c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a5a0:	d01b      	beq.n	810a5da <LL_TIM_Init+0x96>
 810a5a2:	687b      	ldr	r3, [r7, #4]
 810a5a4:	4a2a      	ldr	r2, [pc, #168]	@ (810a650 <LL_TIM_Init+0x10c>)
 810a5a6:	4293      	cmp	r3, r2
 810a5a8:	d017      	beq.n	810a5da <LL_TIM_Init+0x96>
 810a5aa:	687b      	ldr	r3, [r7, #4]
 810a5ac:	4a29      	ldr	r2, [pc, #164]	@ (810a654 <LL_TIM_Init+0x110>)
 810a5ae:	4293      	cmp	r3, r2
 810a5b0:	d013      	beq.n	810a5da <LL_TIM_Init+0x96>
 810a5b2:	687b      	ldr	r3, [r7, #4]
 810a5b4:	4a28      	ldr	r2, [pc, #160]	@ (810a658 <LL_TIM_Init+0x114>)
 810a5b6:	4293      	cmp	r3, r2
 810a5b8:	d00f      	beq.n	810a5da <LL_TIM_Init+0x96>
 810a5ba:	687b      	ldr	r3, [r7, #4]
 810a5bc:	4a27      	ldr	r2, [pc, #156]	@ (810a65c <LL_TIM_Init+0x118>)
 810a5be:	4293      	cmp	r3, r2
 810a5c0:	d00b      	beq.n	810a5da <LL_TIM_Init+0x96>
 810a5c2:	687b      	ldr	r3, [r7, #4]
 810a5c4:	4a26      	ldr	r2, [pc, #152]	@ (810a660 <LL_TIM_Init+0x11c>)
 810a5c6:	4293      	cmp	r3, r2
 810a5c8:	d007      	beq.n	810a5da <LL_TIM_Init+0x96>
 810a5ca:	687b      	ldr	r3, [r7, #4]
 810a5cc:	4a25      	ldr	r2, [pc, #148]	@ (810a664 <LL_TIM_Init+0x120>)
 810a5ce:	4293      	cmp	r3, r2
 810a5d0:	d003      	beq.n	810a5da <LL_TIM_Init+0x96>
 810a5d2:	687b      	ldr	r3, [r7, #4]
 810a5d4:	4a24      	ldr	r2, [pc, #144]	@ (810a668 <LL_TIM_Init+0x124>)
 810a5d6:	4293      	cmp	r3, r2
 810a5d8:	d106      	bne.n	810a5e8 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 810a5da:	68fb      	ldr	r3, [r7, #12]
 810a5dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810a5e0:	683b      	ldr	r3, [r7, #0]
 810a5e2:	68db      	ldr	r3, [r3, #12]
 810a5e4:	4313      	orrs	r3, r2
 810a5e6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 810a5e8:	687b      	ldr	r3, [r7, #4]
 810a5ea:	68fa      	ldr	r2, [r7, #12]
 810a5ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 810a5ee:	683b      	ldr	r3, [r7, #0]
 810a5f0:	689b      	ldr	r3, [r3, #8]
 810a5f2:	4619      	mov	r1, r3
 810a5f4:	6878      	ldr	r0, [r7, #4]
 810a5f6:	f7ff ff79 	bl	810a4ec <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 810a5fa:	683b      	ldr	r3, [r7, #0]
 810a5fc:	881b      	ldrh	r3, [r3, #0]
 810a5fe:	4619      	mov	r1, r3
 810a600:	6878      	ldr	r0, [r7, #4]
 810a602:	f7ff ff65 	bl	810a4d0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810a606:	687b      	ldr	r3, [r7, #4]
 810a608:	4a10      	ldr	r2, [pc, #64]	@ (810a64c <LL_TIM_Init+0x108>)
 810a60a:	4293      	cmp	r3, r2
 810a60c:	d00f      	beq.n	810a62e <LL_TIM_Init+0xea>
 810a60e:	687b      	ldr	r3, [r7, #4]
 810a610:	4a12      	ldr	r2, [pc, #72]	@ (810a65c <LL_TIM_Init+0x118>)
 810a612:	4293      	cmp	r3, r2
 810a614:	d00b      	beq.n	810a62e <LL_TIM_Init+0xea>
 810a616:	687b      	ldr	r3, [r7, #4]
 810a618:	4a11      	ldr	r2, [pc, #68]	@ (810a660 <LL_TIM_Init+0x11c>)
 810a61a:	4293      	cmp	r3, r2
 810a61c:	d007      	beq.n	810a62e <LL_TIM_Init+0xea>
 810a61e:	687b      	ldr	r3, [r7, #4]
 810a620:	4a10      	ldr	r2, [pc, #64]	@ (810a664 <LL_TIM_Init+0x120>)
 810a622:	4293      	cmp	r3, r2
 810a624:	d003      	beq.n	810a62e <LL_TIM_Init+0xea>
 810a626:	687b      	ldr	r3, [r7, #4]
 810a628:	4a0f      	ldr	r2, [pc, #60]	@ (810a668 <LL_TIM_Init+0x124>)
 810a62a:	4293      	cmp	r3, r2
 810a62c:	d105      	bne.n	810a63a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 810a62e:	683b      	ldr	r3, [r7, #0]
 810a630:	691b      	ldr	r3, [r3, #16]
 810a632:	4619      	mov	r1, r3
 810a634:	6878      	ldr	r0, [r7, #4]
 810a636:	f7ff ff67 	bl	810a508 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 810a63a:	6878      	ldr	r0, [r7, #4]
 810a63c:	f7ff ff72 	bl	810a524 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 810a640:	2300      	movs	r3, #0
}
 810a642:	4618      	mov	r0, r3
 810a644:	3710      	adds	r7, #16
 810a646:	46bd      	mov	sp, r7
 810a648:	bd80      	pop	{r7, pc}
 810a64a:	bf00      	nop
 810a64c:	40010000 	.word	0x40010000
 810a650:	40000400 	.word	0x40000400
 810a654:	40000800 	.word	0x40000800
 810a658:	40000c00 	.word	0x40000c00
 810a65c:	40010400 	.word	0x40010400
 810a660:	40014000 	.word	0x40014000
 810a664:	40014400 	.word	0x40014400
 810a668:	40014800 	.word	0x40014800

0810a66c <LL_USART_IsEnabled>:
{
 810a66c:	b480      	push	{r7}
 810a66e:	b083      	sub	sp, #12
 810a670:	af00      	add	r7, sp, #0
 810a672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 810a674:	687b      	ldr	r3, [r7, #4]
 810a676:	681b      	ldr	r3, [r3, #0]
 810a678:	f003 0301 	and.w	r3, r3, #1
 810a67c:	2b01      	cmp	r3, #1
 810a67e:	d101      	bne.n	810a684 <LL_USART_IsEnabled+0x18>
 810a680:	2301      	movs	r3, #1
 810a682:	e000      	b.n	810a686 <LL_USART_IsEnabled+0x1a>
 810a684:	2300      	movs	r3, #0
}
 810a686:	4618      	mov	r0, r3
 810a688:	370c      	adds	r7, #12
 810a68a:	46bd      	mov	sp, r7
 810a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a690:	4770      	bx	lr

0810a692 <LL_USART_SetPrescaler>:
{
 810a692:	b480      	push	{r7}
 810a694:	b083      	sub	sp, #12
 810a696:	af00      	add	r7, sp, #0
 810a698:	6078      	str	r0, [r7, #4]
 810a69a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 810a69c:	687b      	ldr	r3, [r7, #4]
 810a69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a6a0:	f023 030f 	bic.w	r3, r3, #15
 810a6a4:	683a      	ldr	r2, [r7, #0]
 810a6a6:	b292      	uxth	r2, r2
 810a6a8:	431a      	orrs	r2, r3
 810a6aa:	687b      	ldr	r3, [r7, #4]
 810a6ac:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 810a6ae:	bf00      	nop
 810a6b0:	370c      	adds	r7, #12
 810a6b2:	46bd      	mov	sp, r7
 810a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6b8:	4770      	bx	lr

0810a6ba <LL_USART_SetStopBitsLength>:
{
 810a6ba:	b480      	push	{r7}
 810a6bc:	b083      	sub	sp, #12
 810a6be:	af00      	add	r7, sp, #0
 810a6c0:	6078      	str	r0, [r7, #4]
 810a6c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 810a6c4:	687b      	ldr	r3, [r7, #4]
 810a6c6:	685b      	ldr	r3, [r3, #4]
 810a6c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 810a6cc:	683b      	ldr	r3, [r7, #0]
 810a6ce:	431a      	orrs	r2, r3
 810a6d0:	687b      	ldr	r3, [r7, #4]
 810a6d2:	605a      	str	r2, [r3, #4]
}
 810a6d4:	bf00      	nop
 810a6d6:	370c      	adds	r7, #12
 810a6d8:	46bd      	mov	sp, r7
 810a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6de:	4770      	bx	lr

0810a6e0 <LL_USART_SetHWFlowCtrl>:
{
 810a6e0:	b480      	push	{r7}
 810a6e2:	b083      	sub	sp, #12
 810a6e4:	af00      	add	r7, sp, #0
 810a6e6:	6078      	str	r0, [r7, #4]
 810a6e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 810a6ea:	687b      	ldr	r3, [r7, #4]
 810a6ec:	689b      	ldr	r3, [r3, #8]
 810a6ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810a6f2:	683b      	ldr	r3, [r7, #0]
 810a6f4:	431a      	orrs	r2, r3
 810a6f6:	687b      	ldr	r3, [r7, #4]
 810a6f8:	609a      	str	r2, [r3, #8]
}
 810a6fa:	bf00      	nop
 810a6fc:	370c      	adds	r7, #12
 810a6fe:	46bd      	mov	sp, r7
 810a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a704:	4770      	bx	lr
	...

0810a708 <LL_USART_SetBaudRate>:
{
 810a708:	b480      	push	{r7}
 810a70a:	b087      	sub	sp, #28
 810a70c:	af00      	add	r7, sp, #0
 810a70e:	60f8      	str	r0, [r7, #12]
 810a710:	60b9      	str	r1, [r7, #8]
 810a712:	607a      	str	r2, [r7, #4]
 810a714:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 810a716:	687b      	ldr	r3, [r7, #4]
 810a718:	2b0b      	cmp	r3, #11
 810a71a:	d83c      	bhi.n	810a796 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 810a71c:	6a3b      	ldr	r3, [r7, #32]
 810a71e:	2b00      	cmp	r3, #0
 810a720:	d039      	beq.n	810a796 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 810a722:	683b      	ldr	r3, [r7, #0]
 810a724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a728:	d122      	bne.n	810a770 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 810a72a:	687b      	ldr	r3, [r7, #4]
 810a72c:	b2db      	uxtb	r3, r3
 810a72e:	461a      	mov	r2, r3
 810a730:	4b1c      	ldr	r3, [pc, #112]	@ (810a7a4 <LL_USART_SetBaudRate+0x9c>)
 810a732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810a736:	68ba      	ldr	r2, [r7, #8]
 810a738:	fbb2 f3f3 	udiv	r3, r2, r3
 810a73c:	005a      	lsls	r2, r3, #1
 810a73e:	6a3b      	ldr	r3, [r7, #32]
 810a740:	085b      	lsrs	r3, r3, #1
 810a742:	441a      	add	r2, r3
 810a744:	6a3b      	ldr	r3, [r7, #32]
 810a746:	fbb2 f3f3 	udiv	r3, r2, r3
 810a74a:	b29b      	uxth	r3, r3
 810a74c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 810a74e:	697a      	ldr	r2, [r7, #20]
 810a750:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 810a754:	4013      	ands	r3, r2
 810a756:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a758:	697b      	ldr	r3, [r7, #20]
 810a75a:	085b      	lsrs	r3, r3, #1
 810a75c:	b29b      	uxth	r3, r3
 810a75e:	f003 0307 	and.w	r3, r3, #7
 810a762:	693a      	ldr	r2, [r7, #16]
 810a764:	4313      	orrs	r3, r2
 810a766:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 810a768:	68fb      	ldr	r3, [r7, #12]
 810a76a:	693a      	ldr	r2, [r7, #16]
 810a76c:	60da      	str	r2, [r3, #12]
}
 810a76e:	e012      	b.n	810a796 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 810a770:	687b      	ldr	r3, [r7, #4]
 810a772:	b2db      	uxtb	r3, r3
 810a774:	461a      	mov	r2, r3
 810a776:	4b0b      	ldr	r3, [pc, #44]	@ (810a7a4 <LL_USART_SetBaudRate+0x9c>)
 810a778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810a77c:	68ba      	ldr	r2, [r7, #8]
 810a77e:	fbb2 f2f3 	udiv	r2, r2, r3
 810a782:	6a3b      	ldr	r3, [r7, #32]
 810a784:	085b      	lsrs	r3, r3, #1
 810a786:	441a      	add	r2, r3
 810a788:	6a3b      	ldr	r3, [r7, #32]
 810a78a:	fbb2 f3f3 	udiv	r3, r2, r3
 810a78e:	b29b      	uxth	r3, r3
 810a790:	461a      	mov	r2, r3
 810a792:	68fb      	ldr	r3, [r7, #12]
 810a794:	60da      	str	r2, [r3, #12]
}
 810a796:	bf00      	nop
 810a798:	371c      	adds	r7, #28
 810a79a:	46bd      	mov	sp, r7
 810a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7a0:	4770      	bx	lr
 810a7a2:	bf00      	nop
 810a7a4:	0810ec50 	.word	0x0810ec50

0810a7a8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 810a7a8:	b580      	push	{r7, lr}
 810a7aa:	b086      	sub	sp, #24
 810a7ac:	af02      	add	r7, sp, #8
 810a7ae:	6078      	str	r0, [r7, #4]
 810a7b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 810a7b2:	2301      	movs	r3, #1
 810a7b4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 810a7b6:	2300      	movs	r3, #0
 810a7b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 810a7ba:	6878      	ldr	r0, [r7, #4]
 810a7bc:	f7ff ff56 	bl	810a66c <LL_USART_IsEnabled>
 810a7c0:	4603      	mov	r3, r0
 810a7c2:	2b00      	cmp	r3, #0
 810a7c4:	d17f      	bne.n	810a8c6 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 810a7c6:	687b      	ldr	r3, [r7, #4]
 810a7c8:	681a      	ldr	r2, [r3, #0]
 810a7ca:	4b41      	ldr	r3, [pc, #260]	@ (810a8d0 <LL_USART_Init+0x128>)
 810a7cc:	4013      	ands	r3, r2
 810a7ce:	683a      	ldr	r2, [r7, #0]
 810a7d0:	6891      	ldr	r1, [r2, #8]
 810a7d2:	683a      	ldr	r2, [r7, #0]
 810a7d4:	6912      	ldr	r2, [r2, #16]
 810a7d6:	4311      	orrs	r1, r2
 810a7d8:	683a      	ldr	r2, [r7, #0]
 810a7da:	6952      	ldr	r2, [r2, #20]
 810a7dc:	4311      	orrs	r1, r2
 810a7de:	683a      	ldr	r2, [r7, #0]
 810a7e0:	69d2      	ldr	r2, [r2, #28]
 810a7e2:	430a      	orrs	r2, r1
 810a7e4:	431a      	orrs	r2, r3
 810a7e6:	687b      	ldr	r3, [r7, #4]
 810a7e8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 810a7ea:	683b      	ldr	r3, [r7, #0]
 810a7ec:	68db      	ldr	r3, [r3, #12]
 810a7ee:	4619      	mov	r1, r3
 810a7f0:	6878      	ldr	r0, [r7, #4]
 810a7f2:	f7ff ff62 	bl	810a6ba <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 810a7f6:	683b      	ldr	r3, [r7, #0]
 810a7f8:	699b      	ldr	r3, [r3, #24]
 810a7fa:	4619      	mov	r1, r3
 810a7fc:	6878      	ldr	r0, [r7, #4]
 810a7fe:	f7ff ff6f 	bl	810a6e0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 810a802:	687b      	ldr	r3, [r7, #4]
 810a804:	4a33      	ldr	r2, [pc, #204]	@ (810a8d4 <LL_USART_Init+0x12c>)
 810a806:	4293      	cmp	r3, r2
 810a808:	d104      	bne.n	810a814 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 810a80a:	4833      	ldr	r0, [pc, #204]	@ (810a8d8 <LL_USART_Init+0x130>)
 810a80c:	f7ff f8b4 	bl	8109978 <LL_RCC_GetUSARTClockFreq>
 810a810:	60b8      	str	r0, [r7, #8]
 810a812:	e03d      	b.n	810a890 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 810a814:	687b      	ldr	r3, [r7, #4]
 810a816:	4a31      	ldr	r2, [pc, #196]	@ (810a8dc <LL_USART_Init+0x134>)
 810a818:	4293      	cmp	r3, r2
 810a81a:	d104      	bne.n	810a826 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a81c:	4830      	ldr	r0, [pc, #192]	@ (810a8e0 <LL_USART_Init+0x138>)
 810a81e:	f7ff f8ab 	bl	8109978 <LL_RCC_GetUSARTClockFreq>
 810a822:	60b8      	str	r0, [r7, #8]
 810a824:	e034      	b.n	810a890 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 810a826:	687b      	ldr	r3, [r7, #4]
 810a828:	4a2e      	ldr	r2, [pc, #184]	@ (810a8e4 <LL_USART_Init+0x13c>)
 810a82a:	4293      	cmp	r3, r2
 810a82c:	d104      	bne.n	810a838 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a82e:	482c      	ldr	r0, [pc, #176]	@ (810a8e0 <LL_USART_Init+0x138>)
 810a830:	f7ff f8a2 	bl	8109978 <LL_RCC_GetUSARTClockFreq>
 810a834:	60b8      	str	r0, [r7, #8]
 810a836:	e02b      	b.n	810a890 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 810a838:	687b      	ldr	r3, [r7, #4]
 810a83a:	4a2b      	ldr	r2, [pc, #172]	@ (810a8e8 <LL_USART_Init+0x140>)
 810a83c:	4293      	cmp	r3, r2
 810a83e:	d104      	bne.n	810a84a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a840:	4827      	ldr	r0, [pc, #156]	@ (810a8e0 <LL_USART_Init+0x138>)
 810a842:	f7ff f899 	bl	8109978 <LL_RCC_GetUSARTClockFreq>
 810a846:	60b8      	str	r0, [r7, #8]
 810a848:	e022      	b.n	810a890 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 810a84a:	687b      	ldr	r3, [r7, #4]
 810a84c:	4a27      	ldr	r2, [pc, #156]	@ (810a8ec <LL_USART_Init+0x144>)
 810a84e:	4293      	cmp	r3, r2
 810a850:	d104      	bne.n	810a85c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a852:	4823      	ldr	r0, [pc, #140]	@ (810a8e0 <LL_USART_Init+0x138>)
 810a854:	f7ff f890 	bl	8109978 <LL_RCC_GetUSARTClockFreq>
 810a858:	60b8      	str	r0, [r7, #8]
 810a85a:	e019      	b.n	810a890 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 810a85c:	687b      	ldr	r3, [r7, #4]
 810a85e:	4a24      	ldr	r2, [pc, #144]	@ (810a8f0 <LL_USART_Init+0x148>)
 810a860:	4293      	cmp	r3, r2
 810a862:	d104      	bne.n	810a86e <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 810a864:	481c      	ldr	r0, [pc, #112]	@ (810a8d8 <LL_USART_Init+0x130>)
 810a866:	f7ff f887 	bl	8109978 <LL_RCC_GetUSARTClockFreq>
 810a86a:	60b8      	str	r0, [r7, #8]
 810a86c:	e010      	b.n	810a890 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 810a86e:	687b      	ldr	r3, [r7, #4]
 810a870:	4a20      	ldr	r2, [pc, #128]	@ (810a8f4 <LL_USART_Init+0x14c>)
 810a872:	4293      	cmp	r3, r2
 810a874:	d104      	bne.n	810a880 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a876:	481a      	ldr	r0, [pc, #104]	@ (810a8e0 <LL_USART_Init+0x138>)
 810a878:	f7ff f87e 	bl	8109978 <LL_RCC_GetUSARTClockFreq>
 810a87c:	60b8      	str	r0, [r7, #8]
 810a87e:	e007      	b.n	810a890 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 810a880:	687b      	ldr	r3, [r7, #4]
 810a882:	4a1d      	ldr	r2, [pc, #116]	@ (810a8f8 <LL_USART_Init+0x150>)
 810a884:	4293      	cmp	r3, r2
 810a886:	d103      	bne.n	810a890 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a888:	4815      	ldr	r0, [pc, #84]	@ (810a8e0 <LL_USART_Init+0x138>)
 810a88a:	f7ff f875 	bl	8109978 <LL_RCC_GetUSARTClockFreq>
 810a88e:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 810a890:	68bb      	ldr	r3, [r7, #8]
 810a892:	2b00      	cmp	r3, #0
 810a894:	d011      	beq.n	810a8ba <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 810a896:	683b      	ldr	r3, [r7, #0]
 810a898:	685b      	ldr	r3, [r3, #4]
 810a89a:	2b00      	cmp	r3, #0
 810a89c:	d00d      	beq.n	810a8ba <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 810a89e:	2300      	movs	r3, #0
 810a8a0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 810a8a2:	683b      	ldr	r3, [r7, #0]
 810a8a4:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 810a8a6:	683b      	ldr	r3, [r7, #0]
 810a8a8:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 810a8aa:	683b      	ldr	r3, [r7, #0]
 810a8ac:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 810a8ae:	9300      	str	r3, [sp, #0]
 810a8b0:	460b      	mov	r3, r1
 810a8b2:	68b9      	ldr	r1, [r7, #8]
 810a8b4:	6878      	ldr	r0, [r7, #4]
 810a8b6:	f7ff ff27 	bl	810a708 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 810a8ba:	683b      	ldr	r3, [r7, #0]
 810a8bc:	681b      	ldr	r3, [r3, #0]
 810a8be:	4619      	mov	r1, r3
 810a8c0:	6878      	ldr	r0, [r7, #4]
 810a8c2:	f7ff fee6 	bl	810a692 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 810a8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 810a8c8:	4618      	mov	r0, r3
 810a8ca:	3710      	adds	r7, #16
 810a8cc:	46bd      	mov	sp, r7
 810a8ce:	bd80      	pop	{r7, pc}
 810a8d0:	efff69f3 	.word	0xefff69f3
 810a8d4:	40011000 	.word	0x40011000
 810a8d8:	07000308 	.word	0x07000308
 810a8dc:	40004400 	.word	0x40004400
 810a8e0:	07000008 	.word	0x07000008
 810a8e4:	40004800 	.word	0x40004800
 810a8e8:	40004c00 	.word	0x40004c00
 810a8ec:	40005000 	.word	0x40005000
 810a8f0:	40011400 	.word	0x40011400
 810a8f4:	40007800 	.word	0x40007800
 810a8f8:	40007c00 	.word	0x40007c00

0810a8fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810a8fc:	b084      	sub	sp, #16
 810a8fe:	b580      	push	{r7, lr}
 810a900:	b084      	sub	sp, #16
 810a902:	af00      	add	r7, sp, #0
 810a904:	6078      	str	r0, [r7, #4]
 810a906:	f107 001c 	add.w	r0, r7, #28
 810a90a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810a90e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810a912:	2b01      	cmp	r3, #1
 810a914:	d123      	bne.n	810a95e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810a916:	687b      	ldr	r3, [r7, #4]
 810a918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a91a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810a91e:	687b      	ldr	r3, [r7, #4]
 810a920:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810a922:	687b      	ldr	r3, [r7, #4]
 810a924:	68db      	ldr	r3, [r3, #12]
 810a926:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 810a92a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810a92e:	687a      	ldr	r2, [r7, #4]
 810a930:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810a932:	687b      	ldr	r3, [r7, #4]
 810a934:	68db      	ldr	r3, [r3, #12]
 810a936:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 810a93a:	687b      	ldr	r3, [r7, #4]
 810a93c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810a93e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 810a942:	2b01      	cmp	r3, #1
 810a944:	d105      	bne.n	810a952 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810a946:	687b      	ldr	r3, [r7, #4]
 810a948:	68db      	ldr	r3, [r3, #12]
 810a94a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 810a94e:	687b      	ldr	r3, [r7, #4]
 810a950:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810a952:	6878      	ldr	r0, [r7, #4]
 810a954:	f001 faf0 	bl	810bf38 <USB_CoreReset>
 810a958:	4603      	mov	r3, r0
 810a95a:	73fb      	strb	r3, [r7, #15]
 810a95c:	e01b      	b.n	810a996 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810a95e:	687b      	ldr	r3, [r7, #4]
 810a960:	68db      	ldr	r3, [r3, #12]
 810a962:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810a966:	687b      	ldr	r3, [r7, #4]
 810a968:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810a96a:	6878      	ldr	r0, [r7, #4]
 810a96c:	f001 fae4 	bl	810bf38 <USB_CoreReset>
 810a970:	4603      	mov	r3, r0
 810a972:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810a974:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 810a978:	2b00      	cmp	r3, #0
 810a97a:	d106      	bne.n	810a98a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810a97c:	687b      	ldr	r3, [r7, #4]
 810a97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a980:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 810a984:	687b      	ldr	r3, [r7, #4]
 810a986:	639a      	str	r2, [r3, #56]	@ 0x38
 810a988:	e005      	b.n	810a996 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810a98a:	687b      	ldr	r3, [r7, #4]
 810a98c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a98e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810a992:	687b      	ldr	r3, [r7, #4]
 810a994:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810a996:	7fbb      	ldrb	r3, [r7, #30]
 810a998:	2b01      	cmp	r3, #1
 810a99a:	d118      	bne.n	810a9ce <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810a99c:	687b      	ldr	r3, [r7, #4]
 810a99e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a9a0:	b29a      	uxth	r2, r3
 810a9a2:	687b      	ldr	r3, [r7, #4]
 810a9a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810a9a6:	687b      	ldr	r3, [r7, #4]
 810a9a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a9aa:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 810a9ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a9b2:	687a      	ldr	r2, [r7, #4]
 810a9b4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810a9b6:	687b      	ldr	r3, [r7, #4]
 810a9b8:	689b      	ldr	r3, [r3, #8]
 810a9ba:	f043 0206 	orr.w	r2, r3, #6
 810a9be:	687b      	ldr	r3, [r7, #4]
 810a9c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810a9c2:	687b      	ldr	r3, [r7, #4]
 810a9c4:	689b      	ldr	r3, [r3, #8]
 810a9c6:	f043 0220 	orr.w	r2, r3, #32
 810a9ca:	687b      	ldr	r3, [r7, #4]
 810a9cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810a9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 810a9d0:	4618      	mov	r0, r3
 810a9d2:	3710      	adds	r7, #16
 810a9d4:	46bd      	mov	sp, r7
 810a9d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810a9da:	b004      	add	sp, #16
 810a9dc:	4770      	bx	lr
	...

0810a9e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 810a9e0:	b480      	push	{r7}
 810a9e2:	b087      	sub	sp, #28
 810a9e4:	af00      	add	r7, sp, #0
 810a9e6:	60f8      	str	r0, [r7, #12]
 810a9e8:	60b9      	str	r1, [r7, #8]
 810a9ea:	4613      	mov	r3, r2
 810a9ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 810a9ee:	79fb      	ldrb	r3, [r7, #7]
 810a9f0:	2b02      	cmp	r3, #2
 810a9f2:	d165      	bne.n	810aac0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 810a9f4:	68bb      	ldr	r3, [r7, #8]
 810a9f6:	4a41      	ldr	r2, [pc, #260]	@ (810aafc <USB_SetTurnaroundTime+0x11c>)
 810a9f8:	4293      	cmp	r3, r2
 810a9fa:	d906      	bls.n	810aa0a <USB_SetTurnaroundTime+0x2a>
 810a9fc:	68bb      	ldr	r3, [r7, #8]
 810a9fe:	4a40      	ldr	r2, [pc, #256]	@ (810ab00 <USB_SetTurnaroundTime+0x120>)
 810aa00:	4293      	cmp	r3, r2
 810aa02:	d202      	bcs.n	810aa0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 810aa04:	230f      	movs	r3, #15
 810aa06:	617b      	str	r3, [r7, #20]
 810aa08:	e062      	b.n	810aad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 810aa0a:	68bb      	ldr	r3, [r7, #8]
 810aa0c:	4a3c      	ldr	r2, [pc, #240]	@ (810ab00 <USB_SetTurnaroundTime+0x120>)
 810aa0e:	4293      	cmp	r3, r2
 810aa10:	d306      	bcc.n	810aa20 <USB_SetTurnaroundTime+0x40>
 810aa12:	68bb      	ldr	r3, [r7, #8]
 810aa14:	4a3b      	ldr	r2, [pc, #236]	@ (810ab04 <USB_SetTurnaroundTime+0x124>)
 810aa16:	4293      	cmp	r3, r2
 810aa18:	d202      	bcs.n	810aa20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 810aa1a:	230e      	movs	r3, #14
 810aa1c:	617b      	str	r3, [r7, #20]
 810aa1e:	e057      	b.n	810aad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 810aa20:	68bb      	ldr	r3, [r7, #8]
 810aa22:	4a38      	ldr	r2, [pc, #224]	@ (810ab04 <USB_SetTurnaroundTime+0x124>)
 810aa24:	4293      	cmp	r3, r2
 810aa26:	d306      	bcc.n	810aa36 <USB_SetTurnaroundTime+0x56>
 810aa28:	68bb      	ldr	r3, [r7, #8]
 810aa2a:	4a37      	ldr	r2, [pc, #220]	@ (810ab08 <USB_SetTurnaroundTime+0x128>)
 810aa2c:	4293      	cmp	r3, r2
 810aa2e:	d202      	bcs.n	810aa36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 810aa30:	230d      	movs	r3, #13
 810aa32:	617b      	str	r3, [r7, #20]
 810aa34:	e04c      	b.n	810aad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 810aa36:	68bb      	ldr	r3, [r7, #8]
 810aa38:	4a33      	ldr	r2, [pc, #204]	@ (810ab08 <USB_SetTurnaroundTime+0x128>)
 810aa3a:	4293      	cmp	r3, r2
 810aa3c:	d306      	bcc.n	810aa4c <USB_SetTurnaroundTime+0x6c>
 810aa3e:	68bb      	ldr	r3, [r7, #8]
 810aa40:	4a32      	ldr	r2, [pc, #200]	@ (810ab0c <USB_SetTurnaroundTime+0x12c>)
 810aa42:	4293      	cmp	r3, r2
 810aa44:	d802      	bhi.n	810aa4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 810aa46:	230c      	movs	r3, #12
 810aa48:	617b      	str	r3, [r7, #20]
 810aa4a:	e041      	b.n	810aad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 810aa4c:	68bb      	ldr	r3, [r7, #8]
 810aa4e:	4a2f      	ldr	r2, [pc, #188]	@ (810ab0c <USB_SetTurnaroundTime+0x12c>)
 810aa50:	4293      	cmp	r3, r2
 810aa52:	d906      	bls.n	810aa62 <USB_SetTurnaroundTime+0x82>
 810aa54:	68bb      	ldr	r3, [r7, #8]
 810aa56:	4a2e      	ldr	r2, [pc, #184]	@ (810ab10 <USB_SetTurnaroundTime+0x130>)
 810aa58:	4293      	cmp	r3, r2
 810aa5a:	d802      	bhi.n	810aa62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 810aa5c:	230b      	movs	r3, #11
 810aa5e:	617b      	str	r3, [r7, #20]
 810aa60:	e036      	b.n	810aad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 810aa62:	68bb      	ldr	r3, [r7, #8]
 810aa64:	4a2a      	ldr	r2, [pc, #168]	@ (810ab10 <USB_SetTurnaroundTime+0x130>)
 810aa66:	4293      	cmp	r3, r2
 810aa68:	d906      	bls.n	810aa78 <USB_SetTurnaroundTime+0x98>
 810aa6a:	68bb      	ldr	r3, [r7, #8]
 810aa6c:	4a29      	ldr	r2, [pc, #164]	@ (810ab14 <USB_SetTurnaroundTime+0x134>)
 810aa6e:	4293      	cmp	r3, r2
 810aa70:	d802      	bhi.n	810aa78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 810aa72:	230a      	movs	r3, #10
 810aa74:	617b      	str	r3, [r7, #20]
 810aa76:	e02b      	b.n	810aad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 810aa78:	68bb      	ldr	r3, [r7, #8]
 810aa7a:	4a26      	ldr	r2, [pc, #152]	@ (810ab14 <USB_SetTurnaroundTime+0x134>)
 810aa7c:	4293      	cmp	r3, r2
 810aa7e:	d906      	bls.n	810aa8e <USB_SetTurnaroundTime+0xae>
 810aa80:	68bb      	ldr	r3, [r7, #8]
 810aa82:	4a25      	ldr	r2, [pc, #148]	@ (810ab18 <USB_SetTurnaroundTime+0x138>)
 810aa84:	4293      	cmp	r3, r2
 810aa86:	d202      	bcs.n	810aa8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 810aa88:	2309      	movs	r3, #9
 810aa8a:	617b      	str	r3, [r7, #20]
 810aa8c:	e020      	b.n	810aad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 810aa8e:	68bb      	ldr	r3, [r7, #8]
 810aa90:	4a21      	ldr	r2, [pc, #132]	@ (810ab18 <USB_SetTurnaroundTime+0x138>)
 810aa92:	4293      	cmp	r3, r2
 810aa94:	d306      	bcc.n	810aaa4 <USB_SetTurnaroundTime+0xc4>
 810aa96:	68bb      	ldr	r3, [r7, #8]
 810aa98:	4a20      	ldr	r2, [pc, #128]	@ (810ab1c <USB_SetTurnaroundTime+0x13c>)
 810aa9a:	4293      	cmp	r3, r2
 810aa9c:	d802      	bhi.n	810aaa4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 810aa9e:	2308      	movs	r3, #8
 810aaa0:	617b      	str	r3, [r7, #20]
 810aaa2:	e015      	b.n	810aad0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 810aaa4:	68bb      	ldr	r3, [r7, #8]
 810aaa6:	4a1d      	ldr	r2, [pc, #116]	@ (810ab1c <USB_SetTurnaroundTime+0x13c>)
 810aaa8:	4293      	cmp	r3, r2
 810aaaa:	d906      	bls.n	810aaba <USB_SetTurnaroundTime+0xda>
 810aaac:	68bb      	ldr	r3, [r7, #8]
 810aaae:	4a1c      	ldr	r2, [pc, #112]	@ (810ab20 <USB_SetTurnaroundTime+0x140>)
 810aab0:	4293      	cmp	r3, r2
 810aab2:	d202      	bcs.n	810aaba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 810aab4:	2307      	movs	r3, #7
 810aab6:	617b      	str	r3, [r7, #20]
 810aab8:	e00a      	b.n	810aad0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 810aaba:	2306      	movs	r3, #6
 810aabc:	617b      	str	r3, [r7, #20]
 810aabe:	e007      	b.n	810aad0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 810aac0:	79fb      	ldrb	r3, [r7, #7]
 810aac2:	2b00      	cmp	r3, #0
 810aac4:	d102      	bne.n	810aacc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 810aac6:	2309      	movs	r3, #9
 810aac8:	617b      	str	r3, [r7, #20]
 810aaca:	e001      	b.n	810aad0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 810aacc:	2309      	movs	r3, #9
 810aace:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 810aad0:	68fb      	ldr	r3, [r7, #12]
 810aad2:	68db      	ldr	r3, [r3, #12]
 810aad4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 810aad8:	68fb      	ldr	r3, [r7, #12]
 810aada:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 810aadc:	68fb      	ldr	r3, [r7, #12]
 810aade:	68da      	ldr	r2, [r3, #12]
 810aae0:	697b      	ldr	r3, [r7, #20]
 810aae2:	029b      	lsls	r3, r3, #10
 810aae4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 810aae8:	431a      	orrs	r2, r3
 810aaea:	68fb      	ldr	r3, [r7, #12]
 810aaec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810aaee:	2300      	movs	r3, #0
}
 810aaf0:	4618      	mov	r0, r3
 810aaf2:	371c      	adds	r7, #28
 810aaf4:	46bd      	mov	sp, r7
 810aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aafa:	4770      	bx	lr
 810aafc:	00d8acbf 	.word	0x00d8acbf
 810ab00:	00e4e1c0 	.word	0x00e4e1c0
 810ab04:	00f42400 	.word	0x00f42400
 810ab08:	01067380 	.word	0x01067380
 810ab0c:	011a499f 	.word	0x011a499f
 810ab10:	01312cff 	.word	0x01312cff
 810ab14:	014ca43f 	.word	0x014ca43f
 810ab18:	016e3600 	.word	0x016e3600
 810ab1c:	01a6ab1f 	.word	0x01a6ab1f
 810ab20:	01e84800 	.word	0x01e84800

0810ab24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810ab24:	b480      	push	{r7}
 810ab26:	b083      	sub	sp, #12
 810ab28:	af00      	add	r7, sp, #0
 810ab2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 810ab2c:	687b      	ldr	r3, [r7, #4]
 810ab2e:	689b      	ldr	r3, [r3, #8]
 810ab30:	f043 0201 	orr.w	r2, r3, #1
 810ab34:	687b      	ldr	r3, [r7, #4]
 810ab36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810ab38:	2300      	movs	r3, #0
}
 810ab3a:	4618      	mov	r0, r3
 810ab3c:	370c      	adds	r7, #12
 810ab3e:	46bd      	mov	sp, r7
 810ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab44:	4770      	bx	lr

0810ab46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810ab46:	b480      	push	{r7}
 810ab48:	b083      	sub	sp, #12
 810ab4a:	af00      	add	r7, sp, #0
 810ab4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810ab4e:	687b      	ldr	r3, [r7, #4]
 810ab50:	689b      	ldr	r3, [r3, #8]
 810ab52:	f023 0201 	bic.w	r2, r3, #1
 810ab56:	687b      	ldr	r3, [r7, #4]
 810ab58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810ab5a:	2300      	movs	r3, #0
}
 810ab5c:	4618      	mov	r0, r3
 810ab5e:	370c      	adds	r7, #12
 810ab60:	46bd      	mov	sp, r7
 810ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab66:	4770      	bx	lr

0810ab68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810ab68:	b580      	push	{r7, lr}
 810ab6a:	b084      	sub	sp, #16
 810ab6c:	af00      	add	r7, sp, #0
 810ab6e:	6078      	str	r0, [r7, #4]
 810ab70:	460b      	mov	r3, r1
 810ab72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 810ab74:	2300      	movs	r3, #0
 810ab76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810ab78:	687b      	ldr	r3, [r7, #4]
 810ab7a:	68db      	ldr	r3, [r3, #12]
 810ab7c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 810ab80:	687b      	ldr	r3, [r7, #4]
 810ab82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810ab84:	78fb      	ldrb	r3, [r7, #3]
 810ab86:	2b01      	cmp	r3, #1
 810ab88:	d115      	bne.n	810abb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810ab8a:	687b      	ldr	r3, [r7, #4]
 810ab8c:	68db      	ldr	r3, [r3, #12]
 810ab8e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810ab92:	687b      	ldr	r3, [r7, #4]
 810ab94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810ab96:	200a      	movs	r0, #10
 810ab98:	f7f7 ff10 	bl	81029bc <HAL_Delay>
      ms += 10U;
 810ab9c:	68fb      	ldr	r3, [r7, #12]
 810ab9e:	330a      	adds	r3, #10
 810aba0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810aba2:	6878      	ldr	r0, [r7, #4]
 810aba4:	f001 f939 	bl	810be1a <USB_GetMode>
 810aba8:	4603      	mov	r3, r0
 810abaa:	2b01      	cmp	r3, #1
 810abac:	d01e      	beq.n	810abec <USB_SetCurrentMode+0x84>
 810abae:	68fb      	ldr	r3, [r7, #12]
 810abb0:	2bc7      	cmp	r3, #199	@ 0xc7
 810abb2:	d9f0      	bls.n	810ab96 <USB_SetCurrentMode+0x2e>
 810abb4:	e01a      	b.n	810abec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 810abb6:	78fb      	ldrb	r3, [r7, #3]
 810abb8:	2b00      	cmp	r3, #0
 810abba:	d115      	bne.n	810abe8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810abbc:	687b      	ldr	r3, [r7, #4]
 810abbe:	68db      	ldr	r3, [r3, #12]
 810abc0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810abc4:	687b      	ldr	r3, [r7, #4]
 810abc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810abc8:	200a      	movs	r0, #10
 810abca:	f7f7 fef7 	bl	81029bc <HAL_Delay>
      ms += 10U;
 810abce:	68fb      	ldr	r3, [r7, #12]
 810abd0:	330a      	adds	r3, #10
 810abd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810abd4:	6878      	ldr	r0, [r7, #4]
 810abd6:	f001 f920 	bl	810be1a <USB_GetMode>
 810abda:	4603      	mov	r3, r0
 810abdc:	2b00      	cmp	r3, #0
 810abde:	d005      	beq.n	810abec <USB_SetCurrentMode+0x84>
 810abe0:	68fb      	ldr	r3, [r7, #12]
 810abe2:	2bc7      	cmp	r3, #199	@ 0xc7
 810abe4:	d9f0      	bls.n	810abc8 <USB_SetCurrentMode+0x60>
 810abe6:	e001      	b.n	810abec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810abe8:	2301      	movs	r3, #1
 810abea:	e005      	b.n	810abf8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 810abec:	68fb      	ldr	r3, [r7, #12]
 810abee:	2bc8      	cmp	r3, #200	@ 0xc8
 810abf0:	d101      	bne.n	810abf6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810abf2:	2301      	movs	r3, #1
 810abf4:	e000      	b.n	810abf8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810abf6:	2300      	movs	r3, #0
}
 810abf8:	4618      	mov	r0, r3
 810abfa:	3710      	adds	r7, #16
 810abfc:	46bd      	mov	sp, r7
 810abfe:	bd80      	pop	{r7, pc}

0810ac00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810ac00:	b084      	sub	sp, #16
 810ac02:	b580      	push	{r7, lr}
 810ac04:	b086      	sub	sp, #24
 810ac06:	af00      	add	r7, sp, #0
 810ac08:	6078      	str	r0, [r7, #4]
 810ac0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 810ac0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810ac12:	2300      	movs	r3, #0
 810ac14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810ac16:	687b      	ldr	r3, [r7, #4]
 810ac18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810ac1a:	2300      	movs	r3, #0
 810ac1c:	613b      	str	r3, [r7, #16]
 810ac1e:	e009      	b.n	810ac34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810ac20:	687a      	ldr	r2, [r7, #4]
 810ac22:	693b      	ldr	r3, [r7, #16]
 810ac24:	3340      	adds	r3, #64	@ 0x40
 810ac26:	009b      	lsls	r3, r3, #2
 810ac28:	4413      	add	r3, r2
 810ac2a:	2200      	movs	r2, #0
 810ac2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810ac2e:	693b      	ldr	r3, [r7, #16]
 810ac30:	3301      	adds	r3, #1
 810ac32:	613b      	str	r3, [r7, #16]
 810ac34:	693b      	ldr	r3, [r7, #16]
 810ac36:	2b0e      	cmp	r3, #14
 810ac38:	d9f2      	bls.n	810ac20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810ac3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810ac3e:	2b00      	cmp	r3, #0
 810ac40:	d11c      	bne.n	810ac7c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810ac42:	68fb      	ldr	r3, [r7, #12]
 810ac44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ac48:	685b      	ldr	r3, [r3, #4]
 810ac4a:	68fa      	ldr	r2, [r7, #12]
 810ac4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810ac50:	f043 0302 	orr.w	r3, r3, #2
 810ac54:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810ac56:	687b      	ldr	r3, [r7, #4]
 810ac58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ac5a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 810ac5e:	687b      	ldr	r3, [r7, #4]
 810ac60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 810ac62:	687b      	ldr	r3, [r7, #4]
 810ac64:	681b      	ldr	r3, [r3, #0]
 810ac66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810ac6a:	687b      	ldr	r3, [r7, #4]
 810ac6c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810ac6e:	687b      	ldr	r3, [r7, #4]
 810ac70:	681b      	ldr	r3, [r3, #0]
 810ac72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810ac76:	687b      	ldr	r3, [r7, #4]
 810ac78:	601a      	str	r2, [r3, #0]
 810ac7a:	e005      	b.n	810ac88 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810ac7c:	687b      	ldr	r3, [r7, #4]
 810ac7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ac80:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 810ac84:	687b      	ldr	r3, [r7, #4]
 810ac86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810ac88:	68fb      	ldr	r3, [r7, #12]
 810ac8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810ac8e:	461a      	mov	r2, r3
 810ac90:	2300      	movs	r3, #0
 810ac92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810ac94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 810ac98:	2b01      	cmp	r3, #1
 810ac9a:	d10d      	bne.n	810acb8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810ac9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810aca0:	2b00      	cmp	r3, #0
 810aca2:	d104      	bne.n	810acae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810aca4:	2100      	movs	r1, #0
 810aca6:	6878      	ldr	r0, [r7, #4]
 810aca8:	f000 f968 	bl	810af7c <USB_SetDevSpeed>
 810acac:	e008      	b.n	810acc0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810acae:	2101      	movs	r1, #1
 810acb0:	6878      	ldr	r0, [r7, #4]
 810acb2:	f000 f963 	bl	810af7c <USB_SetDevSpeed>
 810acb6:	e003      	b.n	810acc0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810acb8:	2103      	movs	r1, #3
 810acba:	6878      	ldr	r0, [r7, #4]
 810acbc:	f000 f95e 	bl	810af7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810acc0:	2110      	movs	r1, #16
 810acc2:	6878      	ldr	r0, [r7, #4]
 810acc4:	f000 f8fa 	bl	810aebc <USB_FlushTxFifo>
 810acc8:	4603      	mov	r3, r0
 810acca:	2b00      	cmp	r3, #0
 810accc:	d001      	beq.n	810acd2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 810acce:	2301      	movs	r3, #1
 810acd0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810acd2:	6878      	ldr	r0, [r7, #4]
 810acd4:	f000 f924 	bl	810af20 <USB_FlushRxFifo>
 810acd8:	4603      	mov	r3, r0
 810acda:	2b00      	cmp	r3, #0
 810acdc:	d001      	beq.n	810ace2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 810acde:	2301      	movs	r3, #1
 810ace0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810ace2:	68fb      	ldr	r3, [r7, #12]
 810ace4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ace8:	461a      	mov	r2, r3
 810acea:	2300      	movs	r3, #0
 810acec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810acee:	68fb      	ldr	r3, [r7, #12]
 810acf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810acf4:	461a      	mov	r2, r3
 810acf6:	2300      	movs	r3, #0
 810acf8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810acfa:	68fb      	ldr	r3, [r7, #12]
 810acfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ad00:	461a      	mov	r2, r3
 810ad02:	2300      	movs	r3, #0
 810ad04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810ad06:	2300      	movs	r3, #0
 810ad08:	613b      	str	r3, [r7, #16]
 810ad0a:	e043      	b.n	810ad94 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810ad0c:	693b      	ldr	r3, [r7, #16]
 810ad0e:	015a      	lsls	r2, r3, #5
 810ad10:	68fb      	ldr	r3, [r7, #12]
 810ad12:	4413      	add	r3, r2
 810ad14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ad18:	681b      	ldr	r3, [r3, #0]
 810ad1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810ad1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810ad22:	d118      	bne.n	810ad56 <USB_DevInit+0x156>
    {
      if (i == 0U)
 810ad24:	693b      	ldr	r3, [r7, #16]
 810ad26:	2b00      	cmp	r3, #0
 810ad28:	d10a      	bne.n	810ad40 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810ad2a:	693b      	ldr	r3, [r7, #16]
 810ad2c:	015a      	lsls	r2, r3, #5
 810ad2e:	68fb      	ldr	r3, [r7, #12]
 810ad30:	4413      	add	r3, r2
 810ad32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ad36:	461a      	mov	r2, r3
 810ad38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810ad3c:	6013      	str	r3, [r2, #0]
 810ad3e:	e013      	b.n	810ad68 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 810ad40:	693b      	ldr	r3, [r7, #16]
 810ad42:	015a      	lsls	r2, r3, #5
 810ad44:	68fb      	ldr	r3, [r7, #12]
 810ad46:	4413      	add	r3, r2
 810ad48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ad4c:	461a      	mov	r2, r3
 810ad4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810ad52:	6013      	str	r3, [r2, #0]
 810ad54:	e008      	b.n	810ad68 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810ad56:	693b      	ldr	r3, [r7, #16]
 810ad58:	015a      	lsls	r2, r3, #5
 810ad5a:	68fb      	ldr	r3, [r7, #12]
 810ad5c:	4413      	add	r3, r2
 810ad5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ad62:	461a      	mov	r2, r3
 810ad64:	2300      	movs	r3, #0
 810ad66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810ad68:	693b      	ldr	r3, [r7, #16]
 810ad6a:	015a      	lsls	r2, r3, #5
 810ad6c:	68fb      	ldr	r3, [r7, #12]
 810ad6e:	4413      	add	r3, r2
 810ad70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ad74:	461a      	mov	r2, r3
 810ad76:	2300      	movs	r3, #0
 810ad78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810ad7a:	693b      	ldr	r3, [r7, #16]
 810ad7c:	015a      	lsls	r2, r3, #5
 810ad7e:	68fb      	ldr	r3, [r7, #12]
 810ad80:	4413      	add	r3, r2
 810ad82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ad86:	461a      	mov	r2, r3
 810ad88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810ad8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810ad8e:	693b      	ldr	r3, [r7, #16]
 810ad90:	3301      	adds	r3, #1
 810ad92:	613b      	str	r3, [r7, #16]
 810ad94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810ad98:	461a      	mov	r2, r3
 810ad9a:	693b      	ldr	r3, [r7, #16]
 810ad9c:	4293      	cmp	r3, r2
 810ad9e:	d3b5      	bcc.n	810ad0c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810ada0:	2300      	movs	r3, #0
 810ada2:	613b      	str	r3, [r7, #16]
 810ada4:	e043      	b.n	810ae2e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810ada6:	693b      	ldr	r3, [r7, #16]
 810ada8:	015a      	lsls	r2, r3, #5
 810adaa:	68fb      	ldr	r3, [r7, #12]
 810adac:	4413      	add	r3, r2
 810adae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810adb2:	681b      	ldr	r3, [r3, #0]
 810adb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810adb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810adbc:	d118      	bne.n	810adf0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 810adbe:	693b      	ldr	r3, [r7, #16]
 810adc0:	2b00      	cmp	r3, #0
 810adc2:	d10a      	bne.n	810adda <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810adc4:	693b      	ldr	r3, [r7, #16]
 810adc6:	015a      	lsls	r2, r3, #5
 810adc8:	68fb      	ldr	r3, [r7, #12]
 810adca:	4413      	add	r3, r2
 810adcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810add0:	461a      	mov	r2, r3
 810add2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810add6:	6013      	str	r3, [r2, #0]
 810add8:	e013      	b.n	810ae02 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810adda:	693b      	ldr	r3, [r7, #16]
 810addc:	015a      	lsls	r2, r3, #5
 810adde:	68fb      	ldr	r3, [r7, #12]
 810ade0:	4413      	add	r3, r2
 810ade2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810ade6:	461a      	mov	r2, r3
 810ade8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810adec:	6013      	str	r3, [r2, #0]
 810adee:	e008      	b.n	810ae02 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810adf0:	693b      	ldr	r3, [r7, #16]
 810adf2:	015a      	lsls	r2, r3, #5
 810adf4:	68fb      	ldr	r3, [r7, #12]
 810adf6:	4413      	add	r3, r2
 810adf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810adfc:	461a      	mov	r2, r3
 810adfe:	2300      	movs	r3, #0
 810ae00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810ae02:	693b      	ldr	r3, [r7, #16]
 810ae04:	015a      	lsls	r2, r3, #5
 810ae06:	68fb      	ldr	r3, [r7, #12]
 810ae08:	4413      	add	r3, r2
 810ae0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810ae0e:	461a      	mov	r2, r3
 810ae10:	2300      	movs	r3, #0
 810ae12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810ae14:	693b      	ldr	r3, [r7, #16]
 810ae16:	015a      	lsls	r2, r3, #5
 810ae18:	68fb      	ldr	r3, [r7, #12]
 810ae1a:	4413      	add	r3, r2
 810ae1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810ae20:	461a      	mov	r2, r3
 810ae22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810ae26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810ae28:	693b      	ldr	r3, [r7, #16]
 810ae2a:	3301      	adds	r3, #1
 810ae2c:	613b      	str	r3, [r7, #16]
 810ae2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810ae32:	461a      	mov	r2, r3
 810ae34:	693b      	ldr	r3, [r7, #16]
 810ae36:	4293      	cmp	r3, r2
 810ae38:	d3b5      	bcc.n	810ada6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810ae3a:	68fb      	ldr	r3, [r7, #12]
 810ae3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ae40:	691b      	ldr	r3, [r3, #16]
 810ae42:	68fa      	ldr	r2, [r7, #12]
 810ae44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810ae48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810ae4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810ae4e:	687b      	ldr	r3, [r7, #4]
 810ae50:	2200      	movs	r2, #0
 810ae52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810ae54:	687b      	ldr	r3, [r7, #4]
 810ae56:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 810ae5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810ae5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 810ae60:	2b00      	cmp	r3, #0
 810ae62:	d105      	bne.n	810ae70 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810ae64:	687b      	ldr	r3, [r7, #4]
 810ae66:	699b      	ldr	r3, [r3, #24]
 810ae68:	f043 0210 	orr.w	r2, r3, #16
 810ae6c:	687b      	ldr	r3, [r7, #4]
 810ae6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 810ae70:	687b      	ldr	r3, [r7, #4]
 810ae72:	699a      	ldr	r2, [r3, #24]
 810ae74:	4b10      	ldr	r3, [pc, #64]	@ (810aeb8 <USB_DevInit+0x2b8>)
 810ae76:	4313      	orrs	r3, r2
 810ae78:	687a      	ldr	r2, [r7, #4]
 810ae7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810ae7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 810ae80:	2b00      	cmp	r3, #0
 810ae82:	d005      	beq.n	810ae90 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810ae84:	687b      	ldr	r3, [r7, #4]
 810ae86:	699b      	ldr	r3, [r3, #24]
 810ae88:	f043 0208 	orr.w	r2, r3, #8
 810ae8c:	687b      	ldr	r3, [r7, #4]
 810ae8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 810ae90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810ae94:	2b01      	cmp	r3, #1
 810ae96:	d107      	bne.n	810aea8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810ae98:	687b      	ldr	r3, [r7, #4]
 810ae9a:	699b      	ldr	r3, [r3, #24]
 810ae9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810aea0:	f043 0304 	orr.w	r3, r3, #4
 810aea4:	687a      	ldr	r2, [r7, #4]
 810aea6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810aea8:	7dfb      	ldrb	r3, [r7, #23]
}
 810aeaa:	4618      	mov	r0, r3
 810aeac:	3718      	adds	r7, #24
 810aeae:	46bd      	mov	sp, r7
 810aeb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810aeb4:	b004      	add	sp, #16
 810aeb6:	4770      	bx	lr
 810aeb8:	803c3800 	.word	0x803c3800

0810aebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810aebc:	b480      	push	{r7}
 810aebe:	b085      	sub	sp, #20
 810aec0:	af00      	add	r7, sp, #0
 810aec2:	6078      	str	r0, [r7, #4]
 810aec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810aec6:	2300      	movs	r3, #0
 810aec8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810aeca:	68fb      	ldr	r3, [r7, #12]
 810aecc:	3301      	adds	r3, #1
 810aece:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810aed0:	68fb      	ldr	r3, [r7, #12]
 810aed2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810aed6:	d901      	bls.n	810aedc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 810aed8:	2303      	movs	r3, #3
 810aeda:	e01b      	b.n	810af14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810aedc:	687b      	ldr	r3, [r7, #4]
 810aede:	691b      	ldr	r3, [r3, #16]
 810aee0:	2b00      	cmp	r3, #0
 810aee2:	daf2      	bge.n	810aeca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 810aee4:	2300      	movs	r3, #0
 810aee6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810aee8:	683b      	ldr	r3, [r7, #0]
 810aeea:	019b      	lsls	r3, r3, #6
 810aeec:	f043 0220 	orr.w	r2, r3, #32
 810aef0:	687b      	ldr	r3, [r7, #4]
 810aef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810aef4:	68fb      	ldr	r3, [r7, #12]
 810aef6:	3301      	adds	r3, #1
 810aef8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810aefa:	68fb      	ldr	r3, [r7, #12]
 810aefc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810af00:	d901      	bls.n	810af06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810af02:	2303      	movs	r3, #3
 810af04:	e006      	b.n	810af14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810af06:	687b      	ldr	r3, [r7, #4]
 810af08:	691b      	ldr	r3, [r3, #16]
 810af0a:	f003 0320 	and.w	r3, r3, #32
 810af0e:	2b20      	cmp	r3, #32
 810af10:	d0f0      	beq.n	810aef4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810af12:	2300      	movs	r3, #0
}
 810af14:	4618      	mov	r0, r3
 810af16:	3714      	adds	r7, #20
 810af18:	46bd      	mov	sp, r7
 810af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af1e:	4770      	bx	lr

0810af20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810af20:	b480      	push	{r7}
 810af22:	b085      	sub	sp, #20
 810af24:	af00      	add	r7, sp, #0
 810af26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810af28:	2300      	movs	r3, #0
 810af2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810af2c:	68fb      	ldr	r3, [r7, #12]
 810af2e:	3301      	adds	r3, #1
 810af30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810af32:	68fb      	ldr	r3, [r7, #12]
 810af34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810af38:	d901      	bls.n	810af3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810af3a:	2303      	movs	r3, #3
 810af3c:	e018      	b.n	810af70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810af3e:	687b      	ldr	r3, [r7, #4]
 810af40:	691b      	ldr	r3, [r3, #16]
 810af42:	2b00      	cmp	r3, #0
 810af44:	daf2      	bge.n	810af2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810af46:	2300      	movs	r3, #0
 810af48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810af4a:	687b      	ldr	r3, [r7, #4]
 810af4c:	2210      	movs	r2, #16
 810af4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810af50:	68fb      	ldr	r3, [r7, #12]
 810af52:	3301      	adds	r3, #1
 810af54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810af56:	68fb      	ldr	r3, [r7, #12]
 810af58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810af5c:	d901      	bls.n	810af62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 810af5e:	2303      	movs	r3, #3
 810af60:	e006      	b.n	810af70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810af62:	687b      	ldr	r3, [r7, #4]
 810af64:	691b      	ldr	r3, [r3, #16]
 810af66:	f003 0310 	and.w	r3, r3, #16
 810af6a:	2b10      	cmp	r3, #16
 810af6c:	d0f0      	beq.n	810af50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 810af6e:	2300      	movs	r3, #0
}
 810af70:	4618      	mov	r0, r3
 810af72:	3714      	adds	r7, #20
 810af74:	46bd      	mov	sp, r7
 810af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af7a:	4770      	bx	lr

0810af7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810af7c:	b480      	push	{r7}
 810af7e:	b085      	sub	sp, #20
 810af80:	af00      	add	r7, sp, #0
 810af82:	6078      	str	r0, [r7, #4]
 810af84:	460b      	mov	r3, r1
 810af86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810af88:	687b      	ldr	r3, [r7, #4]
 810af8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810af8c:	68fb      	ldr	r3, [r7, #12]
 810af8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810af92:	681a      	ldr	r2, [r3, #0]
 810af94:	78fb      	ldrb	r3, [r7, #3]
 810af96:	68f9      	ldr	r1, [r7, #12]
 810af98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810af9c:	4313      	orrs	r3, r2
 810af9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810afa0:	2300      	movs	r3, #0
}
 810afa2:	4618      	mov	r0, r3
 810afa4:	3714      	adds	r7, #20
 810afa6:	46bd      	mov	sp, r7
 810afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810afac:	4770      	bx	lr

0810afae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 810afae:	b480      	push	{r7}
 810afb0:	b087      	sub	sp, #28
 810afb2:	af00      	add	r7, sp, #0
 810afb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810afb6:	687b      	ldr	r3, [r7, #4]
 810afb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 810afba:	693b      	ldr	r3, [r7, #16]
 810afbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810afc0:	689b      	ldr	r3, [r3, #8]
 810afc2:	f003 0306 	and.w	r3, r3, #6
 810afc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 810afc8:	68fb      	ldr	r3, [r7, #12]
 810afca:	2b00      	cmp	r3, #0
 810afcc:	d102      	bne.n	810afd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 810afce:	2300      	movs	r3, #0
 810afd0:	75fb      	strb	r3, [r7, #23]
 810afd2:	e00a      	b.n	810afea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 810afd4:	68fb      	ldr	r3, [r7, #12]
 810afd6:	2b02      	cmp	r3, #2
 810afd8:	d002      	beq.n	810afe0 <USB_GetDevSpeed+0x32>
 810afda:	68fb      	ldr	r3, [r7, #12]
 810afdc:	2b06      	cmp	r3, #6
 810afde:	d102      	bne.n	810afe6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 810afe0:	2302      	movs	r3, #2
 810afe2:	75fb      	strb	r3, [r7, #23]
 810afe4:	e001      	b.n	810afea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 810afe6:	230f      	movs	r3, #15
 810afe8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 810afea:	7dfb      	ldrb	r3, [r7, #23]
}
 810afec:	4618      	mov	r0, r3
 810afee:	371c      	adds	r7, #28
 810aff0:	46bd      	mov	sp, r7
 810aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aff6:	4770      	bx	lr

0810aff8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 810aff8:	b480      	push	{r7}
 810affa:	b085      	sub	sp, #20
 810affc:	af00      	add	r7, sp, #0
 810affe:	6078      	str	r0, [r7, #4]
 810b000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b002:	687b      	ldr	r3, [r7, #4]
 810b004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 810b006:	683b      	ldr	r3, [r7, #0]
 810b008:	781b      	ldrb	r3, [r3, #0]
 810b00a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 810b00c:	683b      	ldr	r3, [r7, #0]
 810b00e:	785b      	ldrb	r3, [r3, #1]
 810b010:	2b01      	cmp	r3, #1
 810b012:	d13a      	bne.n	810b08a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 810b014:	68fb      	ldr	r3, [r7, #12]
 810b016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b01a:	69da      	ldr	r2, [r3, #28]
 810b01c:	683b      	ldr	r3, [r7, #0]
 810b01e:	781b      	ldrb	r3, [r3, #0]
 810b020:	f003 030f 	and.w	r3, r3, #15
 810b024:	2101      	movs	r1, #1
 810b026:	fa01 f303 	lsl.w	r3, r1, r3
 810b02a:	b29b      	uxth	r3, r3
 810b02c:	68f9      	ldr	r1, [r7, #12]
 810b02e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b032:	4313      	orrs	r3, r2
 810b034:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 810b036:	68bb      	ldr	r3, [r7, #8]
 810b038:	015a      	lsls	r2, r3, #5
 810b03a:	68fb      	ldr	r3, [r7, #12]
 810b03c:	4413      	add	r3, r2
 810b03e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b042:	681b      	ldr	r3, [r3, #0]
 810b044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810b048:	2b00      	cmp	r3, #0
 810b04a:	d155      	bne.n	810b0f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 810b04c:	68bb      	ldr	r3, [r7, #8]
 810b04e:	015a      	lsls	r2, r3, #5
 810b050:	68fb      	ldr	r3, [r7, #12]
 810b052:	4413      	add	r3, r2
 810b054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b058:	681a      	ldr	r2, [r3, #0]
 810b05a:	683b      	ldr	r3, [r7, #0]
 810b05c:	689b      	ldr	r3, [r3, #8]
 810b05e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 810b062:	683b      	ldr	r3, [r7, #0]
 810b064:	791b      	ldrb	r3, [r3, #4]
 810b066:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 810b068:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 810b06a:	68bb      	ldr	r3, [r7, #8]
 810b06c:	059b      	lsls	r3, r3, #22
 810b06e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 810b070:	4313      	orrs	r3, r2
 810b072:	68ba      	ldr	r2, [r7, #8]
 810b074:	0151      	lsls	r1, r2, #5
 810b076:	68fa      	ldr	r2, [r7, #12]
 810b078:	440a      	add	r2, r1
 810b07a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b07e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810b082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810b086:	6013      	str	r3, [r2, #0]
 810b088:	e036      	b.n	810b0f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 810b08a:	68fb      	ldr	r3, [r7, #12]
 810b08c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b090:	69da      	ldr	r2, [r3, #28]
 810b092:	683b      	ldr	r3, [r7, #0]
 810b094:	781b      	ldrb	r3, [r3, #0]
 810b096:	f003 030f 	and.w	r3, r3, #15
 810b09a:	2101      	movs	r1, #1
 810b09c:	fa01 f303 	lsl.w	r3, r1, r3
 810b0a0:	041b      	lsls	r3, r3, #16
 810b0a2:	68f9      	ldr	r1, [r7, #12]
 810b0a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b0a8:	4313      	orrs	r3, r2
 810b0aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 810b0ac:	68bb      	ldr	r3, [r7, #8]
 810b0ae:	015a      	lsls	r2, r3, #5
 810b0b0:	68fb      	ldr	r3, [r7, #12]
 810b0b2:	4413      	add	r3, r2
 810b0b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b0b8:	681b      	ldr	r3, [r3, #0]
 810b0ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810b0be:	2b00      	cmp	r3, #0
 810b0c0:	d11a      	bne.n	810b0f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 810b0c2:	68bb      	ldr	r3, [r7, #8]
 810b0c4:	015a      	lsls	r2, r3, #5
 810b0c6:	68fb      	ldr	r3, [r7, #12]
 810b0c8:	4413      	add	r3, r2
 810b0ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b0ce:	681a      	ldr	r2, [r3, #0]
 810b0d0:	683b      	ldr	r3, [r7, #0]
 810b0d2:	689b      	ldr	r3, [r3, #8]
 810b0d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 810b0d8:	683b      	ldr	r3, [r7, #0]
 810b0da:	791b      	ldrb	r3, [r3, #4]
 810b0dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 810b0de:	430b      	orrs	r3, r1
 810b0e0:	4313      	orrs	r3, r2
 810b0e2:	68ba      	ldr	r2, [r7, #8]
 810b0e4:	0151      	lsls	r1, r2, #5
 810b0e6:	68fa      	ldr	r2, [r7, #12]
 810b0e8:	440a      	add	r2, r1
 810b0ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b0ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810b0f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810b0f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 810b0f8:	2300      	movs	r3, #0
}
 810b0fa:	4618      	mov	r0, r3
 810b0fc:	3714      	adds	r7, #20
 810b0fe:	46bd      	mov	sp, r7
 810b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b104:	4770      	bx	lr
	...

0810b108 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 810b108:	b480      	push	{r7}
 810b10a:	b085      	sub	sp, #20
 810b10c:	af00      	add	r7, sp, #0
 810b10e:	6078      	str	r0, [r7, #4]
 810b110:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b112:	687b      	ldr	r3, [r7, #4]
 810b114:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 810b116:	683b      	ldr	r3, [r7, #0]
 810b118:	781b      	ldrb	r3, [r3, #0]
 810b11a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 810b11c:	683b      	ldr	r3, [r7, #0]
 810b11e:	785b      	ldrb	r3, [r3, #1]
 810b120:	2b01      	cmp	r3, #1
 810b122:	d161      	bne.n	810b1e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810b124:	68bb      	ldr	r3, [r7, #8]
 810b126:	015a      	lsls	r2, r3, #5
 810b128:	68fb      	ldr	r3, [r7, #12]
 810b12a:	4413      	add	r3, r2
 810b12c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b130:	681b      	ldr	r3, [r3, #0]
 810b132:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b136:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b13a:	d11f      	bne.n	810b17c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 810b13c:	68bb      	ldr	r3, [r7, #8]
 810b13e:	015a      	lsls	r2, r3, #5
 810b140:	68fb      	ldr	r3, [r7, #12]
 810b142:	4413      	add	r3, r2
 810b144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b148:	681b      	ldr	r3, [r3, #0]
 810b14a:	68ba      	ldr	r2, [r7, #8]
 810b14c:	0151      	lsls	r1, r2, #5
 810b14e:	68fa      	ldr	r2, [r7, #12]
 810b150:	440a      	add	r2, r1
 810b152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b156:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 810b15a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 810b15c:	68bb      	ldr	r3, [r7, #8]
 810b15e:	015a      	lsls	r2, r3, #5
 810b160:	68fb      	ldr	r3, [r7, #12]
 810b162:	4413      	add	r3, r2
 810b164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b168:	681b      	ldr	r3, [r3, #0]
 810b16a:	68ba      	ldr	r2, [r7, #8]
 810b16c:	0151      	lsls	r1, r2, #5
 810b16e:	68fa      	ldr	r2, [r7, #12]
 810b170:	440a      	add	r2, r1
 810b172:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b176:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810b17a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 810b17c:	68fb      	ldr	r3, [r7, #12]
 810b17e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810b184:	683b      	ldr	r3, [r7, #0]
 810b186:	781b      	ldrb	r3, [r3, #0]
 810b188:	f003 030f 	and.w	r3, r3, #15
 810b18c:	2101      	movs	r1, #1
 810b18e:	fa01 f303 	lsl.w	r3, r1, r3
 810b192:	b29b      	uxth	r3, r3
 810b194:	43db      	mvns	r3, r3
 810b196:	68f9      	ldr	r1, [r7, #12]
 810b198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b19c:	4013      	ands	r3, r2
 810b19e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 810b1a0:	68fb      	ldr	r3, [r7, #12]
 810b1a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b1a6:	69da      	ldr	r2, [r3, #28]
 810b1a8:	683b      	ldr	r3, [r7, #0]
 810b1aa:	781b      	ldrb	r3, [r3, #0]
 810b1ac:	f003 030f 	and.w	r3, r3, #15
 810b1b0:	2101      	movs	r1, #1
 810b1b2:	fa01 f303 	lsl.w	r3, r1, r3
 810b1b6:	b29b      	uxth	r3, r3
 810b1b8:	43db      	mvns	r3, r3
 810b1ba:	68f9      	ldr	r1, [r7, #12]
 810b1bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b1c0:	4013      	ands	r3, r2
 810b1c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 810b1c4:	68bb      	ldr	r3, [r7, #8]
 810b1c6:	015a      	lsls	r2, r3, #5
 810b1c8:	68fb      	ldr	r3, [r7, #12]
 810b1ca:	4413      	add	r3, r2
 810b1cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b1d0:	681a      	ldr	r2, [r3, #0]
 810b1d2:	68bb      	ldr	r3, [r7, #8]
 810b1d4:	0159      	lsls	r1, r3, #5
 810b1d6:	68fb      	ldr	r3, [r7, #12]
 810b1d8:	440b      	add	r3, r1
 810b1da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b1de:	4619      	mov	r1, r3
 810b1e0:	4b35      	ldr	r3, [pc, #212]	@ (810b2b8 <USB_DeactivateEndpoint+0x1b0>)
 810b1e2:	4013      	ands	r3, r2
 810b1e4:	600b      	str	r3, [r1, #0]
 810b1e6:	e060      	b.n	810b2aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810b1e8:	68bb      	ldr	r3, [r7, #8]
 810b1ea:	015a      	lsls	r2, r3, #5
 810b1ec:	68fb      	ldr	r3, [r7, #12]
 810b1ee:	4413      	add	r3, r2
 810b1f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b1f4:	681b      	ldr	r3, [r3, #0]
 810b1f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b1fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b1fe:	d11f      	bne.n	810b240 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 810b200:	68bb      	ldr	r3, [r7, #8]
 810b202:	015a      	lsls	r2, r3, #5
 810b204:	68fb      	ldr	r3, [r7, #12]
 810b206:	4413      	add	r3, r2
 810b208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b20c:	681b      	ldr	r3, [r3, #0]
 810b20e:	68ba      	ldr	r2, [r7, #8]
 810b210:	0151      	lsls	r1, r2, #5
 810b212:	68fa      	ldr	r2, [r7, #12]
 810b214:	440a      	add	r2, r1
 810b216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b21a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 810b21e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 810b220:	68bb      	ldr	r3, [r7, #8]
 810b222:	015a      	lsls	r2, r3, #5
 810b224:	68fb      	ldr	r3, [r7, #12]
 810b226:	4413      	add	r3, r2
 810b228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b22c:	681b      	ldr	r3, [r3, #0]
 810b22e:	68ba      	ldr	r2, [r7, #8]
 810b230:	0151      	lsls	r1, r2, #5
 810b232:	68fa      	ldr	r2, [r7, #12]
 810b234:	440a      	add	r2, r1
 810b236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b23a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810b23e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 810b240:	68fb      	ldr	r3, [r7, #12]
 810b242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810b248:	683b      	ldr	r3, [r7, #0]
 810b24a:	781b      	ldrb	r3, [r3, #0]
 810b24c:	f003 030f 	and.w	r3, r3, #15
 810b250:	2101      	movs	r1, #1
 810b252:	fa01 f303 	lsl.w	r3, r1, r3
 810b256:	041b      	lsls	r3, r3, #16
 810b258:	43db      	mvns	r3, r3
 810b25a:	68f9      	ldr	r1, [r7, #12]
 810b25c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b260:	4013      	ands	r3, r2
 810b262:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 810b264:	68fb      	ldr	r3, [r7, #12]
 810b266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b26a:	69da      	ldr	r2, [r3, #28]
 810b26c:	683b      	ldr	r3, [r7, #0]
 810b26e:	781b      	ldrb	r3, [r3, #0]
 810b270:	f003 030f 	and.w	r3, r3, #15
 810b274:	2101      	movs	r1, #1
 810b276:	fa01 f303 	lsl.w	r3, r1, r3
 810b27a:	041b      	lsls	r3, r3, #16
 810b27c:	43db      	mvns	r3, r3
 810b27e:	68f9      	ldr	r1, [r7, #12]
 810b280:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b284:	4013      	ands	r3, r2
 810b286:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 810b288:	68bb      	ldr	r3, [r7, #8]
 810b28a:	015a      	lsls	r2, r3, #5
 810b28c:	68fb      	ldr	r3, [r7, #12]
 810b28e:	4413      	add	r3, r2
 810b290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b294:	681a      	ldr	r2, [r3, #0]
 810b296:	68bb      	ldr	r3, [r7, #8]
 810b298:	0159      	lsls	r1, r3, #5
 810b29a:	68fb      	ldr	r3, [r7, #12]
 810b29c:	440b      	add	r3, r1
 810b29e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b2a2:	4619      	mov	r1, r3
 810b2a4:	4b05      	ldr	r3, [pc, #20]	@ (810b2bc <USB_DeactivateEndpoint+0x1b4>)
 810b2a6:	4013      	ands	r3, r2
 810b2a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 810b2aa:	2300      	movs	r3, #0
}
 810b2ac:	4618      	mov	r0, r3
 810b2ae:	3714      	adds	r7, #20
 810b2b0:	46bd      	mov	sp, r7
 810b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2b6:	4770      	bx	lr
 810b2b8:	ec337800 	.word	0xec337800
 810b2bc:	eff37800 	.word	0xeff37800

0810b2c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 810b2c0:	b580      	push	{r7, lr}
 810b2c2:	b08a      	sub	sp, #40	@ 0x28
 810b2c4:	af02      	add	r7, sp, #8
 810b2c6:	60f8      	str	r0, [r7, #12]
 810b2c8:	60b9      	str	r1, [r7, #8]
 810b2ca:	4613      	mov	r3, r2
 810b2cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b2ce:	68fb      	ldr	r3, [r7, #12]
 810b2d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 810b2d2:	68bb      	ldr	r3, [r7, #8]
 810b2d4:	781b      	ldrb	r3, [r3, #0]
 810b2d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 810b2d8:	68bb      	ldr	r3, [r7, #8]
 810b2da:	785b      	ldrb	r3, [r3, #1]
 810b2dc:	2b01      	cmp	r3, #1
 810b2de:	f040 817f 	bne.w	810b5e0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 810b2e2:	68bb      	ldr	r3, [r7, #8]
 810b2e4:	691b      	ldr	r3, [r3, #16]
 810b2e6:	2b00      	cmp	r3, #0
 810b2e8:	d132      	bne.n	810b350 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 810b2ea:	69bb      	ldr	r3, [r7, #24]
 810b2ec:	015a      	lsls	r2, r3, #5
 810b2ee:	69fb      	ldr	r3, [r7, #28]
 810b2f0:	4413      	add	r3, r2
 810b2f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b2f6:	691b      	ldr	r3, [r3, #16]
 810b2f8:	69ba      	ldr	r2, [r7, #24]
 810b2fa:	0151      	lsls	r1, r2, #5
 810b2fc:	69fa      	ldr	r2, [r7, #28]
 810b2fe:	440a      	add	r2, r1
 810b300:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b304:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 810b308:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 810b30c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 810b30e:	69bb      	ldr	r3, [r7, #24]
 810b310:	015a      	lsls	r2, r3, #5
 810b312:	69fb      	ldr	r3, [r7, #28]
 810b314:	4413      	add	r3, r2
 810b316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b31a:	691b      	ldr	r3, [r3, #16]
 810b31c:	69ba      	ldr	r2, [r7, #24]
 810b31e:	0151      	lsls	r1, r2, #5
 810b320:	69fa      	ldr	r2, [r7, #28]
 810b322:	440a      	add	r2, r1
 810b324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b328:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810b32c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 810b32e:	69bb      	ldr	r3, [r7, #24]
 810b330:	015a      	lsls	r2, r3, #5
 810b332:	69fb      	ldr	r3, [r7, #28]
 810b334:	4413      	add	r3, r2
 810b336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b33a:	691b      	ldr	r3, [r3, #16]
 810b33c:	69ba      	ldr	r2, [r7, #24]
 810b33e:	0151      	lsls	r1, r2, #5
 810b340:	69fa      	ldr	r2, [r7, #28]
 810b342:	440a      	add	r2, r1
 810b344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b348:	0cdb      	lsrs	r3, r3, #19
 810b34a:	04db      	lsls	r3, r3, #19
 810b34c:	6113      	str	r3, [r2, #16]
 810b34e:	e097      	b.n	810b480 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 810b350:	69bb      	ldr	r3, [r7, #24]
 810b352:	015a      	lsls	r2, r3, #5
 810b354:	69fb      	ldr	r3, [r7, #28]
 810b356:	4413      	add	r3, r2
 810b358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b35c:	691b      	ldr	r3, [r3, #16]
 810b35e:	69ba      	ldr	r2, [r7, #24]
 810b360:	0151      	lsls	r1, r2, #5
 810b362:	69fa      	ldr	r2, [r7, #28]
 810b364:	440a      	add	r2, r1
 810b366:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b36a:	0cdb      	lsrs	r3, r3, #19
 810b36c:	04db      	lsls	r3, r3, #19
 810b36e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 810b370:	69bb      	ldr	r3, [r7, #24]
 810b372:	015a      	lsls	r2, r3, #5
 810b374:	69fb      	ldr	r3, [r7, #28]
 810b376:	4413      	add	r3, r2
 810b378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b37c:	691b      	ldr	r3, [r3, #16]
 810b37e:	69ba      	ldr	r2, [r7, #24]
 810b380:	0151      	lsls	r1, r2, #5
 810b382:	69fa      	ldr	r2, [r7, #28]
 810b384:	440a      	add	r2, r1
 810b386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b38a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 810b38e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 810b392:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 810b394:	69bb      	ldr	r3, [r7, #24]
 810b396:	2b00      	cmp	r3, #0
 810b398:	d11a      	bne.n	810b3d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 810b39a:	68bb      	ldr	r3, [r7, #8]
 810b39c:	691a      	ldr	r2, [r3, #16]
 810b39e:	68bb      	ldr	r3, [r7, #8]
 810b3a0:	689b      	ldr	r3, [r3, #8]
 810b3a2:	429a      	cmp	r2, r3
 810b3a4:	d903      	bls.n	810b3ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 810b3a6:	68bb      	ldr	r3, [r7, #8]
 810b3a8:	689a      	ldr	r2, [r3, #8]
 810b3aa:	68bb      	ldr	r3, [r7, #8]
 810b3ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 810b3ae:	69bb      	ldr	r3, [r7, #24]
 810b3b0:	015a      	lsls	r2, r3, #5
 810b3b2:	69fb      	ldr	r3, [r7, #28]
 810b3b4:	4413      	add	r3, r2
 810b3b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b3ba:	691b      	ldr	r3, [r3, #16]
 810b3bc:	69ba      	ldr	r2, [r7, #24]
 810b3be:	0151      	lsls	r1, r2, #5
 810b3c0:	69fa      	ldr	r2, [r7, #28]
 810b3c2:	440a      	add	r2, r1
 810b3c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b3c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810b3cc:	6113      	str	r3, [r2, #16]
 810b3ce:	e044      	b.n	810b45a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 810b3d0:	68bb      	ldr	r3, [r7, #8]
 810b3d2:	691a      	ldr	r2, [r3, #16]
 810b3d4:	68bb      	ldr	r3, [r7, #8]
 810b3d6:	689b      	ldr	r3, [r3, #8]
 810b3d8:	4413      	add	r3, r2
 810b3da:	1e5a      	subs	r2, r3, #1
 810b3dc:	68bb      	ldr	r3, [r7, #8]
 810b3de:	689b      	ldr	r3, [r3, #8]
 810b3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 810b3e4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 810b3e6:	69bb      	ldr	r3, [r7, #24]
 810b3e8:	015a      	lsls	r2, r3, #5
 810b3ea:	69fb      	ldr	r3, [r7, #28]
 810b3ec:	4413      	add	r3, r2
 810b3ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b3f2:	691a      	ldr	r2, [r3, #16]
 810b3f4:	8afb      	ldrh	r3, [r7, #22]
 810b3f6:	04d9      	lsls	r1, r3, #19
 810b3f8:	4ba4      	ldr	r3, [pc, #656]	@ (810b68c <USB_EPStartXfer+0x3cc>)
 810b3fa:	400b      	ands	r3, r1
 810b3fc:	69b9      	ldr	r1, [r7, #24]
 810b3fe:	0148      	lsls	r0, r1, #5
 810b400:	69f9      	ldr	r1, [r7, #28]
 810b402:	4401      	add	r1, r0
 810b404:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 810b408:	4313      	orrs	r3, r2
 810b40a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 810b40c:	68bb      	ldr	r3, [r7, #8]
 810b40e:	791b      	ldrb	r3, [r3, #4]
 810b410:	2b01      	cmp	r3, #1
 810b412:	d122      	bne.n	810b45a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 810b414:	69bb      	ldr	r3, [r7, #24]
 810b416:	015a      	lsls	r2, r3, #5
 810b418:	69fb      	ldr	r3, [r7, #28]
 810b41a:	4413      	add	r3, r2
 810b41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b420:	691b      	ldr	r3, [r3, #16]
 810b422:	69ba      	ldr	r2, [r7, #24]
 810b424:	0151      	lsls	r1, r2, #5
 810b426:	69fa      	ldr	r2, [r7, #28]
 810b428:	440a      	add	r2, r1
 810b42a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b42e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 810b432:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 810b434:	69bb      	ldr	r3, [r7, #24]
 810b436:	015a      	lsls	r2, r3, #5
 810b438:	69fb      	ldr	r3, [r7, #28]
 810b43a:	4413      	add	r3, r2
 810b43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b440:	691a      	ldr	r2, [r3, #16]
 810b442:	8afb      	ldrh	r3, [r7, #22]
 810b444:	075b      	lsls	r3, r3, #29
 810b446:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 810b44a:	69b9      	ldr	r1, [r7, #24]
 810b44c:	0148      	lsls	r0, r1, #5
 810b44e:	69f9      	ldr	r1, [r7, #28]
 810b450:	4401      	add	r1, r0
 810b452:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 810b456:	4313      	orrs	r3, r2
 810b458:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 810b45a:	69bb      	ldr	r3, [r7, #24]
 810b45c:	015a      	lsls	r2, r3, #5
 810b45e:	69fb      	ldr	r3, [r7, #28]
 810b460:	4413      	add	r3, r2
 810b462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b466:	691a      	ldr	r2, [r3, #16]
 810b468:	68bb      	ldr	r3, [r7, #8]
 810b46a:	691b      	ldr	r3, [r3, #16]
 810b46c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 810b470:	69b9      	ldr	r1, [r7, #24]
 810b472:	0148      	lsls	r0, r1, #5
 810b474:	69f9      	ldr	r1, [r7, #28]
 810b476:	4401      	add	r1, r0
 810b478:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 810b47c:	4313      	orrs	r3, r2
 810b47e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 810b480:	79fb      	ldrb	r3, [r7, #7]
 810b482:	2b01      	cmp	r3, #1
 810b484:	d14b      	bne.n	810b51e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 810b486:	68bb      	ldr	r3, [r7, #8]
 810b488:	69db      	ldr	r3, [r3, #28]
 810b48a:	2b00      	cmp	r3, #0
 810b48c:	d009      	beq.n	810b4a2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 810b48e:	69bb      	ldr	r3, [r7, #24]
 810b490:	015a      	lsls	r2, r3, #5
 810b492:	69fb      	ldr	r3, [r7, #28]
 810b494:	4413      	add	r3, r2
 810b496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b49a:	461a      	mov	r2, r3
 810b49c:	68bb      	ldr	r3, [r7, #8]
 810b49e:	69db      	ldr	r3, [r3, #28]
 810b4a0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 810b4a2:	68bb      	ldr	r3, [r7, #8]
 810b4a4:	791b      	ldrb	r3, [r3, #4]
 810b4a6:	2b01      	cmp	r3, #1
 810b4a8:	d128      	bne.n	810b4fc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 810b4aa:	69fb      	ldr	r3, [r7, #28]
 810b4ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b4b0:	689b      	ldr	r3, [r3, #8]
 810b4b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b4b6:	2b00      	cmp	r3, #0
 810b4b8:	d110      	bne.n	810b4dc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 810b4ba:	69bb      	ldr	r3, [r7, #24]
 810b4bc:	015a      	lsls	r2, r3, #5
 810b4be:	69fb      	ldr	r3, [r7, #28]
 810b4c0:	4413      	add	r3, r2
 810b4c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b4c6:	681b      	ldr	r3, [r3, #0]
 810b4c8:	69ba      	ldr	r2, [r7, #24]
 810b4ca:	0151      	lsls	r1, r2, #5
 810b4cc:	69fa      	ldr	r2, [r7, #28]
 810b4ce:	440a      	add	r2, r1
 810b4d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b4d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 810b4d8:	6013      	str	r3, [r2, #0]
 810b4da:	e00f      	b.n	810b4fc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 810b4dc:	69bb      	ldr	r3, [r7, #24]
 810b4de:	015a      	lsls	r2, r3, #5
 810b4e0:	69fb      	ldr	r3, [r7, #28]
 810b4e2:	4413      	add	r3, r2
 810b4e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b4e8:	681b      	ldr	r3, [r3, #0]
 810b4ea:	69ba      	ldr	r2, [r7, #24]
 810b4ec:	0151      	lsls	r1, r2, #5
 810b4ee:	69fa      	ldr	r2, [r7, #28]
 810b4f0:	440a      	add	r2, r1
 810b4f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b4f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810b4fa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 810b4fc:	69bb      	ldr	r3, [r7, #24]
 810b4fe:	015a      	lsls	r2, r3, #5
 810b500:	69fb      	ldr	r3, [r7, #28]
 810b502:	4413      	add	r3, r2
 810b504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b508:	681b      	ldr	r3, [r3, #0]
 810b50a:	69ba      	ldr	r2, [r7, #24]
 810b50c:	0151      	lsls	r1, r2, #5
 810b50e:	69fa      	ldr	r2, [r7, #28]
 810b510:	440a      	add	r2, r1
 810b512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b516:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 810b51a:	6013      	str	r3, [r2, #0]
 810b51c:	e166      	b.n	810b7ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 810b51e:	69bb      	ldr	r3, [r7, #24]
 810b520:	015a      	lsls	r2, r3, #5
 810b522:	69fb      	ldr	r3, [r7, #28]
 810b524:	4413      	add	r3, r2
 810b526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b52a:	681b      	ldr	r3, [r3, #0]
 810b52c:	69ba      	ldr	r2, [r7, #24]
 810b52e:	0151      	lsls	r1, r2, #5
 810b530:	69fa      	ldr	r2, [r7, #28]
 810b532:	440a      	add	r2, r1
 810b534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b538:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 810b53c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 810b53e:	68bb      	ldr	r3, [r7, #8]
 810b540:	791b      	ldrb	r3, [r3, #4]
 810b542:	2b01      	cmp	r3, #1
 810b544:	d015      	beq.n	810b572 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 810b546:	68bb      	ldr	r3, [r7, #8]
 810b548:	691b      	ldr	r3, [r3, #16]
 810b54a:	2b00      	cmp	r3, #0
 810b54c:	f000 814e 	beq.w	810b7ec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 810b550:	69fb      	ldr	r3, [r7, #28]
 810b552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810b558:	68bb      	ldr	r3, [r7, #8]
 810b55a:	781b      	ldrb	r3, [r3, #0]
 810b55c:	f003 030f 	and.w	r3, r3, #15
 810b560:	2101      	movs	r1, #1
 810b562:	fa01 f303 	lsl.w	r3, r1, r3
 810b566:	69f9      	ldr	r1, [r7, #28]
 810b568:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b56c:	4313      	orrs	r3, r2
 810b56e:	634b      	str	r3, [r1, #52]	@ 0x34
 810b570:	e13c      	b.n	810b7ec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 810b572:	69fb      	ldr	r3, [r7, #28]
 810b574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b578:	689b      	ldr	r3, [r3, #8]
 810b57a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b57e:	2b00      	cmp	r3, #0
 810b580:	d110      	bne.n	810b5a4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 810b582:	69bb      	ldr	r3, [r7, #24]
 810b584:	015a      	lsls	r2, r3, #5
 810b586:	69fb      	ldr	r3, [r7, #28]
 810b588:	4413      	add	r3, r2
 810b58a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b58e:	681b      	ldr	r3, [r3, #0]
 810b590:	69ba      	ldr	r2, [r7, #24]
 810b592:	0151      	lsls	r1, r2, #5
 810b594:	69fa      	ldr	r2, [r7, #28]
 810b596:	440a      	add	r2, r1
 810b598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b59c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 810b5a0:	6013      	str	r3, [r2, #0]
 810b5a2:	e00f      	b.n	810b5c4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 810b5a4:	69bb      	ldr	r3, [r7, #24]
 810b5a6:	015a      	lsls	r2, r3, #5
 810b5a8:	69fb      	ldr	r3, [r7, #28]
 810b5aa:	4413      	add	r3, r2
 810b5ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b5b0:	681b      	ldr	r3, [r3, #0]
 810b5b2:	69ba      	ldr	r2, [r7, #24]
 810b5b4:	0151      	lsls	r1, r2, #5
 810b5b6:	69fa      	ldr	r2, [r7, #28]
 810b5b8:	440a      	add	r2, r1
 810b5ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b5be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810b5c2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 810b5c4:	68bb      	ldr	r3, [r7, #8]
 810b5c6:	68d9      	ldr	r1, [r3, #12]
 810b5c8:	68bb      	ldr	r3, [r7, #8]
 810b5ca:	781a      	ldrb	r2, [r3, #0]
 810b5cc:	68bb      	ldr	r3, [r7, #8]
 810b5ce:	691b      	ldr	r3, [r3, #16]
 810b5d0:	b298      	uxth	r0, r3
 810b5d2:	79fb      	ldrb	r3, [r7, #7]
 810b5d4:	9300      	str	r3, [sp, #0]
 810b5d6:	4603      	mov	r3, r0
 810b5d8:	68f8      	ldr	r0, [r7, #12]
 810b5da:	f000 f9b9 	bl	810b950 <USB_WritePacket>
 810b5de:	e105      	b.n	810b7ec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 810b5e0:	69bb      	ldr	r3, [r7, #24]
 810b5e2:	015a      	lsls	r2, r3, #5
 810b5e4:	69fb      	ldr	r3, [r7, #28]
 810b5e6:	4413      	add	r3, r2
 810b5e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b5ec:	691b      	ldr	r3, [r3, #16]
 810b5ee:	69ba      	ldr	r2, [r7, #24]
 810b5f0:	0151      	lsls	r1, r2, #5
 810b5f2:	69fa      	ldr	r2, [r7, #28]
 810b5f4:	440a      	add	r2, r1
 810b5f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b5fa:	0cdb      	lsrs	r3, r3, #19
 810b5fc:	04db      	lsls	r3, r3, #19
 810b5fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 810b600:	69bb      	ldr	r3, [r7, #24]
 810b602:	015a      	lsls	r2, r3, #5
 810b604:	69fb      	ldr	r3, [r7, #28]
 810b606:	4413      	add	r3, r2
 810b608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b60c:	691b      	ldr	r3, [r3, #16]
 810b60e:	69ba      	ldr	r2, [r7, #24]
 810b610:	0151      	lsls	r1, r2, #5
 810b612:	69fa      	ldr	r2, [r7, #28]
 810b614:	440a      	add	r2, r1
 810b616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b61a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 810b61e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 810b622:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 810b624:	69bb      	ldr	r3, [r7, #24]
 810b626:	2b00      	cmp	r3, #0
 810b628:	d132      	bne.n	810b690 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 810b62a:	68bb      	ldr	r3, [r7, #8]
 810b62c:	691b      	ldr	r3, [r3, #16]
 810b62e:	2b00      	cmp	r3, #0
 810b630:	d003      	beq.n	810b63a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 810b632:	68bb      	ldr	r3, [r7, #8]
 810b634:	689a      	ldr	r2, [r3, #8]
 810b636:	68bb      	ldr	r3, [r7, #8]
 810b638:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 810b63a:	68bb      	ldr	r3, [r7, #8]
 810b63c:	689a      	ldr	r2, [r3, #8]
 810b63e:	68bb      	ldr	r3, [r7, #8]
 810b640:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 810b642:	69bb      	ldr	r3, [r7, #24]
 810b644:	015a      	lsls	r2, r3, #5
 810b646:	69fb      	ldr	r3, [r7, #28]
 810b648:	4413      	add	r3, r2
 810b64a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b64e:	691a      	ldr	r2, [r3, #16]
 810b650:	68bb      	ldr	r3, [r7, #8]
 810b652:	6a1b      	ldr	r3, [r3, #32]
 810b654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 810b658:	69b9      	ldr	r1, [r7, #24]
 810b65a:	0148      	lsls	r0, r1, #5
 810b65c:	69f9      	ldr	r1, [r7, #28]
 810b65e:	4401      	add	r1, r0
 810b660:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 810b664:	4313      	orrs	r3, r2
 810b666:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 810b668:	69bb      	ldr	r3, [r7, #24]
 810b66a:	015a      	lsls	r2, r3, #5
 810b66c:	69fb      	ldr	r3, [r7, #28]
 810b66e:	4413      	add	r3, r2
 810b670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b674:	691b      	ldr	r3, [r3, #16]
 810b676:	69ba      	ldr	r2, [r7, #24]
 810b678:	0151      	lsls	r1, r2, #5
 810b67a:	69fa      	ldr	r2, [r7, #28]
 810b67c:	440a      	add	r2, r1
 810b67e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b682:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810b686:	6113      	str	r3, [r2, #16]
 810b688:	e062      	b.n	810b750 <USB_EPStartXfer+0x490>
 810b68a:	bf00      	nop
 810b68c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 810b690:	68bb      	ldr	r3, [r7, #8]
 810b692:	691b      	ldr	r3, [r3, #16]
 810b694:	2b00      	cmp	r3, #0
 810b696:	d123      	bne.n	810b6e0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 810b698:	69bb      	ldr	r3, [r7, #24]
 810b69a:	015a      	lsls	r2, r3, #5
 810b69c:	69fb      	ldr	r3, [r7, #28]
 810b69e:	4413      	add	r3, r2
 810b6a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b6a4:	691a      	ldr	r2, [r3, #16]
 810b6a6:	68bb      	ldr	r3, [r7, #8]
 810b6a8:	689b      	ldr	r3, [r3, #8]
 810b6aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 810b6ae:	69b9      	ldr	r1, [r7, #24]
 810b6b0:	0148      	lsls	r0, r1, #5
 810b6b2:	69f9      	ldr	r1, [r7, #28]
 810b6b4:	4401      	add	r1, r0
 810b6b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 810b6ba:	4313      	orrs	r3, r2
 810b6bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 810b6be:	69bb      	ldr	r3, [r7, #24]
 810b6c0:	015a      	lsls	r2, r3, #5
 810b6c2:	69fb      	ldr	r3, [r7, #28]
 810b6c4:	4413      	add	r3, r2
 810b6c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b6ca:	691b      	ldr	r3, [r3, #16]
 810b6cc:	69ba      	ldr	r2, [r7, #24]
 810b6ce:	0151      	lsls	r1, r2, #5
 810b6d0:	69fa      	ldr	r2, [r7, #28]
 810b6d2:	440a      	add	r2, r1
 810b6d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b6d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810b6dc:	6113      	str	r3, [r2, #16]
 810b6de:	e037      	b.n	810b750 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 810b6e0:	68bb      	ldr	r3, [r7, #8]
 810b6e2:	691a      	ldr	r2, [r3, #16]
 810b6e4:	68bb      	ldr	r3, [r7, #8]
 810b6e6:	689b      	ldr	r3, [r3, #8]
 810b6e8:	4413      	add	r3, r2
 810b6ea:	1e5a      	subs	r2, r3, #1
 810b6ec:	68bb      	ldr	r3, [r7, #8]
 810b6ee:	689b      	ldr	r3, [r3, #8]
 810b6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 810b6f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 810b6f6:	68bb      	ldr	r3, [r7, #8]
 810b6f8:	689b      	ldr	r3, [r3, #8]
 810b6fa:	8afa      	ldrh	r2, [r7, #22]
 810b6fc:	fb03 f202 	mul.w	r2, r3, r2
 810b700:	68bb      	ldr	r3, [r7, #8]
 810b702:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 810b704:	69bb      	ldr	r3, [r7, #24]
 810b706:	015a      	lsls	r2, r3, #5
 810b708:	69fb      	ldr	r3, [r7, #28]
 810b70a:	4413      	add	r3, r2
 810b70c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b710:	691a      	ldr	r2, [r3, #16]
 810b712:	8afb      	ldrh	r3, [r7, #22]
 810b714:	04d9      	lsls	r1, r3, #19
 810b716:	4b38      	ldr	r3, [pc, #224]	@ (810b7f8 <USB_EPStartXfer+0x538>)
 810b718:	400b      	ands	r3, r1
 810b71a:	69b9      	ldr	r1, [r7, #24]
 810b71c:	0148      	lsls	r0, r1, #5
 810b71e:	69f9      	ldr	r1, [r7, #28]
 810b720:	4401      	add	r1, r0
 810b722:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 810b726:	4313      	orrs	r3, r2
 810b728:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 810b72a:	69bb      	ldr	r3, [r7, #24]
 810b72c:	015a      	lsls	r2, r3, #5
 810b72e:	69fb      	ldr	r3, [r7, #28]
 810b730:	4413      	add	r3, r2
 810b732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b736:	691a      	ldr	r2, [r3, #16]
 810b738:	68bb      	ldr	r3, [r7, #8]
 810b73a:	6a1b      	ldr	r3, [r3, #32]
 810b73c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 810b740:	69b9      	ldr	r1, [r7, #24]
 810b742:	0148      	lsls	r0, r1, #5
 810b744:	69f9      	ldr	r1, [r7, #28]
 810b746:	4401      	add	r1, r0
 810b748:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 810b74c:	4313      	orrs	r3, r2
 810b74e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 810b750:	79fb      	ldrb	r3, [r7, #7]
 810b752:	2b01      	cmp	r3, #1
 810b754:	d10d      	bne.n	810b772 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 810b756:	68bb      	ldr	r3, [r7, #8]
 810b758:	68db      	ldr	r3, [r3, #12]
 810b75a:	2b00      	cmp	r3, #0
 810b75c:	d009      	beq.n	810b772 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 810b75e:	68bb      	ldr	r3, [r7, #8]
 810b760:	68d9      	ldr	r1, [r3, #12]
 810b762:	69bb      	ldr	r3, [r7, #24]
 810b764:	015a      	lsls	r2, r3, #5
 810b766:	69fb      	ldr	r3, [r7, #28]
 810b768:	4413      	add	r3, r2
 810b76a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b76e:	460a      	mov	r2, r1
 810b770:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 810b772:	68bb      	ldr	r3, [r7, #8]
 810b774:	791b      	ldrb	r3, [r3, #4]
 810b776:	2b01      	cmp	r3, #1
 810b778:	d128      	bne.n	810b7cc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 810b77a:	69fb      	ldr	r3, [r7, #28]
 810b77c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b780:	689b      	ldr	r3, [r3, #8]
 810b782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b786:	2b00      	cmp	r3, #0
 810b788:	d110      	bne.n	810b7ac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 810b78a:	69bb      	ldr	r3, [r7, #24]
 810b78c:	015a      	lsls	r2, r3, #5
 810b78e:	69fb      	ldr	r3, [r7, #28]
 810b790:	4413      	add	r3, r2
 810b792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b796:	681b      	ldr	r3, [r3, #0]
 810b798:	69ba      	ldr	r2, [r7, #24]
 810b79a:	0151      	lsls	r1, r2, #5
 810b79c:	69fa      	ldr	r2, [r7, #28]
 810b79e:	440a      	add	r2, r1
 810b7a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b7a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 810b7a8:	6013      	str	r3, [r2, #0]
 810b7aa:	e00f      	b.n	810b7cc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 810b7ac:	69bb      	ldr	r3, [r7, #24]
 810b7ae:	015a      	lsls	r2, r3, #5
 810b7b0:	69fb      	ldr	r3, [r7, #28]
 810b7b2:	4413      	add	r3, r2
 810b7b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b7b8:	681b      	ldr	r3, [r3, #0]
 810b7ba:	69ba      	ldr	r2, [r7, #24]
 810b7bc:	0151      	lsls	r1, r2, #5
 810b7be:	69fa      	ldr	r2, [r7, #28]
 810b7c0:	440a      	add	r2, r1
 810b7c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b7c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810b7ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 810b7cc:	69bb      	ldr	r3, [r7, #24]
 810b7ce:	015a      	lsls	r2, r3, #5
 810b7d0:	69fb      	ldr	r3, [r7, #28]
 810b7d2:	4413      	add	r3, r2
 810b7d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b7d8:	681b      	ldr	r3, [r3, #0]
 810b7da:	69ba      	ldr	r2, [r7, #24]
 810b7dc:	0151      	lsls	r1, r2, #5
 810b7de:	69fa      	ldr	r2, [r7, #28]
 810b7e0:	440a      	add	r2, r1
 810b7e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b7e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 810b7ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 810b7ec:	2300      	movs	r3, #0
}
 810b7ee:	4618      	mov	r0, r3
 810b7f0:	3720      	adds	r7, #32
 810b7f2:	46bd      	mov	sp, r7
 810b7f4:	bd80      	pop	{r7, pc}
 810b7f6:	bf00      	nop
 810b7f8:	1ff80000 	.word	0x1ff80000

0810b7fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 810b7fc:	b480      	push	{r7}
 810b7fe:	b087      	sub	sp, #28
 810b800:	af00      	add	r7, sp, #0
 810b802:	6078      	str	r0, [r7, #4]
 810b804:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810b806:	2300      	movs	r3, #0
 810b808:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 810b80a:	2300      	movs	r3, #0
 810b80c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b80e:	687b      	ldr	r3, [r7, #4]
 810b810:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 810b812:	683b      	ldr	r3, [r7, #0]
 810b814:	785b      	ldrb	r3, [r3, #1]
 810b816:	2b01      	cmp	r3, #1
 810b818:	d14a      	bne.n	810b8b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810b81a:	683b      	ldr	r3, [r7, #0]
 810b81c:	781b      	ldrb	r3, [r3, #0]
 810b81e:	015a      	lsls	r2, r3, #5
 810b820:	693b      	ldr	r3, [r7, #16]
 810b822:	4413      	add	r3, r2
 810b824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b828:	681b      	ldr	r3, [r3, #0]
 810b82a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b82e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b832:	f040 8086 	bne.w	810b942 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 810b836:	683b      	ldr	r3, [r7, #0]
 810b838:	781b      	ldrb	r3, [r3, #0]
 810b83a:	015a      	lsls	r2, r3, #5
 810b83c:	693b      	ldr	r3, [r7, #16]
 810b83e:	4413      	add	r3, r2
 810b840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b844:	681b      	ldr	r3, [r3, #0]
 810b846:	683a      	ldr	r2, [r7, #0]
 810b848:	7812      	ldrb	r2, [r2, #0]
 810b84a:	0151      	lsls	r1, r2, #5
 810b84c:	693a      	ldr	r2, [r7, #16]
 810b84e:	440a      	add	r2, r1
 810b850:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b854:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 810b858:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 810b85a:	683b      	ldr	r3, [r7, #0]
 810b85c:	781b      	ldrb	r3, [r3, #0]
 810b85e:	015a      	lsls	r2, r3, #5
 810b860:	693b      	ldr	r3, [r7, #16]
 810b862:	4413      	add	r3, r2
 810b864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b868:	681b      	ldr	r3, [r3, #0]
 810b86a:	683a      	ldr	r2, [r7, #0]
 810b86c:	7812      	ldrb	r2, [r2, #0]
 810b86e:	0151      	lsls	r1, r2, #5
 810b870:	693a      	ldr	r2, [r7, #16]
 810b872:	440a      	add	r2, r1
 810b874:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b878:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810b87c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 810b87e:	68fb      	ldr	r3, [r7, #12]
 810b880:	3301      	adds	r3, #1
 810b882:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 810b884:	68fb      	ldr	r3, [r7, #12]
 810b886:	f242 7210 	movw	r2, #10000	@ 0x2710
 810b88a:	4293      	cmp	r3, r2
 810b88c:	d902      	bls.n	810b894 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 810b88e:	2301      	movs	r3, #1
 810b890:	75fb      	strb	r3, [r7, #23]
          break;
 810b892:	e056      	b.n	810b942 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 810b894:	683b      	ldr	r3, [r7, #0]
 810b896:	781b      	ldrb	r3, [r3, #0]
 810b898:	015a      	lsls	r2, r3, #5
 810b89a:	693b      	ldr	r3, [r7, #16]
 810b89c:	4413      	add	r3, r2
 810b89e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b8a2:	681b      	ldr	r3, [r3, #0]
 810b8a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b8a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b8ac:	d0e7      	beq.n	810b87e <USB_EPStopXfer+0x82>
 810b8ae:	e048      	b.n	810b942 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810b8b0:	683b      	ldr	r3, [r7, #0]
 810b8b2:	781b      	ldrb	r3, [r3, #0]
 810b8b4:	015a      	lsls	r2, r3, #5
 810b8b6:	693b      	ldr	r3, [r7, #16]
 810b8b8:	4413      	add	r3, r2
 810b8ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b8be:	681b      	ldr	r3, [r3, #0]
 810b8c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b8c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b8c8:	d13b      	bne.n	810b942 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 810b8ca:	683b      	ldr	r3, [r7, #0]
 810b8cc:	781b      	ldrb	r3, [r3, #0]
 810b8ce:	015a      	lsls	r2, r3, #5
 810b8d0:	693b      	ldr	r3, [r7, #16]
 810b8d2:	4413      	add	r3, r2
 810b8d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b8d8:	681b      	ldr	r3, [r3, #0]
 810b8da:	683a      	ldr	r2, [r7, #0]
 810b8dc:	7812      	ldrb	r2, [r2, #0]
 810b8de:	0151      	lsls	r1, r2, #5
 810b8e0:	693a      	ldr	r2, [r7, #16]
 810b8e2:	440a      	add	r2, r1
 810b8e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b8e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 810b8ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 810b8ee:	683b      	ldr	r3, [r7, #0]
 810b8f0:	781b      	ldrb	r3, [r3, #0]
 810b8f2:	015a      	lsls	r2, r3, #5
 810b8f4:	693b      	ldr	r3, [r7, #16]
 810b8f6:	4413      	add	r3, r2
 810b8f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b8fc:	681b      	ldr	r3, [r3, #0]
 810b8fe:	683a      	ldr	r2, [r7, #0]
 810b900:	7812      	ldrb	r2, [r2, #0]
 810b902:	0151      	lsls	r1, r2, #5
 810b904:	693a      	ldr	r2, [r7, #16]
 810b906:	440a      	add	r2, r1
 810b908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b90c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810b910:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 810b912:	68fb      	ldr	r3, [r7, #12]
 810b914:	3301      	adds	r3, #1
 810b916:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 810b918:	68fb      	ldr	r3, [r7, #12]
 810b91a:	f242 7210 	movw	r2, #10000	@ 0x2710
 810b91e:	4293      	cmp	r3, r2
 810b920:	d902      	bls.n	810b928 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 810b922:	2301      	movs	r3, #1
 810b924:	75fb      	strb	r3, [r7, #23]
          break;
 810b926:	e00c      	b.n	810b942 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 810b928:	683b      	ldr	r3, [r7, #0]
 810b92a:	781b      	ldrb	r3, [r3, #0]
 810b92c:	015a      	lsls	r2, r3, #5
 810b92e:	693b      	ldr	r3, [r7, #16]
 810b930:	4413      	add	r3, r2
 810b932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b936:	681b      	ldr	r3, [r3, #0]
 810b938:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b93c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b940:	d0e7      	beq.n	810b912 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 810b942:	7dfb      	ldrb	r3, [r7, #23]
}
 810b944:	4618      	mov	r0, r3
 810b946:	371c      	adds	r7, #28
 810b948:	46bd      	mov	sp, r7
 810b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b94e:	4770      	bx	lr

0810b950 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 810b950:	b480      	push	{r7}
 810b952:	b089      	sub	sp, #36	@ 0x24
 810b954:	af00      	add	r7, sp, #0
 810b956:	60f8      	str	r0, [r7, #12]
 810b958:	60b9      	str	r1, [r7, #8]
 810b95a:	4611      	mov	r1, r2
 810b95c:	461a      	mov	r2, r3
 810b95e:	460b      	mov	r3, r1
 810b960:	71fb      	strb	r3, [r7, #7]
 810b962:	4613      	mov	r3, r2
 810b964:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b966:	68fb      	ldr	r3, [r7, #12]
 810b968:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 810b96a:	68bb      	ldr	r3, [r7, #8]
 810b96c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 810b96e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 810b972:	2b00      	cmp	r3, #0
 810b974:	d123      	bne.n	810b9be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 810b976:	88bb      	ldrh	r3, [r7, #4]
 810b978:	3303      	adds	r3, #3
 810b97a:	089b      	lsrs	r3, r3, #2
 810b97c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 810b97e:	2300      	movs	r3, #0
 810b980:	61bb      	str	r3, [r7, #24]
 810b982:	e018      	b.n	810b9b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 810b984:	79fb      	ldrb	r3, [r7, #7]
 810b986:	031a      	lsls	r2, r3, #12
 810b988:	697b      	ldr	r3, [r7, #20]
 810b98a:	4413      	add	r3, r2
 810b98c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810b990:	461a      	mov	r2, r3
 810b992:	69fb      	ldr	r3, [r7, #28]
 810b994:	681b      	ldr	r3, [r3, #0]
 810b996:	6013      	str	r3, [r2, #0]
      pSrc++;
 810b998:	69fb      	ldr	r3, [r7, #28]
 810b99a:	3301      	adds	r3, #1
 810b99c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 810b99e:	69fb      	ldr	r3, [r7, #28]
 810b9a0:	3301      	adds	r3, #1
 810b9a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 810b9a4:	69fb      	ldr	r3, [r7, #28]
 810b9a6:	3301      	adds	r3, #1
 810b9a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 810b9aa:	69fb      	ldr	r3, [r7, #28]
 810b9ac:	3301      	adds	r3, #1
 810b9ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 810b9b0:	69bb      	ldr	r3, [r7, #24]
 810b9b2:	3301      	adds	r3, #1
 810b9b4:	61bb      	str	r3, [r7, #24]
 810b9b6:	69ba      	ldr	r2, [r7, #24]
 810b9b8:	693b      	ldr	r3, [r7, #16]
 810b9ba:	429a      	cmp	r2, r3
 810b9bc:	d3e2      	bcc.n	810b984 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 810b9be:	2300      	movs	r3, #0
}
 810b9c0:	4618      	mov	r0, r3
 810b9c2:	3724      	adds	r7, #36	@ 0x24
 810b9c4:	46bd      	mov	sp, r7
 810b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9ca:	4770      	bx	lr

0810b9cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 810b9cc:	b480      	push	{r7}
 810b9ce:	b08b      	sub	sp, #44	@ 0x2c
 810b9d0:	af00      	add	r7, sp, #0
 810b9d2:	60f8      	str	r0, [r7, #12]
 810b9d4:	60b9      	str	r1, [r7, #8]
 810b9d6:	4613      	mov	r3, r2
 810b9d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b9da:	68fb      	ldr	r3, [r7, #12]
 810b9dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 810b9de:	68bb      	ldr	r3, [r7, #8]
 810b9e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 810b9e2:	88fb      	ldrh	r3, [r7, #6]
 810b9e4:	089b      	lsrs	r3, r3, #2
 810b9e6:	b29b      	uxth	r3, r3
 810b9e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 810b9ea:	88fb      	ldrh	r3, [r7, #6]
 810b9ec:	f003 0303 	and.w	r3, r3, #3
 810b9f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 810b9f2:	2300      	movs	r3, #0
 810b9f4:	623b      	str	r3, [r7, #32]
 810b9f6:	e014      	b.n	810ba22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 810b9f8:	69bb      	ldr	r3, [r7, #24]
 810b9fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810b9fe:	681a      	ldr	r2, [r3, #0]
 810ba00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba02:	601a      	str	r2, [r3, #0]
    pDest++;
 810ba04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba06:	3301      	adds	r3, #1
 810ba08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 810ba0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba0c:	3301      	adds	r3, #1
 810ba0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 810ba10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba12:	3301      	adds	r3, #1
 810ba14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 810ba16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba18:	3301      	adds	r3, #1
 810ba1a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 810ba1c:	6a3b      	ldr	r3, [r7, #32]
 810ba1e:	3301      	adds	r3, #1
 810ba20:	623b      	str	r3, [r7, #32]
 810ba22:	6a3a      	ldr	r2, [r7, #32]
 810ba24:	697b      	ldr	r3, [r7, #20]
 810ba26:	429a      	cmp	r2, r3
 810ba28:	d3e6      	bcc.n	810b9f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 810ba2a:	8bfb      	ldrh	r3, [r7, #30]
 810ba2c:	2b00      	cmp	r3, #0
 810ba2e:	d01e      	beq.n	810ba6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 810ba30:	2300      	movs	r3, #0
 810ba32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 810ba34:	69bb      	ldr	r3, [r7, #24]
 810ba36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810ba3a:	461a      	mov	r2, r3
 810ba3c:	f107 0310 	add.w	r3, r7, #16
 810ba40:	6812      	ldr	r2, [r2, #0]
 810ba42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 810ba44:	693a      	ldr	r2, [r7, #16]
 810ba46:	6a3b      	ldr	r3, [r7, #32]
 810ba48:	b2db      	uxtb	r3, r3
 810ba4a:	00db      	lsls	r3, r3, #3
 810ba4c:	fa22 f303 	lsr.w	r3, r2, r3
 810ba50:	b2da      	uxtb	r2, r3
 810ba52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba54:	701a      	strb	r2, [r3, #0]
      i++;
 810ba56:	6a3b      	ldr	r3, [r7, #32]
 810ba58:	3301      	adds	r3, #1
 810ba5a:	623b      	str	r3, [r7, #32]
      pDest++;
 810ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba5e:	3301      	adds	r3, #1
 810ba60:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 810ba62:	8bfb      	ldrh	r3, [r7, #30]
 810ba64:	3b01      	subs	r3, #1
 810ba66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 810ba68:	8bfb      	ldrh	r3, [r7, #30]
 810ba6a:	2b00      	cmp	r3, #0
 810ba6c:	d1ea      	bne.n	810ba44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 810ba6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810ba70:	4618      	mov	r0, r3
 810ba72:	372c      	adds	r7, #44	@ 0x2c
 810ba74:	46bd      	mov	sp, r7
 810ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba7a:	4770      	bx	lr

0810ba7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 810ba7c:	b480      	push	{r7}
 810ba7e:	b085      	sub	sp, #20
 810ba80:	af00      	add	r7, sp, #0
 810ba82:	6078      	str	r0, [r7, #4]
 810ba84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810ba86:	687b      	ldr	r3, [r7, #4]
 810ba88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 810ba8a:	683b      	ldr	r3, [r7, #0]
 810ba8c:	781b      	ldrb	r3, [r3, #0]
 810ba8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 810ba90:	683b      	ldr	r3, [r7, #0]
 810ba92:	785b      	ldrb	r3, [r3, #1]
 810ba94:	2b01      	cmp	r3, #1
 810ba96:	d12c      	bne.n	810baf2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 810ba98:	68bb      	ldr	r3, [r7, #8]
 810ba9a:	015a      	lsls	r2, r3, #5
 810ba9c:	68fb      	ldr	r3, [r7, #12]
 810ba9e:	4413      	add	r3, r2
 810baa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810baa4:	681b      	ldr	r3, [r3, #0]
 810baa6:	2b00      	cmp	r3, #0
 810baa8:	db12      	blt.n	810bad0 <USB_EPSetStall+0x54>
 810baaa:	68bb      	ldr	r3, [r7, #8]
 810baac:	2b00      	cmp	r3, #0
 810baae:	d00f      	beq.n	810bad0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 810bab0:	68bb      	ldr	r3, [r7, #8]
 810bab2:	015a      	lsls	r2, r3, #5
 810bab4:	68fb      	ldr	r3, [r7, #12]
 810bab6:	4413      	add	r3, r2
 810bab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810babc:	681b      	ldr	r3, [r3, #0]
 810babe:	68ba      	ldr	r2, [r7, #8]
 810bac0:	0151      	lsls	r1, r2, #5
 810bac2:	68fa      	ldr	r2, [r7, #12]
 810bac4:	440a      	add	r2, r1
 810bac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810baca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 810bace:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 810bad0:	68bb      	ldr	r3, [r7, #8]
 810bad2:	015a      	lsls	r2, r3, #5
 810bad4:	68fb      	ldr	r3, [r7, #12]
 810bad6:	4413      	add	r3, r2
 810bad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810badc:	681b      	ldr	r3, [r3, #0]
 810bade:	68ba      	ldr	r2, [r7, #8]
 810bae0:	0151      	lsls	r1, r2, #5
 810bae2:	68fa      	ldr	r2, [r7, #12]
 810bae4:	440a      	add	r2, r1
 810bae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810baea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810baee:	6013      	str	r3, [r2, #0]
 810baf0:	e02b      	b.n	810bb4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 810baf2:	68bb      	ldr	r3, [r7, #8]
 810baf4:	015a      	lsls	r2, r3, #5
 810baf6:	68fb      	ldr	r3, [r7, #12]
 810baf8:	4413      	add	r3, r2
 810bafa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bafe:	681b      	ldr	r3, [r3, #0]
 810bb00:	2b00      	cmp	r3, #0
 810bb02:	db12      	blt.n	810bb2a <USB_EPSetStall+0xae>
 810bb04:	68bb      	ldr	r3, [r7, #8]
 810bb06:	2b00      	cmp	r3, #0
 810bb08:	d00f      	beq.n	810bb2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 810bb0a:	68bb      	ldr	r3, [r7, #8]
 810bb0c:	015a      	lsls	r2, r3, #5
 810bb0e:	68fb      	ldr	r3, [r7, #12]
 810bb10:	4413      	add	r3, r2
 810bb12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bb16:	681b      	ldr	r3, [r3, #0]
 810bb18:	68ba      	ldr	r2, [r7, #8]
 810bb1a:	0151      	lsls	r1, r2, #5
 810bb1c:	68fa      	ldr	r2, [r7, #12]
 810bb1e:	440a      	add	r2, r1
 810bb20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bb24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 810bb28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 810bb2a:	68bb      	ldr	r3, [r7, #8]
 810bb2c:	015a      	lsls	r2, r3, #5
 810bb2e:	68fb      	ldr	r3, [r7, #12]
 810bb30:	4413      	add	r3, r2
 810bb32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bb36:	681b      	ldr	r3, [r3, #0]
 810bb38:	68ba      	ldr	r2, [r7, #8]
 810bb3a:	0151      	lsls	r1, r2, #5
 810bb3c:	68fa      	ldr	r2, [r7, #12]
 810bb3e:	440a      	add	r2, r1
 810bb40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bb44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810bb48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 810bb4a:	2300      	movs	r3, #0
}
 810bb4c:	4618      	mov	r0, r3
 810bb4e:	3714      	adds	r7, #20
 810bb50:	46bd      	mov	sp, r7
 810bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb56:	4770      	bx	lr

0810bb58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 810bb58:	b480      	push	{r7}
 810bb5a:	b085      	sub	sp, #20
 810bb5c:	af00      	add	r7, sp, #0
 810bb5e:	6078      	str	r0, [r7, #4]
 810bb60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bb62:	687b      	ldr	r3, [r7, #4]
 810bb64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 810bb66:	683b      	ldr	r3, [r7, #0]
 810bb68:	781b      	ldrb	r3, [r3, #0]
 810bb6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 810bb6c:	683b      	ldr	r3, [r7, #0]
 810bb6e:	785b      	ldrb	r3, [r3, #1]
 810bb70:	2b01      	cmp	r3, #1
 810bb72:	d128      	bne.n	810bbc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 810bb74:	68bb      	ldr	r3, [r7, #8]
 810bb76:	015a      	lsls	r2, r3, #5
 810bb78:	68fb      	ldr	r3, [r7, #12]
 810bb7a:	4413      	add	r3, r2
 810bb7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810bb80:	681b      	ldr	r3, [r3, #0]
 810bb82:	68ba      	ldr	r2, [r7, #8]
 810bb84:	0151      	lsls	r1, r2, #5
 810bb86:	68fa      	ldr	r2, [r7, #12]
 810bb88:	440a      	add	r2, r1
 810bb8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810bb8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810bb92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 810bb94:	683b      	ldr	r3, [r7, #0]
 810bb96:	791b      	ldrb	r3, [r3, #4]
 810bb98:	2b03      	cmp	r3, #3
 810bb9a:	d003      	beq.n	810bba4 <USB_EPClearStall+0x4c>
 810bb9c:	683b      	ldr	r3, [r7, #0]
 810bb9e:	791b      	ldrb	r3, [r3, #4]
 810bba0:	2b02      	cmp	r3, #2
 810bba2:	d138      	bne.n	810bc16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 810bba4:	68bb      	ldr	r3, [r7, #8]
 810bba6:	015a      	lsls	r2, r3, #5
 810bba8:	68fb      	ldr	r3, [r7, #12]
 810bbaa:	4413      	add	r3, r2
 810bbac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810bbb0:	681b      	ldr	r3, [r3, #0]
 810bbb2:	68ba      	ldr	r2, [r7, #8]
 810bbb4:	0151      	lsls	r1, r2, #5
 810bbb6:	68fa      	ldr	r2, [r7, #12]
 810bbb8:	440a      	add	r2, r1
 810bbba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810bbbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810bbc2:	6013      	str	r3, [r2, #0]
 810bbc4:	e027      	b.n	810bc16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 810bbc6:	68bb      	ldr	r3, [r7, #8]
 810bbc8:	015a      	lsls	r2, r3, #5
 810bbca:	68fb      	ldr	r3, [r7, #12]
 810bbcc:	4413      	add	r3, r2
 810bbce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bbd2:	681b      	ldr	r3, [r3, #0]
 810bbd4:	68ba      	ldr	r2, [r7, #8]
 810bbd6:	0151      	lsls	r1, r2, #5
 810bbd8:	68fa      	ldr	r2, [r7, #12]
 810bbda:	440a      	add	r2, r1
 810bbdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bbe0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810bbe4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 810bbe6:	683b      	ldr	r3, [r7, #0]
 810bbe8:	791b      	ldrb	r3, [r3, #4]
 810bbea:	2b03      	cmp	r3, #3
 810bbec:	d003      	beq.n	810bbf6 <USB_EPClearStall+0x9e>
 810bbee:	683b      	ldr	r3, [r7, #0]
 810bbf0:	791b      	ldrb	r3, [r3, #4]
 810bbf2:	2b02      	cmp	r3, #2
 810bbf4:	d10f      	bne.n	810bc16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 810bbf6:	68bb      	ldr	r3, [r7, #8]
 810bbf8:	015a      	lsls	r2, r3, #5
 810bbfa:	68fb      	ldr	r3, [r7, #12]
 810bbfc:	4413      	add	r3, r2
 810bbfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bc02:	681b      	ldr	r3, [r3, #0]
 810bc04:	68ba      	ldr	r2, [r7, #8]
 810bc06:	0151      	lsls	r1, r2, #5
 810bc08:	68fa      	ldr	r2, [r7, #12]
 810bc0a:	440a      	add	r2, r1
 810bc0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bc10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810bc14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 810bc16:	2300      	movs	r3, #0
}
 810bc18:	4618      	mov	r0, r3
 810bc1a:	3714      	adds	r7, #20
 810bc1c:	46bd      	mov	sp, r7
 810bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc22:	4770      	bx	lr

0810bc24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 810bc24:	b480      	push	{r7}
 810bc26:	b085      	sub	sp, #20
 810bc28:	af00      	add	r7, sp, #0
 810bc2a:	6078      	str	r0, [r7, #4]
 810bc2c:	460b      	mov	r3, r1
 810bc2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bc30:	687b      	ldr	r3, [r7, #4]
 810bc32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 810bc34:	68fb      	ldr	r3, [r7, #12]
 810bc36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bc3a:	681b      	ldr	r3, [r3, #0]
 810bc3c:	68fa      	ldr	r2, [r7, #12]
 810bc3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810bc42:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 810bc46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 810bc48:	68fb      	ldr	r3, [r7, #12]
 810bc4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bc4e:	681a      	ldr	r2, [r3, #0]
 810bc50:	78fb      	ldrb	r3, [r7, #3]
 810bc52:	011b      	lsls	r3, r3, #4
 810bc54:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 810bc58:	68f9      	ldr	r1, [r7, #12]
 810bc5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810bc5e:	4313      	orrs	r3, r2
 810bc60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 810bc62:	2300      	movs	r3, #0
}
 810bc64:	4618      	mov	r0, r3
 810bc66:	3714      	adds	r7, #20
 810bc68:	46bd      	mov	sp, r7
 810bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc6e:	4770      	bx	lr

0810bc70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 810bc70:	b480      	push	{r7}
 810bc72:	b085      	sub	sp, #20
 810bc74:	af00      	add	r7, sp, #0
 810bc76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bc78:	687b      	ldr	r3, [r7, #4]
 810bc7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810bc7c:	68fb      	ldr	r3, [r7, #12]
 810bc7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810bc82:	681b      	ldr	r3, [r3, #0]
 810bc84:	68fa      	ldr	r2, [r7, #12]
 810bc86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810bc8a:	f023 0303 	bic.w	r3, r3, #3
 810bc8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 810bc90:	68fb      	ldr	r3, [r7, #12]
 810bc92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bc96:	685b      	ldr	r3, [r3, #4]
 810bc98:	68fa      	ldr	r2, [r7, #12]
 810bc9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810bc9e:	f023 0302 	bic.w	r3, r3, #2
 810bca2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810bca4:	2300      	movs	r3, #0
}
 810bca6:	4618      	mov	r0, r3
 810bca8:	3714      	adds	r7, #20
 810bcaa:	46bd      	mov	sp, r7
 810bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcb0:	4770      	bx	lr

0810bcb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 810bcb2:	b480      	push	{r7}
 810bcb4:	b085      	sub	sp, #20
 810bcb6:	af00      	add	r7, sp, #0
 810bcb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bcba:	687b      	ldr	r3, [r7, #4]
 810bcbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810bcbe:	68fb      	ldr	r3, [r7, #12]
 810bcc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810bcc4:	681b      	ldr	r3, [r3, #0]
 810bcc6:	68fa      	ldr	r2, [r7, #12]
 810bcc8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810bccc:	f023 0303 	bic.w	r3, r3, #3
 810bcd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810bcd2:	68fb      	ldr	r3, [r7, #12]
 810bcd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bcd8:	685b      	ldr	r3, [r3, #4]
 810bcda:	68fa      	ldr	r2, [r7, #12]
 810bcdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810bce0:	f043 0302 	orr.w	r3, r3, #2
 810bce4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810bce6:	2300      	movs	r3, #0
}
 810bce8:	4618      	mov	r0, r3
 810bcea:	3714      	adds	r7, #20
 810bcec:	46bd      	mov	sp, r7
 810bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcf2:	4770      	bx	lr

0810bcf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 810bcf4:	b480      	push	{r7}
 810bcf6:	b085      	sub	sp, #20
 810bcf8:	af00      	add	r7, sp, #0
 810bcfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 810bcfc:	687b      	ldr	r3, [r7, #4]
 810bcfe:	695b      	ldr	r3, [r3, #20]
 810bd00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 810bd02:	687b      	ldr	r3, [r7, #4]
 810bd04:	699b      	ldr	r3, [r3, #24]
 810bd06:	68fa      	ldr	r2, [r7, #12]
 810bd08:	4013      	ands	r3, r2
 810bd0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 810bd0c:	68fb      	ldr	r3, [r7, #12]
}
 810bd0e:	4618      	mov	r0, r3
 810bd10:	3714      	adds	r7, #20
 810bd12:	46bd      	mov	sp, r7
 810bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd18:	4770      	bx	lr

0810bd1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 810bd1a:	b480      	push	{r7}
 810bd1c:	b085      	sub	sp, #20
 810bd1e:	af00      	add	r7, sp, #0
 810bd20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bd22:	687b      	ldr	r3, [r7, #4]
 810bd24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 810bd26:	68fb      	ldr	r3, [r7, #12]
 810bd28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bd2c:	699b      	ldr	r3, [r3, #24]
 810bd2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 810bd30:	68fb      	ldr	r3, [r7, #12]
 810bd32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bd36:	69db      	ldr	r3, [r3, #28]
 810bd38:	68ba      	ldr	r2, [r7, #8]
 810bd3a:	4013      	ands	r3, r2
 810bd3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 810bd3e:	68bb      	ldr	r3, [r7, #8]
 810bd40:	0c1b      	lsrs	r3, r3, #16
}
 810bd42:	4618      	mov	r0, r3
 810bd44:	3714      	adds	r7, #20
 810bd46:	46bd      	mov	sp, r7
 810bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd4c:	4770      	bx	lr

0810bd4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 810bd4e:	b480      	push	{r7}
 810bd50:	b085      	sub	sp, #20
 810bd52:	af00      	add	r7, sp, #0
 810bd54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bd56:	687b      	ldr	r3, [r7, #4]
 810bd58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 810bd5a:	68fb      	ldr	r3, [r7, #12]
 810bd5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bd60:	699b      	ldr	r3, [r3, #24]
 810bd62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 810bd64:	68fb      	ldr	r3, [r7, #12]
 810bd66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bd6a:	69db      	ldr	r3, [r3, #28]
 810bd6c:	68ba      	ldr	r2, [r7, #8]
 810bd6e:	4013      	ands	r3, r2
 810bd70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 810bd72:	68bb      	ldr	r3, [r7, #8]
 810bd74:	b29b      	uxth	r3, r3
}
 810bd76:	4618      	mov	r0, r3
 810bd78:	3714      	adds	r7, #20
 810bd7a:	46bd      	mov	sp, r7
 810bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd80:	4770      	bx	lr

0810bd82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 810bd82:	b480      	push	{r7}
 810bd84:	b085      	sub	sp, #20
 810bd86:	af00      	add	r7, sp, #0
 810bd88:	6078      	str	r0, [r7, #4]
 810bd8a:	460b      	mov	r3, r1
 810bd8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bd8e:	687b      	ldr	r3, [r7, #4]
 810bd90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 810bd92:	78fb      	ldrb	r3, [r7, #3]
 810bd94:	015a      	lsls	r2, r3, #5
 810bd96:	68fb      	ldr	r3, [r7, #12]
 810bd98:	4413      	add	r3, r2
 810bd9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bd9e:	689b      	ldr	r3, [r3, #8]
 810bda0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 810bda2:	68fb      	ldr	r3, [r7, #12]
 810bda4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bda8:	695b      	ldr	r3, [r3, #20]
 810bdaa:	68ba      	ldr	r2, [r7, #8]
 810bdac:	4013      	ands	r3, r2
 810bdae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 810bdb0:	68bb      	ldr	r3, [r7, #8]
}
 810bdb2:	4618      	mov	r0, r3
 810bdb4:	3714      	adds	r7, #20
 810bdb6:	46bd      	mov	sp, r7
 810bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bdbc:	4770      	bx	lr

0810bdbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 810bdbe:	b480      	push	{r7}
 810bdc0:	b087      	sub	sp, #28
 810bdc2:	af00      	add	r7, sp, #0
 810bdc4:	6078      	str	r0, [r7, #4]
 810bdc6:	460b      	mov	r3, r1
 810bdc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bdca:	687b      	ldr	r3, [r7, #4]
 810bdcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 810bdce:	697b      	ldr	r3, [r7, #20]
 810bdd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bdd4:	691b      	ldr	r3, [r3, #16]
 810bdd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 810bdd8:	697b      	ldr	r3, [r7, #20]
 810bdda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bdde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810bde0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 810bde2:	78fb      	ldrb	r3, [r7, #3]
 810bde4:	f003 030f 	and.w	r3, r3, #15
 810bde8:	68fa      	ldr	r2, [r7, #12]
 810bdea:	fa22 f303 	lsr.w	r3, r2, r3
 810bdee:	01db      	lsls	r3, r3, #7
 810bdf0:	b2db      	uxtb	r3, r3
 810bdf2:	693a      	ldr	r2, [r7, #16]
 810bdf4:	4313      	orrs	r3, r2
 810bdf6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 810bdf8:	78fb      	ldrb	r3, [r7, #3]
 810bdfa:	015a      	lsls	r2, r3, #5
 810bdfc:	697b      	ldr	r3, [r7, #20]
 810bdfe:	4413      	add	r3, r2
 810be00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810be04:	689b      	ldr	r3, [r3, #8]
 810be06:	693a      	ldr	r2, [r7, #16]
 810be08:	4013      	ands	r3, r2
 810be0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 810be0c:	68bb      	ldr	r3, [r7, #8]
}
 810be0e:	4618      	mov	r0, r3
 810be10:	371c      	adds	r7, #28
 810be12:	46bd      	mov	sp, r7
 810be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be18:	4770      	bx	lr

0810be1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 810be1a:	b480      	push	{r7}
 810be1c:	b083      	sub	sp, #12
 810be1e:	af00      	add	r7, sp, #0
 810be20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810be22:	687b      	ldr	r3, [r7, #4]
 810be24:	695b      	ldr	r3, [r3, #20]
 810be26:	f003 0301 	and.w	r3, r3, #1
}
 810be2a:	4618      	mov	r0, r3
 810be2c:	370c      	adds	r7, #12
 810be2e:	46bd      	mov	sp, r7
 810be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be34:	4770      	bx	lr

0810be36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 810be36:	b480      	push	{r7}
 810be38:	b085      	sub	sp, #20
 810be3a:	af00      	add	r7, sp, #0
 810be3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810be3e:	687b      	ldr	r3, [r7, #4]
 810be40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 810be42:	68fb      	ldr	r3, [r7, #12]
 810be44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810be48:	681b      	ldr	r3, [r3, #0]
 810be4a:	68fa      	ldr	r2, [r7, #12]
 810be4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810be50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 810be54:	f023 0307 	bic.w	r3, r3, #7
 810be58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 810be5a:	68fb      	ldr	r3, [r7, #12]
 810be5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810be60:	685b      	ldr	r3, [r3, #4]
 810be62:	68fa      	ldr	r2, [r7, #12]
 810be64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810be68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810be6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810be6e:	2300      	movs	r3, #0
}
 810be70:	4618      	mov	r0, r3
 810be72:	3714      	adds	r7, #20
 810be74:	46bd      	mov	sp, r7
 810be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be7a:	4770      	bx	lr

0810be7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 810be7c:	b480      	push	{r7}
 810be7e:	b087      	sub	sp, #28
 810be80:	af00      	add	r7, sp, #0
 810be82:	60f8      	str	r0, [r7, #12]
 810be84:	460b      	mov	r3, r1
 810be86:	607a      	str	r2, [r7, #4]
 810be88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810be8a:	68fb      	ldr	r3, [r7, #12]
 810be8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 810be8e:	68fb      	ldr	r3, [r7, #12]
 810be90:	333c      	adds	r3, #60	@ 0x3c
 810be92:	3304      	adds	r3, #4
 810be94:	681b      	ldr	r3, [r3, #0]
 810be96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 810be98:	693b      	ldr	r3, [r7, #16]
 810be9a:	4a26      	ldr	r2, [pc, #152]	@ (810bf34 <USB_EP0_OutStart+0xb8>)
 810be9c:	4293      	cmp	r3, r2
 810be9e:	d90a      	bls.n	810beb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810bea0:	697b      	ldr	r3, [r7, #20]
 810bea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bea6:	681b      	ldr	r3, [r3, #0]
 810bea8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810beac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810beb0:	d101      	bne.n	810beb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 810beb2:	2300      	movs	r3, #0
 810beb4:	e037      	b.n	810bf26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 810beb6:	697b      	ldr	r3, [r7, #20]
 810beb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bebc:	461a      	mov	r2, r3
 810bebe:	2300      	movs	r3, #0
 810bec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 810bec2:	697b      	ldr	r3, [r7, #20]
 810bec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bec8:	691b      	ldr	r3, [r3, #16]
 810beca:	697a      	ldr	r2, [r7, #20]
 810becc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bed0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810bed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 810bed6:	697b      	ldr	r3, [r7, #20]
 810bed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bedc:	691b      	ldr	r3, [r3, #16]
 810bede:	697a      	ldr	r2, [r7, #20]
 810bee0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bee4:	f043 0318 	orr.w	r3, r3, #24
 810bee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 810beea:	697b      	ldr	r3, [r7, #20]
 810beec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bef0:	691b      	ldr	r3, [r3, #16]
 810bef2:	697a      	ldr	r2, [r7, #20]
 810bef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bef8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 810befc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 810befe:	7afb      	ldrb	r3, [r7, #11]
 810bf00:	2b01      	cmp	r3, #1
 810bf02:	d10f      	bne.n	810bf24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 810bf04:	697b      	ldr	r3, [r7, #20]
 810bf06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bf0a:	461a      	mov	r2, r3
 810bf0c:	687b      	ldr	r3, [r7, #4]
 810bf0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 810bf10:	697b      	ldr	r3, [r7, #20]
 810bf12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bf16:	681b      	ldr	r3, [r3, #0]
 810bf18:	697a      	ldr	r2, [r7, #20]
 810bf1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bf1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 810bf22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 810bf24:	2300      	movs	r3, #0
}
 810bf26:	4618      	mov	r0, r3
 810bf28:	371c      	adds	r7, #28
 810bf2a:	46bd      	mov	sp, r7
 810bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf30:	4770      	bx	lr
 810bf32:	bf00      	nop
 810bf34:	4f54300a 	.word	0x4f54300a

0810bf38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810bf38:	b480      	push	{r7}
 810bf3a:	b085      	sub	sp, #20
 810bf3c:	af00      	add	r7, sp, #0
 810bf3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810bf40:	2300      	movs	r3, #0
 810bf42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810bf44:	68fb      	ldr	r3, [r7, #12]
 810bf46:	3301      	adds	r3, #1
 810bf48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810bf4a:	68fb      	ldr	r3, [r7, #12]
 810bf4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810bf50:	d901      	bls.n	810bf56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810bf52:	2303      	movs	r3, #3
 810bf54:	e01b      	b.n	810bf8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810bf56:	687b      	ldr	r3, [r7, #4]
 810bf58:	691b      	ldr	r3, [r3, #16]
 810bf5a:	2b00      	cmp	r3, #0
 810bf5c:	daf2      	bge.n	810bf44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810bf5e:	2300      	movs	r3, #0
 810bf60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810bf62:	687b      	ldr	r3, [r7, #4]
 810bf64:	691b      	ldr	r3, [r3, #16]
 810bf66:	f043 0201 	orr.w	r2, r3, #1
 810bf6a:	687b      	ldr	r3, [r7, #4]
 810bf6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810bf6e:	68fb      	ldr	r3, [r7, #12]
 810bf70:	3301      	adds	r3, #1
 810bf72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810bf74:	68fb      	ldr	r3, [r7, #12]
 810bf76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810bf7a:	d901      	bls.n	810bf80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810bf7c:	2303      	movs	r3, #3
 810bf7e:	e006      	b.n	810bf8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810bf80:	687b      	ldr	r3, [r7, #4]
 810bf82:	691b      	ldr	r3, [r3, #16]
 810bf84:	f003 0301 	and.w	r3, r3, #1
 810bf88:	2b01      	cmp	r3, #1
 810bf8a:	d0f0      	beq.n	810bf6e <USB_CoreReset+0x36>

  return HAL_OK;
 810bf8c:	2300      	movs	r3, #0
}
 810bf8e:	4618      	mov	r0, r3
 810bf90:	3714      	adds	r7, #20
 810bf92:	46bd      	mov	sp, r7
 810bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf98:	4770      	bx	lr
	...

0810bf9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 810bf9c:	b580      	push	{r7, lr}
 810bf9e:	b084      	sub	sp, #16
 810bfa0:	af00      	add	r7, sp, #0
 810bfa2:	6078      	str	r0, [r7, #4]
 810bfa4:	460b      	mov	r3, r1
 810bfa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 810bfa8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 810bfac:	f002 fd54 	bl	810ea58 <USBD_static_malloc>
 810bfb0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 810bfb2:	68fb      	ldr	r3, [r7, #12]
 810bfb4:	2b00      	cmp	r3, #0
 810bfb6:	d109      	bne.n	810bfcc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 810bfb8:	687b      	ldr	r3, [r7, #4]
 810bfba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810bfbe:	687b      	ldr	r3, [r7, #4]
 810bfc0:	32b0      	adds	r2, #176	@ 0xb0
 810bfc2:	2100      	movs	r1, #0
 810bfc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 810bfc8:	2302      	movs	r3, #2
 810bfca:	e0d4      	b.n	810c176 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 810bfcc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 810bfd0:	2100      	movs	r1, #0
 810bfd2:	68f8      	ldr	r0, [r7, #12]
 810bfd4:	f002 fd84 	bl	810eae0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 810bfd8:	687b      	ldr	r3, [r7, #4]
 810bfda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810bfde:	687b      	ldr	r3, [r7, #4]
 810bfe0:	32b0      	adds	r2, #176	@ 0xb0
 810bfe2:	68f9      	ldr	r1, [r7, #12]
 810bfe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 810bfe8:	687b      	ldr	r3, [r7, #4]
 810bfea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810bfee:	687b      	ldr	r3, [r7, #4]
 810bff0:	32b0      	adds	r2, #176	@ 0xb0
 810bff2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 810bff6:	687b      	ldr	r3, [r7, #4]
 810bff8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 810bffc:	687b      	ldr	r3, [r7, #4]
 810bffe:	7c1b      	ldrb	r3, [r3, #16]
 810c000:	2b00      	cmp	r3, #0
 810c002:	d138      	bne.n	810c076 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 810c004:	4b5e      	ldr	r3, [pc, #376]	@ (810c180 <USBD_CDC_Init+0x1e4>)
 810c006:	7819      	ldrb	r1, [r3, #0]
 810c008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810c00c:	2202      	movs	r2, #2
 810c00e:	6878      	ldr	r0, [r7, #4]
 810c010:	f002 fbff 	bl	810e812 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 810c014:	4b5a      	ldr	r3, [pc, #360]	@ (810c180 <USBD_CDC_Init+0x1e4>)
 810c016:	781b      	ldrb	r3, [r3, #0]
 810c018:	f003 020f 	and.w	r2, r3, #15
 810c01c:	6879      	ldr	r1, [r7, #4]
 810c01e:	4613      	mov	r3, r2
 810c020:	009b      	lsls	r3, r3, #2
 810c022:	4413      	add	r3, r2
 810c024:	009b      	lsls	r3, r3, #2
 810c026:	440b      	add	r3, r1
 810c028:	3324      	adds	r3, #36	@ 0x24
 810c02a:	2201      	movs	r2, #1
 810c02c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 810c02e:	4b55      	ldr	r3, [pc, #340]	@ (810c184 <USBD_CDC_Init+0x1e8>)
 810c030:	7819      	ldrb	r1, [r3, #0]
 810c032:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810c036:	2202      	movs	r2, #2
 810c038:	6878      	ldr	r0, [r7, #4]
 810c03a:	f002 fbea 	bl	810e812 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 810c03e:	4b51      	ldr	r3, [pc, #324]	@ (810c184 <USBD_CDC_Init+0x1e8>)
 810c040:	781b      	ldrb	r3, [r3, #0]
 810c042:	f003 020f 	and.w	r2, r3, #15
 810c046:	6879      	ldr	r1, [r7, #4]
 810c048:	4613      	mov	r3, r2
 810c04a:	009b      	lsls	r3, r3, #2
 810c04c:	4413      	add	r3, r2
 810c04e:	009b      	lsls	r3, r3, #2
 810c050:	440b      	add	r3, r1
 810c052:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 810c056:	2201      	movs	r2, #1
 810c058:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 810c05a:	4b4b      	ldr	r3, [pc, #300]	@ (810c188 <USBD_CDC_Init+0x1ec>)
 810c05c:	781b      	ldrb	r3, [r3, #0]
 810c05e:	f003 020f 	and.w	r2, r3, #15
 810c062:	6879      	ldr	r1, [r7, #4]
 810c064:	4613      	mov	r3, r2
 810c066:	009b      	lsls	r3, r3, #2
 810c068:	4413      	add	r3, r2
 810c06a:	009b      	lsls	r3, r3, #2
 810c06c:	440b      	add	r3, r1
 810c06e:	3326      	adds	r3, #38	@ 0x26
 810c070:	2210      	movs	r2, #16
 810c072:	801a      	strh	r2, [r3, #0]
 810c074:	e035      	b.n	810c0e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 810c076:	4b42      	ldr	r3, [pc, #264]	@ (810c180 <USBD_CDC_Init+0x1e4>)
 810c078:	7819      	ldrb	r1, [r3, #0]
 810c07a:	2340      	movs	r3, #64	@ 0x40
 810c07c:	2202      	movs	r2, #2
 810c07e:	6878      	ldr	r0, [r7, #4]
 810c080:	f002 fbc7 	bl	810e812 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 810c084:	4b3e      	ldr	r3, [pc, #248]	@ (810c180 <USBD_CDC_Init+0x1e4>)
 810c086:	781b      	ldrb	r3, [r3, #0]
 810c088:	f003 020f 	and.w	r2, r3, #15
 810c08c:	6879      	ldr	r1, [r7, #4]
 810c08e:	4613      	mov	r3, r2
 810c090:	009b      	lsls	r3, r3, #2
 810c092:	4413      	add	r3, r2
 810c094:	009b      	lsls	r3, r3, #2
 810c096:	440b      	add	r3, r1
 810c098:	3324      	adds	r3, #36	@ 0x24
 810c09a:	2201      	movs	r2, #1
 810c09c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 810c09e:	4b39      	ldr	r3, [pc, #228]	@ (810c184 <USBD_CDC_Init+0x1e8>)
 810c0a0:	7819      	ldrb	r1, [r3, #0]
 810c0a2:	2340      	movs	r3, #64	@ 0x40
 810c0a4:	2202      	movs	r2, #2
 810c0a6:	6878      	ldr	r0, [r7, #4]
 810c0a8:	f002 fbb3 	bl	810e812 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 810c0ac:	4b35      	ldr	r3, [pc, #212]	@ (810c184 <USBD_CDC_Init+0x1e8>)
 810c0ae:	781b      	ldrb	r3, [r3, #0]
 810c0b0:	f003 020f 	and.w	r2, r3, #15
 810c0b4:	6879      	ldr	r1, [r7, #4]
 810c0b6:	4613      	mov	r3, r2
 810c0b8:	009b      	lsls	r3, r3, #2
 810c0ba:	4413      	add	r3, r2
 810c0bc:	009b      	lsls	r3, r3, #2
 810c0be:	440b      	add	r3, r1
 810c0c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 810c0c4:	2201      	movs	r2, #1
 810c0c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 810c0c8:	4b2f      	ldr	r3, [pc, #188]	@ (810c188 <USBD_CDC_Init+0x1ec>)
 810c0ca:	781b      	ldrb	r3, [r3, #0]
 810c0cc:	f003 020f 	and.w	r2, r3, #15
 810c0d0:	6879      	ldr	r1, [r7, #4]
 810c0d2:	4613      	mov	r3, r2
 810c0d4:	009b      	lsls	r3, r3, #2
 810c0d6:	4413      	add	r3, r2
 810c0d8:	009b      	lsls	r3, r3, #2
 810c0da:	440b      	add	r3, r1
 810c0dc:	3326      	adds	r3, #38	@ 0x26
 810c0de:	2210      	movs	r2, #16
 810c0e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 810c0e2:	4b29      	ldr	r3, [pc, #164]	@ (810c188 <USBD_CDC_Init+0x1ec>)
 810c0e4:	7819      	ldrb	r1, [r3, #0]
 810c0e6:	2308      	movs	r3, #8
 810c0e8:	2203      	movs	r2, #3
 810c0ea:	6878      	ldr	r0, [r7, #4]
 810c0ec:	f002 fb91 	bl	810e812 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 810c0f0:	4b25      	ldr	r3, [pc, #148]	@ (810c188 <USBD_CDC_Init+0x1ec>)
 810c0f2:	781b      	ldrb	r3, [r3, #0]
 810c0f4:	f003 020f 	and.w	r2, r3, #15
 810c0f8:	6879      	ldr	r1, [r7, #4]
 810c0fa:	4613      	mov	r3, r2
 810c0fc:	009b      	lsls	r3, r3, #2
 810c0fe:	4413      	add	r3, r2
 810c100:	009b      	lsls	r3, r3, #2
 810c102:	440b      	add	r3, r1
 810c104:	3324      	adds	r3, #36	@ 0x24
 810c106:	2201      	movs	r2, #1
 810c108:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 810c10a:	68fb      	ldr	r3, [r7, #12]
 810c10c:	2200      	movs	r2, #0
 810c10e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 810c112:	687b      	ldr	r3, [r7, #4]
 810c114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c118:	687a      	ldr	r2, [r7, #4]
 810c11a:	33b0      	adds	r3, #176	@ 0xb0
 810c11c:	009b      	lsls	r3, r3, #2
 810c11e:	4413      	add	r3, r2
 810c120:	685b      	ldr	r3, [r3, #4]
 810c122:	681b      	ldr	r3, [r3, #0]
 810c124:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 810c126:	68fb      	ldr	r3, [r7, #12]
 810c128:	2200      	movs	r2, #0
 810c12a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 810c12e:	68fb      	ldr	r3, [r7, #12]
 810c130:	2200      	movs	r2, #0
 810c132:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 810c136:	68fb      	ldr	r3, [r7, #12]
 810c138:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 810c13c:	2b00      	cmp	r3, #0
 810c13e:	d101      	bne.n	810c144 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 810c140:	2302      	movs	r3, #2
 810c142:	e018      	b.n	810c176 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 810c144:	687b      	ldr	r3, [r7, #4]
 810c146:	7c1b      	ldrb	r3, [r3, #16]
 810c148:	2b00      	cmp	r3, #0
 810c14a:	d10a      	bne.n	810c162 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 810c14c:	4b0d      	ldr	r3, [pc, #52]	@ (810c184 <USBD_CDC_Init+0x1e8>)
 810c14e:	7819      	ldrb	r1, [r3, #0]
 810c150:	68fb      	ldr	r3, [r7, #12]
 810c152:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 810c156:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810c15a:	6878      	ldr	r0, [r7, #4]
 810c15c:	f002 fc48 	bl	810e9f0 <USBD_LL_PrepareReceive>
 810c160:	e008      	b.n	810c174 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 810c162:	4b08      	ldr	r3, [pc, #32]	@ (810c184 <USBD_CDC_Init+0x1e8>)
 810c164:	7819      	ldrb	r1, [r3, #0]
 810c166:	68fb      	ldr	r3, [r7, #12]
 810c168:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 810c16c:	2340      	movs	r3, #64	@ 0x40
 810c16e:	6878      	ldr	r0, [r7, #4]
 810c170:	f002 fc3e 	bl	810e9f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 810c174:	2300      	movs	r3, #0
}
 810c176:	4618      	mov	r0, r3
 810c178:	3710      	adds	r7, #16
 810c17a:	46bd      	mov	sp, r7
 810c17c:	bd80      	pop	{r7, pc}
 810c17e:	bf00      	nop
 810c180:	10032187 	.word	0x10032187
 810c184:	10032188 	.word	0x10032188
 810c188:	10032189 	.word	0x10032189

0810c18c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 810c18c:	b580      	push	{r7, lr}
 810c18e:	b082      	sub	sp, #8
 810c190:	af00      	add	r7, sp, #0
 810c192:	6078      	str	r0, [r7, #4]
 810c194:	460b      	mov	r3, r1
 810c196:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 810c198:	4b3a      	ldr	r3, [pc, #232]	@ (810c284 <USBD_CDC_DeInit+0xf8>)
 810c19a:	781b      	ldrb	r3, [r3, #0]
 810c19c:	4619      	mov	r1, r3
 810c19e:	6878      	ldr	r0, [r7, #4]
 810c1a0:	f002 fb5d 	bl	810e85e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 810c1a4:	4b37      	ldr	r3, [pc, #220]	@ (810c284 <USBD_CDC_DeInit+0xf8>)
 810c1a6:	781b      	ldrb	r3, [r3, #0]
 810c1a8:	f003 020f 	and.w	r2, r3, #15
 810c1ac:	6879      	ldr	r1, [r7, #4]
 810c1ae:	4613      	mov	r3, r2
 810c1b0:	009b      	lsls	r3, r3, #2
 810c1b2:	4413      	add	r3, r2
 810c1b4:	009b      	lsls	r3, r3, #2
 810c1b6:	440b      	add	r3, r1
 810c1b8:	3324      	adds	r3, #36	@ 0x24
 810c1ba:	2200      	movs	r2, #0
 810c1bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 810c1be:	4b32      	ldr	r3, [pc, #200]	@ (810c288 <USBD_CDC_DeInit+0xfc>)
 810c1c0:	781b      	ldrb	r3, [r3, #0]
 810c1c2:	4619      	mov	r1, r3
 810c1c4:	6878      	ldr	r0, [r7, #4]
 810c1c6:	f002 fb4a 	bl	810e85e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 810c1ca:	4b2f      	ldr	r3, [pc, #188]	@ (810c288 <USBD_CDC_DeInit+0xfc>)
 810c1cc:	781b      	ldrb	r3, [r3, #0]
 810c1ce:	f003 020f 	and.w	r2, r3, #15
 810c1d2:	6879      	ldr	r1, [r7, #4]
 810c1d4:	4613      	mov	r3, r2
 810c1d6:	009b      	lsls	r3, r3, #2
 810c1d8:	4413      	add	r3, r2
 810c1da:	009b      	lsls	r3, r3, #2
 810c1dc:	440b      	add	r3, r1
 810c1de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 810c1e2:	2200      	movs	r2, #0
 810c1e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 810c1e6:	4b29      	ldr	r3, [pc, #164]	@ (810c28c <USBD_CDC_DeInit+0x100>)
 810c1e8:	781b      	ldrb	r3, [r3, #0]
 810c1ea:	4619      	mov	r1, r3
 810c1ec:	6878      	ldr	r0, [r7, #4]
 810c1ee:	f002 fb36 	bl	810e85e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 810c1f2:	4b26      	ldr	r3, [pc, #152]	@ (810c28c <USBD_CDC_DeInit+0x100>)
 810c1f4:	781b      	ldrb	r3, [r3, #0]
 810c1f6:	f003 020f 	and.w	r2, r3, #15
 810c1fa:	6879      	ldr	r1, [r7, #4]
 810c1fc:	4613      	mov	r3, r2
 810c1fe:	009b      	lsls	r3, r3, #2
 810c200:	4413      	add	r3, r2
 810c202:	009b      	lsls	r3, r3, #2
 810c204:	440b      	add	r3, r1
 810c206:	3324      	adds	r3, #36	@ 0x24
 810c208:	2200      	movs	r2, #0
 810c20a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 810c20c:	4b1f      	ldr	r3, [pc, #124]	@ (810c28c <USBD_CDC_DeInit+0x100>)
 810c20e:	781b      	ldrb	r3, [r3, #0]
 810c210:	f003 020f 	and.w	r2, r3, #15
 810c214:	6879      	ldr	r1, [r7, #4]
 810c216:	4613      	mov	r3, r2
 810c218:	009b      	lsls	r3, r3, #2
 810c21a:	4413      	add	r3, r2
 810c21c:	009b      	lsls	r3, r3, #2
 810c21e:	440b      	add	r3, r1
 810c220:	3326      	adds	r3, #38	@ 0x26
 810c222:	2200      	movs	r2, #0
 810c224:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 810c226:	687b      	ldr	r3, [r7, #4]
 810c228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c22c:	687b      	ldr	r3, [r7, #4]
 810c22e:	32b0      	adds	r2, #176	@ 0xb0
 810c230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c234:	2b00      	cmp	r3, #0
 810c236:	d01f      	beq.n	810c278 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 810c238:	687b      	ldr	r3, [r7, #4]
 810c23a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c23e:	687a      	ldr	r2, [r7, #4]
 810c240:	33b0      	adds	r3, #176	@ 0xb0
 810c242:	009b      	lsls	r3, r3, #2
 810c244:	4413      	add	r3, r2
 810c246:	685b      	ldr	r3, [r3, #4]
 810c248:	685b      	ldr	r3, [r3, #4]
 810c24a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 810c24c:	687b      	ldr	r3, [r7, #4]
 810c24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c252:	687b      	ldr	r3, [r7, #4]
 810c254:	32b0      	adds	r2, #176	@ 0xb0
 810c256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c25a:	4618      	mov	r0, r3
 810c25c:	f002 fc0a 	bl	810ea74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 810c260:	687b      	ldr	r3, [r7, #4]
 810c262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c266:	687b      	ldr	r3, [r7, #4]
 810c268:	32b0      	adds	r2, #176	@ 0xb0
 810c26a:	2100      	movs	r1, #0
 810c26c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 810c270:	687b      	ldr	r3, [r7, #4]
 810c272:	2200      	movs	r2, #0
 810c274:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 810c278:	2300      	movs	r3, #0
}
 810c27a:	4618      	mov	r0, r3
 810c27c:	3708      	adds	r7, #8
 810c27e:	46bd      	mov	sp, r7
 810c280:	bd80      	pop	{r7, pc}
 810c282:	bf00      	nop
 810c284:	10032187 	.word	0x10032187
 810c288:	10032188 	.word	0x10032188
 810c28c:	10032189 	.word	0x10032189

0810c290 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 810c290:	b580      	push	{r7, lr}
 810c292:	b086      	sub	sp, #24
 810c294:	af00      	add	r7, sp, #0
 810c296:	6078      	str	r0, [r7, #4]
 810c298:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c29a:	687b      	ldr	r3, [r7, #4]
 810c29c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c2a0:	687b      	ldr	r3, [r7, #4]
 810c2a2:	32b0      	adds	r2, #176	@ 0xb0
 810c2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c2a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 810c2aa:	2300      	movs	r3, #0
 810c2ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 810c2ae:	2300      	movs	r3, #0
 810c2b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 810c2b2:	2300      	movs	r3, #0
 810c2b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 810c2b6:	693b      	ldr	r3, [r7, #16]
 810c2b8:	2b00      	cmp	r3, #0
 810c2ba:	d101      	bne.n	810c2c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 810c2bc:	2303      	movs	r3, #3
 810c2be:	e0bf      	b.n	810c440 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810c2c0:	683b      	ldr	r3, [r7, #0]
 810c2c2:	781b      	ldrb	r3, [r3, #0]
 810c2c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 810c2c8:	2b00      	cmp	r3, #0
 810c2ca:	d050      	beq.n	810c36e <USBD_CDC_Setup+0xde>
 810c2cc:	2b20      	cmp	r3, #32
 810c2ce:	f040 80af 	bne.w	810c430 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 810c2d2:	683b      	ldr	r3, [r7, #0]
 810c2d4:	88db      	ldrh	r3, [r3, #6]
 810c2d6:	2b00      	cmp	r3, #0
 810c2d8:	d03a      	beq.n	810c350 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 810c2da:	683b      	ldr	r3, [r7, #0]
 810c2dc:	781b      	ldrb	r3, [r3, #0]
 810c2de:	b25b      	sxtb	r3, r3
 810c2e0:	2b00      	cmp	r3, #0
 810c2e2:	da1b      	bge.n	810c31c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 810c2e4:	687b      	ldr	r3, [r7, #4]
 810c2e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c2ea:	687a      	ldr	r2, [r7, #4]
 810c2ec:	33b0      	adds	r3, #176	@ 0xb0
 810c2ee:	009b      	lsls	r3, r3, #2
 810c2f0:	4413      	add	r3, r2
 810c2f2:	685b      	ldr	r3, [r3, #4]
 810c2f4:	689b      	ldr	r3, [r3, #8]
 810c2f6:	683a      	ldr	r2, [r7, #0]
 810c2f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 810c2fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 810c2fc:	683a      	ldr	r2, [r7, #0]
 810c2fe:	88d2      	ldrh	r2, [r2, #6]
 810c300:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 810c302:	683b      	ldr	r3, [r7, #0]
 810c304:	88db      	ldrh	r3, [r3, #6]
 810c306:	2b07      	cmp	r3, #7
 810c308:	bf28      	it	cs
 810c30a:	2307      	movcs	r3, #7
 810c30c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 810c30e:	693b      	ldr	r3, [r7, #16]
 810c310:	89fa      	ldrh	r2, [r7, #14]
 810c312:	4619      	mov	r1, r3
 810c314:	6878      	ldr	r0, [r7, #4]
 810c316:	f001 fdbd 	bl	810de94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 810c31a:	e090      	b.n	810c43e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 810c31c:	683b      	ldr	r3, [r7, #0]
 810c31e:	785a      	ldrb	r2, [r3, #1]
 810c320:	693b      	ldr	r3, [r7, #16]
 810c322:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 810c326:	683b      	ldr	r3, [r7, #0]
 810c328:	88db      	ldrh	r3, [r3, #6]
 810c32a:	2b3f      	cmp	r3, #63	@ 0x3f
 810c32c:	d803      	bhi.n	810c336 <USBD_CDC_Setup+0xa6>
 810c32e:	683b      	ldr	r3, [r7, #0]
 810c330:	88db      	ldrh	r3, [r3, #6]
 810c332:	b2da      	uxtb	r2, r3
 810c334:	e000      	b.n	810c338 <USBD_CDC_Setup+0xa8>
 810c336:	2240      	movs	r2, #64	@ 0x40
 810c338:	693b      	ldr	r3, [r7, #16]
 810c33a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 810c33e:	6939      	ldr	r1, [r7, #16]
 810c340:	693b      	ldr	r3, [r7, #16]
 810c342:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 810c346:	461a      	mov	r2, r3
 810c348:	6878      	ldr	r0, [r7, #4]
 810c34a:	f001 fdcf 	bl	810deec <USBD_CtlPrepareRx>
      break;
 810c34e:	e076      	b.n	810c43e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 810c350:	687b      	ldr	r3, [r7, #4]
 810c352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c356:	687a      	ldr	r2, [r7, #4]
 810c358:	33b0      	adds	r3, #176	@ 0xb0
 810c35a:	009b      	lsls	r3, r3, #2
 810c35c:	4413      	add	r3, r2
 810c35e:	685b      	ldr	r3, [r3, #4]
 810c360:	689b      	ldr	r3, [r3, #8]
 810c362:	683a      	ldr	r2, [r7, #0]
 810c364:	7850      	ldrb	r0, [r2, #1]
 810c366:	2200      	movs	r2, #0
 810c368:	6839      	ldr	r1, [r7, #0]
 810c36a:	4798      	blx	r3
      break;
 810c36c:	e067      	b.n	810c43e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 810c36e:	683b      	ldr	r3, [r7, #0]
 810c370:	785b      	ldrb	r3, [r3, #1]
 810c372:	2b0b      	cmp	r3, #11
 810c374:	d851      	bhi.n	810c41a <USBD_CDC_Setup+0x18a>
 810c376:	a201      	add	r2, pc, #4	@ (adr r2, 810c37c <USBD_CDC_Setup+0xec>)
 810c378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c37c:	0810c3ad 	.word	0x0810c3ad
 810c380:	0810c429 	.word	0x0810c429
 810c384:	0810c41b 	.word	0x0810c41b
 810c388:	0810c41b 	.word	0x0810c41b
 810c38c:	0810c41b 	.word	0x0810c41b
 810c390:	0810c41b 	.word	0x0810c41b
 810c394:	0810c41b 	.word	0x0810c41b
 810c398:	0810c41b 	.word	0x0810c41b
 810c39c:	0810c41b 	.word	0x0810c41b
 810c3a0:	0810c41b 	.word	0x0810c41b
 810c3a4:	0810c3d7 	.word	0x0810c3d7
 810c3a8:	0810c401 	.word	0x0810c401
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810c3ac:	687b      	ldr	r3, [r7, #4]
 810c3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810c3b2:	b2db      	uxtb	r3, r3
 810c3b4:	2b03      	cmp	r3, #3
 810c3b6:	d107      	bne.n	810c3c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 810c3b8:	f107 030a 	add.w	r3, r7, #10
 810c3bc:	2202      	movs	r2, #2
 810c3be:	4619      	mov	r1, r3
 810c3c0:	6878      	ldr	r0, [r7, #4]
 810c3c2:	f001 fd67 	bl	810de94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 810c3c6:	e032      	b.n	810c42e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 810c3c8:	6839      	ldr	r1, [r7, #0]
 810c3ca:	6878      	ldr	r0, [r7, #4]
 810c3cc:	f001 fce5 	bl	810dd9a <USBD_CtlError>
            ret = USBD_FAIL;
 810c3d0:	2303      	movs	r3, #3
 810c3d2:	75fb      	strb	r3, [r7, #23]
          break;
 810c3d4:	e02b      	b.n	810c42e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810c3d6:	687b      	ldr	r3, [r7, #4]
 810c3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810c3dc:	b2db      	uxtb	r3, r3
 810c3de:	2b03      	cmp	r3, #3
 810c3e0:	d107      	bne.n	810c3f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 810c3e2:	f107 030d 	add.w	r3, r7, #13
 810c3e6:	2201      	movs	r2, #1
 810c3e8:	4619      	mov	r1, r3
 810c3ea:	6878      	ldr	r0, [r7, #4]
 810c3ec:	f001 fd52 	bl	810de94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 810c3f0:	e01d      	b.n	810c42e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 810c3f2:	6839      	ldr	r1, [r7, #0]
 810c3f4:	6878      	ldr	r0, [r7, #4]
 810c3f6:	f001 fcd0 	bl	810dd9a <USBD_CtlError>
            ret = USBD_FAIL;
 810c3fa:	2303      	movs	r3, #3
 810c3fc:	75fb      	strb	r3, [r7, #23]
          break;
 810c3fe:	e016      	b.n	810c42e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 810c400:	687b      	ldr	r3, [r7, #4]
 810c402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810c406:	b2db      	uxtb	r3, r3
 810c408:	2b03      	cmp	r3, #3
 810c40a:	d00f      	beq.n	810c42c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 810c40c:	6839      	ldr	r1, [r7, #0]
 810c40e:	6878      	ldr	r0, [r7, #4]
 810c410:	f001 fcc3 	bl	810dd9a <USBD_CtlError>
            ret = USBD_FAIL;
 810c414:	2303      	movs	r3, #3
 810c416:	75fb      	strb	r3, [r7, #23]
          }
          break;
 810c418:	e008      	b.n	810c42c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 810c41a:	6839      	ldr	r1, [r7, #0]
 810c41c:	6878      	ldr	r0, [r7, #4]
 810c41e:	f001 fcbc 	bl	810dd9a <USBD_CtlError>
          ret = USBD_FAIL;
 810c422:	2303      	movs	r3, #3
 810c424:	75fb      	strb	r3, [r7, #23]
          break;
 810c426:	e002      	b.n	810c42e <USBD_CDC_Setup+0x19e>
          break;
 810c428:	bf00      	nop
 810c42a:	e008      	b.n	810c43e <USBD_CDC_Setup+0x1ae>
          break;
 810c42c:	bf00      	nop
      }
      break;
 810c42e:	e006      	b.n	810c43e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 810c430:	6839      	ldr	r1, [r7, #0]
 810c432:	6878      	ldr	r0, [r7, #4]
 810c434:	f001 fcb1 	bl	810dd9a <USBD_CtlError>
      ret = USBD_FAIL;
 810c438:	2303      	movs	r3, #3
 810c43a:	75fb      	strb	r3, [r7, #23]
      break;
 810c43c:	bf00      	nop
  }

  return (uint8_t)ret;
 810c43e:	7dfb      	ldrb	r3, [r7, #23]
}
 810c440:	4618      	mov	r0, r3
 810c442:	3718      	adds	r7, #24
 810c444:	46bd      	mov	sp, r7
 810c446:	bd80      	pop	{r7, pc}

0810c448 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 810c448:	b580      	push	{r7, lr}
 810c44a:	b084      	sub	sp, #16
 810c44c:	af00      	add	r7, sp, #0
 810c44e:	6078      	str	r0, [r7, #4]
 810c450:	460b      	mov	r3, r1
 810c452:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 810c454:	687b      	ldr	r3, [r7, #4]
 810c456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810c45a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 810c45c:	687b      	ldr	r3, [r7, #4]
 810c45e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c462:	687b      	ldr	r3, [r7, #4]
 810c464:	32b0      	adds	r2, #176	@ 0xb0
 810c466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c46a:	2b00      	cmp	r3, #0
 810c46c:	d101      	bne.n	810c472 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 810c46e:	2303      	movs	r3, #3
 810c470:	e065      	b.n	810c53e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c472:	687b      	ldr	r3, [r7, #4]
 810c474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c478:	687b      	ldr	r3, [r7, #4]
 810c47a:	32b0      	adds	r2, #176	@ 0xb0
 810c47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c480:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 810c482:	78fb      	ldrb	r3, [r7, #3]
 810c484:	f003 020f 	and.w	r2, r3, #15
 810c488:	6879      	ldr	r1, [r7, #4]
 810c48a:	4613      	mov	r3, r2
 810c48c:	009b      	lsls	r3, r3, #2
 810c48e:	4413      	add	r3, r2
 810c490:	009b      	lsls	r3, r3, #2
 810c492:	440b      	add	r3, r1
 810c494:	3318      	adds	r3, #24
 810c496:	681b      	ldr	r3, [r3, #0]
 810c498:	2b00      	cmp	r3, #0
 810c49a:	d02f      	beq.n	810c4fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 810c49c:	78fb      	ldrb	r3, [r7, #3]
 810c49e:	f003 020f 	and.w	r2, r3, #15
 810c4a2:	6879      	ldr	r1, [r7, #4]
 810c4a4:	4613      	mov	r3, r2
 810c4a6:	009b      	lsls	r3, r3, #2
 810c4a8:	4413      	add	r3, r2
 810c4aa:	009b      	lsls	r3, r3, #2
 810c4ac:	440b      	add	r3, r1
 810c4ae:	3318      	adds	r3, #24
 810c4b0:	681a      	ldr	r2, [r3, #0]
 810c4b2:	78fb      	ldrb	r3, [r7, #3]
 810c4b4:	f003 010f 	and.w	r1, r3, #15
 810c4b8:	68f8      	ldr	r0, [r7, #12]
 810c4ba:	460b      	mov	r3, r1
 810c4bc:	00db      	lsls	r3, r3, #3
 810c4be:	440b      	add	r3, r1
 810c4c0:	009b      	lsls	r3, r3, #2
 810c4c2:	4403      	add	r3, r0
 810c4c4:	331c      	adds	r3, #28
 810c4c6:	681b      	ldr	r3, [r3, #0]
 810c4c8:	fbb2 f1f3 	udiv	r1, r2, r3
 810c4cc:	fb01 f303 	mul.w	r3, r1, r3
 810c4d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 810c4d2:	2b00      	cmp	r3, #0
 810c4d4:	d112      	bne.n	810c4fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 810c4d6:	78fb      	ldrb	r3, [r7, #3]
 810c4d8:	f003 020f 	and.w	r2, r3, #15
 810c4dc:	6879      	ldr	r1, [r7, #4]
 810c4de:	4613      	mov	r3, r2
 810c4e0:	009b      	lsls	r3, r3, #2
 810c4e2:	4413      	add	r3, r2
 810c4e4:	009b      	lsls	r3, r3, #2
 810c4e6:	440b      	add	r3, r1
 810c4e8:	3318      	adds	r3, #24
 810c4ea:	2200      	movs	r2, #0
 810c4ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 810c4ee:	78f9      	ldrb	r1, [r7, #3]
 810c4f0:	2300      	movs	r3, #0
 810c4f2:	2200      	movs	r2, #0
 810c4f4:	6878      	ldr	r0, [r7, #4]
 810c4f6:	f002 fa5a 	bl	810e9ae <USBD_LL_Transmit>
 810c4fa:	e01f      	b.n	810c53c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 810c4fc:	68bb      	ldr	r3, [r7, #8]
 810c4fe:	2200      	movs	r2, #0
 810c500:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 810c504:	687b      	ldr	r3, [r7, #4]
 810c506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c50a:	687a      	ldr	r2, [r7, #4]
 810c50c:	33b0      	adds	r3, #176	@ 0xb0
 810c50e:	009b      	lsls	r3, r3, #2
 810c510:	4413      	add	r3, r2
 810c512:	685b      	ldr	r3, [r3, #4]
 810c514:	691b      	ldr	r3, [r3, #16]
 810c516:	2b00      	cmp	r3, #0
 810c518:	d010      	beq.n	810c53c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 810c51a:	687b      	ldr	r3, [r7, #4]
 810c51c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c520:	687a      	ldr	r2, [r7, #4]
 810c522:	33b0      	adds	r3, #176	@ 0xb0
 810c524:	009b      	lsls	r3, r3, #2
 810c526:	4413      	add	r3, r2
 810c528:	685b      	ldr	r3, [r3, #4]
 810c52a:	691b      	ldr	r3, [r3, #16]
 810c52c:	68ba      	ldr	r2, [r7, #8]
 810c52e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 810c532:	68ba      	ldr	r2, [r7, #8]
 810c534:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 810c538:	78fa      	ldrb	r2, [r7, #3]
 810c53a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 810c53c:	2300      	movs	r3, #0
}
 810c53e:	4618      	mov	r0, r3
 810c540:	3710      	adds	r7, #16
 810c542:	46bd      	mov	sp, r7
 810c544:	bd80      	pop	{r7, pc}

0810c546 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 810c546:	b580      	push	{r7, lr}
 810c548:	b084      	sub	sp, #16
 810c54a:	af00      	add	r7, sp, #0
 810c54c:	6078      	str	r0, [r7, #4]
 810c54e:	460b      	mov	r3, r1
 810c550:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c552:	687b      	ldr	r3, [r7, #4]
 810c554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c558:	687b      	ldr	r3, [r7, #4]
 810c55a:	32b0      	adds	r2, #176	@ 0xb0
 810c55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c560:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 810c562:	687b      	ldr	r3, [r7, #4]
 810c564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c568:	687b      	ldr	r3, [r7, #4]
 810c56a:	32b0      	adds	r2, #176	@ 0xb0
 810c56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c570:	2b00      	cmp	r3, #0
 810c572:	d101      	bne.n	810c578 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 810c574:	2303      	movs	r3, #3
 810c576:	e01a      	b.n	810c5ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 810c578:	78fb      	ldrb	r3, [r7, #3]
 810c57a:	4619      	mov	r1, r3
 810c57c:	6878      	ldr	r0, [r7, #4]
 810c57e:	f002 fa58 	bl	810ea32 <USBD_LL_GetRxDataSize>
 810c582:	4602      	mov	r2, r0
 810c584:	68fb      	ldr	r3, [r7, #12]
 810c586:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 810c58a:	687b      	ldr	r3, [r7, #4]
 810c58c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c590:	687a      	ldr	r2, [r7, #4]
 810c592:	33b0      	adds	r3, #176	@ 0xb0
 810c594:	009b      	lsls	r3, r3, #2
 810c596:	4413      	add	r3, r2
 810c598:	685b      	ldr	r3, [r3, #4]
 810c59a:	68db      	ldr	r3, [r3, #12]
 810c59c:	68fa      	ldr	r2, [r7, #12]
 810c59e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 810c5a2:	68fa      	ldr	r2, [r7, #12]
 810c5a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 810c5a8:	4611      	mov	r1, r2
 810c5aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 810c5ac:	2300      	movs	r3, #0
}
 810c5ae:	4618      	mov	r0, r3
 810c5b0:	3710      	adds	r7, #16
 810c5b2:	46bd      	mov	sp, r7
 810c5b4:	bd80      	pop	{r7, pc}

0810c5b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 810c5b6:	b580      	push	{r7, lr}
 810c5b8:	b084      	sub	sp, #16
 810c5ba:	af00      	add	r7, sp, #0
 810c5bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c5be:	687b      	ldr	r3, [r7, #4]
 810c5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c5c4:	687b      	ldr	r3, [r7, #4]
 810c5c6:	32b0      	adds	r2, #176	@ 0xb0
 810c5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c5cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 810c5ce:	68fb      	ldr	r3, [r7, #12]
 810c5d0:	2b00      	cmp	r3, #0
 810c5d2:	d101      	bne.n	810c5d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 810c5d4:	2303      	movs	r3, #3
 810c5d6:	e024      	b.n	810c622 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 810c5d8:	687b      	ldr	r3, [r7, #4]
 810c5da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c5de:	687a      	ldr	r2, [r7, #4]
 810c5e0:	33b0      	adds	r3, #176	@ 0xb0
 810c5e2:	009b      	lsls	r3, r3, #2
 810c5e4:	4413      	add	r3, r2
 810c5e6:	685b      	ldr	r3, [r3, #4]
 810c5e8:	2b00      	cmp	r3, #0
 810c5ea:	d019      	beq.n	810c620 <USBD_CDC_EP0_RxReady+0x6a>
 810c5ec:	68fb      	ldr	r3, [r7, #12]
 810c5ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 810c5f2:	2bff      	cmp	r3, #255	@ 0xff
 810c5f4:	d014      	beq.n	810c620 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 810c5f6:	687b      	ldr	r3, [r7, #4]
 810c5f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c5fc:	687a      	ldr	r2, [r7, #4]
 810c5fe:	33b0      	adds	r3, #176	@ 0xb0
 810c600:	009b      	lsls	r3, r3, #2
 810c602:	4413      	add	r3, r2
 810c604:	685b      	ldr	r3, [r3, #4]
 810c606:	689b      	ldr	r3, [r3, #8]
 810c608:	68fa      	ldr	r2, [r7, #12]
 810c60a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 810c60e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 810c610:	68fa      	ldr	r2, [r7, #12]
 810c612:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 810c616:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 810c618:	68fb      	ldr	r3, [r7, #12]
 810c61a:	22ff      	movs	r2, #255	@ 0xff
 810c61c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 810c620:	2300      	movs	r3, #0
}
 810c622:	4618      	mov	r0, r3
 810c624:	3710      	adds	r7, #16
 810c626:	46bd      	mov	sp, r7
 810c628:	bd80      	pop	{r7, pc}
	...

0810c62c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 810c62c:	b580      	push	{r7, lr}
 810c62e:	b086      	sub	sp, #24
 810c630:	af00      	add	r7, sp, #0
 810c632:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 810c634:	2182      	movs	r1, #130	@ 0x82
 810c636:	4818      	ldr	r0, [pc, #96]	@ (810c698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 810c638:	f000 fd4f 	bl	810d0da <USBD_GetEpDesc>
 810c63c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 810c63e:	2101      	movs	r1, #1
 810c640:	4815      	ldr	r0, [pc, #84]	@ (810c698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 810c642:	f000 fd4a 	bl	810d0da <USBD_GetEpDesc>
 810c646:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 810c648:	2181      	movs	r1, #129	@ 0x81
 810c64a:	4813      	ldr	r0, [pc, #76]	@ (810c698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 810c64c:	f000 fd45 	bl	810d0da <USBD_GetEpDesc>
 810c650:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 810c652:	697b      	ldr	r3, [r7, #20]
 810c654:	2b00      	cmp	r3, #0
 810c656:	d002      	beq.n	810c65e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 810c658:	697b      	ldr	r3, [r7, #20]
 810c65a:	2210      	movs	r2, #16
 810c65c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 810c65e:	693b      	ldr	r3, [r7, #16]
 810c660:	2b00      	cmp	r3, #0
 810c662:	d006      	beq.n	810c672 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 810c664:	693b      	ldr	r3, [r7, #16]
 810c666:	2200      	movs	r2, #0
 810c668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810c66c:	711a      	strb	r2, [r3, #4]
 810c66e:	2200      	movs	r2, #0
 810c670:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 810c672:	68fb      	ldr	r3, [r7, #12]
 810c674:	2b00      	cmp	r3, #0
 810c676:	d006      	beq.n	810c686 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 810c678:	68fb      	ldr	r3, [r7, #12]
 810c67a:	2200      	movs	r2, #0
 810c67c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810c680:	711a      	strb	r2, [r3, #4]
 810c682:	2200      	movs	r2, #0
 810c684:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 810c686:	687b      	ldr	r3, [r7, #4]
 810c688:	2243      	movs	r2, #67	@ 0x43
 810c68a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 810c68c:	4b02      	ldr	r3, [pc, #8]	@ (810c698 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 810c68e:	4618      	mov	r0, r3
 810c690:	3718      	adds	r7, #24
 810c692:	46bd      	mov	sp, r7
 810c694:	bd80      	pop	{r7, pc}
 810c696:	bf00      	nop
 810c698:	10032144 	.word	0x10032144

0810c69c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 810c69c:	b580      	push	{r7, lr}
 810c69e:	b086      	sub	sp, #24
 810c6a0:	af00      	add	r7, sp, #0
 810c6a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 810c6a4:	2182      	movs	r1, #130	@ 0x82
 810c6a6:	4818      	ldr	r0, [pc, #96]	@ (810c708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 810c6a8:	f000 fd17 	bl	810d0da <USBD_GetEpDesc>
 810c6ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 810c6ae:	2101      	movs	r1, #1
 810c6b0:	4815      	ldr	r0, [pc, #84]	@ (810c708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 810c6b2:	f000 fd12 	bl	810d0da <USBD_GetEpDesc>
 810c6b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 810c6b8:	2181      	movs	r1, #129	@ 0x81
 810c6ba:	4813      	ldr	r0, [pc, #76]	@ (810c708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 810c6bc:	f000 fd0d 	bl	810d0da <USBD_GetEpDesc>
 810c6c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 810c6c2:	697b      	ldr	r3, [r7, #20]
 810c6c4:	2b00      	cmp	r3, #0
 810c6c6:	d002      	beq.n	810c6ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 810c6c8:	697b      	ldr	r3, [r7, #20]
 810c6ca:	2210      	movs	r2, #16
 810c6cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 810c6ce:	693b      	ldr	r3, [r7, #16]
 810c6d0:	2b00      	cmp	r3, #0
 810c6d2:	d006      	beq.n	810c6e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 810c6d4:	693b      	ldr	r3, [r7, #16]
 810c6d6:	2200      	movs	r2, #0
 810c6d8:	711a      	strb	r2, [r3, #4]
 810c6da:	2200      	movs	r2, #0
 810c6dc:	f042 0202 	orr.w	r2, r2, #2
 810c6e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 810c6e2:	68fb      	ldr	r3, [r7, #12]
 810c6e4:	2b00      	cmp	r3, #0
 810c6e6:	d006      	beq.n	810c6f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 810c6e8:	68fb      	ldr	r3, [r7, #12]
 810c6ea:	2200      	movs	r2, #0
 810c6ec:	711a      	strb	r2, [r3, #4]
 810c6ee:	2200      	movs	r2, #0
 810c6f0:	f042 0202 	orr.w	r2, r2, #2
 810c6f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 810c6f6:	687b      	ldr	r3, [r7, #4]
 810c6f8:	2243      	movs	r2, #67	@ 0x43
 810c6fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 810c6fc:	4b02      	ldr	r3, [pc, #8]	@ (810c708 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 810c6fe:	4618      	mov	r0, r3
 810c700:	3718      	adds	r7, #24
 810c702:	46bd      	mov	sp, r7
 810c704:	bd80      	pop	{r7, pc}
 810c706:	bf00      	nop
 810c708:	10032144 	.word	0x10032144

0810c70c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 810c70c:	b580      	push	{r7, lr}
 810c70e:	b086      	sub	sp, #24
 810c710:	af00      	add	r7, sp, #0
 810c712:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 810c714:	2182      	movs	r1, #130	@ 0x82
 810c716:	4818      	ldr	r0, [pc, #96]	@ (810c778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 810c718:	f000 fcdf 	bl	810d0da <USBD_GetEpDesc>
 810c71c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 810c71e:	2101      	movs	r1, #1
 810c720:	4815      	ldr	r0, [pc, #84]	@ (810c778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 810c722:	f000 fcda 	bl	810d0da <USBD_GetEpDesc>
 810c726:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 810c728:	2181      	movs	r1, #129	@ 0x81
 810c72a:	4813      	ldr	r0, [pc, #76]	@ (810c778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 810c72c:	f000 fcd5 	bl	810d0da <USBD_GetEpDesc>
 810c730:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 810c732:	697b      	ldr	r3, [r7, #20]
 810c734:	2b00      	cmp	r3, #0
 810c736:	d002      	beq.n	810c73e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 810c738:	697b      	ldr	r3, [r7, #20]
 810c73a:	2210      	movs	r2, #16
 810c73c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 810c73e:	693b      	ldr	r3, [r7, #16]
 810c740:	2b00      	cmp	r3, #0
 810c742:	d006      	beq.n	810c752 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 810c744:	693b      	ldr	r3, [r7, #16]
 810c746:	2200      	movs	r2, #0
 810c748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810c74c:	711a      	strb	r2, [r3, #4]
 810c74e:	2200      	movs	r2, #0
 810c750:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 810c752:	68fb      	ldr	r3, [r7, #12]
 810c754:	2b00      	cmp	r3, #0
 810c756:	d006      	beq.n	810c766 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 810c758:	68fb      	ldr	r3, [r7, #12]
 810c75a:	2200      	movs	r2, #0
 810c75c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810c760:	711a      	strb	r2, [r3, #4]
 810c762:	2200      	movs	r2, #0
 810c764:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 810c766:	687b      	ldr	r3, [r7, #4]
 810c768:	2243      	movs	r2, #67	@ 0x43
 810c76a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 810c76c:	4b02      	ldr	r3, [pc, #8]	@ (810c778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 810c76e:	4618      	mov	r0, r3
 810c770:	3718      	adds	r7, #24
 810c772:	46bd      	mov	sp, r7
 810c774:	bd80      	pop	{r7, pc}
 810c776:	bf00      	nop
 810c778:	10032144 	.word	0x10032144

0810c77c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 810c77c:	b480      	push	{r7}
 810c77e:	b083      	sub	sp, #12
 810c780:	af00      	add	r7, sp, #0
 810c782:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 810c784:	687b      	ldr	r3, [r7, #4]
 810c786:	220a      	movs	r2, #10
 810c788:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 810c78a:	4b03      	ldr	r3, [pc, #12]	@ (810c798 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 810c78c:	4618      	mov	r0, r3
 810c78e:	370c      	adds	r7, #12
 810c790:	46bd      	mov	sp, r7
 810c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c796:	4770      	bx	lr
 810c798:	10032100 	.word	0x10032100

0810c79c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 810c79c:	b480      	push	{r7}
 810c79e:	b083      	sub	sp, #12
 810c7a0:	af00      	add	r7, sp, #0
 810c7a2:	6078      	str	r0, [r7, #4]
 810c7a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 810c7a6:	683b      	ldr	r3, [r7, #0]
 810c7a8:	2b00      	cmp	r3, #0
 810c7aa:	d101      	bne.n	810c7b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 810c7ac:	2303      	movs	r3, #3
 810c7ae:	e009      	b.n	810c7c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 810c7b0:	687b      	ldr	r3, [r7, #4]
 810c7b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c7b6:	687a      	ldr	r2, [r7, #4]
 810c7b8:	33b0      	adds	r3, #176	@ 0xb0
 810c7ba:	009b      	lsls	r3, r3, #2
 810c7bc:	4413      	add	r3, r2
 810c7be:	683a      	ldr	r2, [r7, #0]
 810c7c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 810c7c2:	2300      	movs	r3, #0
}
 810c7c4:	4618      	mov	r0, r3
 810c7c6:	370c      	adds	r7, #12
 810c7c8:	46bd      	mov	sp, r7
 810c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7ce:	4770      	bx	lr

0810c7d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 810c7d0:	b480      	push	{r7}
 810c7d2:	b087      	sub	sp, #28
 810c7d4:	af00      	add	r7, sp, #0
 810c7d6:	60f8      	str	r0, [r7, #12]
 810c7d8:	60b9      	str	r1, [r7, #8]
 810c7da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c7dc:	68fb      	ldr	r3, [r7, #12]
 810c7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c7e2:	68fb      	ldr	r3, [r7, #12]
 810c7e4:	32b0      	adds	r2, #176	@ 0xb0
 810c7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c7ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 810c7ec:	697b      	ldr	r3, [r7, #20]
 810c7ee:	2b00      	cmp	r3, #0
 810c7f0:	d101      	bne.n	810c7f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 810c7f2:	2303      	movs	r3, #3
 810c7f4:	e008      	b.n	810c808 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 810c7f6:	697b      	ldr	r3, [r7, #20]
 810c7f8:	68ba      	ldr	r2, [r7, #8]
 810c7fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 810c7fe:	697b      	ldr	r3, [r7, #20]
 810c800:	687a      	ldr	r2, [r7, #4]
 810c802:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 810c806:	2300      	movs	r3, #0
}
 810c808:	4618      	mov	r0, r3
 810c80a:	371c      	adds	r7, #28
 810c80c:	46bd      	mov	sp, r7
 810c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c812:	4770      	bx	lr

0810c814 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 810c814:	b480      	push	{r7}
 810c816:	b085      	sub	sp, #20
 810c818:	af00      	add	r7, sp, #0
 810c81a:	6078      	str	r0, [r7, #4]
 810c81c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c81e:	687b      	ldr	r3, [r7, #4]
 810c820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c824:	687b      	ldr	r3, [r7, #4]
 810c826:	32b0      	adds	r2, #176	@ 0xb0
 810c828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c82c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 810c82e:	68fb      	ldr	r3, [r7, #12]
 810c830:	2b00      	cmp	r3, #0
 810c832:	d101      	bne.n	810c838 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 810c834:	2303      	movs	r3, #3
 810c836:	e004      	b.n	810c842 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 810c838:	68fb      	ldr	r3, [r7, #12]
 810c83a:	683a      	ldr	r2, [r7, #0]
 810c83c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 810c840:	2300      	movs	r3, #0
}
 810c842:	4618      	mov	r0, r3
 810c844:	3714      	adds	r7, #20
 810c846:	46bd      	mov	sp, r7
 810c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c84c:	4770      	bx	lr
	...

0810c850 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 810c850:	b580      	push	{r7, lr}
 810c852:	b084      	sub	sp, #16
 810c854:	af00      	add	r7, sp, #0
 810c856:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c858:	687b      	ldr	r3, [r7, #4]
 810c85a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c85e:	687b      	ldr	r3, [r7, #4]
 810c860:	32b0      	adds	r2, #176	@ 0xb0
 810c862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c866:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 810c868:	2301      	movs	r3, #1
 810c86a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 810c86c:	68bb      	ldr	r3, [r7, #8]
 810c86e:	2b00      	cmp	r3, #0
 810c870:	d101      	bne.n	810c876 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 810c872:	2303      	movs	r3, #3
 810c874:	e025      	b.n	810c8c2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 810c876:	68bb      	ldr	r3, [r7, #8]
 810c878:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 810c87c:	2b00      	cmp	r3, #0
 810c87e:	d11f      	bne.n	810c8c0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 810c880:	68bb      	ldr	r3, [r7, #8]
 810c882:	2201      	movs	r2, #1
 810c884:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 810c888:	4b10      	ldr	r3, [pc, #64]	@ (810c8cc <USBD_CDC_TransmitPacket+0x7c>)
 810c88a:	781b      	ldrb	r3, [r3, #0]
 810c88c:	f003 020f 	and.w	r2, r3, #15
 810c890:	68bb      	ldr	r3, [r7, #8]
 810c892:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 810c896:	6878      	ldr	r0, [r7, #4]
 810c898:	4613      	mov	r3, r2
 810c89a:	009b      	lsls	r3, r3, #2
 810c89c:	4413      	add	r3, r2
 810c89e:	009b      	lsls	r3, r3, #2
 810c8a0:	4403      	add	r3, r0
 810c8a2:	3318      	adds	r3, #24
 810c8a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 810c8a6:	4b09      	ldr	r3, [pc, #36]	@ (810c8cc <USBD_CDC_TransmitPacket+0x7c>)
 810c8a8:	7819      	ldrb	r1, [r3, #0]
 810c8aa:	68bb      	ldr	r3, [r7, #8]
 810c8ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 810c8b0:	68bb      	ldr	r3, [r7, #8]
 810c8b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 810c8b6:	6878      	ldr	r0, [r7, #4]
 810c8b8:	f002 f879 	bl	810e9ae <USBD_LL_Transmit>

    ret = USBD_OK;
 810c8bc:	2300      	movs	r3, #0
 810c8be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 810c8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 810c8c2:	4618      	mov	r0, r3
 810c8c4:	3710      	adds	r7, #16
 810c8c6:	46bd      	mov	sp, r7
 810c8c8:	bd80      	pop	{r7, pc}
 810c8ca:	bf00      	nop
 810c8cc:	10032187 	.word	0x10032187

0810c8d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 810c8d0:	b580      	push	{r7, lr}
 810c8d2:	b084      	sub	sp, #16
 810c8d4:	af00      	add	r7, sp, #0
 810c8d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c8d8:	687b      	ldr	r3, [r7, #4]
 810c8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c8de:	687b      	ldr	r3, [r7, #4]
 810c8e0:	32b0      	adds	r2, #176	@ 0xb0
 810c8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c8e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 810c8e8:	687b      	ldr	r3, [r7, #4]
 810c8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c8ee:	687b      	ldr	r3, [r7, #4]
 810c8f0:	32b0      	adds	r2, #176	@ 0xb0
 810c8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c8f6:	2b00      	cmp	r3, #0
 810c8f8:	d101      	bne.n	810c8fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 810c8fa:	2303      	movs	r3, #3
 810c8fc:	e018      	b.n	810c930 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 810c8fe:	687b      	ldr	r3, [r7, #4]
 810c900:	7c1b      	ldrb	r3, [r3, #16]
 810c902:	2b00      	cmp	r3, #0
 810c904:	d10a      	bne.n	810c91c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 810c906:	4b0c      	ldr	r3, [pc, #48]	@ (810c938 <USBD_CDC_ReceivePacket+0x68>)
 810c908:	7819      	ldrb	r1, [r3, #0]
 810c90a:	68fb      	ldr	r3, [r7, #12]
 810c90c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 810c910:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810c914:	6878      	ldr	r0, [r7, #4]
 810c916:	f002 f86b 	bl	810e9f0 <USBD_LL_PrepareReceive>
 810c91a:	e008      	b.n	810c92e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 810c91c:	4b06      	ldr	r3, [pc, #24]	@ (810c938 <USBD_CDC_ReceivePacket+0x68>)
 810c91e:	7819      	ldrb	r1, [r3, #0]
 810c920:	68fb      	ldr	r3, [r7, #12]
 810c922:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 810c926:	2340      	movs	r3, #64	@ 0x40
 810c928:	6878      	ldr	r0, [r7, #4]
 810c92a:	f002 f861 	bl	810e9f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 810c92e:	2300      	movs	r3, #0
}
 810c930:	4618      	mov	r0, r3
 810c932:	3710      	adds	r7, #16
 810c934:	46bd      	mov	sp, r7
 810c936:	bd80      	pop	{r7, pc}
 810c938:	10032188 	.word	0x10032188

0810c93c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 810c93c:	b580      	push	{r7, lr}
 810c93e:	b086      	sub	sp, #24
 810c940:	af00      	add	r7, sp, #0
 810c942:	60f8      	str	r0, [r7, #12]
 810c944:	60b9      	str	r1, [r7, #8]
 810c946:	4613      	mov	r3, r2
 810c948:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 810c94a:	68fb      	ldr	r3, [r7, #12]
 810c94c:	2b00      	cmp	r3, #0
 810c94e:	d101      	bne.n	810c954 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 810c950:	2303      	movs	r3, #3
 810c952:	e01f      	b.n	810c994 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 810c954:	68fb      	ldr	r3, [r7, #12]
 810c956:	2200      	movs	r2, #0
 810c958:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 810c95c:	68fb      	ldr	r3, [r7, #12]
 810c95e:	2200      	movs	r2, #0
 810c960:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 810c964:	68fb      	ldr	r3, [r7, #12]
 810c966:	2200      	movs	r2, #0
 810c968:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 810c96c:	68bb      	ldr	r3, [r7, #8]
 810c96e:	2b00      	cmp	r3, #0
 810c970:	d003      	beq.n	810c97a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 810c972:	68fb      	ldr	r3, [r7, #12]
 810c974:	68ba      	ldr	r2, [r7, #8]
 810c976:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 810c97a:	68fb      	ldr	r3, [r7, #12]
 810c97c:	2201      	movs	r2, #1
 810c97e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 810c982:	68fb      	ldr	r3, [r7, #12]
 810c984:	79fa      	ldrb	r2, [r7, #7]
 810c986:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 810c988:	68f8      	ldr	r0, [r7, #12]
 810c98a:	f001 fed7 	bl	810e73c <USBD_LL_Init>
 810c98e:	4603      	mov	r3, r0
 810c990:	75fb      	strb	r3, [r7, #23]

  return ret;
 810c992:	7dfb      	ldrb	r3, [r7, #23]
}
 810c994:	4618      	mov	r0, r3
 810c996:	3718      	adds	r7, #24
 810c998:	46bd      	mov	sp, r7
 810c99a:	bd80      	pop	{r7, pc}

0810c99c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 810c99c:	b580      	push	{r7, lr}
 810c99e:	b084      	sub	sp, #16
 810c9a0:	af00      	add	r7, sp, #0
 810c9a2:	6078      	str	r0, [r7, #4]
 810c9a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 810c9a6:	2300      	movs	r3, #0
 810c9a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 810c9aa:	683b      	ldr	r3, [r7, #0]
 810c9ac:	2b00      	cmp	r3, #0
 810c9ae:	d101      	bne.n	810c9b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 810c9b0:	2303      	movs	r3, #3
 810c9b2:	e025      	b.n	810ca00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 810c9b4:	687b      	ldr	r3, [r7, #4]
 810c9b6:	683a      	ldr	r2, [r7, #0]
 810c9b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 810c9bc:	687b      	ldr	r3, [r7, #4]
 810c9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c9c2:	687b      	ldr	r3, [r7, #4]
 810c9c4:	32ae      	adds	r2, #174	@ 0xae
 810c9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c9cc:	2b00      	cmp	r3, #0
 810c9ce:	d00f      	beq.n	810c9f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 810c9d0:	687b      	ldr	r3, [r7, #4]
 810c9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c9d6:	687b      	ldr	r3, [r7, #4]
 810c9d8:	32ae      	adds	r2, #174	@ 0xae
 810c9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c9e0:	f107 020e 	add.w	r2, r7, #14
 810c9e4:	4610      	mov	r0, r2
 810c9e6:	4798      	blx	r3
 810c9e8:	4602      	mov	r2, r0
 810c9ea:	687b      	ldr	r3, [r7, #4]
 810c9ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 810c9f0:	687b      	ldr	r3, [r7, #4]
 810c9f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 810c9f6:	1c5a      	adds	r2, r3, #1
 810c9f8:	687b      	ldr	r3, [r7, #4]
 810c9fa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 810c9fe:	2300      	movs	r3, #0
}
 810ca00:	4618      	mov	r0, r3
 810ca02:	3710      	adds	r7, #16
 810ca04:	46bd      	mov	sp, r7
 810ca06:	bd80      	pop	{r7, pc}

0810ca08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 810ca08:	b580      	push	{r7, lr}
 810ca0a:	b082      	sub	sp, #8
 810ca0c:	af00      	add	r7, sp, #0
 810ca0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 810ca10:	6878      	ldr	r0, [r7, #4]
 810ca12:	f001 fee3 	bl	810e7dc <USBD_LL_Start>
 810ca16:	4603      	mov	r3, r0
}
 810ca18:	4618      	mov	r0, r3
 810ca1a:	3708      	adds	r7, #8
 810ca1c:	46bd      	mov	sp, r7
 810ca1e:	bd80      	pop	{r7, pc}

0810ca20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 810ca20:	b480      	push	{r7}
 810ca22:	b083      	sub	sp, #12
 810ca24:	af00      	add	r7, sp, #0
 810ca26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 810ca28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 810ca2a:	4618      	mov	r0, r3
 810ca2c:	370c      	adds	r7, #12
 810ca2e:	46bd      	mov	sp, r7
 810ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca34:	4770      	bx	lr

0810ca36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 810ca36:	b580      	push	{r7, lr}
 810ca38:	b084      	sub	sp, #16
 810ca3a:	af00      	add	r7, sp, #0
 810ca3c:	6078      	str	r0, [r7, #4]
 810ca3e:	460b      	mov	r3, r1
 810ca40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 810ca42:	2300      	movs	r3, #0
 810ca44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 810ca46:	687b      	ldr	r3, [r7, #4]
 810ca48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810ca4c:	2b00      	cmp	r3, #0
 810ca4e:	d009      	beq.n	810ca64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 810ca50:	687b      	ldr	r3, [r7, #4]
 810ca52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810ca56:	681b      	ldr	r3, [r3, #0]
 810ca58:	78fa      	ldrb	r2, [r7, #3]
 810ca5a:	4611      	mov	r1, r2
 810ca5c:	6878      	ldr	r0, [r7, #4]
 810ca5e:	4798      	blx	r3
 810ca60:	4603      	mov	r3, r0
 810ca62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 810ca64:	7bfb      	ldrb	r3, [r7, #15]
}
 810ca66:	4618      	mov	r0, r3
 810ca68:	3710      	adds	r7, #16
 810ca6a:	46bd      	mov	sp, r7
 810ca6c:	bd80      	pop	{r7, pc}

0810ca6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 810ca6e:	b580      	push	{r7, lr}
 810ca70:	b084      	sub	sp, #16
 810ca72:	af00      	add	r7, sp, #0
 810ca74:	6078      	str	r0, [r7, #4]
 810ca76:	460b      	mov	r3, r1
 810ca78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 810ca7a:	2300      	movs	r3, #0
 810ca7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 810ca7e:	687b      	ldr	r3, [r7, #4]
 810ca80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810ca84:	685b      	ldr	r3, [r3, #4]
 810ca86:	78fa      	ldrb	r2, [r7, #3]
 810ca88:	4611      	mov	r1, r2
 810ca8a:	6878      	ldr	r0, [r7, #4]
 810ca8c:	4798      	blx	r3
 810ca8e:	4603      	mov	r3, r0
 810ca90:	2b00      	cmp	r3, #0
 810ca92:	d001      	beq.n	810ca98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 810ca94:	2303      	movs	r3, #3
 810ca96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 810ca98:	7bfb      	ldrb	r3, [r7, #15]
}
 810ca9a:	4618      	mov	r0, r3
 810ca9c:	3710      	adds	r7, #16
 810ca9e:	46bd      	mov	sp, r7
 810caa0:	bd80      	pop	{r7, pc}

0810caa2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 810caa2:	b580      	push	{r7, lr}
 810caa4:	b084      	sub	sp, #16
 810caa6:	af00      	add	r7, sp, #0
 810caa8:	6078      	str	r0, [r7, #4]
 810caaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 810caac:	687b      	ldr	r3, [r7, #4]
 810caae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 810cab2:	6839      	ldr	r1, [r7, #0]
 810cab4:	4618      	mov	r0, r3
 810cab6:	f001 f936 	bl	810dd26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 810caba:	687b      	ldr	r3, [r7, #4]
 810cabc:	2201      	movs	r2, #1
 810cabe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 810cac2:	687b      	ldr	r3, [r7, #4]
 810cac4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 810cac8:	461a      	mov	r2, r3
 810caca:	687b      	ldr	r3, [r7, #4]
 810cacc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 810cad0:	687b      	ldr	r3, [r7, #4]
 810cad2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 810cad6:	f003 031f 	and.w	r3, r3, #31
 810cada:	2b02      	cmp	r3, #2
 810cadc:	d01a      	beq.n	810cb14 <USBD_LL_SetupStage+0x72>
 810cade:	2b02      	cmp	r3, #2
 810cae0:	d822      	bhi.n	810cb28 <USBD_LL_SetupStage+0x86>
 810cae2:	2b00      	cmp	r3, #0
 810cae4:	d002      	beq.n	810caec <USBD_LL_SetupStage+0x4a>
 810cae6:	2b01      	cmp	r3, #1
 810cae8:	d00a      	beq.n	810cb00 <USBD_LL_SetupStage+0x5e>
 810caea:	e01d      	b.n	810cb28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 810caec:	687b      	ldr	r3, [r7, #4]
 810caee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 810caf2:	4619      	mov	r1, r3
 810caf4:	6878      	ldr	r0, [r7, #4]
 810caf6:	f000 fb63 	bl	810d1c0 <USBD_StdDevReq>
 810cafa:	4603      	mov	r3, r0
 810cafc:	73fb      	strb	r3, [r7, #15]
      break;
 810cafe:	e020      	b.n	810cb42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 810cb00:	687b      	ldr	r3, [r7, #4]
 810cb02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 810cb06:	4619      	mov	r1, r3
 810cb08:	6878      	ldr	r0, [r7, #4]
 810cb0a:	f000 fbcb 	bl	810d2a4 <USBD_StdItfReq>
 810cb0e:	4603      	mov	r3, r0
 810cb10:	73fb      	strb	r3, [r7, #15]
      break;
 810cb12:	e016      	b.n	810cb42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 810cb14:	687b      	ldr	r3, [r7, #4]
 810cb16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 810cb1a:	4619      	mov	r1, r3
 810cb1c:	6878      	ldr	r0, [r7, #4]
 810cb1e:	f000 fc2d 	bl	810d37c <USBD_StdEPReq>
 810cb22:	4603      	mov	r3, r0
 810cb24:	73fb      	strb	r3, [r7, #15]
      break;
 810cb26:	e00c      	b.n	810cb42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 810cb28:	687b      	ldr	r3, [r7, #4]
 810cb2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 810cb2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810cb32:	b2db      	uxtb	r3, r3
 810cb34:	4619      	mov	r1, r3
 810cb36:	6878      	ldr	r0, [r7, #4]
 810cb38:	f001 feb0 	bl	810e89c <USBD_LL_StallEP>
 810cb3c:	4603      	mov	r3, r0
 810cb3e:	73fb      	strb	r3, [r7, #15]
      break;
 810cb40:	bf00      	nop
  }

  return ret;
 810cb42:	7bfb      	ldrb	r3, [r7, #15]
}
 810cb44:	4618      	mov	r0, r3
 810cb46:	3710      	adds	r7, #16
 810cb48:	46bd      	mov	sp, r7
 810cb4a:	bd80      	pop	{r7, pc}

0810cb4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 810cb4c:	b580      	push	{r7, lr}
 810cb4e:	b086      	sub	sp, #24
 810cb50:	af00      	add	r7, sp, #0
 810cb52:	60f8      	str	r0, [r7, #12]
 810cb54:	460b      	mov	r3, r1
 810cb56:	607a      	str	r2, [r7, #4]
 810cb58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 810cb5a:	2300      	movs	r3, #0
 810cb5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 810cb5e:	7afb      	ldrb	r3, [r7, #11]
 810cb60:	2b00      	cmp	r3, #0
 810cb62:	d16e      	bne.n	810cc42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 810cb64:	68fb      	ldr	r3, [r7, #12]
 810cb66:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 810cb6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 810cb6c:	68fb      	ldr	r3, [r7, #12]
 810cb6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 810cb72:	2b03      	cmp	r3, #3
 810cb74:	f040 8098 	bne.w	810cca8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 810cb78:	693b      	ldr	r3, [r7, #16]
 810cb7a:	689a      	ldr	r2, [r3, #8]
 810cb7c:	693b      	ldr	r3, [r7, #16]
 810cb7e:	68db      	ldr	r3, [r3, #12]
 810cb80:	429a      	cmp	r2, r3
 810cb82:	d913      	bls.n	810cbac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 810cb84:	693b      	ldr	r3, [r7, #16]
 810cb86:	689a      	ldr	r2, [r3, #8]
 810cb88:	693b      	ldr	r3, [r7, #16]
 810cb8a:	68db      	ldr	r3, [r3, #12]
 810cb8c:	1ad2      	subs	r2, r2, r3
 810cb8e:	693b      	ldr	r3, [r7, #16]
 810cb90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 810cb92:	693b      	ldr	r3, [r7, #16]
 810cb94:	68da      	ldr	r2, [r3, #12]
 810cb96:	693b      	ldr	r3, [r7, #16]
 810cb98:	689b      	ldr	r3, [r3, #8]
 810cb9a:	4293      	cmp	r3, r2
 810cb9c:	bf28      	it	cs
 810cb9e:	4613      	movcs	r3, r2
 810cba0:	461a      	mov	r2, r3
 810cba2:	6879      	ldr	r1, [r7, #4]
 810cba4:	68f8      	ldr	r0, [r7, #12]
 810cba6:	f001 f9be 	bl	810df26 <USBD_CtlContinueRx>
 810cbaa:	e07d      	b.n	810cca8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 810cbac:	68fb      	ldr	r3, [r7, #12]
 810cbae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 810cbb2:	f003 031f 	and.w	r3, r3, #31
 810cbb6:	2b02      	cmp	r3, #2
 810cbb8:	d014      	beq.n	810cbe4 <USBD_LL_DataOutStage+0x98>
 810cbba:	2b02      	cmp	r3, #2
 810cbbc:	d81d      	bhi.n	810cbfa <USBD_LL_DataOutStage+0xae>
 810cbbe:	2b00      	cmp	r3, #0
 810cbc0:	d002      	beq.n	810cbc8 <USBD_LL_DataOutStage+0x7c>
 810cbc2:	2b01      	cmp	r3, #1
 810cbc4:	d003      	beq.n	810cbce <USBD_LL_DataOutStage+0x82>
 810cbc6:	e018      	b.n	810cbfa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 810cbc8:	2300      	movs	r3, #0
 810cbca:	75bb      	strb	r3, [r7, #22]
            break;
 810cbcc:	e018      	b.n	810cc00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 810cbce:	68fb      	ldr	r3, [r7, #12]
 810cbd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 810cbd4:	b2db      	uxtb	r3, r3
 810cbd6:	4619      	mov	r1, r3
 810cbd8:	68f8      	ldr	r0, [r7, #12]
 810cbda:	f000 fa64 	bl	810d0a6 <USBD_CoreFindIF>
 810cbde:	4603      	mov	r3, r0
 810cbe0:	75bb      	strb	r3, [r7, #22]
            break;
 810cbe2:	e00d      	b.n	810cc00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 810cbe4:	68fb      	ldr	r3, [r7, #12]
 810cbe6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 810cbea:	b2db      	uxtb	r3, r3
 810cbec:	4619      	mov	r1, r3
 810cbee:	68f8      	ldr	r0, [r7, #12]
 810cbf0:	f000 fa66 	bl	810d0c0 <USBD_CoreFindEP>
 810cbf4:	4603      	mov	r3, r0
 810cbf6:	75bb      	strb	r3, [r7, #22]
            break;
 810cbf8:	e002      	b.n	810cc00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 810cbfa:	2300      	movs	r3, #0
 810cbfc:	75bb      	strb	r3, [r7, #22]
            break;
 810cbfe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 810cc00:	7dbb      	ldrb	r3, [r7, #22]
 810cc02:	2b00      	cmp	r3, #0
 810cc04:	d119      	bne.n	810cc3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cc06:	68fb      	ldr	r3, [r7, #12]
 810cc08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cc0c:	b2db      	uxtb	r3, r3
 810cc0e:	2b03      	cmp	r3, #3
 810cc10:	d113      	bne.n	810cc3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 810cc12:	7dba      	ldrb	r2, [r7, #22]
 810cc14:	68fb      	ldr	r3, [r7, #12]
 810cc16:	32ae      	adds	r2, #174	@ 0xae
 810cc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cc1c:	691b      	ldr	r3, [r3, #16]
 810cc1e:	2b00      	cmp	r3, #0
 810cc20:	d00b      	beq.n	810cc3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 810cc22:	7dba      	ldrb	r2, [r7, #22]
 810cc24:	68fb      	ldr	r3, [r7, #12]
 810cc26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 810cc2a:	7dba      	ldrb	r2, [r7, #22]
 810cc2c:	68fb      	ldr	r3, [r7, #12]
 810cc2e:	32ae      	adds	r2, #174	@ 0xae
 810cc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cc34:	691b      	ldr	r3, [r3, #16]
 810cc36:	68f8      	ldr	r0, [r7, #12]
 810cc38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 810cc3a:	68f8      	ldr	r0, [r7, #12]
 810cc3c:	f001 f984 	bl	810df48 <USBD_CtlSendStatus>
 810cc40:	e032      	b.n	810cca8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 810cc42:	7afb      	ldrb	r3, [r7, #11]
 810cc44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810cc48:	b2db      	uxtb	r3, r3
 810cc4a:	4619      	mov	r1, r3
 810cc4c:	68f8      	ldr	r0, [r7, #12]
 810cc4e:	f000 fa37 	bl	810d0c0 <USBD_CoreFindEP>
 810cc52:	4603      	mov	r3, r0
 810cc54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 810cc56:	7dbb      	ldrb	r3, [r7, #22]
 810cc58:	2bff      	cmp	r3, #255	@ 0xff
 810cc5a:	d025      	beq.n	810cca8 <USBD_LL_DataOutStage+0x15c>
 810cc5c:	7dbb      	ldrb	r3, [r7, #22]
 810cc5e:	2b00      	cmp	r3, #0
 810cc60:	d122      	bne.n	810cca8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cc62:	68fb      	ldr	r3, [r7, #12]
 810cc64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cc68:	b2db      	uxtb	r3, r3
 810cc6a:	2b03      	cmp	r3, #3
 810cc6c:	d117      	bne.n	810cc9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 810cc6e:	7dba      	ldrb	r2, [r7, #22]
 810cc70:	68fb      	ldr	r3, [r7, #12]
 810cc72:	32ae      	adds	r2, #174	@ 0xae
 810cc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cc78:	699b      	ldr	r3, [r3, #24]
 810cc7a:	2b00      	cmp	r3, #0
 810cc7c:	d00f      	beq.n	810cc9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 810cc7e:	7dba      	ldrb	r2, [r7, #22]
 810cc80:	68fb      	ldr	r3, [r7, #12]
 810cc82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 810cc86:	7dba      	ldrb	r2, [r7, #22]
 810cc88:	68fb      	ldr	r3, [r7, #12]
 810cc8a:	32ae      	adds	r2, #174	@ 0xae
 810cc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cc90:	699b      	ldr	r3, [r3, #24]
 810cc92:	7afa      	ldrb	r2, [r7, #11]
 810cc94:	4611      	mov	r1, r2
 810cc96:	68f8      	ldr	r0, [r7, #12]
 810cc98:	4798      	blx	r3
 810cc9a:	4603      	mov	r3, r0
 810cc9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 810cc9e:	7dfb      	ldrb	r3, [r7, #23]
 810cca0:	2b00      	cmp	r3, #0
 810cca2:	d001      	beq.n	810cca8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 810cca4:	7dfb      	ldrb	r3, [r7, #23]
 810cca6:	e000      	b.n	810ccaa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 810cca8:	2300      	movs	r3, #0
}
 810ccaa:	4618      	mov	r0, r3
 810ccac:	3718      	adds	r7, #24
 810ccae:	46bd      	mov	sp, r7
 810ccb0:	bd80      	pop	{r7, pc}

0810ccb2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 810ccb2:	b580      	push	{r7, lr}
 810ccb4:	b086      	sub	sp, #24
 810ccb6:	af00      	add	r7, sp, #0
 810ccb8:	60f8      	str	r0, [r7, #12]
 810ccba:	460b      	mov	r3, r1
 810ccbc:	607a      	str	r2, [r7, #4]
 810ccbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 810ccc0:	7afb      	ldrb	r3, [r7, #11]
 810ccc2:	2b00      	cmp	r3, #0
 810ccc4:	d16f      	bne.n	810cda6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 810ccc6:	68fb      	ldr	r3, [r7, #12]
 810ccc8:	3314      	adds	r3, #20
 810ccca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 810cccc:	68fb      	ldr	r3, [r7, #12]
 810ccce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 810ccd2:	2b02      	cmp	r3, #2
 810ccd4:	d15a      	bne.n	810cd8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 810ccd6:	693b      	ldr	r3, [r7, #16]
 810ccd8:	689a      	ldr	r2, [r3, #8]
 810ccda:	693b      	ldr	r3, [r7, #16]
 810ccdc:	68db      	ldr	r3, [r3, #12]
 810ccde:	429a      	cmp	r2, r3
 810cce0:	d914      	bls.n	810cd0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 810cce2:	693b      	ldr	r3, [r7, #16]
 810cce4:	689a      	ldr	r2, [r3, #8]
 810cce6:	693b      	ldr	r3, [r7, #16]
 810cce8:	68db      	ldr	r3, [r3, #12]
 810ccea:	1ad2      	subs	r2, r2, r3
 810ccec:	693b      	ldr	r3, [r7, #16]
 810ccee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 810ccf0:	693b      	ldr	r3, [r7, #16]
 810ccf2:	689b      	ldr	r3, [r3, #8]
 810ccf4:	461a      	mov	r2, r3
 810ccf6:	6879      	ldr	r1, [r7, #4]
 810ccf8:	68f8      	ldr	r0, [r7, #12]
 810ccfa:	f001 f8e6 	bl	810deca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 810ccfe:	2300      	movs	r3, #0
 810cd00:	2200      	movs	r2, #0
 810cd02:	2100      	movs	r1, #0
 810cd04:	68f8      	ldr	r0, [r7, #12]
 810cd06:	f001 fe73 	bl	810e9f0 <USBD_LL_PrepareReceive>
 810cd0a:	e03f      	b.n	810cd8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 810cd0c:	693b      	ldr	r3, [r7, #16]
 810cd0e:	68da      	ldr	r2, [r3, #12]
 810cd10:	693b      	ldr	r3, [r7, #16]
 810cd12:	689b      	ldr	r3, [r3, #8]
 810cd14:	429a      	cmp	r2, r3
 810cd16:	d11c      	bne.n	810cd52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 810cd18:	693b      	ldr	r3, [r7, #16]
 810cd1a:	685a      	ldr	r2, [r3, #4]
 810cd1c:	693b      	ldr	r3, [r7, #16]
 810cd1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 810cd20:	429a      	cmp	r2, r3
 810cd22:	d316      	bcc.n	810cd52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 810cd24:	693b      	ldr	r3, [r7, #16]
 810cd26:	685a      	ldr	r2, [r3, #4]
 810cd28:	68fb      	ldr	r3, [r7, #12]
 810cd2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 810cd2e:	429a      	cmp	r2, r3
 810cd30:	d20f      	bcs.n	810cd52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 810cd32:	2200      	movs	r2, #0
 810cd34:	2100      	movs	r1, #0
 810cd36:	68f8      	ldr	r0, [r7, #12]
 810cd38:	f001 f8c7 	bl	810deca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 810cd3c:	68fb      	ldr	r3, [r7, #12]
 810cd3e:	2200      	movs	r2, #0
 810cd40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 810cd44:	2300      	movs	r3, #0
 810cd46:	2200      	movs	r2, #0
 810cd48:	2100      	movs	r1, #0
 810cd4a:	68f8      	ldr	r0, [r7, #12]
 810cd4c:	f001 fe50 	bl	810e9f0 <USBD_LL_PrepareReceive>
 810cd50:	e01c      	b.n	810cd8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cd52:	68fb      	ldr	r3, [r7, #12]
 810cd54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cd58:	b2db      	uxtb	r3, r3
 810cd5a:	2b03      	cmp	r3, #3
 810cd5c:	d10f      	bne.n	810cd7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 810cd5e:	68fb      	ldr	r3, [r7, #12]
 810cd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810cd64:	68db      	ldr	r3, [r3, #12]
 810cd66:	2b00      	cmp	r3, #0
 810cd68:	d009      	beq.n	810cd7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 810cd6a:	68fb      	ldr	r3, [r7, #12]
 810cd6c:	2200      	movs	r2, #0
 810cd6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 810cd72:	68fb      	ldr	r3, [r7, #12]
 810cd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810cd78:	68db      	ldr	r3, [r3, #12]
 810cd7a:	68f8      	ldr	r0, [r7, #12]
 810cd7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 810cd7e:	2180      	movs	r1, #128	@ 0x80
 810cd80:	68f8      	ldr	r0, [r7, #12]
 810cd82:	f001 fd8b 	bl	810e89c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 810cd86:	68f8      	ldr	r0, [r7, #12]
 810cd88:	f001 f8f1 	bl	810df6e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 810cd8c:	68fb      	ldr	r3, [r7, #12]
 810cd8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 810cd92:	2b00      	cmp	r3, #0
 810cd94:	d03a      	beq.n	810ce0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 810cd96:	68f8      	ldr	r0, [r7, #12]
 810cd98:	f7ff fe42 	bl	810ca20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 810cd9c:	68fb      	ldr	r3, [r7, #12]
 810cd9e:	2200      	movs	r2, #0
 810cda0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 810cda4:	e032      	b.n	810ce0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 810cda6:	7afb      	ldrb	r3, [r7, #11]
 810cda8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 810cdac:	b2db      	uxtb	r3, r3
 810cdae:	4619      	mov	r1, r3
 810cdb0:	68f8      	ldr	r0, [r7, #12]
 810cdb2:	f000 f985 	bl	810d0c0 <USBD_CoreFindEP>
 810cdb6:	4603      	mov	r3, r0
 810cdb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 810cdba:	7dfb      	ldrb	r3, [r7, #23]
 810cdbc:	2bff      	cmp	r3, #255	@ 0xff
 810cdbe:	d025      	beq.n	810ce0c <USBD_LL_DataInStage+0x15a>
 810cdc0:	7dfb      	ldrb	r3, [r7, #23]
 810cdc2:	2b00      	cmp	r3, #0
 810cdc4:	d122      	bne.n	810ce0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cdc6:	68fb      	ldr	r3, [r7, #12]
 810cdc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cdcc:	b2db      	uxtb	r3, r3
 810cdce:	2b03      	cmp	r3, #3
 810cdd0:	d11c      	bne.n	810ce0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 810cdd2:	7dfa      	ldrb	r2, [r7, #23]
 810cdd4:	68fb      	ldr	r3, [r7, #12]
 810cdd6:	32ae      	adds	r2, #174	@ 0xae
 810cdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cddc:	695b      	ldr	r3, [r3, #20]
 810cdde:	2b00      	cmp	r3, #0
 810cde0:	d014      	beq.n	810ce0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 810cde2:	7dfa      	ldrb	r2, [r7, #23]
 810cde4:	68fb      	ldr	r3, [r7, #12]
 810cde6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 810cdea:	7dfa      	ldrb	r2, [r7, #23]
 810cdec:	68fb      	ldr	r3, [r7, #12]
 810cdee:	32ae      	adds	r2, #174	@ 0xae
 810cdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cdf4:	695b      	ldr	r3, [r3, #20]
 810cdf6:	7afa      	ldrb	r2, [r7, #11]
 810cdf8:	4611      	mov	r1, r2
 810cdfa:	68f8      	ldr	r0, [r7, #12]
 810cdfc:	4798      	blx	r3
 810cdfe:	4603      	mov	r3, r0
 810ce00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 810ce02:	7dbb      	ldrb	r3, [r7, #22]
 810ce04:	2b00      	cmp	r3, #0
 810ce06:	d001      	beq.n	810ce0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 810ce08:	7dbb      	ldrb	r3, [r7, #22]
 810ce0a:	e000      	b.n	810ce0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 810ce0c:	2300      	movs	r3, #0
}
 810ce0e:	4618      	mov	r0, r3
 810ce10:	3718      	adds	r7, #24
 810ce12:	46bd      	mov	sp, r7
 810ce14:	bd80      	pop	{r7, pc}

0810ce16 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 810ce16:	b580      	push	{r7, lr}
 810ce18:	b084      	sub	sp, #16
 810ce1a:	af00      	add	r7, sp, #0
 810ce1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 810ce1e:	2300      	movs	r3, #0
 810ce20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 810ce22:	687b      	ldr	r3, [r7, #4]
 810ce24:	2201      	movs	r2, #1
 810ce26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 810ce2a:	687b      	ldr	r3, [r7, #4]
 810ce2c:	2200      	movs	r2, #0
 810ce2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 810ce32:	687b      	ldr	r3, [r7, #4]
 810ce34:	2200      	movs	r2, #0
 810ce36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 810ce38:	687b      	ldr	r3, [r7, #4]
 810ce3a:	2200      	movs	r2, #0
 810ce3c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 810ce40:	687b      	ldr	r3, [r7, #4]
 810ce42:	2200      	movs	r2, #0
 810ce44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 810ce48:	687b      	ldr	r3, [r7, #4]
 810ce4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810ce4e:	2b00      	cmp	r3, #0
 810ce50:	d014      	beq.n	810ce7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 810ce52:	687b      	ldr	r3, [r7, #4]
 810ce54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810ce58:	685b      	ldr	r3, [r3, #4]
 810ce5a:	2b00      	cmp	r3, #0
 810ce5c:	d00e      	beq.n	810ce7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 810ce5e:	687b      	ldr	r3, [r7, #4]
 810ce60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810ce64:	685b      	ldr	r3, [r3, #4]
 810ce66:	687a      	ldr	r2, [r7, #4]
 810ce68:	6852      	ldr	r2, [r2, #4]
 810ce6a:	b2d2      	uxtb	r2, r2
 810ce6c:	4611      	mov	r1, r2
 810ce6e:	6878      	ldr	r0, [r7, #4]
 810ce70:	4798      	blx	r3
 810ce72:	4603      	mov	r3, r0
 810ce74:	2b00      	cmp	r3, #0
 810ce76:	d001      	beq.n	810ce7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 810ce78:	2303      	movs	r3, #3
 810ce7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 810ce7c:	2340      	movs	r3, #64	@ 0x40
 810ce7e:	2200      	movs	r2, #0
 810ce80:	2100      	movs	r1, #0
 810ce82:	6878      	ldr	r0, [r7, #4]
 810ce84:	f001 fcc5 	bl	810e812 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 810ce88:	687b      	ldr	r3, [r7, #4]
 810ce8a:	2201      	movs	r2, #1
 810ce8c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 810ce90:	687b      	ldr	r3, [r7, #4]
 810ce92:	2240      	movs	r2, #64	@ 0x40
 810ce94:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 810ce98:	2340      	movs	r3, #64	@ 0x40
 810ce9a:	2200      	movs	r2, #0
 810ce9c:	2180      	movs	r1, #128	@ 0x80
 810ce9e:	6878      	ldr	r0, [r7, #4]
 810cea0:	f001 fcb7 	bl	810e812 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 810cea4:	687b      	ldr	r3, [r7, #4]
 810cea6:	2201      	movs	r2, #1
 810cea8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 810ceaa:	687b      	ldr	r3, [r7, #4]
 810ceac:	2240      	movs	r2, #64	@ 0x40
 810ceae:	621a      	str	r2, [r3, #32]

  return ret;
 810ceb0:	7bfb      	ldrb	r3, [r7, #15]
}
 810ceb2:	4618      	mov	r0, r3
 810ceb4:	3710      	adds	r7, #16
 810ceb6:	46bd      	mov	sp, r7
 810ceb8:	bd80      	pop	{r7, pc}

0810ceba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 810ceba:	b480      	push	{r7}
 810cebc:	b083      	sub	sp, #12
 810cebe:	af00      	add	r7, sp, #0
 810cec0:	6078      	str	r0, [r7, #4]
 810cec2:	460b      	mov	r3, r1
 810cec4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 810cec6:	687b      	ldr	r3, [r7, #4]
 810cec8:	78fa      	ldrb	r2, [r7, #3]
 810ceca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 810cecc:	2300      	movs	r3, #0
}
 810cece:	4618      	mov	r0, r3
 810ced0:	370c      	adds	r7, #12
 810ced2:	46bd      	mov	sp, r7
 810ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ced8:	4770      	bx	lr

0810ceda <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 810ceda:	b480      	push	{r7}
 810cedc:	b083      	sub	sp, #12
 810cede:	af00      	add	r7, sp, #0
 810cee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 810cee2:	687b      	ldr	r3, [r7, #4]
 810cee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cee8:	b2db      	uxtb	r3, r3
 810ceea:	2b04      	cmp	r3, #4
 810ceec:	d006      	beq.n	810cefc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 810ceee:	687b      	ldr	r3, [r7, #4]
 810cef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cef4:	b2da      	uxtb	r2, r3
 810cef6:	687b      	ldr	r3, [r7, #4]
 810cef8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 810cefc:	687b      	ldr	r3, [r7, #4]
 810cefe:	2204      	movs	r2, #4
 810cf00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 810cf04:	2300      	movs	r3, #0
}
 810cf06:	4618      	mov	r0, r3
 810cf08:	370c      	adds	r7, #12
 810cf0a:	46bd      	mov	sp, r7
 810cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf10:	4770      	bx	lr

0810cf12 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 810cf12:	b480      	push	{r7}
 810cf14:	b083      	sub	sp, #12
 810cf16:	af00      	add	r7, sp, #0
 810cf18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 810cf1a:	687b      	ldr	r3, [r7, #4]
 810cf1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cf20:	b2db      	uxtb	r3, r3
 810cf22:	2b04      	cmp	r3, #4
 810cf24:	d106      	bne.n	810cf34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 810cf26:	687b      	ldr	r3, [r7, #4]
 810cf28:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 810cf2c:	b2da      	uxtb	r2, r3
 810cf2e:	687b      	ldr	r3, [r7, #4]
 810cf30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 810cf34:	2300      	movs	r3, #0
}
 810cf36:	4618      	mov	r0, r3
 810cf38:	370c      	adds	r7, #12
 810cf3a:	46bd      	mov	sp, r7
 810cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf40:	4770      	bx	lr

0810cf42 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 810cf42:	b580      	push	{r7, lr}
 810cf44:	b082      	sub	sp, #8
 810cf46:	af00      	add	r7, sp, #0
 810cf48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cf4a:	687b      	ldr	r3, [r7, #4]
 810cf4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cf50:	b2db      	uxtb	r3, r3
 810cf52:	2b03      	cmp	r3, #3
 810cf54:	d110      	bne.n	810cf78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 810cf56:	687b      	ldr	r3, [r7, #4]
 810cf58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810cf5c:	2b00      	cmp	r3, #0
 810cf5e:	d00b      	beq.n	810cf78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 810cf60:	687b      	ldr	r3, [r7, #4]
 810cf62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810cf66:	69db      	ldr	r3, [r3, #28]
 810cf68:	2b00      	cmp	r3, #0
 810cf6a:	d005      	beq.n	810cf78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 810cf6c:	687b      	ldr	r3, [r7, #4]
 810cf6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810cf72:	69db      	ldr	r3, [r3, #28]
 810cf74:	6878      	ldr	r0, [r7, #4]
 810cf76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 810cf78:	2300      	movs	r3, #0
}
 810cf7a:	4618      	mov	r0, r3
 810cf7c:	3708      	adds	r7, #8
 810cf7e:	46bd      	mov	sp, r7
 810cf80:	bd80      	pop	{r7, pc}

0810cf82 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 810cf82:	b580      	push	{r7, lr}
 810cf84:	b082      	sub	sp, #8
 810cf86:	af00      	add	r7, sp, #0
 810cf88:	6078      	str	r0, [r7, #4]
 810cf8a:	460b      	mov	r3, r1
 810cf8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 810cf8e:	687b      	ldr	r3, [r7, #4]
 810cf90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810cf94:	687b      	ldr	r3, [r7, #4]
 810cf96:	32ae      	adds	r2, #174	@ 0xae
 810cf98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cf9c:	2b00      	cmp	r3, #0
 810cf9e:	d101      	bne.n	810cfa4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 810cfa0:	2303      	movs	r3, #3
 810cfa2:	e01c      	b.n	810cfde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cfa4:	687b      	ldr	r3, [r7, #4]
 810cfa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cfaa:	b2db      	uxtb	r3, r3
 810cfac:	2b03      	cmp	r3, #3
 810cfae:	d115      	bne.n	810cfdc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 810cfb0:	687b      	ldr	r3, [r7, #4]
 810cfb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810cfb6:	687b      	ldr	r3, [r7, #4]
 810cfb8:	32ae      	adds	r2, #174	@ 0xae
 810cfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cfbe:	6a1b      	ldr	r3, [r3, #32]
 810cfc0:	2b00      	cmp	r3, #0
 810cfc2:	d00b      	beq.n	810cfdc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 810cfc4:	687b      	ldr	r3, [r7, #4]
 810cfc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810cfca:	687b      	ldr	r3, [r7, #4]
 810cfcc:	32ae      	adds	r2, #174	@ 0xae
 810cfce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cfd2:	6a1b      	ldr	r3, [r3, #32]
 810cfd4:	78fa      	ldrb	r2, [r7, #3]
 810cfd6:	4611      	mov	r1, r2
 810cfd8:	6878      	ldr	r0, [r7, #4]
 810cfda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 810cfdc:	2300      	movs	r3, #0
}
 810cfde:	4618      	mov	r0, r3
 810cfe0:	3708      	adds	r7, #8
 810cfe2:	46bd      	mov	sp, r7
 810cfe4:	bd80      	pop	{r7, pc}

0810cfe6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 810cfe6:	b580      	push	{r7, lr}
 810cfe8:	b082      	sub	sp, #8
 810cfea:	af00      	add	r7, sp, #0
 810cfec:	6078      	str	r0, [r7, #4]
 810cfee:	460b      	mov	r3, r1
 810cff0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 810cff2:	687b      	ldr	r3, [r7, #4]
 810cff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810cff8:	687b      	ldr	r3, [r7, #4]
 810cffa:	32ae      	adds	r2, #174	@ 0xae
 810cffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d000:	2b00      	cmp	r3, #0
 810d002:	d101      	bne.n	810d008 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 810d004:	2303      	movs	r3, #3
 810d006:	e01c      	b.n	810d042 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810d008:	687b      	ldr	r3, [r7, #4]
 810d00a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810d00e:	b2db      	uxtb	r3, r3
 810d010:	2b03      	cmp	r3, #3
 810d012:	d115      	bne.n	810d040 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 810d014:	687b      	ldr	r3, [r7, #4]
 810d016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810d01a:	687b      	ldr	r3, [r7, #4]
 810d01c:	32ae      	adds	r2, #174	@ 0xae
 810d01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d024:	2b00      	cmp	r3, #0
 810d026:	d00b      	beq.n	810d040 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 810d028:	687b      	ldr	r3, [r7, #4]
 810d02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810d02e:	687b      	ldr	r3, [r7, #4]
 810d030:	32ae      	adds	r2, #174	@ 0xae
 810d032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d038:	78fa      	ldrb	r2, [r7, #3]
 810d03a:	4611      	mov	r1, r2
 810d03c:	6878      	ldr	r0, [r7, #4]
 810d03e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 810d040:	2300      	movs	r3, #0
}
 810d042:	4618      	mov	r0, r3
 810d044:	3708      	adds	r7, #8
 810d046:	46bd      	mov	sp, r7
 810d048:	bd80      	pop	{r7, pc}

0810d04a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 810d04a:	b480      	push	{r7}
 810d04c:	b083      	sub	sp, #12
 810d04e:	af00      	add	r7, sp, #0
 810d050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 810d052:	2300      	movs	r3, #0
}
 810d054:	4618      	mov	r0, r3
 810d056:	370c      	adds	r7, #12
 810d058:	46bd      	mov	sp, r7
 810d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d05e:	4770      	bx	lr

0810d060 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 810d060:	b580      	push	{r7, lr}
 810d062:	b084      	sub	sp, #16
 810d064:	af00      	add	r7, sp, #0
 810d066:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 810d068:	2300      	movs	r3, #0
 810d06a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 810d06c:	687b      	ldr	r3, [r7, #4]
 810d06e:	2201      	movs	r2, #1
 810d070:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 810d074:	687b      	ldr	r3, [r7, #4]
 810d076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d07a:	2b00      	cmp	r3, #0
 810d07c:	d00e      	beq.n	810d09c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 810d07e:	687b      	ldr	r3, [r7, #4]
 810d080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d084:	685b      	ldr	r3, [r3, #4]
 810d086:	687a      	ldr	r2, [r7, #4]
 810d088:	6852      	ldr	r2, [r2, #4]
 810d08a:	b2d2      	uxtb	r2, r2
 810d08c:	4611      	mov	r1, r2
 810d08e:	6878      	ldr	r0, [r7, #4]
 810d090:	4798      	blx	r3
 810d092:	4603      	mov	r3, r0
 810d094:	2b00      	cmp	r3, #0
 810d096:	d001      	beq.n	810d09c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 810d098:	2303      	movs	r3, #3
 810d09a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 810d09c:	7bfb      	ldrb	r3, [r7, #15]
}
 810d09e:	4618      	mov	r0, r3
 810d0a0:	3710      	adds	r7, #16
 810d0a2:	46bd      	mov	sp, r7
 810d0a4:	bd80      	pop	{r7, pc}

0810d0a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 810d0a6:	b480      	push	{r7}
 810d0a8:	b083      	sub	sp, #12
 810d0aa:	af00      	add	r7, sp, #0
 810d0ac:	6078      	str	r0, [r7, #4]
 810d0ae:	460b      	mov	r3, r1
 810d0b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 810d0b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 810d0b4:	4618      	mov	r0, r3
 810d0b6:	370c      	adds	r7, #12
 810d0b8:	46bd      	mov	sp, r7
 810d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0be:	4770      	bx	lr

0810d0c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 810d0c0:	b480      	push	{r7}
 810d0c2:	b083      	sub	sp, #12
 810d0c4:	af00      	add	r7, sp, #0
 810d0c6:	6078      	str	r0, [r7, #4]
 810d0c8:	460b      	mov	r3, r1
 810d0ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 810d0cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 810d0ce:	4618      	mov	r0, r3
 810d0d0:	370c      	adds	r7, #12
 810d0d2:	46bd      	mov	sp, r7
 810d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0d8:	4770      	bx	lr

0810d0da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 810d0da:	b580      	push	{r7, lr}
 810d0dc:	b086      	sub	sp, #24
 810d0de:	af00      	add	r7, sp, #0
 810d0e0:	6078      	str	r0, [r7, #4]
 810d0e2:	460b      	mov	r3, r1
 810d0e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 810d0e6:	687b      	ldr	r3, [r7, #4]
 810d0e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 810d0ea:	687b      	ldr	r3, [r7, #4]
 810d0ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 810d0ee:	2300      	movs	r3, #0
 810d0f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 810d0f2:	68fb      	ldr	r3, [r7, #12]
 810d0f4:	885b      	ldrh	r3, [r3, #2]
 810d0f6:	b29b      	uxth	r3, r3
 810d0f8:	68fa      	ldr	r2, [r7, #12]
 810d0fa:	7812      	ldrb	r2, [r2, #0]
 810d0fc:	4293      	cmp	r3, r2
 810d0fe:	d91f      	bls.n	810d140 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 810d100:	68fb      	ldr	r3, [r7, #12]
 810d102:	781b      	ldrb	r3, [r3, #0]
 810d104:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 810d106:	e013      	b.n	810d130 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 810d108:	f107 030a 	add.w	r3, r7, #10
 810d10c:	4619      	mov	r1, r3
 810d10e:	6978      	ldr	r0, [r7, #20]
 810d110:	f000 f81b 	bl	810d14a <USBD_GetNextDesc>
 810d114:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 810d116:	697b      	ldr	r3, [r7, #20]
 810d118:	785b      	ldrb	r3, [r3, #1]
 810d11a:	2b05      	cmp	r3, #5
 810d11c:	d108      	bne.n	810d130 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 810d11e:	697b      	ldr	r3, [r7, #20]
 810d120:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 810d122:	693b      	ldr	r3, [r7, #16]
 810d124:	789b      	ldrb	r3, [r3, #2]
 810d126:	78fa      	ldrb	r2, [r7, #3]
 810d128:	429a      	cmp	r2, r3
 810d12a:	d008      	beq.n	810d13e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 810d12c:	2300      	movs	r3, #0
 810d12e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 810d130:	68fb      	ldr	r3, [r7, #12]
 810d132:	885b      	ldrh	r3, [r3, #2]
 810d134:	b29a      	uxth	r2, r3
 810d136:	897b      	ldrh	r3, [r7, #10]
 810d138:	429a      	cmp	r2, r3
 810d13a:	d8e5      	bhi.n	810d108 <USBD_GetEpDesc+0x2e>
 810d13c:	e000      	b.n	810d140 <USBD_GetEpDesc+0x66>
          break;
 810d13e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 810d140:	693b      	ldr	r3, [r7, #16]
}
 810d142:	4618      	mov	r0, r3
 810d144:	3718      	adds	r7, #24
 810d146:	46bd      	mov	sp, r7
 810d148:	bd80      	pop	{r7, pc}

0810d14a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 810d14a:	b480      	push	{r7}
 810d14c:	b085      	sub	sp, #20
 810d14e:	af00      	add	r7, sp, #0
 810d150:	6078      	str	r0, [r7, #4]
 810d152:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 810d154:	687b      	ldr	r3, [r7, #4]
 810d156:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 810d158:	683b      	ldr	r3, [r7, #0]
 810d15a:	881b      	ldrh	r3, [r3, #0]
 810d15c:	68fa      	ldr	r2, [r7, #12]
 810d15e:	7812      	ldrb	r2, [r2, #0]
 810d160:	4413      	add	r3, r2
 810d162:	b29a      	uxth	r2, r3
 810d164:	683b      	ldr	r3, [r7, #0]
 810d166:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 810d168:	68fb      	ldr	r3, [r7, #12]
 810d16a:	781b      	ldrb	r3, [r3, #0]
 810d16c:	461a      	mov	r2, r3
 810d16e:	687b      	ldr	r3, [r7, #4]
 810d170:	4413      	add	r3, r2
 810d172:	60fb      	str	r3, [r7, #12]

  return (pnext);
 810d174:	68fb      	ldr	r3, [r7, #12]
}
 810d176:	4618      	mov	r0, r3
 810d178:	3714      	adds	r7, #20
 810d17a:	46bd      	mov	sp, r7
 810d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d180:	4770      	bx	lr

0810d182 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 810d182:	b480      	push	{r7}
 810d184:	b087      	sub	sp, #28
 810d186:	af00      	add	r7, sp, #0
 810d188:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 810d18a:	687b      	ldr	r3, [r7, #4]
 810d18c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 810d18e:	697b      	ldr	r3, [r7, #20]
 810d190:	781b      	ldrb	r3, [r3, #0]
 810d192:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 810d194:	697b      	ldr	r3, [r7, #20]
 810d196:	3301      	adds	r3, #1
 810d198:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 810d19a:	697b      	ldr	r3, [r7, #20]
 810d19c:	781b      	ldrb	r3, [r3, #0]
 810d19e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 810d1a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 810d1a4:	021b      	lsls	r3, r3, #8
 810d1a6:	b21a      	sxth	r2, r3
 810d1a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810d1ac:	4313      	orrs	r3, r2
 810d1ae:	b21b      	sxth	r3, r3
 810d1b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 810d1b2:	89fb      	ldrh	r3, [r7, #14]
}
 810d1b4:	4618      	mov	r0, r3
 810d1b6:	371c      	adds	r7, #28
 810d1b8:	46bd      	mov	sp, r7
 810d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1be:	4770      	bx	lr

0810d1c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810d1c0:	b580      	push	{r7, lr}
 810d1c2:	b084      	sub	sp, #16
 810d1c4:	af00      	add	r7, sp, #0
 810d1c6:	6078      	str	r0, [r7, #4]
 810d1c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 810d1ca:	2300      	movs	r3, #0
 810d1cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810d1ce:	683b      	ldr	r3, [r7, #0]
 810d1d0:	781b      	ldrb	r3, [r3, #0]
 810d1d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 810d1d6:	2b40      	cmp	r3, #64	@ 0x40
 810d1d8:	d005      	beq.n	810d1e6 <USBD_StdDevReq+0x26>
 810d1da:	2b40      	cmp	r3, #64	@ 0x40
 810d1dc:	d857      	bhi.n	810d28e <USBD_StdDevReq+0xce>
 810d1de:	2b00      	cmp	r3, #0
 810d1e0:	d00f      	beq.n	810d202 <USBD_StdDevReq+0x42>
 810d1e2:	2b20      	cmp	r3, #32
 810d1e4:	d153      	bne.n	810d28e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 810d1e6:	687b      	ldr	r3, [r7, #4]
 810d1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810d1ec:	687b      	ldr	r3, [r7, #4]
 810d1ee:	32ae      	adds	r2, #174	@ 0xae
 810d1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d1f4:	689b      	ldr	r3, [r3, #8]
 810d1f6:	6839      	ldr	r1, [r7, #0]
 810d1f8:	6878      	ldr	r0, [r7, #4]
 810d1fa:	4798      	blx	r3
 810d1fc:	4603      	mov	r3, r0
 810d1fe:	73fb      	strb	r3, [r7, #15]
      break;
 810d200:	e04a      	b.n	810d298 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 810d202:	683b      	ldr	r3, [r7, #0]
 810d204:	785b      	ldrb	r3, [r3, #1]
 810d206:	2b09      	cmp	r3, #9
 810d208:	d83b      	bhi.n	810d282 <USBD_StdDevReq+0xc2>
 810d20a:	a201      	add	r2, pc, #4	@ (adr r2, 810d210 <USBD_StdDevReq+0x50>)
 810d20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d210:	0810d265 	.word	0x0810d265
 810d214:	0810d279 	.word	0x0810d279
 810d218:	0810d283 	.word	0x0810d283
 810d21c:	0810d26f 	.word	0x0810d26f
 810d220:	0810d283 	.word	0x0810d283
 810d224:	0810d243 	.word	0x0810d243
 810d228:	0810d239 	.word	0x0810d239
 810d22c:	0810d283 	.word	0x0810d283
 810d230:	0810d25b 	.word	0x0810d25b
 810d234:	0810d24d 	.word	0x0810d24d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 810d238:	6839      	ldr	r1, [r7, #0]
 810d23a:	6878      	ldr	r0, [r7, #4]
 810d23c:	f000 fa3c 	bl	810d6b8 <USBD_GetDescriptor>
          break;
 810d240:	e024      	b.n	810d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 810d242:	6839      	ldr	r1, [r7, #0]
 810d244:	6878      	ldr	r0, [r7, #4]
 810d246:	f000 fbcb 	bl	810d9e0 <USBD_SetAddress>
          break;
 810d24a:	e01f      	b.n	810d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 810d24c:	6839      	ldr	r1, [r7, #0]
 810d24e:	6878      	ldr	r0, [r7, #4]
 810d250:	f000 fc0a 	bl	810da68 <USBD_SetConfig>
 810d254:	4603      	mov	r3, r0
 810d256:	73fb      	strb	r3, [r7, #15]
          break;
 810d258:	e018      	b.n	810d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 810d25a:	6839      	ldr	r1, [r7, #0]
 810d25c:	6878      	ldr	r0, [r7, #4]
 810d25e:	f000 fcad 	bl	810dbbc <USBD_GetConfig>
          break;
 810d262:	e013      	b.n	810d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 810d264:	6839      	ldr	r1, [r7, #0]
 810d266:	6878      	ldr	r0, [r7, #4]
 810d268:	f000 fcde 	bl	810dc28 <USBD_GetStatus>
          break;
 810d26c:	e00e      	b.n	810d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 810d26e:	6839      	ldr	r1, [r7, #0]
 810d270:	6878      	ldr	r0, [r7, #4]
 810d272:	f000 fd0d 	bl	810dc90 <USBD_SetFeature>
          break;
 810d276:	e009      	b.n	810d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 810d278:	6839      	ldr	r1, [r7, #0]
 810d27a:	6878      	ldr	r0, [r7, #4]
 810d27c:	f000 fd31 	bl	810dce2 <USBD_ClrFeature>
          break;
 810d280:	e004      	b.n	810d28c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 810d282:	6839      	ldr	r1, [r7, #0]
 810d284:	6878      	ldr	r0, [r7, #4]
 810d286:	f000 fd88 	bl	810dd9a <USBD_CtlError>
          break;
 810d28a:	bf00      	nop
      }
      break;
 810d28c:	e004      	b.n	810d298 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 810d28e:	6839      	ldr	r1, [r7, #0]
 810d290:	6878      	ldr	r0, [r7, #4]
 810d292:	f000 fd82 	bl	810dd9a <USBD_CtlError>
      break;
 810d296:	bf00      	nop
  }

  return ret;
 810d298:	7bfb      	ldrb	r3, [r7, #15]
}
 810d29a:	4618      	mov	r0, r3
 810d29c:	3710      	adds	r7, #16
 810d29e:	46bd      	mov	sp, r7
 810d2a0:	bd80      	pop	{r7, pc}
 810d2a2:	bf00      	nop

0810d2a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810d2a4:	b580      	push	{r7, lr}
 810d2a6:	b084      	sub	sp, #16
 810d2a8:	af00      	add	r7, sp, #0
 810d2aa:	6078      	str	r0, [r7, #4]
 810d2ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 810d2ae:	2300      	movs	r3, #0
 810d2b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810d2b2:	683b      	ldr	r3, [r7, #0]
 810d2b4:	781b      	ldrb	r3, [r3, #0]
 810d2b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 810d2ba:	2b40      	cmp	r3, #64	@ 0x40
 810d2bc:	d005      	beq.n	810d2ca <USBD_StdItfReq+0x26>
 810d2be:	2b40      	cmp	r3, #64	@ 0x40
 810d2c0:	d852      	bhi.n	810d368 <USBD_StdItfReq+0xc4>
 810d2c2:	2b00      	cmp	r3, #0
 810d2c4:	d001      	beq.n	810d2ca <USBD_StdItfReq+0x26>
 810d2c6:	2b20      	cmp	r3, #32
 810d2c8:	d14e      	bne.n	810d368 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 810d2ca:	687b      	ldr	r3, [r7, #4]
 810d2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810d2d0:	b2db      	uxtb	r3, r3
 810d2d2:	3b01      	subs	r3, #1
 810d2d4:	2b02      	cmp	r3, #2
 810d2d6:	d840      	bhi.n	810d35a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 810d2d8:	683b      	ldr	r3, [r7, #0]
 810d2da:	889b      	ldrh	r3, [r3, #4]
 810d2dc:	b2db      	uxtb	r3, r3
 810d2de:	2b01      	cmp	r3, #1
 810d2e0:	d836      	bhi.n	810d350 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 810d2e2:	683b      	ldr	r3, [r7, #0]
 810d2e4:	889b      	ldrh	r3, [r3, #4]
 810d2e6:	b2db      	uxtb	r3, r3
 810d2e8:	4619      	mov	r1, r3
 810d2ea:	6878      	ldr	r0, [r7, #4]
 810d2ec:	f7ff fedb 	bl	810d0a6 <USBD_CoreFindIF>
 810d2f0:	4603      	mov	r3, r0
 810d2f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 810d2f4:	7bbb      	ldrb	r3, [r7, #14]
 810d2f6:	2bff      	cmp	r3, #255	@ 0xff
 810d2f8:	d01d      	beq.n	810d336 <USBD_StdItfReq+0x92>
 810d2fa:	7bbb      	ldrb	r3, [r7, #14]
 810d2fc:	2b00      	cmp	r3, #0
 810d2fe:	d11a      	bne.n	810d336 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 810d300:	7bba      	ldrb	r2, [r7, #14]
 810d302:	687b      	ldr	r3, [r7, #4]
 810d304:	32ae      	adds	r2, #174	@ 0xae
 810d306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d30a:	689b      	ldr	r3, [r3, #8]
 810d30c:	2b00      	cmp	r3, #0
 810d30e:	d00f      	beq.n	810d330 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 810d310:	7bba      	ldrb	r2, [r7, #14]
 810d312:	687b      	ldr	r3, [r7, #4]
 810d314:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 810d318:	7bba      	ldrb	r2, [r7, #14]
 810d31a:	687b      	ldr	r3, [r7, #4]
 810d31c:	32ae      	adds	r2, #174	@ 0xae
 810d31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d322:	689b      	ldr	r3, [r3, #8]
 810d324:	6839      	ldr	r1, [r7, #0]
 810d326:	6878      	ldr	r0, [r7, #4]
 810d328:	4798      	blx	r3
 810d32a:	4603      	mov	r3, r0
 810d32c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 810d32e:	e004      	b.n	810d33a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 810d330:	2303      	movs	r3, #3
 810d332:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 810d334:	e001      	b.n	810d33a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 810d336:	2303      	movs	r3, #3
 810d338:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 810d33a:	683b      	ldr	r3, [r7, #0]
 810d33c:	88db      	ldrh	r3, [r3, #6]
 810d33e:	2b00      	cmp	r3, #0
 810d340:	d110      	bne.n	810d364 <USBD_StdItfReq+0xc0>
 810d342:	7bfb      	ldrb	r3, [r7, #15]
 810d344:	2b00      	cmp	r3, #0
 810d346:	d10d      	bne.n	810d364 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 810d348:	6878      	ldr	r0, [r7, #4]
 810d34a:	f000 fdfd 	bl	810df48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 810d34e:	e009      	b.n	810d364 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 810d350:	6839      	ldr	r1, [r7, #0]
 810d352:	6878      	ldr	r0, [r7, #4]
 810d354:	f000 fd21 	bl	810dd9a <USBD_CtlError>
          break;
 810d358:	e004      	b.n	810d364 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 810d35a:	6839      	ldr	r1, [r7, #0]
 810d35c:	6878      	ldr	r0, [r7, #4]
 810d35e:	f000 fd1c 	bl	810dd9a <USBD_CtlError>
          break;
 810d362:	e000      	b.n	810d366 <USBD_StdItfReq+0xc2>
          break;
 810d364:	bf00      	nop
      }
      break;
 810d366:	e004      	b.n	810d372 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 810d368:	6839      	ldr	r1, [r7, #0]
 810d36a:	6878      	ldr	r0, [r7, #4]
 810d36c:	f000 fd15 	bl	810dd9a <USBD_CtlError>
      break;
 810d370:	bf00      	nop
  }

  return ret;
 810d372:	7bfb      	ldrb	r3, [r7, #15]
}
 810d374:	4618      	mov	r0, r3
 810d376:	3710      	adds	r7, #16
 810d378:	46bd      	mov	sp, r7
 810d37a:	bd80      	pop	{r7, pc}

0810d37c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810d37c:	b580      	push	{r7, lr}
 810d37e:	b084      	sub	sp, #16
 810d380:	af00      	add	r7, sp, #0
 810d382:	6078      	str	r0, [r7, #4]
 810d384:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 810d386:	2300      	movs	r3, #0
 810d388:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 810d38a:	683b      	ldr	r3, [r7, #0]
 810d38c:	889b      	ldrh	r3, [r3, #4]
 810d38e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810d390:	683b      	ldr	r3, [r7, #0]
 810d392:	781b      	ldrb	r3, [r3, #0]
 810d394:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 810d398:	2b40      	cmp	r3, #64	@ 0x40
 810d39a:	d007      	beq.n	810d3ac <USBD_StdEPReq+0x30>
 810d39c:	2b40      	cmp	r3, #64	@ 0x40
 810d39e:	f200 817f 	bhi.w	810d6a0 <USBD_StdEPReq+0x324>
 810d3a2:	2b00      	cmp	r3, #0
 810d3a4:	d02a      	beq.n	810d3fc <USBD_StdEPReq+0x80>
 810d3a6:	2b20      	cmp	r3, #32
 810d3a8:	f040 817a 	bne.w	810d6a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 810d3ac:	7bbb      	ldrb	r3, [r7, #14]
 810d3ae:	4619      	mov	r1, r3
 810d3b0:	6878      	ldr	r0, [r7, #4]
 810d3b2:	f7ff fe85 	bl	810d0c0 <USBD_CoreFindEP>
 810d3b6:	4603      	mov	r3, r0
 810d3b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 810d3ba:	7b7b      	ldrb	r3, [r7, #13]
 810d3bc:	2bff      	cmp	r3, #255	@ 0xff
 810d3be:	f000 8174 	beq.w	810d6aa <USBD_StdEPReq+0x32e>
 810d3c2:	7b7b      	ldrb	r3, [r7, #13]
 810d3c4:	2b00      	cmp	r3, #0
 810d3c6:	f040 8170 	bne.w	810d6aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 810d3ca:	7b7a      	ldrb	r2, [r7, #13]
 810d3cc:	687b      	ldr	r3, [r7, #4]
 810d3ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 810d3d2:	7b7a      	ldrb	r2, [r7, #13]
 810d3d4:	687b      	ldr	r3, [r7, #4]
 810d3d6:	32ae      	adds	r2, #174	@ 0xae
 810d3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d3dc:	689b      	ldr	r3, [r3, #8]
 810d3de:	2b00      	cmp	r3, #0
 810d3e0:	f000 8163 	beq.w	810d6aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 810d3e4:	7b7a      	ldrb	r2, [r7, #13]
 810d3e6:	687b      	ldr	r3, [r7, #4]
 810d3e8:	32ae      	adds	r2, #174	@ 0xae
 810d3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d3ee:	689b      	ldr	r3, [r3, #8]
 810d3f0:	6839      	ldr	r1, [r7, #0]
 810d3f2:	6878      	ldr	r0, [r7, #4]
 810d3f4:	4798      	blx	r3
 810d3f6:	4603      	mov	r3, r0
 810d3f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 810d3fa:	e156      	b.n	810d6aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 810d3fc:	683b      	ldr	r3, [r7, #0]
 810d3fe:	785b      	ldrb	r3, [r3, #1]
 810d400:	2b03      	cmp	r3, #3
 810d402:	d008      	beq.n	810d416 <USBD_StdEPReq+0x9a>
 810d404:	2b03      	cmp	r3, #3
 810d406:	f300 8145 	bgt.w	810d694 <USBD_StdEPReq+0x318>
 810d40a:	2b00      	cmp	r3, #0
 810d40c:	f000 809b 	beq.w	810d546 <USBD_StdEPReq+0x1ca>
 810d410:	2b01      	cmp	r3, #1
 810d412:	d03c      	beq.n	810d48e <USBD_StdEPReq+0x112>
 810d414:	e13e      	b.n	810d694 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 810d416:	687b      	ldr	r3, [r7, #4]
 810d418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810d41c:	b2db      	uxtb	r3, r3
 810d41e:	2b02      	cmp	r3, #2
 810d420:	d002      	beq.n	810d428 <USBD_StdEPReq+0xac>
 810d422:	2b03      	cmp	r3, #3
 810d424:	d016      	beq.n	810d454 <USBD_StdEPReq+0xd8>
 810d426:	e02c      	b.n	810d482 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 810d428:	7bbb      	ldrb	r3, [r7, #14]
 810d42a:	2b00      	cmp	r3, #0
 810d42c:	d00d      	beq.n	810d44a <USBD_StdEPReq+0xce>
 810d42e:	7bbb      	ldrb	r3, [r7, #14]
 810d430:	2b80      	cmp	r3, #128	@ 0x80
 810d432:	d00a      	beq.n	810d44a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 810d434:	7bbb      	ldrb	r3, [r7, #14]
 810d436:	4619      	mov	r1, r3
 810d438:	6878      	ldr	r0, [r7, #4]
 810d43a:	f001 fa2f 	bl	810e89c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 810d43e:	2180      	movs	r1, #128	@ 0x80
 810d440:	6878      	ldr	r0, [r7, #4]
 810d442:	f001 fa2b 	bl	810e89c <USBD_LL_StallEP>
 810d446:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 810d448:	e020      	b.n	810d48c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 810d44a:	6839      	ldr	r1, [r7, #0]
 810d44c:	6878      	ldr	r0, [r7, #4]
 810d44e:	f000 fca4 	bl	810dd9a <USBD_CtlError>
              break;
 810d452:	e01b      	b.n	810d48c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 810d454:	683b      	ldr	r3, [r7, #0]
 810d456:	885b      	ldrh	r3, [r3, #2]
 810d458:	2b00      	cmp	r3, #0
 810d45a:	d10e      	bne.n	810d47a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 810d45c:	7bbb      	ldrb	r3, [r7, #14]
 810d45e:	2b00      	cmp	r3, #0
 810d460:	d00b      	beq.n	810d47a <USBD_StdEPReq+0xfe>
 810d462:	7bbb      	ldrb	r3, [r7, #14]
 810d464:	2b80      	cmp	r3, #128	@ 0x80
 810d466:	d008      	beq.n	810d47a <USBD_StdEPReq+0xfe>
 810d468:	683b      	ldr	r3, [r7, #0]
 810d46a:	88db      	ldrh	r3, [r3, #6]
 810d46c:	2b00      	cmp	r3, #0
 810d46e:	d104      	bne.n	810d47a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 810d470:	7bbb      	ldrb	r3, [r7, #14]
 810d472:	4619      	mov	r1, r3
 810d474:	6878      	ldr	r0, [r7, #4]
 810d476:	f001 fa11 	bl	810e89c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 810d47a:	6878      	ldr	r0, [r7, #4]
 810d47c:	f000 fd64 	bl	810df48 <USBD_CtlSendStatus>

              break;
 810d480:	e004      	b.n	810d48c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 810d482:	6839      	ldr	r1, [r7, #0]
 810d484:	6878      	ldr	r0, [r7, #4]
 810d486:	f000 fc88 	bl	810dd9a <USBD_CtlError>
              break;
 810d48a:	bf00      	nop
          }
          break;
 810d48c:	e107      	b.n	810d69e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 810d48e:	687b      	ldr	r3, [r7, #4]
 810d490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810d494:	b2db      	uxtb	r3, r3
 810d496:	2b02      	cmp	r3, #2
 810d498:	d002      	beq.n	810d4a0 <USBD_StdEPReq+0x124>
 810d49a:	2b03      	cmp	r3, #3
 810d49c:	d016      	beq.n	810d4cc <USBD_StdEPReq+0x150>
 810d49e:	e04b      	b.n	810d538 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 810d4a0:	7bbb      	ldrb	r3, [r7, #14]
 810d4a2:	2b00      	cmp	r3, #0
 810d4a4:	d00d      	beq.n	810d4c2 <USBD_StdEPReq+0x146>
 810d4a6:	7bbb      	ldrb	r3, [r7, #14]
 810d4a8:	2b80      	cmp	r3, #128	@ 0x80
 810d4aa:	d00a      	beq.n	810d4c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 810d4ac:	7bbb      	ldrb	r3, [r7, #14]
 810d4ae:	4619      	mov	r1, r3
 810d4b0:	6878      	ldr	r0, [r7, #4]
 810d4b2:	f001 f9f3 	bl	810e89c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 810d4b6:	2180      	movs	r1, #128	@ 0x80
 810d4b8:	6878      	ldr	r0, [r7, #4]
 810d4ba:	f001 f9ef 	bl	810e89c <USBD_LL_StallEP>
 810d4be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 810d4c0:	e040      	b.n	810d544 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 810d4c2:	6839      	ldr	r1, [r7, #0]
 810d4c4:	6878      	ldr	r0, [r7, #4]
 810d4c6:	f000 fc68 	bl	810dd9a <USBD_CtlError>
              break;
 810d4ca:	e03b      	b.n	810d544 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 810d4cc:	683b      	ldr	r3, [r7, #0]
 810d4ce:	885b      	ldrh	r3, [r3, #2]
 810d4d0:	2b00      	cmp	r3, #0
 810d4d2:	d136      	bne.n	810d542 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 810d4d4:	7bbb      	ldrb	r3, [r7, #14]
 810d4d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810d4da:	2b00      	cmp	r3, #0
 810d4dc:	d004      	beq.n	810d4e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 810d4de:	7bbb      	ldrb	r3, [r7, #14]
 810d4e0:	4619      	mov	r1, r3
 810d4e2:	6878      	ldr	r0, [r7, #4]
 810d4e4:	f001 f9f9 	bl	810e8da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 810d4e8:	6878      	ldr	r0, [r7, #4]
 810d4ea:	f000 fd2d 	bl	810df48 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 810d4ee:	7bbb      	ldrb	r3, [r7, #14]
 810d4f0:	4619      	mov	r1, r3
 810d4f2:	6878      	ldr	r0, [r7, #4]
 810d4f4:	f7ff fde4 	bl	810d0c0 <USBD_CoreFindEP>
 810d4f8:	4603      	mov	r3, r0
 810d4fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 810d4fc:	7b7b      	ldrb	r3, [r7, #13]
 810d4fe:	2bff      	cmp	r3, #255	@ 0xff
 810d500:	d01f      	beq.n	810d542 <USBD_StdEPReq+0x1c6>
 810d502:	7b7b      	ldrb	r3, [r7, #13]
 810d504:	2b00      	cmp	r3, #0
 810d506:	d11c      	bne.n	810d542 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 810d508:	7b7a      	ldrb	r2, [r7, #13]
 810d50a:	687b      	ldr	r3, [r7, #4]
 810d50c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 810d510:	7b7a      	ldrb	r2, [r7, #13]
 810d512:	687b      	ldr	r3, [r7, #4]
 810d514:	32ae      	adds	r2, #174	@ 0xae
 810d516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d51a:	689b      	ldr	r3, [r3, #8]
 810d51c:	2b00      	cmp	r3, #0
 810d51e:	d010      	beq.n	810d542 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 810d520:	7b7a      	ldrb	r2, [r7, #13]
 810d522:	687b      	ldr	r3, [r7, #4]
 810d524:	32ae      	adds	r2, #174	@ 0xae
 810d526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d52a:	689b      	ldr	r3, [r3, #8]
 810d52c:	6839      	ldr	r1, [r7, #0]
 810d52e:	6878      	ldr	r0, [r7, #4]
 810d530:	4798      	blx	r3
 810d532:	4603      	mov	r3, r0
 810d534:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 810d536:	e004      	b.n	810d542 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 810d538:	6839      	ldr	r1, [r7, #0]
 810d53a:	6878      	ldr	r0, [r7, #4]
 810d53c:	f000 fc2d 	bl	810dd9a <USBD_CtlError>
              break;
 810d540:	e000      	b.n	810d544 <USBD_StdEPReq+0x1c8>
              break;
 810d542:	bf00      	nop
          }
          break;
 810d544:	e0ab      	b.n	810d69e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 810d546:	687b      	ldr	r3, [r7, #4]
 810d548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810d54c:	b2db      	uxtb	r3, r3
 810d54e:	2b02      	cmp	r3, #2
 810d550:	d002      	beq.n	810d558 <USBD_StdEPReq+0x1dc>
 810d552:	2b03      	cmp	r3, #3
 810d554:	d032      	beq.n	810d5bc <USBD_StdEPReq+0x240>
 810d556:	e097      	b.n	810d688 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 810d558:	7bbb      	ldrb	r3, [r7, #14]
 810d55a:	2b00      	cmp	r3, #0
 810d55c:	d007      	beq.n	810d56e <USBD_StdEPReq+0x1f2>
 810d55e:	7bbb      	ldrb	r3, [r7, #14]
 810d560:	2b80      	cmp	r3, #128	@ 0x80
 810d562:	d004      	beq.n	810d56e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 810d564:	6839      	ldr	r1, [r7, #0]
 810d566:	6878      	ldr	r0, [r7, #4]
 810d568:	f000 fc17 	bl	810dd9a <USBD_CtlError>
                break;
 810d56c:	e091      	b.n	810d692 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 810d56e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810d572:	2b00      	cmp	r3, #0
 810d574:	da0b      	bge.n	810d58e <USBD_StdEPReq+0x212>
 810d576:	7bbb      	ldrb	r3, [r7, #14]
 810d578:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 810d57c:	4613      	mov	r3, r2
 810d57e:	009b      	lsls	r3, r3, #2
 810d580:	4413      	add	r3, r2
 810d582:	009b      	lsls	r3, r3, #2
 810d584:	3310      	adds	r3, #16
 810d586:	687a      	ldr	r2, [r7, #4]
 810d588:	4413      	add	r3, r2
 810d58a:	3304      	adds	r3, #4
 810d58c:	e00b      	b.n	810d5a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 810d58e:	7bbb      	ldrb	r3, [r7, #14]
 810d590:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 810d594:	4613      	mov	r3, r2
 810d596:	009b      	lsls	r3, r3, #2
 810d598:	4413      	add	r3, r2
 810d59a:	009b      	lsls	r3, r3, #2
 810d59c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 810d5a0:	687a      	ldr	r2, [r7, #4]
 810d5a2:	4413      	add	r3, r2
 810d5a4:	3304      	adds	r3, #4
 810d5a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 810d5a8:	68bb      	ldr	r3, [r7, #8]
 810d5aa:	2200      	movs	r2, #0
 810d5ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 810d5ae:	68bb      	ldr	r3, [r7, #8]
 810d5b0:	2202      	movs	r2, #2
 810d5b2:	4619      	mov	r1, r3
 810d5b4:	6878      	ldr	r0, [r7, #4]
 810d5b6:	f000 fc6d 	bl	810de94 <USBD_CtlSendData>
              break;
 810d5ba:	e06a      	b.n	810d692 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 810d5bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810d5c0:	2b00      	cmp	r3, #0
 810d5c2:	da11      	bge.n	810d5e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 810d5c4:	7bbb      	ldrb	r3, [r7, #14]
 810d5c6:	f003 020f 	and.w	r2, r3, #15
 810d5ca:	6879      	ldr	r1, [r7, #4]
 810d5cc:	4613      	mov	r3, r2
 810d5ce:	009b      	lsls	r3, r3, #2
 810d5d0:	4413      	add	r3, r2
 810d5d2:	009b      	lsls	r3, r3, #2
 810d5d4:	440b      	add	r3, r1
 810d5d6:	3324      	adds	r3, #36	@ 0x24
 810d5d8:	881b      	ldrh	r3, [r3, #0]
 810d5da:	2b00      	cmp	r3, #0
 810d5dc:	d117      	bne.n	810d60e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 810d5de:	6839      	ldr	r1, [r7, #0]
 810d5e0:	6878      	ldr	r0, [r7, #4]
 810d5e2:	f000 fbda 	bl	810dd9a <USBD_CtlError>
                  break;
 810d5e6:	e054      	b.n	810d692 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 810d5e8:	7bbb      	ldrb	r3, [r7, #14]
 810d5ea:	f003 020f 	and.w	r2, r3, #15
 810d5ee:	6879      	ldr	r1, [r7, #4]
 810d5f0:	4613      	mov	r3, r2
 810d5f2:	009b      	lsls	r3, r3, #2
 810d5f4:	4413      	add	r3, r2
 810d5f6:	009b      	lsls	r3, r3, #2
 810d5f8:	440b      	add	r3, r1
 810d5fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 810d5fe:	881b      	ldrh	r3, [r3, #0]
 810d600:	2b00      	cmp	r3, #0
 810d602:	d104      	bne.n	810d60e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 810d604:	6839      	ldr	r1, [r7, #0]
 810d606:	6878      	ldr	r0, [r7, #4]
 810d608:	f000 fbc7 	bl	810dd9a <USBD_CtlError>
                  break;
 810d60c:	e041      	b.n	810d692 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 810d60e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810d612:	2b00      	cmp	r3, #0
 810d614:	da0b      	bge.n	810d62e <USBD_StdEPReq+0x2b2>
 810d616:	7bbb      	ldrb	r3, [r7, #14]
 810d618:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 810d61c:	4613      	mov	r3, r2
 810d61e:	009b      	lsls	r3, r3, #2
 810d620:	4413      	add	r3, r2
 810d622:	009b      	lsls	r3, r3, #2
 810d624:	3310      	adds	r3, #16
 810d626:	687a      	ldr	r2, [r7, #4]
 810d628:	4413      	add	r3, r2
 810d62a:	3304      	adds	r3, #4
 810d62c:	e00b      	b.n	810d646 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 810d62e:	7bbb      	ldrb	r3, [r7, #14]
 810d630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 810d634:	4613      	mov	r3, r2
 810d636:	009b      	lsls	r3, r3, #2
 810d638:	4413      	add	r3, r2
 810d63a:	009b      	lsls	r3, r3, #2
 810d63c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 810d640:	687a      	ldr	r2, [r7, #4]
 810d642:	4413      	add	r3, r2
 810d644:	3304      	adds	r3, #4
 810d646:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 810d648:	7bbb      	ldrb	r3, [r7, #14]
 810d64a:	2b00      	cmp	r3, #0
 810d64c:	d002      	beq.n	810d654 <USBD_StdEPReq+0x2d8>
 810d64e:	7bbb      	ldrb	r3, [r7, #14]
 810d650:	2b80      	cmp	r3, #128	@ 0x80
 810d652:	d103      	bne.n	810d65c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 810d654:	68bb      	ldr	r3, [r7, #8]
 810d656:	2200      	movs	r2, #0
 810d658:	601a      	str	r2, [r3, #0]
 810d65a:	e00e      	b.n	810d67a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 810d65c:	7bbb      	ldrb	r3, [r7, #14]
 810d65e:	4619      	mov	r1, r3
 810d660:	6878      	ldr	r0, [r7, #4]
 810d662:	f001 f959 	bl	810e918 <USBD_LL_IsStallEP>
 810d666:	4603      	mov	r3, r0
 810d668:	2b00      	cmp	r3, #0
 810d66a:	d003      	beq.n	810d674 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 810d66c:	68bb      	ldr	r3, [r7, #8]
 810d66e:	2201      	movs	r2, #1
 810d670:	601a      	str	r2, [r3, #0]
 810d672:	e002      	b.n	810d67a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 810d674:	68bb      	ldr	r3, [r7, #8]
 810d676:	2200      	movs	r2, #0
 810d678:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 810d67a:	68bb      	ldr	r3, [r7, #8]
 810d67c:	2202      	movs	r2, #2
 810d67e:	4619      	mov	r1, r3
 810d680:	6878      	ldr	r0, [r7, #4]
 810d682:	f000 fc07 	bl	810de94 <USBD_CtlSendData>
              break;
 810d686:	e004      	b.n	810d692 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 810d688:	6839      	ldr	r1, [r7, #0]
 810d68a:	6878      	ldr	r0, [r7, #4]
 810d68c:	f000 fb85 	bl	810dd9a <USBD_CtlError>
              break;
 810d690:	bf00      	nop
          }
          break;
 810d692:	e004      	b.n	810d69e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 810d694:	6839      	ldr	r1, [r7, #0]
 810d696:	6878      	ldr	r0, [r7, #4]
 810d698:	f000 fb7f 	bl	810dd9a <USBD_CtlError>
          break;
 810d69c:	bf00      	nop
      }
      break;
 810d69e:	e005      	b.n	810d6ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 810d6a0:	6839      	ldr	r1, [r7, #0]
 810d6a2:	6878      	ldr	r0, [r7, #4]
 810d6a4:	f000 fb79 	bl	810dd9a <USBD_CtlError>
      break;
 810d6a8:	e000      	b.n	810d6ac <USBD_StdEPReq+0x330>
      break;
 810d6aa:	bf00      	nop
  }

  return ret;
 810d6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 810d6ae:	4618      	mov	r0, r3
 810d6b0:	3710      	adds	r7, #16
 810d6b2:	46bd      	mov	sp, r7
 810d6b4:	bd80      	pop	{r7, pc}
	...

0810d6b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810d6b8:	b580      	push	{r7, lr}
 810d6ba:	b084      	sub	sp, #16
 810d6bc:	af00      	add	r7, sp, #0
 810d6be:	6078      	str	r0, [r7, #4]
 810d6c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 810d6c2:	2300      	movs	r3, #0
 810d6c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 810d6c6:	2300      	movs	r3, #0
 810d6c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 810d6ca:	2300      	movs	r3, #0
 810d6cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 810d6ce:	683b      	ldr	r3, [r7, #0]
 810d6d0:	885b      	ldrh	r3, [r3, #2]
 810d6d2:	0a1b      	lsrs	r3, r3, #8
 810d6d4:	b29b      	uxth	r3, r3
 810d6d6:	3b01      	subs	r3, #1
 810d6d8:	2b0e      	cmp	r3, #14
 810d6da:	f200 8152 	bhi.w	810d982 <USBD_GetDescriptor+0x2ca>
 810d6de:	a201      	add	r2, pc, #4	@ (adr r2, 810d6e4 <USBD_GetDescriptor+0x2c>)
 810d6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d6e4:	0810d755 	.word	0x0810d755
 810d6e8:	0810d76d 	.word	0x0810d76d
 810d6ec:	0810d7ad 	.word	0x0810d7ad
 810d6f0:	0810d983 	.word	0x0810d983
 810d6f4:	0810d983 	.word	0x0810d983
 810d6f8:	0810d923 	.word	0x0810d923
 810d6fc:	0810d94f 	.word	0x0810d94f
 810d700:	0810d983 	.word	0x0810d983
 810d704:	0810d983 	.word	0x0810d983
 810d708:	0810d983 	.word	0x0810d983
 810d70c:	0810d983 	.word	0x0810d983
 810d710:	0810d983 	.word	0x0810d983
 810d714:	0810d983 	.word	0x0810d983
 810d718:	0810d983 	.word	0x0810d983
 810d71c:	0810d721 	.word	0x0810d721
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 810d720:	687b      	ldr	r3, [r7, #4]
 810d722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d726:	69db      	ldr	r3, [r3, #28]
 810d728:	2b00      	cmp	r3, #0
 810d72a:	d00b      	beq.n	810d744 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 810d72c:	687b      	ldr	r3, [r7, #4]
 810d72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d732:	69db      	ldr	r3, [r3, #28]
 810d734:	687a      	ldr	r2, [r7, #4]
 810d736:	7c12      	ldrb	r2, [r2, #16]
 810d738:	f107 0108 	add.w	r1, r7, #8
 810d73c:	4610      	mov	r0, r2
 810d73e:	4798      	blx	r3
 810d740:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 810d742:	e126      	b.n	810d992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 810d744:	6839      	ldr	r1, [r7, #0]
 810d746:	6878      	ldr	r0, [r7, #4]
 810d748:	f000 fb27 	bl	810dd9a <USBD_CtlError>
        err++;
 810d74c:	7afb      	ldrb	r3, [r7, #11]
 810d74e:	3301      	adds	r3, #1
 810d750:	72fb      	strb	r3, [r7, #11]
      break;
 810d752:	e11e      	b.n	810d992 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 810d754:	687b      	ldr	r3, [r7, #4]
 810d756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d75a:	681b      	ldr	r3, [r3, #0]
 810d75c:	687a      	ldr	r2, [r7, #4]
 810d75e:	7c12      	ldrb	r2, [r2, #16]
 810d760:	f107 0108 	add.w	r1, r7, #8
 810d764:	4610      	mov	r0, r2
 810d766:	4798      	blx	r3
 810d768:	60f8      	str	r0, [r7, #12]
      break;
 810d76a:	e112      	b.n	810d992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 810d76c:	687b      	ldr	r3, [r7, #4]
 810d76e:	7c1b      	ldrb	r3, [r3, #16]
 810d770:	2b00      	cmp	r3, #0
 810d772:	d10d      	bne.n	810d790 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 810d774:	687b      	ldr	r3, [r7, #4]
 810d776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d77c:	f107 0208 	add.w	r2, r7, #8
 810d780:	4610      	mov	r0, r2
 810d782:	4798      	blx	r3
 810d784:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 810d786:	68fb      	ldr	r3, [r7, #12]
 810d788:	3301      	adds	r3, #1
 810d78a:	2202      	movs	r2, #2
 810d78c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 810d78e:	e100      	b.n	810d992 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 810d790:	687b      	ldr	r3, [r7, #4]
 810d792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d798:	f107 0208 	add.w	r2, r7, #8
 810d79c:	4610      	mov	r0, r2
 810d79e:	4798      	blx	r3
 810d7a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 810d7a2:	68fb      	ldr	r3, [r7, #12]
 810d7a4:	3301      	adds	r3, #1
 810d7a6:	2202      	movs	r2, #2
 810d7a8:	701a      	strb	r2, [r3, #0]
      break;
 810d7aa:	e0f2      	b.n	810d992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 810d7ac:	683b      	ldr	r3, [r7, #0]
 810d7ae:	885b      	ldrh	r3, [r3, #2]
 810d7b0:	b2db      	uxtb	r3, r3
 810d7b2:	2b05      	cmp	r3, #5
 810d7b4:	f200 80ac 	bhi.w	810d910 <USBD_GetDescriptor+0x258>
 810d7b8:	a201      	add	r2, pc, #4	@ (adr r2, 810d7c0 <USBD_GetDescriptor+0x108>)
 810d7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d7be:	bf00      	nop
 810d7c0:	0810d7d9 	.word	0x0810d7d9
 810d7c4:	0810d80d 	.word	0x0810d80d
 810d7c8:	0810d841 	.word	0x0810d841
 810d7cc:	0810d875 	.word	0x0810d875
 810d7d0:	0810d8a9 	.word	0x0810d8a9
 810d7d4:	0810d8dd 	.word	0x0810d8dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 810d7d8:	687b      	ldr	r3, [r7, #4]
 810d7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d7de:	685b      	ldr	r3, [r3, #4]
 810d7e0:	2b00      	cmp	r3, #0
 810d7e2:	d00b      	beq.n	810d7fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 810d7e4:	687b      	ldr	r3, [r7, #4]
 810d7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d7ea:	685b      	ldr	r3, [r3, #4]
 810d7ec:	687a      	ldr	r2, [r7, #4]
 810d7ee:	7c12      	ldrb	r2, [r2, #16]
 810d7f0:	f107 0108 	add.w	r1, r7, #8
 810d7f4:	4610      	mov	r0, r2
 810d7f6:	4798      	blx	r3
 810d7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d7fa:	e091      	b.n	810d920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d7fc:	6839      	ldr	r1, [r7, #0]
 810d7fe:	6878      	ldr	r0, [r7, #4]
 810d800:	f000 facb 	bl	810dd9a <USBD_CtlError>
            err++;
 810d804:	7afb      	ldrb	r3, [r7, #11]
 810d806:	3301      	adds	r3, #1
 810d808:	72fb      	strb	r3, [r7, #11]
          break;
 810d80a:	e089      	b.n	810d920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 810d80c:	687b      	ldr	r3, [r7, #4]
 810d80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d812:	689b      	ldr	r3, [r3, #8]
 810d814:	2b00      	cmp	r3, #0
 810d816:	d00b      	beq.n	810d830 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 810d818:	687b      	ldr	r3, [r7, #4]
 810d81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d81e:	689b      	ldr	r3, [r3, #8]
 810d820:	687a      	ldr	r2, [r7, #4]
 810d822:	7c12      	ldrb	r2, [r2, #16]
 810d824:	f107 0108 	add.w	r1, r7, #8
 810d828:	4610      	mov	r0, r2
 810d82a:	4798      	blx	r3
 810d82c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d82e:	e077      	b.n	810d920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d830:	6839      	ldr	r1, [r7, #0]
 810d832:	6878      	ldr	r0, [r7, #4]
 810d834:	f000 fab1 	bl	810dd9a <USBD_CtlError>
            err++;
 810d838:	7afb      	ldrb	r3, [r7, #11]
 810d83a:	3301      	adds	r3, #1
 810d83c:	72fb      	strb	r3, [r7, #11]
          break;
 810d83e:	e06f      	b.n	810d920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 810d840:	687b      	ldr	r3, [r7, #4]
 810d842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d846:	68db      	ldr	r3, [r3, #12]
 810d848:	2b00      	cmp	r3, #0
 810d84a:	d00b      	beq.n	810d864 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 810d84c:	687b      	ldr	r3, [r7, #4]
 810d84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d852:	68db      	ldr	r3, [r3, #12]
 810d854:	687a      	ldr	r2, [r7, #4]
 810d856:	7c12      	ldrb	r2, [r2, #16]
 810d858:	f107 0108 	add.w	r1, r7, #8
 810d85c:	4610      	mov	r0, r2
 810d85e:	4798      	blx	r3
 810d860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d862:	e05d      	b.n	810d920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d864:	6839      	ldr	r1, [r7, #0]
 810d866:	6878      	ldr	r0, [r7, #4]
 810d868:	f000 fa97 	bl	810dd9a <USBD_CtlError>
            err++;
 810d86c:	7afb      	ldrb	r3, [r7, #11]
 810d86e:	3301      	adds	r3, #1
 810d870:	72fb      	strb	r3, [r7, #11]
          break;
 810d872:	e055      	b.n	810d920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 810d874:	687b      	ldr	r3, [r7, #4]
 810d876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d87a:	691b      	ldr	r3, [r3, #16]
 810d87c:	2b00      	cmp	r3, #0
 810d87e:	d00b      	beq.n	810d898 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 810d880:	687b      	ldr	r3, [r7, #4]
 810d882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d886:	691b      	ldr	r3, [r3, #16]
 810d888:	687a      	ldr	r2, [r7, #4]
 810d88a:	7c12      	ldrb	r2, [r2, #16]
 810d88c:	f107 0108 	add.w	r1, r7, #8
 810d890:	4610      	mov	r0, r2
 810d892:	4798      	blx	r3
 810d894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d896:	e043      	b.n	810d920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d898:	6839      	ldr	r1, [r7, #0]
 810d89a:	6878      	ldr	r0, [r7, #4]
 810d89c:	f000 fa7d 	bl	810dd9a <USBD_CtlError>
            err++;
 810d8a0:	7afb      	ldrb	r3, [r7, #11]
 810d8a2:	3301      	adds	r3, #1
 810d8a4:	72fb      	strb	r3, [r7, #11]
          break;
 810d8a6:	e03b      	b.n	810d920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 810d8a8:	687b      	ldr	r3, [r7, #4]
 810d8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d8ae:	695b      	ldr	r3, [r3, #20]
 810d8b0:	2b00      	cmp	r3, #0
 810d8b2:	d00b      	beq.n	810d8cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 810d8b4:	687b      	ldr	r3, [r7, #4]
 810d8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d8ba:	695b      	ldr	r3, [r3, #20]
 810d8bc:	687a      	ldr	r2, [r7, #4]
 810d8be:	7c12      	ldrb	r2, [r2, #16]
 810d8c0:	f107 0108 	add.w	r1, r7, #8
 810d8c4:	4610      	mov	r0, r2
 810d8c6:	4798      	blx	r3
 810d8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d8ca:	e029      	b.n	810d920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d8cc:	6839      	ldr	r1, [r7, #0]
 810d8ce:	6878      	ldr	r0, [r7, #4]
 810d8d0:	f000 fa63 	bl	810dd9a <USBD_CtlError>
            err++;
 810d8d4:	7afb      	ldrb	r3, [r7, #11]
 810d8d6:	3301      	adds	r3, #1
 810d8d8:	72fb      	strb	r3, [r7, #11]
          break;
 810d8da:	e021      	b.n	810d920 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 810d8dc:	687b      	ldr	r3, [r7, #4]
 810d8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d8e2:	699b      	ldr	r3, [r3, #24]
 810d8e4:	2b00      	cmp	r3, #0
 810d8e6:	d00b      	beq.n	810d900 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 810d8e8:	687b      	ldr	r3, [r7, #4]
 810d8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d8ee:	699b      	ldr	r3, [r3, #24]
 810d8f0:	687a      	ldr	r2, [r7, #4]
 810d8f2:	7c12      	ldrb	r2, [r2, #16]
 810d8f4:	f107 0108 	add.w	r1, r7, #8
 810d8f8:	4610      	mov	r0, r2
 810d8fa:	4798      	blx	r3
 810d8fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d8fe:	e00f      	b.n	810d920 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d900:	6839      	ldr	r1, [r7, #0]
 810d902:	6878      	ldr	r0, [r7, #4]
 810d904:	f000 fa49 	bl	810dd9a <USBD_CtlError>
            err++;
 810d908:	7afb      	ldrb	r3, [r7, #11]
 810d90a:	3301      	adds	r3, #1
 810d90c:	72fb      	strb	r3, [r7, #11]
          break;
 810d90e:	e007      	b.n	810d920 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 810d910:	6839      	ldr	r1, [r7, #0]
 810d912:	6878      	ldr	r0, [r7, #4]
 810d914:	f000 fa41 	bl	810dd9a <USBD_CtlError>
          err++;
 810d918:	7afb      	ldrb	r3, [r7, #11]
 810d91a:	3301      	adds	r3, #1
 810d91c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 810d91e:	bf00      	nop
      }
      break;
 810d920:	e037      	b.n	810d992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 810d922:	687b      	ldr	r3, [r7, #4]
 810d924:	7c1b      	ldrb	r3, [r3, #16]
 810d926:	2b00      	cmp	r3, #0
 810d928:	d109      	bne.n	810d93e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 810d92a:	687b      	ldr	r3, [r7, #4]
 810d92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d932:	f107 0208 	add.w	r2, r7, #8
 810d936:	4610      	mov	r0, r2
 810d938:	4798      	blx	r3
 810d93a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 810d93c:	e029      	b.n	810d992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 810d93e:	6839      	ldr	r1, [r7, #0]
 810d940:	6878      	ldr	r0, [r7, #4]
 810d942:	f000 fa2a 	bl	810dd9a <USBD_CtlError>
        err++;
 810d946:	7afb      	ldrb	r3, [r7, #11]
 810d948:	3301      	adds	r3, #1
 810d94a:	72fb      	strb	r3, [r7, #11]
      break;
 810d94c:	e021      	b.n	810d992 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 810d94e:	687b      	ldr	r3, [r7, #4]
 810d950:	7c1b      	ldrb	r3, [r3, #16]
 810d952:	2b00      	cmp	r3, #0
 810d954:	d10d      	bne.n	810d972 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 810d956:	687b      	ldr	r3, [r7, #4]
 810d958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d95e:	f107 0208 	add.w	r2, r7, #8
 810d962:	4610      	mov	r0, r2
 810d964:	4798      	blx	r3
 810d966:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 810d968:	68fb      	ldr	r3, [r7, #12]
 810d96a:	3301      	adds	r3, #1
 810d96c:	2207      	movs	r2, #7
 810d96e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 810d970:	e00f      	b.n	810d992 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 810d972:	6839      	ldr	r1, [r7, #0]
 810d974:	6878      	ldr	r0, [r7, #4]
 810d976:	f000 fa10 	bl	810dd9a <USBD_CtlError>
        err++;
 810d97a:	7afb      	ldrb	r3, [r7, #11]
 810d97c:	3301      	adds	r3, #1
 810d97e:	72fb      	strb	r3, [r7, #11]
      break;
 810d980:	e007      	b.n	810d992 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 810d982:	6839      	ldr	r1, [r7, #0]
 810d984:	6878      	ldr	r0, [r7, #4]
 810d986:	f000 fa08 	bl	810dd9a <USBD_CtlError>
      err++;
 810d98a:	7afb      	ldrb	r3, [r7, #11]
 810d98c:	3301      	adds	r3, #1
 810d98e:	72fb      	strb	r3, [r7, #11]
      break;
 810d990:	bf00      	nop
  }

  if (err != 0U)
 810d992:	7afb      	ldrb	r3, [r7, #11]
 810d994:	2b00      	cmp	r3, #0
 810d996:	d11e      	bne.n	810d9d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 810d998:	683b      	ldr	r3, [r7, #0]
 810d99a:	88db      	ldrh	r3, [r3, #6]
 810d99c:	2b00      	cmp	r3, #0
 810d99e:	d016      	beq.n	810d9ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 810d9a0:	893b      	ldrh	r3, [r7, #8]
 810d9a2:	2b00      	cmp	r3, #0
 810d9a4:	d00e      	beq.n	810d9c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 810d9a6:	683b      	ldr	r3, [r7, #0]
 810d9a8:	88da      	ldrh	r2, [r3, #6]
 810d9aa:	893b      	ldrh	r3, [r7, #8]
 810d9ac:	4293      	cmp	r3, r2
 810d9ae:	bf28      	it	cs
 810d9b0:	4613      	movcs	r3, r2
 810d9b2:	b29b      	uxth	r3, r3
 810d9b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 810d9b6:	893b      	ldrh	r3, [r7, #8]
 810d9b8:	461a      	mov	r2, r3
 810d9ba:	68f9      	ldr	r1, [r7, #12]
 810d9bc:	6878      	ldr	r0, [r7, #4]
 810d9be:	f000 fa69 	bl	810de94 <USBD_CtlSendData>
 810d9c2:	e009      	b.n	810d9d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 810d9c4:	6839      	ldr	r1, [r7, #0]
 810d9c6:	6878      	ldr	r0, [r7, #4]
 810d9c8:	f000 f9e7 	bl	810dd9a <USBD_CtlError>
 810d9cc:	e004      	b.n	810d9d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 810d9ce:	6878      	ldr	r0, [r7, #4]
 810d9d0:	f000 faba 	bl	810df48 <USBD_CtlSendStatus>
 810d9d4:	e000      	b.n	810d9d8 <USBD_GetDescriptor+0x320>
    return;
 810d9d6:	bf00      	nop
  }
}
 810d9d8:	3710      	adds	r7, #16
 810d9da:	46bd      	mov	sp, r7
 810d9dc:	bd80      	pop	{r7, pc}
 810d9de:	bf00      	nop

0810d9e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810d9e0:	b580      	push	{r7, lr}
 810d9e2:	b084      	sub	sp, #16
 810d9e4:	af00      	add	r7, sp, #0
 810d9e6:	6078      	str	r0, [r7, #4]
 810d9e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 810d9ea:	683b      	ldr	r3, [r7, #0]
 810d9ec:	889b      	ldrh	r3, [r3, #4]
 810d9ee:	2b00      	cmp	r3, #0
 810d9f0:	d131      	bne.n	810da56 <USBD_SetAddress+0x76>
 810d9f2:	683b      	ldr	r3, [r7, #0]
 810d9f4:	88db      	ldrh	r3, [r3, #6]
 810d9f6:	2b00      	cmp	r3, #0
 810d9f8:	d12d      	bne.n	810da56 <USBD_SetAddress+0x76>
 810d9fa:	683b      	ldr	r3, [r7, #0]
 810d9fc:	885b      	ldrh	r3, [r3, #2]
 810d9fe:	2b7f      	cmp	r3, #127	@ 0x7f
 810da00:	d829      	bhi.n	810da56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 810da02:	683b      	ldr	r3, [r7, #0]
 810da04:	885b      	ldrh	r3, [r3, #2]
 810da06:	b2db      	uxtb	r3, r3
 810da08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810da0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810da0e:	687b      	ldr	r3, [r7, #4]
 810da10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810da14:	b2db      	uxtb	r3, r3
 810da16:	2b03      	cmp	r3, #3
 810da18:	d104      	bne.n	810da24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 810da1a:	6839      	ldr	r1, [r7, #0]
 810da1c:	6878      	ldr	r0, [r7, #4]
 810da1e:	f000 f9bc 	bl	810dd9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810da22:	e01d      	b.n	810da60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 810da24:	687b      	ldr	r3, [r7, #4]
 810da26:	7bfa      	ldrb	r2, [r7, #15]
 810da28:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 810da2c:	7bfb      	ldrb	r3, [r7, #15]
 810da2e:	4619      	mov	r1, r3
 810da30:	6878      	ldr	r0, [r7, #4]
 810da32:	f000 ff9d 	bl	810e970 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 810da36:	6878      	ldr	r0, [r7, #4]
 810da38:	f000 fa86 	bl	810df48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 810da3c:	7bfb      	ldrb	r3, [r7, #15]
 810da3e:	2b00      	cmp	r3, #0
 810da40:	d004      	beq.n	810da4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 810da42:	687b      	ldr	r3, [r7, #4]
 810da44:	2202      	movs	r2, #2
 810da46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810da4a:	e009      	b.n	810da60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 810da4c:	687b      	ldr	r3, [r7, #4]
 810da4e:	2201      	movs	r2, #1
 810da50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810da54:	e004      	b.n	810da60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 810da56:	6839      	ldr	r1, [r7, #0]
 810da58:	6878      	ldr	r0, [r7, #4]
 810da5a:	f000 f99e 	bl	810dd9a <USBD_CtlError>
  }
}
 810da5e:	bf00      	nop
 810da60:	bf00      	nop
 810da62:	3710      	adds	r7, #16
 810da64:	46bd      	mov	sp, r7
 810da66:	bd80      	pop	{r7, pc}

0810da68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810da68:	b580      	push	{r7, lr}
 810da6a:	b084      	sub	sp, #16
 810da6c:	af00      	add	r7, sp, #0
 810da6e:	6078      	str	r0, [r7, #4]
 810da70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 810da72:	2300      	movs	r3, #0
 810da74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 810da76:	683b      	ldr	r3, [r7, #0]
 810da78:	885b      	ldrh	r3, [r3, #2]
 810da7a:	b2da      	uxtb	r2, r3
 810da7c:	4b4e      	ldr	r3, [pc, #312]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810da7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 810da80:	4b4d      	ldr	r3, [pc, #308]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810da82:	781b      	ldrb	r3, [r3, #0]
 810da84:	2b01      	cmp	r3, #1
 810da86:	d905      	bls.n	810da94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 810da88:	6839      	ldr	r1, [r7, #0]
 810da8a:	6878      	ldr	r0, [r7, #4]
 810da8c:	f000 f985 	bl	810dd9a <USBD_CtlError>
    return USBD_FAIL;
 810da90:	2303      	movs	r3, #3
 810da92:	e08c      	b.n	810dbae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 810da94:	687b      	ldr	r3, [r7, #4]
 810da96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810da9a:	b2db      	uxtb	r3, r3
 810da9c:	2b02      	cmp	r3, #2
 810da9e:	d002      	beq.n	810daa6 <USBD_SetConfig+0x3e>
 810daa0:	2b03      	cmp	r3, #3
 810daa2:	d029      	beq.n	810daf8 <USBD_SetConfig+0x90>
 810daa4:	e075      	b.n	810db92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 810daa6:	4b44      	ldr	r3, [pc, #272]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810daa8:	781b      	ldrb	r3, [r3, #0]
 810daaa:	2b00      	cmp	r3, #0
 810daac:	d020      	beq.n	810daf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 810daae:	4b42      	ldr	r3, [pc, #264]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810dab0:	781b      	ldrb	r3, [r3, #0]
 810dab2:	461a      	mov	r2, r3
 810dab4:	687b      	ldr	r3, [r7, #4]
 810dab6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 810dab8:	4b3f      	ldr	r3, [pc, #252]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810daba:	781b      	ldrb	r3, [r3, #0]
 810dabc:	4619      	mov	r1, r3
 810dabe:	6878      	ldr	r0, [r7, #4]
 810dac0:	f7fe ffb9 	bl	810ca36 <USBD_SetClassConfig>
 810dac4:	4603      	mov	r3, r0
 810dac6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 810dac8:	7bfb      	ldrb	r3, [r7, #15]
 810daca:	2b00      	cmp	r3, #0
 810dacc:	d008      	beq.n	810dae0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 810dace:	6839      	ldr	r1, [r7, #0]
 810dad0:	6878      	ldr	r0, [r7, #4]
 810dad2:	f000 f962 	bl	810dd9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 810dad6:	687b      	ldr	r3, [r7, #4]
 810dad8:	2202      	movs	r2, #2
 810dada:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 810dade:	e065      	b.n	810dbac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 810dae0:	6878      	ldr	r0, [r7, #4]
 810dae2:	f000 fa31 	bl	810df48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 810dae6:	687b      	ldr	r3, [r7, #4]
 810dae8:	2203      	movs	r2, #3
 810daea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 810daee:	e05d      	b.n	810dbac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 810daf0:	6878      	ldr	r0, [r7, #4]
 810daf2:	f000 fa29 	bl	810df48 <USBD_CtlSendStatus>
      break;
 810daf6:	e059      	b.n	810dbac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 810daf8:	4b2f      	ldr	r3, [pc, #188]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810dafa:	781b      	ldrb	r3, [r3, #0]
 810dafc:	2b00      	cmp	r3, #0
 810dafe:	d112      	bne.n	810db26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 810db00:	687b      	ldr	r3, [r7, #4]
 810db02:	2202      	movs	r2, #2
 810db04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 810db08:	4b2b      	ldr	r3, [pc, #172]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810db0a:	781b      	ldrb	r3, [r3, #0]
 810db0c:	461a      	mov	r2, r3
 810db0e:	687b      	ldr	r3, [r7, #4]
 810db10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 810db12:	4b29      	ldr	r3, [pc, #164]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810db14:	781b      	ldrb	r3, [r3, #0]
 810db16:	4619      	mov	r1, r3
 810db18:	6878      	ldr	r0, [r7, #4]
 810db1a:	f7fe ffa8 	bl	810ca6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 810db1e:	6878      	ldr	r0, [r7, #4]
 810db20:	f000 fa12 	bl	810df48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 810db24:	e042      	b.n	810dbac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 810db26:	4b24      	ldr	r3, [pc, #144]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810db28:	781b      	ldrb	r3, [r3, #0]
 810db2a:	461a      	mov	r2, r3
 810db2c:	687b      	ldr	r3, [r7, #4]
 810db2e:	685b      	ldr	r3, [r3, #4]
 810db30:	429a      	cmp	r2, r3
 810db32:	d02a      	beq.n	810db8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 810db34:	687b      	ldr	r3, [r7, #4]
 810db36:	685b      	ldr	r3, [r3, #4]
 810db38:	b2db      	uxtb	r3, r3
 810db3a:	4619      	mov	r1, r3
 810db3c:	6878      	ldr	r0, [r7, #4]
 810db3e:	f7fe ff96 	bl	810ca6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 810db42:	4b1d      	ldr	r3, [pc, #116]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810db44:	781b      	ldrb	r3, [r3, #0]
 810db46:	461a      	mov	r2, r3
 810db48:	687b      	ldr	r3, [r7, #4]
 810db4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 810db4c:	4b1a      	ldr	r3, [pc, #104]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810db4e:	781b      	ldrb	r3, [r3, #0]
 810db50:	4619      	mov	r1, r3
 810db52:	6878      	ldr	r0, [r7, #4]
 810db54:	f7fe ff6f 	bl	810ca36 <USBD_SetClassConfig>
 810db58:	4603      	mov	r3, r0
 810db5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 810db5c:	7bfb      	ldrb	r3, [r7, #15]
 810db5e:	2b00      	cmp	r3, #0
 810db60:	d00f      	beq.n	810db82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 810db62:	6839      	ldr	r1, [r7, #0]
 810db64:	6878      	ldr	r0, [r7, #4]
 810db66:	f000 f918 	bl	810dd9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 810db6a:	687b      	ldr	r3, [r7, #4]
 810db6c:	685b      	ldr	r3, [r3, #4]
 810db6e:	b2db      	uxtb	r3, r3
 810db70:	4619      	mov	r1, r3
 810db72:	6878      	ldr	r0, [r7, #4]
 810db74:	f7fe ff7b 	bl	810ca6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 810db78:	687b      	ldr	r3, [r7, #4]
 810db7a:	2202      	movs	r2, #2
 810db7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 810db80:	e014      	b.n	810dbac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 810db82:	6878      	ldr	r0, [r7, #4]
 810db84:	f000 f9e0 	bl	810df48 <USBD_CtlSendStatus>
      break;
 810db88:	e010      	b.n	810dbac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 810db8a:	6878      	ldr	r0, [r7, #4]
 810db8c:	f000 f9dc 	bl	810df48 <USBD_CtlSendStatus>
      break;
 810db90:	e00c      	b.n	810dbac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 810db92:	6839      	ldr	r1, [r7, #0]
 810db94:	6878      	ldr	r0, [r7, #4]
 810db96:	f000 f900 	bl	810dd9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 810db9a:	4b07      	ldr	r3, [pc, #28]	@ (810dbb8 <USBD_SetConfig+0x150>)
 810db9c:	781b      	ldrb	r3, [r3, #0]
 810db9e:	4619      	mov	r1, r3
 810dba0:	6878      	ldr	r0, [r7, #4]
 810dba2:	f7fe ff64 	bl	810ca6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 810dba6:	2303      	movs	r3, #3
 810dba8:	73fb      	strb	r3, [r7, #15]
      break;
 810dbaa:	bf00      	nop
  }

  return ret;
 810dbac:	7bfb      	ldrb	r3, [r7, #15]
}
 810dbae:	4618      	mov	r0, r3
 810dbb0:	3710      	adds	r7, #16
 810dbb2:	46bd      	mov	sp, r7
 810dbb4:	bd80      	pop	{r7, pc}
 810dbb6:	bf00      	nop
 810dbb8:	10034f94 	.word	0x10034f94

0810dbbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810dbbc:	b580      	push	{r7, lr}
 810dbbe:	b082      	sub	sp, #8
 810dbc0:	af00      	add	r7, sp, #0
 810dbc2:	6078      	str	r0, [r7, #4]
 810dbc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 810dbc6:	683b      	ldr	r3, [r7, #0]
 810dbc8:	88db      	ldrh	r3, [r3, #6]
 810dbca:	2b01      	cmp	r3, #1
 810dbcc:	d004      	beq.n	810dbd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 810dbce:	6839      	ldr	r1, [r7, #0]
 810dbd0:	6878      	ldr	r0, [r7, #4]
 810dbd2:	f000 f8e2 	bl	810dd9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 810dbd6:	e023      	b.n	810dc20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 810dbd8:	687b      	ldr	r3, [r7, #4]
 810dbda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810dbde:	b2db      	uxtb	r3, r3
 810dbe0:	2b02      	cmp	r3, #2
 810dbe2:	dc02      	bgt.n	810dbea <USBD_GetConfig+0x2e>
 810dbe4:	2b00      	cmp	r3, #0
 810dbe6:	dc03      	bgt.n	810dbf0 <USBD_GetConfig+0x34>
 810dbe8:	e015      	b.n	810dc16 <USBD_GetConfig+0x5a>
 810dbea:	2b03      	cmp	r3, #3
 810dbec:	d00b      	beq.n	810dc06 <USBD_GetConfig+0x4a>
 810dbee:	e012      	b.n	810dc16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 810dbf0:	687b      	ldr	r3, [r7, #4]
 810dbf2:	2200      	movs	r2, #0
 810dbf4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 810dbf6:	687b      	ldr	r3, [r7, #4]
 810dbf8:	3308      	adds	r3, #8
 810dbfa:	2201      	movs	r2, #1
 810dbfc:	4619      	mov	r1, r3
 810dbfe:	6878      	ldr	r0, [r7, #4]
 810dc00:	f000 f948 	bl	810de94 <USBD_CtlSendData>
        break;
 810dc04:	e00c      	b.n	810dc20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 810dc06:	687b      	ldr	r3, [r7, #4]
 810dc08:	3304      	adds	r3, #4
 810dc0a:	2201      	movs	r2, #1
 810dc0c:	4619      	mov	r1, r3
 810dc0e:	6878      	ldr	r0, [r7, #4]
 810dc10:	f000 f940 	bl	810de94 <USBD_CtlSendData>
        break;
 810dc14:	e004      	b.n	810dc20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 810dc16:	6839      	ldr	r1, [r7, #0]
 810dc18:	6878      	ldr	r0, [r7, #4]
 810dc1a:	f000 f8be 	bl	810dd9a <USBD_CtlError>
        break;
 810dc1e:	bf00      	nop
}
 810dc20:	bf00      	nop
 810dc22:	3708      	adds	r7, #8
 810dc24:	46bd      	mov	sp, r7
 810dc26:	bd80      	pop	{r7, pc}

0810dc28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810dc28:	b580      	push	{r7, lr}
 810dc2a:	b082      	sub	sp, #8
 810dc2c:	af00      	add	r7, sp, #0
 810dc2e:	6078      	str	r0, [r7, #4]
 810dc30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 810dc32:	687b      	ldr	r3, [r7, #4]
 810dc34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810dc38:	b2db      	uxtb	r3, r3
 810dc3a:	3b01      	subs	r3, #1
 810dc3c:	2b02      	cmp	r3, #2
 810dc3e:	d81e      	bhi.n	810dc7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 810dc40:	683b      	ldr	r3, [r7, #0]
 810dc42:	88db      	ldrh	r3, [r3, #6]
 810dc44:	2b02      	cmp	r3, #2
 810dc46:	d004      	beq.n	810dc52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 810dc48:	6839      	ldr	r1, [r7, #0]
 810dc4a:	6878      	ldr	r0, [r7, #4]
 810dc4c:	f000 f8a5 	bl	810dd9a <USBD_CtlError>
        break;
 810dc50:	e01a      	b.n	810dc88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 810dc52:	687b      	ldr	r3, [r7, #4]
 810dc54:	2201      	movs	r2, #1
 810dc56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 810dc58:	687b      	ldr	r3, [r7, #4]
 810dc5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 810dc5e:	2b00      	cmp	r3, #0
 810dc60:	d005      	beq.n	810dc6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 810dc62:	687b      	ldr	r3, [r7, #4]
 810dc64:	68db      	ldr	r3, [r3, #12]
 810dc66:	f043 0202 	orr.w	r2, r3, #2
 810dc6a:	687b      	ldr	r3, [r7, #4]
 810dc6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 810dc6e:	687b      	ldr	r3, [r7, #4]
 810dc70:	330c      	adds	r3, #12
 810dc72:	2202      	movs	r2, #2
 810dc74:	4619      	mov	r1, r3
 810dc76:	6878      	ldr	r0, [r7, #4]
 810dc78:	f000 f90c 	bl	810de94 <USBD_CtlSendData>
      break;
 810dc7c:	e004      	b.n	810dc88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 810dc7e:	6839      	ldr	r1, [r7, #0]
 810dc80:	6878      	ldr	r0, [r7, #4]
 810dc82:	f000 f88a 	bl	810dd9a <USBD_CtlError>
      break;
 810dc86:	bf00      	nop
  }
}
 810dc88:	bf00      	nop
 810dc8a:	3708      	adds	r7, #8
 810dc8c:	46bd      	mov	sp, r7
 810dc8e:	bd80      	pop	{r7, pc}

0810dc90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810dc90:	b580      	push	{r7, lr}
 810dc92:	b082      	sub	sp, #8
 810dc94:	af00      	add	r7, sp, #0
 810dc96:	6078      	str	r0, [r7, #4]
 810dc98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 810dc9a:	683b      	ldr	r3, [r7, #0]
 810dc9c:	885b      	ldrh	r3, [r3, #2]
 810dc9e:	2b01      	cmp	r3, #1
 810dca0:	d107      	bne.n	810dcb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 810dca2:	687b      	ldr	r3, [r7, #4]
 810dca4:	2201      	movs	r2, #1
 810dca6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 810dcaa:	6878      	ldr	r0, [r7, #4]
 810dcac:	f000 f94c 	bl	810df48 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 810dcb0:	e013      	b.n	810dcda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 810dcb2:	683b      	ldr	r3, [r7, #0]
 810dcb4:	885b      	ldrh	r3, [r3, #2]
 810dcb6:	2b02      	cmp	r3, #2
 810dcb8:	d10b      	bne.n	810dcd2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 810dcba:	683b      	ldr	r3, [r7, #0]
 810dcbc:	889b      	ldrh	r3, [r3, #4]
 810dcbe:	0a1b      	lsrs	r3, r3, #8
 810dcc0:	b29b      	uxth	r3, r3
 810dcc2:	b2da      	uxtb	r2, r3
 810dcc4:	687b      	ldr	r3, [r7, #4]
 810dcc6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 810dcca:	6878      	ldr	r0, [r7, #4]
 810dccc:	f000 f93c 	bl	810df48 <USBD_CtlSendStatus>
}
 810dcd0:	e003      	b.n	810dcda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 810dcd2:	6839      	ldr	r1, [r7, #0]
 810dcd4:	6878      	ldr	r0, [r7, #4]
 810dcd6:	f000 f860 	bl	810dd9a <USBD_CtlError>
}
 810dcda:	bf00      	nop
 810dcdc:	3708      	adds	r7, #8
 810dcde:	46bd      	mov	sp, r7
 810dce0:	bd80      	pop	{r7, pc}

0810dce2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810dce2:	b580      	push	{r7, lr}
 810dce4:	b082      	sub	sp, #8
 810dce6:	af00      	add	r7, sp, #0
 810dce8:	6078      	str	r0, [r7, #4]
 810dcea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 810dcec:	687b      	ldr	r3, [r7, #4]
 810dcee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810dcf2:	b2db      	uxtb	r3, r3
 810dcf4:	3b01      	subs	r3, #1
 810dcf6:	2b02      	cmp	r3, #2
 810dcf8:	d80b      	bhi.n	810dd12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 810dcfa:	683b      	ldr	r3, [r7, #0]
 810dcfc:	885b      	ldrh	r3, [r3, #2]
 810dcfe:	2b01      	cmp	r3, #1
 810dd00:	d10c      	bne.n	810dd1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 810dd02:	687b      	ldr	r3, [r7, #4]
 810dd04:	2200      	movs	r2, #0
 810dd06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 810dd0a:	6878      	ldr	r0, [r7, #4]
 810dd0c:	f000 f91c 	bl	810df48 <USBD_CtlSendStatus>
      }
      break;
 810dd10:	e004      	b.n	810dd1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 810dd12:	6839      	ldr	r1, [r7, #0]
 810dd14:	6878      	ldr	r0, [r7, #4]
 810dd16:	f000 f840 	bl	810dd9a <USBD_CtlError>
      break;
 810dd1a:	e000      	b.n	810dd1e <USBD_ClrFeature+0x3c>
      break;
 810dd1c:	bf00      	nop
  }
}
 810dd1e:	bf00      	nop
 810dd20:	3708      	adds	r7, #8
 810dd22:	46bd      	mov	sp, r7
 810dd24:	bd80      	pop	{r7, pc}

0810dd26 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 810dd26:	b580      	push	{r7, lr}
 810dd28:	b084      	sub	sp, #16
 810dd2a:	af00      	add	r7, sp, #0
 810dd2c:	6078      	str	r0, [r7, #4]
 810dd2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 810dd30:	683b      	ldr	r3, [r7, #0]
 810dd32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 810dd34:	68fb      	ldr	r3, [r7, #12]
 810dd36:	781a      	ldrb	r2, [r3, #0]
 810dd38:	687b      	ldr	r3, [r7, #4]
 810dd3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 810dd3c:	68fb      	ldr	r3, [r7, #12]
 810dd3e:	3301      	adds	r3, #1
 810dd40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 810dd42:	68fb      	ldr	r3, [r7, #12]
 810dd44:	781a      	ldrb	r2, [r3, #0]
 810dd46:	687b      	ldr	r3, [r7, #4]
 810dd48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 810dd4a:	68fb      	ldr	r3, [r7, #12]
 810dd4c:	3301      	adds	r3, #1
 810dd4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 810dd50:	68f8      	ldr	r0, [r7, #12]
 810dd52:	f7ff fa16 	bl	810d182 <SWAPBYTE>
 810dd56:	4603      	mov	r3, r0
 810dd58:	461a      	mov	r2, r3
 810dd5a:	687b      	ldr	r3, [r7, #4]
 810dd5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 810dd5e:	68fb      	ldr	r3, [r7, #12]
 810dd60:	3301      	adds	r3, #1
 810dd62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 810dd64:	68fb      	ldr	r3, [r7, #12]
 810dd66:	3301      	adds	r3, #1
 810dd68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 810dd6a:	68f8      	ldr	r0, [r7, #12]
 810dd6c:	f7ff fa09 	bl	810d182 <SWAPBYTE>
 810dd70:	4603      	mov	r3, r0
 810dd72:	461a      	mov	r2, r3
 810dd74:	687b      	ldr	r3, [r7, #4]
 810dd76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 810dd78:	68fb      	ldr	r3, [r7, #12]
 810dd7a:	3301      	adds	r3, #1
 810dd7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 810dd7e:	68fb      	ldr	r3, [r7, #12]
 810dd80:	3301      	adds	r3, #1
 810dd82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 810dd84:	68f8      	ldr	r0, [r7, #12]
 810dd86:	f7ff f9fc 	bl	810d182 <SWAPBYTE>
 810dd8a:	4603      	mov	r3, r0
 810dd8c:	461a      	mov	r2, r3
 810dd8e:	687b      	ldr	r3, [r7, #4]
 810dd90:	80da      	strh	r2, [r3, #6]
}
 810dd92:	bf00      	nop
 810dd94:	3710      	adds	r7, #16
 810dd96:	46bd      	mov	sp, r7
 810dd98:	bd80      	pop	{r7, pc}

0810dd9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810dd9a:	b580      	push	{r7, lr}
 810dd9c:	b082      	sub	sp, #8
 810dd9e:	af00      	add	r7, sp, #0
 810dda0:	6078      	str	r0, [r7, #4]
 810dda2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 810dda4:	2180      	movs	r1, #128	@ 0x80
 810dda6:	6878      	ldr	r0, [r7, #4]
 810dda8:	f000 fd78 	bl	810e89c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 810ddac:	2100      	movs	r1, #0
 810ddae:	6878      	ldr	r0, [r7, #4]
 810ddb0:	f000 fd74 	bl	810e89c <USBD_LL_StallEP>
}
 810ddb4:	bf00      	nop
 810ddb6:	3708      	adds	r7, #8
 810ddb8:	46bd      	mov	sp, r7
 810ddba:	bd80      	pop	{r7, pc}

0810ddbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 810ddbc:	b580      	push	{r7, lr}
 810ddbe:	b086      	sub	sp, #24
 810ddc0:	af00      	add	r7, sp, #0
 810ddc2:	60f8      	str	r0, [r7, #12]
 810ddc4:	60b9      	str	r1, [r7, #8]
 810ddc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 810ddc8:	2300      	movs	r3, #0
 810ddca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 810ddcc:	68fb      	ldr	r3, [r7, #12]
 810ddce:	2b00      	cmp	r3, #0
 810ddd0:	d042      	beq.n	810de58 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 810ddd2:	68fb      	ldr	r3, [r7, #12]
 810ddd4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 810ddd6:	6938      	ldr	r0, [r7, #16]
 810ddd8:	f000 f842 	bl	810de60 <USBD_GetLen>
 810dddc:	4603      	mov	r3, r0
 810ddde:	3301      	adds	r3, #1
 810dde0:	005b      	lsls	r3, r3, #1
 810dde2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810dde6:	d808      	bhi.n	810ddfa <USBD_GetString+0x3e>
 810dde8:	6938      	ldr	r0, [r7, #16]
 810ddea:	f000 f839 	bl	810de60 <USBD_GetLen>
 810ddee:	4603      	mov	r3, r0
 810ddf0:	3301      	adds	r3, #1
 810ddf2:	b29b      	uxth	r3, r3
 810ddf4:	005b      	lsls	r3, r3, #1
 810ddf6:	b29a      	uxth	r2, r3
 810ddf8:	e001      	b.n	810ddfe <USBD_GetString+0x42>
 810ddfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810ddfe:	687b      	ldr	r3, [r7, #4]
 810de00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 810de02:	7dfb      	ldrb	r3, [r7, #23]
 810de04:	68ba      	ldr	r2, [r7, #8]
 810de06:	4413      	add	r3, r2
 810de08:	687a      	ldr	r2, [r7, #4]
 810de0a:	7812      	ldrb	r2, [r2, #0]
 810de0c:	701a      	strb	r2, [r3, #0]
  idx++;
 810de0e:	7dfb      	ldrb	r3, [r7, #23]
 810de10:	3301      	adds	r3, #1
 810de12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 810de14:	7dfb      	ldrb	r3, [r7, #23]
 810de16:	68ba      	ldr	r2, [r7, #8]
 810de18:	4413      	add	r3, r2
 810de1a:	2203      	movs	r2, #3
 810de1c:	701a      	strb	r2, [r3, #0]
  idx++;
 810de1e:	7dfb      	ldrb	r3, [r7, #23]
 810de20:	3301      	adds	r3, #1
 810de22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 810de24:	e013      	b.n	810de4e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 810de26:	7dfb      	ldrb	r3, [r7, #23]
 810de28:	68ba      	ldr	r2, [r7, #8]
 810de2a:	4413      	add	r3, r2
 810de2c:	693a      	ldr	r2, [r7, #16]
 810de2e:	7812      	ldrb	r2, [r2, #0]
 810de30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 810de32:	693b      	ldr	r3, [r7, #16]
 810de34:	3301      	adds	r3, #1
 810de36:	613b      	str	r3, [r7, #16]
    idx++;
 810de38:	7dfb      	ldrb	r3, [r7, #23]
 810de3a:	3301      	adds	r3, #1
 810de3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 810de3e:	7dfb      	ldrb	r3, [r7, #23]
 810de40:	68ba      	ldr	r2, [r7, #8]
 810de42:	4413      	add	r3, r2
 810de44:	2200      	movs	r2, #0
 810de46:	701a      	strb	r2, [r3, #0]
    idx++;
 810de48:	7dfb      	ldrb	r3, [r7, #23]
 810de4a:	3301      	adds	r3, #1
 810de4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 810de4e:	693b      	ldr	r3, [r7, #16]
 810de50:	781b      	ldrb	r3, [r3, #0]
 810de52:	2b00      	cmp	r3, #0
 810de54:	d1e7      	bne.n	810de26 <USBD_GetString+0x6a>
 810de56:	e000      	b.n	810de5a <USBD_GetString+0x9e>
    return;
 810de58:	bf00      	nop
  }
}
 810de5a:	3718      	adds	r7, #24
 810de5c:	46bd      	mov	sp, r7
 810de5e:	bd80      	pop	{r7, pc}

0810de60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 810de60:	b480      	push	{r7}
 810de62:	b085      	sub	sp, #20
 810de64:	af00      	add	r7, sp, #0
 810de66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 810de68:	2300      	movs	r3, #0
 810de6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 810de6c:	687b      	ldr	r3, [r7, #4]
 810de6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 810de70:	e005      	b.n	810de7e <USBD_GetLen+0x1e>
  {
    len++;
 810de72:	7bfb      	ldrb	r3, [r7, #15]
 810de74:	3301      	adds	r3, #1
 810de76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 810de78:	68bb      	ldr	r3, [r7, #8]
 810de7a:	3301      	adds	r3, #1
 810de7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 810de7e:	68bb      	ldr	r3, [r7, #8]
 810de80:	781b      	ldrb	r3, [r3, #0]
 810de82:	2b00      	cmp	r3, #0
 810de84:	d1f5      	bne.n	810de72 <USBD_GetLen+0x12>
  }

  return len;
 810de86:	7bfb      	ldrb	r3, [r7, #15]
}
 810de88:	4618      	mov	r0, r3
 810de8a:	3714      	adds	r7, #20
 810de8c:	46bd      	mov	sp, r7
 810de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de92:	4770      	bx	lr

0810de94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 810de94:	b580      	push	{r7, lr}
 810de96:	b084      	sub	sp, #16
 810de98:	af00      	add	r7, sp, #0
 810de9a:	60f8      	str	r0, [r7, #12]
 810de9c:	60b9      	str	r1, [r7, #8]
 810de9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 810dea0:	68fb      	ldr	r3, [r7, #12]
 810dea2:	2202      	movs	r2, #2
 810dea4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 810dea8:	68fb      	ldr	r3, [r7, #12]
 810deaa:	687a      	ldr	r2, [r7, #4]
 810deac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 810deae:	68fb      	ldr	r3, [r7, #12]
 810deb0:	687a      	ldr	r2, [r7, #4]
 810deb2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 810deb4:	687b      	ldr	r3, [r7, #4]
 810deb6:	68ba      	ldr	r2, [r7, #8]
 810deb8:	2100      	movs	r1, #0
 810deba:	68f8      	ldr	r0, [r7, #12]
 810debc:	f000 fd77 	bl	810e9ae <USBD_LL_Transmit>

  return USBD_OK;
 810dec0:	2300      	movs	r3, #0
}
 810dec2:	4618      	mov	r0, r3
 810dec4:	3710      	adds	r7, #16
 810dec6:	46bd      	mov	sp, r7
 810dec8:	bd80      	pop	{r7, pc}

0810deca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 810deca:	b580      	push	{r7, lr}
 810decc:	b084      	sub	sp, #16
 810dece:	af00      	add	r7, sp, #0
 810ded0:	60f8      	str	r0, [r7, #12]
 810ded2:	60b9      	str	r1, [r7, #8]
 810ded4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 810ded6:	687b      	ldr	r3, [r7, #4]
 810ded8:	68ba      	ldr	r2, [r7, #8]
 810deda:	2100      	movs	r1, #0
 810dedc:	68f8      	ldr	r0, [r7, #12]
 810dede:	f000 fd66 	bl	810e9ae <USBD_LL_Transmit>

  return USBD_OK;
 810dee2:	2300      	movs	r3, #0
}
 810dee4:	4618      	mov	r0, r3
 810dee6:	3710      	adds	r7, #16
 810dee8:	46bd      	mov	sp, r7
 810deea:	bd80      	pop	{r7, pc}

0810deec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 810deec:	b580      	push	{r7, lr}
 810deee:	b084      	sub	sp, #16
 810def0:	af00      	add	r7, sp, #0
 810def2:	60f8      	str	r0, [r7, #12]
 810def4:	60b9      	str	r1, [r7, #8]
 810def6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 810def8:	68fb      	ldr	r3, [r7, #12]
 810defa:	2203      	movs	r2, #3
 810defc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 810df00:	68fb      	ldr	r3, [r7, #12]
 810df02:	687a      	ldr	r2, [r7, #4]
 810df04:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 810df08:	68fb      	ldr	r3, [r7, #12]
 810df0a:	687a      	ldr	r2, [r7, #4]
 810df0c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 810df10:	687b      	ldr	r3, [r7, #4]
 810df12:	68ba      	ldr	r2, [r7, #8]
 810df14:	2100      	movs	r1, #0
 810df16:	68f8      	ldr	r0, [r7, #12]
 810df18:	f000 fd6a 	bl	810e9f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 810df1c:	2300      	movs	r3, #0
}
 810df1e:	4618      	mov	r0, r3
 810df20:	3710      	adds	r7, #16
 810df22:	46bd      	mov	sp, r7
 810df24:	bd80      	pop	{r7, pc}

0810df26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 810df26:	b580      	push	{r7, lr}
 810df28:	b084      	sub	sp, #16
 810df2a:	af00      	add	r7, sp, #0
 810df2c:	60f8      	str	r0, [r7, #12]
 810df2e:	60b9      	str	r1, [r7, #8]
 810df30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 810df32:	687b      	ldr	r3, [r7, #4]
 810df34:	68ba      	ldr	r2, [r7, #8]
 810df36:	2100      	movs	r1, #0
 810df38:	68f8      	ldr	r0, [r7, #12]
 810df3a:	f000 fd59 	bl	810e9f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 810df3e:	2300      	movs	r3, #0
}
 810df40:	4618      	mov	r0, r3
 810df42:	3710      	adds	r7, #16
 810df44:	46bd      	mov	sp, r7
 810df46:	bd80      	pop	{r7, pc}

0810df48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 810df48:	b580      	push	{r7, lr}
 810df4a:	b082      	sub	sp, #8
 810df4c:	af00      	add	r7, sp, #0
 810df4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 810df50:	687b      	ldr	r3, [r7, #4]
 810df52:	2204      	movs	r2, #4
 810df54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 810df58:	2300      	movs	r3, #0
 810df5a:	2200      	movs	r2, #0
 810df5c:	2100      	movs	r1, #0
 810df5e:	6878      	ldr	r0, [r7, #4]
 810df60:	f000 fd25 	bl	810e9ae <USBD_LL_Transmit>

  return USBD_OK;
 810df64:	2300      	movs	r3, #0
}
 810df66:	4618      	mov	r0, r3
 810df68:	3708      	adds	r7, #8
 810df6a:	46bd      	mov	sp, r7
 810df6c:	bd80      	pop	{r7, pc}

0810df6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 810df6e:	b580      	push	{r7, lr}
 810df70:	b082      	sub	sp, #8
 810df72:	af00      	add	r7, sp, #0
 810df74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 810df76:	687b      	ldr	r3, [r7, #4]
 810df78:	2205      	movs	r2, #5
 810df7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 810df7e:	2300      	movs	r3, #0
 810df80:	2200      	movs	r2, #0
 810df82:	2100      	movs	r1, #0
 810df84:	6878      	ldr	r0, [r7, #4]
 810df86:	f000 fd33 	bl	810e9f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 810df8a:	2300      	movs	r3, #0
}
 810df8c:	4618      	mov	r0, r3
 810df8e:	3708      	adds	r7, #8
 810df90:	46bd      	mov	sp, r7
 810df92:	bd80      	pop	{r7, pc}

0810df94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 810df94:	b580      	push	{r7, lr}
 810df96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 810df98:	2200      	movs	r2, #0
 810df9a:	4913      	ldr	r1, [pc, #76]	@ (810dfe8 <MX_USB_DEVICE_Init+0x54>)
 810df9c:	4813      	ldr	r0, [pc, #76]	@ (810dfec <MX_USB_DEVICE_Init+0x58>)
 810df9e:	f7fe fccd 	bl	810c93c <USBD_Init>
 810dfa2:	4603      	mov	r3, r0
 810dfa4:	2b00      	cmp	r3, #0
 810dfa6:	d001      	beq.n	810dfac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 810dfa8:	f7f4 f92a 	bl	8102200 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 810dfac:	4910      	ldr	r1, [pc, #64]	@ (810dff0 <MX_USB_DEVICE_Init+0x5c>)
 810dfae:	480f      	ldr	r0, [pc, #60]	@ (810dfec <MX_USB_DEVICE_Init+0x58>)
 810dfb0:	f7fe fcf4 	bl	810c99c <USBD_RegisterClass>
 810dfb4:	4603      	mov	r3, r0
 810dfb6:	2b00      	cmp	r3, #0
 810dfb8:	d001      	beq.n	810dfbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 810dfba:	f7f4 f921 	bl	8102200 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 810dfbe:	490d      	ldr	r1, [pc, #52]	@ (810dff4 <MX_USB_DEVICE_Init+0x60>)
 810dfc0:	480a      	ldr	r0, [pc, #40]	@ (810dfec <MX_USB_DEVICE_Init+0x58>)
 810dfc2:	f7fe fbeb 	bl	810c79c <USBD_CDC_RegisterInterface>
 810dfc6:	4603      	mov	r3, r0
 810dfc8:	2b00      	cmp	r3, #0
 810dfca:	d001      	beq.n	810dfd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 810dfcc:	f7f4 f918 	bl	8102200 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 810dfd0:	4806      	ldr	r0, [pc, #24]	@ (810dfec <MX_USB_DEVICE_Init+0x58>)
 810dfd2:	f7fe fd19 	bl	810ca08 <USBD_Start>
 810dfd6:	4603      	mov	r3, r0
 810dfd8:	2b00      	cmp	r3, #0
 810dfda:	d001      	beq.n	810dfe0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 810dfdc:	f7f4 f910 	bl	8102200 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 810dfe0:	f7f7 fc9c 	bl	810591c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 810dfe4:	bf00      	nop
 810dfe6:	bd80      	pop	{r7, pc}
 810dfe8:	100321a8 	.word	0x100321a8
 810dfec:	10034f98 	.word	0x10034f98
 810dff0:	1003210c 	.word	0x1003210c
 810dff4:	1003218c 	.word	0x1003218c

0810dff8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 810dff8:	b580      	push	{r7, lr}
 810dffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 810dffc:	2200      	movs	r2, #0
 810dffe:	4905      	ldr	r1, [pc, #20]	@ (810e014 <CDC_Init_FS+0x1c>)
 810e000:	4805      	ldr	r0, [pc, #20]	@ (810e018 <CDC_Init_FS+0x20>)
 810e002:	f7fe fbe5 	bl	810c7d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 810e006:	4905      	ldr	r1, [pc, #20]	@ (810e01c <CDC_Init_FS+0x24>)
 810e008:	4803      	ldr	r0, [pc, #12]	@ (810e018 <CDC_Init_FS+0x20>)
 810e00a:	f7fe fc03 	bl	810c814 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 810e00e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 810e010:	4618      	mov	r0, r3
 810e012:	bd80      	pop	{r7, pc}
 810e014:	10035a78 	.word	0x10035a78
 810e018:	10034f98 	.word	0x10034f98
 810e01c:	10035278 	.word	0x10035278

0810e020 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 810e020:	b480      	push	{r7}
 810e022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 810e024:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 810e026:	4618      	mov	r0, r3
 810e028:	46bd      	mov	sp, r7
 810e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e02e:	4770      	bx	lr

0810e030 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 810e030:	b580      	push	{r7, lr}
 810e032:	b084      	sub	sp, #16
 810e034:	af00      	add	r7, sp, #0
 810e036:	4603      	mov	r3, r0
 810e038:	6039      	str	r1, [r7, #0]
 810e03a:	71fb      	strb	r3, [r7, #7]
 810e03c:	4613      	mov	r3, r2
 810e03e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef * req;
  static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
			    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
  switch(cmd)
 810e040:	79fb      	ldrb	r3, [r7, #7]
 810e042:	2b23      	cmp	r3, #35	@ 0x23
 810e044:	d86e      	bhi.n	810e124 <CDC_Control_FS+0xf4>
 810e046:	a201      	add	r2, pc, #4	@ (adr r2, 810e04c <CDC_Control_FS+0x1c>)
 810e048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e04c:	0810e125 	.word	0x0810e125
 810e050:	0810e125 	.word	0x0810e125
 810e054:	0810e125 	.word	0x0810e125
 810e058:	0810e125 	.word	0x0810e125
 810e05c:	0810e125 	.word	0x0810e125
 810e060:	0810e125 	.word	0x0810e125
 810e064:	0810e125 	.word	0x0810e125
 810e068:	0810e125 	.word	0x0810e125
 810e06c:	0810e125 	.word	0x0810e125
 810e070:	0810e125 	.word	0x0810e125
 810e074:	0810e125 	.word	0x0810e125
 810e078:	0810e125 	.word	0x0810e125
 810e07c:	0810e125 	.word	0x0810e125
 810e080:	0810e125 	.word	0x0810e125
 810e084:	0810e125 	.word	0x0810e125
 810e088:	0810e125 	.word	0x0810e125
 810e08c:	0810e125 	.word	0x0810e125
 810e090:	0810e125 	.word	0x0810e125
 810e094:	0810e125 	.word	0x0810e125
 810e098:	0810e125 	.word	0x0810e125
 810e09c:	0810e125 	.word	0x0810e125
 810e0a0:	0810e125 	.word	0x0810e125
 810e0a4:	0810e125 	.word	0x0810e125
 810e0a8:	0810e125 	.word	0x0810e125
 810e0ac:	0810e125 	.word	0x0810e125
 810e0b0:	0810e125 	.word	0x0810e125
 810e0b4:	0810e125 	.word	0x0810e125
 810e0b8:	0810e125 	.word	0x0810e125
 810e0bc:	0810e125 	.word	0x0810e125
 810e0c0:	0810e125 	.word	0x0810e125
 810e0c4:	0810e125 	.word	0x0810e125
 810e0c8:	0810e125 	.word	0x0810e125
 810e0cc:	0810e0dd 	.word	0x0810e0dd
 810e0d0:	0810e0ef 	.word	0x0810e0ef
 810e0d4:	0810e101 	.word	0x0810e101
 810e0d8:	0810e125 	.word	0x0810e125
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 810e0dc:	4b14      	ldr	r3, [pc, #80]	@ (810e130 <CDC_Control_FS+0x100>)
 810e0de:	683a      	ldr	r2, [r7, #0]
 810e0e0:	6810      	ldr	r0, [r2, #0]
 810e0e2:	6018      	str	r0, [r3, #0]
 810e0e4:	8891      	ldrh	r1, [r2, #4]
 810e0e6:	7992      	ldrb	r2, [r2, #6]
 810e0e8:	8099      	strh	r1, [r3, #4]
 810e0ea:	719a      	strb	r2, [r3, #6]
    break;
 810e0ec:	e01b      	b.n	810e126 <CDC_Control_FS+0xf6>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 810e0ee:	683b      	ldr	r3, [r7, #0]
 810e0f0:	4a0f      	ldr	r2, [pc, #60]	@ (810e130 <CDC_Control_FS+0x100>)
 810e0f2:	6810      	ldr	r0, [r2, #0]
 810e0f4:	6018      	str	r0, [r3, #0]
 810e0f6:	8891      	ldrh	r1, [r2, #4]
 810e0f8:	7992      	ldrb	r2, [r2, #6]
 810e0fa:	8099      	strh	r1, [r3, #4]
 810e0fc:	719a      	strb	r2, [r3, #6]
    break;
 810e0fe:	e012      	b.n	810e126 <CDC_Control_FS+0xf6>

    case CDC_SET_CONTROL_LINE_STATE:
        req = (USBD_SetupReqTypedef *)pbuf;
 810e100:	683b      	ldr	r3, [r7, #0]
 810e102:	60fb      	str	r3, [r7, #12]
    	if((req->wValue & 0x0001) != 0)
 810e104:	68fb      	ldr	r3, [r7, #12]
 810e106:	885b      	ldrh	r3, [r3, #2]
 810e108:	f003 0301 	and.w	r3, r3, #1
 810e10c:	2b00      	cmp	r3, #0
 810e10e:	d003      	beq.n	810e118 <CDC_Control_FS+0xe8>
    	{
    		hostComPort_isOpen = true;
 810e110:	4b08      	ldr	r3, [pc, #32]	@ (810e134 <CDC_Control_FS+0x104>)
 810e112:	2201      	movs	r2, #1
 810e114:	701a      	strb	r2, [r3, #0]
 810e116:	e002      	b.n	810e11e <CDC_Control_FS+0xee>
    	}
    	else
    	{
    		hostComPort_isOpen = false;
 810e118:	4b06      	ldr	r3, [pc, #24]	@ (810e134 <CDC_Control_FS+0x104>)
 810e11a:	2200      	movs	r2, #0
 810e11c:	701a      	strb	r2, [r3, #0]
    	}
    	USB_Check_Notify();
 810e11e:	f7f3 f927 	bl	8101370 <USB_Check_Notify>
    break;
 810e122:	e000      	b.n	810e126 <CDC_Control_FS+0xf6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 810e124:	bf00      	nop
  }

  return (USBD_OK);
 810e126:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 810e128:	4618      	mov	r0, r3
 810e12a:	3710      	adds	r7, #16
 810e12c:	46bd      	mov	sp, r7
 810e12e:	bd80      	pop	{r7, pc}
 810e130:	100321a0 	.word	0x100321a0
 810e134:	10035274 	.word	0x10035274

0810e138 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 810e138:	b580      	push	{r7, lr}
 810e13a:	b084      	sub	sp, #16
 810e13c:	af00      	add	r7, sp, #0
 810e13e:	6078      	str	r0, [r7, #4]
 810e140:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 810e142:	6879      	ldr	r1, [r7, #4]
 810e144:	480f      	ldr	r0, [pc, #60]	@ (810e184 <CDC_Receive_FS+0x4c>)
 810e146:	f7fe fb65 	bl	810c814 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 810e14a:	480e      	ldr	r0, [pc, #56]	@ (810e184 <CDC_Receive_FS+0x4c>)
 810e14c:	f7fe fbc0 	bl	810c8d0 <USBD_CDC_ReceivePacket>

  uint32_t written = CDC_RX_RingBuffer_PutBuffer(Buf, *Len);
 810e150:	683b      	ldr	r3, [r7, #0]
 810e152:	681b      	ldr	r3, [r3, #0]
 810e154:	4619      	mov	r1, r3
 810e156:	6878      	ldr	r0, [r7, #4]
 810e158:	f7f3 f8bb 	bl	81012d2 <CDC_RX_RingBuffer_PutBuffer>
 810e15c:	60f8      	str	r0, [r7, #12]
  if (written != *Len) {
 810e15e:	683b      	ldr	r3, [r7, #0]
 810e160:	681b      	ldr	r3, [r3, #0]
 810e162:	68fa      	ldr	r2, [r7, #12]
 810e164:	429a      	cmp	r2, r3
 810e166:	d003      	beq.n	810e170 <CDC_Receive_FS+0x38>
      (void)CDC_SendString("CDC RX Buffer Full!!!\r\n", 24);
 810e168:	2118      	movs	r1, #24
 810e16a:	4807      	ldr	r0, [pc, #28]	@ (810e188 <CDC_Receive_FS+0x50>)
 810e16c:	f7f3 f944 	bl	81013f8 <CDC_SendString>
  }
  if (written) {
 810e170:	68fb      	ldr	r3, [r7, #12]
 810e172:	2b00      	cmp	r3, #0
 810e174:	d001      	beq.n	810e17a <CDC_Receive_FS+0x42>
      CDC_ISR_RxNotify();
 810e176:	f7f3 f8ef 	bl	8101358 <CDC_ISR_RxNotify>
  }

  return (USBD_OK);
 810e17a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 810e17c:	4618      	mov	r0, r3
 810e17e:	3710      	adds	r7, #16
 810e180:	46bd      	mov	sp, r7
 810e182:	bd80      	pop	{r7, pc}
 810e184:	10034f98 	.word	0x10034f98
 810e188:	0810ebbc 	.word	0x0810ebbc

0810e18c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 810e18c:	b580      	push	{r7, lr}
 810e18e:	b084      	sub	sp, #16
 810e190:	af00      	add	r7, sp, #0
 810e192:	6078      	str	r0, [r7, #4]
 810e194:	460b      	mov	r3, r1
 810e196:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 810e198:	2300      	movs	r3, #0
 810e19a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 810e19c:	4b0d      	ldr	r3, [pc, #52]	@ (810e1d4 <CDC_Transmit_FS+0x48>)
 810e19e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 810e1a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 810e1a4:	68bb      	ldr	r3, [r7, #8]
 810e1a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 810e1aa:	2b00      	cmp	r3, #0
 810e1ac:	d001      	beq.n	810e1b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 810e1ae:	2301      	movs	r3, #1
 810e1b0:	e00b      	b.n	810e1ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 810e1b2:	887b      	ldrh	r3, [r7, #2]
 810e1b4:	461a      	mov	r2, r3
 810e1b6:	6879      	ldr	r1, [r7, #4]
 810e1b8:	4806      	ldr	r0, [pc, #24]	@ (810e1d4 <CDC_Transmit_FS+0x48>)
 810e1ba:	f7fe fb09 	bl	810c7d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 810e1be:	4805      	ldr	r0, [pc, #20]	@ (810e1d4 <CDC_Transmit_FS+0x48>)
 810e1c0:	f7fe fb46 	bl	810c850 <USBD_CDC_TransmitPacket>
 810e1c4:	4603      	mov	r3, r0
 810e1c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 810e1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 810e1ca:	4618      	mov	r0, r3
 810e1cc:	3710      	adds	r7, #16
 810e1ce:	46bd      	mov	sp, r7
 810e1d0:	bd80      	pop	{r7, pc}
 810e1d2:	bf00      	nop
 810e1d4:	10034f98 	.word	0x10034f98

0810e1d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 810e1d8:	b480      	push	{r7}
 810e1da:	b087      	sub	sp, #28
 810e1dc:	af00      	add	r7, sp, #0
 810e1de:	60f8      	str	r0, [r7, #12]
 810e1e0:	60b9      	str	r1, [r7, #8]
 810e1e2:	4613      	mov	r3, r2
 810e1e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 810e1e6:	2300      	movs	r3, #0
 810e1e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 810e1ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 810e1ee:	4618      	mov	r0, r3
 810e1f0:	371c      	adds	r7, #28
 810e1f2:	46bd      	mov	sp, r7
 810e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e1f8:	4770      	bx	lr
	...

0810e1fc <CDC_ComPort_IsOpen>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
_Bool CDC_ComPort_IsOpen()
{
 810e1fc:	b480      	push	{r7}
 810e1fe:	af00      	add	r7, sp, #0
	return(hostComPort_isOpen);
 810e200:	4b03      	ldr	r3, [pc, #12]	@ (810e210 <CDC_ComPort_IsOpen+0x14>)
 810e202:	781b      	ldrb	r3, [r3, #0]
}
 810e204:	4618      	mov	r0, r3
 810e206:	46bd      	mov	sp, r7
 810e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e20c:	4770      	bx	lr
 810e20e:	bf00      	nop
 810e210:	10035274 	.word	0x10035274

0810e214 <CDC_IsTxReady>:

_Bool CDC_IsTxReady(void)
{
 810e214:	b480      	push	{r7}
 810e216:	b083      	sub	sp, #12
 810e218:	af00      	add	r7, sp, #0
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 810e21a:	4b09      	ldr	r3, [pc, #36]	@ (810e240 <CDC_IsTxReady+0x2c>)
 810e21c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 810e220:	607b      	str	r3, [r7, #4]
    return (hcdc->TxState == 0);
 810e222:	687b      	ldr	r3, [r7, #4]
 810e224:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 810e228:	2b00      	cmp	r3, #0
 810e22a:	bf0c      	ite	eq
 810e22c:	2301      	moveq	r3, #1
 810e22e:	2300      	movne	r3, #0
 810e230:	b2db      	uxtb	r3, r3
}
 810e232:	4618      	mov	r0, r3
 810e234:	370c      	adds	r7, #12
 810e236:	46bd      	mov	sp, r7
 810e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e23c:	4770      	bx	lr
 810e23e:	bf00      	nop
 810e240:	10034f98 	.word	0x10034f98

0810e244 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e244:	b480      	push	{r7}
 810e246:	b083      	sub	sp, #12
 810e248:	af00      	add	r7, sp, #0
 810e24a:	4603      	mov	r3, r0
 810e24c:	6039      	str	r1, [r7, #0]
 810e24e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 810e250:	683b      	ldr	r3, [r7, #0]
 810e252:	2212      	movs	r2, #18
 810e254:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 810e256:	4b03      	ldr	r3, [pc, #12]	@ (810e264 <USBD_FS_DeviceDescriptor+0x20>)
}
 810e258:	4618      	mov	r0, r3
 810e25a:	370c      	adds	r7, #12
 810e25c:	46bd      	mov	sp, r7
 810e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e262:	4770      	bx	lr
 810e264:	100321c8 	.word	0x100321c8

0810e268 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e268:	b480      	push	{r7}
 810e26a:	b083      	sub	sp, #12
 810e26c:	af00      	add	r7, sp, #0
 810e26e:	4603      	mov	r3, r0
 810e270:	6039      	str	r1, [r7, #0]
 810e272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 810e274:	683b      	ldr	r3, [r7, #0]
 810e276:	2204      	movs	r2, #4
 810e278:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 810e27a:	4b03      	ldr	r3, [pc, #12]	@ (810e288 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 810e27c:	4618      	mov	r0, r3
 810e27e:	370c      	adds	r7, #12
 810e280:	46bd      	mov	sp, r7
 810e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e286:	4770      	bx	lr
 810e288:	100321dc 	.word	0x100321dc

0810e28c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e28c:	b580      	push	{r7, lr}
 810e28e:	b082      	sub	sp, #8
 810e290:	af00      	add	r7, sp, #0
 810e292:	4603      	mov	r3, r0
 810e294:	6039      	str	r1, [r7, #0]
 810e296:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 810e298:	79fb      	ldrb	r3, [r7, #7]
 810e29a:	2b00      	cmp	r3, #0
 810e29c:	d105      	bne.n	810e2aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 810e29e:	683a      	ldr	r2, [r7, #0]
 810e2a0:	4907      	ldr	r1, [pc, #28]	@ (810e2c0 <USBD_FS_ProductStrDescriptor+0x34>)
 810e2a2:	4808      	ldr	r0, [pc, #32]	@ (810e2c4 <USBD_FS_ProductStrDescriptor+0x38>)
 810e2a4:	f7ff fd8a 	bl	810ddbc <USBD_GetString>
 810e2a8:	e004      	b.n	810e2b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 810e2aa:	683a      	ldr	r2, [r7, #0]
 810e2ac:	4904      	ldr	r1, [pc, #16]	@ (810e2c0 <USBD_FS_ProductStrDescriptor+0x34>)
 810e2ae:	4805      	ldr	r0, [pc, #20]	@ (810e2c4 <USBD_FS_ProductStrDescriptor+0x38>)
 810e2b0:	f7ff fd84 	bl	810ddbc <USBD_GetString>
  }
  return USBD_StrDesc;
 810e2b4:	4b02      	ldr	r3, [pc, #8]	@ (810e2c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 810e2b6:	4618      	mov	r0, r3
 810e2b8:	3708      	adds	r7, #8
 810e2ba:	46bd      	mov	sp, r7
 810e2bc:	bd80      	pop	{r7, pc}
 810e2be:	bf00      	nop
 810e2c0:	10036278 	.word	0x10036278
 810e2c4:	0810ebd4 	.word	0x0810ebd4

0810e2c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e2c8:	b580      	push	{r7, lr}
 810e2ca:	b082      	sub	sp, #8
 810e2cc:	af00      	add	r7, sp, #0
 810e2ce:	4603      	mov	r3, r0
 810e2d0:	6039      	str	r1, [r7, #0]
 810e2d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 810e2d4:	683a      	ldr	r2, [r7, #0]
 810e2d6:	4904      	ldr	r1, [pc, #16]	@ (810e2e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 810e2d8:	4804      	ldr	r0, [pc, #16]	@ (810e2ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 810e2da:	f7ff fd6f 	bl	810ddbc <USBD_GetString>
  return USBD_StrDesc;
 810e2de:	4b02      	ldr	r3, [pc, #8]	@ (810e2e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 810e2e0:	4618      	mov	r0, r3
 810e2e2:	3708      	adds	r7, #8
 810e2e4:	46bd      	mov	sp, r7
 810e2e6:	bd80      	pop	{r7, pc}
 810e2e8:	10036278 	.word	0x10036278
 810e2ec:	0810ebec 	.word	0x0810ebec

0810e2f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e2f0:	b580      	push	{r7, lr}
 810e2f2:	b082      	sub	sp, #8
 810e2f4:	af00      	add	r7, sp, #0
 810e2f6:	4603      	mov	r3, r0
 810e2f8:	6039      	str	r1, [r7, #0]
 810e2fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 810e2fc:	683b      	ldr	r3, [r7, #0]
 810e2fe:	221a      	movs	r2, #26
 810e300:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 810e302:	f000 f843 	bl	810e38c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 810e306:	4b02      	ldr	r3, [pc, #8]	@ (810e310 <USBD_FS_SerialStrDescriptor+0x20>)
}
 810e308:	4618      	mov	r0, r3
 810e30a:	3708      	adds	r7, #8
 810e30c:	46bd      	mov	sp, r7
 810e30e:	bd80      	pop	{r7, pc}
 810e310:	100321e0 	.word	0x100321e0

0810e314 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e314:	b580      	push	{r7, lr}
 810e316:	b082      	sub	sp, #8
 810e318:	af00      	add	r7, sp, #0
 810e31a:	4603      	mov	r3, r0
 810e31c:	6039      	str	r1, [r7, #0]
 810e31e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 810e320:	79fb      	ldrb	r3, [r7, #7]
 810e322:	2b00      	cmp	r3, #0
 810e324:	d105      	bne.n	810e332 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 810e326:	683a      	ldr	r2, [r7, #0]
 810e328:	4907      	ldr	r1, [pc, #28]	@ (810e348 <USBD_FS_ConfigStrDescriptor+0x34>)
 810e32a:	4808      	ldr	r0, [pc, #32]	@ (810e34c <USBD_FS_ConfigStrDescriptor+0x38>)
 810e32c:	f7ff fd46 	bl	810ddbc <USBD_GetString>
 810e330:	e004      	b.n	810e33c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 810e332:	683a      	ldr	r2, [r7, #0]
 810e334:	4904      	ldr	r1, [pc, #16]	@ (810e348 <USBD_FS_ConfigStrDescriptor+0x34>)
 810e336:	4805      	ldr	r0, [pc, #20]	@ (810e34c <USBD_FS_ConfigStrDescriptor+0x38>)
 810e338:	f7ff fd40 	bl	810ddbc <USBD_GetString>
  }
  return USBD_StrDesc;
 810e33c:	4b02      	ldr	r3, [pc, #8]	@ (810e348 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 810e33e:	4618      	mov	r0, r3
 810e340:	3708      	adds	r7, #8
 810e342:	46bd      	mov	sp, r7
 810e344:	bd80      	pop	{r7, pc}
 810e346:	bf00      	nop
 810e348:	10036278 	.word	0x10036278
 810e34c:	0810ebfc 	.word	0x0810ebfc

0810e350 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e350:	b580      	push	{r7, lr}
 810e352:	b082      	sub	sp, #8
 810e354:	af00      	add	r7, sp, #0
 810e356:	4603      	mov	r3, r0
 810e358:	6039      	str	r1, [r7, #0]
 810e35a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 810e35c:	79fb      	ldrb	r3, [r7, #7]
 810e35e:	2b00      	cmp	r3, #0
 810e360:	d105      	bne.n	810e36e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 810e362:	683a      	ldr	r2, [r7, #0]
 810e364:	4907      	ldr	r1, [pc, #28]	@ (810e384 <USBD_FS_InterfaceStrDescriptor+0x34>)
 810e366:	4808      	ldr	r0, [pc, #32]	@ (810e388 <USBD_FS_InterfaceStrDescriptor+0x38>)
 810e368:	f7ff fd28 	bl	810ddbc <USBD_GetString>
 810e36c:	e004      	b.n	810e378 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 810e36e:	683a      	ldr	r2, [r7, #0]
 810e370:	4904      	ldr	r1, [pc, #16]	@ (810e384 <USBD_FS_InterfaceStrDescriptor+0x34>)
 810e372:	4805      	ldr	r0, [pc, #20]	@ (810e388 <USBD_FS_InterfaceStrDescriptor+0x38>)
 810e374:	f7ff fd22 	bl	810ddbc <USBD_GetString>
  }
  return USBD_StrDesc;
 810e378:	4b02      	ldr	r3, [pc, #8]	@ (810e384 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 810e37a:	4618      	mov	r0, r3
 810e37c:	3708      	adds	r7, #8
 810e37e:	46bd      	mov	sp, r7
 810e380:	bd80      	pop	{r7, pc}
 810e382:	bf00      	nop
 810e384:	10036278 	.word	0x10036278
 810e388:	0810ec08 	.word	0x0810ec08

0810e38c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 810e38c:	b580      	push	{r7, lr}
 810e38e:	b084      	sub	sp, #16
 810e390:	af00      	add	r7, sp, #0

//  deviceserial0 = DEVICE_SERIAL0;
//  deviceserial1 = DEVICE_SERIALW1;
//  deviceserial2 = DEVICE_SERIAL2;

  deviceserial0 = 0xAA;//*(uint32_t *) DEVICE_ID1;
 810e392:	23aa      	movs	r3, #170	@ 0xaa
 810e394:	60fb      	str	r3, [r7, #12]
  deviceserial1 = 0xAA;//*(uint32_t *) DEVICE_ID2;
 810e396:	23aa      	movs	r3, #170	@ 0xaa
 810e398:	60bb      	str	r3, [r7, #8]
  deviceserial2 = 0xAA;//*(uint32_t *) DEVICE_ID3;
 810e39a:	23aa      	movs	r3, #170	@ 0xaa
 810e39c:	607b      	str	r3, [r7, #4]

/* USER CODE END SerialNum */

  deviceserial0 += deviceserial2;
 810e39e:	68fa      	ldr	r2, [r7, #12]
 810e3a0:	687b      	ldr	r3, [r7, #4]
 810e3a2:	4413      	add	r3, r2
 810e3a4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 810e3a6:	68fb      	ldr	r3, [r7, #12]
 810e3a8:	2b00      	cmp	r3, #0
 810e3aa:	d009      	beq.n	810e3c0 <Get_SerialNum+0x34>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 810e3ac:	2208      	movs	r2, #8
 810e3ae:	4906      	ldr	r1, [pc, #24]	@ (810e3c8 <Get_SerialNum+0x3c>)
 810e3b0:	68f8      	ldr	r0, [r7, #12]
 810e3b2:	f000 f80d 	bl	810e3d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 810e3b6:	2204      	movs	r2, #4
 810e3b8:	4904      	ldr	r1, [pc, #16]	@ (810e3cc <Get_SerialNum+0x40>)
 810e3ba:	68b8      	ldr	r0, [r7, #8]
 810e3bc:	f000 f808 	bl	810e3d0 <IntToUnicode>
  }
}
 810e3c0:	bf00      	nop
 810e3c2:	3710      	adds	r7, #16
 810e3c4:	46bd      	mov	sp, r7
 810e3c6:	bd80      	pop	{r7, pc}
 810e3c8:	100321e2 	.word	0x100321e2
 810e3cc:	100321f2 	.word	0x100321f2

0810e3d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 810e3d0:	b480      	push	{r7}
 810e3d2:	b087      	sub	sp, #28
 810e3d4:	af00      	add	r7, sp, #0
 810e3d6:	60f8      	str	r0, [r7, #12]
 810e3d8:	60b9      	str	r1, [r7, #8]
 810e3da:	4613      	mov	r3, r2
 810e3dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 810e3de:	2300      	movs	r3, #0
 810e3e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 810e3e2:	2300      	movs	r3, #0
 810e3e4:	75fb      	strb	r3, [r7, #23]
 810e3e6:	e027      	b.n	810e438 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 810e3e8:	68fb      	ldr	r3, [r7, #12]
 810e3ea:	0f1b      	lsrs	r3, r3, #28
 810e3ec:	2b09      	cmp	r3, #9
 810e3ee:	d80b      	bhi.n	810e408 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 810e3f0:	68fb      	ldr	r3, [r7, #12]
 810e3f2:	0f1b      	lsrs	r3, r3, #28
 810e3f4:	b2da      	uxtb	r2, r3
 810e3f6:	7dfb      	ldrb	r3, [r7, #23]
 810e3f8:	005b      	lsls	r3, r3, #1
 810e3fa:	4619      	mov	r1, r3
 810e3fc:	68bb      	ldr	r3, [r7, #8]
 810e3fe:	440b      	add	r3, r1
 810e400:	3230      	adds	r2, #48	@ 0x30
 810e402:	b2d2      	uxtb	r2, r2
 810e404:	701a      	strb	r2, [r3, #0]
 810e406:	e00a      	b.n	810e41e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 810e408:	68fb      	ldr	r3, [r7, #12]
 810e40a:	0f1b      	lsrs	r3, r3, #28
 810e40c:	b2da      	uxtb	r2, r3
 810e40e:	7dfb      	ldrb	r3, [r7, #23]
 810e410:	005b      	lsls	r3, r3, #1
 810e412:	4619      	mov	r1, r3
 810e414:	68bb      	ldr	r3, [r7, #8]
 810e416:	440b      	add	r3, r1
 810e418:	3237      	adds	r2, #55	@ 0x37
 810e41a:	b2d2      	uxtb	r2, r2
 810e41c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 810e41e:	68fb      	ldr	r3, [r7, #12]
 810e420:	011b      	lsls	r3, r3, #4
 810e422:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 810e424:	7dfb      	ldrb	r3, [r7, #23]
 810e426:	005b      	lsls	r3, r3, #1
 810e428:	3301      	adds	r3, #1
 810e42a:	68ba      	ldr	r2, [r7, #8]
 810e42c:	4413      	add	r3, r2
 810e42e:	2200      	movs	r2, #0
 810e430:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 810e432:	7dfb      	ldrb	r3, [r7, #23]
 810e434:	3301      	adds	r3, #1
 810e436:	75fb      	strb	r3, [r7, #23]
 810e438:	7dfa      	ldrb	r2, [r7, #23]
 810e43a:	79fb      	ldrb	r3, [r7, #7]
 810e43c:	429a      	cmp	r2, r3
 810e43e:	d3d3      	bcc.n	810e3e8 <IntToUnicode+0x18>
  }
}
 810e440:	bf00      	nop
 810e442:	bf00      	nop
 810e444:	371c      	adds	r7, #28
 810e446:	46bd      	mov	sp, r7
 810e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e44c:	4770      	bx	lr
	...

0810e450 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 810e450:	b580      	push	{r7, lr}
 810e452:	b0ba      	sub	sp, #232	@ 0xe8
 810e454:	af00      	add	r7, sp, #0
 810e456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810e458:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810e45c:	2200      	movs	r2, #0
 810e45e:	601a      	str	r2, [r3, #0]
 810e460:	605a      	str	r2, [r3, #4]
 810e462:	609a      	str	r2, [r3, #8]
 810e464:	60da      	str	r2, [r3, #12]
 810e466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810e468:	f107 0310 	add.w	r3, r7, #16
 810e46c:	22c0      	movs	r2, #192	@ 0xc0
 810e46e:	2100      	movs	r1, #0
 810e470:	4618      	mov	r0, r3
 810e472:	f000 fb35 	bl	810eae0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 810e476:	687b      	ldr	r3, [r7, #4]
 810e478:	681b      	ldr	r3, [r3, #0]
 810e47a:	4a34      	ldr	r2, [pc, #208]	@ (810e54c <HAL_PCD_MspInit+0xfc>)
 810e47c:	4293      	cmp	r3, r2
 810e47e:	d160      	bne.n	810e542 <HAL_PCD_MspInit+0xf2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 810e480:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 810e484:	f04f 0300 	mov.w	r3, #0
 810e488:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 810e48c:	2305      	movs	r3, #5
 810e48e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 48;
 810e490:	2330      	movs	r3, #48	@ 0x30
 810e492:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 810e494:	2302      	movs	r3, #2
 810e496:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 5;
 810e498:	2305      	movs	r3, #5
 810e49a:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 810e49c:	2304      	movs	r3, #4
 810e49e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 810e4a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810e4a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 810e4a6:	2300      	movs	r3, #0
 810e4a8:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 810e4aa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810e4ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810e4b2:	f107 0310 	add.w	r3, r7, #16
 810e4b6:	4618      	mov	r0, r3
 810e4b8:	f7f7 fc44 	bl	8105d44 <HAL_RCCEx_PeriphCLKConfig>
 810e4bc:	4603      	mov	r3, r0
 810e4be:	2b00      	cmp	r3, #0
 810e4c0:	d001      	beq.n	810e4c6 <HAL_PCD_MspInit+0x76>
    {
      Error_Handler();
 810e4c2:	f7f3 fe9d 	bl	8102200 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 810e4c6:	f7f7 fa29 	bl	810591c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810e4ca:	4b21      	ldr	r3, [pc, #132]	@ (810e550 <HAL_PCD_MspInit+0x100>)
 810e4cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810e4d0:	4a1f      	ldr	r2, [pc, #124]	@ (810e550 <HAL_PCD_MspInit+0x100>)
 810e4d2:	f043 0301 	orr.w	r3, r3, #1
 810e4d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810e4da:	4b1d      	ldr	r3, [pc, #116]	@ (810e550 <HAL_PCD_MspInit+0x100>)
 810e4dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810e4e0:	f003 0301 	and.w	r3, r3, #1
 810e4e4:	60fb      	str	r3, [r7, #12]
 810e4e6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 810e4e8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 810e4ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810e4f0:	2302      	movs	r3, #2
 810e4f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810e4f6:	2300      	movs	r3, #0
 810e4f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810e4fc:	2303      	movs	r3, #3
 810e4fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 810e502:	230a      	movs	r3, #10
 810e504:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810e508:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810e50c:	4619      	mov	r1, r3
 810e50e:	4811      	ldr	r0, [pc, #68]	@ (810e554 <HAL_PCD_MspInit+0x104>)
 810e510:	f7f4 fb6a 	bl	8102be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 810e514:	4b0e      	ldr	r3, [pc, #56]	@ (810e550 <HAL_PCD_MspInit+0x100>)
 810e516:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810e51a:	4a0d      	ldr	r2, [pc, #52]	@ (810e550 <HAL_PCD_MspInit+0x100>)
 810e51c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 810e520:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810e524:	4b0a      	ldr	r3, [pc, #40]	@ (810e550 <HAL_PCD_MspInit+0x100>)
 810e526:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810e52a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810e52e:	60bb      	str	r3, [r7, #8]
 810e530:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 810e532:	2200      	movs	r2, #0
 810e534:	2100      	movs	r1, #0
 810e536:	2065      	movs	r0, #101	@ 0x65
 810e538:	f7f4 fb1c 	bl	8102b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 810e53c:	2065      	movs	r0, #101	@ 0x65
 810e53e:	f7f4 fb33 	bl	8102ba8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 810e542:	bf00      	nop
 810e544:	37e8      	adds	r7, #232	@ 0xe8
 810e546:	46bd      	mov	sp, r7
 810e548:	bd80      	pop	{r7, pc}
 810e54a:	bf00      	nop
 810e54c:	40080000 	.word	0x40080000
 810e550:	58024400 	.word	0x58024400
 810e554:	58020000 	.word	0x58020000

0810e558 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e558:	b580      	push	{r7, lr}
 810e55a:	b082      	sub	sp, #8
 810e55c:	af00      	add	r7, sp, #0
 810e55e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 810e560:	687b      	ldr	r3, [r7, #4]
 810e562:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 810e566:	687b      	ldr	r3, [r7, #4]
 810e568:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 810e56c:	4619      	mov	r1, r3
 810e56e:	4610      	mov	r0, r2
 810e570:	f7fe fa97 	bl	810caa2 <USBD_LL_SetupStage>
}
 810e574:	bf00      	nop
 810e576:	3708      	adds	r7, #8
 810e578:	46bd      	mov	sp, r7
 810e57a:	bd80      	pop	{r7, pc}

0810e57c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e57c:	b580      	push	{r7, lr}
 810e57e:	b082      	sub	sp, #8
 810e580:	af00      	add	r7, sp, #0
 810e582:	6078      	str	r0, [r7, #4]
 810e584:	460b      	mov	r3, r1
 810e586:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 810e588:	687b      	ldr	r3, [r7, #4]
 810e58a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 810e58e:	78fa      	ldrb	r2, [r7, #3]
 810e590:	6879      	ldr	r1, [r7, #4]
 810e592:	4613      	mov	r3, r2
 810e594:	00db      	lsls	r3, r3, #3
 810e596:	4413      	add	r3, r2
 810e598:	009b      	lsls	r3, r3, #2
 810e59a:	440b      	add	r3, r1
 810e59c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 810e5a0:	681a      	ldr	r2, [r3, #0]
 810e5a2:	78fb      	ldrb	r3, [r7, #3]
 810e5a4:	4619      	mov	r1, r3
 810e5a6:	f7fe fad1 	bl	810cb4c <USBD_LL_DataOutStage>
}
 810e5aa:	bf00      	nop
 810e5ac:	3708      	adds	r7, #8
 810e5ae:	46bd      	mov	sp, r7
 810e5b0:	bd80      	pop	{r7, pc}

0810e5b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e5b2:	b580      	push	{r7, lr}
 810e5b4:	b082      	sub	sp, #8
 810e5b6:	af00      	add	r7, sp, #0
 810e5b8:	6078      	str	r0, [r7, #4]
 810e5ba:	460b      	mov	r3, r1
 810e5bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 810e5be:	687b      	ldr	r3, [r7, #4]
 810e5c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 810e5c4:	78fa      	ldrb	r2, [r7, #3]
 810e5c6:	6879      	ldr	r1, [r7, #4]
 810e5c8:	4613      	mov	r3, r2
 810e5ca:	00db      	lsls	r3, r3, #3
 810e5cc:	4413      	add	r3, r2
 810e5ce:	009b      	lsls	r3, r3, #2
 810e5d0:	440b      	add	r3, r1
 810e5d2:	3320      	adds	r3, #32
 810e5d4:	681a      	ldr	r2, [r3, #0]
 810e5d6:	78fb      	ldrb	r3, [r7, #3]
 810e5d8:	4619      	mov	r1, r3
 810e5da:	f7fe fb6a 	bl	810ccb2 <USBD_LL_DataInStage>
}
 810e5de:	bf00      	nop
 810e5e0:	3708      	adds	r7, #8
 810e5e2:	46bd      	mov	sp, r7
 810e5e4:	bd80      	pop	{r7, pc}

0810e5e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e5e6:	b580      	push	{r7, lr}
 810e5e8:	b082      	sub	sp, #8
 810e5ea:	af00      	add	r7, sp, #0
 810e5ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 810e5ee:	687b      	ldr	r3, [r7, #4]
 810e5f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e5f4:	4618      	mov	r0, r3
 810e5f6:	f7fe fca4 	bl	810cf42 <USBD_LL_SOF>
}
 810e5fa:	bf00      	nop
 810e5fc:	3708      	adds	r7, #8
 810e5fe:	46bd      	mov	sp, r7
 810e600:	bd80      	pop	{r7, pc}

0810e602 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e602:	b580      	push	{r7, lr}
 810e604:	b084      	sub	sp, #16
 810e606:	af00      	add	r7, sp, #0
 810e608:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 810e60a:	2301      	movs	r3, #1
 810e60c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 810e60e:	687b      	ldr	r3, [r7, #4]
 810e610:	79db      	ldrb	r3, [r3, #7]
 810e612:	2b00      	cmp	r3, #0
 810e614:	d102      	bne.n	810e61c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 810e616:	2300      	movs	r3, #0
 810e618:	73fb      	strb	r3, [r7, #15]
 810e61a:	e008      	b.n	810e62e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 810e61c:	687b      	ldr	r3, [r7, #4]
 810e61e:	79db      	ldrb	r3, [r3, #7]
 810e620:	2b02      	cmp	r3, #2
 810e622:	d102      	bne.n	810e62a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 810e624:	2301      	movs	r3, #1
 810e626:	73fb      	strb	r3, [r7, #15]
 810e628:	e001      	b.n	810e62e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 810e62a:	f7f3 fde9 	bl	8102200 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 810e62e:	687b      	ldr	r3, [r7, #4]
 810e630:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e634:	7bfa      	ldrb	r2, [r7, #15]
 810e636:	4611      	mov	r1, r2
 810e638:	4618      	mov	r0, r3
 810e63a:	f7fe fc3e 	bl	810ceba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 810e63e:	687b      	ldr	r3, [r7, #4]
 810e640:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e644:	4618      	mov	r0, r3
 810e646:	f7fe fbe6 	bl	810ce16 <USBD_LL_Reset>
}
 810e64a:	bf00      	nop
 810e64c:	3710      	adds	r7, #16
 810e64e:	46bd      	mov	sp, r7
 810e650:	bd80      	pop	{r7, pc}
	...

0810e654 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e654:	b580      	push	{r7, lr}
 810e656:	b082      	sub	sp, #8
 810e658:	af00      	add	r7, sp, #0
 810e65a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 810e65c:	687b      	ldr	r3, [r7, #4]
 810e65e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e662:	4618      	mov	r0, r3
 810e664:	f7fe fc39 	bl	810ceda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 810e668:	687b      	ldr	r3, [r7, #4]
 810e66a:	681b      	ldr	r3, [r3, #0]
 810e66c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810e670:	681b      	ldr	r3, [r3, #0]
 810e672:	687a      	ldr	r2, [r7, #4]
 810e674:	6812      	ldr	r2, [r2, #0]
 810e676:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810e67a:	f043 0301 	orr.w	r3, r3, #1
 810e67e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 810e680:	687b      	ldr	r3, [r7, #4]
 810e682:	7adb      	ldrb	r3, [r3, #11]
 810e684:	2b00      	cmp	r3, #0
 810e686:	d005      	beq.n	810e694 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 810e688:	4b04      	ldr	r3, [pc, #16]	@ (810e69c <HAL_PCD_SuspendCallback+0x48>)
 810e68a:	691b      	ldr	r3, [r3, #16]
 810e68c:	4a03      	ldr	r2, [pc, #12]	@ (810e69c <HAL_PCD_SuspendCallback+0x48>)
 810e68e:	f043 0306 	orr.w	r3, r3, #6
 810e692:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 810e694:	bf00      	nop
 810e696:	3708      	adds	r7, #8
 810e698:	46bd      	mov	sp, r7
 810e69a:	bd80      	pop	{r7, pc}
 810e69c:	e000ed00 	.word	0xe000ed00

0810e6a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e6a0:	b580      	push	{r7, lr}
 810e6a2:	b082      	sub	sp, #8
 810e6a4:	af00      	add	r7, sp, #0
 810e6a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 810e6a8:	687b      	ldr	r3, [r7, #4]
 810e6aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e6ae:	4618      	mov	r0, r3
 810e6b0:	f7fe fc2f 	bl	810cf12 <USBD_LL_Resume>
}
 810e6b4:	bf00      	nop
 810e6b6:	3708      	adds	r7, #8
 810e6b8:	46bd      	mov	sp, r7
 810e6ba:	bd80      	pop	{r7, pc}

0810e6bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e6bc:	b580      	push	{r7, lr}
 810e6be:	b082      	sub	sp, #8
 810e6c0:	af00      	add	r7, sp, #0
 810e6c2:	6078      	str	r0, [r7, #4]
 810e6c4:	460b      	mov	r3, r1
 810e6c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 810e6c8:	687b      	ldr	r3, [r7, #4]
 810e6ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e6ce:	78fa      	ldrb	r2, [r7, #3]
 810e6d0:	4611      	mov	r1, r2
 810e6d2:	4618      	mov	r0, r3
 810e6d4:	f7fe fc87 	bl	810cfe6 <USBD_LL_IsoOUTIncomplete>
}
 810e6d8:	bf00      	nop
 810e6da:	3708      	adds	r7, #8
 810e6dc:	46bd      	mov	sp, r7
 810e6de:	bd80      	pop	{r7, pc}

0810e6e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e6e0:	b580      	push	{r7, lr}
 810e6e2:	b082      	sub	sp, #8
 810e6e4:	af00      	add	r7, sp, #0
 810e6e6:	6078      	str	r0, [r7, #4]
 810e6e8:	460b      	mov	r3, r1
 810e6ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 810e6ec:	687b      	ldr	r3, [r7, #4]
 810e6ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e6f2:	78fa      	ldrb	r2, [r7, #3]
 810e6f4:	4611      	mov	r1, r2
 810e6f6:	4618      	mov	r0, r3
 810e6f8:	f7fe fc43 	bl	810cf82 <USBD_LL_IsoINIncomplete>
}
 810e6fc:	bf00      	nop
 810e6fe:	3708      	adds	r7, #8
 810e700:	46bd      	mov	sp, r7
 810e702:	bd80      	pop	{r7, pc}

0810e704 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e704:	b580      	push	{r7, lr}
 810e706:	b082      	sub	sp, #8
 810e708:	af00      	add	r7, sp, #0
 810e70a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 810e70c:	687b      	ldr	r3, [r7, #4]
 810e70e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e712:	4618      	mov	r0, r3
 810e714:	f7fe fc99 	bl	810d04a <USBD_LL_DevConnected>
}
 810e718:	bf00      	nop
 810e71a:	3708      	adds	r7, #8
 810e71c:	46bd      	mov	sp, r7
 810e71e:	bd80      	pop	{r7, pc}

0810e720 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e720:	b580      	push	{r7, lr}
 810e722:	b082      	sub	sp, #8
 810e724:	af00      	add	r7, sp, #0
 810e726:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 810e728:	687b      	ldr	r3, [r7, #4]
 810e72a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e72e:	4618      	mov	r0, r3
 810e730:	f7fe fc96 	bl	810d060 <USBD_LL_DevDisconnected>
}
 810e734:	bf00      	nop
 810e736:	3708      	adds	r7, #8
 810e738:	46bd      	mov	sp, r7
 810e73a:	bd80      	pop	{r7, pc}

0810e73c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 810e73c:	b580      	push	{r7, lr}
 810e73e:	b082      	sub	sp, #8
 810e740:	af00      	add	r7, sp, #0
 810e742:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 810e744:	687b      	ldr	r3, [r7, #4]
 810e746:	781b      	ldrb	r3, [r3, #0]
 810e748:	2b00      	cmp	r3, #0
 810e74a:	d13e      	bne.n	810e7ca <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 810e74c:	4a21      	ldr	r2, [pc, #132]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e74e:	687b      	ldr	r3, [r7, #4]
 810e750:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 810e754:	687b      	ldr	r3, [r7, #4]
 810e756:	4a1f      	ldr	r2, [pc, #124]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e758:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 810e75c:	4b1d      	ldr	r3, [pc, #116]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e75e:	4a1e      	ldr	r2, [pc, #120]	@ (810e7d8 <USBD_LL_Init+0x9c>)
 810e760:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 810e762:	4b1c      	ldr	r3, [pc, #112]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e764:	2209      	movs	r2, #9
 810e766:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 810e768:	4b1a      	ldr	r3, [pc, #104]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e76a:	2202      	movs	r2, #2
 810e76c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 810e76e:	4b19      	ldr	r3, [pc, #100]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e770:	2201      	movs	r2, #1
 810e772:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 810e774:	4b17      	ldr	r3, [pc, #92]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e776:	2202      	movs	r2, #2
 810e778:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 810e77a:	4b16      	ldr	r3, [pc, #88]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e77c:	2200      	movs	r2, #0
 810e77e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 810e780:	4b14      	ldr	r3, [pc, #80]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e782:	2200      	movs	r2, #0
 810e784:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 810e786:	4b13      	ldr	r3, [pc, #76]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e788:	2200      	movs	r2, #0
 810e78a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 810e78c:	4b11      	ldr	r3, [pc, #68]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e78e:	2200      	movs	r2, #0
 810e790:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 810e792:	4b10      	ldr	r3, [pc, #64]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e794:	2200      	movs	r2, #0
 810e796:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 810e798:	4b0e      	ldr	r3, [pc, #56]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e79a:	2200      	movs	r2, #0
 810e79c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 810e79e:	480d      	ldr	r0, [pc, #52]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e7a0:	f7f5 fd94 	bl	81042cc <HAL_PCD_Init>
 810e7a4:	4603      	mov	r3, r0
 810e7a6:	2b00      	cmp	r3, #0
 810e7a8:	d001      	beq.n	810e7ae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 810e7aa:	f7f3 fd29 	bl	8102200 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 810e7ae:	2180      	movs	r1, #128	@ 0x80
 810e7b0:	4808      	ldr	r0, [pc, #32]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e7b2:	f7f6 ffea 	bl	810578a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 810e7b6:	2240      	movs	r2, #64	@ 0x40
 810e7b8:	2100      	movs	r1, #0
 810e7ba:	4806      	ldr	r0, [pc, #24]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e7bc:	f7f6 ff9e 	bl	81056fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 810e7c0:	2280      	movs	r2, #128	@ 0x80
 810e7c2:	2101      	movs	r1, #1
 810e7c4:	4803      	ldr	r0, [pc, #12]	@ (810e7d4 <USBD_LL_Init+0x98>)
 810e7c6:	f7f6 ff99 	bl	81056fc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 810e7ca:	2300      	movs	r3, #0
}
 810e7cc:	4618      	mov	r0, r3
 810e7ce:	3708      	adds	r7, #8
 810e7d0:	46bd      	mov	sp, r7
 810e7d2:	bd80      	pop	{r7, pc}
 810e7d4:	10036478 	.word	0x10036478
 810e7d8:	40080000 	.word	0x40080000

0810e7dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 810e7dc:	b580      	push	{r7, lr}
 810e7de:	b084      	sub	sp, #16
 810e7e0:	af00      	add	r7, sp, #0
 810e7e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e7e4:	2300      	movs	r3, #0
 810e7e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e7e8:	2300      	movs	r3, #0
 810e7ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 810e7ec:	687b      	ldr	r3, [r7, #4]
 810e7ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e7f2:	4618      	mov	r0, r3
 810e7f4:	f7f5 fe76 	bl	81044e4 <HAL_PCD_Start>
 810e7f8:	4603      	mov	r3, r0
 810e7fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e7fc:	7bfb      	ldrb	r3, [r7, #15]
 810e7fe:	4618      	mov	r0, r3
 810e800:	f000 f942 	bl	810ea88 <USBD_Get_USB_Status>
 810e804:	4603      	mov	r3, r0
 810e806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e808:	7bbb      	ldrb	r3, [r7, #14]
}
 810e80a:	4618      	mov	r0, r3
 810e80c:	3710      	adds	r7, #16
 810e80e:	46bd      	mov	sp, r7
 810e810:	bd80      	pop	{r7, pc}

0810e812 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 810e812:	b580      	push	{r7, lr}
 810e814:	b084      	sub	sp, #16
 810e816:	af00      	add	r7, sp, #0
 810e818:	6078      	str	r0, [r7, #4]
 810e81a:	4608      	mov	r0, r1
 810e81c:	4611      	mov	r1, r2
 810e81e:	461a      	mov	r2, r3
 810e820:	4603      	mov	r3, r0
 810e822:	70fb      	strb	r3, [r7, #3]
 810e824:	460b      	mov	r3, r1
 810e826:	70bb      	strb	r3, [r7, #2]
 810e828:	4613      	mov	r3, r2
 810e82a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e82c:	2300      	movs	r3, #0
 810e82e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e830:	2300      	movs	r3, #0
 810e832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 810e834:	687b      	ldr	r3, [r7, #4]
 810e836:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 810e83a:	78bb      	ldrb	r3, [r7, #2]
 810e83c:	883a      	ldrh	r2, [r7, #0]
 810e83e:	78f9      	ldrb	r1, [r7, #3]
 810e840:	f7f6 fb77 	bl	8104f32 <HAL_PCD_EP_Open>
 810e844:	4603      	mov	r3, r0
 810e846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e848:	7bfb      	ldrb	r3, [r7, #15]
 810e84a:	4618      	mov	r0, r3
 810e84c:	f000 f91c 	bl	810ea88 <USBD_Get_USB_Status>
 810e850:	4603      	mov	r3, r0
 810e852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e854:	7bbb      	ldrb	r3, [r7, #14]
}
 810e856:	4618      	mov	r0, r3
 810e858:	3710      	adds	r7, #16
 810e85a:	46bd      	mov	sp, r7
 810e85c:	bd80      	pop	{r7, pc}

0810e85e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810e85e:	b580      	push	{r7, lr}
 810e860:	b084      	sub	sp, #16
 810e862:	af00      	add	r7, sp, #0
 810e864:	6078      	str	r0, [r7, #4]
 810e866:	460b      	mov	r3, r1
 810e868:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e86a:	2300      	movs	r3, #0
 810e86c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e86e:	2300      	movs	r3, #0
 810e870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 810e872:	687b      	ldr	r3, [r7, #4]
 810e874:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e878:	78fa      	ldrb	r2, [r7, #3]
 810e87a:	4611      	mov	r1, r2
 810e87c:	4618      	mov	r0, r3
 810e87e:	f7f6 fbc2 	bl	8105006 <HAL_PCD_EP_Close>
 810e882:	4603      	mov	r3, r0
 810e884:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e886:	7bfb      	ldrb	r3, [r7, #15]
 810e888:	4618      	mov	r0, r3
 810e88a:	f000 f8fd 	bl	810ea88 <USBD_Get_USB_Status>
 810e88e:	4603      	mov	r3, r0
 810e890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e892:	7bbb      	ldrb	r3, [r7, #14]
}
 810e894:	4618      	mov	r0, r3
 810e896:	3710      	adds	r7, #16
 810e898:	46bd      	mov	sp, r7
 810e89a:	bd80      	pop	{r7, pc}

0810e89c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810e89c:	b580      	push	{r7, lr}
 810e89e:	b084      	sub	sp, #16
 810e8a0:	af00      	add	r7, sp, #0
 810e8a2:	6078      	str	r0, [r7, #4]
 810e8a4:	460b      	mov	r3, r1
 810e8a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e8a8:	2300      	movs	r3, #0
 810e8aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e8ac:	2300      	movs	r3, #0
 810e8ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 810e8b0:	687b      	ldr	r3, [r7, #4]
 810e8b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e8b6:	78fa      	ldrb	r2, [r7, #3]
 810e8b8:	4611      	mov	r1, r2
 810e8ba:	4618      	mov	r0, r3
 810e8bc:	f7f6 fc7a 	bl	81051b4 <HAL_PCD_EP_SetStall>
 810e8c0:	4603      	mov	r3, r0
 810e8c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e8c4:	7bfb      	ldrb	r3, [r7, #15]
 810e8c6:	4618      	mov	r0, r3
 810e8c8:	f000 f8de 	bl	810ea88 <USBD_Get_USB_Status>
 810e8cc:	4603      	mov	r3, r0
 810e8ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e8d0:	7bbb      	ldrb	r3, [r7, #14]
}
 810e8d2:	4618      	mov	r0, r3
 810e8d4:	3710      	adds	r7, #16
 810e8d6:	46bd      	mov	sp, r7
 810e8d8:	bd80      	pop	{r7, pc}

0810e8da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810e8da:	b580      	push	{r7, lr}
 810e8dc:	b084      	sub	sp, #16
 810e8de:	af00      	add	r7, sp, #0
 810e8e0:	6078      	str	r0, [r7, #4]
 810e8e2:	460b      	mov	r3, r1
 810e8e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e8e6:	2300      	movs	r3, #0
 810e8e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e8ea:	2300      	movs	r3, #0
 810e8ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 810e8ee:	687b      	ldr	r3, [r7, #4]
 810e8f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e8f4:	78fa      	ldrb	r2, [r7, #3]
 810e8f6:	4611      	mov	r1, r2
 810e8f8:	4618      	mov	r0, r3
 810e8fa:	f7f6 fcbe 	bl	810527a <HAL_PCD_EP_ClrStall>
 810e8fe:	4603      	mov	r3, r0
 810e900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e902:	7bfb      	ldrb	r3, [r7, #15]
 810e904:	4618      	mov	r0, r3
 810e906:	f000 f8bf 	bl	810ea88 <USBD_Get_USB_Status>
 810e90a:	4603      	mov	r3, r0
 810e90c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e90e:	7bbb      	ldrb	r3, [r7, #14]
}
 810e910:	4618      	mov	r0, r3
 810e912:	3710      	adds	r7, #16
 810e914:	46bd      	mov	sp, r7
 810e916:	bd80      	pop	{r7, pc}

0810e918 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810e918:	b480      	push	{r7}
 810e91a:	b085      	sub	sp, #20
 810e91c:	af00      	add	r7, sp, #0
 810e91e:	6078      	str	r0, [r7, #4]
 810e920:	460b      	mov	r3, r1
 810e922:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 810e924:	687b      	ldr	r3, [r7, #4]
 810e926:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e92a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 810e92c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 810e930:	2b00      	cmp	r3, #0
 810e932:	da0b      	bge.n	810e94c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 810e934:	78fb      	ldrb	r3, [r7, #3]
 810e936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 810e93a:	68f9      	ldr	r1, [r7, #12]
 810e93c:	4613      	mov	r3, r2
 810e93e:	00db      	lsls	r3, r3, #3
 810e940:	4413      	add	r3, r2
 810e942:	009b      	lsls	r3, r3, #2
 810e944:	440b      	add	r3, r1
 810e946:	3316      	adds	r3, #22
 810e948:	781b      	ldrb	r3, [r3, #0]
 810e94a:	e00b      	b.n	810e964 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 810e94c:	78fb      	ldrb	r3, [r7, #3]
 810e94e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 810e952:	68f9      	ldr	r1, [r7, #12]
 810e954:	4613      	mov	r3, r2
 810e956:	00db      	lsls	r3, r3, #3
 810e958:	4413      	add	r3, r2
 810e95a:	009b      	lsls	r3, r3, #2
 810e95c:	440b      	add	r3, r1
 810e95e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 810e962:	781b      	ldrb	r3, [r3, #0]
  }
}
 810e964:	4618      	mov	r0, r3
 810e966:	3714      	adds	r7, #20
 810e968:	46bd      	mov	sp, r7
 810e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e96e:	4770      	bx	lr

0810e970 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 810e970:	b580      	push	{r7, lr}
 810e972:	b084      	sub	sp, #16
 810e974:	af00      	add	r7, sp, #0
 810e976:	6078      	str	r0, [r7, #4]
 810e978:	460b      	mov	r3, r1
 810e97a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e97c:	2300      	movs	r3, #0
 810e97e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e980:	2300      	movs	r3, #0
 810e982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 810e984:	687b      	ldr	r3, [r7, #4]
 810e986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e98a:	78fa      	ldrb	r2, [r7, #3]
 810e98c:	4611      	mov	r1, r2
 810e98e:	4618      	mov	r0, r3
 810e990:	f7f6 faab 	bl	8104eea <HAL_PCD_SetAddress>
 810e994:	4603      	mov	r3, r0
 810e996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e998:	7bfb      	ldrb	r3, [r7, #15]
 810e99a:	4618      	mov	r0, r3
 810e99c:	f000 f874 	bl	810ea88 <USBD_Get_USB_Status>
 810e9a0:	4603      	mov	r3, r0
 810e9a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e9a4:	7bbb      	ldrb	r3, [r7, #14]
}
 810e9a6:	4618      	mov	r0, r3
 810e9a8:	3710      	adds	r7, #16
 810e9aa:	46bd      	mov	sp, r7
 810e9ac:	bd80      	pop	{r7, pc}

0810e9ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 810e9ae:	b580      	push	{r7, lr}
 810e9b0:	b086      	sub	sp, #24
 810e9b2:	af00      	add	r7, sp, #0
 810e9b4:	60f8      	str	r0, [r7, #12]
 810e9b6:	607a      	str	r2, [r7, #4]
 810e9b8:	603b      	str	r3, [r7, #0]
 810e9ba:	460b      	mov	r3, r1
 810e9bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e9be:	2300      	movs	r3, #0
 810e9c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e9c2:	2300      	movs	r3, #0
 810e9c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 810e9c6:	68fb      	ldr	r3, [r7, #12]
 810e9c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 810e9cc:	7af9      	ldrb	r1, [r7, #11]
 810e9ce:	683b      	ldr	r3, [r7, #0]
 810e9d0:	687a      	ldr	r2, [r7, #4]
 810e9d2:	f7f6 fbb5 	bl	8105140 <HAL_PCD_EP_Transmit>
 810e9d6:	4603      	mov	r3, r0
 810e9d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e9da:	7dfb      	ldrb	r3, [r7, #23]
 810e9dc:	4618      	mov	r0, r3
 810e9de:	f000 f853 	bl	810ea88 <USBD_Get_USB_Status>
 810e9e2:	4603      	mov	r3, r0
 810e9e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 810e9e6:	7dbb      	ldrb	r3, [r7, #22]
}
 810e9e8:	4618      	mov	r0, r3
 810e9ea:	3718      	adds	r7, #24
 810e9ec:	46bd      	mov	sp, r7
 810e9ee:	bd80      	pop	{r7, pc}

0810e9f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 810e9f0:	b580      	push	{r7, lr}
 810e9f2:	b086      	sub	sp, #24
 810e9f4:	af00      	add	r7, sp, #0
 810e9f6:	60f8      	str	r0, [r7, #12]
 810e9f8:	607a      	str	r2, [r7, #4]
 810e9fa:	603b      	str	r3, [r7, #0]
 810e9fc:	460b      	mov	r3, r1
 810e9fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810ea00:	2300      	movs	r3, #0
 810ea02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810ea04:	2300      	movs	r3, #0
 810ea06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 810ea08:	68fb      	ldr	r3, [r7, #12]
 810ea0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 810ea0e:	7af9      	ldrb	r1, [r7, #11]
 810ea10:	683b      	ldr	r3, [r7, #0]
 810ea12:	687a      	ldr	r2, [r7, #4]
 810ea14:	f7f6 fb41 	bl	810509a <HAL_PCD_EP_Receive>
 810ea18:	4603      	mov	r3, r0
 810ea1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810ea1c:	7dfb      	ldrb	r3, [r7, #23]
 810ea1e:	4618      	mov	r0, r3
 810ea20:	f000 f832 	bl	810ea88 <USBD_Get_USB_Status>
 810ea24:	4603      	mov	r3, r0
 810ea26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 810ea28:	7dbb      	ldrb	r3, [r7, #22]
}
 810ea2a:	4618      	mov	r0, r3
 810ea2c:	3718      	adds	r7, #24
 810ea2e:	46bd      	mov	sp, r7
 810ea30:	bd80      	pop	{r7, pc}

0810ea32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810ea32:	b580      	push	{r7, lr}
 810ea34:	b082      	sub	sp, #8
 810ea36:	af00      	add	r7, sp, #0
 810ea38:	6078      	str	r0, [r7, #4]
 810ea3a:	460b      	mov	r3, r1
 810ea3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 810ea3e:	687b      	ldr	r3, [r7, #4]
 810ea40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810ea44:	78fa      	ldrb	r2, [r7, #3]
 810ea46:	4611      	mov	r1, r2
 810ea48:	4618      	mov	r0, r3
 810ea4a:	f7f6 fb61 	bl	8105110 <HAL_PCD_EP_GetRxCount>
 810ea4e:	4603      	mov	r3, r0
}
 810ea50:	4618      	mov	r0, r3
 810ea52:	3708      	adds	r7, #8
 810ea54:	46bd      	mov	sp, r7
 810ea56:	bd80      	pop	{r7, pc}

0810ea58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 810ea58:	b480      	push	{r7}
 810ea5a:	b083      	sub	sp, #12
 810ea5c:	af00      	add	r7, sp, #0
 810ea5e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 810ea60:	4b03      	ldr	r3, [pc, #12]	@ (810ea70 <USBD_static_malloc+0x18>)
}
 810ea62:	4618      	mov	r0, r3
 810ea64:	370c      	adds	r7, #12
 810ea66:	46bd      	mov	sp, r7
 810ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea6c:	4770      	bx	lr
 810ea6e:	bf00      	nop
 810ea70:	1003695c 	.word	0x1003695c

0810ea74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 810ea74:	b480      	push	{r7}
 810ea76:	b083      	sub	sp, #12
 810ea78:	af00      	add	r7, sp, #0
 810ea7a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 810ea7c:	bf00      	nop
 810ea7e:	370c      	adds	r7, #12
 810ea80:	46bd      	mov	sp, r7
 810ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea86:	4770      	bx	lr

0810ea88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 810ea88:	b480      	push	{r7}
 810ea8a:	b085      	sub	sp, #20
 810ea8c:	af00      	add	r7, sp, #0
 810ea8e:	4603      	mov	r3, r0
 810ea90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810ea92:	2300      	movs	r3, #0
 810ea94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 810ea96:	79fb      	ldrb	r3, [r7, #7]
 810ea98:	2b03      	cmp	r3, #3
 810ea9a:	d817      	bhi.n	810eacc <USBD_Get_USB_Status+0x44>
 810ea9c:	a201      	add	r2, pc, #4	@ (adr r2, 810eaa4 <USBD_Get_USB_Status+0x1c>)
 810ea9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810eaa2:	bf00      	nop
 810eaa4:	0810eab5 	.word	0x0810eab5
 810eaa8:	0810eabb 	.word	0x0810eabb
 810eaac:	0810eac1 	.word	0x0810eac1
 810eab0:	0810eac7 	.word	0x0810eac7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 810eab4:	2300      	movs	r3, #0
 810eab6:	73fb      	strb	r3, [r7, #15]
    break;
 810eab8:	e00b      	b.n	810ead2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 810eaba:	2303      	movs	r3, #3
 810eabc:	73fb      	strb	r3, [r7, #15]
    break;
 810eabe:	e008      	b.n	810ead2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 810eac0:	2301      	movs	r3, #1
 810eac2:	73fb      	strb	r3, [r7, #15]
    break;
 810eac4:	e005      	b.n	810ead2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 810eac6:	2303      	movs	r3, #3
 810eac8:	73fb      	strb	r3, [r7, #15]
    break;
 810eaca:	e002      	b.n	810ead2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 810eacc:	2303      	movs	r3, #3
 810eace:	73fb      	strb	r3, [r7, #15]
    break;
 810ead0:	bf00      	nop
  }
  return usb_status;
 810ead2:	7bfb      	ldrb	r3, [r7, #15]
}
 810ead4:	4618      	mov	r0, r3
 810ead6:	3714      	adds	r7, #20
 810ead8:	46bd      	mov	sp, r7
 810eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eade:	4770      	bx	lr

0810eae0 <memset>:
 810eae0:	4402      	add	r2, r0
 810eae2:	4603      	mov	r3, r0
 810eae4:	4293      	cmp	r3, r2
 810eae6:	d100      	bne.n	810eaea <memset+0xa>
 810eae8:	4770      	bx	lr
 810eaea:	f803 1b01 	strb.w	r1, [r3], #1
 810eaee:	e7f9      	b.n	810eae4 <memset+0x4>

0810eaf0 <strncpy>:
 810eaf0:	b510      	push	{r4, lr}
 810eaf2:	3901      	subs	r1, #1
 810eaf4:	4603      	mov	r3, r0
 810eaf6:	b132      	cbz	r2, 810eb06 <strncpy+0x16>
 810eaf8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 810eafc:	f803 4b01 	strb.w	r4, [r3], #1
 810eb00:	3a01      	subs	r2, #1
 810eb02:	2c00      	cmp	r4, #0
 810eb04:	d1f7      	bne.n	810eaf6 <strncpy+0x6>
 810eb06:	441a      	add	r2, r3
 810eb08:	2100      	movs	r1, #0
 810eb0a:	4293      	cmp	r3, r2
 810eb0c:	d100      	bne.n	810eb10 <strncpy+0x20>
 810eb0e:	bd10      	pop	{r4, pc}
 810eb10:	f803 1b01 	strb.w	r1, [r3], #1
 810eb14:	e7f9      	b.n	810eb0a <strncpy+0x1a>
	...

0810eb18 <__libc_init_array>:
 810eb18:	b570      	push	{r4, r5, r6, lr}
 810eb1a:	4d0d      	ldr	r5, [pc, #52]	@ (810eb50 <__libc_init_array+0x38>)
 810eb1c:	4c0d      	ldr	r4, [pc, #52]	@ (810eb54 <__libc_init_array+0x3c>)
 810eb1e:	1b64      	subs	r4, r4, r5
 810eb20:	10a4      	asrs	r4, r4, #2
 810eb22:	2600      	movs	r6, #0
 810eb24:	42a6      	cmp	r6, r4
 810eb26:	d109      	bne.n	810eb3c <__libc_init_array+0x24>
 810eb28:	4d0b      	ldr	r5, [pc, #44]	@ (810eb58 <__libc_init_array+0x40>)
 810eb2a:	4c0c      	ldr	r4, [pc, #48]	@ (810eb5c <__libc_init_array+0x44>)
 810eb2c:	f000 f826 	bl	810eb7c <_init>
 810eb30:	1b64      	subs	r4, r4, r5
 810eb32:	10a4      	asrs	r4, r4, #2
 810eb34:	2600      	movs	r6, #0
 810eb36:	42a6      	cmp	r6, r4
 810eb38:	d105      	bne.n	810eb46 <__libc_init_array+0x2e>
 810eb3a:	bd70      	pop	{r4, r5, r6, pc}
 810eb3c:	f855 3b04 	ldr.w	r3, [r5], #4
 810eb40:	4798      	blx	r3
 810eb42:	3601      	adds	r6, #1
 810eb44:	e7ee      	b.n	810eb24 <__libc_init_array+0xc>
 810eb46:	f855 3b04 	ldr.w	r3, [r5], #4
 810eb4a:	4798      	blx	r3
 810eb4c:	3601      	adds	r6, #1
 810eb4e:	e7f2      	b.n	810eb36 <__libc_init_array+0x1e>
 810eb50:	0810ec80 	.word	0x0810ec80
 810eb54:	0810ec80 	.word	0x0810ec80
 810eb58:	0810ec80 	.word	0x0810ec80
 810eb5c:	0810ec84 	.word	0x0810ec84

0810eb60 <memcpy>:
 810eb60:	440a      	add	r2, r1
 810eb62:	4291      	cmp	r1, r2
 810eb64:	f100 33ff 	add.w	r3, r0, #4294967295
 810eb68:	d100      	bne.n	810eb6c <memcpy+0xc>
 810eb6a:	4770      	bx	lr
 810eb6c:	b510      	push	{r4, lr}
 810eb6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810eb72:	f803 4f01 	strb.w	r4, [r3, #1]!
 810eb76:	4291      	cmp	r1, r2
 810eb78:	d1f9      	bne.n	810eb6e <memcpy+0xe>
 810eb7a:	bd10      	pop	{r4, pc}

0810eb7c <_init>:
 810eb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810eb7e:	bf00      	nop
 810eb80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810eb82:	bc08      	pop	{r3}
 810eb84:	469e      	mov	lr, r3
 810eb86:	4770      	bx	lr

0810eb88 <_fini>:
 810eb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810eb8a:	bf00      	nop
 810eb8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810eb8e:	bc08      	pop	{r3}
 810eb90:	469e      	mov	lr, r3
 810eb92:	4770      	bx	lr
